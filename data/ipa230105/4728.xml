<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004729A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004729</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364842</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>47</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>49</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>242</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>47</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>49</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>242</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">UNIVERSAL DATA LANGUAGE TRANSLATOR</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>COLLIBRA NV</orgname><address><city>BRUSSELS</city><country>BE</country></address></addressbook><residence><country>BE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Cushman, II</last-name><first-name>James B.</first-name><address><city>Longboat Key</city><state>FL</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Joshi</last-name><first-name>Aurko</first-name><address><city>West Bloomfield</city><state>MI</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Goel</last-name><first-name>Satyender</first-name><address><city>Chicago</city><state>IL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The present disclosure is directed to a universal data language (UDL) translator. Specifically, the systems and methods disclosed enable input data from a variety of sources to be translated into a UDL that can be consistently analyzed and compared against other sources of data. For example, an entity may upload input data that has a plurality of data terms and definitions (e.g., header column in a spreadsheet). These terms may be duplicative and/or inaccurate with respect to the underlying data. If the entity wishes to compare and transact data within a data marketplace, the entity may not fully comprehend what data it is missing and/or what data another entity may have to offer for trade. To remedy this problem of business semantic management, the present invention discloses steps for creating a UDL and a UDL translator so that any input data can be translated to UDL.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="182.12mm" wi="158.75mm" file="US20230004729A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="207.77mm" wi="144.44mm" orientation="landscape" file="US20230004729A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="213.28mm" wi="147.49mm" orientation="landscape" file="US20230004729A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="222.67mm" wi="163.58mm" file="US20230004729A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="220.39mm" wi="86.36mm" file="US20230004729A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="241.55mm" wi="167.39mm" orientation="landscape" file="US20230004729A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="209.55mm" wi="149.69mm" orientation="landscape" file="US20230004729A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="187.28mm" wi="125.98mm" file="US20230004729A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="163.91mm" wi="151.81mm" orientation="landscape" file="US20230004729A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading><p id="p-0002" num="0001">This application is related to U.S. patent application Ser. No. 16/844,927, titled &#x201c;CONTEXT DRIVEN DATA PROFILING&#x201d;; U.S. patent application Ser. No. 16/776,293 titled &#x201c;SYSTEMS AND METHOD OF CONTEXTUAL DATA MASKING FOR PRIVATE AND SECURE DATA LINKAGE&#x201d;; U.S. patent application Ser. No. 17/103,751, titled &#x201c;SYSTEMS AND METHODS FOR UNIVERSAL REFERENCE SOURCE CREATION AND ACCURATE SECURE MATCHING&#x201d;; U.S. patent application Ser. No. 17/103,720, titled &#x201c;SYSTEMS AND METHODS FOR DATA ENRICHMENT&#x201d;; and U.S. patent application Ser. No. 17/219,340, titled &#x201c;SYSTEMS AND METHODS FOR AN ON-DEMAND, SECURE, AND PREDICTIVE VALUE-ADDED DATA MARKETPLACE&#x201d;, which are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to systems and methods for translating input data into a universal data language.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Entities maintain large amounts of data that may contain different semantic structures and use different terms that refer to the same object or element. To harmonize these semantic discrepancies requires manual and laborious processes that are inefficient and prone to error. Typical semantic integration is manual, brittle, and can easily go out of date without dedicated resources ensuring consistent and ongoing semantic harmony. Additionally, many entities manage redundant business semantics in their data governance efforts, not only within their own enterprises, but also between different enterprises. For example, one particular data element may have two different semantic identifiers associated with it, specifically for regulatory compliance reasons. Yet, the underlying data element is the same for both semantic identifiers. Identifying and harmonizing these semantic differences, in today's current market, is solved using laborious and error-prone manual processes.</p><p id="p-0005" num="0004">Some common content that often presents issues for entities includes (i) business terms and definitions, (ii) references to data assets and data models, (iii) policies governing appropriate data use, and/or (iv) commonly used data classifications and information sensitivity classifications, among others. In some scenarios, as much as 35-40% of data that entities manage is redundant and contains different (and sometimes, conflicting) identifiers, leading to organizational bloat and inefficiencies. In particular, running internal data analyses becomes problematic when different identifiers are used for the same underlying data element, as an organization may be unaware of the duplicity of the identifier. This can lead to ignoring certain data that leads to creating faulty datasets, which may lead to inaccurate data analyses.</p><p id="p-0006" num="0005">As such, there is an increased need for systems and methods that can address the challenges of modern-day business semantics, including efficiently identifying the duplicative and redundant data and subsequently harmonizing that data using a translation service.</p><p id="p-0007" num="0006">It is with respect to these and other general considerations that the aspects disclosed herein have been made. Also, although relatively specific problems may be discussed, it should be understood that the examples should not be limited to solving the specific problems identified in the background or elsewhere in the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">Non-limiting and non-exhaustive examples are described with reference to the following figures.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a distributed system for a universal data language translator, as described herein.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example input processor for operating a universal data language translator, as described herein.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example method for constructing a universal data language translator, as described herein.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example method for translating input data using a universal data language translator.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of a distributed system for a universal data language translator that includes an Orchestration Layer and a Reference System.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example data marketplace platform.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of semantic and ontological matching within a universal data language translator, as described herein.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates one example of a suitable operating environment in which one or more of the present embodiments may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">Various aspects of the disclosure are described more fully below with reference to the accompanying drawings, which form a part hereof, and which show specific exemplary aspects. However, different aspects of the disclosure may be implemented in many different forms and should not be construed as limited to the aspects set forth herein; rather, these aspects are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the aspects to those skilled in the art. Aspects may be practiced as methods, systems, or devices. Accordingly, aspects may take the form of a hardware implementation, an entirely software implementation or an implementation combining software and hardware aspects. The following detailed description is, therefore, not to be taken in a limiting sense.</p><p id="p-0018" num="0017">Embodiments of the present application are directed at systems and methods associated with a universal data language translator and translating input data into a universal data language. In today's current marketplace, many entities face problems with standardizing business semantics for certain data elements. For example, in the financial industry, many banks and regulators face issues harmonizing data because several data elements are labeled differently, although each data element has the same underlying data value and has the same meaning. There has been an increased need for glossary standardization within the financial industry. This has become especially true when new regulations and standards are published, which oftentimes define new terms and data points that must be tracked by certain organizations. In some instances, entities may have already been recording certain data elements prior to a new regulation or standard, but the new regulation and/or standard may have defined a certain data element differently than how the organization may have already been recording and tracking that data element internally. As such, a semantic inconsistency may originate because new regulations and/or standards are released.</p><p id="p-0019" num="0018">A solution for this problem is the creation of a universal data language (or &#x201c;UDL&#x201d;). A UDL may be established to harmonize certain data identifiers and elements across certain industries. For example, a UDL may be able to harmonize new terms established from a regulatory body with terms used internally at a bank. Rather than having to manually map the bank-specific terminology to the regulatory body terminology, an entity (e.g., a bank) may be able to rely upon a UDL translator to automatically map the data element to the regulatory body term. Beyond terms and definitions, metadata may also be mapped and harmonized.</p><p id="p-0020" num="0019">A UDL translator may rely on artificial intelligence and machine learning algorithms to efficiently and accurately map large amounts of inconsistently labeled data elements and resolve these inconsistencies using the UDL. For instance, the system may receive input data from a user, such as a bank. The input data may be analyzed for data quality, specifically notating certain data elements and metadata. Data quality may be assessed by evaluating the completeness of the data, duplicative entries, inactive/unused data terms, and outdated values/terms. The input data may be cleaned and subsequently translated using the UDL translator. Certain terms in the input data may be mapped to UDL terms. Other terms that may not appear in the UDL (at least, at the time of the translation) may be analyzed using at least one ML algorithm, where certain characteristics associated with the term (data element) may be analyzed. For instance, the term may be industry-specific, may have certain output characteristics (e.g., accounting format, unit identifiers, etc.), and may have a certain number of entries that correlate with another data element. If the data term's analyzed characteristics are substantially similar to a UDL term, the system may automatically map that term to the UDL term. Alternatively, the system may make a suggestion to the user that a certain identified data element is equivalent to a particular UDL term, and the user may be requested to either accept or decline the system's UDL mapping recommendation.</p><p id="p-0021" num="0020">By using a UDL translator, validity of data may be increased because inconsistent data terms, formats, and values will be decreased. Records may be consolidated because less redundant (and different) terms will be used. Additionally, when transmitting and/or receiving data from a third-party source, harmonizing and conducting analysis on the third-party data will be more efficient and accurate, as data cleaning and interpretation will be reduced because the UDL translator will have already automatically translated the file to a commonly-known and commonly-used ontology.</p><p id="p-0022" num="0021">Accordingly, the present disclosure provides a plurality of technical benefits including but not limited to: enabling more efficient use of electronic resources for data consolidation and harmonization; providing more efficient storage management because the translation steps match and consolidate certain data elements; decreasing the potential for manually re-mapping and/or re-formatting data based on newly defined terms and ontologies; and decreasing manual overload of electronic devices, since the translation may occur via computing devices running intelligent algorithms to identify deficiencies in a dataset and remedying those deficiencies using a UDL translator, among other examples. In short, a UDL translator allows for faster processing time of datasets and more efficient uses of computer memory due to the reduced redundancy and duplicity of data elements and terms in a dataset by implementing a UDL.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a distributed system for a universal data language translator, as described herein. Example system <b>100</b> presented is a combination of interdependent components that interact to form an integrated whole for consolidating and enriching data on a data marketplace. Components of the systems may be hardware components or software implemented on, and/or executed by, hardware components of the systems. For example, system <b>100</b> comprises client devices <b>102</b>, <b>104</b>, and <b>106</b>, local databases <b>110</b>, <b>112</b>, and <b>114</b>, network(s) <b>108</b>, and server devices <b>116</b>, <b>118</b>, and/or <b>120</b>.</p><p id="p-0024" num="0023">Client devices <b>102</b>, <b>104</b>, and <b>106</b> may be configured to receive and transmit data. For example, client devices <b>102</b>, <b>104</b>, and <b>106</b> may contain client-specific data with client-specific data terminology and labels. Client devices may download a UDL translator program via network(s) <b>108</b> that may be applied to the client-specific data. In other embodiments, client devices may upload client-specific data via network(s) <b>108</b> to a third-party platform that manages the UDL translator, and the UDL translation system described herein may be applied to the incoming client-specific data and terms. The client-specific data may be stored in local databases <b>110</b>, <b>112</b>, and <b>114</b>. Client-specific data may be transmitted via network(s) <b>108</b> and/or satellite <b>122</b> to server(s) <b>116</b>, <b>118</b>, and/or <b>120</b>. Server(s) <b>116</b>, <b>118</b>, and/or <b>120</b> may be third-party servers owned by a Data Marketplace Platform and/or a UDL administrator. In other examples, client-specific data may be stored in servers (in addition to or instead of local client devices and local databases) and may be transmitted from client servers to third-party servers via network(s) <b>108</b> and/or satellite <b>122</b>. After the client-specific data is translated via the UDL translator, the translated client-specific data may be stored in remote servers <b>116</b>, <b>118</b>, and/or <b>120</b> for future use by the UDL translator (e.g., training data to continue increasing the intelligence of at least one machine learning algorithm mapping client-specific terms to UDL terms). In other examples, the translated client-specific data may be transmitted back to the client devices via network(s) <b>108</b>.</p><p id="p-0025" num="0024">In aspects, a client device, such as client devices <b>102</b>, <b>104</b>, and <b>106</b>, may have access to one or more datasets or data sources and/or databases comprising client-specific data. In other aspects, client devices <b>102</b>, <b>104</b>, and <b>106</b>, may be equipped to receive broadband and/or satellite signals carrying UDL translation mapping data and/or UDL translated client-specific data. The signals and information that client devices <b>102</b>, <b>104</b>, and <b>106</b> may receive may be transmitted from satellite <b>122</b>. Satellite <b>122</b> may also be configured to communicate with network(s) <b>108</b>, in addition to being able to communicate directly with client devices <b>102</b>, <b>104</b>, and <b>106</b>. In some examples, a client device may be a mobile phone, a laptop computer, a tablet, a smart home device, a desk phone, and a wearable (e.g., a smart watch), among other devices.</p><p id="p-0026" num="0025">To further elaborate on the network topology, client devices <b>102</b>, <b>104</b>, and/or <b>106</b> (along with their corresponding local databases <b>110</b>, <b>112</b>, and <b>114</b>) may transmit standard terms to a third-party platform that manages a UDL translator. &#x201c;Standard terms&#x201d; may refer to a standard business glossary that comprises standard data terminology among different industries, as well as industry-specific terminology, geographic terminology, and general terminology (i.e., ubiquitous terms). These standard terms may be transmitted via client device(s) <b>102</b>, <b>104</b>, and/or <b>106</b> over network(s) <b>108</b> to the third-party platform that manages the UDL translator. The standard terminology data received by the third-party platform may then be used to construct a UDL translator and/or improve upon an already-existing UDL translator.</p><p id="p-0027" num="0026">The procedure for uploading client-specific data and uploading standard terminology to the third-party platform may be similar, in that the data may be stored locally initially and subsequently transmitted to third-party servers for analysis, consolidation, and translation, among other actions. In some examples, the data may be hashed or encrypted on the client-side prior to transmission. <figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a network topology that may be used in a Client-Side environment and/or a Reference-Side environment. The Reference-Side environment may include standards-setting entities that define business terminology and industry-specific data terminology. The Reference entities may be trusted sources (e.g., business glossary stewards, ontologists, etc.). The Client-Side environment refers to a particular business with specific client data terminology that may be incompatible with other broader terminology in a similar industry, and, as such, the client is seeking to translate the client-specific data into a universally understandable data language using a UDL translator. In other words, client devices <b>102</b>, <b>104</b>, and/or <b>106</b> may belong to the Client Environment in one example and belong to the Reference Source Environment in another example.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example input processor for operating a universal data language translator, as described herein. Input processor <b>200</b> may be embedded within a client device (e.g., client devices <b>102</b>, <b>104</b>, and/or <b>106</b>), remote web server device (e.g., devices <b>116</b>, <b>118</b>, and/or <b>120</b>), and other devices capable of implementing systems and methods for operating a universal data language translator. The input processing system contains one or more data processors and is capable of executing algorithms, software routines, and/or instructions based on processing data provided by at least one client source and/or reference source. The input processing system can be a factory-fitted system or an add-on unit to a particular device. Furthermore, the input processing system can be a general-purpose computer or a dedicated, special-purpose computer. No limitations are imposed on the location of the input processing system relative to a client or remote web server device, etc. According to embodiments shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the disclosed system can include memory <b>205</b>, one or more processors <b>210</b>, communications module <b>215</b>, UDL Translation module <b>220</b>, and duplicate removal module <b>225</b>. Other embodiments of the present technology may include some, all, or none of these modules and components, along with other modules, applications, data, and/or components. Still yet, some embodiments may incorporate two or more of these modules and components into a single module and/or associate a portion of the functionality of one or more of these modules with a different module.</p><p id="p-0029" num="0028">Memory <b>205</b> can store instructions for running one or more applications or modules on processor(s) <b>210</b>. For example, memory <b>205</b> could be used in one or more embodiments to house all or some of the instructions needed to execute the functionality of UDL Translation module <b>220</b> and/or duplicate removal module <b>225</b>, as well as communications module <b>215</b>. Generally, memory <b>205</b> can include any device, mechanism, or populated data structure used for storing information. In accordance with some embodiments of the present disclosures, memory <b>205</b> can encompass, but is not limited to, any type of volatile memory, nonvolatile memory, and dynamic memory. For example, memory <b>205</b> can be random access memory, memory storage devices, optical memory devices, magnetic media, floppy disks, magnetic tapes, hard drives, SIMMs, SDRAM, RDRAM, DDR, RAM, SODIMMs, EPROMs, EEPROMs, compact discs, DVDs, and/or the like. In accordance with some embodiments, memory <b>205</b> may include one or more disk drives, flash drives, one or more databases, one or more tables, one or more files, local cache memories, processor cache memories, relational databases, flat databases, and/or the like. In addition, those of ordinary skill in the art will appreciate many additional devices and techniques for storing information that can be used as memory <b>205</b>.</p><p id="p-0030" num="0029">In some example aspects, memory <b>205</b> may store certain business terms used for the creation of a UDL translator, as well as applying an already-existing UDL translator to client-specific data terminology. Specifically, memory <b>205</b> may store terminology related to business glossaries, industry-specific data labels, geographic terminology, language equivalencies, and/or other general terminology that may be used to map client-specific data labels to a UDL.</p><p id="p-0031" num="0030">Communications module <b>215</b> is associated with sending/receiving information (e.g., translated via UDL translation module <b>220</b> and sanitized for duplicates via duplicate removal module <b>225</b>), commands received via client devices or server devices, other client devices, remote web servers, etc. These communications can employ any suitable type of technology, such as Bluetooth, WiFi, WiMax, cellular (e.g., 5G), single hop communication, multi-hop communication, Dedicated Short Range Communications (DSRC), or a proprietary communication protocol. In some embodiments, communications module <b>215</b> sends information output by UDL translation module <b>220</b> (e.g., newly translated dataset) and/or by duplicate removal module <b>225</b> (e.g., de-duplicated translated dataset), and/or to client devices <b>102</b>, <b>104</b>, and/or <b>106</b>, as well as memory <b>205</b> to be stored for future use. In some examples, communications modules may be constructed on the HTTP protocol through a secure REST server(s) using RESTful services.</p><p id="p-0032" num="0031">UDL Translation module <b>220</b> is configured to receive business terms, semantics, and metadata from at least one trusted source. The business terms, semantics, and metadata may be general business terms (e.g., business glossary terms), industry-specific terms (e.g., how data terms are characterized in Finance, Life Sciences, Chemicals, and Federal government), geographic terms (e.g., how a certain piece of data is labeled in the United States vs. China), and language-specific terms (e.g., how a certain piece of data is labeled in English vs. French), among others.</p><p id="p-0033" num="0032">UDL translation module <b>220</b> may be configured to support a Create-Read-Update-Delete (&#x201c;CRUD&#x201d;) data structure for a database. A UDL may continuously evolve using a CRUD database. As new terms are added to the database, the UDL translation module <b>220</b> may create new entries for those terms, analyze those terms (i.e., Read), and update or delete existing UDL terms in the database based on the reception of those new terms. Factors that may be assessed when the determining whether to create, update, and/or delete a new term may include the veracity of the source of the term (e.g., a trusted source who has been the editor of a business term glossary for several decades may have higher confidence score than a source who has published an industry-specific glossary for only the past three years), the similarity of the term to already-existing terms in the database (e.g., if a newly received business term is similar enough to an already-existing term, then the newly-received term may be associated with the already-existing term; this may be considered an update operation within the CRUD data structure), and the presence of a term in the database (e.g., if a term already exists in the database, then the newly received term may be deleted to avoid duplication; alternatively, if the newly received term has not been established and has a low similarity index with other terms in the UDL database, then a new term may be created), among other factors.</p><p id="p-0034" num="0033">UDL translation module <b>220</b> may also comprise at least one machine-learning (ML) algorithm that may intelligently analyze newly-received data and compare to the already-existing set of data in the UDL database. For instance, a newly-received term may be provided to a ML algorithm to assess a similarity score with other already-existing terms in the UDL database. The ML algorithm may consider the data type, context, source, etc. of the newly-received term and compare it with other data types, contexts, and sources etc. existing in the UDL database. Terms, definitions, relations, taxonomies, semantics, references, ontologies, and other language tenets may be relied upon in determining whether to associate a newly-received term with an already-existing term (i.e., harmonizing two different terms that are labeling the same data) or to create a new term that is associated with a particular data type.</p><p id="p-0035" num="0034">For example, the UDL translation module <b>220</b> may receive the financial term &#x201c;acid-test ratio.&#x201d; The system may then analyze the term using at least one ML algorithm and decide the next action for that term. Here, a word-for-word scan of the UDL database may reveal that &#x201c;acid-test ratio&#x201d; is not present in the database. However, the ML algorithm may have identified a term that has a high similarity score to the identified term (e.g., &#x201c;quick ratio&#x201d;). Although the only overlapping words between the two terms is &#x201c;ratio,&#x201d; the ML algorithm may analyze characteristics of the terms beyond their semantic identifiers, such as the underlying equations driving the ultimate data results. In this instance, the ML algorithm may have identified that that the acid-test ratio data column is calculated by taking the ratio of current assets minus inventories, accruals, and prepaid items to current liabilities. In some examples, &#x201c;inventories,&#x201d; &#x201c;accruals,&#x201d; &#x201c;prepaid items,&#x201d; and &#x201c;current liabilities&#x201d; may all be other data labels appearing in a similar environment (e.g., the same spreadsheet or database) as acid-test ratio. The ML algorithm may have also determined that the quick ratio (which already exists in the database) is also calculated using the same algorithm, although the terms may have been labeled slightly differently (e.g., instead of &#x201c;inventories,&#x201d; the quick ratio uses &#x201c;inventory of goods&#x201d;). Regardless, the quick ratio that already exists in the UDL database is calculated by taking the current assets minus accruals, inventories, and prepaid items, and then dividing that number by the current liabilities. This is the same formula as the acid-test ratio data term. As such, the UDL translation module <b>220</b> may determine that the acid-test ratio term is the same as the quick ratio term, so the acid-test ratio term is added to the UDL library as a synonym to the quick ratio term.</p><p id="p-0036" num="0035">Duplicate Removal module <b>225</b> is configured to detect duplicates within the UDL library. Duplicate removal module <b>225</b> may also receive a new term in conjunction with the UDL translation module <b>220</b>. Duplicate removal module <b>225</b> may first check if the term is exactly described in the UDL library. If so, then the duplicate removal module <b>225</b> may then check the underlying definition of the term (e.g., such as an equation that drives the ultimate value of the term). If the definitions also happen to be the same, then the newly-received term may be deleted from the UDL library. By removing duplicates immediately upon reception to the UDL database, the system decreases confusion and bloat regarding certain data terminologies and ontologies. This feature of the UDL translation system may be considered as a &#x201c;search before create&#x201d; function, where the newly received term is first compared against the already-existing database of UDL terms, and if the term and definition match up, then the term is automatically discarded. In some example aspects, the duplicate removal module <b>225</b> may indicate to a user that the term is already a duplicate of another term. In other examples, the duplicate removal module <b>225</b> may prevent the user from proceeding forward with creating a new term within the UDL library once it is determined that it is a duplicate.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example method for constructing a universal data language translator, as described herein. Input data <b>302</b> may be client-specific data terminology and/or standards-based terminology from a trusted source, as described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The input data may consist of textual input, speech input, handwritten/stylus input, and other various types of input. For example, textual input may be input from spreadsheets or databases that show columns of data with a header row that includes data labels for each column of data. Once the input data <b>302</b> is received, the input data may proceed to a duplicate removal process <b>304</b> (e.g., duplicate removal module <b>225</b>).</p><p id="p-0038" num="0037">Duplicate removal step <b>304</b> may analyze the input data and compare it to already-existing terms, ontologies, semantics, metadata, and other data that is contained within the UDL database (or library). If a word-for-word (or character-for-character) match is detected between the input data <b>302</b> and already-existing data in the UDL database, then the duplicate removal process proceeds to determine if the definitions are the same. As described previously, the definitions of the terms may be determined by analyzing the underlying equations that render the values displayed in the columns of data (i.e., the values shown in certain cells are dependent on equations using data from other columns; the duplicate removal step <b>304</b> may analyze those other columns to determine whether the equations (&#x201c;definitions&#x201d;) are the same). If the definitions are the same, the input data <b>302</b> may be discarded at step <b>304</b> prior to analysis by natural language processor <b>310</b>.</p><p id="p-0039" num="0038">If the input data <b>302</b> passes the duplicate removal tests at step <b>304</b>, the input data <b>302</b> is provided to natural language processor (NLP) <b>310</b>. The natural language processor <b>310</b> may parse the input data <b>302</b> and extract various semantic features and classifiers, among other operations. The input data <b>302</b> may be converted into semantic representations that may be understood and processed by a machine utilizing machine-learning algorithms to intelligently disassemble the input data and provide the most accurate and appropriate UDL definition and/or mappings.</p><p id="p-0040" num="0039">In some example aspects, the natural language processor <b>310</b> may begin with tokenization operation <b>312</b>. The tokenization operation <b>312</b> may extract specific tokens from the input data. A &#x201c;token&#x201d; may be characterized as any sequence of characters. It may be a single character or punctuation mark, a phrase, a sentence, a paragraph, multiple paragraphs, or a combination of the aforementioned forms. During the tokenization operation <b>312</b>, key words (or characters) from the input data <b>302</b> may be isolated and associated with general topics that may be preloaded into the natural language processor via a trusted source (e.g., business glossary terminology, semantics, and ontologies). These topics may be located in a preexisting matrix of data where certain tokens are associated with certain topics. For example, one matrix of data may associate the term &#x201c;gross income&#x201d; with a financial industry classification. Another matrix may be associated with the FDA ClinicalTrials.gov glossary and associate the term &#x201c;NCT number&#x201d; (e.g., a particular term used in the life sciences industry as a unique identification code given to each clinical study record; 8-digit number) with the life sciences industry, specifically clinical trials. Other data terms (and tokens) may be associated with other industry-specific terms, semantics, and ontologies, as described herein.</p><p id="p-0041" num="0040">After the input data <b>302</b> is processed through the tokenization operation <b>312</b>, the input data may then be analyzed by the feature extraction component <b>314</b>. The feature extraction component may extract lexical features <b>324</b> and contextual features <b>320</b> from the input data <b>302</b> for use by the domain classification component <b>316</b>. The lexical features <b>324</b> that may be analyzed in the feature extraction component <b>314</b> may include, but are not limited to, word n-grams <b>322</b>. A word n-gram is a contiguous sequence of n words from a given sequence of text. As should be appreciated, analyzing word n-grams may allow for a deeper understanding of the input data and therefore provide more accurate and intelligent UDL definitions and mappings. The machine-learning algorithms may be able to compare thousands of n-grams, lexical features, and contextual features in a matter of seconds to extract the relevant features of the input data. Such rapid comparisons are impossible to employ manually. The contextual features <b>320</b> that may be analyzed by the feature extraction component <b>314</b> may include, but are not limited to, a top context and an average context. A top context may be a context that is determined by comparing the topics and key words of the input data with a set of preloaded contextual cues. An average context may be a context that is determined by comparing the topics and key words extracted from the input data <b>302</b> with historical processed input data, historical UDL definitions and mappings, manual inputs, manual actions, public business and industry-specific terminology dand ontology references, and other data. The feature extraction component <b>314</b> may also skip contextually insignificant input data when analyzing the textual input. For example, a token may be associated with articles, such as &#x201c;a&#x201d; and &#x201c;an.&#x201d; However, because articles are typically insignificant in the English language, the feature extraction component <b>314</b> may ignore these article tokens.</p><p id="p-0042" num="0041">After the feature extraction component <b>314</b> extracts the pertinent lexical features <b>324</b> and contextual features <b>320</b> of the input data <b>302</b>, the input data <b>302</b> may be transmitted to the domain classification component <b>316</b>. The domain classification component <b>316</b> analyzes the lexical features <b>324</b> and the contextual features <b>320</b> that were previously extracted from the feature extraction component <b>314</b>. These lexical and contextual features may be grouped into specific classifiers for further analysis. The domain classification component <b>316</b> may also consider statistical models <b>326</b> when determining the proper domain that should be selected for the possible action responses. In some example aspects, the domain classification component <b>316</b> may be trained using a statistical model or policy (i.e., prior knowledge, historical datasets, commonly-used standards/definitions/terminologies/ontologies/etc.) with previous input data. For example, as previously mentioned, the term &#x201c;acid-test ratio&#x201d; may be associated with a specific equation token (e.g., acid-test ratio=quick ratio=(current assets&#x2212;inventory)/current liabilities). Additionally, the term &#x201c;acid-test ratio&#x201d; may be associated with a broader domain classification, such as a &#x201c;finance&#x201d; domain. In yet other examples, &#x201c;acid-test ratio&#x201d; may be associated with a specific business function or department within a business, such as the &#x201c;finance department.&#x201d; Thus, even though a certain acid-test ratio data term may be associated with a non-financial industry company, the acid-test ratio term may still be associated with a sub-domain of &#x201c;finance,&#x201d; such as &#x201c;corporate finance department,&#x201d; or the like. Previous input data and UDL definitions/related to the &#x201c;finance&#x201d; domain may be analyzed at this step.</p><p id="p-0043" num="0042">After proper domain classifications are assigned to the input data at operation <b>316</b>, the input data may then be sent to the semantic determination component <b>318</b>. The semantic determination component converts the input data into a domain-specific semantic representation based on the domain that was assigned to the input data by the domain classification component <b>316</b>. The semantic determination component <b>318</b> may draw on specific sets of concepts and categories from a semantic ontologies database <b>330</b> to further narrow down the set of appropriate UDL definition and/or mappings to assign to a particular term in the input data and/or to present to a user for approval. For example, a certain data term in the input data may be &#x201c;Phase II.&#x201d; On its face, the term &#x201c;phase II&#x201d; is ambiguous. However, other contextual keywords surrounding the &#x201c;phase II&#x201d; data column may provide more semantic clarity. For instance, the title of the dataset may be &#x201c;Drug XYZ Clinical Trial Results Comparison Phases I-IV.&#x201d; The key words &#x201c;Drug XYZ&#x201d; and &#x201c;Clinical Trial&#x201d; have previously been assigned domains by the domain classification component <b>316</b>, and as a result, the semantic determination component <b>318</b> may then determine that the &#x201c;phase II&#x201d; data column is referring to a medical value of success or failure specifically for the phase II clinical trials.</p><p id="p-0044" num="0043">In other example aspects, the semantic determination component <b>318</b> may have pre-defined semantic frames <b>328</b> associated with third-party applications and entities. For example, continuing with the &#x201c;phase II&#x201d; clinical trial example, the system <b>300</b> may have imported particular semantic frames <b>328</b> that are associated with the FDA or NIH as they relate to clinical trial data. Information that may be predefined by the semantic frames <b>328</b> may include, but is not limited to the following clinical trial data terms: age group, blood type, blood pressure, arm, collaborator, contact, investigator, last verified, patient registry, phase number, reporting group, results, state, sponsor, and NCT number. Specifically, once the data term &#x201c;phase II&#x201d; is classified by domain classifier <b>316</b> as a life sciences and/or clinical trial domain, then the system <b>300</b> may refer to preloaded semantic frames <b>328</b> to further define and map the term &#x201c;phase II&#x201d; to the UDL, as the term &#x201c;phase II&#x201d; is used in the input data <b>302</b>.</p><p id="p-0045" num="0044">After the natural language processor <b>310</b> has completed its analysis of the input data, the input data may be transmitted to the determine possible UDL mappings at step <b>332</b>. By funneling the input data through the natural language processor <b>310</b>, many of the initial UDL definitions and mappings may have been filtered out. Thus, determine UDL mapping operation <b>332</b> may be characterized as the final filter in determining which UDL definition mapping to display to the user. The determine UDL mapping operation <b>332</b> may utilize a priority algorithm that considers not only the processed input data from the natural language processor <b>310</b>, but also historical UDL mappings and preexisting definitions from the UDL library <b>336</b>, as well as default UDL mappings from database <b>334</b> (e.g., trusted source business glossary mappings).</p><p id="p-0046" num="0045">In some example aspects, the final UDL definition assigned to a particular term from the input data <b>302</b> may be stored in UDL library <b>336</b> for future consideration, such as by the machine-learning algorithm(s) aiding the natural language processor <b>310</b>. Future UDL translations using system <b>300</b> may become more intelligent over time as more and more terms are analyzed, processed using NLP <b>310</b>, and mapped to a universal data language terminology and ontology.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example method for translating input data using a universal data language translator. Method <b>400</b> begins with step <b>402</b>, where input data is received. As described previously, input data may be in a variety of forms, such as textual input, voice input, multimedia input, and other forms of input. The input data <b>402</b> may be processed at step <b>404</b> using a universal data language translator. The UDL translator is described in detail with respect to <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref>. The processing within the UDL translator at step <b>404</b> includes applying at least one natural language processor to the input data, wherein the natural language processor utilizes at least one ML algorithm to intelligently extract lexical and semantic features from the input data. These semantic and lexical features are then used to determine accurate definitional and mapping within a UDL library.</p><p id="p-0048" num="0047">At step <b>406</b>, the input data is mapped to a certain UDL term based on UDL terminologies, ontologies, taxonomies, and definitions. At step <b>408</b>, duplicate terms may be removed from the UDL library. Optional step <b>408</b>, in some examples, may occur prior to the processing step <b>404</b>. In some instances, however, terms may need to be analyzed using a natural language and machine-learning algorithms to determine whether duplicates actually exist. This may be true when the characters and/or words of the terms do not match up exactly to the already-existing terms/words in the UDL library. Further analysis may be required to determine if the input data is equivalent to a certain term within the UDL library.</p><p id="p-0049" num="0048">At step <b>410</b>, the UDL mapping output may be provided. The UDL mapping may be provided to a display on a mobile device (e.g., <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Upon receiving the UDL mapping output, the system may receive an action response from a user at optional step <b>412</b>. The action response may, for example, be an approval or disapproval of the proposed UDL mapping. Such manual inputs may be utilized by the system within method <b>400</b> in order to improve the UDL translator, specifically the ML algorithms that intelligently sort, define, and map input data with UDL library terms and data.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of a distributed system for a universal data language translator that includes an Orchestration Layer and a Reference System. Distributed system <b>500</b> includes an orchestration layer <b>502</b> and a reference system <b>504</b>. The orchestration layer <b>502</b> provides the controls for improving and updating the universal data language (UDL) library/database. The orchestration layer <b>502</b> may rely upon CRUD controls <b>506</b>, as previously described, to create, read, update, and delete certain UDL terms. The UDL library may be comprised of a flexible data structures and architectures with a matrix of standard terms, definitions, and term relations. Other components of the UDL library may include taxonomies and semantic mappings, references and ontologies, and other language tenets based on the language of the input data.</p><p id="p-0051" num="0050">The system <b>500</b> may also be configured with a translation layer universal clearing house <b>508</b>, wherein certain input data from external trusted sources may be used to update and improve the UDL library. The clearing house <b>508</b> may comprise a natural language processor with at least one ML algorithm that may process the incoming data, determine an appropriate definition of the incoming data terms, and map the incoming terms to particular UDL definitions and terms (i.e., harmonize the data). The UDL may also rely upon external data sources <b>512</b> and <b>514</b> that may be trusted external sources providing commonly known standards and industry-specific terms and data models to the UDL library. For example, a UDL library may comprise terms specific to the financial industry and then expand to include terms specific to the life sciences industry upon receiving input data from trusted external sources, where the input data is a life sciences common-use glossary of terms. This input data may be used as a baseline model by the UDL to establish a common semantic structure for dealing with data labels and naming conventions specifically within the life sciences industry. The UDL library may also receive data from legacy reference data models <b>510</b>, such as certain foundational textbook glossaries. These legacy reference models may be used by clients, such as client 1, in order to harmonize its data labels with other clients, such as client 2 (<b>518</b>) and client 3 (<b>520</b>).</p><p id="p-0052" num="0051">The system <b>500</b> may allow for data transactions among different clients using a common UDL. The clients wishing to exchange data may share their data via the clearing house <b>508</b>, wherein the input data is translated to UDL. The output of the input data for both client 1 (<b>516</b>) and client 2 (<b>518</b>) may be a translated data file, where the data labels are the same. By translating the data inputs of client and client 2 into UDL, clients 1 and 2 may be able to better identify certain data that either client has or doesn't have, making it easier to transact for certain pieces of data between the clients.</p><p id="p-0053" num="0052">The reference system <b>504</b> includes an internet of data <b>522</b> component, wherein the UDL library may constantly monitor public sources of information, such as business glossaries, reference data, domain models, keyword trends, search term volume, research papers, etc. This public data is constantly considered by the CRUD controls <b>506</b> in updating the UDL translator.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example data marketplace platform. Data marketplace platform <b>600</b> shows an example transaction occurring among client A (<b>602</b>), client B (<b>604</b>), and client N. The clients may upload their input data, which may have differences in data terminology. The input data may be processed with a UDL translator, and the output data may be translated data files using consistent terminology and definition based on the UDL described herein. The input data may be processed via tools, such as duplicate detection <b>606</b>, definition and data quality <b>608</b>, and UDL mapping <b>610</b>. For example, client A may upload input data, whereby certain data labels are identified as being duplicates of each other, either internally to the uploaded dataset or to UDL definitions. Such duplicates may be removed from the dataset. Then, a subsequent analysis on the input data may occur that evaluates the definition and data quality of the uploaded data. For example, a certain data column may be titled &#x201c;acid-test ratio.&#x201d; The UDL translator may analyze the accuracy of the data and determine that the equation that is used for the acid-test ratio fails to take into account business accruals. Based on comparing the acid-test ratio to a standardized UDL Definition of &#x201c;quick ratio&#x201d; (which has been determined to be equivalent terminology per the UDL library), the system may indicate that the data has poor quality because the underlying equation driving the results of the acid-test ratio is erroneous. This indication may be provided back to the user.</p><p id="p-0055" num="0054">Despite the data quality analysis, the input data may be translated to UDL standard terms and labels. For instance, &#x201c;acid-test ratio&#x201d; may be translated to &#x201c;quick ratio,&#x201d; since that's the standardized term used within the UDL library. Both terms are equivalent and mean the same thing, but the UDL library has been established with the term &#x201c;quick ratio,&#x201d; rather than &#x201c;acid-test ratio.&#x201d; Such determinations may be made using smart operations that are automated and embedded within a UDL Translator, such as NLP and ML algorithms.</p><p id="p-0056" num="0055">In this example in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the data marketplace <b>600</b> comprises a UDL translator that may be implemented on the third-party servers that power the data marketplace <b>600</b>. The UDL translator software may sit in an external server and receive input data uploaded by client A and/or client B. In such an architectural scheme, the UDL translation operations and UDL processing occurs offsite, in the cloud.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of semantic and ontological matching within a universal data language translator, as described herein. On the left side of <figref idref="DRAWINGS">FIG. <b>7</b></figref> is client input data <b>702</b>, and on the right side is the UDL library <b>704</b>. In this example, certain terms in the client input data <b>702</b> are first determined to be duplicate terms, such as {USD, . . . } and {FX, . . . }, which are both mapped to the UDL definition of {FX, . . . }. As indicated by dotted line <b>84</b>, the term (USD, . . . ) may be deleted from the UDL translation output as an unnecessary duplicate. Further, one term in the input data <b>702</b> is crossed out. This may indicate an inactive or outdated data term. If the data is inactive, outdated, and/or inaccurate, the system may indicate to the user that this data should not be used and therefore does not translate that terminology to the UDL ontology.</p><p id="p-0058" num="0057">Another example that is illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> is the mapping between input data <b>702</b> term {MBS, . . . } and UDL terminology {e571d, . . . } and {mort_b_s, . . . }. The dash line <b>75</b> may indicate a partial mapping between the terms, and the dashed line <b>91</b> may indicate a possible duplicate mapping with the term (i.e., MBS may stand for &#x201c;mort_b_s&#x201d;). In some instances, the NLP and machine-learning algorithms may be able to solve these discrepancies automatically, as described herein. In other instances, the system may require manual input to resolve the inconsistencies and discrepancies. Such manual input may be recorded for future use by the NLP and machine-learning algorithms so that such decisions may be automated (i.e., increasing the intelligence of the UDL translator).</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates one example of a suitable operating environment in which one or more of the present embodiments may be implemented. This is only one example of a suitable operating environment and is not intended to suggest any limitation as to the scope of use or functionality. Other well-known computing systems, environments, and/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, programmable consumer electronics such as smart phones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.</p><p id="p-0060" num="0059">In its most basic configuration, operating environment <b>800</b> typically includes at least one processing unit <b>802</b> and memory <b>804</b>. Depending on the exact configuration and type of computing device, memory <b>804</b> (storing, among other things, information related to detected devices, association information, personal gateway settings, and instructions to perform the methods disclosed herein) may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.), or some combination of the two. This most basic configuration is illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> by dashed line <b>806</b>. Further, environment <b>800</b> may also include storage devices (removable, <b>808</b>, and/or non-removable, <b>810</b>) including, but not limited to, magnetic or optical disks or tape. Similarly, environment <b>800</b> may also have input device(s) <b>814</b> such as keyboard, mouse, pen, voice input, etc. and/or output device(s) <b>816</b> such as a display, speakers, printer, etc. Also included in the environment may be one or more communication connections, <b>812</b>, such as LAN, WAN, point to point, etc.</p><p id="p-0061" num="0060">Operating environment <b>800</b> typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by processing unit <b>802</b> or other devices comprising the operating environment. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other tangible medium which can be used to store the desired information. Computer storage media does not include communication media.</p><p id="p-0062" num="0061">Communication media embodies non-transitory computer readable instructions, data structures, program modules, or other data. Computer readable instructions may be transported in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.</p><p id="p-0063" num="0062">The operating environment <b>800</b> may be a single computer operating in a networked environment using logical connections to one or more remote computers. The remote computer may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above as well as others not so mentioned. The logical connections may include any method supported by available communications media. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p><p id="p-0064" num="0063">Aspects of the present disclosure, for example, are described above with reference to block diagrams and/or operational illustrations of methods, systems, and computer program products according to aspects of the disclosure. The functions/acts noted in the blocks may occur out of the order as shown in any flowchart. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0065" num="0064">The description and illustration of one or more aspects provided in this application are not intended to limit or restrict the scope of the disclosure as claimed in any way. The aspects, examples, and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of claimed disclosure. The claimed disclosure should not be construed as being limited to any aspect, example, or detail provided in this application. Regardless of whether shown and described in combination or separately, the various features (both structural and methodological) are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application, one skilled in the art may envision variations, modifications, and alternate aspects falling within the spirit of the broader aspects of the general inventive concept embodied in this application that do not depart from the broader scope of the claimed disclosure.</p><p id="p-0066" num="0065">From the foregoing, it will be appreciated that specific embodiments of the invention have been described herein for purposes of illustration, but that various modifications may be made without deviating from the scope of the invention. Accordingly, the invention is not limited except as by the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system for translating input data into a universal data language, comprising:<claim-text>a memory configured to store non-transitory computer readable instructions; and</claim-text><claim-text>a processor communicatively coupled to the memory, wherein the processor, when executing the non-transitory computer readable instructions, is configured to:<claim-text>receive input data, wherein the input data comprises at least one data term;</claim-text><claim-text>process the at least one data term using at least one natural language processor, wherein the at least one natural language processor comprises at least one machine-learning algorithm;</claim-text><claim-text>compare the at least one data term to at least one universal data language (UDL) library;</claim-text><claim-text>based on the comparison of the at least one data term to the at least one UDL library, calculate a similarity score, wherein the similarity score indicates a similarity between the at least one data term and at least one UDL term in the at least one UDL library; and</claim-text><claim-text>if the similarity score is above a similarity threshold, translate the at least one data term to the at least one UDL term in the at least one UDL library.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>determine if the at least one data term is a duplicate of an already-existing UDL term in the at least one UDL library; and</claim-text><claim-text>based on the at least one data term being determined to be a duplicate, map the at least one data term to the already-exiting UDL term.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein determining if the at least one data term is a duplicate of an already-existing UDL term comprises comparing each word or each character in the at least one data term with each word or each character with the already-existing UDL term.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein determining if the at least one data term is a duplicate of an already-existing UDL term comprises comparing a definition of the at least one data term to a definition to the already-existing UDL term.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the definition of the at least one data term is at least one equation.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the UDL library is comprised of a plurality of definitions rom at least one trusted source.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the at least one trusted source is at least one of: a publisher of a business glossary, a publisher of a dictionary, and a publisher of industry-specific ontology.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to: format the at least one data term to conform to a formatting for the at least one UDL term.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein processing the at least one data term further comprises evaluating a level of accuracy of the at least one data term.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the level of accuracy is determined based on at least one of: an inactivity score and an outdatedness score.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method of creating a universal data language (UDL) translator, comprising:<claim-text>receiving input data from at least one trusted source, wherein the input data comprises a plurality of data terms from at least one business glossary;</claim-text><claim-text>analyzing the lexical features of each data term in the plurality of data terms;</claim-text><claim-text>analyzing the contextual features of each data term in the plurality of data terms;</claim-text><claim-text>extracting at least one semantic ontology for each data term in the plurality of data terms;</claim-text><claim-text>creating a UDL library, wherein the UDL library comprises a UDL entry for each data term in the plurality of data terms;</claim-text><claim-text>training at least one machine learning algorithm on the UDL library;</claim-text><claim-text>receiving client-specific input data, wherein the client-specific input data comprises a newly-received data term;</claim-text><claim-text>processing the newly-received data term using the at least one machine learning algorithm; and</claim-text><claim-text>mapping the newly-received data term to at least one UDL term in the UDL library.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the at least one trusted source is at least one of: a publisher of a business glossary, a publisher of an industry-specific glossary, and a publisher of a business ontology.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein processing the newly-received data term using the at least one machine learning algorithm comprises calculating a similarity score between the newly-received data term and at least one UDL term in the UDL library.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the similarity score is calculated by comparing each character or each word in the newly-received data term with each character or each word in the at least one UDL term.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the similarity score is calculated by comparing a definition of the newly-received data term to a definition of the at least one UDL term, wherein the definition of the newly-received data term is an equation.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the similarity score is calculated by comparing at least one domain classification of the newly-received data term with at least one domain classification of the at least one UDL term.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising determining if the newly-received data term is a duplicate of a preexisting UDL term.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein determining if the newly-received data term is a duplicate of a preexisting UDL term comprises evaluating the similarity score.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the UDL library is comprised of at least one general business ontology, at least one financial ontology, and at least one life sciences ontology.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer-readable media storing computer executable instructions that when executed cause a computer system to perform a method for translating input data into a universal data language (UDL), comprising:<claim-text>receiving input data, wherein the input data comprises at least one data term;</claim-text><claim-text>processing the at least one data term using at least one natural language processor, wherein the at least one natural language processor comprises at least one machine-learning algorithm;</claim-text><claim-text>comparing the at least one data term to at least one universal data language (UDL) library;</claim-text><claim-text>based on the comparison of the at least one data term to the at least one UDL library, calculating a similarity score, wherein the similarity score indicates a similarity between the at least one data term and at least one UDL term in the at least one UDL library; and</claim-text><claim-text>if the similarity score is above a similarity threshold, translating the at least one data term to the at least one UDL term in the at least one UDL library.</claim-text></claim-text></claim></claims></us-patent-application>