<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005102A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005102</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17305161</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>3</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>46</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>3</main-group><subgroup>4015</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>4652</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6219</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">FAST COLOR CLUSTERING FOR PREPROCESSING AN IMAGE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>INTERNATIONAL BUSINESS MACHINES CORPORATION</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Fiammante</last-name><first-name>Marc</first-name><address><city>Nice Meridia</city><country>FR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Broyelle</last-name><first-name>Jean-Armand</first-name><address><city>Beaulieu</city><country>FR</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An approach is provided for color clustering for preprocessing an image. A cross-product on values of pixels in a source image and a number of bits per channel is determined, rounded to integer values, and left aligned to specify a target image. The following actions are repeatedly performed until a count of colors in the target image equals a target: a least frequent color in the target image is identified, distances between the least frequent color and other colors in the target image are determined, a least distance among the distances is determined, where the least distance is between the least frequent color and a closest color, a merged color is generated by merging the least frequent color and the closest color, and the count of the colors in the target image is reduced by replacing the least frequent color and the closest color with the merged color.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="166.62mm" wi="137.41mm" file="US20230005102A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="182.46mm" wi="139.45mm" file="US20230005102A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="217.25mm" wi="163.15mm" file="US20230005102A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="187.62mm" wi="163.91mm" file="US20230005102A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="202.61mm" wi="162.22mm" file="US20230005102A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="146.56mm" wi="143.17mm" file="US20230005102A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The present invention relates to image processing, and more particularly to color clustering for preprocessing images in machine learning applications.</p><p id="p-0003" num="0002">Image processing can use ultra-low precision algorithms (i.e., reduced precision machine learning) to accelerate inference and training speed on low compute capability devices (e.g., edge devices). For reduced precision machine learning, target color channels are based on a reduced number of bits in images. Current techniques to reduce the precision of images include posterization/masking, K-Means clustering, and accelerated K-Means clustering.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0004" num="0003">In one embodiment, the present invention provides a computer system that includes a central processing unit (CPU), a memory coupled to the CPU, and one or more computer readable storage media coupled to the CPU. The one or more computer readable storage media collectively contain instructions that are executed by the CPU via the memory to implement a method of color clustering for preprocessing an image. The method includes the computer system determining an initial number of colors by adding an integer margin to K. K is an integer equal to a target number of colors that is less than a total number of colors in a source image. The initial number of colors is less than the total number of colors in the source image. The method further includes the computer system determining a number of bits per channel which is greater than the initial number of colors based on 2{circumflex over (&#x2003;)}<sup>((a number of bits)*(a number of channels))</sup>&#x3e;(K+the integer margin). The method further includes the computer system determining a cross-product on the values of pixels in the source image and the number of bits per channel. The method further includes the computer system rounding the cross-product to integer values. The method further includes the computer system left aligning the rounded cross-product on a specified number of bits. The left aligned rounded cross-product specifies a target image having a number of colors equal to the initial number of colors. The method further includes the computer system determining a count of remaining unique colors in the target image after the determining the cross-product and the left aligning. The method further includes the computer system determining that the count of the remaining unique colors is greater than K. The method further includes repeating the computer system identifying a least frequent color in the target image that has a least frequency among colors in the target image, the computer system determining distances between the least frequent color and other colors in the target image, the computer system determining a least distance among the distances, the least distance being between the least frequent color and a closest color among the other colors, the computer system generating a merged color by merging the least frequent color and the closest color, and the computer system reducing a count of the colors in the target image by replacing the least frequent color and the closest color with the merged color in the colors in the target image, until the count of the colors in the target image is equal to K and the target image is a final target image having K colors.</p><p id="p-0005" num="0004">A computer program product and a method corresponding to the above-summarized computer system are also described and claimed herein.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a system for color clustering for preprocessing an image, in accordance with embodiments of the present invention.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> depict a flowchart of a process of color clustering for preprocessing an image, where the process is implemented in the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with embodiments of the present invention.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of color reduction using a tree created in the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> and the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with embodiments of the present invention.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of a computer that is included in the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and that implements the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>, in accordance with embodiments of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><heading id="h-0005" level="2">Overview</heading><p id="p-0010" num="0009">Reduced precision machine learning applications require target color channels to be based on a reduced number of bits. Current approaches for reducing image precision are (i) computationally expensive and slow or (ii) lose an excessive amount of image quality and image information. The traditional K-Means clustering approach is a common unsupervised machine learning algorithm that creates clusters of pixels to reduce image precision, but the processing time (e.g., for processing video) is slow. Various known accelerated variations on the K-Means algorithm are still based on the discovery of K centroids and therefore spend a significant amount of time on the centroid-pixels distance computations. Other accelerated K-Means approaches enhance speed while sacrificing image quality. Compared to the traditional K-Means approach, simple quantization by integer division and variance quantization are faster, but result in lower quality images.</p><p id="p-0011" num="0010">Embodiments of the present invention address the aforementioned unique challenges of reducing image precision (e.g., four or fewer bits per channel instead of eight bits) by providing an approach for color clustering for preprocessing an image that is fast while retaining a significant amount of image quality and image information. The approach provided by embodiments of the present invention includes applying a cross-product on images to reduce the number of colors and left aligning the result of the cross-product to compute color distance. In one embodiment, the image precision reduction provides a clustering of K colors in a target image by applying the aforementioned cross-product to initially reduce the number of colors in the source image to a number that exceeds K by a specified margin (e.g., a margin of K/2), followed by merging pixels in the target image that have a close color distance until the target image is left with exactly K different colors. As used herein, K is a positive integer. In one embodiment, the process of reducing image precision is one order of magnitude faster than the traditional K-Means approach, while preserving the quality of the image and image information, as indicated in a color histogram.</p><p id="p-0012" num="0011">In one embodiment, the image precision reduction is performed for three channels (e.g., relative to RGB (red-green-blue) images having three channels). In other embodiments, image precision reduction is provided for images having more or less than three channels (e.g., infrared, ultraviolet, etc., as in some satellite images).</p><heading id="h-0006" level="2">System for Color Clustering for Preprocessing an Image</heading><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a system <b>100</b> for color clustering for preprocessing an image, in accordance with embodiments of the present invention. System <b>100</b> includes a computer <b>102</b> that includes a software-based color clustering system <b>104</b> for reducing image precision by using cross-product reduction and left alignment of the result of the cross-product, while preserving the quality of the image and without losing a significant amount of image information. Color clustering system <b>104</b> includes a cross-product module <b>106</b>, a left alignment module <b>108</b>, a map generation module <b>110</b>, and a tree module <b>112</b>.</p><p id="p-0014" num="0013">Color clustering system <b>104</b> receives a source image <b>114</b> and a target number of colors <b>116</b> for a target image <b>118</b> that is generated by color clustering system <b>104</b>. The target number of colors <b>116</b> is also referred to herein as K (i.e., a positive integer less than the total number of colors in source image <b>114</b>). In one embodiment, cross-product module <b>106</b> applies a cross-product on pixel values of source image <b>114</b> to generate a cross-product rounded to integer values, which reduces the number of colors from the number of colors in the source image <b>114</b> to a reduced, initial number of colors in an initial target image (i.e., reduce the number of colors to an integer count that exceeds K plus a specified margin (e.g., a margin of K/2), where the integer count exceeds K plus the margin by a small, predefined amount).</p><p id="p-0015" num="0014">Left alignment module <b>108</b> left aligns the rounded cross-product resulting from cross-product module <b>106</b>, which provides for a computation of color distances.</p><p id="p-0016" num="0015">Map generation module <b>110</b> generates a flat map if the target number of colors <b>116</b> is small; i.e., a number less than a predefined threshold number (e.g., a number&#x3c;4096). If the target number colors is not small, map generation module <b>110</b> generates a map with unique colors as an index, with a count of pixels per unique reduced color in target image <b>118</b>.</p><p id="p-0017" num="0016">Tree module <b>112</b> creates a tree whose initial nodes are specified by the colors in the initial target image indicated by the left aligned rounded cross-product provided by cross-product module <b>106</b> and left alignment module <b>108</b>. In one embodiment, tree module <b>112</b> (<i>i</i>) determines the least frequent color in the target image <b>118</b>, (ii) determines the closest color in target image <b>118</b> (i.e., the color that is closest in distance to the least frequent color), (iii) creates a merged color that merges the least frequent color and the closest color, and (iv) replaces in target image <b>118</b> the least frequent color and the closest color with the merged color. Tree module <b>112</b> repeats the aforementioned steps (i) through (iv) until target image <b>118</b> is left with K colors.</p><p id="p-0018" num="0017">The functionality of the components shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is described in more detail in the discussion of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and <figref idref="DRAWINGS">FIG. <b>4</b></figref> presented below.</p><heading id="h-0007" level="2">Process for Color Clustering for Preprocessing an Image</heading><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> depicts a flowchart of a process of color clustering for preprocessing an image, where the process is implemented in the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with embodiments of the present invention. The process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> begins at a start node <b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In step <b>202</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) receives source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and K (i.e., target number <b>116</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) of colors for target image <b>118</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>)). In one embodiment, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) normalizes source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0020" num="0019">In step <b>204</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines an initial number of colors as K+a predetermined margin (i.e., a margin that is a positive integer). In one embodiment, the predetermined margin is K/2. The initial number of colors is greater than K and less than the total number of colors in source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Adding the margin to K ensures the maintenance of a differentiated color histogram.</p><p id="p-0021" num="0020">In step <b>205</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) evaluates a bits per channel count to be greater than the initial number of colors by using the inequality presented below:</p><p id="p-0022" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>2{circumflex over (&#x2003;)}<sup>((number of bits)*(number of channels))</sup>&#x3e;(<i>K</i>+predetermined margin)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0023" num="0021">In step <b>206</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines a cross-product on the values of pixels in source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and the number of bits per channel evaluated in step <b>205</b> to replace the colors in source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) with colors whose count is the aforementioned initial number of colors.</p><p id="p-0024" num="0022">In step <b>208</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) rounds the cross-product determined in step <b>206</b> to integer values (i.e., generates a rounded cross-product). In one embodiment, cross-product module <b>106</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) performs steps <b>206</b> and <b>208</b>.</p><p id="p-0025" num="0023">In one embodiment, to accelerate computation time, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) uses pre-computed lookup tables to determine the cross-product. Alternatively, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) uses fast integer rounding computation (i.e., bit shift and integer division) to compute the cross-product.</p><p id="p-0026" num="0024">In step <b>210</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) left aligns the rounded cross-product generated in step <b>208</b>. The left aligned rounded cross-product specifies an initial target image, which is modified into successive tentative target image(s) by an iterative process described in subsequent steps of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> until a final target image (i.e., target image <b>118</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>)) is generated, as described below. In one embodiment, left alignment module <b>108</b> performs step <b>210</b>.</p><p id="p-0027" num="0025">In one embodiment, step <b>210</b> includes left aligning on an 8 bits value to compute color distance.</p><p id="p-0028" num="0026">For example, for 4 bits <b>191</b> round((b&#x2018;1011 111&#x2019;)*15/255)&#x3c;&#x3c;4=&#x3e;176 (b&#x2018;1011 000&#x2019;)</p><p id="p-0029" num="0027">As one example, the following code performs steps <b>206</b>, <b>208</b>, and <b>210</b>.</p><p id="p-0030" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>max_colors_number_for_significant_bits=2**significant_bits&#x2212;1<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0031" num="0028"># Start with pixel color maximum value at <b>255</b> and compute cross product for</p><p id="p-0032" num="0029"># significant_bits bit</p><p id="p-0033" num="0030">for color in range (0,256):</p><p id="p-0034" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>val=(max_colors_number_for_significant_bits*color)/(255)<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0031"># Round cross product to integer value and left justify result on 8 bits</li>        <li id="ul0002-0002" num="0032">#8 bits justification provides an improved visual result for merging colors</li>        <li id="ul0002-0003" num="0033"># by color distance</li>    </ul>    </li></ul></p><p id="p-0035" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>colors[significant_bits,color]=int(round(val)&#x3c;(8&#x2212;significant_bits))<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0036" num="0034">Because the evaluation of the bits per channel count in step <b>205</b> may not lead to a left aligned rounded cross-product after step <b>210</b> that has a sufficient number of colors, steps <b>212</b>, <b>214</b>, and <b>216</b>, as described below, are needed to ensure a sufficient number of colors.</p><p id="p-0037" num="0035">In step <b>212</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines a count of the remaining unique colors in the initial or tentative target image after the determination of the cross-product in step <b>206</b> and the left alignment in step <b>210</b>.</p><p id="p-0038" num="0036">In step <b>214</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines whether the count of the remaining unique colors is greater than K. If color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines in step <b>214</b> that the count of the remaining unique colors is not greater than K, then the No branch of step <b>214</b> is taken and step <b>216</b> is performed.</p><p id="p-0039" num="0037">In step <b>216</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) increments the number of bits per channel. Following step <b>216</b>, the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> loops back to step <b>206</b> to determine a subsequent cross-product using the incremented number of bits per channel.</p><p id="p-0040" num="0038">Returning to step <b>214</b>, if color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines that the count of the remaining unique colors is greater than K, then the Yes branch of step <b>214</b> is taken, and the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> continues with step <b>218</b> in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>.</p><p id="p-0041" num="0039">Subsequent to step <b>214</b> and prior to step <b>218</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) creates either a flat map or a regular map with unique colors as an index, with a count of pixels per unique color in the reduced number of colors. Color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) uses the flat map or regular map to compute unique colors after the reduction in the number of colors. In one embodiment, map generation module <b>110</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates a flat map if the target number of colors is less than a predefined number (e.g., less than 4096); otherwise, map generation module <b>110</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates a regular map with the unique colors as an index. Using the flat map is faster for cases in which the target number of colors is small (e.g., less than 4096).</p><p id="p-0042" num="0040">For example, the following code provides a color index for a flat map:</p><p id="p-0043" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>int colorindex=((cchannel[2]&#x3e;&#x3e;(8&#x2212;significant))&#x3c;&#x3c;(2*significant))|((cchannel[1]&#x3e;&#x3e;(8&#x2212;significant))&#x3c;&#x3c;(significant))|(cchannel[0]&#x3e;&#x3e;(8&#x2212;significant))<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0044" num="0041">For example, the following code provides the unique color index for a regular map:</p><p id="p-0045" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>int uniqueindex=cchannel[2]&#x3c;&#x3c;2*8+cchannel[1]&#x3c;&#x3c;1*8+cchannel[0]&#x3c;&#x3c;0*8<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0046" num="0042">In one embodiment, to simplify the key access to the map, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) merges all channels into a single integer key, where each channel is in a separate bit range in the integer key. In the case of a flat map, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates the integer key by concatenating channel significant bits (i.e., significant bits corresponding to the channels).</p><p id="p-0047" num="0043">For example, the three RGB channels are encoded on three bits and left aligned as:</p><p id="p-0048" num="0044">rrr00000</p><p id="p-0049" num="0045">ggg00000</p><p id="p-0050" num="0046">bbb00000</p><p id="p-0051" num="0047">In the three RGB channel example presented above, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) extracts the channel significant bits of rrr, ggg, and bbb. Color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) then shifts the rrr two times the significant bits to the left, shifts the ggg one times the significant bits to the left, and keeps the bbb as it is (i.e., without shifting the bbb). The resulting unique index is rrrgggbbb.</p><p id="p-0052" num="0048">Step <b>218</b> starts a loop of an iterative process within the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> that includes steps <b>218</b>, <b>220</b>, <b>222</b>, <b>224</b>, <b>226</b>, and <b>228</b>. In the discussion of steps <b>218</b>, <b>220</b>, <b>222</b>, <b>224</b>, <b>226</b>, and <b>228</b>, a step being performed in the first iteration of the loop refers to the initial target image and a step being performed in a subsequent iteration of the loop refers to a current tentative target image.</p><p id="p-0053" num="0049">Subsequent to step <b>214</b> and prior to step <b>218</b>, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) creates a tree whose initial leaves specify the colors in the initial target image. Hereinafter, in the discussion of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>, the level of the tree that includes the initial leaves is referred to as the initial leaf level. In one embodiment, the tree initially has two levels below the root (i.e., a parent level and the initial leaf level below the parent level). Alternatively, the tree initially has exactly one level below the root (i.e., the initial leaf level) and the steps described below relative to <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> reduce the number of colors in the one level below the root to K colors.</p><p id="p-0054" num="0050">In step <b>218</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies a least frequent color in the initial target image or current tentative target image. In one embodiment, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies an initial leaf or other node in the initial leaf level in the tree that specifies the least frequent color.</p><p id="p-0055" num="0051">In one embodiment, prior to step <b>218</b>, tree module (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies a parent node in the parent level of the tree that has the most child nodes compared to other parent nodes in the tree. The subsequent steps in <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> starting with step <b>218</b> are applied to the colors specified by the child nodes of the identified parent node, but not to the other colors specified by child nodes of the other parent nodes (i.e., the parent nodes other than the identified parent node). For example, after identifying a parent node P in the parent level of the tree as having the most child nodes, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) in step <b>218</b> identifies a node within the child nodes of the parent node P that specifies the least frequent color among the colors specified by the child nodes of the parent node P.</p><p id="p-0056" num="0052">In step <b>220</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines distances between the least frequent color identified in step <b>218</b> and other colors in the initial target image or current tentative target image. In one embodiment, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines the distances in step <b>220</b> as the Euclidean distances between the least frequent color and the other colors in the initial or tentative target image (i.e., Euclidean distances between RGB (red-green-blue) values of pixels).</p><p id="p-0057" num="0053">In step <b>222</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines a least distance among the distances determined in step <b>220</b>. Subsequent to step <b>222</b> and prior to step <b>224</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies a closest color to the least frequent color identified in step <b>218</b>, where the closest color is the color in the initial or tentative target image whose distance to the least frequent color identified in step <b>218</b> is the least distance determined in step <b>222</b>. In one embodiment, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies another leaf or other node in the initial leaf level in the tree that specifies the closest color.</p><p id="p-0058" num="0054">In step <b>224</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates a merged color by merging the least frequent color identified in step <b>218</b> and the closest color. By using color distances as the basis for generating the merged color, colors that are close to each other visually and which include a least frequent color are merged first.</p><p id="p-0059" num="0055">In one or more embodiments, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines or receives a first weight associated with the least frequent color and a second weight associated with the closest color and the generation of the merged color in step <b>224</b> is based on the first and second weights. In one embodiment, the first weight is based on a frequency of the least frequent color in the current tentative target image and the second weight is based on a frequency of the closets color in the current tentative target image.</p><p id="p-0060" num="0056">In step <b>226</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) reduces a count of the colors in the initial or tentative target image to form a new tentative target image by replacing the least frequent color identified in step <b>218</b> and the closest color with the merged color generated in step <b>224</b>. In one embodiment, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) in step <b>226</b> updates the tree by creating a new node in the tree at the initial leaf level, where the new node specifies the merged color, and pushes (i.e., moves) the nodes specifying the least frequent color and the closest color to a new level immediately below the initial leaf level. The new node has a branch to the node specifying the least frequent color and another branch to the node specifying the closest color. The color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) uses the pushing of the nodes to the new level to keep track of the initial colors that led to a merged color. Keeping track of the initial colors that led to the merged color provides a final processing of the image that corrects the initial image. Without keeping track of the initial colors, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) would not know which color is to be replaced by the merged values, or which colors pertain to the same merge branch for computing a final average if required.</p><p id="p-0061" num="0057">In one embodiment, after the generation of the merged color in step <b>224</b> and the replacement of the least frequent color and closest color by the merged color in step <b>226</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) updates a map that associates the pixel values of the image with the initial number of colors to the reduced colors resulting from steps <b>224</b> and <b>226</b>.</p><p id="p-0062" num="0058">In one embodiment, for the most populated cross-product cluster with fewer than K clusters, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) aggregates the sub-clusters based on colors distance.</p><p id="p-0063" num="0059">In step <b>228</b>, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines whether the count of colors in the new tentative target image equals K. If color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines in step <b>228</b> that the count of colors in the new tentative target image does not equal K, then the No branch of step <b>228</b> is taken and the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> loops back to step <b>218</b>, with the new tentative target image becoming the current tentative target image.</p><p id="p-0064" num="0060">If color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines in step <b>228</b> that the count of colors in the new tentative target image equals K, then the new tentative target image is a final target image (i.e., target image <b>118</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>)) having exactly K different colors, the Yes branch of step <b>228</b> is taken, and the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> ends at an end node <b>230</b>.</p><p id="p-0065" num="0061">Alternatively, after the Yes branch of step <b>228</b> is taken, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates the final target image (i.e., target image <b>118</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) by replacing the colors in source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) with the colors in the new tentative target image.</p><p id="p-0066" num="0062">In one embodiment, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) performs an optional post-processing after the Yes branch of step <b>228</b> to generate the final target image <b>118</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The post-processing may be performed in response to a user input or based on a default value of a parameter. Color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates a mapping of the K colors in the tentative target image to respective pixel values in source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). For each unique color cluster in the tentative target image and based on the generated mapping, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies respective pixel values in source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Based on the identified pixel values, color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) computes respective weighted averages for the clusters. Color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates the final target image <b>118</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) by replacing the pixel values in the source image <b>114</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) with the weighted averages.</p><heading id="h-0008" level="1">Example</heading><p id="p-0067" num="0063"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example <b>300</b> of color reduction using a tree created in the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref> and the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with embodiments of the present invention. Example <b>300</b> includes a tree <b>301</b> created by tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) with K=4. Tree <b>301</b> includes a root node <b>302</b>, parent nodes <b>304</b>, <b>306</b>, and <b>308</b> (i.e., number of parent nodes&#x3c;K), and child nodes <b>310</b>, <b>312</b>, <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b>, and <b>322</b> (i.e., number of child nodes&#x3e;K). The patterns shown in the parent and child nodes indicate different colors in a target image. Tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) creates the child nodes <b>310</b>, <b>312</b>, <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b>, and <b>322</b> and then computes parent node <b>304</b> based on child nodes <b>310</b>, <b>312</b>, and <b>314</b>, parent node <b>306</b> based on child nodes <b>316</b> and <b>318</b>, and parent node <b>308</b> based on child nodes <b>320</b> and <b>322</b>. Child nodes <b>310</b>, <b>312</b>, <b>314</b>, <b>316</b>, <b>318</b>, <b>320</b>, and <b>322</b> are at the initial leaf level of tree <b>301</b>.</p><p id="p-0068" num="0064">Tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies the parent node that has the maximum number of child nodes (i.e., parent node <b>304</b>). In step <b>218</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>), tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) determines that child node <b>314</b> indicates the least frequent color in the target image. In step <b>222</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>), tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) identifies child node <b>312</b> as indicating the closest color to the least frequent color indicated by child node <b>314</b>. In step <b>224</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>), tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) generates a merged color by computing the weighted average of the least frequent color and the closest color (i.e., the colors indicated by child nodes <b>314</b> and <b>312</b>, respectively). In step <b>224</b>, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) merges the colors indicated by child nodes <b>314</b> and <b>312</b> by using the weighted average to determine the merged color.</p><p id="p-0069" num="0065">Tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) updates tree <b>301</b> to become a tree <b>323</b>, which includes a new child node <b>315</b> at the initial leaf level, where the new child node <b>315</b> indicates the merged color (i.e., specified by the weighted average of child nodes <b>314</b> and <b>312</b>) and which has moved child nodes <b>314</b> and <b>312</b> to a new level of tree <b>323</b> immediately below the initial leaf level (i.e., the number of child nodes in the initial leaf level in tree <b>323</b> is reduced by one from the number of child nodes in the initial leaf level in tree <b>301</b>).</p><p id="p-0070" num="0066">After one or more successive iterations of steps <b>218</b>, <b>220</b>, <b>222</b>, <b>224</b>, <b>226</b>, and <b>228</b> in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) updates one or more successive trees (not shown) to become a tree <b>325</b>, which includes a first new child node <b>323</b> in the initial leaf level indicating a color merged from the colors indicated by child nodes <b>316</b> and <b>318</b> in tree <b>323</b>, and a second new child node <b>325</b> in the initial leaf level indicating a color merged from the colors indicated by child nodes <b>320</b> and <b>322</b>. To form tree <b>325</b>, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) has moved child nodes <b>316</b> and <b>318</b> to a new level immediately below the initial leaf level, so that child nodes <b>316</b> and <b>318</b> are branches from new child node <b>323</b>. Furthermore, tree module <b>112</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) has moved child nodes <b>320</b> and <b>322</b> to a new level immediately below the initial leaf level, so that child nodes <b>320</b> and <b>322</b> are branches from new child node <b>325</b>. The iteration of steps <b>218</b>, <b>220</b>, <b>222</b>, <b>224</b>, <b>226</b>, and <b>228</b> in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> ends with the generation of tree <b>325</b> because the count of the child nodes in the initial leaf level in tree <b>325</b> equals K (i.e., the count of the number of different colors in the target image as indicated by the number of child nodes in the initial leaf level is 4, which equals K, which leads to the Yes branch of step <b>228</b> in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> and the end node <b>230</b> in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>).</p><heading id="h-0009" level="2">Computer System</heading><p id="p-0071" num="0067"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of a computer that is included in the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> and that implements the process of <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>, in accordance with embodiments of the present invention. Computer <b>102</b> is a computer system that generally includes a central processing unit (CPU) <b>402</b>, a memory <b>404</b>, an input/output (I/O) interface <b>406</b>, and a bus <b>408</b>. Further, computer <b>102</b> is coupled to I/O devices <b>410</b> and a computer data storage unit <b>412</b>. CPU <b>402</b> performs computation and control functions of computer <b>102</b>, including executing instructions included in program code <b>414</b> for color clustering system <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) to perform a method of color clustering for preprocessing an image, where the instructions are executed by CPU <b>402</b> via memory <b>404</b>. CPU <b>402</b> may include a single processing unit or processor or be distributed across one or more processing units or one or more processors in one or more locations (e.g., on a client and server).</p><p id="p-0072" num="0068">Memory <b>404</b> includes a known computer readable storage medium, which is described below. In one embodiment, cache memory elements of memory <b>404</b> provide temporary storage of at least some program code (e.g., program code <b>414</b>) in order to reduce the number of times code must be retrieved from bulk storage while instructions of the program code are executed. Moreover, similar to CPU <b>402</b>, memory <b>404</b> may reside at a single physical location, including one or more types of data storage, or be distributed across a plurality of physical systems or a plurality of computer readable storage media in various forms. Further, memory <b>404</b> can include data distributed across, for example, a local area network (LAN) or a wide area network (WAN).</p><p id="p-0073" num="0069">I/O interface <b>406</b> includes any system for exchanging information to or from an external source. I/O devices <b>410</b> include any known type of external device, including a display, keyboard, etc. Bus <b>408</b> provides a communication link between each of the components in computer <b>102</b>, and may include any type of transmission link, including electrical, optical, wireless, etc.</p><p id="p-0074" num="0070">I/O interface <b>406</b> also allows computer <b>102</b> to store information (e.g., data or program instructions such as program code <b>414</b>) on and retrieve the information from computer data storage unit <b>412</b> or another computer data storage unit (not shown). Computer data storage unit <b>412</b> includes one or more known computer readable storage media, where a computer readable storage medium is described below. In one embodiment, computer data storage unit <b>412</b> is a non-volatile data storage device, such as, for example, a solid-state drive (SSD), a network-attached storage (NAS) array, a storage area network (SAN) array, a magnetic disk drive (i.e., hard disk drive), or an optical disc drive (e.g., a CD-ROM drive which receives a CD-ROM disk or a DVD drive which receives a DVD disc).</p><p id="p-0075" num="0071">Memory <b>404</b> and/or storage unit <b>412</b> may store computer program code <b>414</b> that includes instructions that are executed by CPU <b>402</b> via memory <b>404</b> to color cluster for preprocessing an image. Although <figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts memory <b>404</b> as including program code, the present invention contemplates embodiments in which memory <b>404</b> does not include all of code <b>414</b> simultaneously, but instead at one time includes only a portion of code <b>414</b>.</p><p id="p-0076" num="0072">Further, memory <b>404</b> may include an operating system (not shown) and may include other systems not shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0077" num="0073">As will be appreciated by one skilled in the art, in a first embodiment, the present invention may be a method; in a second embodiment, the present invention may be a system; and in a third embodiment, the present invention may be a computer program product.</p><p id="p-0078" num="0074">Any of the components of an embodiment of the present invention can be deployed, managed, serviced, etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to color clustering for preprocessing an image. Thus, an embodiment of the present invention discloses a process for supporting computer infrastructure, where the process includes providing at least one support service for at least one of integrating, hosting, maintaining and deploying computer-readable code (e.g., program code <b>414</b>) in a computer system (e.g., computer <b>102</b>) including one or more processors (e.g., CPU <b>402</b>), wherein the processor(s) carry out instructions contained in the code causing the computer system to color cluster for preprocessing an image. Another embodiment discloses a process for supporting computer infrastructure, where the process includes integrating computer-readable program code into a computer system including a processor. The step of integrating includes storing the program code in a computer-readable storage device of the computer system through use of the processor. The program code, upon being executed by the processor, implements a method of color clustering for preprocessing an image.</p><p id="p-0079" num="0075">While it is understood that program code <b>414</b> for color clustering for preprocessing an image may be deployed by manually loading directly in client, server and proxy computers (not shown) via loading a computer-readable storage medium (e.g., computer data storage unit <b>412</b>), program code <b>414</b> may also be automatically or semi-automatically deployed into computer <b>102</b> by sending program code <b>414</b> to a central server or a group of central servers. Program code <b>414</b> is then downloaded into client computers (e.g., computer <b>102</b>) that will execute program code <b>414</b>. Alternatively, program code <b>414</b> is sent directly to the client computer via e-mail. Program code <b>414</b> is then either detached to a directory on the client computer or loaded into a directory on the client computer by a button on the e-mail that executes a program that detaches program code <b>414</b> into a directory. Another alternative is to send program code <b>414</b> directly to a directory on the client computer hard drive. In a case in which there are proxy servers, the process selects the proxy server code, determines on which computers to place the proxy servers' code, transmits the proxy server code, and then installs the proxy server code on the proxy computer. Program code <b>414</b> is transmitted to the proxy server and then it is stored on the proxy server.</p><p id="p-0080" num="0076">Another embodiment of the invention provides a method that performs the process steps on a subscription, advertising and/or fee basis. That is, a service provider can offer to create, maintain, support, etc. a process of color clustering for preprocessing an image. In this case, the service provider can create, maintain, support, etc. a computer infrastructure that performs the process steps for one or more customers. In return, the service provider can receive payment from the customer(s) under a subscription and/or fee agreement, and/or the service provider can receive payment from the sale of advertising content to one or more third parties.</p><p id="p-0081" num="0077">The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) (i.e., memory <b>404</b> and computer data storage unit <b>412</b>) having computer readable program instructions <b>414</b> thereon for causing a processor (e.g., CPU <b>402</b>) to carry out aspects of the present invention.</p><p id="p-0082" num="0078">The computer readable storage medium can be a tangible device that can retain and store instructions (e.g., program code <b>414</b>) for use by an instruction execution device (e.g., computer <b>102</b>). The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0083" num="0079">Computer readable program instructions (e.g., program code <b>414</b>) described herein can be downloaded to respective computing/processing devices (e.g., computer <b>102</b>) from a computer readable storage medium or to an external computer or external storage device (e.g., computer data storage unit <b>412</b>) via a network (not shown), for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card (not shown) or network interface (not shown) in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0084" num="0080">Computer readable program instructions (e.g., program code <b>414</b>) for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0085" num="0081">Aspects of the present invention are described herein with reference to flowchart illustrations (e.g., <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>B</figref>) and/or block diagrams (e.g., <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>4</b></figref>) of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions (e.g., program code <b>414</b>).</p><p id="p-0086" num="0082">These computer readable program instructions may be provided to a processor (e.g., CPU <b>402</b>) of a general purpose computer, special purpose computer, or other programmable data processing apparatus (e.g., computer <b>102</b>) to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium (e.g., computer data storage unit <b>412</b>) that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0087" num="0083">The computer readable program instructions (e.g., program code <b>414</b>) may also be loaded onto a computer (e.g. computer <b>102</b>), other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0088" num="0084">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be accomplished as one step, executed concurrently, substantially concurrently, in a partially or wholly temporally overlapping manner, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0089" num="0085">While embodiments of the present invention have been described herein for purposes of illustration, many modifications and changes will become apparent to those skilled in the art. Accordingly, the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer system comprising:<claim-text>a central processing unit (CPU);</claim-text><claim-text>a memory coupled to the CPU; and</claim-text><claim-text>one or more computer readable storage media coupled to the CPU, the one or more computer readable storage media collectively containing instructions that are executed by the CPU via the memory to implement a method of color clustering for preprocessing an image, the method comprising:<claim-text>the computer system determining an initial number of colors by adding an integer margin to K, K being an integer equal to a target number of colors less than a total number of colors in a source image, and the initial number of colors being less than the total number of colors in the source image;</claim-text><claim-text>the computer system determining a number of bits per channel which is greater than the initial number of colors based on 2<sup>{circumflex over (&#x2003;)}((a number of bits)*(a number of channels))</sup>&#x3e;(K+the integer margin);</claim-text><claim-text>the computer system determining a cross-product on the values of pixels in the source image and the number of bits per channel;</claim-text><claim-text>the computer system rounding the cross-product to integer values;</claim-text><claim-text>the computer system left aligning the rounded cross-product on a specified number of bits, the left aligned rounded cross-product specifying a target image having a number of colors equal to the initial number of colors;</claim-text><claim-text>the computer system determining a count of remaining unique colors in the target image after the determining the cross-product and the left aligning;</claim-text><claim-text>the computer system determining that the count of the remaining unique colors is greater than K;</claim-text><claim-text>repeating the computer system identifying a least frequent color in the target image that has a least frequency among colors in the target image, the computer system determining distances between the least frequent color and other colors in the target image, the computer system determining a least distance among the distances, the least distance being between the least frequent color and a closest color among the other colors, the computer system generating a merged color by merging the least frequent color and the closest color, and the computer system reducing a count of the colors in the target image by replacing the least frequent color and the closest color with the merged color in the colors in the target image, until the count of the colors in the target image is equal to K and the target image is a final target image having K colors.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>the computer system determining an initial count of remaining unique colors after the determining the cross-product and the left aligning;</claim-text><claim-text>the computer system determining that the initial count of the remaining unique colors is not greater than K;</claim-text><claim-text>in response to the determining that the initial count is not greater than K, the computer system incrementing the number of bits per channel; and</claim-text><claim-text>using the incremented number of bits per channel, the computer system repeating the determining the cross-product, the rounding the cross-product, the left aligning the rounded cross-product, and determining a new count of the remaining unique colors, until the new count of the remaining unique colors is greater than K.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>the computer system creating a tree whose leaves in an initial leaf level of the tree specify the colors in the target image, the leaves including a first leaf specifying the least frequent color and a second leaf specifying the closest color, wherein the replacing the least frequent color and the closest color with the merged color in the colors in the target image includes creating a new node in the tree specifying the merged color and moving the first leaf specifying the least frequent color and the second leaf specifying the closest color to a new level of the tree below the initial leaf level, the first and second leaves being on branches from the new node.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>the computer system determining a first weight associated with the least frequent color and a second weight associated with the closest color, the first weight being based on a frequency of the least frequent color in the target image and the second weight being based on a frequency of the closest color in the target image, wherein the generating the merged color is based on the first and second weights.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>the computer system determining that the number of colors in the target image is less than a threshold number of colors;</claim-text><claim-text>based on the number of colors in the target image being less than the threshold number of colors, the computer system generating a flat map for computing unique colors after the reducing the count of the colors in the target image; and</claim-text><claim-text>the computer system generating a unique key to index the flat map by concatenating significant bits of channels for the colors in the target image.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>the computer system generating a mapping of the K colors in the final target image to respective pixel values in the source image;</claim-text><claim-text>for colors in the final target image and based on the generated mapping, the computer system identifying respective pixel values in the source image;</claim-text><claim-text>based on the identified pixel values, the computer system computing respective weighted averages for the colors; and</claim-text><claim-text>the computer system generating the final target image by replacing pixel values in the source image with the weighted averages.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determining the cross-product comprises:<claim-text>the computer system employing a pre-computed lookup table of cross-products for a determination of the cross-product.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer program product for color clustering for preprocessing an image, the computer program product comprising:<claim-text>one or more computer readable storage media having computer readable program code collectively stored on the one or more computer readable storage media, the computer readable program code being executed by a central processing unit (CPU) of a computer system to cause the computer system to perform a method comprising:<claim-text>the computer system determining an initial number of colors by adding an integer margin to K, K being an integer equal to a target number of colors less than a total number of colors in a source image, and the initial number of colors being less than the total number of colors in the source image;</claim-text><claim-text>the computer system determining a number of bits per channel which is greater than the initial number of colors based on 2{circumflex over (&#x2003;)}<sup>((a number of bits)*(a number of channels))</sup>&#x3e;(K+the integer margin);</claim-text><claim-text>the computer system determining a cross-product on the values of pixels in the source image and the number of bits per channel;</claim-text><claim-text>the computer system rounding the cross-product to integer values;</claim-text><claim-text>the computer system left aligning the rounded cross-product on a specified number of bits, the left aligned rounded cross-product specifying a target image having a number of colors equal to the initial number of colors;</claim-text><claim-text>the computer system determining a count of remaining unique colors in the target image after the determining the cross-product and the left aligning;</claim-text><claim-text>the computer system determining that the count of the remaining unique colors is greater than K;</claim-text><claim-text>repeating the computer system identifying a least frequent color in the target image that has a least frequency among colors in the target image, the computer system determining distances between the least frequent color and other colors in the target image, the computer system determining a least distance among the distances, the least distance being between the least frequent color and a closest color among the other colors, the computer system generating a merged color by merging the least frequent color and the closest color, and the computer system reducing a count of the colors in the target image by replacing the least frequent color and the closest color with the merged color in the colors in the target image, until the count of the colors in the target image is equal to K and the target image is a final target image having K colors.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>the computer system determining an initial count of remaining unique colors after the determining the cross-product and the left aligning;</claim-text><claim-text>the computer system determining that the initial count of the remaining unique colors is not greater than K;</claim-text><claim-text>in response to the determining that the initial count is not greater than K, the computer system incrementing the number of bits per channel; and</claim-text><claim-text>using the incremented number of bits per channel, the computer system repeating the determining the cross-product, the rounding the cross-product, the left aligning the rounded cross-product, and determining a new count of the remaining unique colors, until the new count of the remaining unique colors is greater than K.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>the computer system creating a tree whose leaves in an initial leaf level of the tree specify the colors in the target image, the leaves including a first leaf specifying the least frequent color and a second leaf specifying the closest color, wherein the replacing the least frequent color and the closest color with the merged color in the colors in the target image includes creating a new node in the tree specifying the merged color and moving the first leaf specifying the least frequent color and the second leaf specifying the closest color to a new level of the tree below the initial leaf level, the first and second leaves being on branches from the new node.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>the computer system determining a first weight associated with the least frequent color and a second weight associated with the closest color, the first weight being based on a frequency of the least frequent color in the target image and the second weight being based on a frequency of the closest color in the target image, wherein the generating the merged color is based on the first and second weights.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>the computer system determining that the number of colors in the target image is less than a threshold number of colors;</claim-text><claim-text>based on the number of colors in the target image being less than the threshold number of colors, the computer system generating a flat map for computing unique colors after the reducing the count of the colors in the target image; and</claim-text><claim-text>the computer system generating a unique key to index the flat map by concatenating significant bits of channels for the colors in the target image.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the method further comprises:<claim-text>the computer system generating a mapping of the K colors in the final target image to respective pixel values in the source image;</claim-text><claim-text>for colors in the final target image and based on the generated mapping, the computer system identifying respective pixel values in the source image;</claim-text><claim-text>based on the identified pixel values, the computer system computing respective weighted averages for the colors; and</claim-text><claim-text>the computer system generating the final target image by replacing pixel values in the source image with the weighted averages.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer program product of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the determining the cross-product comprises:<claim-text>the computer system employing a pre-computed lookup table of cross-products for determining the cross-product.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer-implemented method comprising:<claim-text>determining, by one or more processors, an initial number of colors by adding an integer margin to K, K being an integer equal to a target number of colors less than a total number of colors in a source image, and the initial number of colors being less than the total number of colors in the source image;</claim-text><claim-text>determining, by the one or more processors, a number of bits per channel which is greater than the initial number of colors based on 2{circumflex over (&#x2003;)}<sup>((a number of bits)*(a number of channels))</sup>&#x3e;(K the integer margin);</claim-text><claim-text>determining, by the one or more processors, a cross-product on the values of pixels in the source image and the number of bits per channel;</claim-text><claim-text>rounding, by the one or more processors, the cross-product to integer values;</claim-text><claim-text>left aligning, by the one or more processors, the rounded cross-product on a specified number of bits, the left aligned rounded cross-product specifying a target image having a number of colors equal to the initial number of colors;</claim-text><claim-text>determining, by the one or more processors, a count of remaining unique colors in the target image after the determining the cross-product and the left aligning;</claim-text><claim-text>determining, by the one or more processors, that the count of the remaining unique colors is greater than K;</claim-text><claim-text>repeating, by the one or more processors, identifying a least frequent color in the target image that has a least frequency among colors in the target image, determining distances between the least frequent color and other colors in the target image, determining a least distance among the distances, the least distance being between the least frequent color and a closest color among the other colors, generating a merged color by merging the least frequent color and the closest color, and reducing a count of the colors in the target image by replacing the least frequent color and the closest color with the merged color in the colors in the target image, until the count of the colors in the target image is equal to K and the target image is a final target image having K colors.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>determining, by the one or more processors, an initial count of remaining unique colors after the determining the cross-product and the left aligning;</claim-text><claim-text>determining, by the one or more processors, that the initial count of the remaining unique colors is not greater than K;</claim-text><claim-text>in response to the determining that the initial count is not greater than K, incrementing, by the one or more processors, the number of bits per channel; and</claim-text><claim-text>using the incremented number of bits per channel, repeating, by the one or more processors, the determining the cross-product, the rounding the cross-product, the left aligning the rounded cross-product, and determining a new count of the remaining unique colors, until the new count of the remaining unique colors is greater than K.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>creating, by the one or more processors, a tree whose leaves in an initial leaf level of the tree specify the colors in the target image, the leaves including a first leaf specifying the least frequent color and a second leaf specifying the closest color, wherein the replacing the least frequent color and the closest color with the merged color in the colors in the target image includes creating a new node in the tree specifying the merged color and moving the first leaf specifying the least frequent color and the second leaf specifying the closest color to a new level of the tree below the initial leaf level, the first and second leaves being on branches from the new node.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>determining, by the one or more processors, a first weight associated with the least frequent color and a second weight associated with the closest color, the first weight being based on a frequency of the least frequent color in the target image and the second weight being based on a frequency of the closest color in the target image, wherein the generating the merged color is based on the first and second weights.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>determining, by the one or more processors, that the number of colors in the target image is less than a threshold number of colors;</claim-text><claim-text>based on the number of colors in the target image being less than the threshold number of colors, the computer system generating a flat map for computing unique colors after the reducing the count of the colors in the target image; and</claim-text><claim-text>the computer system generating a unique key to index the flat map by concatenating significantbits of channels for the colors in the target image.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>providing at least one support service for at least one of creating, integrating, hosting, maintaining, and deploying computer readable program code in the computer, the program code being executed by a processor of the computer to implement the determining the initial number of colors, the determining the number of bits per channel, the determining the cross-product on the values of the pixels in the source image and the number of bits per channel, the rounding the cross-product to the integer values, the left aligning the rounded cross-product, the determining the count of the remaining unique colors, the determining that the count of the remaining unique colors is greater than K, and the repeating of the identifying the least frequent color, the determining the distances between the least frequent color and the other colors in the target image, the determining the least distance among the distances, the generating the merged color, and the reducing the count of the colors in the target image.</claim-text></claim-text></claim></claims></us-patent-application>