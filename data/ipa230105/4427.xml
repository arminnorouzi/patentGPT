<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004428A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004428</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17777323</doc-number><date>20201118</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>LU</country><doc-number>LU101480</doc-number><date>20191118</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>48</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>41</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4881</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>433</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2209</main-group><subgroup>486</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">DATA PREPROCESSING FOR A SUPERVISED MACHINE LEARNING PROCESS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>LUXEMBOURG INSTITUTE OF SCIENCE AND TECHNOLOGY (LIST)</orgname><address><city>Esch-sur-Alzette</city><country>LU</country></address></addressbook><residence><country>LU</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Biri</last-name><first-name>Nicolas</first-name><address><city>Joudreville</city><country>FR</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/EP2020/082557</doc-number><date>20201118</date></document-id><us-371c12-date><date>20220517</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented data processing method, including the steps of: providing a first program including a group of operations arranged to satisfy a first set of operation dependencies, the group of operations being adapted for computing data from at least one data source, generating a second program including the group of operations, arranged to satisfy a second set of operation dependencies, and processing the data from the at least one data source with the second program. The group of operations includes a first operation, a second operation, and a third operation. The first set of operation dependencies includes a first dependency between the first operation and the second operation, a second dependency between the first operation and the third operation, and a third dependency between the second operation and the third operation.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="234.95mm" wi="73.15mm" file="US20230004428A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="202.44mm" wi="72.31mm" file="US20230004428A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="232.66mm" wi="136.57mm" file="US20230004428A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="241.64mm" wi="102.95mm" file="US20230004428A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="241.72mm" wi="90.34mm" file="US20230004428A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="241.64mm" wi="92.96mm" file="US20230004428A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.18mm" wi="89.49mm" file="US20230004428A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="239.01mm" wi="132.33mm" file="US20230004428A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="238.93mm" wi="132.33mm" file="US20230004428A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="167.56mm" wi="152.74mm" file="US20230004428A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="161.97mm" wi="154.43mm" file="US20230004428A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The invention lies in the field of data processing. More precisely, the invention offers a method for optimizing the definition of operation dependencies of a provided raw computer program. The invention also provides a computer program for carrying out the method in accordance with the invention. The invention also provides a computer configured for performing the method in accordance with the invention.</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0003" num="0002">The supervised learning phase of a machine learning process generally requires to preprocess the learning data. Indeed, the learning data potentially comprises incomplete data and noise instances which must be removed. Otherwise, the machine learning algorithm may present an important error after generalization, or the learning phase may never converge toward a satisfying solution.</p><p id="p-0004" num="0003">In some technical domains, the learning dataset may comprise millions of data records. Thus, saving these records, at the different stages of pre-processing, necessitates a heavy storage infrastructure. In addition, a long runtime remains inescapable for preprocessing the learning dataset in order to clean it. As a corollary, energy consumption remains high.</p><p id="p-0005" num="0004">Last but not least, the learning data may be stored on different data sources. The data storages may use different architectures, and may use different languages. These multiple sources further complicate data preparation.</p><p id="p-0006" num="0005">The document US2018/336020 A1, the document US2017/147943 A1 and the document US2018/276040 A1 provide data processing computer programs.</p><heading id="h-0003" level="1">Technical Problem to be Solved</heading><p id="p-0007" num="0006">It is an objective of the invention to present a method, which overcomes at least some of the disadvantages of the prior art. In particular, it is an objective of the invention to optimize a computer implemented data processing method.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0008" num="0007">According to a first aspect of the invention it is provided a computer implemented data processing method, comprising the steps of: providing a first program comprising a group of operations arranged to satisfy a first set of operation dependencies, said group of operations being adapted for computing data from at least one data source; generating a second program comprising said group of operations, arranged to satisfy a second set of operation dependencies; processing the data from the at least one data source with the second program; wherein: the group of operations comprises: a first operation, a second operation, and a third operation; the first set of operation dependencies comprises: a first dependency between the first operation and the second operation, a second dependency between the first operation and the third operation, and a third dependency between the second operation and the third operation; at step generating, the second set of operation dependencies is defined with the first dependency, the third dependency; and without the second dependency.</p><p id="p-0009" num="0008">Preferably, the process comprises the step parsing the first program in order to identify the operation dependencies, or a step obtaining the operation dependencies.</p><p id="p-0010" num="0009">Preferably, the process comprises the step analysing the connections between the operation dependencies, or a step analysing, or a step analysing operation data, or a step analysing operation precedence, or a step analysing operation dependencies.</p><p id="p-0011" num="0010">Preferably, the process comprises the step changing the arrangement of the operations of the group of operations in order to satisfy a second set of operation dependencies which is defined with the first dependency, the third dependency; and optionally without the second dependency. Preferably, the operation dependencies of the first set and of the second set may be precedence dependencies, notably imposing to perform the first operation before the second operation. Preferably, the first set may comprise more operation dependencies than the second set. Preferably, the group of operations may further comprise a fourth operation, the first set further may comprise a fourth dependency between the first operation and the fourth operation, the second operation being dependency free with respect to the fourth operation.</p><p id="p-0012" num="0011">Preferably, at step generating, the dependency between the second operation and the fourth operation may be such that they may be executed in parallel, and/or at step generating the second set of operation dependencies may be defined with the fourth dependency, the fourth dependency may be configured such that at step processing the fourth operation may be executed before the third operation and possibly before the second operation.</p><p id="p-0013" num="0012">Preferably, all the operations dependent upon at least one operation dependency of the second set may also be dependent upon at least one operation dependency of the first set.</p><p id="p-0014" num="0013">Preferably, at least one operation of the group of operations may be a data transformation operation.</p><p id="p-0015" num="0014">Preferably, at least one operation of the group of operations may be a loading instruction. Preferably, at least one operation of the group of operations may be a data creation function, which reuse pieces of data of the at least one data source, and may comprise an order priority which is modified, notably lowered, in the second program, as compared to the first program.</p><p id="p-0016" num="0015">Preferably, at least one operation of the group of operations may be a filtering operation, and comprises an execution order which may be brought forward in the second program, as compared to the first program.</p><p id="p-0017" num="0016">Preferably, said data comprises a first data set, the at least one data source is a first data source and may further comprise a second data source which may provide a second data set, at least one of the operations may be a joining operation merging the first data set and the second data set. Preferably, at least one operation of the first operation, second operation and third operation may enable a size reduction of the data from at least one data source, said at least one operation being permuted in the second program with respect to the first program. Said at least one operation may be a filtering operation. The data may be an input data, or an output data.</p><p id="p-0018" num="0017">Preferably, at step providing the first program, the operation dependencies may be obtained by parsing the operations of the first program and/or by analysing part of the data involved in these operations.</p><p id="p-0019" num="0018">Preferably, at step providing, at least one of the operation dependencies may be predefined, or provided.</p><p id="p-0020" num="0019">Preferably, the operations in the first program and in the second program may comprise a same end operation and/or a same starting operation.</p><p id="p-0021" num="0020">Preferably, the first program and the second program may be configured for providing a same output when they are provided with a same input.</p><p id="p-0022" num="0021">Preferably, in the first program, the operations of the group of operations may be listed in accordance with a first sequence, and in the second program the execution order between the second operation and the third operation may be inverted with respect to the first sequence. Preferably, the computer implemented data processing method may comprise a step computing a first directed acyclic graph corresponding to the first program.</p><p id="p-0023" num="0022">Preferably, the computer implemented data processing method may comprise a step displaying, using a displaying unit, a second directed acyclic graph corresponding to the second program; without the second dependency; each graph comprising nodes corresponding to the operations of the group of operations, and may further comprise edges joining the nodes.</p><p id="p-0024" num="0023">Preferably, at step obtaining, the first program may be provided in a first programming/coding language, and at step generating the second program may be provided a second programming/coding language, which may be different from the first language.</p><p id="p-0025" num="0024">Preferably, the first program may run on a first computer, and/or the second program may run on a data server.</p><p id="p-0026" num="0025">Preferably, the data server may be a distributed data server on different computers which may be interconnected, the different computers may be separate and distinct physical entities.</p><p id="p-0027" num="0026">Preferably, the method may comprise a step associating priority levels to the operation dependencies and/or to the operations, at step generating the order between the operations may be defined in relation with said priority levels.</p><p id="p-0028" num="0027">Preferably, the computer implemented data processing method may be an iterative method, a program resulting from the step generating said second program may be stored in a memory element after a first iteration, the subsequent program resulting from a subsequent iteration may be stored in a memory element and compared to the program resulting from the first iteration. Preferably, the computer implemented data processing method may comprise a step sending instructions to a database storing the data, the instruction may be an instruction to run the second program and may be coded in a language of the at least one data source.</p><p id="p-0029" num="0028">Preferably, the computer implemented data processing method may be a supervised machine learning data pre-processing method, and the data may be a learning data for the supervised machine learning data pre-processing method.</p><p id="p-0030" num="0029">Preferably, the computer implemented data processing method may further comprise a step combining at least one operation dependency of the first set with at least one operation dependency of the first set in order to form a combined dependency, if another operation dependency of the first set corresponds to the combined dependency, then at step generating, the second set of operation dependencies may be defined without said another operation dependency.</p><p id="p-0031" num="0030">Preferably, the first dependency may be an elementary dependency and the second dependency may be a bypass dependency bypassing the second operation with which the elementary dependency is associated, at step generating the operation dependencies of the second set may be defined without the bypass dependency/dependencies.</p><p id="p-0032" num="0031">Preferably, if two operations mentioned in the first set are also mentioned in the second set, then at step generating the order between the operations of the first set may be defined without one redundant operation dependency.</p><p id="p-0033" num="0032">Preferably, step generating may be executed with computing means.</p><p id="p-0034" num="0033">Preferably, the operation dependencies may comprise elementary dependencies, such as the first dependency and the third dependency; and bypass dependency, such as the second dependency, which may be composed of elementary dependencies; at step generating the orders between the operations may be defined without the bypass dependency.</p><p id="p-0035" num="0034">Preferably, the bypass dependency may be a composed dependency, at step generating the order between the operations may be defined without the composed dependency.</p><p id="p-0036" num="0035">Preferably, each operation dependency may be defined with respect to an antecedent operation or a successor operation.</p><p id="p-0037" num="0036">Preferably, at step processing the second operation and the fourth operation may be run in parallel. Preferably, the operations may be predecessor operations.</p><p id="p-0038" num="0037">Preferably, at step generating, the order between the operations may be defined by the first dependency and the third dependency.</p><p id="p-0039" num="0038">Preferably, at step generating, the second dependency may be disabled.</p><p id="p-0040" num="0039">Preferably, at step obtaining, the second dependency may bypass the second operation.</p><p id="p-0041" num="0040">Preferably, before step generating the first set and/or the second set may be simplified by reducing their numbers of operation dependencies.</p><p id="p-0042" num="0041">Preferably, the operation dependencies of the first set and of the second set may be order dependencies, notably order constraints.</p><p id="p-0043" num="0042">Preferably, at least one operation of the group of operations may be a filtering operation. Preferably, the method may comprise a step merging the first data set and the second data set. Preferably, before step generating, each operation dependency of the second set may be applied to the operations dependent upon operation dependencies of the first set such that the second dependency forms an overlapping dependency which overlaps the third dependency, at step generating the operation dependencies between the operations of the second set may be defined without the overlapping dependency/dependencies.</p><p id="p-0044" num="0043">Preferably, before step generating, each operation dependency of the second set may be integrated in the first set rendering redundant the second dependency, at step generating the operation dependencies between the operations of the second set may be defined without the redundant dependency/dependencies.</p><p id="p-0045" num="0044">Preferably, the operations may comprise at least one heuristic.</p><p id="p-0046" num="0045">It is another object of the invention to provide a computer implemented data processing method, comprising the steps of:</p><p id="p-0047" num="0046">providing a first program comprising a group of operations arranged to satisfy a first set of operation dependencies, said group of operations being adapted for computing data from at least one data source;</p><p id="p-0048" num="0047">generating a second program comprising said group of operations, arranged to satisfy a second set of operation dependencies;</p><p id="p-0049" num="0048">processing the data from the at least one data source with the second program;</p><p id="p-0050" num="0049">wherein:</p><p id="p-0051" num="0050">the group of operations comprises:</p><p id="p-0052" num="0051">a first operation,</p><p id="p-0053" num="0052">a second operation, and</p><p id="p-0054" num="0053">a third operation;</p><p id="p-0055" num="0054">the first set of operation dependencies comprises:</p><p id="p-0056" num="0055">a first dependency between the first operation and the second operation,</p><p id="p-0057" num="0056">a second dependency between the first operation and the third operation, and</p><p id="p-0058" num="0057">a third dependency between the second operation and the third operation;</p><p id="p-0059" num="0058">the computer implemented data processing method further comprises a step combining at least one operation dependency of the first set with at least one operation dependency of the first set in order to form a combined dependency, if another operation dependency of the first set corresponds to the combined dependency, then at step generating the second set of operation dependencies is defined with the first dependency, the third dependency; and without said another operation dependency.</p><p id="p-0060" num="0059">It is another aspect of the invention to provide a computer implemented data processing method comprising the steps of: providing a first program comprising a group of operations arranged to satisfy a first set of operation dependencies, said group of operations being adapted for computing data from at least one data source in order to provide a first data result; the group of operations comprises: a first operation, a second operation, and a third operation; the first set of operation dependencies comprises: a first dependency between the first operation and the second operation, a second dependency between the first operation and the third operation, and a third dependency between the second operation and the third operation; the method further comprising the steps: generating a second program comprising said group of operations, arranged to satisfy a second set of operation dependencies, said second set being defined with the first dependency, the third dependency; and optionally without the second dependency; processing the data from the at least one data source with the second program in order to provide a second data result, said second data result corresponding to the first data result. The feature without the second dependency is not an essential aspect of the invention.</p><p id="p-0061" num="0060">It is another aspect of the invention to provide a computer implemented data processing method comprising the steps of: providing a first program comprising a group of operations arranged to satisfy a first set of operation dependencies, said group of operations being adapted for computing data from at least one data source in order to provide a first data result;</p><p id="p-0062" num="0061">the group of operations comprises: a first operation, a second operation, and a third operation;<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0062">the first set of operation dependencies comprises: a first dependency between the first operation and the second operation, a second dependency between the first operation and the third operation, and a third dependency between the second operation and the third operation;    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0063">the method further comprising the steps:</li>        <li id="ul0002-0002" num="0064">parsing the first program in order to identify the operation dependencies;</li>        <li id="ul0002-0003" num="0065">analysing the connections between the operation dependencies;</li>        <li id="ul0002-0004" num="0066">changing the arrangement of the operations of the group of operations in order to satisfy a second set of operation dependencies which is defined:</li>        <li id="ul0002-0005" num="0067">with the first dependency, the third dependency; and without the second dependency;</li>        <li id="ul0002-0006" num="0068">generating a second program comprising said group of operations, arranged to satisfy the second set of operation dependencies;<br/>processing the data from the at least one data source with the second program in order to provide a second data result, said second data result corresponding to the first data result; and/or said second data being equivalent to the first data result. Step analysing is not an essential aspect of the invention.</li>    </ul>    </li></ul></p><p id="p-0063" num="0069">It is another aspect of the invention to provide a computer implemented method for arranging operations of a first program for processing data from at least one data source, the first program comprises order dependent operations with, namely, a first operation, a second operation and a third operation, the first program comprising a first operation arrangement with order constraints, said order constraints comprising: a first order constraint between the first order dependent operation and the second order dependent operation, a second order constraint between the first order dependent operation and the third order dependent operation, and a third order constraint between the second order dependent operation and the third order dependent operation; the method comprising the steps: identifying the order dependent operations among the operations of the first program; obtaining the order constraint among the order dependent operations; generating a second program with a second operation arrangement where the order between the operations is defined without the second order constraint, and processing the data with the second program.</p><p id="p-0064" num="0070">It is another aspect of the invention to provide a computer implemented method for constraining operations of a first program for processing data from at least one data source, notably a data flow, the method notably being a supervised machine learning data pre-processing method, the first program comprising a plurality of operations; the method comprising the steps: identifying order dependent operations among the operations; obtaining order constraints among the order dependent operations, at least one order dependent operation constraint having at least two order constraints, at least one order dependent operation comprising two order constraints with respect to two other order dependent operations which are order dependent, simplifying dependencies by integration of order constraints in each other, integrating order constraints in each other, remove redundant order constraint(s) in the order dependent operation comprising two order constraints, then provide a second operation arrangement, such as a program update, where the arrangement of the operations and/or the order of the operations is defined by the remaining order constraints; generating a code implementing the second operation arrangement, said code being executable by a processor and/or a database; and run the code with at least one computer processor.</p><p id="p-0065" num="0071">It is another aspect of the invention to provide a computer program comprising computer readable code means, which when run on a computer, cause the computer to perform the computer implemented data processing method according to the invention.</p><p id="p-0066" num="0072">It is another aspect of the invention to provide a computer program product including a computer readable medium on which the computer program according to the invention is stored.</p><p id="p-0067" num="0073">It is another aspect of the invention to provide a computer configured for performing the computer implemented data processing method according to the invention.</p><p id="p-0068" num="0074">The different aspects of the invention may be combined to each other. In addition, the preferable features of each aspect of the invention may be combined with the other aspects of the invention, unless the contrary is explicitly mentioned.</p><heading id="h-0005" level="1">Technical Advantages of the Invention</heading><p id="p-0069" num="0075">The invention reduces constraints between operations, and offers a lightweight solution for defining dependencies. Over an automatic definition of dependencies, only relevant ones are kept and redundant ones are disabled. Thus, data storage required for storing the dependencies is reduced.</p><p id="p-0070" num="0076">The invention drives toward a parallelized operation sequence. Starting from a single path sequence, parallel branches are automatically added where applicable. Thence, the preprocessing in line with the invention saves time.</p><p id="p-0071" num="0077">The orders of different operations are automatically redefined where applicable. Due to the invention, dependencies between operations may allow a simultaneous execution, and reverse the execution order between specific operations.</p><p id="p-0072" num="0078">Useless computations are prevented, and the remaining are split, divided, distributed, to shorten the computation period.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0073" num="0079">Several embodiments of the present invention are illustrated by way of figures, which do not limit the scope of the invention, wherein</p><p id="p-0074" num="0080"><figref idref="DRAWINGS">FIG. <b>1</b></figref> provides a schematic illustration of a first directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0075" num="0081"><figref idref="DRAWINGS">FIG. <b>2</b></figref> provides a schematic illustration of a diagram bock of a computer implemented data processing method in accordance with a preferred embodiment of the invention;</p><p id="p-0076" num="0082"><figref idref="DRAWINGS">FIG. <b>3</b></figref> provides a schematic illustration of another first directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0077" num="0083"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides a schematic illustration of another diagram bock of a computer implemented data processing method in accordance with a preferred embodiment of the invention;</p><p id="p-0078" num="0084"><figref idref="DRAWINGS">FIG. <b>5</b></figref> provides another schematic illustration of a first directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0079" num="0085"><figref idref="DRAWINGS">FIG. <b>6</b><i>a </i></figref>provides a schematic illustration of a second directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0080" num="0086"><figref idref="DRAWINGS">FIG. <b>6</b><i>b </i></figref>provides another schematic illustration of the second directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0081" num="0087"><figref idref="DRAWINGS">FIG. <b>6</b><i>c </i></figref>provides another schematic illustration of the second directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0082" num="0088"><figref idref="DRAWINGS">FIG. <b>7</b><i>a </i></figref>provides another schematic illustration of the second directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0083" num="0089"><figref idref="DRAWINGS">FIG. <b>7</b><i>b </i></figref>provides another schematic illustration of the second directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0084" num="0090"><figref idref="DRAWINGS">FIG. <b>8</b></figref> provides another schematic illustration of the second directed acyclic graph in accordance with a preferred embodiment of the invention;</p><p id="p-0085" num="0091"><figref idref="DRAWINGS">FIG. <b>9</b></figref> provides another schematic illustration of the second directed acyclic graph in accordance with a preferred embodiment of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0086" num="0092">This section describes the invention in further detail based on preferred embodiments and on the figures. Similar reference numbers will be used to describe similar or the same concepts throughout different embodiments of the invention.</p><p id="p-0087" num="0093">It should be noted that features described for a specific embodiment described herein may be combined with the features of other embodiments unless the contrary is explicitly mentioned. Features commonly known in the art will not be explicitly mentioned for the sake of focusing on the features that are specific to the invention. For example, the computer in accordance with the invention is well known by the skilled in the art. Therefore, such a computer will not be described further. Similarly, databases and computer networks that may be used in the environment of the invention are well known concepts that do not need to be detailed further.</p><p id="p-0088" num="0094">By convention, it is understood that supervised leaning designates machine learning tasks requiring labelled training data to infer a statistical model. The learning phase designates the phase during which labelled data is provided to an algorithm to infer the statistical model.</p><p id="p-0089" num="0095"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a computer program, notably a first program comprising. A corresponding directed graph is provided. The computer program may be a preprocessing method for data of a machine learning algorithm. More precisely, the algorithm may be a supervised machine learning algorithm. The data may be a learning data and/or a validation data. The considered data may be a subset of data available on storing means.</p><p id="p-0090" num="0096">The first program comprises a group of operations arranged to satisfy a first set of operation dependencies. This group of operations is adapted for computing data from at least one data source. The group of operations comprises at least: a first operation O<b>1</b>, a second operation O<b>2</b>, and a third operation O<b>3</b>.</p><p id="p-0091" num="0097">The first set of operation dependencies comprises: a first dependency D<b>1</b> (represented in solid line) between the first operation O<b>1</b> and the second operation O<b>2</b>, a second dependency D<b>2</b> (represented in solid line) between the first operation O<b>1</b> and the third operation O<b>3</b>, and a third dependency D<b>3</b> (represented in doted lines) constraining the second operation O<b>2</b> with respect to the third operation O<b>3</b>. Thus, the first operation is dependent upon the second operation and the third operation, which are also order dependent with respect to each other.</p><p id="p-0092" num="0098">The dependencies (D<b>1</b>; D<b>2</b>; D<b>3</b>) may be unidirectional. The dependencies (D<b>1</b>; D<b>2</b>; D<b>3</b>) may be precedence dependencies. The dependencies (D<b>1</b>; D<b>2</b>; D<b>3</b>) are hereby represented by arrows. They may comprise order rules. These rules may define that the first operation O<b>1</b> is carried out before second operation O<b>2</b>, which is itself executed before the third operation O<b>3</b>.</p><p id="p-0093" num="0099">It may be noticed that the second dependency D<b>2</b> is defined in relation with the first operation O<b>1</b> and the third operation O<b>3</b>; whereas these operations are also used to define the first dependency D<b>1</b> and the third dependency D<b>3</b>. The second operation O<b>2</b> forms an intermediate operation that is used to define the first and third dependencies (D<b>1</b>; D<b>3</b>). In the current illustration, the second operation O<b>2</b> is bypassed, or worked around, by the second dependency D<b>2</b>. The former may de considered as a short cut jumping an operation; namely the second operation O<b>2</b>.</p><p id="p-0094" num="0100">It may be understood that the result of the second dependency D<b>2</b> is composed of the first dependency D<b>1</b> and the third dependency D<b>3</b>. The second dependency D<b>2</b> may involve a redundant definition of the combination of the first dependency D<b>1</b> and the third dependency D<b>3</b>. It may be deduced from the current representation that the first dependency D<b>1</b> and the third dependency D<b>3</b> cover the second dependency D<b>2</b>. Therefore, the latter may overlap the formers.</p><p id="p-0095" num="0101"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a diagram block representing a computer implemented data processing method in accordance with the invention. The computer implemented data processing method may be executed on a computer program, notably a first computer program, as described in relation with <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0096" num="0102">The computer implemented data processing method comprises the steps of:</p><p id="p-0097" num="0000">providing <b>100</b> a first program comprising a group of operations arranged to satisfy the first set of operation dependencies, said group of operations being adapted for computing data from at least one data source;<br/>generating <b>102</b> a second program comprising said group of operations, arranged to satisfy a second set of operation dependencies; and<br/>processing <b>120</b> the data from the at least one data source with the second program.</p><p id="p-0098" num="0103">At step generating <b>102</b>, the second set of operation dependencies is defined with the first dependency, the third dependency; but without the second dependency. It may be considered that the second dependency is discarded; or disabled. It may be understood that the second dependency is removed, or deleted. Thus, the second set is free of the so called second dependency.</p><p id="p-0099" num="0104">Step generating <b>102</b> is executed with computing means, or more generally with electronic means. The simplified first program provides an illustrative example. The first program may comprise further operations, and additional dependencies between the operations.</p><p id="p-0100" num="0105">As apparent from the above method, the invention reduces the number of dependencies that are considered for generating the second computer program. Thus, this program generation which may be automatized is less constrained, and the second program is easier to obtain. Thus, the computation resources required for providing the second program are reduced. Moreover, the second set of dependencies is smaller than the first one, such that less memory the required. Fewer reading instructions are necessary. The invention thereby saves energy.</p><p id="p-0101" num="0106">The current computer implemented data processing method way be coded in another computer program, for instance with computer readable code means. When said computer readable code means is executed on a computer, said computer carries out the processing method in accordance with the invention. Said another computer program may be stored on a computer program product including a computer readable medium, such as a storing key, or on a card, or any other storing support.</p><p id="p-0102" num="0107">As an option, before step generating, the data processing process comprises a step parsing the first computer program in order to identify the operation dependencies of the first set.</p><p id="p-0103" num="0108">As an option, before step generating, the data processing process comprises a step analysing the connections between the operation dependencies.</p><p id="p-0104" num="0109">As an option, before step generating, the data processing process comprises a step changing the operation arrangement in order to meet a second set of operation dependencies. The second set differs from the first set in that it is freed from the second dependency.</p><p id="p-0105" num="0110">The data processing process may comprise a step copying or loading the group of operations of the first program. The operations of the first group may be used in order to generate the second program, once their places are adapted. The places modification may comprise a permutation when the places are changed, or a push aside when an operation becomes parallel to another one, or to another branch of operations.</p><p id="p-0106" num="0111">At least one of step parsing, step analysing and step changing is executed after step providing <b>100</b>.</p><p id="p-0107" num="0112"><figref idref="DRAWINGS">FIG. <b>3</b></figref> provides a schematic illustration of another computer program. This computer program may correspond to a first program in accordance with the invention. The computer program is used for data preprocessing; notably in the context of machine learning.</p><p id="p-0108" num="0113">The current computer program comprises more than three operations, for instance thirteen operations (O<b>1</b>-O<b>13</b>). However, this computer program may comprise more operations. The current first program may imply at least one database, for instance at least two databases on which data is stored.</p><p id="p-0109" num="0114">In the current example, the first program comprises the following script:</p><p id="p-0110" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="21pt" align="left"/><colspec colname="2" colwidth="406pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>O1.&#x2003;LOAD_FROM_FILE&#x2003;(&#x2018;dataset1&#x2019;,&#x2003;&#x2018;some_directory/</entry></row><row><entry/><entry/><entry>first_dataset.csv&#x2019;,&#x2003;csv)&#x2003;//&#x2003;firstname,&#x2003;nationality</entry></row><row><entry/><entry/><entry>O2.&#x2003;LOAD_FROM_SQL_DB&#x2003;(&#x2018;dataset2&#x2019;,&#x2003;query,&#x2003;credentials)&#x2003;//&#x2003;</entry></row><row><entry/><entry/><entry>firstname,&#x2003;nationality&#x2003;name,&#x2003;nbOfItems,&#x2003;totalPurchased</entry></row><row><entry/><entry/><entry>O3.&#x2003;FILTER&#x2003;(FIELD&#x2003;&#x2018;dataset2.firstname&#x2019;&#x2003;!=&#x2003;null)&#x2003;//&#x2003;remove&#x2003;null&#x2003;field</entry></row><row><entry/><entry/><entry>O4.&#x2003;REPLACE&#x2003;(&#x2018;dataset1.firstname&#x2019;,&#x2003;trim&#x2003;(FIELD&#x2003;&#x2018;dataset1.firstname&#x2019;))&#x2003;//&#x2003;</entry></row><row><entry/><entry/><entry>remove&#x2003;whitespace&#x2003;before&#x2003;and&#x2003;after&#x2003;firstname</entry></row><row><entry/><entry/><entry>O5.&#x2003;REPLACE&#x2003;(&#x2018;dataset1.firstname&#x2019;,&#x2003;trim&#x2003;(FIELD&#x2003;&#x2018;dataset1.nationality&#x2019;))&#x2003;//&#x2003;</entry></row><row><entry/><entry/><entry>remove&#x2003;whitespace&#x2003;before&#x2003;and&#x2003;after&#x2003;nationality</entry></row><row><entry/><entry/><entry>O6.&#x2003;REPLACE&#x2003;(&#x2018;dataset2.firstname&#x2019;,&#x2003;trim&#x2003;(FIELD&#x2003;&#x2018;dataset2.firstname&#x2019;))&#x2003;//&#x2003;</entry></row><row><entry/><entry/><entry>remove&#x2003;whitespace&#x2003;before&#x2003;and&#x2003;after&#x2003;firstname</entry></row><row><entry/><entry/><entry>O7.&#x2003;FILTER&#x2003;(FIELD&#x2003;&#x2018;dataset2.firstname&#x2019;&#x2003;==&#x2003;&#x201c;&#x201d;)&#x2003;//&#x2003;remove&#x2003;empty&#x2003;firstname</entry></row><row><entry/><entry/><entry>O8.&#x2003;FILTER&#x2003;(FIELD&#x2003;&#x2018;dataset1.nationality&#x2019;&#x2003;!=&#x2003;&#x201c;&#x201d;)&#x2003;//&#x2003;remove&#x2003;empty&#x2003;nationality</entry></row><row><entry/><entry/><entry>O9.&#x2003;FILTER&#x2003;(FIELD&#x2003;&#x2018;dataset2.nbOfItems&#x2019;&#x2003;&#x3e;&#x2003;0)&#x2003;//&#x2003;remove&#x2003;invalid&#x2003;number&#x2003;of&#x2003;items</entry></row><row><entry/><entry/><entry>O10.&#x2003;ADD&#x2003;(&#x2018;dataset2.meanPurchase&#x2019;,&#x2003;FIELD&#x2003;&#x2018;dataset2.totalPurchased&#x2019;&#x2003;/&#x2003;FIELD</entry></row><row><entry/><entry/><entry>&#x2018;dataset2.nbOfItems&#x2019;)&#x2003;//&#x2003;compute&#x2003;mean&#x2003;price&#x2003;for&#x2003;an&#x2003;item</entry></row><row><entry/><entry/><entry>11.&#x2003;FILTER&#x2003;(FIELD&#x2003;&#x2018;dataset2.totalPurchased&#x2019;&#x2003;&#x3e;&#x2003;0)&#x2003;//&#x2003;remove&#x2003;invalid&#x2003;totalPurchased</entry></row><row><entry/><entry/><entry>12.&#x2003;JOIN&#x2003;(&#x2018;dataset&#x2019;,&#x2003;&#x2018;dataset1&#x2019;,&#x2003;&#x2018;dataset2&#x2019;,&#x2003;&#x2018;firstname&#x2019;,&#x2003;&#x2018;firstname&#x2019;,&#x2003;</entry></row><row><entry/><entry/><entry>[&#x2018;dataset1.nationality&#x2019;,&#x2003;&#x2018;dataset2.meanPurchase&#x2019;])&#x2003;//&#x2003;join&#x2003;two&#x2003;datasets</entry></row><row><entry/><entry/><entry>O13.&#x2003;PREPARE&#x2003;(&#x2018;dataset&#x2019;,&#x2003;OPTIMISED,&#x2003;target,&#x2003;heuristics)&#x2003;//&#x2003;</entry></row><row><entry/><entry/><entry>or&#x2003;PREPARE(dataset,&#x2003;RAW)&#x2003;to&#x2003;run&#x2003;the&#x2003;script&#x2003;as-is.</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0111" num="0115">As an alternative, the thirteenth operation O<b>13</b> may be: PREPARE (dataset, RAW) to run the script as-is.</p><p id="p-0112" num="0116">The current script may correspond to a pseudo code, for instance a pseudo source code. It may correspond to a mock programming language representing a typical program processed by the invention. Its factious operations illustrate the instructions involved. Different real programming languages may be used. Interpreted and compiled languages are considered.</p><p id="p-0113" num="0117">The current script encloses comments introduces by the symbol: &#x201c;//&#x201d; as it is widespread in computer programming. These comments intend to explain the action entailed by the corresponding operations (O<b>1</b>-O<b>13</b>).</p><p id="p-0114" num="0118">Each operation may correspond to a line of this source code. In the current first program, the operations (O<b>1</b>-O<b>13</b>) form a first sequence. The order of the first sequence may be deduced from the arrows between the operations (O<b>1</b>-O<b>13</b>). The current order according to which the operations (O<b>1</b>-O<b>13</b>) are listed corresponds to a sequence defined by a programmer. As an alternative, this sequence may have been automatically generated by another computer program.</p><p id="p-0115" num="0119">The operations comprise at least one of the following; a data transformation operation, a loading instruction, a data creation function, which reuse pieces of data of the at least one data source.</p><p id="p-0116" num="0120">It may be noticed that the first operation O<b>1</b> and the second operation O<b>2</b> both load data, but from different sources. Operations O<b>3</b> to O<b>13</b> comprise manipulations on the loaded data. These operations O<b>3</b> to O<b>13</b> may comprise mathematical operations such as additions, multiplications, divisions. They may comprise polynomials, derivates, matrix, complex numbers. The operations O<b>3</b> to O<b>13</b> may be carried out by primitives. Primitives my be understood as the simplest element available in a programming language.</p><p id="p-0117" num="0121">The data comprises a first data set, also designated as first data collection, the at least one data source is a first data source read during the operation O<b>1</b>. A second data source, read at operation O<b>2</b>, provides a second data set. At least one of the operations, such as the twelfth operation O<b>12</b> is a joining operation merging the first data set and the second data set. The first data source and the second data source may be physically installed at different locations, and may correspond to data of physical records at different areas, at different times.</p><p id="p-0118" num="0122">Afterward, the method may execute other operations (not represented) corresponding to machine learning computation. As an alternative or an option, the method may carry out other functions as available in the field of big data.</p><p id="p-0119" num="0123">It may be noticed that the current first program comprises several filtering operations (O<b>7</b>-O<b>9</b>). These operations intend to remove a data record where a dimension is invalid or incomplete. The current computer program may remove outliers, for instance data records too far from the others.</p><p id="p-0120" num="0124"><figref idref="DRAWINGS">FIG. <b>4</b></figref> provides a diagram block representing a computer implemented data processing method in accordance with the invention. The current computer implemented data processing method may be similar to the one as described in relation with <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0121" num="0125">The computer implemented data processing method comprises the following steps:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0126">providing <b>100</b> a first program comprising an array, or group, or succession, of operations arranged to satisfy a first set of operation dependencies, said group of operations being adapted for computing data from at least one data source, preferably from at least two data sources;</li>        <li id="ul0004-0002" num="0127">parsing <b>101</b>.<b>1</b> the first program in order to detect operation dependencies, optionally of the first set;</li>        <li id="ul0004-0003" num="0128">analysing <b>101</b>.<b>2</b> the connections between the operation dependencies, optionally of the first set;</li>        <li id="ul0004-0004" num="0129">changing <b>101</b>.<b>3</b> the arrangement of the group of operations in order to meet a second set of operation dependencies, said second set comprising the first dependency (D<b>1</b>), the third dependency (D<b>3</b>); but not the second dependency (D<b>2</b>) which is set aside or abandoned; the second set comprises at least one, or several operation dependencies of the first set;</li>        <li id="ul0004-0005" num="0130">generating <b>102</b> a second program comprising said group of operations, arranged to satisfy the second set of operation dependencies;</li>        <li id="ul0004-0006" num="0131">computing <b>104</b> a first directed acyclic graph corresponding to the first program;</li>        <li id="ul0004-0007" num="0132">displaying <b>106</b>, using a displaying unit, a second directed acyclic graph corresponding to the second program; without the second dependency;        <ul id="ul0005" list-style="none">            <li id="ul0005-0001" num="0133">associating <b>108</b> priority levels to the operation dependencies;</li>            <li id="ul0005-0002" num="0134">sending <b>110</b> instruction(s) to at least one database storing the data, the instruction being an instruction to run the second program and being coded in a language of the at least one data source,</li>        </ul>        </li>        <li id="ul0004-0008" num="0135">combining <b>112</b> at least one operation dependency of the first set with at least one operation dependency of the second set in order to form a combined dependency; and</li>        <li id="ul0004-0009" num="0136">processing <b>120</b> the data from the at least one data source with the second program.</li>    </ul>    </li></ul></p><p id="p-0122" num="0137">At step providing <b>100</b>, the first program may correspond to the program as described in relation with <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0123" num="0138">At step obtaining <b>100</b>, the first program is provided in a first programming/coding language, and at step generating <b>102</b> the second program is generated in a second programming/coding language, which is different from the first one. The first language may be an interpreted language, and the second language may be a compiled language, or vice-versa. The computer implemented data processing method may use one or more production systems, such as &#x201c;Drools&#x201d;, &#x201c;Jess&#x201d; or &#x201c;Prolog&#x201d;.</p><p id="p-0124" num="0139">As a further alternative, at step providing <b>100</b> the first program, at least one of the operation dependencies is predefined, or provided.</p><p id="p-0125" num="0140">At step parsing <b>101</b>.<b>1</b>, the operations of the first program are read and compared in order to identify which operations are interdependent, and which one need to be executed before/after the others. For instance, the method analyses the operations requesting a reading or a writing action.</p><p id="p-0126" num="0141">For this purpose, step parsing <b>101</b>.<b>1</b> may execute the following pseudo-code in order to detect writing actions:</p><p id="p-0127" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="357pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>function&#x2003;writtenFields(ops&#x2003;:&#x2003;Array&#x2003;[Operation})&#x2003;:&#x2003;Array[List[Field]]&#x2003;=&#x2003;{</entry></row><row><entry/><entry>&#x2003;res&#x2003;=&#x2003;Array[length(ops)]</entry></row><row><entry/><entry>&#x2003;for&#x2003;(i&#x2003;=&#x2003;0;&#x2003;i&#x2003;&#x3c;&#x2003;length(ops);&#x2003;i++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;switch&#x2003;ops[i]&#x2003;of</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;REPlACE(field,&#x2003;action)&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;List(Field(field))</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;ADD(field,&#x2003;action)&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;List(Field(field))</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;FILTER(action)&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;[]&#x2003;//&#x2003;this&#x2003;action&#x2003;reads&#x2003;fields&#x2003;but&#x2003;do&#x2003;not&#x2003;write</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;...</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;default&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;null&#x2003;//&#x2003;for&#x2003;unknown&#x2003;operations&#x2003;-&#x2003;these&#x2003;</entry></row><row><entry/><entry>operations&#x2003;are&#x2003;considered&#x2003;as&#x2003;reading&#x2003;and&#x2003;writing&#x2003;everything</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;return&#x2003;res</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0128" num="0142">With respect to the reading action, step parsing <b>101</b>.<b>1</b> may execute the following pseudo-code:</p><p id="p-0129" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="357pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>function&#x2003;readField(ops&#x2003;:&#x2003;Array&#x2003;[Operation})&#x2003;:&#x2003;Array[List[Field])]&#x2003;=&#x2003;{</entry></row><row><entry/><entry>&#x2003;res&#x2003;=&#x2003;Array[length(ops)]</entry></row><row><entry/><entry>&#x2003;for&#x2003;(i&#x2003;=&#x2003;0;&#x2003;i&#x2003;&#x3c;&#x2003;length(ops);&#x2003;i++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;switch&#x2003;ops[i]&#x2003;of</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;REPlACE(field,&#x2003;action)&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;res[i]&#x2003;==&#x2003;list_field(action)</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;ADD(field,&#x2003;action)&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;res[i]&#x2003;==&#x2003;list_field(action)</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;FILTER(action)&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;res[i]&#x2003;==&#x2003;list_field(action)</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;...</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;default&#x2003;=&#x3e;&#x2003;res[i]&#x2003;=&#x2003;null&#x2003;//&#x2003;for&#x2003;unknown&#x2003;operations&#x2003;-&#x2003;these&#x2003;</entry></row><row><entry/><entry>operations&#x2003;are&#x2003;considered&#x2003;as&#x2003;reading&#x2003;and&#x2003;writing&#x2003;everything</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;return&#x2003;res</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0130" num="0143">As an option, the function are analysed at the expression level. In this context, step parsing <b>101</b>.<b>1</b> may execute the following pseudo-code:</p><p id="p-0131" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="343pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>function&#x2003;list_fields(action&#x2003;:&#x2003;Expression)&#x2003;:&#x2003;List(Field)&#x2003;=&#x2003;{</entry></row><row><entry/><entry>&#x2003;switch&#x2003;action&#x2003;of</entry></row><row><entry/><entry>&#x2003;&#x2003;trim(x)&#x2003;=&#x3e;&#x2003;return&#x2003;list_fields(x)</entry></row><row><entry/><entry>&#x2003;&#x2003;x&#x2003;!=&#x2003;y&#x2003;=&#x3e;&#x2003;return&#x2003;list_fields(x)&#x2003;++&#x2003;list_fields(y)</entry></row><row><entry/><entry>&#x2003;&#x2003;...</entry></row><row><entry/><entry>&#x2003;&#x2003;FIELD&#x2003;x&#x2003;=&#x3e;&#x2003;return&#x2003;List(x)</entry></row><row><entry/><entry>&#x2003;&#x2003;default&#x2003;=&#x3e;&#x2003;return&#x2003;null&#x2003;//&#x2003;for&#x2003;unknown&#x2003;actions&#x2003;-&#x2003;these&#x2003;</entry></row><row><entry/><entry>actions&#x2003;are&#x2003;considered&#x2003;as&#x2003;touching&#x2003;every&#x2003;fields</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0132" num="0144">Afterward, step parsing <b>101</b>.<b>1</b> may provide a matrix of dependencies. The matrix may include a Boolean matrix defining if an option needs to be executed before another one. This may be obtained by the following pseudo-code:</p><p id="p-0133" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="371pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>function&#x2003;rw_precedence(ops:&#x2003;Array[Operation])&#x2003;:&#x2003;Array[Array[Boolean]]&#x2003;=&#x2003;{</entry></row><row><entry/><entry>&#x2003;line&#x2003;=&#x2003;Array.fill(length(ops),&#x2003;False)</entry></row><row><entry/><entry>&#x2003;res&#x2003;=&#x2003;Array.fill(length(ops),&#x2003;line)</entry></row><row><entry/><entry>&#x2003;read&#x2003;=&#x2003;readField(ops)</entry></row><row><entry/><entry>&#x2003;write&#x2003;=&#x2003;writeField(ops)</entry></row><row><entry/><entry>&#x2003;for&#x2003;(i&#x2003;=&#x2003;0;&#x2003;i&#x2003;&#x3c;&#x2003;ops.length;&#x2003;i++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;for&#x2003;(j&#x2003;=&#x2003;i+1;&#x2003;j&#x2003;&#x3c;&#x2003;ops.length;&#x2003;j++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;if&#x2003;(&#x2003;write&#x2003;[i]&#x2003;==&#x2003;null</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;||&#x2003;read[j]&#x2003;==&#x2003;null</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;||&#x2003;any(read[j],&#x2003;x&#x2003;=&#x3e;&#x2003;write[i].contains(x)))&#x2003;//</entry></row><row><entry/><entry>there&#x2003;is&#x2003;a&#x2003;precedence&#x2003;between&#x2003;i&#x2003;and&#x2003;j&#x2003;if&#x2003;i&#x2003;write&#x2003;a&#x2003;data&#x2003;that&#x2003;j&#x2003;is&#x2003;supposed&#x2003;to&#x2003;read</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;then&#x2003;res[i][j]&#x2003;=&#x2003;True</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;else&#x2003;res[i][j]&#x2003;=&#x2003;False</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;//&#x2003;the&#x2003;transitive&#x2003;closure&#x2003;of&#x2003;the&#x2003;precedence</entry></row><row><entry/><entry>&#x2003;for&#x2003;(i&#x2003;=&#x2003;0;&#x2003;i&#x2003;&#x3c;&#x2003;ops.length;&#x2003;i++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;for&#x2003;(j&#x2003;=&#x2003;i+1;&#x2003;j&#x2003;&#x3c;&#x2003;ops.length;&#x2003;j++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;if(res[i][j])&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;for&#x2003;(k&#x2003;=&#x2003;j+1;&#x2003;k&#x2003;&#x3c;&#x2003;ops.length;&#x2003;k++)&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;if&#x2003;(res[j][k])&#x2003;then&#x2003;res[i][k]&#x2003;=&#x2003;True</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;return&#x2003;res</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0134" num="0145">At step changing <b>101</b>.<b>3</b>, the method may adapt the respective positions of the operations. The precedence, or transfer into a parallel branch, of an operation may be executed.</p><p id="p-0135" num="0146">In order to change the priority of operations, for instance in light of the dataset size reduction, the method may execute the following pseudo code:</p><p id="p-0136" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="336pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>function&#x2003;reduceSize(op:&#x2003;Operation)&#x2003;:&#x2003;Bool&#x2003;=&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;switch&#x2003;op&#x2003;of</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;REPlACE(field,&#x2003;action)&#x2003;=&#x3e;&#x2003;return&#x2003;False</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;ADD(field,&#x2003;action)&#x2003;=&#x3e;&#x2003;return&#x2003;False</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;FILTER(action)&#x2003;=&#x3e;&#x2003;return&#x2003;True</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;...</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;default&#x2003;=&#x3e;&#x2003;return&#x2003;False</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>function pushupReducers(ops: Array[Operation], precedence: Array[Array[Boolean]]):</p><p id="p-0137" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0" pgwide="1" tabstyle="monospace"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="336pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>Array[Operation]&#x2003;{</entry></row><row><entry/><entry>&#x2003;copy_ops&#x2003;=&#x2003;copy(ops)</entry></row><row><entry/><entry>&#x2003;copy_precedence&#x2003;=&#x2003;copy(precedence)</entry></row><row><entry/><entry>&#x2003;for&#x2003;(i&#x2003;=&#x2003;0;&#x2003;i&#x2003;&#x3c;&#x2003;length(copy_ops);&#x2003;i++)&#x2003;{&#x2003;//for&#x2003;each&#x2003;operation&#x2003;i</entry></row><row><entry/><entry>&#x2003;&#x2003;if&#x2003;(reduceSize(copy_ops[i]))&#x2003;//&#x2003;if&#x2003;it&#x2003;already&#x2003;reduces&#x2003;the&#x2003;length</entry></row><row><entry/><entry>&#x2003;&#x2003;then&#x2003;for&#x2003;(j&#x2003;=&#x2003;i&#x2212;1;&#x2003;j&#x2003;&#x3e;=&#x2003;0;&#x2003;j&#x2212;&#x2212;)&#x2003;{&#x2003;//&#x2003;then&#x2003;for&#x2003;each&#x2003;preceding&#x2003;operation&#x2003;j</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;if&#x2003;(!reduceSize(copy_ops[j])&#x2003;&#x26;&#x26;&#x2003;!copy_precedence[j][i])&#x2003;//&#x2003;</entry></row><row><entry/><entry>if&#x2003;j&#x2003;does&#x2003;not&#x2003;reduce&#x2003;the&#x2003;size&#x2003;of&#x2003;the&#x2003;dataset&#x2003;and&#x2003;j&#x2003;has&#x2003;not&#x2003;to&#x2003;precede&#x2003;i</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;then&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;permuteOperations(i,&#x2003;j,&#x2003;copy_ops)&#x2003;//&#x2003;permtute</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;permutePrecedence(i,&#x2003;j,&#x2003;copy_precedence)&#x2003;//&#x2003;permtute</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;return&#x2003;copy_precedence</entry></row><row><entry/><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0138" num="0147">Step parsing <b>101</b>.<b>1</b> is not an essential step of the invention. It may be replaced by a step obtaining the operation dependencies.</p><p id="p-0139" num="0148">The method may comprise a step copying or a step transferring or a step loading the group of operations of the first program. Step copying or step transferring may be enclosed in step generating <b>102</b>. As an alternative, it may be in step changing <b>101</b>.<b>3</b>.</p><p id="p-0140" num="0149">At step analysing <b>101</b>.<b>2</b> the connections, the connections may comprise a same operation. It may be a same starting operation or a same end operation, for instance when defining parallel branche(s).</p><p id="p-0141" num="0150">The connections may be logical connections. The connections may be links. The or at least one connection(s) may comprise interdependence feature(s).</p><p id="p-0142" num="0151">The process may generally comprise a step adapting operation dependencies which gathers, and notably replaces steps: parsing <b>101</b>.<b>1</b>, analysing <b>101</b>.<b>2</b>, and changing <b>101</b>.<b>3</b>.</p><p id="p-0143" num="0152">Step generating <b>102</b> may comprise the transmission of the output of step changing <b>101</b>.<b>3</b> to a compiler or to an interpreter.</p><p id="p-0144" num="0153">At step computing <b>104</b> a first directed acyclic graph, the latter may be displayed by means of a displaying unit, such as a graphical user interface. Said displaying unit may be the one which is used at step displaying <b>106</b> the second directed acyclic graph.</p><p id="p-0145" num="0154">The first directed acyclic graph may correspond to the representation provided in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The operations (O<b>1</b>-O<b>13</b>) form a single branch, or a single thread. This first directed acyclic graph presents a single starting operation O<b>1</b>, and a single end operation O<b>13</b>. Except these two operations O<b>1</b> and O<b>13</b>, each other operation (Oi, where the indicia &#x201c;i&#x201d; is an integer ranging from 2 to 12) comprises an ancestor operation (Oi&#x2212;1), and a descendent operation (Oi+1) also designated as successor operation.</p><p id="p-0146" num="0155">The operations (O<b>1</b>-O<b>13</b>) are joined by edges, for instance by arrows with a peak oriented toward the execution direction of the first directed acyclic graph. The operations (O<b>1</b>-O<b>13</b>) are arranged in accordance with their indicia.</p><p id="p-0147" num="0156">Back to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, at step displaying <b>106</b> the second directed acyclic graph, said second graph comprises nodes corresponding to the operations of the group of operations, and further comprises edges joining the nodes. The same may apply to the first directed acyclic graph as defined in relation with step computing <b>104</b>.</p><p id="p-0148" num="0157">Representations of the second directed acyclic graph are provided in <figref idref="DRAWINGS">FIGS. <b>6</b><i>a</i>, <b>6</b><i>b</i>, <b>6</b><i>c</i>, <b>7</b><i>a</i>, <b>7</b><i>b</i></figref>, <b>8</b> and <b>9</b>. By comparison of the <figref idref="DRAWINGS">FIGS. <b>6</b><i>a</i>, <b>6</b><i>b</i>, <b>6</b><i>c</i>, <b>7</b><i>a</i>, <b>7</b><i>b</i></figref>, <b>8</b> and <b>9</b>) with <figref idref="DRAWINGS">FIG. <b>3</b></figref>, it may be noticed that the second program comprises the same number of operations than the first program. As a further general remark, the operations (O<b>1</b>-O<b>13</b>) are all kept. There is operation preservation. Only the operation arrangement changes. The edges, notably the arrows, are changed. The positions of the operations are reorganised.</p><p id="p-0149" num="0158">The operations (O<b>1</b>-O<b>13</b>) are represented by means of circles; also designated as nodes; and dependencies are represented by means of edges (not labelled for the sake of clarity of the figure). The dependencies are currently precedence dependencies. Thus, the edges may be arrows (not labelled) pointing downward, or more generally in the growing direction of the indicia of the operations (O<b>1</b>-O<b>13</b>). As an alternative, the dependencies could impose to execute the operation Oi after the operation Oi+1. For instance, these dependencies impose to execute the first operation O<b>1</b> before the fourth operation O<b>4</b>, the second operation O<b>2</b> before the third operation O<b>3</b>, and the twelfth O<b>12</b> operation before the thirtieth operation O<b>13</b>.</p><p id="p-0150" num="0159">At step providing <b>100</b> the first program, the operation dependencies may be obtained by parsing the operations of the first program and/or by analysing part of the data involved in these operations (O<b>1</b>-O<b>13</b>).</p><p id="p-0151" num="0160">The dependencies between the operations may be precedence rules listed in the following table. Thus, the following dependencies may be defined in relation with the first computer program as proposed in relation with <figref idref="DRAWINGS">FIG. <b>3</b></figref> (for the sake of conciseness, the i-eth operation is merely referred to as Oi; where &#x201c;i&#x201d; is an indicium varying from 1 to 13):</p><p id="p-0152" num="0000">O<b>1</b> before: O<b>4</b>, O<b>5</b>, O<b>8</b>, O<b>12</b>, and O<b>13</b>;<br/>O<b>2</b> before: O<b>3</b>, O<b>6</b>, O<b>7</b>, O<b>9</b>, O<b>10</b>, O<b>11</b>, O<b>12</b>, and O<b>13</b>;<br/>O<b>3</b> before: O<b>6</b>, O<b>7</b>, O<b>12</b>, and O<b>13</b>;<br/>O<b>4</b> before: O<b>12</b>, and O<b>13</b>;<br/>O<b>5</b> before: O<b>8</b>, O<b>12</b>, and O<b>13</b>;<br/>O<b>6</b> before: O<b>7</b>, O<b>12</b>, and O<b>13</b>;<br/>O<b>7</b> before: O<b>12</b>, and O<b>13</b>;<br/>O<b>8</b> before: O<b>12</b>, and O<b>13</b>;<br/>O<b>9</b> before: O<b>10</b>, O<b>12</b>, and O<b>13</b>;<br/>O<b>10</b> before: O<b>12</b>, and O<b>13</b>;<br/>O<b>11</b> before: O<b>12</b>, and O<b>13</b>;<br/>O<b>12</b> before: O<b>13</b>.</p><p id="p-0153" num="0161">The result of the dependencies between the operations O<b>1</b> to O<b>13</b> is represented in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The preceding operations, with exception of the thirteenth operation O<b>13</b>, are provided with lists of dependencies. All the operations are dependent upon at least one other operation or several other operations. Thence, the operations are all interconnected by the first set of dependencies.</p><p id="p-0154" num="0162">It appears that the thirteenth operation O<b>13</b> is dependent upon all other operations (O<b>1</b>-O<b>12</b>). The twelfth operation O<b>12</b> is dependent upon all preceding operations (O<b>1</b>-O<b>11</b>). It may be underlined that the combination of the first operation O<b>1</b> and the second operation O<b>2</b> constrains all the following operations (O<b>3</b>-O<b>13</b>). The combination of the starting operations defines the operation dependencies of all other operations. The end operation, or the combination of the end operations, is dependent upon all other operations, notably the upstream operations.</p><p id="p-0155" num="0163">As an alternative, the dependencies could be defined as successions. Thus, a dependency table may comprise the following dependencies:</p><p id="p-0156" num="0000">O<b>3</b> after O<b>2</b>;<br/>O<b>4</b> after O<b>1</b>;<br/>O<b>5</b> after: O<b>5</b>;<br/>O<b>6</b> after: O<b>3</b> and O<b>2</b>;<br/>O<b>7</b> after: O<b>6</b>, O<b>3</b> and O<b>2</b>;<br/>O<b>8</b> after: O<b>8</b> and O<b>1</b>;<br/>O<b>9</b> after O<b>2</b>;<br/>O<b>10</b> after O<b>2</b>;<br/>O<b>12</b> after: O<b>1</b>, O<b>2</b>, O<b>3</b>, O<b>4</b>, O<b>5</b>, O<b>6</b>, O<b>7</b>, O<b>8</b>, O<b>9</b>, O<b>10</b>, and O<b>11</b>;<br/>O<b>13</b> after: O<b>1</b>, O<b>2</b>, O<b>3</b>, O<b>4</b>, O<b>5</b>, O<b>6</b>, O<b>7</b>, O<b>8</b>, O<b>9</b>, O<b>10</b>, O<b>11</b>, and O<b>12</b>.</p><p id="p-0157" num="0164">The precedence dependencies are interesting as they provide a dependency starting from more operations. Thus, generating the second program becomes easier. The precedence rules guide the transformations, and are preserved through the transformations. Consequently, the precedence rules ensure that the output of the second program is equal to the output of the first one.</p><p id="p-0158" num="0165">At step combining <b>112</b> at least one operation dependency is combined with at least one other operation dependency from the same first set. If another operation dependency of the first set corresponds to the result of said combined dependencies, then at step generating <b>102</b> the second set of operation dependencies is defined without said another operation dependency.</p><p id="p-0159" num="0166">For instance, at step combining <b>112</b>, the operation dependency between the twelfth operation O<b>12</b> and the thirteenth operation O<b>13</b> is combined with the operation dependency between the eleventh operation O<b>11</b> and the twelfth operation O<b>12</b>. In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, these operation dependencies are represented in solid lines. It is noteworthy that this combination is equivalent to the operation dependency (represented in doted lines in <figref idref="DRAWINGS">FIG. <b>5</b></figref>) between the eleventh operation O<b>11</b> and the thirteenth operation O<b>13</b>. The resulting combination provides the same path. Then at step generating <b>102</b>, the second set of operation dependencies is defined without the operation dependency between the eleventh operation O<b>11</b> and the thirteenth operation O<b>13</b>.</p><p id="p-0160" num="0167">The current principle is detailed in relation with the eleventh, twelfth and thirteenth operations (O<b>11</b>-O<b>13</b>). However, it may be generalized to the first set in its entirety.</p><p id="p-0161" num="0168">The operation dependency between the eleventh operation O<b>11</b> and the twelfth operation O<b>12</b> is an elementary dependency. The operation dependency between the twelfth operation O<b>12</b> and the thirteenth operation O<b>13</b> is also an elementary dependency. By contrast, the operation dependency between the eleventh operation O<b>11</b> and the thirteenth operation O<b>13</b> is a bypass dependency bypassing the twelfth operation O<b>12</b> whereas it is associated with the two previous elementary dependencies. At step generating <b>102</b> the operation dependencies between the operations of the second set are defined without the bypass dependency/dependencies. In the current context, a dependency &#x201c;between&#x201d; operations means constraining directly these operations. There is not intermediate operation in the dependency definition. Graphically, the edge directly touches both operations.</p><p id="p-0162" num="0169">Before step generating <b>102</b>, each operation dependency of the lists of operation dependencies of the operations are applied to the other lists of operation dependencies of the first set such that several operation dependencies form overlapping dependencies which overlaps other dependencies. At step generating <b>102</b> the operation dependencies between the operations of the second set are defined without the overlapping dependency/dependencies.</p><p id="p-0163" num="0170">By way of illustration, we refer to the last three operations. The operation dependency between the twelfth operation O<b>12</b> and the thirteenth operation O<b>13</b> is applied to the operation dependency between the eleventh operation O<b>11</b> and the twelfth operation O<b>12</b>. The result matches the operation dependency between the eleventh operation O<b>11</b> and the thirteenth operation O<b>13</b>; which is hereby considered as an overlapping operation dependency. At step generating <b>102</b> the operation dependencies of the second set are defined without the later operation dependency.</p><p id="p-0164" num="0171">Before step generating <b>102</b>, the operation dependencies of the lists are integrated in the other lists of the first set rendering redundant some of the operation dependencies. At step generating <b>102</b> the operation dependencies between the operations of the second set is defined without the redundant dependency/dependencies.</p><p id="p-0165" num="0172">For explanatory purposes, the operation dependency between the eleventh operation O<b>11</b> and the twelfth operation O<b>12</b> is integrated to the operation dependency between the twelfth operation O<b>12</b> and the thirteenth operation O<b>13</b>. This integration renders redundant the operation dependency between the eleventh operation O<b>11</b> and the thirteenth operation O<b>13</b> which is not used in the second set of operation dependencies at step generating <b>102</b>.</p><p id="p-0166" num="0173">In other words, if we inject the rule {O<b>12</b> before O<b>13</b>} applying to the operation O<b>12</b> to the rule above {O<b>11</b> before O<b>12</b> and O<b>13</b>} (or we replace O<b>12</b> to the rule applying thereon), we obtain: O<b>11</b> before {[O<b>12</b> before O<b>13</b>] and O<b>13</b>}</p><p id="p-0167" num="0174">It may be developed mathematically as follows:</p><p id="p-0168" num="0175">O<b>11</b> before O<b>12</b> before O<b>13</b>, and O<b>11</b> before O<b>13</b></p><p id="p-0169" num="0176">The order between O<b>11</b> and O<b>13</b> is defined twice. Thus, a simplification is allowable. We obtain: O<b>11</b> before [O<b>12</b>.=&#x3e;O<b>11</b> before O<b>12</b>;</p><p id="p-0170" num="0177">We can operate in the same way on the whole table. Each time, the operations are replaced by their corresponding rules, and redundant order constraints are deleted.</p><p id="p-0171" num="0178">At the end, in each line the table only keeps operations which are elementary ones, namely not composed of other ones.</p><p id="p-0172" num="0179">The first program is run on a first computer. At step processing <b>120</b> the second program is run on a data server, for instance a distributed data server. The data server may be distributed on several interconnected computers, for instance on a second computer, a third computer, and a fourth computer. Further computers may be provided if required.</p><p id="p-0173" num="0180">During step associating <b>108</b>, priority levels are associated to the operation dependencies. Similarly, priority levels may be associated to the operations. At step generating <b>102</b> the orders between the operations is defined in relation with the priority levels of the operations and/or of the dependencies. Step associating <b>108</b> is purely optional in view of the current invention.</p><p id="p-0174" num="0181">As an alternative, it may replace the parsing phase that is operated during step providing <b>100</b>. The method may further comprise a step obtaining a target architecture to which the second program will conform. The architecture may be obtained by rules defined by computing means depending on technical requirements.</p><p id="p-0175" num="0182">Generally, the computer implemented data processing method is an iterative method. A program resulting from the step generating <b>102</b> the second program is stored in a memory element after a first iteration, the subsequent program resulting from a subsequent iteration is stored in another or the same memory element. Afterward, the subsequent program is compared to the program resulting from the first iteration. Thus, computation is reduced since previous computation may be reused. In the context of machine learning, this aspect is of high importance as early computations may require long computation runtimes.</p><p id="p-0176" num="0183">At least one or each feature defined in relation with step generating <b>102</b> may apply to each of: step parsing <b>101</b>.<b>1</b>; analysing <b>101</b>.<b>2</b> and changing <b>101</b>.<b>3</b>.</p><p id="p-0177" num="0184"><figref idref="DRAWINGS">FIG. <b>5</b></figref> provides a schematic illustration of the operations O<b>1</b> to O<b>13</b>. Edges, notably arrows, represent the operation dependencies (unlabelled). The operation dependencies correspond to those that are defined in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0178" num="0185">The operation dependencies each comprise a direction. Each operation dependency is defined in relation with an ancestor and a successor. In <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the operations (O<b>1</b>-O<b>13</b>) are listed as in the sequence represented in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The operations (O<b>1</b>-O<b>13</b>) are represented in the same order.</p><p id="p-0179" num="0186"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates all the dependencies obtained from their automatic definition by means of a parsing phase of the pseudo source code as detailed in relation with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Here, more operation dependencies are represented than in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0180" num="0187">The first set of operation dependencies as represented in <figref idref="DRAWINGS">FIG. <b>5</b></figref> comprises more operation dependencies than the second set as represented in <figref idref="DRAWINGS">FIGS. <b>6</b><i>a</i>, <b>6</b><i>b</i>, <b>6</b><i>c</i>, <b>7</b><i>a</i>, <b>7</b><i>b</i></figref>, <b>8</b> and <b>9</b>. The first set may be an exhaustive listing that is obtained by means of theorical rules.</p><p id="p-0181" num="0188">By convention operation dependencies, possibly all operation dependencies, that correspond to combinations of other operations dependencies are represented with doted lines in current <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The elementary operation dependencies are represented with solid lines. An elementary operation dependency may be understood as an operation dependency connecting two subsequent operations.</p><p id="p-0182" num="0189">An elementary operation may also mean an operation dependency connecting two operations that are not connected by other elementary operations, notably after parallelization. Accordingly, an elementary operation may bypass another operation in an intermediate representation of the first program.</p><p id="p-0183" num="0190"><figref idref="DRAWINGS">FIG. <b>6</b><i>a </i></figref>provides a schematic illustration of the second directed acyclic graph corresponding to the second program in accordance with the invention. It may correspond to the second directed acyclic graph as defined in relation with step displaying <b>106</b> the second directed acyclic graph of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0184" num="0191">By contrast over <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in current <figref idref="DRAWINGS">FIG. <b>6</b><i>a </i></figref>the dependencies represented with doted lines are deleted. Thus, elementary operation dependencies are kept, and the composed operation dependencies are removed from the second set.</p><p id="p-0185" num="0192">By comparison with <figref idref="DRAWINGS">FIG. <b>5</b></figref>, all the operations dependent upon at least one operation dependency of the second set are dependent upon at least one operation dependency of the first set. Thus, several operation dependencies of the second set correspond to some operation dependencies represented in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, or even in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Yet, in <figref idref="DRAWINGS">FIG. <b>6</b><i>a </i></figref>there is less operation dependencies than in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. There may be more operation dependencies than in <figref idref="DRAWINGS">FIG. <b>3</b></figref> since parallelization generates another starting operation from which operation dependencies are defined.</p><p id="p-0186" num="0193">Thus, the invention not only reduces the number of dependencies, it also fosters the automatic definitions of different starting operations O<b>1</b> and O<b>2</b>. The invention offers a compromise between the constraint's definition and the available information on operations in order to speed up processing. It becomes easier to simultaneously define parallel branches and to optimise the operation orders.</p><p id="p-0187" num="0194">The first program and the second program are arranged such that they provide the same output when they are fed with the same input. Indeed, they comprise the same number of operations. All the operations of the second program are the operations of the first program. Accordingly, the first program provides a first data result when it computes an input data, and the second program is arranged in order to provide a second result data when it computes said input data. It is noteworthy to underline that the second result data corresponds; preferably is identical or similar or equivalent; to the first result data. In other words, the first program and the second program are configured for providing a same output data, or an equivalent output data, or a corresponding output data, when they are provided with a same input data. The end operations O<b>13</b> are the same, which contributes to providing the same result. One of the differences between these programs lies in their operation dependencies. They have the same operations, but constrained in another manner, for instance a manner allowing parallelization and/or allowing another order arrangement.</p><p id="p-0188" num="0195"><figref idref="DRAWINGS">FIG. <b>6</b><i>b </i></figref>provides a schematic illustration of the second directed acyclic graph corresponding to the second program as presented in the previous figures. The second directed acyclic graph exhibits a second set of operation dependencies represented by edges in solid lines. The edges may be arrows, thus with a direction corresponding to an order to execute the operations (O<b>1</b>-O<b>13</b>). In the current illustration at least, the order corresponds to a precedence.</p><p id="p-0189" num="0196">The data processing method in accordance with the invention is optionally configured for executing the filtering operations O<b>7</b>, O<b>9</b> and O<b>11</b> before an operation manipulating their data, such as the tenth operation O<b>10</b> which is connected to the same starting point O<b>2</b>. For this purpose, new operation dependencies are added and defined with respect to the tenth operation O<b>10</b>. One is staring from the seventh operation O<b>7</b>, and another one comes from the eleventh operation O<b>11</b>. By the way, the latter operation dependency is oriented in the contrary direction than the other. This graphical difference may imply another action that will be descried later on. The tenth operation O<b>10</b> becomes a hub operation, toward which the branches converge.</p><p id="p-0190" num="0197">It may be underlined that the filtering operations O<b>7</b>, O<b>9</b> and O<b>11</b> reduce the size of the data from at least one data source, said data notably being an input data. These operations may allow a size reduction of an input file. Thus, the positions of these operations become closer to the starting operation, for instance operation O<b>2</b>. Their positions may be permuted with other operations. They may be shifted upward. As an option, they may be integrated in a new operation branch, for instance a parallel operation branch. The process may comprise the creation of a new branch, or parallel branch(es).</p><p id="p-0191" num="0198">In order to avoid superfluous, or redundant operation dependencies, the previous one (represented with a mix line) between the seventh operation O<b>7</b> and the twelfth operation O<b>12</b> is removed from the second set of operation dependencies. The former operation dependency between the eleventh operation O<b>11</b> and the twelfth operation O<b>12</b> is also deleted.</p><p id="p-0192" num="0199"><figref idref="DRAWINGS">FIG. <b>6</b><i>c </i></figref>provides a schematic illustration of the second directed acyclic graph corresponding to the second program in accordance with the invention. It may be similar to the second directed acyclic graph as represented in <figref idref="DRAWINGS">FIG. <b>6</b><i>a</i></figref>, however it differs in that the operations (O<b>1</b>-O<b>13</b>) are arranged according to another order, for instance not in accordance with their indicia.</p><p id="p-0193" num="0200">Similarly with <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>5</b></figref>, the thirteenth operation O<b>13</b> is still the end operation; also designated as &#x201c;final operation&#x201d;. The first operation O<b>1</b> is still at the beginning of the current operation sequence.</p><p id="p-0194" num="0201">In the first program where the operations are constrained by the first set, these operations (O<b>1</b>-O<b>13</b>) are listed in accordance with a first sequence. In the second sequence of the second program the execution order between the fourth operation O<b>4</b> and the second operation O<b>2</b> is inverted with respect to the first sequence. The fourth operation O<b>4</b> may be before the second operation O<b>2</b> and the third operation O<b>3</b>. The eighth operation O<b>8</b> becomes closer to the associated starting operation O<b>1</b>. The current sequence does not only sort the operations (O<b>4</b>, O<b>8</b>) on the basis of their indicia. As a graphical consequence, the dependencies do not cross each other.</p><p id="p-0195" num="0202">This translates the fact that it is easier to parallelize the second computer program. Different assemblies of operations emerge. The conflict between the operation dependencies are avoided, or easier to manage.</p><p id="p-0196" num="0203">The invention also contemplates a combination of the second programs in accordance with <figref idref="DRAWINGS">FIGS. <b>6</b><i>b </i></figref>and <b>6</b><i>c. </i></p><p id="p-0197" num="0204"><figref idref="DRAWINGS">FIG. <b>7</b><i>a </i></figref>provides a schematic illustration of the second directed acyclic graph corresponding to the second program in accordance with the invention. It may be similar to the graph as described in relation with <figref idref="DRAWINGS">FIG. <b>6</b></figref><i>c. </i></p><p id="p-0198" num="0205">There, two parallel clusters are spaced from each other. Each cluster is dependent upon the twelfth operation O<b>12</b>. Each branch comprises a succession of operations connected to the twelfth operation O<b>12</b>.</p><p id="p-0199" num="0206">The first branch B<b>1</b> on the left side comprises the operations O<b>1</b>, O<b>4</b>, O<b>5</b> and O<b>8</b>. The second branch B<b>2</b> comprises the operations; O<b>2</b>, O<b>3</b>, O<b>6</b>, O<b>7</b>, O<b>9</b>, O<b>10</b> and O<b>11</b>. Both branches are independent from each other, and may be executed in isolation from the other. One branch may be executed on one computer or server, and the other one may be executed on another computer and/or another server. Each time, the second program may comprise instructions in different languages corresponding to the computer or server. Each branch may be associated with one of the data sources, said data source comprising the same kind of data.</p><p id="p-0200" num="0207">Similarly with <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the twelfth operation O<b>12</b> and the thirteenth operation O<b>13</b> form the last two and ultimate operations. By contrast with the previous figures, there is currently two beginning operations: the first operation O<b>1</b> and the second operation O<b>2</b>. Each of them forms a starting point, each starting point may be associated with one of the databases storing data.</p><p id="p-0201" num="0208"><figref idref="DRAWINGS">FIG. <b>7</b><i>b </i></figref>provides a schematic illustration of the second directed acyclic graph corresponding to the second program in accordance with the invention. It may be similar to the graph as described in relation with <figref idref="DRAWINGS">FIG. <b>7</b><i>a</i></figref>, and comprises operation dependencies which are adapted in relation with <figref idref="DRAWINGS">FIG. <b>6</b></figref><i>b. </i></p><p id="p-0202" num="0209">The dependencies are adapted in the second branch B<b>2</b>. The first branch B<b>1</b> remains the same. In the current embodiment, only two branches are represented. However, the invention is also adapted for sequence configurations where there are at least three branches.</p><p id="p-0203" num="0210"><figref idref="DRAWINGS">FIG. <b>8</b></figref> provides a schematic illustration of the second directed acyclic graph corresponding to the second program in accordance with the invention. The current second directed acyclic graph may be similar to the ones as described in relation with <figref idref="DRAWINGS">FIGS. <b>6</b><i>c </i></figref>and <b>7</b><i>a. </i></p><p id="p-0204" num="0211">In each branch, the operations (O<b>1</b>-O<b>13</b>) are further parallelized. The first branch B<b>1</b> comprises a sub-branch with operation O<b>4</b>, and another sub-branch with operations O<b>5</b> and O<b>8</b>. The second branch B<b>2</b> comprises, in the current example, three sub-branches. The sub-branches are parallel. The first one is formed by the operations O<b>3</b>, O<b>6</b> and O<b>7</b>, the second one is formed with the operations O<b>9</b> and O<b>10</b>, and the third one comprises the eleventh operation O<b>11</b>. Thus, the current second program may be decayed, expanded, in five sub-branches. The operations O<b>4</b>, O<b>5</b>, O<b>3</b>, O<b>9</b> and O<b>11</b> may be executed in the meantime, in parallel, independently from each other in different computing systems. Since each sub-branch may be executed on a different computer, the computation is shared on multiple processors such that time is saved for processing, or preprocessing, data. The processors may be multicore, each multicore processor being associated with one branch or sub-branch.</p><p id="p-0205" num="0212">The branches B<b>1</b> and B<b>2</b> may be executed independently from each other. It may be considered that the eighth operation O<b>8</b> is executed simultaneously with the operations O<b>6</b> and O<b>10</b>. However, it is also possible to shift the execution order of operation O<b>8</b>, and to execute it simultaneously with the seventh operation O<b>7</b>. Other shifts are considered, notably in order to share available resources, and to improve resource balance.</p><p id="p-0206" num="0213">According to another approach, the branches (B<b>1</b>, B<b>2</b>) and their sub-branches may be considered as bundles and ramifications respectively.</p><p id="p-0207" num="0214">In the first program, the operations of the group of operations are listed in accordance with the first sequence. In the second program the positions between the seventh operation O<b>7</b> and the eighth operation O<b>8</b> is inverted with respect to the first sequence. The eighth operation O<b>8</b> is sorted before the seventh operation O<b>7</b>. In the current program, the eighth operation O<b>8</b> is dependency free with the seventh operation O<b>7</b>. However, the seventh operation O<b>7</b> and the eighth operation O<b>8</b> share a common successor O<b>12</b>. They may be executed in parallel, before the twelfth operation O<b>12</b>. The operations of the first branch B<b>1</b> may be dependency free with the operations of the second branch B<b>2</b>. Thus, these operations may be carried out in a further additional sequence. Several possibilities are offered for executing the second program, there is more freedom for sharing the computing instructions.</p><p id="p-0208" num="0215">At step processing the fourth operation O<b>4</b> and the fifth operation O<b>5</b> are run in parallel. Similarly, the third operation O<b>3</b>, the ninth operation O<b>9</b> and the eleventh operation O<b>11</b> are run in parallel. Furthermore, the sixth operation O<b>6</b> and the tenth operation O<b>10</b> may be run in parallel. Thus, parallelization may occur at different computations phases. At least one computation phase may parallelize at least three operations.</p><p id="p-0209" num="0216"><figref idref="DRAWINGS">FIG. <b>9</b></figref> provides a schematic illustration of the second directed acyclic graph corresponding to the second program in accordance with the invention. The current graph is similar to the graph as presented in relation with <figref idref="DRAWINGS">FIG. <b>8</b></figref> with regard to the parallelization aspect. The dependencies are similar to the teachings of <figref idref="DRAWINGS">FIGS. <b>6</b><i>b </i></figref>and <b>7</b><i>b. </i></p><p id="p-0210" num="0217">Since the execution of the tenth operation O<b>10</b> is defined after the operations O<b>7</b>, O<b>9</b> and O<b>11</b> of the same branch B<b>2</b>, another computation phase is added in the sequence. The sequence of the second branch B<b>2</b> is longer than in the previous figure since it comprises an additional computation layer or computation phase.</p><p id="p-0211" num="0218">At least one operation of the first program is a filtering operation, and comprises an execution order which is brought forward in the second program, as compared to the first program, and/or with respect to another operation. The seventh operation O<b>7</b> has an operation order which is before the tenth operation O<b>10</b>. Thus, the second set of dependencies is adapted such that the execution order of the seventh operation O<b>7</b>, ninth operation O<b>9</b> and eleventh operation O<b>11</b> is forced to be before the tenth operation O<b>10</b>. Their priority level changes.</p><p id="p-0212" num="0219">In the first program, the operations of the group of operations are listed in accordance with the first sequence, and in the second sequence in the second program. The second program allows that the seventh operation O<b>7</b> becomes before the tenth operation O<b>10</b>. Their positions in the sequences are inverted. The seventh operation O<b>7</b> starts and ends before the tenth operation O<b>10</b> is executed, or initiated.</p><p id="p-0213" num="0220">When several branches emerge, the invention suppresses dependencies within different branches by comparison with <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>5</b></figref>. Automatically, several operations are defined as being executed simultaneously. The invention may provide that one operation receives a dependency with respect to an operation from another branch. It may be defined that one operation from a sub-branch is executed at the end of the corresponding branch, and possibly after all other operations of the associated branch.</p><p id="p-0214" num="0221">The invention has been described in relation with a machine learning process. However, it could be applied to a deep learning process as well. It may be used with an un-supervised and unlabelled learning data. The machine learning algorithm may be specialized to a classification method, a prediction algorithm, a forecast method.</p><p id="p-0215" num="0222">The invention may be implemented with Python, and with R. Other languages remain possible. The invention may be considered as language agnostic. The distributed computation, for balancing operations, may use the environment Scala. The libraries Spark, Akka, and Hadoop may be used.</p><p id="p-0216" num="0223">It should be understood that the detailed description of specific preferred embodiments is given by way of illustration only, since various changes and modifications within the scope of the invention will be apparent to the person skilled in the art. The scope of protection is defined by the following set of claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented data processing method comprising:<claim-text>providing, via processor, a first program comprising a group of operations arranged to satisfy a first set of operation dependencies, said group of operations being adapted for computing data from at least one data source in order to provide a first data result;</claim-text></claim-text><claim-text>the group of operations comprises:</claim-text><claim-text>a first operation,</claim-text><claim-text>a second operation, and</claim-text><claim-text>a third operation;</claim-text><claim-text>the first set of operation dependencies comprises:</claim-text><claim-text>a first dependency between the first operation and the second operation,</claim-text><claim-text>a second dependency between the first operation and the third operation, and</claim-text><claim-text>a third dependency between the second operation and the third operation;</claim-text><claim-text>the method further comprising:<claim-text>parsing, via the processor, the first program in order to identify the operation dependencies;</claim-text><claim-text>analysing, via the processor, one or more connections between the operation dependencies;</claim-text><claim-text>changing, via the processor, an arrangement of the operations of the group of operations in order to satisfy a second set of operation dependencies which is defined:</claim-text></claim-text><claim-text>with the first dependency, the third dependency; and</claim-text><claim-text>without the second dependency;<claim-text>generating, via the processor, a second program comprising said group of operations, arranged to satisfy the second set of operation dependencies;</claim-text><claim-text>processing, via the processor, the data from the at least one data source with the second program in order to provide a second data result, said second data result corresponding to the first data result.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operation dependencies of the first set and of the second set are precedence dependencies, notably imposing to perform the first operation before the second operation.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first set comprises more operation dependencies than the second set.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the group of operations further comprises a fourth operation, the first set further comprising a fourth dependency between the first operation and the fourth operation, the second operation being dependency free with respect to the fourth operation.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein at step generating, the dependency between the second operation and the fourth operation is such that they are executed in parallel, and at step generating the second set of operation dependencies is defined with the fourth dependency, the fourth dependency being configured such that at step processing the fourth operation is executed before the third operation and before the second operation.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein all the operations dependent upon at least one operation dependency of the second set are also dependent upon at least one operation dependency of the first set.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one operation of the group of operations is a data transformation operation.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one operation of the group of operations is a loading instruction.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one operation of the group of operations is a data creation function, which reuse pieces of data of the at least one data source, and comprises an order priority which is modified, notably lowered, in the second program, as compared to the first program.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one operation of the group of operations is a filtering operation, and comprises an execution order which is brought forward in the second program, as compared to the first program.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said data comprises a first data set, the at least one data source is a first data source and further comprises a second data source which provides a second data set, at least one of the operations is a joining operation merging the first data set and the second data set.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at least one operation of the first operation, second operation and third operation enables a size reduction of the data from at least one data source, said at least one operation being permuted in the second program with respect to the first program.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at step providing, at least one of the operation dependencies is predefined.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations in the first program and in the second program comprise a same end operation and/or a same starting operation.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein in the first program, the operations of the group of operations are listed in accordance with a first sequence, and in the second program the execution order between the second operation and the third operation is inverted as compared to the first sequence.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer-implemented data processing method comprises a step computing a first directed acyclic graph corresponding to the first program.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer computer-implemented data processing method comprises a step displaying, using a display unit, a second directed acyclic graph corresponding to the second program; without the second dependency; each graph comprising nodes corresponding to the operations of the group of operations, and further comprising edges joining the nodes.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein at step obtaining, the first program is provided in a first coding language, and at step generating the second program is provided in a second coding language, which is different from a first language.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first program is run on a first computer, and/or the second program is run on a data server.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method comprises a step associating priority levels to the operation dependencies and/or to the operations, at step generating the order between the operations being defined in relation with said priority levels.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The compute implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer-implemented data processing method is an iterative method, a program resulting from the generating said second program is stored in a memory element after a first iteration, a subsequent program resulting from a subsequent iteration is stored in a memory element and compared to the program resulting from the first iteration.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer-implemented data processing method comprises a step sending instruction(s) to a database storing the data, the instruction being an instruction to run the second program and being coded in a language of the at least one data source.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer-implemented data processing method is a supervised machine learning data pre-processing method, and the data is a learning data for the supervised machine learning data pre-processing method.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the computer-implemented data processing method further comprises a step combining at least one operation dependency of the first set with at least one other operation dependency of the first set in order to form a combined dependency, if another operation dependency of the first set corresponds to the combined dependency, then at step generating, the second set of operation dependencies is defined without said another operation dependency.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first dependency is an elementary dependency and the second dependency is a bypass dependency bypassing the second operation with which the elementary dependency is associated, at step generating the operation dependencies of the second set are defined without the bypass dependency.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. A computer program comprising instructions, which when the program is executed by a computer, cause the computer to carry out the computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. A computer program product including a computer readable medium on which the computer program of <claim-ref idref="CLM-00026">claim 26</claim-ref> is stored.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. A computer configured for performing the computer-implemented data processing method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim></claims></us-patent-application>