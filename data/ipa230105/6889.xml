<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006890A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006890</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17856411</doc-number><date>20220701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">USER-CONFIGURABLE IoT INTERFACE</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217550</doc-number><date>20210701</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Clearblade, Inc.</orgname><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Allsbrook</last-name><first-name>David Aaron</first-name><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Bynum</last-name><first-name>Donald Clark</first-name><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Simone</last-name><first-name>Eric Michael</first-name><address><city>Libertyville</city><state>IL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for configuring output of information from an IoT network provides an interface for receiving user inputs from a user, the user inputs representing an asset type. User created rules define an asset behavior. The rules are input by the user in a human-readable language. Information representing the asset type and asset behavior is associated with one or more physical devices associated with a node of the network. The asset type is associated with a virtual area, which is associated with a physical area. The physical devices report raw state data of the asset, which is converted into user-defined state data and displayed to the user.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="119.04mm" wi="141.14mm" file="US20230006890A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="119.38mm" wi="160.53mm" file="US20230006890A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="125.48mm" wi="143.17mm" file="US20230006890A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="130.73mm" wi="177.04mm" file="US20230006890A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="130.13mm" wi="175.01mm" file="US20230006890A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="130.13mm" wi="175.01mm" file="US20230006890A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="119.38mm" wi="161.29mm" file="US20230006890A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="166.71mm" wi="138.35mm" file="US20230006890A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="98.89mm" wi="160.27mm" file="US20230006890A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="121.50mm" wi="175.01mm" file="US20230006890A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="131.23mm" wi="172.38mm" file="US20230006890A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="186.01mm" wi="138.43mm" file="US20230006890A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="176.87mm" wi="99.99mm" file="US20230006890A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="101.35mm" wi="160.27mm" file="US20230006890A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="132.67mm" wi="187.28mm" file="US20230006890A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="141.22mm" wi="181.10mm" file="US20230006890A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="138.77mm" wi="168.91mm" file="US20230006890A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="133.86mm" wi="177.46mm" file="US20230006890A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="133.86mm" wi="183.05mm" file="US20230006890A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="136.74mm" wi="188.55mm" file="US20230006890A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="132.76mm" wi="156.21mm" file="US20230006890A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="132.33mm" wi="181.10mm" file="US20230006890A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="130.22mm" wi="180.17mm" file="US20230006890A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="132.67mm" wi="175.26mm" file="US20230006890A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="118.36mm" wi="180.17mm" file="US20230006890A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="138.18mm" wi="171.62mm" file="US20230006890A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="136.06mm" wi="165.44mm" file="US20230006890A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="139.70mm" wi="187.11mm" file="US20230006890A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="126.15mm" wi="174.24mm" file="US20230006890A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="127.17mm" wi="178.05mm" file="US20230006890A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="108.46mm" wi="181.44mm" file="US20230006890A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="123.44mm" wi="182.03mm" file="US20230006890A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application related to U.S. Provisional Patent Application Ser. No. 63/217,550, titled &#x201c;User-Configurable IOT Interface&#x201d; and filed on Jul. 1, 2021, which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE INVENTION</heading><p id="p-0003" num="0002">This document relates to systems and methods for configuring and providing an output of information from nodes of an Internet of Things (IoT) network hierarchy.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">IoT is becoming more prevalent, and solutions are beginning to be a part of our everyday lives. Over the last few years, there are trends like MQTT, API-first, IoT Platform, Intelligent Edge. As the number of software applications have grown, many developers and application owners have stored and run their applications in the &#x201c;cloud&#x201d;, e.g., in large remote server farms accessible over the internet.</p><p id="p-0005" num="0004">Building IoT solutions is a difficult process and generally requires highly-skilled programmers and developers to write custom code for each use case. There are various use cases such as monitoring, tracking, controlling, and reporting contain common elements and standard points of variability.</p><p id="p-0006" num="0005">It is difficult for industrial operations workers like technicians, mechanics, field services employees, maintainers, and for internal businesspeople like dispatchers and analysts to build solutions to optimize the use of physical assets like tools, machines, equipment without understanding how to write appropriate software code to handle the desired tasks. These operations and business workers understand and can describe the processes and how the equipment works (a so-called &#x201c;business language&#x201d;), but they may not possess the ability to build their own software applications.</p><p id="p-0007" num="0006">Previously, the development process for generating such solutions was lengthy and cost-intensive. Business people and workers would have to be interviewed by software developers to generate a long list of software requirements. After these requirements were gathered developers would pick software languages and build expensive projects to build a custom application. The business would then pay those developers to build an application that then would have to be heavily tested by the operations people</p><p id="p-0008" num="0007">The previous process also was slow to see any value, and infrequently extensible to be used by wider groups.</p><p id="p-0009" num="0008">There are so-called &#x201c;low code&#x201d; offerings that offer a user some of the functionality desired, but that still require a user to understand logic flow of data, concurrency, and integration. These low code tools still require end users to build out their logic with diagram tools and they still require that users build their own user interface.</p><p id="p-0010" num="0009">Improved techniques for providing widely viable IoT solution without the need for significant custom-created code are generally desired.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0011" num="0010">Applicant has developed systems and methods involving Edge Computer Continuum, representing many layers of computer infrastructure made available to be used as part of the whole IoT application to provide a hierarchy-based, fastest path to every device. The various hardware located at the various hubs between a user and the server that the user interacts with, for example, the routing gear, the cell phone towers, and the satellites, all represent computing opportunities for IoT applications.</p><p id="p-0012" num="0011">Applicant's systems and methods utilize the ubiquitous computing in today's IoT capable world to implement an edge compute continuum. According to Wikipedia, &#x201c;Ubiquitous computing&#x201d; (or &#x201c;ubicomp&#x201d;) is a concept in software engineering and computer science where computing is made to appear anytime and everywhere. In contrast to desktop computing, ubiquitous computing can occur using any device, in any location, and in any format. A user interacts with the computer, which can exist in many different forms, including laptop computers, tablets and terminals in everyday objects such as a refrigerator or a pair of glasses. The underlying technologies to support ubiquitous computing include Internet, advanced middleware, operating system, mobile code, sensors, microprocessors, new I/O and user interfaces, networks, mobile protocols, location and positioning, and new materials.&#x201d;</p><p id="p-0013" num="0012">Applicant's systems and methods use these edge offerings, capable of chaining together. Ultimately, instead of costly on-off solutions made by large clouds or enterprise vendors, middleware capable of making this task easy and transparent for end developers is used.</p><p id="p-0014" num="0013">Other objects and advantages of the present invention will become obvious to the reader and it is intended that these objects and advantages are within the scope of the present invention.</p><p id="p-0015" num="0014">To the accomplishment of the above and related objects, this invention may be embodied in the form illustrated in the accompanying drawings/pictures, recognizing however, that the drawings are illustrative only, and that changes may be made in the specific construction illustrated and described within the scope of the appended claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0016" num="0015">Various other objects, features and attendant advantages of the present invention will become fully appreciated as the same becomes better understood when considered in conjunction with the accompanying drawings.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is one embodiment showing one hierarchy of different computers in accordance with some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a deployed ecosystem of IoT devices for package tracking in accordance with some embodiments of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a deployed ecosystem of IoT devices for traffic monitoring in accordance with some embodiments of the present disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts an exemplary deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart depicting an exemplary method for a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram depicting an exemplary node of a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>9</b></figref> depicts a deployed ecosystem of IoT devices for a door of a building in accordance with some embodiments of the present disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts a deployed ecosystem of IoT devices for monitoring railroad crossings in accordance with some embodiments of the present disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart depicting an exemplary method for updating synchronization rule at a node of a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart depicting an exemplary method for selecting a communication protocol at a node of a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram depicting a node of a deployed ecosystem of IoT devices having instructions for providing a user-configurable interface in accordance with some embodiments of the present disclosure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>14</b></figref> depicts a GUI displaying assets and areas as defined by users of a method according to an embodiment of the present disclosure.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is an exemplary &#x201c;Asset Types&#x201d; GUI whereby users can define and view details of an asset.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is an exemplary &#x201c;Rules&#x201d; GUI whereby users define asset behavior without code.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is an exemplary &#x201c;Area Types&#x201d; GUI in accordance with an embodiment of the present disclosure.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is an exemplary &#x201c;Assets&#x201d; GUI <b>1800</b> in accordance with an embodiment of the present disclosure.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is an exemplary &#x201c;Device Configuration&#x201d; GUI in accordance with an embodiment of the present disclosure.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>20</b></figref> depicts an exemplary &#x201c;Areas&#x201d; GUI in accordance with an embodiment of the present disclosure.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>21</b></figref> depicts an exemplary &#x201c;Events&#x201d; GUI in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>22</b></figref> depicts an exemplary &#x201c;Reports&#x201d; GUI in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>23</b></figref> depicts an exemplary HeatMap Report in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>24</b></figref> depicts an exemplary &#x201c;Action Types&#x201d; GUI in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>25</b></figref> depicts an exemplary &#x201c;Event Types&#x201d; GUI in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>26</b></figref> depicts an exemplary &#x201c;Groups&#x201d; GUI in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>27</b></figref> depicts an exemplary &#x201c;Users&#x201d; GUI in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>28</b></figref> depicts an exemplary &#x201c;Rule Types&#x201d; GUI in read-only mode, in accordance with an exemplary embodiment of the present disclosure.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>29</b></figref> depicts an exemplary &#x201c;Rule Types&#x201d; GUI in edit mode.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>30</b></figref> shows an exemplary dataflow of a user-configurable interface in accordance with some embodiments of the present disclosure.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>31</b></figref> shows an exemplary dataflow showing the internal processing between the back end dataflow of <figref idref="DRAWINGS">FIG. <b>30</b></figref> and model creation by the user/data scientist.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0048" num="0047">While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed here. Accordingly, the scope of the invention should be limited only by the attached claims. Additionally, while much of the description herein relates to mobile apps that interact with mainframe/enterprise/back end systems, the invention is equally applicable to mobile apps that do not interact with such systems.</p><p id="p-0049" num="0048">The present invention provides a system and method for constructing a complete definition of a backend requirements model that can be automatically accessed and interpreted, and generated into a mobile consumable API for creation of mobile applications. The mobile consumable API can be provided and made available to mobile app developers on a separate, stand-alone platform, and may act as an intermediary between the mobile app and the primary mainframe/enterprise/back end system.</p><p id="p-0050" num="0049">Various embodiments may have one or more of the components outlined below.</p><p id="p-0051" num="0050">IoT devices existing in the deployed ecosystem <b>1</b> will have multiple requests for data and updates from their state. This information must be communicated in an efficient method reducing redundancy, execution time and errors. To achieve this, a device (e.g., device <b>3</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) must be able to request information from or give information to a logic/data source (e.g., child <b>2</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). A logic/data source may be similar to a server application. In order to meet speed or data requirements, the logic/data source child <b>2</b> may be able to respond to the device <b>3</b> directly or it may understand that the request must be met by a higher order logic/data source (a &#x201c;parent,&#x201d; such as parent <b>30</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). It may need the parent's <b>30</b> source due to additional requirements like ability to compute machine learning algorithms, access to secured third-party systems, or need to share information with other logic/data sources (e.g., grandparent <b>40</b> or children <b>4</b>, and <b>6</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0052" num="0051">The logic/data source parent <b>30</b> may then repeat the understanding process to either provide the necessary response to the logic/data source child <b>2</b> who then replies to the device <b>3</b> or it will again ask a parent logic/data source (e.g., parent <b>30</b>) for the appropriate response.</p><p id="p-0053" num="0052">The goal of such an architecture allows for a single device, such as device <b>3</b> to make one request to a single known source (e.g., child data source <b>2</b>) and potentially get a response back from the entire ecosystem of distributed servers (e.g., parent <b>30</b>, grandparent <b>40</b>, great grandparent <b>50</b>, or any of the other various sources depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0054" num="0053">A device <b>3</b>, also referred to herein as a &#x201c;computer,&#x201d; may be included in a hierarchy that may be described as having layers, with computers in a particular layer being characterized as a child computer (e.g., children <b>2</b>-<b>24</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>), the next layer as parent computers (e.g., parents <b>30</b>-<b>36</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>), the next layer as grandparent computers (e.g., grandparents <b>40</b>-<b>42</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>), the next layer as great grandparent computers (e.g., great grandparent <b>50</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>), and so on for as many layers as may be needed or desired. An exemplary embodiment of one hierarchy is shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The computers may have operating systems, processors, RAM, and some database or storage. These computers can exist in many different forms, including desktop computers, laptop computers, tablets, smart phones, and terminals in everyday objects such as a refrigerator, thermostat, and other internet connected smart devices. The underlying technologies supporting this distributed computing include the internet, middleware, operating system, mobile code, sensors, microprocessors, new I/O, and user interfaces, networks, mobile protocols, location and positioning, and new materials.</p><p id="p-0055" num="0054">The various computers across this continuum <b>1</b> of computers may be coupled to or communicate with each other via a network, such as the internet, local area network (LAN), wide area network (WAN), or the like. The network may be a cellular network such as a Long-Term Evolution (LTE) network in some embodiments. Additional examples that may be used depending on application include low-power wide-area network (LPWAN), low-power wide-area (LPWA) network, low-power network (LPN). In some embodiments nodes of the continuum may communicate via various LPWAN networks, including Long Range (LoRa) or Long Range Wide Area Network (LoRaWAN) networks operating at a frequency of approximately 415 MHz, 858 MHz, or 915 MHz. Other frequencies, networks and protocols are possible are possible in other embodiments. These may be used in situations where long-range communication is required, at a low bit rate, for example, those described with regard to <figref idref="DRAWINGS">FIGS. <b>2</b>, <b>3</b>, and <b>10</b></figref>. Lower power requirements associated with these networks may be suitable for use with nodes associated with devices operating on low or limited-power capacity, such as a battery. Various other types of networks are possible in other embodiments.</p><p id="p-0056" num="0055">In some embodiments, nodes of the continuum <b>1</b> may be configured for communication via one or more networks or protocols specific to systems operating on the continuum <b>1</b>. An example includes networks configured to communicate with Positive Train Control (PTC) technologies, designed to automatically stop a train before certain accidents related to human error occur. Yet other examples of system-specific networks and communication protocols are possible in other embodiments.</p><p id="p-0057" num="0056">A network also may include satellite communication, radio, and other ways to send or communicate data. The computers may include applications or programs stored in memory and executed on a processor. In some embodiments, the continuum <b>1</b> can be implemented on a UNIX-based system or other system. The systems and methods described in U.S. Pat. No. 9,038,015, the entire contents of which are hereby incorporated by reference, can be used to implement some aspects of the present disclosure.</p><p id="p-0058" num="0057">In the past, the systems and methods described in U.S. Pat. No. 9,038,015 would likely be implemented in the cloud. However, using the system and method for IoT systems of logic across the continuum <b>1</b> of computers as discussed herein can result in faster processing, less expense, and more reliability.</p><p id="p-0059" num="0058">At the various computers, or hubs described herein, embodiments may be implemented in code and may be stored on at least one storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include, but is not limited to, any type of disk including floppy disks, optical disks, solid state drives (SSDs), compact disk read-only memories (CD-ROMs), compact disk rewritables (CD-RWs), and magneto-optical disks, semiconductor devices such as read-only memories (ROMs), random access memories (RAMs) such as dynamic random access memories (DRAMs), static random access memories (SRAMs), erasable programmable read-only memories (EPROMs), flash memories, electrically erasable programmable read-only memories (EEPROMs), magnetic or optical cards, or any other type of media suitable for storing electronic instructions.</p><p id="p-0060" num="0059">Embodiments of the invention may be described herein with reference to data such as instructions, functions, procedures, data structures, application programs, configuration settings, code, and the like. When the data is accessed by a machine, the machine may respond by performing tasks, defining abstract data types, establishing low-level hardware contexts, and/or performing other operations, as described in greater detail herein. The data may be stored in volatile and/or non-volatile data storage. The terms &#x201c;code&#x201d; or &#x201c;program&#x201d; cover a broad range of components and constructs, including applications, drivers, processes, routines, methods, modules, and subprograms and may refer to any collection of instructions which, when executed by a processing system, performs a desired operation or operations. In addition, alternative embodiments may include processes that use fewer than all of the disclosed operations, processes that use additional operations, processes that use the same operations in a different sequence, and processes in which the individual operations disclosed herein are combined, subdivided, or otherwise altered.</p><p id="p-0061" num="0060">In one embodiment, use of the term control logic includes hardware, such as transistors, registers, or other hardware, such as programmable logic devices. However, in another embodiment, logic also includes software or code. Such logic may be integrated with hardware, such as firmware or micro-code. A processor or controller may include control logic intended to represent any of a wide variety of control logic known in the art and, as such, may well be implemented as a microprocessor, a micro-controller, a field-programmable gate array (FPGA), application specific integrated circuit (ASIC), programmable logic device (PLD) and the like.</p><p id="p-0062" num="0061">In existing systems and methods, most applications and information is stored in the cloud in large cloud storage and computing farms. This can cause problems with security, performance, scalability, offline support, and have tremendous impacts on cost.</p><p id="p-0063" num="0062">As one example implementation and embodiment and with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a delivery company may have a need to track and be able to report certain information associated with packages <b>300</b> it is handling. A particular delivery truck may have a truck computer <b>302</b> which can interact with the packages on board (e.g., package <b>300</b>). The delivery truck may have information stored on the local truck computer <b>302</b> that includes how long the package has been on the truck, and where it needs to be delivered. However, a user within the delivery company (for example, the truck operator) may want or need to know from whom the package is sent. This information is not stored by the truck computer (the &#x201c;child computer&#x201d; <b>2</b> in the hierarchy described above), so it seeks that information from the computer that is up one level from it, or a parent computer (e.g., parent <b>30</b>). In this embodiment, that parent computer might be a computer associated with a cell phone tower <b>330</b> (<figref idref="DRAWINGS">FIG. <b>3</b></figref>). The parent computer <b>330</b> is programmed to determine whether it has the data stored, namely from whom the package is sent, necessary to provide the answer to the child computer/truck computer <b>302</b>. If it does not, it may seek that information from other child computers (e.g., truck computers <b>304</b>, <b>306</b>) with which it is associated and connected with in the hierarchy, or it can seek that information from the next higher computer in the hierarchy (e.g., a grandparent computer <b>340</b>), which may be a larger regional data center computer that covers a specific region (and maybe containing ten (10) different cell phone tower hubs, e.g., hubs <b>331</b>, <b>332</b>, <b>333</b>, <b>334</b>, <b>335</b>, <b>336</b>, <b>337</b>, <b>338</b>, and <b>339</b>). The grandparent computer <b>340</b> is similarly programmed to determine whether it has the data stored, and if it does not, it may seek that information from other parent computers with which it is associated and connected with in the hierarchy, or it can seek that information from the next higher computer in the hierarchy (a great grandparent computer <b>350</b>).</p><p id="p-0064" num="0063">Similarly, assume that an application running on the parent computer/cell phone tower hub needed to know how long a particular package (e.g., package <b>300</b>) has been on the truck, such as truck <b>302</b>. If that data is not stored at the parent computer/cell phone tower hub (e.g., hub <b>330</b>), it could seek that information from all of its child computers (e.g., all the trucks <b>304</b>, <b>306</b> that are associated with this particular parent computer/cell phone tower hub <b>330</b>) and/or the grandparent (data center grandparent <b>340</b>). Since that information is stored (in this example) in the truck <b>302</b> that has the particular package <b>300</b>, the application running on the parent computer/cell phone tower hub <b>330</b> can obtain that information without having to go to the cloud.</p><p id="p-0065" num="0064">Thus, some hubs in this ecosystem <b>1</b> may contain various aspects of information. In other words, the child computers/truck computers <b>302</b>, <b>304</b>, <b>306</b> may only retain information A, B, and C, the parent computer/cell phone tower hub <b>330</b> may retain information C, D, E, and F, and the great grandparent computer <b>350</b>/regional data center <b>340</b> may retain A, F, G, H, I, J, and K, and other information is contained further up the chain. This configuration effectively deploys the information provider in various places throughout the ecosystem <b>1</b>.</p><p id="p-0066" num="0065">In this example, the truck <b>302</b> does not have to be configured to be able to seek information from the cell phone tower hub <b>330</b>, the regional data center <b>340</b>, and other potential sources of the information it seeks&#x2014;rather it just has to be able to be configured to seek the requested information from its one connection to the cell phone tower hub <b>330</b>. If the data sought is located at a hub computer up three levels (e.g., great grandparent <b>350</b>), the truck computer <b>302</b> is unaware of that, and it does not matter to the truck computer <b>302</b>.</p><p id="p-0067" num="0066">This structure provides a number of technological solutions to some technological problems associated with traditional configurations and data flows. It can provide more real-time answers because the data requests are normally not required to be sent to and received from the &#x201c;cloud&#x201d;, which is often hundreds or thousands of miles away. While the processing time for traditional requests is normally not minutes or hours, for some real-time applications, differences in seconds or even milliseconds of response times can make a significant difference. Additionally, having the data more localized can allow the requested information/connection if the connection to the cloud goes off line or is unavailable. Moreover, every time a request is sent to or information received from the cloud, costs are incurred. As a practical matter, for each &#x201c;hop&#x201d; in a network from a user's device to the cloud, there are costs that are incurred. When there are thousands, hundreds of thousands, or more requests and transmittals across the internet to and from the cloud, the costs can be substantial. By deploying the various information providers in a more distributed and localized fashion, the technological challenges and costs associated with storing and interacting with the cloud can be minimized.</p><p id="p-0068" num="0067">The specific hub computer (i.e., the child computer <b>2</b>, parent computer <b>30</b>, grandparent computer <b>40</b>, etc.) can be programmed or have logic that determines what data is or should be stored locally on that particular computer. The edge process described in U.S. Pat. No. 9,038,015 can be run on each computer. The computer can be a gateway, server, personal device, laptop, or any other type of computer. These computers can have rules that dictate how data and information is stored, transmitted, and the communication between hubs on different hierarchy levels. One or more of the computers can have algorithms that will implement the how, when, and the order of the communication between computers in the hierarchy. In various embodiments, those algorithms may include one or more of (a) cost efficient option (i.e., cheapest way to get data); (b) time performance optimization option (i.e., quickest way to get data); (c) priority (what communication layer should be used, e.g., satellite, radio, etc.); and/or (d) the order (i.e., do I check with parents first, children computers <b>5</b> first, etc.)</p><p id="p-0069" num="0068">As another example of one embodiment of the invention, a car <b>402</b> running an IoT traffic application (child computer <b>2</b> in this example) wants to know the status of traffic on I-35 near Austin, it may first ask the Wi-Fi router <b>430</b> in the parking garage <b>400</b> (parent computer <b>30</b>). If the edge/application running in the Wi-Fi router <b>430</b> has recently answered that question and has it stored in memory, it may rapidly respond, otherwise it may reach upward to the cell phone tower <b>440</b> (grandparent computer <b>40</b>), where another edge/application sits with a broader set of constituents (e.g., other towers in the region, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>). It again may answer a traffic request if it has a recent information or it will ask the local ISP data center <b>450</b> (great grandparent computer <b>50</b>). This ISP data center, is actually the target of local traffic data, meaning the status of the cars is sent to the ISP as it moves to the cloud. Rather than having to send the information up to the cloud to process and analyze the ISP is actually able to run the cloud logic locally and leverage the capability. This means that a serverless function that used to only run in the cloud now runs right where the data is closest and ingested. Now the ISP data center <b>450</b> can push that summary back up to a cloud so that other cities have access to traffic information, or it can keep it local, not wasting more computation resources. Additionally the original car <b>402</b> who made the request never had to know how the traffic question was answered, it simply asked and the application optimized itself and returned the information in the optimal manner.</p><p id="p-0070" num="0069">In the traditional methodology, there might be a smart traffic application that assumes all cars are using 3G. All cars send their data to a local cell tower hub (local), which may send the data to a state hub, which may send the data to a regional hub, and which may then send it to a national cloud storage hub, for example, the Amazon cloud storage facility in Virginia. This requires quite a few &#x201c;hops&#x201d; from each node in the network, which can result in delays, and be costly over time.</p><p id="p-0071" num="0070">Again, there is software running on these edge computers that is specific to each of these different applications. In the above example, a third party would write the traffic application and it is designed and configured to preferably optimize the hierarchy, where data is stored, where it is processed, etc. In other words, it is structured so that data elements A, B, and C, are stored at the child level (cars <b>402</b>-<b>410</b>), elements D, E, and F are stored at the parent level (e.g., tower hub <b>440</b>), and processing of X, Y, and Z are addressed at the parent level (hub <b>440</b>). In some embodiments, requirements, data storage, and processing can be dynamically reallocated and/or deployed. For example, if a system is initially set up to store data element J at the grandparent level, but the system detects that child computers are requesting that data at a certain level (e.g., more than 10 times an hour), the system may dynamically redeploy and reallocate so that data element J is stored at the parent <b>10</b> level to minimize response times and reduce costs. Similarly, the system can also be predictively deployed or reallocated. For example, if the system has access to data that the temperature will be 100 degrees in about five days, the system may provide instructions to buy electricity now at a cheaper price.</p><p id="p-0072" num="0071">In some embodiments, the system and method is configured to be take advantage of unstructured/unorganized communication. While a communication model where everyone (or every computer) speaks to everyone is great for a social network, it fails when it comes to enforcing truth and guaranteeing task completion. Consequently, the Edge Continuum of some embodiments contemplated by applicant remains a better implementation by forcing a hierarchy, guaranteeing a source of trust, and ensuring that every device that sends data or needs data gets an accurate responsive channel of communication.</p><p id="p-0073" num="0072">IoT will become a reality in more and more everyday products, homes and businesses. As the momentum builds with more silicon providers making it cheaper to distribute accordingly, there will be a demand to better utilize the infrastructure.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts an optional configuration of the continuum <b>1</b> and its components in accordance with some embodiments of the present disclosure. <figref idref="DRAWINGS">FIG. <b>5</b></figref> describes and shows the various computers and are labeled as &#x201c;SmartRoom Edge&#x201d; <b>502</b> (which might represent a &#x201c;child computer&#x201d;), a &#x201c;SmartBuilding Edge&#x201d; <b>530</b> (which might represent a &#x201c;parent computer&#x201d;), a &#x201c;SmartCity Edge&#x201d; <b>540</b> (which might represent a &#x201c;grandparent computer&#x201d;), and the Cloud <b>550</b> (which might represent a &#x201c;great grandparent computer&#x201d;). Although only one of each is shown, in the filled out ecosystem <b>1</b>, there may be dozens, hundreds, or thousands (or more) of other computers represented by the single &#x201c;SmartRoom Edge&#x201d; computer <b>502</b>, dozens, hundreds, or thousands (or more) of other computers represented by the &#x201c;SmartBuilding Edge&#x201d; <b>530</b>, etc.</p><p id="p-0075" num="0074">In an exemplary embodiment of the systems and methods related to temperatures, the types of activities and capabilities of the IoT system <b>1</b>, and the possible workflow of the data requests that might be exchanged between the different computers.</p><p id="p-0076" num="0075">Note that each depicted computer or node (e.g., with regard to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, SmartRoom Edge <b>502</b>, SmartBuilding Edge <b>530</b>, SmartCity Edge <b>540</b>, the Cloud <b>550</b>, etc.) may be referred to herein individually as an &#x201c;edge.&#x201d;</p><p id="p-0077" num="0076">Activities of the IoT system <b>1</b> implemented by the edges can be defined as a set of application programming interfaces or &#x201c;API's.&#x201d; This set may be referred to herein as a &#x201c;schema.&#x201d; For temperature related operations, a schema of the system <b>1</b> can include APIs for activities such as requesting a room temperature, requesting a list of authorized room users, requesting a list of room owners, predicting the temperature based on a temperature history for the room, and predicting the room's temperature based on information from external data sources. The IoT system <b>1</b> thus may be configured to be capable of performing activities including but not limited to asking: 1) what is my temperature?; 2) who is allowed to read my temperature?; 3) who is allowed to set my temperature?; 4) what is my temperature likely to be based upon history?; and 5) what is my temperature likely to be based upon external factors?</p><p id="p-0078" num="0077">Each edge can be aware of the API schema, but does not fully implement the APIs. To implement an API, the edge may need to have the full dataset or integrations necessary to fulfill the request. So, for example, a SmartRoom Edge <b>502</b> would need sufficient dataset or integrations to fulfill a request to implement the /getRoomTemperature API. SmartBuilding Edge <b>530</b> would need sufficient dataset or integrations to fulfill requests to implement the /getRoomUsers and /getRoomOwners APIs. SmartCity Edge <b>540</b> would need sufficient dataset or integrations to fulfill requests to implement the /predictTemperatureFromHistory API, and the Cloud <b>550</b> would need sufficient dataset or integrations to fulfill requests to implement the /predictTemperatureFromExternal API. Although each edge is aware of the API schema, each edge may not fully implement the APIs, and it is possible that an edge may not know which other edge implements an API or which APIs a particular edge can implement.</p><p id="p-0079" num="0078">Each edge may have memory storage for storing data. In the context of implementing a schema for temperature activities, the information can include: temperature requests; users and owners of resources of any or various combinations of a SmartRoom or SmartBuilding or SmartCity; temperature history; and temperature information from external sources.</p><p id="p-0080" num="0079">As illustrated by <figref idref="DRAWINGS">FIG. <b>6</b></figref>, each edge may generally have a parent/child relationship, although in one embodiment, each edge may have exactly one edge and 0 to many child edges. In addition, a connection between edges may be configured to have a bi-directional information flow. An edge can ask its parent and any children for an API request to be fulfilled, and the networked edge will then either answer the request or pass it along to its connections for fulfillment.</p><p id="p-0081" num="0080">In a first exemplary operation of the embodiment of system <b>1</b> depicted in <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref>, an edge may ask its parent for information. As an example, child <b>502</b> may ask parent <b>530</b> whether a user (e.g., user <b>500</b> who goes by &#x201c;Jim&#x201d;) can read the temperature. The SmartBuilding Edge has a sufficient dataset or integrations to implement the /getRoomUsers API and can let the SmartRoom Edge child <b>502</b> know that Jim is not allowed to read the temperature.</p><p id="p-0082" num="0081">In a second exemplary operation of the embodiment of system <b>1</b> depicted in <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref>, an edge may ask its children and parent for information but only get one answer. As an example, SmartBuilding Edge <b>530</b> (parent) may ask SmartRoom Edge <b>502</b> (child) and SmartCity Edge <b>540</b> (grandparent) what the temperature is. The SmartCity Edge <b>540</b> may not have a sufficient dataset or integrations to implement the /getRoomTemperature API and fulfill the request, may ask its children and parent, and may tell the SmartBuilding Edge <b>530</b> that it does not know what the temperature is. However, the SmartRoom Edge <b>502</b> has a sufficient dataset or integrations to implement the /getRoomTemperature API and fulfill the request and can let the SmartBuilding Edge <b>530</b> know that the temperature is 78 degrees. The SmartBuilding Edge <b>530</b> only receives one answer (78 degrees).</p><p id="p-0083" num="0082">In a third exemplary operation of the embodiment of system <b>1</b> depicted in <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref>, an edge may ask its children and parent for information, and the edges must find the answer, but the edge only gets one answer. As an example, SmartBuilding Edge <b>530</b> (parent) may ask SmartRoom Edge <b>502</b> (child) and SmartCity Edge <b>540</b> (grandparent) what the temperature will be tomorrow. The SmartRoom Edge <b>502</b> may not have a sufficient dataset or integrations to implement the /predictTemperatureFromExternal API and fulfill the request, and may tell the SmartBuilding Edge <b>530</b> that it does not know what the temperature will be. The SmartCity Edge <b>540</b> also may not have a sufficient dataset or integrations to implement the /predictTemperatureFromExternal API and fulfill the request and determine what the temperature will be, and so may ask its children (other SmartBuilding Edges) and parent, the Cloud Edge <b>550</b> (great grandparent). The Cloud Edge <b>550</b> has a sufficient dataset or integrations to implement the /predictTemperatureFromExternal API and fulfill the request, and can let the SmartCity Edge <b>540</b> know that the temperature will be 44 degrees tomorrow. The SmartCity Edge <b>540</b> can then let SmartBuilding Edge <b>530</b> know that the temperature will be 44 degrees tomorrow. The SmartBuilding Edge <b>530</b> only receives one answer (44 degrees).</p><p id="p-0084" num="0083">In a further example, an edge can be configured to filter messaging noise by examining messages that it receives and determining whether to forward them. If the edge determines that it has received essentially the same message previously, it can ignore the message and not forward it to its parent or children. However, when it receives a message updating a status of at least one previously received message (e.g., the message has not been received previously), the edge may forward the message to its parent or children. In this regard, the system <b>1</b> can preserve its ability to handle requests as close to the source of the request as possible without incurring delays from processing requests across multiple hops.</p><p id="p-0085" num="0084">In some aspects, the domain model described in U.S. Pat. No. 9,038,015, can identify the different information providers, integration providers, and system behaviors of a particular application. This information can be used to define the API schema. As described in the appendix, while each computer in the hierarchy is aware of the API schema, each computer may not fully implement the API. In other words, a particular computer may not be able to answer any particular &#x201c;question&#x201d; (for example, who is allowed to set my temperature), but it knows whether that is a valid question that can be asked as configured by the domain model.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a data flow <b>700</b> in accordance with some embodiments of the present disclosure. At step <b>702</b>, at a node configured to communicate with other nodes in an Internet of Things (IoT) hierarchy (e.g., SmartBuilding Edge <b>530</b>) may receive a request from a first child node (e.g., SmartRoom Edge <b>502</b>). As noted above, answering the request may require implementation of an API based on either a dataset or an integration stored in memory at SmartBuilding Edge <b>530</b>. At step <b>704</b>, the node may determine whether the node has ether the dataset or integration that is required to implement the API and answer the request.</p><p id="p-0087" num="0086">If the node determines that it has either the dataset or integration, at step <b>706</b>, the node may implement the API to answer the request, and processing may proceed to step <b>712</b> where the node may provide the answer to the request to the first child node. Thereafter, processing may end.</p><p id="p-0088" num="0087">If the node determines that it does not have either the dataset or integration, at step <b>708</b>, the node may provide the request for information to a parent node of the node (e.g., a grandparent, such as SmartCity Edge <b>540</b>) and at least a second child node (e.g., a peer of SmartRoom Edge <b>502</b>). Thereafter processing may continue to step <b>710</b>, where the node may receive answer to the request from either the parent node (e.g., a grandparent, such as SmartCity Edge <b>540</b>) or the at least the second child node (e.g., a peer of SmartRoom Edge <b>502</b>). Processing may then continue to step <b>712</b>, where the node may provide the answer to the request to the first child node. Thereafter processing may end.</p><p id="p-0089" num="0088">In some embodiments of the system <b>1</b> described above, system <b>1</b> may be configured to synchronize information across nodes <b>800</b> of the continuum <b>1</b> according to various exemplary techniques, as described in further detail below. &#x201c;Node&#x201d; may refer to one or more of device <b>3</b>, child <b>2</b>, parent <b>30</b>, grandparent <b>40</b>, or great grandparent <b>50</b>, depending on the layer of the IoT system in which the respective device is located.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an exemplary node <b>800</b> in accordance with some embodiments of the present disclosure. The exemplary node <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes a processing unit <b>802</b>, device interface <b>804</b>, a user interface <b>806</b>, a communication interface <b>808</b>, and a power supply <b>812</b>, although other components are possible in other embodiments. The node <b>800</b> also includes at least one memory <b>810</b> which stores application data <b>820</b> and control logic <b>822</b>. A node <b>800</b> may store other information and instructions in other embodiments. Although the node <b>800</b> is shown as having particular components and information, in some embodiments, a node <b>800</b> may include some, all or various combinations of the components of <figref idref="DRAWINGS">FIG. <b>8</b></figref> or yet other components and information in order to achieve the functionality described herein. In some embodiments, the components of node <b>800</b> can vary based on the layer of the system <b>1</b> within which the node <b>800</b> is positioned. For example, a child node may have components configured to permit communication via one or more different communication protocols than those protocols a parent or grandparent node may be configured to communicate according to. The components of node <b>800</b> may be adapted in other ways to achieve the functionality ascribed to nodes of the system <b>1</b>.</p><p id="p-0091" num="0090">The exemplary node <b>800</b> depicted by <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes at least one conventional processing unit <b>802</b>, which includes processing hardware for executing instructions stored in memory <b>810</b>. The processing unit <b>802</b> may be various types of processor and may include various types of hardware, software, memory, and circuitry as is necessary to perform and control the functions of node <b>800</b>. As an example, the processing unit <b>802</b> may include a central processing unit (CPU) or a digital signal processor (DSP). Processing unit <b>120</b> may include a number of processors, and may perform the operations of node <b>800</b> based on instructions in one or more memories and memory types, such as memory <b>810</b>. As used herein, memory may refer to any suitable tangible or non-transitory storage medium. Examples of a tangible (or non-transitory) storage medium may include disks, thumb drives, and memory, etc., but does not include propagated signals. Tangible computer readable storage mediums may include volatile and non-volatile, removable and non-removable media, such as computer readable instructions, data structures, program modules or other data. Examples of such media may include RAM, ROM, EPROM, EEPROM, SRAM, flash memory, disks or optical storage, magnetic storage, or any other non-transitory medium that stores information that is accessed by a processor or computing device</p><p id="p-0092" num="0091">The processing unit <b>802</b> is configured to communicate with and drive the other elements within the controller <b>800</b> via a local interface <b>805</b>, which can include at least one bus. In addition, the controller <b>800</b> can include various communications and output interfaces (e.g., screens, displays, etc.), which are not specifically shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, but can be included to allow the node to perform functionality described herein. In some embodiments, the node <b>800</b> is coupled communicatively to one or more device interfaces <b>804</b>, user interfaces <b>806</b> or communication interfaces <b>808</b>, for example, via conductive means or via short-range communication protocol, such as Bluetooth&#xae;.</p><p id="p-0093" num="0092">Although in some embodiments the processing unit <b>120</b> and memory <b>122</b> will be described implemented in a node <b>800</b> and configured in a particular manner, it will be understood that, in some embodiments, processing unit <b>802</b>, memory <b>810</b>, device interface <b>804</b>, user interface <b>806</b> and communication interface <b>808</b> may be configured in any suitable manner to perform the functionality of the node <b>800</b> (or device <b>3</b>, child <b>2</b>, parent <b>30</b>, grandparent <b>40</b>, or great grandparent <b>50</b>) as is described herein. It will also be understood that the functionality of node <b>800</b> may be embodied in a single device or a plurality of devices, each including one or more or various combinations of processing units and memory to collectively perform the functionalities of one or more nodes <b>800</b> as described herein.</p><p id="p-0094" num="0093">Device interface <b>804</b> may comprise hardware, or various combinations thereof configured to communicate with various types of devices configured to capture desired information (e.g., one or more states of one or more physical devices, objects, systems, environments, etc.) and provide the information to the node <b>800</b>. The device interface <b>804</b> may be associated with one or more devices that are associated with or which are themselves physical objects. Exemplary devices with which the device interface <b>804</b> may be compatible may include devices such as one or more sensors, cameras, switches, timers, counters, flow meters, thermometers, speed sensors, microphones, seismometers, acoustic sensors, gauges, optical sensors, spectrometers, displacement sensors, chemical sensors, electromagnetic sensors, electrical sensors, moisture sensors, proximity sensors, or other types of input devices. In some embodiments, the device interface <b>804</b> may comprise one or more of the foregoing devices, and may provide information captured by the device for use by the node <b>800</b>. In addition, the device interface <b>804</b> may be configured to communicate information to and from the one or more devices may include communications protocols similar to those described with regard to the communications interface <b>808</b> below.</p><p id="p-0095" num="0094">User interface <b>806</b> can include various combinations of hardware and software configured to implement a human-machine interface between a user and the node <b>800</b>, such as by allowing a user to receive outputs from and provide inputs to the node. In some embodiments the user interface can include one or more or various combinations of a display screen, touchscreen, keyboard, mouse, physical input devices (e.g., buttons or switches), or otherwise.</p><p id="p-0096" num="0095">Communication interface <b>808</b> may include one or more various combinations of hardware and software configured to communicate with other nodes of the system <b>1</b>. In one embodiment, the interface can include components and circuitry for communicating via various wireless (e.g., Wi-Fi, cellular, 5G, LTE, Bluetooth classic, Bluetooth low energy, internet, ZigBee, Radio Frequency, Random phase multiple access (RPMA), Ultra-Wide Band, Near-Field Communication, LPWAN, Narrow Band IOT, LoRa, and LoRaWAN) or wired (e.g., USB, optical fiber, Ethernet, FireWire, HDMI and Lightning) connections and protocols with wired and wireless communication networks. The interface <b>808</b> may be implemented via communications hardware (e.g., antennas, circuitry, etc.), or communications software or combinations thereof. The interface <b>808</b> may have ports associated with various communications networks. The ports may be various types of ports including physical ports (e.g., COM, I/O ports) or emulated ports (e.g., Bluetooth, USB adapters). A type of port may depend on various factors such as the type of communication network and protocol, and may be implemented in hardware, software or various combinations thereof. In some embodiments, the node may be configured to communicate according to other protocols other networks in addition to those listed above.</p><p id="p-0097" num="0096">It will be understood that the functionality ascribed to the node <b>800</b> and components of system <b>1</b> is not necessarily dependent upon communication via a particular protocol, and other communication techniques and interfaces are possible in other embodiments. In this regard, the node <b>800</b> may include one or more communication interfaces <b>808</b> that will allow for communications via desired communication protocols to facilitate synchronization between edges (e.g., children) and cloud (e.g., great grandparent), and can vary based on which layer of the system the node <b>800</b> is positioned within. Example communications protocols and techniques may include, but are not limited to the Internet, TCIP/IP, ETP/IP, Pub/Sub Messaging (e.g., MQ Telemetry Transport (&#x201c;MQTT&#x201d;), Advanced Message Queuing Protocol (&#x201c;AMQP&#x201d;)), Request/Response model (e.g., Reference Transactions API, Customer Information Control System (&#x201c;CICS&#x201d;) transactions), modular open radio frequency architecture (&#x201c;MORA&#x201d;). Payload may be formatted or defined as XML, JSON, machine code, bytecode, binary or hexadecimal code, or otherwise.</p><p id="p-0098" num="0097">Power supply <b>812</b> may function as a primary power source to components of the node (e.g., memory <b>810</b> and data stored in application data <b>820</b>, such as message data, application data and other information), and may include circuitry for interfacing with one or more of the components of the node. The power supply <b>812</b> may include one or more power supplies such as a physical connection to AC power, DC power, or a battery. Power supply <b>106</b> may include power conversion circuitry for converting AC power and generating a plurality of DC voltages for use by associated devices, such as via device interface <b>804</b>. When power supply <b>106</b> includes a battery, the battery may be charged via a physical power connection, such as a conductive connection to nearby solar cell, kinetic energy generation, or otherwise. Note that power provided from the battery can change based on temperature, availability of charging resources (e.g., less power available to charge solar-cell charged battery when weather is overcast, sun is down). Yet other types of power components may be used, such as conventionally are used to power a node like node <b>800</b>.</p><p id="p-0099" num="0098">Application data <b>820</b> may include various types of data that a node <b>800</b> may require in order to carry out operations of the system <b>1</b> and one or more applications running on the node (e.g., as implemented in and carried out by control logic <b>822</b>), and may include data related to the state of the node, information from one or more application developers, integration providers, messaging providers or otherwise. Formatting of data stored in application data <b>820</b> may be proprietary, open standard, etc. The application data <b>820</b> can include a plurality of each of state tables, state data, state update data, node maps with addresses, links, and identifiers of parent nodes and children nodes, etc. The state data can include data indicative of a current state or desired state of the node <b>800</b> (e.g., state of one or more physical devices associated with the node <b>800</b>) or similar information for one or more other nodes of the system <b>1</b>. The state update data can include data indicative of one or more states of the node <b>800</b> which may be provided as an update to other nodes of the system <b>1</b>. In some embodiments, the application data <b>820</b> can include a partial or total history of data stored by the node <b>800</b>, including historical data of states of one or more devices associated with the node <b>800</b> (e.g., when connectivity with one or more other nodes is lost). Retention and storage of historical data in application data <b>820</b> may be managed by control logic <b>822</b>.</p><p id="p-0100" num="0099">As an example of types of node states that may be included in application data <b>820</b>, where the node is configured to measure information about railroad crossings (e.g., nodes <b>900</b> and <b>902</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>), the application data can include various information about the number of times a crossing arm (e.g., crossing arms <b>898</b>, <b>899</b>) associated with the node was actuated (e.g., moved up and down) and for how long, whether lights of the crossing arm were actuated and for how long, an amount of time required for the crossing arm to lower and raise, whether any anomalies were experienced, identifiers of trains or vehicles that passed the particular crossing arm, dates and times of day, location of the crossing arm, whether another crossing arm associated with the same crossing has been or is performing properly, etc. Other information related to the crossing arms may be included in other embodiments.</p><p id="p-0101" num="0100">As an additional example, the data <b>820</b> can include data related to temperature of a room in a building that is monitored and potentially controlled as part of a SmartCity (e.g., using SmartRoom Edge <b>502</b>, SmartBuilding Edge <b>530</b>, SmartCity Edge <b>540</b> and Cloud <b>550</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>). The data <b>820</b> can include numerical temperature values, associated time and location information, information about user access and interactions, or otherwise.</p><p id="p-0102" num="0101">As noted above, references herein to functionality ascribed to one or more components of system <b>1</b>, such as edges, nodes, device <b>3</b>, child <b>2</b>, parent <b>30</b>, grandparent <b>40</b>, great grandparent <b>50</b>, or other devices. may be performed by one or more nodes <b>800</b>. In some embodiments, the control logic <b>822</b> of node <b>800</b> may be configured to allow the node <b>800</b> carry out such operations. In some embodiments, the control logic <b>822</b> may be configured to implement an operational platform similar to that described in U.S. Pat. No. 9,038,015, which is incorporated herein by reference in its entirety. Logic <b>822</b> may be configured to perform other functionality in other embodiments.</p><p id="p-0103" num="0102">In this regard, although particular examples of node functionality may be described with reference to node <b>800</b>, in some embodiments, node <b>800</b> (e.g., logic <b>822</b>) can be configured to perform essentially any of the functionality ascribed herein to one or more of the device <b>3</b>, child <b>2</b>, parent <b>30</b>, grandparent <b>40</b>, or great grandparent <b>50</b>. Similarly, in some embodiments, one or more of the device <b>3</b>, child <b>2</b>, parent <b>30</b>, grandparent <b>40</b>, or great grandparent <b>50</b> may be configured to perform some or all of the functionality ascribed to the node <b>800</b> (e.g., control logic <b>822</b>). In the context of this document, the terms &#x201c;logic,&#x201d; &#x201c;control logic,&#x201d; or &#x201c;node logic&#x201d; may refer to hardware logic, computer readable instructions running on a processor, or various combinations thereof. The logic <b>822</b> may be configured to implement desired functionality of a particular node or various combinations of such functionality and used to control operation of one or more nodes of the system <b>1</b>.</p><p id="p-0104" num="0103">The control logic <b>822</b> may include instructions for controlling various operations of the node <b>800</b>, such as internal communications, power management, processing of messages, systems monitoring, device interface and user interface control, operation of communication interface <b>808</b>, and the management of other sets of instructions. In one embodiment, the logic <b>822</b> may provide an operating system and applications necessary to perform various processing operations that are performed by the processing unit <b>802</b> and ascribed to the node <b>800</b>, logic <b>822</b>, or various combinations thereof.</p><p id="p-0105" num="0104">The logic <b>822</b> also may enable the node <b>800</b> to run developer applications (e.g., &#x201c;business logic&#x201d;) for carrying out various desired operations, including but not limited to the examples described herein. Such applications may be developed and operated via an operational platform of the system <b>1</b> or other similar location. Updates may periodically be provided to reachable nodes of the system <b>1</b> when available.</p><p id="p-0106" num="0105">The logic <b>822</b> may comprise one or more portions of node update logic received from time to time at the node, such as when a developer issues an update or when the system <b>1</b> synchronizes logic updates across nodes of the system <b>1</b>. In some embodiments, a user may modify a setting of the node (e.g., node logic <b>822</b>) via user interface <b>806</b> which may alter functionality of the device and node. In some embodiments, the logic <b>822</b> may be configured to receive and install the portions of the node update logic to update the logic <b>822</b>. In some embodiments, the logic <b>822</b> may receive node update logic (e.g., from a parent or child node), determine a first portion of the node update logic to install at the node <b>800</b>, and then install the first portion of the node update logic at the node. Additional portions of the node update logic may be installed subsequently, if desired. Further, control logic <b>822</b> may be configured to modify, remove or replace portions of logic updated by the one or more portions of node update logic.</p><p id="p-0107" num="0106">The logic <b>822</b> may be configured to take various actions to install node update logic received at the node <b>800</b>. The logic <b>822</b> may cause the node <b>800</b> to shut down, restart, run a power cycle, disconnect from communication with the system <b>1</b> or otherwise as part of installing one or more portions of node update logic. In addition, when a node <b>800</b> starts up initially (e.g., is powered on or booted as part of a restart) the logic <b>822</b> may be configured to receive desired application logic (e.g., from the cloud or otherwise where development and deployment is handled) as an initial part of the synchronization process described herein. One or more developers of the logic <b>822</b> for the node may decide whether to optimize synchronization, and may specify various information regarding one or more applications running on nodes of the system, such as: what business logic belongs in which nodes of the system <b>1</b>, what data and node update logic should be synchronized and what should not, and what synchronization should be optimized, and what should not. When ready, the application (e.g., portions of node update logic) may be distributed to the nodes via one or more deployments which may specify such information as which nodes should receive particular logic, what information is synchronized, what is not synchronized, what synchronization is optimized, and what synchronization is not optimized. Such information can be revised as desired by one or more users or developers in communication with the node. Once the logic <b>822</b> has installed a first portion of node update logic, additional portions of node update logic may be installed subsequently by repeating all or some of the same steps as described above for installing the first portion of node update logic.</p><p id="p-0108" num="0107">In some embodiments, the logic <b>822</b> can be configured to receive state data from a parent or child node of the node <b>800</b> and to generate one or more state updates based on the state data from application data <b>820</b>. The state updates generated by the control logic <b>822</b> can be stored in application data <b>820</b>. The logic <b>822</b> can generate subsequent state updates based on subsequently received state data and store such subsequent updates in memory in application data <b>820</b>.</p><p id="p-0109" num="0108">The logic <b>822</b> further can be configured to determine that at least one additional node that should receive the one or more state updates and identify the at least one additional node that should receive the one or more state updates based on the determination. The at least one additional node may include a parent node of the node <b>800</b>, a second child node of the node <b>800</b>, or other nodes of the system <b>1</b> (e.g., peer nodes, the cloud, etc.). In some embodiments, the logic <b>822</b> may be configured to identify the at least one additional node based on various information consistent with the synchronization techniques described herein. For example, the identification may be based on a determination that one or more additional nodes should have information included in the one or more state updates in order to facilitate desired operation of the one or more additional nodes and the system <b>1</b>. This may occur, for example, when the one or more state updates comprises information indicative of the current state of the node <b>800</b>, such as digital twin data. The logic <b>822</b> may determine that such information should be provided to the one or more additional nodes that need the current state of the node <b>800</b>, identify the nodes, and provide the state update to the one or more additional nodes.</p><p id="p-0110" num="0109">In other instances, such as when connectivity with one or more other nodes (e.g., a parent node or one or more children of the node <b>800</b>) has been lost, the logic <b>822</b> may determine that the one or more state updates should not be provided. Instead, the logic <b>822</b> may continue to receive state updates, store them, wait until a connection is reestablished and then select the appropriate one or more state updates to provide. In some embodiments, the appropriate state updates may be the latest state update generated or one or more state updates generated based on the latest state data received. In some embodiments, a determination of the appropriate state updates may be based on state data received at desired intervals or otherwise. In some embodiments, the one or more state updates may be generated based on one or more optimization rules, such as which state updates to select and provide (e.g., of node logic <b>822</b> or of portions of the node update logic). The rules may be based on the particular application desired for the device with which the node is associated (e.g., collecting and storing historical data if interest lies in events like temperature readings over time to determine average temperature, but discarding historical data if interest lies in events like temperature changes with respect to a threshold). Note also that such optimizations may be toggled on, off, or modified as desired. Unused or unsent state updates and state data may be stored in application data <b>820</b> if desired (e.g., as historical data), so that only the desired state data is provided from the node <b>800</b>. When one or more state updates are provided, such state updates may be propagated throughout the system <b>1</b>. The propagation may be performed by providing the one or more state updates to one or more parents and children of the node <b>800</b>, which may forward the updates on to one or more additional parents and children. The logic <b>822</b> may repeat the above process as desired based on additional state data received at the node <b>800</b> or application functionality in node logic <b>822</b>.</p><p id="p-0111" num="0110">In some embodiments, the logic <b>822</b> can be configured to receive one or more portions of node update logic from a parent or child node of the node <b>800</b> and to install the one or more of the portions of node update logic. As described above, the one or more portions of update logic received at node <b>800</b> may update logic <b>822</b>.</p><p id="p-0112" num="0111">In some embodiments, one or more portions of node update logic may be provided from node <b>800</b> to a parent of the node <b>800</b>, which may be propagated to other nodes of the system <b>1</b> and the cloud. This may occur for example, when a developer or user makes a change to a particular application that is specified to be synchronized to one or more nodes of the system <b>1</b>. An example of this functionality may be seen in the context of a code service, but other instances of generation and synchronization of application updates provided as portions of node update logic are possible in some embodiments.</p><p id="p-0113" num="0112">In some embodiments, a user may determine that one or more devices associated with the node are not functioning as desired and generate one or more portions of node update logic to update the logic <b>822</b> and provide the node update logic to the node <b>800</b>. Exemplary modifications may include adjustments to various functionality of devices that may be controlled by node <b>800</b>, such as reducing timer intervals for a timer that runs too often. A user (or algorithm) may modify a setting of the node via user interface <b>806</b> or developer may generate a portion of node update logic to reduce the interval at which the timer runs to the desired interval and may provide the update to the system <b>1</b>, which may propagate the portion of node update logic to the node <b>800</b>. Such modifications to the logic <b>822</b> may include practically any suitable modifications to logic <b>822</b> implemented at node <b>800</b> to achieve the desired functionality of the nodes and associated devices. Various other applications will be apparent to one of ordinary skill upon a reading of this disclosure.</p><p id="p-0114" num="0113">The logic <b>822</b> further can be configured to determine that at least one additional node that should receive the one or more portions of node update logic and identify the at least one additional node that should receive the one or more portions of node update logic. The at least one additional node may include a parent node of the node <b>800</b>, a second child node of the node <b>800</b>, or other nodes of the system <b>1</b> (e.g., peer nodes, the cloud, etc.). In some embodiments, the logic <b>822</b> may be configured to identify the at least one additional node based on various information consistent with the synchronization techniques described herein. For example, the identification may be based on a determination that one or more additional nodes should receive the one or more portions of node update logic in order to facilitate desired operation of the one or more additional nodes and the system <b>1</b>.</p><p id="p-0115" num="0114">In addition, portions of node update logic can be configured to modify or update logic <b>822</b> that informs the determination that particular update logic should be provided to one or more additional nodes of the system <b>1</b> as one or more state updates. For example, a node <b>800</b> that includes logic <b>822</b> configured to implement an application requiring information regarding the current state of node <b>800</b> (e.g., a security program) may be re-associated with a device that requires additional information besides just current state (e.g., a summary of temperature measurements over time). One or more node logic updates may be issued to the node <b>800</b> to update logic <b>822</b> so that it provides the appropriate information.</p><p id="p-0116" num="0115">In other instances, such as when connectivity with one or more other nodes (e.g., a parent node or one or more children of the node <b>800</b>) has been lost, the logic <b>822</b> may determine that the one or more portions of node update logic should not be provided. Instead, the logic <b>822</b> may wait until a connection is reestablished and then select the appropriate one or more portions of node update logic to provide, such as based on the most current information available. In some embodiments, the appropriate one or more portions of node update logic may be identified based on a latest update received for a particular portion of control logic <b>822</b>.</p><p id="p-0117" num="0116">In some embodiments, an identification of appropriate portions of node update logic to receive and install may be based on desired functionality of one or more devices associated with node <b>800</b>. In some embodiments, the one or more portions of node update logic may be generated based on one or more optimization rules (e.g., of node logic <b>822</b> or of the node update logic). Unused portions of node update logic may be stored in application data <b>820</b> if desired (e.g., as historical data) or discarded, so that only the desired node update logic portions are kept and installed. When one or more portions of node update logic are provided that should be propagated to other nodes, such updates may be propagated throughout the system <b>1</b>. The propagation may be performed by providing the one or more node update logic portions to parents and children of the node <b>800</b>, which may forward the portions of node update logic on to additional parents and children. The logic <b>822</b> may repeat the above process as desired based on additional node logic update portions received at the node <b>800</b> or desired functionality of node logic <b>822</b>.</p><p id="p-0118" num="0117">In some distributed networks, it may be difficult to maintain an accurate representation for interested stakeholders of a current state of an object associated with a node of the system. For example, whether a door is in an open or closed state might be interesting to a business security manager who is responsible for keeping the business secure. The door's current state may be interesting to a facilities manager, who may be interested in preventing a heating or cooling leak and associated energy loss. Law enforcement may be interested in preventing theft, and may want to know whether a door is left open. Other examples of stakeholders interested in a door's status are possible.</p><p id="p-0119" num="0118">In order to determine the current state of the door, some systems may require nodes to poll a node associated with the door for its current state. Some systems may require the node associated with the door to periodically broadcast the door's state to the system, which must transmit the state to a stakeholder via the system an synchronize the information to their appropriate location. This propagation may require substantial resources, and may lead to inefficiencies, redundancy, decreased communications speed, and increased error rates.</p><p id="p-0120" num="0119">In some embodiments, nodes of the system may be configured to implement the synchronization techniques described herein to reduce such problems by generating and maintaining one or more &#x201c;digital twins&#x201d; of one or more states of one or more devices associated with the node and propagating the twin across the system <b>1</b>. The term &#x201c;digital twin&#x201d; may refer to a digital representation mirroring one or more states (e.g., a data or logic state) of the one or physical objects and associated nodes. The generation of the digital representation may be based on information received at a node, such as from one or more of the device interface, user interface, information stored in application data, or otherwise, and may be stored in memory (e.g., as application data). Information in the digital twin may be synchronized across the system along with other information according to the techniques described herein. In this regard, the system may reduce traffic of the system and resolve the need for error-prone, redundant and inefficient polling by other nodes of the system.</p><p id="p-0121" num="0120">An exemplary implementation of the system <b>1</b> configured to perform such functionality is shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an exemplary node <b>800</b> configured to generate and maintain one or more digital twins of one or more states of the node or devices associated with the node (e.g., device interface <b>804</b>). In <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the node <b>800</b> is associated with a door <b>830</b>.</p><p id="p-0122" num="0121">In this regard, the logic <b>822</b> may be configured to generate one or more digital twins of the state data for the door <b>830</b>, which may have two total states: open and closed. The logic <b>822</b> may generate note the total number of states associated with the physical object for which the digital twin is being generated and may generate the digital twin having a corresponding number of states. The logic <b>822</b> may monitor whether the door is open or closed (e.g., via device interface <b>804</b>). The logic <b>822</b> may periodically note the current state of the door <b>830</b> (e.g., &#x201c;open&#x201d; or &#x201c;closed&#x201d;), and may update the information stored in the digital twin as needed (e.g., when the state of the door <b>830</b> changes). The logic <b>822</b> may be configured to distribute information related to a current state of the digital twin to other locations (e.g., nodes) of the system <b>1</b> so that the current state data for the door <b>830</b> may be available for use by one or more other nodes of the system <b>1</b>.</p><p id="p-0123" num="0122">The logic <b>822</b> similarly may be configured to generate one or more digital twins of components of logic of the node or devices associated with the node, such as logic <b>822</b>, firmware of the device or otherwise. The logic <b>822</b> may store information related to such logic and relevant to determining whether an update is required, such as version numbers, update times, etc. Digital twins may be generated to mirror other information in some embodiments.</p><p id="p-0124" num="0123">Note that similar techniques for asset synchronization may be performed across various IoT networks, including the networks described with regard to the illustrative example network shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts a deployed ecosystem of IoT devices for monitoring railroad crossings in accordance with some embodiments of the present disclosure. The system <b>1</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> includes two railroad crossing arms <b>898</b> and <b>899</b>. Two nodes <b>900</b> and <b>902</b> are shown, each associated with respective arms <b>898</b> and <b>899</b>. The nodes <b>900</b> and <b>902</b> are in communication with at least one communication site <b>930</b> in the region, which can be configured to communicate with the nodes <b>900</b> and <b>902</b> wirelessly or otherwise as described herein. An exemplary satellite <b>920</b> and communications station <b>922</b> are depicted in the embodiment of <figref idref="DRAWINGS">FIG. <b>10</b></figref> for receiving information from the tower <b>930</b> and relaying such information to other nodes of the network and the data center, but in some embodiments, information may be relayed back to data center and grandparent <b>940</b> via other communicative configurations and systems. The system <b>1</b> further may include great grandparent <b>950</b>, which may be the cloud or other platform. Any of the components of <figref idref="DRAWINGS">FIG. <b>10</b></figref> can be configured to operate similarly to those described with regard to various other embodiments described herein.</p><p id="p-0126" num="0125">Nodes <b>900</b> and <b>902</b> may include control logic (e.g., logic <b>822</b>, not specifically pictured in <figref idref="DRAWINGS">FIG. <b>10</b></figref>) which may be configured to raise and lower when a train comes. A developer of the application for controlling the railroad arms <b>898</b> and <b>899</b> may want to gather various information, such as metrics and other information regarding whether the arms <b>898</b> and <b>899</b> are functioning properly, whether the arms are up or down, whether there were any failures or malfunctions detected by the nodes <b>900</b> and <b>902</b>, whether the arms <b>898</b> and <b>899</b> were tampered with, remaining life of the components of the arms <b>898</b> and <b>899</b>, etc.</p><p id="p-0127" num="0126">In some embodiments, state changes for components of the railroad crossing arms <b>898</b> and <b>899</b> may be sent back to grandparent <b>940</b> and great grandparent <b>950</b> in order to permit users to monitor performance of the arms <b>898</b> and <b>899</b>. In an illustrative example, a user may determine that some aspect of performance or functionality of the arms <b>898</b> and <b>899</b> should change, such as based on information stating that, for example, one or both of arms <b>898</b> and <b>899</b> is lowering too frequently or other malfunction. The user may generate and provide one or more portions of node update logic to the nodes <b>900</b> and <b>902</b> as appropriate to adjust the functionality of the arms by reducing frequency at which the arm lowers or by tying lowering of the faulty arm to lowering of a properly functioning arm associated with the same intersection (which should lower at the same time as the affected arm).</p><p id="p-0128" num="0127">In some embodiments, communication site <b>930</b> may receive the one or more portions of node update logic and may determine that the node update logic should be provided to the node <b>900</b>, <b>902</b> of the affected arm <b>898</b> and <b>899</b>. If the communications site <b>930</b> is in communication with the appropriate node <b>900</b>, <b>902</b>, the site <b>930</b> may determine whether to provide the one or more portions of the node update logic, such as based on control logic of the site <b>930</b>, available state data from the respective node <b>900</b>, <b>902</b> or combinations thereof. Based on the determination, the site <b>930</b> may provide the one or more portions of the node update logic to the node <b>900</b>, <b>902</b> if the site <b>930</b> determines one or more portions of the node update logic should be provided. However, if the site <b>930</b> is not in communication with the appropriate node <b>900</b> or <b>902</b> or the site <b>930</b> determines that it should not provide the one or more portions of the node update logic, the site <b>930</b> may wait until a determination is made either that communication has been restored with the appropriate node <b>900</b>, <b>902</b> or that the one or more portions of the node update logic should be provided for other reasons.</p><p id="p-0129" num="0128">In some embodiments, once the nodes <b>900</b>, <b>902</b> have received and determined whether to update their control logic with the one or more portions of the node update logic, a notification may be provided to the developer (e.g., via site <b>930</b>, satellite <b>920</b>, and station <b>922</b> back to the data center and grandparent <b>940</b> or great grandparent <b>950</b>) that the one or more portions of the node update logic have been installed to update the logic of the affected node <b>900</b>, <b>902</b>.</p><p id="p-0130" num="0129">As an example of the operation of the instruction <b>984</b> and node <b>950</b>, with reference to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, a user <b>952</b> may be responsible for managing railroads in various regions. The user may be responsible for railroad which cross roads where crossing arms <b>898</b> and <b>899</b> are positioned.</p><p id="p-0131" num="0130">The user may access user interface <b>966</b> of node <b>950</b>, which may be running instructions <b>984</b> to implement a user-configurable IoT interface (e.g., interfaces <b>1200</b>, <b>1220</b>, <b>1230</b>, <b>1240</b> of <figref idref="DRAWINGS">FIGS. <b>14</b>-<b>16</b></figref>). The instructions <b>984</b> may generate a GUI via interface <b>966</b> that does not require the user to write any software code or perform any software modification, instead providing to the user easily usable graphical objects and business terms representing the various assets, areas, rules, events, actions, and reports which may occur within a particular context, here, a railroad.</p><p id="p-0132" num="0131">As an initial step, the user may note nodes for which data updates are available and may define one or more nodes as one or more asset types or schema defining the attributes, the controls associated with railroad arms <b>898</b>, <b>899</b>. The user may define a schema indicative of such assets by providing inputs via interface <b>966</b>, which may be interpreted by instructions <b>984</b> to build one or more asset schemas. The user may further note areas where such assets are located and build a schema to define one or more attributes and controls which may be associate with an area type (for example, a rail yard or factory). The user may define a schema indicative of such areas by providing inputs via interface <b>966</b>, which may be interpreted by instructions <b>984</b> to build one or more area schemas.</p><p id="p-0133" num="0132">The user may further note events, actions and reports which should be generated for where such assets are located and build a schema to define one or more attributes and controls which may be associate with a type of area. The user may define a schema indicative of such of the user's indicated events, actions and reports, by providing inputs via interface <b>966</b>, which may be interpreted by instructions <b>984</b> to build one or more area schemas. The user may similarly provide rule types, event types, action types, and report types to build respective schemas.</p><p id="p-0134" num="0133">Examples of some embodiments in which an asset synchronization functionality of system <b>1</b> may be possible are described below.</p><p id="p-0135" num="0134">In an example in the context of manufacturing environment and providing functionality to an edge via node update logic based on state updates, the system <b>1</b> may be implemented in a factory, wherein one or more child nodes may be associated with a factory machine or worker on the plant floor. The one or more child nodes may provide sensor data and error rates to a parent node (e.g., of a room or building housing the machines). The parent node may receive the sensor data and error rates from the child edge node, and synchronize such information back to the platform (e.g., great grandparent) where one or more algorithms (e.g., artificial intelligence, neural networks, machine learning, etc.) may be trained using the data. Such models may then be synchronized back down to the edges (e.g., as one or more portions of node update logic provided to the one or more child nodes associated with the factory machine). The edge may then &#x201c;test&#x201d; these models to predict failure of the machine. The edge also may monitor location and entry or exit of a secured area by the worker. These concepts can be applied using other information provided to generate one or more portions of node update logic which have different functionality.</p><p id="p-0136" num="0135">Another example is provided by some embodiments in which a drone or other unmanned vehicle is traveling around a city. In some embodiments, the vehicle may include a node configured to gathering video and audio data (e.g., state data). As the vehicle moves from street block to street block it may connect communicatively to a nearby edge node associated with a building. The node of the vehicle may send its data to the nearby building edge where the nearby edge may begin processing the vehicle data and building an overall context and understanding of the data (e.g., using algorithms, models, or other sequences implemented in its control logic). The nearby edge may then synchronize its current vehicle context of understanding to the platform. Subsequently, the vehicle may physically move into another area, where it may connect to another, closer edge. The platform may synchronize the context to the closer edge and the closer edge may continue processing data for the vehicle.</p><p id="p-0137" num="0136">An additional example illustration of the system's synchronization techniques and the control logic <b>822</b> may be explained with reference to a system configured similarly to the system <b>1</b> shown by <figref idref="DRAWINGS">FIG. <b>6</b></figref>, in which each of SmartRoom Edge <b>502</b> (child node), SmartBuilding Edge <b>530</b> (parent node) and SmartCity Edge <b>540</b> (grandparent node) and Cloud <b>550</b> (great grandparent node) may be configured to implement node functionality similar to that of the node <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The nodes of <figref idref="DRAWINGS">FIG. <b>6</b></figref> are depicted in the context of &#x201c;Smart&#x201d; building implementation, but it will be understood that the functionality described herein for synchronizing information across the nodes may be applied in various other situations in which the system <b>1</b> is implemented besides the specific embodiment of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0138" num="0137">Node <b>530</b> may be configured to receive first state data from child node <b>502</b> of the node <b>530</b> and generate a first state update based on the first state data. The node <b>530</b> may identify at least one additional node (e.g., at least a parent node <b>540</b> of the node or a second child node of the node <b>530</b>) that should receive the first state update. In some embodiments, the at least one additional node may be identified based a determination that the first state update should be provided, as described above. The node <b>530</b> may then provide the first state update to the at least one additional node that should receive the first state update.</p><p id="p-0139" num="0138">In some embodiments, the node <b>800</b> may further be configured to receive node update logic from a parent node of node <b>800</b>. The node update logic may be configured to update the node logic <b>822</b>, and the node <b>530</b> may update the node logic based on the node update logic. The node <b>530</b> may receive second state data from the child node and may generate a second state update based on the second state data. Thereafter, the node <b>530</b> may identify at least one additional node that should receive the second state update, such as based a determination that the second state update should be provided. The node <b>530</b> may provide the second state update to the at least one additional node that should receive the second state update.</p><p id="p-0140" num="0139">In some embodiments, the node <b>530</b> may be further configured to receive third state data from the child node and establish that the node <b>530</b> is unable to communicate with its parent node. The node <b>530</b> may receive fourth state data from the child node and may generate a third state update, and the third state update may be based on a determination either that only the fourth state data should be provided or that both the third state data and fourth state data should be provided. The node <b>530</b> also may be configured to establish that the node <b>530</b> is able to communicate with the parent node and providing the third state update.</p><p id="p-0141" num="0140">Further, in some embodiments, generating the third state update may be based on an optimization rule of the node update logic. In some embodiments, node update logic may be received based on at least the first state data. In some embodiments, updating the node logic comprises restarting the node.</p><p id="p-0142" num="0141">Frequently, a node of the continuum <b>1</b> may require information about data (e.g., a state) that requires communication with another node of the continuum <b>1</b>. In some cases, other node may be close to the requesting node, for example, when requesting node shares a parent node with the other node. In these instances, a time for the requesting node to receive the desired data may be relatively short, because responding to information requests only requires messaging with a mutual parent of the two nodes.</p><p id="p-0143" num="0142">In some instances, a node may seek information about a node that is distant in the hierarchy of the continuum <b>1</b> (see <figref idref="DRAWINGS">FIG. <b>2</b></figref>). In this instance, a node's request may need to be forwarded to a grandparent node, great grandparent node, the cloud, or even a more senior node, then passed down to a child node in order to retrieve the requested information. Multiple hops may be required in order to fulfill such a request, meaning that it may take longer before the requesting node receives the requested information. If the requested information is critical to desired operations of a system associated with the requesting node, operations at the system may be suspended, interrupted, or otherwise modified until the requested information arrives. This latency may significantly impair operations and decision making ability systems relying on information collected by the continuum.</p><p id="p-0144" num="0143">To overcome this problem, nodes of the continuum <b>1</b> may be configured monitor synchronization criteria or attributes associated with message data or state data and periodically update synchronization rules of one or more nodes of the continuum <b>1</b>. In this and other practical applications, as more fully described below, this technique improves functioning of the nodes of IoT hierarchy, their associated devices, and communication efficiency the continuum itself by recognizing that synchronization rules should be updated contextually to bring information closer to locations where it will be needed in the future.</p><p id="p-0145" num="0144">Updating a node's synchronization rule may be better understood with reference to exemplary node <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. One or more synchronization rules may be stored in memory <b>810</b> of a node, and may be included in control logic <b>822</b>. The rules may specify policies and criteria for synchronizing information at the node, such as one or more data sets, integrations, or other information. A synchronization rule update may include one or more changes to one or more aspects of the synchronization rule, associated synchronization behavior, synchronization criterium or otherwise.</p><p id="p-0146" num="0145">A synchronization rule also may specify certain synchronization behavior. &#x201c;Synchronization behavior&#x201d; may refer to various actions taken when encountering a type of information or information from a particular source. The synchronization behavior may be based on rules included in a synchronization rule of node logic. In some embodiments, requesting, subscribing, or scheduling communication of updates with other nodes are examples of synchronization behaviors that may be specified by a synchronization rule. A request model synchronization behavior may cause a node to wait until it needs information or to waits until it receives a request for information before requesting such information from another node. A subscription model synchronization behavior may cause the node to automatically forward an update to a subscriber node or receive an update from a provider node when available. A scheduling model synchronization behavior may request or receive updates with reference to a scheduling tool (e.g., requesting or providing updates based on information about a schedule, changes to the schedule, or otherwise), and may request and provide information where needed with the benefit of knowing how long the information will take to request, receive and provide for use in connection with a scheduled event. Other synchronization behaviors are possible in other embodiments.</p><p id="p-0147" num="0146">A node may monitor updates and requests for updates for synchronization criterium. Such synchronization criterium may be specified by synchronization rules regarding such criterium, and may be explicitly or implicitly associated with an update, and may be extracted or generated by the synchronization rule (e.g., logic <b>822</b>) and stored in memory <b>810</b> (e.g., as application data <b>820</b> or otherwise). Examples of such criterium may include: a number of previous requests for the same or similar information that have been received, either from a child node or parent node; scheduling information (e.g., dates, times, units, tasks, etc.). Additional examples of criteria that may be implicated by a synchronization rule and which may be noted by a node when deciding whether and how to update a synchronization rule may include a power usage of the node, a data storage capacity (memory), or messaging latency for one or more nodes of the continuum. For example, a rule may be updated to send fewer messages in order to match a reduced power availability at the node (e.g., low battery), to send/receive fewer messages when less memory is available, or to transmit more messages when latency is high (move data elsewhere). The rule may be updated in the future to resume all or some of the previous behaviors. The synchronization rule may specify that only messages having a certain priority should be sent while if messaging frequency should be reduced (e.g., only sending high priority). Other synchronization criteria may be possible in other embodiments.</p><p id="p-0148" num="0147">With further reference to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, in some embodiments, node logic <b>822</b> may be configured to generate a synchronization rule update which updates a synchronization rule at one or more nodes to change at least one synchronization behavior of the node. A subsequent update may further modify the at least one synchronization behavior of the one or more nodes (e.g., by reverting to a previous behavior or adopting a new behavior).</p><p id="p-0149" num="0148">As an example, a synchronization rule update may change a node's behavior from a request model to a subscribe model, for example, when the node determines (e.g., based on synchronization criterium) that it is frequently receiving requests for information which it must then request from one or more other nodes. The subscribe model may allow the node to receive the frequently used information whenever an update is available. A return to a request model may allow for other nodes to also return to a request model. As described above, this achieves a technical improvement of reduced communication latency in providing information to a requesting node.</p><p id="p-0150" num="0149">As a further example, a synchronization rule update may change a node's behavior from a request model or subscribe model to a scheduling model, for example, when the node determines that that it has information about future scheduled events (e.g., based on synchronization criterium indicating that such information). The scheduling model may allow node to request and receive information at various times implicated by one or more scheduling tools stored at nodes with which the node is in communication (e.g., trains and railroad crossing signals of <figref idref="DRAWINGS">FIG. <b>10</b></figref>). For example, the scheduling model may note a time when it should provide a request for information that it expects will be needed, having the benefit of knowing how long the information will take to request, receive and provide for use in connection with one or more scheduled events. This achieves a technical improvement in operation of the continuum by scheduling messaging for times when information is expected to be needed, allowing nodes to receive the most up-to-date information available about a current state of a particular node.</p><p id="p-0151" num="0150">The synchronization rule also update may be configured to request updating of one or more synchronization behaviors associated with a synchronization rule at a child or parent node (e.g., from a request model to a subscribe model). In this regard, when an update is available, thereby allowing contextual updates to propagate throughout the continuum when appropriate. This achieves a technical improvement of harmonization of synchronization rules among nodes of the continuum <b>1</b>, thereby positioning information at a node closer to one or more other nodes where the information may be needed in the future.</p><p id="p-0152" num="0151">A synchronization rule update further may be configured to subscribe a node to updates to information for which it frequently receives requests (e.g., from a child or parent node of the node) or to automatically forward such information (e.g., to its parent or to another child node). The synchronization rule also may improve communication efficiency by updating subscribed nodes only when a state update from available.</p><p id="p-0153" num="0152">As an example functionality for updating synchronization rules described herein, in some embodiments, a technique for optimizing one or more nodes' synchronization rules may be to subscribe to updates to information for which it frequently receives requests (e.g., from a child or parent node of the node) or to automatically forward such information (e.g., to its parent or to another child node) to subscriber nodes. Another technique may be for a node to forward a request to another node to change synchronization rules at the other node (e.g., from a request model to a subscribe model). A synchronization rule also may improve communication efficiency by updating subscribed nodes only when a state update is available from a parent or child node.</p><p id="p-0154" num="0153">Additional technical improvements achieved by the synchronization rule modification above may be apparent to one of ordinary skill in the art upon reading of the present disclosure.</p><p id="p-0155" num="0154">An example of the functionality included in instructions stored as node logic <b>822</b> for updating synchronization rules may be found in an IoT-enabled construction equipment performing repair work on an IoT-enabled interstate bridge, both of which may be part of continuum <b>1</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>). Particular quantities and examples of nodes and associated devices are discussed for illustrative purposes and it will be understood that various quantities, varieties and examples of nodes of the continuum <b>1</b> and associated devices may be possible in some embodiments.</p><p id="p-0156" num="0155">Elements of the bridge (e.g., piers, road surfaces, cables, supports, lights, etc.) may be associated with various devices (e.g., various sensors, proximity sensors, cameras, thermometers, voltmeters, anemometers, accelerometers, etc.) for gathering information (e.g., bridge strikes, counting passing vehicles, measuring pavement density, etc.). Each of the devices may be associated with a child node (<b>2</b>-<b>6</b>) and configured to communicate with an edge node <b>30</b> associated with the bridge and in communication with the child nodes <b>2</b>-<b>6</b>. The nodes <b>2</b>-<b>6</b> may have various information about their respective devices, conditions (e.g., environmental conditions) and the bridge. The nodes <b>2</b>-<b>6</b> may have information about a position, orientation, dimensions, movement, displacement, or other aspect of one or more element of the bridge.</p><p id="p-0157" num="0156">An edge <b>30</b> may be associated with the construction zone and may be operable to communicate with child nodes <b>8</b>-<b>12</b> associated with construction equipment (e.g., backhoes, bulldozers, cranes, lifts, construction vehicles, etc.). The nodes <b>8</b>-<b>12</b> may have various information about the equipment and one or more of its components (e.g., shovels, engines, motors, wheels, temperature gauges, fuel gauges, etc.) including operational status, position, orientation, dimensions, movement, displacement, or other aspect of one or more element of the equipment.</p><p id="p-0158" num="0157">In a situation in which workers perform construction on the bridge, construction zone edge <b>32</b> and its child nodes <b>8</b>-<b>12</b> may begin operating close to the bridge. In order for the construction zone edge and the edge associated with the bridge to communicate, they must transmit messages for one another through the cloud (grandparent <b>40</b>, <figref idref="DRAWINGS">FIG. <b>2</b></figref>) first.</p><p id="p-0159" num="0158">If a node <b>8</b> of the construction zone needs to know about the current load on the bridge in order prevent equipment from overloading or exceeding the bridge's weight capacity (e.g., is within a desired margin of safety), it must ask the edge <b>30</b> associated with the construction zone, which must then forward the request to the cloud, which must then forward the request to the bridge edge <b>30</b>, which may ask a child node <b>2</b> for current bridge load measurement. The child node <b>2</b> may return the requested information to the bridge edge <b>30</b>, which may forward it to the cloud <b>40</b> and then on to construction zone edge <b>32</b> and child <b>8</b>. This process inherently requires multiple hops and carries significant latency (e.g., approximately 5 seconds or more). In many contexts, this latency may mean the requesting node must wait important messages to arrive at the requesting node. In some circumstances, the node may need to notify a device or user to interrupt operation of associated devices while it waits, such as when a construction vehicle associated with the node <b>8</b> may overload the bridge if it enters.</p><p id="p-0160" num="0159">In some embodiments, the construction zone edge <b>32</b> may receive a subsequent request from the child <b>8</b> for a current bridge load measurement. The construction zone edge <b>32</b> may note at least one synchronization criterium associated with the message. The edge <b>32</b> may determine that a synchronization rule should be updated so that it receives all bridge load measurements. As an example the edge <b>32</b> may determine that it should update its rule because a synchronization rule at the edge <b>32</b> specifies a threshold for requests for bridge load information and the edge <b>32</b> determines that the number of requests that the edge <b>32</b> has received for load information has exceed a request threshold specified by the synchronization rule. In an embodiment, the edge <b>32</b> also may generate a synchronization rule update and forward it to its parent <b>40</b>, and to node <b>30</b> which is in communication with child node <b>2</b> where updates are generated. In some embodiments, the updates may specify that node <b>32</b> should receive all updates provided from child node <b>2</b> to node <b>30</b> by default (e.g., a subscribe model, as opposed to a request model). In this regard, the node <b>32</b> may receive updates received by node <b>30</b> from node <b>2</b>, and may keep such updates available for use by the node <b>8</b> as needed.</p><p id="p-0161" num="0160">As an additional note of the advantages of techniques performed by the node logic <b>822</b>, a messaging latency may be significantly reduced by making the above information available at node <b>32</b> whenever node <b>8</b> requests it. It has been observed that communications times for exchanging messages between nodes <b>8</b> and <b>32</b> may be on the order of approximately a millisecond in speed, yielding near real-time information for use by node <b>8</b> and operation of associated devices.</p><p id="p-0162" num="0161">This is a technical improvement over aspects of previous systems in that the node logic <b>822</b> may recognize that a distance between a node providing frequently used information and a node requesting that information may be reduced. The logic <b>822</b> may update synchronization rules in node logic at nodes <b>30</b>, <b>40</b>, and <b>32</b> (and any other intervening nodes through which a request must be forwarded, such as cloud or great-grandparent <b>50</b>) to specify that those nodes should subscribe to updates from node <b>2</b> so that a most recent available update from node <b>2</b> is automatically sent to node <b>32</b> via nodes <b>30</b> and <b>40</b>. In this regard, the most recent update received from the node <b>2</b> may be available at node <b>32</b> for transmission to node <b>8</b> when requested, and transmission time for node <b>8</b> to receive this information may be greatly reduced (e.g., approximately less than one second or even milliseconds as opposed to approximately 2-5 seconds otherwise).</p><p id="p-0163" num="0162">In absence of this recognition and synchronization update, node <b>8</b>'s request must travel much further in order to reach node <b>2</b>, leading to far greater messaging latency. Example communications times for exchanging messages between nodes <b>32</b> and <b>30</b> (requiring messaging through mutual parent <b>40</b>) may be approximately 2 to 5 seconds. In this regard, information regarding a state of devices associated with node <b>2</b> may be unavailable to node <b>8</b> for a period of seconds, during which operation of equipment associated with node <b>8</b> may be interrupted. Worse, damage may occur to the bridge or a device operating in connection with node <b>8</b> if it operates using inaccurate information which leads it to conclude that the current bridge load measurement would permit an additional vehicle (e.g., the vehicle associated with node <b>8</b>) to enter the bridge, when it actually would not. In this regard, the delay in receiving information could result in catastrophic damage. However, if node <b>8</b> is able to access data from node <b>32</b> in a matter of milliseconds, it may be prevented from entering the bridge and exceeding its load capacity in most situations where the information at node <b>32</b> reflects relatively recent bridge load information.</p><p id="p-0164" num="0163">Moreover, durability of systems operating in connection with nodes of the continuum <b>1</b> may be improved through use of the techniques described herein. For example, assume that a machine associated with node <b>2</b> encounters an operational issue (e.g., components fall out of balance, become damaged or inoperable, etc.), that will result in damage to the machine or other systems unless the machine stops immediately. In this example, node <b>8</b> is associated a power switch for cutting power to the machine associated with node <b>2</b> in case of anomalies. Initially, the node <b>8</b> is configured to periodically request updates regarding node <b>2</b>, for example once to twice per day. Node <b>2</b> may be configured to update its state at node <b>30</b> more frequently (e.g. once per 5 minute interval or other frequency) unless it encounters an emergency.</p><p id="p-0165" num="0164">If node <b>2</b> provides a state update to node <b>30</b> indicating that a problem has occurred and power should be switched off, or if node <b>2</b> loses communication with node <b>30</b>, it may be unable to communicate an update regarding its state to node <b>30</b> to let node <b>8</b> know that an emergency has happened and power should be switched off. In this regard, node logic <b>822</b> at node <b>30</b> may be configured to recognize that communication has been lost with node <b>2</b> and to updating synchronization rule of nodes <b>30</b> and <b>40</b> and parent <b>32</b> to specify that the rule should change to subscribe model synchronization behavior from a request model synchronization behavior. In this regard, node <b>30</b> may specify that it should provide a last known state of node <b>2</b> to node <b>8</b>, taken approximately minutes ago may be provided to nodes <b>30</b>, <b>40</b> and to node <b>32</b>, and ultimately available to node <b>8</b> when it otherwise would not be (e.g., in the event of loss of communication between nodes <b>2</b> and <b>30</b>). Other events may trigger synchronization rule updates at various nodes in other embodiments.</p><p id="p-0166" num="0165">In another example, a node (e.g., node <b>2</b>) may be associated with a brake and one or more bearings of a railcar. An update from the node <b>2</b> may indicate that one or more bearings on a brake have or will soon fail (which can occur in under 3 seconds), and node <b>8</b> associated with a throttle or other device that can take action to address the failure or imminent failure of the bearings (such as slowing the train or switching to another brake system). The node <b>2</b> may provide this information to its parent node <b>30</b>. The parent node <b>30</b> may determine that its synchronization rule should be updated to subscribe to updates from the node <b>2</b>, and may send, to one or more other nodes (e.g., nodes <b>30</b>, <b>40</b>, and <b>32</b>), the state update from node <b>2</b> and a request to update synchronization rules of the nodes to subscribe to updates from node <b>2</b>. The information may be stored and available at node <b>32</b> when needed by node <b>8</b>. A node <b>2</b> can be associated with components of systems that may fail without much warning, such as bearings in machinery (e.g., wobbling in rotary blade fan bearings, etc.)</p><p id="p-0167" num="0166">Similar examples of applications in which updating synchronization rules may preserve communication durability and protect system functionality may include operation of security systems, such as security doors cameras, physical devices, locks, alarms or other security devices.</p><p id="p-0168" num="0167">Further example functionality of the node logic when updating one or more synchronization rules is described below with regard to <figref idref="DRAWINGS">FIG. <b>11</b></figref>. As shown by the process in <figref idref="DRAWINGS">FIG. <b>11</b></figref> and explained in greater detail below, in some embodiments, synchronization rules of one or more nodes of the continuum <b>1</b> may be updated to specify a location in the continuum <b>1</b> closer to a node where the information is frequently needed so that it is available more quickly.</p><p id="p-0169" num="0168"><figref idref="DRAWINGS">FIG. <b>11</b></figref> depicts a flowchart depicting an exemplary method <b>1000</b> for updating synchronization rule at a node of a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure.</p><p id="p-0170" num="0169">The process begins at step <b>1002</b>, where a first node <b>32</b> receives a request for either a first data set, or first integration, from a second node <b>8</b>. Implementation at the node <b>8</b> of a first application programming interface (&#x201c;API&#x201d;) may be based on either the first dataset or the first integration. In some embodiments, answering the request may require forwarding the request to a third node <b>2</b>.</p><p id="p-0171" num="0170">After the request is received at step <b>1002</b>, processing continues to step <b>1004</b>, where the first node <b>32</b> may determine that a synchronization rule should be updated based on the request and at least one synchronization criterium. The synchronization criteria may be indicated by the request, and may indicate that a synchronization rule should be updated. In one example, a synchronization criterium may be a request threshold, which, if exceeded based upon a comparison of a number of received messages with the threshold, may indicate that a synchronization rule should be updated to change from a request model to subscribe model. Other criteria can be noted and other synchronization rule updates are possible. Once the at least one synchronization criterium has been noted, processing may proceed to step <b>1006</b>.</p><p id="p-0172" num="0171">At step <b>1006</b>, the node may determine, based on the at least one synchronization criterium, whether to update one or more synchronization rules. The at least one synchronization criterium may be a number of previous requests for the same or similar information that have been received, either from a child node or parent node; scheduling information (e.g., dates, times, units, tasks, etc.), a desired power usage level, desired storage capacity, or desired messaging latency. As noted above at step <b>1004</b>, the criteria may trigger an update to the synchronization rules of one or more nodes as described above. The update may be for updating the synchronization rules at the node <b>32</b>, or for updating synchronization rules of other nodes (e.g., grandparent <b>40</b>, parent <b>30</b>, etc.). If a synchronization rule should not be updated, processing may return to step <b>1002</b>, where an additional information request may be received and processing may resume. If a synchronization rule should be updated, processing may proceed to step <b>1008</b>.</p><p id="p-0173" num="0172">At step <b>1008</b>, a synchronization rule update may be generated at the node <b>32</b>. The synchronization rule update may comprise a change to at least one synchronization behavior of at least one node of the IoT hierarchy. As an example, the synchronization rule update may specify that a synchronization rule of a node operating as a request model should switch to a subscribe model. Once the update has been generated, processing may proceed to step <b>1010</b>, where the node may determine whether to forward to at least one other nodes. This may be based on a determination that synchronization rules of at least one other node should be updated, either instead of or in addition to a synchronization rule of the node <b>32</b>.</p><p id="p-0174" num="0173">If the node determines not to forward the update, processing may proceed to step <b>1014</b>. If the node should forward the synchronization rule update to at least one other nodes, the node <b>32</b> may provide the synchronization rule to the at least one other nodes at step <b>1012</b>. Thereafter processing may proceed to step <b>1014</b>, where the respective synchronization rules of the at least one other nodes may be updated based on the synchronization rule update. Thereafter processing may end.</p><p id="p-0175" num="0174">In operation of the continuum <b>1</b>, nodes may be configured to communicate using various communication networks. A node may be associated with these communications networks via connectivity through its communication interface <b>808</b>. Each node of the continuum <b>1</b> may be configured to communicate with other nodes of the continuum <b>1</b> or even other devices via connections to one or more of these communication networks.</p><p id="p-0176" num="0175">Each of the different networks available to a node may have different attributes. An associated cost to transport data over network may differ from network to network. For example, it may be much cheaper to transport data over a Long Range (LoRa) based network than it would be to transport the same data over a cellular LTE network or satellite network. Limitations on quantities of data (e.g., bandwidth) that can be transported on such networks, as well as availability and coverage areas associated with these networks also varies. In remote areas, such as rural areas, networks operating according to RF protocols (e.g., UHF) may be the only networks available. In even more remote areas like polar regions, the only networks available may be satellite based. However, in many areas, a node may have connections to more than one network for transporting its data.</p><p id="p-0177" num="0176">In some embodiments, a node <b>800</b> may select a network based on message priority and network availability. As an example, a node may need to send or receive a high priority message. The node may determine that it is desirable to use a network that has better performance characteristics than the node's default or primary communication network for transporting the high priority message. For example, the network may have high messaging latency (e.g., slow transportation of data), or may have insufficient data quality (e.g., resulting from packet loss or interrupted connectivity). The node may determine that a communication is available over an additional network connection. If the network has sufficient characteristics (e.g., data transportation speed and quality), the node may select that network connection to transport its important, high priority message. Otherwise, the node may determine whether other additional network connections provide access to a network with sufficient characteristics. If the node identifies such a network, it may select the network for communication of its high priority message. If not, it may select a next most suitable network based on similar information. The node may continue to attempt to identify a network with better performance than its primary/default network until it has compared all available networks. In some cases, the node may ultimately select the node's default or primary communication network because no better alternatives exist (e.g., in a rural area or very remote area where only one communication network option exists). In this case, or others, the node may determine that it should adjust its policies for providing data (e.g., in node logic <b>822</b>) to modify (e.g., increase or decrease) an amount of data that can be sent by the node over the network in order to improve communication efficiency with the node over the network.</p><p id="p-0178" num="0177">For messages having a normal priority, a node may determine a message's priority and the available networks, and may determine characteristics associated with the available networks. The node may rank the available networks by one or more desired characteristics, such as cost, network speed, bandwidth, data quality, and reliability, and may select a network having a lowest cost and acceptable data transportation performance (e.g., speed). In this regard, if two networks offer essentially the same data transportation performance (e.g., speed, bandwidth, etc.), but data may be sent over one network for free (e.g., WiFi) but not the other (e.g., cellular/LTE/satellite), the node may be configured to select the free network and send the message via the free network.</p><p id="p-0179" num="0178">These techniques achieve various technical improvements over existing systems. For example, data transportation costs and efficiency across an IoT network are improved because network traffic is transported over a least expensive acceptably-performing communication network unless the messaging has a priority level that justifies sending it over a more costly communication network. This allows high priority and non-high priority messages to be provided efficiently.</p><p id="p-0180" num="0179">Costs are also improved because nodes can detect connections to a cheaper network and use the cheaper network to transport their messages while available. This may occur in a practical application when a node travels into and out of range of a network that is less expensive with acceptable performance when compared with a network over which it is otherwise communicating messages. A practical example of this is when a boat travels from a port, where it is within range of land-based WiFi network, to a position that is out of range of the WiFi network but within range of cellular networks and satellite network (a few miles off the coast). One or more nodes on the ship may detect the cellular network and switch to communication over it because, for normal messaging, communication over the cellular connection is cheaper than satellite communication, although both may be available have suitable message transportation quality. When the ship moves out to sea and out of range of the cellular network, into an area where only satellite communication is available comes, the one or more nodes may detect that satellite communication is the only available communications network and use it for transporting messages. The nodes may note a cost associated with use of the satellite network and adjust their behavior so that only high priority messages are sent over the satellite network.</p><p id="p-0181" num="0180">Again, the behavior and functionality ascribed to the one or more nodes herein may be implemented by logic stored at the one or more nodes as node logic <b>822</b>. The node logic <b>822</b> can implement these behaviors and functionalities as rules for dynamically selecting a communications network/protocol, and can update such rules based on contextual information about available networks and their attributes (e.g., cost, speed, bandwidth, reliability, etc.).</p><p id="p-0182" num="0181"><figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts a flowchart depicting an exemplary method <b>1100</b> for selecting a communication protocol at a node of a deployed ecosystem of IoT devices in accordance with some embodiments of the present disclosure. The steps of <figref idref="DRAWINGS">FIG. <b>12</b></figref> and functionality ascribed herein to one or more nodes (e.g., exemplary node of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.) with regard to selection of a communication network and protocol may be performed by one or more nodes <b>800</b> executing node logic <b>822</b>. Data referenced with regard to node operations described with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref> may be stored in memory <b>810</b> of one or more nodes (e.g., exemplary node of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). Yet other components and devices may be implemented in order to achieve the functionalities ascribed herein.</p><p id="p-0183" num="0182">The process begins at step <b>1102</b>, where a first node <b>32</b> may generate a message. The message may comprise state data, a request for a first data set, or a request for a first integration for transmission to one or more nodes of the continuum (e.g., grandparent <b>40</b>). The message can include various information described herein about a state of one or more associated systems, as well as information or integrations needed in order to implement an API at one or more nodes. In some embodiments the message may be a forwarding of a message from a child or parent node, and can include various processing steps to generate the message (e.g., consultation of a lookup table for comparison with destination information of a forwarded message, evaluation of a messaging type such as unicast, multicast or broadcast messaging, modification of one or more data packets comprising the message, etc.). Once the message has been generated processing may proceed to step <b>1004</b>.</p><p id="p-0184" num="0183">At step <b>1104</b>, the node may identify one or more communication networks that are available at the node. The node may be in communication with various numbers and types of available networks as described herein. The available communication networks the node may identify can include a first available communication network and a second available communication network, although other numbers of networks may be available to the node in some embodiments. In some embodiments, available networks, including the first and second available communications networks, may be identified based on one or more signals provided to ports of the communication interface <b>808</b> of the node. Each of the ports of the communication interface may be associated with a type of communication network. In some embodiments, the node may identify one or more additional available communications networks, and may continue to do so until all available communications networks at the node have been identified. The node may note available networks and associated information and store this information in memory <b>810</b> for use in selecting a network for communication.</p><p id="p-0185" num="0184">To establish which networks are available, the node <b>800</b> may provide one or more signals to (e.g., &#x201c;ping&#x201d; or other similar signal or message that may be used to confirm availability of a network by communicating with it) the one or more ports of the interface <b>808</b>. The node may receive a response at at least one port of the interface <b>808</b>, based on the one or more signals, such as a response from the network confirming that the network is available for communicating (e.g., transmitting and receiving of) the message. Based on the response to the one or more signals, the node <b>800</b> may determine an availability status associated with the type of communication network associated with the respective one or more ports. That is, if the node <b>800</b> receives a response to the one or more signals at a port of the communications interface <b>808</b>, the node <b>800</b> may determine that the respective network associated with the port is available. Otherwise, the node <b>800</b> may determine that the network associated with the port is not available. The node <b>800</b> may base its determination on other information in some embodiments, such as after waiting for expiration of a period of time to receive a response to the signal, after a number of attempts to communicate with the network exceeds a threshold based on a predetermined number of attempts for the type of network, or otherwise. In some embodiments, the node may be able to determine which networks are available by noting an availability status flag (e.g., a bit or other indicator) associated with a port, and in some embodiments, may determine available networks based on information received at the node about the network (e.g., that the network has an internal keep-alive feature, that there is a window for opening a network link to communicate data and messages, etc.).</p><p id="p-0186" num="0185">At step <b>1106</b>, the node may identify at least one message characteristic of the message that should be transmitted. Message characteristics can be stored in memory <b>810</b> of the node and may describe various information about the message, including one or more of a message content (e.g., file types included), message type (e.g., messaging protocol, SMS/MMS, whether the message is unicast, multicast, broadcast, etc.), and message size (e.g., an approximate total size in bytes or otherwise). Other messaging aspects that may be stored as a message characteristic include information about routing of the message (ports, destination nodes, paths, etc.), a time to live value, or other messaging characteristics.</p><p id="p-0187" num="0186">Once the at least one messaging characteristic has been identified, processing may proceed to step <b>1108</b>, where the node may identify a cost to communicate the message via each of the available communication networks. A cost to communicate the message via the selected network may comprise a determination of cost for sending the message based on the message size and cost per byte for communicating over the network. Cost also may be determined by noting a latency in transmitting and receiving the message (e.g., delay from when the message is transmitted until it is received) using the network. Cost may be a limitation on a rate of data transfer, such as determined by comparing a bandwidth limit of the network (e.g., available bandwidth) with a bandwidth requirement of the message (e.g., size). Cost also may be determined as a function of a loss of data during transfer, such as packet loss or reduced signal quality. Cost may be associated with network reliability, such as when a network is intermittently unavailable. In some embodiments, cost may be determined based on other aspects associated with communication of the message for a given network.</p><p id="p-0188" num="0187">For example, a cellular or LTE network may have a lower latency and higher data transfer rate and lower packet loss when communicating a message than if the message is communicated via LPWAN, but may have a higher cost. Similarly, communicating a message via satellite may have better quality, availability and reliability than a cellular network, but may be more expensive than cellular. A fiber connection may have a better data transportation reliability and quality and lower cost than wireless alternatives, but availability may be far lower in most geographies.</p><p id="p-0189" num="0188">In the embodiment of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the node <b>800</b> may determine one or more costs associated with communication of the message via the first and second available communication networks and may compare them as noted below at step <b>1112</b>.</p><p id="p-0190" num="0189">After one or more costs to communicate the message via each of the available networks has been identified, at step <b>1110</b>, a priority associated with the message may be identified at the node <b>800</b>. The message may have various indicators of priority (e.g., high, medium, low), which may specify a communication priority rule or behavior stored in node logic <b>822</b>. Of course, other priority descriptors and behaviors will be possible in some embodiments, and the priorities described herein are exemplary and illustrate only some of the multitude of combinations and choices for assigning a message a priority value and implementing priority rules associated with priority value levels.</p><p id="p-0191" num="0190">For the sake of brevity and to illustrate a few limited examples of such communication priority rules or behavior, a high priority may specify that a message should be sent as soon as possible using the most reliable and highest quality communication network available, without regard to cost to communicate the message. A medium or elevated priority may specify that the message should be sent as soon as possible, but not before other messages of the same or lower priority, and with limitations on one or more associated cost (e.g., communication should be performed using an available network with a sufficient reliability that is below a cost threshold). A low or normal priority message may be sent after other higher priority messages and in turn with other low-priority messages, and using a default communication network (which also may be the cheapest and most commonly used network, even if networks with better transmission quality and better reliability are available).</p><p id="p-0192" num="0191">Once a priority associated with the message has been identified, at step <b>1112</b>, the node <b>800</b> may compare one or more costs to communicate the message via each of the available networks in order to select a desired network at step <b>1114</b>. In the embodiment of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the node is comparing one or more costs associated with each of the first and second communications networks, but in many instances, there may be more than two available networks, and in some embodiments, the node logic <b>822</b> may be configured to compare some or all available communications networks. In some embodiments, the node <b>800</b> may compare the one or more costs of sending the message via the first communication network with the one or more costs to communicate the message via the second communication network to select between them. The comparison may be performed piecemeal, or may be carried out by assigning a score to a network, e.g., by noting the network characteristics and costs described above and assigning a predetermined value to one or more such characteristics and costs. The node may note and compare scores across characteristics and costs of the networks, and may use the scores to arrive at a total score for each network. Such scores may be indicative of suitability for communicating the message (e.g., based on priority, message characteristics, or otherwise), and may be used to determine a ranking that may be used to select a communication network at step <b>1114</b>. In some embodiments, the comparing step <b>1112</b> may comprise comparing a communication quality of the first communication network with a communication quality of the second communication network, as well as a cost to communicate the message via the second network is higher than the cost to communicate the message via the first network.</p><p id="p-0193" num="0192">The node may select one or more communication networks at step <b>1114</b>. The one or more communication networks can include a network with a highest score or ranking or may be selected based on other aspects of the network, message priority, or other factors about the available networks compared by the node. More than one network may be selected in some embodiments, using similar techniques. In the embodiment of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the node may select either the first communication network or second communication network based on the message priority and comparison at step <b>1112</b>. For further clarification of the embodiment of <figref idref="DRAWINGS">FIG. <b>12</b></figref>, a communication quality associated with communicating the message via the second network may exceed a communication quality associated with communication via the first network. In this regard, the node may select the second network is based on at least the communication quality and the priority (e.g., high or medium priority). However, in some embodiments a communication quality associated with communicating the message via the second network exceeds the communication quality associated with communication via the first network, but the first network is selected based on a higher communication cost associated with the second network and message priority (e.g., medium or low priority).</p><p id="p-0194" num="0193">Once a communications network has been selected at step <b>1114</b>, processing may proceed to step <b>1116</b>, where the message may be communicated via the communication interface <b>808</b> of the node <b>800</b> the selected communication network. In some embodiments, the message may be communicated by more than one network if more than one network has been selected for communication of the message. Thereafter, processing may end.</p><p id="p-0195" num="0194">Nodes may have various APIs stored in node logic and available for use in response to queries from other nodes. In some instances, code or logic may be required in order to implement such APIs. As noted herein, nodes of the continuum <b>1</b> may communicate various data, including data sets and integrations for use in implementing various APIs at nodes of the continuum.</p><p id="p-0196" num="0195">In some embodiments, in some embodiments, an integration required for implementation of an API may comprise logical processing according to one or more artificial intelligence (A/I) algorithms. Example A/I algorithms may include, among others, machine learning; neural network; supervised learning, unsupervised learning, Na&#xef;ve Bayes; decision tree; Random Forest; linear regression; logistic regression; support vector machines; K nearest neighbors (KNN); and K-Means clustering, although other A/I algorithms are possible in some embodiments.</p><p id="p-0197" num="0196">In some embodiments, a node <b>800</b> may be configured to execute or implement an API that, when called, may apply logic comprising one or more artificial intelligence algorithms. Each of the API and integration in the form of the logic comprising one or more artificial intelligence algorithms may be stored in memory <b>810</b> of a node <b>800</b> as node logic <b>822</b> (<figref idref="DRAWINGS">FIG. <b>8</b></figref>), and associated data may be stored as application data <b>820</b>. The node <b>800</b> may be various positions in the hierarchy of the continuum <b>1</b> (<figref idref="DRAWINGS">FIG. <b>2</b></figref>) (e.g., child node, parent node, grandparent node, great-grandparent node or cloud). Again, the various functionality ascribed to nodes herein may be stored as instructions in memory <b>810</b> and may be implemented by a node <b>800</b> executing node logic <b>822</b>.</p><p id="p-0198" num="0197">Technical improvements of using an A/I algorithm to implement APIs at the edge instead of at the cloud include increased efficiency in communication, reduction in need to request information, reduction in network traffic and more informed functioning of a network of nodes of an IoT hierarchy, as well as their associated devices may be achieved through the techniques described herein. For example, by placing an artificial intelligence algorithm at a parent node <b>32</b> positioned in the hierarchy as an edge node, the artificial intelligence integration may be applied whenever the node <b>32</b> calls an API. The node <b>32</b> may frequently receive state updates and other information from its child nodes <b>8</b>-<b>12</b>. The node <b>32</b> may store such information in memory (e.g., memory <b>810</b>), and may then use this data to train the A/I algorithm periodically, such as when new data arrives via an update to a state of a child node or one or more of its associated devices. In this regard, the node <b>32</b> may be able to collect and store data from, its parent nodes, or other nodes for use in training the A/I algorithm. In this way, use of an A/I algorithm as an integration at edge <b>32</b> may improve decision making at nodes operating under node logic <b>822</b>, and may allow for more informed contextualized operation of systems associated with the continuum <b>1</b>.</p><p id="p-0199" num="0198">As an example of an operation and practical application of the use of an A/I algorithm to implement one or more APIs at a node, in an embodiment, a child node <b>8</b> of a continuum may be associated with a truck (e.g., truck <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>) carrying a load of corn (e.g., package <b>300</b>). The child node <b>8</b> may periodically provide information including state updates from its various sensors to the parent edge node <b>32</b>, such as by executing synchronization rules stored in its node logic. The parent node <b>32</b> may store this information and information from other child nodes <b>8</b>-<b>12</b> for use in training one or more A/I algorithms needed to implement an API at the node.</p><p id="p-0200" num="0199">If a parent edge node <b>32</b> (or user of a device associated with node <b>32</b>) wishes to know when the truck will arrive, API &#x201c;GET ARRIVE&#x201d; may be called to implement an API to determine an estimated arrival for the truck <b>302</b>. The A/I algorithm implemented by the API may be trained (e.g., by executing node logic) using previous data provided by the node <b>8</b> and other child nodes to the parent <b>32</b>. In this regard, the API may be operable to factor in various information that may affect a predicted arrival time, such as an expected speed for a particular driver who is driving the truck <b>302</b>, an expected number of stops, an expected duration for such stops, an expected route, as well as adjustments to arrival time based on these factors. Data about past instances of each category may be provided to the node <b>32</b> by node <b>8</b> and may be stored in memory at node <b>32</b>. Other information may be considered by an API implementing the &#x201c;GET ARRIVE&#x201d; API at the node <b>32</b>, and other APIs may be available for implementation at the node. In some embodiments, a result returned by the API may comprise a conclusion (e.g., arrival time will be 4:30 pm) and a probabilistic confidence (e.g., confidence level is 92%) associated with the result.</p><p id="p-0201" num="0200">In some embodiments, the node <b>32</b> may determine that the integration should be shared with one or more nodes of the continuum (e.g., nodes <b>40</b>, <b>30</b>) that also implement one or more of the same or similar APIs as node <b>32</b>.</p><p id="p-0202" num="0201">As an exemplary method for generating a data set from a trained integration at a node of a deployed ecosystem of IoT devices, a first node <b>32</b> may receive a first data set from a second node <b>8</b>. The first node <b>32</b> may train an integration, which may be an A/I algorithm, at the first node. The integration may be implemented by an API using the first data set. In some embodiments, the integration may comprise an artificial intelligence logic. Various nodes of the continuum <b>1</b> may have the integration or a similar integration if associated with the same or similar API stored at the first node <b>32</b>. In some embodiments, at least the first node <b>32</b> and third node <b>40</b> have the integration. The first node <b>32</b> may generate a second data set based on the trained integration. This second data set may be generated by applying the API to implement the trained integration. Subsequently, the node <b>32</b> may determine, that the second data set or trained integration should be provided to the third node <b>40</b>, such as when a request is received for the second data set or trained integration or when the node <b>32</b> determines that the third node <b>40</b> comprises the same or similar API implementing the same or similar integration. If the node <b>32</b> determines that the second data set or trained integration should be provided to the third node <b>40</b> or another node, it may provide the second data set or trained integration to the relevant nodes.</p><p id="p-0203" num="0202">It will be understood that other applications of the techniques described herein using IoT architecture may be possible in other embodiments. In this regard, the logic <b>822</b> may be configured perform synchronization and update synchronization rules using one or more or various combinations of the techniques described herein.</p><p id="p-0204" num="0203"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram depicting a node of a deployed ecosystem of IoT devices having instructions for providing a user-configurable interface in accordance with some embodiments of the present disclosure.</p><p id="p-0205" num="0204">In some embodiments, node <b>950</b> may comprise interface instructions for implementing a user-configurable interface for providing information from nodes of the system to a user <b>952</b> based on user-assigned and user-defined assets and areas. With brief reference to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, in some embodiments, node <b>950</b> may comprise interface instructions <b>984</b> stored in memory <b>970</b>. In some embodiments, the interface instructions <b>984</b> may be stored as control logic <b>982</b>, although in some embodiments, the interface instructions may be stored as a separate application or set of instructions.</p><p id="p-0206" num="0205">The node <b>950</b> has a processing unit <b>962</b>, device interface <b>964</b>, user interface <b>966</b>, communication interface <b>968</b>, memory <b>970</b>, and power supply <b>972</b>. Control logic <b>982</b> and application data <b>980</b> may be stored in memory <b>970</b>. Node <b>950</b> may be similar or identical to exemplary node <b>800</b>. In some embodiments, each of the foregoing components and instructions may be the same as or similar to corresponding components and instructions of exemplary node <b>800</b>, shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> and described above.</p><p id="p-0207" num="0206">In some embodiments, some or all nodes of system <b>1</b> may comprise interface application instructions the same as or similar to instructions <b>984</b>.</p><p id="p-0208" num="0207">In some embodiments, application data <b>980</b> may comprise data about assets of system <b>1</b>. An &#x201c;asset&#x201d; of the system <b>1</b> may be defined in various ways (e.g., via an asset schema, built by a user <b>952</b>), but in some embodiments an asset may comprise one or more hardware components and one or more associated nodes of the system <b>1</b>. A user may build an asset schema by grouping one or more nodes (e.g., via interface instructions, described below) and such group defined as an &#x201c;asset.&#x201d; One or more identifiers of such nodes and of assets including such nodes may be stored in application data <b>980</b>. Such identifiers of assets can include user-provided or pre-loaded asset names and terms, as well as other information about such assets.</p><p id="p-0209" num="0208">In some embodiments, application data <b>980</b> may have additional information about assets, such as asset location, asset status, asset identifiers (e.g., serial number, type, etc.), machine or human-readable identifiers associated with one or more nodes of an asset and associated hardware, or other information. Application data <b>980</b> may also have information about an asset's history (historical data for an asset, for various past timeframes).</p><p id="p-0210" num="0209">In some embodiments, application data <b>980</b> may comprise data about one or more assets within system <b>1</b>. One or more nodes may be grouped by a user (e.g., via interface instructions) and such group defined as an &#x201c;asset&#x201d; according to an &#x201c;asset schema&#x201d; describing rules for the asset. The asset schema may be defined based on input provided by a user, and may include various suitable types of information about the asset (see descriptions of aspects of assets such as railroad crossing arms, vehicles, and other objects described herein). One or more identifiers of such nodes and of assets including such nodes may be stored in application data <b>980</b>. Such identifiers of assets can include user-provided or pre-loaded asset names and terms as well as user-specified rules for asset schema. An asset schema may comprise other criteria in other embodiments.</p><p id="p-0211" num="0210">Assets may be provisioned manually (e.g., by a user providing asset and associated node and component information, such as scanning a machine readable code, entering a numeric identifier for the asset and associated nodes and components, etc.) or automatically, in some embodiments.</p><p id="p-0212" num="0211">The application data <b>980</b> can comprise state data for nodes of an asset of the system.</p><p id="p-0213" num="0212">In some embodiments, application data <b>980</b> may comprise data about one or more areas within system <b>1</b>. One or more nodes may be grouped by a user (e.g., via interface instructions) and such group defined as an &#x201c;area&#x201d; according to an &#x201c;area schema&#x201d; describing rules for the area. In some embodiments, the area schema may be defined by a geographic or other scope. The asset schema may be defined based on input provided by a user. An area schema may specify attributes of an area type, and may be specified by a user, a third party (producer), or otherwise (see description herein of aspects of areas). One or more identifiers of such assets and areas including such nodes may be stored in application data <b>980</b>. Such identifiers of areas can include user-provided or pre-loaded are names and terms, as well as user-specified rules for area schema. An area schema may comprise other criteria in other embodiments.</p><p id="p-0214" num="0213">In some embodiments, application data <b>980</b> may comprise information including information related to at least the following:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0214">&#x201c;AssetType,&#x201d; which may be defined as a schema defining the attributes, the controls associated with a type of asset (for example, a water main or tractor);</li>        <li id="ul0002-0002" num="0215">&#x201c;AreaType&#x201d; which may be defined as a schema define the attributes and controls associate with a type of area (for example, a rail yard or factory);</li>        <li id="ul0002-0003" num="0216">&#x201c;RuleType&#x201d; which may be defined as a schema defining the business language of rules to be created by end users (for example, arrivalCheck or buildingTemperatureCheck).</li>        <li id="ul0002-0004" num="0217">&#x201c;EventType&#x201d; which may be defined as a schema defining the type record for when a rule is satisfied&#x2014;data for asset type and the lifecycle associated with the event being opened and closed (for example, delayed shipment, water leak);</li>        <li id="ul0002-0005" num="0218">&#x201c;ActionType&#x201d; which may be defined as a schema related to the action to take when an event is created (for example, &#x201c;send text message,&#x201d; &#x201c;send email,&#x201d; &#x201c;update third party ticket system,&#x201d; etc.); and</li>        <li id="ul0002-0006" num="0219">&#x201c;ReportType&#x201d; which may be defined as a schema for looking at assets behaviors over time. A report could include hours of operation for utilization of a particular tool or it could include average travel times for shipments.</li>    </ul>    </li></ul></p><p id="p-0215" num="0220">In some embodiments of the present disclosure, the following terms used herein may be defined as follows:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0221">Asset&#x2014;a form based record of a physical asset where the schema of the Asset is defined by its assettype.</li>        <li id="ul0004-0002" num="0222">Area&#x2014;a form based record of a physical area where the schema of the Area is defined by its areatype.</li>        <li id="ul0004-0003" num="0223">Rule&#x2014;a form based set of fields that allow for selecting areas or assets being it certain conditions, rules could include multiple expressions that must be satisfied with AND or OR. The rule will be in business domain language. IE&#x2014;if any &#x3c;TRACTOR&#x3e; is idle for &#x3c;5 minute&#x3e; on the &#x3c;JOBSITE&#x3e;.</li>        <li id="ul0004-0004" num="0224">Event&#x2014;a form view of the data captured when a rule is satisfied, it has an open or a closed state.</li>        <li id="ul0004-0005" num="0225">Action&#x2014;a follow on specific action to take when an event enters a certain state. IE&#x2014;send an SMS if the Vehicle Stolen event occurs.</li>        <li id="ul0004-0006" num="0226">Report&#x2014;a specific table or graph to show how assets are understood and analyzed over time. They have a report type to define the columns and data source fields.<br/>The data <b>980</b> may include values and information related to some or all of the foregoing, and yet other information to achieve the functionality describe herein.</li>    </ul>    </li></ul></p><p id="p-0216" num="0227">In some embodiments, interface instructions <b>984</b> may include instructions for receiving data from one or more assets (e.g., data from nodes <b>900</b> and <b>902</b> of arms <b>898</b> and <b>899</b>, respectively) in a non-standard format and converting it into a standard set of asset types or area types (e.g., converting it into one or more formats, which may be standardized based on user input or based on various other factors) that can be provided to user <b>925</b>. In the context of this document, such instructions may be referred to as a &#x201c;normalizer,&#x201d; although the name given to such functionality may be different in some embodiments. In some embodiments, the one or more formats may be user-specified (e.g., a user-built asset schema or area schema). In some embodiments, the data may be formatted in one or more standardized formats which a user may receive and view. In some embodiments, the one or more standardized formats may be specified by a user via the interface instructions <b>984</b> (e.g., using user interface <b>966</b>).</p><p id="p-0217" num="0228">Ingestion of any sensor or data feed (e.g., at node <b>950</b> via one or more interfaces <b>964</b>, <b>966</b>, <b>968</b>) into a standard set of assettypes or areatypes requires a normalizer. The normalizer of instructions <b>984</b> may include instructions for converting a structure of an external data format into a standard definition. A standard definition may include base attributes common to one or more assets like &#x201c;name&#x201d; or &#x201c;GPS location,&#x201d; etc. In some embodiments, definitions may also include an extension of custom attributes based on asset type. Examples include temperature for a room, or revolutions per minute for an engine, etc.</p><p id="p-0218" num="0229">In some embodiments, the normalizer may be configured to:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0230">Accept one or more data objects which may be in one or more of the following forms, or yet other data forms:        <ul id="ul0007" list-style="none">            <li id="ul0007-0001" num="0231">Byte[ ]</li>            <li id="ul0007-0002" num="0232">String</li>            <li id="ul0007-0003" num="0233">Base64 encoded</li>            <li id="ul0007-0004" num="0234">Compressed</li>            <li id="ul0007-0005" num="0235">Hexadecimal</li>            <li id="ul0007-0006" num="0236">Binary</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0219" num="0237">In some embodiments, the normalizer may then parse one or more data objects received. Parsing can be done serially by stepping through the data or may be loaded into a full object to be parsed as a whole.</p><p id="p-0220" num="0238">With the data parsed, the mapping into a standard asset or area schema must be done. Instructions <b>984</b> may comprise instructions for performing such mapping. In some embodiments, data in a parsed payload may be incrementally moved such that packages (e.g., Red Hat Package Management packages or &#x201c;RPMs&#x201d;) in a comma delimited string may be mapped to an RPM attribute of a standard software object.</p><p id="p-0221" num="0239">In some embodiments, the normalizer may produce a final asset object, which may comprise a human readable object, which may be in a format easily interpreted and understood by those familiar with the software development process. Possible formats may include JSON, YAML, XML, but other formats are possible in some embodiments.</p><p id="p-0222" num="0240">After the normalizer has completed the foregoing tasks, the instructions <b>984</b> may include instructions for making the data available for persistence and additional processing. The instructions <b>984</b> may comprise instructions for implementing various protocols to accomplish this, including for example, a pub/sub based protocol (e.g., MQTT, AMQP, Kafka, etc.).</p><p id="p-0223" num="0241">In some embodiments, interface instructions <b>984</b> may include instructions for performing rules definition and processing (which may be referred to as a &#x201c;rules engine&#x201d;). In some embodiments, the instructions <b>984</b> may include instructions for using user-built schemas to define a set of human readable rules that can then be processed in the normal flow of data at the node <b>950</b>. For example, such rules may include evaluation of attributes according to:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0000">    <ul id="ul0009" list-style="none">        <li id="ul0009-0001" num="0242">Specific Raw value;</li>        <li id="ul0009-0002" num="0243">Raw change in value from previous value;</li>        <li id="ul0009-0003" num="0244">Percent change in value from previous value;</li>        <li id="ul0009-0004" num="0245">Difference between to measure values;</li>        <li id="ul0009-0005" num="0246">A change in value over a certain time; and</li>        <li id="ul0009-0006" num="0247">A change in value during a certain set of hours of time.</li>    </ul>    </li></ul></p><p id="p-0224" num="0248">In addition, such instructions <b>984</b> may include rules for performing evaluation of position of an asset, including:<ul id="ul0010" list-style="none">    <li id="ul0010-0001" num="0000">    <ul id="ul0011" list-style="none">        <li id="ul0011-0001" num="0249">Inside or outside a geofence perimeter;</li>        <li id="ul0011-0002" num="0250">Inside or outside a geofence for a certain amount of time; and</li>        <li id="ul0011-0003" num="0251">Other information regarding asset position.</li>    </ul>    </li></ul></p><p id="p-0225" num="0252">In some embodiments, instructions may rules may be applied to certain assets, areas and various combinations thereof based on various information, including based on, for example:<ul id="ul0012" list-style="none">    <li id="ul0012-0001" num="0000">    <ul id="ul0013" list-style="none">        <li id="ul0013-0001" num="0253">A specific asset identifier;</li>        <li id="ul0013-0002" num="0254">Any asset;</li>        <li id="ul0013-0003" num="0255">Any asset of a specific type; and</li>        <li id="ul0013-0004" num="0256">A specific asset of a specific type.</li>    </ul>    </li></ul></p><p id="p-0226" num="0257">In some embodiments, instructions <b>984</b> may include instructions for handling data flow. Rates and frequencies of data may vary for different use cases. The normalizer and rules engine may be configured to:<ul id="ul0014" list-style="none">    <li id="ul0014-0001" num="0000">    <ul id="ul0015" list-style="none">        <li id="ul0015-0001" num="0258">handle various use cases, including, for example:        <ul id="ul0016" list-style="none">            <li id="ul0016-0001" num="0259">Streaming data from a data source that constantly feeds real time data (for example, a serial feed);</li>            <li id="ul0016-0002" num="0260">A polling data source (for example, a source like a modbus which must be polled on an interval for new data); and</li>            <li id="ul0016-0003" num="0261">A batch data source (for example, a large CSV file that is produced nightly).</li>        </ul>        </li>        <li id="ul0015-0002" num="0262">allow for processing of data flow and different speeds at which data comes in, including processing the data so that it is:        <ul id="ul0017" list-style="none">            <li id="ul0017-0001" num="0263">Normalized</li>            <li id="ul0017-0002" num="0264">Persisted in one or more databases (e.g., for creating and maintaining a history);</li>            <li id="ul0017-0003" num="0265">Processed for a rule satisfied; and</li>            <li id="ul0017-0004" num="0266">Includes actions taken to appropriately notify work additional workflows.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0227" num="0267">In some embodiments, the interface instructions <b>984</b> may include instructions for implementing a graphical user interface (GUI) for displaying data to and receiving inputs from a user <b>952</b>, such as via user interface <b>966</b>). Examples of the GUI displayed by interface instructions are shown in further detail in <figref idref="DRAWINGS">FIGS. <b>14</b>-<b>29</b></figref>.</p><p id="p-0228" num="0268"><figref idref="DRAWINGS">FIG. <b>14</b></figref> depicts a GUI <b>1400</b> displaying assets and areas as defined by users of a method according to an embodiment of the present disclosure. A map <b>1401</b> on the GUI <b>1400</b> displays a physical area in which the assets are located. In the illustrated embodiment, the map <b>1401</b> displays an airport terminal building <b>1430</b>. In other embodiments, the map <b>1401</b> displays other areas. Non-limiting examples of areas that may be represented in a map <b>1401</b> include farms, fields, buildings, parking lots, parks, highways, and the like.</p><p id="p-0229" num="0269">In the illustrated embodiment, the GUI <b>1400</b> is displayed when a user selects a &#x201c;Home&#x201d; icon <b>1402</b>. In this view, the GUI <b>1400</b> provides a user with options for selection including: Assets <b>1403</b>, Areas <b>1404</b>, Rules <b>1405</b>, Events <b>1406</b>, Reports <b>1407</b>, Action Types <b>1408</b>, Area Types <b>1409</b>, Asset Types <b>1410</b>, Event Types <b>1411</b>, Groups <b>1412</b>, Rule Types <b>1413</b>, Users <b>1414</b>, and Device Configuration <b>1415</b>.</p><p id="p-0230" num="0270">By selecting &#x201c;Assets&#x201d; <b>1403</b>, a user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>18</b></figref>) where the assets, or form-based records of physical assets, are defined. By selecting &#x201c;Areas&#x201d; <b>1404</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>20</b></figref>) where the areas or form-based records of physical areas, are defined. By selecting &#x201c;Rules&#x201d; <b>1405</b>, the user accesses a Rules GUI (<figref idref="DRAWINGS">FIG. <b>16</b></figref>) where the rules, or form-based sets of fields that allow for selecting areas or assets, are defined. By selecting &#x201c;Events&#x201d; <b>1406</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>21</b></figref>) where the events, or form views of the data captured when a rule is satisfied, are displayed. By selecting &#x201c;Reports&#x201d; <b>1407</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>22</b></figref>) with specific tables or graphs configured to show users how assets are understood and analyzed over time.</p><p id="p-0231" num="0271">By selecting &#x201c;Action Types&#x201d; <b>1408</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>24</b></figref>) where the user can define follow-on specific actions to take when an event <b>1406</b> enters a certain state, as further discussed herein. By selecting &#x201c;Area Types&#x201d; <b>1409</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>17</b></figref>) where the user may define the attributes and controls associated with a type of area. By selecting &#x201c;Asset Types&#x201d; <b>1410</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>15</b></figref>) where the user may define the attributes and controls associated with a type of asset. By selecting &#x201c;Event Types&#x201d; <b>1411</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>25</b></figref>) where the user may define the type record for when a rule is satisfied, as further discussed herein.</p><p id="p-0232" num="0272">By selecting &#x201c;Groups&#x201d; <b>1412</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>26</b></figref>) where the user may define groups of users who have permissions to view certain GUIs or perform certain tasks. By selecting &#x201c;Users&#x201d; <b>1414</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>27</b></figref>) where the users of the system are identified and the permissions associated with particular users are defined.</p><p id="p-0233" num="0273">By selecting &#x201c;Rule Types&#x201d; <b>1413</b>, the user accesses a Rules Types GUI (<figref idref="DRAWINGS">FIGS. <b>28</b> and <b>29</b></figref>) where the user may define the business language of rules to be created by end users, as further discussed herein. By selecting &#x201c;Device Config&#x201d; <b>1415</b>, the user accesses a separate GUI (<figref idref="DRAWINGS">FIG. <b>19</b></figref>) where the user may configure physical devices that transmit data to a virtual asset without code, as further discussed herein.</p><p id="p-0234" num="0274">A search field <b>1416</b> allows the user to search for a location or an asset. A descriptor field <b>1417</b> provides a top-level identification of the area in the GUI <b>1400</b>. By selecting &#x201c;Profile&#x201d; <b>1418</b>, the user accesses more information about the area under review.</p><p id="p-0235" num="0275">A &#x201c;Status&#x201d; field <b>1419</b> in this exemplary GUI <b>1400</b> provides the user with a status of current assets, in this example a &#x201c;Cart&#x201d; <b>1420</b>, a &#x201c;Catering Truck <b>1</b>&#x201d; <b>1421</b>, and a &#x201c;Bin <b>1</b> Dallas&#x201d; <b>1422</b>. The current locations of assets may be displayed on the map <b>1401</b>.</p><p id="p-0236" num="0276"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is an exemplary &#x201c;Asset Types&#x201d; GUI <b>1500</b> as referenced above, whereby users can define and view details of an asset. The Asset Types GUI <b>1500</b> is a template for creating multiple instances of an asset. In the illustrated embodiment, the various asset types selectable by the user in defining the asset types include &#x201c;Unassigned Type&#x201d; <b>1510</b>, which is a default type; &#x201c;Cart <b>1</b>&#x201d; <b>1511</b>; &#x201c;Truck&#x201d; <b>1512</b>; &#x201c;Waste Bin&#x201d; <b>1513</b>; &#x201c;Flight&#x201d; <b>1514</b>; &#x201c;Refrigerator&#x201d; <b>1515</b>; &#x201c;Cart <b>2</b>&#x201d; <b>1516</b>; &#x201c;Cart <b>3</b>&#x201d; <b>1517</b>; and &#x201c;Cart <b>4</b>&#x201d; <b>1518</b>.</p><p id="p-0237" num="0277">An &#x201c;Attribute Details&#x201d; field <b>1501</b> provides detailed information about an asset selected. The user defines the attribute details without code. In the illustrated embodiment, the user has selected the &#x201c;Cart <b>4</b>&#x201d; <b>1518</b>, thus accessing the Attribute Details field <b>1501</b>. Attributes accessible via the Attribute Details field <b>1501</b> include the Attribute Name <b>1502</b>, a Label <b>1502</b>, and a Type <b>1504</b>. The &#x201c;Label&#x201d; field <b>1503</b> provides more information about the attribute as shown. The &#x201c;Type&#x201d; field <b>1503</b> indicates the means by which a user can input the attribute. Various inputs for the &#x201c;TYPE&#x201d; field <b>1503</b> are &#x201c;text,&#x201d; which indicates that the user can input the attribute type via standard text; &#x201c;boolean,&#x201d; which indicates that the type can be entered using boolean language, and &#x201c;url,&#x201d; indicating that the type can be entered as a link.</p><p id="p-0238" num="0278">Attribute Names <b>1502</b>, which are selectable by users, include in this example:</p><p id="p-0239" num="0279">&#x201c;Current Flight&#x201d; <b>1520</b>, for which the &#x201c;Current Flight Number&#x201d; will be displayed (the &#x201c;label <b>1503</b>); the Current Flight Number is enterable by the user via text (as indicated by the &#x201c;Type&#x201d; field <b>1504</b>);</p><p id="p-0240" num="0280">&#x201c;Next Flight&#x201d; <b>1521</b>, for which the user can input the &#x201c;Next Flight Number&#x201d; via text;</p><p id="p-0241" num="0281">&#x201c;On Plane&#x201d; <b>1522</b>, which indicates whether the attribute is on the plane or not;</p><p id="p-0242" num="0282">&#x201c;Needs Cleaning&#x201d; <b>1523</b>, which indicates whether the attribute requires cleaning;</p><p id="p-0243" num="0283">&#x201c;Needs Restocking&#x201d; <b>1524</b>, which indicates whether the attribute needs restocking;</p><p id="p-0244" num="0284">&#x201c;C-Base&#x201d; <b>1524</b>, which indicates that a C-Base link has been entered for the attribute.</p><p id="p-0245" num="0285">&#x201c;Reporting&#x201d; <b>1526</b>, which indicates whether the asset is reporting its location and status.</p><p id="p-0246" num="0286"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is an exemplary &#x201c;Rules&#x201d; GUI <b>1600</b> as referenced above, whereby users define asset behavior without code in accordance with an embodiment of the present disclosure. The user accesses the Rules GUI <b>1600</b> by selecting &#x201c;Rules&#x201d; <b>1405</b> on the GUI <b>1400</b> (<figref idref="DRAWINGS">FIG. <b>14</b></figref>). In the exemplary Rules GUI <b>1600</b>, the user is defining a rule &#x201c;Cart Leaving Terminal.&#x201d; As shown in the &#x201c;Condition <b>1</b>&#x201d; box <b>1601</b>, in the illustrated embodiment rules are created using English language statements in the user's chosen domain vernacular. In this context, &#x201c;chosen domain vernacular&#x201d; refers to the user's preferred vernacular for referring to assets, attributes, states, and the like. For example, the users may define a rule type &#x201c;overheating&#x201d; to mean above a certain temperature, while the rule simply uses the term &#x201c;overheating,&#x201d; as it is the more common vernacular for the users of the system than knowing what an overheating temperature range would be.</p><p id="p-0247" num="0287">In the illustrated example, the &#x201c;Condition <b>1</b>&#x201d; is &#x201c;When the Cart <b>4</b> departs from the Terminal.&#x201d; The &#x201c;Rule Type&#x201d; <b>1602</b> in this example is &#x201c;Center Geofence.&#x201d;</p><p id="p-0248" num="0288">An &#x201c;Event&#x201d; field <b>1603</b> defines additional rule parameters. For the exemplary event, &#x201c;Closing Rule Info&#x201d; <b>1604</b> indicates that &#x201c;This rule does not close any others,&#x201d; and that &#x201c;This rule is not closed by another rule.&#x201d; In other words, this rule stands alone and is not linked to other rules. An &#x201c;Event Type&#x201d; <b>1604</b> field indicates that the event will be displayed as &#x201c;Departed Terminal.&#x201d; A &#x201c;Severity&#x201d; field <b>1606</b> indicates a defined severity level for the event. A &#x201c;Priority&#x201d; field <b>1607</b> indicates a defined priority level for the event.</p><p id="p-0249" num="0289"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is an exemplary &#x201c;Area Types&#x201d; GUI <b>1700</b> as discussed above, in accordance with an embodiment of the present disclosure. The Area Types GUI <b>1700</b> is an exemplary template with which the user can create multiple instances of an area without code. In this example, pre-defined Area Types include a &#x201c;Customer Service Center&#x201d; <b>1702</b>, a &#x201c;Terminal Center&#x201d; <b>1703</b>, and an &#x201c;Airport&#x201d; <b>1704</b>. Selecting the &#x201c;Airport&#x201d; <b>1704</b> area type brings up an Airport field <b>1701</b>, which lists Attribute Details <b>1705</b> for the Airport. A &#x201c;Name&#x201d; field <b>1706</b>, &#x201c;Label&#x201d; field <b>1707</b>, and &#x201c;Type&#x201d; field <b>1708</b> provide further details about the Airport. As shown in this example, the Airport Name and the Airport Code are enterable by the user via text.</p><p id="p-0250" num="0290"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is an exemplary Assets GUI <b>1800</b> as discussed above, in accordance with an embodiment of the present disclosure. In the illustrated example, the asset displayed is &#x201c;Cart <b>456</b>&#x201d; <b>1801</b>, which represents a digital &#x201c;twin&#x201d; of a real-world asset, in this case, a cart. The assets contain attribute data from physical devices reporting such data, and/or from data feeds via other software systems. An &#x201c;Attributes&#x201d; field <b>1802</b> lists the attributes for the Cart <b>456</b>, namely a &#x201c;Current Flight Number&#x201d; <b>1803</b>, a &#x201c;Next Flight Number&#x201d; <b>1804</b>, an &#x201c;Is On Plane?&#x201d; indicator <b>1805</b>, a &#x201c;Needs Cleaning?&#x201d; indicator <b>1806</b>, a &#x201c;Needs Restocking?&#x201d; <b>1807</b>, a &#x201c;C-Base Link&#x201d; <b>1808</b>, and an &#x201c;Is Reporting?&#x201d; indicator <b>1809</b>.</p><p id="p-0251" num="0291"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is an exemplary Device Configuration GUI <b>1900</b> as discussed above, in accordance with an embodiment of the present disclosure. With this GUI <b>1900</b>, users configure physical devices that transmit data to a virtual asset without code. The user configures connection settings <b>1901</b> via simple forms that allow the user to communicate with a physical device without code.</p><p id="p-0252" num="0292"><figref idref="DRAWINGS">FIG. <b>20</b></figref> depicts an exemplary &#x201c;Areas&#x201d; GUI <b>2000</b> as discussed above, in accordance with an embodiment of the present disclosure. In the illustrated example, the area chosen is the &#x201c;Dallas/Fort Worth International Airport.&#x201d; A &#x201c;TYPE&#x201d; field <b>2001</b> on the GUI <b>2000</b> identifies the area type, &#x201c;Airport&#x201d; in this example. A &#x201c;GROUP&#x201d; field <b>2002</b> on the GUI <b>2000</b> identifies what group(s) have permissions for this particular area, as further discussed herein with respect to <figref idref="DRAWINGS">FIG. <b>26</b></figref>.</p><p id="p-0253" num="0293"><figref idref="DRAWINGS">FIG. <b>21</b></figref> depicts an exemplary &#x201c;Events&#x201d; GUI <b>2100</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example, summary status information for five events <b>2010</b>-<b>2105</b> are displayed in the GUI <b>2100</b>. Event <b>2101</b> displays the event information &#x201c;Cart Leaving Service&#x201d; for the asset &#x201c;Cart <b>2</b>;&#x201d; Event <b>2102</b> displays the event information &#x201c;Cart Arriving at Service Center&#x201d; for the asset &#x201c;Cart <b>2</b>;&#x201d; Event <b>2103</b> displays the event information &#x201c;Cart Leaving Service&#x201d; for the asset &#x201c;Cart <b>456</b>;&#x201d; Event <b>2104</b> display the event information &#x201c;Water Leak Detected&#x201d; for the asset &#x201c;Refrigerator;&#x201d; and Event <b>2105</b> displays the event information &#x201c;Service Center Trash Bin Check&#x201d; for the asset &#x201c;Bin<b>1</b> Dallas.&#x201d;</p><p id="p-0254" num="0294">An &#x201c;Event Status&#x201d; field <b>2106</b> displays more detailed information event status for the asset selected, in this example asset &#x201c;Cart <b>2</b>.&#x201d; This cart was leaving service as of Apr. 14, 2022 at 12:32:57 PM in the illustration. A map <b>2107</b> displays the location of the asset &#x201c;Cart <b>2</b>.&#x201d;</p><p id="p-0255" num="0295"><figref idref="DRAWINGS">FIG. <b>22</b></figref> depicts an exemplary &#x201c;Reports&#x201d; GUI <b>2200</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example, two reports are available for selection, a &#x201c;BatteryLevel Report&#x201d; <b>2201</b>, and a &#x201c;HeatMap Report&#x201d; <b>2202</b>.</p><p id="p-0256" num="0296"><figref idref="DRAWINGS">FIG. <b>23</b></figref> depicts an exemplary HeatMap Report <b>2202</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. The illustrated example displays a heat map for a date range of the past month and the area of the Dallas/Fort Worth International Airport, and for the &#x201c;Waste Bin&#x201d; asset type. <figref idref="DRAWINGS">FIG. <b>23</b></figref> is an example of one report; any number of reports may be available for various assets and areas, as configured by the user.</p><p id="p-0257" num="0297"><figref idref="DRAWINGS">FIG. <b>24</b></figref> depicts an exemplary &#x201c;Action Types&#x201d; GUI <b>2400</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example, the action types selectable by the user include &#x201c;Send SMS&#x201d; <b>2401</b>; &#x201c;Send Teams Message&#x201d; <b>2402</b>; &#x201c;Publish Message&#x201d; <b>2403</b>; &#x201c;Send to Webhook&#x201d; <b>2404</b>; and &#x201c;Send Email&#x201d; <b>2405</b>. More detailed information is displayed for the &#x201c;Send Email&#x201d; action <b>2405</b>, as it has been selected by the user in the illustrated example. As shown in the example, users in the &#x201c;Default&#x201d; Group are able to access and edit this GUI <b>2400</b>.</p><p id="p-0258" num="0298"><figref idref="DRAWINGS">FIG. <b>25</b></figref> depicts an exemplary &#x201c;Event Types&#x201d; GUI <b>2500</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example, the user may access more information for the events &#x201c;Battery Low&#x201d; <b>2501</b>; &#x201c;Enter Geofence&#x201d; <b>2502</b>; &#x201c;Exist Geofence&#x201d; <b>2503</b>; &#x201c;Battery Normal&#x201d; <b>2504</b>; &#x201c;Bin Full&#x201d; <b>2505</b>; &#x201c;Arrived at Center&#x201d; <b>2506</b>; &#x201c;Departed from Center&#x201d; <b>2507</b>; &#x201c;Water Leak Resolved&#x201d; <b>2508</b>; and &#x201c;Water Leak Detected&#x201d; <b>2509</b>. More detailed information is displayed for the event type &#x201c;Water Leak Detected&#x201d; <b>2509</b>, as this event type has been selected by the user in the illustrated example. In this example, the group &#x201c;Default&#x201d; is able to access and edit this GUI <b>2500</b>. The &#x201c;Action Types&#x201d; available for this event type are &#x201c;Send SMS&#x201d; and &#x201c;Send Email.&#x201d; An &#x201c;Open State&#x201d; <b>2511</b> of &#x201c;Active&#x201d; has been defined for this event type, and a &#x201c;Closed State&#x201d; of &#x201c;Resolved&#x201d; has been defined for this event type.</p><p id="p-0259" num="0299"><figref idref="DRAWINGS">FIG. <b>26</b></figref> depicts an exemplary &#x201c;Groups&#x201d; GUI <b>2600</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example, two groups are selectable by the user: a &#x201c;Default&#x201d; group <b>2601</b> and a &#x201c;ClearBlade Team&#x201d; group <b>2602</b>. Additional information for the ClearBlade Team group is available on the GUI <b>2600</b>, as this group has been selected by the user. An area for this group has been defined and a map is displayed for this area.</p><p id="p-0260" num="0300"><figref idref="DRAWINGS">FIG. <b>27</b></figref> depicts an exemplary &#x201c;Users&#x201d; GUI <b>2700</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example, two users are selectable by the user: &#x201c;John Doe&#x201d; and &#x201c;Jane Jones.&#x201d; If the user selects &#x201c;John Doe&#x201d; additional information is available on the GUI <b>2700</b> as shown, namely the &#x201c;Groups&#x201d; <b>2701</b> that John Doe is a member of (&#x201c;Default&#x201d; and &#x201c;ClearBlade Team&#x201d; in this example) and the &#x201c;Roles&#x201d; <b>2702</b> that John Doe has in these groups (&#x201c;Administrator in this example&#x201d;).</p><p id="p-0261" num="0301"><figref idref="DRAWINGS">FIG. <b>28</b></figref> depicts an exemplary &#x201c;Rule Types&#x201d; GUI <b>2800</b> as discussed above, in accordance with an exemplary embodiment of the present disclosure. In the illustrated example the GUI <b>2800</b> is in &#x201c;read only&#x201d; mode, i.e., is not in &#x201c;edit&#x201d; mode. (See <figref idref="DRAWINGS">FIG. <b>29</b></figref> for an example of a &#x201c;Rule Types&#x201d; GUI in edit mode.) In the illustrated example, five rule types are listed: &#x201c;Asset Movement&#x201d; <b>2801</b>; &#x201c;Battery Status&#x201d; <b>2802</b>; &#x201c;Bin Check&#x201d; <b>2803</b>; &#x201c;Water&#x201d; <b>2804</b>; and &#x201c;Service Center Geofence&#x201d; <b>2805</b>. For the &#x201c;Water&#x201d; rule type <b>2805</b>, which the user has selected in the illustrated example, additional information is displayed. In this regard, a &#x201c;Groups&#x201d; field <b>2806</b> displays what groups have permission to edit the rule types (&#x201c;ClearBlade Team&#x201d; in this example). An &#x201c;Event Types&#x201d; field <b>2807</b> displays the event types available for this rule type (&#x201c;Water Leak Resolved&#x201d; and &#x201c;Water Leak Detected&#x201d; in this example). A &#x201c;Condition <b>1</b>&#x201d; field <b>2808</b> displays a condition that has been defined by the user (&#x201c;When a Refrigerator's Leaking Status is Not Leaking for duration&#x201d;) in this example.</p><p id="p-0262" num="0302"><figref idref="DRAWINGS">FIG. <b>29</b></figref> depicts an exemplary &#x201c;Rule Types&#x201d; GUI <b>2900</b> in edit mode, illustrating the creation of the GUI <b>2800</b> (<figref idref="DRAWINGS">FIG. <b>28</b></figref>), whereby the user can create rule parameters. The user creating a rule type may enter a name for the rule type in a &#x201c;Name&#x201d; field <b>2901</b>. The rule type &#x201c;Water&#x201d; is being created in the illustrated example GUI <b>2900</b>. In a &#x201c;CONDITION <b>1</b>&#x201d; area <b>2902</b> of the GUI <b>2900</b>, the user enters for a rule type under creation a prefix in a &#x201c;Prefix&#x201d; field <b>2903</b>. In the illustrated example, the prefix entered is &#x201c;When a.&#x201d;</p><p id="p-0263" num="0303">The user selects a filter entity selection in a &#x201c;Filter Entity Selection&#x201d; field <b>2904</b>. In the illustrated example, the filter entity selection is &#x201c;Asset Types,&#x201d; chosen from a drop down menu in the field <b>2904</b>. Other options in the drop down menu include &#x201c;Assets,&#x201d; &#x201c;Areas,&#x201d; and &#x201c;Area Types.&#x201d;</p><p id="p-0264" num="0304">The user selects an ancestor type in an &#x201c;Ancestor Type&#x2032; field <b>2905</b>, chosen from a drop down menu in the field <b>2905</b>. In this example, the user has selected &#x201c;Refrigerator&#x201d; as the ancestor type. Optionally, the user may select a descendant type in a &#x201c;Descendant Type&#x201d; field <b>2906</b>. The selections available when a user selects either the &#x201c;Ancestor Type&#x201d; field <b>2905</b> or the &#x201c;Descendant Type&#x201d; field <b>2906</b> depend on what the user chose in the Filter Entity Selection&#x201d; field <b>2904</b>, i.e., there are different descendants and ancestors for &#x201c;Asset Types,&#x201d; &#x201c;Assets,&#x201d; &#x201c;Areas,&#x201d; and &#x201c;Area Types.&#x201d;</p><p id="p-0265" num="0305">In a &#x201c;Select Attribute&#x201d; field <b>2907</b> the user may enter an attribute for the asset. &#x201c;Is Leaking?&#x201d; has been entered in the illustrated example. In an &#x201c;Attribute Label&#x201d; field <b>2908</b> the user may enter a label for the attribute. In the illustrated example, the user has entered &#x201c;Leaking Status&#x201d; as the label for the attribute.</p><p id="p-0266" num="0306">In a &#x201c;DATA TYPE&#x201d; field, <b>2909</b>, the user selects whether the data type entered will be a &#x201c;STRING&#x201d; <b>2912</b> (i.e., a text string), a &#x201c;NUMBER&#x201d; <b>2913</b>, or &#x201c;BOOLEAN&#x201d; <b>2914</b> (e.g., &#x201c;true&#x201d; or &#x201c;false&#x201d;). In this example, the user has selected &#x201c;BOOLEAN&#x201d; <b>2914</b>. Where the user has selected &#x201c;BOOLEAN&#x201d; <b>2914</b>, as in the illustrated example, the user may then enter a &#x201c;True Label&#x201d; <b>2910</b> (&#x201c;is Leaking&#x201d; in the illustrated example) and a &#x201c;False Label&#x201d; <b>2911</b> (&#x201c;is Not Leaking&#x201d; in the illustrated example).</p><p id="p-0267" num="0307">Where the user selects &#x201c;NUMBER&#x201d; <b>2913</b>, the available choices where fields <b>2910</b> and <b>2911</b> are in the illustrated example become comparator statements, e.g., &#x201c;greater than,&#x201d; &#x201c;less than,&#x201d; &#x201c;greater than or equal to,&#x201d; or &#x201c;less than or equal to.&#x201d; The user may enter a value to indicate, for example, &#x201c;greater than X,&#x201d; and provide a unit label e.g., pounds or Fahrenheit.</p><p id="p-0268" num="0308">Where the user selects &#x201c;STRING&#x201d; <b>2912</b>, and enters a text string, then the string either matches or doesn't match, i.e., is equal to or not equal to.</p><p id="p-0269" num="0309"><figref idref="DRAWINGS">FIG. <b>30</b></figref> shows an exemplary dataflow <b>3000</b> of a back end interface in accordance with some embodiments of the present disclosure. Asset data <b>3009</b>, which may be in any format or protocol, is input into a normalizer <b>3002</b>. The normalizer converts the asset data <b>3009</b> into a predefined standard definition using OT inferencing API <b>3001</b>. Rules and events <b>3003</b> are processed into event streams or into action streams via an action processor <b>3006</b>. A data writer <b>3004</b> produces data storage streams. User notification tools <b>3005</b> produce user data streams. The resultant APIs and streams are input to the no-code interface <b>3010</b>, as further discussed herein.</p><p id="p-0270" num="0310"><figref idref="DRAWINGS">FIG. <b>31</b></figref> shows an exemplary dataflow <b>3100</b> showing the internal processing between the back end dataflow <b>3000</b> of <figref idref="DRAWINGS">FIG. <b>30</b></figref> and model creation by the user/data scientist in <b>3100</b>. The user's system receives raw data <b>3101</b> from the back end <b>3000</b>. The raw data <b>3101</b> is cleansed via cleansing tools <b>3102</b> to remove incorrect, corrupted, incorrectly formatted, duplicate, or incomplete data, resulting in prepared data <b>3103</b>. The user uses the prepared data <b>3103</b> in algorithm training <b>3104</b> and creating a model <b>3105</b>.</p><p id="p-0271" num="0311">Test data <b>3106</b> is input into test prediction tools <b>3107</b> and the models are validated. A resultant API <b>3109</b> is then usable by the data scientist via the no-code interface <b>3010</b>. In the process described herein, the user has essentially turned raw state data into user-defined state data, using the vernacular and definitions defined by the user's particular business.</p><p id="p-0272" num="0312">The foregoing description illustrates and describes the processes, machines, manufactures, compositions of matter, and other teachings of the present disclosure. Additionally, the disclosure shows and describes only certain embodiments of the processes, machines, manufactures, compositions of matter, and other teachings disclosed, but, as mentioned above, it is to be understood that the teachings of the present disclosure are capable of use in various other combinations, modifications, and environments and is capable of changes or modifications within the scope of the teachings as expressed herein, commensurate with the skill and/or knowledge of a person having ordinary skill in the relevant art. The embodiments described hereinabove are further intended to explain certain best modes known of practicing the processes, machines, manufactures, compositions of matter, and other teachings of the present disclosure and to enable others skilled in the art to utilize the teachings of the present disclosure in such, or other, embodiments and with the various modifications required by the particular applications or uses. Accordingly, the processes, machines, manufactures, compositions of matter, and other teachings of the present disclosure are not intended to limit the exact embodiments and examples disclosed herein. Any section headings herein are provided only for consistency with the suggestions of 37 C.F.R. &#xa7; 1.77 or otherwise to provide organizational queues. These headings shall not limit or characterize the invention(s) set forth herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for configuring output of information from nodes of an Internet of Things (IoT) network hierarchy comprising:<claim-text>receiving user inputs from a user, the user inputs comprising an asset type;</claim-text><claim-text>receiving user-created rule types, the rule types defining an asset behavior, the rule types input by the user in a human-readable language;</claim-text><claim-text>associating information representing the asset type and the asset behavior with one or more physical devices associated with a node of the network;</claim-text><claim-text>associating the asset type with a virtual area, the virtual area associated with a physical area;</claim-text><claim-text>receiving raw state data from the one or more physical devices;</claim-text><claim-text>converting the raw state data into user-defined state data;</claim-text><claim-text>displaying the user-defined state data to the user.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising updating periodically the user-defined state data with updated raw state data from the one or more physical devices.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of receiving user-created rule types comprises receiving user-provided business language for defining the rule type.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of receiving user-created rule types comprises receiving a user-provided prefix.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the step of converting the raw state data into user-defined state data is performed by one or more normalizers.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the one or more normalizers receive raw state data and convert the raw state data into developer-readable data.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the user inputs further comprising an event type, the event type defining when a rule is satisfied, within a business of the asset.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising associating the event type with a closed event state and an open event state.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the user inputs further comprising an action type, the action type comprising an action to take when an event occurs.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the user inputs further comprising a report type, the report type representing asset behaviors over time.</claim-text></claim></claims></us-patent-application>