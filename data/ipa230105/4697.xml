<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004698A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004698</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17857737</doc-number><date>20220705</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>31</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>392</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>31</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>392</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DIVIDING A CHIP DESIGN FLOW INTO SUB-STEPS USING MACHINE LEARNING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63218011</doc-number><date>20210702</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Synopsys, Inc.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>ADAMS</last-name><first-name>Amzie Allen</first-name><address><city>Raleigh</city><state>NC</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>WALSTON</last-name><first-name>Joseph R.</first-name><address><city>Durham</city><state>NC</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>VERMA</last-name><first-name>Piyush</first-name><address><city>Sunnyvale</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Synopsys, Inc.</orgname><role>02</role><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method includes generating a plurality of intermediate designs for a chip by executing a first sub-step based on a first plurality of inputs, adding at least one intermediate design of the plurality of intermediate designs to a second plurality of inputs, generating a plurality of final designs by executing a second sub-step of the step of the design flow based on the second plurality of inputs, and selecting using a machine learning model a final design from the plurality of final designs. The first sub-step is a sub-step of a step of a design flow and the first plurality of inputs corresponds to input parameters associated with the first sub-step.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="100.16mm" wi="158.75mm" file="US20230004698A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="239.52mm" wi="172.30mm" orientation="landscape" file="US20230004698A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="227.92mm" wi="184.57mm" file="US20230004698A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="215.14mm" wi="106.51mm" file="US20230004698A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="202.35mm" wi="109.47mm" file="US20230004698A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="224.03mm" wi="143.76mm" file="US20230004698A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATION</heading><p id="p-0002" num="0001">The present application claims the benefit under 35 U.S.C. &#xa7; 119(e) of U.S. Provisional Patent Application No. 63/218,011 filed on Jul. 2, 2021, which is incorporated herein by reference in its entirety for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to chip design. More specifically, the present disclosure relates to chip design using flow-slicing.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">An integrated circuit (IC) design flow typically includes many stages where a designer may make a design choice. Examples include, but are not limited to, chip size, chip aspect ratio, pin placement, macro placement, power distribution, design flow, timing margin, and design tool settings. Each design choice is an input that may impact a quality of result (QoR) of a final design of the IC.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">In some aspects, a method includes generating a plurality of intermediate designs for a chip by executing a first sub-step based on a first plurality of inputs, adding at least one intermediate design of the plurality of intermediate designs to a second plurality of inputs, generating a plurality of final designs by executing a second sub-step of the step of the design flow based on the second plurality of inputs, and selecting using a machine learning model a final design from the plurality of final designs. The first sub-step is a sub-step of a step of a design flow and the first plurality of inputs corresponds to input parameters associated with the first sub-step.</p><p id="p-0006" num="0005">In some aspects, a system includes a memory storing instructions and a processor coupled with the memory and to execute the instructions. The instructions when executed cause the processor to generate a plurality of intermediate designs for a chip by executing a first sub-step of a design flow based on a first plurality of inputs, add at least one intermediate design of the plurality of intermediate designs to a second plurality of inputs, generate a plurality of final designs by executing a second sub-step of the step of the design flow based on the second plurality of inputs, and select using a machine learning model a final design from the plurality of final designs. The first sub-step is a sub-step of a step of a design flow and the first plurality of inputs corresponds to input parameters associated with the first sub-step.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006">The disclosure will be understood more fully from the detailed description given below and from the accompanying figures of embodiments of the disclosure. The figures are used to provide knowledge and understanding of embodiments of the disclosure and do not limit the scope of the disclosure to these specific embodiments. Furthermore, the figures are not necessarily drawn to scale.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic that shows a flow optimization process with flow-slicing, in accordance with an embodiment of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart for a flow-slicing method, in accordance with an embodiment of the present disclosure.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart for a design flow method, in accordance with an embodiment of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a flowchart of various processes used during the design and manufacture of an integrated circuit, in accordance with an embodiment of the present disclosure.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a diagram of an example computer system in which embodiments of the present disclosure may operate.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0013" num="0012">Aspects of the present disclosure relate to dividing a chip design flow into sub-steps using machine learning.</p><p id="p-0014" num="0013">There are many possible variable inputs (e.g., chip size, chip aspect ratio, pin placement, macro placement, power distribution, design flow, timing margin) to a design flow for a chip, and each input impacts the quality (QoR) of the final chip. Inputs (variable inputs) may be referred to as permutons. In some aspects, the union of all inputs across the entire design flow represents the total design search space (i.e., full design search space). The total design search space is enormous (10{circumflex over (&#x2003;)}12 possible combinations is not unusual). Accordingly, it is impractical to search the total design search space exhaustively. Machine Learning (ML) can be used by a search system. For example, the search system may be an autonomous artificial intelligence application or tool for chip design (e.g., DSO.ai&#x2122; from SYNOPSYS) to automate the selection of inputs and improve QoR, but ML requires a reward function. The reward function requires running the design flow and design flows take a long time to execute, even with optimal input choices. A single search may be referred to as a &#x201c;session.&#x201d;</p><p id="p-0015" num="0014">Unfortunately, the reward function can only be accurately measured at the end of the entire design flow, and design flows take a long time to execute. Some input choices degrade QoR and dramatically increase runtime. The increased runtime typically happens in detail routing and slows down the entire search process. The search system relies on trial jobs finishing in a timely manner so that it can learn from them. When jobs languish in routing, the search system is deprived of useful information and the final QoR of the entire search can suffer as a result.</p><p id="p-0016" num="0015">In some embodiments, a &#x201c;flow slicing&#x201d; process is used. With flow-slicing, the entire design flow is sliced (divided) into sub-steps. The total design search space is also divided into sub-spaces with each sub-space chosen (i.e., selected) to match each flow sub-step. The smaller sub-spaces (compared to the whole design search space) reduce the computational requirement to search at each flow sub-step. Running each sub-step is faster than running the entire design flow, giving designers intermediate results quickly. As a sub-step is near completion, ML is used to select top diverse design results and dynamically start the next sub-step (i.e., subsequent sub-step). This allows sub-step executions to overlap, speeding up runtime.</p><p id="p-0017" num="0016">Multiple independent ML methods can be used to select top diverse results. Users are free to explicitly specify which ML method(s) are used, but the search system also provides an intelligent default method. Thus, the user may be presented with one or more ML methods to select from. These top diverse design results become values of a design view permuton (DVP) and are added to the search space of the next flow sub-step. Users are also free to select top diverse design results from multiple sessions running in parallel, and users are free to dynamically change the sub-steps as searches are executed.</p><p id="p-0018" num="0017">In some embodiments, the flow-slicing process divides a complex design flow into sub-steps and optimizes an appropriate sub-space of inputs for each sub-step. Intermediate reward functions are calculated at each sub-step. The intermediate rewards drive ML optimization of the sub-space for that sub-step. Sub-steps are chained together sequentially in a dynamic and overlapping way to complete the entire design flow.</p><p id="p-0019" num="0018">ML is also used to select top diverse intermediate designs at each sub-step. Intermediate designs can be selected from multiple sessions running in parallel. The intermediate designs are automatically added to the input sub-space of the next sub-step and are used as the input designs for the next sub-step. Sub-steps are automatically chained together sequentially to complete the optimization of the entire design flow. Optimization of sub-steps can begin as soon as results become available from a previous sub-step. This dynamic overlapping optimization of sub-steps decreases runtime.</p><p id="p-0020" num="0019">By passing forward multiple top diverse designs from each sub-step to a subsequent sub-step, the ML engines can sample a rich variety of different design implementations without having to search the entire input space at once. The DVP diversity mitigates miscorrelation between sub-steps and significantly improves final QoR.</p><p id="p-0021" num="0020">The flow-slicing process is very flexible. That is, it supports an unlimited number of flow sub-steps, user-defined or completely automated intermediate reward functions, and user-defined or completely automated intermediate design selection. The selection of top diverse designs to pass forward can be adjusted dynamically between sub-steps. Designs can be passed forward from multiple sessions running in parallel. Users can change the sub-step definitions dynamically. The system also allows the final end-of-flow reward functions to drive ML optimization of earlier flow sub-steps.</p><p id="p-0022" num="0021">Technical advantages of the present disclosure include, but are not limited to, faster runtime, use of less computing resources, better QoR, and intermediate ML-ranked designs. The faster runtime and smaller compute also enable designers to search larger inputs spaces. In some embodiments, flow-slicing provides an easy-to-use, efficient, and flexible process for optimizing the design flow in sub-steps. As discussed above, optimizing an entire design flow in a single pass (time consuming pass) has many disadvantages. The disadvantages include but are not limited to extremely long runtimes, larger ML compute requirements, and inferior final results. In one or more embodiments, flow-slicing overcomes these problems.</p><p id="p-0023" num="0022">As described previously, the full design flow is divided up into sub-steps. Likewise, the full design search space is divided into sub-spaces. Each flow sub-step has a corresponding sub-space. The corresponding sub-space includes inputs that impact that flow sub-step. As an example, a full design flow might be divided into three sub-steps: place, clock, and route. The place sub-step can explore a sub-space of inputs that impact placement. The clock sub-step can explore a sub-space of inputs that impact clock tree synthesis. The route sub-step can explore a sub-space of inputs that impact routing and post-route optimization.</p><p id="p-0024" num="0023">In some embodiments, a search system executes each flow sub-step separately and sequentially and uses ML to optimize the sub-spaces. A ML model is driven by intermediate reward functions that are appropriate for each sub-step of the flow. For example, if the sub-step being executed is place, the intermediate reward function may be an aggregate design score (ADES) that includes a total negative slack, a routing congestion, a die size and a leakage power. Because the design is not yet routed at place, routing design rule checks (DRCs) are not included in the intermediate reward function.</p><p id="p-0025" num="0024">As each flow sub-step is optimized, the search system stores diverse designs based on the intermediate reward functions. Multiple independent reward functions can be used to select which designs are stored. Because intermediate reward functions do not correlate perfectly to reward functions at the end of the flow, multiple diverse best designs are stored. Each best design is treated as a single value of a DVP. The DVPs from each flow sub-step become part of the input search space for the next flow sub-step. As with other inputs, the search system automatically learns which DVPs produce the best QoR at the end of the next flow sub-step. This process repeats sequentially until the entire design flow has been optimized. As discussed above, any number of DVP values can be passed forward from any sub-step to a subsequent sub-step. Users can dynamically change sub-step definitions during a search, and sub-steps may have not to be completed before optimization of the next sub-step begins. Sub-spaces, intermediate reward functions, and DVPs can also all be selected automatically by the search system.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic that shows a flow optimization process <b>100</b> with flow-slicing, in accordance with an embodiment of the present disclosure. A design flow may be divided into sub-steps or stages. For example, the design flow may be divided into N-stages. <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows, as an example, flow stages 1 (<b>106</b><i>a, </i><b>106</b><i>b, </i><b>106</b><i>c</i>) and flow stages N (<b>112</b><i>a, </i><b>112</b><i>b, </i><b>112</b><i>c</i>).</p><p id="p-0027" num="0026">In some aspects, the design flow may be associated with a physical implementation. In some aspects, the design flow may be associated with a place and route process of the physical implementation. A first stage (i.e., first sub-step) may correspond to place. A second stage may correspond to clock and a third stage may correspond to route. In another example, a floor planning stage may be added before the place stage. The stages may also include a power planning stage and/or post route stage. A user may provide different stages. For example, the user may select to divide each of the place stage, clock stage, or place stage into further sub-steps or stages.</p><p id="p-0028" num="0027">As described previously herein, the design search space is divided into sub-spaces. Each design search sub-space includes input parameters that impact only that flow sub-step. For example, for a place stage, the inputs may include an initial design, one or more steps that execute the placement or place stage flow, and permutons. The permutons may include inputs for a ML engine <b>116</b>. For example, flow stages 1 (<b>106</b><i>a, </i><b>106</b><i>b, </i><b>106</b><i>c</i>) may have a corresponding sub-space <b>102</b> and flow stages N (<b>112</b><i>a, </i><b>112</b><i>b, </i><b>112</b><i>c</i>) may have a corresponding sub-space <b>104</b>. The sub-space <b>104</b> of the flow stages N may include intermediate designs from the previous sub-stage.</p><p id="p-0029" num="0028">In some embodiments, inputs for the clock stage may include designs (intermediate designs or DVP) from the previous stage (e.g., place stage), a flow script for the clock, and the permutons for the clock stage. Inputs for a floor planning stage may include the permutons and an initial design. The permutons for the floor planning stage may include a die size (chip size), aspect ratio of the chip (e.g., square, L-shaped), placement of pins around edges of the chip.</p><p id="p-0030" num="0029">In some aspects, multiple runs may be executed in parallel. For example, N runs may be executed in parallel. Each run may have a different set of inputs. As described previously herein each flow stage may have a corresponding subspace. Inputs for each run (e.g., flow stage <b>106</b><i>a, </i>flow stage <b>106</b><i>b, </i>flow stage <b>106</b><i>c</i>) for the first flow stage may be selected from sub-space <b>102</b>. Inputs for each run of flow stage N (e.g., flow stage <b>112</b><i>a, </i>flow stage <b>112</b><i>b</i>, flow stage <b>112</b><i>c</i>) may be selected from the sub-space <b>104</b>.</p><p id="p-0031" num="0030">Each flow sub-step produces intermediate designs and intermediate rewards (IRs). For example, a first run <b>106</b><i>a </i>of the first flow stage may produce intermediate design <b>108</b><i>a </i>and intermediate reward <b>110</b><i>a. </i>Similarly, the second run produces intermediate design <b>108</b><i>b </i>and intermediate reward <b>110</b><i>b </i>and the Nth run produces intermediate design <b>108</b><i>c </i>and intermediate reward <b>110</b><i>c. </i>The ML engine <b>116</b> evaluates all the IRs (<b>110</b><i>a, </i><b>110</b><i>b, </i>and <b>110</b><i>c</i>) and uses them to optimize the sub-space for that sub-step (i.e., sub-space <b>102</b>). The ML engine <b>116</b> may analyze the IRs, identify optimal input parameters from the sub-space <b>102</b>, identify one or more intermediate designs, and add the identified intermediate designs to the search space of next stage (i.e., subsequent sub-stage). The intermediate designs are added to the sub-space of the next flow sub-step as DVP values. The intermediate designs may be identified based on the value of the corresponding IR. The chain continues sequentially until the entire design flow is completed and the final reward functions are known. For example, flow stage N (e.g., flow stage <b>112</b><i>a, </i>flow stage <b>112</b><i>b, </i>flow stage <b>112</b><i>c</i>) may result in final designs and final rewards (<b>114</b><i>a, </i><b>114</b><i>b, </i>and <b>114</b><i>c</i>). The final designs and the final rewards are passed to the ML engine <b>116</b> to select a final design for the chip. For example, once the entire design flow has been optimized, the search system has the ability to optimize early flow sub-steps using the final reward functions by starting with the final rewards and tracing backwards through the design flow. A sub-space for a sub-stage may be optimized based on the final reward function. For example, the sub-spaces associated with flow stage 1 through flow stage N may be optimized based on final reward (<b>114</b><i>a, </i><b>114</b><i>b, </i><b>114</b><i>c</i>). Optimizing the sub-space may include identifying optimal input parameters from the sub-space. This provides the advantage of an improvement in the search efficiency and the power, performance, and area of the final designs generated by the system.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a flowchart for flow-slicing method <b>200</b>, in accordance with an embodiment of the present disclosure. At <b>205</b>, the design flow is divided into sub-steps and the input space for the chip design flow is divided into input sub-spaces for the sub-steps. The sub-steps may have a sequence/order (e.g., place, clock, and route).</p><p id="p-0033" num="0032">At <b>210</b>, the first sub-step in the sequence determined in <b>205</b> is set as the current sub-step. For example, place may be set as the current sub-step.</p><p id="p-0034" num="0033">At <b>215</b>, multiple sets of inputs are selected from the input sub-space for the current sub-step. As described previously herein, the sub-space or design search subspace for the current sub-step includes inputs that may affect the sub-stage.</p><p id="p-0035" num="0034">At <b>220</b>, a determination is made whether the current sub-step is the last (or final) sub-step in the sequence of sub-steps. In response to determining that the current sub-step is the last sub-step of the sequence, the process proceeds to <b>245</b> (i.e., resulting in a Yes in <b>220</b>). In response to determining that the current sub-step is not the last sub-step of the sequence (i.e., resulting in a No in <b>220</b>), the process proceeds to <b>225</b>.</p><p id="p-0036" num="0035">At <b>225</b>, multiple intermediate designs (i.e., design obtained after a sub-step, also may be referred to as multiple intermediate chip designs) are generated by executing the current sub-step based on the selected sets of inputs. Specifically, one run of the current sub-step may be executed against one set of inputs, a second run of the current sub-step may be executed against a second set of inputs, and the like. These runs may be executed in parallel.</p><p id="p-0037" num="0036">At <b>230</b>, intermediate rewards are calculated for the multiple intermediate designs. At least one of the intermediate rewards may be calculated using a reward function specific to the current sub-step. For example, after a placement sub-stage, an estimate of how fast the chip is running may be fed to the reward function.</p><p id="p-0038" num="0037">At <b>235</b>, a machine learning engine (e.g., ML optimizer such as, for example, a processor that executes one or more machine learning operations) analyses the intermediate rewards and adds the one or more of the intermediate designs to the input sub-space corresponding to the next sub-step. For example, if the current sub-step is sub-step k, one or more of the intermediate designs are added to the input sub-space for sub-step k+1. The intermediate designs added to the input sub-space for sub-step k+1 may later be used as inputs for the k+1 sub-step.</p><p id="p-0039" num="0038">At <b>240</b>, the next sub-step in the sequence is deemed to be the current sub-step. For example, if prior to executing <b>240</b> the current sub-step is sub-step j, after executing step <b>240</b> the current sub-step is deemed to be sub-step j+1. Then, the process proceeds to <b>215</b> and <b>220</b>.</p><p id="p-0040" num="0039">At <b>245</b>, multiple final designs (or multiple final chip designs) are generated by executing the current sub-step (e.g., the final sub-step) based on the selected sets of inputs. Specifically, one run of the current sub-step may be executed against one set of inputs, a second run of the current sub-step may be executed against a second set of inputs, and the like. These runs may be executed in parallel.</p><p id="p-0041" num="0040">At <b>250</b>, final rewards are calculated for the multiple final chip designs. At least one of the final rewards may be calculated using a reward function specific to the current sub-step. For example, an accurate frequency of the chip may be fed to the reward frequency.</p><p id="p-0042" num="0041">At <b>255</b>, the ML engine analyses the final rewards and selects at least one of the chip designs.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart for a design flow method <b>300</b>, in accordance with an embodiment of the present disclosure.</p><p id="p-0044" num="0043">In <b>305</b>, a plurality of intermediate designs for a chip may be generated based on a first plurality of inputs. For example, the plurality of intermediate designs may be generated by executing a first sub-step of a design flow. The first sub-step may be obtained by dividing the design flow into a plurality of sub-steps that includes the first sub-step and a second sub-step. In some aspects, the input space for the design flow is divided into a plurality of input sub-spaces that includes a first sub-space (that corresponds to the first sub-step) and a second sub-space (that corresponds to the second sub-step).</p><p id="p-0045" num="0044">In <b>310</b>, at least one intermediate design of the plurality of intermediate designs are added to a second plurality of inputs. For example, a plurality of intermediate rewards for the plurality of intermediate designs are determined and the at least one intermediate design is selected based on the plurality of intermediate rewards.</p><p id="p-0046" num="0045">In some aspects, the plurality of intermediate rewards are determined based on the estimated metric. The estimated metric may be indicative of a performance of each intermediate design of the plurality of intermediate designs.</p><p id="p-0047" num="0046">In <b>315</b>, a plurality of final designs are generated based on the second plurality of inputs by executing the second sub-step. In some aspects, a plurality of final rewards corresponding to the plurality of final designs may be determined.</p><p id="p-0048" num="0047">In <b>320</b>, a final design may be selected from the plurality of final designs using a machine learning model. In some aspects, the final design is selected based on the plurality of final rewards.</p><p id="p-0049" num="0048">Table 1 shows exemplary test results for a design with and without flow-slicing in accordance with an embodiment of the present disclosure. The results corresponding to the design using flow-slicing show better QoR and are achieved in approximately half the runtime. Flow-slicing improved the aggregate design score (ADES) by about 36%, total negative slack (TNS) by about 18%, total routing DRCs by about 22% and standard cell area by about 1.3%.</p><p id="p-0050" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Exemplary results </entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="63pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="70pt" align="center"/><tbody valign="top"><row><entry/><entry>Without </entry><entry>With </entry><entry>Improvement from </entry></row><row><entry>Metric </entry><entry>flow-slicing </entry><entry>flow-slicing </entry><entry>flow-slicing</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>Runtime </entry><entry>About 14 days </entry><entry>About 7 days </entry><entry>About 50%&#x2009; </entry></row><row><entry>ADES </entry><entry>1.80 </entry><entry>1.15 </entry><entry>About 36%&#x2009; </entry></row><row><entry>TNS </entry><entry>&#x2212;43.9 </entry><entry>&#x2212;37.3 </entry><entry>About 18%&#x2009; </entry></row><row><entry>Total DRC&#x2019;s </entry><entry>555 </entry><entry>430 </entry><entry>About 22%&#x2009; </entry></row><row><entry>Standard cell </entry><entry>123890 </entry><entry>122333 </entry><entry>About 1.3% </entry></row><row><entry>area</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0051" num="0049"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example set of processes <b>400</b> used during the design, verification, and fabrication of an article of manufacture such as an integrated circuit to transform and verify design data and instructions that represent the integrated circuit. Each of these processes can be structured and enabled as multiple modules or operations. The term &#x2018;EDA&#x2019; signifies the term &#x2018;Electronic Design Automation.&#x2019; These processes start with the creation of a product idea <b>410</b> with information supplied by a designer, information which is transformed to create an article of manufacture that uses a set of EDA processes <b>412</b>. When the design is finalized, the design is taped-out <b>434</b>, which is when artwork (e.g., geometric patterns) for the integrated circuit is sent to a fabrication facility to manufacture the mask set, which is then used to manufacture the integrated circuit. After tape-out, a semiconductor die is fabricated <b>436</b> and packaging and assembly processes <b>438</b> are performed to produce the finished integrated circuit <b>440</b>.</p><p id="p-0052" num="0050">Specifications for a circuit or electronic structure may range from low-level transistor material layouts to high-level description languages. A high-level of representation may be used to design circuits and systems, using a hardware description language (&#x2018;HDL&#x2019;) such as VHDL, Verilog, SystemVerilog, SystemC, MyHDL or OpenVera. The HDL description can be transformed to a logic-level register transfer level (&#x2018;RTL&#x2019;) description, a gate-level description, a layout-level description, or a mask-level description. Each lower representation level that is a more detailed description adds more useful detail into the design description, for example, more details for the modules that include the description. The lower levels of representation that are more detailed descriptions can be generated by a computer, derived from a design library, or created by another design automation process. An example of a specification language at a lower level of representation language for specifying more detailed descriptions is SPICE, which is used for detailed descriptions of circuits with many analog components. Descriptions at each level of representation are enabled for use by the corresponding systems of that layer (e.g., a formal verification system). A design process may use a sequence depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The processes described can be enabled by EDA products (or EDA systems).</p><p id="p-0053" num="0051">During system design <b>414</b>, functionality of an integrated circuit to be manufactured is specified. The design may be optimized for desired characteristics such as power consumption, performance, area (physical and/or lines of code), and reduction of costs, etc. Partitioning of the design into different types of modules or components can occur at this stage.</p><p id="p-0054" num="0052">During logic design and functional verification <b>416</b>, modules or components in the circuit are specified in one or more description languages and the specification is checked for functional accuracy. For example, the components of the circuit may be verified to generate outputs that match the requirements of the specification of the circuit or system being designed. Functional verification may use simulators and other programs such as testbench generators, static HDL checkers, and formal verifiers. In some embodiments, special systems of components referred to as &#x2018;emulators&#x2019; or &#x2018;prototyping systems&#x2019; are used to speed up the functional verification.</p><p id="p-0055" num="0053">During synthesis and design for test <b>418</b>, HDL code is transformed to a netlist. In some embodiments, a netlist may be a graph structure where edges of the graph structure represent components of a circuit and where the nodes of the graph structure represent how the components are interconnected. Both the HDL code and the netlist are hierarchical articles of manufacture that can be used by an EDA product to verify that the integrated circuit, when manufactured, performs according to the specified design. The netlist can be optimized for a target semiconductor manufacturing technology. Additionally, the finished integrated circuit may be tested to verify that the integrated circuit satisfies the requirements of the specification.</p><p id="p-0056" num="0054">During netlist verification <b>420</b>, the netlist is checked for compliance with timing constraints and for correspondence with the HDL code. During design planning <b>422</b>, an overall floor plan for the integrated circuit is constructed and analyzed for timing and top-level routing.</p><p id="p-0057" num="0055">During layout or physical implementation <b>424</b>, physical placement (positioning of circuit components such as transistors or capacitors) and routing (connection of the circuit components by multiple conductors) occurs, and the selection of cells from a library to enable specific logic functions can be performed. As used herein, the term &#x2018;cell&#x2019; may specify a set of transistors, other components, and interconnections that provides a Boolean logic function (e.g., AND, OR, NOT, XOR) or a storage function (such as a flipflop or latch). As used herein, a circuit &#x2018;block&#x2019; may refer to two or more cells. Both a cell and a circuit block can be referred to as a module or component and are enabled as both physical structures and in simulations. Parameters are specified for selected cells (based on &#x2018;standard cells&#x2019;) such as size and made accessible in a database for use by EDA products.</p><p id="p-0058" num="0056">During analysis and extraction <b>426</b>, the circuit function is verified at the layout level, which permits refinement of the layout design. During physical verification <b>428</b>, the layout design is checked to ensure that manufacturing constraints are correct, such as DRC constraints, electrical constraints, lithographic constraints, and that circuitry function matches the HDL design specification. During resolution enhancement <b>430</b>, the geometry of the layout is transformed to improve how the circuit design is manufactured.</p><p id="p-0059" num="0057">During tape-out, data is created to be used (after lithographic enhancements are applied if appropriate) for production of lithography masks. During mask data preparation <b>432</b>, the &#x2018;tape-out&#x2019; data is used to produce lithography masks that are used to produce finished integrated circuits.</p><p id="p-0060" num="0058">A storage subsystem of a computer system (such as computer system <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>) may be used to store the programs and data structures that are used by some or all of the EDA products described herein, and products used for development of cells for the library and for physical and logical design that use the library.</p><p id="p-0061" num="0059"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example machine of a computer system <b>500</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative implementations, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the Internet. The machine may operate in the capacity of a server or a client machine in client-server network environment, as a peer machine in a peer-to-peer (or distributed) network environment, or as a server or a client machine in a cloud computing infrastructure or environment.</p><p id="p-0062" num="0060">The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p><p id="p-0063" num="0061">The example computer system <b>500</b> includes a processing device <b>502</b>, a main memory <b>504</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), a static memory <b>506</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device <b>518</b>, which communicate with each other via a bus <b>530</b>.</p><p id="p-0064" num="0062">Processing device <b>502</b> represents one or more processors such as a microprocessor, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>502</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>502</b> may be configured to execute instructions <b>526</b> for performing the operations and steps described herein.</p><p id="p-0065" num="0063">The computer system <b>500</b> may further include a network interface device <b>508</b> to communicate over the network <b>520</b>. The computer system <b>500</b> also may include a video display unit <b>510</b> (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device <b>512</b> (e.g., a keyboard), a cursor control device <b>514</b> (e.g., a mouse), a graphics processing unit <b>522</b>, a signal generation device <b>516</b> (e.g., a speaker), graphics processing unit <b>522</b>, video processing unit <b>528</b>, and audio processing unit <b>532</b>.</p><p id="p-0066" num="0064">The data storage device <b>518</b> may include a machine-readable storage medium <b>524</b> (also known as a non-transitory computer-readable medium) on which is stored one or more sets of instructions <b>526</b> or software embodying any one or more of the methodologies or functions described herein. The instructions <b>526</b> may also reside, completely or at least partially, within the main memory <b>504</b> and/or within the processing device <b>502</b> during execution thereof by the computer system <b>500</b>, the main memory <b>504</b> and the processing device <b>502</b> also constituting machine-readable storage media.</p><p id="p-0067" num="0065">In some implementations, the instructions <b>526</b> include instructions to implement functionality corresponding to the present disclosure. While the machine-readable storage medium <b>524</b> is shown in an example implementation to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine and the processing device <b>502</b> to perform any one or more of the methodologies of the present disclosure. The term &#x201c;machine-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.</p><p id="p-0068" num="0066">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm may be a sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Such quantities may take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. Such signals may be referred to as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0069" num="0067">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the present disclosure, it is appreciated that throughout the description, certain terms refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.</p><p id="p-0070" num="0068">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the intended purposes, or it may include a computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0071" num="0069">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various other systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.</p><p id="p-0072" num="0070">The present disclosure may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory devices, etc.</p><p id="p-0073" num="0071">In the foregoing disclosure, implementations of the disclosure have been described with reference to specific example implementations thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of implementations of the disclosure as set forth in the following claims. Where the disclosure refers to some elements in the singular tense, more than one element can be depicted in the figures and like elements are labeled with like numerals. The disclosure and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>generating a plurality of intermediate designs for a chip by executing a first sub-step based on a first plurality of inputs, wherein the first sub-step is a sub-step of a step of a design flow and the first plurality of inputs corresponds to input parameters associated with the first sub-step;</claim-text><claim-text>adding, by a processor, at least one intermediate design of the plurality of intermediate designs to a second plurality of inputs;</claim-text><claim-text>generating, by the processor, a plurality of final designs by executing a second sub-step of the step of the design flow based on the second plurality of inputs; and</claim-text><claim-text>selecting, by the processor using a machine learning model, a final design from the plurality of final designs.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>dividing the step of the design flow into a plurality of sub-steps comprising the first sub-step and the second sub-step; and</claim-text><claim-text>dividing an input space for the design flow into a plurality of input sub-spaces comprising a first input sub-space and a second input sub-space.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining a plurality of intermediate rewards for the plurality of intermediate designs; and</claim-text><claim-text>selecting the at least one intermediate design based on the plurality of intermediate rewards.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>estimating a metric indicative of a performance of each intermediate design of the plurality of intermediate designs; and</claim-text><claim-text>determining the plurality of intermediate rewards based on the estimated metric.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>calculating a plurality of final rewards corresponding to the plurality of final designs; and</claim-text><claim-text>selecting the final design based on the plurality of final rewards.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first plurality of inputs is from a first input sub-space corresponding to the first sub-step.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the design flow is a physical implementation flow and wherein the first sub-step is place, clock, or route.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A system, comprising:<claim-text>a memory storing instructions; and</claim-text><claim-text>a processor, coupled with the memory and to execute the instructions, the instructions when executed cause the processor to:</claim-text><claim-text>generate a plurality of intermediate designs for a chip by executing a first sub-step of a design flow based on a first plurality of inputs, wherein the first sub-step is a sub-step of a step of a design flow and the first plurality of inputs corresponds to input parameters associated with the first sub-step;</claim-text><claim-text>add at least one intermediate design of the plurality of intermediate designs to a second plurality of inputs;</claim-text><claim-text>generate a plurality of final designs by executing a second sub-step of the step of the design flow based on the second plurality of inputs; and</claim-text><claim-text>select using a machine learning model a final design from the plurality of final designs.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>divide the step of the design flow into a plurality of sub-steps comprising the first sub-step and the second sub-step; and</claim-text><claim-text>divide an input space for the design flow into a plurality of input sub-spaces comprising a first input sub-space and a second input sub-space.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>determine a plurality of intermediate rewards for the plurality of intermediate designs; and</claim-text><claim-text>select the at least one intermediate design based on the plurality of intermediate rewards.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processor is further configured to:<claim-text>estimate a metric indicative of a performance of each intermediate design of the plurality of intermediate designs; and</claim-text><claim-text>determine the plurality of intermediate rewards based on the estimated metric.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>calculate a plurality of final rewards corresponding to the plurality of final designs; and</claim-text><claim-text>select the final design based on the plurality of final rewards.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first plurality of inputs is from a first input sub-space corresponding to the first sub-step.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the design flow is a physical implementation flow and wherein the first sub-step is place, clock, or route.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium comprising stored instructions, the instructions, which when executed by a processor, cause the processor to:<claim-text>divide a step of a design flow for a chip into a plurality of sub-steps;</claim-text><claim-text>divide an input space for the design flow into a plurality of input sub-spaces, wherein each input sub-space corresponds to a sub-step of the plurality of sub-steps;</claim-text><claim-text>generate a plurality of intermediate designs for the chip by executing the sub-step of the plurality of sub-steps based on a first plurality of inputs selected from a corresponding input sub-space;</claim-text><claim-text>select using a machine learning model an intermediate design from the plurality of intermediate designs; and</claim-text><claim-text>select using the machine learning model a final design for the chip based on at least the intermediate design.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processor is further configured to:<claim-text>determine a plurality of intermediate rewards for the plurality of intermediate designs; and</claim-text><claim-text>select the intermediate design based on the plurality of intermediate rewards.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the processor is further configured to:<claim-text>estimate a metric indicative of a performance of each intermediate design of the plurality of intermediate designs; and</claim-text><claim-text>determine the plurality of intermediate rewards based on the estimated metric.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the plurality of sub-steps are in a sequential order and wherein the processor is further configured to:<claim-text>generate a plurality of final designs by executing a last sub-step of the plurality of sub-steps;</claim-text><claim-text>calculate a plurality of final rewards corresponding to the plurality of final designs; and</claim-text><claim-text>select the final design based on the plurality of final rewards.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor is further configured to:<claim-text>identify an input sub-space from the plurality of input sub-spaces based on the plurality of final rewards.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the processor is further configured to:<claim-text>execute a plurality of runs for each sub-step of the plurality of sub-steps.</claim-text></claim-text></claim></claims></us-patent-application>