<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006816A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006816</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943574</doc-number><date>20220913</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>088</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3247</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Batch Transfer of Control of Memory Devices over Computer Networks</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17150849</doc-number><date>20210115</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11483148</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17943574</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Nelson</last-name><first-name>Travis Duane</first-name><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Dover</last-name><first-name>Lance W.</first-name><address><city>Fair Oaks</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system, method and apparatus to control memory devices over computer networks. For example, a server system establishes a secure authenticated connection with a client computer system to receive a request having a batch identification that is configured in the server system to identify a batch of multiple memory devices. After determining that the client computer system is eligible to control the multiple memory devices in the batch, the server system transmits to the client computer system a response. The response contains control data for each respective memory device in the batch. The control data is based on at least a cryptographic key stored in the server system in association with the respective memory device. Using the control data the client computer system submits a command with a digital signature to the respective memory device, which validates the digital signature prior to execution of the command.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="188.89mm" wi="158.75mm" file="US20230006816A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="202.95mm" wi="168.99mm" file="US20230006816A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="224.37mm" wi="148.51mm" file="US20230006816A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="177.55mm" wi="111.76mm" file="US20230006816A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.96mm" wi="165.78mm" file="US20230006816A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="224.96mm" wi="165.78mm" file="US20230006816A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="164.85mm" wi="143.59mm" file="US20230006816A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="196.60mm" wi="165.78mm" file="US20230006816A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="218.86mm" wi="149.86mm" file="US20230006816A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="179.58mm" wi="172.13mm" file="US20230006816A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation application of U.S. patent application Ser. No. 17/150,849 filed Jan. 15, 2021, the entire disclosures of which application are hereby incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">At least some embodiments disclosed herein relate to computer security in general, and more particularly, but not limited to control of security operations of memory devices.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A memory sub-system can include one or more memory devices that store data. The memory devices can be, for example, non-volatile memory devices and volatile memory devices. In general, a host system can utilize a memory sub-system to store data at the memory devices and to retrieve data from the memory devices.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a server system configured to control memory devices according to one embodiment.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example computing system having a memory sub-system in accordance with some embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an integrated circuit memory device having a security manager according to one embodiment.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a technique to authenticate a memory device according to one embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a technique to generate a command to control security operations of a memory device according to one embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a technique to group memory devices in a batch to transfer control according to one embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a technique to batch transfer control of memory devices over computer networks according to one embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a method to control a memory device according to one embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram of an example computer system in which embodiments of the present disclosure can operate.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">At least some aspects of the present disclosure are directed to a server system configured to control memory devices, such as the activation of security features of the memory devices, transfer of privileges of instructing memory devices to perform security operations, etc.</p><p id="p-0016" num="0015">A memory device can be manufactured to include a security manager. The security manager can be activated to exercise control over access to memory cells in the memory device. The access control can be implemented using cryptographic techniques. For example, an entity in possession of a cryptographic key can be provided with privileges of instructing the memory device to perform restricted operations. Examples of such operations can include changing a security setting or configuration of the memory device, reading a portion of the memory cells in the memory device, writing data into a portion of the memory cells, deleting data from a portion of the memory cells, updating data in a portion of the memory cells, etc. It is a challenge to secure cryptographic keys used in the access control and to secure the transfer of the privileges.</p><p id="p-0017" num="0016">At least some aspects of the present disclosure address the above and other deficiencies and/or challenges by a server system having a key management server and an access control server.</p><p id="p-0018" num="0017">The key management server is configured to secure cryptographic keys and secure computations involving the cryptographic keys. The key management server implements operations involving cryptographic keys that are not specific to memory devices and clients. Thus, the functionality of the key management server can be limited, simplified, and/or standardized to improve security.</p><p id="p-0019" num="0018">The access control server stores client information and is configured to perform computations and/or security tasks specific to different clients and/or different memory devices. The access control server is configured between the key management server and client computer systems to which memory devices are connected. Client computer systems request the access control server to provide responses that involve the cryptographic keys stored in the key management server. The access control server processes the requests to determine whether to use the service of the key management server to generate responses. The access control system can function as a gatekeeper and/or proxy for the key management server, rejecting connections from computer systems that are not whitelisted, protecting the key management server from deny of service (DoS) attacks, and implementing operations that are client/device specific using the cryptographic key management functionality of the key management server. By controlling access to the key management server, the access control server can reduce security risks to the key management server and provide rich services to accommodate various types of memory devices, control activities, and client preferences.</p><p id="p-0020" num="0019">A memory device can be configured to have an unique identity. The identity can be authenticated using cryptographic techniques to prevent counterfeit devices and/or tampered devices from accessing services and prevent insecure operations. The identity can be generated based on the hardware of the memory device and selected data stored in the memory device to represent the combination of the hardware and software of the memory device as a whole. Further, the memory device can be configured to provide, to entities in possession of one or more cryptographic keys, the privileges of requesting the memory device to execute commands relevant on secured aspects of the memory device. The key management server can be used in the validation of the unique identity of the memory device and in the transfer of the privileges.</p><p id="p-0021" num="0020">For example, a memory device can store a secret for its authentication. During the manufacture of the memory device in a secure facility, a unique device secret (UDS) can be injected in the memory device and stored in a protected and access-controlled area of the memory device. According to standards and/or implementations of device identity composition engine (DICE) and the robust internet-of-things (RIoT), a cryptographic key can be generated, at boot time, based on a combination of the unique device secret (UDS) and other non-secret data stored in the secure memory device. The cryptographic key can then be used as a secret and an identity of the memory device.</p><p id="p-0022" num="0021">During the manufacture of the memory device in the secure facility, the unique device secret (UDS) of the memory device is registered in the key management server. Subsequently, after the memory device is shipped from the manufacturer of memory devices, the unique device secret (UDS) is not exported, provided, communicated by the memory device outside of a secure section of the memory device and/or not outside of the memory device. Since the unique device secret (UDS) is known between the memory device and the key management server, both the memory device <b>130</b> and the key management server can perform the same computations that use the unique device secret (UDS) to generate a cryptographic key. The cryptographic key derived based at least in part on the unique device secret (UDS) for the authentication of the memory device.</p><p id="p-0023" num="0022">For example, authentication of the memory device can be performed through the verification that the memory device has the cryptographic key and thus the unique device secret and stores an untampered version of non-secret data. The memory device can digitally sign a certificate or message using the cryptographic key. If it can be verified that the digital signature has been created using the cryptographic key, the memory device is seen to be in possession of the cryptographic key and thus have the identity representative of and associated with the unique device secret.</p><p id="p-0024" num="0023">Digital authentication of a message can be achieved by applying cryptographic functions to the message and using a cryptographic key. For example, symmetric cryptography and/or asymmetric cryptography can rely on hashes as the content that is signed digitally using the cryptographic key. For example, the signing using symmetric cryptography can be performed by creating a message authentication code (MAC) (e.g., a hash-based message authentication code (HMAC) or a cipher-based message authentication code (CMAC)). For example, the signing using asymmetric cryptography can be performed by creating a digital signature (e.g., using digital signature algorithm (DSA) or elliptic curve digital signature algorithm (ECDSA)). Cryptographic functions can include hashing and encryption, which are typically used to generate a header added to the message for authentication. The header can be a hash digest, when using symmetric cryptography, or a digital signature when applying asymmetric cryptography. The recipient of the message can then apply similar cryptographic functions to the received message and use a cryptographic key to authenticate that the message's content was sent by a trusted party, owning the appropriate cryptographic key. For example, the encrypted hash value in the header can be decrypted for comparison with a hash value calculated independently from the message. If there is a match between the hash value calculated from the message and the hash value recovered from decrypting the header (e.g., the digital signature and/or the hash digest), the integrity of the message can be confirmed in view of the hash value; and the header can be seen to have been created using the cryptographic key.</p><p id="p-0025" num="0024">Cryptographic keys generated at boot time can be used to sign certificates at boot time and immediately discarded to safeguard their secrecy. Alternatively, keys generated at boot time can be kept in memory to be used later at runtime. In some cases, the cryptographic keys used at boot time are referred to as DICE device ID keys and the keys used at runtime are referred to as DICE alias keys. In some cases, the device ID private key can be used to sign a certificate including the alias public key to attest that the alias key was generated from the memory device.</p><p id="p-0026" num="0025">In some arrangements, at least some of the security features of a memory device is initially deactivated when the memory device is shipped from a facility manufacturing memory devices to an original equipment manufacturer (OEM) of a computing device in which memory devices are installed. A command can be provided to the memory device to activate the inactive security features.</p><p id="p-0027" num="0026">The privilege of having the command to be accepted by a memory device for execution can be associated with a cryptographic key. When the memory device verifies that the command is digitally signed via the correct cryptographic key, the memory device executes the command; otherwise, the memory device can reject or ignore the command. Various commands to activate or deactivate security features, or to read, write, update, delete, and/or modify a secure section of memory cells can be configured to require privileges based on relevant cryptographic keys.</p><p id="p-0028" num="0027">For example, a memory device is configured to store a cryptographic key for the verification of the privilege of an entity in requesting the memory device to execute a command. The privilege can be verified by checking, using the cryptographic key, whether the command is signed by using a corresponding cryptographic key. When symmetric cryptography is used, the command is to be signed using the same cryptographic key stored in the memory device for verification of the privilege. When asymmetric cryptography is used, the command is to be signed using a private key associated with the public key stored in the memory device for verification of the privilege.</p><p id="p-0029" num="0028">At least some privileges to operate a memory device can be initially provided to the manufacturer of the memory device. For example, the memory device can be manufactured to store a public key of the manufacturer to allow privilege to be checked by the memory device through validation of a digital signature applied on a command using a corresponding private key of the manufacturer. Alternatively, when symmetric cryptography is used, the memory device is manufactured to store a secret cryptographic key known to the memory device and the manufacturer for digital signature validation.</p><p id="p-0030" num="0029">A privilege can be transferred from the manufacturer of the memory device to another entity, such as a manufacturer of a computing device in which the memory device is installed. The transfer can be accomplished by replacing the corresponding cryptographic key stored in the memory device, or by providing the secret key usable to sign the command.</p><p id="p-0031" num="0030">The access control server can use the services of the key management server to securely verify the identity of the memory device, to sign commands that requires privileges, and/or to transfer privileges.</p><p id="p-0032" num="0031">For example, a set of privileges can be assigned to an entity considered as the owner of a memory device. The owner privileges can be verified via a cryptographic key stored within the memory device. Examples of such privileges can be required for activating security features of the memory device, updating an identity of the memory device (e.g., based on updated non-secure data stored in the memory device), and transferring the owner privileges to another entity, such as the manufacturer of a computing device in which the memory device is installed. A current owner of the memory device may digitally sign the privileged commands to request their execution in the memory device.</p><p id="p-0033" num="0032">Ownership privileges can be further required for deactivating selected security features, managing cryptographic key in the memory device to authenticate users authorized to use one or more secure sections in the memory device, and/or managing the identity of the memory device and/or the computing device generated based at least in part on the unique device secret of the memory device.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a server system <b>102</b> configured to control memory devices according to one embodiment. The server system <b>102</b> includes a key management server <b>103</b> and an access control server <b>101</b>.</p><p id="p-0035" num="0034">In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the key management server <b>103</b> is configured to store data associating cryptographic keys <b>124</b> with unique identifications <b>122</b>.</p><p id="p-0036" num="0035">For example, the cryptographic keys <b>124</b> can be configured for the operations of a security manager <b>113</b> of a memory device <b>130</b>. The security manager <b>113</b> can have a unique device secret (UDS) that is registered into the key management server <b>103</b> during the manufacture of the memory device <b>130</b> in a secure facility. A cryptographic operation demonstrating that the memory device <b>130</b> is in possession of the unique device secret (UDS) can be viewed as validation that the memory device <b>130</b> is authentic.</p><p id="p-0037" num="0036">The cryptographic keys <b>124</b> stored in the key management server <b>103</b> for the memory device <b>130</b> can include the unique device secret (UDS). Further, the cryptographic keys <b>124</b> can include data that can be combined with the unique device secret (UDS) to generate derived cryptographic keys <b>124</b>. Such data used to generate derived cryptographic keys <b>124</b> can include non-secret data, such as the hash value obtained from applying a cryptographic hash function to a set of data and/or instructions stored, or to be stored, in the memory device <b>130</b>. The cryptographic keys <b>124</b> can include derived cryptographic keys <b>124</b> that are generated using the unique device secret (UDS) and the non-secret data. The memory device <b>130</b> and the key management server <b>103</b> are configured to generate the same derived cryptographic keys <b>124</b> based on the unique device secret (UDS) and other data (e.g., the non-secret data). Since the memory device <b>130</b> and the key management server <b>103</b> can independently generate the same derived keys, no communication of the unique device secret (UDS) outside of the memory device <b>130</b> and the key management server <b>103</b> is performed for the authentication of the identity of the memory device <b>130</b>. Such an arrangement improves security.</p><p id="p-0038" num="0037">The memory device <b>130</b> can demonstrate that it is in possession of the unique device secret (UDS), known to the key management server <b>103</b>, by showing that it has a secret cryptographic key <b>124</b> that is derived based at least in part on the unique device secret (UDS) of the memory device <b>130</b>. For example, the secret cryptographic key can be used to generate a digital signature applied on a message; and the key management server <b>103</b> can use a corresponding key to verify that the digital signature is applied using the secret cryptographic key derived from the unique device secret (UDS) of the memory device <b>130</b>. The corresponding key can be the same secret cryptographic key <b>124</b> using symmetric cryptography, or a public key corresponding to the secret, private key using asymmetric cryptography. The digital signature can be in the form of a hash-based message authentication code (HMAC), or in the form of an encrypted hash of the message being signed.</p><p id="p-0039" num="0038">In general, a secret key can be a symmetric cryptographic key used in symmetric cryptography where both encryption and decryption are configured to use the same key. Alternatively, the secret key can be one of a pair of keys used in asymmetric cryptography where encryption performed using one key is to be decrypted using the other key but not decryptable using the same key that used in encryption; and it is generally impractical to determine one key from the other key in the pair. Thus, one of the key pair can be used as a secret and thus a private key; and the other key can be revealed as a public key. Using the public key, an entity does not have the private key can verify whether the cipher text is generated using the corresponding private key.</p><p id="p-0040" num="0039">The memory device <b>130</b> can include an unique identification (UID) <b>122</b> that uniquely identify the memory device <b>130</b> from other memory devices in a population. For example, the unique identification (UID) <b>122</b> of the memory device <b>130</b> can include a manufacturer part number (MPN) of the memory device <b>130</b> and/or a serial number of the memory device <b>130</b>. For example, the unique identification (UID) <b>122</b> of the memory device <b>130</b> can include a public key in a pair of asymmetric cryptographic keys generated based at least in part on the unique device secret.</p><p id="p-0041" num="0040">After the memory device <b>130</b> is connected to a client computer system <b>105</b>, the client computer system <b>105</b> may initiate one or more operations that rely upon the cryptographic keys <b>124</b> that is stored in the key management server <b>103</b> in association with the unique identification (UID) <b>122</b> of the memory device <b>130</b>.</p><p id="p-0042" num="0041">For example, the client computer system <b>105</b> may request the verification of the identity of the memory device <b>130</b> as represented by a unique device secret (UDS) or a secret key of the memory device <b>130</b>. The client computer system <b>105</b> can request the memory device <b>130</b> to provide identity data that includes the unique identification (UID) <b>122</b> of the memory device <b>130</b>, and a digital signature applied on a message included in the identity data using a secret key of the memory device <b>130</b>. For example, the message can include the unique identification (UID) <b>122</b>, a cryptographic nonce, and a counter value. The identity data can be transmitted to the key management server <b>103</b> for authentication using a corresponding cryptographic key <b>124</b> associated with the unique identification (UID) <b>122</b> of the memory device <b>130</b>.</p><p id="p-0043" num="0042">In the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the access control server <b>101</b> is configured between the client computer system <b>105</b> and the key management server <b>103</b>. The access control server <b>101</b> stores client privilege data <b>127</b> and memory device permission data <b>129</b>.</p><p id="p-0044" num="0043">For example, the client privilege data <b>127</b> can include a whitelist of the internet protocol (IP) addresses of client computer systems (e.g., <b>105</b>, . . . , <b>106</b>) that are allowed to access the functionality of the key management server <b>103</b>. When a computer system that is not on the whitelist sends a request to the access control server <b>101</b>, the access control server <b>101</b> can drop or ignore the request. The access control server <b>101</b> can be configured to prevent deny of service (DoS) attacks on the key management server <b>103</b>.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates the use of one access control server <b>101</b> that is configured to allow a set of client computer systems (e.g., <b>105</b>, . . . , <b>106</b>) to use the functionality of the key management server <b>103</b>. In general, a plurality of access control servers <b>101</b> can be configured to allow different sets of client computer systems to access the key management server <b>103</b>. In some implementations, a client computer system <b>105</b> can use one or more of the multiple access control servers (e.g., <b>101</b>) to access the functionality of the key management server <b>103</b>.</p><p id="p-0046" num="0045">The access control server <b>101</b> and the client computer system <b>105</b> can establish a secure authenticated connection <b>201</b> over a non-secure communication media, such as the internet. For example, the access control server <b>101</b> is configured to authenticate the identity of the client computer system <b>105</b> based on a certificate <b>121</b> of the client computer system <b>105</b>; and the client computer system <b>105</b> is configured to authenticate the identity of the access control server <b>101</b> based on a certificate <b>123</b> of the access control server <b>101</b>. For example, a public key of the access control server <b>101</b> can be used by the client computer system <b>105</b> to verify that the access control server <b>101</b> is in possession of the private key associated with the public key; and a public key of the client computer system <b>105</b> can be used by the access control server <b>101</b> to verify that the client computer system <b>105</b> is in possession of the private key associated with the public key. The client computer system <b>105</b> and the access control server <b>101</b> can negotiate a session key for the encryption of the messages transmitted between the client computer system <b>105</b> and the access control server <b>101</b> during a communication session.</p><p id="p-0047" num="0046">The memory device permission data <b>129</b> stored in the access control system <b>101</b> indicates whether the client computer system <b>105</b> has legitimate reasons to access the key management server <b>103</b> for the memory device <b>130</b> identified by its unique identification (UID) <b>122</b>. Optionally, the permission data <b>129</b> indicates whether the client computer system <b>105</b> has legitimate reasons to access the key management server <b>103</b> for one or more memory devices (e.g., <b>130</b>) without specifically and/or individually identifying the respective memory devices (e.g., <b>130</b>) by their unique identifications. In some implementations, the permission data <b>129</b> indicates whether the client computer system <b>105</b> has legitimate reasons to access the key management server <b>103</b> for a specific batch or group of memory devices (e.g., <b>130</b>) identified using a batch or group identification.</p><p id="p-0048" num="0047">For example, if the memory device <b>130</b> is purchased by an entity operating the client computer system <b>105</b>, the memory device permission data <b>129</b> indicates that the ownership privileges in operating the memory device <b>130</b> can be transferred to the entity via the client computer system <b>105</b>. Thus, a request to operate on the memory device <b>130</b> can be accepted and serviced using the functionality of the key management server <b>103</b>. For example, such a request can be made to verify the authenticity of the memory device <b>130</b>, to activate security features of the memory device <b>130</b>, to replace and/or install some of the cryptographic keys <b>124</b> in the memory device <b>130</b>, to access a secure portion of memory cells <b>107</b> of the memory device <b>130</b>, etc. However, if the unique identification (UID) <b>122</b> of the memory device <b>130</b> is not associated with the client computer system <b>105</b> in the memory device permission data <b>129</b>, the request can be dropped or rejected.</p><p id="p-0049" num="0048">In some implementations, the key management server <b>103</b> and the access control server <b>101</b> may also communicate over a non-secure communication media, such as the internet. The key management server <b>103</b> and the access control server <b>101</b> can establish secure authenticated connection <b>203</b> using their respective certificates (e.g., <b>123</b> and <b>125</b>).</p><p id="p-0050" num="0049">Optionally, the key management server <b>103</b> and the access control server <b>101</b> can be connected using dedicated communication connections and/or configured for improved security within an intranet.</p><p id="p-0051" num="0050">The access control server <b>101</b> can request the key management server <b>103</b> to determine whether a digital signature from the memory device <b>130</b> is signed using a cryptographic key <b>124</b> derived from a unique device secret of the UID <b>122</b> of the memory device <b>130</b>.</p><p id="p-0052" num="0051">Optionally, the access control server <b>101</b> can request the key management server <b>103</b> to generate a digital signature on a message or command.</p><p id="p-0053" num="0052">For example, the key management server <b>103</b> can store a private key representative of a current holder of a privilege to operate the memory device <b>130</b>; and after verifying that the memory device <b>130</b> is authentic and the client computer system <b>105</b> is eligible to request the transfer of the privilege, the access control server <b>101</b> can request the key management server <b>103</b> to sign a command using the private key representative of the current holder of the privilege, such as a privilege to configure security operations of the memory device <b>130</b>. The command can be configured to change or replace a portion of data used in the memory device <b>130</b> to generate identity data of the memory device <b>130</b>, to change or update a public key of a holder of a privilege, to add or change a public key of an authorized user to perform a restricted operations in a section of the memory cells <b>107</b>. Examples of restricted operations include reading, writing, erasing, and/or updating data in a section of memory cells <b>107</b> in the memory device <b>130</b>.</p><p id="p-0054" num="0053">The memory device <b>130</b> can be used as a storage device and/or a memory module of a host system. Examples of storage devices and memory modules are described below in conjunction with <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In general, a host system can utilize a memory sub-system that includes one or more components, such as memory devices <b>130</b> that store data. The host system can provide data to be stored at the memory sub-system and can request data to be retrieved from the memory sub-system.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example computing system <b>100</b> that includes a memory sub-system <b>110</b> in accordance with some embodiments of the present disclosure. The memory sub-system <b>110</b> can include media, such as one or more volatile memory devices (e.g., memory device <b>140</b>), one or more non-volatile memory devices (e.g., memory device <b>130</b>), or a combination of such.</p><p id="p-0056" num="0055">A memory sub-system <b>110</b> can be a storage device, a memory module, or a hybrid of a storage device and memory module. Examples of a storage device include a solid-state drive (SSD), a flash drive, a universal serial bus (USB) flash drive, an embedded multi-media controller (eMMC) drive, a universal flash storage (UFS) drive, a secure digital (SD) card, and a hard disk drive (HDD). Examples of memory modules include a dual in-line memory module (DIMM), a small outline DIMM (SO-DIMM), and various types of non-volatile dual in-line memory module (NVDIMM).</p><p id="p-0057" num="0056">The computing system <b>100</b> can be a computing device such as a desktop computer, a laptop computer, a network server, a mobile device, a vehicle (e.g., airplane, drone, train, automobile, or other conveyance), an internet of things (IoT) enabled device, an embedded computer (e.g., one included in a vehicle, industrial equipment, or a networked commercial device), or such a computing device that includes memory and a processing device.</p><p id="p-0058" num="0057">The computing system <b>100</b> can include a host system <b>120</b> that is coupled to one or more memory sub-systems <b>110</b>. <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates one example of a host system <b>120</b> coupled to one memory sub-system <b>110</b>. As used herein, &#x201c;coupled to&#x201d; or &#x201c;coupled with&#x201d; generally refers to a connection between components, which can be an indirect communicative connection or direct communicative connection (e.g., without intervening components), whether wired or wireless, including connections such as electrical, optical, magnetic, etc.</p><p id="p-0059" num="0058">The host system <b>120</b> can include a processor chipset (e.g., processing device <b>118</b>) and a software stack executed by the processor chipset. The processor chipset can include one or more cores, one or more caches, a memory controller (e.g., controller <b>116</b>) (e.g., NVDIMM controller), and a storage protocol controller (e.g., PCIe controller, SATA controller). The host system <b>120</b> uses the memory sub-system <b>110</b>, for example, to write data to the memory sub-system <b>110</b> and read data from the memory sub-system <b>110</b>.</p><p id="p-0060" num="0059">The host system <b>120</b> can be coupled to the memory sub-system <b>110</b> via a physical host interface. Examples of a physical host interface include, but are not limited to, a serial advanced technology attachment (SATA) interface, a peripheral component interconnect express (PCIe) interface, a universal serial bus (USB) interface, a fibre channel, a serial attached SCSI (SAS) interface, a double data rate (DDR) memory bus interface, a small computer system interface (SCSI), a dual in-line memory module (DIMM) interface (e.g., DIMM socket interface that supports double data rate (DDR)), an open NAND flash interface (ONFI), a double data rate (DDR) interface, a low power double data rate (LPDDR) interface, or any other interface. The physical host interface can be used to transmit data between the host system <b>120</b> and the memory sub-system <b>110</b>. The host system <b>120</b> can further utilize an NVM express (NVMe) interface to access components (e.g., memory devices <b>130</b>) when the memory sub-system <b>110</b> is coupled with the host system <b>120</b> by the PCIe interface. The physical host interface can provide an interface for passing control, address, data, and other signals between the memory sub-system <b>110</b> and the host system <b>120</b>. <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a memory sub-system <b>110</b> as an example. In general, the host system <b>120</b> can access multiple memory sub-systems via a same communication connection, multiple separate communication connections, and/or a combination of communication connections.</p><p id="p-0061" num="0060">The processing device <b>118</b> of the host system <b>120</b> can be, for example, a microprocessor, a central processing unit (CPU), a processing core of a processor, an execution unit, etc. In some instances, the controller <b>116</b> can be referred to as a memory controller, a memory management unit, and/or an initiator. In one example, the controller <b>116</b> controls the communications over a bus coupled between the host system <b>120</b> and the memory sub-system <b>110</b>. In general, the controller <b>116</b> can send commands or requests to the memory sub-system <b>110</b> for desired access to memory devices <b>130</b>, <b>140</b>. The controller <b>116</b> can further include interface circuitry to communicate with the memory sub-system <b>110</b>. The interface circuitry can convert responses received from memory sub-system <b>110</b> into information for the host system <b>120</b>.</p><p id="p-0062" num="0061">The controller <b>116</b> of the host system <b>120</b> can communicate with controller <b>115</b> of the memory sub-system <b>110</b> to perform operations such as reading data, writing data, or erasing data at the memory devices <b>130</b>, <b>140</b> and other such operations. In some instances, the controller <b>116</b> is integrated within the same package of the processing device <b>118</b>. In other instances, the controller <b>116</b> is separate from the package of the processing device <b>118</b>. The controller <b>116</b> and/or the processing device <b>118</b> can include hardware such as one or more integrated circuits (ICs) and/or discrete components, a buffer memory, a cache memory, or a combination thereof. The controller <b>116</b> and/or the processing device <b>118</b> can be a microcontroller, special purpose logic circuitry (e.g., a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc.), or another suitable processor.</p><p id="p-0063" num="0062">The memory devices <b>130</b>, <b>140</b> can include any combination of the different types of non-volatile memory components and/or volatile memory components. The volatile memory devices (e.g., memory device <b>140</b>) can be, but are not limited to, random access memory (RAM), such as dynamic random access memory (DRAM) and synchronous dynamic random access memory (SDRAM).</p><p id="p-0064" num="0063">Some examples of non-volatile memory components include a negative-and (or, NOT AND) (NAND) type flash memory and write-in-place memory, such as three-dimensional cross-point (&#x201c;3D cross-point&#x201d;) memory. A cross-point array of non-volatile memory can perform bit storage based on a change of bulk resistance, in conjunction with a stackable cross-gridded data access array. Additionally, in contrast to many flash-based memories, cross-point non-volatile memory can perform a write in-place operation, where a non-volatile memory cell can be programmed without the non-volatile memory cell being previously erased. NAND type flash memory includes, for example, two-dimensional NAND (2D NAND) and three-dimensional NAND (3D NAND).</p><p id="p-0065" num="0064">Each of the memory devices <b>130</b> can include one or more arrays of memory cells. One type of memory cell, for example, single level cells (SLC) can store one bit per cell. Other types of memory cells, such as multi-level cells (MLCs), triple level cells (TLCs), quad-level cells (QLCs), and penta-level cells (PLCs) can store multiple bits per cell. In some embodiments, each of the memory devices <b>130</b> can include one or more arrays of memory cells such as SLCs, MLCs, TLCs, QLCs, PLCs, or any combination of such. In some embodiments, a particular memory device can include an SLC portion, an MLC portion, a TLC portion, a QLC portion, and/or a PLC portion of memory cells. The memory cells of the memory devices <b>130</b> can be grouped as pages that can refer to a logical unit of the memory device used to store data. With some types of memory (e.g., NAND), pages can be grouped to form blocks.</p><p id="p-0066" num="0065">Although non-volatile memory devices such as 3D cross-point type and NAND type memory (e.g., 2D NAND, 3D NAND) are described, the memory device <b>130</b> can be based on any other type of non-volatile memory, such as read-only memory (ROM), phase change memory (PCM), self-selecting memory, other chalcogenide based memories, ferroelectric transistor random-access memory (FeTRAM), ferroelectric random access memory (FeRAM), magneto random access memory (MRAM), spin transfer torque (STT)-MRAM, conductive bridging RAM (CBRAM), resistive random access memory (RRAM), oxide based RRAM (OxRAM), negative-or (NOR) flash memory, and electrically erasable programmable read-only memory (EEPROM).</p><p id="p-0067" num="0066">A memory sub-system controller <b>115</b> (or controller <b>115</b> for simplicity) can communicate with the memory devices <b>130</b> to perform operations such as reading data, writing data, or erasing data at the memory devices <b>130</b> and other such operations (e.g., in response to commands scheduled on a command bus by controller <b>116</b>). The controller <b>115</b> can include hardware such as one or more integrated circuits (ICs) and/or discrete components, a buffer memory, or a combination thereof. The hardware can include digital circuitry with dedicated (e.g., hard-coded) logic to perform the operations described herein. The controller <b>115</b> can be a microcontroller, special purpose logic circuitry (e.g., a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), etc.), or another suitable processor.</p><p id="p-0068" num="0067">The controller <b>115</b> can include a processing device <b>117</b> (e.g., processor) configured to execute instructions stored in a local memory <b>119</b>. In the illustrated example, the local memory <b>119</b> of the controller <b>115</b> includes an embedded memory configured to store instructions for performing various processes, operations, logic flows, and routines that control operation of the memory sub-system <b>110</b>, including handling communications between the memory sub-system <b>110</b> and the host system <b>120</b>.</p><p id="p-0069" num="0068">In some embodiments, the local memory <b>119</b> can include memory registers storing memory pointers, fetched data, etc. The local memory <b>119</b> can also include read-only memory (ROM) for storing micro-code. While the example memory sub-system <b>110</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> has been illustrated as including the controller <b>115</b>, in another embodiment of the present disclosure, a memory sub-system <b>110</b> does not include a controller <b>115</b>, and can instead rely upon external control (e.g., provided by an external host, or by a processor or controller separate from the memory sub-system).</p><p id="p-0070" num="0069">In general, the controller <b>115</b> can receive commands or operations from the host system <b>120</b> and can convert the commands or operations into instructions or appropriate commands to achieve the desired access to the memory devices <b>130</b>. The controller <b>115</b> can be responsible for other operations such as wear leveling operations, garbage collection operations, error detection and error-correcting code (ECC) operations, encryption operations, caching operations, and address translations between a logical address (e.g., logical block address (LBA), namespace) and a physical address (e.g., physical block address) that are associated with the memory devices <b>130</b>. The controller <b>115</b> can further include host interface circuitry to communicate with the host system <b>120</b> via the physical host interface. The host interface circuitry can convert the commands received from the host system into command instructions to access the memory devices <b>130</b> as well as convert responses associated with the memory devices <b>130</b> into information for the host system <b>120</b>.</p><p id="p-0071" num="0070">The memory sub-system <b>110</b> can also include additional circuitry or components that are not illustrated. In some embodiments, the memory sub-system <b>110</b> can include a cache or buffer (e.g., DRAM) and address circuitry (e.g., a row decoder and a column decoder) that can receive an address from the controller <b>115</b> and decode the address to access the memory devices <b>130</b>.</p><p id="p-0072" num="0071">In some embodiments, the memory devices <b>130</b> include local media controllers <b>150</b> that operate in conjunction with memory sub-system controller <b>115</b> to execute operations on one or more memory cells of the memory devices <b>130</b>. An external controller (e.g., memory sub-system controller <b>115</b>) can externally manage the memory device <b>130</b> (e.g., perform media management operations on the memory device <b>130</b>). In some embodiments, a memory device <b>130</b> is a managed memory device, which is a raw memory device combined with a local controller (e.g., local media controller <b>150</b>) for media management within the same memory device package. An example of a managed memory device is a managed NAND (MNAND) device.</p><p id="p-0073" num="0072">The controller <b>115</b> and/or a memory device <b>130</b> can include a security manager <b>113</b> configured to control access to the memory cells <b>107</b> in the memory device <b>130</b>. In some embodiments, the controller <b>115</b> and/or the local media controller <b>150</b> in the memory sub-system <b>110</b> can include at least a portion of the security manager <b>113</b>. In other embodiments, or in combination, the controller <b>116</b> and/or the processing device <b>118</b> in the host system <b>120</b> can include at least a portion of the security manager <b>113</b>. For example, the controller <b>115</b>, the controller <b>116</b>, and/or the processing device <b>118</b> can include logic circuitry implementing the security manager <b>113</b>. For example, the controller <b>115</b>, or the processing device <b>118</b> (e.g., processor) of the host system <b>120</b>, can be configured to execute instructions stored in memory for performing the operations of the security manager <b>113</b> described herein. In some embodiments, the security manager <b>113</b> is implemented in an integrated circuit chip disposed in the memory sub-system <b>110</b>. In other embodiments, the security manager <b>113</b> can be part of firmware of the memory sub-system <b>110</b>, an operating system of the host system <b>120</b>, a device driver, or an application, or any combination therein.</p><p id="p-0074" num="0073">For example, when the memory device <b>130</b> is initially shipped from a manufacturer of memory devices, the memory device <b>130</b> is configured with a cryptographic key of the manufacturer to provide the manufacturer with privileges to configure the security operations of the memory device <b>130</b>. To facilitate the assembling of the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in which the memory device <b>130</b> is installed, the privileges can be provided to or transferred to the manufacturer of the computing system <b>100</b>. The transfer can include the activation of security features of the memory device <b>130</b> via the access control server <b>101</b>, after authenticating the identity of the memory device <b>130</b>. Optionally, the privileges can be transferred to the manufacturer of the computing system <b>100</b> by replacing the cryptographic key controlling the privileges to configure the security operations of the memory device <b>130</b>. After the activation, the security manager <b>113</b> can control software/firmware installed in the memory device <b>130</b> to operate the computing system <b>100</b>, and generate identity data representative not only the memory device <b>130</b>, but also the computing system <b>100</b> having the memory device <b>130</b> and other software/hardware components.</p><p id="p-0075" num="0074">The security manager <b>113</b> can build an identity of the memory device <b>130</b> based on not only its unique device secret (UDS), but also instructions stored in the memory device <b>130</b> for execution by the processing device <b>118</b> of the host system <b>120</b>. For example, the security manager <b>113</b> can determine a cryptographic hash value of a set of instructions to be executed during boot time of the computing system <b>100</b>. The security manager <b>113</b> can check the integrity of the set of instructions by comparing the hash value computed at the boot time with a pre-calculated hash value. If the two hash value agrees with each other, the set of instructions can be considered to have not been tampered with and/or corrupted. Thus, the set of instructions can be executed in the computing system <b>100</b> to further implement the security operations of the security manager <b>113</b> and/or the boot operations of the computing system <b>100</b>. Optionally, the verification of the hash value can be part of the authentication of the computing system <b>100</b> as an endpoint using a certificate generated through the execution of at least a portion of the set of instructions during the boot time of the computing system <b>100</b>.</p><p id="p-0076" num="0075">For example, an identifier of the memory device <b>130</b> can be generated based at least in part on the hash value of the set of instructions. Thus, when the identifier of the memory device <b>130</b> is verified through the authentication using the certificate, the hash value of the set of instructions can be considered to have been verified as correct; and the set of instructions used to generate the certificate and to boot up the computing system <b>100</b> has not been tampered with and/or corrupted.</p><p id="p-0077" num="0076">The execution of the set of instructions in the computing system <b>100</b> causes the computing system <b>100</b> to determine the identifies of other components of the computing system <b>100</b>, such as an identifier of the processing device <b>118</b>, an identifier of the controller <b>116</b>, an identifier of the memory sub-system controller <b>115</b>, an identifier of the memory device <b>140</b>, and/or an identifier of a software program (e.g., an operating system, a device driver, an application program, etc.). The set of identifiers of the components in the computing system <b>100</b> having the memory device <b>130</b>, including the identifier of the memory device <b>130</b>, can be combined to generate a cryptographic key for the signing of a certificate. The certificate is based on a monotonically increasing counter value that increases every time the computing system <b>100</b> is booted up and/or every time the memory device <b>130</b> performs a secure operation. Optionally, the certificate can show some of the identifiers used to generate the cryptographic key used to sign the certificate. The certificate may also include a DICE alias public key generated at boot time.</p><p id="p-0078" num="0077">The certificate can be communicated to a remote computer (e.g., access control server <b>101</b>) over a computer network for authentication. When the certificate is authenticated, it can be concluded that the integrity of the set of instructions used to generate the certificate is intact, and the computing system <b>100</b> has the memory device <b>130</b> in combination with the set of components represented by the identifiers used to generate the cryptographic key that is used to sign the certificate. Additionally, the monotonic counter value included in the certificate allows its recipient to verify that it was generated recently, and thus that it can be trusted. The certificate holds a DICE alias public key, which can be compared with the DICE alias public key (e.g., stored on the remote computer, or computed just in time for its use in response to the certificate). If the two keys match, then the remote computer can trust further messages sent by the endpoint and signed with the DICE alias private key.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an integrated circuit memory device having a security manager according to one embodiment. For example, the memory device <b>130</b> in the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> and/or the memory device <b>130</b> connected to the client computer system <b>105</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> can be implemented using the integrated circuit memory device <b>130</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0080" num="0079">The integrated circuit memory device <b>130</b> can be enclosed in a single integrated circuit package. The integrated circuit memory device <b>130</b> includes multiple memory regions <b>131</b>, . . . , <b>133</b> that can be formed in one or more integrated circuit dies. A typical memory cell in a memory region <b>131</b>, . . . , <b>133</b> can be programmed to store one or more bits of data.</p><p id="p-0081" num="0080">The local media controller <b>150</b> can include at least a portion of a security manager <b>113</b> that is configured to control access to at least one of the memory regions <b>131</b>, . . . , <b>133</b>.</p><p id="p-0082" num="0081">For example, the security manager <b>113</b> can use an access control key <b>153</b> to implement the privilege of a type of operations. When a request for an operation of such a type is received in the integrated circuit memory device <b>130</b>, the security manager <b>113</b> can use the access control key <b>153</b> to verify whether the request is digitally signed using a corresponding cryptographic key. For example, the requester may digitally sign the request, or a challenge message, using a cryptographic key such that the digital signature can be verified using the access control key <b>153</b>. The requested operation is performed by the memory device <b>130</b> when the digital signature verification performed using the access control key <b>153</b> is successful. Otherwise, the request can be rejected or ignored.</p><p id="p-0083" num="0082">For example, the privilege can be the permission to write data in a memory region (e.g., <b>131</b>) to prevent tampering of the data stored in the memory region, such as a boot loader <b>171</b> of the computing system <b>100</b>, firmware/software/operating system of the computing system <b>100</b>, security setting of the memory device <b>130</b>, etc.</p><p id="p-0084" num="0083">The memory device <b>130</b> can have a unique identification <b>151</b> that identifies the memory device <b>130</b> and a secret cryptographic key <b>155</b> that demonstrates the authenticity of the memory device <b>130</b> having the unique identification <b>151</b>. For example, the cryptographic key <b>155</b> can be generated from a unique device secret (UDS) of the memory device <b>130</b> and other data, such as information of the non-secret data stored in a memory region (e.g., <b>131</b>) and/or information of other components of the computing system <b>100</b>.</p><p id="p-0085" num="0084">The integrated circuit memory device <b>130</b> has a communication interface <b>147</b> to receive a command having an address <b>135</b> from the controller <b>115</b> of a memory sub-system <b>110</b>. In response to the address <b>135</b> identifying a memory region <b>131</b> that requires access control, the security manager <b>113</b> performs cryptographic operations, using the access control key <b>153</b>, to verify that the request is from a requester having a corresponding cryptographic key that represents authorization for the access. After the verification of the authorization, permission, or privilege for the access, the memory device <b>130</b> can provide memory data retrieved from the memory region <b>131</b> using an address decoder <b>141</b>. The address decoder <b>141</b> of the integrated circuit memory device <b>130</b> converts the address <b>135</b> into control signals to select a group of memory cells in the integrated circuit memory device <b>130</b>; and a local media controller <b>150</b> of the integrated circuit memory device <b>130</b> performs operations to determine the memory data stored in the memory cells at the address <b>135</b>.</p><p id="p-0086" num="0085">The memory region <b>131</b> can store a boot loader <b>171</b>. At boot time, the security manager <b>113</b> can measure the boot loader <b>171</b> by computing a cryptographic hash value of the boot loader <b>171</b>. The cryptographic hash value of the boot loader <b>171</b> can be used to generate identity data of the integrated circuit memory device <b>130</b> and/or the computing system <b>100</b>. The boot loader <b>171</b> (and/or an operating system or a device driver, or a security application) can include instructions to implement a portion of the security manager <b>113</b>. During the boot time, the instructions can determine the configuration of the computing system <b>100</b> in which the integrated circuit memory device <b>130</b> is a component.</p><p id="p-0087" num="0086">For example, the configuration of the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> can include the software/firmware components of the memory sub-system <b>110</b>. The software/firmware can be stored in other memory devices (e.g., <b>140</b>), or in the memory device <b>130</b> in a memory region <b>133</b>. For example, the instructions <b>173</b> in the memory region <b>133</b> in the integrated circuit memory device <b>130</b> can include the operating system of the computing system <b>100</b>, device drivers, firmware, and/or software applications. Some of the major software/firmware components of the memory sub-system <b>110</b> can be stored outside of the memory region(s) under the access control of the security manager <b>113</b> and/or outside of the integrated circuit memory device <b>130</b>. The identifiers of the software/firmware components can include component identifications, version numbers, serial numbers, and/or cryptographic hash values of the software/firmware components.</p><p id="p-0088" num="0087">The configuration of the computing system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> can include the hardware components of the memory sub-system <b>110</b>, such as the processing device <b>118</b> and/or the controller <b>116</b>. The host system <b>120</b> can further include peripheral devices, such as a network interface card, a communication device, another memory sub-system, etc. The identifiers of the hardware components can include serial numbers, addresses, identification numbers, etc.</p><p id="p-0089" num="0088">The configuration information of the computing system <b>100</b>, including the unique identification <b>151</b> can be used to generate a secret cryptographic key <b>155</b> to sign a certificate generated using at least the value from a monotonic counter. The certificate identifies the counter value, the unique identification <b>151</b> of the memory device <b>130</b>, and/or an unique identification of the computing system <b>100</b> in which the memory device <b>130</b> is installed.</p><p id="p-0090" num="0089">The key management server <b>103</b> can be used to validate the authenticity of the certificate, since the key management server <b>103</b> has the unique device secret (UDS) and can generate the same cryptographic keys (e.g., <b>155</b>) generated by the memory device <b>130</b> without requiring the communication of a secret over a communication channel, after the memory device <b>130</b> is manufactured.</p><p id="p-0091" num="0090">In one embodiment of a method to control a memory device, a first computer system (e.g., access control server <b>101</b>) establishes, with a client computer system <b>105</b>, a secure authenticated connection <b>201</b>.</p><p id="p-0092" num="0091">For example, to establish the secure authenticated connection <b>201</b>, the access control server <b>101</b> receives a first certificate <b>121</b> from the client computer system <b>105</b>. The first certificate <b>121</b> indicates an identity of the client computer system <b>105</b>; and the access control server <b>101</b> validates the first certificate <b>121</b>. For example, the access control server <b>101</b> can store a public key of the client computer system <b>105</b> and use the public key to validate the first certificate <b>121</b> is signed using a private key corresponding to the public key.</p><p id="p-0093" num="0092">Similarly, to establish the secure authenticated connection <b>201</b>, the access control server <b>101</b> provides a second certificate <b>123</b> to indicate an identity of the access control server <b>101</b>. The client computer system <b>105</b> is configured to validate the second certificate <b>123</b> prior to the establishing of the secure authenticated connection <b>201</b>.</p><p id="p-0094" num="0093">The establishing of the secure authenticated connection <b>201</b> can include establishing a session key to encrypt data transmitted via the secure authenticated connection <b>201</b>.</p><p id="p-0095" num="0094">To reduce the impact of deny of service (DoS) attacks on the performance of the access control server <b>101</b>, the access control server <b>101</b> can store a list of internet protocol (IP) addresses of client computer systems (e.g., <b>105</b>, . . . , <b>106</b>). The access control server <b>101</b> can determine whether to establish the secure authenticated connection <b>201</b> based at least in part on whether an address of the client computer system <b>105</b> is in the list.</p><p id="p-0096" num="0095">The first computer system (e.g., access control server <b>101</b>) receives, over the connection <b>201</b> from the client computer system <b>105</b>, a request about a memory device <b>130</b>.</p><p id="p-0097" num="0096">The request can include identity data of the memory device <b>130</b>.</p><p id="p-0098" num="0097">The first computer system (e.g., access control server <b>101</b>) determines, based on data stored in the first computer system, that the client computer system <b>105</b> is eligible to operate the memory device <b>130</b>.</p><p id="p-0099" num="0098">For example, the data can include client privilege data <b>127</b> indicating that the operator of the client computer system <b>105</b> is a new owner of the memory device <b>130</b>. In one implementation, data is stored to associate unique identifications (e.g., <b>122</b>) of memory devices (e.g., <b>130</b>) with the client privilege data <b>127</b> for the client computer system <b>105</b> that is eligible to control the memory devices (e.g., <b>130</b>) as the owner or manufacturer of endpoints in which the memory devices (e.g., <b>130</b>) are installed. Additional client-specific data is stored for logging, reporting and invoice generation at the time of key retrieval from the key management server <b>103</b> to facilitate the transfer of owner privileges and/or other privileges. The separation of the access control data and invoice generation data allows the use of the access control server <b>101</b> to retrieve, from the key management server <b>103</b>, cryptographic keys representative privileges to operate the memory devices (e.g., <b>130</b>), without requiring that the access control server <b>101</b> to have any personally identifiable information regarding the customer requesting the cryptographic keys or the client computer system making the request. Thus, an arrangement can provide client partner anonymity in the requests being made via the access control server <b>101</b> while still ensuring that only the client computer system <b>105</b> with the correct certificate will be allowed access.</p><p id="p-0100" num="0099">For example, the data can include memory device permission data <b>129</b> indicating whether an operator of the client computer system <b>105</b> has purchased the privilege to use a security feature of the memory device <b>130</b>.</p><p id="p-0101" num="0100">In response to a determination that the client computer system <b>105</b> is eligible to operate or control the memory device <b>130</b>, the first computer system (e.g., access control server <b>101</b>) communicates with a second computer system (e.g., key management server <b>103</b>) to generate a response to the request. The response is generated using at least a cryptographic key <b>124</b> stored in the second computer system (e.g., key management server <b>103</b>) in association with an unique identification <b>122</b> of the memory device <b>130</b>. The response is generated via the second computer system (e.g., key management server <b>103</b>) performing operations using the cryptographic key <b>124</b> without transmitting the cryptographic key <b>124</b> outside of the second computer system (e.g., key management server <b>103</b>). For example, the key management server <b>103</b> can have a hardware security module (HSM) to ensure security of the cryptographic key <b>124</b> in its storage and usage in the key management server <b>103</b>. Since the cryptographic key <b>124</b> is not provided to the access control server <b>101</b>, a hardware security module (HSM) is not necessary in the access control server <b>101</b> for the security of the cryptographic key <b>124</b>. Alternatively, the access control server <b>101</b> and the key management server <b>103</b> can be implemented in a same computer system.</p><p id="p-0102" num="0101">For example, the request received from the client computer system <b>105</b> can include identity data of the memory device <b>130</b>; and the response can include an indication of whether the memory device <b>130</b> is authentic according to the cryptographic key <b>124</b>.</p><p id="p-0103" num="0102">For example, the cryptographic key <b>124</b> can be a secret key generated, independently and separately by the second computer system (e.g., key management server <b>103</b>) and by the memory device <b>130</b>, based on an unique device secret of the memory device <b>130</b>. The unique device secret of the memory device <b>130</b> is registered and stored in the second computer system (e.g., key management server <b>103</b>) during manufacture of the memory device <b>130</b>. Subsequently, the unique device secret of the memory device <b>130</b> is kept as secret within the memory device <b>130</b> and within the key management server <b>103</b> respectively and not communicated/revealed to outside of the memory device <b>130</b> and the key management server <b>103</b> for improved security.</p><p id="p-0104" num="0103">Optionally, the first computer system (e.g., access control server <b>101</b>) communicates with the second computer system (e.g., key management server <b>103</b>) to establish a separate secure authenticated connection <b>203</b> between them to generate the response. For example, the access control server <b>101</b> can request the key management server <b>103</b> to determine whether the identity data of the memory device <b>130</b> is derived from the unique device secret of the memory device <b>130</b> through cryptographic computation.</p><p id="p-0105" num="0104">For example, the response can include a command executable in the memory device <b>130</b> to transfer a privilege to an operator of the client computer system <b>106</b>, and/or to activate at least one security feature of the memory device <b>130</b>. For example, the command includes a digital signature applied on the command using a cryptographic key of a current holder of the privilege; and the command is executable in the memory device <b>130</b> after the digital signature is validated by the memory device <b>130</b>.</p><p id="p-0106" num="0105">For example, the response can include a cryptographic key usable to apply a digital signature on a command such that the command can be executed by the memory device <b>130</b> upon validation of the digital signature in the memory device <b>130</b>. When the command does not have a valid digital signature, the memory device <b>130</b> can reject or ignore the command.</p><p id="p-0107" num="0106">The server system <b>102</b> discussed above can be used to provide privileges to the client computer system <b>105</b> to control security aspects of the memory device <b>130</b> without exposing the secret cryptographic key <b>124</b> in clear text outside of the memory device <b>130</b> and the key management server <b>103</b> and without trusting the client computer system <b>105</b> in securing the secret cryptographic key <b>124</b>.</p><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a technique to authenticate a memory device according to one embodiment. For example, through the authentication operations, a session key can be established to secure communications between a key management server <b>103</b> and a memory device <b>130</b> without trusting the client computer system <b>105</b> in handling the security to protect the secret of the memory device <b>130</b>.</p><p id="p-0109" num="0108">In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the client computer system <b>105</b> can send to the memory device <b>130</b> a request <b>231</b> for identity data of the memory device <b>130</b>.</p><p id="p-0110" num="0109">The request <b>231</b> can include a cryptographic nonce <b>227</b>. For example, the cryptographic nonce <b>227</b> can be generated by the server system <b>102</b> in response to a request from the client computer system <b>105</b>, or generated by the client computer system <b>105</b> and shared with the server system <b>102</b> for the request <b>231</b>. Alternatively, the memory device <b>130</b> may generate the cryptographic nonce <b>227</b> in response to the request <b>231</b> and provide a corresponding response <b>233</b> that includes the cryptographic nonce <b>227</b>.</p><p id="p-0111" num="0110">In response to the request <b>231</b> for identity data of the memory device <b>130</b>, the memory device <b>130</b> provides a response <b>233</b> that includes a message identifying the unique identification (UID) <b>122</b> of the memory device <b>130</b>.</p><p id="p-0112" num="0111">A digital signature <b>229</b> is applied to the message provided in the response using the secret cryptographic key <b>124</b> of the memory device <b>130</b>. Having the secret cryptographic key <b>124</b> is evidence that the memory device <b>130</b> is authentic. For example, the digital signature <b>229</b> can include a hash-based message authentication code (HMAC) generated using the message included in the response <b>233</b> and the cryptographic key <b>124</b>. For example, the cryptographic key <b>124</b> can be used to generate two keys for the generation of the hash-based message authentication code (HMAC). After combining one of the two keys with the message to generate a message modified by the key, the memory device <b>130</b> can apply a cryptographic hash function to the key-modified message to generate a hash value, combine the other key with the hash value to generate a further message, and apply the cryptographic hash function (or another cryptographic hash function) to the further message to generate the hash-based message authentication code (HMAC). Alternatively, the digital signature <b>229</b> can be generated using other techniques based on a cryptographic hash function and the encryption performed using the cryptographic key <b>124</b>, where the encryption can use symmetric cryptography or asymmetric cryptography in general.</p><p id="p-0113" num="0112">To protect the response <b>233</b> and/or the digital signature <b>229</b> from security attacks (e.g., reuse of the response <b>233</b> and/or attempts to recover the secret cryptographic key <b>124</b>), the digital signature <b>229</b> is generated on a message that includes the unique identification (UID) <b>122</b>, a counter value <b>225</b>, and the cryptographic nonce <b>227</b>. The counter value <b>225</b> is obtained from a counter <b>221</b> in the memory device <b>130</b>. The value of the counter <b>221</b> increases monotonically. For example, the counter <b>221</b> can be used to store a value representative of a count of requests received for identity data and/or other data items or operations related to security. Thus, a response containing a counter value <b>225</b> that is lower than a previously-seen counter value can be considered invalid. The cryptographic nonce <b>227</b> is used in the generation of the response <b>233</b> once and discarded by the memory device <b>130</b>. When the cryptographic nonce <b>227</b> has been previously provided to, or generated by, the server system <b>102</b>, the response <b>233</b> does not have to explicitly include the cryptographic nonce <b>227</b> in the response <b>233</b>.</p><p id="p-0114" num="0113">The client computer system <b>105</b> forwards the response <b>233</b> to the server system <b>102</b> to request the authentication of the memory device <b>130</b>. Using the unique identification <b>122</b> provided in the response <b>233</b>, the server system <b>102</b> can locate the secret cryptographic key <b>124</b> (or a corresponding public key when asymmetric cryptography is used) associated with the unique identification <b>122</b> in the key management server <b>103</b>. The digital signature <b>229</b> can be validated using the cryptographic key <b>124</b> (or the corresponding public key when asymmetric cryptography is used).</p><p id="p-0115" num="0114">For example, the server system <b>102</b> can independently compute the hash-based message authentication code (HMAC) applied to the message contained in the response <b>233</b> and compare the computed result with the corresponding result provided in the digital signature <b>229</b>. If the results are the same, the server system <b>102</b> can conclude that the memory device <b>130</b> has the secret cryptographic key <b>124</b> and thus the memory device <b>130</b> is authentic. Otherwise, the memory device <b>130</b> is not authentic.</p><p id="p-0116" num="0115">Based on the validation of the digital signature <b>229</b>, the server system <b>102</b> provides an authenticity indicator <b>235</b> to the client computer <b>105</b>. The authenticity indicator <b>235</b> indicates whether the memory device <b>130</b> is authentic.</p><p id="p-0117" num="0116">Through the authentication of the memory device <b>130</b>, the memory device <b>130</b> and the server system <b>102</b> can establish a session key <b>223</b> for communication with each other in a subsequent communication session. The session can be limited by a time period of a predetermined length following the response <b>233</b> or the validation of the digital signature <b>229</b>. After the time period, the session key <b>223</b> expires and thus can be destroyed or discarded. Further, a subsequent request for identity data can end the previous session started by the prior request for identity data.</p><p id="p-0118" num="0117">The session key <b>223</b> can be generated based at least in part on a secret known between the server system <b>102</b> and the memory device <b>130</b> but not available to a communication channel between the server system <b>102</b> and the memory device <b>130</b>.</p><p id="p-0119" num="0118">For example, the session key <b>223</b> can be derived based at least in part on the secret cryptographic key <b>124</b>. Further, the session key <b>223</b> can be based at least in part on the counter value <b>225</b> and/or the cryptographic nonce <b>227</b>. Optionally, the session key <b>223</b> can be based at least in part on the digital signature <b>229</b>. For example, the digital signature <b>229</b> and the cryptographic key <b>124</b> can be combined to generate the session key <b>223</b>.</p><p id="p-0120" num="0119">In some implementations, the session key <b>223</b> is independent from the digital signature <b>229</b>; and the digital signature <b>229</b> can be generated using the session key <b>223</b> that is derived from the cryptographic key <b>124</b> (or another secret known between the server system <b>102</b> and the memory device <b>130</b>).</p><p id="p-0121" num="0120"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a technique to generate a command to control security operations of a memory device according to one embodiment.</p><p id="p-0122" num="0121">For example, after the privilege of the client computer system <b>105</b> to issue a command <b>239</b> to the memory device <b>130</b> is verified using the client privilege data <b>127</b> and the memory device permission data <b>129</b>, the client computer system <b>105</b> can request the server system <b>102</b> to provide a digital signature <b>243</b> for the command <b>239</b>.</p><p id="p-0123" num="0122">After the client computer system <b>105</b> sends the request <b>241</b> that identifies the command <b>239</b> and the memory device <b>130</b>, the server system <b>102</b> can generate a digital signature <b>243</b> for the command <b>239</b>, if the client computer system <b>105</b> is determined to have the privilege to control or operate the memory device <b>130</b> using the command <b>239</b>. The request <b>241</b> can include the unique identification <b>122</b> of the memory device <b>130</b> in which the command <b>239</b> is to be executed. For example, the unique identification <b>122</b> can be extracted by the client computer system <b>105</b> from the response <b>233</b> to the request <b>231</b> for identity data of the memory device <b>130</b> and/or the authenticity indicator <b>235</b> provided by the server system <b>102</b>.</p><p id="p-0124" num="0123">Similar to the digital signature <b>229</b> for the identity data, the digital signature <b>243</b> for the command <b>239</b> can include a hash-based message authentication code (HMAC) generated from a message to be provided to the memory device <b>130</b> in a request <b>245</b> and a key associated with the unique identification <b>122</b> of the memory device <b>130</b>. The key can be the session key <b>223</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, or the cryptographic key <b>124</b>, or another secret key that is for the control of the execution of the command <b>239</b> in the memory device <b>130</b>. When the digital signature <b>243</b> is based on the session key <b>223</b>, the digital signature <b>243</b> expires when the session key <b>223</b> expires, which prevents the reuse of the digital signature <b>243</b> beyond the session in which the session key <b>223</b> is valid.</p><p id="p-0125" num="0124">Alternatively, the digital signature <b>243</b> can be generated based on a cryptographic hash function and encryption performed using symmetric or asymmetric cryptography. For example, the digital signature <b>243</b> can be the cipher text of a hash value. The hash value is generated by applying a cryptographic hash function to the message; and the cipher text is generated by encrypting the hash value using the secret cryptographic key <b>124</b>. When symmetric cryptography is used, the cipher text is to be decrypted using the same secret cryptographic key <b>124</b> for validation by the memory device <b>130</b> (or the cipher text is recreated independently by the memory device <b>130</b> from the hash value of the received message for validation). When asymmetric cryptography is used, the cipher text is to be decrypted using a public cryptographic key corresponding to the private cryptographic key <b>124</b> for validation by the memory device <b>130</b>.</p><p id="p-0126" num="0125">For example, the message provided in the request <b>245</b> can include the command <b>239</b> and a cryptographic nonce <b>247</b>. The cryptographic nonce <b>247</b> is arranged for the command <b>239</b>/request <b>245</b> and thus is different from the cryptographic nonce <b>227</b> for the transmission of the identity data of the memory device <b>130</b>.</p><p id="p-0127" num="0126">For example, in response to the request <b>241</b>, the server system <b>102</b> can generate the cryptographic nonce <b>247</b> and used it in the generation of the digital signature <b>243</b>. The cryptographic nonce <b>247</b> can be provided with the digital signature <b>243</b> for the client computer system <b>105</b> to generate the request <b>245</b>. Alternatively, the client computer system <b>105</b> can generate the cryptographic nonce <b>247</b> and provided it to the server system <b>102</b> with the request <b>241</b>. Alternatively, to generate the request <b>241</b>, the client computer system <b>105</b> can request the cryptographic nonce <b>247</b> from the server system <b>102</b>.</p><p id="p-0128" num="0127">After the client computer system <b>105</b> sends the request <b>245</b> having the digital signature <b>243</b> obtained from the server system <b>102</b>, the memory device <b>130</b> uses a corresponding key to validate the digital signature <b>243</b> for the message included in the request <b>245</b>. If the digital signature <b>243</b> is valid, the memory device <b>130</b> executes the command <b>239</b>; otherwise, the request <b>245</b> and/or the command <b>239</b> can be rejected or ignored.</p><p id="p-0129" num="0128">For example, the command <b>239</b> can be configured to activate a security feature of the memory device <b>130</b>.</p><p id="p-0130" num="0129">For example, the command <b>239</b> can be configured to replace the cryptographic key <b>124</b> associated with the unique identification <b>122</b>. For example, the new cryptographic key <b>124</b> can be generated using additional non-secret data provided during manufacture of a computing device in which the memory device <b>130</b> is installed but not available when the memory device <b>130</b> is being manufactured.</p><p id="p-0131" num="0130">After the execution of the command <b>239</b>, the memory device <b>130</b> provides a response <b>249</b> that can be forwarded by the client computer system <b>105</b> to the server system <b>102</b>. The server system <b>102</b> can determine whether the response <b>249</b> is correct. For example, the memory device <b>130</b> can sign the response using the session key <b>223</b> for validation by the server system <b>102</b>.</p><p id="p-0132" num="0131">In some implementations, a replacement cryptographic key used to replace the key <b>124</b> is generated independently by the memory device <b>130</b> and by the server system <b>102</b> from a secret (e.g., a unique device secret) and additional data exchanged through the client computer system <b>105</b>. The additional data can be protected through encryption performed using the session key <b>223</b>.</p><p id="p-0133" num="0132">In some implementations, a replacement cryptographic key <b>124</b> is communicated from the memory device <b>130</b> to the server system <b>102</b> in an encrypted form of cipher text generated using the session key <b>223</b>.</p><p id="p-0134" num="0133">In one embodiment of a method to control a memory device, a server system <b>102</b> establishes a secure authenticated connection <b>201</b> with a client computer system <b>105</b>.</p><p id="p-0135" num="0134">The server system <b>102</b> receives, over the connection <b>201</b> from the client computer system <b>105</b>, a request identifying a memory device <b>130</b>.</p><p id="p-0136" num="0135">For example, the server system <b>102</b> receives, via the client computer system <b>105</b> from the memory device <b>130</b>, identity data of the memory device <b>130</b>. The server system <b>102</b> validates the identity data based on a secret of the memory device <b>130</b> stored in the server system <b>102</b>. Based on validation of the identity data, a session key <b>223</b> is established and known between the server system <b>102</b> and the memory device <b>130</b>.</p><p id="p-0137" num="0136">For example, the identity data can include a second message and a second digital signature <b>229</b> applied on the second message using a secret cryptographic key <b>124</b> of the memory device <b>130</b>. The second message can have an unique identification <b>122</b> of the memory device <b>130</b>, a value <b>225</b> from a counter <b>221</b> configured in the memory device <b>130</b>, and a second cryptographic nonce <b>227</b>.</p><p id="p-0138" num="0137">For example, the session key <b>223</b> can be configured to expire in a time period of a predetermined length from validation of the identity data. The predetermined length can be configured to allow a few round trips of message exchange between the memory device <b>130</b> and the server system <b>102</b>. Further, a subsequent request for identity data can terminate the current session and start a new session with a new session key. In some implementations, the life time of a session key is based on the power cycle events in the memory device <b>130</b>. When the memory device <b>130</b> is powered up from a state of being powered down, a new session key is generated; and the session key can be valid until a next session key is generated following powering down and powering up. Optionally, a command can be sent to the memory device <b>130</b> to instruct the memory device <b>130</b> to generate a new session key.</p><p id="p-0139" num="0138">The server system <b>102</b> determines, based on data stored in the server system <b>102</b>, that the client computer system <b>105</b> is eligible to control the memory device <b>130</b>. For example, the client privilege data <b>127</b> and memory device permission data <b>129</b> can be used to determine whether the client computer system <b>105</b> is eligible to control the memory device <b>130</b>.</p><p id="p-0140" num="0139">The server system <b>102</b> generates, a first digital signature <b>243</b> for a command <b>239</b> using at least a cryptographic key <b>124</b> stored in the server system in association with the memory device <b>130</b>.</p><p id="p-0141" num="0140">For example, the first digital signature <b>243</b> is applied to a first message in a request <b>245</b> from the client computer system <b>105</b> to the memory device <b>130</b>. The first message includes the command <b>239</b> and a first cryptographic nonce <b>247</b> that is different from the second cryptographic nonce <b>227</b>.</p><p id="p-0142" num="0141">For example, the first digital signature <b>243</b> can include a hash-based message authentication code (HMAC) generated from the first message and a cryptographic key <b>124</b> (or the session key <b>223</b>) that is stored in both the memory device <b>130</b> and the server system <b>102</b>.</p><p id="p-0143" num="0142">In general, the first digital signature <b>243</b> can be generated using the session key <b>223</b>, a cryptographic key <b>124</b> stored in the server system <b>102</b> in association with the unique identification <b>122</b> of the memory device <b>130</b>, or another key, or any combination thereof, using symmetric cryptography, or asymmetric cryptography, or hash-based message authentication code (HMAC).</p><p id="p-0144" num="0143">The server system <b>102</b> transmits, via the connection <b>201</b>, the first digital signature <b>243</b> to the client computer system <b>105</b>.</p><p id="p-0145" num="0144">The client computer system <b>105</b> submits the command <b>239</b> with the first digital signature <b>243</b> to the memory device <b>130</b>.</p><p id="p-0146" num="0145">The memory device <b>130</b> validates the first digital signature <b>243</b> prior to execution of the command <b>239</b>.</p><p id="p-0147" num="0146">For example, when executed in the memory device <b>130</b>, the command <b>239</b> causes the memory device <b>130</b> to activate a security feature of the memory device <b>130</b>.</p><p id="p-0148" num="0147">For example, when executed in the memory device <b>130</b>, the command causes <b>239</b> the memory device <b>130</b> to replace a first cryptographic key with a second cryptographic key.</p><p id="p-0149" num="0148">For example, the second cryptographic key is generated in the memory device <b>130</b> based on a unique device secret (UDS) that is stored in the memory device <b>130</b> and in the server system <b>102</b>. The server system <b>102</b> can generate, independently from the memory device <b>130</b>, the second cryptographic key from the unique device secret (UDS) stored in the server system <b>102</b> and thus avoid the need to transmit the second cryptographic key between the server system <b>102</b> and the memory device <b>130</b>. Alternatively, the second cryptographic key can be transmitted between the server system <b>102</b> and the memory device <b>130</b> in an encrypted form of cipher text generated using the session key <b>223</b>. Alternatively, the second cryptographic key can be generated based on the session key <b>223</b>.</p><p id="p-0150" num="0149">For example, the session key <b>223</b> can be used to encrypt at least a portion of data transmitted from the server system <b>102</b> via the client computer system <b>105</b> to the memory device <b>130</b> for the execution of the command <b>239</b>.</p><p id="p-0151" num="0150">For example, the session key <b>223</b> can be used to decrypt at least a portion of a response, generated from the execution of the command <b>239</b> and transmitted to the server system <b>102</b> via the client computer system <b>105</b> from the memory device <b>130</b>.</p><p id="p-0152" num="0151">For example, the server system <b>102</b> can generate the first cryptographic nonce <b>247</b> for the command <b>239</b> and the second cryptographic nonce <b>227</b> for the identity data. The first cryptographic nonce <b>247</b> and the second cryptographic nonce <b>227</b> can be provided to the memory device <b>130</b> via the client computer system <b>105</b>. Alternatively, the client computer system <b>105</b> and/or the memory device <b>130</b> can generate the first cryptographic nonce <b>247</b> and the second cryptographic nonce <b>227</b>. For example, a cryptographic nonce (e.g., <b>227</b> or <b>247</b>) can be generated using a random number generator and used once in the generation and verification of one digital signature (e.g., <b>229</b> or <b>243</b>).</p><p id="p-0153" num="0152">In some instances, it is desirable to transfer, from the server system <b>102</b> to a client computer system <b>105</b>, the control of a set of memory devices (e.g., <b>130</b>) together in a batch operation. The client computer system <b>105</b> may apply the controls to the memory devices (e.g., <b>130</b>) while there is no real time communication channel between the individual memory devices (e.g., <b>130</b>) and the server system <b>102</b>.</p><p id="p-0154" num="0153">In one embodiment, a batch identification is configured to represent a set of memory devices (e.g., <b>130</b>) having different unique identifications (UIDs) (e.g., <b>122</b>). The client computer system <b>105</b> can use the batch identification to request a set of control data for the set of memory devices (e.g., <b>130</b>) respectively. The control data can be used by the client computer system <b>105</b> to control or configure security operations of the set of memory devices (e.g., <b>130</b>) without further contacting the server system <b>102</b>, as discussed below.</p><p id="p-0155" num="0154"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a technique to group memory devices in a batch to transfer control according to one embodiment.</p><p id="p-0156" num="0155">In <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a batch identification <b>257</b> is configured in the server system <b>102</b> to represent the unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> of different memory devices (e.g., <b>130</b>). The set of memory devices (e.g., <b>130</b>) is arranged to be controlled by a single entity, such as the operator of the client computer system <b>105</b>.</p><p id="p-0157" num="0156">For example, during the manufacture of the memory devices (e.g., <b>130</b>), the unique device secrets of the memory devices (e.g., <b>130</b>) are identified in a secure facility and registered with their respective unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> in the key management server <b>103</b>. For example, the unique device secrets of the memory devices (e.g., <b>130</b>) can be cryptographic keys <b>124</b>, <b>251</b>, . . . , <b>253</b> or secrets used to generate the cryptographic keys <b>124</b>, <b>251</b>, . . . , <b>253</b>.</p><p id="p-0158" num="0157">Optionally, the memory devices (e.g., <b>130</b>) can be manufactured to store the batch identification <b>257</b>. For example, the batch identification <b>257</b> can be a common portion of the unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> of the memory devices.</p><p id="p-0159" num="0158">Alternatively, the association of a memory device (e.g., <b>130</b>) with the batch identification <b>257</b> is not hard wired in the memory device (e.g., <b>130</b>). The server system <b>102</b> can store data that associates selected unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> of respective memory devices (e.g., <b>130</b>) with the batch identification <b>257</b>.</p><p id="p-0160" num="0159">After a transaction that allows a client entity, such as a manufacturer of computing devices in which the memory devices (e.g., <b>130</b>) are installed, to control the memory devices (e.g., <b>130</b>), the batch identification <b>257</b> can be associated with, in the server system <b>102</b>, a client identifier <b>259</b> that is representative of the client entity. For example, the client privilege data <b>127</b> can include data indicating that the client entity represented by the client identifier <b>259</b> has purchased the batch of memory devices (e.g., <b>130</b>) represented by the batch identification <b>257</b> and thus has privileges <b>265</b> to control the memory devices (e.g., <b>130</b>) in the batch. A public key <b>261</b> of the client entity can be used to validate the certificate <b>121</b> from the client entity operating the client computer system <b>105</b> to establish a secure authenticated connection <b>201</b> with the server system <b>102</b>. A list of internet protocol (IP) addresses <b>263</b> of the client computer system <b>105</b> can be used to control request for secure authenticated connections (e.g., <b>201</b>).</p><p id="p-0161" num="0160">After the batch identification <b>257</b> is associated, in the server system <b>102</b>, with the unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> and the privileges <b>265</b> of the client identifier <b>259</b>, the batch identification <b>257</b> can be used by the client computer system <b>105</b> to request control data for the entire set of memory devices (e.g., <b>130</b>) having the different unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b>. The control data can be used by the client computer system <b>105</b> to configure the security aspects of the memory devices (e.g., <b>130</b>), as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In one implementation, the key management server <b>103</b> stores data associating the batch identification <b>257</b> with the unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> but not data associating the batch identification <b>257</b> with the client identifier <b>259</b>; and the access control server <b>101</b> stores data associating the batch identification <b>257</b> with the client identifier <b>259</b> but not data associating the batch identification <b>257</b> with the unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b>. Thus, neither the access control server <b>101</b> nor the key management server <b>103</b> can associate a memory device with a client identifier on their own. The server system <b>102</b> having the access control server <b>101</b> and the key management server <b>103</b> has sufficient data to associate each individual unique identification (e.g., <b>122</b>, <b>252</b>, . . . , or <b>254</b>) of a memory device with a client identifier <b>259</b>.</p><p id="p-0162" num="0161"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a technique to batch transfer control of memory devices over computer networks according to one embodiment.</p><p id="p-0163" num="0162">In <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the client computer system <b>105</b> can establish a secure authenticate connection <b>201</b> to the server system <b>102</b> in a way as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0164" num="0163">Using the connection <b>201</b> to the server system <b>102</b>, the client computer system <b>105</b> can transmit a request <b>271</b> that contains the batch identification <b>257</b>.</p><p id="p-0165" num="0164">For example, the batch identification <b>257</b> can be retrieved from one of the memory devices (e.g., <b>130</b>) identified by the batch identification <b>257</b>. For example, when the batch identification <b>257</b> is a part of the unique identification <b>122</b> of a memory device <b>130</b>, the request <b>271</b> can include the unique identification <b>122</b> to provide the batch identification <b>257</b>. Alternatively, when the batch identification <b>257</b> is not stored in the memory devices (e.g., <b>130</b>), the client computer system <b>105</b> can obtain the batch identification <b>257</b> from the record of a transaction for acquiring the memory devices (e.g., <b>130</b>).</p><p id="p-0166" num="0165">After verifying that the client computer system <b>105</b> is eligible to control the memory devices identified by the batch identification <b>257</b>, the server system <b>102</b> provides a response <b>273</b> to the client computer system <b>105</b>. The response <b>273</b> includes control data <b>272</b>, <b>281</b>, . . . , <b>283</b> for the respective unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> of the memory devices (e.g., <b>130</b>) that are represented by the batch identification <b>257</b>.</p><p id="p-0167" num="0166">After the client computer system <b>105</b> obtains the response <b>273</b>, the client computer system <b>105</b> can control the memory devices (e.g., <b>130</b>) represented by the batch identification <b>257</b>, without further communications with the server system <b>102</b>.</p><p id="p-0168" num="0167">For example, after receiving the response <b>273</b>, the client computer system <b>105</b> can send a request <b>231</b> for identity data of the memory device <b>130</b>, as in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In response, the memory device <b>130</b> can generate a response <b>233</b> that contains the unique identification <b>122</b> of the memory device <b>130</b>. Based on the unique identification <b>122</b> provided in the response <b>233</b>, the client computer system <b>105</b> can select, from the response <b>273</b>, the corresponding control data <b>272</b> for configuring security aspects of the memory device <b>130</b>.</p><p id="p-0169" num="0168">Optionally, the control data <b>272</b> provided by the server system <b>102</b> for the unique identification <b>122</b> includes data that can be used to validate the digital signature <b>229</b> included in the response <b>233</b>. For example, the control data <b>272</b> can include a cryptographic nonce <b>227</b> to be transmitted with the request <b>231</b> for the identity data of the memory device <b>130</b>. Further, the control data <b>272</b> can include an expected digital signature <b>229</b> computed based on an expected value <b>225</b> of the counter <b>221</b> of the memory device <b>130</b> when the digital signature <b>229</b> is to be validated using a same cryptographic key <b>124</b> that is used to create the digital signature <b>229</b>. Alternatively, when the digital signature <b>229</b> is created using a private key of the memory device <b>130</b> and asymmetric cryptography, the control data <b>272</b> can include a corresponding public key for the validation of the digital signature <b>229</b>.</p><p id="p-0170" num="0169">Optionally, the client computer system <b>105</b> may skip the validation of the digital signature <b>229</b> and trust that the memory device <b>130</b> is authentic.</p><p id="p-0171" num="0170">In one example, the client computer system <b>105</b> initially requests identity data from the memory device <b>130</b> without knowing the unique identification <b>122</b> of the memory device <b>130</b>. From the response to the initial request, the client computer system <b>105</b> determines the unique identification <b>122</b> of the memory device <b>130</b> and uses the unique identification <b>122</b> to retrieve the control data <b>272</b> associated with the unique identification <b>122</b> in the batch response <b>273</b>. For example, the batch response <b>273</b> can include the cryptographic nonce <b>227</b> that can be used in a subsequent request <b>231</b> for identity data from the memory device <b>130</b>. The identity data in the subsequent response <b>233</b> can be validated via the control data <b>272</b> provided by the server system <b>102</b>.</p><p id="p-0172" num="0171">Alternatively, a same cryptographic nonce <b>227</b> can be used once for each memory device (e.g., <b>130</b>) in the batch; and thus, the initial request for the purpose of determine the unique identification <b>122</b> and the cryptographic nonce <b>227</b> can be skipped.</p><p id="p-0173" num="0172">Using the control data <b>272</b> provided for the unique identification <b>122</b> of the memory device <b>130</b>, the client computer system <b>105</b> can generate a request <b>245</b> for the memory device <b>130</b> to execute a command <b>239</b>. For example, the command <b>239</b> can be executed to activate a security feature, or to replace a cryptographic key in the memory device <b>130</b>, etc.</p><p id="p-0174" num="0173">The request <b>245</b> can include the command <b>239</b> and control data <b>275</b> generated for the command <b>239</b> using the control data <b>272</b> provided in the response <b>273</b> for the batch identification <b>257</b>.</p><p id="p-0175" num="0174">For example, the control data <b>275</b> can include a cryptographic nonce <b>247</b> for the command <b>239</b> and a digital signature <b>243</b> that is to be validated by the memory device <b>130</b> for the execution of the command <b>239</b>. The cryptographic nonce <b>247</b> can be included in the control data <b>272</b> received from the server system <b>102</b>; and the digital signature <b>243</b> can be pre-generated by the server system <b>102</b> using a secret cryptographic key <b>124</b> or a session key <b>223</b>. For example, the session key <b>223</b> can be established, as in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, based on the response <b>233</b> using the secret cryptographic key <b>124</b>, the cryptographic nonce <b>247</b>, the counter value <b>225</b>, the digital signature <b>229</b>, and/or another secret of the memory device <b>130</b> known to the memory device <b>130</b> and the server system <b>102</b>.</p><p id="p-0176" num="0175">Optionally, the control data <b>272</b> can include a secret cryptographic key <b>124</b> that the server system <b>102</b> has in association with the unique identification <b>122</b> of the memory device <b>130</b> for the control of the memory device <b>130</b>. With the secret cryptographic key <b>124</b>, the client computer system <b>105</b> has the same control privileges, associated with the secret cryptographic key <b>124</b>, as the server system <b>102</b>. Optionally, after the secret cryptographic key <b>124</b> is provided to the client computer system <b>105</b>, the server system <b>102</b> may erase the secret cryptographic key <b>124</b> from the server system <b>102</b>; and thus, the control privileges associated with the secret cryptographic key <b>124</b> are transferred to the client computer system <b>105</b>.</p><p id="p-0177" num="0176"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a method to control a memory device according to one embodiment. The method of <figref idref="DRAWINGS">FIG. <b>8</b></figref> can be performed by processing logic that can include hardware (e.g., processing device, circuitry, dedicated logic, programmable logic, microcode, hardware of a device, integrated circuit, etc.), software/firmware (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method of <figref idref="DRAWINGS">FIG. <b>8</b></figref> is performed at least in part by the server system <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>4</b></figref>, <figref idref="DRAWINGS">FIG. <b>5</b></figref>, and/or <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Although shown in a particular sequence or order, unless otherwise specified, the order of the processes can be modified. Thus, the illustrated embodiments should be understood only as examples, and the illustrated processes can be performed in a different order, and some processes can be performed in parallel. Additionally, one or more processes can be omitted in various embodiments. Thus, not all processes are required in every embodiment. Other process flows are possible.</p><p id="p-0178" num="0177">At block <b>301</b>, a server system <b>102</b> establishes with a client computer system <b>105</b> a connection (e.g., a secure authenticated connection <b>201</b>).</p><p id="p-0179" num="0178">At block <b>303</b>, the server system <b>102</b> receives, over the connection <b>201</b> and from the client computer system <b>105</b>, a request <b>271</b> having a batch identification <b>257</b> that is configured in the server system <b>102</b> to identify a batch of multiple memory devices (e.g., <b>130</b>).</p><p id="p-0180" num="0179">For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, multiple memory devices (e.g., <b>130</b>) have different unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b>. The batch identification <b>257</b> can be used to identify the entire set of unique identifications <b>122</b>, <b>252</b>, . . . , <b>254</b> of the memory devices (e.g., <b>130</b>).</p><p id="p-0181" num="0180">At block <b>305</b>, the server system <b>102</b> determines, based on data stored in the server system <b>102</b>, that the client computer system <b>105</b> is eligible to control the multiple memory devices in the batch.</p><p id="p-0182" num="0181">For example, the server system <b>102</b> can store data associating the batch identification <b>257</b> with the client identifier <b>259</b> of the client computer system <b>105</b> and/or the privileges <b>265</b> of the client computer system <b>105</b> to control one or more batches of memory devices (e.g., <b>130</b>).</p><p id="p-0183" num="0182">In response to the determination that the client computer system <b>105</b> is eligible to control the memory devices (e.g., <b>130</b>), at block <b>307</b>, the server system <b>102</b> determines control data (e.g., <b>272</b>) for each respective memory device (e.g., <b>130</b>) in the batch based on at least a cryptographic key (e.g., <b>124</b>) stored in the server system <b>102</b> in association with the respective memory device (e.g., <b>130</b>).</p><p id="p-0184" num="0183">For example, the control data <b>272</b> for the unique identification <b>122</b> can include a cryptographic key that can be used to validate a second digital signature <b>229</b> applied on identity data provided in a response <b>233</b> when the client computer system <b>105</b> sends a request <b>231</b> for the identity data.</p><p id="p-0185" num="0184">Alternatively, the control data <b>272</b> can include the second digital signature <b>229</b> that the server system <b>102</b> expects the memory device <b>130</b> to generate in response to the request <b>231</b> for the identity data. The second digital signature <b>229</b> is to be applied on a second message having an unique identification <b>122</b> of the respective memory device <b>130</b>, a value <b>225</b> from a counter <b>221</b> configured in the respective memory device <b>130</b>, and a second cryptographic nonce <b>227</b>. The server system <b>102</b> can determine a second cryptographic nonce <b>227</b> for the request <b>231</b> and determine an expected counter value of the memory device <b>130</b> (e.g., based on the last seen value of the counter <b>221</b> of the memory device <b>130</b>). The server system <b>102</b> can use a cryptographic key <b>124</b> of the memory device <b>130</b> to compute the expected digital signature that is be applied by the memory device <b>130</b> on a response <b>233</b> to a request <b>231</b> for the identity data of the memory device <b>130</b>. The control data <b>272</b> can include the second cryptographic nonce <b>227</b>, the expected counter value, and the expected digital signature. The client computer system <b>105</b> can send the request <b>231</b> with the second cryptographic nonce <b>227</b> to cause the memory device <b>130</b> to provide a response <b>233</b> having a counter value <b>225</b> that matches with the expected counter value. Then, the expected digital signature provided in the control data <b>272</b> can be compared to the second digital signature <b>229</b> in the identity data response <b>233</b> to determine whether the signatures match with each other and thus whether the memory device <b>130</b> is authentic. When the memory device <b>130</b> produces the response <b>233</b> having the matching digital signature <b>229</b>, the memory device <b>130</b> also has the session key <b>223</b>, which may be used in the processing of the request <b>245</b> for the execution of the command <b>239</b>.</p><p id="p-0186" num="0185">At block <b>309</b>, the server system <b>102</b> transmits, through the connection <b>201</b> to the client computer system <b>105</b>, a response <b>273</b> that contains the control data (e.g., <b>272</b>) and is responsive to the request <b>271</b>.</p><p id="p-0187" num="0186">After receiving the response <b>273</b>, the client computer system <b>105</b> can control security aspects of the respective memory device (e.g., <b>130</b>) in the batch without further communications with the server system <b>102</b>.</p><p id="p-0188" num="0187">At block <b>311</b>, the client computer system <b>105</b> uses the control data (e.g., <b>272</b>) to submit a command <b>239</b> with a first digital signature <b>243</b> to the respective memory device (e.g., <b>130</b>).</p><p id="p-0189" num="0188">For example, the first digital signature <b>243</b> is applied to a first message in a request <b>245</b> from the client computer system <b>105</b> to the memory device <b>130</b>. The first message includes the command <b>239</b> and a first cryptographic nonce <b>247</b>.</p><p id="p-0190" num="0189">For example, the first digital signature <b>243</b> includes a hash-based message authentication code (HMAC) generated from the first message and a cryptographic key that is stored in both the respective memory device and the server system. The control data <b>272</b> provided in the batch response <b>273</b> can include the cryptographic key to generate the first digital signature <b>243</b>, or include the first cryptographic nonce <b>247</b> and the first digital signature <b>243</b> generated by the server system <b>102</b> for the client computer system <b>105</b>.</p><p id="p-0191" num="0190">For example, the first digital signature <b>243</b> can be generated using the session key <b>223</b> established in the respective memory device <b>130</b> in response to a request <b>231</b> for identity data of the respective memory device <b>130</b>, or a cryptographic key stored in the server system <b>102</b> in association with the unique identification <b>122</b> of the respective memory device <b>130</b>, or any combination thereof.</p><p id="p-0192" num="0191">For example, the control data <b>272</b> can include the first digital signature <b>243</b> by the server system <b>102</b> for the client computer system <b>105</b>, or a cryptographic key that can be used by the client computer system <b>105</b> to generate the first digital signature <b>243</b> independently from the server system <b>102</b>.</p><p id="p-0193" num="0192">At block <b>313</b>, the respective memory device (e.g., <b>130</b>) validates the first digital signature <b>243</b> prior to execution of the command <b>239</b>.</p><p id="p-0194" num="0193">For example, the command <b>239</b> can be executed in the respective memory device (e.g., <b>130</b>) to activate a security feature of the respective memory device (e.g., <b>130</b>), to replace a first cryptographic key with a second cryptographic key, or any combination thereof.</p><p id="p-0195" num="0194"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example machine of a computer system <b>400</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, can be executed. In some embodiments, the computer system <b>400</b> can correspond to a server system <b>102</b> (e.g., the server system <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that includes, is coupled to, or utilizes a memory sub-system (e.g., the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>) or can be used to perform the operations of a memory control server <b>205</b> (e.g., to execute instructions to perform operations corresponding to the server system <b>102</b>) described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b></figref> &#x2014; <b>8</b>. In alternative embodiments, the machine can be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the internet. The machine can operate in the capacity of a server or a client machine in client-server network environment, as a peer machine in a peer-to-peer (or distributed) network environment, or as a server or a client machine in a cloud computing infrastructure or environment.</p><p id="p-0196" num="0195">The machine can be a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p><p id="p-0197" num="0196">The example computer system <b>400</b> includes a processing device <b>402</b>, a main memory <b>404</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), static random access memory (SRAM), etc.), and a data storage system <b>418</b>, which communicate with each other via a bus <b>430</b> (which can include multiple buses).</p><p id="p-0198" num="0197">Processing device <b>402</b> represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device can be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>402</b> can also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>402</b> is configured to execute instructions <b>426</b> for performing the operations and steps discussed herein. The computer system <b>400</b> can further include a network interface device <b>408</b> to communicate over the network <b>420</b>.</p><p id="p-0199" num="0198">The data storage system <b>418</b> can include a machine-readable medium <b>424</b> (also known as a computer-readable medium) on which is stored one or more sets of instructions <b>426</b> or software embodying any one or more of the methodologies or functions described herein. The instructions <b>426</b> can also reside, completely or at least partially, within the main memory <b>404</b> and/or within the processing device <b>402</b> during execution thereof by the computer system <b>400</b>, the main memory <b>404</b> and the processing device <b>402</b> also constituting machine-readable storage media. The machine-readable medium <b>424</b>, data storage system <b>418</b>, and/or main memory <b>404</b> can correspond to the memory sub-system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0200" num="0199">In one embodiment, the instructions <b>426</b> include instructions to implement functionality corresponding to an access control server <b>101</b> (e.g., the access control server <b>101</b> described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>). While the machine-readable medium <b>424</b> is shown in an example embodiment to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term &#x201c;machine-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.</p><p id="p-0201" num="0200">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0202" num="0201">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. The present disclosure can refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage systems.</p><p id="p-0203" num="0202">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus can be specially constructed for the intended purposes, or it can include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0204" num="0203">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein, or it can prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings of the disclosure as described herein.</p><p id="p-0205" num="0204">The present disclosure can be provided as a computer program product, or software, that can include a machine-readable medium having stored thereon instructions, which can be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). In some embodiments, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory components, etc.</p><p id="p-0206" num="0205">In this description, various functions and operations are described as being performed by or caused by computer instructions to simplify description. However, those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the computer instructions by one or more controllers or processors, such as a microprocessor. Alternatively, or in combination, the functions and operations can be implemented using special purpose circuitry, with or without software instructions, such as using application-specific integrated circuit (ASIC) or field-programmable gate array (FPGA). Embodiments can be implemented using hardwired circuitry without software instructions, or in combination with software instructions. Thus, the techniques are limited neither to any specific combination of hardware circuitry and software, nor to any particular source for the instructions executed by the data processing system.</p><p id="p-0207" num="0206">In the foregoing specification, embodiments of the disclosure have been described with reference to specific example embodiments thereof. It will be evident that various modifications can be made thereto without departing from the broader spirit and scope of embodiments of the disclosure as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising:<claim-text>memory; and</claim-text><claim-text>at least one processor configured to:<claim-text>store data representative of an identification of a batch of memory devices, wherein each respective memory device in the batch of memory devices is manufactured to perform validation of a digital signature signed for a command using a respective cryptographic key prior to execution of the command;</claim-text><claim-text>receive, via a secure authenticated connection from a computer, a request having the identification;</claim-text><claim-text>verify a privilege of the computer to control the batch of memory devices; and</claim-text><claim-text>transmit, via the secure authenticated connection to the computer and responsive to the request, a response containing the respective cryptographic key for the respective memory device in the batch of memory devices.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, configured to include a key management server and an access control server, wherein the key management server is configured to store data associating the identification of the batch of memory devices with identifications of individual memory devices in the batch but no data associating the identification of the batch of memory devices with any identification of the computer.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the access control server is configured to store data associating the identification of the batch of memory devices with an identification of the computer to indicate the privilege of the computer to control the batch of memory devices, but no data associating the identification of the batch of memory devices with the identifications of individual memory devices in the batch.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the command is configured to, when executed in the respective memory device, cause the respective memory device to activate a security feature of the respective memory device.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the command is configured to, when executed in the respective memory device, cause the respective memory device to replace a first cryptographic key, used by the respective memory device to control access, with a second cryptographic key.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the digital signature is based on a message including the command and a cryptographic nonce. The system of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the digital signature includes a hash-based message authentication code (HMAC) generated from the message and the respective cryptographic key.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A method, comprising:<claim-text>storing, in a system, data representative of an identification of a batch of memory devices, wherein each respective memory device in the batch of memory devices is manufactured to perform validation of a digital signature signed for a command using a respective cryptographic key prior to execution of the command;</claim-text><claim-text>receiving, in the system via a secure authenticated connection from a computer, a request having the identification;</claim-text><claim-text>verifying, by the system, a privilege of the computer to control the batch of memory devices; and</claim-text><claim-text>transmitting, from the system via the secure authenticated connection to the computer and responsive to the request, a response containing the respective cryptographic key for the respective memory device in the batch of memory devices.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the system includes a key management server configured to store data associating the identification of the batch of memory devices with identifications of individual memory devices in the batch but no data associating the identification of the batch of memory devices with any identification of the computer.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the system further includes an access control server configured to store data associating the identification of the batch of memory devices with an identification of the computer to indicate the privilege of the computer to control the batch of memory devices, but no data associating the identification of the batch of memory devices with the identifications of individual memory devices in the batch.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the command is configured to, when executed in the respective memory device, cause the respective memory device to activate a security feature of the respective memory device.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the command is configured to, when executed in the respective memory device, cause the respective memory device to replace a first cryptographic key, used by the respective memory device to control access, with a second cryptographic key.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the digital signature is based on a message including the command and a cryptographic nonce.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the digital signature includes a hash-based message authentication code (HMAC) generated from the message and the respective cryptographic key.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer storage medium storing instructions which, when executed by a system, cause the system to perform a method, the method comprising:<claim-text>storing, in the system, data representative of an identification of a batch of memory devices, wherein each respective memory device in the batch of memory devices is manufactured to perform validation of a digital signature signed for a command using a respective cryptographic key prior to execution of the command;</claim-text><claim-text>receiving, in the system via a secure authenticated connection from a computer, a request having the identification;</claim-text><claim-text>verifying, by the system, a privilege of the computer to control the batch of memory devices; and</claim-text><claim-text>transmitting, from the system via the secure authenticated connection to the computer and responsive to the request, a response containing the respective cryptographic key for the respective memory device in the batch of memory devices.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer storage medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the system includes a key management server configured to store data associating the identification of the batch of memory devices with identifications of individual memory devices in the batch but no data associating the identification of the batch of memory devices with any identification of the computer.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer storage medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the system further includes an access control server configured to store data associating the identification of the batch of memory devices with an identification of the computer to indicate the privilege of the computer to control the batch of memory devices, but no data associating the identification of the batch of memory devices with the identifications of individual memory devices in the batch.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the command is configured to, when executed in the respective memory device, cause the respective memory device to activate a security feature of the respective memory device.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the command is configured to, when executed in the respective memory device, cause the respective memory device to replace a first cryptographic key, used by the respective memory device to control access, with a second cryptographic key.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the digital signature is based on a message including the command and a cryptographic nonce; and wherein the digital signature includes a hash-based message authentication code (HMAC) generated from the message and the respective cryptographic key.</claim-text></claim></claims></us-patent-application>