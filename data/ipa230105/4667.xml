<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004668A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004668</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17365721</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>955</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6227</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>955</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>602</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR ENFORCING FORCEFUL BROWSING IN DISTRIBUTED SYSTEMS IN REAL TIME</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Citrix Systems, Inc.</orgname><address><city>Fort Lauderdale</city><state>FL</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Thakur</last-name><first-name>Ratnesh Singh</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Katta</last-name><first-name>Rama Rao</first-name><address><city>Fremont</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Hegde</last-name><first-name>Raghukrishna</first-name><address><city>Milpitas</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Citrix Systems, Inc.</orgname><role>02</role><address><city>Fort Lauderdale</city><state>FL</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Described embodiments provide systems and methods for validating a request to access a resource. A device can receive a first request from a client that includes a first uniform resource locator (URL) of the server. The device may receive a response from the server that includes a second URL. The device may update the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL. The device may receive a second request that includes the client identifier, and a third URL having the first value. The device may determine to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="113.71mm" wi="158.75mm" file="US20230004668A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="227.92mm" wi="165.86mm" orientation="landscape" file="US20230004668A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="211.16mm" wi="156.63mm" orientation="landscape" file="US20230004668A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="161.63mm" wi="165.18mm" orientation="landscape" file="US20230004668A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="229.70mm" wi="158.07mm" orientation="landscape" file="US20230004668A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="226.23mm" wi="167.05mm" orientation="landscape" file="US20230004668A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="220.90mm" wi="166.96mm" orientation="landscape" file="US20230004668A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="230.80mm" wi="166.79mm" orientation="landscape" file="US20230004668A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0002" num="0001">The present application generally relates to protecting resources from unauthorized access, including but not limited to systems and methods for enforcing forceful browsing in distributed systems.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Certain protocols can execute one or more processes that are vulnerable to unauthorized or malicious attempts to access one or more resources. Some approaches may provide protective mechanisms against said attempts. For example, one or more approaches may configure one or more points of entry/access to a resource. An authorized user may use the one or more points of entry to access a resource and/or navigate/traverse to other resources. At least one problem with said approaches may be a failure to provide adequate protection against unauthorized attempts by an attacker to randomly access/traverse the one or more resources. Failing to provide adequate protection can provide the attacker with increased accessibility to sensitive/secured information.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features, nor is it intended to limit the scope of the claims included herewith.</p><p id="p-0005" num="0004">The present disclosure is directed towards systems and methods for validating a request to access a resource (e.g., via a uniform resource locator (URL)) and/or a service (e.g., an application resource, such as a web application, SaaS application or remote-hosted network application), thereby preventing unauthorized malicious actors or bots from randomly accessing one or more resources and/or services. If validated according to the systems and methods described herein, a device may allow the server to receive the request. Otherwise, the device may determine to prevent and/or preclude the server from receiving the request. The device (e.g., a gateway module, a local/foreign node, and/or an application delivery controller (ADC)) intermediary between a client and a server (e.g., a backend server supporting hypertext transfer protocol (HTTP) and/or hypertext transfer protocol secure (HTTPS)) may receive, obtain, and/or process a first request from the client (e.g., a smartphone, a laptop, a tablet device, a desktop computer of a user, and/or a client supporting HTTP/HTTPS). The device may correspond to a cluster of devices comprising one or more devices (e.g., distributed systems). The first request and/or message (e.g., HTTP GET, GET /index.html, and/or other requests) may include, provide, specify, and/or indicate a first URL to access a first resource of the server (e.g., a resource, service, and/or application hosted on the server). A URL, such as a first/second URL, can be a URI, a web path, an address, and/or other resource identifiers/locators. Responsive to receiving the first request, the device may create, generate, assign, determine, and/or configure a client identifier (e.g., CLIENT_ID, SESSION_ID, and/or other identifiers) for the client sending the first request. In some embodiments, the device may process, parse, analyze, and/or evaluate a received response from the server (e.g., HTTP RESPONSE), wherein the response can include, indicate, and/or specify one or more second URLs to access one or more second resources.</p><p id="p-0006" num="0005">In some embodiments, the device can update, modify, and/or adjust the response from the server (e.g., a response for /index.html). For instance, the device can update the response by including, incorporating, appending, and/or adding the client identifier in a set-cookie field (e.g., a set-cookie HTTP header) of the response. In some embodiments, the device can update the response by adding, appending, and/or incorporating a first value of a query parameter (e.g., HTTP QUERY PARAMETER and/or as_url_id) to each URL in the response (e.g., HTTP RESPONSE). The first value can be determined, generated, created, and/or configured (e.g., by the device) according to the client identifier, a key (e.g., a preconfigured encryption key), and/or each URL in the response. For example, the device may determine the first value by calculating, generating, computing, and/or determining a signed form/version of each URL and/or the client identifier. As such, each URL may be identified, specified, indicated, and/or associated with a unique value of a query parameter.</p><p id="p-0007" num="0006">In some embodiments, the device may receive (e.g., from the client) a subsequent request (e.g., a second request) that includes, provides, specifies, and/or indicates a client identifier (e.g., CLIENT_ID), a subsequent URL having the first value, and/or other information. Responsive to receiving the subsequent request, the device may determine, generate, and/or compute a second value of a query parameter according to the received client identifier (provided by the subsequent request), the subsequent URL, and/or the preconfigured key (e.g., stored in the device). The second value may include or correspond to a signed form/version of the subsequent URL and/or the client identifier of the subsequent response. Once the device generates and/or determines the second value, the device may compare the calculated second value with the first value appended to the subsequent URL (e.g., indicated via the subsequent response). If the second value corresponds to (e.g., matches or is within a defined range/extent of) the first value of the subsequent URL, the device may allow the server to receive and/or obtain the subsequent request. Otherwise, the device may determine to prevent and/or preclude the server from receiving the subsequent request.</p><p id="p-0008" num="0007">In one aspect, the present disclosure is directed to a method for validating a request to access a resource. The method can include receiving, by a device intermediary between a client and a server, a first request from the client that includes a first uniform resource locator (URL) of the server. The device may receive a response from the server that includes a second URL. The device may update the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL. The device may receive a second request that includes the client identifier, and a third URL having the first value. The device may determine to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key.</p><p id="p-0009" num="0008">In some embodiments, the device may assign the client identifier as a unique identifier to the client. The device may determine the first value according to the client identifier, the key, and the second URL. In certain embodiments, the device may determine whether there is a match between the client identifier in the set-cookie field and the client identifier assigned by the device. The device may determine the second value according to the client identifier from the second request, the third URL and the key. Responsive to the match, the device may determine whether the first value of the third URL matches the second value. In some embodiments, the device may determine to prevent the server from receiving the second request when the first value is different from the second value. In some embodiments, the device may determine to allow the server to receive the second request when the first value matches the second value, the second value determined according to the client identifier from the second request, the third URL, and one of a plurality of candidate keys.</p><p id="p-0010" num="0009">In certain embodiments, the device may receive, from a second client, a third request that includes a client identifier of the second client. The device may determine to prevent the server from receiving the third request when the client identifier of the second client fails to match the client identifier assigned by the device. In some embodiments, the device may comprise at least a first device and a second device having access to the key. The first device may receive the first request from the client. The first device may receive the response from the server to the first request. The device may update the response. In some embodiments, the second device may receive the second request that includes the client identifier, and the third URL having the first value. The second device may determine to allow the server to receive the second request when the first value of the third URL matches the second value determined according to the client identifier from the second request, the third URL and the key.</p><p id="p-0011" num="0010">In some embodiments, the device can maintain the response from the server in a cache. The device may receive, from the client or another client, a second request that includes the first URL. Responsive to the second request, the device may retrieve the response from the cache. The device may update the retrieved response by adding a third value corresponding to the client or the another client, to the second URL. In certain embodiments, the device may generate the client identifier for the client, to be valid for a defined timeout interval.</p><p id="p-0012" num="0011">In one aspect, the present disclosure is directed to a device intermediary between a client and a server for validating a request to access a resource. The device may comprise at least one processor. The at least one processor may be configured to receive a first request from the client that includes a first uniform resource locator (URL) of the server. The at least one processor may be configured to receive a response from the server that includes a second URL. The at least one processor may be configured to update the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL. The at least one processor may be configured to receive a second request that includes the client identifier, and a third URL having the first value. The at least one processor may be configured to determine to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key.</p><p id="p-0013" num="0012">In some embodiments, the at least one processor may be configured to assign the client identifier as a unique identifier to the client. The at least one processor may be configured to determine the first value according to the client identifier, the key, and the second URL. In some embodiments, the at least one processor may be configured to determine whether there is a match between the client identifier in the set-cookie field and the client identifier assigned by the device. The at least one processor may be configured to determine the second value according to the client identifier from the second request, the third URL and the key. Responsive to the match, the at least one processor may be configured to determine whether the first value of the third URL matches the second value. In some embodiments, the at least one processor may be configured to determine to prevent the server from receiving the second request when the first value is different from the second value. In some embodiments, the at least one processor may be configured to determine to allow the server to receive the second request when the first value matches the second value, the second value determined according to the client identifier from the second request, the third URL, and one of a plurality of candidate keys. In some embodiments, the at least one processor may be configured to receive, from a second client, a third request that includes a client identifier of the second client. The at least one processor may be configured to determine to prevent the server from receiving the third request when the client identifier of the second client fails to match the client identifier assigned by the device.</p><p id="p-0014" num="0013">In certain embodiments, the device may comprise at least a first device and a second device having access to the key. At least one processor of the first device may be configured to receive the first request from the client. At least one processor of the first device may be configured to receive the response from the server to the first request. At least one processor of the first device may be configured to update the response. In some embodiments, at least one processor of the second device may be configured to receive the second request that includes the client identifier, and the third URL having the first value. At least one processor of the second device may be configured to determine to allow the server to receive the second request when the first value of the third URL matches the second value determined according to the client identifier from the second request, the third URL and the key. In some embodiments, the at least one processor may be configured to maintain the response from the server in a cache. The at least one processor may be configured to receive, from the client or another client, a second request that includes the first URL. The at least one processor may be configured to retrieve, responsive to the second request, the response from the cache. The at least one processor may be configured to update the retrieved response by adding a third value corresponding to the client or the another client, to the second URL. In certain embodiments, the at least one processor may be configured to generate the client identifier for the client, to be valid for a defined timeout interval.</p><p id="p-0015" num="0014">In one aspect, the present disclosure is directed to a non-transitory computer readable medium storing program instructions for validating a request to access a resource. The program instructions stored in a non-transitory computer readable medium may cause at least one processor to receive a first request from the client that includes a first uniform resource locator (URL) of the server. The at least one processor may reside in a device intermediary between a client and a server. The program instructions can cause the at least one processor to receive a response from the server that includes a second URL. The program instructions may cause the at least one processor to update the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL. The program instructions may cause the at least one processor to receive a second request that includes the client identifier, and a third URL having the first value. The program instructions may cause the at least one processor to determine to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key. In some embodiments, the program instructions may cause the at least one processor to assign the client identifier as a unique identifier to the client. The program instructions may cause the at least one processor to determine the first value according to the client identifier, the key, and the second URL.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWING FIGURES</heading><p id="p-0016" num="0015">Objects, aspects, features, and advantages of embodiments disclosed herein will become more fully apparent from the following detailed description, the appended claims, and the accompanying drawing figures in which like reference numerals identify similar or identical elements. Reference numerals that are introduced in the specification in association with a drawing figure may be repeated in one or more subsequent figures without additional description in the specification in order to provide context for other features, and not every element may be labeled in every figure. The drawing figures are not necessarily to scale, emphasis instead being placed upon illustrating embodiments, principles and concepts. The drawings are not intended to limit the scope of the claims included herewith.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> is a block diagram of a network computing system, in accordance with an illustrative embodiment;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> is a block diagram of a network computing system for delivering a computing environment from a server to a client via an appliance, in accordance with an illustrative embodiment;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> is a block diagram of a computing device, in accordance with an illustrative embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of an appliance for processing communications between a client and a server, in accordance with an illustrative embodiment;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of a system for validating a request to access a resource, in accordance with an illustrative embodiment;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a communication diagram of a system for validating a request to access a resource, in accordance with an illustrative embodiment; and</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram of an example method for validating a request to access a resource, in accordance with an illustrative embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0024" num="0023">Certain protocols (e.g., hypertext transfer protocol (HTTP), hypertext transfer protocol secure (HTTPS), secure sockets layer (SSL), transport layer security (TLS), and/or other protocols) may execute one or more methods (e.g., HTTP GET and/or other methods) that are vulnerable to unauthorized/malicious attempts to access one or more resources (e.g., via one or more uniform resource locators (URLs) of a web server/service). For example, certain approaches (e.g., start uniform resource locator (URL) check, and/or other approaches) may provide, use, and/or configure at least one point of entry/access (e.g., allowed URLs and/or start URLs) to a server, a service, and/or a resource. An authorized user may use the point(s) of entry to access the resource, server, and/or service, and/or to navigate/traverse to other resources (e.g., closure URLs). However, said approaches may fail to provide adequate protection against unauthorized attempts (e.g., attempts by an attacker) to randomly access/traverse the other resources. For instance, an attacker can attempt to enumerate and/or access the other resources (e.g., resources that are not referenced by a service, such as an application hosted on the server) by launching, coordinating, performing, and/or executing a forced browsing attack. The resources of interest (e.g., to the attacker) may include and/or store confidential/private information (e.g., source codes and/or user credentials of the authorized user) that can be used for malicious purposes. In some embodiments, approaches that provide inadequate protection against said attacks (e.g., closure URL mechanisms) may fail to perform and/or execute, for example, a session validation check for each request to access a resource. As such, an attacker can bypass a security mechanism (e.g., a web application firewall (WAF)) by copying and/or using a URL (or other resource identifiers) from a different session, thereby gaining unauthorized access to other resource(s). In order to provide adequate protection against such attacks, session validation checks may be performed by associating each resource accessed by a client (e.g., HTTP URLs accessed by the client during a session) to session information of the client (e.g., a client identifier) and/or other information of the session (e.g., a key).</p><p id="p-0025" num="0024">For purposes of reading the description of the various embodiments below, the following descriptions of the sections of the specification and their respective contents may be helpful:</p><p id="p-0026" num="0025">Section A describes a network environment and computing environment which may be useful for practicing embodiments described herein;</p><p id="p-0027" num="0026">Section B describes embodiments of systems and methods for delivering a computing environment to a remote user;</p><p id="p-0028" num="0027">Section C describes embodiments of systems and methods for validating a request to access a resource.</p><heading id="h-0006" level="2">A. Network and Computing Environment</heading><p id="p-0029" num="0028">Referring to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, an illustrative network environment <b>100</b> is depicted. Network environment <b>100</b> may include one or more clients <b>102</b>(<b>1</b>)-<b>102</b>(<i>n</i>) (also generally referred to as local machine(s) <b>102</b> or client(s) <b>102</b>) in communication with one or more servers <b>106</b>(<b>1</b>)-<b>106</b>(<i>n</i>) (also generally referred to as remote machine(s) <b>106</b> or server(s) <b>106</b>) via one or more networks <b>104</b>(<b>1</b>)-<b>104</b><i>n </i>(generally referred to as network(s) <b>104</b>). In some embodiments, a client <b>102</b> may communicate with a server <b>106</b> via one or more appliances <b>200</b>(<b>1</b>)-<b>200</b><i>n </i>(generally referred to as appliance(s) <b>200</b> or gateway(s) <b>200</b>).</p><p id="p-0030" num="0029">Although the embodiment shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> shows one or more networks <b>104</b> between clients <b>102</b> and servers <b>106</b>, in other embodiments, clients <b>102</b> and servers <b>106</b> may be on the same network <b>104</b>. The various networks <b>104</b> may be the same type of network or different types of networks. For example, in some embodiments, network <b>104</b>(<b>1</b>) may be a private network such as a local area network (LAN) or a company Intranet, while network <b>104</b>(<b>2</b>) and/or network <b>104</b>(<i>n</i>) may be a public network, such as a wide area network (WAN) or the Internet. In other embodiments, both network <b>104</b>(<b>1</b>) and network <b>104</b>(<i>n</i>) may be private networks. Networks <b>104</b> may employ one or more types of physical networks and/or network topologies, such as wired and/or wireless networks, and may employ one or more communication transport protocols, such as transmission control protocol (TCP), internet protocol (IP), user datagram protocol (UDP) or other similar protocols.</p><p id="p-0031" num="0030">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, one or more appliances <b>200</b> may be located at various points or in various communication paths of network environment <b>100</b>. For example, appliance <b>200</b> may be deployed between two networks <b>104</b>(<b>1</b>) and <b>104</b>(<b>2</b>), and appliances <b>200</b> may communicate with one another to work in conjunction to, for example, accelerate network traffic between clients <b>102</b> and servers <b>106</b>. In other embodiments, the appliance <b>200</b> may be located on a network <b>104</b>. For example, appliance <b>200</b> may be implemented as part of one of clients <b>102</b> and/or servers <b>106</b>. In an embodiment, appliance <b>200</b> may be implemented as a network device such as Citrix networking (formerly NetScaler&#xae;) products sold by Citrix Systems, Inc. of Fort Lauderdale, Fla.</p><p id="p-0032" num="0031">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, one or more servers <b>106</b> may operate as a server farm <b>38</b>. Servers <b>106</b> of server farm <b>38</b> may be logically grouped, and may either be geographically co-located (e.g., on premises) or geographically dispersed (e.g., cloud based) from clients <b>102</b> and/or other servers <b>106</b>. In an embodiment, server farm <b>38</b> executes one or more applications on behalf of one or more of clients <b>102</b> (e.g., as an application server), although other uses are possible, such as a file server, gateway server, proxy server, or other similar server uses. Clients <b>102</b> may seek access to hosted applications on servers <b>106</b>.</p><p id="p-0033" num="0032">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>, in some embodiments, appliances <b>200</b> may include, be replaced by, or be in communication with, one or more additional appliances, such as WAN optimization appliances <b>205</b>(<b>1</b>)-<b>205</b>(<i>n</i>), referred to generally as WAN optimization appliance(s) <b>205</b>. For example, WAN optimization appliance <b>205</b> may accelerate, cache, compress or otherwise optimize or improve performance, operation, flow control, or quality of service of network traffic, such as traffic to and/or from a WAN connection, such as optimizing Wide Area File Services (WAFS), accelerating Server Message Block (SMB) or Common Internet File System (CIFS). In some embodiments, appliance <b>205</b> may be a performance enhancing proxy or a WAN optimization controller. In one embodiment, appliance <b>205</b> may be implemented as Citrix SD-WAN products sold by Citrix Systems, Inc. of Fort Lauderdale, Fla.</p><p id="p-0034" num="0033">Referring to <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, an example network environment, <b>100</b>&#x2032;, for delivering and/or operating a computing network environment on a client <b>102</b> is shown. As shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, a server <b>106</b> may include an application delivery system <b>190</b> for delivering a computing environment, application, and/or data files to one or more clients <b>102</b>. Client <b>102</b> may include client agent <b>120</b> and computing environment <b>15</b>. Computing environment <b>15</b> may execute or operate an application, <b>16</b>, that accesses, processes or uses a data file <b>17</b>. Computing environment <b>15</b>, application <b>16</b> and/or data file <b>17</b> may be delivered via appliance <b>200</b> and/or the server <b>106</b>.</p><p id="p-0035" num="0034">Appliance <b>200</b> may accelerate delivery of all or a portion of computing environment <b>15</b> to a client <b>102</b>, for example by the application delivery system <b>190</b>. For example, appliance <b>200</b> may accelerate delivery of a streaming application and data file processable by the application from a data center to a remote user location by accelerating transport layer traffic between a client <b>102</b> and a server <b>106</b>. Such acceleration may be provided by one or more techniques, such as: 1) transport layer connection pooling, 2) transport layer connection multiplexing, 3) transport control protocol buffering, 4) compression, 5) caching, or other techniques. Appliance <b>200</b> may also provide load balancing of servers <b>106</b> to process requests from clients <b>102</b>, act as a proxy or access server to provide access to the one or more servers <b>106</b>, provide security and/or act as a firewall between a client <b>102</b> and a server <b>106</b>, provide Domain Name Service (DNS) resolution, provide one or more virtual servers or virtual internet protocol servers, and/or provide a secure virtual private network (VPN) connection from a client <b>102</b> to a server <b>106</b>, such as a secure socket layer (SSL) VPN connection and/or provide encryption and decryption operations.</p><p id="p-0036" num="0035">Application delivery management system <b>190</b> may deliver computing environment <b>15</b> to a user (e.g., client <b>102</b>), remote or otherwise, based on authentication and authorization policies applied by policy engine <b>195</b>. A remote user may obtain a computing environment and access to server stored applications and data files from any network-connected device (e.g., client <b>102</b>). For example, appliance <b>200</b> may request an application and data file from server <b>106</b>. In response to the request, application delivery system <b>190</b> and/or server <b>106</b> may deliver the application and data file to client <b>102</b>, for example via an application stream to operate in computing environment <b>15</b> on client <b>102</b>, or via a remote-display protocol or otherwise via remote-based or server-based computing. In an embodiment, application delivery system <b>190</b> may be implemented as any portion of the Citrix Workspace Suite&#x2122; by Citrix Systems, Inc., such as Citrix Virtual Apps and Desktops (formerly XenApp&#xae; and XenDesktop&#xae;).</p><p id="p-0037" num="0036">Policy engine <b>195</b> may control and manage the access to, and execution and delivery of, applications. For example, policy engine <b>195</b> may determine the one or more applications a user or client <b>102</b> may access and/or how the application should be delivered to the user or client <b>102</b>, such as a server-based computing, streaming or delivering the application locally to the client <b>120</b> for local execution.</p><p id="p-0038" num="0037">For example, in operation, a client <b>102</b> may request execution of an application (e.g., application <b>16</b>&#x2032;) and application delivery system <b>190</b> of server <b>106</b> determines how to execute application <b>16</b>&#x2032;, for example based upon credentials received from client <b>102</b> and a user policy applied by policy engine <b>195</b> associated with the credentials. For example, application delivery system <b>190</b> may enable client <b>102</b> to receive application-output data generated by execution of the application on a server <b>106</b>, may enable client <b>102</b> to execute the application locally after receiving the application from server <b>106</b>, or may stream the application via network <b>104</b> to client <b>102</b>. For example, in some embodiments, the application may be a server-based or a remote-based application executed on server <b>106</b> on behalf of client <b>102</b>. Server <b>106</b> may display output to client <b>102</b> using a thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol by Citrix Systems, Inc. of Fort Lauderdale, Fla. The application may be any application related to real-time data communications, such as applications for streaming graphics, streaming video and/or audio or other data, delivery of remote desktops or workspaces or hosted services or applications, for example infrastructure as a service (IaaS), desktop as a service (DaaS), workspace as a service (WaaS), software as a service (SaaS) or platform as a service (PaaS).</p><p id="p-0039" num="0038">One or more of servers <b>106</b> may include a performance monitoring service or agent <b>197</b>. In some embodiments, a dedicated one or more servers <b>106</b> may be employed to perform performance monitoring. Performance monitoring may be performed using data collection, aggregation, analysis, management and reporting, for example by software, hardware or a combination thereof. Performance monitoring may include one or more agents for performing monitoring, measurement and data collection activities on clients <b>102</b> (e.g., client agent <b>120</b>), servers <b>106</b> (e.g., agent <b>197</b>) or an appliance <b>200</b> and/or <b>205</b> (agent not shown). In general, monitoring agents (e.g., <b>120</b> and/or <b>197</b>) execute transparently (e.g., in the background) to any application and/or user of the device. In some embodiments, monitoring agent <b>197</b> includes any of the product embodiments referred to as Citrix Analytics or Citrix Application Delivery Management by Citrix Systems, Inc. of Fort Lauderdale, Fla.</p><p id="p-0040" num="0039">The monitoring agents <b>120</b> and <b>197</b> may monitor, measure, collect, and/or analyze data on a predetermined frequency, based upon an occurrence of given event(s), or in real time during operation of network environment <b>100</b>. The monitoring agents may monitor resource consumption and/or performance of hardware, software, and/or communications resources of clients <b>102</b>, networks <b>104</b>, appliances <b>200</b> and/or <b>205</b>, and/or servers <b>106</b>. For example, network connections such as a transport layer connection, network latency, bandwidth utilization, end-user response times, application usage and performance, session connections to an application, cache usage, memory usage, processor usage, storage usage, database transactions, client and/or server utilization, active users, duration of user activity, application crashes, errors, or hangs, the time required to log-in to an application, a server, or the application delivery system, and/or other performance conditions and metrics may be monitored.</p><p id="p-0041" num="0040">The monitoring agents <b>120</b> and <b>197</b> may provide application performance management for application delivery system <b>190</b>. For example, based upon one or more monitored performance conditions or metrics, application delivery system <b>190</b> may be dynamically adjusted, for example periodically or in real-time, to optimize application delivery by servers <b>106</b> to clients <b>102</b> based upon network environment performance and conditions.</p><p id="p-0042" num="0041">In described embodiments, clients <b>102</b>, servers <b>106</b>, and appliances <b>200</b> and <b>205</b> may be deployed as and/or executed on any type and form of computing device, such as any desktop computer, laptop computer, or mobile device capable of communication over at least one network and performing the operations described herein. For example, clients <b>102</b>, servers <b>106</b> and/or appliances <b>200</b> and <b>205</b> may each correspond to one computer, a plurality of computers, or a network of distributed computers such as computer <b>101</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>.</p><p id="p-0043" num="0042">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, computer <b>101</b> may include one or more processors <b>103</b>, volatile memory <b>122</b> (e.g., RAM), non-volatile memory <b>128</b> (e.g., one or more hard disk drives (HDDs) or other magnetic or optical storage media, one or more solid state drives (SSDs) such as a flash drive or other solid state storage media, one or more hybrid magnetic and solid state drives, and/or one or more virtual storage volumes, such as a cloud storage, or a combination of such physical storage volumes and virtual storage volumes or arrays thereof), user interface (UI) <b>123</b>, one or more communications interfaces <b>118</b>, and communication bus <b>150</b>. User interface <b>123</b> may include graphical user interface (GUI) <b>124</b> (e.g., a touchscreen, a display, etc.) and one or more input/output (I/O) devices <b>126</b> (e.g., a mouse, a keyboard, etc.). Non-volatile memory <b>128</b> stores operating system <b>115</b>, one or more applications <b>116</b>, and data <b>117</b> such that, for example, computer instructions of operating system <b>115</b> and/or applications <b>116</b> are executed by processor(s) <b>103</b> out of volatile memory <b>122</b>. Data may be entered using an input device of GUI <b>124</b> or received from I/O device(s) <b>126</b>. Various elements of computer <b>101</b> may communicate via communication bus <b>150</b>. Computer <b>101</b> as shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref> is shown merely as an example, as clients <b>102</b>, servers <b>106</b> and/or appliances <b>200</b> and <b>205</b> may be implemented by any computing or processing environment and with any type of machine or set of machines that may have suitable hardware and/or software capable of operating as described herein.</p><p id="p-0044" num="0043">Processor(s) <b>103</b> may be implemented by one or more programmable processors executing one or more computer programs to perform the functions of the system. As used herein, the term &#x201c;processor&#x201d; describes an electronic circuit that performs a function, an operation, or a sequence of operations. The function, operation, or sequence of operations may be hard coded into the electronic circuit or soft coded by way of instructions held in a memory device. A &#x201c;processor&#x201d; may perform the function, operation, or sequence of operations using digital values or using analog signals. In some embodiments, the &#x201c;processor&#x201d; can be embodied in one or more application specific integrated circuits (ASICs), microprocessors, digital signal processors, microcontrollers, field programmable gate arrays (FPGAs), programmable logic arrays (PLAs), multi-core processors, or general-purpose computers with associated memory. The &#x201c;processor&#x201d; may be analog, digital or mixed-signal. In some embodiments, the &#x201c;processor&#x201d; may be one or more physical processors or one or more &#x201c;virtual&#x201d; (e.g., remotely located or &#x201c;cloud&#x201d;) processors.</p><p id="p-0045" num="0044">Communications interfaces <b>118</b> may include one or more interfaces to enable computer <b>101</b> to access a computer network such as a LAN, a WAN, or the Internet through a variety of wired and/or wireless or cellular connections.</p><p id="p-0046" num="0045">In described embodiments, a first computing device <b>101</b> may execute an application on behalf of a user of a client computing device (e.g., a client <b>102</b>), may execute a virtual machine, which provides an execution session within which applications execute on behalf of a user or a client computing device (e.g., a client <b>102</b>), such as a hosted desktop session, may execute a terminal services session to provide a hosted desktop environment, or may provide access to a computing environment including one or more of: one or more applications, one or more desktop applications, and one or more desktop sessions in which one or more applications may execute.</p><p id="p-0047" num="0046">Additional details of the implementation and operation of network environment <b>100</b>, clients <b>102</b>, servers <b>106</b>, and appliances <b>200</b> and <b>205</b> may be as described in U.S. Pat. No. 9,538,345, issued Jan. 3, 2017 to Citrix Systems, Inc. of Fort Lauderdale, Fla., the teachings of which are hereby incorporated herein by reference.</p><heading id="h-0007" level="2">B. Appliance Architecture</heading><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example embodiment of appliance <b>200</b>. As described herein, appliance <b>200</b> may be implemented as a server, gateway, router, switch, bridge or other type of computing or network device. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, an embodiment of appliance <b>200</b> may include a hardware layer <b>206</b> and a software layer <b>205</b> divided into a user space <b>202</b> and a kernel space <b>204</b>. Hardware layer <b>206</b> provides the hardware elements upon which programs and services within kernel space <b>204</b> and user space <b>202</b> are executed and allow programs and services within kernel space <b>204</b> and user space <b>202</b> to communicate data both internally and externally with respect to appliance <b>200</b>. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, hardware layer <b>206</b> may include one or more processing units <b>262</b> for executing software programs and services, memory <b>264</b> for storing software and data, network ports <b>266</b> for transmitting and receiving data over a network, and encryption processor <b>260</b> for encrypting and decrypting data such as in relation to Secure Socket Layer (SSL) or Transport Layer Security (TLS) processing of data transmitted and received over the network.</p><p id="p-0049" num="0048">An operating system of appliance <b>200</b> allocates, manages, or otherwise segregates the available system memory into kernel space <b>204</b> and user space <b>202</b>. Kernel space <b>204</b> is reserved for running kernel <b>230</b>, including any device drivers, kernel extensions or other kernel related software. As known to those skilled in the art, kernel <b>230</b> is the core of the operating system, and provides access, control, and management of resources and hardware-related elements of application <b>104</b>. Kernel space <b>204</b> may also include a number of network services or processes working in conjunction with cache manager <b>232</b>.</p><p id="p-0050" num="0049">Appliance <b>200</b> may include one or more network stacks <b>267</b>, such as a TCP/IP based stack, for communicating with client(s) <b>102</b>, server(s) <b>106</b>, network(s) <b>104</b>, and/or other appliances <b>200</b> or <b>205</b>. For example, appliance <b>200</b> may establish and/or terminate one or more transport layer connections between clients <b>102</b> and servers <b>106</b>. Each network stack <b>267</b> may include a buffer <b>243</b> for queuing one or more network packets for transmission by appliance <b>200</b>.</p><p id="p-0051" num="0050">Kernel space <b>204</b> may include cache manager <b>232</b>, packet engine <b>240</b>, encryption engine <b>234</b>, policy engine <b>236</b> and compression engine <b>238</b>. In other words, one or more of processes <b>232</b>, <b>240</b>, <b>234</b>, <b>236</b> and <b>238</b> run in the core address space of the operating system of appliance <b>200</b>, which may reduce the number of data transactions to and from the memory and/or context switches between kernel mode and user mode, for example since data obtained in kernel mode may not need to be passed or copied to a user process, thread or user level data structure.</p><p id="p-0052" num="0051">Cache manager <b>232</b> may duplicate original data stored elsewhere or data previously computed, generated or transmitted to reducing the access time of the data. In some embodiments, the cache memory may be a data object in memory <b>264</b> of appliance <b>200</b>, or may be a physical memory having a faster access time than memory <b>264</b>.</p><p id="p-0053" num="0052">Policy engine <b>236</b> may include a statistical engine or other configuration mechanism to allow a user to identify, specify, define or configure a caching policy and access, control and management of objects, data or content being cached by appliance <b>200</b>, and define or configure security, network traffic, network access, compression or other functions performed by appliance <b>200</b>.</p><p id="p-0054" num="0053">Encryption engine <b>234</b> may process any security related protocol, such as SSL or TLS. For example, encryption engine <b>234</b> may encrypt and decrypt network packets, or any portion thereof, communicated via appliance <b>200</b>, may setup or establish SSL, TLS or other secure connections, for example between client <b>102</b>, server <b>106</b>, and/or other appliances <b>200</b> or <b>205</b>. In some embodiments, encryption engine <b>234</b> may use a tunneling protocol to provide a VPN between a client <b>102</b> and a server <b>106</b>. In some embodiments, encryption engine <b>234</b> is in communication with encryption processor <b>260</b>. Compression engine <b>238</b> compresses network packets bi-directionally between clients <b>102</b> and servers <b>106</b> and/or between one or more appliances <b>200</b>.</p><p id="p-0055" num="0054">Packet engine <b>240</b> may manage kernel-level processing of packets received and transmitted by appliance <b>200</b> via network stacks <b>267</b> to send and receive network packets via network ports <b>266</b>. Packet engine <b>240</b> may operate in conjunction with encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b> and compression engine <b>238</b>, for example to perform encryption/decryption, traffic management such as request-level content switching and request-level cache redirection, and compression and decompression of data.</p><p id="p-0056" num="0055">User space <b>202</b> is a memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space <b>204</b> directly and uses service calls in order to access kernel services. User space <b>202</b> may include graphical user interface (GUI) <b>210</b>, a command line interface (CLI) <b>212</b>, shell services <b>214</b>, health monitor <b>216</b>, and daemon services <b>218</b>. GUI <b>210</b> and CLI <b>212</b> enable a system administrator or other user to interact with and control the operation of appliance <b>200</b>, such as via the operating system of appliance <b>200</b>. Shell services <b>214</b> include the programs, services, tasks, processes or executable instructions to support interaction with appliance <b>200</b> by a user via the GUI <b>210</b> and/or CLI <b>212</b>.</p><p id="p-0057" num="0056">Health monitor <b>216</b> monitors, checks, reports and ensures that network systems are functioning properly and that users are receiving requested content over a network, for example by monitoring activity of appliance <b>200</b>. In some embodiments, health monitor <b>216</b> intercepts and inspects any network traffic passed via appliance <b>200</b>. For example, health monitor <b>216</b> may interface with one or more of encryption engine <b>234</b>, cache manager <b>232</b>, policy engine <b>236</b>, compression engine <b>238</b>, packet engine <b>240</b>, daemon services <b>218</b>, and shell services <b>214</b> to determine a state, status, operating condition, or health of any portion of the appliance <b>200</b>. Further, health monitor <b>216</b> may determine if a program, process, service or task is active and currently running, check status, error or history logs provided by any program, process, service or task to determine any condition, status or error with any portion of appliance <b>200</b>. Additionally, health monitor <b>216</b> may measure and monitor the performance of any application, program, process, service, task or thread executing on appliance <b>200</b>.</p><p id="p-0058" num="0057">Daemon services <b>218</b> are programs that run continuously or in the background and handle periodic service requests received by appliance <b>200</b>. In some embodiments, a daemon service may forward the requests to other programs or processes, such as another daemon service <b>218</b> as appropriate.</p><p id="p-0059" num="0058">As described herein, appliance <b>200</b> may relieve servers <b>106</b> of much of the processing load caused by repeatedly opening and closing transport layer connections to clients <b>102</b> by opening one or more transport layer connections with each server <b>106</b> and maintaining these connections to allow repeated data accesses by clients via the Internet (e.g., &#x201c;connection pooling&#x201d;). To perform connection pooling, appliance <b>200</b> may translate or multiplex communications by modifying sequence numbers and acknowledgment numbers at the transport layer protocol level (e.g., &#x201c;connection multiplexing&#x201d;). Appliance <b>200</b> may also provide switching or load balancing for communications between the client <b>102</b> and server <b>106</b>.</p><p id="p-0060" num="0059">As described herein, each client <b>102</b> may include client agent <b>120</b> for establishing and exchanging communications with appliance <b>200</b> and/or server <b>106</b> via a network <b>104</b>. Client <b>102</b> may have installed and/or execute one or more applications that are in communication with network <b>104</b>. Client agent <b>120</b> may intercept network communications from a network stack used by the one or more applications. For example, client agent <b>120</b> may intercept a network communication at any point in a network stack and redirect the network communication to a destination desired, managed or controlled by client agent <b>120</b>, for example to intercept and redirect a transport layer connection to an IP address and port controlled or managed by client agent <b>120</b>. Thus, client agent <b>120</b> may transparently intercept any protocol layer below the transport layer, such as the network layer, and any protocol layer above the transport layer, such as the session, presentation or application layers. Client agent <b>120</b> can interface with the transport layer to secure, optimize, accelerate, route or load-balance any communications provided via any protocol carried by the transport layer.</p><p id="p-0061" num="0060">In some embodiments, client agent <b>120</b> is implemented as an Independent Computing Architecture (ICA) client developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. Client agent <b>120</b> may perform acceleration, streaming, monitoring, and/or other operations. For example, client agent <b>120</b> may accelerate streaming an application from a server <b>106</b> to a client <b>102</b>. Client agent <b>120</b> may also perform end-point detection/scanning and collect end-point information about client <b>102</b> for appliance <b>200</b> and/or server <b>106</b>. Appliance <b>200</b> and/or server <b>106</b> may use the collected information to determine and provide access, authentication and authorization control of the client's connection to network <b>104</b>. For example, client agent <b>120</b> may identify and determine one or more client-side attributes, such as: the operating system and/or a version of an operating system, a service pack of the operating system, a running service, a running process, a file, presence or versions of various applications of the client, such as antivirus, firewall, security, and/or other software.</p><p id="p-0062" num="0061">Additional details of the implementation and operation of appliance <b>200</b> may be as described in U.S. Pat. No. 9,538,345, issued Jan. 3, 2017 to Citrix Systems, Inc. of Fort Lauderdale, Fla., the teachings of which are hereby incorporated herein by reference.</p><heading id="h-0008" level="2">C. Systems and Methods for Validating a Request to Access a Resource</heading><p id="p-0063" num="0062">The systems and methods presented herein include a novel approach for preventing unauthorized access, retrieval, usage, traversal, and/or navigation of/to one or more resources (e.g., via URLs in requests). The novel approach includes one or more mechanisms to validate, confirm, and/or verify whether a URL of a request/message (e.g., a HTTP REQUEST URL) is a valid URL (e.g., a closure URL). Therefore, the novel approach may prevent random, unauthorized, and/or malicious access of a resource (e.g., a web server/service). Compared to present technology, the systems and methods presented herein may reduce/decrease memory usage by at least 35% (e.g., 45, 55 or other percent) for instance. For example, certain approaches for validating requests (e.g., a request to access a URL, or other resources) may utilize a large amount of memory to store/maintain information/records of one or more URLs accessed by a client during a session. In comparison, the systems and methods presented herein can prevent unauthorized access/traversal of resources without storing information of the URLs/resources accessed by the client, resulting in less memory usage (e.g., at least 35% less, or other percent) and/or increased scalability (e.g., at least 25% more, or other percent). For instance, said systems and methods may avoid storing information of the accessed resources/URLs by generating, creating, configuring, and/or determining a signed version of each accessed URL (e.g., a signed form of an HTTP RESPONSE URL), and thereby using each signed URL as a query parameter for validating a request (e.g., a request to access/traverse another URL).</p><p id="p-0064" num="0063">The present disclosure is directed towards systems and methods for validating, verifying, authenticating, and/or confirming a request to access, traverse, and/or use a resource. A device (e.g., a gateway module, a local/foreign node, network appliance and/or an application delivery controller (ADC)) intermediary between a client and a server (e.g., a backend server supporting hypertext transfer protocol (HTTP) and/or hypertext transfer protocol secure (HTTPS)) may receive, obtain, and/or process a first request from the client (e.g., a smartphone, a laptop, a tablet device, a desktop computer of a user, and/or a client supporting HTTP/HTTPS). Responsive to receiving the first request/message (e.g., HTTP GET, GET /index.html, and/or other requests), the device may create, generate, configure, and/or establish a session between the client and the server. In some embodiments, the device may create, generate, configure establish, and/or assign a client identifier (e.g., CLIENT_ID) for the client. The device may create and/or assign the client identifier responsive to receiving the first request.</p><p id="p-0065" num="0064">In some embodiments, the first request (e.g., an HTTP GET request and/or other requests) may include, provide, specify, and/or indicate a first URL to access a first resource of the server (e.g., a resource, service, and/or application hosted on the server). Responsive to receiving and/or obtaining the first request, the device may forward, send, communicate, transmit, and/or broadcast the first request to the server. Upon receiving the first request, the server may send, transmit, and/or communicate a response (e.g., an HTTP response) to the device, wherein the response can include, specify, and/or indicate one or more resources (e.g., HTTP RESPONSE URLs). In some embodiments, the device may process, parse, analyze, and/or evaluate the received response (e.g., HTTP RESPONSE) to identify, for instance, each of the URLs in the response. For each URL in the response, the device can generate, create, and/or configure a first value of a query parameter (e.g., an HTTP QUERY PARAMETER, such as &#x2018;as_url_id&#x2019;). Each first value may include or correspond to a signed form and/or version of a URL from the response and/or the client identifier. The device may generate, compute, create, and/or configure the first value according to (or by using) the client identifier, a key, and/or each URL in the response.</p><p id="p-0066" num="0065">Responsive to generating the first value, the device may append, add, and/or incorporate the first value to each URL in the response. For instance, the device may update and/or modify the response by adding to a URL in the response (e.g., /contacts.html) the calculated first value (e.g., /contacts.html?as_url_id=W34dFasred). In some embodiments, the device may adjust and/or update the response by including the client identifier (e.g., CLIENT_ID) in a set-cookie field (e.g., performing a set-cookie command with the client identifier). By including the client identifier in a set-cookie field, subsequent requests from the client to access a resource may include, provide, specify, and/or indicate a cookie (e.g., a HTTP cookie configured by the set-cookie command), wherein the cookie can include or correspond to the client identifier. Responsive to updating the received response from the server, the device may send, transmit, forward, and/or communicate the response to the client. The response may include, provide, specify, and/or indicate the modified/updated URL(s), the client identifier, and/or other information.</p><p id="p-0067" num="0066">In some embodiments, the device may receive a subsequent request (e.g., a second request) that includes a third URL, wherein the third URL may have the first value (e.g., a first value appended to the third URL). The subsequent request may include, provide, specify, and/or indicate the client identifier. The device may extract, obtain, acquire, and/or use the client identifier from the subsequent request (e.g., from the HTTP REQUEST HEADER). In some embodiments, the device may validate, verify, and/or confirm the client identifier of the subsequent request. For example, the device may compare the client identifier of the subsequent request with the client identifier stored and/or maintained by the device. If the client identifier of the subsequent request corresponds to (e.g., matches or is within a defined range/extent of) the client identifier of the device, the device may proceed with calculating a second value of a query parameter. For instance, responsive to receiving the subsequent request and/or extracting/validating the client identifier, the device may compute, calculate, generate, and/or determine the second value according to (or by using) the extracted client identifier, the third URL, and/or the stored key. In some embodiments, the device may parse and/or extract the first value of the third URL (e.g., extract the as_url_id=W34dFasred from the URL in the subsequent request) from the subsequent request. If the second value (e.g., calculated according to the extracted client identifier) corresponds to the extracted first value (e.g., extracted from the third URL), the device may allow the server to receive the subsequent request. Otherwise, the device may determine to prevent and/or preclude the server from receiving the subsequent request (e.g., drop the subsequent request).</p><p id="p-0068" num="0067">In view of the above discussion regarding validating a request to access a resource, a process and/or system for performing said validation (e.g., via a value of a query parameter and/or a client identifier) may be beneficial, as further explained in the following passages. Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, depicted is a block diagram of one example embodiment of a system <b>300</b> for validating a request to access/traverse a resource, e.g., to prevent random/unauthorized access of a resource. The system <b>300</b> may include one or more clients <b>102</b> of an entity, one or more devices <b>302</b>, and/or one or more servers <b>106</b> hosting one or more resources <b>304</b>. The device <b>302</b> can include or maintain or have access to at least one client identifier <b>306</b>, a key <b>308</b>, and/or one or more values of a query parameter <b>310</b>.</p><p id="p-0069" num="0068">Each of the above-mentioned elements or entities is implemented in hardware, or a combination of hardware and software, in one or more embodiments. Each component of the system <b>300</b> may be implemented using hardware or a combination of hardware or software detailed above in connection with <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>. For instance, each of these elements or entities can include any application, program, library, script, task, service, process or any type and form of executable instructions executing on hardware of a client device <b>102</b>, a server <b>106</b> and/or a network device <b>200</b> in connection with <figref idref="DRAWINGS">FIGS. <b>1</b>B-<b>1</b>C</figref>, for instance. The hardware includes circuitry such as one or more processors in one or more embodiments.</p><p id="p-0070" num="0069">The system <b>300</b> may include one or more servers <b>106</b>. The server <b>106</b> (e.g., a back-end server supporting HTTPS messages or transactions, and/or other servers <b>106</b>) may be configured and/or designed to host one or more resources <b>304</b> (e.g., one or more URLs) and/or services (e.g., application resources, as a web application, SaaS application or remote-hosted network application). The server <b>106</b> may be configured and/or designed to provision the one or more resources <b>304</b> and/or services to one or more clients <b>102</b> of a consumer or other entity (e.g., an organization or user), via one or more networks <b>104</b>. For example, the client <b>102</b> may establish one or more sessions or connections (e.g., secured or otherwise, such as a SSL virtual private network connection) with the server(s) <b>106</b> to access a service/resource <b>304</b> (e.g., via one or more URLs), such as an application resource. In another example, the server(s) <b>106</b> may receive/obtain a request (e.g., a first/second request, such as a HTTP request) from the client <b>102</b> (e.g., via a device <b>302</b>) to access/use one or more resources <b>304</b> (or establish the connections to access the one or more resources <b>304</b>). The server(s) <b>106</b> may receive/obtain a first URL and/or other information via the request. For example, a first request may include/specify/indicate/provide the first URL and/or other information.</p><p id="p-0071" num="0070">Responsive to receiving the request(s), the server(s) <b>106</b> may send, transmit, broadcast, and/or communicate a response to the client <b>102</b> via the device <b>302</b>. The server(s) <b>106</b> may provide, indicate, and/or specify one or more URLs (e.g. one or more second URLs) and/or other information via the response. For example, the response from the server(s) <b>106</b> may indicate and/or include one or more second URLs to access one or more resources <b>304</b>. The one or more second URLs may be associated and/or mapped to the first URL of the request (e.g., first request) received by the server <b>106</b>. In some embodiments, the server(s) <b>106</b> can be part of a cloud or datacenter for instance. The server(s) <b>106</b> may include any embodiment of volatile memory <b>122</b> or non-volatile memory <b>128</b> (discussed in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref> for example) which may store files, data and/or content of the service. The server(s) <b>106</b> may communicate with other various components of the system <b>300</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref> via a communications interface <b>118</b> for instance. Hence, the server(s) <b>106</b> may be similar in some aspects to the computer <b>101</b> described with reference to <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>.</p><p id="p-0072" num="0071">To provide a service/resource <b>304</b>, the server(s) <b>106</b> may execute, provide, provision, and/or host one or more network application(s). In some embodiments, a service/resource <b>304</b> may be referred to interchangeably with an application, application resource or network application. A network application can for instance include a remote-hosted application, a remote-hosted desktop, a web application or a software-as-a-service (SaaS) application. A remote-hosted desktop may be a virtual desktop hosted on the server <b>106</b> which is accessed by or remotely provisioned to the client <b>102</b>. In some embodiments, the delivery of a remote-hosted desktop may be via a session and/or connection based on High-Definition User Experience (HDX) or Independent Computing Architecture (ICA) display remoting protocol, or Remote Desktop Protocol (RDP). A remote-hosted application may include/correspond to an application service that can be delivered via a HDX-based, ICA-based, RDP-based, etc., session and/or connection. In some embodiments, a remote-hosted application may be an application which is installed on/in the remote-hosted desktop environment and is therefore accessible within the remote-hosted desktop. A SaaS application can be a centrally-hosted application which is typically accessible on a subscription basis. In some embodiments, the SaaS applications may include web-based applications. In other embodiments, the SaaS applications may correspond to remote-hosted applications and, therefore, can be delivered in HDX/ICA/RDP-based sessions and/or connections. SaaS applications and/or web applications may include for instance salesforce.com, SAP, Microsoft Office <b>365</b>, Dropbox or Gmail service, Amazon web services, and so on.</p><p id="p-0073" num="0072">The system <b>300</b> may include one or more clients <b>102</b>. The client <b>102</b> may include or correspond to devices of a consumer of the service. For example, if the consumer is an individual or user, the client <b>102</b> may comprise a smartphone, a laptop (e.g., at home), a tablet device, and a desktop computer (e.g., at work), that the user may use to access an application resource (e.g., Dropbox service) and/or other resources <b>304</b> at various times and/or locations for instance. In an example where the consumer is an organization, such as an enterprise, the consumer can extend over a number of users (e.g., management persons, staff members, IT administrators, and so on) and their associated client(s) <b>102</b> or devices (e.g., corporate-issued device, personally-owned devices, and/or registered/approved devices (e.g., in a BYOD program)). Any number of the users may access a service/resource <b>304</b> (e.g., salesforce.com, SAP, Microsoft Office <b>365</b>) from a service/resource <b>304</b> provider, via a corporate account for the service/resource <b>304</b> for instance.</p><p id="p-0074" num="0073">The client <b>102</b> may be configured and/or designed to access one or more application resource(s) <b>304</b> over one or more networks. In some embodiments, the client <b>102</b> may interact with the server(s) <b>106</b> via a device <b>302</b> (e.g., a device <b>302</b> intermediary between the client <b>102</b> and the server(s) <b>106</b>). For example, the client <b>102</b> may send a request (e.g., a first request, a second request, and/or other requests to access/use a resource <b>304</b>) and/or message (e.g. a HTTP message and/or other messages) to the server(s) <b>106</b> via the device <b>302</b>. The request may include and/or specify a URL (e.g., a first URL) of the server(s) <b>106</b>. As such, the request may include or correspond to a request to access, use, and/or traverse the URL of the request. Responsive to sending the request/message, the client <b>102</b> may receive/obtain a response from the server <b>106</b> and/or a device <b>302</b> (e.g., an ADC and/or other devices). In some embodiments, the client <b>102</b> may receive one or more URLs (e.g., second URLs) from the server <b>106</b> via the response. For example, responsive to receiving a request, the server <b>106</b> may send a response to the client <b>102</b> via the device <b>302</b>. The response may include one or more URLs (e.g., second URLs) and/or other information. As discussed herein, references to a resource may sometimes refer to an identification/indication/indicator of the resource (e.g., as a uniform resource indicator), and may sometimes refer to the resource itself. The client <b>102</b> may use, access, and/or traverse the one or more URLs (e.g., second URLs) from the server response. In some embodiments, the client <b>102</b> may send a second request to the server <b>106</b> (via the device <b>302</b>) to access and/or traverse the one or more URLs from the server response. The second request (e.g., HTTP GET request) may include and/or provide at least one URL of the URLs from the server response, and/or a client identifier <b>306</b>. The at least one URL (e.g., a third URL) of the second request may be appended to a value of query parameter <b>310</b>. As such, the at least one URL can be a signed form/version of a URL from the response.</p><p id="p-0075" num="0074">The system <b>300</b> may include one or more devices <b>302</b> (sometimes referred to as appliance(s) <b>200</b>, gateway(s) <b>200</b>, node(s), and/or application delivery controllers). A device <b>302</b> may be configured and/or designed to serve as an intermediary between different elements of a computer and/or network environment, such as between client(s) <b>102</b>, server(s) <b>106</b>, network(s) <b>104</b>, and/or other devices <b>302</b> (e.g., as discussed above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>). In some embodiments, the device <b>302</b> may receive/obtain a first request/message (e.g., HTTP GET request and/or other requests) from a client <b>102</b> and/or user to access one or more resources <b>304</b> from the server <b>106</b>. The first request may include, provide, and/or specify a first URL for accessing a resource <b>304</b> and/or other information. Responsive to receiving the request/message, the device <b>302</b> may create, generate, and/or establish a session between the client <b>102</b> and the server <b>106</b>. The device <b>302</b> may generate, configure, and/or assign a client identifier <b>306</b>(<b>1</b>) (e.g., CLIENT_ID) for the client <b>102</b>. The device <b>302</b> may store and/or maintain the client identifier <b>306</b>(<b>1</b>). The client identifier <b>306</b>(<b>1</b>) may include or correspond to a client ID, a client token and/or other information that uniquely identifies the client <b>102</b>, the session, and/or the details of the session (e.g., messages/requests/resources exchanged during a session). The client identifier <b>306</b>(<b>1</b>) and/or the session may be valid for a configured/predetermined timeout or expiration interval/instance. The session and/or client identifier <b>306</b>(<b>1</b>) may be used to track/monitor the resources <b>304</b> accessed/used by the client <b>102</b>.</p><p id="p-0076" num="0075">In some embodiments, the device <b>302</b> may send, forward, and/or route the first request to the server <b>106</b>. Responsive to sending/transmitting the first request, the device <b>302</b> may receive a response from the server <b>106</b>. The device <b>302</b> may parse, analyze, and/or evaluate the response from the server <b>106</b> to obtain, extract, and/or acquire one or more second URLs from the response. For each second URL in the response, the device <b>302</b> may determine, generate, and/or configure a first value of a query parameter <b>310</b>(<b>1</b>). For example, the device <b>302</b> may determine the first value(s) <b>310</b>(<b>1</b>) by calculating/determining a signed form (e.g., encoded, or encrypted form) of each second URL in the response and/or the client identifier <b>306</b>(<b>1</b>). The device <b>302</b> may determine the first value(s) <b>310</b>(<b>1</b>) according to the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b>, a key <b>308</b>, and/or each second URL from the response. In some embodiments, the device <b>302</b> may update, adjust, and/or modify the response by including the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b> in a set-cookie field (e.g., set-cookie HTTP header). In another example, the device <b>302</b> may update the response by adding, incorporating, and/or appending the determined/corresponding first value <b>310</b>(<b>1</b>) to each second URL from the response. Responsive to updating the response, the device <b>302</b> may forward/send the updated response to the client <b>102</b>.</p><p id="p-0077" num="0076">In some embodiments, the device <b>302</b> may receive another request (e.g., a second request) from a client <b>102</b> and/or user. The second request may include, indicate, and/or specify at least one URL, such as a third URL, to the device <b>302</b>. The device <b>302</b> may receive and/or obtain a client identifier <b>306</b>(<b>2</b>), the third URL, and/or other information via the second request (e.g., the second request can include a client identifier <b>306</b>(<b>2</b>) and/or the third URL). The device <b>302</b> may extract, acquire, determine, and/or identify the client identifier <b>306</b>(<b>2</b>) and/or the third URL from the second request. Responsive to extracting the client identifier <b>306</b>(<b>2</b>) (or other information), the device <b>302</b> may validate, confirm, and/or verify the client identifier <b>306</b>(<b>2</b>). For example, the device <b>302</b> may determine whether the client identifier <b>306</b>(<b>2</b>) of the second request matches the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b> (e.g., to the client <b>102</b>). If the client identifier <b>306</b>(<b>2</b>) of the second request fails to match the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b>, the device <b>302</b> may determine to prevent the server <b>106</b> from receiving the second request with the third URL (e.g., the device <b>302</b> may drop the second request).</p><p id="p-0078" num="0077">In some embodiments, the device <b>302</b> may extract, determine, and/or identify a value of a query parameter <b>310</b> (e.g., the first value <b>310</b>(<b>1</b>)) from the second request (e.g., HTTP REQUEST URL). For instance, the device <b>302</b> may extract the value <b>310</b> from the second request by extracting and/or identifying the value <b>310</b> appended to the third URL. In some embodiments, the device <b>302</b> may determine a second value of the query parameter <b>310</b>(<b>2</b>) according to (or by using) the third URL, the client identifier <b>306</b>(<b>2</b>) from the second request, and/or the key <b>308</b> (e.g., stored/maintained in the device <b>302</b>). For example, the device <b>302</b> may determine a signed form of the third URL and/or the client identifier <b>306</b>(<b>2</b>) by using the third URL, the client identifier <b>306</b>(<b>2</b>) and/or the key <b>308</b> (e.g., sign/encode/encrypt (third URL, client identifier <b>306</b>(<b>2</b>), key <b>308</b>)). Responsive to determining the second value <b>310</b>(<b>2</b>), the device <b>302</b> may compare the determined second value <b>310</b>(<b>2</b>) to the value <b>310</b> extracted from the second request (e.g., appended to the third URL). If the device <b>302</b> determines that the second value <b>310</b>(<b>2</b>) matches the value <b>310</b> extracted from the second request (e.g., the first value <b>310</b>(<b>1</b>)), the device <b>302</b> may determine to allow the server <b>106</b> to receive the second request (e.g., the client <b>102</b> can access, use, and/or traverse the resource <b>304</b> associated to the third URL). As such, the device <b>302</b> may determine the second request is a valid request to access a resource <b>304</b> from the server <b>106</b>. If, instead, the device <b>302</b> determines that the second value <b>310</b>(<b>2</b>) fails to match the value <b>310</b> extracted from the second request, the device <b>302</b> may prevent the server <b>106</b> from receiving the second request (e.g., the device <b>302</b> may determine the request is malicious and/or potentially malicious). By dropping the second request, the device <b>302</b> can prevent a client <b>102</b> (e.g., a potential attacker) from accessing, using, and/or traversing a resource <b>304</b> associated with the third URL indicated in the second request.</p><p id="p-0079" num="0078">In some embodiments, the device <b>302</b> may be located at various points or in various communication paths, for example between two networks <b>104</b>, within a computing and/or network environment <b>100</b>. In other embodiments, the device <b>302</b> may be located on a network <b>104</b>. One or more devices <b>302</b> may communicate with one another and/or work in conjunction to, for example, accelerate, protect and/or secure network traffic between clients <b>102</b> and servers <b>106</b> and/or provide load balancing of servers <b>106</b> to process requests from clients <b>102</b>. In some embodiments, the one or more devices <b>302</b> may act as a proxy or access server to provide access to the one or more servers <b>106</b>, provide security and/or act as a firewall between the client <b>102</b> and the server <b>106</b>, and/or provide a secure VPN connection from the client <b>102</b> to the server <b>106</b>, such as a SSL VPN connection and/or provide encryption and decryption operations.</p><p id="p-0080" num="0079">In some embodiments, the device <b>302</b> can include, among other elements, one or more client identifiers <b>306</b>, one or more keys <b>308</b>, and/or one or more values of a query parameter <b>310</b>. The client identifier <b>306</b> included in the device <b>302</b> may be configured and/or designed to uniquely identify or map to the client <b>102</b>, the session (e.g., a session between a client <b>102</b> and a server <b>106</b>), and/or the details of the session (e.g., messages/requests/resources exchanged during a session). In some embodiments, the client identifier <b>306</b> may include or correspond to a token and/or other information that uniquely identifies the client <b>102</b>. In some embodiments, the client identifier <b>306</b> may be valid/active for a configured and/or predetermined time interval or time instance. The client identifier <b>306</b> may be used to track/monitor the resources (e.g., HTTPS URLs) accessed, used, and/or visited by the client <b>102</b> during the session. In some embodiments, the client identifier <b>306</b> can be used, accessed, and/or stored by one or more devices <b>302</b> (e.g., one or more ADCs) of a system (e.g., a distributed system). In some embodiments, the client identifier <b>306</b> can be used to perform a primary authentication (e.g., a first level check) of a request to access a resource <b>304</b>. For instance, a client identifier <b>306</b>(<b>2</b>) of a request can be compared with a client identifier <b>306</b>(<b>1</b>) assigned by a device <b>302</b> (e.g., assigned to a client <b>102</b>), in order to determine whether the request is not a malicious attempt to access a resource <b>304</b>. If the client identifier <b>306</b>(<b>2</b>) of the request fails to match (e.g., is not consistent with, or conflicts with) the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b>, the device <b>302</b> may determine to prevent the server <b>106</b> from accessing the resource <b>304</b>.</p><p id="p-0081" num="0080">The one or more keys <b>308</b> and/or the one or more values of a query parameter <b>310</b> included in the device <b>302</b> may be configured and/or designed to determine the validity of a request to access a resource <b>304</b>. For example, the key(s) <b>308</b> can be used by a device <b>302</b> to determine one or more values of a query parameter <b>301</b>, wherein the one or more values <b>310</b> may be used to validate a received request. The key(s) <b>308</b> may be used (e.g., by the device <b>302</b>) to determine a signed form/version of a URL (e.g., a third URL) in a request and/or response. In some embodiments, the key(s) <b>308</b> may include or correspond to a token and/or other information that is preconfigured across one or more devices <b>302</b> in a system (e.g., a distributed system). The key(s) <b>308</b> may be valid/active for a configured and/or predetermined time interval or time instance. The key(s) <b>308</b> can be updated and/or adjusted across one or more time instances and/or time intervals. In some embodiments, the key(s) <b>308</b> can be used, accessed, shared, and/or stored by one or more devices (e.g., one or more ADCs) of a system.</p><p id="p-0082" num="0081">In some embodiments, the value(s) of the query parameter <b>310</b> can be determined according to the client identifier <b>306</b>, the key <b>308</b>, and/or a URL. In some embodiments, the device <b>302</b> may determine whether to allow the server <b>106</b> to receive a request when a first value <b>310</b>(<b>1</b>) (e.g., determined for each URL in a response from the server <b>106</b> and/or provided via a request) matches a second value <b>310</b>(<b>2</b>) (e.g., determined according to a received client identifier <b>306</b>(<b>2</b>)). In some embodiments, a value of a query parameter <b>310</b> (e.g., HTTP QUERY PARAMETER) can be used to modify one or more URLs in a response from the server <b>106</b>. For example, a first value <b>310</b>(<b>1</b>) can be appended, incorporated, and/or added to a URL from the response. The value(s) of the query parameter <b>310</b> may include, specify, and/or indicate authentication information, allowing users of client device <b>102</b> to perform specific actions (e.g., access) on a resource <b>304</b>. In some embodiments, the value(s) of the query parameter <b>310</b> may be valid for a predetermined time interval or time instance.</p><p id="p-0083" num="0082">In some embodiments, the client identifier(s) <b>306</b>, the key(s) <b>308</b>, and/or the value(s) of the query parameter <b>310</b> may be stored/maintained in a cache of the device <b>302</b>, a memory <b>264</b> of the device <b>302</b>, and/or a physical memory having a faster access time than memory <b>264</b>. The client identifier(s) <b>306</b>, the key(s) <b>308</b>, and/or the value(s) of the query parameter <b>310</b> may be located/maintained within or apart from the device <b>302</b>. In some embodiments, the client identifier(s) <b>306</b>, the key(s) <b>308</b>, and/or the value(s) of the query parameter <b>310</b> may interface/interact with each other to determine whether to allow the server <b>106</b> to receive a request. For example, the client identifier(s) <b>306</b>, the key(s) <b>308</b>, and/or the value(s) of the query parameter <b>310</b> may interface/interact with each other to determine whether the first value <b>310</b>(<b>1</b>) and the second value <b>310</b>(<b>2</b>) match each other.</p><p id="p-0084" num="0083">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, depicted is a communication diagram of an embodiment of a process <b>400</b> for validating a request to access a resource. In accordance with process <b>400</b>, the client <b>102</b> may send, transmit, and/or communicate a first request/message (e.g., HTTP GET, GET /index.html, and/or other requests) to the server <b>106</b> via the device <b>302</b> (<b>402</b>). The first request (e.g., HTTP REQUEST) may comprise a first URL (e.g., /index.html and/or other resources) of the server <b>106</b> and/or other information. Responsive to receiving and/or obtaining the first request from the client <b>102</b>, the device <b>302</b> may create, generate, configure, establish and/or assign a unique/new client identifier <b>306</b>(<b>1</b>) (e.g., CLIENT_ID, a client token, and/or other information) for the client <b>102</b> (<b>404</b>), in some embodiments. The client identifier <b>306</b>(<b>1</b>) may be used to track and/or monitor the resource(s) <b>304</b> (e.g., HTTP URLs) accessed by the client <b>102</b> during a session. For instance, during a session, the client identifier <b>306</b>(<b>1</b>) can be used to identify/update a repository (or other storage) and/or history of resources <b>304</b> accessed by the client <b>102</b>. The device <b>302</b> may store and/or maintain the client identifier <b>306</b>(<b>1</b>) in the data/information of the session.</p><p id="p-0085" num="0084">In some embodiments, the device <b>302</b> may forward, send, route, and/or communicate the first request (e.g., GET /index.html) to the server <b>106</b> (<b>406</b>). The server <b>106</b> may receive and/or obtain the first request (e.g., a request to access a first resource <b>304</b>(<b>1</b>)) from the device <b>302</b> (<b>406</b>) and/or send/transmit a response (e.g., response for index.html and/or other HTTP responses) to the device <b>302</b> (<b>408</b>). The response from the server <b>106</b> may include, provide, and/or specify one or more second URLs and/or other information. Responsive to receiving the response from the server <b>106</b>, the device <b>302</b> may parse, analyze, and/or evaluate the response (e.g., HTTP response page) from the server <b>106</b> (<b>410</b>). For example, the device <b>302</b> may parse and/or analyze the response to identify/determine the one or more second URLs (and/or other information). In some embodiments, the device <b>302</b> may create, generate, determine, and/or configure a first value of a query parameter <b>310</b>(<b>1</b>) for each second URL in the response (<b>412</b>). For instance, the device <b>302</b> may generate and/or determine the first value <b>310</b>(<b>1</b>) according to each second URL, the client identifier <b>306</b>(<b>1</b>), a key <b>308</b>, and/or other information. Specifically, the device <b>302</b> may determine and/or calculate a signed form of each second URL and/or the client identifier <b>306</b>(<b>1</b>), wherein the signed form can correspond to (or specify) the first value <b>310</b>(<b>1</b>).</p><p id="p-0086" num="0085">Responsive to determining the first value of the query parameter <b>310</b>(<b>1</b>), the device <b>302</b> may update and/or modify each second URL in the response according to the first value <b>310</b>(<b>1</b>) (<b>414</b>). For example, the device <b>302</b> may append, add, and/or incorporate each calculated first value <b>310</b>(<b>1</b>) to a corresponding second URL in the response. As such, each second URL can be associated, related, and/or modified with a unique value (e.g., first value) of a query parameter <b>310</b>. In addition to modifying each second URL, the device <b>302</b> may further update the response by including and/or incorporating the client identifier <b>306</b>(<b>1</b>) (and/or other information) in a set-cookie field (e.g., a set-cookie HTTP header) of the response (<b>416</b>). For instance, the device <b>302</b> may perform a set-cookie command with the client identifier <b>306</b>(<b>1</b>) (e.g., CLIENT_ID). As such, subsequent requests to access a resource <b>304</b> can provide, specify, and/or indicate a client identifier <b>306</b> (e.g., an HTTP cookie CLIENT_ID).</p><p id="p-0087" num="0086">In some embodiments, the device <b>302</b> may send, forward, transmit, route, and/or communicate the updated/modified response from the server <b>106</b> (e.g., the response including the modified second URL(s) and/or the client identifier <b>306</b>(<b>1</b>)) to the client <b>102</b> (<b>418</b>). Responsive to receiving the updated response, the client <b>102</b> may send, transmit, and/or broadcast a second request (e.g., GET /contacts.html?as_url_id=W34dFasred and/or other requests) to the server <b>106</b> via the device <b>302</b> within the session (<b>420</b> and/or <b>436</b>). The second request may include, indicate, and/or specify a third resource <b>304</b>(<b>3</b>) of the server <b>106</b> via a third URL (e.g., /contacts.html and/or other resources), a client identifier <b>306</b>(<b>2</b>) and/or other information. The second request may include or correspond to a request to access and/or use the third resource <b>304</b>(<b>3</b>) of the server <b>106</b>. In some embodiments, the device <b>302</b> may extract the client identifier <b>306</b>(<b>2</b>) (e.g., included as a cookie of the second request) to determine whether the client identifier <b>306</b>(<b>2</b>) (provided by the client <b>102</b>, e.g., as a cookie) is valid (e.g., whether the client identifier <b>306</b>(<b>2</b>) matches or corresponds to the client identifier <b>306</b>(<b>1</b>) stored/calculated by the device <b>302</b>). If the device <b>302</b> determines the client identifier <b>306</b>(<b>2</b>) of the second request is invalid, the device <b>302</b> may drop the second request, and therefore prevent/preclude the server <b>106</b> from receiving the second request (<b>444</b> and <b>446</b>). Otherwise (e.g., if the client identifier <b>306</b>(<b>2</b>) of the second request is valid), the device <b>302</b> may proceed with step <b>422</b> (or <b>438</b>) of process <b>400</b>.</p><p id="p-0088" num="0087">Responsive to receiving and/or obtaining the second request, and/or responsive to determining a match, the device <b>302</b> may extract, obtain, and/or acquire a value of a query parameter <b>310</b> from the second request (<b>422</b> and/or <b>438</b>). For instance, the third URL <b>304</b>(<b>3</b>) of the second request may be appended to a value (e.g., a first value <b>310</b>(<b>1</b>)) of a query parameter <b>310</b>. As such, the device <b>302</b> may extract and/or identify the value of the query parameter <b>310</b> from the third URL (e.g., HTTP REQUEST URL). In certain embodiments, the device <b>302</b> may determine, generate, calculate, and/or compute a second value of a query parameter <b>310</b>(<b>2</b>) (<b>424</b> and/or <b>440</b>). For example, the device <b>302</b> may determine the second value <b>310</b>(<b>2</b>) according to the client identifier <b>306</b>(<b>2</b>) of the second request, the third URL, the key <b>308</b>, and/or other information. Specifically, the device <b>302</b> may determine/calculate a signed version of the third URL and/or the client identifier <b>306</b>(<b>2</b>) indicated by the client <b>102</b>.</p><p id="p-0089" num="0088">Responsive to generating and/or determining the second value <b>310</b>(<b>2</b>), the device <b>302</b> may determine whether the value (e.g., the first value <b>310</b>(<b>1</b>)) of the query parameter <b>310</b> extracted from the third URL corresponds to (e.g., matches or is within a defined range/extent of) the second value of the query parameter <b>310</b>(<b>2</b>) (<b>426</b> and/or <b>442</b>). The second value <b>310</b>(<b>2</b>) may correspond to the extracted value <b>310</b> (e.g., extracted from the third URL) if the client identifier <b>306</b>(<b>2</b>) provided via the second request is valid, and/or if the second value <b>310</b>(<b>2</b>) is determined according to the key <b>308</b>. If, however, the client identifier <b>306</b>(<b>2</b>) provided via the second request is invalid, and/or the second value <b>310</b>(<b>2</b>) is determined according to another key, the second value <b>310</b>(<b>2</b>) may fail to correspond to the extracted value <b>310</b>. If the device <b>302</b> determines the extracted value <b>310</b> corresponds to the second value <b>310</b>(<b>2</b>) (<b>426</b>), the device <b>302</b> may strip the value (e.g., the first value <b>310</b>(<b>1</b>)) appended to the third URL (<b>428</b>) and/or allow the server <b>106</b> to receive the second request (e.g., GET /contacts.html) (<b>430</b>). Responsive to receiving the second request, the server <b>106</b> may send a response (e.g., a response including one or more URLs) to the client <b>102</b> (<b>434</b>) via the device <b>302</b> (<b>432</b>). If the device <b>302</b> determines that the extracted value <b>310</b> does not correspond to the second value <b>310</b>(<b>2</b>) (<b>442</b>), the device <b>302</b> may determine to prevent/preclude the server <b>106</b> from receiving the second request (e.g., the second request may be malicious and/or potentially malicious) (<b>444</b> and <b>446</b>).</p><p id="p-0090" num="0089">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, depicted is a flow diagram of one embodiment of a method for validating a request to access a resource from the server. The functionalities of the method may be implemented using, or performed by, the components detailed herein in connection with <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>4</b></figref>. In brief overview, a device <b>302</b> may receive a first request from the client that includes a first uniform resource locator (URL) of the server (<b>502</b>). The device <b>302</b> may assign a client identifier <b>306</b>(<b>1</b>) to the client <b>102</b> (<b>504</b>). The device <b>302</b> may receive a response from the server <b>106</b> (<b>506</b>). The device <b>302</b> may update the response using a first value of a query parameter <b>310</b>(<b>1</b>) (<b>508</b>). The device <b>302</b> may receive a second request with a client identifier <b>306</b>(<b>2</b>) (<b>510</b>). The device <b>302</b> may determine whether the assigned client identifier <b>306</b>(<b>1</b>) matches the client identifier <b>306</b>(<b>2</b>) of the second request (<b>512</b>). The device <b>302</b> may determine to prevent the server <b>106</b> from receiving the second request (<b>514</b>). The device <b>302</b> may determine a second value of a query parameter <b>310</b>(<b>2</b>) using the client identifier <b>306</b>(<b>2</b>) of the second request (<b>516</b>). The device <b>302</b> may determine whether the first value <b>310</b>(<b>1</b>) matches the second value <b>310</b>(<b>2</b>) (<b>518</b>). The device <b>302</b> may allow the server <b>106</b> to receive the second request (<b>520</b>).</p><p id="p-0091" num="0090">Referring now to operation (<b>502</b>), and in some embodiments, a device <b>302</b> (e.g., an ADC and/or other devices) may receive and/or obtain a first request from the client <b>102</b>. The first request may include, provide, and/or specify a first URL of the server <b>106</b> and/or other information. In some embodiments, the first request (e.g., an HTTP GET request) may include or correspond to a request to access and/or traverse a first resource <b>304</b> of the server <b>106</b>. Responsive to receiving the request, the device <b>302</b> may assign, establish, generate, and/or create a client identifier <b>306</b>(<b>1</b>) for the client <b>102</b> sending the first request (<b>504</b>). The client identifier <b>306</b>(<b>1</b>) (e.g., CLIENT_ID) can be a unique identifier to the client <b>102</b>. In some embodiments, the client identifier <b>306</b>(<b>1</b>) may be used (e.g., by the device <b>302</b>) to track and/or monitor the resources <b>304</b> of the server <b>106</b> accessed by the client <b>102</b> during the session. In some embodiments, the device <b>302</b> may generate, create, and/or configure the client identifier <b>306</b>(<b>1</b>) for the client <b>102</b> to be valid for a defined timeout interval. For instance, the device <b>302</b> may generate the client identifier <b>306</b>(<b>1</b>) to be valid for the duration of the session (e.g., a session between a client <b>102</b> and a server <b>106</b>).</p><p id="p-0092" num="0091">In some embodiments, the device <b>302</b> may store and/or maintain the client identifier <b>306</b>(<b>1</b>) assigned to the client <b>102</b>. In certain embodiments, the device <b>302</b> may determine, generate, compute, and/or calculate a first value of a query parameter <b>310</b>(<b>1</b>). For instance, responsive to assigning the client identifier <b>306</b>(<b>1</b>) to the client <b>102</b>, the device <b>302</b> may determine the first value <b>310</b>(<b>1</b>) according to the assigned client identifier <b>306</b>(<b>1</b>), a key <b>308</b>, and/or a URL (e.g., a second URL in a response from the server <b>106</b>). The first value <b>310</b>(<b>1</b>) may include or correspond to a signed form/version of the URL and/or the assigned client identifier <b>306</b>(<b>1</b>), thereby associating the URL to the client identifier <b>306</b>(<b>1</b>) (e.g., details/information of the session). In some embodiments, the device <b>302</b> can preconfigure, secure and/or store the key <b>308</b> (e.g., in a cache of the device <b>302</b>), and as such, the client <b>102</b> may be unable to access/use the key <b>308</b> (e.g., to compute a value of a query parameter <b>310</b>).</p><p id="p-0093" num="0092">Referring now to operation (<b>506</b>), and in some embodiments, the device <b>302</b> may receive a response from the server <b>106</b>. For instance, responsive to receiving the first request, the server <b>106</b> may determine one or more second URLs associated to the first URL of the first request. In one example, the first URL can be a parent URL to the one or more second URLs. Upon determining the one or more second URLs, the server <b>106</b> may send, transmit, and/or communicate a response to the device <b>302</b>. The response may include, provide, and/or indicate the one or more second URLs and/or other information of the resources associated to the URLs. In some embodiments, the device <b>302</b> can maintain and/or store the response (e.g., including one or more second URLs) from the server <b>106</b> in a cache. In one example, the device <b>302</b> may receive and/or obtain a second request (e.g., includes the first URL and/or other information) from the client <b>102</b> and/or another client <b>102</b>. Responsive to the second request, the device <b>302</b> can retrieve, acquire, and/or obtain the response from the cache. In certain embodiments, the device <b>302</b> may update and/or adjust the retrieved response. For instance, responsive to receiving the second request, the device <b>302</b> may determine a third value <b>310</b>(<b>3</b>) of a query parameter using a client identifier <b>306</b>(<b>2</b>) from the second request (e.g., received from the client <b>102</b> and/or the another client <b>102</b>). Upon determining the third value <b>310</b>(<b>3</b>), the device <b>302</b> may update the retrieved response by adding the third value <b>310</b>(<b>3</b>) (corresponding to the client <b>102</b> or the another client <b>102</b>) to the second URL of the cached/stored response.</p><p id="p-0094" num="0093">Referring now to operation (<b>508</b>), and in some embodiments, the device <b>302</b> may update, adjust, and/or modify the response using the first value of the query parameter <b>310</b>(<b>1</b>). In one example, responsive to receiving the response from the server <b>106</b>, the device <b>302</b> may parse the response to determine and/or identify the second URL(s). For each second URL in the response, the device <b>302</b> may determine a first value of a query parameter <b>310</b>(<b>1</b>). For instance, the device <b>302</b> may use the client identifier <b>306</b>(<b>1</b>), the key <b>308</b>, and/or each second URL of the response to determine and/or generate a signed form of each second URL (e.g., determine a first value <b>310</b>(<b>1</b>)). Once the device <b>302</b> determines the first value(s) <b>310</b>(<b>1</b>), the device <b>302</b> may update the response from the server <b>106</b> by adding, appending, and/or incorporating the first value <b>310</b>(<b>1</b>) to each second URL in the response. In some embodiments, the device <b>302</b> may update the response by including and/or incorporating the assigned client identifier <b>306</b>(<b>1</b>) to a set-cookie field (e.g., set-cookie HTTP header).</p><p id="p-0095" num="0094">Referring now to operation (<b>510</b>), and in some embodiments, the device <b>302</b> may receive/obtain a second request with a client identifier <b>306</b>(<b>2</b>). For instance, the device <b>302</b> may receive a second request (e.g., HTTP GET request) from a client <b>102</b> (e.g., the client <b>102</b> sending the first request and/or other client devices <b>102</b>). The second request may include and/or provide a client identifier <b>306</b>(<b>2</b>) (e.g., as a cookie in a header of the second request for instance) and/or a third URL having a value of a query parameter <b>310</b> (e.g., the first value <b>310</b>(<b>1</b>)). Responsive to receiving the second request, the device <b>302</b> may perform a primary validation/authentication (e.g., first level check) of the second request. For example, the device <b>302</b> may determine whether the client identifier <b>306</b>(<b>2</b>) from the second request (e.g., in a set-cookie field) matches (or is within a defined range/extent of) the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b> (<b>512</b>). If the client identifier <b>306</b>(<b>2</b>) from the second request fails to match the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b>, the device <b>302</b> may determine to prevent the server <b>106</b> from receiving the second request (<b>514</b>). In another example, the device <b>302</b> may receive a third request from a second client <b>102</b>(<b>2</b>) that includes a client identifier <b>306</b>(<b>3</b>) of the second client <b>102</b>(<b>2</b>). The device <b>302</b> may determine to prevent the server <b>106</b> from receiving the third request (e.g., drop the third request) when the client identifier <b>306</b>(<b>3</b>) of the second client fails to match the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>102</b>. By preventing the server <b>106</b> from receiving the request (e.g., the second request and/or the third request), the device <b>302</b> may prevent the client(s) <b>102</b> from accessing and/or traversing one or more resources <b>304</b>. As such, based on a comparison of the client identifiers <b>306</b> (e.g., an assigned client identifier <b>306</b>(<b>1</b>) and a received client identifier <b>306</b>(<b>2</b>), <b>306</b>(<b>3</b>)), the device <b>302</b> may determine whether the client <b>102</b> has authorization to access the URL included in the request (e.g., a second and/or third request).</p><p id="p-0096" num="0095">Referring now to operation (<b>516</b>), and in some embodiments, the device <b>302</b> may determine a second value of a query parameter <b>310</b>(<b>2</b>) using the client identifier <b>306</b>(<b>2</b>) of the second request. In some embodiments, responsive to determining that there is a match between the client identifier <b>306</b>(<b>2</b>) in the set-cookie field and the client identifier <b>306</b>(<b>1</b>) assigned by the device <b>302</b>, the device <b>302</b> may determine, generate, and/or calculate the second value of the query parameter <b>310</b>(<b>2</b>). The device <b>302</b> may determine the second value <b>310</b>(<b>2</b>) according to (or by using) the client identifier <b>306</b>(<b>2</b>) from the second request, the third URL, and/or the key <b>308</b>. In some embodiments, the device <b>302</b> may determine the second value <b>310</b>(<b>2</b>) according to the client identifier <b>306</b>(<b>2</b>) from the second request, the third URL, and/or one of a plurality of candidate keys <b>308</b>. The plurality of candidate keys <b>308</b> can be updated and/or adjusted across one or more time instances and/or time intervals. In some embodiments, determining the second value <b>310</b>(<b>2</b>) may include determining a signed form/version of the third URL and/or the client identifier <b>306</b>(<b>2</b>) from the second request. Responsive to the match, the device <b>302</b> may perform a secondary validation/authentication (e.g., second level check) of the second request. For instance, the device <b>302</b> may determine whether the first value <b>310</b>(<b>1</b>) of the third URL matches the second value <b>310</b>(<b>2</b>) (<b>518</b>). If the first value <b>310</b>(<b>1</b>) of the third URL fails to match the second value <b>310</b>(<b>2</b>), the device <b>302</b> may prevent the server <b>106</b> from receiving the second request (e.g., drop the second request) (<b>514</b>). For instance, the device <b>302</b> may determine to prevent the server <b>106</b> from receiving/obtaining the second request when the first value <b>310</b>(<b>1</b>) is different (e.g. mismatches) from the second value <b>310</b>(<b>2</b>). In another example, if the first value <b>310</b>(<b>1</b>) of the third URL matches the second value <b>310</b>(<b>2</b>), the device <b>302</b> may allow the server <b>106</b> to receive the second request (<b>520</b>). By allowing the server <b>106</b> to receive the second request, the device <b>302</b> may allow the client <b>102</b> to access/use/traverse one or more resources <b>304</b> of the server <b>106</b> (e.g., the resource(s) <b>304</b> associated with the third URL(s) of the second request).</p><p id="p-0097" num="0096">In some embodiments, the device <b>302</b> may comprise at least a first device <b>302</b>(<b>1</b>) and/or a second device <b>302</b>(<b>2</b>) having access to the key <b>308</b>. For example, one or more ADCs may have access to the key <b>308</b>. As such, one or more devices <b>302</b>, such as the first device <b>302</b>(<b>1</b>) and/or the second device <b>302</b>(<b>2</b>), can intercept, receive, and/or service one or more requests (e.g., HTTP requests and/or others requests to access a resource <b>304</b>) from the client <b>102</b>. For instance, the first device <b>302</b>(<b>1</b>) can receive and/or obtain the first request from the client <b>102</b>. The first device <b>302</b>(<b>1</b>) may send, transmit, and/or forward the first request to the server <b>106</b>, and/or receive a response, from the server <b>106</b>, to the first request. In some embodiments, the first device <b>302</b>(<b>1</b>) may update/adjust the response, for example by adding/appending the first value <b>310</b>(<b>1</b>) to the second URL from the server response. In some embodiments, the second device <b>302</b>(<b>2</b>) may receive the second request, wherein the second request can include a client identifier <b>306</b>(<b>2</b>) and/or a third URL having a value of a query parameter <b>310</b> (e.g., the first value <b>310</b>(<b>1</b>)). Responsive to the second request, the second device <b>302</b>(<b>2</b>) may allow the server <b>106</b> to receive the second request. For instance, when the value <b>310</b> (e.g., the first value <b>310</b>(<b>1</b>)) of the third URL matches a second value <b>310</b>(<b>2</b>) of the query parameter, the second device <b>302</b>(<b>2</b>) may allow the server <b>106</b> to receive the second request. In some embodiments, the second device <b>302</b>(<b>2</b>) (and/or the first device <b>302</b>(<b>1</b>) may determine, generate, and/or compute the second value <b>310</b>(<b>2</b>) according to the client identifier <b>306</b>(<b>2</b>) from the second request, the third URL and the key <b>308</b>.</p><p id="p-0098" num="0097">Various elements, which are described herein in the context of one or more embodiments, may be provided separately or in any suitable subcombination. For example, the processes described herein may be implemented in hardware, software, or a combination thereof. Further, the processes described herein are not limited to the specific embodiments described. For example, the processes described herein are not limited to the specific processing order described herein and, rather, process blocks may be re-ordered, combined, removed, or performed in parallel or in serial, as necessary, to achieve the results set forth herein.</p><p id="p-0099" num="0098">It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or, in some embodiments, on multiple machines in a distributed system. The systems and methods described above may be implemented as a method, apparatus or article of manufacture using programming and/or engineering techniques to produce software, firmware, hardware, or any combination thereof. In addition, the systems and methods described above may be provided as one or more computer-readable programs embodied on or in one or more articles of manufacture. The term &#x201c;article of manufacture&#x201d; as used herein is intended to encompass code or logic accessible from and embedded in one or more computer-readable devices, firmware, programmable logic, memory devices (e.g., EEPROMs, ROMs, PROMs, RAMs, SRAMs, etc.), hardware (e.g., integrated circuit chip, Field Programmable Gate Array (FPGA), Application Specific Integrated Circuit (ASIC), etc.), electronic devices, a computer readable non-volatile storage unit (e.g., CD-ROM, USB Flash memory, hard disk drive, etc.). The article of manufacture may be accessible from a file server providing access to the computer-readable programs via a network transmission line, wireless transmission media, signals propagating through space, radio waves, infrared signals, etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general, the computer-readable programs may be implemented in any programming language, such as LISP, PERL, C, C++, C#, PROLOG, or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.</p><p id="p-0100" num="0099">While various embodiments of the methods and systems have been described, these embodiments are illustrative and in no way limit the scope of the described methods or systems. Those having skill in the relevant art can effect changes to form and details of the described methods and systems without departing from the broadest scope of the described methods and systems. Thus, the scope of the methods and systems described herein should not be limited by any of the illustrative embodiments and should be defined in accordance with the accompanying claims and their equivalents.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>We claim:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>receiving, by a device intermediary between a client and a server, a first request from the client that includes a first uniform resource locator (URL) of the server;</claim-text><claim-text>receiving, by the device, a response from the server that includes a second URL;</claim-text><claim-text>updating, by the device, the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL;</claim-text><claim-text>receiving, by the device, a second request that includes the client identifier, and a third URL having the first value; and</claim-text><claim-text>determining, by the device, to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>assigning, by the device, the client identifier as a unique identifier to the client; and</claim-text><claim-text>determining, by the device, the first value according to the client identifier, the key, and the second URL.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>determining, by the device, whether there is a match between the client identifier in the set-cookie field and the client identifier assigned by the device;</claim-text><claim-text>determining, by the device, the second value according to the client identifier from the second request, the third URL and the key; and</claim-text><claim-text>determining, by the device responsive to the match, whether the first value of the third URL matches the second value.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>determining, by the device, to prevent the server from receiving the second request when the first value is different from the second value.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>determining, by the device, to allow the server to receive the second request when the first value matches the second value, the second value determined according to the client identifier from the second request, the third URL, and one of a plurality of candidate keys.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>receiving, by the device from a second client, a third request that includes a client identifier of the second client; and</claim-text><claim-text>determining, by the device, to prevent the server from receiving the third request when the client identifier of the second client fails to match the client identifier assigned by the device.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the device comprises at least a first device and a second device having access to the key, and the method comprises:<claim-text>receiving, by the first device, the first request from the client;</claim-text><claim-text>receiving, by the first device, the response from the server to the first request;</claim-text><claim-text>updating, by the first device, the response;</claim-text><claim-text>receiving, by the second device, the second request that includes the client identifier, and the third URL having the first value; and</claim-text><claim-text>determining, by the second device, to allow the server to receive the second request when the first value of the third URL matches the second value determined according to the client identifier from the second request, the third URL and the key.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>maintaining, by the device, the response from the server in a cache;</claim-text><claim-text>receiving, by the device from the client or another client, a second request that includes the first URL;</claim-text><claim-text>retrieving, by the device responsive to the second request, the response from the cache; and</claim-text><claim-text>updating, by the device, the retrieved response by adding a third value corresponding to the client or the another client, to the second URL.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>generating, by the device, the client identifier for the client, to be valid for a defined timeout interval.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A device intermediary between a client and a server, comprising:</claim-text><claim-text>at least one processor configured to:<claim-text>receive a first request from the client that includes a first uniform resource locator (URL) of the server;</claim-text><claim-text>receive a response from the server that includes a second URL;</claim-text><claim-text>update the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL;</claim-text><claim-text>receive a second request that includes the client identifier, and a third URL having the first value; and</claim-text><claim-text>determine to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>assign the client identifier as a unique identifier to the client; and</claim-text><claim-text>determine the first value according to the client identifier, the key, and the second URL.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>determine whether there is a match between the client identifier in the set-cookie field and the client identifier assigned by the device;</claim-text><claim-text>determine the second value according to the client identifier from the second request, the third URL and the key; and</claim-text><claim-text>determine, responsive to the match, whether the first value of the third URL matches the second value.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>determine to prevent the server from receiving the second request when the first value is different from the second value.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>determine to allow the server to receive the second request when the first value matches the second value, the second value determined according to the client identifier from the second request, the third URL, and one of a plurality of candidate keys.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>receive, from a second client, a third request that includes a client identifier of the second client; and</claim-text><claim-text>determine to prevent the server from receiving the third request when the client identifier of the second client fails to match the client identifier assigned by the device.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the device comprises at least a first device and a second device having access to the key, and at least one processor of the first device is configured to:<claim-text>receive the first request from the client;</claim-text><claim-text>receive the response from the server to the first request;</claim-text><claim-text>update the response; and</claim-text></claim-text><claim-text>at least one processor of the second device is configured to:<claim-text>receive the second request that includes the client identifier, and the third URL having the first value; and</claim-text><claim-text>determine to allow the server to receive the second request when the first value of the third URL matches the second value determined according to the client identifier from the second request, the third URL and the key.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>maintain the response from the server in a cache;</claim-text><claim-text>receive, from the client or another client, a second request that includes the first URL;</claim-text><claim-text>retrieve, responsive to the second request, the response from the cache; and</claim-text><claim-text>update the retrieved response by adding a third value corresponding to the client or the another client, to the second URL.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the at least one processor is configured to:<claim-text>generate the client identifier for the client, to be valid for a defined timeout interval.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A non-transitory computer readable medium storing program instructions for causing at least one processor of a device intermediary between a client and a server to:<claim-text>receive a first request from the client that includes a first uniform resource locator (URL) of the server;</claim-text><claim-text>receive a response from the server that includes a second URL;</claim-text><claim-text>update the response by including the client identifier in a set-cookie field, and adding to the second URL a first value of a query parameter determined according to: a client identifier assigned by the device, a key, and the second URL;</claim-text><claim-text>receive a second request that includes the client identifier, and a third URL having the first value; and</claim-text><claim-text>determine to allow the server to receive the second request when the first value matches a second value determined according to the client identifier from the second request, the third URL and the key.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the program instructions cause the at least one processor to:<claim-text>assign the client identifier as a unique identifier to the client; and</claim-text><claim-text>determine the first value according to the client identifier, the key, and the second URL.</claim-text></claim-text></claim></claims></us-patent-application>