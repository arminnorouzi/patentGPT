<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004653A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004653</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17718776</doc-number><date>20220412</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>JP</country><doc-number>2021-110247</doc-number><date>20210701</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>57</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>55</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>577</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>554</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>565</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">COMPUTER-READABLE RECORDING MEDIUM STORING PROGRAM, METHOD OF DETECTING VULNERABILITY, AND INFORMATION PROCESSING APPARATUS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>FUJITSU LIMITED</orgname><address><city>Kawasaki-shi</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SHIRAISHI</last-name><first-name>Akihiro</first-name><address><city>Ota</city><country>JP</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>FURUKI</last-name><first-name>Takahiro</first-name><address><city>Kawasaki</city><country>JP</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>NOYAMA</last-name><first-name>Koutarou</first-name><address><city>Kawaguchi</city><country>JP</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>FUJITSU LIMITED</orgname><role>03</role><address><city>Kawasaki-shi</city><country>JP</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A process includes obtaining update history information that includes respective update histories of a plurality of versions of software, the plurality of versions including a first version immediately previous to a second version, identifying, from the update history information, second version that corresponds to the update history that includes a predetermined keyword, identifying, based on development history information that includes a change location in a source code of the software between the first version and the second version, a code block deleted from the source code when the first version is upgraded to the second version, as the code block that includes a possibility of including vulnerability, and detecting, out of the plurality of versions, a third version that includes the identified code block in the source code.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="228.35mm" wi="158.75mm" file="US20230004653A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="249.60mm" wi="170.43mm" file="US20230004653A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="160.02mm" wi="144.95mm" file="US20230004653A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.04mm" wi="146.64mm" file="US20230004653A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="249.94mm" wi="151.89mm" file="US20230004653A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="117.60mm" wi="163.83mm" file="US20230004653A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="112.52mm" wi="113.79mm" file="US20230004653A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="112.52mm" wi="168.74mm" file="US20230004653A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="242.49mm" wi="158.75mm" file="US20230004653A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="249.94mm" wi="168.74mm" file="US20230004653A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="112.52mm" wi="163.83mm" file="US20230004653A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="224.79mm" wi="161.80mm" orientation="landscape" file="US20230004653A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="187.54mm" wi="113.79mm" file="US20230004653A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="249.94mm" wi="163.75mm" file="US20230004653A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="212.43mm" wi="93.81mm" file="US20230004653A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="250.78mm" wi="131.23mm" file="US20230004653A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="217.51mm" wi="131.23mm" file="US20230004653A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="244.94mm" wi="168.74mm" file="US20230004653A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="197.53mm" wi="158.75mm" file="US20230004653A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is based upon and claims the benefit of priority of the prior Japanese Patent Application No. 2021-110247, filed on Jul. 1, 2021, the entire contents of which are incorporated herein by reference.</p><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The embodiments discussed herein are related to a computer-readable recording medium storing a program, a method of detecting vulnerability, and an information processing apparatus.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Today, various types of software are used. Use of software involves a risk of vulnerability. Vulnerability of software may occur due to problems in a program, mistakes in the design at the time of software development, and so forth. Vulnerability of software leads to degradation in security of a device that executes the software. The device that executes the software having the vulnerability may be subjected to, for example, an attack that exploits the vulnerability.</p><p id="p-0005" num="0004">In the development of the software, an edition (version) of the software may be updated by adding a new function to the software or remediating vulnerability of the software. Thus, systems to control updates of software has been considered.</p><p id="p-0006" num="0005">For example, there is a proposal for a method of performing centralized control of statuses of individual programs by recording, in a version control table, a delivery state of each program, versions of the program stored in production source, a fixation information table number of the program to be captured at the time of release, and so forth.</p><p id="p-0007" num="0006">Also, there is a proposal of an apparatus that controls versions of electronic resources such as electronic documents and programs with a tree structure and performs control by classifying derivative relationships between the versions of the resources into two types, continuation and branch. In this way, this apparatus controls version groups formed based on the continuation relationship.</p><p id="p-0008" num="0007">Also, there is a proposal of a problem control system for development and maintenance of software, an apparatus, or the like in which a plurality of control targets related to each other are generated by adding an improvement. This system includes a problem control apparatus which controls problems generated in each control target and a configuration control apparatus which controls a configuration and a change history of the control target. According to this proposal, an edition (version) number is presented as an example of a name of the control target.</p><p id="p-0009" num="0008">Also, there is a proposal of a file configuration control apparatus. With this apparatus, when a status of a file included in a system is checked, the file to be checked is searched from a file information table and update information of the file is searched from an update information table so as to display that update has occurred in another file having a derivative relationship with the file to be checked.</p><p id="p-0010" num="0009">Meanwhile, today, ready made software such as open source software (OSS) is often used for development of software. For example, part of functions in a software product may be implemented by using the OSS. In this case, a developer of the software may check a responding status of vulnerability or the like by referring to a document related to an update publicized for ready made software which is a utilization candidate.</p><p id="p-0011" num="0010">Japanese Laid-open Patent Publication Nos. 9-97171, 11-327980, 2002-108610, and 2007-279883 are disclosed as related art.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0012" num="0011">According to an aspect of the embodiments, a non-transitory computer-readable recording medium storing a program for causing a computer to execute a process, the process includes obtaining update history information that includes respective update histories of a plurality of versions of software, the plurality of versions including a first version immediately previous to a second version, identifying, from the update history information, the second version that corresponds to the update history that includes a predetermined keyword, identifying, based on development history information that includes a change location in a source code of the software between the first version and the second version, a code block deleted from the source code when the first version is upgraded to the second version, as the code block that includes a possibility of including vulnerability, and detecting, out of the plurality of versions, a third version that includes the identified code block in the source code.</p><p id="p-0013" num="0012">The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.</p><p id="p-0014" num="0013">It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating an information processing apparatus according to a first embodiment;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating an example of hardware of an information processing apparatus according to a second embodiment;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating an example of the functions of the information processing apparatus;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating an example of a version tree;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram illustrating an example of a vulnerability table;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating an example of a vulnerability remediation table;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an example of a vulnerability list table;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating an example of an update history list table;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating an example of vulnerability solution detection rule information;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating an example of a vulnerability influence list table;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating an example of a fixation file;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an example of a vulnerability influence presence/absence list table;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram illustrating an example of a vulnerability correspondence tree display screen;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flowchart illustrating an example of processing of the information processing apparatus;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flowchart illustrating an example of a vulnerability information obtaining process;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a flowchart illustrating an example of a suspected code block identification process;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a flowchart illustrating an example of a suspected code block scanning process; and</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a flowchart illustrating an example of a vulnerability correspondence tree creation process.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0033" num="0032">In many cases, documents related to updates publicized for ready made software that is utilization candidates do not describe in detail specific update contents such as fixed locations of the software. For this reason, there is a problem in that, even when it is understood that vulnerability has been remediated in a certain version, it is difficult to check whether a version other than the certain version includes the vulnerability. For example, it is conceivable that an information processing apparatus performs reproduction testing on all the versions of the software for the checking. However, the reproduction testing for all the versions is costly.</p><p id="p-0034" num="0033">Hereafter, embodiments of a technique with which a version including vulnerability may be efficiently determined will be described with reference to the drawings.</p><heading id="h-0007" level="1">First Embodiment</heading><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram illustrating an information processing apparatus according to a first embodiment. An information processing apparatus <b>10</b> assists in checking a version including vulnerability out of a plurality of versions of software. The information processing apparatus <b>10</b> includes a storage unit <b>11</b> and a processing unit <b>12</b>.</p><p id="p-0036" num="0035">The storage unit <b>11</b> may be a volatile storage device such as a random-access memory (RAM) or may be a non-volatile storage device such as a hard disk drive (HDD) or a flash memory. The processing unit <b>12</b> may include a central processing unit (CPU), a digital signal processor (DSP), an application-specific integrated circuit (ASIC), a field-programmable gate array (FPGA), or the like. The processing unit <b>12</b> may be a processor that executes a program. The &#x201c;processor&#x201d; may include a set of multiple processors (multiprocessor).</p><p id="p-0037" num="0036">The storage unit <b>11</b> stores update history information <b>20</b> and development history information <b>30</b>. The update history information <b>20</b> includes an update history of each of a plurality of versions of checking target software. The update history is information that describes, for each version of the checking target software, a function added in the version, vulnerability remediated in the version, and so forth. The version may be referred to as an edition, an edition number, or the like. The checking target software may be open source software (OSS) or software other than the OSS. The update history information <b>20</b> may be, for example, information publicized by another information processing apparatus that publicizes found vulnerability for various types of software.</p><p id="p-0038" num="0037">For example, the update history information <b>20</b> includes items including a version (abbreviated as &#x201c;ver.&#x201d;) and the update history. In the item of &#x201c;ver.&#x201d;, the versions of the software are registered. In the item of the update history, description of a function added to the corresponding versions or vulnerability remediated in the corresponding versions is registered. For example, a record of ver. &#x201c;1.0&#x201d; and the update history of &#x201c;add function-Z&#x201d; in the update history information <b>20</b> indicates that the function of &#x201c;function-Z&#x201d; has been added in version &#x201c;1.0&#x201d; of the checking target software. A record of ver. &#x201c;1.3&#x201d; and the update history of &#x201c;fix XXXXXX&#x201d; in the update history information <b>20</b> indicates that the vulnerability of &#x201c;XXXXXX&#x201d; has been remediated in version &#x201c;1.3&#x201d; of the software.</p><p id="p-0039" num="0038">The development history information <b>30</b> is information that indicates a history of development of the checking target software. For each version of the checking target software, the development history information <b>30</b> includes information on a program change location in the version. The program change location refers to a location where a source code of the software is changed. For example, the program change location is a location added to or deleted from the source code in the version.</p><p id="p-0040" num="0039">The development history information <b>30</b> may be, for example, information publicized by another information processing apparatus that controls repository of the source code for various types of software. A change location of the source code is recorded in a predetermined unit or granularity in the development history information <b>30</b>. The unit of the change location of the source code may be, for example, a unit of commit. The commit refers to operation of reflecting a change location in the source code in the repository. A change location corresponding to the commit is, for example, a portion reflected in the source code by a single operation of the commit. A portion of the source code identified in the unit of the change location is referred to as a code block.</p><p id="p-0041" num="0040">The development history information <b>30</b> may include information on an order relationship between a certain version and the next version. Two or more versions may derive from a single version. Alternatively, the information on the order relationship may be included in the update history information <b>20</b>.</p><p id="p-0042" num="0041">For example, regarding certain software which is a checking target for the vulnerability, the development history information <b>30</b> includes information indicative of sets of source code <b>31</b>, <b>32</b>, <b>33</b>, <b>34</b>, <b>35</b>, and <b>36</b>. As an example, in the development history information <b>30</b>, the sets of source code <b>31</b> to <b>36</b> are respectively associated with the following versions. The set of source code <b>31</b> is associated with version &#x201c;1.0&#x201d;. The set of source code <b>32</b> is associated with version &#x201c;1.1&#x201d;. The set of source code <b>33</b> is associated with version &#x201c;1.2&#x201d;. The set of source code <b>34</b> is associated with version &#x201c;1.3&#x201d;. The set of source code <b>35</b> is associated with version &#x201c;2.0&#x201d;. The set of source code <b>36</b> is associated with version &#x201c;3.0&#x201d;.</p><p id="p-0043" num="0042">The information on the order relationships included in the development history information <b>30</b> or the update history information <b>20</b> indicates the following order relationships regarding the versions for the sets of source code <b>31</b> to <b>36</b>. The set of source code <b>32</b> is the next version to the set of source code <b>31</b>. The sets of source code <b>33</b> and <b>35</b> are the next versions to the set of source code <b>32</b>. The sets of source code <b>34</b> and <b>36</b> are the next versions to the set of source code <b>33</b>. The order relationships of the sets of source code <b>31</b> to <b>36</b> with the versions may be represented by a graph having a tree structure in which the versions are set as nodes and the nodes are coupled by edges extending from one version to the next version.</p><p id="p-0044" num="0043">The processing unit <b>12</b> obtains the update history information <b>20</b> and the development history information <b>30</b> and stores the update history information <b>20</b> and the development history information <b>30</b> in the storage unit <b>11</b>. For example, upon accepting designation of the checking target software for vulnerability from a user, the processing unit <b>12</b> obtains the update history information <b>20</b> and the development history information <b>30</b> related to the designated software from another information processing apparatus and executes the following processing.</p><p id="p-0045" num="0044">The processing unit <b>12</b> identifies, from the update history information <b>20</b>, a version corresponding to an update history including a predetermined keyword. The predetermined keyword is, for example, a term indicating that vulnerability have been remediated. For example, the predetermined keyword may be a predetermined word such as &#x201c;fix&#x201d;, &#x201c;solve&#x201d;, or &#x201c;patch&#x201d; indicative of program modification as exemplified by &#x201c;fix XXXXXX&#x201d; described above or may be keywords that are, for example, a combination of the word and specific identification information indicative of vulnerability. Examples of the specific identification information indicative of vulnerability include, for example, a common vulnerabilities and exposures-identifier (CVE-ID). It is conceivable that specific identification information indicative of vulnerability may be other information such as an identifier (JVN# or JVNVU#) of vulnerability information published in Japan Vulnerability Notes (JVN). Alternatively, the predetermined keyword may be keywords that are a combination of words such as a word representative of vulnerability and &#x201c;fix&#x201d; or &#x201c;solve&#x201d;. It is conceivable that examples of terms representative of vulnerability may include names of attacks that abuse vulnerability such as &#x201c;brute force&#x201d;, &#x201c;distributed denial of service (DDos)&#x201d;, and &#x201c;cross site scripting&#x201d;, a word meaning vulnerability such as &#x201c;vulnerability&#x201d;, &#x201c;exploit&#x201d;, and the like. Information indicative of predetermined keywords is stored in the storage unit <b>11</b> in advance.</p><p id="p-0046" num="0045">For example, the processing unit <b>12</b> identifies, based on the update history information <b>20</b>, version &#x201c;1.3&#x201d; as a version corresponding to an update history including a predetermined keyword. Based on the development history information <b>30</b>, the processing unit <b>12</b> identifies a code block deleted when a version immediately previous to the identified version is upgraded to the identified version as a code block that may include vulnerability. A code block that may include vulnerability is referred to as a suspected code block. The code block deleted when the version immediately previous to the identified version is upgraded to the identified version is a code block that exists in the set of source code of the immediately previous version but is deleted from the set of source code of the identified version.</p><p id="p-0047" num="0046">For example, based on the order relationship between the versions, the processing unit <b>12</b> identifies the immediately previous version &#x201c;1.2&#x201d; with respect to the identified version &#x201c;1.3&#x201d;. By comparing the set of source code <b>33</b> of version &#x201c;1.2&#x201d; with the set of source code <b>34</b> of version &#x201c;1.3&#x201d;, the processing unit <b>12</b> identifies the code block deleted when version &#x201c;1.2&#x201d; is upgraded to version &#x201c;1.3&#x201d;, for example, as the suspected code block. For example, the processing unit <b>12</b> compares the code blocks in units of commit included in the sets of source code <b>33</b> and <b>34</b> and identifies a code block that is included in the set of source code <b>33</b> but not included in the set of source code <b>34</b>.</p><p id="p-0048" num="0047">The set of source code <b>33</b> includes code blocks A, D, and E. The set of source code <b>34</b> includes code blocks A, D<b>1</b>, and E. In this case, a code block that is included in the set of source code <b>33</b> but not included in the set of source code <b>34</b> is the code block D. Thus, the processing unit <b>12</b> identifies the code block D as the code block that is deleted when version &#x201c;1.2&#x201d; is upgraded to version &#x201c;1.3&#x201d;, for example as the suspected code block.</p><p id="p-0049" num="0048">The processing unit <b>12</b> detects a version including the identified code block out of the plurality of versions. The version including the identified code block may be said to be a version corresponding to the set of source code including the identified code block.</p><p id="p-0050" num="0049">For example, the set of source code <b>31</b> includes the code blocks A, B, and C. The set of source code <b>32</b> includes the code blocks A, D, and C. The set of source code <b>35</b> includes the code blocks A, G, and C. The set of source code <b>36</b> includes the code blocks H, D, and I. In this case, the processing unit <b>12</b> detects versions &#x201c;1.1&#x201d;, &#x201c;1.2&#x201d;, and &#x201c;3.0&#x201d; including the suspected code block D out of the sets of source code <b>31</b> to <b>36</b> of software versions &#x201c;1.0&#x201d;, &#x201c;1.1&#x201d;, &#x201c;1.2&#x201d;, &#x201c;1.3&#x201d;, &#x201c;2.0&#x201d;, and &#x201c;3.0&#x201d;.</p><p id="p-0051" num="0050">The processing unit <b>12</b> outputs information indicative of the detected version. For example, the processing unit <b>12</b> may cause a display device coupled to the information processing apparatus <b>10</b> to display the information indicative of the detected version or may transmit the information indicative of the detected version to another information processing apparatus via a network. For example, the processing unit <b>12</b> may present to the user that the version may include vulnerability by causing the display device to display the graph of the tree structure representative of the above-described order relationships between the versions described above and to highlight a node corresponding to a version including a suspected code block.</p><p id="p-0052" num="0051">With the information processing apparatus <b>10</b>, the update history information <b>20</b> including the update history of each of the plurality of versions of software is obtained. A second version corresponding to an update history including a predetermined keyword is identified from the update history information <b>20</b>. Based on the development history information <b>30</b> including a change location in the source code of the software between the identified second version and a first version immediately previous to the second version, a code block deleted from the source code when the first version is upgraded to the second version is identified as a code block that may include vulnerability. A version including the identified code block in the source code is detected out of the plurality of versions.</p><p id="p-0053" num="0052">Thus, the information processing apparatus <b>10</b> may efficiently determine the version including vulnerability. In many cases, for example, publicized information such as the update history information <b>20</b> does not describe in detail specific update contents such as fixed locations of the software in question. For this reason, even when it is understood that a certain type of vulnerability has been responded in a certain version, it is difficult to check whether a version other than the certain version includes the certain type of vulnerability.</p><p id="p-0054" num="0053">For example, it is conceivable that the information processing apparatus <b>10</b> performs reproduction testing on all the versions of the software for the checking. For example, in the reproduction testing, the information processing apparatus <b>10</b> operates the software and reproduces an attack in a pseudo manner to check whether vulnerability exits. Accordingly, the reproduction testing for all the versions is costly. For example, workload of the user for setting up the environment of the reproduction testing for all the versions becomes excessive, or the reproduction testing with the information processing apparatus <b>10</b> takes time.</p><p id="p-0055" num="0054">Accordingly, the information processing apparatus <b>10</b> may efficiently detect a version that may include vulnerability by identifying a code block that may include a vulnerability based on the update history information <b>20</b> and the development history information <b>30</b> and by detecting a version that includes the code block. For example, the information processing apparatus <b>10</b> may improve accuracy of the work, performed by the user, of checking the presence/absence of vulnerability of the software and may enable checking of the influence at a source code level. Since not all the versions are subjected to the reproduction testing with the information processing apparatus <b>10</b>, the workload of the user for checking vulnerability may be decreased. The information processing apparatus <b>10</b> may assist in determining a version including vulnerability more quickly than in the case where the reproduction testing is performed on all the versions.</p><p id="p-0056" num="0055">Hereinafter, the functions of the information processing apparatuses <b>10</b> will be described more specifically.</p><heading id="h-0008" level="1">Second Embodiment</heading><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating an example of hardware of an information processing apparatus according to a second embodiment. An information processing apparatus <b>100</b> assists in checking vulnerability in OSS in the case where a subset of the functions of a certain software product are realized by using the OSS in software development. The information processing apparatus <b>100</b> may be realized by using a server computer.</p><p id="p-0058" num="0057">The information processing apparatus <b>100</b> includes a CPU <b>101</b>, a RAM <b>102</b>, an HDD <b>103</b>, a graphics processing unit (GPU) <b>104</b>, an input interface <b>105</b>, a medium reader <b>106</b>, and a network interface card (NIC) <b>107</b>. The CPU <b>101</b> corresponds to the processing unit <b>12</b> according to the first embodiment. The RAM <b>102</b> or the HDD <b>103</b> corresponds to the storage unit <b>11</b> according to the first embodiment.</p><p id="p-0059" num="0058">The CPU <b>101</b> is a processor that executes instructions of a program. The CPU <b>101</b> loads at least part of a program or data stored in the HDD <b>103</b> into the RAM <b>102</b> and executes the program. The CPU <b>101</b> may include a plurality of processor cores. The information processing apparatus <b>100</b> may include a plurality of processors. Processing described below may be executed in parallel by using the plurality of processors or processor cores. A set of the plurality of processors may be referred to as a &#x201c;multiprocessor&#x201d; or merely referred to as a &#x201c;processor&#x201d; in some cases.</p><p id="p-0060" num="0059">The RAM <b>102</b> is a volatile semiconductor memory that temporarily stores the program executed by the CPU <b>101</b> or data used for operation performed by the CPU <b>101</b>. The information processing apparatus <b>100</b> may include a memory of a type other than the RAM and may include a plurality of memories.</p><p id="p-0061" num="0060">The HDD <b>103</b> is a non-volatile storage device that stores data as well as programs of software such as an operating system (OS), middleware, and application software. The information processing apparatus <b>100</b> may include a storage device of the other type such as a flash memory or a solid-state drive (SSD) or may include a plurality of non-volatile storage devices.</p><p id="p-0062" num="0061">The GPU <b>104</b> outputs an image to a display <b>51</b> coupled to the information processing apparatus <b>100</b> in accordance with an instruction from the CPU <b>101</b>. An arbitrary type of a display such as a cathode ray tube (CRT) display, a liquid crystal display (LCD), a plasma display, or an organic electro-luminescence (OEL) display may be used as the display <b>51</b>.</p><p id="p-0063" num="0062">The input interface <b>105</b> obtains an input signal from an input device <b>52</b> coupled to the information processing apparatus <b>100</b> and outputs the input signal to the CPU <b>101</b>. As the input device <b>52</b>, a pointing device such as a mouse, a touch panel, a touchpad, or a trackball, a keyboard, a remote controller, a button switch, or the like may be used. A plurality of types of input devices may be coupled to the information processing apparatus <b>100</b>.</p><p id="p-0064" num="0063">The medium reader <b>106</b> is a reading device that reads a program or data recorded in a recording medium <b>53</b>. As the recording medium <b>53</b>, for example, a magnetic disk, an optical disc, a magneto-optical (MO) disk, a semiconductor memory, or the like may be used. Examples of the magnetic disk include a flexible disk (FD) and an HDD. Examples of the optical disc include a compact disc (CD) and a Digital Versatile Disc (DVD).</p><p id="p-0065" num="0064">For example, the medium reader <b>106</b> copies the program or the data read from the recording medium <b>53</b> into another recording medium such as the RAM <b>102</b> or the HDD <b>103</b>. The read program is executed by, for example, the CPU <b>101</b>. The recording medium <b>53</b> may be a portable-type recording medium and used to distribute the program and the data. The recording medium <b>53</b> and the HDD <b>103</b> may be referred to as computer-readable recording media in some cases.</p><p id="p-0066" num="0065">The NIC <b>107</b> is coupled to a network <b>50</b> and is an interface that communicates with another computer via the network <b>50</b>. The NIC <b>107</b> is coupled to, for example, a communication device such as a switch or a router via a cable. The NIC <b>107</b> may be a wireless communication interface.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating an example of the functions of the information processing apparatus. The information processing apparatus <b>100</b> includes a storage unit <b>110</b>, a vulnerability information obtaining unit <b>120</b>, a development history information obtaining unit <b>130</b>, a tree information creation unit <b>140</b>, and a display control unit <b>150</b>. A storage area of the RAM <b>102</b> or the HDD <b>103</b> is used for the storage unit <b>110</b>. The vulnerability information obtaining unit <b>120</b>, the development history information obtaining unit <b>130</b>, the tree information creation unit <b>140</b>, and the display control unit <b>150</b> are realized by executing, by using the CPU <b>101</b>, a program stored in the RAM <b>102</b>.</p><p id="p-0068" num="0067">The storage unit <b>110</b> stores vulnerability information of the OSS obtained by using the vulnerability information obtaining unit <b>120</b>. The vulnerability information is, for example, information publicized by using a vulnerability information providing server <b>200</b> operated by a predetermined organization. The vulnerability information providing server <b>200</b> includes a vulnerability information database (DB) <b>210</b> that controls the vulnerability information. Examples of the Uniform Resource Locator (URL) of the vulnerability information providing server <b>200</b> include, for example, &#x201c;https://nvd.nist.gov/vuln/search&#x201d;.</p><p id="p-0069" num="0068">The storage unit <b>110</b> stores update history information of the OSS, development history information of the OSS, and source code of each version of the OSS which have been obtained by the development history information obtaining unit <b>130</b>. The update history information, the development history information, and the sets of source code are, for example, information publicized by using a repository server <b>300</b> operated by a predetermined organization. The repository server <b>300</b> includes a source code repository <b>310</b> that controls the update history information, the development history information, and the source code for various types of software.</p><p id="p-0070" num="0069">The update history information is a history of updates, in units of commit, of the source code of the OSS and includes comments on a status of functional addition and a remediation status of vulnerability in each of commits. The development history information includes the order relationship between the versions of the OSS (for example, a tag or a timestamp indicative of the order relationship in the source code repository <b>310</b>) and information on an update location of the source code in each of the commit. Examples of the URL of the Web server that publicizes the update history information, the development history information, and the source code include, for example, &#x201c;https://github.com&#x201d;. GITHUB is a registered trademark.</p><p id="p-0071" num="0070">When OSS which is the checking target for vulnerability is designated by the user, the vulnerability information obtaining unit <b>120</b> obtains the vulnerability information of the checking target OSS from the vulnerability information DB <b>210</b> via the network <b>50</b>. The vulnerability information obtaining unit <b>120</b> stores the obtained vulnerability information in the storage unit <b>110</b>.</p><p id="p-0072" num="0071">When the OSS which is the checking target for vulnerability is designated by the user, the development history information obtaining unit <b>130</b> obtains update history information and development history information of the OSS and source code of each version of the OSS from the source code repository <b>310</b> via the network <b>50</b>. The development history information obtaining unit <b>130</b> stores the obtained update history information, development history information, and the source code in the storage unit <b>110</b>.</p><p id="p-0073" num="0072">Based on the development history information stored in the storage unit <b>110</b>, the tree information creation unit <b>140</b> creates information on a version tree representative of the order relationships between the versions of the OSS. Based on the update history information, the development history information, and the source code of each version, the tree information creation unit <b>140</b> adds information indicative of a version that may include a vulnerability to the tree information. The tree information creation unit <b>140</b> outputs the information on the created version tree to the display control unit <b>150</b>.</p><p id="p-0074" num="0073">The display control unit <b>150</b> causes the display <b>51</b> to display a graphical user interface (GUI) for checking vulnerability of the OSS and accepts operation of the user for checking the vulnerability. Upon accepting the designation of the OSS which is the checking target for vulnerability in accordance with the operation on the GUI by the user, the display control unit <b>150</b> notifies the vulnerability information obtaining unit <b>120</b> and the development history information obtaining unit <b>130</b> of the designated OSS. Also, the display control unit <b>150</b> causes the display <b>51</b> to display the version tree created by the tree information creation unit <b>140</b> with respect to the designated OSS. The display control unit <b>150</b> may transmit information on the GUI including the version tree to another information processing apparatus via the network <b>50</b> and accept a user operation for checking the vulnerability from the other information processing apparatus.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating an example of the version tree. A version tree <b>400</b> represents the order relationships between the versions related to OSS named &#x201c;software A&#x201d;. The version tree <b>400</b> is represented by a graph including nodes that represent the versions or the sets of source code corresponding to the versions and edges that are arrows representative of the order relationships between the versions. For example, the version tree <b>400</b> includes nodes <b>401</b>, <b>402</b>, <b>403</b>, <b>404</b>, <b>405</b>, <b>406</b>, <b>407</b>, and <b>408</b>. A direction extending from the top to bottom of the version tree <b>400</b> is a direction of upgrade.</p><p id="p-0076" num="0075">The node <b>401</b> indicates version &#x201c;1.0.0&#x201d;. Version &#x201c;1.0.0&#x201d; is the first version. The node <b>402</b> indicates version &#x201c;1.1.0&#x201d;. Version &#x201c;1.1.0&#x201d; is the next version to version &#x201c;1.0.0&#x201d;. The node <b>403</b> indicates version &#x201c;1.2.0&#x201d;. Version &#x201c;1.2.0&#x201d; is the next version to version &#x201c;1.1.0&#x201d;. The node <b>404</b> indicates version &#x201c;1.3.0&#x201d;. Version &#x201c;1.3.0&#x201d; is the next version to version &#x201c;1.2.0&#x201d;. The node <b>405</b> indicates version &#x201c;1.4.0&#x201d;. Version &#x201c;1.4.0&#x201d; is the next version to version &#x201c;1.3.0&#x201d;.</p><p id="p-0077" num="0076">The node <b>406</b> indicates version &#x201c;2.0.0&#x201d;. Version &#x201c;2.0.0&#x201d; is the next version to version &#x201c;1.1.0&#x201d;. Version &#x201c;2.0.0&#x201d; is a version that branches from upgrading from version &#x201c;1.1.0&#x201d; to version &#x201c;1.2.0&#x201d;. The node <b>407</b> indicates version &#x201c;3.0.0&#x201d;. Version &#x201c;3.0.0&#x201d; is the next version to version &#x201c;1.2.0&#x201d;. Version &#x201c;3.0.0&#x201d; is a version that branches from upgrading from version &#x201c;1.2.0&#x201d; to version &#x201c;1.3.0&#x201d;. The node <b>408</b> indicates version &#x201c;1.0.0&#x201d; of software B of another project that branches from a project of the software A.</p><p id="p-0078" num="0077">A set of source code of each of the versions includes a plurality of code blocks identified in units of commit when registered in the source code repository <b>310</b>. For example, the set of source code of version &#x201c;1.0.0&#x201d; of the software A includes code blocks a, b, and c. The set of source code of version &#x201c;1.1.0&#x201d; includes the code blocks a, d, and c. The set of source code of version &#x201c;1.2.0&#x201d; includes the code blocks a, d, and e. The set of source code of version &#x201c;1.3.0&#x201d; includes the code blocks a, d&#x2032;, and e. The set of source code of version &#x201c;1.4.0&#x201d; includes the code blocks f, d&#x2032;, and e. The set of source code of version &#x201c;2.0.0&#x201d; includes the code blocks a, g, and c. The set of source code of version &#x201c;3.0.0&#x201d; includes the code blocks h, d, and i. The set of source code of version &#x201c;1.0.0&#x201d; of the software B includes the code blocks a&#x2032;, b&#x2032;, and c&#x2032;.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram illustrating an example of a vulnerability table. A vulnerability table <b>111</b> is created based on vulnerability information on the software A that is obtained from the vulnerability information DB <b>210</b> by the vulnerability information obtaining unit <b>120</b>. The vulnerability table <b>111</b> is stored in the storage unit <b>110</b>. The vulnerability table <b>111</b> includes items of the CVE-ID, an OSS name, an overview, and a vulnerability detection version.</p><p id="p-0080" num="0079">A CVE-ID is registered in the item of the CVE-ID. The CVE-ID is ordinarily publicized as an identifier that identifies vulnerability found with respect to the software in question. The CVE-ID may also be simply referred to as a CVE. The name of OSS is registered in the item of the OSS name. An overview of the vulnerability is registered in the item of the overview. A version in which the vulnerability is detected is registered in the item of the vulnerability detection version.</p><p id="p-0081" num="0080">For example, in the vulnerability table <b>111</b>, a record including the CVE-ID of &#x201c;CVE-2018-0&#x201d;, the OSS name of &#x201c;SOFTWARE A&#x201d;, the overview of &#x201c;VULNERABILITY TO CROSS SITE SCRIPTING (XSS) ATTACK&#x201d;, and the vulnerability detection version of &#x201c;1.1.0&#x201d; is registered. This record indicates that the vulnerability to the XSS attack is checked in version &#x201c;1.1.0&#x201d; of the OSS of the OSS name &#x201c;SOFTWARE A&#x201d; and the CVE-ID of the vulnerability is &#x201c;CVE-2018-0&#x201d;. For example, a date on which the vulnerability is checked (information update date) may be registered in individual records of the vulnerability table <b>111</b>.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating an example of a vulnerability remediation table. A vulnerability remediation table <b>112</b> is created based on vulnerability remediation information obtained from the vulnerability information DB <b>210</b> or another information processing apparatus by the vulnerability information obtaining unit <b>120</b> and stored in the storage unit <b>110</b>. Examples of the URL of a Web server that publicizes vulnerability remediation information include, for example, &#x201c;https://jvndb.jvn.jp&#x201d;. The vulnerability remediation table <b>112</b> includes items of the CVE-ID and the remediation. A CVE-ID is registered in the item of the CVE-ID. The content of remediation of the CVE-ID is registered in the item of the remediation.</p><p id="p-0083" num="0082">For example, a record including the CVE-ID of &#x201c;CVE-2018-0&#x201d; and the remediation of &#x201c;update to 1.2.0&#x201d; is registered in the vulnerability remediation table <b>112</b>. This record indicates that the CVE-ID &#x201c;CVE-2018-0&#x201d; has been remediated in version &#x201c;1.2.0&#x201d;.</p><p id="p-0084" num="0083">Although the vulnerability remediation information indicates that the remediation has been made in the version &#x201c;1.2.0&#x201d;, it is unclear that in which of commits in version &#x201c;1.2.0&#x201d; the vulnerability has been remediated. For this reason, there is a possibility that the vulnerability remains in an older commit in version &#x201c;1.2.0&#x201d;. Thus, it may be difficult to understand that the vulnerability is reliably remediated in this version only from the content of the remediation in the vulnerability remediation table <b>112</b>. Accordingly, in the information processing apparatus <b>100</b>, the information of the item of remediation in the vulnerability remediation table <b>112</b> is merely used as reference information. As will be described later, the information processing apparatus <b>100</b> obtains the update history information and the development history information on the software A from the source code repository <b>310</b> and checks in detail the remediation status of the vulnerability in units of commit.</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating an example of a vulnerability list table. A vulnerability list table <b>113</b> is created by the vulnerability information obtaining unit <b>120</b> based on the vulnerability table <b>111</b> and the vulnerability remediation table <b>112</b>. The vulnerability list table <b>113</b> is stored in the storage unit <b>110</b>. The vulnerability list table <b>113</b> is a table formed by combining the vulnerability table <b>111</b> and the vulnerability remediation table <b>112</b> by using the CVE-ID as a key. The vulnerability list table <b>113</b> includes the items of the CVE-ID, the OSS name, the overview, the vulnerability detection version, and the remediation. The contents registered in these items are the same as those of the items having the same names in the vulnerability table <b>111</b> and the vulnerability remediation table <b>112</b>.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating an example of an update history list table. An update history list table <b>114</b> is created by the development history information obtaining unit <b>130</b> based on the update history information and the development history information on the software A which have been obtained from the source code repository <b>310</b>. The update history list table <b>114</b> is stored in the storage unit <b>110</b>. The contents of the update history information and the development history information are reflected in the update history list table <b>114</b>. The update history list table <b>114</b> includes items of an update ID, the version, a comment, an update date, and a previous update.</p><p id="p-0087" num="0086">An update ID that identifies an update of the source code of the OSS is registered in the item of the update ID. A version of the OSS is registered in the item of the version. Text describing the update contents is registered in the item of the comment. A date on which the update is performed, for example, an update date is registered in the item of the update date. An update ID corresponding to a version immediately previous to this version is registered in the item of the previous update.</p><p id="p-0088" num="0087">For example, in the update history list table <b>114</b>, a record including the update ID of &#x201c;A&#x201d;, the version of &#x201c;1.1.0&#x201d;, the comment of &#x201c;Add function f1&#x201d;, the update date of &#x201c;2018/12/12&#x201d;, and the previous update of &#x201c;-&#x201d; (no setting) is registered. This record indicates that, in version &#x201c;1.1.0&#x201d; of the software A corresponding to the update identified by the update ID &#x201c;A&#x201d;, the function f1 was added and the date on which this update was performed is Dec. 12, 2018. Since version &#x201c;1.1.0&#x201d; is the update performed on the first version &#x201c;1.0.0&#x201d;, there is no setting of the previous update.</p><p id="p-0089" num="0088">A record related to a history of another update is also registered in the update history list table <b>114</b>. A record of the update ID of &#x201c;A&#x2032;&#x201d; in the update history list table <b>114</b> is a history related to the software B. Version &#x201c;B-1.0.0&#x201d; of the record of the update ID of &#x201c;A&#x2032;&#x201d; indicates version &#x201c;1.0.0&#x201d; of the software B.</p><p id="p-0090" num="0089">A record having the version of &#x201c;-&#x201d; (no setting) is also included in the update history list table <b>114</b>. A record having the version of &#x201c;-&#x201d; is not an update corresponding to a formally released version but a record related to a commit performed before a release of a new version.</p><p id="p-0091" num="0090">For example, in the update history list table <b>114</b>, a record including the update ID of &#x201c;B&#x201d;, the version of &#x201c;-&#x201d;, the comment of &#x201c;Add function f2&#x201d;, the update date of &#x201c;2019/1/20&#x201d;, and the previous update of &#x201c;A&#x201d; is registered.</p><p id="p-0092" num="0091">In the update history list table <b>114</b>, a record including the update ID of &#x201c;F&#x201d;, the version of &#x201c;-&#x201d;, the comment of &#x201c;Fix CVE-2018-0&#x201d;, the update date of &#x201c;2019/2/22&#x201d;, and the previous update of &#x201c;D&#x201d; is registered. The comment of &#x201c;Fix CVE-2018-0&#x201d; means that vulnerability identified by the CVE-ID of &#x201c;CVE-2018-0&#x201d; has been remediated.</p><p id="p-0093" num="0092">The tree information creation unit <b>140</b> may create the information of the version tree <b>400</b> by tracking the update ID registered in the previous update which is included in each record of the update history list table <b>114</b>.</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating an example of vulnerability solution detection rule information. Vulnerability solution detection rule information <b>115</b> is stored in the storage unit <b>110</b> in advance. The vulnerability solution detection rule information <b>115</b> indicates rules for determining whether the individual records in the update history list table <b>114</b> correspond to an update in which a vulnerability is solved. Depending on whether the comment included in each record of the update history list table <b>114</b> satisfies the rule registered in the vulnerability solution detection rule information <b>115</b>, the tree information creation unit <b>140</b> determines whether the record corresponds to the update in which the vulnerability is solved. The vulnerability solution detection rule information <b>115</b> includes items of a rule number and a rule content. The rule number that is a number identifying a rule is registered in the item of the rule number. The rule content is registered in the item of the rule content.</p><p id="p-0095" num="0094">For example, in the vulnerability solution detection rule information <b>115</b>, as the rule content of the rule number &#x201c;0&#x201d;, &#x201c;IN THE CASE WHERE THE RULE NUMBER &#x201c;1&#x201d; IS SATISFIED AND AT LEAST ONE OF RULE NUMBERS &#x201c;2&#x201d;, &#x201c;3&#x201d;, AND &#x201c;4&#x201d; IS SATISFIED, IT IS DETERMINED THAT THE VULNERABILITY IS SOLVED BY THIS UPDATE&#x201d; is registered. Rule contents of the rule numbers &#x201c;1&#x201d; to &#x201c;4&#x201d; are also registered in the vulnerability solution detection rule information <b>115</b>.</p><p id="p-0096" num="0095">The rule content of the rule number &#x201c;1&#x201d; is that the comment for the update includes any of the following words or phrases. For example, the words or phrases include Fix, Update, solve, Patch, resolve, Security update, Apply bugfix, Prevent, Upgrade, Address, and conjugated forms of these.</p><p id="p-0097" num="0096">The rule content of the rule number &#x201c;2&#x201d; is that the comment for the update includes any of the following pieces of identification information that identifies vulnerability. For example, the pieces of identification information are a CVE-ID and a URL including the CVE-ID. For example, the CVE-ID is represented in the form of CVE-YYYY-XXXX. Here, &#x201c;YYYY&#x201d; and &#x201c;XXXX&#x201d; represent arbitrary string numerics.</p><p id="p-0098" num="0097">The rule content of the rule number &#x201c;3&#x201d; is that the comment for the update includes any of the following character strings and the character string is included in the overview of known vulnerability information. The overview of the known vulnerability information corresponds to the content of the item of the overview in the vulnerability table <b>111</b> or the vulnerability list table <b>113</b> for the software. Examples of the character strings include, for example, brute force, Ddos, (buffer/stack) overflow, Cross Site Scripting/XSS, Cross Site Request Forgery/CSRF, . . . , and so forth and conjugated forms of these.</p><p id="p-0099" num="0098">For example, in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, a description such as &#x201c;(buffer/stack) overflow&#x201d; represents that a character string in which any one of words separated by a slash symbol within parentheses and a word after the parentheses are coupled is set as a character string to be detected. For example, a description such as &#x201c;Cross Site Scripting/XSS&#x201d; represents that a character string after a slash symbol is an abbreviation of a character string before the slash symbol, and one of the character strings before and after the slash symbol is set as a character string to be detected.</p><p id="p-0100" num="0099">The rule content of the rule number &#x201c;4&#x201d; is that the comment for the update includes a word representative of vulnerability (vulnerability, exploit) and there is known vulnerability information including the &#x201c;information update date&#x201d; within 14 days from the &#x201c;creation date&#x201d; (update date) of the update history. The word representative of vulnerability may be a conjugated form of vulnerability or exploit.</p><p id="p-0101" num="0100">Since the comment of the record of the update ID &#x201c;F&#x201d; in the update history list table <b>114</b> includes &#x201c;Fix&#x201d;, the rule of the rule number &#x201c;1&#x201d; in the vulnerability solution detection rule information <b>115</b> is satisfied. Also, since the comment of the record of the update ID &#x201c;F&#x201d; in the update history list table <b>114</b> includes &#x201c;CVE-2018-0&#x201d; in the form of &#x201c;CVE-YYYY-XXXX&#x201d;, the rule of the rule number &#x201c;2&#x201d; in the vulnerability solution detection rule information <b>115</b> is satisfied. Thus, based on the rule of the rule number &#x201c;0&#x201d;, the tree information creation unit <b>140</b> detects that the vulnerability of &#x201c;CVE-2018-0&#x201d; has been solved by the update corresponding to the record of the update ID &#x201c;F&#x201d;.</p><p id="p-0102" num="0101">The words, character strings, and so force to be detected that are described as examples in the vulnerability solution detection rule information <b>115</b> are merely exemplary and words or character strings other than the exemplary words or character strings may be set as a detection target for solving vulnerability.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating an example of a vulnerability influence list table. A vulnerability influence list table <b>116</b> is generated by the tree information creation unit <b>140</b> based on the update history list table <b>114</b> and the source code of each version of the OSS and stored in the storage unit <b>110</b>. The vulnerability influence list table <b>116</b> includes items of the CVE-ID, a fixation file, a before fixing, and an after fixing. A CVE-ID is registered in the item of the CVE-ID. A path to a file of the source code including the fixed content is registered in the item of the fixation file. Information indicative of a code block before the fixing is registered in the item of the before fixing. Information indicative of a code block after the fixing is registered in the item of the after fixing.</p><p id="p-0104" num="0103">For example, in the vulnerability influence list table <b>116</b>, a record including the CVE-ID of &#x201c;CVE-2018-0&#x201d;, the fixation file of &#x201c;/path/to/file&#x201d;, the before fixing of &#x201c;CODE BLOCK BEFORE FIXING&#x201d;, and the after fixing of &#x201c;CODE BLOCK AFTER FIXING&#x201d; is registered. This record indicates that the fixation file for the vulnerability identified by the CVE-ID of &#x201c;CVE-2018-0&#x201d; is &#x201c;/path/to/file&#x201d;. Also, the record indicates that a location before the fixing in the fixation file corresponds to description represented by &#x201c;CODE BLOCK BEFORE FIXING&#x201d; and a location after the fixing corresponds to description represented by a &#x201c;CODE BLOCK AFTER FIXING&#x201d;. Here, &#x201c;CODE BLOCK BEFORE FIXING&#x201d; in the item of the before fixing and &#x201c;CODE BLOCK AFTER FIXING&#x201d; in the item of the after fixing may be description itself of the code blocks or positional information such as line numbers corresponding to the code blocks in the fixation file.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating an example of a fixation file. A fixation file <b>117</b> is generated by the tree information creation unit <b>140</b> based the update history list table <b>114</b> and comparison in source code between a version after the vulnerability of the OSS has been solved and a version immediately before the version after the vulnerability of the OSS has been solved. The fixation file <b>117</b> is stored in the storage unit <b>110</b>. The fixation file <b>117</b> represents an example in which information is obtained by using Git, which is a source code control tool. According to the example of the update history list table <b>114</b>, the version after the vulnerability of the OSS has been solved is version &#x201c;1.3.0&#x201d;. The version immediately before the version after the vulnerability of the OSS has been solved is version &#x201c;1.2.0&#x201d;. The fixation file <b>117</b> corresponds to the fixation file &#x201c;/path/to/file&#x201d; in the vulnerability influence list table <b>116</b>.</p><p id="p-0106" num="0105">For example, lines 17 to 20 of the fixation file <b>117</b> is a deleted location when the vulnerability identified by the CVE-ID of &#x201c;CVE-2018-0&#x201d; is solved, for example, a deleted code block. The deleted code block is a suspected code block that is likely to be a cause of vulnerability. The suspected code block corresponding to lines 17 to 20 of the fixation file <b>117</b> corresponds to the &#x201c;CODE BLOCK BEFORE FIXING&#x201d; in the vulnerability influence list table <b>116</b>.</p><p id="p-0107" num="0106">Lines 9, 12 to 14, and 22 to 26 of the fixation file <b>117</b> are added locations when the vulnerability identified by the CVE-ID of &#x201c;CVE-2018-0&#x201d; is solved, for example, added code blocks. The added code blocks corresponding to lines 9, 12 to 14, and 22 to 26 of the fixation file <b>117</b> correspond to the &#x201c;CODE BLOCK BEFORE FIXING&#x201d; in the vulnerability influence list table <b>116</b>.</p><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating an example of a vulnerability influence presence/absence list table. A vulnerability influence presence/absence list table <b>118</b> is generated by the tree information creation unit <b>140</b> and stored in the storage unit <b>110</b>. Out of the sets of source code of the individual versions of the OSS, the tree information creation unit <b>140</b> identifies a version corresponding to a set of source code including the suspected code block. The tree information creation unit <b>140</b> registers, as a version in which the influence of vulnerability exists, the identified version in the vulnerability influence presence/absence list table <b>118</b>.</p><p id="p-0109" num="0108">The vulnerability influence presence/absence list table <b>118</b> includes items of the version and the influence of vulnerability. A version of the OSS is registered in the item of the version. A result of determination of the presence/absence of the influence of the vulnerability performed by the tree information creation unit <b>140</b> is registered in the item of the influence of vulnerability.</p><p id="p-0110" num="0109">For example, a record including the version of &#x201c;1.0.0&#x201d; and the influence of vulnerability of &#x201c;ABSENT&#x201d; is registered in the vulnerability influence presence/absence list table <b>118</b>. This record indicates that the set of source code of version &#x201c;1.0.0&#x201d; of the software A does not include a suspected code block and is not under the influence of the vulnerability due to the suspected code block.</p><p id="p-0111" num="0110">A record including the version of &#x201c;1.1.0&#x201d; and the influence of vulnerability of &#x201c;PRESENT&#x201d; is registered in the vulnerability influence presence/absence list table <b>118</b>. This record indicates that the set of source code of version &#x201c;1.1.0&#x201d; of the software A includes a suspected code block and is under the influence of the vulnerability due to the suspected code block.</p><p id="p-0112" num="0111">Records indicative of results of determination on the influence of vulnerability related to the other versions of the software A and version &#x201c;1.0.0&#x201d; of the software B are also registered in the vulnerability influence presence/absence list table <b>118</b>.</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram illustrating an example of a vulnerability correspondence tree display screen. Based on the vulnerability influence presence/absence list table <b>118</b>, the tree information creation unit <b>140</b> displays a vulnerability correspondence tree display screen <b>500</b> on the display <b>51</b>. The tree information creation unit <b>140</b> may transmit screen information of the vulnerability correspondence tree display screen <b>500</b> to another information processing apparatus via the network <b>50</b> or may cause a display device coupled to the other information processing apparatus to display the vulnerability correspondence tree display screen <b>500</b>.</p><p id="p-0114" num="0113">The vulnerability correspondence tree display screen <b>500</b> includes an image representative of the version tree <b>400</b> illustrated as the example in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The tree information creation unit <b>140</b> highlights a version that may include vulnerability in the image representative of the version tree <b>400</b>.</p><p id="p-0115" num="0114">In the example of the software A described above, the tree information creation unit <b>140</b> detects that the software A has the vulnerability of the CVE-ID of &#x201c;CVE-2018-0&#x201d; based on the vulnerability table <b>111</b> or the vulnerability list table <b>113</b>.</p><p id="p-0116" num="0115">Based on the update history list table <b>114</b>, the tree information creation unit <b>140</b> detects that the vulnerability of the CVE-ID of &#x201c;CVE-2018-0&#x201d; has been solved in version &#x201c;1.3.0&#x201d;. Based on the update history list table <b>114</b>, the tree information creation unit <b>140</b> identifies version &#x201c;1.2.0&#x201d; which is a version immediately before version &#x201c;1.3.0&#x201d;.</p><p id="p-0117" num="0116">The tree information creation unit <b>140</b> compares the two versions in source code and detects that the code block d is deleted from the source code and the code block d&#x2032; is added to the source code between version &#x201c;1.2.0&#x201d; and version &#x201c;1.3.0&#x201d;. At this time, the tree information creation unit <b>140</b> uses a set of source code at the time of the update ID of &#x201c;D&#x201d; in the update history list table <b>114</b> as the set of source code of version &#x201c;1.2.0&#x201d;. The code block d is a suspected code block corresponding to lines 17 to 20 of the fixation file <b>117</b> illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The tree information creation unit <b>140</b> may identify the suspected code block d by comparing the set of source code at the time of the update ID of &#x201c;D&#x201d; and the set of source code at the time of the update ID of &#x201c;F&#x201d; in the update history list table <b>114</b>.</p><p id="p-0118" num="0117">The tree information creation unit <b>140</b> detects a set of source code including the suspected code block d out of the sets of source code of the individual versions of the software A and the software B created by branching the software A. The tree information creation unit <b>140</b> determines the version corresponding to the set of source code including the suspected code block d as a version under the influence of the vulnerability.</p><p id="p-0119" num="0118">In the example of the software A and the software B, the sets of source code of versions &#x201c;1.1.0&#x201d;, &#x201c;1.2.0&#x201d;, and &#x201c;3.0.0&#x201d; of the software A includes the suspected code block d. Accordingly, the tree information creation unit <b>140</b> causes the nodes of versions &#x201c;1.1.0&#x201d;, &#x201c;1.2.0&#x201d;, and &#x201c;3.0.0&#x201d; to be highlighted in the image of the version tree <b>400</b> on the vulnerability correspondence tree display screen <b>500</b>. At this time, the tree information creation unit <b>140</b> may display the code blocks included in the sets of source code of individual versions so as to be identifiable in the nodes and may highlight an image such as an icon or a character string representative of the suspected code block d.</p><p id="p-0120" num="0119">Next, a processing procedure of the information processing apparatus <b>100</b> will be described. <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flowchart illustrating an example of processing of the information processing apparatus.</p><p id="p-0121" num="0120">(S<b>10</b>) The development history information obtaining unit <b>130</b> accepts input of repository information indicative of the name of OSS which is the checking target for vulnerability and the repository server <b>300</b> or the source code repository <b>310</b> which is an access destination. For example, the user may input the repository information to the information processing apparatus <b>100</b> by operating the GUI displayed, by the display control unit <b>150</b>, on the display <b>51</b>.</p><p id="p-0122" num="0121">(S<b>11</b>) Based on the input repository information, the development history information obtaining unit <b>130</b> obtains, from the source code repository <b>310</b>, the update history information and the development history information of the OSS and the source code of each version and stores the obtained information and the source code in the storage unit <b>110</b>.</p><p id="p-0123" num="0122">(S<b>12</b>) Based on the development history information stored in the storage unit <b>110</b>, the tree information creation unit <b>140</b> creates information on the version tree <b>400</b>.</p><p id="p-0124" num="0123">(S<b>13</b>) The vulnerability information obtaining unit <b>120</b> performs a vulnerability information obtaining process. In the vulnerability information obtaining process, the vulnerability information obtaining unit <b>120</b> obtains the vulnerability information related to the target OSS from the vulnerability information DB <b>210</b> and generates the vulnerability list table <b>113</b> based on the obtained vulnerability information. The details of the vulnerability information obtaining process will be described later.</p><p id="p-0125" num="0124">(S<b>14</b>) The tree information creation unit <b>140</b> performs a suspected code block identification process. In the suspected code block identification process, the tree information creation unit <b>140</b> identifies the suspected code block and generates the vulnerability influence list table <b>116</b> indicative of information on the identified suspected code block. The details of the suspected code block identification process will be described later.</p><p id="p-0126" num="0125">(S<b>15</b>) The tree information creation unit <b>140</b> performs a suspected code block scanning process. In the suspected code block scanning process, the tree information creation unit <b>140</b> detects a set of source code including the suspected code block identified in operation S<b>14</b> out of the sets of source code of the versions of the target OSS. The details of the suspected code block scanning process will be described later.</p><p id="p-0127" num="0126">(S<b>16</b>) The tree information creation unit <b>140</b> performs a vulnerability correspondence tree creation process. In the vulnerability correspondence tree creation process, the tree information creation unit <b>140</b> adds information indicative of the version including the suspected code block to information of the version tree <b>400</b>. The details of the vulnerability correspondence tree creation process will be described later.</p><p id="p-0128" num="0127">(S<b>17</b>) The display control unit <b>150</b> outputs a result of the vulnerability correspondence tree creation process performed by the tree information creation unit <b>140</b>. For example, the display control unit <b>150</b> causes the display <b>51</b> to display the vulnerability correspondence tree display screen <b>500</b>. The display control unit <b>150</b> may transmit information of the vulnerability correspondence tree display screen <b>500</b> to another information processing apparatus or may cause a display coupled to the other information processing apparatus to display the vulnerability correspondence tree display screen <b>500</b>. The processing of the information processing apparatus <b>100</b> ends.</p><p id="p-0129" num="0128"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a flowchart illustrating an example of the vulnerability information obtaining process. The vulnerability information obtaining process corresponds to operation S<b>13</b>.</p><p id="p-0130" num="0129">(S<b>20</b>) The vulnerability information obtaining unit <b>120</b> obtains, from the vulnerability information DB <b>210</b>, the vulnerability information related to the target OSS designated in the repository information and generates the vulnerability table <b>111</b> based on the vulnerability information. The vulnerability information obtaining unit <b>120</b> stores the vulnerability table <b>111</b> in the storage unit <b>110</b>.</p><p id="p-0131" num="0130">(S<b>21</b>) The vulnerability information obtaining unit <b>120</b> obtains the vulnerability remediation information from the Web server that publicizes the vulnerability remediation information, and the vulnerability information obtaining unit <b>120</b> generates the vulnerability remediation table <b>112</b> based on the vulnerability remediation information. The vulnerability information obtaining unit <b>120</b> stores the vulnerability remediation table <b>112</b> in the storage unit <b>110</b>.</p><p id="p-0132" num="0131">(S<b>22</b>) For each record in the vulnerability table <b>111</b>, the vulnerability information obtaining unit <b>120</b> repeatedly executes operations S<b>23</b> to S<b>26</b>.</p><p id="p-0133" num="0132">(S<b>23</b>) For each record in the vulnerability remediation table <b>112</b>, the vulnerability information obtaining unit <b>120</b> repeatedly executes operations S<b>24</b> and S<b>25</b>. However, for a certain record, operation S<b>25</b> may be skipped depending on determination in operation S<b>24</b>.</p><p id="p-0134" num="0133">(S<b>24</b>) The vulnerability information obtaining unit <b>120</b> determines whether the CVE-ID of the record in the vulnerability table <b>111</b> matches to the CVE-ID of the record in the vulnerability remediation table <b>112</b>. In the case where they match to each other, the processing proceeds to operation S<b>25</b>. In the case where they do not match to each other, the processing proceeds to operation S<b>26</b>.</p><p id="p-0135" num="0134">(S<b>25</b>) The vulnerability information obtaining unit <b>120</b> merges both the records determined to have the same CVE-ID in operation S<b>24</b> to record in the vulnerability list table <b>113</b>.</p><p id="p-0136" num="0135">(S<b>26</b>) Upon completion of the repeated execution for all the records in the vulnerability remediation table <b>112</b>, the vulnerability information obtaining unit <b>120</b> causes the processing to proceed to operation S<b>27</b>.</p><p id="p-0137" num="0136">(S<b>27</b>) Upon completion of the repeated execution for all the records in the vulnerability table <b>111</b>, the vulnerability information obtaining unit <b>120</b> causes the processing to proceed to operation S<b>28</b>.</p><p id="p-0138" num="0137">(S<b>28</b>) The vulnerability information obtaining unit <b>120</b> outputs a result. For example, the vulnerability information obtaining unit <b>120</b> saves to the storage unit <b>110</b> the vulnerability list table <b>113</b> generated as the result of the processing of operations S<b>20</b> to S<b>27</b>. The vulnerability information obtaining process ends.</p><p id="p-0139" num="0138"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a flowchart illustrating an example of the suspected code block identification process. The suspected code block identification process corresponds to operation S<b>14</b>.</p><p id="p-0140" num="0139">(S<b>30</b>) The development history information obtaining unit <b>130</b> obtains the update history list table <b>114</b>. For example, the development history information obtaining unit <b>130</b> generates the update history list table <b>114</b> based on the update history information and the development history information stored in the storage unit <b>110</b> and stores the update history list table <b>114</b> in the storage unit <b>110</b>.</p><p id="p-0141" num="0140">(S<b>31</b>) For each record in the update history list table <b>114</b>, the tree information creation unit <b>140</b> repeatedly executes operations S<b>32</b> to S<b>34</b>. However, for a certain record, operations S<b>33</b> and S<b>34</b> may be skipped depending on determination in operation S<b>32</b>.</p><p id="p-0142" num="0141">(S<b>32</b>) Based on the vulnerability solution detection rule information <b>115</b>, the tree information creation unit <b>140</b> determines whether there is description of solving of vulnerability in the comment of the record. In the case where there is the description of the solving of vulnerability, the processing proceeds to operation S<b>33</b>. In the case where there is no description of the solving of vulnerability, the processing proceeds to operation S<b>35</b>. As described above, in the determination on the description of the solving of vulnerability, the tree information creation unit <b>140</b> may refer to the overview of the vulnerability of the corresponding OSS in the vulnerability table <b>111</b> or the vulnerability list table <b>113</b> based on the vulnerability solution detection rule information <b>115</b>.</p><p id="p-0143" num="0142">(S<b>33</b>) By comparing the source code reflecting an update of the record including the description of the solving of vulnerability with the source code at the time of an update immediately previous to the update of the record including the description of the solving of vulnerability in the update history list table <b>114</b>, the tree information creation unit <b>140</b> obtains changed contents of the source code. The changed contents of the source code include information indicative of a suspected code block deleted by the update and a code block added by the update.</p><p id="p-0144" num="0143">(S<b>34</b>) The tree information creation unit <b>140</b> records the changed contents of the source code obtained in operation S<b>33</b> in the vulnerability influence list table <b>116</b>. The tree information creation unit <b>140</b> generates the fixation file <b>117</b> indicative of the changed contents of the source code and records a path name to the fixation file <b>117</b> in the vulnerability influence list table <b>116</b>.</p><p id="p-0145" num="0144">(S<b>35</b>) Upon completion of the repeated execution for all the records in the update history list table <b>114</b>, the tree information creation unit <b>140</b> causes the processing to proceed to operation S<b>36</b>.</p><p id="p-0146" num="0145">(S<b>36</b>) The tree information creation unit <b>140</b> outputs a result. For example, the tree information creation unit <b>140</b> saves to the storage unit <b>110</b> the vulnerability influence list table <b>116</b> generated as the result of the processing of operations S<b>31</b> to S<b>35</b>. The suspected code block identification process ends.</p><p id="p-0147" num="0146"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a flowchart illustrating an example of the suspected code block scanning process. The suspected code block scanning process corresponds to operation S<b>15</b>.</p><p id="p-0148" num="0147">(S<b>40</b>) For each record in the update history list table <b>114</b>, the tree information creation unit <b>140</b> repeatedly executes operations S<b>41</b> to S<b>45</b>. However, for a certain record, a subset of the operations may be skipped depending on determination in operation S<b>41</b> or S<b>43</b>.</p><p id="p-0149" num="0148">(S<b>41</b>) The tree information creation unit <b>140</b> determines whether a version tag exists in the record. The version tag corresponds to a value set in the item of version in the update history list table <b>114</b>. In the case where the setting of version exists in the item of version, it means that the version tag exists, and in the case where the setting of version does not exist in the item of version, it means the version tag does not exist. In the case where the version tag exists, the processing proceeds to operation S<b>42</b>. In the case where the version tag does not exist, the processing proceeds to operation S<b>46</b>.</p><p id="p-0150" num="0149">(S<b>42</b>) The tree information creation unit <b>140</b> obtains a set of source code in the state of the update ID of the record. The set of source code in the state of the update ID is a set of source code at a time when a commit corresponding to the update ID is performed.</p><p id="p-0151" num="0150">(S<b>43</b>) Based on the vulnerability influence list table <b>116</b>, the tree information creation unit <b>140</b> obtains the suspected code block. The tree information creation unit <b>140</b> determines whether the set of source code obtained in operation S<b>42</b> includes the suspected code block. In the case where the suspected code block is included, the processing proceeds to operation S<b>44</b>. In the case where the suspected code block is not included, the processing proceeds to operation S<b>45</b>.</p><p id="p-0152" num="0151">(S<b>44</b>) The tree information creation unit <b>140</b> records, for the corresponding version, the influence of vulnerability of &#x201c;PRESENT&#x201d; in the vulnerability influence presence/absence list table <b>118</b>. The processing proceeds to operation S<b>46</b>.</p><p id="p-0153" num="0152">(S<b>45</b>) The tree information creation unit <b>140</b> records, for the corresponding version, the influence of vulnerability of &#x201c;ABSENT&#x201d; in the vulnerability influence presence/absence list table <b>118</b>. The processing proceeds to operation S<b>46</b>.</p><p id="p-0154" num="0153">(S<b>46</b>) Upon completion of the repeated execution for all the records in the update history list table <b>114</b>, the tree information creation unit <b>140</b> causes the processing to proceed to operation S<b>47</b>.</p><p id="p-0155" num="0154">(S<b>47</b>) The tree information creation unit <b>140</b> outputs a result. For example, the tree information creation unit <b>140</b> saves to the storage unit <b>110</b> the vulnerability influence presence/absence list table <b>118</b> generated as the result of the processing of operations S<b>40</b> to S<b>46</b>. The suspected code block scanning process ends.</p><p id="p-0156" num="0155"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a flowchart illustrating an example of the vulnerability correspondence tree creation process. The vulnerability correspondence tree creation process corresponds to operation S<b>16</b>.</p><p id="p-0157" num="0156">(S<b>50</b>) For each record in the vulnerability influence presence/absence list table <b>118</b>, the tree information creation unit <b>140</b> repeatedly executes operations S<b>51</b> to S<b>53</b>. However, for a certain record, a subset of operations may be skipped depending on determination in operation S<b>51</b>.</p><p id="p-0158" num="0157">(S<b>51</b>) The tree information creation unit <b>140</b> determines whether the influence of vulnerability exists in the version of the record in the vulnerability influence presence/absence list table <b>118</b>. In the case where the influence of vulnerability exits, the processing proceeds to operation S<b>52</b>. In the case where the influence of vulnerability does not exist, the processing proceeds to operation S<b>53</b>.</p><p id="p-0159" num="0158">(S<b>52</b>) For the corresponding version in the version tree <b>400</b>, the tree information creation unit <b>140</b> records &#x201c;influenced&#x201d;. The processing proceeds to operation S<b>54</b>.</p><p id="p-0160" num="0159">(S<b>53</b>) For the corresponding version in the version tree <b>400</b>, the tree information creation unit <b>140</b> records &#x201c;not influenced&#x201d;. The processing proceeds to operation S<b>54</b>.</p><p id="p-0161" num="0160">(S<b>54</b>) Upon completion of the repeated execution for all the records in the vulnerability influence presence/absence list table <b>118</b>, the tree information creation unit <b>140</b> causes the processing to proceed to operation S<b>55</b>.</p><p id="p-0162" num="0161">(S<b>55</b>) The tree information creation unit <b>140</b> outputs a result. For example, the tree information creation unit <b>140</b> outputs to the display control unit <b>150</b> information of the vulnerability correspondence tree display screen <b>500</b> including the version tree <b>400</b> created in the processing of operations S<b>50</b> to S<b>54</b>. The vulnerability correspondence tree creation process ends.</p><p id="p-0163" num="0162">As described above, the display control unit <b>150</b> may prompt the user to check the version under the influence of the vulnerability by highlighting the version &#x201c;influenced&#x201d; by the vulnerability in the vulnerability correspondence tree display screen <b>500</b>.</p><p id="p-0164" num="0163">Meanwhile, in recent years, as demand for use of the OSS has been increasing, a risk caused by vulnerability due to use of the OSS for software products has been increasing. Although a quick response to detected vulnerability is desired, in the case of the OSS, the following problems arise, and the degree of difficulty in remediating vulnerability is relatively high.</p><p id="p-0165" num="0164">First, since remediation for the OSS is made by upgrading of the version, it is desirable to identify the vulnerability remediated version. The reason for this is that the OSS does not provide a so-called patch that solves only vulnerability without influencing the version in use.</p><p id="p-0166" num="0165">Second, there are many cases where a plurality of versions of the OSS are developed in parallel and released, and the degree of difficulty in identifying the vulnerability remediated version is high.</p><p id="p-0167" num="0166">Third, since the OSS project itself may fork (branch), there is a possibility that an influence range expands to other OSS.</p><p id="p-0168" num="0167">Fourth, in the case where vulnerability is found in a certain version of certain software by a security organization, it is desired to wait for reproduction testing for the individual versions regarding whether the other versions are under the influence. Thus, the influence range is not necessarily quickly identified.</p><p id="p-0169" num="0168">Fifth, in the case of the OSS, since a project itself may fork, there may be a case where a suspected location in the source code is copied to another project. However, this influence range is not necessarily quickly identified, either.</p><p id="p-0170" num="0169">Sixth, regarding versions subsequent to the vulnerability target version, a suspected location in the source code may have been erased through refactoring or the like. However, whether the vulnerability has been solved is not necessarily determined without checking the behavior by reproduction testing or the like.</p><p id="p-0171" num="0170">For example, regarding the software A represented by the version tree <b>400</b>, a case is considered where the fact that the vulnerability has been found in version &#x201c;1.1.0&#x201d; is publicized. In this case, the influence range of the vulnerability in not necessarily identified without performing the reproduction testing on the previous version (1.0.0), the subsequent versions (1.2.0, 1.3.0, 1.4.0), the branched versions (2.0.0 and 3.0.0), and all the versions of the branched software B.</p><p id="p-0172" num="0171">As described above, in the case where the reproduction testing is performed, a case is conceivable where the presence/absence of the influence on the other versions is different depending on whether the suspected location of the source code of the version having the vulnerability is mixed in the source code of the other versions. In order to remediate the vulnerability of the OSS, the presence/absence of the influence for each version is checked. However, performing the reproduction testing for all the versions demand many resources in both a storage area for the source code and the time until the completion of the reproduction testing.</p><p id="p-0173" num="0172">Accordingly, as described in the second embodiment, the information processing apparatus <b>100</b> enables identification of the presence/absence of the influence of vulnerability in each version without performing reproduction testing on all the versions, for example. Thus, the information processing apparatus <b>100</b> may efficiently determine the version including vulnerability.</p><p id="p-0174" num="0173">For example, the information processing apparatus <b>100</b> executes the following processing. The development history information obtaining unit <b>130</b> obtains update history information including respective update histories of a plurality of versions of software. The tree information creation unit <b>140</b> identifies from the update history information a second version corresponding to an update history including a predetermined keyword. Based on development history information including a change location in source code of the software between the identified second version and a first version immediately previous to the identified second version, the tree information creation unit <b>140</b> identifies, as a code block that has a possibility of including vulnerability (a suspected code block), a code block deleted from the source code when the first version is upgraded to the second version. The tree information creation unit <b>140</b> detects, out of the plurality of versions, a version including the identified code block in the source code.</p><p id="p-0175" num="0174">Accordingly, the information processing apparatus <b>100</b> may efficiently determine a version including the vulnerability. The update history information and the development history information are reflected in the update history list table <b>114</b>. Thus, the update history list table <b>114</b> is examples of the update history information and the development history information. Information registered in the item of the comment of the update history list table <b>114</b> is an example of the above-described update history.</p><p id="p-0176" num="0175">In the identifying of the second version, the tree information creation unit <b>140</b> determines whether the update history of each of the plurality of versions includes any of a plurality of keywords which indicate that a security problem in the software has been solved. The tree information creation unit <b>140</b> identifies, as the second version, a version corresponding to an update history including any of the plurality of keywords.</p><p id="p-0177" num="0176">Thus, the information processing apparatus <b>100</b> may appropriately identify a version in which the vulnerability has been solved. Character strings to be detected in each rule content of the vulnerability solution detection rule information <b>115</b> are examples of the above-described keywords.</p><p id="p-0178" num="0177">The tree information creation unit <b>140</b> may obtain identification information that identifies the vulnerability found with respect to the software or that identifies an attack which exploits the vulnerability, and the tree information creation unit <b>140</b> may determine, as the predetermined keyword, a keyword that includes the identification information.</p><p id="p-0179" num="0178">Thus, the information processing apparatus <b>100</b> may appropriately identify the version in which the vulnerability has been solved. For example, it is conceivable that the tree information creation unit <b>140</b> extracts the identification information such as &#x201c;XSS&#x201d; in the overview of the vulnerability table <b>111</b> or the vulnerability list table <b>113</b> as is the case with the rule content of the rule number &#x201c;3&#x201d; in the above-described vulnerability solution detection rule information <b>115</b>. The tree information creation unit <b>140</b> may set the extracted identification information as the keyword to be used for comparison with the update history.</p><p id="p-0180" num="0179">Based on the development history information, the tree information creation unit <b>140</b> identifies a version of other software that has been created from a derivative of the software, and the tree information creation unit <b>140</b> detects a version of the other software including the identified code block in source code.</p><p id="p-0181" num="0180">Thus, the information processing apparatus <b>100</b> may efficiently determine the version including the vulnerability also for the other software that has been created from the derivative of the software.</p><p id="p-0182" num="0181">The display control unit <b>150</b> causes a display device to display a screen representative of an order relationship between the plurality of versions and to highlight on the screen the version including the identified code block in the source code out of the plurality of versions.</p><p id="p-0183" num="0182">Thus, the information processing apparatus <b>100</b> may appropriately present to the user the version which is the checking target for the vulnerability and may prompt the user to check the vulnerability. For example, the user may select a version without the influence of the vulnerability other than the version under the influence of the vulnerability and use the selected version for software development. Alternatively, the user may focus on the version that is displayed as a version under the influence of the vulnerability and set the focused version as a target of an operational check such as reproduction testing. In this way, the information processing apparatus <b>100</b> may decrease work load of the user in checking vulnerability.</p><p id="p-0184" num="0183">The display <b>51</b> is an example of the display device. The display device may be a device coupled to another information processing apparatus that communicates with the information processing apparatus <b>100</b> via the network <b>50</b>. The vulnerability correspondence tree display screen <b>500</b> is an example of the screen displayed on the above-described display device.</p><p id="p-0185" num="0184">In the detecting of the version that includes the identified code block in the source code, the tree information creation unit <b>140</b> detects all versions that includes the identified code block in the source code. Thus, the information processing apparatus <b>100</b> may identify the versions that possibly include the vulnerability without omission.</p><p id="p-0186" num="0185">Information processing according to the first embodiment may be realized by causing the processing unit <b>12</b> to execute a program. Information processing according to the second embodiment may be realized by causing the CPU <b>101</b> to execute the program. The program may be recorded in the computer-readable recording medium <b>53</b>.</p><p id="p-0187" num="0186">For example, the program may be distributed by distributing the recording medium <b>53</b> in which the program is recorded. The program may be stored in another computer and distributed via a network. For example, the computer may store (install) the program recorded in the recording medium <b>53</b> or received from another computer in a storage device such as the RAM <b>102</b> or the HDD <b>103</b>, read the program from the storage device, and execute the program.</p><p id="p-0188" num="0187">All examples and conditional language provided herein are intended for the pedagogical purposes of aiding the reader in understanding the invention and the concepts contributed by the inventor to further the art, and are not to be construed as limitations to such specifically recited examples and conditions, nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although one or more embodiments of the present invention have been described in detail, it should be understood that the various changes, substitutions, and alterations could be made hereto without departing from the spirit and scope of the invention.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A non-transitory computer-readable recording medium storing a program for causing a computer to execute a process, the process comprising:<claim-text>obtaining update history information that includes respective update histories of a plurality of versions of software, the plurality of versions including a first version immediately previous to a second version;</claim-text><claim-text>identifying, from the update history information, the second version that corresponds to the update history that includes a predetermined keyword;</claim-text><claim-text>identifying, based on development history information that includes a change location in a source code of the software between the first version and the second version, a code block deleted from the source code when the first version is upgraded to the second version, as the code block that includes a possibility of including vulnerability; and</claim-text><claim-text>detecting, out of the plurality of versions, a third version that includes the identified code block in the source code.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The non-transitory computer-readable recording medium according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, in the identifying of the second version, whether the update history of each of the plurality of versions includes any of a plurality of keywords that indicate that a security problem in the software has been solved is determined, and a fourth version that corresponds to the update history that includes any of the plurality of keywords is identified as the second version out of the plurality of versions.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The non-transitory computer-readable recording medium according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, the process further comprising:<claim-text>obtaining identification information that identifies the vulnerability found with respect to the software or that identifies an attack that exploits the vulnerability; and</claim-text><claim-text>determining, as the predetermined keyword, a keyword that includes the identification information.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The non-transitory computer-readable recording medium according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, the process further comprising:<claim-text>identifying, based on the development history information, a fifth version of other software that has been created from a derivative of the software; and</claim-text><claim-text>detecting the fifth version of the other software that includes the identified code block in the source code.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The non-transitory computer-readable recording medium according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, the process further comprising:<claim-text>causing a display device to display a screen representative of an order relationship between the plurality of versions and to highlight on the screen the third version.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The non-transitory computer-readable recording medium according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, in the detecting of the third version, all third versions that include the identified code block in the source code are detected.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A method of detecting vulnerability for causing a computer to execute a process, the process comprising:<claim-text>obtaining update history information that includes respective update histories of a plurality of versions of software, the plurality of versions including a first version immediately previous to a second version;</claim-text><claim-text>identifying, from the update history information, the second version that corresponds to the update history that includes a predetermined keyword;</claim-text><claim-text>identifying, based on development history information that includes a change location in a source code of the software between the first version and the second version, a code block deleted from the source code when the first version is upgraded to the second version, as the code block that includes a possibility of including vulnerability; and</claim-text><claim-text>detecting, out of the plurality of versions, a third version that includes the identified code block in the source code.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. An information processing apparatus comprising:<claim-text>a memory configured to store update history information that includes respective update histories of a plurality of versions that include a first version immediately previous to a second version and development history information that includes a change location in a source code of the software between the first version and the second version; and</claim-text><claim-text>a processor coupled to the memory and configured to</claim-text><claim-text>identify, from the update history information, the second version that corresponds to the update history that includes a predetermined keyword,</claim-text><claim-text>identify, based on the development history information, a code block deleted from the source code when the first version is upgraded to the second version, as a code block that includes a possibility of including vulnerability, and</claim-text><claim-text>detect, out of the plurality of versions, a third version that includes the identified code block in the source code.</claim-text></claim-text></claim></claims></us-patent-application>