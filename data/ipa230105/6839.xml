<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006840A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006840</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779108</doc-number><date>20201116</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>GB</country><doc-number>1917131.3</doc-number><date>20191125</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3268</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHODS AND DEVICES FOR AUTOMATED DIGITAL CERTIFICATE VERIFICATION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>nChain Licensing AG</orgname><address><city>Zug</city><country>CH</country></address></addressbook><residence><country>CH</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>PETTIT</last-name><first-name>Michaella</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>ZHANG</last-name><first-name>Wei</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>VAUGHAN</last-name><first-name>Owen</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>WRIGHT</last-name><first-name>Craig Steven</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/IB2020/060767</doc-number><date>20201116</date></document-id><us-371c12-date><date>20220523</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A public key may be recorded on the blockchain by a certificate authority in such a manner that any third party may quickly and easily verify that the public key is certified by the certificate authority and that the certification has not been revoked. The certificate authority may be able to revoke the certification nearly instantaneously, and/or may be able to simultaneously certify a new key for the same entity while revoking the old key. The verification may be incorporated into a new transaction so that there is no gap between reliance on the certificate and the verification of its validity. In some cases, each transaction in which the certificate is used may also serve as linked certificate transaction that renews the certificate to enable a subsequent use.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="154.69mm" wi="137.84mm" file="US20230006840A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="185.84mm" wi="139.87mm" file="US20230006840A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="224.79mm" wi="129.88mm" file="US20230006840A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="204.64mm" wi="118.28mm" file="US20230006840A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="226.57mm" wi="149.69mm" file="US20230006840A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="226.57mm" wi="149.69mm" file="US20230006840A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="237.07mm" wi="156.72mm" file="US20230006840A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="132.84mm" wi="98.55mm" file="US20230006840A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is the U.S. National Stage of International Application No. PCT/IB2020/060767 filed on Nov. 16, 2020, which claims the benefit of United Kingdom Patent Application No. 1917131.3, filed on Nov. 25, 2019, the contents of which are incorporated herein by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to blockchain networks and, in particular, to the use of a blockchain to facilitate digital certificate verification.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In a public key infrastructure, a computing device may have a public-private key pair to facilitate secure communications, digital signatures, non-repudiation, and other functions. As a part of the public key infrastructure, the computing device may have its public key registered with a certification authority, which provides the computing device with a digital certificate confirming ownership and authorization of the public key.</p><p id="p-0005" num="0004">A problem with the use of certification authorities is that once they have issued a digital certificate then it remains valid until its specified expiry date. However, the public key may become compromised, necessitating revocation of the certification. To address that issue, certification authorities maintain &#x201c;revocation lists&#x201d; detailing which digital certificates should be considered revoked, and they regularly update and publish these lists. An entity wishing to validate a public key may rely on the digital certificate, but must also then obtain and review a corresponding certificate revocation list to see if the digital certificate has been invalidated by the certification authority. This system and its inherent delays means that some digital certificates may be revoked and that revocation may not yet be published or available to an entity that intends to rely on that digital certificate.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">Reference will now be made, by way of example, to the accompanying drawings which show example embodiments of the present application and in which:</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> diagrammatically illustrates an example system for managing a public key infrastructure;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows, in flowchart form, one example method for registering a public key with a certification authority;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows, in flowchart form, one example method of verifying a public key;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows, in flowchart form, an example method of validating a digital certificate;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows, in flowchart form, another example method of validating a digital certificate;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows, in flowchart form, a further example method of validating a digital certification using linked certification transactions; and</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows, in block diagram form, a simplified example of node that may implement at least part of one of the described methods.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0014" num="0013">Like reference numerals are used in the drawings to denote like elements and features.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION OF EXAMPLES</heading><p id="p-0015" num="0014">In one aspect, there may be provided a computer-implemented method of managing public key infrastructure using a blockchain network. The method may include generating a digital certificate for a first entity, the first entity having a first public key, by creating a certification transaction, wherein the certification transaction includes a digital signature from a certificate authority, a first output to an address based on a second public key, and a second output having an information field that contains the first public key; determining a certification transaction identifier from a hash of the certification transaction; and propagating the certification transaction on the blockchain network. The digital certificate includes the first public key and the certification transaction identifier.</p><p id="p-0016" num="0015">In some implementations, the second output includes an OP_RETURN field that contains at least the first public key. In some implementations, the first output includes a pay-to-public-key-hash (P2PKH) operation referencing an address obtained as a hash of the second public key. In some implementations, the certificate authority holds a second private key corresponding to the second public key.</p><p id="p-0017" num="0016">In some implementations the method may further include verifying the digital certificate. Verifying the digital certificate may include obtaining a copy of the certification transaction from a blockchain based on the certification transaction identifier in the digital certificate; determining that the first output is an unspent transaction output; and determining that the first public key contained in the second output in the certification transaction matches a public key in the digital certificate. In some such implementations, determining that the first output is an unspent transaction output includes determining that the first output is present in an unspent transaction output pool of the blockchain network. In some such implementations, an input to the certification transaction may further include a certificate authority public key, and wherein verifying the digital certificate may further include determining that the certification transaction is signed by the certificate authority based on the certificate authority public key.</p><p id="p-0018" num="0017">In some implementations, the method may further include revoking the digital certificate by generating a revocation transaction that includes, as an input, the first output of the certification transaction, and propagating the revocation transaction on the blockchain network.</p><p id="p-0019" num="0018">In some implementations, the method may further include replacing the digital certificate with a new digital certificate for a new public key. Replacing may include creating a new certification transaction, wherein the new certification transaction includes as an input the first output of the certification transaction, a first new output to an new address based on a third public key, and a second new output having the information field, wherein the information field contains the new public key; determining a new certification transaction identifier from hashing the new certification transaction; and propagating the new certification transaction on the blockchain network. The new digital certificate may include the new public key and the new certification transaction identifier.</p><p id="p-0020" num="0019">In some implementations, the information field is an OP_RETURN output.</p><p id="p-0021" num="0020">In some implementations, the certification transaction includes an input referencing an unspent transaction outpoint address obtained from a hash of a certificate authority public key, and wherein the certification transaction includes an unlocking script for the unspent transaction outpoint address that includes the certificate authority public and the digital signature, and wherein the digital signature is generated based on a private key corresponding to the certificate authority public key.</p><p id="p-0022" num="0021">In some implementations, the first output includes a multi-sig locking script enabling any one of two or more private keys to utilize the first output.</p><p id="p-0023" num="0022">In a further aspect, the present application describes a computer-implemented method of verifying a digital certificate using a blockchain network. The digital certificate including a first public key and a certification transaction identifier. The method may include receiving the digital certificate from a first entity and obtaining a copy of the certification transaction from a blockchain based on the certification transaction identifier in the digital certificate, wherein the certification transaction includes a digital signature from a certificate authority, a first output to an address based on a second public key, and a second output having an information field. The method may further include determining that the information field contains a public key that matches the first public key in the digital certificate; querying an unspent transaction output pool to determine that the first output in the certification transaction has not been used in any subsequent transaction; and, based on those determinations, verifying that the first public key is certified valid.</p><p id="p-0024" num="0023">In yet a further aspect, the present application describes a computer-implemented method of validating a certificate associated with a first node. The method may include receiving a transaction template from the first node, the transaction template containing a first input that references a certification transaction output and is signed by a certification transaction key; obtaining a copy of a certification transaction and determining that the certification transaction includes the certificate associated with the first node and that the certification transaction is signed by a certification authority key; and propagating the transaction template on a blockchain network, wherein the transaction template propagated includes a second input transferring resources to an output address. The transaction template is to be validated by nodes on the blockchain network if the certification transaction output is contained within an unspent transaction output set.</p><p id="p-0025" num="0024">In some implementations, the transaction template includes an input from a first public key associated with the first node, and wherein the certificate includes the first public key. In some cases, propagating includes adding, to the transaction template prior to propagation, an output to a second public key associated with a second node.</p><p id="p-0026" num="0025">In some implementations, the transaction template includes an output to a first public key associated with the first node, and wherein the certificate includes the first public key. In some cases, propagating includes adding, to the transaction template prior to propagation, an input from a second public key associated with a second node.</p><p id="p-0027" num="0026">In some implementations, the certification transaction output includes a pay-to-public-key output in the certification transaction. In some cases, the certification transaction output is one of a plurality of pay-to-public-key outputs in the certification transaction, and wherein each of the pay-to-public-key outputs in the certification transaction involves a different respective public key.</p><p id="p-0028" num="0027">In some implementations, obtaining includes identifying a last transaction in a series of linked transactions based on the last transaction containing the certification transaction output, and tracing through the series of linked transactions to identify the certification transaction. In some cases, obtaining further includes verifying that the certification transaction output is a multi-signature output for which a permitted signatory includes the certification authority key.</p><p id="p-0029" num="0028">In some implementations, the unspent transaction output set includes all transaction outputs not yet utilized as an input to a further transaction, and wherein the unspent transaction output set is maintained by the blockchain network.</p><p id="p-0030" num="0029">In some implementations, the certification transaction output is in a transaction having a transaction identifier, and wherein first input in the transaction template references the transaction identifier and wherein the certification transaction key is a private key associated with the transaction identifier and an index.</p><p id="p-0031" num="0030">In some implementations, obtaining includes transmitting a request for the certification transaction to a node in the blockchain network and receiving a response containing the certification transaction.</p><p id="p-0032" num="0031">In some implementations, obtaining includes receiving, from the first node, the copy of the certification transaction and a Merkle path associated with the certification transaction, and wherein the method further includes verifying that the certification transaction existing in a blockchain based on the copy of the certification transaction, the Merkle path, and a set of block headers for the blockchain.</p><p id="p-0033" num="0032">In another aspect, there may be provided a computing device implementing a node in a network. The computing device may include memory, one or more processors, and computer-executable instructions that, when executed, cause the processors to carry out one or more of the methods described herein.</p><p id="p-0034" num="0033">In yet another aspect, there may be provided a computer-readable medium storing processor-executable instructions for operating a node in a network, the processor-executable instructions including instructions that, when executed by one or more processors, cause the processors to carry out at least one of the methods described herein.</p><p id="p-0035" num="0034">Other example embodiments of the present disclosure will be apparent to those of ordinary skill in the art from a review of the following detailed description in conjunction with the drawings.</p><p id="p-0036" num="0035">In the present application, the term &#x201c;and/or&#x201d; is intended to cover all possible combinations and sub-combinations of the listed elements, including any one of the listed elements alone, any sub-combination, or all of the elements, and without necessarily excluding additional elements.</p><p id="p-0037" num="0036">In the present application, the phrase &#x201c;at least one of . . . or . . . &#x201d; is intended to cover any one or more of the listed elements, including any one of the listed elements alone, any sub-combination, or all of the elements, without necessarily excluding any additional elements, and without necessarily requiring all of the elements.</p><p id="p-0038" num="0037">The present application will refer to hashing or a hash function, which is intended to include any one of a number of cryptographic hash functions that, when applied to an arbitrary set of data or &#x201c;message&#x201d;, deterministically produce a unique fixed-length alphanumeric string. The result of a hash function may be called a hash value, fingerprint, hash result, or equivalent. Examples include, but are not limited to, SHA-2, SHA-3, and BLAKE2.</p><p id="p-0039" num="0038">In this document the term &#x2018;blockchain&#x2019; is understood to include all forms of electronic, computer-based, distributed ledgers. These include consensus-based blockchain and transaction-chain technologies, permissioned and un-permissioned ledgers, shared ledgers and variations thereof. The most widely known application of blockchain technology is the Bitcoin ledger, although other blockchain implementations have been proposed and developed. While Bitcoin, as exemplified by the Bitcoin SV protocol, may be referred to herein for the purpose of convenience and illustration, it should be noted that the invention is not limited to use with the Bitcoin blockchain and alternative blockchain implementations and protocols fall within the scope of the present invention.</p><p id="p-0040" num="0039">A blockchain is a peer-to-peer, electronic ledger which is implemented using a computer-based decentralised, distributed system. The blockchain is made up of blocks which in turn are made up of transactions. Each transaction is a data structure that encodes, among other possible information, the transfer of control of a digital asset between participants in the blockchain system and includes at least one input and at least one output. Each block header contains a summary of the block's contents, such as in the form of a Merkle root, and each block header contains a hash of the previous block header so that blocks become chained together to create a permanent, unalterable record of all transactions which have been written to the blockchain since its inception. Transactions contain small programs known as scripts embedded into their inputs and outputs, which specify how and by whom the outputs of the transactions can be accessed. On the Bitcoin platform, these scripts are written using a stack-based scripting language.</p><p id="p-0041" num="0040">The blockchain is implemented over a network of nodes. Each node is a computing device with network connectivity and executing software that carries out the applicable blockchain protocol. Nodes validate transactions and propagate them to other nodes in the network. Specialized network nodes, termed &#x201c;mining nodes&#x201d; or &#x201c;miners&#x201d;, collect a set of unconfirmed transactions, i.e. pending transactions, into a block and attempt to &#x201c;mine&#x201d; the block. Mining, in these examples, refers to solving a proof-of-work (POW) before any other miner in the network succeeds in solving a proof-of-work for their respective block. In the Bitcoin example, a POW involves hashing a block header containing a nonce until the result is below a threshold value set by a difficultly parameter. The nonce is repeated incremented and the hashing repeated until the result is below the threshold value or until the miner receives notice that another miner has succeeded. Variations in mining process will be familiar to those ordinarily skilled in the art.</p><p id="p-0042" num="0041">Among the various things that are checked when validating a transaction, a node determines whether the inputs to a transaction are valid. In particular, the node evaluates whether the unlocking script evaluates as true and determines whether the input references an &#x201c;unspent transaction output&#x201d; (UTXO) from an earlier transaction. Some nodes may maintain a running list or pool of UTXO to enable fast determination of whether a referenced transaction output is in the UTXO or not. The list or pool of UTXO may be referred to as an &#x201c;unspent transaction output set&#x201d;. The blockchain network is configured to update and maintain the unspent transaction output set so as to prevent double-spending attacks. A transaction may be identified by its unique transaction identifier, TxID, which in some implementations is a hash of the transaction. Some transactions may have more than one output, so a unique transaction output (i.e. an outpoint) may be identified by the TxID and an index, where the index point to one of the outputs in the ordered set of outputs from the transaction. If the transaction output is present in the UTXO pool or set, then the output of that transaction is &#x201c;unspent&#x201d; and available to serve as an input.</p><p id="p-0043" num="0042">The unlocking script for a transaction outpoint defines how &#x201c;control&#x201d; over that output is to be proven in order to be exercised. In many cases, the address associated with a transaction output is a hash of a public key. To prove control over that output, an unlocking script often requires the public key and a digital signature generated using the corresponding private key. In this manner, the node that controls the private key is able to control when and how the transaction output is used in any subsequent input. As will be discussed further below, this has the corollary that when a transaction input corresponding to a particular public key includes a digital signature generated using the corresponding private key, then the entity associated with that particular public key is effectively signing or certifying the transaction contents.</p><p id="p-0044" num="0043">Public-key cryptography has become ubiquitous in online communications. In many instances, a process and policy is needed to provide certainty that a public key is owned by an associated with a particular entity. The most common approach to ensuring that a public key is authentic and has not been compromised is a public key infrastructure (PKI). PKI relies upon a trusted third party to &#x201c;authenticate&#x201d; public keys as valid. These entities are &#x201c;certificate authorities&#x201d; (CAs). The CAs provide for registration and issuance of digital certificates that confirm the binding between a public key and a particular owner. The holder of a public key provides another entity with its public key and its digital certificate. The other entity may then verify the authenticity of the public key by confirming that a trusted CA has digitally signed the public key as belonging to the holder.</p><p id="p-0045" num="0044">One of the problems with existing PKI is that sometimes a public key becomes compromised, for example if the private key is lost or disclosed before a certificate's specified expiry date. For that reason, the CA may maintain a certificate revocation list. Any entity wishing to rely upon a certificate associated with a public key must then also seek out and review an associated certificate revocation list to confirm that the certificate has not been revoked by the CA. This compromises the ability to authenticate keys offline and creates risks due to the delay between revocation and publication of a new certificate revocation list, which is often 24 hours or more.</p><p id="p-0046" num="0045">In accordance with one aspect of the present application, a blockchain network may be used to improve upon public-key infrastructure by providing for fast and secure validation, revocation and update of digital certificates. A public key may be recorded on the blockchain by a certificate authority in such a manner that any third party may quickly and easily verify that the public key is certified by the certificate authority and that the certification has not been revoked. By recording the public key in the manner described below, the certificate authority may be able to revoke the certification nearly instantaneously, or may be able to simultaneously certify a new key for the same entity while revoking the old key. In some cases, the ability to revoke a certification may be given to the owner of the public key or, in some cases, to one or even a group of other entities.</p><p id="p-0047" num="0046">Reference will now be made to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, which diagrammatically illustrates an example system <b>100</b> for managing a public key infrastructure. The system <b>100</b> in this example includes a first computing device <b>102</b>, a second computing device <b>104</b>, and a server <b>106</b>. The first computing device <b>102</b> and the second computing device <b>104</b> may be implemented by way of any network-enabled computing device, including servers, personal computers, tablets, smartphones, connected cars, Internet-of-things devices, or any other such devices. The server <b>106</b> is operated by a certificate authority (CA) and is configured to receive and respond to requests for digital certificates. Although the CA is depicted as being implemented by the server <b>106</b>, it will be understood that the CA functions may be implemented by one or more servers or other computing devices.</p><p id="p-0048" num="0047">The system <b>100</b> further includes a blockchain network <b>108</b>. The blockchain network <b>108</b> includes a network of nodes operating in accordance with an applicable blockchain protocol. In some implementations, one or more of the first computing device <b>100</b>, the second computing device <b>104</b>, and/or the server <b>106</b> may also be nodes in the blockchain network <b>108</b>, although in the present example they are depicted as being nodes separate from the blockchain network <b>108</b> for ease of explanation.</p><p id="p-0049" num="0048">In this example system <b>100</b>, the first computing device <b>102</b>, labelled &#x201c;Alice&#x201d;, has a public-private key pair for using in asymmetric cryptographic communications. To use the public key in some cryptographic scenarios, Alice may need to have a corresponding digital certificate authenticating the public key and its association with Alice. Accordingly, in operation <b>110</b>, Alice provides the public key PK<sub>A </sub>to the CA with a request for registration. The CA may engage in some level of authentication to ensure Alice's identity as owner of the public key. In some cases, this authentication may be automated online operations carried out by the server <b>106</b> based on the data provided in operation <b>110</b>. In some cases, this authentication may also or alternatively include offline authentication operations. Two-factor authentication and other such techniques may be employed.</p><p id="p-0050" num="0049">Once the CA determines that the public key PK<sub>A </sub>is to be certified, it generates a blockchain transaction, the &#x201c;certification transaction&#x201d; (CTX), that includes the public key PK<sub>A </sub>and that is signed by the CA. That certification transaction further includes an output controlled by the CA. The transaction is submitted to the blockchain network <b>108</b> as indicated by operation <b>112</b>. The CA then provides Alice with the certification transaction identifier TxID<sub>CRX_PKA </sub>in operation <b>114</b>. In some implementations, Alice may obtain a copy of the certification transaction from the blockchain network <b>108</b> based on the transaction identifier to confirm that it conforms to expectations and contains the public key PK<sub>A</sub>.</p><p id="p-0051" num="0050">The transaction identifier TxID<sub>CTX_PKA</sub>, together with the public key PK<sub>A</sub>, effectively form a digital certificate for Alice. In connection with some communication with the second communication device <b>104</b>, which in this example is labelled &#x201c;Bob&#x201d;, Alice may transmit its digital certificate to Bob in operation <b>116</b>. Bob is then able to authenticate the public key PK<sub>A </sub>and verify that the certification has not been revoked based on the blockchain maintained by the blockchain network <b>108</b>.</p><p id="p-0052" num="0051">In particular, in operations <b>118</b> and <b>120</b>, Bob may request and receive a copy of the certification transaction. From the certification transaction, Bob may verify that it contains Alice's purported public key PK<sub>A</sub>, and that it has been signed by a trusted certification authority. Bob is further able to verify that the certification has not been revoked by querying whether the transaction output controlled by the CA remains &#x201c;unspent&#x201d;, i.e. that the transaction output point is present in a UTXO pool <b>130</b> for the blockchain network <b>108</b>, as indicated by operations <b>122</b> and <b>124</b>. The UTXO pool <b>130</b> is a pool of &#x201c;unspent&#x201d; transaction output points maintained by any one of a number of nodes of the blockchain network <b>108</b>.</p><p id="p-0053" num="0052">Reference will now be made to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, which shows in flowchart form, one example method <b>200</b> for registering a public key with a certification authority. The example method <b>200</b> is implemented by an authorized certification authority, and may be implemented by one or more servers suitably programmed to carry out the functions described.</p><p id="p-0054" num="0053">In operation <b>202</b>, the certification authority receives a request from Alice for certification of a public key, PK<sub>A</sub>. The certification authority may carry out authentication or authorization protocols in accordance with its applicable policies. Those protocols may include automated computer-implemented operations and/or administrator-facilitated operations. Regardless of the specific authentication operations, in operation <b>204</b> a determination is made as to whether to certify the public key for Alice. If not, then the method <b>200</b> ends. If certification will be granted, then in operation <b>206</b> the certification authority creates a certification transaction. As noted above, the certification transaction includes an input that includes the certification authority's public key and a digital signature from the certification authority, an output controlled by the certification authority, and the public key PK<sub>A</sub>. To provide a specific example, the input may be a UTXO of some nominal or arbitrary value for which the certification authority has the private key to generate a signature in a valid unlocking script. The UTXO may be associated with sufficient digital value to offset any transaction fee due for mining the certification transaction.</p><p id="p-0055" num="0054">The certification transaction may include two outputs: a first one based on a CA public key PK<sub>CTX_PKA </sub>selected by and controlled by the certification authority, and second one that contains the public key PK<sub>A </sub>in, for example, a non-operational information field. An example of the latter is an OP_RETURN function in Bitcoin. OP_RETURN is effectively an output into which arbitrary data may be placed for recordal on the blockchain once the transaction is mined.</p><p id="p-0056" num="0055">The first output may be, for example, a P2PKH (pay to public key hash) operation specifying transfer to a public key hash (e.g. a Bitcoin address) selected and controlled by the certification authority.</p><p id="p-0057" num="0056">By way of its digital signature in the transaction, the certification authority both authorizes input of the UTXO to the transaction, thereby satisfying the unlocking script, and provides verifiable evidence that the certification authority has certified the public key PK<sub>A </sub>appearing in the OP_RETURN output. Note that in some implementations additional information may appear in the OP_RETURN output field, such as a digital signature from Alice, or other such data.</p><p id="p-0058" num="0057">Once the certification transaction has been created, the certification authority hashes the transaction to find the transaction identifier TxID<sub>CTX_PKA </sub>in operation <b>208</b> and it propagates the transaction on the blockchain network as indicated by operation <b>210</b>. It will be appreciated that &#x201c;propagating&#x201d; the transaction includes submitting it to a node of the blockchain network, where it is verified and then transmitted to all other nodes, which in turn verify and re-transmit, until the transaction has reached substantially all nodes in the network. In some embodiments, the certification authority is, itself, one of the nodes in the blockchain network.</p><p id="p-0059" num="0058">In operation <b>212</b>, the certification authority awaits mining of a block containing the certification transaction, i.e. a &#x201c;confirmation&#x201d; of the transaction, and then transmits the transaction identifier TxID<sub>CTX_PKA </sub>to Alice in operation <b>214</b>. In some implementations, the certification authority may provide the transaction identifier to Alice prior to the transaction being mined.</p><p id="p-0060" num="0059">Alice is then able to provide any third parties with a digital certificate that includes Alice's public key PK<sub>A </sub>and the certification transaction identifier TxID<sub>CTX_PKA</sub>. From this, the third party may verify that Alice's public key is certified by a CA.</p><p id="p-0061" num="0060">A simplified example of a certification transaction is shown below:</p><p id="p-0062" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="280pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Certificate Transaction - TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="147pt" align="left"/><colspec colname="2" colwidth="133pt" align="left"/><tbody valign="top"><row><entry>Input 1:</entry><entry>Output 1:</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>Outpoint (transaction id and output index): CA's</entry><entry>P2PKH (the hash of CA's public key, can be</entry></row><row><entry>unspent outpoint</entry><entry>different from CA's PK in the input)</entry></row><row><entry>Unlocking script: &#x3c; CA's Sig &#x3e; &#x3c; CA's PK &#x3e;</entry><entry>Output 2:</entry></row><row><entry>Sequence number: 0xFFFFFFFF</entry><entry>OP_RETURN PK<sub>A</sub></entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0063" num="0061">It will be noted that the unlocking script for the input includes the certification authority's public key and a signature generated by the certification authority. Alice's public key PK<sub>A </sub>appears in the OP_RETURN field as the second output. The first output is any public key hash controlled by the certification authority.</p><p id="p-0064" num="0062">Reference is now made to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, which shows one example method <b>300</b> of verifying a public key. The operations described in the example method <b>300</b> may be carried out by a computing device attempting to verify a public key purporting to be certified using the process exemplified in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Example computing devices include any network-enabled computing device.</p><p id="p-0065" num="0063">The method <b>300</b> includes, in operation <b>302</b>, receiving the digital certificate for another entity, such as the first computing device <b>102</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) labelled &#x201c;Alice&#x201d;. The digital certificate includes at least the public key PK<sub>A </sub>and the certification transaction identifier TxID<sub>CRX_PKA</sub>. Using the certification transaction identifier, the certification transaction is obtained from the blockchain network in operation <b>304</b>. It will be appreciated that the certification transaction may be obtained from a copy of the blockchain, whether that copy is local to the computing device or whether it is maintained by a node in the blockchain network. In the unlikely event that the transaction has not yet been confirmed, i.e. is not yet in a mined block, then the transaction may be present in the mempool of unconfirmed transactions; however, in many implementations the certification authority may only provide Alice with the certification transaction identifier after the certification transaction has been mined.</p><p id="p-0066" num="0064">From the certification transaction, the computing device may verify certain things. In particular, in operation <b>306</b>, the computing device may verify that the certification transaction is signed by a certification authority. The computing device may have, or have access to, a list of recognized or accredited certification authorities and their respective public keys, which may enable the computing device to validate a digital signature. The digital signature may form part of an input to the certification transaction, as described. By confirming that the certification transaction is signed by a trusted or recognized certification authority, the computing device is able to confirm that the certification is legitimate. Note that the computing device does not necessarily need to verify the digital signature in the input if the transaction is on the blockchain, because it will have been confirmed and verified by miners. Rather, the computing device may simply verify that the public key identified in the input is associated with the certification authority.</p><p id="p-0067" num="0065">The computing device may further verify that one of the output points of the certification transaction remains &#x201c;unspent&#x201d;, i.e. that output point is found in the UTXO pool, as indicated by operation <b>308</b>. This verification operation confirms that the certification remains valid and unrevoked. As discussed above, this output point is controlled by the certification authority in most embodiments (alternatives are described below), which enables the certification authority to cancel a certification if the key is compromised, expired, or otherwise no longer valid. Revocation or cancelation is easily facilitated by having the certification authority &#x201c;spend&#x201d; the output point, thereby removing it from the UTXO pool. Confirmation that the output point is present in the UTXO pool may be carried out by, for example, querying the UTXO pool based on the TxID number and an output index. In some examples, the computing device may query the UTXO pool through an intermediary, such as a node of the blockchain network.</p><p id="p-0068" num="0066">In operation <b>310</b>, the computing device confirms that the public key PK<sub>A </sub>in the second output of the certification transaction matches the public key PK<sub>A </sub>received as part of the digital certificate from Alice.</p><p id="p-0069" num="0067">If operations <b>306</b>, <b>308</b> and <b>310</b> are all confirmed, then the computing device determines that the public key PK<sub>A </sub>in the received digital certificate from Alice is valid in operation <b>312</b>.</p><p id="p-0070" num="0068">By using the blockchain network to record public key certification, certification authorities are able to quickly and easily revoke a certification by &#x201c;spending&#x201d; the output point, such that the verification at operation <b>308</b> fails. Accordingly, a certification authority may revoke certification of a public key by generating and propagating a transaction that uses the first output of the certification transactions. As discussed above, the first output may be a P2PKH operation that transfers a nominal digital asset to the public key hash address specified in the first output. The unlocking script for that first output may, in these examples, require a digital signature from the certification authority, which requires control over the private key corresponding to the CA public key PK<sub>CTX_PKA </sub>used in the P2PKH operation.</p><p id="p-0071" num="0069">In some cases, the certification authority may not simply revoke a certification, but may be asked to replace/update a certified public key. For example, if the private key is lost or compromised, then the owner (e.g. Alice) may request that the certification authority update or replace the previously-certified public key with a new public key PK<sub>A_new</sub>. The certification authority authenticates the request using whatever online or offline authentication mechanisms are in place and, if it determines that the update operation is to occur, then it creates a new certification transaction CTX<sub>new </sub>to both revoke the old certification and issue a new certification.</p><p id="p-0072" num="0070">The new certification transaction features the same types of outputs, i.e. a P2PKH operation using a new public key selected by the CA, such as PK<sub>CTX_new</sub>, and an OP_RETURN field containing PK<sub>A_new</sub>. However, the input may include the CA-controlled output point from the original certification transaction TxID<sub>CTX_PKA</sub>. By &#x201c;spending&#x201d; that output as the input to the new certification transaction, the revocation is effected by removing that output point from the UXTO pool. Advantageously, the revocation of the old public key certification and the registration of the new public key certification occur in a single transaction. Moreover, no separate periodically published list of certificate revocations needs to be maintained and made available by the certification authority.</p><p id="p-0073" num="0071">As mentioned above, in many cases the first output point of a certification transaction may be controlled by a certification authority, such that only the certification authority is able to revoke the certification of the public key. Revocation is based on &#x201c;spending&#x201d; the first output point using the private key corresponding to that output point. In some cases, however, it may be advantageous to structure the certification transaction to permit other entities to revoke the certification.</p><p id="p-0074" num="0072">For example, in some situations the owner of the public key, e.g. Alice, may have the authority to revoke its own public key. In this arrangement, the first output point in the certificate transaction is controlled by Alice, i.e. references a public key (public key hash) for which Alice has the corresponding private key. That is, the unlocking script for the first output point requires a digital signature from Alice. This arrangement may be advantageous for some public key certification scenarios, such as registration with an online service. One example of an online service is a social media account on a social media platform. The platform may use the above-described mechanism to register a user's public key for use with the platform, enabling the user to interact with the platform and/or other users of the platform on a trusted basis due to their digital certificate backed up via the certification transaction. The user is then able to revoke the certification so as to terminate their account without cooperation of the platform.</p><p id="p-0075" num="0073">In another scenario, more than one output point may be provided either one of which may be &#x201c;spent&#x201d; so as to terminate the certification. In such a scenario, third parties are configured to test both (or all) such output points of a certification transaction for their presence as unspent transaction outputs in the UTXO pool.</p><p id="p-0076" num="0074">Alternatively, if revocation from any one of multiple parties is to be facilitated, then the first output may be configured to use multiple signatures, i.e. where any one of a number of signatures may be used to &#x201c;spend&#x201d; the output. For this purpose, Multi-sig may be used in the output.</p><p id="p-0077" num="0075">In yet another scenario, multi-sig may be configured to ensure that at least a threshold number of entities agree to revoke the certification. Multi-sig may be configured to require n out of m signatures to unlock an output, wherein n&#x2264;m. As an example, in the case of an organization, such as a business, partnership or other such collection of individuals, a certified public key associated with the organization may be revocable only if all or at least a threshold number of certain entities sign off on the revocation, such as the CEO, COO, CTO, or other executives or individuals involved in the business.</p><p id="p-0078" num="0076">It will be appreciated that it may be that some or all of the above-described operations of the various above-described example methods may be performed in orders other than those illustrated and/or may be performed concurrently without varying the overall operation of those methods.</p><heading id="h-0006" level="2">Automated Certification Verification</heading><p id="p-0079" num="0077">The above-described methods provide mechanisms for issuing digital certificates secured by a blockchain network. The mechanisms enable fast verification of validity of a digital certificate and the ability for near instantaneous revocation of a digital certificate. As noted above, to verify the validity of a digital certificate, the node seeking validation of the certificate checks to see whether an outpoint of the certificate transaction is in the UTXO set, and that the public key in the digital certificate being validated matches the public key in the OP_RETURN field of the certificate transaction.</p><p id="p-0080" num="0078">One potential drawback of the described method is that there may be a time delay between verification of the digital certificate and any subsequent transaction that relies upon that verification. During that interval, it is possible that the digital certificate is revoked for some reason. Moreover, verification of the digital certificate relies on accessing and checking the UXTO set, which may be difficult or impossible for some nodes, like lightweight simplified payment verification (SPV) nodes (e.g. digital wallets). This may require those nodes to rely on a third-party node to do the verification for them, which creates security and reliability concerns. Moreover, the node verifying that the outpoint is in the UXTO set must be online with active access to the blockchain network, which many nodes, like lightweight SPVs may not have at certain times.</p><p id="p-0081" num="0079">In accordance with another aspect of the present application, validation of the digital certificate may be incorporated into a transaction such that the transaction only goes forward if the digital certificate is valid. This enables lightweight SPVs and similar nodes to collaborate with other nodes in generating transactions that incorporate automatic digital certificate validation. Advantageously, this may eliminate the gap in time between digital certificate validation and reliance on that validation in committing to a transaction.</p><p id="p-0082" num="0080">In some of the examples below, a node may have its public key certified by a certification authority node in the form of a certification transaction, which may take the form of this example:</p><p id="p-0083" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Certification Transaction - TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="center"/><colspec colname="2" colwidth="147pt" align="center"/><tbody valign="top"><row><entry>Inputs:</entry><entry>Outputs:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="119pt" align="left"/><tbody valign="top"><row><entry>Outpoint</entry><entry>Unlocking Script</entry><entry>Value</entry><entry>Locking Script</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>TXID<sub>CA</sub></entry><entry>&#x3c; SIG<sub>CA </sub>&#x3e; &#x3c; PK<sub>CA </sub>&#x3e;</entry><entry>x BSV</entry><entry>OP_DUP OP_HASH160 &#x3c; PK<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e;</entry></row><row><entry/><entry/><entry/><entry>OP_EQUALVERIFY OP_CHECKSIG</entry></row><row><entry/><entry/><entry>0 BSV</entry><entry>OP_RETURN &#x3c; Cert &#x3c;&#x3c; PK<sub>A </sub>&#x3e;&#x3e; &#x3e;</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0084" num="0081">The above example is a certification transaction certifying node A's public key PK<sub>A</sub>. It will be noted that the OP_RETURN output contains the certificate for public key PK<sub>A</sub>. In some examples, this may simply be the public key itself. In some cases, it may be a hash of the public key. In some cases additional data may be included with the public key in the certificate contained in the OP_RETURN output.</p><p id="p-0085" num="0082">It will also be noted that the input is a transaction outpoint controlled by the certification authority and that its unlocking script is signed by the certification authority. The output is a pay-to-public-key-hash (P2PKH) to a certification transaction public key, The PK<sub>CTX</sub><sub><sub2>A</sub2></sub>. The public key PK<sub>CTX</sub><sub><sub2>A </sub2></sub>has a corresponding private key. The private key may be generated by the certification authority at the time of creation of the certification transaction in some cases. The certification authority may share the private key with node A. That is, when node A requests certification of its public key PK<sub>A</sub>, the certification authority may return the transaction identifier TXID<sub>CTX-PK</sub><sub><sub2>A </sub2></sub>for the certification transaction and the private key enabling use of the certification transaction.</p><p id="p-0086" num="0083">Such a certificate may be invalidated or revoked by use of the outpoint in a subsequent transaction, which involves a signature using the private key corresponding to certification transaction public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub>. The certification authority node and node A are both in possession of this key in this example.</p><p id="p-0087" num="0084">As noted above, the certification transaction may be used to automate verification of a digital certificate. In particular, the automation is in the checking of the UXTO set. A new transaction, such as a payment transaction for example, includes as a pre-condition that the outpoint of the certification transaction be present in the UXTO set. This ensures that the new transaction is only valid if the certificate is still valid and has not been revoked.</p><p id="p-0088" num="0085">In general, a node (e.g. Alice) that has a digital certificate certifying its public key generates a transaction template that includes, as an input, the outpoint of the certificate. The input is signed with a certification transaction key, e.g. using the private key corresponding to the P2PKH output of the certification transaction. This transaction template is provided to another node (e.g. Bob) participating in the transaction. The other node, Bob, obtains the certification transaction based on the reference to the TXID for the certification transaction in an input to the transaction template, verifies that the purported public key, PK<sub>A</sub>, is in fact certified by the certification transaction, and adds whatever inputs/outputs complete the transaction template. The transaction template may then be propagated on the blockchain network. If the input signed by the certification transaction key fails because the output has already been used in another transaction, i.e. it is not in the UTXO set, then the whole transaction fails and will not be propagated or mined. If the input signed by the certification transaction key is valid because it is in the UTXO set, then the transaction will be validated, propagated, and will go into the mempool and, eventually, into a mined block.</p><p id="p-0089" num="0086">In one example, this mechanism may be used to verify a receiver's address. For example, in a situation in which Alice requests a digital asset or some other transfer from Bob, Bob may wish to validate Alice's identity, e.g. that her purported public key is certified, prior to committing to such a transaction. In such a situation, Alice may prepare a transaction template that includes payment to her public key with an input referencing a certification transaction for that public key. On receiving the transaction template, Bob may retrieve the certification transaction from the blockchain, verify that it certifies Alice's public key, and confirm that it is digitally signed by a certification authority. Bob may then add an input to the transaction template transferring the digital asset, and the transaction template may then be propagated on the blockchain. Provided that Alice's digital certificate is still valid, i.e. it has not been revoked, then the transaction will proceed. An example of such a transaction is below:</p><p id="p-0090" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>TXID<sub>verifyreceiver</sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="133pt" align="center"/><colspec colname="2" colwidth="126pt" align="center"/><tbody valign="top"><row><entry>Inputs:</entry><entry>Outputs:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="84pt" align="left"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>Outpoint</entry><entry>Unlocking Script</entry><entry>Value</entry><entry>Locking Script</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub></entry><entry>&#x3c; SIG<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e; &#x3c; PK<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e;</entry><entry>y BSV</entry><entry>OP_DUP OP_HASH160</entry></row><row><entry/><entry/><entry/><entry>&#x3c; PK<sub>A </sub>&#x3e; OP_EQUALVERIFY</entry></row><row><entry/><entry/><entry/><entry>OP_CHECKSIG</entry></row><row><entry>TXID<sub>Bob</sub></entry><entry>&#x3c; SIG<sub>B </sub>&#x3e; &#x3c; PK<sub>B </sub>&#x3e;</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0091" num="0087">In the above example transaction, Bob may rely on the fact that the transaction will be rejected as invalid if the referenced outpoint from TXID<sub>CTX-PK</sub><sub><sub2>A </sub2></sub>is not in the UXTO set as an unspent transaction output.</p><p id="p-0092" num="0088">In another example, this mechanism may be used to verify a sender's address, such as to comply with Know Your Customer (KYC) conditions. For example, Alice may be transferring an asset to Bob and Bob wishes to verify Alice's identity before accepting the transfer. In this case, Alice prepares a transaction template that includes an input transferring the digital asset and signed in association with her public key PK<sub>A</sub>. It also includes the certification transaction certifying that public key as an input. On receiving the transaction template, Bob may obtain the certification transaction, verify it is signed by a certification authority, and verify that it certifies Alice's public key. If so, then Bob completes the transaction template by adding an output to transfer the digital asset to a public key address controlled by Bob. Such an example transaction may take the following form:</p><p id="p-0093" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>TXID<sub>verifysender</sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="133pt" align="center"/><colspec colname="2" colwidth="126pt" align="center"/><tbody valign="top"><row><entry>Inputs:</entry><entry>Outputs:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="84pt" align="left"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>Outpoint</entry><entry>Unlocking Script</entry><entry>Value</entry><entry>Locking Script</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub></entry><entry>&#x3c; SIG<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e; &#x3c; PK<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e;</entry><entry>y BSV</entry><entry>OP_DUP OP_HASH160</entry></row><row><entry/><entry/><entry/><entry>&#x3c; PK<sub>B </sub>&#x3e; OP_EQUALVERIFY</entry></row><row><entry/><entry/><entry/><entry>OP_CHECKSIG</entry></row><row><entry>TXID<sub>Alice</sub></entry><entry>&#x3c; SIG<sub>A </sub>&#x3e; &#x3c; PK<sub>A </sub>&#x3e;</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0094" num="0089">It will be appreciated that in each of the two above-detailed examples, as soon as the digital certificate is used in a transaction to prove validity of a public key it is then invalid. That is, the certificate may only be used once and is automatically revoked once used. This may find application in some instances, such as for single-occasion large value transfers of assets to a verified address or from a verified address. Such a transaction may be used in the case of automobile transfers, real estate transactions, share sales, or other such high-value transfers. However, for smaller value everyday transactions, it may be cumbersome to return to the certification authority for a new certificate every time one is used. Accordingly, multiple use certificates may be constructed, as will be described later below.</p><p id="p-0095" num="0090">Reference will first be made to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, which shows, in flowchart form, one example method <b>400</b> of validating a certificate associated with a first node. The method may be implemented by computing devices, such as mobile phones, tablets, personal computers, or the like. The computing devices includes one or more processor units and associated memory storing computer executable instructions that, when executed by the processing units, cause the processing units to carry out the described operations. In some cases, the computer executable instructions may be stored in the form of an application, such as a wallet application for example.</p><p id="p-0096" num="0091">The method <b>400</b> provides an example of automated certificate verification for verifying the identity of a recipient. In this example transaction, node A is a recipient and node B is a sender. The nodes may communicate over wired and/or wireless networks. In some cases, the nodes may communicate using near-field communications, for example via a point-of-sale terminal. The method <b>400</b> begins with node A creating a transaction template in operation <b>402</b>. The transaction template includes an input that references a certification transaction output from a certification transaction certifying the identity of node A, e.g. certifying node A's public key PK<sub>A</sub>. The output in the certification transaction is a pay-to-public-key operation referencing a certification transaction public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub>. The corresponding private key may be referred to as a certification transaction key. The input to the transaction template is signed by the certification transaction key generating a signature, SIG<sub>CTX</sub><sub><sub2>A</sub2></sub>. The transaction template also includes an output transferring resources to node A's public key, PK<sub>A</sub>.</p><p id="p-0097" num="0092">As indicated by operation <b>404</b>, node A sends this transaction template to node B. The transaction template does not yet contain an input from node B and/or if an input is included it is not signed by node B.</p><p id="p-0098" num="0093">On receiving the transaction template, in operation <b>406</b> node B identifies the certification transaction based on the reference to it in the input to the transaction template. Because the reference includes the transaction identifier for the certification transaction, node B is able to retrieve a copy of the certification transaction. If node B stores a local copy of the blockchain, it may obtain the certification transaction by it looking up in the local copy. If not, then node B may sends a query or request to a blockchain node for a copy of the certification transaction based on the transaction identifier. In some instances, this verification may be done as a proof of existence of the certification transaction. That is, if node B is provided with a copy of the certification transaction and the Merkle proof (Merkle path), then it may verify from block headers that the certification transaction exists in the blockchain. An SPV node or other lightweight implementation may have a copy of block headers available to it, even offline, which may enable node B to verify the existence and content of the certification transaction without necessarily requiring live access to the blockchain network. Accordingly, node A may provide node B with the copy of the certification transaction and its Merkle path together with the transaction template.</p><p id="p-0099" num="0094">Once node B has a copy of the certification transaction, in operation <b>408</b> it verifies that the certification transaction is signed by a certification authority using a certification authority key. It also verifies that node A's public key, PK<sub>A</sub>, appears in the OP_RETURN output field of the certification transaction, thereby confirming that the certification authority has certified the authenticity of node A's public key. Node B may further validate the structure of the certification transaction and, in particular, that it includes a pay-to-public-key output referencing the certification transaction public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub>, consistent with the input to the transaction template.</p><p id="p-0100" num="0095">It will be appreciated that if these checks fail, e.g. if node A's public key cannot be verified as certified or if the certification transaction is not structured as expected, then the method <b>400</b> will end since node B will not complete the transaction. However, assuming that node B verifies the certification transaction is valid, then in operation <b>410</b>, it modifies the transaction template to add an input from an address controlled by node B. That is, node B adds a resource input to the transaction template and signs the input. This completes the transaction template, and node B may then propagate it on the blockchain network. Alternatively, node B may send the completed transaction template to node A, which may propagate it on the blockchain network.</p><p id="p-0101" num="0096">In either case, one of two things will occur, as indicated by operation <b>412</b>. If the certification transaction output to PK<sub>CTX</sub><sub><sub2>A </sub2></sub>is contained in the UTXO set, i.e. itis an unspent output, then the transaction will be validated by nodes in the blockchain network, will be propagated across the network, and will be added to the mempool of unconfirmed transactions to be mined and included in a block, as shown by operation <b>414</b>. If, however, the certification transaction output to PK<sub>CTX</sub><sub><sub2>A </sub2></sub>is not in the UTXO set, e.g. because the certificate has already been used or has been revoked, then the transaction will not be validated, will not be propagated, and will be rejected by the blockchain network, as shown by operation <b>416</b>. In this manner, the transaction between node A and node B only takes place if node A's certificate is valid at the time the transaction is committed to the blockchain network. Accordingly, there is no gap in time between validation of the certificate and reliance upon that validation in entering a transaction.</p><p id="p-0102" num="0097">Reference will now be made to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, which shows, in flowchart form, another example method <b>500</b> of automatically validating a digital certificate. As with <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the method <b>500</b> shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be carried out by computing devices implementing a first node, node A, and a second node, node B. In the example of method <b>500</b>, a transaction is generated to transfer resources from node A to node B. Node B seeks to validate node A's identity before accepting transfer of the resources, e.g., as part of a &#x201c;know-your-customer&#x201d; or anti-fraud record-keeping requirement, for example.</p><p id="p-0103" num="0098">Node A creates the transaction template in operation <b>502</b> and includes an input referencing a certification transaction output from a certification transaction that certifies node A's public key. The input is signed by node A using the certification transaction key corresponding to the certification transaction public key referenced in the certification transaction output. Node A also adds an input transferring resources from its certified public key, PK<sub>A</sub>. In operation <b>504</b>, node A sends the transaction template to node B.</p><p id="p-0104" num="0099">In operation <b>506</b>, Node B retrieves a copy of the certification transaction from the blockchain, whether it is stored locally or remotely. The certification transaction is identified by a transaction identifier referenced in the input to the transaction template.</p><p id="p-0105" num="0100">In operation <b>508</b>, node B verifies that the certification transaction is signed by a certification authority using a certification authority key. It also verifies that node A's public key, PK<sub>A</sub>, appears in the OP_RETURN output field of the certification transaction, thereby confirming that the certification authority has certified the authenticity of node A's public key. Node B may further validate the structure of the certification transaction and, in particular, that it includes a pay-to-public-key output referencing the certification transaction public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub>, consistent with the input to the transaction template.</p><p id="p-0106" num="0101">It will be appreciated that if these checks fail, e.g. if node A's public key cannot be verified as certified or if the certification transaction is not structured as expected, then the method <b>500</b> will end since node B will not complete the transaction. However, assuming that node B verifies the certification transaction is valid, then in operation <b>510</b>, it may modify the transaction template to add an output to an address controlled by node B. In some cases, node A may have already added an output to transfer resources to node B, in which case node B need only verify that the output is correct in operation <b>510</b>. This completes the transaction template, and node B may then propagate it on the blockchain network. Alternatively, node B may send the completed transaction template to node A, which may propagate it on the blockchain network.</p><p id="p-0107" num="0102">After the transaction is sent to a node of the blockchain network one of two things will occur, as indicated by operation <b>512</b>. If the certification transaction output to PK<sub>CTX</sub><sub><sub2>A </sub2></sub>is contained in the UTXO set, i.e. it is an unspent output, then the transaction will be validated by nodes in the blockchain network, will be propagated across the network, and will be added to the mempool of unconfirmed transactions to be mined and included in a block, as shown by operation <b>514</b>. If, however, the certification transaction output to PK<sub>CTX</sub><sub><sub2>A </sub2></sub>is not in the UTXO set, e.g. because the certificate has already been used or has been revoked, then the transaction will not be validated, will not be propagated, and will be rejected by the blockchain network, as shown by operation <b>516</b>. In this manner, the transaction between node A and node B only takes place if node A's certificate is valid at the time the transaction is committed to the blockchain network. Accordingly, there is no gap in time between validation of the certificate and reliance upon that validation in entering a transaction.</p><heading id="h-0007" level="2">Multiple-Use Certificates</heading><p id="p-0108" num="0103">As mentioned earlier, in the examples discussed above it assumed that once the digital certificate is used in a transaction to prove validity of a public key it is then invalid, since the certification transaction output would then have been &#x201c;spent&#x201d;. That is, the certificate may only be used once and is automatically revoked once it is used. It may be desirable in some situations to have a certificate that may be used multiple times without requiring that the node obtain a fresh certificate from a certification authority after every use.</p><p id="p-0109" num="0104">In one example, a multiple-use certificate may be created by providing the certificate transaction with a plurality of certification transaction outputs. The certification transaction may be structured to provide m possible uses. Each output may be used once in a verification operation. Once each output is &#x201c;spent&#x201d; it is no longer available. An example of such a certificate transaction is provided below:</p><p id="p-0110" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Certification Transaction - TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub><sub>-Multi</sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="105pt" align="center"/><colspec colname="2" colwidth="154pt" align="center"/><tbody valign="top"><row><entry>Inputs:</entry><entry>Outputs:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="126pt" align="left"/><tbody valign="top"><row><entry>Outpoint</entry><entry>Unlocking Script</entry><entry>Value</entry><entry>Locking Script</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>TXID<sub>CA</sub></entry><entry>&#x3c; SIG<sub>CA </sub>&#x3e; &#x3c; PK<sub>CA </sub>&#x3e;</entry><entry>x<sub>1 </sub>BSV</entry><entry>OP_DUP OP_HASH160 &#x3c; PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sup>(1) </sup>&#x3e;</entry></row><row><entry/><entry/><entry/><entry>OP_EQUALVERIFY OP_CHECKSIG</entry></row><row><entry/><entry/><entry>x<sub>2 </sub>BSV</entry><entry>OP_DUP OP_HASH160 &#x3c; PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sup>(2) </sup>&#x3e;</entry></row><row><entry/><entry/><entry/><entry>OP_EQUALVERIFY OP_CHECKSIG</entry></row><row><entry/><entry/><entry>.</entry><entry>.</entry></row><row><entry/><entry/><entry>.</entry><entry>.</entry></row><row><entry/><entry/><entry>.</entry><entry>.</entry></row><row><entry/><entry/><entry>x<sub>m </sub>BSV</entry><entry>OP_DUP OP_HASH160 &#x3c; PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sup>(m) </sup>&#x3e;</entry></row><row><entry/><entry/><entry/><entry>OP_EQUALVERIFY OP_CHECKSIG</entry></row><row><entry/><entry/><entry>0 BSV</entry><entry>OP_RETURN &#x3c; Cert &#x3c;&#x3c; PK<sub>A </sub>&#x3e;&#x3e; &#x3e;</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0111" num="0105">The public keys PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sup>(i) </sup>may be the same public key, may be different public keys that are completely independent of each other, or may be different public keys that are provably linked to each other. When node A uses this certification transaction in a transaction template, such as those given as examples above, node A ensures that the certification transaction output referenced as an outpoint in the transaction template is one of the m outputs that has not yet been used.</p><p id="p-0112" num="0106">Node A may revoke its own certificate by submitting a transaction that spends all of the remaining unspent transaction outputs of the certificate. A certification authority may do the same to revoke the certificate; however, if the certification authority does not have trusted awareness of which of the outputs in the certification transaction are already spent then it will submit a separate transaction for each output to ensure revocation of the certificate.</p><p id="p-0113" num="0107">The above example multiple-use certificate is advantageous in that it may be used by node A up to m times; however, after all the outputs have been exhausted then node A must obtain a new certificate from a certification authority. In another example, the certificate verification process may be constructed so that each verification further produces a new outpoint linked to the certificate transaction, thereby building a chain of transactions that leads back to the original certification transaction.</p><p id="p-0114" num="0108">In one example implementation, if the certification authority does not need the ability to revoke a certificate, then a certificate in the form described above may be used. Each time that node A uses the certificate in a transaction, it ensures that the transaction generates a new pay-to-public-key output that it then uses as the certification transaction output in any subsequent transaction in which it uses its certificate.</p><p id="p-0115" num="0109">In another example implementation, to ensure that the certification authority is able to revoke the certificate, the certification transaction, and each subsequent transaction in the chain, uses a multi-sig output. The multi-sig output allows for a 1-of-2 signature to unlock the output, and it includes public keys for both the certification authority and node A. One illustrative example is shown below:</p><p id="p-0116" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Certification Transaction - TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub><sub>-linked</sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="center"/><colspec colname="2" colwidth="147pt" align="center"/><tbody valign="top"><row><entry>Inputs:</entry><entry>Outputs:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="112pt" align="left"/><tbody valign="top"><row><entry>Outpoint</entry><entry>Unlocking Script</entry><entry>Value</entry><entry>Locking Script</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>TXID<sub>CA</sub></entry><entry>&#x3c; SIG<sub>CA </sub>&#x3e; &#x3c; PK<sub>CA </sub>&#x3e;</entry><entry>x BSV</entry><entry>OP_1 &#x3c; PK<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e;&#x3c; PK<sub>CA </sub>&#x3e; OP_2</entry></row><row><entry/><entry/><entry/><entry>OP_CHECKMULTISIG</entry></row><row><entry/><entry/><entry>0 BSV</entry><entry>OP_RETURN &#x3c; Cert &#x3c;&#x3c; PK<sub>A </sub>&#x3e;&#x3e; &#x3e;</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0117" num="0110">It will be appreciated that the holder of the certification transaction key corresponding to the certification transaction public key PK<sub>CTX</sub><sub><sub2>A </sub2></sub>is able to use the output in a verification or revocation transaction. That key is held by node A. It will further be appreciated that the certification authority has the ability to revoke the key by virtue of it having the private key corresponding to its public key PK<sub>CA</sub>.</p><p id="p-0118" num="0111">To use the certificate, node A creates a transaction template that includes a 1-of-2 multi-sig output that references both the certification authority and a new certification transaction key PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-new</sub>. In this manner, the transaction in which the certification transaction is used becomes the next transaction in a chain of transactions linked back to the certification transaction.</p><p id="p-0119" num="0112">As an example, consider that node A enters into a transaction with node B in which node B transfers resources to node A, and node A proves the validity of its public key using its digital certificate. Such a transaction may take the form:</p><p id="p-0120" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="266pt" align="center"/><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub><sub>-new-Linked</sub></entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="center"/><colspec colname="2" colwidth="154pt" align="center"/><tbody valign="top"><row><entry>Inputs:</entry><entry>Outputs:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="63pt" align="left"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="126pt" align="left"/><tbody valign="top"><row><entry>Outpoint</entry><entry>Unlocking Script</entry><entry>Value</entry><entry>Locking Script</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>TXID<sub>Bob</sub></entry><entry>&#x3c; SIG<sub>B </sub>&#x3e; &#x3c; PK<sub>B </sub>&#x3e;</entry><entry>y BSV</entry><entry>OP_DUP OP_HASH160 &#x3c; PK<sub>A </sub>&#x3e;</entry></row><row><entry/><entry/><entry/><entry>OP_EQUALVERIFY OP_CHECKSIG</entry></row><row><entry>TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub></entry><entry>OP_0 &#x3c; SIG<sub>CTX</sub><sub><sub2>A </sub2></sub>&#x3e;</entry><entry>z BSV</entry><entry>OP_1 &#x3c; PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-new </sub>&#x3e;&#x3c; PK<sub>CA </sub>&#x3e; OP_2</entry></row><row><entry/><entry/><entry/><entry>OP_CHECKMULTISIG</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0121" num="0113">In the above example transaction it will be noted that one of the inputs is from a public key PK<sub>B </sub>controlled by node B. This input is added to the transaction template by node B after node B confirms the structure of the transaction template is valid and the certificate for node A is verified.</p><p id="p-0122" num="0114">The transaction is structured to transfer resources y BSV to public key PK<sub>A</sub>, as indicated by the first outpoint. Another input references the certification transaction output PK<sub>CTX</sub><sub><sub2>A</sub2></sub>. From this input, node B is able to identify the certification transaction TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub>, retrieve a copy of that certification transaction and confirm that it certifies node A's public key PK<sub>A </sub>and is signed by a certification authority. Node B is further able to confirm that the certification transaction, and any subsequent transactions in the chain, each contain a certification transaction output that is a 1-of-2 multi-sig output with the certification authority as one of the possible signatories. That is, that the certification authority has the ability to revoke certification.</p><p id="p-0123" num="0115">Node B may optionally further evaluate whether node A has properly structured the certification transaction output in the current transaction template to provide node A with a renewed certification key and to enable the certification authority to revoke the certification if needed; however, node B does not necessarily need to confirm this in order to proceed with the transaction.</p><p id="p-0124" num="0116">After the above-described transaction is submitted to the blockchain network, node A may subsequently prove its identity using the new linked public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-new</sub>. For example, in a subsequent transaction with node C, node A may provide a transaction template that includes as an input a reference to the certification transaction output via the new linked public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-new </sub>and transaction identifier TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub><sub>-new-Linked</sub>. Node C retrieves the linked transaction TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub><sub>-new-Linked </sub>and confirms that the outpoint referenced is a 1-of-2 multi-sig output operation for which the authorized signatories are the new linked public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-new </sub>and the certification authority public key PK<sub>CA</sub>. Node C then identifies the input certification transaction identifier TXID<sub>CTX-PK</sub><sub><sub2>A</sub2></sub>, retrieves a copy of the certification transaction, confirms that it is signed by the certification authority, that it certifies public key PK<sub>A</sub>, and that the certification transaction output is a 1-of-2 multi-sig output operation for which the authorized signatories are the certification transaction public key PK<sub>CTX</sub><sub><sub2>A </sub2></sub>and the certification authority public key PK<sub>CA</sub>.</p><p id="p-0125" num="0117">Subsequent transactions involving node A's certification are carried out in the same manner, with the other node tracing back through the series of linked transactions to ensure that their certification transaction outputs are structured correctly until it reaches the original certification transaction.</p><p id="p-0126" num="0118">Reference will now be made to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, which shows, in flowchart form, a portion of a method <b>600</b> for validating a digital certificate using linked transactions. The method <b>600</b> provides an example of automated certificate verification for verifying the identity of a recipient. In this example transaction, node A is a recipient and node B is a sender. The method <b>600</b> begins with node A creating a transaction template in operation <b>602</b>. In this example, the transaction template includes an input that references a certification transaction output from the last transaction in a series of linked certification transactions that trace back to an original certification transaction verifying the identity of node A, e.g. certifying node A's public key PK<sub>A</sub>. The output in the last certification transaction is a pay-to-public-key operation referencing a certification transaction public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-current</sub>. The corresponding private key may be referred to as a current certification transaction key. The input to the transaction template is signed by the current certification transaction key generating a signature, SIG<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-current</sub>. The transaction template also includes an output transferring resources to node A's public key, PK<sub>A</sub>.</p><p id="p-0127" num="0119">Node A sends this transaction template to node B in operation <b>604</b>. The transaction template does not yet contain an input from node B and/or if an input is included it is not signed by node B.</p><p id="p-0128" num="0120">In operation <b>606</b>, having received the transaction template, node B then obtains a copy of the transaction referenced in the input to the transaction template. The transaction may be the original certification transaction if node A has never used its certificate before, or it may be a linked certification transaction. In operation <b>608</b>, node B assesses whether it is the original certification transaction. The original certification transaction contains an OP_RETURN output containing the certificate for PK<sub>A</sub>, whereas a linked certification transaction contains two or more signed inputs referencing an earlier transaction outpoint, one of which is the previous certification transaction and the other of which may be input resources to the linked certification transaction. If node B determines that the retrieved transaction is a linked certification transaction and not the original certification transaction, then in operation <b>610</b> it determines whether the outpoint referenced is validly structured. For example, it may assess whether the outpoint includes a 1-of-2 multi-sig operation that includes the referenced certification public key, e.g. PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-current </sub>or PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-linked</sub>, and a certification authority public key, e.g. PK<sub>CA</sub>. If the retrieved transaction does not have a referenced outpoint that is structured correctly, then node B may reject the transaction as it cannot verify node A's public key. However, if it is structured correctly, then the method <b>600</b> returns to operation <b>606</b> to obtain the previous transaction in the linked series based on the inputs in the retrieved transaction. The method <b>600</b> continues with tracing back through linked transactions, confirming at each step that the referenced outpoints are properly formatted to enable certification authority revocation, until the original certification transaction is identified in operation <b>608</b>.</p><p id="p-0129" num="0121">Once the original certification transaction is identified, then in operation <b>612</b> node B verifies that the certification transaction is signed by a certification authority using a certification authority key. It also verifies that node A's public key, PK<sub>A</sub>, appears in the OP_RETURN output field of the certification transaction, thereby confirming that the certification authority has certified the authenticity of node A's public key. It may further verify that the certification transaction output is a 1-of-2 multi-sig output to certification transaction public key PK<sub>CTX</sub><sub><sub2>A </sub2></sub>and certification authority public key PK<sub>CA</sub>.</p><p id="p-0130" num="0122">If node B is satisfied that the original certification transaction is valid, then in operation <b>614</b> it adds an input to the transaction template to supply the resources being transferred to node A's public key PK<sub>A</sub>. It then submits the completed transaction template to the blockchain network in operation <b>614</b>, and as indicated by operation <b>616</b>, if the certification transaction output to certification transaction public key PK<sub>CTX</sub><sub><sub2>A</sub2></sub><sub>-current </sub>in the latest certification transaction in the series is still valid, i.e. still an unspent outpoint in the UXTO set, then the transaction is processed in operation <b>618</b>. Otherwise, it is rejected by the blockchain network as invalid in operation <b>620</b>.</p><p id="p-0131" num="0123">In one implementation, the value transferred to each certification transaction output in the series of certification transaction outputs may be fixed value x that the verifying node confirms when it evaluates the form and content of each transaction in the series. In another implementation, to put a cap on the number of times a certification may be reused, the value may start with a fixed amount in the original certification transaction and may be decremented by a certain amount with each use, such that at some point no further renewals may occur. The amount decremented may match a transaction fee amount, in some implementations.</p><p id="p-0132" num="0124">It will be appreciated that the certification authority may revoke this certificate by identifying the latest transaction in the series of certification transactions and using the certification authority's key to spend the 1-of-2 multi-sig output.</p><p id="p-0133" num="0125">Reference is now made to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, which shows, in block diagram form, a simplified computing device <b>700</b>, in accordance with an example of the present application. The computing device <b>700</b> may carry out one or more of the above-described functions. In this sense it may serve as the first computing device <b>102</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>), the second computing device <b>104</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>), or the server <b>106</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) in some implementations.</p><p id="p-0134" num="0126">The computing device <b>700</b> includes a processor <b>702</b>, which may include one or more microprocessors, application specific integrated circuits (ASICs), microcontrollers, or similar computer processing devices. The computing device <b>700</b> may further include memory <b>704</b>, which may include persistent and non-persistent memory, to store values, variables, and in some instances processor-executable program instructions, and a network interface <b>706</b>.</p><p id="p-0135" num="0127">The computing device <b>700</b> may include a processor-executable application <b>708</b> containing processor-executable instructions that, when executed, cause the processor <b>702</b> to carry out one or more of the functions or operations described herein.</p><p id="p-0136" num="0128">The various embodiments presented above are merely examples and are in no way meant to limit the scope of this application. Variations of the innovations described herein will be apparent to persons of ordinary skill in the art, such variations being within the intended scope of the present application. In particular, features from one or more of the above-described example embodiments may be selected to create alternative example embodiments including a sub-combination of features which may not be explicitly described above. In addition, features from one or more of the above-described example embodiments may be selected and combined to create alternative example embodiments including a combination of features which may not be explicitly described above. Features suitable for such combinations and sub-combinations would be readily apparent to persons skilled in the art upon review of the present application as a whole. The subject matter described herein and in the recited claims intends to cover and embrace all suitable changes in technology.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method of validating a certificate associated with a first node, the method comprising:<claim-text>receiving a transaction template from the first node, the transaction template containing a first input that references a certification transaction output and is signed by a certification transaction key;</claim-text><claim-text>obtaining a copy of a certification transaction and determining that the certification transaction includes the certificate associated with the first node and that the certification transaction is signed by a certification authority key; and</claim-text><claim-text>propagating the transaction template on a blockchain network, wherein the transaction template propagated includes a second input transferring resources to an output address,</claim-text><claim-text>and whereby the transaction template is to be validated by nodes on the blockchain network if the certification transaction output is contained within an unspent transaction output set.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the transaction template includes an input from a first public key associated with the first node, and wherein the certificate includes the first public key.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein propagating includes adding, to the transaction template prior to propagation, an output to a second public key associated with a second node.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the transaction template includes an output to a first public key associated with the first node, and wherein the certificate includes the first public key.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein propagating includes adding, to the transaction template prior to propagation, an input from a second public key associated with a second node.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the certification transaction output includes a pay-to-public-key output in the certification transaction.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the certification transaction output is one of a plurality of pay-to-public-key outputs in the certification transaction, and wherein each of the pay-to-public-key outputs in the certification transaction involves a different respective public key.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining includes identifying a last transaction in a series of linked transactions based on the last transaction containing the certification transaction output, and tracing through the series of linked transactions to identify the certification transaction.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein obtaining further includes verifying that the certification transaction output is a multi-signature output for which a permitted signatory includes the certification authority key.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the unspent transaction output set includes all transaction outputs not yet utilized as an input to a further transaction, and wherein the unspent transaction output set is maintained by the blockchain network.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the certification transaction output is in a transaction having a transaction identifier, and wherein the first input in the transaction template references the transaction identifier and wherein the certification transaction key is a private key associated with the transaction identifier and an index.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining includes transmitting a request for the certification transaction to a node in the blockchain network and receiving a response containing the certification transaction.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining includes receiving, from the first node, the copy of the certification transaction and a Merkle path associated with the certification transaction, and wherein the method further includes verifying that the certification transaction existing in a blockchain based on the copy of the certification transaction, the Merkle path, and a set of block headers for the blockchain.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A computing device to validate a certificate associated with a first node, the computing device including:<claim-text>one or more processors;</claim-text><claim-text>memory;</claim-text><claim-text>computer-executable instructions stored in the memory that, when executed by the one or more processors, cause the one or more processors to:<claim-text>receive a transaction template from the first node, the transaction template containing a first input that references a certification transaction output and is signed by a certification transaction key;</claim-text><claim-text>obtain a copy of a certification transaction and determine that the certification transaction includes the certificate associated with the first node and that the certification transaction is signed by a certification authority key; and</claim-text><claim-text>propagate the transaction template on a blockchain network, wherein the transaction template propagated includes a second input transferring resources to an output address,</claim-text><claim-text>and whereby the transaction template is to be validated by nodes on the blockchain network if the certification transaction output is contained within an unspent transaction output set.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A computer-readable medium storing processor-executable instructions for validating a certificate associated with a first node, the processor-executable instructions including instructions that, when executed by one or more processors, cause the one or more processors to:<claim-text>receive a transaction template from the first node, the transaction template containing a first input that references a certification transaction output and is signed by a certification transaction key;</claim-text><claim-text>obtain a copy of a certification transaction and determine that the certification transaction includes the certificate associated with the first node and that the certification transaction is signed by a certification authority key; and</claim-text><claim-text>propagate the transaction template on a blockchain network, wherein the transaction template propagated includes a second input transferring resources to an output address,</claim-text><claim-text>and whereby the transaction template is to be validated by nodes on the blockchain network if the certification transaction output is contained within an unspent transaction output set.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the transaction template includes an input from a first public key associated with the first node, and wherein the certificate includes the first public key, and wherein the instructions, when executed, are to cause the one or more processors to add, to the transaction template prior to propagation, an output to a second public key associated with a second node.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the transaction template includes an output to a first public key associated with the first node, and wherein the certificate includes the first public key, and wherein the instructions, when executed, are to cause the one or more processors to add, to the transaction template prior to propagation, an input from a second public key associated with a second node.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the certification transaction output includes a pay-to-public-key output in the certification transaction, and wherein the certification transaction output is one of a plurality of pay-to-public-key outputs in the certification transaction, and wherein each of the pay-to-public-key outputs in the certification transaction involves a different respective public key.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the instructions, when executed, are to cause the one or more processors to identify a last transaction in a series of linked transactions based on the last transaction containing the certification transaction output, and to trace through the series of linked transactions to identify the certification transaction.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the certification transaction output is in a transaction having a transaction identifier, and wherein the first input in the transaction template references the transaction identifier and wherein the certification transaction key is a private key associated with the transaction identifier and an index.</claim-text></claim></claims></us-patent-application>