<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005562A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005562</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17856744</doc-number><date>20220701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>IN</country><doc-number>202141030110</doc-number><date>20210705</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>2029</main-group><subgroup>3202</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">SCAN CHAIN COMPRESSION FOR TESTING MEMORY OF A SYSTEM ON A CHIP</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Synopsys, Inc.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>PILO</last-name><first-name>Harold</first-name><address><city>Underhill</city><state>VT</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>KUMAR</last-name><first-name>Shishir</first-name><address><city>Uttar Pradesh</city><country>IN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Synopsys, Inc.</orgname><role>02</role><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of using on-chip circuitry to test a memory of a chip is provided. The method including, in a capture stage, receiving, at a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one, and in the capture stage, passing the values from each respective first stage latch through compression logic of the first n-bit compression structure to output a single compressed address value, providing the single compressed address value to a second stage latch of the first n-bit compression structure.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="110.74mm" wi="158.75mm" file="US20230005562A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="150.37mm" wi="189.31mm" orientation="landscape" file="US20230005562A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="225.04mm" wi="188.13mm" orientation="landscape" file="US20230005562A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="227.75mm" wi="188.13mm" orientation="landscape" file="US20230005562A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.75mm" wi="124.88mm" file="US20230005562A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="228.01mm" wi="138.43mm" file="US20230005562A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="216.92mm" wi="109.56mm" file="US20230005562A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="226.31mm" wi="143.85mm" file="US20230005562A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATION</heading><p id="p-0002" num="0001">This application claims priority to IN Provisional Application No. 202141030110, filed on 5 Jul. 2021 and titled SCAN CHAIN COMPRESSION FOR DESIGN FOR TEST MEMORY TESTING OF A SYSTEM ON A CHIP, which is incorporated herein.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to testing memory of a chip, and more specifically relates to testing the memory of a system on a chip (SoC).</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">System on a chip (SoC) testing algorithms require different intellectual property (IP) components (ex. memory blocks) to be tested. A significant portion of the testing algorithms test the interconnection between the memory blocks and memory interface components to ensure proper connectivity, to ensure that there are no open circuit or short circuits across the memory interface and to ensure that there are no stuck-at logic faults (e.g., permanently grounded, permanently shorted or unconnected nets). The memory components of the SoC can include a design for test (DFT) feature that is used to capture inputs from a memory into a scan chain that can be serially scanned out for the observability of the memory interface. This DFT feature can include primary/secondary latches and input multiplexers, as well as logic that is stored in the memory.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">The present disclosure provides method of using on-chip circuitry to test a memory of a chip. The method can include in a capture stage, receiving, at a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory of the chip, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one. The method can further include in the capture stage, passing the values from each respective first stage latch through compression logic of the first n-bit compression structure to output a single compressed address value, providing the single compressed address value to a second stage latch of the first n-bit compression structure. Additionally, the method can include in a testing stage, comparing the value of the second stage latch of the first n-bit compression structure, as output from the first n-bit compression structure, to a known correct value to determine whether an interface to the memory is operating as desired.</p><p id="p-0006" num="0005">Furthermore, in an embodiment, n can have a value of two. In another embodiment, n can have a value of four.</p><p id="p-0007" num="0006">In a further embodiment, the four-bit compression structure can include a first NOR gate connected to outputs of a first two of four first stage latches, a second NOR gate connected to outputs of a second two of the four first stage latches, a NAND gate having inputs connected to outputs of the first and second NOR gates, and a first multiplexer connected to an output of the NAND gate. Further, the method can include in the capture stage, passing the values from the first two of the four first stage latches to inputs of the first NOR gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the second NOR gate, and in the capture stage passing an output of the NAND gate as the single compressed address value to the first multiplexer.</p><p id="p-0008" num="0007">In an embodiment, the method can include, in the capture stage for capturing a value of a particular latch of the four first stage latches, setting values of the remaining three latches of the four first stage latches to 0, such that the output of the NAND gate, which is the single compressed address value, matches the value of the particular latch, the particular latch being connected to a particular memory address of the memory, and in the testing stage for testing an interface to the particular memory address of the memory, comparing the value of the second stage latch of the four-bit compression structure, as output from the four-bit compression structure, to a known correct value of the particular memory address to determine whether the interface to the particular memory address is operating as desired.</p><p id="p-0009" num="0008">In another embodiment, the method can include in the capture stage, passing the single compressed address value from the first multiplexer to the second stage latch, switching from the capture stage to a scan stage based on another input into the first multiplexer, and after switching from the capture stage to the scan stage passing a value received on the other input into the first multiplexer to the second stage latch.</p><p id="p-0010" num="0009">In a further embodiment, the method can further include after switching from the capture stage to the scan stage, passing the previously stored single compressed address value from the second stage latch to a latch of a second four-bit compression structure.</p><p id="p-0011" num="0010">In an embodiment, the method can further include switching from the capture stage to the scan stage in dependence upon a scan enable (SE) signal of the chip.</p><p id="p-0012" num="0011">In another embodiment, the four-bit compression structure can include a first NAND gate connected to outputs of a first two of four first stage latches, a second NAND gate connected to outputs of a second two of the four first stage latches, a NOR gate having inputs connected to outputs of the first and second NAND gates, and a first multiplexer connected to an output of the NOR gate. Further, the method can include in the capture stage, passing the values from the first two of the four first stage latches to inputs of the first NAND gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the second NAND gate, and in the capture stage passing an output of the NOR gate as the single compressed address value to the first multiplexer.</p><p id="p-0013" num="0012">In an embodiment, the method can further include in the capture stage for capturing a value of a particular latch of the four first stage latches, setting values of the remaining three latches of the four first stage latches to 1, such that the output of the NOR gate, which is the single compressed address value, matches the value of the particular latch, the particular latch being connected to a particular memory address of the memory, and in the testing stage for testing an interface to the particular memory address of the memory, comparing the value of the second stage latch of the four-bit compression structure, as output from the four-bit compression structure, to a known correct value of the particular memory address to determine whether the interface to the particular memory address is operating as desired.</p><p id="p-0014" num="0013">In another embodiment, the four-bit compression structure can include a first XOR gate connected to outputs of a first two of four first stage latches, a second XOR gate connected to outputs of a second two of the four first stage latches, a NAND gate having inputs connected to outputs of the first and second XOR gates, and a first multiplexer connected to an output of the XOR gate. Further, the method can include in the capture stage, passing the values from the first two of the four first stage latches to inputs of the first XOR gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the second XOR gate, and in the capture stage passing an output of the NAND gate as the single compressed address value to the first multiplexer.</p><p id="p-0015" num="0014">In a further embodiment, in the capture stage for capturing a value of a particular latch of the four first stage latches, setting values of the remaining three latches of the four first stage latches to 1, such that the output of the NOR gate, which is the single compressed address value, matches the value of the particular latch, the particular latch being connected to a particular memory address of the memory, and in the testing stage for testing an interface to the particular memory address of the memory, comparing the value of the second stage latch of the four-bit compression structure, which is the value of the particular latch, to a known correct value of the particular memory address to determine whether the interface to the particular memory address is operating as desired.</p><p id="p-0016" num="0015">In an embodiment, the four-bit compression structure can include a first XOR gate connected to outputs of a first two of four first stage latches, a second XOR gate connected to outputs of a second two of the four first stage latches, a NAND gate having inputs connected to outputs of the first and second XOR gates, and a first multiplexer connected to an output of the XOR gate. Further, the method can include in the capture stage, passing the values from the first two of the four first stage latches to inputs of the first XOR gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the second XOR gate, and in the capture stage passing an output of the NAND gate as the single compressed address value to the first multiplexer.</p><p id="p-0017" num="0016">In another embodiment, the four-bit compression structure can include a first multiplexer connected to a first latch of four first stage latches, the first multiplexer receiving (i) a first input as a scan in (SI) signal, (ii) a second input as a value of a first memory address of the memory and (iii) a third input as a scan enable (SE) signal that dictates whether the first four-bit compression structure is in the capture stage or the scan stage, a first OR gate connected to a second latch of the four first stage latches, the first OR gate receiving (i) a first input as the SE signal that controls operation of the first multiplexer and (ii) a second input as a value of a second memory address of the memory, a second OR gate connected to a third latch of the four first stage latches, the second OR gate receiving (i) a first input as the SE signal that controls operation of the first multiplexer and (ii) a second input as a value of a third memory address of the memory, and a third OR gate connected to a fourth latch of the four first stage latches, the third OR gate receiving (i) a first input as the SE signal that controls operation of the first multiplexer and (ii) a second input as a value of a fourth memory address of the memory.</p><p id="p-0018" num="0017">In a further embodiment, the four-bit compression structure can include a fourth NOR gate connected to outputs of a first two of the four first stage latches, a fifth NOR gate connected to outputs of a second two of the four first stage latches, and a NAND gate having inputs connected to outputs of the fourth and fifth NOR gates. Further, the method can include in the capture stage, passing the values from the first two of the four first stage latches to inputs of the fourth NOR gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the fifth NOR gate, and in the capture stage passing an output of the NAND gate as the single compressed address value to the second stage latch.</p><p id="p-0019" num="0018">In another embodiment, the four-bit compression structure can include a first NAND gate connected to outputs of a first two of the four first stage latches, a second NAND gate connected to outputs of a second two of the four first stage latches, and a fourth NOR gate having inputs connected to outputs of the first and second NAND gates. Further, the method can include, in the capture stage, passing the values from the first two of the four first stage latches to inputs of the first NAND gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the second NAND gate, and in the capture stage passing an output of the fourth NOR gate as the single compressed address value to the second stage latch.</p><p id="p-0020" num="0019">In an embodiment, the four-bit compression structure can include a first XOR gate connected to outputs of a first two of the four first stage latches, a second XOR gate connected to outputs of a second two of the four first stage latches, and a NAND gate having inputs connected to outputs of the first and second XOR gates. Further, the method can include in the capture stage, passing the values from the first two of the four first stage latches to inputs of the first XOR gate, in the capture stage, passing the values from the second two of the four first stage latches to inputs of the second XOR gate, and in the capture stage passing an output of the NAND gate as the single compressed address value to the second stage latch.</p><p id="p-0021" num="0020">In a further embodiment, the method can include in a scan stage, passing the value of the second stage latch of the first n-bit compression structure to a latch of a second n-bit compression structure, and in the capture stage, receiving, at the second n-bit compression structure including n first stage latches corresponding to each bit of the second n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch, of the second n-bit compression structure, receives a respective value from a memory address of the memory, n being an integer greater than one.</p><p id="p-0022" num="0021">In another embodiment, the method can include, in the testing stage, comparing the value of the second stage latch of the second n-bit compression structure to a known correct value to determine whether the memory is operating as desired.</p><p id="p-0023" num="0022">In an embodiment, wherein the n first stage latches are part of a functional path of the memory.</p><p id="p-0024" num="0023">In a further embodiment a system for testing a memory of a chip is provided The system can include a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, the first n-bit compression structure being configured to receive, in a capture stage, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one. The first n-bit compression structure can further include compression logic and a second stage latch, such that, in the capture stage, the values pare passed from each respective first stage latch through the compression logic to output a single compressed address value and the single compressed address value is provided to the second stage latch. The system can further include testing logic configured to, in a testing stage, compare the value of the second stage latch of the first n-bit compression structure, as output from the first n-bit compression structure, to a known correct value to determine whether an interface to the memory is operating as desired (correctly). The system can include any of the above-described structure discussed above with respect to the method.</p><p id="p-0025" num="0024">In another embodiment a non-transitory computer readable medium is provided. The non-transitory computer readable medium can include stored instructions for testing a memory of a chip, the instructions, when executed by a processor, causing the processor to perform various operations. The operations can include in a capture stage, receiving, at a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one, in the capture stage, passing the values from each respective first stage latch through compression logic of the first n-bit compression structure to output a single compressed address value, providing the single compressed address value to a second stage latch of the first n-bit compression structure, and in a testing stage, comparing the value of the second stage latch of the first n-bit compression structure, as output from the first n-bit compression structure, to a known correct value to determine whether the memory is operating as desired.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0026" num="0025">The disclosure will be understood more fully from the detailed description given below and from the accompanying figures of embodiments of the disclosure. The figures are used to provide knowledge and understanding of embodiments of the disclosure and do not limit the scope of the disclosure to these specific embodiments. Furthermore, the figures are not necessarily drawn to scale.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of an approach of using DFT observation logic to test a memory of an SoC, according to an embodiment of the present disclosure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a four-bit compression structure, according to an embodiment of the present disclosure.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a four-bit compression structure, according to an embodiment of the present disclosure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates three different structures for compression logic, according to various embodiments of the present disclosure.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates various operations for testing a memory of a chip, according to an embodiment of the present disclosure.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a flowchart of various processes used during the design and manufacture of an integrated circuit in accordance with some embodiments of the present disclosure.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a diagram of an example computer system in which embodiments of the present disclosure may operate.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0034" num="0033">Aspects of the present disclosure relate to scan chain compression for testing memory of chip.</p><p id="p-0035" num="0034">SoC testing algorithms require different intellectual property (IP) components (ex. memory blocks) to be tested. A significant portion of the testing algorithms test the interconnection between the memory blocks and memory interface components to ensure proper connectivity, to ensure that there are no open circuit or short circuits across the memory interface and to ensure that there are no stuck-at logic faults (e.g., permanently grounded, permanently shorted or open memory interface connections). The memory components of the SoC can include a design for test (DFT)) feature that is used to capture inputs from a memory into a scan chain that can be serially scanned out for the observability of the memory interface. A scan chain may be a series of flip-flops (also referred to as flops herein) or latches that store values read out of the memory being tested and then provide the stored values as an output that is compared to an expected output. This DFT feature can include primary/secondary latches, input multiplexers and logic. These components can take up a significant percentage of the overall area of the memory of the SoC, and even more so for a memory that has a smaller word count. A memory can be considered as having a smaller word count if it has a word count between 8 and 256. When the word count is smaller, the components that implement the DFT feature will take up a large overall percentage of the area that is available for the memory of the SoC, increasing the overall area of the SoC. Furthermore, the DFT feature incurs additional wiring complexities on the SoC and additional clock cycles are taken up to control inputs to the memory and to progress through capture and scan stages.</p><p id="p-0036" num="0035">The present disclosure describes a significant simplification of on-chip circuitry (i.e., built-in circuitry of a SoC for testing the IP components of the SoC) that reduces the area taken up by the on-chip circuitry by four times or more and eliminates the above-mentioned setup time constraints (penalties), which greatly reduce the overhead for implementing the DFT feature on the SoC.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of an approach of using DFT observation logic. Specifically, DFT observation logic <b>100</b> includes a scan chain with each input (from a memory) being received by input multiplexing (i.e., multiplexers) and then captured into a latch (or a flop). The input multiplexing can choose between a capture function, which captures values from addresses of the memory to be tested, and a scan function, which outputs the captured values in series in a signal that is compared to expected results. A flop may include a shared primary device (e.g., latch L<b>1</b>) which is part of a functional path and a secondary device (e.g., latch L<b>2</b>), which is part of a capture/scan-chain path. The functional path is a path used for ordinary use of the memory and the capture/scan-chain path is a path used for testing the memory. A significant amount of logic overhead is incurred by each input having its own multiplexer, flop (e.g., shared primary latch L<b>1</b> and secondary latch L<b>2</b>), and logic.</p><p id="p-0038" num="0037">Specifically, <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates that the scan chain includes a first multiplexer <b>102</b> that receives a value from a first memory address YADR&#x3c;0&#x3e; <b>104</b>. The value of the first memory address YADR&#x3c;0&#x3e; <b>104</b> can be received from an interface connected to the memory. The DFT observation logic <b>100</b> can be used to check the behavior of the interface of the memory that connects the memory to the scan chain to the memory. The multiplexer <b>102</b> also receives a serial enable (SE) signal <b>107</b> and a scan in (SI) signal <b>106</b>. The SE signal <b>107</b> controls the output of the multiplexer <b>102</b>, so as to output either the SI signal <b>106</b> or the value of the first memory address YADR&#x3c;0&#x3e; <b>104</b>. The SE signal <b>107</b> dictates whether the scan chain is in the capture stage of capturing data from the memory or in a scan stage of shifting values out of the scan chain (so that the values received from the memory can be output for testing and so that SI signal <b>106</b> can be input into the scan chain. Further, the output of the multiplexer <b>102</b> is received by a first stage latch L<b>1</b> <b>108</b> and then received by a second stage latch L<b>2</b> <b>110</b>. Inverters <b>112</b> can be placed between the first stage latch L<b>1</b> <b>108</b> and the second stage latch L<b>2</b> <b>110</b>. The first stage latch L<b>1</b> <b>108</b> and the second stage latch L<b>2</b> <b>110</b> can be controlled by a clock. The first stage latch L<b>1</b> <b>108</b> and the second stage latch L<b>2</b> <b>110</b> can be components of a single flop.</p><p id="p-0039" num="0038">After the capture stage, when the SE signal <b>107</b> causes the scan chain to switch to the scan stage, the value stored in the second stage latch L<b>2</b> <b>110</b> can be output as value <b>114</b> to be received by multiplexer <b>116</b>, which also receives a value of a second memory address YADR&#x3c;1&#x3e; <b>118</b>. When in the scan stage, as discussed below in more detail, all of the values, as captured from the memory addresses and stored in the second level latches L<b>2</b> <b>110</b>, <b>122</b>, <b>134</b> and <b>146</b>, are output as an output signal <b>150</b>.</p><p id="p-0040" num="0039">Specifically, during the scan stage, the first memory address YADR&#x3c;0&#x3e; <b>104</b>, will continue to pass through the entire scan chain and will be output from the second level L<b>2</b> latch <b>146</b> as the output signal <b>150</b>. The value of the output signal <b>150</b> can be compared to a desired (or expected) value. If the values match, then the memory and/or the interface thereto are operating as desired. If the values do not match, then the memory and/or the interface thereto are not operating as desired. This comparison can be done in a testing phase, which can be during the scan stage or after the scan stage. Testing components (not illustrated) can be connected to an output of the scan chain to observe and compare the value output from the second stage latch L<b>2</b> <b>110</b> (i.e., the value of the output signal <b>150</b>, which includes the value output from the second stage latch L<b>2</b> <b>110</b> and eventually output from the second stage latch L<b>2</b> <b>146</b> during the scan stage) to the correct (or expected) value.</p><p id="p-0041" num="0040">In order to progress through the scan chain during the scan stage, the value of the first memory address YADR&#x3c;0&#x3e; <b>104</b> is output from the second level L<b>2</b> latch <b>110</b> as value <b>114</b>, which is received by multiplexer <b>116</b>. The SE signal <b>107</b> allows value <b>114</b> to pass through the multiplexer <b>116</b>, etc. until it reaches the output <b>150</b> of the scan chain. The SE signal <b>107</b> also switches the output of the multiplexer <b>116</b> between outputting the value <b>114</b> or the value of the second memory address YADR&#x3c;1&#x3e; <b>118</b>. Further, the output of the multiplexer <b>116</b> is received by a first stage latch L<b>1</b> <b>120</b> and then received by a second stage latch L<b>2</b> <b>122</b>. Inverters <b>124</b> can be placed between the first stage latch L<b>1</b> <b>120</b> and the second stage latch L<b>2</b> <b>122</b>. The first stage latch L<b>1</b> <b>120</b> and the second stage latch L<b>2</b> <b>122</b> can be controlled by a clock. The first stage latch L<b>1</b> <b>120</b> and the second stage latch L<b>2</b> <b>122</b> can be components of a single flop. During the capture stage, the value of the second memory address YADR&#x3c;1&#x3e; <b>118</b> is eventually stored in the second stage latch L<b>2</b> <b>122</b>. However, during the scan stage, the value of the second memory address YADR&#x3c;1&#x3e; <b>118</b> passes through the entire scan chain and is output as part of the output signal <b>150</b>.</p><p id="p-0042" num="0041">As discussed above regarding the testing of the value of the first memory address YADR&#x3c;0&#x3e; <b>104</b>, if the value of the second memory address YADR&#x3c;1&#x3e; <b>118</b> (as it is output as part of the output signal <b>150</b>) matches the desired or expected value, then the memory and the interface thereto are operating as desired. If the value does not match, then the memory and/or the interface thereto are not operating as desired. As described above, this comparison can be done in a testing phase, which can be during the scan stage or after the scan stage. Testing components (not illustrated) can be connected to an output of the second level L<b>2</b> latch <b>146</b> to observe and compare the value output from the second stage latch L<b>2</b> <b>122</b> (i.e., the value of the output signal <b>150</b>, which includes the value output from the second stage latch L<b>2</b> <b>122</b> and eventually output from the second stage latch L<b>2</b> <b>146</b> during the scan stage) to the correct (or expected) value.</p><p id="p-0043" num="0042">In order to progress through the scan chain during the scan stage, the value of the second memory address YADR&#x3c;1&#x3e; <b>118</b> is output from the second level L<b>2</b> latch <b>122</b> as value <b>126</b>, which is received by multiplexer <b>128</b>. The SE signal <b>107</b> allows value <b>126</b> to pass from the multiplexer <b>128</b>, etc. until it reaches the output of the scan chain. The SE signal <b>107</b> also switches the output of the multiplexer <b>128</b> between outputting the value <b>126</b> or the value of the third memory address YADR&#x3c;2&#x3e; <b>130</b>. Further, the output of the multiplexer <b>128</b> is received by a first stage latch L<b>1</b> <b>132</b> and then received by a second stage latch L<b>2</b> <b>134</b>. Inverters <b>136</b> can be placed between the first stage latch L<b>1</b> <b>132</b> and the second stage latch L<b>2</b> <b>134</b>. The first stage latch L<b>1</b> <b>132</b> and the second stage latch L<b>2</b> <b>134</b> can be controlled by a clock. The first stage latch L<b>1</b> <b>132</b> and the second stage latch L<b>2134</b> can be components of a single flop. During the capture stage, the value of the third memory address YADR&#x3c;2&#x3e; <b>130</b> is eventually stored in the second stage latch L<b>2</b> <b>134</b>. However, during the scan stage, the value of the third memory address YADR&#x3c;2&#x3e; <b>130</b> passes through the entire scan chain and is output as part of the output signal <b>150</b>.</p><p id="p-0044" num="0043">As discussed above regarding the testing of the value of the first memory address YADR&#x3c;0&#x3e; <b>104</b>, if the value of the third memory address YADR&#x3c;2&#x3e; <b>130</b> (as it is output as part of the output signal <b>150</b>) matches the desired or expected value, then the memory and the interface thereto are operating as desired. If the value does not match, then the memory and/or the interface thereto are not operating as desired. As described above, this comparison can be done in a testing phase, which can be during the scan stage or after the scan stage. Testing components (not illustrated) can be connected to an output of the second level L<b>2</b> latch <b>146</b> to observe and compare the value output from the second stage latch L<b>2</b> <b>134</b> (i.e., the value of the output signal <b>150</b>, which includes the value output from the second stage latch L<b>2</b> <b>134</b> and eventually output from the second stage latch L<b>2</b> <b>146</b> during the scan stage) to the correct (or expected) value.</p><p id="p-0045" num="0044">In order to progress through the scan chain during the scan stage, the value of the third memory address YADR&#x3c;2&#x3e; <b>130</b> is output from the second level L<b>2</b> latch <b>134</b> as value <b>138</b>, which is received by multiplexer <b>140</b>. The SE signal <b>107</b> allows value <b>138</b> to pass from the multiplexer <b>140</b> until it reaches the output of the scan chain. The SE signal <b>107</b> also switches the output of the multiplexer <b>140</b> between outputting the value <b>138</b> or the value of the fourth memory address YADR&#x3c;3&#x3e; <b>142</b>. Further, the output of the multiplexer <b>140</b> is received by a first stage latch L<b>1</b> <b>144</b> and then received by a second stage latch L<b>2</b> <b>146</b>. Inverters <b>148</b> can be placed between the first stage latch L<b>1</b> <b>144</b> and the second stage latch L<b>2</b> <b>146</b>. The first stage latch L<b>1</b> <b>144</b> and the second stage latch L<b>2</b> <b>146</b> can be controlled by a clock. The first stage latch L<b>1</b> <b>144</b> and the second stage latch L<b>2146</b> can be components of a single flop. During the capture stage, the value of the fourth memory address YADR&#x3c;3&#x3e; <b>142</b> is eventually stored in the second stage latch L<b>2</b> <b>146</b>. However, during the scan stage, the value of the fourth memory address YADR&#x3c;3&#x3e; <b>142</b> passes through the entire scan chain and is output as part of the output signal <b>150</b>.</p><p id="p-0046" num="0045">As discussed above regarding the testing of the value of the first memory address YADR&#x3c;0&#x3e; <b>104</b>, if the value of the fourth memory address YADR&#x3c;3&#x3e; <b>142</b> (as it is output as part of the output signal <b>150</b>) matches the desired or expected value, then the memory and the interface thereto are operating as desired. If the value does not match, then the memory and/or the interface thereto are not operating as desired. As described above, this comparison can be done in a testing phase, which can be during the scan stage or after the scan stage. Testing components (not illustrated) can be connected to an output of the second level L<b>2</b> latch <b>146</b> to observe and compare the value output from the second stage latch L<b>2</b> <b>146</b> (i.e., the value of the output signal <b>150</b>) to the correct (or expected) value.</p><p id="p-0047" num="0046">After the scan stage, the SE signal <b>107</b> causes the multiplexers <b>102</b>, <b>116</b>, <b>128</b> and <b>140</b> to switch back to the capture stage and capture the values of the memory addresses <b>104</b>, <b>118</b>, <b>130</b> and <b>142</b>. The structure of the scan chain can continue as described above based on how many memory addresses are to be tested by a single scan chain. In other words, the scan chain can be longer or shorter than the scan chain illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Further, the entire scan chain can be configured to, in the capture stage, capture all of the values of each of the connected memory addresses in a simultaneous or near simultaneous manner, so that the values of the memory addresses are respectively stored in the second level latches. The scan stage can be implemented to output all of the values of the second level latches as the output signal <b>150</b> for testing of the values captured from the memory.</p><p id="p-0048" num="0047">The testing described above can be done using automatic test pattern generation (ATPG) to generate a pattern of values in the memory that provide an expected result. At every clock cycle the system knows expected values. As describe above, the capture stage loads values into each of the first level latches <b>108</b>, <b>120</b>, <b>132</b> and <b>144</b> and each of the second level latches <b>110</b>, <b>122</b>, <b>134</b> and <b>146</b>. The values of each of the first level latches <b>108</b>, <b>120</b>, <b>132</b> and <b>144</b> and each of the second level latches <b>110</b>, <b>122</b>, <b>134</b> and <b>146</b> can be output (in a serial format) as the output signal <b>150</b> during the scan stage and checked at each clock cycle. This implementation requires the use of many multiplexers which take up valuable space.</p><p id="p-0049" num="0048">The present disclosure implements compression logic (NOR logic, NAND logic or XOR logic) to combine several inputs and capture them into a single flop (or latch). Therefore, a smaller pattern overhead as compared to the above-describe approach can be utilized, because according to the above-described approach, only one input can be brought into the scan chain at a time. As a result, the present disclosure provides a significant savings in logic area, wiring complexity and setup time overhead. The simplification implemented by the present disclosure enables a significant area savings (e.g., up to 10% or more), providing an area advantage over the above-described approach requiring DFT features.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a four-bit compression structure <b>200</b>, according to an embodiment of the present disclosure. The present disclosure is not limited to a four-bit configuration and can be implemented with a higher number of bits or a lower number of bits. The number of bits represents the number of memory addresses that can be captured for testing by each compression structure. The greater the number of bits in the compressed structure, the greater the area savings. However, as the number of bits increases, so does the complexity of the test pattern, as only one bit in the compressed structure is tested at a time.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a high level overview <b>202</b> of the four-bit compression structure. As illustrated, a first four-bit compression structure <b>204</b> receives an SI signal <b>212</b> and values of four memory addresses YADR&#x3c;0:3&#x3e; <b>214</b>. The values of the four memory addresses YADR&#x3c;0:3&#x3e; <b>214</b> can be simultaneously (or near simultaneously) received. This also applies to receiving values from other memory addresses, as described throughout this disclosure. An output <b>216</b> of the first four-bit compression structure <b>204</b> is received by a second four-bit compression structure <b>206</b> along with values of four memory addresses XADR&#x3c;0:3&#x3e; <b>218</b>. Similarly, an output <b>220</b> of the second four-bit compression structure <b>206</b> is received by a third four-bit compression structure <b>208</b> along with values of four memory addresses XADR&#x3c;4:7&#x3e; <b>222</b>. Similarly, an output <b>224</b> of the third four-bit compression structure <b>208</b> is received by a fourth four-bit structure <b>210</b> along with values of four memory addresses XBKADR&#x3c;0:2&#x3e;, WE <b>226</b>. &#x201c;WE&#x201d; represents a write enable control signal. This compression structure is capable of testing the values of any control signal, as well as the values of the addresses of the memory. A scan out (SO) signal <b>228</b> is output from the fourth four-bit structure <b>210</b>. The SO signal <b>228</b> is the signal that is output from combination of four-bit compression structures <b>204</b>, <b>206</b>, <b>208</b> and <b>210</b>. The values of the SO signal <b>228</b> can be compared against desired (or expected) values by testing logic <b>229</b>. Specifically, the testing logic <b>229</b> can compare the values of the SO signal <b>229</b> against the desired (or expected) values to determine whether there is a problem with the operation of the memory (e.g., the memory is not storing data correctly or the memory is outputting data incorrectly) and/or with the connectivity of the memory (e.g., the interface of the memory is changing the values of the data output by the memory). As described above, incoming addresses are connected to four-bit compression structures <b>204</b>, <b>206</b>, <b>208</b> and <b>210</b>. The four-bit compression structures <b>204</b> and <b>206</b> are illustrated in more detail on the right hand side of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0052" num="0051">In a similar manner as discussed above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an SE signal <b>257</b> is used to switch from the capture stage to the scan stage (e.g., the SE signal <b>257</b> can be low to enter the capture stage and the SE signal <b>257</b> can be high to enter the scan stage, or visa-versa). During the scan stage, the values captured by each of the first four-bit compression structure <b>204</b>, the second four-bit compression structure <b>206</b>, the third four-bit compression structure <b>208</b> and the fourth four-bit compression structure <b>210</b> are output as the SO signal <b>228</b>. The SO signal <b>228</b> is then compared to desired values for testing the memory and the interface thereto as discussed above.</p><p id="p-0053" num="0052">At a high level, for each four-bit compression structure <b>204</b>, <b>206</b>, <b>208</b> and <b>210</b>, incoming addresses from interface pins of the memory being tested connect to first level L<b>1</b> (primary) latches physically located in the functional (non-DFT) block of the memory being tested. The outputs of the first level L<b>1</b> latches feed into compression logic (e.g., a NOR structure). A single compressed address output (CA0) connects to a multiplexer <b>256</b> that switches between a capture stage of capturing a value output from the compression logic and a scan stage of shifting values according to an SE signal.</p><p id="p-0054" num="0053">Specifically, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the four-bit compression structure <b>204</b> includes first level L<b>1</b> latches <b>234</b>, <b>236</b>, <b>238</b> and <b>240</b>. The first level L<b>1</b> latch <b>234</b> receives a value from a first memory address YADR&#x3c;0&#x3e; <b>242</b>, the first level L<b>1</b> latch <b>236</b> receives a value from a second memory address YADR&#x3c;1&#x3e; <b>244</b>, the first level L<b>1</b> latch <b>238</b> receives a value from a third memory address YADR&#x3c;2&#x3e; <b>246</b> and the first level L<b>1</b> latch <b>240</b> receives a value from a fourth memory address YADR&#x3c;3&#x3e; <b>248</b>. Outputs of each of the first level L<b>1</b> latches <b>234</b>, <b>236</b>, <b>238</b> and <b>240</b> are connected to four-bit compression logic. <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a specific NOR gate compression logic. Different compression logic structures are discussed in detail below with reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0055" num="0054">The NOR gate compression logic includes a first NOR gate <b>250</b> connected to outputs of the first level L<b>1</b> latches <b>234</b> and <b>236</b>, and includes a second NOR gate <b>252</b> connected to outputs of the first level L<b>1</b> latches <b>238</b> and <b>240</b>. Outputs of the first NOR gate <b>250</b> and the second NOR gate <b>252</b> are connected to inputs of a NAND gate <b>254</b>. The output of the NAND gate <b>254</b> is a single compressed address value (e.g., a compressed address output CA0) that is received by a multiplexer <b>256</b> that is controlled by the SE signal <b>257</b> to select between outputting the single compressed address value and the SI signal <b>212</b> stored in a first level L<b>1</b> latch <b>258</b>. The output of the multiplexer <b>256</b> is received and stored by a second level L<b>2</b> latch <b>262</b>.</p><p id="p-0056" num="0055">As discussed above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the value of the second level L<b>2</b> latch <b>262</b> that is passed through the four-bit compression structures <b>204</b>, <b>206</b>, <b>208</b> and <b>210</b> as the SO signal <b>228</b> during the scan stage can be compared (during a testing stage) to a desired (or expected) value to determine whether the memory or the interface to the memory is operating as desired. Specifically, the SE signal <b>257</b> allows the SI signal <b>212</b> to pass to the second level L<b>2</b> latch <b>262</b>, the four-bit compression structure <b>204</b> enters the scan stage (after the capture stage) and an output of the second level L<b>2</b> latch <b>262</b> is provided to the four-bit compression structure <b>206</b> and is eventually output as the SO signal <b>228</b>. When the four-bit compression structure <b>204</b> enters the scan stage, the other four-bit compression structures <b>206</b>, <b>208</b> and <b>210</b> will also enter the scan stage, as they also receive the SE signal <b>257</b>.</p><p id="p-0057" num="0056">In order to test the value of the first memory address YADR&#x3c;0&#x3e; <b>242</b> in the capture and testing stages, the values of the second memory address YADR&#x3c;1&#x3e; <b>244</b>, the third memory address YADR&#x3c;2&#x3e; <b>246</b> and the fourth memory address YADR&#x3c;3&#x3e; <b>248</b> can be held low (i.e., held to a value of 0). In this scenario, the value of CA0 will match the value of the first memory address YADR&#x3c;0&#x3e; <b>242</b> as received by the first level L<b>1</b> latch <b>234</b>. As a result, during the capture stage to capture the value of the first memory address YADR&#x3c;0&#x3e; <b>242</b>, the SE signal <b>257</b> controls the multiplexer <b>256</b> to output the CA0 value to the second level L<b>2</b> latch <b>262</b>. Specifically, during the scan stage, the SE signal <b>257</b> controls the multiplexer <b>256</b> to output the CA0 value through the scan chain as the SO signal <b>228</b>, followed by the SI signal <b>212</b>. As the CA0 signal is output (as the SO signal <b>228</b>) the testing stage can begin comparing the CA0 signal against desired values to determine whether the memory and the memory interface are operating as desired.</p><p id="p-0058" num="0057">The testing of the other memory addresses can be carried out in the same manner Specifically, when testing the value of the second memory address YADR&#x3c;1&#x3e; <b>244</b>, the values of the first memory address YADR&#x3c;0&#x3e; <b>242</b>, the third memory address YADR&#x3c;2&#x3e; <b>246</b> and the fourth memory address YADR&#x3c;3&#x3e; <b>248</b> can be held low (i.e., held to a value of 0). As discussed above, the value of CA0 will match the value of the second memory address YADR&#x3c;1&#x3e; <b>244</b> that is in the first level L<b>1</b> latch <b>236</b>. The same implementation can be carried out for testing the value of the third memory address YADR&#x3c;2&#x3e; <b>246</b> by having the values of the first, second and fourth memory addresses <b>242</b>, <b>244</b> and <b>248</b> set to low and for testing the value of the fourth memory address YADR&#x3c;3&#x3e; <b>248</b> by having the values of the first, second and third memory addresses <b>242</b>, <b>244</b> and <b>246</b> be set to low.</p><p id="p-0059" num="0058">The four-bit compression structure <b>206</b> has a similar structure as the four-bit compression structure <b>204</b>, except that the four-bit compression structure <b>206</b> receives a value <b>290</b> output from the second level L<b>2</b> latch <b>262</b> of the four-bit compression structure <b>204</b>, as opposed to directly receiving the SI signal <b>212</b> as does the four-bit compression structure <b>204</b>. Specifically, the four-bit compression structure <b>206</b> includes first level L<b>1</b> latches <b>264</b>, <b>266</b>, <b>268</b> and <b>270</b> which respectively receive a value of a fifth memory address XADR&#x3c;0&#x3e; <b>272</b>, a value of a sixth memory address XADR&#x3c;1&#x3e; <b>274</b>, a value of a seventh memory address XADR&#x3c;2&#x3e; <b>276</b> and a value of an eighth memory address XADR&#x3c;3&#x3e; <b>278</b>.</p><p id="p-0060" num="0059">Additionally, the four-bit compression structure <b>206</b> includes NOR compression logic including a NOR gate <b>280</b> and a NOR gate <b>282</b>, wherein the NOR gates <b>280</b> and <b>282</b> receive the values stored by the first level L<b>1</b> latches <b>264</b>, <b>266</b>, <b>268</b> and <b>270</b>. Outputs from the NOR gates <b>280</b> and <b>280</b> are received by a NAND gate <b>284</b>, which outputs a single compressed address value CA1 to a multiplexer <b>286</b>. The multiplexer <b>286</b> also receives the value <b>290</b> that is output from the second level L<b>2</b> latch <b>262</b> of the four-bit compression structure <b>204</b> and stored in a first level L<b>1</b> latch <b>288</b>. The multiplexer <b>286</b> receives the SE signal <b>257</b> that selects between outputting the single compressed address value CA1 and the value <b>290</b> to a second level L<b>2</b> latch <b>292</b>. The operation of the four-bit compression structure <b>206</b> is the same as that described above with respect to the four-bit compression structure <b>204</b>. Therefore, redundant descriptions thereof are omitted.</p><p id="p-0061" num="0060">Compared to the approach illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the benefits of the present disclosure, as describe with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, include (i) significant area reduction, (ii) setup time improvement and (iii) elimination of wiring complexity. Regarding the area reduction, the number of multiplexers is reduced, for each compression structure, from four to one, the number of inverter-equivalent logic gates is reduced, for each compression structure, from 8 to 6 and the number of level two L<b>2</b> latches reduced, for each compression structure, from four to one, in one embodiment. Regarding the setup time improvement, external address/control pins can connect directly to the functional first level L<b>1</b> latches, which can remove multiplexer logic and wiring between the memory being tested and the first level L<b>1</b> latches.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is similar to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and illustrates a four-bit compression logic structure <b>300</b>, according to an embodiment of the present disclosure. <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a four-bit compression structure that includes one second level L<b>2</b> latch, which can be used to form an L<b>1</b>/L<b>2</b> (primary/secondary) flop combination. One of the first level L<b>1</b> latches connects to a multiplexer that selects between the capture stage and a scan stage. Other first level L<b>1</b> latches connect to OR gates.</p><p id="p-0063" num="0062">Specifically, <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates, in a similar manner as <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a high level overview <b>302</b> of the four-bit compression structure. As illustrated, a first four-bit compression structure <b>304</b> receives an SI signal <b>312</b> and values of four memory addresses YADR&#x3c;0:3&#x3e; <b>314</b>. An output <b>316</b> of the first four-bit compression structure <b>304</b> is received by a second four-bit compression structure <b>306</b> along with values of four memory addresses XADR&#x3c;0:3&#x3e; <b>318</b>. Similarly, an output <b>320</b> of the second four-bit compression structure <b>306</b> is received by a third four-bit compression structure <b>308</b> along with values of four memory addresses XADR&#x3c;4:7&#x3e; <b>322</b>. Similarly, an output <b>324</b> of the third four-bit compression structure <b>308</b> is received by a fourth four-bit structure <b>310</b> along with values of four memory addresses XBKADR&#x3c;0:2&#x3e; and WE <b>326</b>. An SO signal <b>328</b> is output from the fourth four-bit structure <b>310</b>. As described above, incoming values from memory addresses are connected to four-bit compression structures <b>304</b>, <b>306</b>, <b>308</b> and <b>230</b>. The four-bit compression structures <b>304</b> and <b>306</b> are illustrated in more detail on the right hand side of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0064" num="0063">At a high level, for each four-bit compression structure <b>304</b>, <b>306</b>, <b>308</b> and <b>310</b>, incoming values from memory addresses are received from interface pins (of the memory being tested) connect a multiplexer and OR gates that connect to first level L<b>1</b> (primary) latches physically located in the functional (non-DFT) block of the memory being tested. This embodiment is different than the embodiment of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, in that a multiplexer <b>330</b> is provided between a first memory address YADR&#x3c;0&#x3e; <b>339</b> and a first level L<b>1</b> latch <b>346</b>, an OR gate <b>332</b> is provided between a second memory address YADR&#x3c;1&#x3e; <b>341</b> and a first level L<b>1</b> latch <b>347</b>, an OR gate <b>334</b> is provided between a third memory address YADR&#x3c;2&#x3e; <b>343</b> and a first level L<b>1</b> latch <b>348</b>, and an OR gate <b>336</b> is provided between a fourth memory address YADR&#x3c;3&#x3e; <b>345</b> and a first level L<b>1</b> latch <b>349</b>. The outputs of the first level L<b>1</b> latches <b>346</b>, <b>347</b>, <b>348</b> and <b>349</b> feed into compression structure logic (e.g., a NOR structure). A single compressed address output (CA0) is provided from the compression structure logic to a second level L<b>2</b> latch <b>353</b>.</p><p id="p-0065" num="0064">Specifically, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the four-bit compression structure <b>304</b> includes the multiplexer <b>330</b> that receives an SE signal <b>331</b>, which is a scan enable signal to trigger switching from the capture stage to the scan stage, wherein the SE signal <b>331</b> can be low to enter the capture stage and the SE signal <b>331</b> can be high to enter the scan stage. The multiplexer <b>330</b> can also receive the SI signal <b>312</b> that is output from the multiplexer <b>330</b> when the SE signal <b>331</b> is enabled (e.g., high) to select the SI signal <b>312</b>, and receives a value from the first memory address YADR&#x3c;0&#x3e; <b>339</b>. The output of the multiplexer <b>330</b> is provided to the first level L<b>1</b> latch <b>346</b>. Further, the four-bit compression structure <b>304</b> includes the OR gate <b>332</b> that receives the SE signal <b>331</b> and a value of the second memory address YADR&#x3c;1&#x3e; <b>341</b>. The output of the OR gate <b>332</b> is provided to the first level L<b>1</b> latch <b>347</b>.</p><p id="p-0066" num="0065">Additionally, the four-bit compression structure <b>304</b> includes the OR gate <b>334</b> that receives the SE signal <b>331</b> and a value of the third memory address YADR&#x3c;2&#x3e; <b>343</b>. The output of the OR gate <b>334</b> is provided to the first level L<b>1</b> latch <b>348</b>. The four-bit compression structure also includes the NOR gate <b>336</b> that receives the SE signal <b>331</b> and a value of the fourth memory address YADR&#x3c;3&#x3e; <b>345</b>. The output of the OR gate <b>336</b> is provided to the first level L<b>1</b> latch <b>349</b>. Outputs of each of the first level L<b>1</b> latches <b>346</b>, <b>347</b>, <b>348</b> and <b>349</b> are connected to compression logic. <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a specific NOR gate compression logic. Different compression logic structures are discussed in detail below with reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0067" num="0066">The NOR gate compression logic includes a first NOR gate <b>350</b> connected to outputs of the first level L<b>1</b> latches <b>346</b> and <b>347</b>, and includes a second NOR gate <b>351</b> connected to outputs of the first level L<b>1</b> latches <b>348</b> and <b>349</b>. Outputs of the first NOR gate <b>350</b> and the second NOR gate <b>351</b> are connected to inputs of a NAND gate <b>352</b>. The output of the NAND gate <b>352</b> is a single compressed address value (e.g., a compressed address output CA0) that is received the second level L<b>2</b> latch <b>353</b>. As discussed above, the multiplexer <b>330</b> is controlled by the SE signal <b>331</b> to select between outputting the single compressed address value and the SI signal <b>212</b>.</p><p id="p-0068" num="0067">For example, when capturing the value of the first memory address YADR&#x3c;0&#x3e; <b>339</b>, which can be 0 or 1, the SE signal <b>331</b> will have a value of 0, the SI signal <b>312</b> can have a value of 0 or 1, and the values of the second memory address YADR&#x3c;1&#x3e; <b>341</b>, the third memory address YADR&#x3c;2&#x3e; <b>343</b> and the fourth memory address YADR&#x3c;3&#x3e; <b>345</b> will be 0. Accordingly, the value of CA0 will match the value of the first memory address YADR&#x3c;0&#x3e; <b>339</b>. Similar to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, as discussed above, when capturing the value of the second memory address YADR&#x3c;1&#x3e; <b>341</b>, the values of the first memory address YADR&#x3c;0&#x3e; <b>339</b>, the third memory address YADR&#x3c;2&#x3e; <b>343</b> and the fourth memory address YADR&#x3c;3&#x3e; <b>345</b> will be 0, and so on for capturing the value of the other memory addresses. The four-bit compression structure <b>304</b> can switch to the scan stage by setting the value of the SE signal to 1, so that the value CA0 is eventually output as the SO signal <b>328</b> during the scan stage.</p><p id="p-0069" num="0068">As discussed above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, the values of the SO signal <b>328</b>, during a testing stage, can be compared to a desired (or expected) values by testing logic <b>329</b>. Specifically, the testing logic <b>329</b> can compare the values of the SO signal <b>328</b> against the desired (or expected) values to determine whether the memory and the interface to the memory are operating as desired.</p><p id="p-0070" num="0069">The four-bit compression structure <b>306</b> has a similar structure as the four-bit compression structure <b>304</b>, except that a multiplexer <b>360</b> of the four-bit compression structure <b>306</b> receives an output <b>368</b> of the second level L<b>2</b> latch <b>353</b> of the four-bit compression structure <b>304</b>, as opposed to directly receiving the SI signal <b>312</b> as does the four-bit compression structure <b>304</b>. Specifically, in a similar manner as the four-bit compression structure <b>304</b>, the four-bit compression structure <b>306</b> includes the multiplexer <b>360</b>, an OR gate <b>362</b>, an OR gate <b>364</b> and an OR gate <b>366</b> that respectively receive a value of a fifth memory address XADR&#x3c;0&#x3e; <b>369</b>, a value of a sixth memory address XADR&#x3c;1&#x3e; <b>371</b>, a value of a seventh memory address XADR&#x3c;2&#x3e; <b>373</b> and a value of an eight memory address XADR&#x3c;3&#x3e; <b>375</b>. Each of the OR gates <b>362</b>, <b>364</b> and <b>366</b> also receives the SE signal <b>331</b>. The output of the multiplexer <b>360</b> is provided to a first level L<b>1</b> latch <b>376</b>, the output of the OR gate <b>362</b> is provided to a first level L<b>1</b> latch <b>377</b>, the output of the OR gate <b>364</b> is provided to a first level L<b>1</b> latch <b>378</b> and the output of the OR gate <b>366</b> is provided to a first level L<b>1</b> tach <b>379</b>.</p><p id="p-0071" num="0070">Additionally, the four-bit compression instruction includes NOR compression logic including a NOR gate <b>380</b> and a NOR gate <b>381</b>, wherein the NOR gates <b>380</b> and <b>381</b> receive the values stored by the first level L<b>1</b> latches <b>376</b>, <b>377</b>, <b>378</b> and <b>379</b>. Outputs from the NOR gates <b>380</b> and <b>381</b> are received by a NAND gate <b>382</b>, which outputs a single compressed address value CA1 to a second level L<b>2</b> latch <b>383</b>. The operation of the four-bit compression structure <b>306</b> is the same as that described above with respect to the four-bit compression structure <b>304</b>. Therefore, redundant descriptions thereof are omitted.</p><p id="p-0072" num="0071">In this embodiment of <figref idref="DRAWINGS">FIG. <b>3</b></figref> (in comparison to <figref idref="DRAWINGS">FIG. <b>1</b></figref>), for each compression structure, the number of level two L<b>2</b> latches is reduced from four to one.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates three different structures for compression logic, according to various embodiments of the present disclosure. The three different structures include (i) OR type compression logic <b>402</b>, (ii) AND type compression logic <b>422</b> and (iii) XOR type compression logic <b>442</b>. The OR type compression logic <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> is the same compression logic illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> (i.e., NOR gates <b>250</b> and <b>252</b> and NAND gate <b>254</b>) as well as that illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> (i.e., NOR gates <b>350</b> and <b>351</b> and NAND gate <b>352</b>). The AND type compression logic <b>422</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> and the XOR type compression logic <b>442</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> can replace the OR type compression logic of <figref idref="DRAWINGS">FIGS. <b>2</b> and <b>3</b></figref>.</p><p id="p-0074" num="0073">The OR type compression logic <b>402</b> includes a NOR gate <b>404</b>, a NOR gate <b>406</b> and a NAND gate <b>408</b> connected to outputs of the NOR gates <b>404</b> and <b>406</b>. As illustrated, the NOR gate <b>404</b> receives an IN0 signal <b>410</b> that is a signal being tested. The NOR gate <b>404</b> also receives an IN1 signal <b>412</b>, which is not a signal that is being tested. The value of the IN1 signal <b>412</b> is held low (i.e., held to 0), while the IN0 signal <b>410</b> is being tested. Similarly, the NOR gate <b>406</b> receives both an IN2 signal <b>414</b> and an IN3 signal <b>416</b>. Again, because the IN0 signal <b>410</b> is the signal that is being tested, both the IN2 signal <b>414</b> and the IN3 signal <b>416</b> are held low (i.e., held to 0). An output signal <b>418</b> of the OR type compression logic <b>402</b> should match the value of the IN0 signal <b>410</b> (when the IN0 signal <b>410</b> is the signal being tested). In other words, the output signal <b>418</b> reflects the input signal under test. Any faults from the interconnectivity between a source of the IN0-IN3 signals <b>410</b>, <b>412</b>, <b>414</b> and <b>416</b> and the memory interface can be detected with the compression logic.</p><p id="p-0075" num="0074">The AND type compression logic <b>422</b> includes a NAND gate <b>424</b>, a NAND gate <b>426</b> and a NOR gate <b>428</b> connected to outputs of the NAND gates <b>424</b> and <b>426</b>. As illustrated, the NAND gate <b>424</b> receives an IN0 signal <b>430</b> that is a signal being tested. The NAND gate <b>424</b> also receives an IN1 signal <b>432</b>, which is not a signal that is being tested. The value of the IN1 signal <b>432</b> is held high (i.e., held to 1), while the IN0 signal <b>430</b> is being tested. Similarly, the NAND gate <b>426</b> receives both an IN2 signal <b>434</b> and an IN3 signal <b>436</b>. Again, because the IN0 signal <b>430</b> is the signal that is being tested, both the IN2 signal <b>434</b> and the IN3 signal <b>436</b> are held high (i.e., held to 1). An output signal <b>438</b> of the AND type compression logic <b>422</b> should match the value of the IN0 signal <b>430</b> (when the IN0 signal <b>430</b> is the signal being tested). In other words, the output signal <b>438</b> reflects the input signal under test. Any faults from the interconnectivity between a source of the IN0-IN3 signals <b>430</b>, <b>432</b>, <b>434</b> and <b>436</b> and the memory interface can be detected with the compression logic.</p><p id="p-0076" num="0075">The XOR type compression logic <b>442</b> includes an XOR gate <b>444</b>, an XOR gate <b>446</b> and a NAND gate <b>448</b> connected to outputs of the XOR gates <b>444</b> and <b>446</b>. As illustrated, the XOR gate <b>444</b> receives an IN0 signal <b>450</b> and an IN1 signal <b>452</b>. Similarly, the XOR gate <b>446</b> receives an IN2 signal <b>454</b> and an IN3 signal <b>456</b>. Outputs of the XOR gates <b>444</b> and <b>446</b> are provided to the NAND gate <b>448</b>. Using the XOR type compression logic <b>442</b>, the IN0 signal <b>450</b>, the IN1 signal <b>452</b>, the IN2 signal <b>454</b> and the IN3 signal <b>456</b> can be tested simultaneously. Using this XOR type compression logic <b>442</b>, the logic tree allows for simultaneous testing because a desired test pattern provided on the IN0 signal <b>450</b>, the IN1 signal <b>452</b>, the IN2 signal <b>454</b> and the IN3 signal <b>456</b> will produce a desired result. An output signal <b>458</b> is output by the NAND gate <b>448</b> that receives the outputs from the XOR gates <b>444</b> and <b>446</b>. The number of test sequences can be reduced compared to the OR type compression logic <b>402</b> and the AND type compression logic <b>422</b>, but area occupied by this implementation is larger.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates various operations <b>500</b> for testing a memory of a chip according to an embodiment of the present disclosure. Specifically, the operations <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> include an operation <b>502</b> that, in a capture stage, receives, at a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory of the chip, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one.</p><p id="p-0078" num="0077">Further, the operations <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> include an operation <b>504</b> that, in the capture stage, passes the values from each respective first stage latch through compression logic of the first n-bit compression structure to output a single compressed address value, providing the single compressed address value to a second stage latch of the first n-bit compression structure.</p><p id="p-0079" num="0078">The operations of <figref idref="DRAWINGS">FIG. <b>5</b></figref> also include an operation <b>506</b> that, in a testing stage, compares the value of the second stage latch of the first n-bit compression structure to a desired value to determine whether the memory or an interface to the memory is operating as desired.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example set of processes <b>600</b> used during the design, verification, and fabrication of an article of manufacture such as an integrated circuit to transform and verify design data and instructions that represent the integrated circuit. Each of these processes can be structured and enabled as multiple modules or operations. The term &#x2018;EDA&#x2019; signifies the term &#x2018;Electronic Design Automation.&#x2019; These processes start with the creation of a product idea <b>610</b> with information supplied by a designer, information which is transformed to create an article of manufacture that uses a set of EDA processes <b>612</b>. When the design is finalized, the design is taped-out <b>634</b>, which is when artwork (e.g., geometric patterns) for the integrated circuit is sent to a fabrication facility to manufacture the mask set, which is then used to manufacture the integrated circuit. After tape-out, a semiconductor die is fabricated <b>636</b> and packaging and assembly processes <b>638</b> are performed to produce the finished integrated circuit <b>640</b>.</p><p id="p-0081" num="0080">Specifications for a circuit or electronic structure may range from low-level transistor material layouts to high-level description languages. A high-level of representation may be used to design circuits and systems, using a hardware description language (&#x2018;HDL&#x2019;) such as VHDL, Verilog, SystemVerilog, SystemC, MyHDL or OpenVera. The HDL description can be transformed to a logic-level register transfer level (&#x2018;RTL&#x2019;) description, a gate-level description, a layout-level description, or a mask-level description. Each lower representation level that is a more detailed description adds more useful detail into the design description, for example, more details for the modules that include the description. The lower levels of representation that are more detailed descriptions can be generated by a computer, derived from a design library, or created by another design automation process. An example of a specification language at a lower level of representation language for specifying more detailed descriptions is SPICE, which is used for detailed descriptions of circuits with many analog components. Descriptions at each level of representation are enabled for use by the corresponding systems of that layer (e.g., a formal verification system). A design process may use a sequence depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The processes described by be enabled by EDA products (or EDA systems).</p><p id="p-0082" num="0081">During system design <b>614</b>, functionality of an integrated circuit to be manufactured is specified. The design may be optimized for desired characteristics such as power consumption, performance, area (physical and/or lines of code), and reduction of costs, etc. Partitioning of the design into different types of modules or components can occur at this stage.</p><p id="p-0083" num="0082">During logic design and functional verification <b>616</b>, modules or components in the circuit are specified in one or more description languages and the specification is checked for functional accuracy. For example, the components of the circuit may be verified to generate outputs that match the requirements of the specification of the circuit or system being designed. Functional verification may use simulators and other programs such as testbench generators, static HDL checkers, and formal verifiers. In some embodiments, special systems of components referred to as &#x2018;emulators&#x2019; or &#x2018;prototyping systems&#x2019; are used to speed up the functional verification.</p><p id="p-0084" num="0083">During synthesis and design for test <b>618</b>, HDL code is transformed to a netlist. In some embodiments, a netlist may be a graph structure where edges of the graph structure represent components of a circuit and where the nodes of the graph structure represent how the components are interconnected. Both the HDL code and the netlist are hierarchical articles of manufacture that can be used by an EDA product to verify that the integrated circuit, when manufactured, performs according to the specified design. The netlist can be optimized for a target semiconductor manufacturing technology. Additionally, the finished integrated circuit may be tested to verify that the integrated circuit satisfies the requirements of the specification.</p><p id="p-0085" num="0084">During netlist verification <b>620</b>, the netlist is checked for compliance with timing constraints and for correspondence with the HDL code. During design planning <b>622</b>, an overall floor plan for the integrated circuit is constructed and analyzed for timing and top-level routing.</p><p id="p-0086" num="0085">During layout or physical implementation <b>624</b>, physical placement (positioning of circuit components such as transistors or capacitors) and routing (connection of the circuit components by multiple conductors) occurs, and the selection of cells from a library to enable specific logic functions can be performed. As used herein, the term &#x2018;cell&#x2019; may specify a set of transistors, other components, and interconnections that provides a Boolean logic function (e.g., AND, OR, NOT, XOR) or a storage function (such as a flipflop or latch). As used herein, a circuit &#x2018;block&#x2019; may refer to two or more cells. Both a cell and a circuit block can be referred to as a module or component and are enabled as both physical structures and in simulations. Parameters are specified for selected cells (based on &#x2018;standard cells&#x2019;) such as size and made accessible in a database for use by EDA products.</p><p id="p-0087" num="0086">During analysis and extraction <b>626</b>, the circuit function is verified at the layout level, which permits refinement of the layout design. During physical verification <b>628</b>, the layout design is checked to ensure that manufacturing constraints are correct, such as DRC constraints, electrical constraints, lithographic constraints, and that circuitry function matches the HDL design specification. During resolution enhancement <b>630</b>, the geometry of the layout is transformed to improve how the circuit design is manufactured.</p><p id="p-0088" num="0087">During tape-out, data is created to be used (after lithographic enhancements are applied if appropriate) for production of lithography masks. During mask data preparation <b>632</b>, the &#x2018;tape-out&#x2019; data is used to produce lithography masks that are used to produce finished integrated circuits.</p><p id="p-0089" num="0088">A storage subsystem of a computer system (such as computer system <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>) may be used to store the programs and data structures that are used by some or all of the EDA products described herein, and products used for development of cells for the library and for physical and logical design that use the library.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example machine of a computer system <b>700</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative implementations, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the Internet. The machine may operate in the capacity of a server or a client machine in client-server network environment, as a peer machine in a peer-to-peer (or distributed) network environment, or as a server or a client machine in a cloud computing infrastructure or environment.</p><p id="p-0091" num="0090">The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.</p><p id="p-0092" num="0091">The example computer system <b>700</b> includes a processing device <b>702</b>, a main memory <b>704</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM), a static memory <b>706</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device <b>718</b>, which communicate with each other via a bus <b>730</b>.</p><p id="p-0093" num="0092">Processing device <b>702</b> represents one or more processors such as a microprocessor, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>702</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>702</b> may be configured to execute instructions <b>726</b> for performing the operations and steps described herein.</p><p id="p-0094" num="0093">The computer system <b>700</b> may further include a network interface device <b>708</b> to communicate over the network <b>720</b>. The computer system <b>700</b> also may include a video display unit <b>710</b> (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device <b>712</b> (e.g., a keyboard), a cursor control device <b>714</b> (e.g., a mouse), a graphics processing unit <b>722</b>, a signal generation device <b>716</b> (e.g., a speaker), graphics processing unit <b>722</b>, video processing unit <b>728</b>, and audio processing unit <b>732</b>.</p><p id="p-0095" num="0094">The data storage device <b>718</b> may include a machine-readable storage medium <b>724</b> (also known as a non-transitory computer-readable medium) on which is stored one or more sets of instructions <b>726</b> or software embodying any one or more of the methodologies or functions described herein. The instructions <b>726</b> may also reside, completely or at least partially, within the main memory <b>704</b> and/or within the processing device <b>702</b> during execution thereof by the computer system <b>700</b>, the main memory <b>704</b> and the processing device <b>702</b> also constituting machine-readable storage media.</p><p id="p-0096" num="0095">In some implementations, the instructions <b>726</b> include instructions to implement functionality corresponding to the present disclosure. While the machine-readable storage medium <b>724</b> is shown in an example implementation to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine and the processing device <b>702</b> to perform any one or more of the methodologies of the present disclosure. The term &#x201c;machine-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.</p><p id="p-0097" num="0096">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm may be a sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Such quantities may take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. Such signals may be referred to as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0098" num="0097">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the present disclosure, it is appreciated that throughout the description, certain terms refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.</p><p id="p-0099" num="0098">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the intended purposes, or it may include a computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0100" num="0099">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various other systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.</p><p id="p-0101" num="0100">The present disclosure may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory devices, etc.</p><p id="p-0102" num="0101">In the foregoing disclosure, implementations of the disclosure have been described with reference to specific example implementations thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of implementations of the disclosure as set forth in the following claims. Where the disclosure refers to some elements in the singular tense, more than one element can be depicted in the figures and like elements are labeled with like numerals. The disclosure and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of using on-chip circuitry to test a memory of a chip, the method comprising:<claim-text>in a capture stage, receiving, at a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory of the chip, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one;</claim-text><claim-text>in the capture stage, passing the values from each respective first stage latch through compression logic of the first n-bit compression structure to output a single compressed address value, and providing the single compressed address value to a second stage latch of the first n-bit compression structure; and</claim-text><claim-text>in a testing stage, comparing the single compressed address value of the second stage latch of the first n-bit compression structure, as output from the first n-bit compression structure, to a desired value to determine whether an interface to the memory is operating as desired.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein n has a value of four.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>in the capture stage for capturing a value of a particular latch of the four first stage latches, setting values of the remaining three latches of the four first stage latches to 0, such that an output of a NAND gate of the four-bit compression structure, which is the single compressed address value, matches the value of the particular latch, the particular latch being connected to a particular memory address of the memory; and</claim-text><claim-text>in the testing stage for testing an interface to the particular memory address of the memory, comparing the value of the second stage latch of the four-bit compression structure, as output from the four-bit compression structure, to a known correct value of the particular memory address to determine whether the interface to the particular memory address is operating as desired.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>in the capture stage, passing the single compressed address value from a first multiplexer to the second stage latch;</claim-text><claim-text>switching from the capture stage to a scan stage based on another input into the first multiplexer; and</claim-text><claim-text>after switching from the capture stage to the scan stage passing a value received on the other input into the first multiplexer to the second stage latch.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising, after switching from the capture stage to the scan stage, passing the previously stored single compressed address value from the second stage latch to a latch of a second four-bit compression structure.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, further comprising switching from the capture stage to the scan stage in dependence upon a scan enable (SE) signal of the chip.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>in the capture stage for capturing a value of a particular latch of the four first stage latches, setting values of the remaining three latches of the four first stage latches to 1, such that an output of a NOR gate of the four-bit compression structure, which is the single compressed address value, matches the value of the particular latch, the particular latch being connected to a particular memory address of the memory; and</claim-text><claim-text>in the testing stage for testing an interface to the particular memory address of the memory, comparing the value of the second stage latch of the four-bit compression structure, as output from the four-bit compression structure, to a known correct value of the particular memory address to determine whether the interface to the particular memory address is operating as desired.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>in a scan stage, passing the value of the second stage latch of the first n-bit compression structure to a latch of a second n-bit compression structure; and</claim-text><claim-text>in the capture stage, receiving, at the second n-bit compression structure including n first stage latches corresponding to each bit of the second n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch, of the second n-bit compression structure, receives a respective value from a memory address of the memory, n being an integer greater than one.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising, in the testing stage, comparing the value of the second stage latch of the second n-bit compression structure, as output from the second n-bit compression structure, to a desired value to determine whether the memory is operating as desired.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A system for testing a memory of a chip, the system comprising:<claim-text>a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, the first n-bit compression structure being configured to receive, in a capture stage, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one,</claim-text><claim-text>wherein the first n-bit compression structure further includes compression logic and a second stage latch, such that, in the capture stage, the values are passed from each respective first stage latch through the compression logic to output a single compressed address value and the single compressed address value is provided to the second stage latch.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising testing logic configured to, in a testing stage, compare the value of the second stage latch of the first n-bit compression structure, as output from the first n-bit compression structure, to a value to determine whether an interface to the memory is operating as desired.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein n has a value of four.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a first NOR gate connected to outputs of a first two of the four first stage latches and configured to, in the capture stage, receive values from a first two of four first stage latches as inputs;</claim-text><claim-text>a second NOR gate connected to outputs of a second two of the four first stage latches and configured to, in the capture stage, receive values from a second two of the four first stage latches as inputs;</claim-text><claim-text>a NAND gate having inputs connected to outputs of the first and second NOR gates and configured to, in the capture stage, receive an output of the first and second NOR gates as the single compressed value; and</claim-text><claim-text>a first multiplexer connected to an output of the NAND gate and configured to receive the output of the NAND gate.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a first NAND gate connected to outputs of a first two of four first stage latches and configured to, in the capture stage, receive values from the first two of the four first stage latches as inputs;</claim-text><claim-text>a second NAND gate connected to outputs of a second two of the four first stage latches and configured to, in the capture stage, receive values from the second two of the four first stage latches as inputs;</claim-text><claim-text>a NOR gate having inputs connected to outputs of the first and second NAND gates and configured to, in the capture stage, receive values output from the first and second NAND gates as the single compressed address value; and</claim-text><claim-text>a first multiplexer connected to an output of the NOR gate and configured to receive the single compressed address value output from the NOR gate.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a first XOR gate connected to outputs of a first two of four first stage latches and configured to, in the capture stage, receive values from the first two of the four first stage latches as inputs;</claim-text><claim-text>a second XOR gate connected to outputs of a second two of the four first stage latches and configured to, in the capture stage, receive values from the second two of the four first stage latches as inputs;</claim-text><claim-text>a NAND gate having inputs connected to outputs of the first and second XOR gates and configured to, in the capture stage, receive values output from the first and second XOR gates as the single compressed address value; and</claim-text><claim-text>a first multiplexer connected to an output of the XOR gate and configured to receive the single compressed address value output from the XOR gate.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a first multiplexer connected to a first latch of four first stage latches, the first multiplexer receiving (i) a first input as a scan in (SI) signal, (ii) a second input as a value of a first memory address of the memory and (iii) a third input as a scan enable (SE) signal that dictates whether the first four-bit compression structure is in the capture stage or the scan stage;</claim-text><claim-text>a first OR gate connected to a second latch of the four first stage latches, the first OR gate receiving (i) a first input as the SE signal that controls operation of the first multiplexer and (ii) a second input as a value of a second memory address of the memory;</claim-text><claim-text>a second OR gate connected to a third latch of the four first stage latches, the second OR gate receiving (i) a first input as the SE signal that controls the operation of the first multiplexer and (ii) a second input as a value of a third memory address of the memory; and</claim-text><claim-text>a third OR gate connected to a fourth latch of the four first stage latches, the third OR gate receiving (i) a first input as the SE signal that controls operation of the first multiplexer and (ii) a second input as a value of a fourth memory address of the memory.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a fourth NOR gate connected to outputs of a first two of the four first stage latches and configured to, in the capture stage, receive values from the first two of the four first stage latches as inputs;</claim-text><claim-text>a fifth NOR gate connected to outputs of a second two of the four first stage latches and configured to, in the capture stage, receive values from the second two of the four first stage latches as inputs; and</claim-text><claim-text>a NAND gate having inputs connected to outputs of the fourth and fifth NOR gates and configured to, in the capture stage, receive an output from the fourth and fifth NOR gates as the single compressed address value and pass the single compressed address value to the second stage latch.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a first NAND gate connected to outputs of a first two of the four first stage latches and configured to, in the capture stage, receive values from the first two of the four first stage latches as inputs;</claim-text><claim-text>a second NAND gate connected to outputs of a second two of the four first stage latches and configured to, in the capture stage, receive values from the second two of the four first stage latches; and</claim-text><claim-text>a fourth NOR gate having inputs connected to outputs of the first and second NAND gates and configured to, in the capture stage, receive an output from the first and second NAND gates as the single compressed address value and pass the single compressed address value to the second stage latch.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>,<claim-text>wherein the four-bit compression structure includes:<claim-text>a first XOR gate connected to outputs of a first two of the four first stage latches and configured to, in the capture stage, receive values from the first two of the four first stage latches as inputs;</claim-text><claim-text>a second XOR gate connected to outputs of a second two of the four first stage latches and configured to, in the capture stage, receive values from the second two of the four first stage latches; and</claim-text><claim-text>a NAND gate having inputs connected to outputs of the first and second XOR gates and configured to, in the capture stage, receive an output from the first and second XOR gates as the single compressed address value and pass the single compressed address value to the second stage latch.</claim-text></claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer readable medium comprising stored instructions for testing a memory of a chip, the instructions, when executed by a processor, causing the processor to:<claim-text>in a capture stage, receiving, at a first n-bit compression structure including n first stage latches corresponding to each bit of the first n-bit compression structure, a value at each respective first stage latch for each of n memory addresses of the memory, such that each respective first stage latch receives a respective value from a memory address of the memory, n being an integer greater than one; and</claim-text><claim-text>in the capture stage, passing the values from each respective first stage latch through compression logic of the first n-bit compression structure to output a single compressed address value, providing the single compressed address value to a second stage latch of the first n-bit compression structure.</claim-text></claim-text></claim></claims></us-patent-application>