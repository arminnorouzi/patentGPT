<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004541A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004541</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17410234</doc-number><date>20210824</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="regional"><country>EP</country><doc-number>21182689.6</doc-number><date>20210630</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>21</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2219</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2358</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>1453</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>256</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>219</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">COMPUTER-IMPLEMENTED METHOD FOR DATABASE MANAGEMENT, COMPUTER PROGRAM PRODUCT AND DATABASE SYSTEM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SAP SE</orgname><address><city>Walldorf</city><country>DE</country></address></addressbook><residence><country>DE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>VOELKER</last-name><first-name>Patrick</first-name><address><city>Mannheim</city><country>DE</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>BOEHM</last-name><first-name>Alexander</first-name><address><city>Schwetzingen</city><country>DE</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>ANDREI</last-name><first-name>Mihnea</first-name><address><city>Issy les Moulineaux</city><country>FR</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>ALBERTI</last-name><first-name>Johannes</first-name><address><city>San Ramon</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented method for database management is provided. The method comprises: receiving, from a client device, first data to be stored in a database system that comprises first data storage configured to store a data table and a deletion history table; storing the first data in second data storage that is external to the database system and that is in communication with the database system via a network; obtaining a link that enables access, via the network, to the first data stored in the second data storage; storing the link in the data table; and performing a deletion operation of the first data, in response to a request from the client device to delete the first data from the database system, wherein the deletion operation comprises: deleting the link from the data table without deleting the first data from the second data storage; and storing the link in the deletion history table with a timestamp corresponding to a point in time when the link is deleted from the data table.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="113.79mm" wi="158.75mm" file="US20230004541A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="224.11mm" wi="161.29mm" orientation="landscape" file="US20230004541A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="169.67mm" wi="85.43mm" file="US20230004541A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="261.20mm" wi="174.16mm" orientation="landscape" file="US20230004541A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="185.17mm" wi="92.54mm" file="US20230004541A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="159.17mm" wi="92.63mm" file="US20230004541A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="188.21mm" wi="93.90mm" file="US20230004541A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="257.13mm" wi="170.43mm" orientation="landscape" file="US20230004541A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="223.60mm" wi="177.55mm" orientation="landscape" file="US20230004541A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="177.80mm" wi="160.44mm" orientation="landscape" file="US20230004541A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="169.25mm" wi="159.09mm" orientation="landscape" file="US20230004541A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="229.36mm" wi="162.64mm" orientation="landscape" file="US20230004541A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority to European Publication No. 21182689.6, filed Jun. 30, 2021, the contents of which are incorporated by reference herein for all purposes.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A database may store different types and sizes of data. For example, some data stored in a database may include merely a numerical value and/or text data indicating a piece of information. Other data stored in a database may include large object data containing, for instance, image, audio and/or video data, which often has a larger data size compared to a mere numerical value or text data.</p><p id="p-0004" num="0003">In some circumstances, storing and managing different types and sizes of data in relational data tables in a relational database may undermine performance of the database. Further, depending on the size and access frequency of data with different types, using the database for all kinds of data in the same manner may lead to suboptimal costs. Further, as the amount of data stored in a database increases, the size of backup files for the database may also increase. This may lead to increase of costs and/or time for related database maintenance operations (e.g., backup/restore).</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">According to an aspect, the problem relates to enabling efficient usage of data storage for a database system, while ensuring data integrity and data consistency.</p><p id="p-0006" num="0005">The problem is solved by the features disclosed by the independent claims. Further exemplary embodiments are defined by the dependent claims.</p><p id="p-0007" num="0006">According to an aspect, a computer-implemented method for database management is provided. The method comprises:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0007">receiving, from a client device, first data to be stored in a database system that comprises first data storage configured to store a data table and a deletion history table;</li>        <li id="ul0002-0002" num="0008">storing the first data in second data storage that is external to the database system and that is in communication with the database system via a network;</li>        <li id="ul0002-0003" num="0009">obtaining a link that enables access, via the network, to the first data stored in the second data storage;</li>        <li id="ul0002-0004" num="0010">storing the link in the data table; and</li>        <li id="ul0002-0005" num="0011">performing a deletion operation of the first data, in response to a request from the client device to delete the first data from the database system,</li>        <li id="ul0002-0006" num="0012">wherein the deletion operation comprises:        <ul id="ul0003" list-style="none">            <li id="ul0003-0001" num="0013">deleting the link from the data table without deleting the first data from the second data storage; and</li>            <li id="ul0003-0002" num="0014">storing the link in the deletion history table with a timestamp corresponding to a point in time when the link is deleted from the data table.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0008" num="0015">In the present disclosure, the &#x201c;link&#x201d; to data may be understood as information that defines a location of the data on the network, thereby enabling access to the data. In some exemplary embodiments, the &#x201c;link&#x201d; may include a uniform resource identifier (URI) of the data. In some circumstances, the &#x201c;link&#x201d; may include a compressed version of the URI of the data for more efficient storage in database tables. In the present disclosure, the &#x201c;link&#x201d; may also be referred to as a &#x201c;datalink&#x201d;.</p><p id="p-0009" num="0016">Further, in the present disclosure, the &#x201c;data table&#x201d; may be a relational table comprising rows and columns. Each row may correspond to an object, data relating to which is stored in the data table. Each column may correspond to an attribute of objects. Further, in the present disclosure, an &#x201c;item&#x201d; of the data table may refer to data stored in a specific column of a specific row of the data table.</p><p id="p-0010" num="0017">In various aspects and embodiments described herein, the &#x201c;deletion history table&#x201d; may include information indicating a link of which first data was deleted from the data table in which point in time. In some exemplary embodiments, the deletion history table may include identification information of the first data, the deleted link to the first data and the timestamp of the deletion. The identification information of the first data may include, for example, information identifying the row and column of the data table in which the link to the first data was stored.</p><p id="p-0011" num="0018">According to various aspects and embodiments described herein, the first data is stored in the second data storage that is external to the database system and only the link to the first data stored in the second data storage is stored in the data table in the first data storage comprised in the database system. This can increase storage capacity of the first data storage, which may be particularly advantageous in case, for example, the first data storage provides higher performance (e.g., faster access to data) and, thus, is more expensive, than the second data storage.</p><p id="p-0012" num="0019">Further, according to various aspects and embodiments described herein, when a request is made to delete the first data from the database system, the link to the first data stored in the second data storage is deleted from the data table in the first data storage without deleting the first data from the second data storage and the deleted link is stored in the deletion history table. In other words, the first data is maintained in the second data storage and the link to the first data is recorded in the deletion history table. This may ensure data integrity and enable multi-version concurrency control, which can lead to ensuring data consistency. Moreover, deleting the link to the first data stored in the second data storage from the data table in the first data storage without deleting the first data from the second data storage may require no interaction with the second data storage during the deletion operation. In other words, the deletion operation can be performed with accessing only the first data storage. Thus, the deletion operation may be faster than in case of deleting the first data itself from the second data storage. In addition, concurrent operations may still be able to retrieve the first data from the second data storage, therefore preserving the isolation requirements of a DBMS (database management system) as mandated by the ACID (atomicity, consistency, isolation, durability) principles.</p><p id="p-0013" num="0020">The method according to the above-stated aspect may further comprise:<ul id="ul0004" list-style="none">    <li id="ul0004-0001" num="0000">    <ul id="ul0005" list-style="none">        <li id="ul0005-0001" num="0021">receiving updated first data from the client device;</li>        <li id="ul0005-0002" num="0022">storing the updated first data in the second data storage;</li>        <li id="ul0005-0003" num="0023">obtaining an updated link that enables access, via the network, to the updated first data stored in the second data storage;</li>        <li id="ul0005-0004" num="0024">storing the updated link in the data table; and</li>        <li id="ul0005-0005" num="0025">performing the deletion operation of the first data.</li>    </ul>    </li></ul></p><p id="p-0014" num="0026">As stated above, in the deletion operation of the first data, the first data is not deleted from the second data storage and the link to the (&#x201c;deleted&#x201d;) first data is stored in the deletion history table. Accordingly, also when the first data is updated, the first data before the update may be kept in the second data storage and the link to the first data before the update may be stored in the deletion history table. This can ensure data integrity and data consistency, also with respect to updates of the first data and/or in case of data recovery. Further, for example, even in case multiple users concurrently access the database system, the operations instructed by the multiple users may still be able to retrieve the first data from the second data storage, therefore preserving the isolation requirements of a DBMS as mandated by the ACID principles.</p><p id="p-0015" num="0027">In some exemplary embodiments, the method according to the above-stated aspect may further comprise:<ul id="ul0006" list-style="none">    <li id="ul0006-0001" num="0000">    <ul id="ul0007" list-style="none">        <li id="ul0007-0001" num="0028">receiving second data including data relating to the first data; and</li>        <li id="ul0007-0002" num="0029">storing, in association with the first data, the second data in the data table,</li>        <li id="ul0007-0003" num="0030">wherein a data size of the second data is smaller than a specified threshold value and a data size of the first data is equal to or larger than the specified threshold value.</li>    </ul>    </li></ul></p><p id="p-0016" num="0031">For example, the first data and the second data may be received as data items to be stored in a same row in the data table stored in the first data storage. In such a case, the row of the data table in the first data storage may contain the second data itself and the link to the first data stored in the second data storage.</p><p id="p-0017" num="0032">Further, in some exemplary embodiments, the method according to the above-stated aspect may further comprise:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0000">    <ul id="ul0009" list-style="none">        <li id="ul0009-0001" num="0033">receiving a data item to be stored in the database system;</li>        <li id="ul0009-0002" num="0034">in case a size of the received data item is equal to or larger than a specified threshold value,        <ul id="ul0010" list-style="none">            <li id="ul0010-0001" num="0035">storing the received data item in the second data storage as the first data,</li>            <li id="ul0010-0002" num="0036">obtaining and storing in the data table a link that enables access, via the network, to the received data item stored in the second data storage as the first data; and</li>        </ul>        </li>        <li id="ul0009-0003" num="0037">in case a size of the received data item is less than the specified threshold value, storing the received data item in the data table.</li>    </ul>    </li></ul></p><p id="p-0018" num="0038">In some exemplary embodiments, the first data may include binary large object (BLOB) data. Further, the link may be stored in a column of the data table, where the column is assigned to a remote BLOB (RBLOB) data type.</p><p id="p-0019" num="0039">In the present disclosure, the &#x201c;BLOB&#x201d; may be understood as a collection of binary data stored as a single entity. BLOB data may include, for example, image data, audio data, video data, a combination of image data, audio data, video data and/or text data, binary executable code, etc.</p><p id="p-0020" num="0040">Further, in some exemplary embodiments, the first data storage may comprise a main memory and at least one disk storage device. In such exemplary embodiments, the database system comprising the first data storage may be understood as an in-memory database system that primarily relies on main memory for computer data storage. An example of an in-memory database system may be SAP HANA, e.g., as described in &#x201c;The SAP HANA Database&#x2014;An Architecture Overview&#x201d;, Franz Farber, et al., 2012.</p><p id="p-0021" num="0041">Further, in some exemplary embodiments, the second data storage may comprise cloud storage. The cloud storage may be implemented with cloud computing that is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. A cloud computing environment may have one or more of the following characteristics: multitenancy, performance monitoring, virtual resources that are dynamically assignable to different users according to demand, multiple redundant sites, multiple virtual machines, network accessibility (e.g., via. the Internet) from multiple locations (e.g., via a web browser) and devices (e.g., mobile device or PC).</p><p id="p-0022" num="0042">The cloud storage may be provided by a cloud computing service provider. Examples of cloud storage services may include, but are not limited to, Amazon S3 provided by Amazon, Azur Blob Storage provided by Microsoft, Azure Data Lake provided by Microsoft, Google Cloud Storage provided by Google, etc.</p><p id="p-0023" num="0043">Further, in some exemplary embodiments, the method according to the above-stated aspect further comprises:<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0044">deleting the first data from the second data storage based on:        <ul id="ul0013" list-style="none">            <li id="ul0013-0001" num="0045">a specified maximum retention time of backup data for the database system, and</li>            <li id="ul0013-0002" num="0046">the timestamp of the link stored in the deletion history table.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0024" num="0047">In various embodiments and examples described herein, the &#x201c;specified maximum retention time&#x201d; may be input to the database system by a user. In other words, the user may specify the maximum retention time of backup data for the database system.</p><p id="p-0025" num="0048">Deleting the first data from the second data storage as stated above can promote efficient usage of resources in the second data storage, since the first data that is no longer used by the database system can be deleted from the second data storage.</p><p id="p-0026" num="0049">According to another aspect, a computer program product is provided. The computer program product comprises computer-readable instructions, which, when loaded and executed on a computing system, cause the computing system to perform the method according to any one of the above-stated aspect and exemplary embodiments.</p><p id="p-0027" num="0050">According to yet another aspect, a database system is provided. The database system comprises:<ul id="ul0014" list-style="none">    <li id="ul0014-0001" num="0000">    <ul id="ul0015" list-style="none">        <li id="ul0015-0001" num="0051">at least one processor; and</li>        <li id="ul0015-0002" num="0052">first data storage that is coupled to the at least one processor and that is configured to store a data table and a deletion history table,</li>        <li id="ul0015-0003" num="0053">wherein the at least one processor is configured to:        <ul id="ul0016" list-style="none">            <li id="ul0016-0001" num="0054">receive, from a client device, first data to be stored in the database system;</li>            <li id="ul0016-0002" num="0055">store the first data in second data storage that is external to the database system and that is in communication with the at least one processor via a network;</li>            <li id="ul0016-0003" num="0056">obtain a link that enables access, via the network, to the first data stored in the second data storage;</li>            <li id="ul0016-0004" num="0057">store the link in the data table; and</li>            <li id="ul0016-0005" num="0058">perform a deletion operation of the first data, in response to a request from the client device to delete the first data from the database system,</li>        </ul>        </li>        <li id="ul0015-0004" num="0059">wherein the deletion operation comprises:        <ul id="ul0017" list-style="none">            <li id="ul0017-0001" num="0060">deleting the link from the data table without deleting the first data from the second data storage; and</li>        </ul>        </li>        <li id="ul0015-0005" num="0061">storing the link in the deletion history table with a timestamp corresponding to a point in time when the link is deleted from the data table.</li>    </ul>    </li></ul></p><p id="p-0028" num="0062">In some exemplary embodiments, the at least one processor may be further configured to:<ul id="ul0018" list-style="none">    <li id="ul0018-0001" num="0000">    <ul id="ul0019" list-style="none">        <li id="ul0019-0001" num="0063">receive updated first data from the client device;</li>        <li id="ul0019-0002" num="0064">store the updated first data in the second data storage;</li>        <li id="ul0019-0003" num="0065">obtain an updated link that enables access, via the network, to the updated first data stored in the second data storage;</li>        <li id="ul0019-0004" num="0066">store the updated link in the data table; and</li>        <li id="ul0019-0005" num="0067">perform the deletion operation of the first data.</li>    </ul>    </li></ul></p><p id="p-0029" num="0068">Further, in some exemplary embodiments, the at least one processor may be further configured to:<ul id="ul0020" list-style="none">    <li id="ul0020-0001" num="0000">    <ul id="ul0021" list-style="none">        <li id="ul0021-0001" num="0069">receive second data including data relating to the first data; and</li>        <li id="ul0021-0002" num="0070">store, in association with the first data, the second data in the data table,</li>        <li id="ul0021-0003" num="0071">wherein a data size of the second data is smaller than a specified threshold value and a data size of the first data is equal to or larger than the specified threshold value.</li>    </ul>    </li></ul></p><p id="p-0030" num="0072">In some exemplary embodiments, the second data may comprise one or more numerical values and/or text data.</p><p id="p-0031" num="0073">Further, in some exemplary embodiments, the at least one processor may be further configured to:<ul id="ul0022" list-style="none">    <li id="ul0022-0001" num="0000">    <ul id="ul0023" list-style="none">        <li id="ul0023-0001" num="0074">receive a data item to be stored in the database system;</li>        <li id="ul0023-0002" num="0075">in case a size of the received data item is equal to or larger than a specified threshold value,        <ul id="ul0024" list-style="none">            <li id="ul0024-0001" num="0076">store the received data item in the second data storage as the first data,</li>            <li id="ul0024-0002" num="0077">obtain and store in the data table a link that enables access, via the network, to the received data item stored in the second data storage as the first data; and</li>        </ul>        </li>        <li id="ul0023-0003" num="0078">in case a size of the received data item is less than the specified threshold value, store the received data item in the data table.</li>    </ul>    </li></ul></p><p id="p-0032" num="0079">In the database system according to any one of the above-stated aspect and exemplary embodiments, the first data may include BLOB data. Further, the link may be stored in a column of the data table, the column being assigned to a remote BLOB data type.</p><p id="p-0033" num="0080">In the database system according to any one of the above-stated aspect and exemplary embodiments, the first data storage may comprise a main memory and at least one disk storage device. Further, the second data storage may comprise cloud storage.</p><p id="p-0034" num="0081">Further, in some exemplary embodiments, the at least one processor may be further configured to:<ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0000">    <ul id="ul0026" list-style="none">        <li id="ul0026-0001" num="0082">delete the first data from the second data storage based on:        <ul id="ul0027" list-style="none">            <li id="ul0027-0001" num="0083">a specified maximum retention time of backup data for the database system, and</li>            <li id="ul0027-0002" num="0084">the timestamp of the link stored in the deletion history table.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0035" num="0085">The subject matter described in the application can be implemented as a method or as a system, possibly in the form of one or more computer program products. The subject matter described in the application can be implemented in a data signal or on a machine readable medium, where the medium is embodied in one or more information carriers, such as a CD-ROM, a DVD-ROM, a semiconductor memory, or a hard disk. Such computer program products may cause a data processing apparatus to perform one or more operations described in the application.</p><p id="p-0036" num="0086">In addition, subject matter described in the application can also be implemented as a system including a processor, and a memory coupled to the processor. The memory may encode one or more programs to cause the processor to perform one or more of the methods described in the application. Further subject matter described in the application can be implemented using various machines.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0037" num="0087">Details of one or more implementations are set forth in the exemplary drawings and description below. Other features will be apparent from the description, the drawings, and from the claims. It should be understood, however, that even though embodiments are separately described, single features of different embodiments may be combined to further embodiments.</p><p id="p-0038" num="0088"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a functional block diagram of an exemplary database system comprising an in-memory database.</p><p id="p-0039" num="0089"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a sequence diagram of an exemplary process for updating data in the exemplary database system shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0040" num="0090"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a functional block diagram of an exemplary database system according to the present disclosure.</p><p id="p-0041" num="0091"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a flow diagram of an exemplary process for storing data in the exemplary database system according to the present disclosure.</p><p id="p-0042" num="0092"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a flow diagram of an exemplary process for deleting data in the exemplary database system according to the present disclosure.</p><p id="p-0043" num="0093"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a flow diagram of an exemplary process for updating data in the exemplary database system according to the present disclosure.</p><p id="p-0044" num="0094"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a sequence diagram of an exemplary process for updating data in the exemplary database system according to the present disclosure.</p><p id="p-0045" num="0095"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a flow diagram of an exemplary process for selecting data in the exemplary database system according to the present disclosure.</p><p id="p-0046" num="0096"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a flow diagram of an exemplary process for storing data in an exemplary embodiment.</p><p id="p-0047" num="0097"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a flow diagram of an exemplary process for data operations in the exemplary embodiment.</p><p id="p-0048" num="0098"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an exemplary hardware configuration of a computer that may be used to implement exemplary embodiments and variations as described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0049" num="0099">In the following text, a detailed description of examples will be given with reference to the drawings. It should be understood that various modifications to the examples may be made. In particular, one or more elements of one example may be combined and used in other examples to form new examples.</p><p id="p-0050" num="0100">In-memory databases have been employed in applications where response time is critical. An in-memory database is a database management system that primarily relies on main memory for computer data storage. As compared to database management systems based on a disk storage mechanism, an in-memory database often provides faster access to data.</p><p id="p-0051" num="0101">Accordingly, the term &#x201c;in-memory&#x201d; may mean that data stored in a database is available and stored in main memory, which avoids the performance penalty of disk I/O or network access. Main memory may be directly accessible by one or more CPUs of a computer system, and is sometimes implemented as volatile memory, such as random access memory (RAM) or cache memory. Further, data and/or code (e.g., library functions) may also be stored in main memory in order to facilitate parallelization. Either magnetic disk or solid state drives may be used for permanent persistency, e.g., in case of a power failure or some other catastrophe. An in-memory database may support both row and column storage and may be optimized for column storage (column oriented or columnar), e.g., via dictionary compression. Use of dictionary compression may reduce the number and/or size of database indices and enable data to be loaded into the cache of a processor faster.</p><p id="p-0052" num="0102"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a functional block diagram of an exemplary database system comprising an in-memory database.</p><p id="p-0053" num="0103">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an in-memory database system <b>10</b> may comprise a database <b>100</b> and a backup manager <b>135</b>. The in-memory database system <b>10</b> may support transactions having one or more of the following properties: atomicity, consistency, isolation, durability (ACID).</p><p id="p-0054" num="0104">The database <b>100</b> may comprise an SQL (Structured Query Language) processor <b>102</b>, column store <b>150</b> and persistency <b>160</b>.</p><p id="p-0055" num="0105">The SQL processor <b>102</b> may be configured to receive, from a client device <b>20</b>, instructions specifying SQL operations and perform the specified SQL operations on data stored in the database <b>100</b>.</p><p id="p-0056" num="0106">The column store <b>150</b> may be data storage implemented on main memory. The column store <b>150</b> may include in-memory BLOB data (in other words, BLOB data stored in the main memory), for example.</p><p id="p-0057" num="0107">The persistency <b>160</b> may be data storage implemented on magnetic disk or solid state drives. The persistency <b>160</b> may include disk BLOB data (in other words, BLOB data stored in a disk storage device), for example.</p><p id="p-0058" num="0108">The backup manager <b>135</b> may be configured to manage backups of the database <b>100</b>. For example, the backup manager <b>135</b> may create snapshots of the data stored in the database <b>100</b>, periodically and/or at specified points in time. The backup manager <b>135</b> may use the snapshots to restore the data stored in the database <b>100</b> at a particular point in time, which is specified by the user, for example.</p><p id="p-0059" num="0109">The client device <b>20</b> may be in communication with the in-memory database system <b>10</b> and allow a user to instruct operations of data stored in the database <b>100</b>. The client device <b>20</b> may be implemented by a computing device such as a personal computer, a laptop computer, a tablet computer, a mobile device such as a mobile phone (e.g. smartphone) etc. A database application <b>200</b> may be installed on the client device <b>20</b>. The database application <b>200</b> may be an application that enables a user to configure and operate the in-memory database system <b>10</b>. The database application <b>200</b> may comprise a database client <b>202</b> that communicates with the SQL processor <b>102</b> of the database <b>100</b>.</p><p id="p-0060" num="0110">The database application <b>200</b> and the database <b>100</b> may interact with each other to perform operations on data stored in the database <b>100</b>. As an exemplary operation, <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a sequence diagram of an exemplary process for updating data in the exemplary database system shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the database application <b>200</b> may send, to the database <b>100</b>, a request to update BLOB data stored in the database <b>100</b> (step S<b>1</b>). The request may include the content of the updated BLOB data. In response, the database <b>100</b> may update the BLOB data and return, to the database application <b>20</b>, a message indicating a successful update (step S<b>2</b>).</p><p id="p-0061" num="0111">When storing data in the database <b>100</b>, the data may be stored in the column store <b>150</b>, as long as the column store <b>150</b> has sufficient space for the data. In some examples, a size threshold (e.g., a few kB) for data which can be stored as a single item in the column store <b>150</b> may be specified. In such examples, data within the size threshold may be stored in the column store <b>150</b> and data larger than the size threshold may be stored in the persistency <b>160</b>.</p><p id="p-0062" num="0112">As a specific example, large object data (such as image, audio, video, multimedia data etc.) may be stored in relational tables in the data base <b>100</b> using a specific data type, BLOB. All items stored in a column with the data type &#x201c;BLOB&#x201d; having data sizes exceeding a specified size threshold (e.g., 1 kB) may be held in the persistency <b>160</b> instead of the column store <b>150</b>. This may reduce main memory storage costs, on the one hand, but on the other hand, may increase access latency. Although such disk-based performance is often accepted by users, considering the required high-performance disks underlying in-memory database installations and several operational concerns (e.g., impact of LOBs for system restart, size of backup files containing all LOB data, costs for high-performance storage devices, etc.), further improvements may be desirable.</p><p id="p-0063" num="0113">Accordingly, as will be described below, various aspects and embodiments described herein can provide improved usage of data storage for a database system.</p><heading id="h-0006" level="2">System Architecture</heading><p id="p-0064" num="0114"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a functional block diagram of an exemplary database system according to the present disclosure. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, elements that are identical to those shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are assigned identical reference signs and detailed explanations thereof are not repeated.</p><p id="p-0065" num="0115">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, an in-memory database system <b>10</b>&#x2032; may be in communication not only with the client device <b>20</b> but also with cloud object storage <b>30</b>. The cloud object storage <b>30</b> may be considered as an example of the &#x201c;second data storage&#x201d; (e.g., more specifically, the &#x201c;cloud storage&#x201d; comprised in the &#x201c;second data storage&#x201d;) of the present disclosure. The in-memory database system <b>10</b>&#x2032; may access the cloud object storage <b>30</b> via a network such as the Internet. The cloud object storage <b>30</b> may comprise one or more cloud storage services provided by different providers such as Amazon, Microsoft, Google, etc. At least some data to be stored in the in-memory database system <b>10</b>&#x2032; can be stored in the cloud object storage <b>30</b>.</p><p id="p-0066" num="0116">The in-memory database system <b>10</b>&#x2032; may comprise a database <b>100</b>&#x2032;, a storage gateway <b>130</b> and an RBLOB backup manager <b>140</b>.</p><p id="p-0067" num="0117">The database <b>100</b>&#x2032; may comprise an SQL processor <b>102</b>, an RBLOB store <b>104</b>, a storage gateway connector <b>120</b>, a column store <b>150</b> and a persistency <b>160</b>. The SQL processor <b>102</b>, the column store <b>150</b> and the persistency <b>160</b> may have the same functions as those shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0068" num="0118">It is noted that the column store <b>150</b> and the persistency <b>160</b> may be considered as the &#x201c;first data storage&#x201d; in the present disclosure. The column store <b>150</b> and/or the persistency <b>160</b> may store a data table (not shown) and a deletion history table (not shown). The data table may be a relational table for the data stored and managed by the in-memory database system <b>10</b>&#x2032;. The deletion history table may store history of data items which are deleted from the data table, in particular, deleted datalinks to data stored in the cloud object storage <b>30</b> with timestamps corresponding to points in time when the respective datalinks were deleted from the data table.</p><p id="p-0069" num="0119">The RBLOB store <b>104</b> may be configured to process data to be stored (or data already stored) in the cloud object storage <b>30</b>. In some exemplary embodiments, BLOB data (e.g., an example of the &#x201c;first data&#x201d; in the present disclosure) may be processed by the RBLOB store <b>104</b> and stored in the cloud object storage <b>30</b>. Further, a datalink to the BLOB data stored in the cloud object storage <b>30</b> may be stored in the column store <b>150</b> or the persistency <b>160</b>. The BLOB data may be specified in the data table as a &#x201c;remote BLOB (RBLOB)&#x201d; data type that may be selected during table creation or defined for existing tables using DDL (data definition language) statements. For example, a column having the RBLOB data type may be provided in the data table and data items stored in RBLOB columns may be handled by the RBLOB store <b>104</b>.</p><p id="p-0070" num="0120">The RBLOB store <b>104</b> may comprise an RBLOB engine <b>110</b>, a garbage collector <b>106</b> and an RBLOB cache <b>108</b>.</p><p id="p-0071" num="0121">The RBLOB engine <b>110</b> may be configured to perform operations (e.g., create, read, update, delete, etc.) concerning the data stored (or to be stored) in the cloud object storage <b>30</b>. For example, when storing BLOB data, the RBLOB engine <b>110</b> may receive BLOB data from the client device <b>20</b> via the SQL processor <b>102</b>. The RBLOB engine <b>110</b> may then store the received BLOB data in the cloud object storage <b>30</b> using the storage gateway connector <b>120</b> and the storage gateway <b>130</b>. The storage gateway connector <b>120</b> may be an interface for the RBLOB store <b>104</b> to connect to the storage gateway <b>130</b>. The storage gateway <b>130</b> may be configured to mediate between the database <b>100</b>&#x2032; and the cloud object storage <b>30</b>. For example, the storage gateway <b>130</b> may provide a single interface to the database <b>100</b>&#x2032; for communicating with different cloud storage services comprised in the cloud object storage.</p><p id="p-0072" num="0122">Further, the RBLOB engine <b>110</b> may obtain a datalink (e.g. a URI) to the RBLOB data stored in the cloud object storage <b>30</b> and store the datalink in the column store <b>150</b> or the persistency <b>160</b>. For example, the datalink may be stored in a corresponding column (e.g., RBLOB type column) of a data table stored in the column store <b>150</b> and/or the persistency <b>160</b>. Thus, the content of the RBLOB data may be stored in the cloud object storage <b>30</b> that is external to the in-memory database system <b>10</b>&#x2032; and only the datalink (e.g., a reference to the external storage) may be kept within the database <b>100</b>&#x2032;.</p><p id="p-0073" num="0123">When deleting BLOB data, for example, the RBLOB engine <b>110</b> may delete the datalink in the data table stored in the database <b>100</b>&#x2032; (e.g., in the column store <b>150</b> or the persistency <b>160</b>), without deleting the BLOB data stored in the cloud object storage <b>30</b>. The RBLOB engine <b>110</b> may store, in the deletion history table, the datalink deleted from the data table with a timestamp corresponding to a point in time when the data link is deleted from the data table.</p><p id="p-0074" num="0124">When updating the BLOB data stored in the cloud object storage <b>30</b>, the RBLOB engine <b>110</b> may store the updated BLOB data in the cloud object storage <b>30</b>, via the storage gateway connector <b>120</b> and the storage gateway <b>130</b>, without deleting the older version of the BLOB data before the update. The RBLOB engine <b>110</b> may obtain an updated datalink (e.g., an updated URI) to the updated BLOB data from the cloud object storage <b>30</b> and store the updated datalink in the data table. The RBLOB engine <b>110</b> may delete the datalink to the older version of the BLOB data from the data table and store the deleted datalink in the deletion history table with a timestamp corresponding to the point in time when the datalink was deleted.</p><p id="p-0075" num="0125">Further, the RBLOB engine <b>110</b> may store some BLOB data in the RBLOB cache <b>108</b>. For example, least recently used (LRU) BLOB data and/or most frequently used (MFU) BLOB data may be stored in the RBLOB cache <b>108</b>. The RBLOB cache <b>108</b> may have a configurable capacity. For example, the capacity of the RBLOB cache <b>108</b> may be specified by a user. The use of the RBLOB cache <b>108</b> may improve access latency, as the RBLOB engine <b>110</b> does not need to access the cloud object storage <b>30</b> for the BLOB data stored in the RBLOB cache <b>108</b>.</p><p id="p-0076" num="0126">As stated above, the RBLOB engine <b>110</b> does not delete BLOB data from the cloud object storage <b>30</b> in either case of deleting or updating data. Only the datalink to the BLOB data to be deleted or updated may be deleted from the data table within the database <b>100</b>&#x2032;. Accordingly, in order to prevent the number of different versions of BLOB data stored in the cloud object storage <b>30</b> from keeping increasing, the garbage collector <b>106</b> may be configured to determine which data in the cloud object storage <b>30</b> to delete (or archive) and when. For example, the garbage collector <b>106</b> may delete, via the storage gateway connector <b>120</b> and the storage gateway <b>130</b>, BLOB data stored in the cloud object storage <b>30</b> based on a specified maximum retention time of backup data for the in-memory database system <b>10</b>&#x2032; and on the timestamp of the datalink to the BLOB data stored in the deletion history table. Specifically, the garbage collector <b>106</b> may check whether the BLOB data is old enough to be deleted because, once the remote BLOB data is deleted from the cloud object storage <b>30</b>, a rollback to the point in time when the BLOB data existed is not possible anymore. For example, if the timestamp in the deletion history table stored for the datalink to the BLOB data indicates a point in time before the specified maximum retention time, the garbage collector <b>106</b> may delete the BLOB data from the cloud object storage <b>30</b>. Further, for example, the BLOB data may be considered old enough to be deleted, if the BLOB data do not exist in the youngest (in other words, most recent) database snapshot and were created before the oldest snapshot. The age of the oldest snapshot may depend on the specified maximum retention time. In some examples, instead of relying on the snapshots, all BLOB data the link to which have been deleted before the maximum retention time may be bulk-deleted. The datalinks stored in the deletion history table may be used to delete the actual BLOB data content in the cloud object storage <b>30</b>.</p><p id="p-0077" num="0127">The RBLOB backup manager <b>140</b> may be configured to manage backups of the database <b>100</b>&#x2032;, in particular, backups concerning the BLOB data stored in the cloud object storage <b>30</b>. For example, the RBLOB backup manager <b>135</b> may create snapshots of the data table stored in the database <b>100</b>&#x2032;, periodically and/or at specified points in time. The data table may contain datalinks to BLOB data stored in the cloud object storage <b>30</b>. When restoring backup, the datalinks in the relevant snapshot may be used for accessing the BLOB data stored in the cloud object storage <b>30</b>.</p><p id="p-0078" num="0128">It should be noted that, although the above description of the in-memory database system <b>10</b>&#x2032; shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may focus on handling of BLOB data, the in-memory database system <b>10</b>&#x2032; may also store and manage data other than BLOB data, such as data with a smaller data size than the BLOB data (e.g., numerical values and/or text data). The data other than BLOB data to be stored in the cloud object storage <b>30</b> may be stored in the column store <b>150</b> and/or the persistency <b>160</b>, in a manner analogous to that for the in-memory database system <b>10</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0079" num="0129">The database <b>100</b>&#x2032; may determine which data to store within the database (e.g., in the column store <b>150</b> and/or persistency <b>160</b>) and which data to store in the cloud object storage <b>30</b> based on the type of data received from the client device <b>20</b> as data to be stored. In some exemplary embodiments, the database <b>100</b>&#x2032; may determine that the data is to be treated by the RBLOB store <b>104</b> and stored in the cloud object storage <b>30</b> in case the data has the RBLOB data type as mentioned above. Additionally or alternatively, the database <b>100</b>&#x2032; may determine that data with a data size larger than a specified threshold value (e.g., 1 kB, 10 kB, 50 kB or 100 kB, depending on the circumstances) is to be treated by the RBLOB store <b>104</b> and stored in the cloud object storage <b>30</b>. The data other than that stored in the cloud object storage <b>30</b> may be stored within the database <b>100</b>&#x2032;.</p><p id="p-0080" num="0130">Storing the BLOB data in the cloud object storage <b>30</b> as the in-memory database system <b>10</b>&#x2032; shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as described above may be particularly advantageous in case a relatively large percentage of the whole data to be stored in the database is BLOB data. As a specific (but non-limiting) example, in case of managing data of employees of one or more companies, a database may need to store and manage not only attribute information relating to each employee (e.g., employee ID, first name, last name, position in the company, current salary, salary raise, compensation level, . . . ), which may easily be stored and managed in a relational table, but also data of documents exchanged between the companies and the employees (e.g., PDF of scanned letters, proofs of academic degrees etc., medical certificates, etc.). In some circumstances, audio and/or video data of recording some events involving the companies and the employees might also be stored in the database. In such an example, the percentage of BLOB data including data of documents, audio data and/or video data concerning each employee in the whole data stored in the database may reach up to 90%. Further, although such BLOB data may need to be kept in the database, such BLOB data is often not accessed as frequently as the attribute information relating to each employee. Employing the in-memory database system <b>10</b>&#x2032; as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> to store BLOB data in the cloud object storage <b>30</b> for such application of employee data management may provide efficient usage of data storage, while keeping data integrity and data consistency.</p><heading id="h-0007" level="2">Exemplary Operations</heading><p id="p-0081" num="0131"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a flow diagram of an exemplary process for storing data in the exemplary database system according to the present disclosure. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be started in response to a request received by the database <b>100</b>&#x2032; from the client device <b>20</b> to store BLOB data in the database <b>100</b>&#x2032;, for example.</p><p id="p-0082" num="0132">In step S<b>10</b>, the in-memory database system <b>10</b> may receive BLOB data (e.g., &#x201c;first data&#x201d; in the present disclosure) to be stored in the database <b>100</b>. The BLOB data may be included in the request from the client device <b>20</b> to store the BLOB data. The BLOB data may be, for example, indicated as the remote BLOB (RBLOB) type. Subsequently, in step S<b>12</b>, the RBLOB engine <b>110</b> may store the received BLOB data in the cloud object storage <b>30</b> via the storage gateway connector <b>120</b> and the storage gateway <b>130</b>. Further, in step S<b>14</b>, the RBLOB engine <b>110</b> may obtain a datalink to the BLOB data stored in the cloud object storage <b>30</b> via the storage gateway connector <b>120</b> and the storage gateway <b>130</b>. Finally, in step S<b>16</b>, the RBLOB engine <b>110</b> may store the datalink in the data table that is stored in the column store <b>150</b> and/or the persistency <b>160</b>. After step S<b>16</b>, the exemplary process shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may end.</p><p id="p-0083" num="0133"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a flow diagram of an exemplary process for deleting data in the exemplary database system according to the present disclosure. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be started, for example, in response to a request from the client device <b>20</b> to delete specific BLOB data.</p><p id="p-0084" num="0134">In step S<b>20</b>, the RBLOB engine <b>110</b> may delete, from the data table, the datalink to the BLOB data to be deleted, without deleting the BLOB data itself from the cloud object storage <b>30</b>. Further, in step S<b>22</b>, the RBLOB engine <b>110</b> may store the deleted datalink in the deletion history table with a timestamp corresponding to a point in time when the datalink was deleted from the data table. After step S<b>22</b>, the exemplary process shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may end.</p><p id="p-0085" num="0135"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a flow diagram of an exemplary process for updating data in the exemplary database system according to the present disclosure. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> may be started, for example, in response to a request from the client device <b>20</b> to update specific BLOB data.</p><p id="p-0086" num="0136">In step S<b>30</b>, the RBLOB engine <b>110</b> may receive updated BLOB data. The updated BLOB data may be included in the request from the client device <b>20</b> to update the BLOB data. In step S<b>32</b>, the RBLOB engine <b>110</b> may store the updated BLOB data in the cloud object storage <b>30</b> via the storage gateway connector <b>120</b> and the storage gateway <b>130</b>. Subsequently, in step S<b>34</b>, the RBLOB engine <b>110</b> may obtain an updated datalink to the updated BLOB data via the storage gateway connector <b>120</b> and the storage gateway <b>130</b>. Further, in step S<b>36</b>, the RBLOB engine <b>110</b> may delete, from the data table, the existing datalink to the BLOB data before the update. The RBLOB engine <b>110</b> may then store the deleted datalink in the deletion history table in step S<b>38</b>. Further, in step S<b>40</b>, the RBLOB engine <b>110</b> may store the updated datalink in the data table. After step S<b>40</b>, the exemplary process shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> may end.</p><p id="p-0087" num="0137"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a sequence diagram of an exemplary process for updating data in the exemplary database system according to the present disclosure. The sequence diagram shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be considered as an example of detailed sequence for performing the exemplary process shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0088" num="0138">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the database application <b>200</b> of the client device <b>20</b> may send updated BLOB data (step S<b>300</b>) to the RBLOB engine <b>110</b>. The RBLOB engine <b>110</b> may create a new file with content provided by the database application (step S<b>302</b>) and send an instruction to insert the new RBLOB file to the storage gateway connector <b>120</b> (step S<b>320</b>). The storage gateway connector <b>120</b> may then send an upload instruction including the new RBLOB file to the storage gateway <b>130</b> (step S<b>322</b>) and the storage gateway <b>130</b> may forward the upload instruction to the cloud object storage <b>30</b> (step S<b>324</b>). The new RBLOB file may then be uploaded to the cloud object storage <b>30</b> and the cloud object storage <b>30</b> may return, to the storage gateway <b>130</b>, a reference (e.g., datalink) to the updated BLOB data (step S<b>340</b>). The storage gateway <b>130</b> may forward the received reference to the storage gateway connector <b>120</b> (step S<b>342</b>) and the storage gateway connector <b>120</b> may send the new datalink to the RBLOB engine <b>110</b> (step S<b>344</b>). The RBLOB engine <b>110</b> may delete the existing datalink from the data table (step S<b>360</b>) and record the deleted datalink in the deletion history table (step S<b>380</b>). Further, the RBLOB engine <b>110</b> may store the received new datalink in the data table (step S<b>400</b>), which may result in a new reference to be stored in the RBLOB column of the data table (step S<b>402</b>). Finally, the RBLOB engine <b>110</b> may send a message indicating successful update to the database application <b>200</b> (step S<b>404</b>).</p><p id="p-0089" num="0139"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a flow diagram of an exemplary process for selecting data in the exemplary database system according to the present disclosure. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be started, for example, in response to a request from the client device <b>20</b> to select specific BLOB data.</p><p id="p-0090" num="0140">In step S<b>50</b>, the RBLOB engine <b>110</b> may receive an instruction to select specific BLOB data. The instruction may include identification information of the BLOB data, for example, information identifying the row and column of the data table, in which the data item corresponding to the BLOB data is stored.</p><p id="p-0091" num="0141">The RBLOB engine <b>110</b> may check if the specific BLOB data is cached in the RBLOB cache <b>108</b>. If yes, the RBLOB engine <b>110</b> may obtain the BLOB data from the RBLOB cache <b>108</b> in step S<b>52</b>.</p><p id="p-0092" num="0142">If not, the RBLOB engine <b>110</b> may check whether the datalink to the specific BLOB data is stored in-memory (e.g., in the column store <b>150</b>) or on disk (e.g., in the persistency <b>160</b>). In case the datalink is stored in-memory, the RBLOB engine <b>110</b> may obtain the datalink from the column store <b>150</b> in step S<b>54</b>. In case, on the other hand, the datalink is stored on disk, the RBLOB engine <b>110</b> may obtain the datalink from the persistency <b>160</b>.</p><p id="p-0093" num="0143">After obtaining the datalink either from the column store <b>150</b> or the persistency <b>160</b>, the RBLOB engine <b>110</b> may connect to storage gateway <b>130</b> using the storage gateway connector <b>120</b>. Subsequently, in step S<b>60</b>, the RBLOB engine <b>110</b> may obtain the BLOB data from the cloud object storage <b>30</b>. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may end after step S<b>60</b>.</p><p id="p-0094" num="0000">Exemplary Implementation with SAP HANA Cloud</p><p id="p-0095" num="0144">The in-memory database system <b>10</b>&#x2032; as described above with reference to <figref idref="DRAWINGS">FIGS. <b>3</b> to <b>8</b></figref> may be implemented with SAP HANA Cloud. SAP HANA Cloud is a fully managed in-memory cloud database as a service (DBaaS) offered by SAP. The following provides description on the exemplary implementation of the in-memory database system <b>10</b>&#x2032; with SAP HANA Cloud.</p><p id="p-0096" num="0145">The existing HANA system knows Disk LOB that is stored in a disk storage device (see e.g., the persistency <b>160</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) and Hybrid LOB that is stored in main memory (e.g., the column store <b>150</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) in case the data size is within a size threshold (e.g., 1 kB). As a result, the existing LOB interface can distinguish between the persistence layer and in-memory columns. This generality may be leveraged for extending the LOB component with the RBLOB store <b>104</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, which in this section may be referred to as &#x201c;HANA BLOB Store (HBS)&#x201d;. HBS may enable HANA to store Remote BLOBs (RBLOBs), or rather to delegate the storage of LOB data to a remote object store (e.g., the cloud object storage <b>30</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0097" num="0146">The HBS may interact with File Service's Storage Gateway (e.g., the storage gateway <b>130</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>; hereinafter, referred to as &#x201c;Storage Gateway&#x201d;). The following provides details on how HANA may use the current API of the Storage Gateway when manipulating RBLOB data via SQL commands. After defining the naming convention for RBLOB data, the envisioned use cases exemplify the interaction between HBS and the Storage Gateway.</p><p id="p-0098" num="0147">Naming Convention for RBLOBs</p><p id="p-0099" num="0148">RBLOB_NAME:</p><p id="p-0100" num="0149">FILE_CONTAINER+/$SCHEMA_ID/$TABLE_ID/$ATTRIBUTE_ID/$RBLOB_ID</p><p id="p-0101" num="0150">File container: The Storage Gateway may provide file containers as physical storage unit. These file containers may be used to group related database artifacts and as abstraction layer for authentication and/or authorization to object stores. In so doing, they may equip the Storage Gateway with a multi-tenant functionality. In other words, each tenant can use its own file container. In order to operate on a tenant's RBLOB data, HANA then may use the HDL (HANA Data Lake) Operator and provide a tenant's (user-) name in order to obtain a client certificate for authentication and authorization. Consequently, a mapping between a tenant and its file container may exist and no $TENANT_ID needs to be included in the above-stated naming convention. Moreover, RBLOB data may be prefixed with their tenant's name in any case. This is because file containers may be implemented by creating namespaces in the underlying object stores. After the creation of a file container, all related data uploaded to the file container may be prefixed with a tenant's name implicitly.</p><p id="p-0102" num="0151">The most fine-grained artifact in HANA to create a file container for may be schemas. For every artifact smaller than a schema, e.g., tables and partitions, no namespace shall be created by means of file containers. After all, file containers may have their own lifecycle management which may be expensive.</p><p id="p-0103" num="0152">Database structure: Object stores may be key value stores and as such are not necessarily hierarchical. A hierarchy may be helpful for querying sets of related objects, though. Therefore, artificial hierarchy levels may be introduced and all RBLOB data may follow above naming convention. This naming convention may reflect a database's structure of schemas, tables, and attributes (see $SCHEMA_ID, $TABLE_ID, $ATTRIBUTE_ID). Mapping this structure to the Storage Gateway may facilitate the identification of related objects. As can be seen, HANA's unique IDs may be used in the above-stated naming convention because IDs may prevent that RBLOB data need to be renamed in the object store when copied (e.g., $SCHEMA_ID). After all, in case of a file copy, a new object with a new ID may be created.</p><p id="p-0104" num="0153">Garbage Collection of RBLOBs</p><p id="p-0105" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>RBLOB_DELETION_HISTORY table</entry></row><row><entry>RBLOB_DELETION_HISTORY</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="91pt" align="left"/><tbody valign="top"><row><entry/><entry>deleted_at</entry><entry>timestamp</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>schema_id</entry><entry>int</entry></row><row><entry/><entry>table_id</entry><entry>int</entry></row><row><entry/><entry>attribute_id</entry><entry>int</entry></row><row><entry/><entry>rblob_id</entry><entry>int</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0106" num="0154">New HANA Table: In case RBLOB data are deleted by HANA users, the actual LOB content in the remote object store cannot be deleted immediately. After all, HANA users can choose to do a point-in-time recovery and if the remote LOB content was deleted, the reference in HANA would be invalid after a rollback. This may mean that as soon as remote LOB data items are deleted, a rollback to the point in time when these data items existed is not possible anymore. However, remote LOB data cannot be kept forever and need to be garbage-collected at some point in time (e.g., due to cost reasons). To this end, their deletion date may be stored in HANA in the new table RBLOB_DELETION_HISTORY (see Table 1 above). Hence, this may table contain all data items which were deleted in HANA but persist in the object store.</p><p id="p-0107" num="0155">The above approach may result in &#x201c;orphaned&#x201d; RBLOB data items that are neither referenced in HANA anymore nor stored in the RBLOB_DELETION_HISTORY-table but exist in the Storage Gateway. To this end, a periodic job could be run that scans all file containers for files which are neither part of the RBLOB_DELETION_HISTORY-table nor referenced in HANA. As such job may have a presumably long runtime, it may only be executed infrequently.</p><p id="p-0108" num="0156">As shown above, the deletion date, deleted_at, may be stored as TIMESTAMP in HANA (i.e., YYY-MM-DD HH24:MI:SS.FF7) and indicate the point in time, a file has been deleted by a user. Consequently, a record in this table may be generated after the commit of a DELETE transaction in HANA (cf. UC6: DELETE RBLOB (locally)). In order to decide whether data which had been marked as deleted in the table RBLOB_DELETION_HISTORY are old enough to be actually deleted in the object store, deleted_at may be compared to the earliest point in time users can recover their data to. As soon as the timestamp stored in deleted_at is smaller (e.g., before) this point in time, remote LOB content can be deleted.</p><p id="p-0109" num="0157">In order to reduce the large memory footprint that might come along with the introduction of the RBLOB_DELETION_HISTORY-table, HBS may leverage NSE (Native Storage Extension) and specify certain warm data in this table as page-loadable. As this table could still become a bottleneck, data may be further hash-partitioned on their deleted_at-timestamp. One could also consider shipping HBS with a pre-partitioned RBLOB_DELETION_HISTORY-table.</p><p id="p-0110" num="0158">The earliest point in time users can recover their data to may need to be input by the customer. After all, HANA can only know this point in time for log backups but not for data backups. Therefore, customers may need to execute a TRUNCATE-statement containing said timestamp. In case customers do never delete their backups, the RBLOB_DELETION_HISTORY-table may grow extremely large and a data aging-concept may become necessary to reduce the cost for storing potentially &#x201c;useless&#x201d; data, or rather data the customer does not pay for. Should NSE not suffice, data from the RBLOB_DELETION_HISTORY-table could also be offloaded to cloud storages. Garbage Collection: HANA may run an asynchronous task in order to identify RBLOB content that can be deleted in object stores, e.g. to compare deleted_at of all entries in RBLOB_DELETION_HISTORY with the earliest possible recovery point. Once identified, UC9: DELETE RBLOB (remotely) may be executed for each record.</p><p id="p-0111" num="0159">Use Cases&#x2014;Overview&#x2014;</p><p id="p-0112" num="0160">In case a customer stores her first RBLOB in the application that uses HANA (see e.g., UC4: INSERT RBLOB), HBS may need not only to connect to the Storage Gateway but also to create a file container. Thus, two scenarios may need to be differentiated, when inserting RBLOBs. In this regard, <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a flow diagram of an exemplary process for storing data in the exemplary implementation. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be performed in response to a request from the client device <b>20</b> to store BLOB data in HANA. The exemplary process shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> assumes that one connection per tenant is used.</p><p id="p-0113" num="0161">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, in step S<b>70</b>, the user may store RBLOB in the database application <b>200</b> running on HANA. In step S<b>72</b>, a determination may be made as to whether the RBLOB is the first RBLOB data to be stored for the user. If the RBLOB data is the first RBLOB data for the user (yes in step S<b>72</b>), the RBLOB engine <b>110</b> may connect to the storage gateway <b>130</b> in step S<b>76</b>. After step S<b>76</b>, a file container for the user is created in step S<b>78</b>.</p><p id="p-0114" num="0162">In case the RBLOB data is not the first RBLOB data for the user (no in step S<b>72</b>) or after step S<b>78</b>, the RBLOB engine <b>110</b> may perform an operation to insert RBLOB in step S<b>74</b>.</p><p id="p-0115" num="0163">For operations, UC3: SELECT RBLOB, UC5: UPDATE RBLOB, UC7: COPY RBLOB, and UC9: DELETE RBLOB (remotely), HBS may need to establish a connection to the Storage Gateway beforehand. Note that the JWT (JSON Web Token) the Storage Gateway provides as part of the response to a connection request, may expire after 24 hours. Hence, HBS may need to check whether the connection is still valid and request a new one in case of expiration. <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a flow diagram of an exemplary process for data operations in the exemplary implementation. The exemplary process may be performed, for example, in response to a request from the client device <b>20</b> to perform one or more of the operations as stated above.</p><p id="p-0116" num="0164">Referring to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in step S<b>80</b>, the user may select, update or copy RBLOB via the application. Alternatively, in step S<b>80</b>, the HBS may trigger garbage collection in the Storage Gateway. In step S<b>82</b>, a determination may be made as to whether the RBLOB engine <b>110</b> is connected to the Storage Gateway. If the RBLOB engine <b>110</b> is connected to the Storage Gateway (yes in step S<b>82</b>), a corresponding operation of UC3: SELECT, UC5: UPDATE, UC7: COPY, or UC9: DELETE (remotely) may be performed in step S<b>84</b>. If the RBLOB engine <b>110</b> is note connected to the Storage Gateway (no in step S<b>82</b>), an operation of UC1: Connect to Storage Gateway may be performed at step S<b>86</b>. After step S<b>86</b>, the exemplary process may proceed to step S<b>84</b>.</p><heading id="h-0008" level="2">&#x3c;UC1: Connect to Storage Gateway&#x3e;</heading><heading id="h-0009" level="2">Level Subtask</heading><p id="p-0117" num="0165">Interest Users wants to establish a trusted connection to Storage Gateway<ul id="ul0028" list-style="none">    <li id="ul0028-0001" num="0000">    <ul id="ul0029" list-style="none">        <li id="ul0029-0001" num="0166">User wants to be authenticated and authorized<br/>Preconditions HDLF_MODE is enabled within File Service<br/>Postconditions Success scenario(s):        <ul id="ul0030" list-style="none">            <li id="ul0030-0001" num="0167">Received JSON Web Token2 (JWT) to identify connection being used</li>        </ul>        </li>        <li id="ul0029-0002" num="0168">Error scenario(s):        <ul id="ul0031" list-style="none">            <li id="ul0031-0001" num="0169">Threw exception to application</li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0010" level="2">Success Scenario(s) UC1S1 Register Connection:</heading><p id="p-0118" num="0170"></p><p id="p-0119" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="21pt" align="left"/><colspec colname="2" colwidth="196pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>&#x25cb; HBS &#x2192; POST request</entry></row><row><entry/><entry>/webhdfs/v1/?op=REGISTERCONNECTION3</entry></row><row><entry/><entry>{</entry></row><row><entry/><entry>&#x2003;&#x201c;type&#x201d;: &#x201c;S3&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x201c;X-Datahub-User&#x2033;: &#x201c;datahub-user&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x201c;X-Datahub-Tenant&#x201d;: &#x201c;datahub-tenant&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x201c;X-Datahub-CABundle&#x201d;: &#x201c;&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x201c;properties&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;rootPath&#x201d;: &#x201c;/bucketName&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;endpoint&#x201d;: &#x201c;s3.amazonaws.com&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;accessKey&#x201d;: &#x201c;AWS_ACCESS_KEY_I D&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;secretKey&#x201d;: &#x201c;AWS_SECRET_ACCESS_KEY&#x201d;</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x25cb; SG &#x2192; HTTP 200 return</entry></row><row><entry/><entry>{</entry></row><row><entry/><entry>&#x2003;&#x201c;type&#x201d;: &#x201c;SDL&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x201c;contentData&#x201d;: {</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;host&#x201d;: &#x201c;storagegateway&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;port&#x201d;: 14000,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;protocol&#x201d;: &#x201c;swebhdfs&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;publicHost&#x201d;: &#x201c;publichost&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;publicPort&#x201d;: 443,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;authToken&#x201d;: &#x201c;$JWT&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;rootPath&#x201d;: &#x201c;/&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;targetUri&#x201d;:</entry></row><row><entry/><entry>&#x201c;sdl://8fda851e5b1d16449f8c3479ebf89d882d6f24cd0&#x201d;</entry></row><row><entry/><entry>}</entry></row><row><entry/><entry>}</entry></row><row><entry/><entry>&#x25cb; HBS &#x2192; parse $JWT from response and store it together with its</entry></row><row><entry/><entry>expiration time (24h)</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Error scenario(s) UC1S2 Invalid request:<ul id="ul0032" list-style="none">    <li id="ul0032-0001" num="0000">    <ul id="ul0033" list-style="none">        <li id="ul0033-0001" num="0000">        <ul id="ul0034" list-style="none">            <li id="ul0034-0001" num="0171">HBS&#x2192;POST request as specified in UC1S1</li>            <li id="ul0034-0002" num="0172">SG&#x2192;no response</li>            <li id="ul0034-0003" num="0173">HBS&#x2192;propagate error to application by throwing exception with error message</li>        </ul>        </li>        <li id="ul0033-0002" num="0174">UC1S3 Network error: retry request</li>    </ul>    </li></ul></p><heading id="h-0011" level="2">&#x3c;UC2: Create File Container&#x3e;</heading><heading id="h-0012" level="2">Level Subtask</heading><p id="p-0120" num="0175">Interest User wants to create a file container on the remote object store with the tenant name as prefix<br/>Preconditions HDLF_MODE is enabled within File Service<br/>Postconditions Success scenario(s):<ul id="ul0035" list-style="none">    <li id="ul0035-0001" num="0000">    <ul id="ul0036" list-style="none">        <li id="ul0036-0001" num="0000">        <ul id="ul0037" list-style="none">            <li id="ul0037-0001" num="0176">Created namespace with tenant name</li>            <li id="ul0037-0002" num="0177">Implicitly prefixed all RBLOB data uploaded to this file container with tenant's name</li>        </ul>        </li>        <li id="ul0036-0002" num="0178">Error scenario(s):        <ul id="ul0038" list-style="none">            <li id="ul0038-0001" num="0179">Threw exception to application<br/>Success scenario(s) UC2S1 Create file container:</li>            <li id="ul0038-0002" num="0180">HBS&#x2192;PUT request /webhdfs/v1/?op=CREATE_FILECONTAINER</li>            <li id="ul0038-0003" num="0181">SG&#x2192;HTTP 201</li>            <li id="ul0038-0004" num="0182">&#x201c;The file container is created successfully on the remote object store.&#x201d;<br/>Error scenario(s) UC2S2 Bad request:</li>            <li id="ul0038-0005" num="0183">HBS&#x2192;request as specified in UC2S1</li>            <li id="ul0038-0006" num="0184">SG&#x2192;HTTP 400</li>            <li id="ul0038-0007" num="0185">&#x201c;Bad request, operation not supported due to HDLF_MODE being disabled.&#x201d;</li>        </ul>        </li>        <li id="ul0036-0003" num="0186">UC2S3 Unauthorized request:        <ul id="ul0039" list-style="none">            <li id="ul0039-0001" num="0187">HBS&#x2192;request as specified in UC2S1</li>            <li id="ul0039-0002" num="0188">SG&#x2192;HTTP 401</li>            <li id="ul0039-0003" num="0189">&#x201c;Unauthorized request due to invalid client certificates.&#x201d;</li>        </ul>        </li>        <li id="ul0036-0004" num="0190">UC2S4 Internal error:        <ul id="ul0040" list-style="none">            <li id="ul0040-0001" num="0191">HBS&#x2192;request as specified in UC2S1</li>            <li id="ul0040-0002" num="0192">SG&#x2192;HTTP 500</li>            <li id="ul0040-0003" num="0193">&#x201c;Unauthorized request due to invalid client certificates.&#x201d;</li>        </ul>        </li>        <li id="ul0036-0005" num="0194">UC2S5 Network error: retry request</li>    </ul>    </li></ul></p><heading id="h-0013" level="2">&#x3c;UC3 SELECT RBLOB&#x3e;</heading><p id="p-0121" num="0195">Level User goal<br/>SQL statement SELECT $RBLOB_COL FROM $TABLE WHERE $KEY_COL=1;<br/>Preconditions Same as for reading Disk/Hybrid LOBs (created table, etc.)<ul id="ul0041" list-style="none">    <li id="ul0041-0001" num="0000">    <ul id="ul0042" list-style="none">        <li id="ul0042-0001" num="0196">Registered connection with Storage Gateway (see UC1)        <ul id="ul0043" list-style="none">            <li id="ul0043-0001" num="0197">Expiration of JWT after 24h; if expired a new JWT needs to be requested (check necessary)</li>        </ul>        </li>        <li id="ul0042-0002" num="0198">Created file container for respective tenant (see UC2)<br/>Postconditions Success scenario(s)        <ul id="ul0044" list-style="none">            <li id="ul0044-0001" num="0199">Downloaded RBLOB data and enabled read access for HANA client</li>        </ul>        </li>        <li id="ul0042-0003" num="0200">Error scenario(s):        <ul id="ul0045" list-style="none">            <li id="ul0045-0001" num="0201">Threw exception to application<br/>Assumption(s) JWT is sent in Authorization header of all requests to Storage Gateway as follows: Authorization: Bearer $JWT<br/>Success scenario(s) UC3S1 Read content of a file:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0122" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="21pt" align="left"/><colspec colname="2" colwidth="196pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>&#x2003;&#x2003;&#x2003;&#x25cb; HBS &#x2192;</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x25aa; compose $RBLOB_NAME4 and validate it</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x25aa; GET request</entry></row><row><entry/><entry>/webhdfs/v1/$RBLOB_NAME?op=OPEN</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2022; size of buffer can be specified using &#x26;buffersize=&#x26;int32</entry></row><row><entry/><entry>&#x2003;&#x25cb; SG &#x2192; HTTP 200</entry></row><row><entry/><entry>&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;File content</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x25cb; HBS &#x2192; enable read access for HANA client</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0046" list-style="none">    <li id="ul0046-0001" num="0000">    <ul id="ul0047" list-style="none">        <li id="ul0047-0001" num="0202">Extended success scenario(s):</li>    </ul>    </li></ul></p><p id="p-0123" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>&#x25cb; UC3S2 Redirection of request in UC3S1:</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; HBS &#x2192; GET request as specified in UC3S1</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; SG</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2022; IF noredirect=true HTTP 307 (temporary redirect)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2022; ELSE HTTP 200</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;redirection_url&#x201d;: &#x201c;string&#x201d;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; HBS &#x2192; follow redirectionur</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Error scenario(s) UC3S3 File not found:</p><p id="p-0124" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>&#x25cb; HBS &#x2192; GET request as specified in UC3S1</entry></row><row><entry/><entry/><entry>&#x25cb; SG &#x2192; HTTP 404</entry></row><row><entry/><entry/><entry>{</entry></row><row><entry/><entry/><entry>&#x2003;&#x201c;exception&#x201d;: &#x201c;string&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x201c;javaClassName&#x2033;: &#x201c;string&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x201c;message&#x201d;: &#x201c;string&#x201d;</entry></row><row><entry/><entry/><entry>}</entry></row><row><entry/><entry/><entry>&#x25cb; HBS &#x2192; propagate error to application by throwing</entry></row><row><entry/><entry/><entry>FileNotFoundException</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0048" list-style="none">    <li id="ul0048-0001" num="0000">    <ul id="ul0049" list-style="none">        <li id="ul0049-0001" num="0203">UC3S4 Invalid request:</li>    </ul>    </li></ul></p><p id="p-0125" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="189pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2003;</entry><entry>&#x2003;&#x2003;&#x25cb; HBS &#x2192; request as specified in UC3S1</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x25cb; SG &#x2003; HTTP 400</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;exception&#x201d;: &#x201c;string&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;javaClassName&#x201d;: &#x201c;string&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;message&#x201d;: &#x201c;string&#x201d;</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x25cb; HBS &#x2192; propagate error to application by throwing</entry></row><row><entry/><entry>&#x2003;&#x2003;exception with error message</entry></row><row><entry/><entry>&#x2003;&#x2022; UC3S5 Network error: retry request as specified in UC3S1</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x25cb; Starting position to read bytes can be specified using</entry></row><row><entry/><entry>&#x26;offset=$int64 (default: starts at beginning)</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0014" level="2">&#x3c;UC4 INSERT RBLOB&#x3e;</heading><p id="p-0126" num="0204">Level User goal<br/>SQL statement INSERT INTO $TABLE ($KEY_COL, $RBLOB_COL) VALUES (1, ?),<br/>Preconditions Same as for inserting Disk/Hybrid LOBs (created table, etc.)<ul id="ul0050" list-style="none">    <li id="ul0050-0001" num="0000">    <ul id="ul0051" list-style="none">        <li id="ul0051-0001" num="0205">Registered connection with Storage Gateway (see UC1)        <ul id="ul0052" list-style="none">            <li id="ul0052-0001" num="0206">Expiration of JWT after 24h; if expired a new JWT needs to be requested (check necessary)</li>        </ul>        </li>        <li id="ul0051-0002" num="0207">Created file container for respective tenant (see UC2)<br/>Postconditions Success scenario(s), i.e., uploaded RBLOB to Storage Gateway and inserted RBLOB reference into HANA:        <ul id="ul0053" list-style="none">            <li id="ul0053-0001" num="0208">Reference to remote object in $URI_COL</li>        </ul>        </li>        <li id="ul0051-0003" num="0209">Error scenario(s):        <ul id="ul0054" list-style="none">            <li id="ul0054-0001" num="0210">NO reference to remote object in $URI_COL</li>            <li id="ul0054-0002" num="0211">Threw exception to application Assumption(s)            <ul id="ul0055" list-style="none">                <li id="ul0055-0001" num="0212">JWT is sent in Authorization header of all requests to Storage Gateway as follows: Authorization: Bearer $JWT</li>                <li id="ul0055-0002" num="0213">To keep first implementation simple, query parameters for specifying a file's block size (&#x26;blocksize=$int64), its number of replications (&#x26;replication=$int32), and permissions (&#x26;permission=$string) do not need to be used.<br/>Success scenario(s) UC4S1 Insert new file (success scenario):</li>            </ul>            </li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0127" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>&#x25cb; HBS &#x2192;</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; compose $RBLOB_NAME and validate it</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; PUT request</entry></row><row><entry/><entry/><entry>&#x2003;/webhdfs/v1/$RBLOB_NAME?op=CREATE</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2022; Size of buffer can be specified using</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x26;buffersize=&#x26;int32</entry></row><row><entry/><entry/><entry>&#x25cb; SG &#x2192; HTTP 201 return reference to RBLOB</entry></row><row><entry/><entry/><entry>{</entry></row><row><entry/><entry/><entry>&#x201c;location&#x201d;: &#x201c;reference2RBLOB&#x201d;</entry></row><row><entry/><entry/><entry>}</entry></row><row><entry/><entry/><entry>&#x25cb; HBS &#x2192; INSERT RBLOB into HANA (store</entry></row><row><entry/><entry/><entry>reference2RBLOB in $URI_COL)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0056" list-style="none">    <li id="ul0056-0001" num="0000">    <ul id="ul0057" list-style="none">        <li id="ul0057-0001" num="0214">Extended success scenario(s):</li>    </ul>    </li></ul></p><p id="p-0128" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>&#x25cb; UC4S2 Overwrite existing file:</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; HBS &#x2192;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2022; compose $RBLOB_NAME and validate it</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2022; PUT request/webhdfs/v1/</entry></row><row><entry/><entry/><entry>&#x2003;$RBLOB_NAME?op=CREATE&#x26;overwrite=TRUE</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x25cb; Size of buffer can be specified using</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x26;buffersize=&#x26;int32</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; SG &#x2003; HTTP 201 return reference to RBLOB</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x201c;location&#x201d;: &#x201c;reference2RBLOB&#x201d;</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; HBS &#x2192; INSERT RBLOB into HANA (store</entry></row><row><entry/><entry/><entry>&#x2003;reference2RBLOB in $URI_COL)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><ul id="ul0058" list-style="none">    <li id="ul0058-0001" num="0000">    <ul id="ul0059" list-style="none">        <li id="ul0059-0001" num="0000">        <ul id="ul0060" list-style="none">            <li id="ul0060-0001" num="0215">UC4S3 Redirection of requests in UC4S1 and UC4S2:</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0129" num="0000"><tables id="TABLE-US-00009" num="00009"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>&#x2003;&#x2003;&#x25aa; HBS &#x2192; PUT requests as specified in UC4S1 and</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;UC4S2</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x25aa; SG &#x2192;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2022; IF noredirect=true HTTP 307 (temporary</entry></row><row><entry/><entry/><entry>redirect)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2022; ELSE HTTP 200</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;redirection_url&#x201d;: &#x201c;string&#x201d;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;}</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; HBS &#x2192; follow redirection_url</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; SG &#x2192; HTTP 201 return reference to RBLOB</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x201c;location&#x201d;: &#x201c;reference2RBLOB&#x201d;</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry/><entry>&#x2003;&#x25aa; HBS &#x2192; INSERT RBLOB into HANA (store</entry></row><row><entry/><entry/><entry>&#x2003;reference2RBLOB in $URI_COL)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Error scenario(s) UC4S4 File already exists and overwrite=FALSE:<ul id="ul0061" list-style="none">    <li id="ul0061-0001" num="0000">    <ul id="ul0062" list-style="none">        <li id="ul0062-0001" num="0000">        <ul id="ul0063" list-style="none">            <li id="ul0063-0001" num="0216">HBS&#x2192;PUT requests as specified in UC4S1 and UC4S2</li>            <li id="ul0063-0002" num="0217">SG&#x2192;HTTP 400</li>            <li id="ul0063-0003" num="0218">HBS&#x2192;            <ul id="ul0064" list-style="none">                <li id="ul0064-0001" num="0219">do not INSERT RBLOB into HANA                <ul id="ul0065" list-style="none">                    <li id="ul0065-0001" num="0220">propagate error to application by throwing exception with error message</li>                </ul>                </li>            </ul>            </li>        </ul>        </li>        <li id="ul0062-0002" num="0221">UC4S5 Connection timeout:        <ul id="ul0066" list-style="none">            <li id="ul0066-0001" num="0222">HBS&#x2192;            <ul id="ul0067" list-style="none">                <li id="ul0067-0001" num="0223">PUT requests as specified in UC4S1 and UC4S2</li>                <li id="ul0067-0002" num="0224">EITHER                <ul id="ul0068" list-style="none">                    <li id="ul0068-0001" num="0225">detect TO and implement retry-logic</li>                </ul>                </li>                <li id="ul0067-0003" num="0226">OR                <ul id="ul0069" list-style="none">                    <li id="ul0069-0001" num="0227">do not INSERT RBLOB into HANA</li>                    <li id="ul0069-0002" num="0228">propagate error to application by throwing TOException</li>                </ul>                </li>            </ul>            </li>        </ul>        </li>        <li id="ul0062-0003" num="0229">UC4S6 File exceeds max size:        <ul id="ul0070" list-style="none">            <li id="ul0070-0001" num="0230">HBS&#x2192;            <ul id="ul0071" list-style="none">                <li id="ul0071-0001" num="0231">PUT requests as specified in UC4S1 and UC4S2</li>                <li id="ul0071-0002" num="0232">intercept on application layer before upload</li>                <li id="ul0071-0003" num="0233">Note: In the future, HBS can be extended to support chunked uploads.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0062-0004" num="0234">UC4S7 File only uploaded partially:        <ul id="ul0072" list-style="none">            <li id="ul0072-0001" num="0235">HBS&#x2192;            <ul id="ul0073" list-style="none">                <li id="ul0073-0001" num="0236">PUT requests as specified in UC4S1 and UC4S2</li>                <li id="ul0073-0002" num="0237">retry upload by overwriting existing file as specified in UC4S2</li>                <li id="ul0073-0003" num="0238">do not INSERT RBLOB into HANA until upload is successful</li>            </ul>            </li>        </ul>        </li>        <li id="ul0062-0005" num="0239">UC4S8 File upload not successful:        <ul id="ul0074" list-style="none">            <li id="ul0074-0001" num="0240">HBS&#x2192;PUT requests as specified in UC4S1 and UC4S2</li>            <li id="ul0074-0002" num="0241">SG&#x2192;HTTP 400 (invalid request)</li>            <li id="ul0074-0003" num="0242">HBS&#x2192;            <ul id="ul0075" list-style="none">                <li id="ul0075-0001" num="0243">do not INSERT RBLOB into HANA</li>                <li id="ul0075-0002" num="0244">propagate error to application by throwing exception with error message</li>            </ul>            </li>        </ul>        </li>        <li id="ul0062-0006" num="0245">UC4S9 Transaction abort/failure after successful insertion into</li>        <li id="ul0062-0007" num="0246">Storage Gateway:        <ul id="ul0076" list-style="none">            <li id="ul0076-0001" num="0247">HBS&#x2192;            <ul id="ul0077" list-style="none">                <li id="ul0077-0001" num="0248">compose $RBLOB_NAME from Storage Gateway response</li>                <li id="ul0077-0002" num="0249">DELETE request</li>                <li id="ul0077-0003" num="0250">/webhdfs/v1/$RBLOB_NAME?op=DELETE (in case</li>                <li id="ul0077-0004" num="0251">DELETE request fails, retry necessary&#x2190;fallback if multiple retries fail: create entry in RBLOB_DELETION_HISTORY-table)</li>            </ul>            </li>            <li id="ul0076-0002" num="0252">SG&#x2192;HTTP 200 {&#x201c;boolean&#x201d;: true}</li>            <li id="ul0076-0003" num="0253">HBS&#x2192;propagate insertion failure to application by throwing exception with error message</li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0015" level="2">&#x3c;UC5 UPDATE RBLOB&#x3e;</heading><p id="p-0130" num="0254">Level User goal<br/>SQL statement UPDATE $TABLE SET $RBLOB_COL=EMPTY_BLOB( ) WHERE $KEY_COL=1;<br/>Preconditions Same as for updating Disk/Hybrid LOBs (record for key specified in WHERE-clause exists, etc.)<ul id="ul0078" list-style="none">    <li id="ul0078-0001" num="0000">    <ul id="ul0079" list-style="none">        <li id="ul0079-0001" num="0255">Registered connection with Storage Gateway (see UC1) o Expiration of JWT after 24h; if expired a new JWT needs to be requested (check necessary)</li>        <li id="ul0079-0002" num="0256">Created file container for respective tenant (see UC2)<br/>Postconditions Success scenario(s):        <ul id="ul0080" list-style="none">            <li id="ul0080-0001" num="0257">Created new object in remote object store for modified content</li>            <li id="ul0080-0002" num="0258">Same postconditions as for success scenario(s) in UC6: DELETE RBLOB (locally)</li>            <li id="ul0080-0003" num="0259">Replaced $OLD_REFERENCE in $URI_COL with reference to new remote object</li>        </ul>        </li>        <li id="ul0079-0003" num="0260">Error scenario(s):        <ul id="ul0081" list-style="none">            <li id="ul0081-0001" num="0261">Threw exception to application<br/>Assumption(s) JWT is sent in Authorization header of all requests to Storage Gateway as follows: Authorization: Bearer $JWT<br/>Success scenario(s) UC5S1 Update existing RBLOB</li>            <li id="ul0081-0002" num="0262">a Insert new file as specified in UC4S1 (UC4 INSERT RBLOB) and buffer reference to new remote object ($NEW_REFERENCE)</li>            <li id="ul0081-0003" num="0263">b Delete existing RBLOB locally in HANA as specified in UC6S1 (UC6 DELETE RBLOB (locally))</li>            <li id="ul0081-0004" num="0264">c HBS&#x2192;update $OLD_REFERENCE with $NEW_REFERENCE in HANA RBLOB $URI_COL</li>        </ul>        </li>        <li id="ul0079-0004" num="0265">Extended success scenarios:        <ul id="ul0082" list-style="none">            <li id="ul0082-0001" num="0266">For UC5S1a            <ul id="ul0083" list-style="none">                <li id="ul0083-0001" num="0267">Overwrite existing file                <ul id="ul0084" list-style="none">                    <li id="ul0084-0001" num="0268">see steps in UC4S2 (UC4 INSERT RBLOB)</li>                </ul>                </li>                <li id="ul0083-0002" num="0269">Redirection of PUT request                <ul id="ul0085" list-style="none">                    <li id="ul0085-0001" num="0270">see steps in UC4S3 (UC4 INSERT RBLOB)<br/>Error scenario(s) For UC5S1a see UC4S4-UC4S9 (UC4 INSERT RBLOB)</li>                </ul>                </li>            </ul>            </li>        </ul>        </li>        <li id="ul0079-0005" num="0271">For UC5S1b error handling is identical to deletion failure of Disk/Hybrid LOBs, additionally no record in RBLOB_DELETION_HISTORY-table is generated<br/>&#x3c;UC6 DELETE RBLOB (locally)&#x3e;<br/>Level User goal<br/>SQL statement DELETE FROM $TABLE WHERE $KEY_COL=1;<br/>Preconditions Same as for deleting Disk/Hybrid LOBs (record for key specified in WHERE-clause exists, etc.)</li>        <li id="ul0079-0006" num="0272">No connection to Storage Gateway necessary<br/>Postconditions Success scenario(s):        <ul id="ul0086" list-style="none">            <li id="ul0086-0001" num="0273">Removed HANA reference of RBLOB from $RBLOB_TABLE</li>            <li id="ul0086-0002" num="0274">Generated record in RBLOB_DELETION_HISTORY-table for removed RBLOB</li>            <li id="ul0086-0003" num="0275">Corresponding RBLOB content in object store still exists</li>        </ul>        </li>        <li id="ul0079-0007" num="0276">Error scenario(s):        <ul id="ul0087" list-style="none">            <li id="ul0087-0001" num="0277">NO record in RBLOB_DELETION_HISTORY-table for removed RBLOB</li>            <li id="ul0087-0002" num="0278">Threw exception to application<br/>Success scenario(s) UC6S1 Delete single RBLOB locally</li>            <li id="ul0087-0003" num="0279">HBS&#x2192;            <ul id="ul0088" list-style="none">                <li id="ul0088-0001" num="0280">buffer schema_id, table_id, attribute_id, rblob_id of respective RBLOB</li>                <li id="ul0088-0002" num="0281">delete RBLOB reference from $TABLE but do not propagate any change to Storage Gateway</li>                <li id="ul0088-0003" num="0282">generate record in RBLOB_DELETION_HISTORY-table: set all attributes, i.e., deleted_at, schema_id, table_id, attribute_id, rblob_id<br/>Error scenario(s) Behavior identical to DELETE statement for Disk/Hybrid LOBs</li>            </ul>            </li>        </ul>        </li>        <li id="ul0079-0008" num="0283">In case of deletion failure, no record in RBLOB_DELETION_HISTORY-table is generated</li>    </ul>    </li></ul></p><heading id="h-0016" level="2">&#x3c;UC7 COPY RBLOB&#x3e;</heading><p id="p-0131" num="0284">As no reference counting mechanism is currently available and the Storage Gateway does not offer an operation for copying files on the server-side, the copy of an RBLOB may be an actual download and upload.</p><p id="p-0132" num="0000">Level User goal<br/>SQL statement INSERT INTO $RBLOB_TABLE_TARGET ($KEY_COL, $RBLOB_COL) SELECT ($KEY_COL, $RBLOB_COL) FROM $RBLOB_TABLE_SOURCE WHERE $KEY_COL=1;</p><heading id="h-0017" level="2">Preconditions Same as for UC3 SELECT RBLOB)/UC4 (UC4 INSERT RBLOB)</heading><p id="p-0133" num="0285">Postconditions Success scenario(s)<ul id="ul0089" list-style="none">    <li id="ul0089-0001" num="0000">    <ul id="ul0090" list-style="none">        <li id="ul0090-0001" num="0000">        <ul id="ul0091" list-style="none">            <li id="ul0091-0001" num="0286">Downloaded RBLOB data from source &#x201c;table&#x201d;5 in Storage Gateway</li>            <li id="ul0091-0002" num="0287">Uploaded RBLOB data to target &#x201c;table&#x201d; in Storage Gateway</li>            <li id="ul0091-0003" num="0288">Inserted RBLOB references in target table in HANA ($URI_COL)</li>        </ul>        </li>        <li id="ul0090-0002" num="0289">Error scenario(s):        <ul id="ul0092" list-style="none">            <li id="ul0092-0001" num="0290">Threw exception to application<br/>Assumption(s) JWT is sent in Authorization header of all requests to Storage Gateway as follows: Authorization: Bearer $JWT<br/>Success scenario(s) UC7S1 Copy existing RBLOB from one to another table</li>            <li id="ul0092-0002" num="0291">a Read existing RBLOB as specified in UC3S1 (UC3 SELECT RBLOB) but w/o enabling read access for HANA client</li>            <li id="ul0092-0003" num="0292">b Insert RBLOB read in a to new table as specified in UC4S1 (UC4 INSERT RBLOB) taking into account target table name when composing $RBLOB_NAME</li>        </ul>        </li>        <li id="ul0090-0003" num="0293">Extended success scenarios:        <ul id="ul0093" list-style="none">            <li id="ul0093-0001" num="0294">For UC7S1a            <ul id="ul0094" list-style="none">                <li id="ul0094-0001" num="0295">Redirection of GET request                <ul id="ul0095" list-style="none">                    <li id="ul0095-0001" num="0296">see steps in UC3S2 (UC3 SELECT RBLOB)</li>                </ul>                </li>            </ul>            </li>            <li id="ul0093-0002" num="0297">For UC7S1b            <ul id="ul0096" list-style="none">                <li id="ul0096-0001" num="0298">Overwrite existing file                <ul id="ul0097" list-style="none">                    <li id="ul0097-0001" num="0299">see steps in UC4S2 (UC4 INSERT RBLOB)</li>                </ul>                </li>            </ul>            </li>            <li id="ul0093-0003" num="0300">Redirection of PUT request            <ul id="ul0098" list-style="none">                <li id="ul0098-0001" num="0301">see steps in UC4S3 (UC4 INSERT RBLOB)<br/>Error scenario(s) For UC7S1a see UC3S3-5</li>            </ul>            </li>        </ul>        </li>        <li id="ul0090-0004" num="0302">For UC7S1b see UC4S4-UC4S8</li>    </ul>    </li></ul></p><heading id="h-0018" level="2">&#x3c;UC8 RENAME RBLOB&#x3e;</heading><p id="p-0134" num="0303">As mentioned in Naming Convention for RBLOBs, an RBLOB's name may be composed as follows in the remote object store: /$SCHEMA_ID/$TABLE_ID/$ATTRIBUTE_ID/$RBLOB_ID. This may imply that in case of a rename-operation, an RBLOB does not need to be renamed in the object store. After all, the latter may only know its ID which is not changed by a rename-operation. Hence, renaming an RBLOB may work the same as renaming Disk/Hybrid LOBs and does not require any interaction with the Storage Gateway.</p><p id="p-0135" num="0000">&#x3c;UC9 DELETE RBLOB (remotely)&#x3e;</p><heading id="h-0019" level="2">Level Subtask</heading><p id="p-0136" num="0304">Interest As described in Garbage Collection of RBLOBs, HANA may want to delete RBLOB content in object store after running async job inspecting RBLOB_DELETION_HISTORY-table<ul id="ul0099" list-style="none">    <li id="ul0099-0001" num="0000">    <ul id="ul0100" list-style="none">        <li id="ul0100-0001" num="0305">For each RBLOB in RBLOB_DELETION_HISTORY-table whose deleted_at is smaller than earliest possible recovery point content may be deleted remotely<br/>Preconditions Record in RBLOB_DELETION_HISTORY-table exists (see UC6 DELETE RBLOB (locally))</li>        <li id="ul0100-0002" num="0306">Ran asynchronous HANA job to identify RBLOBs in RBLOB_DELETION_HISTORY-table which are old enough to be deleted</li>        <li id="ul0100-0003" num="0307">Registered connection with Storage Gateway (see UC1)        <ul id="ul0101" list-style="none">            <li id="ul0101-0001" num="0308">Expiration of JWT after 24h; if expired a new JWT needs to be requested (check necessary)</li>        </ul>        </li>        <li id="ul0100-0004" num="0309">Created file container for respective tenant (see UC2)<br/>Postconditions Success scenario(s) #        <ul id="ul0102" list-style="none">            <li id="ul0102-0001" num="0310">Deleted RBLOB content in object store o Deleted corresponding record in RBLOB_DELETION_HISTORY-table</li>        </ul>        </li>        <li id="ul0100-0005" num="0311">Error scenario(s):        <ul id="ul0103" list-style="none">            <li id="ul0103-0001" num="0312">Threw exception to application<br/>Success scenario(s) UC9S1 Delete single RBLOB remotely</li>            <li id="ul0103-0002" num="0313">HBS&#x2192;            <ul id="ul0104" list-style="none">                <li id="ul0104-0001" num="0314">compose $RBLOB_NAME from record in RBLOB_DELETION_HISTORY-table</li>                <li id="ul0104-0002" num="0315">DELETE request /webhdfs/v1/$RBLOB_NAME?op=DELETE</li>            </ul>            </li>            <li id="ul0103-0003" num="0316">SG&#x2192;HTTP 200 {&#x201c;boolean&#x201d;: true}</li>            <li id="ul0103-0004" num="0317">HBS&#x2192;delete corresponding record in</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0137" num="0318">RBLOB_DELETION_HISTORY-table</p><p id="p-0138" num="0000">Error scenario(s) UC9S2 Connection timeout:<ul id="ul0105" list-style="none">    <li id="ul0105-0001" num="0000">    <ul id="ul0106" list-style="none">        <li id="ul0106-0001" num="0000">        <ul id="ul0107" list-style="none">            <li id="ul0107-0001" num="0319">HBS&#x2192;            <ul id="ul0108" list-style="none">                <li id="ul0108-0001" num="0320">DELETE request as specified in UC9S1</li>                <li id="ul0108-0002" num="0321">EITHER                <ul id="ul0109" list-style="none">                    <li id="ul0109-0001" num="0322">detect TO and retry</li>                </ul>                </li>                <li id="ul0108-0003" num="0323">OR                <ul id="ul0110" list-style="none">                    <li id="ul0110-0001" num="0324">do not delete corresponding record in RBLOB_DELETION_HISTORY-table</li>                    <li id="ul0110-0002" num="0325">propagate error to application by throwing TOException</li>                </ul>                </li>            </ul>            </li>        </ul>        </li>        <li id="ul0106-0002" num="0326">UC9S3 Invalid request:        <ul id="ul0111" list-style="none">            <li id="ul0111-0001" num="0327">HBS&#x2192;DELETE request as specified in UC9S1</li>            <li id="ul0111-0002" num="0328">SG&#x2192;no response</li>            <li id="ul0111-0003" num="0329">HBS&#x2192;propagate error to application by throwing exception with error message</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0139" num="0330">Extension of Use Cases to Bulk Operations</p><p id="p-0140" num="0331">This section describes how bulk operations of the above-stated use cases may be implemented. As mentioned in the Naming Convention for RBLOBs, unlike file systems, object stores may have no physical folders. Therefore, an artificial hierarchy may be introduced to identify sets of objects in an object store. By means of this hierarchy, which may be reflected in an RBLOBs name, related RBLOBs can be identified when iterating over all objects (e.g., the set of RBLOBs sharing the same schema and table ID belongs to the same table).</p><heading id="h-0020" level="2">&#x3c;UC10 SELECT Multiple RBLOBs&#x3e;</heading><p id="p-0141" num="0332">In order to read multiple RBLOBs, HANA may first query the references to these data items and then requests their content. To this end, UC3 SELECT RBLOB may be executed for each element in the result set. Instead of sending one GET request for each element in the result set, one GET request containing a list of $RBLOB_NAME may be sent. Note that pre- and postconditions may be the same as for UC3 SELECT RBLOB. To read related RBLOBs such as RBLOBs belonging to the schema, an alternative may be to extend Storage Gateway's API to accept GET requests like /webhdfs/v1/$SCHEMA_NAME?op=OPEN_SCHEMA, to iterate over all RBLOBs, and to examine their names. As the only difference to iterating in HANA may be less data being sent over the network, the effort for providing such additional endpoint may outweigh its benefits.</p><heading id="h-0021" level="2">&#x3c;UC11 INSERT Multiple RBLOBs&#x3e;</heading><p id="p-0142" num="0333">Inserting multiple RBLOBs may correspond to multiple executions of UC4 INSERT RBLOB.</p><heading id="h-0022" level="2">&#x3c;UC12 UPDATE Multiple RBLOBs&#x3e;</heading><p id="p-0143" num="0334">Updating multiple RBLOBs may correspond to multiple executions of UC5 UPDATE RBLOB.</p><heading id="h-0023" level="2">&#x3c;UC13 DELETE Multiple RBLOBs (Locally)&#x3e;</heading><p id="p-0144" num="0335">The deletion of multiple related RBLOBs may be similar to UC6 DELETE RBLOB (locally). The only difference may be that not all of the attributes of the table RBLOB_DELETION_HISTORY are filled. In case HANA users delete an entire schema, deleted_at and schema_id may be filled and the remaining attributes (table_id, attribute_id, rblob_id) may be set to NULL. Deletion of tables and columns may work in the same manner, i.e., non-applicable attributes may be set to NULL. Note that pre- and postconditions may be the same as for UC6 DELETE RBLOB (locally).</p><heading id="h-0024" level="2">&#x3c;UC14 DELETE Multiple RBLOBs (Remotely)&#x3e;</heading><p id="p-0145" num="0336">As mentioned in UC13 DELETE multiple RBLOBs (locally), non-applicable attributes may be set to NULL in case schemas, tables, or columns are deleted. Hence, when schemes/tables/columns removed from HANA have been identified as old enough to be deleted in the object store, a DELETE request similar to /webhdfs/v1/$RBLOB_NAME?op=DELETE may need to be sent to the Storage Gateway. Instead of $RBLOB_NAME containing /$SCHEMA_ID/$TABLE_ID/$ATTRIBUTE_ID/$RBLOB_ID, this request may only contain $SCHEMA_ID, $SCHEMA_ID/$TABLE_ID, or $SCHEMA_ID/$TABLE_ID/$ATTRIBUTE_ID. An according endpoint may need to be provided by the Storage Gateway. The Storage Gateway can then identify and delete RBLOBs belonging to the respective schema/table/column by iteration and name inspection. Note that pre- and postconditions may be the same as for UC9 DELETE RBLOB (remotely).</p><heading id="h-0025" level="2">&#x3c;UC15 COPY Multiple RBLOBs&#x3e;</heading><p id="p-0146" num="0337">Copying multiple RBLOBs may correspond to multiple executions of UC7 COPY RBLOB.</p><heading id="h-0026" level="2">&#x3c;UC16 RENAME Multiple RBLOBs&#x3e;</heading><p id="p-0147" num="0338">As it is the case for UC8 RENAME RBLOB, multiple RBLOBs can be renamed without changing their identifiers in the object store.</p><heading id="h-0027" level="2">&#x3c;UC17 BACKUP &#x26; RECOVER&#x3e;</heading><p id="p-0148" num="0339">HANA's current backup &#x26; recovery process does not need to be changed but rather extended by providing customers with the possibility to include RBLOB data from the Storage Gateway. Hence, two options for backup &#x26; recovery may be provided:<ul id="ul0112" list-style="none">    <li id="ul0112-0001" num="0000">    <ul id="ul0113" list-style="none">        <li id="ul0113-0001" num="0340">1. In case a customer wants to include the RBLOB data in her backup, all RBLOBs may be downloaded as described in UC10 SELECT multiple RBLOBs and included in the HANA backup. If she restores her data, HANA may need to check whether the RBLOBs still reside in the object store. If this is the case, no data need to be uploaded. If RBLOBs do not reside in the object store anymore, they may need to be extracted from the HANA backup and uploaded as described in UC11 INSERT multiple RBLOBs.</li>        <li id="ul0113-0002" num="0341">2. In case the customer does not want to include the RBLOB data, the backup may only include the references to these data and the HANA backup is not extended.</li>    </ul>    </li></ul></p><heading id="h-0028" level="2">Technical Advantages</heading><p id="p-0149" num="0342">The following provides possible technical advantages achieved by any one of the various aspects and embodiments described herein.</p><p id="p-0150" num="0343">As stated above, according to some exemplary embodiments, data stored in RBLOB columns may be automatically moved to the associated file storage of the in-memory database system <b>10</b>&#x2032; (e.g., HANA cloud instance) without any control or interaction by the database application <b>200</b>. For example, internally in HANA, the RBLOB columns may store references (e.g., URIs) to remote storage locations, but this implementation detail may be hidden from the database application. For query and DML statements (e.g., Insert, Update, Delete), the database application <b>200</b> may keep the same interaction pattern as they would have with the database when directly storing data in the existing format (e.g., hybrid LOB format). Particularly, from a functional point of view, the fact that data is not residing in the in-memory database system <b>10</b>&#x2032; itself may be invisible for applications and users. The only difference may be the changed performance characteristics, e.g. the additional interaction with the cloud storage platform might entail additional latency. When interacting with RBLOB columns, for example, the transactional semantics (ACID) may be guaranteed by the in-memory database system <b>10</b>&#x2032;: e.g., when inserting new RBLOB data, the in-memory database system <b>10</b>&#x2032; may first propagates the data to the cloud storage provider, and only afterwards store a reference to the remote location in the relational table. For DELETE and UPDATE request, multi-version concurrency control (MVCC) may be used to ensure the same transactional semantics like e.g., for regular HANA LOBs.</p><p id="p-0151" num="0344">Thus, according to some exemplary embodiments, as much of the solution complexity may be hidden from the end-users as possible. Further, handling the solution complexity within the in-memory database system <b>10</b>&#x2032; may enable the use of the existing database application, thereby facilitating deployment of the database system with the extended functionality according to some exemplary embodiments. By disallowing database applications to directly communicate with the cloud storage, the in-memory database system <b>10</b>&#x2032; may have more fine-grained control on data access, data caching and also enable garbage collection for the cleanup of data that is no longer referenced.</p><p id="p-0152" num="0345">In some circumstances, multiple versions of the remote data may not only need to be consolidated in the context of MVCC but also as part of the point-in-time recovery in the in-memory database system <b>10</b>&#x2032;. In order to ensure consistency between the remote data stored in cloud storages and the corresponding URIs stored in in-memory database system <b>10</b>&#x2032; despite a rollback operation, each change to the RBLOB may create a new version of the remote data instead of overwriting it. This may mean in effect that remote data are immutable. To point to the new version of the remote data, the references within the RBLOB columns may change whenever data are changed by the database user. A rollback may then restore the URI to the version of the remote data at the specific point in time, which may ensure data integrity.</p><heading id="h-0029" level="2">Hardware Configuration</heading><p id="p-0153" num="0346"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an exemplary hardware configuration of a computer that may be used to implement exemplary embodiments and variations as described herein.</p><p id="p-0154" num="0347">The computer <b>7</b> shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref> includes a CPU <b>70</b>, a system memory <b>72</b>, a network interface <b>74</b>, a hard disk drive (HDD) interface <b>76</b>, an external disk drive interface <b>78</b> and input/output (I/O) interfaces <b>80</b>. These components of the computer are coupled to each other via a system bus <b>82</b>. The CPU <b>70</b> may perform arithmetic, logic and/or control operations by accessing the system memory <b>72</b>. The CPU <b>70</b> may implement the processors of the exemplary devices and/or system described above. The system memory <b>72</b> may store information and/or instructions for use in combination with the CPU <b>70</b>. The system memory <b>72</b> may include volatile and non-volatile memory, such as a random access memory (RAM) <b>720</b> and a read only memory (ROM) <b>722</b>. A basic input/output system (BIOS) containing the basic routines that helps to transfer information between elements within the computer <b>7</b>, such as during start-up, may be stored in the ROM <b>722</b>. The system bus <b>82</b> may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures.</p><p id="p-0155" num="0348">The computer may include a network interface <b>74</b> for communicating with other computers and/or devices via a network.</p><p id="p-0156" num="0349">Further, the computer may include a hard disk drive (HDD) <b>84</b> for reading from and writing to a hard disk (not shown), and an external disk drive <b>86</b> for reading from or writing to a removable disk (not shown). The removable disk may be a magnetic disk for a magnetic disk drive or an optical disk such as a CD ROM for an optical disk drive. The HDD <b>84</b> and the external disk drive <b>86</b> are connected to the system bus <b>82</b> by a HDD interface <b>76</b> and an external disk drive interface <b>78</b>, respectively. The drives and their associated computer-readable media provide non-volatile storage of computer-readable instructions, data structures, program modules and other data for the general purpose computer. The relevant data may be organized in a database, for example a relational database, an object database or a NoSQL database.</p><p id="p-0157" num="0350">Although the exemplary environment described herein employs a hard disk (not shown) and an external disk (not shown), it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories, read only memories, and the like, may also be used in the exemplary operating environment.</p><p id="p-0158" num="0351">A number of program modules may be stored on the hard disk, external disk, ROM <b>722</b> or RAM <b>720</b>, including an operating system (not shown), one or more application programs <b>7202</b>, other program modules (not shown), and program data <b>7204</b>. The application programs may include at least a part of the functionality as described above.</p><p id="p-0159" num="0352">The computer <b>7</b> may be connected to an input device <b>92</b> such as mouse and/or keyboard and a display device <b>94</b> such as liquid crystal display, via corresponding I/O interfaces <b>80</b><i>a </i>and <b>80</b><i>b </i>as well as the system bus <b>82</b>. In case the computer <b>7</b> is implemented as a tablet computer, for example, a touch panel that displays information and that receives input may be connected to the computer <b>7</b> via a corresponding I/O interface and the system bus <b>82</b>. Further, in some examples, although not shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the computer <b>7</b> may further be connected to a printer and/or an imaging device such as a camera, via corresponding I/O interfaces and the system bus <b>82</b>.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for database management, the method comprising:<claim-text>receiving, from a client device, first data to be stored in a database system that comprises first data storage configured to store a data table and a deletion history table;</claim-text><claim-text>storing the first data in second data storage that is external to the database system and that is in communication with the database system via a network;</claim-text><claim-text>obtaining a link that enables access, via the network, to the first data stored in the second data storage;</claim-text><claim-text>storing the link in the data table; and</claim-text><claim-text>performing a deletion operation of the first data, in response to a request from the client device to delete the first data from the database system,</claim-text><claim-text>wherein the deletion operation comprises:<claim-text>deleting the link from the data table without deleting the first data from the second data storage; and</claim-text><claim-text>storing the link in the deletion history table with a timestamp corresponding to a point in time when the link is deleted from the data table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving updated first data from the client device;</claim-text><claim-text>storing the updated first data in the second data storage;</claim-text><claim-text>obtaining an updated link that enables access, via the network, to the updated first data stored in the second data storage;</claim-text><claim-text>storing the updated link in the data table; and</claim-text><claim-text>performing the deletion operation of the first data.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving second data including data relating to the first data; and</claim-text><claim-text>storing, in association with the first data, the second data in the data table,</claim-text><claim-text>wherein a data size of the second data is smaller than a specified threshold value and a data size of the first data is equal to or larger than the specified threshold value.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving a data item to be stored in the database system;</claim-text><claim-text>in case a size of the received data item is equal to or larger than a specified threshold value,<claim-text>storing the received data item in the second data storage as the first data,</claim-text><claim-text>obtaining and storing in the data table a link that enables access, via the network, to the received data item stored in the second data storage as the first data; and</claim-text></claim-text><claim-text>in case a size of the received data item is less than the specified threshold value,<claim-text>storing the received data item in the data table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the first data includes binary large object, BLOB, data; and<claim-text>wherein the link may be stored in a column of the data table, the column being assigned to a remote BLOB data type.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first data storage comprises a main memory and at least one disk storage device; and/or<claim-text>wherein the second data storage comprises cloud storage.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>deleting the first data from the second data storage based on:<claim-text>a specified maximum retention time of backup data for the database system, and</claim-text><claim-text>the timestamp of the link stored in the deletion history table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer-readable medium comprising computer-readable instructions, which, when loaded and executed on a computing system, cause the computing system to:<claim-text>receive, from a client device, first data to be stored in a database system;</claim-text><claim-text>store the first data in second data storage that is external to the database system and that is in communication with the at least one processor via a network;</claim-text><claim-text>obtain a link that enables access, via the network, to the first data stored in the second data storage;</claim-text><claim-text>store the link in the data table; and</claim-text><claim-text>perform a deletion operation of the first data, in response to a request from the client device to delete the first data from the database system,</claim-text><claim-text>wherein the deletion operation comprises:<claim-text>deleting the link from the data table without deleting the first data from the second data storage; and</claim-text><claim-text>storing the link in the deletion history table with a timestamp corresponding to a point in time when the link is deleted from the data table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The medium according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer-readable instructions, which, when loaded and executed on a computing system, cause the computing system to:<claim-text>receive updated first data from the client device;</claim-text><claim-text>store the updated first data in the second data storage;</claim-text><claim-text>obtain an updated link that enables access, via the network, to the updated first data stored in the second data storage;</claim-text><claim-text>store the updated link in the data table; and</claim-text><claim-text>perform the deletion operation of the first data.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The medium according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the computer-readable instructions, which, when loaded and executed on a computing system, cause the computing system to:<claim-text>receive second data including data relating to the first data; and</claim-text><claim-text>store, in association with the first data, the second data in the data table,</claim-text><claim-text>wherein a data size of the second data is smaller than a specified threshold value and a data size of the first data is equal to or larger than the specified threshold value.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The medium according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the computer-readable instructions, which, when loaded and executed on a computing system, cause the computing system to:<claim-text>receive a data item to be stored in the database system;</claim-text><claim-text>in case a size of the received data item is equal to or larger than a specified threshold value,<claim-text>store the received data item in the second data storage as the first data,</claim-text><claim-text>obtain and store in the data table a link that enables access, via the network, to the received data item stored in the second data storage as the first data; and</claim-text></claim-text><claim-text>in case a size of the received data item is less than the specified threshold value,<claim-text>store the received data item in the data table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The medium according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first data includes binary large object, BLOB, data; and<claim-text>wherein the link may be stored in a column of the data table, the column being assigned to a remote BLOB data type.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The medium according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first data storage comprises a main memory and at least one disk storage device; and/or<claim-text>wherein the second data storage comprises cloud storage.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A database system comprising:<claim-text>at least one processor; and</claim-text><claim-text>first data storage that is coupled to the at least one processor and that is configured to store a data table and a deletion history table,</claim-text><claim-text>wherein the at least one processor is configured to:<claim-text>receive, from a client device, first data to be stored in the database system;</claim-text><claim-text>store the first data in second data storage that is external to the database system and that is in communication with the at least one processor via a network;</claim-text><claim-text>obtain a link that enables access, via the network, to the first data stored in the second data storage;</claim-text><claim-text>store the link in the data table; and</claim-text><claim-text>perform a deletion operation of the first data, in response to a request from the client device to delete the first data from the database system,</claim-text></claim-text><claim-text>wherein the deletion operation comprises:<claim-text>deleting the link from the data table without deleting the first data from the second data storage; and</claim-text><claim-text>storing the link in the deletion history table with a timestamp corresponding to a point in time when the link is deleted from the data table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The database system according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the at least one processor is further configured to:<claim-text>receive updated first data from the client device;</claim-text><claim-text>store the updated first data in the second data storage;</claim-text><claim-text>obtain an updated link that enables access, via the network, to the updated first data stored in the second data storage;</claim-text><claim-text>store the updated link in the data table; and</claim-text><claim-text>perform the deletion operation of the first data.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The database system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the at least one processor is further configured to:<claim-text>receive second data including data relating to the first data; and</claim-text><claim-text>store, in association with the first data, the second data in the data table,</claim-text><claim-text>wherein a data size of the second data is smaller than a specified threshold value and a data size of the first data is equal to or larger than the specified threshold value.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The database system according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the at least one processor is further configured to:<claim-text>receive a data item to be stored in the database system;</claim-text><claim-text>in case a size of the received data item is equal to or larger than a specified threshold value,<claim-text>store the received data item in the second data storage as the first data,</claim-text><claim-text>obtain and store in the data table a link that enables access, via the network, to the received data item stored in the second data storage as the first data; and</claim-text></claim-text><claim-text>in case a size of the received data item is less than the specified threshold value,<claim-text>store the received data item in the data table.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The database system according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the first data includes binary large object, BLOB, data; and<claim-text>wherein the link may be stored in a column of the data table, the column being assigned to a remote BLOB data type.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The database system according to <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first data storage comprises a main memory and at least one disk storage device; and/or<claim-text>wherein the second data storage comprises cloud storage.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The database system according to <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the at least one processor is further configured to:<claim-text>delete the first data from the second data storage based on:<claim-text>a specified maximum retention time of backup data for the database system, and</claim-text><claim-text>the timestamp of the link stored in the deletion history table.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>