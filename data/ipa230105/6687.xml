<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006688A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006688</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779038</doc-number><date>20201120</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911154471.7</doc-number><date>20191122</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>24</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>30</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>24</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>3059</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD AND APPARATUS FOR STORING DATA, AND COMPUTER DEVICE AND STORAGE MEDIUM THEREOF</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ENVISON DIGITAL INTERNATIONAL PTE, LTD.</orgname><address><city>Singapore</city><country>SG</country></address></addressbook><residence><country>SG</country></residence></us-applicant><us-applicant sequence="01" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SHANGHAI ENVISION DIGITAL CO., LTD.</orgname><address><city>Shanghai</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>LEI</last-name><first-name>Li</first-name><address><city>Shanghai</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>ZHAO</last-name><first-name>Hong</first-name><address><city>Shanghai</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>CHEN</last-name><first-name>Xiaomeng</first-name><address><city>Shanghai</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>NING</last-name><first-name>Degang</first-name><address><city>Shanghai</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>ENVISON DIGITAL INTERNATIONAL PTE, LTD.</orgname><role>03</role><address><city>Singapore</city><country>SG</country></address></addressbook></assignee><assignee><addressbook><orgname>SHANGHAI ENVISION DIGITAL CO., LTD.</orgname><role>03</role><address><city>Shanghai</city><country>CN</country></address></addressbook></assignee></assignees><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/SG2020/050680</doc-number><date>20201120</date></document-id><us-371c12-date><date>20220523</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Disclosed are a method and apparatus for storing data. The method includes: acquiring data to be stored; converting the data to be stored from an initial data type to a target data type, a data length corresponding to the target data type being less than that corresponding to the initial data type; and storing the data to be stored of the target data type to a database. In the method according to the present disclosure, a storage space occupied by the data to be stored in the database is greatly reduced. In addition, the method according to the present disclosure is performed prior to lossy or lossless data compression storage of the data to be stored in the related art. That is, on the basis of a compression ratio when the data to be stored is stored in the related art, the present disclosure further improves a compression effect of the data to be stored by reducing the data length when the data to be stored is stored, and further saves storage resources of the database.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="75.95mm" wi="102.28mm" file="US20230006688A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="183.81mm" wi="159.85mm" file="US20230006688A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="191.52mm" wi="143.59mm" file="US20230006688A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="217.76mm" wi="155.96mm" file="US20230006688A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="132.00mm" wi="107.61mm" file="US20230006688A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">Embodiments of the present disclosure relate to the field of data storage, and in particular relate to a method and apparatus for storing data, and a computer device and a storage medium thereof.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">With the rapid development of Internet of things, data monitoring systems based on the Internet of things have begun to be applied on a large scale.</p><p id="p-0004" num="0003">The basic function of the data monitoring system is to acquire data and to store the data to a database. Most data storage solutions are to store the acquired data and to perform lossy or lossless compression on the stored data.</p><p id="p-0005" num="0004">The validity and a storage space of the data are associated with the lossy or lossless compression mode. For example, lossy compression realizes data compression by reducing original data, such that the validity of the data cannot be guaranteed; and lossless compression is to express repeating portions in the data by means of encoding to realize data compression, which reduces the storage space of the data to a certain extent but still obtains a smaller compression ratio than a compression ratio under lossy compression. That is, the data storage solutions in the related art fail to solve the problem of how to increase the data compression ratio on the premise of not damaging the validity of the data.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments of the present disclosure provide a method and apparatus for storing data, and a computer device and a storage medium thereof, which may increase a data compression ratio on the premise of not impairing the validity of data. The technical solutions are described as below.</p><p id="p-0007" num="0006">In one aspect, a method for storing data is provided. The method includes: acquiring data to be stored; converting the data to be stored from an initial data type to a target data type, a data length corresponding to the target data type being less than that corresponding to the initial data type; and storing the data to be stored of the target data type to a database.</p><p id="p-0008" num="0007">In another aspect, an apparatus for storing data is provided. The apparatus includes: a data acquiring module, configured to acquire data to be stored; a data converting module, configured to convert the data to be stored from an initial data type to a target data type, a data length corresponding to the target data type being less than that corresponding to the initial data type; and a data storing module, configured to store the data to be stored of the target data type to a database.</p><p id="p-0009" num="0008">In yet another aspect, a computer device is provided. The computer device includes a processor and a memory storing at least one instruction. The at least one instruction, when executed by the processor, causes the processor to perform the method for storing data in the above aspect.</p><p id="p-0010" num="0009">In still another aspect, a computer-readable storage medium storing at least one instruction is provided. The at least one instruction, when executed by a processor, causes the processor to perform the method for storing data in the above aspect.</p><p id="p-0011" num="0010">In the embodiments of the present disclosure, the data to be stored is converted from the initial data type to the target data type after being acquired. Since the data length of the data to be stored that is converted to the target data type is less than that corresponding to the initial data type, a storage space occupied by the data to be stored in the database is greatly reduced before the data to be stored is stored in the database. In addition, the method according to the present disclosure is performed prior to lossy or lossless data compression storage of the data to be stored in the related art. That is, on the basis of a compression ratio when the data to be stored is stored in the related art, the present disclosure further improves a compression effect of the data to be stored by reducing the data length when the data to be stored is stored, and further saves storage resources of the database.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of a method for storing data in accordance with one exemplary embodiment of the present disclosure;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of a method for storing data in accordance with one exemplary embodiment of the present disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of a method for storing data in accordance with another exemplary embodiment of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method for storing data in accordance with yet another exemplary embodiment of the present disclosure;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of a method for storing data in accordance with still another exemplary embodiment of the present disclosure;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of a method for storing data in accordance with still yet another exemplary embodiment of the present disclosure;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a structural block diagram of an apparatus for storing data in accordance with one exemplary embodiment of the present disclosure; and</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic structural diagram of a computer device in accordance with one exemplary embodiment of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0020" num="0019">The present disclosure will be described in further detail with reference to the accompanying drawings, to present the objectives, technical solutions, and advantages of the present disclosure more clearly.</p><p id="p-0021" num="0020">The term &#x201c;plurality&#x201d; herein refers to two or more. The term &#x201c;and/or&#x201d; herein describes the correspondence of the corresponding objects, indicating three kinds of relationship. For example, A and/or B, can be expressed as: A exists alone, A and B exist concurrently, B exists alone. The character &#x201c;/&#x201d; generally indicates that the context object is an &#x201c;OR&#x201d; relationship.</p><p id="p-0022" num="0021">For ease of understanding, the terms involved in the embodiments of the present disclosure will be explained as below.</p><p id="p-0023" num="0022">Data type: the data types in the present disclosure are data types extensively involved in most databases, including an integer type, a floating-point type and an enumerated type; the integer types include a byte integer type (1 Byte), a short integer type (2 Byte), an ordinary integer type (4 Byte) and a long integer type (&#x3e;4 Byte); and the floating-point type includes a single-precision floating-point type (4 Byte) and a double-precision floating-point type (8 Byte).</p><p id="p-0024" num="0023">Enumerated value: enumerated values of all data are listed by predefining to define an ordered set; the order of these data is consistent with that of the enumerated values; and in one schematic example, morning=1, afternoon=2 and evening=3, where 1, 2 and 3 are the enumerated values corresponding to the above data.</p><p id="p-0025" num="0024">Lossless data compression: it refers to reconstruction (or called restoration and decompression) of compressed data, and the reconstructed data is exactly the same as the original data.</p><p id="p-0026" num="0025">A database refers to data sets that are stored together in a certain way, can be shared with multiple users, have the least possible redundancy, and are independent of an application. The database can be regarded as an electronic file cabinet (a place for storing electronic files). Users can perform operations such as adding, querying, updating, and deleting data in the files.</p><p id="p-0027" num="0026">Especially with the development of Internet of Things, large-scale databases based on the Internet of Things have emerged, such as time series data collected and generated based on various real-time monitoring, inspection and analysis equipment in the power industry, the chemical industry, and the like. These industrial data have the following typical characteristics: high generation frequency (each monitoring site can generate multiple data in one second), and multiple monitoring sites and large amount of information (the monitoring sites generate data every second, occupying a lot of storage space).</p><p id="p-0028" num="0027">Regarding the data monitoring systems involved in various industries based on the Internet of things, the method for storing data according to the present disclosure can perform data type conversion on data to the stored to reduce the space occupied by data storage. The following embodiments take a time series database based on a wind power station data monitoring system as an example for explanation.</p><p id="p-0029" num="0028">Schematically, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of a method for storing data in accordance with one exemplary embodiment of the present disclosure. A wind power station means a place where wind energy is captured, converted to electric energy, and fed into a power grid by a transmission line. In the wind power station <b>100</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, there are multiple monitoring sites (e.g., a monitoring site A and a monitoring point B), and each monitoring point collects data at their own respective monitoring time intervals, and stores the collected data to a database by a computer device <b>120</b>. After acquiring data to be stored (the data collected by each measuring site), the computer device <b>120</b> first inputs the data to be stored into a compression module <b>121</b>. The compression module <b>121</b> can perform the method for storing data according to the present disclosure, i.e., the compression module <b>121</b> converts the data to be stored to data to be stored of a target data type. Then, the computer device <b>120</b> performs lossless compression on the data to be stored of the target data type, and stores the data to be stored of the target data type that is subjected to the lossless data compression algorithm in the database. When the user queries the data collected by the monitoring site A by a terminal <b>110</b>, the computer device <b>120</b> decompresses and extracts the stored data by a decompression algorithm corresponding to the lossless data compression algorithm.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of a method for storing data in accordance with one exemplary embodiment of the present disclosure, and this exemplary embodiment is executed by a computer device equipped with a database. The method includes the following steps.</p><p id="p-0031" num="0030">In step <b>201</b>, data to be stored is acquired.</p><p id="p-0032" num="0031">In some embodiments, the data to be stored is acquired by a data monitoring system via a monitoring sensor, and/or, the data to be stored is data actively input by a user.</p><p id="p-0033" num="0032">In some embodiments, the data to be stored is pre-provided with a data identifier. The user who needs to acquire the data from a database may enter the specific data identifier to acquire the data stored by taking the data identifier as an identifier.</p><p id="p-0034" num="0033">In some embodiments, in order to facilitate data search, the data identifier is relevant to an actual meaning of the data to be stored. Setting rules of the data identifier are not limited in the embodiments of the present disclosure.</p><p id="p-0035" num="0034">In one schematic example, a wind power station data monitoring system includes multiple scenario-relevant monitoring siting, e.g., a temperature monitoring site, a humidity monitoring site and a wind direction monitoring site. The data monitoring system records English identifiers of the monitoring sites as the data identifiers of the monitoring sites. For example, the data identifier corresponding to data of the temperature monitoring site is temperature, and the user may enter the data identifier (temperature) to acquire the data of the temperature monitoring site.</p><p id="p-0036" num="0035">In step <b>202</b>, the data to be stored is converted from an initial data type to a target data type.</p><p id="p-0037" num="0036">In some embodiments, since the monitoring sites have different actual monitoring objects, the corresponding monitored data is of different initial data types. That is, the data to be stored of the monitoring sites is of different initial data types.</p><p id="p-0038" num="0037">In one schematic example, the wind power station data monitoring system includes a monitoring site for monitoring the number of electric generators currently operating normally, and the initial data type of the data to be stored of the monitoring site is integer data. The wind power station data monitoring system includes a humidity monitoring site, and owing to demands on the precision of the monitoring sensor, data of the humidity monitoring site is accurate to two digits, and the initial data type of the data to be stored of this monitoring site is floating-point data.</p><p id="p-0039" num="0038">In some embodiments, the data to be stored of each monitoring site is preset. When the user has custom requirements on the data type of the monitoring site, the data type of each monitoring site may be preset.</p><p id="p-0040" num="0039">In one schematic example, the data precision of the humidity monitoring site is limited to the precision of one digit, and the initial data type of the data to be stored of this monitoring site is preset as integer data from the floating-point data in the above example.</p><p id="p-0041" num="0040">However, owing the diversity of the data of the monitoring sites, in the process of acquiring the data to be stored for storage, there is a problem that some data to be stored wastes a storage space. For example, the humidity monitoring site requires the precision of three decimal places, the initial data type corresponding to this monitoring site is the floating-point data. When the humidity monitoring site has data to be stored with all three decimal places being zero, it is obvious that the data to be stored may be stored in a shorter byte data type, for example, the data to be stored may be converted from floating-point data to integer data for storage, and the data to be stored has lossless data validity after being converted from the initial data type to the integer data.</p><p id="p-0042" num="0041">In this embodiment, the converted data type is defined as the target data type, and a data length corresponding to the target data type is less than that corresponding to the initial data type.</p><p id="p-0043" num="0042">In some embodiments, based on the specific value of the data to be stored, the data to be stored is converted from the initial data type to the target data type on the premise of not wasting the storage space and guaranteeing the validity of the original data. It is obvious that the corresponding data length of the data to be stored that is converted to the target data type is less than that corresponding to the initial data type.</p><p id="p-0044" num="0043">In step <b>203</b>, the data to be stored of the target data type is stored to the database.</p><p id="p-0045" num="0044">In some embodiments, after converting the data type of the data to be stored to the target data type, the computer device stores the data to be stored of the target data type in the database, and the data to be stored that is stored in the database may realize data management and sharing, such that the data of each monitoring site may be queried and managed under management requirements of each monitoring system.</p><p id="p-0046" num="0045">In summary, in this embodiment, after acquiring the data to be stored, the computer device converts the data to be stored from the initial data type to the target data type. Since the data length of the data to be stored that is converted to the target data type is less than that corresponding to the initial data type, the storage space occupied by the data to be stored in the database is greatly reduced before the data to be stored is stored in the database. In addition, the method according to this embodiment is performed prior to lossy or lossless data compression storage of the data to be stored in related art. That is, on the basis of a compression ratio when the data to be stored is stored in the related art, the present disclosure further improves a compression effect of the data to be stored by reducing the data length when the data to be stored is stored, and further saves storage resources of the database.</p><p id="p-0047" num="0046">The above schematic example only lists a simple data conversion example (with reference to the specific value of the data to be stored, the data type of the data to be stored is converted from the floating-point type to the integer type), and the method for storing data according to this embodiment is described in detail below with reference to the data types possibly included by the data to be stored.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>3</b></figref> a flowchart of a method for storing data in accordance with one exemplary embodiment of the present disclosure, and this exemplary embodiment is executed by a computer device provided with a database. The method includes the following steps.</p><p id="p-0049" num="0048">In step <b>301</b>, data to be stored is acquired.</p><p id="p-0050" num="0049">Reference may be made to the above step <b>201</b> for the implementation of this step, which is not repeated in this embodiment.</p><p id="p-0051" num="0050">In some embodiments, step <b>302</b> is performed if an initial data type is a floating-point type and the data to be stored meets an integer type conversion condition; and step <b>303</b> is performed if the initial data type is the floating-point type and the data to be stored does not meet the integer type conversion condition.</p><p id="p-0052" num="0051">In step <b>302</b>, the data to be stored is converted from the floating-point type to an integer type if the initial data type is the floating-point type and the data to be stored meets the integer type conversion condition.</p><p id="p-0053" num="0052">Floating-point data includes single-precision floating-point data and double-precision floating-point data. The byte size taken up by the single-precision floating-point data is 4 Byte, and the byte size taken up by the double-precision floating-point data is 8 Byte.</p><p id="p-0054" num="0053">In one schematic example, in a wind power station data monitoring system, the initial data type of a temperature monitoring site is preset to a single-precision floating-point type, and data currently monitored by the temperature monitoring site is 28.000&#xb0; C. It is obvious that a storage space of a database will be wasted if the data continues to be stored as the single-precision floating-point type.</p><p id="p-0055" num="0054">In some embodiments, this step includes the following steps and is used for solving the problems involved in the foregoing schematic example.</p><p id="p-0056" num="0055">I. A computer device acquires a decimal value of the data to be stored if the initial data type is the floating-point type and the data to be stored includes one decimal.</p><p id="p-0057" num="0056">When storing the floating-point data, the computer device only retains the value of the first decimal place during storage if all decimals of the data are zero. For example, if the data to be stored is 1.000 of which the three decimals are all zero, when the computer device stores the data, the storage result is 1.0, i.e., only the value of the first decimal place of the data to be stored is retained.</p><p id="p-0058" num="0057">In some embodiments, when the data stored by the computer device includes at least two decimals, in this embodiment, the data does not have the feature of being converted to integer data. For example, if the data to be stored is 1.010, in order to ensure the validity of the data to be stored, the solution provided in this embodiment fails to convert the data (1.010) to the integer data for storage.</p><p id="p-0059" num="0058">Therefore, with reference to the characteristics of data storage by the computer device, in some embodiments, the integer conversion conditions in this embodiment are that the initial data type is the floating-point type, the data to be stored includes one decimal and the decimal value is zero.</p><p id="p-0060" num="0059">II. If the decimal value is zero, the computer device determines that the data to be stored meets the integer type conversion condition, and converts the data to be stored from the floating-point type to the integer type.</p><p id="p-0061" num="0060">In some embodiments, after the computer device acquires the decimal value of the data to be stored, it needs to judge whether the decimal value is zero according to the determined integer conversion conditions. If the decimal value is zero, it is determined that the data to be stored meets the integer type conversion condition, and the data to be stored is converted from the floating-point type to the integer type.</p><p id="p-0062" num="0061">In one schematic example, in the wind power station data monitoring system, since the determination of a wind direction in a wind direction monitoring site involves complicated geographical locations and other factors, the initial data type of data monitored by this monitoring site is preset to the double-precision floating-point type (8 Byte storage). If part of the monitored data (the data to be stored) meets the integer type conversion condition, compared with the method of storing the monitored data as the initial data type, converting the monitored data to a byte integer type (1 Byte storage) for storage may save the storage space by nearly 90%.</p><p id="p-0063" num="0062">In step <b>303</b>, the data to be stored is converted from the initial data type to a target data type according to initial precision of the data to be stored if the initial data type is the floating-point type and the data to be stored does not meet the integer type conversion condition.</p><p id="p-0064" num="0063">In some embodiments, the computer device further performs data type conversion on the data to be stored according to the initial precision of the data to be stored if the initial data type is the floating-point type and the data to be stored does not meet the integer type conversion condition.</p><p id="p-0065" num="0064">In one schematic example, in the wind power station data monitoring system, the initial data type of data of the wind direction monitoring site is preset to the double-precision floating-point type (8 Byte storage). If significant data bits of part of monitored data (the data to be stored) only take up 2 Bytes, it is obvious that the storage space of the database will be wasted if the computer device continues to store the data as the double-precision floating-point type.</p><p id="p-0066" num="0065">In some embodiments, this step includes the following substeps and is used for solving the problems involved in the foregoing schematic example.</p><p id="p-0067" num="0066">I. The computer device acquires converted data by converting the data to be stored from double precision to single precision if the initial precision is double precision.</p><p id="p-0068" num="0067">In some embodiments, the initial precision is the maximum significant digit number corresponding to the initial data type of the data to be stored. When the initial data type of the data to be stored is the double-precision floating-point type, the initial precision of the data to be stored is to retain 16 significant digits (decimalism); and when the initial data type of the data to be stored is the single-precision floating-point type, the initial precision of the data to be stored is to retain 8 significant digits (decimalism).</p><p id="p-0069" num="0068">Optionally, based on the technical effect of saving the storage space of the database in the present disclosure, for the data type conversion of the floating-point data, the present disclosure includes only conversion from the double-precision floating-point data to single-precision floating-point data but not conversion from the single-precision floating-point data to the double-precision floating-point data.</p><p id="p-0070" num="0069">II. The computer device converts the data to be stored from the double-precision floating-point type to the single-precision floating-point type if a decimal place of the converted data is consistent with that of the data to be stored.</p><p id="p-0071" num="0070">Since the computer device is prone to loss of precision when converting the double-precision floating-point data to the single-precision floating-point data, in some embodiments, the computer device needs to check decimal places of the converted data. If the decimal places of the converted data are consistent with those of the data to be stored, it is determined that there is no loss of precision when the data type of the data to be stored is converted to the single-precision floating-point type.</p><p id="p-0072" num="0071">In one schematic example, the initial data type of the data monitored by the monitoring site is preset to the double-precision floating-point type (8 Byte storage). If part of the monitored data (the data to be stored) may be converted to the single-precision floating-point type (4 Byte storage) without loss of precision, compared with the method of storing the monitored data as the initial data type, converting the monitored data to the single-precision floating-point type for storage may save the storage space of nearly 50%.</p><p id="p-0073" num="0072">According to the contents of step <b>302</b> and step <b>303</b>, the data type conversion of the floating-point data is realized. That is, the computer device converts the data to be stored from the initial data type to the target data type, so that the data length corresponding to the target data type is less than that corresponding to the initial data type.</p><p id="p-0074" num="0073">In step <b>304</b>, the data to be stored of the target data type is converted to binary data and the binary data is stored in the database.</p><p id="p-0075" num="0074">Binary is a numerical system widely used in the computing technology, and currently, computer systems mainly employ binary systems.</p><p id="p-0076" num="0075">In some embodiments, the computer device converts the data to be stored of the target data type to binary data and stores the binary data in the database.</p><p id="p-0077" num="0076">In step <b>305</b>, the binary data in the database is compressed by a lossless data compression algorithm.</p><p id="p-0078" num="0077">After the data type conversion of the data to be stored is completed, in order to increase a data compression ratio as much as possible, in some embodiments, the computer device performs secondary compression on the binary data in the database with reference to the lossless data compression algorithm.</p><p id="p-0079" num="0078">Lossless data compression is to express repetitive portions in the data by means of encoding to realize data compression. When reconstruction (or called reduction and decompression) is performed on the compressed data, the reconstructed data is completely the same as the original data. The lossless data compression algorithms involved in the embodiments of the present disclosure include but are not limited to a Simple 8B algorithm, a Run-Length Encoding (RLE) algorithm, a Raw encoding algorithm, a Packed encoding algorithm, a floating-point number exclusive OR (XOR) algorithm and a Snappy algorithm.</p><p id="p-0080" num="0079">In summary, in this embodiment, when the acquired data to be stored is the floating-point data, the computer device determines whether the data to be stored meets the integer type conversion condition, if the data meets the integer type conversion condition, converts the data to be stored from the floating-point type to the integer type, and otherwise, converts the data to be stored from the initial data type to the target data type according to the initial precision of the data to be stored, so that the data length corresponding to the target data type is less than that corresponding to the initial data type, which reduces the data length of the floating-point data. In addition, the data to be stored that is subjected to binary serialization is stored in the database, and the lossless data compression is performed on the binary data in the database, such that the compression ratio is further increased. Thus, the data compression ratio is increased on the premise of not impairing the validity of the data.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method for storing data in accordance with one exemplary embodiment of the present disclosure, and this exemplary embodiment is executed by a computer device equipped with a database. A method for storing the database is based on the method for storing data according to this embodiment. The method includes the following steps.</p><p id="p-0082" num="0081">In step <b>401</b>, data to be stored is acquired.</p><p id="p-0083" num="0082">Reference may be made to the above step <b>201</b> for the implementation of this step, which is not repeated in this embodiment.</p><p id="p-0084" num="0083">In step <b>402</b>, the computer device converts the data to be stored from an initial data type to a target data type based on a value of the data to be stored if the initial data type is an integer type.</p><p id="p-0085" num="0084">Compared with floating-point data, integer data has a shorter data length during storage. In some embodiments, if data type conversion is continuously performed on the data to be stored based on the value of the data to be stored, the data length of the data to be stored may be reduced further.</p><p id="p-0086" num="0085">Integer types include a byte integer type (1 Byte), a short integer type (2 Byte), an ordinary integer type (4 Byte), and a long integer type (&#x3e;4 Byte). The byte integer type includes a value range interval [&#x2212;128, 127], the short integer type includes a value range interval [&#x2212;32768, 32767], the ordinary integer type includes a value range interval [&#x2212;2147483648, 2147483647], and data beyond the above range intervals belongs to long integer data.</p><p id="p-0087" num="0086">In some embodiments, this step includes the following substeps.</p><p id="p-0088" num="0087">I. The computer device determines a target value interval in which the value of the data to be stored lies.</p><p id="p-0089" num="0088">Since the initial data type of the data to be stored is preset, there is a case where the data to be stored may be converted to a data type of a smaller storage byte.</p><p id="p-0090" num="0089">In one schematic example, the data type of a certain monitoring site is an ordinary integer type, and the value of the data to be stored is 156. If the computer device converts the data to be stored to short integer data for storage, the storage space may be saved by nearly 50%.</p><p id="p-0091" num="0090">In some embodiments, the computer device determines a target value interval where the value of the data to be stored lies. The target value interval includes at least one of the value range intervals included by the byte integer type, the short integer type, the ordinary integer type, and the long integer type mentioned above.</p><p id="p-0092" num="0091">In one schematic example, if the data type of a certain monitoring site is a long integer type, and the computer device acquires data A to be stored (the value is 64) of the monitoring site, candidate intervals of the target value interval of the data A to be stored include the value range intervals included by the byte integer type, the short integer type, and the ordinary integer type. Based on the technical effect of saving the storage space of the database in the present disclosure, the computer device determines the value range interval included in the byte integer type as the target value interval.</p><p id="p-0093" num="0092">II. The computer device converts the data to be stored to a target integer type corresponding to a target integer data length according to the target integer data length corresponding to the target value interval.</p><p id="p-0094" num="0093">Optionally, the target integer type includes at least one of the byte integer type, the short integer type, the ordinary integer type, and the long integer type.</p><p id="p-0095" num="0094">In the above schematic example, if the target value interval of the data 1 to be stored is the value range interval included in the byte integer type, the computer device converts the data 1 to be stored to the target integer type (byte integer type) corresponding to the target integer data length (1 Byte) according to the target integer data length (1 byte) corresponding to the target value interval.</p><p id="p-0096" num="0095">In step <b>403</b>, the data to be stored of the target data type is converted to binary data and the binary data is stored in the database.</p><p id="p-0097" num="0096">Reference may be made to the above step <b>304</b> for the implementation of this step, which is not repeated in this embodiment.</p><p id="p-0098" num="0097">In step <b>404</b>, the binary data in the database is compressed by a lossless data compression algorithm.</p><p id="p-0099" num="0098">Reference may be made to the above step <b>305</b> for the implementation of this step, which is not repeated in this embodiment.</p><p id="p-0100" num="0099">In some embodiments, steps <b>402</b> to <b>403</b> are performed after step <b>302</b>. That is, after the data to be stored (the floating-point data in the above embodiment) meets the integer type conversion condition, the computer device converts the data to be stored from the initial data type to the target data type based on the value of the data to be stored, converts the converted data to be stored to binary data, stores the binary data in the database, and performs lossless data compression on the binary data in the database.</p><p id="p-0101" num="0100">In summary, in this embodiment, when the acquired data to be stored is integer data, the computer device determines the target value interval in which the value of the data to be stored lies, and converts the data to be stored to the target integer type corresponding to the target integer data length according to the target integer data length corresponding to the target value interval, so that the data length corresponding to the target data type is less than that corresponding to the initial data type. Compared with the method of directly storing data to be stored to a database in the related art, the method of performing data type conversion before data storage in this embodiment greatly improves a compression effect of the integer data, and further saves the storage space of the database.</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of a method for storing data in accordance with one exemplary embodiment of the present disclosure, and this exemplary embodiment is executed by a computer device equipped with a database. A method for storing the database is based on the method for storing data according to this embodiment. The method includes the following steps.</p><p id="p-0103" num="0102">In step <b>501</b>, data to be stored is acquired.</p><p id="p-0104" num="0103">Reference may be made to the above step <b>201</b> for the implementation of this step, which is not repeated in this embodiment.</p><p id="p-0105" num="0104">In some embodiments, step <b>502</b> is performed if the data to be stored belongs to preset data, and step <b>505</b> is performed if the data to be stored does not belong to the preset data.</p><p id="p-0106" num="0105">In step <b>502</b>, if the data to be stored belongs to preset data, the data to be stored is converted to a corresponding enumerated value according to a preset mapping relationship and the enumerated value is stored in the database.</p><p id="p-0107" num="0106">An actual data monitoring system includes the data to be stored as the preset data, e.g., relatively fixed data in a monitoring process such as the type, monitoring time and a monitoring distance of each monitoring site. If a large amount of the above-mentioned preset data repeatedly appears during data collection, a problem of wasting the storage space of the database will be caused to a certain extent.</p><p id="p-0108" num="0107">In some embodiments, the computer device converts the complicated preset data or the preset data that takes up more bytes during storage to the corresponding enumerated value according to the preset mapping relationship, and stores the converted enumerated value in the database.</p><p id="p-0109" num="0108">Optionally, the mapping relationship may be a user-defined mapping relationship, or a mapping relationship template pre-stored in the computer device, which is not limited in the embodiments of the present disclosure.</p><p id="p-0110" num="0109">In one schematic example, the data monitoring system has some fixed values, e.g., 220.0 V AC voltage. The storage space of the database will be wasted if the computer device directly stores the fixed values. At this time, the computer device may map data corresponding to the AC voltage into an integer 1, and the integer 1 is the corresponding enumerated value and is stored in the database. The initial data type corresponding to the AC voltage data is a floating-point type, and after the AC voltage data is converted to the enumerated value via the preset mapping relationship, the data type of the AC voltage is converted to an integer type, which saves the storage space of the database to a certain extent.</p><p id="p-0111" num="0110">In another schematic example, data of an on/off type generally exists in the actual application process. At this time, on or off may be mapped with one Bit, on is mapped to 1, and off is mapped to 0. That is, the computer device will map one integer or Boolean data to one Bit for storage, which also saves the storage space of the database to a certain extent.</p><p id="p-0112" num="0111">In some embodiments, the computer device converts the enumerated value to binary data, stores the binary data in the database, and compresses the binary data in the database by a lossless data compression algorithm.</p><p id="p-0113" num="0112">In some embodiments, step <b>503</b> and step <b>504</b> are further included after step <b>502</b>.</p><p id="p-0114" num="0113">In step <b>503</b>, query data is acquired from the database in response to a query request.</p><p id="p-0115" num="0114">In some embodiments, the computer device stores the data to be stored in the database, and performs an efficient data query by the query request when the data to be stored is required.</p><p id="p-0116" num="0115">In step <b>504</b>, data corresponding to the enumerated value is acquired according to the preset mapping relationship if the query data includes the enumerated value.</p><p id="p-0117" num="0116">Before the preset data is stored in the database, the computer device has converted the preset data to the enumerated value according to the preset mapping relationship and stored the enumerated value in the database. Therefore, in some embodiments, a user enters the enumerated value via a query channel of the computer device, and the computer device correspondingly queries out the preset data corresponding to the entered enumerated value according to the preset mapping relationship.</p><p id="p-0118" num="0117">In the schematic example shown in step <b>502</b>, the user may query and acquire the preset data corresponding to the integer 1 by entering the integer 1 via the query channel of the database provided by the computer device, i.e., AC voltage 220.0V.</p><p id="p-0119" num="0118">However, it is worth noting that in the process of determining the mapping relationship of the preset data, the computer device may not map the multiple preset data to the same enumerated value; otherwise, multiple preset data will be queried out when data query is performed by entering the enumerated value in the database. As a result, target query data that the user expects may not be obtained.</p><p id="p-0120" num="0119">In some embodiments, the above case that the multiple preset data is mapped into the same enumerated value does not include customized definition, i.e., does not include the case that the user defines the multiple preset data as the same enumerated value.</p><p id="p-0121" num="0120">In step <b>505</b>, the data to be stored is converted from the initial data type to the target data type if the data to be stored does not belong to the preset data.</p><p id="p-0122" num="0121">Correspondingly, if the data to be stored does not belong to the preset data mentioned in step <b>502</b>, in some embodiments, the computer device continues to determine whether the data to be stored is integer data or floating-point data, i.e., the computer device continues to perform the method for storing data as illustrated in <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref> after step <b>505</b>.</p><p id="p-0123" num="0122">In summary, in this embodiment, when the acquired data to be stored is the preset data, the computer device converts the data to be stored to the corresponding enumerated value according to the preset mapping relationship. If the data to be stored does not belong to the preset data, the data to be stored is converted from the initial data type to the target data type according to the method for storing data according to the above embodiment. Compared with a method of directly storing a large amount of preset data to a database in the related art, the enumerated value mapping method according to this embodiment has the advantage that a large amount of preset data is converted to the enumerated values for storage through the preset mapping relationship, which further saves the storage space of the database.</p><p id="p-0124" num="0123">The methods for storing data used when the data to be stored is of different data types are respectively listed in the above embodiments, and as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the technical solutions according to the above embodiments are combined by means of a flowchart, such that the methods for storing data according to the embodiments of the present disclosure are further described more completely in detail.</p><p id="p-0125" num="0124">In step <b>601</b>, data to be stored is acquired.</p><p id="p-0126" num="0125">In some embodiments, step <b>602</b> is performed after step <b>601</b>.</p><p id="p-0127" num="0126">In step <b>602</b>, whether the data to be stored may be converted to an enumerated value is judged.</p><p id="p-0128" num="0127">In some embodiments, a computer device performs a first judgment, i.e., the computer device judges whether the data to be stored can be converted to the enumerated value, if the data can be converted to the enumerated value, step <b>603</b> is performed, and otherwise, the computer device continues to perform a second judgment.</p><p id="p-0129" num="0128">In step <b>603</b>, the data to be stored is converted to the enumerated value.</p><p id="p-0130" num="0129">In some embodiments, step <b>610</b> is performed after step <b>603</b>.</p><p id="p-0131" num="0130">In step <b>604</b>, whether the data to be stored is integer data or floating-point-type data is judged.</p><p id="p-0132" num="0131">In some embodiments, the computer device performs the second judgment, i.e., the computer device judges whether the data to be stored is the integer data or the floating-point data, step <b>605</b> is performed if it is the integer data, and the computer device continues to perform a third judgement if it is the floating-point data.</p><p id="p-0133" num="0132">In step <b>605</b>, the integer data is adjusted in length according to a value of the data to be stored.</p><p id="p-0134" num="0133">In some embodiments, step <b>610</b> is performed after step <b>605</b>.</p><p id="p-0135" num="0134">In step <b>606</b>, whether the data to be stored may be converted to an integer type is judged.</p><p id="p-0136" num="0135">In some embodiments, the computer device performs the third judgment, i.e., the computer device judges whether the data to be stored can be converted to the integer type, if the data can be converted to the integer type, step <b>605</b> is performed, and otherwise, the computer device continues to perform a fourth judgment.</p><p id="p-0137" num="0136">In step <b>607</b>, whether the data to be stored is single-precision floating-point data or double-precision floating-point data is judged.</p><p id="p-0138" num="0137">In some embodiments, the computer device performs the fourth judgment, i.e., the computer device judges whether the data to be stored is the single-precision floating-point data or the double-precision floating-point data, step <b>610</b> is performed if it is the single-precision floating-point data, and the computer device continues to perform a fifth judgment if it is the double-precision floating-point data.</p><p id="p-0139" num="0138">In step <b>608</b>, whether the data to be stored may be converted to the single-precision floating-point data is judged.</p><p id="p-0140" num="0139">In some embodiments, the computer device performs the fifth judgment, i.e., the computer device judges whether the data to be stored may be converted to the single-precision floating-point data, if the data can be converted to the single-precision floating-point data, step <b>609</b> is performed, and otherwise, step <b>610</b> is performed.</p><p id="p-0141" num="0140">In step <b>609</b>, the data to be stored is converted to the single-precision floating-point data.</p><p id="p-0142" num="0141">In some embodiments, step <b>610</b> is performed after step <b>609</b>.</p><p id="p-0143" num="0142">In step <b>610</b>, the data to be stored that is subjected to data type conversion (including data to be stored that is subjected to data type conversion) is converted to binary data.</p><p id="p-0144" num="0143">In some embodiments, step <b>611</b> is performed after step <b>610</b>.</p><p id="p-0145" num="0144">In step <b>611</b>, the binary data is stored to a database.</p><p id="p-0146" num="0145">In some embodiments, step <b>612</b> is performed after step <b>611</b>.</p><p id="p-0147" num="0146">In step <b>612</b>, the binary data in the database is compressed by a lossless data compression algorithm.</p><p id="p-0148" num="0147">In summary, in this embodiment, the computer device converts the data to be stored to data of the corresponding target data type according to different initial data types and judgment results of the data to be stored, such that compression of the data of different data types is realized. Compared with a method of directly storing the data to be stored to a database in the related art, the method for storing data according to this embodiment has the advantage that since data type conversion is performed on the data to be stored, and lossless data compression is performed on the data to be stored that is stored to the database, a storage space of the database is greatly saved.</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a structural block diagram of an apparatus for storing data in accordance with one embodiment of the present disclosure. The apparatus may be implemented as all or part of a computer device through software, hardware or a combination thereof.</p><p id="p-0150" num="0149">The apparatus includes: a first data acquiring module <b>701</b>, configured to acquire data to be stored; a data converting module <b>702</b>, configured to convert the data to be stored from an initial data type to a target data type, wherein a data length corresponding to the target data type is less than that corresponding to the initial data type; and a data storing module <b>703</b>, configured to store the data to be stored of the target data type to a database.</p><p id="p-0151" num="0150">The data conversion module <b>702</b> includes: a first converting sub-module, configured to convert the data to be stored from a floating-point type to an integer type if the initial data type is the floating-point type and the data to be stored meets an integer type conversion condition; and a second converting sub-module, configured to convert the data to be stored from the initial data type to the target data type according to initial precision of the data to be stored if the initial data type is the floating-point type and the data to be stored does not meet the integer type conversion condition.</p><p id="p-0152" num="0151">Optionally, the first converting sub-module is configured to acquire a decimal value of the data to be stored if the initial data type is the floating-point type and the data to be stored includes one decimal; and determine that the data to be stored meets the integer type conversion condition and to convert the data to be stored from the floating-point type to the integer type if the decimal value is zero.</p><p id="p-0153" num="0152">Optionally, the second converting sub-module is configured to acquire converted data by converting the data to be stored from double precision to single precision if the initial precision is the double precision; and convert the data to be stored from a double-precision floating-point type to a single-precision floating-point type if a decimal place of the converted data is consistent with that of the data to be stored.</p><p id="p-0154" num="0153">The data storing module <b>703</b> includes a third converting sub-module, configured to convert the data to be stored from the initial data type to the target data type according to a value of the data to be stored if the initial data type is an integer type.</p><p id="p-0155" num="0154">Optionally, the third converting sub-module is configured to determine a target value interval of the value of the data to be stored; and convert the data to be stored to a target integer type corresponding to a target integer data length according to the target integer data length corresponding to the target value interval, the target integer type including at least one of a byte integer type, a short integer type, an ordinary integer type and a long integer type.</p><p id="p-0156" num="0155">Optionally, the apparatus further includes an enumerated value storing module, configured to convert the data to be stored to a corresponding enumerated value according to a preset mapping relationship and store the enumerated value to the database if the data to be stored belongs to preset data.</p><p id="p-0157" num="0156">The data storing module <b>703</b> includes a fourth converting sub-module configured to convert the data to be stored from the initial data type to the target data type if the data to be stored does not belong to the preset data.</p><p id="p-0158" num="0157">Optionally, the apparatus further includes: a data querying module, configured to acquire query data from the database according to a query request; and a second data acquiring module, configured to acquire data corresponding to the enumerated value according to the preset mapping relationship if the query data includes the enumerated value.</p><p id="p-0159" num="0158">The data storage module <b>703</b> includes a fifth converting sub-module, configured to convert the data to be stored of the target data type to binary data and to store the binary data to the database.</p><p id="p-0160" num="0159">Optionally, the apparatus further includes a data compressing module, configured to compress the binary data in the database by a lossless data compression algorithm.</p><p id="p-0161" num="0160"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a structural block diagram of a computer device <b>800</b> in accordance with one exemplary embodiment of the present disclosure. The computer device <b>800</b> may be an electronic device equipped with and miming an application, such as a smart phone, a tablet computer, an e-book or a portable personal computer. The computer device <b>800</b> in the present disclosure may include one or more of the following components: a processor <b>810</b>, a memory <b>820</b> and a screen <b>830</b>.</p><p id="p-0162" num="0161">The processor <b>810</b> may include one or more processing cores. The processor <b>810</b> connects various portions within the entire computer device <b>800</b> using various interfaces and lines, and executes various functions of the computer device <b>800</b> and processes data by running or executing an instruction, program, code set or instruction set stored in the memory <b>820</b>, and invoking data stored in the memory <b>820</b>. Optionally, the processor <b>810</b> may be implemented by using at least one of hardware forms of a digital signal processor (DSP), a field-programmable gate array (FPGA), and a programmable logic array (PLA). The processor <b>810</b> may integrate one or a combination of more of a central processing unit (CPU), a graphics processing unit (GPU), a modem, and the like. The CPU mainly processes operating systems, user interfaces, applications, etc.; the GPU mainly renders and draws the content required to be displayed by the screen <b>830</b>; and the modem is used for handling wireless communication. It can be understood that the above modem may also not be integrated into the processor <b>810</b> and is independently implemented by one communication chip.</p><p id="p-0163" num="0162">The memory <b>820</b> may include a random access memory (RAM), and may also include a read-only memory (ROM). Optionally, the memory <b>820</b> includes a non-transitory computer-readable storage medium. The memory <b>820</b> may be used for storing instructions, programs, codes, a code set, or an instruction set. The memory <b>820</b> may include a program storage area and a data storage area. The program storage area may store an instruction for implementing an operating system, an instruction for implementing at least one function (e.g., a touch function, an audio playing function and an image playing function), instructions for implementing the various method embodiments described above, and the like. The operating system may be an Android system (including a system based on Android system in-depth development), an IOS system (including a system based on IOS system in-depth development) developed by Apple Inc. or other systems. The data storage area may also store data (e.g., contacts, audio and video data and chat history data) created by the computer device in use, and the like.</p><p id="p-0164" num="0163">The screen <b>830</b> may be a touch display screen for receiving touch operations on or near the screen by a user using any suitable object, such as a finger and a touch pen, as well as displaying a user interface of each application. The touch display screen is usually disposed on a front panel of the computer device <b>800</b>. The touch display screen may be designed as a full screen, a curved screen, or an anomalous screen. The touch display screen may also be designed as a combination of a full screen and a curved screen, or a combination of an anomalous screen and a curved screen, which is not limited in the embodiments of the present disclosure.</p><p id="p-0165" num="0164">The memory stores at least one instruction, at least one program, a code set, or an instruction set. The at least one instruction, the at least one program, the code set or the instruction set, when loaded and executed by a processor, causes the processor to perform the steps in the methods for storing data as described above.</p><p id="p-0166" num="0165">An embodiment of the present disclosure further provides a computer-readable storage medium storing at least one instruction, at least one program, a code set, or an instruction set stored therein. The at least one instruction, the at least one program, the code set, or the instruction set, when loaded and executed by a processor, causes the processor to perform the steps in the methods for storing data as described above.</p><p id="p-0167" num="0166">Optionally, the computer-readable storage medium may include a ROM, a RAM, a solid state drive (SSD), an optical disk or the like. The RAM may include a resistance random access memory (ReRAM) and a dynamic random access memory (DRAM).</p><p id="p-0168" num="0167">The serial numbers of the embodiments of the present disclosure are merely for description, and do not represent the priority of the embodiments. Described above are merely optional embodiments of the present disclosure, and are not intended to limit the present disclosure. Within the spirit and principles of the present disclosure, any modifications, equivalent substitutions, improvements, and the like are within the protection scope of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for storing data, comprising:<claim-text>acquiring data to be stored;</claim-text><claim-text>converting the data to be stored from an initial data type to a selected one of a plurality of target data types depending on the data, a data length corresponding to the selected target data type being less than that corresponding to the initial data type; and</claim-text><claim-text>storing the data to be stored that is converted to the selected target data type to a database configured to store data converted to any of the plurality of target data types;</claim-text><claim-text>wherein the plurality of target data types includes at least any two of an integer type, a double-precision floating-point type and a single-precision floating-point type.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein converting the data to be stored from the initial data type to the selected one of the plurality of target data types depending on the data comprises:<claim-text>converting the data to be stored from a floating-point type to an integer type if the initial data type is the floating-point type and the data to be stored meets an integer type conversion condition; and</claim-text><claim-text>converting the data to be stored from the initial data type to another selected one of the plurality target data types according to initial precision of the data to be stored if the initial data type is the floating-point type and the data to be stored does not meet the integer type conversion condition.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein converting the data to be stored from the floating-point type to the integer type if the initial data type is the floating-point type and the data to be stored meets the integer type conversion condition comprises:<claim-text>acquiring a decimal value of the data to be stored if the initial data type is the floating-point type and the data to be stored comprises one decimal; and</claim-text><claim-text>determining that the data to be stored meets the integer type conversion condition and converting the data to be stored from the floating-point type to the integer type if the decimal value is zero.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein converting the data to be stored from the initial data type to another selected one of the plurality of target data types according to the initial precision of the data to be stored comprises:<claim-text>acquiring converted data by converting the data to be stored from double precision to single precision if the initial precision is the double precision; and</claim-text><claim-text>converting the data to be stored from a double-precision floating-point type to a single-precision floating-point type if a decimal place of the converted data is consistent with that of the data to be stored.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein converting the data to be stored from the initial data type to a selected one of the plurality of target data types depending on the data comprises:<claim-text>converting the data to be stored from the initial data type to the selected one of the plurality of target data types based on a value of the data to be stored if the initial data type is an integer type.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein converting the data to be stored from the initial data type to the selected one of the plurality of target data types based on the value of the data to be stored comprises:<claim-text>determining a target value interval of the value of the data to be stored; and</claim-text><claim-text>converting the data to be stored to a target integer type corresponding to a target integer data length according to the target integer data length corresponding to the target value interval, the target integer type comprising at least one of a byte integer type, a short integer type, an ordinary integer type, and a long integer type.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein after acquiring the data to be stored, the method further comprises:<claim-text>converting the data to be stored to a corresponding enumerated value according to a preset mapping relationship and storing the enumerated value to the database if the data to be stored belongs to preset data; and</claim-text><claim-text>converting the data to be stored from the initial data type to the selected one of the plurality of target data types comprises:</claim-text><claim-text>converting the data to be stored from the initial data type to the selected one of the plurality of target data types if the data to be stored does not belong to the preset data.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. An apparatus for storing data, comprising:<claim-text>a data acquiring module, configured to acquire data to be stored;</claim-text><claim-text>a data converting module, configured to convert the data to be stored from an initial data type to a selected one of a plurality of target data types depending on the data, a data length corresponding to the target data type being less than that corresponding to the initial data type; and</claim-text><claim-text>a data storing module, configured to store the data to be stored that is converted to the selected target data type to a database configured to store data converted to any one of the plurality of target data types;</claim-text><claim-text>wherein the plurality of target data types includes at least any two of an integer type, a double-precision floating-point type and a single-precision floating-point type.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A computer device, comprising a processor and a memory storing at least one instruction, wherein the at least one instruction, when executed by the processor, causes the processor to perform the method for storing data as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A computer-readable storage medium storing at least one instruction, wherein the at least one instruction, when executed by a processor, causes the processor to perform the method for storing data as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim></claims></us-patent-application>