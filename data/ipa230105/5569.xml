<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005570A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005570</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17777249</doc-number><date>20201209</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="regional"><country>EP</country><doc-number>19214355.0</doc-number><date>20191209</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>16</class><subclass>B</subclass><main-group>30</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>C</section><class>12</class><subclass>Q</subclass><main-group>1</main-group><subgroup>6869</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190201</date></cpc-version-indicator><section>G</section><class>16</class><subclass>B</subclass><main-group>30</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>C</section><class>12</class><subclass>Q</subclass><main-group>1</main-group><subgroup>6869</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">INDEX SEQUENCES FOR MULTIPLEX PARALLEL SEQUENCING</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>LEXOGEN GMBH</orgname><address><city>Vienna</city><country>AT</country></address></addressbook><residence><country>AT</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Moldaschl</last-name><first-name>Michael</first-name><address><city>Wagram am Wagram</city><country>AT</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>T&#xfc;rk</last-name><first-name>Andreas</first-name><address><city>Vienna</city><country>AT</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Reda</last-name><first-name>Torsten</first-name><address><city>Vienna</city><country>AT</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Schaupper</last-name><first-name>Mira Valentina</first-name><address><city>Vienna</city><country>AT</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/EP2020/085368</doc-number><date>20201209</date></document-id><us-371c12-date><date>20220516</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The present invention relates to a set of oligonucleotides comprising index sequences and wherein the set comprises a plurality of subsets of oligonucleotides with different index sequences, wherein the index sequences of a subset of oligonucleotides differ at least by a non-zero number of sequence changes from each other; and wherein the set comprises at least 2 hierarchical tiers of subsets, wherein index sequences of a higher tier subset are members of a lower tier subset, and wherein the index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the index sequences of a higher tier subset; and wherein the oligonucleotides are assigned to one or more subsets. The invention further relates to methods of generating and using such sets.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="90.76mm" wi="158.75mm" file="US20230005570A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="240.28mm" wi="145.97mm" orientation="landscape" file="US20230005570A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="247.23mm" wi="77.47mm" orientation="landscape" file="US20230005570A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="246.21mm" wi="102.28mm" orientation="landscape" file="US20230005570A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="237.41mm" wi="102.36mm" file="US20230005570A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="148.76mm" wi="157.82mm" orientation="landscape" file="US20230005570A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="228.85mm" wi="133.60mm" file="US20230005570A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="228.85mm" wi="135.38mm" file="US20230005570A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="170.60mm" wi="162.48mm" file="US20230005570A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE INVENTION</heading><p id="p-0002" num="0001">The present invention relates to next generation sequencing and oligonucleotide identification in multiplex methods.</p><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0003" num="0002">Index sequences, also referred to as barcodes, are commonly used as short sequences of nucleotides that are added to the fragments in a library, such that fragments from one sample are associated with a unique non-empty set of barcodes. This allows multiple samples to be mixed and sequenced together decreasing sequencing costs and increasing throughput (parallel sequencing or multiplexing). This procedure is visualized in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The left side of <figref idref="DRAWINGS">FIG. <b>1</b></figref> shows three samples (ellipsoids), each containing a collection of fragments (curly lines). During multiplexing, barcodes BC1, BC2 and BC3 are added to the fragments in sample one, two and three, respectively, and barcoded fragments are mixed together. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, therefore, the non-empty set of barcodes associated with a sample consists of a single barcode. This is the most common situation in multiplexing, resulting in a one-to-one relationship between barcodes and samples. After sequencing the multiplexed library, the barcode sequence of each fragment is investigated. If the sequence corresponds to the nucleotide sequence of barcode BC1, BC2 or BC3 the non-barcode sequence of the fragment is assigned to sample one, two and three, respectively. This process of assigning fragment sequences to samples according to their associated barcode sequence is called demultiplexing.</p><p id="p-0004" num="0003">Barcode synthesis, library preparation and sequencing can introduce errors in the barcode sequence and demultiplexing might therefore result in an incorrect assignment of fragments to samples. To avoid contamination of samples with fragment sequences from other samples, barcodes are usually designed to minimize the chance of transforming into each other. This can be done by maximizing the number of changes needed to transform one barcode into another, or in other words by maximizing the inter-barcode distance. Since the achievable inter-barcode distance increases with decreasing number of samples, the barcode set for an experiment should be optimized with respect to the number of samples in the experiment. Inter-barcode distance can, further, be increased by increasing the barcode length. This, however, comes at the cost of a reduction in the length of the sequenced fragment, since the combined number of sequenced nucleotides for barcode and fragment is limited. Hence, the barcode length for an experiment should be chosen such that the required level of cross-contamination is achieved without unnecessarily sacrificing fragment sequence length.</p><p id="p-0005" num="0004">If the inter-barcode distance is large enough, minor errors can still lead to an assignment that is probably correct. These are called error-correcting barcodes and usually use a distance estimation method that closely resembles the amount of nucleotide changes that can happen in the physical sample (see e.g. Buschmann et al. [1], Hawkins et al. [3], WO 2016/018960 A1). Other approaches that address other problems that could prevent proper assignment, such as index hopping, are the use of dual indexes (see MacConaill [5] and WO 2018/136248 A1).</p><p id="p-0006" num="0005">WO 2018/204423 A1 discloses color-balancing of index sequences by pairing A and C with G and T (or U).</p><p id="p-0007" num="0006">WO 2011/100617 A1 discloses index sequences that do not have 4 or more contiguous identical subunits.</p><heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0008" num="0007">Despite various attempts of improving barcodes, there remains a need to provide improved index sequence oligonucleotides that have an optimal distinguishability that allows assignment even in the event of errors. These barcodes should maximize this distinguishability for a sample at hand as used by a practitioner but still allow a compromise with efficiency considering the increased effort and cost for each nucleotide that has to be sequenced.</p><p id="p-0009" num="0008">The present invention provides a set of oligonucleotides comprising index sequences and wherein the set comprises a plurality of subsets of oligonucleotides with different index sequences, wherein the index sequences of a subset of oligonucleotides differ at least by a non-zero number of sequence changes from each other; and wherein the set comprises at least 2 hierarchical tiers of subsets, wherein index sequences of a higher tier subset are members of a lower tier subset, and wherein the index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the index sequences of a higher tier subset; and wherein the oligonucleotides are assigned to one or more subsets.</p><p id="p-0010" num="0009">The invention further provides a method of generating a set of oligonucleotides comprising a plurality of subsets of oligonucleotides with a subset of index sequences comprising the steps of generating a first subset of oligonucleotides with index sequences with a first sequence distance to each other within the first subset, wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another, generating a second subset by including the first subset and adding further oligonucleotides with index sequences with a second sequence distance to each other within the second subset, which second sequence distance is a lower sequence distance than the first sequence distance.</p><p id="p-0011" num="0010">The invention further provides a method of assigning sequencing reads to a sample of oligonucleotides comprising the steps of a) obtaining sample oligonucleotides from a plurality of samples, b) selecting a subset of oligonucleotide index sequences from a set according to the invention, wherein a subset is selected over another subset based on a higher sequence distance of the index sequences to each other within the selected subset; wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another, and wherein the selected subset has at least as many different index sequences as the number of samples of step a), c) adding index sequences from said subset to each sample oligonucleotide wherein the index sequences are indicative of the sample, d) determining the sequence of the sample oligonucleotides or fragments of sample oligonucleotides and determining the index sequence, e) assigning an obtained read sequence to a sample based on the determined index sequence or based on the index sequence which has the lowest sequence distance to the determined index sequence, wherein if two or more index sequences have the same lowest distance then said obtained read is discarded; wherein optionally the sequence distance does not exceed a pre-set criterion value.</p><p id="p-0012" num="0011">The following detailed description and preferred embodiments apply to all aspects of the invention and can be combined with each other without restriction, except were explicitly indicated. E.g. the inventive set can be obtainable by the method of generation; the set can be suitable for the method of assigning sequencing reads. Preferred embodiments and aspects are defined in the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">FIGURES</heading><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>1</b></figref>: Multiplexing, sequencing and demultiplexing. Fragments (curly lines) in three samples (ellipsoids) are barcoded with index sequences BC1, BC2 and BC3.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b></figref>: Nested barcode sets. Smaller index sequence sets (subsets of higher tier) are contained in larger index sequence sets (subsets of lower tier). Increasing barcode set size reduces inter-barcode distance.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b></figref>: Nested barcode sequences. Extending index sequences increases inter-barcode distance and retains the nested structure of index sequence sets.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>4</b></figref>: Schematic of a dynamic programming algorithm for calculation of Levenshtein distances.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>5</b></figref>: Schematic of a reverse probability calculation.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>6</b></figref>: Distribution of B<sub>1</sub>,B<sub>2</sub>,B<sub>3</sub>,B<sub>4 </sub>on a 8&#xd7;12 well-plate.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>7</b></figref>: read and index sequence layout for dual indexing (i7/i5).</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>8</b></figref>: Positional nucleotide distribution for B<sub>1 </sub>with |B<sub>1</sub>|=4.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>9</b></figref>: Positional nucleotide distribution for B<sub>2 </sub>with |B<sub>2</sub>|=8.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>10</b></figref>: Positional nucleotide distribution for B<sub>3 </sub>with |B<sub>3</sub>|=16.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b></figref>: Positional nucleotide distribution for B<sub>4 </sub>with |B<sub>4</sub>|=24.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>12</b></figref>: Count matrix for dual-index experiment measuring synthesis provider dependent cross-contamination.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE INVENTION</heading><p id="p-0025" num="0024">As used herein, the word &#x201c;barcode&#x201d; refers to a &#x201c;index sequence&#x201d;, which is a sequence of nucleotides that is capable of and is used to identify sequences (usually in oligonucleotides or sequencing reads thereof) that are labelled with these index sequences. In the inventive sets and subsets, these index sequences are included into oligonucleotides and thus the oligonucleotides have a nucleotide sequence of said index sequence. The oligonucleotides may comprise further nucleotides or not. Usually the oligonucleotides are used to label other nucleic acids of a sample by attachment and thus the resulting oligonucleotide has more nucleic acids. It is also possible to label other moieties, such as proteins, such as antibodies or enzymes, or beads or particles, such as nanoparticles, or cells or chemical compounds, such as drugs, by attachment thereto.</p><p id="p-0026" num="0025">The present invention provides a set of oligonucleotides comprising index sequences and wherein the set comprises a plurality of subsets of oligonucleotides with different index sequences. The index sequences of a subset of oligonucleotides differ at least by a non-zero number of sequence changes from each other. Such sequence changes can be estimated by a sequence distance as will be described in more detail below. Using the sequence distance terminology one can also state that the sequence distance of the index sequences is non-zero. It can be 1 or more in distances that are indicated as integers or a non-zero fraction or function of a fraction (such as sequence change probabilities). The set comprises at least 2 (i.e. 2 or more) hierarchical tiers of subsets, wherein index sequences of a higher tier subset are members of a lower tier subset. This means that the set comprises a first subset and at least one further (second or more) subset that contains the members of the first subset. The first subset is considered as the subset of the higher tier and when &#x201c;first&#x201d; represents the first of all subsets, even highest subset. This means that lower tier subsets contain more members (sequence indexes) than higher tier subsets. By including more members, the distance between all these members (minimum distance or smallest distance) decreases, in case the index sequence length remains the same. Accordingly, in the inventive set, the index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the index sequences of a higher tier subset.</p><p id="p-0027" num="0026">&#x201c;Minimum number of sequence changes&#x201d; refers to the lowest number of sequence changes that is present for all possible sequence changes between any two members of a subset.</p><p id="p-0028" num="0027">The oligonucleotides of the set are assigned to one or more subsets. This means that a user knows to which subset each index sequence (or oligonucleotide) belongs to. Such an assignment can be done physically, e.g. by placing the oligonucleotides into containers that are labelled or ordered according to the subset assignment.</p><p id="p-0029" num="0028">The subset structure of the invention is also referred to as &#x201c;nested sets&#x201d; as one subset is nested in (or a member of) another subset. E.g. the index sequences of a first subset can be contained in said first subset and also in a second subset, to which also further index sequences belong that are not found in the first subset.</p><p id="p-0030" num="0029">This nested hierarchy of subsets allows the provision of several subsets of index sequences that have different sizes. &#x201c;Size of a subset&#x201d; is understood as the amount of different index sequences in said subset. These subsets of different sizes make it possible to avoid multiple physical barcode sets for different applications thereof dependent on the need for different sizes. A practitioner who uses the inventive nested sets can choose from a range of subsets to fit the practitioner's size requirement, e.g. the number of samples that need to be individually labelled by the index sequences. By choosing a higher tier subset&#x2014;as possible dependent on the size requirement due to the number of samples&#x2014;the practitioner can optimize the distance between the index sequences and thus increase assignment quality of the labelled objects, such as reads or fragment sequences, to a sample.</p><p id="p-0031" num="0030">Assignment quality in essence means confidentiality of an assignment and the possibility to assign a determined sequence of an index to a sample even if that determined sequence is not identical to the index sequences of said sample, e.g. by assigning said diverging determined sequence to a sample if it has the lowest distance to the correct index sequence of that sample (error correction) as compared to other index sequences of other samples. This type of error correction is known in the art&#x2014;see ref. [1]. &#x201c;Index sequence of that sample&#x201d; means the error free index sequence that has been assigned to a sample by the practitioner, such as by binding oligonucleotides with the index sequence to sample nucleic acids. Assignment quality is thus a property to evaluate miss-assignment and cross-contamination.</p><p id="p-0032" num="0031">A further aspect that affects assignment quality&#x2014;besides the provision of subset sizes to fit the sample needs&#x2014;is the index sequence length. Some simple samples or reliable measurement set-ups only require a low distance between index sequences while other more complex samples or error-prone measurement set-ups need larger distances. Since the determination of each index sequence nucleotide increases costs (especially in large scale multiplex methods), it is therefore desirable to measure only as many nucleotides of the index sequence as needed or as acceptable for a given application. To also accommodate the need for a flexible selection of the index sequence lengths, in preferred embodiments of the invention provides index sequences that are also useful when only a part of the index sequence or truncated index sequence is used for assignment. To achieve this goal, these truncated index sequences are adjusted within a subset so that a reliable distance is maintained.</p><p id="p-0033" num="0032">The truncated index sequences are parts of the index sequences that are suitable to maintain a desired distance from each other truncated index sequence of the same subset. This property of being a part of a larger sequence is also referred to as a &#x201c;nested sequence&#x201d;, referring to a sequence within a sequence. This should not be confused with the nested subsets mentioned above, which refers to subsets within other subsets.</p><p id="p-0034" num="0033">The truncated, nested, index sequence properties allow the use of the entire index sequence in experiments that could be satisfied with shorter index sequences as well as the use in experiments that need longer index sequences. A practitioner thus only needs one such set that is universally useful. In practice, for an experiment, the user usually selects barcodes from the smallest of the nested sets larger than the number of samples, and sequences as many nucleotides of the barcodes (index sequences) as necessary to achieve the required (low) level of cross-contamination. The nested barcode sets obtain an increase in inter-barcode distance for smaller sets and for longer sequences. This guarantees that the user will always select the optimal configuration among all possible combinations of nested sets and sequences.</p><p id="p-0035" num="0034">Accordingly, in preferrements of the invention the index sequences of a subset contain each a truncated index sequence and the truncated index sequences of at least one subset differ at least by a non-zero number of sequence changes from each other truncated index sequence (inter-barcode distance) within said subset.</p><p id="p-0036" num="0035">Preferably, the minimum number of sequence changes between truncated index sequences of a subset is larger than the minimum number of sequence changes of the index sequences in the subset minus the difference between the length of the index sequences and the truncated index sequences or in other more general words, preferably the sequence distance (as explained herein) between truncated index sequences of a subset is larger than the sequence distance of the index sequences in the subset minus the difference between the length of the index sequences and the truncated index sequences. This formula essentially means that the nucleotides that are not considered in the index sequence to obtain the truncated index sequence (expressed as length difference) shall not be strong determinants of the sequence distance, meaning that the remaining nucleotides in the truncated index sequences have a strong impact on sequence distance. Usually such a structure within the (nested) index sequence is established beforehand and communicated to the practitioner, so that the practitioner knows which nucleotides shall be determined as truncated index sequence. Preferably the truncated index sequence is composed of continuous nucleotides of the index sequence. Especially preferred, the truncated index sequence comprises the 3&#x2032; or 5&#x2032; end of the index sequence.</p><p id="p-0037" num="0036">As for nested subsets, the concept on truncated index sequences can be applied multiple times yielding multiple nested index sequences. This means that more than one tier of truncation is possible. In case of several truncation steps, each truncated index sequence has a certain distance with each other truncated index sequence of the same tier within a subset. There may be 1, 2, 3, 4, 5 or more tiers of truncated index sequences, of which 2 are preferred since this can be well accommodated in common index sequence lengths.</p><p id="p-0038" num="0037">Of course the nested sequences can be combined with the nested set structure. The tier structure for the subsets remains the same. Thus, the truncated index sequences of a higher tier subset are members of truncated index sequences of a lower tier subset. Due to the differences in subset sizes, the truncated index sequences of a lower tier subset may differ by a lower minimum number of sequence changes from each other than the truncated index sequences of a higher tier subset.</p><p id="p-0039" num="0038">Various methods to determine sequence distance exist as described in the references mentioned above in the background section. Any of these methods can be used. In particular, according to the invention the sequence changes are preferably selected from nucleotide substitutions, deletions and insertions. The minimum number of sequence changes corresponds to the minimum of these sequence changes that are needed to change any index sequence to another index sequence. Multiple paths to change one sequence to another may exist, whereas the &#x201c;distance&#x201d; refers to the shortest paths, i.e. the ones with the least changes (minimum). This may be one path or more than one path when multiple paths have the same minimum distance. A further distance option that can be used according to the invention to quantify the amount of sequence changes that transforms one sequence into another is a sum of the individual distances of single paths of changes that transform one sequence into another. Such a sum can be used for all paths for a given change. The paths should be direct paths from one sequence to another without detours such as changes that cancel each other out.</p><p id="p-0040" num="0039">Sequence distances described in the art (see background section) are e.g. a Hamming distance, a Levenshtein distance or a Sequence-Levenshtein distance. These distances can be used according to the invention to quantify the distance or determine the amount or number of sequence changes that transforms one sequence into another. A Hamming distance is in essence a count of substitutions. The Levenshtein distance is calculated using insertions, deletions (together &#x201c;indels&#x201d;) and substitutions. Preferably a Sequence-Levenshtein distance (ref. [1]) is used. The Sequence-Levenshtein distance is a variant of the Levenshtein distance that also considers indels and substitutions but maintains the index length whenever an insertion or deletion occurs. This means that an insertion and a deletion will be counted at most as one change. A deletion may also result in no change in case if the last nucleotide in a sequence is deleted and the next nucleotide outside the frame that now moves into frame is identical to the deleted nucleotide. Likewise, the insertion of an identical nucleotide at the last nucleotide in the sequence may not be apparent as a change and produce no distance. Contrary thereto, the Levenshtein distance considers a deletion in the context of an oligonucleotide sequence where the index sequence is followed by other nucleotides (such as of an adapter or of the product read) as two changes: one, the removal of the deleted nucleotide and two, the shift of a following nucleotide into the frame of the sequence index since the entire length of sequence index is compared and this shift is counted as another difference between the compared sequences (see ref. [3], <figref idref="DRAWINGS">FIG. <b>1</b></figref> for differences between Hamming, Levenshtein and Sequence-Levenshtein distances). Other terms for a Sequence-Levenshtein distance are FREE Levenshtein distance or modified Levenshtein distance or fixed-frame Levenshtein distance (ff Levenshtein distance). For example, referring to an example in the supplement of ref. [3], which terms the Sequence-Levenshtein distance &#x201c;FREE divergence&#x201d;, the sequences TAGA and ACGC have a distance of 3 according to the following changes:</p><p id="p-0041" num="0000"><chemistry id="CHEM-US-00001" num="00001"><img id="EMI-C00001" he="5.33mm" wi="65.28mm" file="US20230005570A1-20230105-C00001.TIF" alt="embedded image" img-content="chem" img-format="tif"/></chemistry></p><p id="p-0042" num="0000">wherein &#x201c;ins.&#x201d; is an insertion, &#x201c;sub.&#x201d; a substitution and &#x201c;del.&#x201d; a deletion (each also being referred to as &#x201c;edits&#x201d; or &#x201c;changes&#x201d;); the vertical bars (&#x201c;|&#x201d;) show the end of the barcode frame, though the truncation step would not happen until after all actual edits. These shifts across the frame length lead to a violation of the triangle inequality. Distance methods that do not consider these shifts out of and into the frame of the index sequence (or truncated index sequence) could result in a distance determination that does not reflect the actual changes that transform one sequence into another. In this example the distance of TAGA and TACG would be 1 (insertion of C); so is the distance between TACG and ACGC (deletion of T with 3&#x2032;C shifting into frame). However, the distance between TAGA and ACGC is not 1+1=2 but 3 as shown above (violation of triangle inequality) . Here a substitution occurs out of frame which may be counted in some methods of distance determination but not in others. Although both types of distance measurements work as they give a comparable indication of the distance between sequences, some distance estimates as used according to the invention take sequence changes outside the frame of the index sequence (or truncated index sequence) which shift into the frame of the index sequence (or truncated index sequence) into account to more closely resemble natural processes that transform one sequence into another (for various reasons, such as insertions, deletions and substitutions during sequencing methods). This would be an additional step to the above-mentioned Hamming distance, Levenshtein distance and Sequence-Levenshtein distance. On the other hand, a Sequence-Levenshtein distance (fixed frame) has procedural benefits and is a preferred method. A possible violation of the triangle inequality (meaning the sum of partial distances does not necessarily equate to the full distance) is then usually considered during error correction steps. Another sequence out of frame of the index sequence that can be considered similar to the frame-shifted nucleotides of the index sequence itself are nucleotides or sequences that follow the index sequence. These maybe known, such as in the case of an adapter sequence that follows the index sequence.</p><p id="p-0043" num="0040">Generally, in all embodiments of the invention the sequence changes can be quantified as sequence distance which is the amount of nucleotide changes or a probability of changes. Each possible change can either be counted as an integer or as its probability. Such a probability may be platform-dependent or a pre-set probability, e.g. from average values may be used. For example, a probability may be inferred from natural mutation rates, such as they are occurring in a sequencer. For example, probabilities for substitutions, insertions and deletions may be 0.002, 0.00002 and 0.0005, respectively in this order.</p><p id="p-0044" num="0041">In preferred embodiments of the invention the probability of changes is a maximum or a sum of probabilities. In some cases, several series of changes (also referred to as &#x201c;paths&#x201d;) can lead to the transformation of one (index) sequence into another. In such a case, the path with the highest probability (maximum) can provide a suitable estimate as the sequence distance. Alternatively, the probabilities of several paths can be added to provide a sum of probabilities, which is also a suitable estimate for use as sequence distance. Preferably a sum of probabilities of nucleotide changes that transform one sequence to another is used.</p><p id="p-0045" num="0042">Of note is that the reciprocity between a comparison of probabilities and of an integer count of sequence changes is reversed, whereas a high count of sequence changes equates to a large distance; it is a low probability that correlates with a large distance (and a high probability correlates with a small distance). Accordingly, referring to the relationship of tiers as mentioned above, the index sequences of a lower tier subset differ by a higher probability of sequence changes from each other than the index sequences of a higher tier subset. Also, the truncated index sequences of a lower tier subset can differ by a higher probability of sequence changes than the truncated index sequences of a higher tier subset.</p><p id="p-0046" num="0043">Of course, to maintain the same direction of the relationship (higher-higher; lower-lower), it is possible to use a function of the probability that reverses the order or directionality of the probability. Such functions are monotonically decreasing functions of the probability. Of course this is just another representation of a probability and the relationships of the underlying probabilities (or averages or sums) remain the same. Nevertheless, in preferred embodiments, the probability of changes is quantified by a monotonically decreasing function of a probability. Such a function is for example a negative logarithm or a negative probability (changing its sign, order or directionality), such as in 1-P (with P being a probability, including an average or maximum as mentioned above). Preferably, the probability is estimated as such a monotonically decreasing function by a maximum or a sum of probabilities, preferably a sum of probabilities, of nucleotide changes that transform one sequence to another. Such nucleotide changes can be a series of changes if more than one change is needed to transform. one sequence to another.</p><p id="p-0047" num="0044">In such a case, the tier relationship changes to the index sequences of a lower tier subset differ by a lower monotonically decreasing function of a probability of sequence changes from each other than the index sequences of a higher tier subset. Also, the truncated index sequences of a lower tier subset can differ by a lower monotonically decreasing function of a probability of sequence changes than the truncated index sequences of a higher tier subset.</p><p id="p-0048" num="0045">The inventive set (and as it is selected in the inventive method) is preferably defined by a relationship of the distances between the index sequences of a subset, wherein the Sequence-Levenshtein distance between the index sequences of a higher tier subset is greater by at least 1, preferably 2, 3, 4, 5, 6, 7 or more, than the Sequence-Levenshtein distance between the index sequences of a lower tier subset.</p><p id="p-0049" num="0046">When using other distances, one can also express that the Levenshtein distance between the index sequences of a higher tier subset is greater by at least 1, preferably 2, 3, 4, 5, 6, 7 or more, than the Levenshtein distance between the index sequences of a lower tier subset; or the Hamming distance between the index sequences of a higher tier subset is greater by at least 1, preferably 2, 3, 4, 5, 6, 7 or more, than the Hamming distance between the index sequences of a lower tier subset.</p><p id="p-0050" num="0047">When using a sum or a maximum of probabilities (with values ranging from 0-1) then preferably the sum or a maximum of probability to transform one sequence index into another in a lower tier subset is greater by at least 0.00001, preferably at least 0.0001, or at least 0.001, or more, than the probability between the index sequences of a higher tier subset. This difference of the sum or a maximum of probabilities between the tiers may depend on the platform that is used and can be between 0.00001 and 0.9. If a logarithm to base &#x201c;e&#x201d; (natural logarithm) is used to that &#x2212;log(P) is used to determine the difference in the distance between tiers then the value is preferably between 0.1 and 10.</p><p id="p-0051" num="0048">For absolute distances within a tier, preferably the Sequence-Levenshtein distance between the index sequences of the highest tier subset is at least 4, such as 4, 5, 6, 7, 8 or more. The next lower tier would then in case of a difference between the tiers of 1 have a Sequence-Levenshtein distance between the index sequences of at least 3 and so on for the following tiers. The same applies for other integer distances (Levenshtein, Hamming). Preferably the lowest tier subset in the set has a Sequence-Levenshtein, Levenshtein or Hamming distance between its index sequences of at least 1, preferably, 2 or 3.</p><p id="p-0052" num="0049">Since longer index sequences allow larger distances, it is preferred to provide a minimum length. Of course, shorter index sequences have also an advantage, i.e. lower costs as mentioned above. Thus, a compromise is selected. Preferably the index sequences have a length of at least 4, e.g., 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, nucleotides in contiguous sequence. Especially preferred is a length of at least 6, nucleotides length. The highest tier subset is also the smallest (fewest number of members). Each following lower tiered subset has more members but usually lower distances. In preferred embodiments, the highest tier subset comprises at least 2, e.g. 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 or more different index sequences. Preferably it comprises at least 4, different index sequences.</p><p id="p-0053" num="0050">It is important that the subset structure is visible to a practitioner, i.e. that the index sequences are assigned to the subset to which they belong. For example, the oligonucleotides (with the index sequence) can be assigned to a subset by placement in a container that is labelled by a subset identifier. The identifier can be placed on the container or on a data carrier, like a manual, electronically or physically. The container can be a well in a well plate.</p><p id="p-0054" num="0051">In further preferred embodiments, the sequences of the index sequences can be optimized for better stability or ability to be sequenced, for example. Common concepts are the optimization of a GC content and/or the avoidance of nucleotide repeats. Especially preferred is balancing of a distribution of all nucleotides of the genetic code across the different index sequences within a subset. Nucleotides of the genetic code are A, T or U, G, C. Usually one of T and U is used, with T being predominantly used, hence &#x201c;T or U&#x201d; is also written as &#x201c;T(U)&#x201d;. Thus 4 different nucleotide types are usually found in the index sequence. T is found in DNA, U in RNA. The oligonucleotides can be DNA or RNA, for example, and/or comprise modified nucleotides, such as LNA.</p><p id="p-0055" num="0052">Preferably the index sequences have a G/C content of 20% to 80% or 30% to 70% or even 40% to 60%.</p><p id="p-0056" num="0053">Preferably the index sequences do not contain repeats of the same nucleotide of at least 3 in length, i.e. no homopolymer triples.</p><p id="p-0057" num="0054">Preferably the sequence GGC is avoided in some set-ups, especially for Illumina-based sequencing, since it is an Illumina-based error motif (ref. [3]).</p><p id="p-0058" num="0055">Especially preferred, the index sequences of a subset have a balanced nucleotide distribution wherein the number of shared nucleotides at the same position within the index sequences between different index sequences is at most 0.5 times the number of index sequences in said subset. This criterion uses a sum (number of shared nucleotides per position) and accordingly compares it to a multiple (e.g. 0.5) of the number of index sequences in the subset (subset size). The number of shared nucleotides at the same position, means that for each position, e.g. nucleotide (nt) 1, nt 2, nt 3, etc. the nucleotide type (A, T(U), G or C) is counted over all index sequences. Thus, when more index sequences are considered, the number increases. Hence, the criterion value (0.5 or lower, e.g. 0 to 0.5) is also multiplied by the number of index sequences that are considered. This is equivalent to using averages, which correspond to frequencies, that are compared to the value of 0.5 as preferred maximum frequency. This means that the number of shared nucleotides at the same position is then divided by the number of index sequences that are considered. This average is also referred to as nucleotide frequency (per position). Examples of such frequencies for each nucleotide are shown in <figref idref="DRAWINGS">FIGS. <b>8</b> to <b>11</b></figref>. Perfectly balanced nucleotides would mean that each nucleotide selected from A, T(U), G, C is equally distributed, meaning a frequency of one quarter or 0.25, for all positions. Such optimal balancing is however not always possible since the sequence distance criterion needs also to be fulfilled. Hence dome deviations from perfect balancing are needed. This can be high for small subset sizes since a single index sequence deviating from the average can mean a larger difference from 0.25 (e.g. <figref idref="DRAWINGS">FIG. <b>8</b></figref>, showing a distribution in a subset of 4 index sequences). For larger subsets, it is usually possible to get closer to the desired 0.25 value. In preferred embodiments this criterion value or frequency is 0.4 or lower, e.g. in the range of 0.1 to 0.4, especially preferred for subset of size 8 or larger.</p><p id="p-0059" num="0056">In addition or alternatively it is preferred when in at least 50% of the positions of the index sequences the nucleotide frequency for all index sequences of a subset for each nucleotide type is 0.5 or less, such as 0 to 0.5, preferably it is 0.4 or less, such as 0.1 to 0.4.</p><p id="p-0060" num="0057">Particular preferred embodiments of the inventive sets comprise index sequences (or oligonucleotides comprising these index sequences) selected from any one of SEQ ID NO: 1 to 784, preferably of SEQ ID NO: 1 to 208. Preferably at least 10, preferably at least 15, at least 20, at least 30, at least 40, at least 50, at least 60, at least 70, at least 80 of SEQ ID NO: 1 to 784, preferably of SEQ ID NO: 1 to 208, are comprised in the set.</p><p id="p-0061" num="0058">The present invention further provides a method of generating a set of oligonucleotides of the invention comprising a plurality of subsets of oligonucleotides with a subset of index sequences. Everything disclosed for the set also applies to the method, e.g. the set with these parameters is obtained or the parameters are used and selected for in the method, such as the disclosed sequence distance determination methods.</p><p id="p-0062" num="0059">The method comprises the steps of generating a first or higher tier subset of oligonucleotides with index sequences with a first or higher tier sequence distance to each other within the first or higher tier subset, wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another&#x2014;as mentioned above&#x2014;, generating a second or lower tier subset by including the first or higher tier subset and adding further oligonucleotides with index sequences with a second or lower tier sequence distance to each other within the second or lower tier subset, which second or lower tier sequence distance is a lower sequence distance than the first of higher tier sequence distance.</p><p id="p-0063" num="0060">The terms higher tier subset and first subset can be used synonymously and refer to relative relationship between the subsets. Using the numerical values has the benefit of also referring to tiers that are further down than the second subset, such as a third subset that comprises the sequence indexes of the second subset (and hence also of the first) and additional sequence indexes. Consequently, its sequence distance requirement will likely be lower than the second tier's. This set-up corresponds to a set comprising at least 3 hierarchical tiers of subsets, which is a preferred embodiment for all aspects of the invention. 3 hierarchical tiers in the higher-lower terminology means, that there is a first relationship between a higher (1<sup>st</sup>) and a lower (2<sup>nd</sup>) tier, as already stated and then another second relationship where this lower tier (2<sup>nd </sup>tier) becomes a higher tier for the next lower tier (3<sup>rd </sup>tier) .</p><p id="p-0064" num="0061">The inventive set can have 2, 3, 4, 5, 6, 7, 8 or more hierarchical tiers, i.e. a first, second, third, fourth, fifth, sixth, seventh, eight or further tier wherein each tier subset in this order comprise the index sequences of the subset tier before and further index sequences as stated for the first and second tier (or higher and lower tier) respectively.</p><p id="p-0065" num="0062">In preferred embodiments, the method comprises generating a lower tier subset by including a higher tier subset and adding further oligonucleotides with index sequences with a lower sequence distance than for the higher tier subset to each other within the lower tier subset. Likewise, the method may comprise generating a third subset by including the second subset and adding further oligonucleotides with index sequences with a third sequence distance to each other within the third subset, which third sequence distance is a lower sequence distance than the second sequence distance. This can apply to any further hierarchical tier of subsets as needed.</p><p id="p-0066" num="0063">The step of generating the first, second (or further) subset of index sequences may comprise for one or more or each subset the step of selecting index sequences from a pool of different index sequence candidates. According to this embodiment, a pool of index sequences is generated as candidates for inclusion into subsets. These candidates usually have the desired length of the index sequences but lack the selected sequence distances in the pool of candidates. Said pool comprises several candidate index sequences in sufficient amount to fill a subset. Usually at least twice the number than the size of the subset is provided as pool to ensure that enough index sequence choices are available to provide the needed sequence distances and optionally other criteria as outlined herein in order for the subset. Preferably the pool of index sequences has at least by a factor of 2, more preferably 3, 4, 5, 6, 7, 8, 9, 10 or more, more members than the subset. The index sequences of the pool can be random or fulfil some other criteria, like a GC content of choice, omission of homopolymer triples, for example. The candidates are then added to the subset during its construction where the sequence distance criteria are adhered to (and other criteria, like balancing if so desired). If the criteria are not met, then other sequence index candidates are selected from the pool. If this does not suffice, a new sequence index candidates and/or new pools can be generated and used accordingly.</p><p id="p-0067" num="0064">Preferably generating a first and/or second subset (or further analogously subsets) comprises selecting index sequences that comprise truncated index sequences and the truncated index sequences of at least one subset differ at least by a non-zero number of sequence changes from each other truncated index sequence within said subset. The non-zero number of sequence changes can be a sequence distance of 1, 2, 3, 4, 5, 6, 7, 8 or more, especially preferred a Hamming, Levenshtein or Sequence-Levenshtein distance or a probability of changes as mentioned above. Preferably, the truncated index sequences of at least one subset differ by at least a number of sequence changes greater than 1 from each other truncated index sequence within said subset. The same as above with regard to truncated subsets applies. These allow the use of only a partial sequence (corresponding to the truncated sequence) in a method of assigning sequencing reads while a given sequence distance requirement between all truncated sequences of the subset are still met as described above.</p><p id="p-0068" num="0065">In further preferred embodiments, correctable sequences are generated for an index sequence of a subset wherein said correctable sequences have a sequence distance that is less than half the sequence distance between the index sequences of said subset, and wherein the correctable sequences of different index sequences in said subset do not overlap. Such correctable sequences in the index sequences are also present in the set of the invention. Correctable sequences are sequences that can be associated to only one index sequence. This makes a sequence &#x201c;correctable&#x201d;. A correctable sequence is thus a representation of an erroneously determined sequence that has one or more sequencing errors but when its sequence is correctable, it can still be assigned (&#x201c;decoded&#x201d;) to one index sequence. In the method of generating index sequences for a subset, it can here be considered that around each index sequence a plurality of correctable sequence exists that still lead to one assignment when using the inventive set. This plurality is also referred to as a &#x201c;decode sphere&#x201d;, using the analogy of a volume of sequences with a given distance to the index sequence in the centre of the sphere. In order to be assigned to one (and only one) index sequence, the distance should be less than half the sequence distance between the index sequences of said subset. This may not always be the case given the possibility of a violation of the triangle inequality mentioned above. Accordingly, the subset can take this possibility separately to the distance criterion between index sequences into account and maximize the number of correctable sequences or reducing the number of sequences that can be assigned to more than one, e.g. two or more, index sequences with equal distance (not correctable). This is also referred to as decode sphere optimization, meaning that the overlap of two or more of such spheres is reduced or minimized. This can be done by selecting different index sequences to a given subset.</p><p id="p-0069" num="0066">In a preferment generating a subset comprises selecting index sequences by adding an index sequence candidate and evaluating the sequence distance of the index distance candidate to all other pre-existing index sequences in the subset. The index sequence candidate is added to the index sequences of the subset if it fulfils a pre-set sequence distance requirement, such as any sequence distance property as discussed above. The index sequence candidate may be from the above-mentioned pool or not. Generally, this embodiment states that index sequence candidates are added step-wise during the build-up of a subset, wherein index sequences are added one after the other. An index sequence candidate is compared with the other pre-existing index sequences in the subset&#x2014;if they exist (obviously this is not done for the first index sequence added to the subset). When the comparison results in a fulfilment of the distance requirement, and optionally other requirements, then the index sequence candidate is added to the subset. This process can be done for other subsets or even for subset candidates. A subset candidate is related as a subset but may not be included into the set if other subset candidates of the same size are also generated. Then usually a subset candidate is added to a set if it improves over another subset candidate. Improvement can be any criteria mentioned above, like improved balancing.</p><p id="p-0070" num="0067">Such a balancing requirement that is preferably fulfilled is any one as mentioned above, preferably wherein an index sequence candidate contains for at least 50% of its positions a nucleotide type of the genetic code with the smallest frequency at the respective position in the pre-existing index sequences of the subset. This criterion is preferably applied to at least 25% of the index sequence candidates that are added last to the subset. As mentioned above, evaluating a frequency makes no sense when considering only one index sequence and has little value for small subsets under construction to which further index sequences or candidates are added. Balancing is best achieved when the subset is almost at its desired size, such as when it has 75% or more of its size, i.e. the remaining 25% are evaluated by this step. Especially preferred the last index sequence added to the subset is evaluated by this criterion.</p><p id="p-0071" num="0068">In preferred embodiments an index sequence candidate is selected from a pool of index sequence candidates, wherein members of the pool of index sequence candidates fulfil a pre-set sequence distance requirement to each other member of the pool. Furthermore, an index sequence candidate of the pool is added to the index sequences of the subset, when the sum of the distances of the frequency of each nucleotide type of the genetic code to 0.25 at each position is the lowest for the index sequence candidate as compared to the other index sequence candidates of the pool. The distance of the frequency of each nucleotide type of the genetic code to 0.25 at each position can be measured as a sum of the absolute values of the difference, or preferably a squared or exponentiated difference, between the frequency of each nucleotide and 0.25 at each position, or as a probability distance measure between the frequency of each nucleotide and 0.25 at each position, where possible probability distance measures would be the Kullback-Leibler or Jensen-Shannon divergence. This absolute value of differences is a further preferred balancing option as discussed above. A frequency of 0.25 would be optimal balancing (when fulfilled for each position) but is seldom achievable. The closer the sequence index nucleotide frequencies are to 0.25, the better balances the subset.</p><p id="p-0072" num="0069">A further preferred balancing criterion used in the method (and as found in the set) is wherein in at least 50% of the positions of the index sequences the nucleotide frequency for all index sequences of a subset for each nucleotide type is 0.5 or less. Preferred embodiments of the balancing options are described above.</p><p id="p-0073" num="0070">In preferred embodiments, the method of generating the inventive set comprises generating a plurality of subset candidates each with a given amount of members (index sequences). These competing subset candidates with the same size are compared to each other and one is selected for inclusion into the set, referred to as subset. Preferably the method comprises selecting a subset candidate as subset for the set, when said subset candidate has the lowest average over all index sequences per respective subset candidate of the sum of the absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25. So, for each subset candidate the average absolute values of differences of the frequency of each nucleotide type of the genetic code to 0.25 for each position is summed for all its index sequences. The subset candidate that has a lower value (i.e. lower difference meaning better balanced&#x2014;see above) is selected for inclusion into the subset. Preferably, the subset candidate with the lowest value is selected. If other criteria also are considered, it may be next to the lowest one even worse balancing. Preferably, the one subset candidate that is selected is among the better half (according to a lower value in this formula) of the considered subset candidates. The selection may be applied for complete subset candidates but it may also be apparent during build-up, e.g. when sequence index candidates are added successively as mentioned above, when during said build-up it becomes apparent that a given subset candidate will not result in a good value. Such worse performing subset candidates may be excluded from further consideration.</p><p id="p-0074" num="0071">Alternatively or in combination, the method may comprise generating a plurality of subset candidates each with a given amount of members (index sequences) and selecting a subset candidate as subset for the set, wherein said subset candidate is selected by exclusion of other subset candidates,<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0072">wherein a subset candidate is excluded when in a method that comprises adding index sequence candidates from a pool of index sequence candidates to the subset candidate, and optionally further adding comparative index sequences, the subset candidate has a higher average over all its index sequences sum of absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25 as compared to another subset or subset candidate.<br/>Such a selected subset is then added to the set. The &#x201c;subset candidate has a higher average over all its index sequences sum of absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25 as compared to another subset or subset candidate&#x201d; is explained as above. The comparison to comparative index sequences means that when a subset candidate is generated by successive addition of sequence indexes and sequence index candidates, then this subset or subset candidate will only result in a full subset of its desired size when the last sequence index or sequence index candidate is added for consideration. To better evaluate intermediately added sequence index candidates, further comparative index sequences to fill the subset or subset candidate to its desired size can be added. The criteria, especially balancing criteria are then calculated for the sequence index candidate to each other sequence index and comparative sequence index. These comparative index sequences thus allow the simulation of a full subset to subset candidate without being used in the subset or subset candidate. They may of course be added to it, if they are selected as a sequence index candidate in a further step. The method may comprise removing subset candidates from further consideration at each step of consecutive build-up of the subset candidate if the balancing criterion is worse than that of other subset candidates or pre-existing subsets. Preferably, at least one subset candidate is excluded at each step of adding one sequence index to the subset candidate.</li>    </ul>    </li></ul></p><p id="p-0075" num="0073">The invention further provides a method of using the inventive set for labelling a moiety, such as an oligonucleotide, a protein, a particle such as a nanoparticle, chemical compounds, especially a small-molecule compound of a size of 5 kDa or less etc. The invention provides a method of identifying the labelled moieties by determining the sequence of the index sequence that has been attached thereto and assigning the determined sequence to a known index sequence of the set. In particular, the invention provides a method of assigning sequencing reads (i.e., determined sequences) to a sample of oligonucleotides comprising the steps of</p><p id="p-0076" num="0000">a) obtaining sample oligonucleotides from a plurality of samples,<br/>b) selecting a subset of oligonucleotide index sequences from a set according to the invention, wherein a subset is selected over another subset based on a higher sequence distance of the index sequences to each other within the selected subset; wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another, and wherein the selected subset has at least as many different index sequences as the number of samples of step a),<br/>c) adding index sequences from said subset to each sample oligonucleotide thereof (which can be a fragment or fragmentation product), wherein the index sequences are indicative of the sample,<br/>d) determining the sequence of the sample oligonucleotides or fragments of sample oligonucleotides and determining the index sequence,<br/>e) assigning an obtained read sequence to a sample based on the determined index sequence or based on the index sequence which has the lowest sequence distance to the determined index sequence, wherein if two or more index sequence have the same lowest distance then said obtained read is discarded; wherein optionally the sequence distance does not exceed a pre-set criterion value.</p><p id="p-0077" num="0074">The method aims at retaining the sample association of oligonucleotides whose sequence is determined. The index sequences are thus labels that identify a sample association. This allows the concurrent sequence determination of many oligonucleotides from several samples in parallel (multiplex) since the sample association is maintained by the label information (to be determined index sequence). The method applies of course to any labelled moieties, not just oligonucleotides. Oligonucleotides read association is just the most common use for the inventive subsets.</p><p id="p-0078" num="0075">It is not needed to use the entire set but only one of its subsets as long as the subset has the needed amount of index sequences (size). Of course, the entire set can be used, which represents in essence the lowest tier subset with the biggest size available in the set. In step a) the amount of samples to be labelled differently is ascertained. The reference to samples means of course samples that shall be distinguished in the method. In step b) a subset of the set is selected that can accommodate this amount of samples, i.e. the subset size is at least the amount of samples. To make best use of the inventive subset structure and in order to optimize the sequence distance between the index sequences of a subset, a subset is chosen over another subset based on a higher sequence distance of the index sequences to each other within the selected subset. Sequence distance is as defined and described above for the sets. This step means that&#x2014;if possible, i.e. if subset size allows&#x2014;a subset with higher sequence distances between its members is selected over another subset with a lower sequence distance between its members. In preferred embodiments step b) comprises selecting oligonucleotides with index sequences from a set according to the invention wherein a subset of oligonucleotides with the highest sequence distance of the index sequences within the subset is selected. I.e. the best subset with highest distance&#x2014;as long as subset size allows&#x2014;is selected. The selected subset shall have at least as many different index sequences as the number of samples of step a) that are needed to be identified or distinguished. The other subset may be used in other experiments or remain a surplus.</p><p id="p-0079" num="0076">Step c) comprises adding index sequences from said subset to each sample oligonucleotide thereof. &#x201c;Adding&#x201d; means an attachment that connects the index sequences (as oligonucleotides) to the sample oligonucleotides or moieties so that this connection is maintained for assignment of the sequencing data. Usually a covalent attachment is used. In case of oligonucleotides, this may comprise a ligation. The sample oligonucleotide can be a fragment or fragmentation product of a once larger polynucleotide. Any sample preparation method is possible. For the sake of simplicity, the invention is only concerned with the preparation product that is going to be identified, such as in a sequencing step. This sequencing step can be a multiplex step as mentioned above where many oligonucleotides from different samples are pooled together and hence at this sept the labelling is needed. Any preparation of the sample moieties in steps where the samples are still kept separate do not require sample-specific labelling. E.g. an optional fragmentation without labels (index sequences) may be performed separate for each sample.</p><p id="p-0080" num="0077">Step d) comprises determining the sequence of the sample oligonucleotides or fragments of sample oligonucleotides and determining the index sequence. These sequences (index sequence and sequence of the sample oligonucleotide) are usually determined in conjunction since usually they are after step c) on the same joined oligonucleotide molecule. The determined sequence that corresponds to the &#x201c;sequence of the sample oligonucleotide&#x201d; is also referred to as &#x201c;read&#x201d; or &#x201c;sequencing read&#x201d;. Apart from sequencing errors or damages to the nucleotides during preparation, this determined sequence should correspond to the sequence of the sample oligonucleotide from the sample of step a).</p><p id="p-0081" num="0078">Step e) comprises assigning an obtained/determined read sequence to a sample based on the determined index sequence or based on the index sequence which has the lowest sequence distance to the determined index sequence, wherein if two or more index sequences have the same lowest distance then said obtained read is discarded. The determined index sequence may fit perfectly error-free to an index sequence of a subset that is known. The advantage of the inventive set is that even in case of differences to errors, like sequencing errors or damages during preparation, a determined index sequence as obtained from step d) can be assigned to a known index sequence of the subset and hence a sample that it labels through &#x201c;error-correction&#x201d; as described above. I.e. due to large sequence distances between the index sequences of the subset during conception, and a large decode sphere, many different determined sequences can be assigned to the index sequence despite differences (i.e. in essence also distances to the index sequence). This assignment usually selects the closest index sequence, i.e. the one with the smallest distance to the determined index sequence. If more than one index sequence shows the closest distance, i.e. an unambiguous assignment cannot be made, then the read may not be useable and can be discarded. Preferably this assignment of differing determined sequence has a cut-off value meaning that the sequence distance does not exceed a pre-set criterion value. If the distance exceeds such a cut-off, then the read may be discarded as well. Such a cut-off may be a distance of 3, 4, 5, 6, or 7 according to any distance measurement method as disclosed above, such as a Hamming distance, Levenshtein distance or a Sequence-Levenshtein distance.</p><p id="p-0082" num="0079">Preferably the oligonucleotides that are sequenced comprise at least the index sequence, a sequence of the oligonucleotide of the sample, and optionally further an adapter sequence and optionally a universal identifier. An adapter may be a sequence that is used to hybridize primers to the oligonucleotide. It is usually the same sequence for all oligonucleotides. A universal identifier may identify a sequencing experiment or multiplexing run and be specific for it but still be universal for all oligonucleotides that are sequenced together. Preferably, the oligonucleotide comprises at least two index sequences. This embodiment is also referred to as dual indexing (when two are used) or multiple indexing. Dual or multiple indexing allows further error identification or error correction, in particular, it allows the identification of errors due to index hopping (also referred to as &#x201c;barcode hopping&#x201d;), i.e. when one index sequence gets attached to an oligonucleotide of a wrong sample which it shall not label (see ref. [5], supplement). When two or more index sequences are used, these are usually selected from different groups of index sequences, such as sets or subsets. It is common practice to label these groups as &#x201c;i7&#x201d; and &#x201c;i5&#x201d; or &#x201c;left barcode&#x201d; and &#x201c;right barcode&#x201d;. For example, according to the invention &#x201c;i7&#x201d; index sequences can be selected from SEQ ID NO: 1-104 and SEQ ID NO: 209-496, and &#x201c;i5&#x201d; index sequences can be selected from SEQ ID NO: 105-208 and SEQ ID NO: 497-784, or vice versa.</p><p id="p-0083" num="0080">In further preferred embodiments determining a sequence of nucleotides of the index sequence comprises determining the sequence of the entire index sequence or a part thereof, wherein preferably a partial index sequence is determined in case a sequence distance of the partial index sequence to other partial index sequences within the same subset is larger than a non-zero criterion value. Parts of index sequences may have a sufficient distance to each other to allow assignment&#x2014;of course of error-free determined sequence but in some case of error-corrected sequences as mentioned above as well. The partial index sequence is preferably a sequence of contiguous nucleotides of the index sequence. It may be 1, 2, 3, 4, 5, 6 or more nucleotides shorter than the index sequence. Preferably it still has a length of at least 4, 5, 6, 7, 8, 9, 10 or more nucleotides. Assignment with partial sequences works the same as for the full index sequences in that the partial sequence is compared to the corresponding part of the index sequence. In preferred embodiments the index sequences have truncated sequences that have a conceptional sequence distance between them as described above. As said, the truncated index sequences of the index sequences also have an adjusted sequence distance that is maintained for all truncated index sequences of a subset, meaning that it is possible to determine or consider during the use of the set only this partial sequence that corresponds to a truncated index sequence. Accordingly, in especially preferred embodiments, the partial index sequence has the sequence distance properties of a truncated index sequence as described above.</p><p id="p-0084" num="0081">The present invention benefits also from the use of computers. Any method can be performed on a computer, especially the design of index sequences, of truncated index sequences, of subsets and the set and then its uses, such as the assignment of determined sequences to index sequences and subsets as described herein. Thus any method of the invention can be computer-implemented. The invention also provides a computer program product comprising instructions which, when the program is executed by a computer, cause the computer to carry out any method of the invention or their steps, in particular the ones named in this paragraph. The invention also provides a computer-readable storage medium comprising these instructions.</p><p id="p-0085" num="0082">The following description of the invention uses detailed practical terminology. Of course, these descriptions and parts thereof can be combined with any of the general elements described above.</p><heading id="h-0006" level="1">1. Nested Barcode Sets</heading><p id="p-0086" num="0083">A nested barcode set B contains S&#x2265;1 nested subsets B<sub>1</sub>&#x2282;B<sub>2</sub>&#x2282; . . . &#x2282;B<sub>S </sub>such that the distance between barcodes within B<sub>i </sub>increases for smaller barcode sets. If the distance between barcodes b,b&#x2032; is given by d(b,b&#x2032;) and d<sub>i</sub>=d(B<sub>i</sub>)=min<sub>b,b&#x2032;&#x2208;B</sub><sub><sub2>i</sub2></sub>d(b,b&#x2032;), then d<sub>1</sub>&#x3e;d<sub>2</sub>&#x3e; . . . &#x3e;d<sub>S</sub>. A general outline on how such a nested barcode set can be created is given as follows. Let n be the length of the barcodes and choose a sequence of distances, such that d<sub>1</sub>&#x3e;d<sub>2</sub>&#x3e; . . . &#x3e;d<sub>S</sub>. We start by generating a barcode set B<sub>1 </sub>with minimal inter-barcode distance equal to d<sub>1</sub>. In some cases, this can be achieved by a lexicographical search [2] . If d<sub>1 </sub>is chosen too large, it might not be possible to find a non-empty B<sub>1 </sub>consisting of barcodes of length n. Then another d<sub>1 </sub>shall be selected. However, in the following it is assumed that the sequence d<sub>1</sub>, . . . , d<sub>S </sub>has been labeled such that d<sub>1 </sub>is the first distance for which a non-empty B<sub>1 </sub>can be found. Since d<sub>1</sub>&#x3e;d<sub>2</sub>, barcode set B<sub>1 </sub>can be used as a starting set in the search for B<sub>2</sub>, which, again, can be used as a starting set in the search for B<sub>3 </sub>etc. This process is visualized in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Here, B<sub>1 </sub>consists of 4 barcodes with label 1 with a minimal inter-barcode distance of d<sub>1</sub>. B<sub>2 </sub>is derived by using B<sub>1 </sub>as a starting set and adding 4 barcodes with label 2. For B<sub>2</sub>, one has d<sub>1</sub>&#x3e;d<sub>2</sub>. Finally, B<sub>3 </sub>is derived by using B<sub>2 </sub>as a starting set and adding 16 barcodes with label 3. This gives d<sub>1</sub>&#x3e;d<sub>2</sub>&#x3e;d<sub>3 </sub>and B<sub>1</sub>&#x2282;B<sub>2</sub>&#x2282;B<sub>3</sub>. The exact method by which B<sub>i+1 </sub>is derived from B<sub>i </sub>depends on the barcode distance measure and the desired properties of the barcode sets B<sub>i</sub>. To guarantee certain levels of cross-contamination, it might also be necessary to check further preferred properties of B<sub>i </sub>in addition to d(B<sub>i</sub>)=d<sub>i </sub>. These details will be discussed in Section 4.1.</p><heading id="h-0007" level="1">2. Nested Barcode Sequences</heading><p id="p-0087" num="0084">Choosing a subset with appropriate size makes a nested barcode set adaptable to the number of samples in an experiment. In order to make the barcode set adaptable to the required level of cross-contamination we, further, designed our barcode sets such that the sequence of a barcode can be extended up to a specific length with a guaranteed increase in the minimum distance between barcodes. The non-extended sequence corresponds then to a truncated or partial index sequence and the extended sequence to the index sequence. In addition, extended barcode sets retain the nested structure where the subsets in an extended barcode set consist of the extended barcodes in the subsets of the original barcode set. As for nested subsets, the process of barcode extension can be applied multiple times yielding nested barcode sequences. This means that more than one tier of truncation is possible. In case of several truncation steps, each truncated index sequence has a certain distance with each other truncated index sequence of the same tier within a subset. The overall structure of a nested barcode set with nested barcode sequences is visualized in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The original barcode set, on the left side of the graphic, denoted by B and with minimal inter-barcode distance d(B) has a similar structure as set B<sub>3 </sub>in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows that extending the sequences in B by a sequence of nucleotides at the barcode ends, indicated by the arrow labeled &#x201c;EXT&#x201d; for extension, retains the nested subset structure in a new barcode set EXT(B) with minimal barcode distance d(EXT(B))&#x3e;d(B). In general, one has EXT(B<sub>1</sub>)&#x2282;EXT(B<sub>2</sub>)&#x2282; . . . &#x2282;EXT(B) with d(EXT(B<sub>i</sub>))&#x3e;d<sub>i</sub>. A template for obtaining nested barcode sets with nested barcode sequences is given as follows. First, we choose the number of subsets S and the number of subsequences E. The latter equals the number of extensions plus one. Next, we define the barcode lengths n<sub>j</sub>&#x3e;0 for j=1, . . . , E. Since subsequent extensions increase the barcode length we require n<sub>j+1</sub>&#x3e;n<sub>j</sub>. We, further, define the inter-barcode distances d<sub>i,j</sub>&#x3e;0 for subsets i=1, . . . , S and subsequences j=1, . . . , E. We require d<sub>i,j</sub>&#x3e;d<sub>i+1,j</sub>, since increasing barcode set size decreases inter-barcode distance, and we require d<sub>i,j+1</sub>&#x3e;d<sub>i,j</sub>, because extending barcode sequences increases inter-barcode distance. We search for a set of barcodes C<sub>1 </sub>of length n<sub>E </sub>which satisfies d(CUT<sup>j</sup>(C<sub>1</sub>))=d<sub>1,E&#x2212;j </sub>for j=0, . . . , E&#x2212;1. Here CUT is the opposite of EXT, i.e. CUT<sup>j </sup>removes the last n<sub>E</sub>&#x2212;n<sub>E&#x2212;j </sub>nucleotides from sequences of length n<sub>E </sub>with CUT<sup>0</sup>=id, where id is the identity operator. Next, we search for a barcode set C<sub>2 </sub>of length n<sub>E </sub>with C<sub>2</sub>&#x2283;C<sub>1 </sub>and d(CUT<sup>j</sup>(C<sub>2</sub>))=d<sub>2,E&#x2212;j </sub>for j=0 . . . , E&#x2212;1. We proceed in this manner until all C<sub>1</sub>&#x2282;C<sub>2 </sub>. . . &#x2282;C<sub>S </sub>have been found. This search is similar to the one discussed in Section 1 with the exception that we search for barcode sequences of length n<sub>E </sub>rather than n which have to fulfill d(CUT<sup>j</sup>(C<sub>i</sub>)=d<sub>i,E&#x2212;j </sub>not just for j=0 but for all j=0, . . . , E&#x2212;1. From C<sub>1</sub>&#x2282;C<sub>2</sub>&#x2282; . . . &#x2282;C<sub>S </sub>one can derive B<sub>i </sub>and EXT<sup>j </sup>by setting B<sub>i</sub>=CUT<sup>E&#x2212;1</sup>(C<sub>i</sub>) and EXT<sup>j</sup>(B<sub>i</sub>)=CUT<sup>E&#x2212;1&#x2212;j</sup>(C<sub>i</sub>) for j=0, . . . , E&#x2212;1. In the following, we will denote a nested set of barcodes with nested sequences as EXT<sup>j</sup>(B<sub>i</sub>), where j=0, . . . , E&#x2212;1 and i=1, . . . , S.</p><heading id="h-0008" level="1">3. Sequence Distance Measures</heading><p id="p-0088" num="0085">The inter-barcode distance d(b,b&#x2032;) should reflect the frequency with which barcode b changes into barcode b&#x2032;. Since this is related to the similarity of the sequences of b and b&#x2032;, the sequence distance d(b,b&#x2032;) is often chosen to be the minimal number of operations transforming sequence b into sequence b&#x2032;. The operations considered in such a sequence distance depend on the types of error expected during barcode processing. If only substitutions are expected, then d(b,b&#x2032;) is the Hamming distance, see Section 3.1. If, additionally, insertions and deletions are taken into account then d(b,b&#x2032;) is the Levenshtein or a related distance, see Sections 3.2 and 3.3. Since matches between sequences can also be counted in a sequence distance we will include matches as operations when we refer to error types or error classes, in the following.</p><p id="p-0089" num="0086">In Section 3.4, d(b,b&#x2032;) is the probability p(b&#x2192;b&#x2032;) that b transforms into b&#x2032;. Contrary to a sequence distance, p(b&#x2192;b&#x2032;) is not the minimal number of operations transforming b into b&#x2032;. Rather, it is the sum of the probabilities of all transformations that change b into b&#x2032;. Alternatively, one could also set p(b&#x2192;b&#x2032;) to the average or maximum of the probabilities of all transformations changing b into b&#x2032;. The advantage of using p(b&#x2192;b&#x2032;) as inter-barcode distance is that a high/small probability p(b&#x2192;b&#x2032;) corresponds to a high/small transformation frequency. This is not always the case with a sequence distance, since barcodes with a high distance might change more frequently into each other than barcodes with a small distance, e.g. if error types have different probabilities.</p><heading id="h-0009" level="1">3.1. Hamming Distance</heading><p id="p-0090" num="0087">The Hamming distance between two sequences b and b&#x2032; equals the number of substitutions that transform b into b&#x2032;. This is identical to the number of positions at which the sequences of b and b&#x2032; differ. Barcodes b=AACGATAC and b&#x2032;=AAGGATTC, for instance, differ at positions 3 and 7 and their Hamming distance is therefore 2. The Hamming distance is a distance in the proper mathematical sense, i.e. it is symmetric d(b,b&#x2032;)=d(b&#x2032;,b), obeys the triangle-inequality d(b,b&#x2032;)&#x2264;d(b,c)+d(c,b&#x2032;), and equality of b=b&#x2032; is equivalent with d(b,b&#x2032;)=0.</p><heading id="h-0010" level="1">3.2. Levenshtein Distance</heading><p id="p-0091" num="0088">The Levenshtein distance between b and b&#x2032; equals the minimum number of substitutions, insertions and deletions needed to transform b into b&#x2032;. This number can be calculated with a dynamic programming algorithm as visualized in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Here, b<sub>i </sub>and b&#x2032;<sub>i </sub>stand for the i-th nucleotide of sequence b and b&#x2032;, which label the rows and columns of matrix L. There is an additional row and column labeled 0 before row b<sub>1 </sub>and column b&#x2032;<sub>1</sub>. In the following, we will index the rows and columns of L both by 0,b<sub>1</sub>,b&#x2032;<sub>1</sub>, . . . ,b<sub>n</sub>, b&#x2032;<sub>n </sub>as well as 0, . . . , n. Hence, we have L(b<sub>i</sub>,b&#x2032;<sub>j</sub>)=L(i,j). Initially, L contains a single value L(0,0)=0. The graph in the middle of <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows that L(i,j) is derived from L(i,j&#x2212;1), L(i&#x2212;1,j&#x2212;1) and L(i&#x2212;1,j). The transitions to L(i,j) from L(i,j&#x2212;1) and L(i&#x2212;1,j) correspond to an insertion and deletion, respectively. The transition from L(i&#x2212;1,j&#x2212;1) to L(i,j) corresponds to a match if b<sub>i</sub>=b&#x2032;<sub>j </sub>and to a substitution otherwise. Matrix element L(i,j) can be calculated as follows</p><p id="p-0092" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>L</i>(<i>i,j</i>)=min(<i>L</i>(<i>i,j&#x2212;</i>1)+1,<i>L</i>(<i>i&#x2212;</i>1,<i>j</i>)+1,<i>L</i>(<i>i&#x2212;</i>1,<i>j&#x2212;</i>1)+[<i>b</i><sub>i</sub><i>&#x2260;b&#x2032;</i><sub>j</sub>]) &#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0093" num="0000">where [&#xb7;] is the Iverson bracket, which equals 1 if the statement inside is true and 0 otherwise. Arguments of min in (1) with non-existing entries in L, i.e. for i=0 and j=0, are removed from the equation. The dynamic programming algorithm, given by (1) is performed row-wise, starting from the beginning of the row and running until the end. This is done for all rows in sequence starting at row 0. For row and column 0 this means that L(0,i)=L(i,0)=i. After the algorithm finished, the Levenshtein distance is contained in L(n,n). Equation (1) shows that the penalties for insertions, deletions and substitutions are 1. These penalties can be modified if certain types of errors are more costly or frequent than others. If insertions and deletions have the same weight, the Levenshtein distance is symmetric otherwise it is non-symmetric. The other properties of a distance in the mathematical sense are always satisfied.</p><heading id="h-0011" level="1">3.3. Fixed-Frame Levenshtein Distance</heading><p id="p-0094" num="0089">The ordinary Levenshtein distance is not ideal for measuring the inter-barcode distance since the sequencing frame for barcodes has a constant width. This means that if a barcode of length n is expected, always n nucleotides will be read by the sequencer. As a result, if a barcode has an insertion the last nucleotide of the barcode is shifted outside the barcode sequencing frame and is therefore not recorded. If the missing last nucleotide of the barcode is counted as a deletion error, as is the case for the Levenshtein distance, then every insertion which is not offset by a deletion would count as 2 errors. Similarly, a deletion not offset by an insertion would count as 2 errors since the nucleotide which enters the frame at the end would be interpreted as an insertion. This artificial increase in inter-barcode distance could lead to the wrong conclusion that two barcodes are dissimilar and therefore unlikely to change into one another, when, in fact, they are similar and chances of barcode hopping are high. A more appropriate error distance is, therefore, a variant of the Levenshtein distance which takes into account that the size of the barcode sequencing frame is fixed. This distance, which has been variously referred to as FREE-divergence [3], Sequence-Levenshtein distance [1], or simply as modified Levenshtein distance [4, 6], can be derived by assigning a weight of 0 to insertions and deletions within the last row and column of matrix L in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Hence, insertions entering the sequencing frame after the end of the barcode are not counted as errors, just like deletions that occur due to the fact that the end of the sequencing frame has been reached. This fixed-frame Levenshtein (ff-Levenshtein) distance is not a proper metric as it does not satisfy the triangle inequality. This means that if two barcodes have distance 3 there might exist another barcode with distance 1 from both of them [3]. In this case, an inter-barcode distance of 3 does not guarantee that the barcode set can correct one error.</p><heading id="h-0012" level="1">3.4. Sequence Transition Probability Distance</heading><p id="p-0095" num="0090">Similarity of sequences, as measured by the minimal number of operations needed to transform sequences into each other, is not always directly correlated to the frequency with which sequences change into each other. Sequences with a high Levenshtein distance, for instance, might transform more frequently into each other than sequences with a small Levenshtein distance, if the operations that affect the transformation in the first case occur more often than the operations in the second case. Rather than generating barcode sets based on the minimal number of operations, it is therefore sensible to optimize barcodes with respect to the frequency or probability with which these operations occur. This approach will be pursued in this section by investigating inter-barcode distances based on sequence transition probabilities (STP).</p><p id="p-0096" num="0091">In the following we will abbreviate matches, substitutions, insertions and deletions with M,S,I and D. Given a probability distribution p(o) with o=M,S,D,I, the probability that sequence b changes into sequence b&#x2032;, p(b&#x2192;b&#x2032;), can be calculated by modifying the algorithm depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In this case, L is initialized with L(0,0)=1 and L(i,j) is derived as follows</p><p id="p-0097" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>L</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mi>i</mi>       <mo>,</mo>       <mi>j</mi>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mrow>        <mi>L</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mi>i</mi>         <mo>,</mo>         <mrow>          <mi>j</mi>          <mo>-</mo>          <mn>1</mn>         </mrow>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x2062;</mo>       <mfrac>        <mrow>         <mi>p</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mi>I</mi>         <mo>)</mo>        </mrow>        <mn>4</mn>       </mfrac>      </mrow>      <mo>+</mo>      <mrow>       <mrow>        <mi>L</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mrow>          <mi>i</mi>          <mo>-</mo>          <mn>1</mn>         </mrow>         <mo>,</mo>         <mi>j</mi>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>p</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mi>D</mi>        <mo>)</mo>       </mrow>      </mrow>      <mo>+</mo>      <mrow>       <mrow>        <mi>L</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mrow>         <mrow>          <mi>i</mi>          <mo>-</mo>          <mn>1</mn>         </mrow>         <mo>,</mo>         <mrow>          <mi>j</mi>          <mo>-</mo>          <mn>1</mn>         </mrow>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mo>(</mo>        <mrow>         <mrow>          <mrow>           <mo>[</mo>           <mrow>            <msub>             <mi>b</mi>             <mi>i</mi>            </msub>            <mo>&#x2260;</mo>            <msubsup>             <mi>b</mi>             <mi>j</mi>             <mo>&#x2032;</mo>            </msubsup>           </mrow>           <mo>]</mo>          </mrow>          <mo>&#x2062;</mo>          <mfrac>           <mrow>            <mi>p</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>S</mi>            <mo>)</mo>           </mrow>           <mn>3</mn>          </mfrac>         </mrow>         <mo>+</mo>         <mrow>          <mrow>           <mo>[</mo>           <mrow>            <msub>             <mi>b</mi>             <mi>i</mi>            </msub>            <mo>=</mo>            <msubsup>             <mi>b</mi>             <mi>j</mi>             <mo>&#x2032;</mo>            </msubsup>           </mrow>           <mo>]</mo>          </mrow>          <mo>&#x2062;</mo>          <mrow>           <mi>p</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mi>M</mi>           <mo>)</mo>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>2</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0098" num="0092">As before, terms on the right-hand side of (2) with an undefined value in L, i.e. for i=0 and j=0 , are ignored. After algorithm completion, one has p(b&#x2192;b&#x2032;)=L(n,n) . In the following, T will denote one of M,S,I,D and the associated transition between elements of L. Thus, T(i,j)=(i,j+1) and T(i,j)=(i+1,j) for T=1 and T=D, whereas T(i,j)=(i+1,j+1) for T=M,S. T(i) and T(j) will denote the first and second component of T(i,j). In (2) p(I)/4 is the probability of inserting b&#x2032;<sub>j </sub>after b<sub>i </sub>and p(S)/3 is the probability of substituting b<sub>i </sub>with b&#x2032;<sub>j</sub>. In equation (2) therefore</p><p id="p-0099" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>b</i><sub>T(i)</sub><i>&#x2192;b&#x2032;</i><sub>T(j)</sub><i>,T</i>)=<i>p</i>(<i>b</i><sub>T(i)</sub><i>&#x2192;b&#x2032;</i><sub>T(j)</sub><i>|T,b</i><sub>i</sub>)<i>p</i>(<i>T|b</i><sub>i</sub>) &#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0100" num="0000">where p(T=o|b<sub>i</sub>)=p(o) is independent of b<sub>i</sub>, and p(b<sub>T(i)</sub>&#x2192;c|T,b<sub>i</sub>) is uniform over all possible nucleotides c given T and b<sub>i</sub>. For T=I, for instance, all 4 nucleotides can be inserted after b<sub>i </sub>and therefore p(b<sub>i</sub>&#x2192;c|I,b<sub>i</sub>)=&#xbc;. For T=S, on the other hand, p(b<sub>i+1</sub>&#x2192;c|S,b<sub>i</sub>)=&#x2153; for c&#x2260;b<sub>i+1 </sub>and p(b<sub>i+1</sub>&#x2192;b<sub>i+1</sub>|S,b<sub>i</sub>)=0 . If (3) does not hold or the factors on the right-hand side in (3) are not uniform then p(b<sub>i</sub>&#x2192;b&#x2032;<sub>T(j)</sub>,T) must be replaced by a more appropriate probability distribution. Similar to the fixed-frame Levenshtein distance, one can avoid penalization of insertions and deletions outside the sequencing frame by setting p(I)=1 and p(D)=1 in the last row and column of L. If barcodes are always followed by a certain sequence a, for instance an adapter sequence, then a can be appended to b to obtain a combined sequence (b,a) for which the transition probability p((b,a)&#x2192;b&#x2032;) can be calculated as before. One needs to note, however, that the matrix L for the calculation of p((b,a)&#x2192;b&#x2032;) is not square and that the final result is the element in the last row and column of L, i.e. p((b,a)&#x2192;b&#x2032;)=L(len(b)+len(a),len(b)). Using the STP p(b&#x2192;b&#x2032;), we define the distance between b and b&#x2032; to be d(b,b&#x2032;)=&#x2212;log p(b&#x2192;b&#x2032;) . This ensures that an increase in distance d(b,b&#x2032;) always corresponds to a decrease in the probability that b transforms into b&#x2032;. In comparison to a sequence distance the values for d(b,b&#x2032;) are not integers but real numbers greater than or equal to zero. The distance d(b,b&#x2032;) is symmetric if p(I)/4=p(D). The equivalence d(b,b&#x2032;)=0&#x21d4;b=b&#x2032; will usually not be true, since d(b,b)=0 only if p(b&#x2192;b)=1, which requires p(M)=1. In addition, the triangle inequality is not valid since p(b<sub>1</sub>&#x2192;b<sub>3</sub>)&#x2265;p(b<sub>1</sub>&#x2192;b<sub>2</sub>)p(b<sub>2</sub>&#x2192;b<sub>3</sub>) does not hold in general.</p><heading id="h-0013" level="1">Estimating Error Class Probabilities</heading><p id="p-0101" num="0093">In this section the estimation of the error class probabilities p(T=o|(i,j)) for entries (i,j) in matrix L is described, given a set of sequences R derived by sequencing the barcodes in barcode set B. For this purpose, the probability of alignments of b to b&#x2032; is shown. An alignment of b to b&#x2032; is a path through matrix L starting at (0,0) and ending at (b<sub>n</sub>,b&#x2032;<sub>n</sub>), such that an element (b<sub>i</sub>,b&#x2032;<sub>j</sub>) in the path is followed by (b<sub>T(i)</sub>,b<sub>T(j)</sub>) where T=M,S,I,D. In the following, p(b&#x2192;b&#x2032;,(i,j)) and p(b&#x2192;b&#x2032;,!(i,j)) will denote the probability that b transforms into b&#x2032; with an alignment containing (i,j) or not containing (i,j), respectively. We will, further, denote by p(b&#x2192;b&#x2032;,(i,j),T) the probability that b transforms into b&#x2032; with an alignment containing (i,j) followed by operation T. These probabilities will be calculated by making use of the following factorization.</p><p id="p-0102" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>((<i>b&#x2192;b&#x2032;,</i>(<i>i,j</i>)))=<i>p</i>(<i>b</i>(1, . . . ,<i>i</i>)&#x2192;<i>b</i>&#x2032;(1, . . . ,<i>j</i>))<i>p</i>(<i>b</i>(<i>i, . . . ,n</i>)&#x2192;<i>b&#x2032;</i>(<i>j, . . . ,n</i>)|<i>S</i>=(<i>i,j</i>)) &#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0103" num="0000">where S=(i,j) signifies that the alignment of b(i, . . . ,n)&#x2192;b&#x2032;(j, . . . ,n) starts at (i,j). To calculate p(b(i, . . . , n)&#x2192;b&#x2032;(j, . . . ,n)|S=(i,j)) we revert the algorithm for calculating L. For this purpose, the n&#xd7;n matrix L<sub>b,b&#x2032;</sub><sup>rev </sup>is initialized with L<sub>b,b&#x2032;</sub><sup>rev</sup>(n,n)=1 and L<sub>b,b&#x2032;</sub><sup>rev</sup>(i,j) is calculated as follows</p><p id="p-0104" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msup>       <mi>L</mi>       <mi>ref</mi>      </msup>      <mo>(</mo>      <mrow>       <mi>i</mi>       <mo>,</mo>       <mi>j</mi>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mrow>      <mrow>       <mrow>        <msup>         <mi>L</mi>         <mi>rev</mi>        </msup>        <mo>(</mo>        <mrow>         <mi>i</mi>         <mo>,</mo>         <mrow>          <mi>j</mi>          <mo>+</mo>          <mn>1</mn>         </mrow>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x2062;</mo>       <mfrac>        <mrow>         <mi>p</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mi>I</mi>         <mo>)</mo>        </mrow>        <mn>4</mn>       </mfrac>      </mrow>      <mo>+</mo>      <mrow>       <mrow>        <msup>         <mi>L</mi>         <mi>ref</mi>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>i</mi>          <mo>+</mo>          <mn>1</mn>         </mrow>         <mo>,</mo>         <mi>j</mi>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mi>p</mi>        <mo>&#x2061;</mo>        <mo>(</mo>        <mi>D</mi>        <mo>)</mo>       </mrow>      </mrow>      <mo>+</mo>      <mrow>       <mrow>        <msup>         <mi>L</mi>         <mi>ref</mi>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>i</mi>          <mo>+</mo>          <mn>1</mn>         </mrow>         <mo>,</mo>         <mrow>          <mi>j</mi>          <mo>+</mo>          <mn>1</mn>         </mrow>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x2062;</mo>       <mrow>        <mo>(</mo>        <mrow>         <mrow>          <mrow>           <mo>[</mo>           <mrow>            <msub>             <mi>b</mi>             <mrow>              <mi>i</mi>              <mo>+</mo>              <mn>1</mn>             </mrow>            </msub>            <mo>&#x2260;</mo>            <msubsup>             <mi>b</mi>             <mrow>              <mi>j</mi>              <mo>+</mo>              <mn>1</mn>             </mrow>             <mo>&#x2032;</mo>            </msubsup>           </mrow>           <mo>]</mo>          </mrow>          <mo>&#x2062;</mo>          <mfrac>           <mrow>            <mi>p</mi>            <mo>&#x2061;</mo>            <mo>(</mo>            <mi>S</mi>            <mo>)</mo>           </mrow>           <mn>3</mn>          </mfrac>         </mrow>         <mo>+</mo>         <mrow>          <mrow>           <mo>[</mo>           <mrow>            <msub>             <mi>b</mi>             <mrow>              <mi>i</mi>              <mo>+</mo>              <mn>1</mn>             </mrow>            </msub>            <mo>=</mo>            <msubsup>             <mi>b</mi>             <mrow>              <mi>j</mi>              <mo>+</mo>              <mn>1</mn>             </mrow>             <mo>&#x2032;</mo>            </msubsup>           </mrow>           <mo>]</mo>          </mrow>          <mo>&#x2062;</mo>          <mrow>           <mi>p</mi>           <mo>&#x2061;</mo>           <mo>(</mo>           <mi>M</mi>           <mo>)</mo>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>5</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0105" num="0000">This algorithm proceeds row-wise from right to left and from last to first row. This procedure is shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. After algorithm completion, one has</p><p id="p-0106" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>b</i>(<i>i, . . . ,n</i>)&#x2192;<i>b&#x2032;</i>(<i>j, . . . ,n</i>)|<i>S</i>=(<i>i,j</i>))=<i>L</i><sup>rev</sup>(<i>i,j</i>) &#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0107" num="0000">Since all paths in L start at (0,0) it follows that L(n,n)=L<sup>rev</sup>(0,0). From (4) it follows that</p><p id="p-0108" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>b&#x2192;b&#x2032;,</i>(<i>i,j</i>)))=<i>L</i><sub>b,b&#x2032;</sub>(<i>i,j</i>)<i>L</i><sub>b,b&#x2032;</sub><sup>rev</sup>(<i>i,j</i>) &#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0109" num="0094">and, further,</p><p id="p-0110" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>b&#x2192;b&#x2032;</i>,(<i>i,j</i>),<i>T</i>)=<i>L</i><sub>b,b&#x2032;</sub>(<i>i,j</i>)<i>p</i>(<i>b</i><sub>T(i)</sub><i>&#x2192;b&#x2032;</i><sub>T(j)</sub><i>,T</i>)<i>L</i><sub>b,b&#x2032;</sub><sup>rev</sup>(<i>T</i>(<i>i,j</i>)) &#x2003;&#x2003;(8)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0111" num="0095">We use (7) and (8) to estimate the probability of T following (i,j). For this purpose, assume that R is a set of sequences derived by sequencing barcodes in barcode set B. We start with an initial estimate for p<sup>(0)</sup>(T=o|(i,j))) and calculate iteratively</p><p id="p-0112" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msup>       <mi>p</mi>       <mrow>        <mo>(</mo>        <mrow>         <mi>n</mi>         <mo>+</mo>         <mn>1</mn>        </mrow>        <mo>)</mo>       </mrow>      </msup>      <mo>(</mo>      <mrow>       <mi>T</mi>       <mo>=</mo>       <mrow>        <mi>o</mi>        <mo>&#x2758;</mo>        <mrow>         <mo>(</mo>         <mrow>          <mi>i</mi>          <mo>,</mo>          <mi>j</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mfrac>      <mrow>       <msub>        <mo>&#x2211;</mo>        <mrow>         <mi>r</mi>         <mo>,</mo>         <mi>b</mi>        </mrow>       </msub>       <mrow>        <msup>         <mi>p</mi>         <mrow>          <mo>(</mo>          <mi>n</mi>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>b</mi>          <semantics definitionURL="">           <mo>&#x2192;</mo>           <annotation encoding="Mathematica">"\[Rule]"</annotation>          </semantics>          <mi>r</mi>         </mrow>         <mo>,</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mrow>          <mi>T</mi>          <mo>=</mo>          <mrow>           <mi>o</mi>           <mo>&#x2758;</mo>           <mi>B</mi>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>      <mrow>       <msub>        <mo>&#x2211;</mo>        <mrow>         <msup>          <mi>o</mi>          <mo>&#x2032;</mo>         </msup>         <mo>,</mo>         <mi>r</mi>         <mo>,</mo>         <mi>b</mi>        </mrow>       </msub>       <mrow>        <msup>         <mi>p</mi>         <mrow>          <mo>(</mo>          <mi>n</mi>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>b</mi>          <semantics definitionURL="">           <mo>&#x2192;</mo>           <annotation encoding="Mathematica">"\[Rule]"</annotation>          </semantics>          <mi>r</mi>         </mrow>         <mo>,</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mrow>          <mi>T</mi>          <mo>=</mo>          <mrow>           <msup>            <mi>o</mi>            <mo>&#x2032;</mo>           </msup>           <mo>&#x2758;</mo>           <mi>B</mi>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>9</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0113" num="0096">We found that this procedure converges to the correct solution, as long as p<sup>(0)</sup>(T=o|(i,j)) is not too far from the solution. Equation (9) calculates the probability of T=o for each combination (i,j). In order to calculate the probability of T=o after the i-th position of b, we used the following iterative scheme.</p><p id="p-0114" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msup>       <mi>p</mi>       <mrow>        <mo>(</mo>        <mrow>         <mi>n</mi>         <mo>+</mo>         <mn>1</mn>        </mrow>        <mo>)</mo>       </mrow>      </msup>      <mo>(</mo>      <mrow>       <mi>T</mi>       <mo>=</mo>       <mrow>        <mi>o</mi>        <mo>&#x2758;</mo>        <mrow>         <mo>(</mo>         <mrow>          <mi>i</mi>          <mo>,</mo>          <mo>&#xb7;</mo>         </mrow>         <mo>)</mo>        </mrow>       </mrow>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mfrac>      <mrow>       <msub>        <mo>&#x2211;</mo>        <mrow>         <mi>r</mi>         <mo>,</mo>         <mi>b</mi>         <mo>,</mo>         <mi>j</mi>        </mrow>       </msub>       <mrow>        <msup>         <mi>p</mi>         <mrow>          <mo>(</mo>          <mi>n</mi>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>b</mi>          <semantics definitionURL="">           <mo>&#x2192;</mo>           <annotation encoding="Mathematica">"\[Rule]"</annotation>          </semantics>          <mi>r</mi>         </mrow>         <mo>,</mo>         <mrow>          <mo>!</mo>          <mrow>           <mo>(</mo>           <mrow>            <mi>i</mi>            <mo>,</mo>            <mrow>             <mi>j</mi>             <mo>-</mo>             <mn>1</mn>            </mrow>           </mrow>           <mo>)</mo>          </mrow>         </mrow>         <mo>,</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mrow>          <mi>T</mi>          <mo>=</mo>          <mrow>           <mi>o</mi>           <mo>&#x2758;</mo>           <mi>B</mi>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>      <mrow>       <msub>        <mo>&#x2211;</mo>        <mrow>         <msup>          <mi>o</mi>          <mo>&#x2032;</mo>         </msup>         <mo>,</mo>         <mi>r</mi>         <mo>,</mo>         <mi>b</mi>         <mo>,</mo>         <mi>j</mi>        </mrow>       </msub>       <mrow>        <msup>         <mi>p</mi>         <mrow>          <mo>(</mo>          <mi>n</mi>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>b</mi>          <semantics definitionURL="">           <mo>&#x2192;</mo>           <annotation encoding="Mathematica">"\[Rule]"</annotation>          </semantics>          <mi>r</mi>         </mrow>         <mo>,</mo>         <mrow>          <mo>!</mo>          <mrow>           <mo>(</mo>           <mrow>            <mi>i</mi>            <mo>,</mo>            <mrow>             <mi>j</mi>             <mo>-</mo>             <mn>1</mn>            </mrow>           </mrow>           <mo>)</mo>          </mrow>         </mrow>         <mo>,</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mrow>          <mi>T</mi>          <mo>=</mo>          <mrow>           <msup>            <mi>o</mi>            <mo>&#x2032;</mo>           </msup>           <mo>&#x2758;</mo>           <mi>B</mi>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>10</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0115" num="0097">As in equation (9), we found that (10) converges to the correct solution if p<sup>(0)</sup>(T=o|(i,.)) is not too far away. Finally, in order to calculate the overall probability of observing T=o when aligning b with b&#x2032; we used the following iterative procedure.</p><p id="p-0116" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msup>       <mi>p</mi>       <mrow>        <mo>(</mo>        <mrow>         <mi>n</mi>         <mo>+</mo>         <mn>1</mn>        </mrow>        <mo>)</mo>       </mrow>      </msup>      <mo>(</mo>      <mrow>       <mi>T</mi>       <mo>=</mo>       <mi>o</mi>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mfrac>      <mrow>       <msub>        <mo>&#x2211;</mo>        <mrow>         <mi>r</mi>         <mo>,</mo>         <mi>b</mi>         <mo>,</mo>         <mi>i</mi>         <mo>,</mo>         <mi>j</mi>        </mrow>       </msub>       <mrow>        <msup>         <mi>p</mi>         <mrow>          <mo>(</mo>          <mi>n</mi>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>b</mi>          <semantics definitionURL="">           <mo>&#x2192;</mo>           <annotation encoding="Mathematica">"\[Rule]"</annotation>          </semantics>          <mi>r</mi>         </mrow>         <mo>,</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mrow>          <mi>T</mi>          <mo>=</mo>          <mrow>           <mi>o</mi>           <mo>&#x2758;</mo>           <mi>B</mi>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>      <mrow>       <msub>        <mo>&#x2211;</mo>        <mrow>         <msup>          <mi>o</mi>          <mo>&#x2032;</mo>         </msup>         <mo>,</mo>         <mi>r</mi>         <mo>,</mo>         <mi>b</mi>         <mo>,</mo>         <mi>i</mi>         <mo>,</mo>         <mi>j</mi>        </mrow>       </msub>       <mrow>        <msup>         <mi>p</mi>         <mrow>          <mo>(</mo>          <mi>n</mi>          <mo>)</mo>         </mrow>        </msup>        <mo>(</mo>        <mrow>         <mrow>          <mi>b</mi>          <semantics definitionURL="">           <mo>&#x2192;</mo>           <annotation encoding="Mathematica">"\[Rule]"</annotation>          </semantics>          <mi>r</mi>         </mrow>         <mo>,</mo>         <mrow>          <mo>(</mo>          <mrow>           <mi>i</mi>           <mo>,</mo>           <mi>j</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mrow>          <mi>T</mi>          <mo>=</mo>          <mrow>           <msup>            <mi>o</mi>            <mo>&#x2032;</mo>           </msup>           <mo>&#x2758;</mo>           <mi>B</mi>          </mrow>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>11</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0117" num="0098">As in (9) and (10), we found also that (11) converges to the correct solution. Since (10) and (11) accumulate data for multiple combinations of (i,j) these procedures need less data than (9) to converge. The procedure in (11) needs the least, as it accumulates data for all combinations of (i,j).</p><heading id="h-0014" level="1">4. Barcode Set Generation</heading><heading id="h-0015" level="1">4.1. Minimizing Cross-Contamination</heading><p id="p-0118" num="0099">Cross-contamination occurs when the sequence b<sub>d </sub>read out for a barcode b coincides with the sequence of another barcode b&#x2032;, or when a non-barcode sequence is read out which is corrected to the wrong barcode. The first type of cross-contamination, also called barcode hopping, is particularly problematic since it is not detectable. A barcode which transforms into another barcode appears to the user indistinguishable from the barcode into which it transformed. Barcode hopping can be reduced by searching for barcodes with a large distance from each other. In the case of a sequence distance, a large distance guarantees that barcodes are dissimilar and require a large number of errors to transform into each other. In the case of an STP distance a large inter-barcode distance is directly related to a low probability of barcode hopping. Typically, prior to generating a barcode set, the minimal inter-barcode distance (MIB) is specified. The generation then starts from an initial set of barcodes B, which can consist of a single random barcode or a predefined set of barcodes, see Section 4.2. The initial barcode set B is extended by adding a barcode b&#x2032; with d(b,b&#x2032;)&#x2265;MIB and d(b&#x2032;,b)&#x2265;MIB for all b&#x2208;B. These two inequalities will be called the MIB condition. If the distance d(b,b&#x2032;) is symmetric, only one of the inequalities in the MIB condition has to be verified. To find the next b&#x2032; to add to B, elements in B<sup>c</sup>, the complement of B, are examined in sequence. Here, the complement B<sup>c </sup>is the set of all sequences of the same length as elements in B which are not contained in B. The order in which elements in B<sup>c </sup>are examined can be random or follow a special ordering of B, such as lexicographical ordering [2], or be a combination of random and ordered. If all b&#x2032; in B<sup>c </sup>are examined, the sequence in which the b&#x2032; are processed is irrelevant. If b&#x2032; satisfies the MIB condition, it is added to the set of potential barcodes P. Once P satisfies the required properties, e.g. that it is not empty, or that it cannot be further extended in size, then b&#x2032;&#x2208;P is selected by another, possibly random, procedure and added to B. At this stage, B might already fulfill all the requirements that one has for a barcode set, e.g. sufficient size, in which case the search would terminate. This barcode search can be summarized as follows.</p><heading id="h-0016" level="1">Search Algorithm 1</heading><p id="p-0119" num="0100">1. Specify barcode length n and MIB&#x3e;0.</p><p id="p-0120" num="0101">2. Initialize barcode set B with a random barcode b or with a predefined set of barcodes.</p><p id="p-0121" num="0102">3. Initialize P, the set of potential barcodes, with P=&#x2205;.</p><p id="p-0122" num="0103">4. Examine sequences b&#x2032;&#x2208;B<sup>c</sup>, where B<sup>c </sup>is the complement of B in the set of sequences of length n, i.e. the set of all sequences of length n not contained in B. If d(b,b&#x2032;)&#x2265;MIB and d(b&#x2032;,b)&#x2265;MIB for all b&#x2208;B, add b&#x2032; to the set of potential barcodes P. Repeat this step until P fulfills the required properties or all elements in B<sup>c </sup>have been examined.</p><p id="p-0123" num="0104">5. If P does not fulfill the required properties terminate.</p><p id="p-0124" num="0105">6. Select b&#x2032;&#x2208;P and add to B. If B fulfills the required properties terminate, otherwise goto step 3.</p><p id="p-0125" num="0106">If we search for nested barcode sets with nested sequences the above procedure has to be modified. Here, we will use the notation from Section 2, i.e. S is the number of subsets and E is the number of subsequences. In the previous algorithm, barcode length n is replaced by barcode lengths n<sub>1</sub>, . . . , n<sub>E </sub>and minimal inter-barcode distance MIB is replaced by inter-barcode distances d<sub>i,j</sub>, where i=1, . . . ,S and j=1, . . . ,E. Further, the MIB condition has to hold for all EXT<sup>j&#x2212;1</sup>(B<sub>i</sub>) and d<sub>i,j</sub>. As noted in Section 2, the search for nested barcode sets proceeds by searching for sets C<sub>1</sub>&#x2282; . . . C<sub>S </sub>of barcodes with length n<sub>E</sub>. In particular, a sequence c&#x2032; is considered a potential barcode candidate for C<sub>i </sub>only if d(CUT<sup>j</sup>(c), CUT<sup>j</sup>(c&#x2032;))&#x2265;d<sub>i,E&#x2212;j </sub>and d(CUT<sup>j</sup>(c&#x2032;), CUT<sup>j</sup>(c))&#x2265;d<sub>i,E&#x2212;j </sub>for all c&#x2208;C<sub>i </sub>and j=0, . . . ,E&#x2212;1. The modified version of the above barcode search for nested barcode sets with nested sequences now looks as follows.</p><heading id="h-0017" level="1">Search Algorithm 2</heading><p id="p-0126" num="0107">1. Specify number of subsets S&#x2265;1, number of subsequences E&#x2265;1 and for i=1, . . . ,S and j=1, . . . ,E barcode lengths n<sub>j</sub>&#x3e;0 with n<sub>j+1</sub>&#x3e;n<sub>j</sub>, and inter-barcode distances d<sub>i,j</sub>&#x3e;0 with d<sub>i,j</sub>&#x3e;d<sub>i+1,j </sub>and d<sub>i,j+1</sub>&#x3e;d<sub>i,j</sub>.</p><p id="p-0127" num="0108">2. Set i=1 and initialize barcode set C with a random barcode c of length n<sub>E </sub>or with a predefined set of barcodes of length n<sub>E</sub>.</p><p id="p-0128" num="0109">3. Initialize P, the set of potential barcodes, with P=&#x2205;.</p><p id="p-0129" num="0110">4. Examine sequences c&#x2032;&#x2208;C<sup>C</sup>, where C<sup>C </sup>is the complement of C in the set of sequences of length n<sub>E</sub>. If d(CUT<sup>j</sup>(c), CUT<sup>j</sup>(c&#x2032;))&#x2265;d<sub>i,E&#x2212;j </sub>and d(CUT<sup>j</sup>(c&#x2032;),CUT<sup>j</sup>(c))&#x2265;d<sub>i,E&#x2212;j </sub>for j=0, . . . ,E&#x2212;1 and all c&#x2208;C add c&#x2032; to the set of potential barcodes P. Repeat this step until P fulfills the required conditions or all elements in C<sup>c </sup>have been examined.</p><p id="p-0130" num="0111">5. If P does not fulfill the required conditions goto step 7.</p><p id="p-0131" num="0112">6. Select c&#x2032;&#x2208;P and add c&#x2032; to C. If C fulfills the requirements for set C<sub>i </sub>goto step 7. Otherwise, goto step 3.</p><p id="p-0132" num="0113">7. Assign C<sub>i</sub>=C and: if i&#x3c;S set i=i+1 and goto step 3, if i=S set B<sub>i</sub>=CUT<sup>E&#x2212;1</sup>(C<sub>i</sub>) and EXT<sup>j</sup>(B<sub>i</sub>)=CUT<sup>E&#x2212;1&#x2212;j</sup>(C<sub>i</sub>) for j=0, . . . ,E&#x2212;1, then terminate.</p><p id="p-0133" num="0114">It should be noted that the barcode sets produced by Search algorithm 2 contain, for S=1 and E=1, the barcode sets produced by Search algorithm 1. For E=1 and S&#x3e;1, Search algorithm 2 produces nested barcode sets without nested sequences and for S=1, E&#x3e;1 Search algorithm 2 produces nested sequences without nested subsets. Hence, Search algorithm 2 can be used to selectively generate barcode sets with multiple nested subsets and/or sequences.</p><p id="p-0134" num="0000">In the following, we will refer to a nested barcode set with S subsets, E subsequences with lengths n<sub>1</sub>, . . . ,n<sub>E</sub>, where d(b,b&#x2032;) is a distance of type DTYPE, as DTYPE-S (n<sub>1</sub>, . . . , n<sub>E</sub>). Hence, if EXT<sup>j</sup>(B<sub>i</sub>) has been designed for an ff-Levenshtein distance d(b,b&#x2032;), with S=5 and n<sub>1</sub>=8, n<sub>2</sub>=10 and n<sub>3</sub>=12 the nested barcode set will be referred to as ff-Levenshtein-5(8, 10, 12). If E=1, we will use DNAME(n<sub>1</sub>), rather than DNAME-1(n<sub>1</sub>), to refer to a set of barcodes with length n<sub>1</sub>. Hence, Hamming (6) refers to a set of barcodes of length 6 which has been designed for the Hamming distance.<br/>The second type of cross-contamination, mentioned at the beginning of this section, is the result of false error-correction. Here, the sequence read out (determined sequence) for a barcode is incorrect but does not coincide with another barcode. The error occurs when the non-barcode sequence is assigned to the wrong barcode by an error-correction procedure. The set of sequences which are corrected to a barcode b is the decode sphere of the barcode. Hence, to guarantee the proper correction of at least a minimal number of errors (MEC), one has to check that sequences generated with up to MEC errors from a barcode b lie in the decode sphere of b and that decode spheres for different barcodes do not overlap. Non-barcode sequences c are usually corrected to the barcode with minimal distance. If distance d obeys the triangle inequality, d(b,b&#x2032;)&#x2265;MIB and d(b,c)&#x3c;MIB/2 imply that d(c,b&#x2032;)&#x3e;MIB/2. Hence, if d is symmetric and c has been generated from b with at most MEC&#x3c;MIB/2 errors then c lies only in the decode sphere of b. If distance d is not symmetric, as in the case of a Levenshtein distance with non-equal weights for insertions and deletions, one has to check, additionally, whether d(c,b)&#x3c;MIB/2. This implies d(b&#x2032;,c)&#x3e;MIB/2 and, therefore that c lies only in the decode sphere of b. For a distance that does not obey the triangle inequality, if is usually not sufficient to ensure that c has been generated from b with at most MEC&#x3c;MIB/2 errors. For the fixed-frame Levenshtein distance, for instance, one can find sequences b,b&#x2032; and c such that d(b,b&#x2032;)=3, but d(b,c)=1 and d(b&#x2032;,c)=1, see [3]. In this case, therefore, with MIB=3, MEC=1 and MEC&#x3c;MIB/2 the decode spheres overlap. Hence, if the triangle inequality does not hold, it is usually necessary to verify directly that decode spheres do not overlap. In the following, we will always assume that a non-barcode sequence c is corrected to the b&#x2208;B with the smallest distance. We will, further, denote by D(b,r) the sphere of radius r around b, which is the set D(b,r)={b&#x2032;:len(b&#x2032;)=n,d(b,b&#x2032;)&#x2264;r}, and write D(B,r)=&#x222a;<sub>b&#x2208;B </sub>D(b,r) for the sphere of radius r around barcode set B. The search for barcode sets in [3] proceeds by looking for b&#x2032; with d(b,b&#x2032;)&#x2265;MIB and d(b&#x2032;,b)&#x2265;MIB, such that D(B,MEC)&#x2229;D(b&#x2032;,MEC)=&#x2205;<b>0</b>. This procedure can be summarized as follows.</p><heading id="h-0018" level="1">Search Algorithm 3</heading><p id="p-0135" num="0115">1. Specify barcode length n, MIB&#x2265;0 and MEC&#x2265;0 with MEC&#x3c;MIB.</p><p id="p-0136" num="0116">2. Initialize barcode set B with a random barcode b or with a predefined set of barcodes. If decode sphere D(B,MEC) of B is unknown calculate decode sphere D(B,MEC).</p><p id="p-0137" num="0117">3. Initialize P, the set of potential barcodes, with P=&#x2205;.</p><p id="p-0138" num="0118">4. Examine sequences b&#x2032;&#x2208;B<sup>c</sup>, where B<sup>c </sup>is the complement of B in the set of sequences of length n. If d(b,b&#x2032;)&#x2265;MIB and d(b&#x2032;,b)&#x2265;MIB for all b&#x2208;B and D(B,MEC)&#x2229;D(b&#x2032;,MEC)=&#x2205; add b&#x2032; to the set of potential barcodes P. Repeat this step until P fulfills the required properties or all elements in B<sup>c </sup>have been examined.</p><p id="p-0139" num="0119">5. If P does not fulfill the required properties terminate.</p><p id="p-0140" num="0120">6. Select b&#x2032;&#x2208;P and add to B. If B fulfills the required properties terminate, otherwise goto step 3.</p><p id="p-0141" num="0000">This barcode search is computationally more expensive than Search Algorithm 1. This is because the calculation of D(B,MEC)&#x2229;D(b&#x2032;,MEC) requires the calculation of the distance of b&#x2032; to all sequences in D(B,MEC). For nested barcode sets with nested sequences the algorithm above has to be adapted as follows. First, one needs to define distances f<sub>i,j </sub>such that f<sub>i,j</sub>&#x3c;d<sub>i,j </sub>for i=1, . . . ,S and j=1, . . . ,E. For these distances, we require that error correction maps b&#x2032; a sequence of length n<sub>j </sub>to EXT<sup>j</sup>(b), if D(EXT<sup>j</sup>(b),b&#x2032;)&#x3c;f<sub>i,j </sub>and b&#x2208;B<sub>i</sub>. More generally, we require that D(EXT<sup>j</sup>(b),f<sub>i,j</sub>)&#x2229;D(EXT<sup>j</sup>(B\b),f<sub>i,j</sub>)=&#x2205;. The complete algorithm is given as follows.</p><heading id="h-0019" level="1">Search Algorithm 4</heading><p id="p-0142" num="0121">1. Specify number of subsets S&#x2265;1, number of subsequences E&#x2265;1 and for i=1, . . . ,S and j=1, . . . ,E barcode lengths n<sub>j</sub>&#x3e;0 with n<sub>j+1</sub>&#x3e;n<sub>j</sub>, and inter-barcode distances d<sub>i,j</sub>&#x3e;0 with d<sub>i,j</sub>&#x3e;d<sub>i+1,j </sub>and d<sub>i,j+1</sub>&#x3e;d<sub>i,j</sub>. Specify, further, error-correction distances f<sub>i,j</sub>&#x2265;0 with f<sub>i,j</sub>&#x3c;d<sub>i,j</sub>.</p><p id="p-0143" num="0122">2. Set i=1 and initialize barcode set C with a random barcode c of length n<sub>E </sub>or with a predefined set of barcodes of length n<sub>E</sub>. Calculate decode spheres D(CUT<sup>j</sup>(C),f<sub>i,E&#x2212;j</sub>) for j=0, . . . ,E&#x2212;1.</p><p id="p-0144" num="0123">3. Initialize P, the set of potential barcodes, with P=&#x2205;.</p><p id="p-0145" num="0124">4. Examine sequences c&#x2032;&#x2208;C<sup>c</sup>, where C<sup>c </sup>is the complement of C in the set of sequences of length n<sub>E</sub>. If d(CUT<sup>j</sup>(c),CUT<sup>j</sup>(c&#x2032;))&#x2265;d<sub>i,E&#x2212;j </sub>and d(CUT<sup>j</sup>(c&#x2032;),CUT<sup>j</sup>(c))&#x2265;d<sub>i,E&#x2212;j </sub>for j=0, . . . ,E&#x2212;1 and all c &#x2208;C, and if, further, D(CUT<sup>j</sup>(C), f<sub>i,E&#x2212;j</sub>)&#x2229;D(CUT<sup>j</sup>(c&#x2032;), f<sub>i,E&#x2212;j</sub>)=&#x2205; for j=0, . . . ,E&#x2212;1 add c&#x2032; to the set of potential barcodes P. Repeat this step until P fulfills the required conditions or all elements in C<sup>c </sup>have been examined.</p><p id="p-0146" num="0125">5. If P does not fulfill the required conditions goto step 7.</p><p id="p-0147" num="0126">6. Select c&#x2032;&#x2208;P and add c&#x2032; to C. If C fulfills the requirements for set C<sub>i </sub>goto step 7. Otherwise, goto step 3.</p><p id="p-0148" num="0127">7. Assign C<sub>i</sub>=C and: if i&#x3c;S set i=i+1 and goto step 3, if i=S set B<sub>i</sub>=CUT<sup>E</sup>(C<sub>i</sub>) and EXT<sup>j</sup>(B<sub>i</sub>)=CUT<sup>E&#x2212;j</sup>(C<sub>i</sub>) for j=0, . . . ,E&#x2212;1, then terminate.</p><p id="p-0149" num="0128">Similar to Search algorithm 2, also Search algorithm 4 can be used to selectively generate barcode sets with multiple nested subsets and/or sequences by appropriately choosing parameters S and E.</p><p id="p-0150" num="0000">Nested sets of barcodes EXT<sup>j</sup>(B<sub>i</sub>) with d<sub>i,j</sub>&#x3e;d<sub>i+1,j</sub>, d<sub>i,j+1</sub>&#x3e;d<sub>i,j </sub>and f<sub>i,j</sub>&#x2264;d<sub>i,j </sub>can also be generated without specifying the d<sub>i,j </sub>and f<sub>i,j </sub>in step 1 in Search algorithms 2 and 4. The corresponding search algorithm is given below, where we will use the notation CUT<sup>j</sup>(c,c&#x2032;)=(CUT<sup>j</sup>(c),CUT<sup>j</sup>(c&#x2032;)) and D<sub>C</sub>(c&#x2032;)=min<sub>c&#x2208;C</sub>min{d(c,c&#x2032;),d(c&#x2032;,c)}. The latter can be interpreted as the distance of c&#x2032; to C.</p><heading id="h-0020" level="1">Search Algorithm 5</heading><p id="p-0151" num="0129">1. Specify number of subsets S&#x3e;2, number of extensions E&#x2265;0 and for i=1, . . . ,S and j=1, . . . ,E+1 barcode lengths n<sub>j</sub>&#x3e;0 with n<sub>j+1</sub>&#x3e;n<sub>j</sub>.</p><p id="p-0152" num="0130">2. Set i=1 and initialize barcode set C with a random barcode c of length n<sub>E+1</sub>. Initialize X, the set of barcodes to be excluded from the search, with X=&#x2205;.</p><p id="p-0153" num="0131">3. Assign c<sub>i</sub>=argmax<sub>c&#x2032;&#x2208;C</sub><sub><sup2>c</sup2></sub><sub>&#x2227;c&#x2032;&#x2208;X</sub>D<sub>C</sub>(c&#x2032;).</p><p id="p-0154" num="0132">4. If i=1 goto step 6.</p><p id="p-0155" num="0133">5. Set d<sub>i,j</sub>=min<sub>c&#x2032;&#x2208;C</sub>{d(CUT<sup>E+1&#x2212;j</sup>(c<sub>i</sub>,c&#x2032;)),d(CUT<sup>E+1&#x2212;j</sup>(c&#x2032;,c<sub>i</sub>))}. If d<sub>i,j</sub>&#x3c;d<sub>i&#x2212;1,j </sub>and d<sub>i,j</sub>&#x3c;d<sub>i,j+1 </sub>for j=1, . . . ,E+1 goto step 6, otherwise set X=X&#x222a;c<sub>i </sub>and goto step 3 unless X=C<sup>c</sup>.</p><p id="p-0156" num="0134">6. Set C=C&#x222a;c<sub>i</sub>, C<sub>i</sub>=C, d<sub>i,j</sub>=min<sub>c&#x2032;&#x2208;C</sub>{d(CUT<sup>E+1&#x2212;j</sup>(c<sub>i</sub>,c&#x2032;)), d(CUT<sup>E+1&#x2212;j</sup>(c&#x2032;,c<sub>i</sub>))} and f<sub>i,j</sub>=max{f&#x3e;0: D(CUT<sup>E+1&#x2212;j</sup>(C<sub>i&#x2212;1</sub>),f)&#x2229;D(CUT<sup>E+1&#x2212;j</sup>(c<sub>i</sub>),f)=&#x2205;}. If i&#x3c;S set i=i+1, X=&#x2205; and goto step 3, otherwise terminate.</p><p id="p-0157" num="0135">The above procedure generates a sequence of nested barcode sets EXT<sup>j</sup>(B<sub>i</sub>) with |B<sub>i</sub>|=i+1. The maximum in step 3 of the above algorithm might not be unique. In this case, c<sub>i </sub>has to be selected from the set of all c&#x2032; with maximal distance from C. This happens, in particular, when distance d(c,c&#x2032;), such as a sequence distance, takes on a finite number of values. If values of d(c,c&#x2032;) are continuous, as for an STP distance, the maximum in step 3, and therefore c<sub>i</sub>, will generally be unique.</p><heading id="h-0021" level="1">4.2. Avoiding Unwanted Barcode Sequences</heading><p id="p-0158" num="0136">There are various situations in which one might want to remove sequences from the set of possible barcodes. This is, for instance, the case if a sequence has low amplification efficiency. Barcoding a sample with such a sequence can result in the sample obtaining considerably less lane share than other multiplexed samples. To avoid such a sequence, the barcode search in Section 4.1 has to be slightly modified. Instead of examining all sequences or b&#x2032;, or c&#x2032; in B<sup>c </sup>or C<sup>c</sup>, respectively, one should examine only b&#x2032; or c&#x2032; other than the sequences to be excluded. Another situation causing problems in demultiplexing occurs when sequencing produces incorrect but frequent sequences which are not associated with any barcode. Such sequences can, for instance, appear when the index is not properly ligated to the fragment. In this case, some sequencers will often produce a sequence consisting almost entirely of G's. Such artificial sequences, not associated with a barcode, will have a negative impact on error-correction if they are assigned to the closest barcode. In order to avoid this problem, such artificial sequences should not be contained in the decode sphere of any barcode. If artificial sequences can themselves have variants, the sphere around the artificial sequences containing these variants should not overlap with the decode sphere of any barcode. This problem can be addressed by adding the artificial sequences (comparative index sequences) to the initial set of barcodes from which the search in Section 4 generates a full barcode sets. This guarantees that the decode spheres of the resulting barcodes do not overlap with the decode spheres of the artificial sequences. Upon completion of the barcode search, the artificial sequences are removed from the final barcode set. As artificial sequences, it is possible to add sequences consisting entirely of either A, C, G or T to barcode set B<sub>1 </sub>prior to starting the barcode search.</p><heading id="h-0022" level="1">4.3. Positional Nucleotide Balancing</heading><p id="p-0159" num="0137">The barcode set used to multiplex the samples in an RNA-Seq run should have a balanced nucleotide distribution at each barcode position. An uneven distribution can lead to low quality scores or a low pass filter rate. To achieve a balanced nucleotide distribution for the s samples in an RNA-Seq run with a nested barcode set EXT<sup>j</sup>(B&#x2032;<sub>k</sub>) one has to select an appropriate barcode set B with |B|=s from B&#x2032;<sub>k </sub>where |B&#x2032;<sub>k&#x2212;1</sub>|&#x3c;s&#x2264;|B&#x2032;<sub>k</sub>|. To obtain such a set B, the following selection method can be used. It evaluates all possible subsets B&#x2282;B&#x2032;<sub>k </sub>satisfying |B|=s with the help of an A* search. For commonly used sample numbers s<sub>i</sub>&#x3c;s<sub>i+1 </sub>multiplexed in an RNA-Seq run, we used this selection method to obtain a nested barcode set EXT<sup>j</sup>(B<sub>i</sub>) with |B<sub>i</sub>|=s<sub>i</sub>. We start by selecting B<sub>1 </sub>from the B&#x2032;<sub>k</sub>, where |B&#x2032;<sub>k&#x2212;1</sub>|&#x3c;s<sub>1</sub>&#x2264;|B&#x2032;<sub>k</sub>|. Subsequently, we select B<sub>i+1 </sub>from B&#x2032;<sub>k</sub>, where |B&#x2032;<sub>k&#x2212;1</sub>|&#x3c;s<sub>1</sub>&#x2264;|B&#x2032;<sub>k</sub>| such that B<sub>i</sub>&#x2282;B<sub>i+1</sub>. Since multiple B<sub>i </sub>can satisfy B&#x2032;<sub>k&#x2212;1</sub>&#x2282;B<sub>i</sub>&#x2282;B&#x2032;<sub>k </sub>it is possible that d<sub>i</sub>=d<sub>i+1 </sub>for some of the i. Such a nested barcode set is, therefore, a slight variation of the concept considered so far.</p><p id="p-0160" num="0138">The nucleotide distribution of a barcode set B at position p is given by &#x3b4;(B,p,n)=&#x3a3;<sub>b&#x2208;B</sub>[b(p)=n]/|B|, where n=A,C,G,T. If p,n are not relevant this distribution will simply be written as &#x3b4;(B). We measure the distance D(&#x3b4;<sub>1</sub>,&#x3b4;<sub>2</sub>) between two positional nucleotide distributions &#x3b4;<sub>1</sub>(p,n) and &#x3b4;<sub>2</sub>(p,n) as follows D(&#x3b4;<sub>1</sub>,&#x3b4;<sub>2</sub>)=&#x3a3;<sub>p,n </sub>(&#x3b4;<sub>1</sub>(p,n)&#x2212;&#x3b4;<sub>2</sub>(p,n))<sup>2</sup>, and denote by D(&#x3b4;) the distance of &#x3b4; to the uniform positional nucleotide distribution (UPND), i.e. D(&#x3b4;)=&#x3a3;<sub>p,n </sub>(&#x3b4;(p,n)&#x2212;&#xbc;)<sup>2</sup>. To find a barcode set B of size s within another barcode set B&#x2032; we employ the following A* search. Assume that a subset &#x3b2;&#x2282;B&#x2032; with |&#x3b2;|&#x3c;s has already been selected. We want to find a lower bound for D(&#x3b4;(B)), given that &#x3b2;&#x2282;B. The barcode sequence b producing the smallest value of D(&#x3b4;(&#x3b2;&#x222a;b)) contains at each position p the nucleotide with the smallest frequency at p in &#x3b2;, i.e. b(p)=argmin<sub>n</sub>&#x3b4;(&#x3b2;,p,n). If n is not unique, it is chosen randomly from all n minimizing &#x3b4;(&#x3b2;,p,n). The nucleotide sequence b is not necessarily contained in B&#x2032;. Hence, adding a single barcode from B&#x2032; to &#x3b2; will potentially yield a distance from the UPND which is larger than D(&#x3b4;(&#x3b2;&#x222a;b)). If we set b<sub>1</sub>=b, &#x3b2;<sub>1</sub>=&#x3b2; and &#x3b2;<sub>i+1</sub>=&#x3b2;<sub>i</sub>&#x222a;b<sub>i</sub>, repeated application of this construction produces a sequence of barcode sequences b<sub>1</sub>, . . . , b<sub>|B|&#x2212;|&#x3b2;|</sub>. We use D(&#x3b4;(&#x3b2;&#x222a;U<sub>i=1</sub><sup>|B|&#x2212;|&#x3b2;|</sup>b<sub>i</sub>) as the lower bound for the distance from the UPND for a subset B&#x2282;B&#x2032; with &#x3b2;&#x2282;B. In our A* search we use a depth-first approach. To find the B&#x2282;B&#x2032; of size s with minimal distance D(&#x3b4;(B&#x2032;)) we sequentially generate all subsets of barcodes of size s. Subsets of size s are themselves generated by adding one barcode after another. When a new barcode b is added to a subset &#x3b2;, we calculate the lower bound above for D(&#x3b4;(B)) given that &#x3b2;&#x222a;b&#x2282;B. If this estimate lies above or is equal to the distance for a set of size s for which the distance to the UPND has already been calculated then &#x3b2;&#x222a;b and all subsets containing &#x3b2;&#x222a;b are removed from the search. This considerably reduces the number of barcode sets which have to be examined and allows, in many cases, to find a barcode set B with |B|=s and minimal D(&#x3b4;(B)).</p><heading id="h-0023" level="1">5. Barcode Arrangement on Well-Plates</heading><p id="p-0161" num="0139">As mentioned in the introduction, the barcode sets B<sub>1</sub>&#x2282;B<sub>2</sub>&#x2282; . . . are used for experiments with different numbers of samples. If a user has at most |B<sub>1</sub>| samples they will use barcodes from set B<sub>1</sub>. If they have more than |B<sub>1</sub>| and at most |B<sub>2</sub>| samples they will use barcodes from set B<sub>2</sub>. The minimal number of barcodes which can, at least in theory, have a UPND is 4. Hence, B<sub>1 </sub>should contain at least 4 barcodes. Since the number of samples in an experiment is often a multiple of 8, it is sensible to require that B<sub>i</sub>=m<sub>i</sub>8 for i&#x3e;1, where m<sub>i </sub>is a positive integer. To make pipetting such barcode sets more convenient or easier to automate, it is, further, sensible to arrange them on well-plates such that barcodes in B<sub>i </sub>are grouped together. A possible arrangement on an 8&#xd7;12 well-plate, where barcode sets with sizes 4, 8, 16, 24, 96 are grouped in columns is shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. Here, wells A1-D1 contain barcodes in B<sub>1</sub>, wells A1-H1 contain barcodes in B<sub>2</sub>, columns 1 and 2 contain barcodes in B<sub>3 </sub>and columns 1, 2 and 3 contain barcodes in B<sub>4</sub>. The complete set of barcodes in all wells is B<sub>5</sub>. If the barcode sets can be extended to C<sub>1</sub>&#x2282;C<sub>2</sub>&#x2282; . . . , then the barcodes of length n+me in the C<sub>i </sub>are contained in the wells of the well-plate and grouped as described for the B<sub>i</sub>.</p><heading id="h-0024" level="1">6. Reducing and Quantifying Cross-Contamination with Dual Indices</heading><p id="p-0162" num="0140">Barcodes can be used as single o dual indices on an Illumina sequencer [5]. In a single index RNA-Seq run a barcode b<sub>i7 </sub>from barcode set B<sub>i7 </sub>(e.g. selected from SEQ ID NO: 1-104 and SEQ ID NO: 209-496), &#x201c;i7 index&#x201d;, before the P7 adapter. In a dual-index run a second barcode b<sub>i5 </sub>from another barcode set B<sub>i5 </sub>(e.g. selected from SEQ ID NO: 105-208 and SEQ ID NO: 497-784), &#x201c;i5 index&#x201d;, before the P5 adapter. This setup is visualized in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Here, barcode sequences b<sub>i7</sub>, b<sub>i5 </sub>and barcode sets B<sub>i5</sub>, B<sub>i7 </sub>might be identical. <figref idref="DRAWINGS">FIG. <b>7</b></figref> shows that b<sub>i7 </sub>and b<sub>i5 </sub>are sequenced in the same direction as read 1 and read 2 producing sequences b<sub>i7,d </sub>and b<sub>i5,d</sub>, where, potentially, b<sub>i7</sub>&#x2260;b<sub>i7,d </sub>and b<sub>i5</sub>&#x2260;b<sub>i5,d</sub>. The proportion of (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>will be called the purity of an RNA-Seq run. To multiplex samples in a dual-index RNA-Seq run, a subset of barcode tuples C&#x2282;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>of the same size as the number of samples has to be selected. Each sample in the RNA-Seq run is then labeled with its unique barcode combination (b<sub>i7</sub>,b<sub>i5</sub>)&#x2208;C. To minimize cross-contamination, C should be chosen such that (b<sub>i7</sub>,b<sub>i5</sub>)&#x2208;C and (b<sub>i7</sub>&#x2032;,b<sub>i5</sub>&#x2032;)&#x2208;C implies b<sub>i7</sub>&#x2260;b<sub>i7</sub>&#x2032; and b<sub>i5</sub>&#x2260;b<sub>i5</sub>&#x2032;. Such a C will be called unique component dual index barcode set (UCDI). A UCDI C ensures that barcode hopping in either b<sub>i7 </sub>or b<sub>i5 </sub>will produce a barcode tuple not contained in C. For a UCDI C, therefore, hopping of a single barcode is detectable. This is an advantage over single-index RNA-Seq runs, where barcode hopping is not detectable. A UCDI, however, cannot correct hopping of a single barcode, since for (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C and (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>it is, in general, impossible to say whether b<sub>i7,d</sub>&#x2260;b<sub>i7 </sub>or b<sub>i5,d</sub>&#x2260;b<sub>i5</sub>. As a consequence, fragments with associated (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C and (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>have to be removed from further downstream analysis. A tuple (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C is obtained in any of the three mutually exclusive cases,<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0141">1. b<sub>i7,d</sub>&#x2260;b<sub>i7</sub>&#x2227;b<sub>i5,d</sub>=b<sub>i5 </sub></li>        <li id="ul0004-0002" num="0142">2. b<sub>i5,d</sub>&#x2260;b<sub>i5</sub>&#x2227;b<sub>i7,d</sub>=b<sub>i7 </sub></li>        <li id="ul0004-0003" num="0143">3. b<sub>i7,d</sub>&#x2260;b<sub>i7</sub>&#x2227;b<sub>i5,d</sub>&#x2260;b<sub>i5</sub>&#x2227;(b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C</li>    </ul>    </li></ul></p><p id="p-0163" num="0144">Hence, the probability of observing (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C is the sum of the probabilities of the cases above. In a reasonably clean RNA-Seq run the simultaneous hopping of two barcodes is highly unlikely and the probability that b<sub>i7,d</sub>&#x2260;b<sub>i7</sub>&#x2227;b<sub>i5,d</sub>&#x2260;b<sub>i5 </sub>is therefore negligible. Similarly, b<sub>i7,d</sub>&#x2260;b<sub>i7 </sub>implies b<sub>i5,d</sub>=b<sub>i5 </sub>and b<sub>i5,d</sub>&#x2260;b<sub>i5 </sub>implies b<sub>i7,d</sub>=b<sub>i7</sub>. Hence, for a reasonably clean RNA-Seq run the probability that (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C is approximately given by the following sum</p><p id="p-0164" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>((<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2209;<i>C</i>)=<i>p</i>(<i>b</i><sub>i7</sub><i>&#x2260;b</i><sub>i7,d</sub>)+<i>p</i>(<i>b</i><sub>i5</sub><i>&#x2260;b</i><sub>i5,d</sub>) &#x2003;&#x2003;(12)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0165" num="0145">Hence, an upper threshold for the probability of barcode hopping in B<sub>i7 </sub>and B<sub>i5 </sub>is given by</p><p id="p-0166" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>b</i><sub>i7/5</sub><i>&#x2260;b</i><sub>i7/5,d</sub>)&#x2264;<i>p</i>((<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2209;<i>C</i>) &#x2003;&#x2003;(13)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0167" num="0146">Here i7/5 means that i7 and i5 can be used interchangeably. The upper bound in (13) is tight only if one of p(b<sub>i7/5</sub>&#x2260;b<sub>i7/5,d</sub>) equals zero. This means that only one barcode set B<sub>i7/5 </sub>is responsible for all the errors. In practice, however, it is more likely that both barcode sets contribute in equal measure to the observed errors and the probabilities on the left-hand side of (13) will therefore be closer to half the right-hand side of (13). For (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>equation (13) changes into</p><p id="p-0168" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>(<i>b</i><sub>i7/5</sub><i>&#x2260;b</i><sub>i7/5,d</sub>, (<i>b</i><sub>i7,d</sub><i>, b</i><sub>i5,d</sub>)&#x2208;<i>B</i><sub>i7</sub><i>&#xd7;B</i><sub>i5</sub>)&#x2264;<i>p</i>((<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2209;<i>C</i>, (<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2208;<i>B</i><sub>i7</sub><i>&#xd7;B</i><sub>i5</sub>) &#x2003;&#x2003;(14)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0169" num="0147">The left-hand side of (14) is the probability that barcode hopping takes place in b<sub>i7 </sub>or b<sub>i5</sub>, while the right-hand side of (14) can be estimated from demultiplexing an RNA-seq run with respect to all barcode combinations in B<sub>i7</sub>&#xd7;B<sub>i5 </sub>and calculating the ratio of the (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C in the tuples with (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5</sub>. Hence, a dual-index RNA-Seq run can be used to derive an upper bound for the probability of barcode hopping in a single-index experiment. The probability to observe barcode hopping in a dual-index RNA-Seq run using barcodes from C&#x2282;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>is the product of probabilities p(b<sub>i7/5</sub>&#x2260;b<sub>i7/5,d</sub>) satisfying (12). This product is maximized if p(b<sub>i7/5</sub>&#x2260;b<sub>i7/5,d</sub>)=p((b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C)/2. Hence, the probability to observe barcode hopping in a dual-index RNA-Seq run is bounded by</p><p id="p-0170" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i>((<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2260;(<i>b</i><sub>i7</sub><i>,b</i><sub>i5</sub>),(<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2208;<i>C</i>)&#x2264;&#xbc;<i>p</i>((<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2209;<i>C</i>,(<i>b</i><sub>i7,d</sub><i>,b</i><sub>i5,d</sub>)&#x2208;<i>B</i><sub>i7</sub><i>&#xd7;B</i><sub>i5</sub>)<sup>2 </sup>&#x2003;&#x2003;(15)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0171" num="0148">If demultiplexing (i.e. assignment of sequencing reads with samples or index sequences) is followed by error correction, the probability of simultaneous barcode hopping of b<sub>i7 </sub>and b<sub>i5 </sub>increases. Equation (12), where b<sub>i7/5,d </sub>signifies sequences obtained by error correction, will, therefore, not be exact. However, since the upper bound for single-index barcode hopping is rather conservative we use (14), as an upper bound also in this case. In summary, an RNA-Seq run with UCDI can be used to<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0149">1. Detect but not correct barcode hopping of a single barcode after sequencing or error correction.</li>        <li id="ul0006-0002" num="0150">2. Derive an upper bound for the probability of single-index (14) and dual-index (15) barcode hopping after sequencing or error correction. The right-hand side of (14) is derived by demultiplexing with respect to all barcode tuples in B<sub>i7</sub>&#xd7;B<sub>i5 </sub>and calculating the ratio of (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2209;C in the set of all (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5 </sub>where b<sub>i7/5,d </sub>are the i7/5 indices after sequencing or error correction.</li>    </ul>    </li></ul></p><p id="p-0172" num="0151">Preferably, the present invention is defined by the following numbered embodiments, which of course can be further combined with any aspect or embodiment or options described herein:</p><p id="p-0173" num="0152">1. A set of oligonucleotides comprising index sequences and wherein the set comprises a plurality of subsets of oligonucleotides with different index sequences, wherein the index sequences of a subset of oligonucleotides differ at least by a non-zero number of sequence changes from each other; and wherein the set comprises at least 2 hierarchical tiers of subsets, wherein index sequences of a higher tier subset are members of a lower tier subset, and wherein the index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the index sequences of a higher tier subset; and wherein the oligonucleotides are assigned to one or more subsets.</p><p id="p-0174" num="0153">2. The set of 1, wherein the index sequences of a subset contain each a truncated index sequence and the truncated index sequences of at least one subset differ at least by a non-zero number of sequence changes from each other truncated index sequence within said subset; preferably wherein the minimum number of sequence changes between truncated index sequences of a subset is larger than the minimum number of sequence changes of the index sequences in the subset minus the difference between the length of the index sequences and the truncated index sequences.</p><p id="p-0175" num="0154">3. The set of 2, wherein the truncated index sequences of a higher tier subset are members of truncated index sequences of a lower tier subset, and wherein the truncated index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the truncated index sequences of a higher tier subset.</p><p id="p-0176" num="0155">4. The set of any one of 1 to 3, wherein sequence changes are selected from nucleotide substitutions, deletions and insertions and wherein the minimum number of sequence changes corresponds to the minimum needed to change any index sequence to another index sequence.</p><p id="p-0177" num="0156">5. The set of any one of 1 to 4, wherein the sequence changes are quantified as sequence distance which is the amount of nucleotide changes or a probability of changes.</p><p id="p-0178" num="0157">6. The set of 5, wherein the amount of sequence distance is a Hamming distance, a Levenshtein distance or a Sequence-Levenshtein distance, preferably a Sequence-Levenshtein distance.</p><p id="p-0179" num="0158">7. The set of 5 wherein the probability of changes is a maximum or a sum of probabilities, preferably a sum of probabilities of nucleotide changes that transform one sequence to another.</p><p id="p-0180" num="0159">8. The set of 5 or 7, wherein the index sequences of a lower tier subset differ by a higher probability of sequence changes from each other than the index sequences of a higher tier subset, and preferably wherein in dependence on embodiment 2 the truncated index sequences of a lower tier subset differ by a higher probability of sequence changes than the truncated index sequences of a higher tier subset.</p><p id="p-0181" num="0160">9. The set of 5, wherein the probability of changes is quantified by a monotonically decreasing function of a probability, preferably a negative logarithm or a negative probability, wherein the probability is preferably estimated by a maximum or a sum of probabilities, preferably a sum of probabilities, of nucleotide changes that transform one sequence to another.</p><p id="p-0182" num="0161">10. The set of 6, wherein the Sequence-Levenshtein distance between the index sequences of a higher tier subset is greater by at least 1, preferably 2, than the Sequence-Levenshtein distance between the index sequences of a lower tier subset.</p><p id="p-0183" num="0162">11. The set of 6 or 10, wherein the Sequence-Levenshtein distance between the index sequences of the highest tier subset is at least 4.</p><p id="p-0184" num="0163">12. The set of any one of 1 to 11, wherein the index sequences have a length of at least 4, preferably at least 6, nucleotides and/or the highest tier subset comprises at least 2, preferably at least 4, different index sequences.</p><p id="p-0185" num="0164">13. The set of any one of 1 to 12, wherein the oligonucleotides are assigned to a subset by placement in a container that is labelled by a subset identifier; preferably wherein the container is a well in a well plate.</p><p id="p-0186" num="0165">14. The set of any one of 1 to 13, wherein the index sequences have a G/C content of 30% to 70%; and/or wherein the index sequences do not contain repeats of the same nucleotide of at least 3 in length; and/or wherein the index sequences of a subset have a balanced nucleotide distribution wherein the number of shared nucleotides at the same position within the index sequences between different index sequences is at most 0.5 times the number of index sequences in said subset or wherein in at least 50% of the positions of the index sequences the frequency for all index sequences of a subset for each nucleotide type is 0.5 or less.</p><p id="p-0187" num="0166">15. A method of generating a set of oligonucleotides comprising a plurality of subsets of oligonucleotides with a subset of index sequences comprising the steps of</p><p id="p-0188" num="0000">generating a first subset of oligonucleotides with index sequences with a first sequence distance to each other within the first subset, wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another,<br/>generating a second subset by including the first subset and adding further oligonucleotides with index sequences with a second sequence distance to each other within the second subset, which second sequence distance is a lower sequence distance than the first sequence distance.</p><p id="p-0189" num="0167">16. The method of 15, wherein the step of generating the first and second subset of index sequences comprises for each subset selecting a set of index sequences from a pool of different index sequences.</p><p id="p-0190" num="0168">17. The method of 15 or 16, wherein generating a first and/or second subset comprises selecting index sequences that comprise truncated index sequences and the truncated index sequences of at least one subset differ at least by a non-zero number of sequence changes, preferably differ by at least a number of sequence changes greater than 1, from each other truncated index sequence within said subset.</p><p id="p-0191" num="0169">18. The method of anyone of 15 to 17, wherein correctable sequences are generated for an index sequence of a subset wherein said correctable sequences have a sequence distance that is less than half the sequence distance between the index sequences of said subset, and wherein the correctable sequences of different index sequences in said subset do not overlap.</p><p id="p-0192" num="0170">19. The method of any one of 15 to 18, comprising generating a lower tier subset by including a higher tier subset and adding further oligonucleotides with index sequences with a lower sequence distance than for the higher tier subset to each other within the lower tier subset.</p><p id="p-0193" num="0171">20. The method of any one of 15 to 19, comprising generating a third subset by including the second subset and adding further oligonucleotides with index sequences with a third sequence distance to each other within the third subset, which third sequence distance is a lower sequence distance than the second sequence distance.</p><p id="p-0194" num="0172">21. The method of anyone of 15 to 20, wherein generating a subset comprises selecting index sequences by adding an index sequence candidate and evaluating the sequence distance of the index distance candidate to all other pre-existing index sequences in the subset; and adding the index sequence candidate to the index sequences of the subset if it fulfils a pre-set sequence distance requirement.</p><p id="p-0195" num="0173">22. The method of 21, wherein an index sequence candidate contains for at least 50% of its positions a nucleotide type of the genetic code with the smallest frequency at the respective position in the pre-existing index sequences of the subset.</p><p id="p-0196" num="0174">23. The method of 21 or 22, wherein an index sequence candidate is selected from a pool of index sequence candidates, wherein members of the pool of index sequence candidates fulfil a pre-set sequence distance requirement to each other member of the pool, and wherein an index sequence candidate of the pool is added to the index sequences of the subset, when the sum of the absolute values of the differences of the frequency of each nucleotide type of the genetic code at each position to 0.25 is the lowest for the index sequence candidate as compared to the other index sequence candidates of the pool.</p><p id="p-0197" num="0175">24. The method of 23, wherein the criterions as set forth in 22 are applied to at least 25% of the index sequence candidates that are added last to the subset.</p><p id="p-0198" num="0176">25. The method of 23 or 24, wherein the pool of index sequences has at least by a factor of 2 more members than the subset.</p><p id="p-0199" num="0177">26. The method of any one of 21 to 25, wherein in at least 50% of the positions of the index sequences the frequency for all index sequences of a subset for each nucleotide type is 0.5 or less.</p><p id="p-0200" num="0178">27. The method of any one of 21 to 26, comprising generating a plurality of subset candidates each with a given amount of members as in the methods of any one of 21 to 26 and selecting a subset candidate as subset, when said subset candidate has the lowest average over all index sequences per respective subset candidate of the sum of the absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25.</p><p id="p-0201" num="0179">28. The method of any one of 21 to 27, comprising generating a plurality of subset candidates each with a given amount of members as in the methods of any one of 21 to 27 and selecting a subset candidate as subset, wherein said subset candidate is selected by exclusion of other subset candidates,<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0180">wherein a subset candidate is excluded when in a method that comprises adding index sequence candidates from a pool of index sequence candidates to the subset candidate, and optionally further adding comparative index sequences, the subset candidate has a higher average over all its index sequences sum of absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25 as compared to another subset or subset candidate.</li>    </ul>    </li></ul></p><p id="p-0202" num="0181">29. A method of assigning sequencing reads to a sample of oligonucleotides comprising the steps of</p><p id="p-0203" num="0000">a) obtaining sample oligonucleotides from a plurality of samples,<br/>b) selecting a subset of oligonucleotide index sequences from a set according to any one of 1 to 14 or a set obtainable or as obtained from a method of anyone of 15 to 28, wherein a subset is selected over another subset based on a higher sequence distance of the index sequences to each other within the selected subset; wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another, and wherein the selected subset has at least as many different index sequences as the number of samples of step a),<br/>c) adding index sequences from said subset to each sample oligonucleotide wherein the index sequences are indicative of the sample,<br/>d) determining the sequence of the sample oligonucleotides or fragments of sample oligonucleotides and determining the index sequence,<br/>e) assigning an obtained read sequence to a sample based on the determined index sequence or based on the index sequence which has the lowest sequence distance to the determined index sequence, wherein if two or more index sequence have the same lowest distance then said obtained read is discarded; wherein optionally the sequence distance does not exceed a pre-set criterion value.</p><p id="p-0204" num="0182">30. The method of 29, wherein step b) comprises selecting oligonucleotides with index sequences from a set according to any one of 1 to 14 or a set obtainable or as obtained from a method of any one of 15 to 28, wherein a subset of oligonucleotides with the highest sequence distance of the index sequences within the subset is selected, that has at least as many different index sequences as the number of samples of step a).</p><p id="p-0205" num="0183">31. The method of 29 or 30, wherein determining a sequence of nucleotides of the index sequence comprises determining the sequence of the entire index sequence or a part thereof, wherein preferably a partial index sequence is determined in case a sequence distance of the partial index sequence to other partial index sequences within the same subset is larger than a non-zero criterion value.</p><p id="p-0206" num="0184">32. The method of 31, wherein the partial index sequence has the sequence distance properties of a truncated index sequence according to embodiment 2 or 3.</p><p id="p-0207" num="0185">The present invention is further defined by the following examples, without being limited to these embodiments of the invention.</p><heading id="h-0025" level="1">EXAMPLES</heading><heading id="h-0026" level="1">Example 1: Generating Nucleotide Balanced ff-Levenshtein-7(8,10,12) Barcode Sets</heading><p id="p-0208" num="0186">To derive the barcode sets in this section we used Search Algorithm 4 described above in Section 4.1 with the fixed-frame Levenshtein distance as sequence distance. In step 1 of the algorithm we set S=5, E=3 and n<sub>1</sub>=8, n<sub>2</sub>=10 and n<sub>3</sub>=12, resulting in an ff-Levenshtein-5(8,10,12) barcode set. We, further, chose for i=1, . . . ,5 and j=1,2,3 inter-barcode distances with d<sub>1,1</sub>=5, d<sub>i+1,1</sub>=d<sub>i,1</sub>&#x2212;1 and d<sub>i,j+1</sub>=d<sub>i,j</sub>+1 and error-correction distances f<sub>i,j</sub>=floor((d<sub>i,j</sub>&#x2212;1)/2), where floor(x) returns the highest integer smaller than x. These inter-barcode and error-correction distances can be found in Table 1. The set of potential barcodes P in Search Algorithm 4 was required to fulfill P&#x2260;&#x2205;. Hence, the first sequence satisfying the distance requirements in step 4 was added to the barcode set in step 6. Since the fixed-frame Levenshtein distance and the positional nucleotide distribution is independent of the sequence alphabet, we initially generated barcode sets from the alphabet 0, 1, 2, 3. To avoid barcode sequences consisting entirely of a single nucleotide as well as similar sequences we initialized our barcode set with B<sub>1</sub>={(0, . . . ,0), (1, . . . ,1), (2, . . . ,2), (3, . . . ,3)}. After search completion these sequences were removed from the barcode set. This resulted in nested barcode sets EXT<sup>j</sup>(B&#x2032;<sub>k</sub>) from which we selected nested barcode sets EXT<sup>j</sup>(B<sub>i</sub>) with balanced nucleotide distribution and subsets B<sub>i </sub>with sizes 4, 8, 16, 24, 96, 768, 9216, hence producing an ff-Levenshtein-7 (8,10,12) barcode set. Selection was performed using the algorithm in Section 4.3. The order in which elements of the complement C<sup>c </sup>were processed in step 4 of Search Algorithm 4 was chosen randomly. Thus, repetitions of the algorithm produced different results. In this manner we generated 245 barcode sets from which the final set was selected. Among the EXT<sup>j</sup>(B<sub>i</sub>) with |B<sub>1</sub>|&#x2265;4 we chose the nested barcode set whose nucleotide distributions &#x3b4;(C<sub>i</sub>,p,n) had minimal distance D(&#x3b4;(C<sub>i</sub>) from the uniform positional nucleotide distribution. As before, we set C<sub>i</sub>=EXT<sup>E</sup>(B<sub>i</sub>). In a final step we considered pairs of distinct mappings from alphabet 0,1,2,3 to A,C,G,T, producing pairs of barcode sets, and calculated the melting-temperature of all homo- and di-mers. In the end we selected the pair of barcode sets with the smallest melting temperatures and chose one of the barcode sets as &#x201c;i7 indices&#x201d; and the other as &#x201c;i5 indices&#x201d;. The i5 and i7 notation refers to dual indexes added to separated locations of an oligonucleotide that is to be labelled (see <figref idref="DRAWINGS">FIG. <b>7</b></figref> and ref. [5]). The number of elements and the inter-barcode distance of the nested subsets in the final ff-Levenshtein-7 (8,10,12) set are given in Table 1 for nested sequences with 8, 10 and 12 nucleotides in length. Lengths 8 and 10 are nested in the larger sequence(s).</p><p id="p-0209" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Size and inter-barcode distance of subsets</entry></row><row><entry>in ff-Leveshtein-7(8, 10, 12).</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="14pt" align="center"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="7pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="42pt" align="center"/><colspec colname="6" colwidth="42pt" align="center"/><colspec colname="7" colwidth="42pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry/><entry/><entry>8 nt</entry><entry>10 nt</entry><entry>12 nt</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="14pt" align="center"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="7pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="14pt" align="center"/><colspec colname="6" colwidth="28pt" align="center"/><colspec colname="7" colwidth="14pt" align="center"/><colspec colname="8" colwidth="28pt" align="center"/><colspec colname="9" colwidth="14pt" align="center"/><colspec colname="10" colwidth="28pt" align="center"/><tbody valign="top"><row><entry>i</entry><entry>|B<sub>i</sub>|</entry><entry>j</entry><entry>|B&#x2032;<sub>j</sub>|</entry><entry>d<sub>i,3</sub></entry><entry>f<sub>i,3</sub></entry><entry>d<sub>i,2</sub></entry><entry>f<sub>i,2</sub></entry><entry>d<sub>i,1</sub></entry><entry>f<sub>i,1</sub></entry></row><row><entry namest="1" nameend="10" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="14pt" align="center"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="7pt" align="center"/><colspec colname="4" colwidth="35pt" align="char" char="."/><colspec colname="5" colwidth="14pt" align="center"/><colspec colname="6" colwidth="28pt" align="center"/><colspec colname="7" colwidth="14pt" align="center"/><colspec colname="8" colwidth="28pt" align="center"/><colspec colname="9" colwidth="14pt" align="center"/><colspec colname="10" colwidth="28pt" align="center"/><tbody valign="top"><row><entry>1</entry><entry>4</entry><entry>1</entry><entry>6</entry><entry>5</entry><entry>2</entry><entry>6</entry><entry>2</entry><entry>7</entry><entry>3</entry></row><row><entry>2</entry><entry>8</entry><entry>2</entry><entry>25</entry><entry>4</entry><entry>1</entry><entry>5</entry><entry>2</entry><entry>6</entry><entry>2</entry></row><row><entry>3</entry><entry>16</entry><entry>2</entry><entry>25</entry><entry>4</entry><entry>1</entry><entry>5</entry><entry>2</entry><entry>6</entry><entry>2</entry></row><row><entry>4</entry><entry>24</entry><entry>2</entry><entry>25</entry><entry>4</entry><entry>1</entry><entry>5</entry><entry>2</entry><entry>6</entry><entry>2</entry></row><row><entry>5</entry><entry>96</entry><entry>3</entry><entry>104</entry><entry>3</entry><entry>1</entry><entry>4</entry><entry>1</entry><entry>5</entry><entry>2</entry></row><row><entry>6</entry><entry>768</entry><entry>4</entry><entry>835</entry><entry>2</entry><entry>0</entry><entry>3</entry><entry>1</entry><entry>4</entry><entry>1</entry></row><row><entry>7</entry><entry>9216</entry><entry>5</entry><entry>9545</entry><entry>1</entry><entry>0</entry><entry>2</entry><entry>0</entry><entry>3</entry><entry>1</entry></row><row><entry namest="1" nameend="10" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0210" num="0187">The 104 sequences of the i7 and i5 indices in B&#x2032;<sub>3 </sub>of length 12 are contained in the sequence listing. SEQ ID NO: 1 to 104 are the i7 index sequences and SEQ ID NO: 105 to 208 are the i5 index sequences. The association between sequence numbers and barcode subsets B<sub>i</sub>, B&#x2032;<sub>j </sub>is given in Table 2. This clearly shows the nested structure of the subsets. Subsequences in these indices are the first 8 and 10 nucleotides, which exhibits the nested structure of subsequences in ff-Levenshtein-7 (8,10,12).</p><p id="p-0211" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Sequence numbers of barcodes in subsets.</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="77pt" align="left"/><tbody valign="top"><row><entry>i</entry><entry>B<sub>i</sub></entry><entry>j</entry><entry>B&#x2032;<sub>j</sub></entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><tbody valign="top"><row><entry>For set i7</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="char" char="."/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="35pt" align="char" char="."/><colspec colname="4" colwidth="77pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry>SEQ ID NO: 1-4</entry><entry>1</entry><entry>SEQ ID NO: 1-4, 9, 10</entry></row><row><entry>2</entry><entry>SEQ ID NO: 1-8</entry><entry>2</entry><entry>SEQ ID NO: 1-25</entry></row><row><entry>3</entry><entry>SEQ ID NO: 1-16</entry><entry>2</entry><entry>SEQ ID NO: 1-25</entry></row><row><entry>4</entry><entry>SEQ ID NO: 1-24</entry><entry>2</entry><entry>SEQ ID NO: 1-25</entry></row><row><entry>5</entry><entry>SEQ ID NO: 1-96</entry><entry>3</entry><entry>SEQ ID NO: 1-104</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><tbody valign="top"><row><entry>For set i5</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="char" char="."/><colspec colname="2" colwidth="70pt" align="left"/><colspec colname="3" colwidth="35pt" align="char" char="."/><colspec colname="4" colwidth="77pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry>SEQ ID NO: </entry><entry>1</entry><entry>SEQ ID NO: 105-108, </entry></row><row><entry/><entry>105-108</entry><entry/><entry>113, 114</entry></row><row><entry>2</entry><entry>SEQ ID NO: 105-112</entry><entry>2</entry><entry>SEQ ID NO: 105-129</entry></row><row><entry>3</entry><entry>SEQ ID NO: 105-120</entry><entry>2</entry><entry>SEQ ID NO: 105-129</entry></row><row><entry>4</entry><entry>SEQ ID NO: 105-128</entry><entry>2</entry><entry>SEQ ID NO: 105-129</entry></row><row><entry>5</entry><entry>SEQ ID NO: 105-200</entry><entry>3</entry><entry>SEQ ID NO: 105-208</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0212" num="0188"><figref idref="DRAWINGS">FIGS. <b>7</b>, <b>8</b>, <b>9</b> and <b>10</b></figref> show the positional nucleotide distribution for B<sub>1</sub>, B<sub>2</sub>, B<sub>3 </sub>and B<sub>4</sub>. Here, the x-axis represents the barcode position p and the y-axis represents &#x3b4;(C<sub>i</sub>,p,n), the proportion of nucleotide n at position p. Each of the 4 lines in these figures represents the proportion &#x3b4;(C<sub>i</sub>,p,n) for one of the 4 nucleotides n. For B<sub>1</sub>, which contains 4 barcodes, &#x3b4;(C<sub>i</sub>,p,n) is uniform if at each position each nucleotide occurs in exactly one barcode. If &#x3b4;(C<sub>1</sub>,p,n) is not uniform in position p then at least one of the nucleotides n is not contained in any of the 4 barcodes at position p and, therefore, &#x3b4;(C<sub>1</sub>p,n)=0. Hence, <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows that &#x3b4;(C<sub>1</sub>p,n) is not uniform at 8 positions. In these positions &#x3b4;(C<sub>1</sub>p,n)=0 only for a single nucleotide n and the other nucleotides are, therefore, present. This is sufficient to obtain good quality scores on two-color Illumina sequencers which require the presence of A or C and, additionally, G or T [5] at each position. <figref idref="DRAWINGS">FIGS. <b>8</b>, <b>9</b> and <b>10</b></figref> show that for B<sub>2</sub>, B<sub>3 </sub>and B<sub>4 </sub>all nucleotides are present at all positions, since lines &#x3b4;(C<sub>1</sub>p,n) in these graphics are never zero. For B<sub>2</sub>, which contains 8 barcodes, <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows that at 8 positions one nucleotide occurs only once. For B<sub>3</sub>, with |B<sub>3</sub>|=16, <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a single position where one nucleotide occurs only twice. <figref idref="DRAWINGS">FIG. <b>11</b></figref> shows for B<sub>4</sub>, with |B<sub>4</sub>|=24, two positions with one nucleotide occurring four times and another position with two nucleotides occurring four times. These are the positions p where &#x3b4;(C<sub>1</sub>,p,n) deviates most strongly from the uniform distribution. Overall, this shows that &#x3b4;(C<sub>i</sub>,p,n) approaches the uniform distribution with increasing i.</p><heading id="h-0027" level="1">Example 2: Cross-Contamination in RNA-Seq Runs with Hamming(6) and ff-Levenshtein-7(8,10,12) Barcode Sets</heading><p id="p-0213" num="0189">For the experiments in this section we synthesized the 96 barcodes of length 12 in B<sub>5 </sub>of the nucleotide balanced ff-Levenshtein-7 (8,10.12) barcode set in Example 1. We further synthesized 96 barcodes of length 6 which had a minimal Hamming distance of 3. Hence, this set can correct one substitution. We synthesized both barcode sets as i5 and i7 indices and used them as unique dual indices (UDIs) to label 96 samples of commercially available universal human reference RNA (UHRR) in two dual-index RNA-Seq runs. UDIs are UCDIs with the additional requirement that b<sub>i7</sub>&#x2260;b<sub>i5</sub>. Subsequently, we demultiplexed each run with respect to the entire 96 i5/i7 barcode tuples of the respective UDIs and estimated barcode-hopping rates as well as rates of cross-contamination after error correction. We further calculated the purity, i.e. the fraction of (b<sub>i7,d</sub>,b<sub>i5,d</sub>)&#x2208;B<sub>i7</sub>&#xd7;B<sub>i5</sub>. In the case of the ff-Levenshtein-7(8,10,12) set we performed this analysis for all barcode lengths 8, 10 and 12. The results can be found in Table 3. This shows that without error correction the error-rate for B<sub>5 </sub>of ff-Levenshtein-7(8,10,12) is almost identical for length 8, 10 and 12 at 0.01%, while purity is highest for length 8, at 93.028%, and lowest for length 12, at 90.913%. The decrease in purity with increasing barcode length is due to the fact that longer sequences have a higher chance to contain an error. In comparison to ff-Levenshtein-7 (8,10,12), for Hamming(6) the error-rate is considerably higher at 0.244%. This increase over ff-Levenshtein-7(8,10,12) by a factor of 24 is not just the result of a shorter barcode length but also due to the different distance used for the barcode design. In comparison to the ff-Levenshtein distance, barcode sets designed with the Hamming distance do not guarantee a sensible inter-barcode distance after insertions and deletions. This can also be seen when correcting a single error for Hamming(6), which increases the error rate by a factor of around 7 to 1.5%. In comparison, correcting a single error for B<sub>5 </sub>of ff-Levenshtein-7(8,10,12) the error rate at length 12 remains unchanged at 0.01%, while purity increases to 97.013%. For ff-Levenshtein-7(8,10,12) and length 10 the error rate increases slightly, while for ff-Levenshtein-7(8,10,12) and length 8 the error rate increases by a factor of 10 to 0.1%. This shows that if one error is to be corrected using a barcode length of at least 10 is advisable for ff-Levenshtein-7(8,10,12). On the other hand, if a barcode length of 12 has to be chosen it is advisable to perform error correction since this will increase purity to the same level as for barcode lengths 8 and 10. Correcting 2 errors, which is only possible for ff-Levenshtein(12), leads only to a small increase in purity at the expense of a more then two-fold increase in error rate to 0.024%. Hence, correcting two errors with ff-Levenshtein-7(8,10,12) and length 12 is not advisable. Overall, the results in the experiments in Table 3 show that cross-contamination for B<sub>5 </sub>of ff-Levenshtein-7(8,10,12) is considerably lower than for Hamming(6) while purity increases. The results, further, show that all barcode lengths of ff-Levenshtein-7(8,10,12) can be used for multiplexing samples in an RNA-seq run.</p><p id="p-0214" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Error and purity (%) for Hamming(6) (H(6)) and ff-Levenshtein-7(8, 10, 12)</entry></row><row><entry>with length 8 (ff-L(8)), 10 (ff-L(10)) and 12 (ff-L(12))</entry></row><row><entry>without error correction and with correction of 1 error</entry></row><row><entry>(1c) and 2 errors (2c).</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="21pt" align="center"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="28pt" align="center"/><colspec colname="4" colwidth="28pt" align="center"/><colspec colname="5" colwidth="28pt" align="center"/><colspec colname="6" colwidth="28pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><colspec colname="8" colwidth="28pt" align="center"/><colspec colname="9" colwidth="28pt" align="center"/><colspec colname="10" colwidth="28pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry>H(6)</entry><entry/><entry/><entry/><entry>ff-L(8)</entry><entry>ff-L(10)</entry><entry>ff-L(12)</entry><entry>ff-L(12)</entry></row><row><entry/><entry>H(6)</entry><entry>1c</entry><entry>ff-L(8)</entry><entry>ff-L(10)</entry><entry>ff-L(12)</entry><entry>1c</entry><entry>1c</entry><entry>1c</entry><entry>2c</entry></row><row><entry namest="1" nameend="10" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="10"><colspec colname="1" colwidth="21pt" align="center"/><colspec colname="2" colwidth="28pt" align="char" char="."/><colspec colname="3" colwidth="28pt" align="char" char="."/><colspec colname="4" colwidth="28pt" align="char" char="."/><colspec colname="5" colwidth="28pt" align="char" char="."/><colspec colname="6" colwidth="28pt" align="char" char="."/><colspec colname="7" colwidth="28pt" align="char" char="."/><colspec colname="8" colwidth="28pt" align="char" char="."/><colspec colname="9" colwidth="28pt" align="char" char="."/><colspec colname="10" colwidth="28pt" align="char" char="."/><tbody valign="top"><row><entry>Error</entry><entry>0.244</entry><entry>1.564</entry><entry>0.010</entry><entry>0.009</entry><entry>0.009</entry><entry>0.110</entry><entry>0.015</entry><entry>0.010</entry><entry>0.024</entry></row><row><entry>Purity</entry><entry>90.025</entry><entry>95.711</entry><entry>93.028</entry><entry>91.953</entry><entry>90.913</entry><entry>97.590</entry><entry>97.251</entry><entry>97.013</entry><entry>97.768</entry></row><row><entry namest="1" nameend="10" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0028" level="1">Example 3: Quantifying Various Types of Low-Level Cross-Contamination with ff-Levenshtein-5(8,10,12)</heading><p id="p-0215" num="0190">The experiments in this section evaluated cross-contamination at different stages of index synthesis, library preparation and sequencing. To measure the low levels of cross-contamination expected, we chose 12 barcodes from the 25 barcodes in B<sub>2</sub>, of ff-Levenshtein-5(8,10,12) in Example 1. The selected barcode set contained all barcodes in B<sub>1</sub>, and, as a result, 6 barcodes had an ff-Levenshtein distance of 7 for barcode length 12, while all 12 barcodes had an ff-Levenshtein distance of 6. We divided this barcode set into 3 sets of 4 barcodes which were synthesized by 3 oligo-nucleotide synthesis providers as i5 and i7 barcodes. We used the barcodes as unique dual indices with b<sub>i7</sub>=b<sub>i5</sub>. Such sets of unique dual-indices are also called unique dual-matched indices (UDMIs) [5]. In our experiment we labeled 9 samples of the UHRR in Section 3.2 with 3 UDMIs of each synthesis provider. The remaining 3 UDMIs, one for each provider, were never touched. This experimental design allows to estimate cross-contamination at the synthesis provider site, since detection of a left-out barcode after demultiplexing shows that this barcode ended up in the wrong tube before delivery. As in Example 2, we demultiplexed with respect to all tuples of the 96 barcodes in B<sub>5 </sub>of ff-Levenshtein-7(8,10,12). This gave us a count matrix with rows and columns labeled by b<sub>i7 </sub>and b<sub>i5</sub>. Different types of cross-contamination correspond to different regions in this matrix, which are visualized in <figref idref="DRAWINGS">FIG. <b>12</b></figref>. Elements in region C correspond to barcode tuples (b<sub>i7</sub>,b<sub>i5</sub>), where at least one of b<sub>i7</sub>, b<sub>i5 </sub>has not appeared at any stage of the experiment. Counts in region C, therefore, quantify the frequency with which the RNA-Seq run randomly generates an i5 or i7 index in barcode set B<sub>5</sub>. Region B contains barcode tuples (b<sub>i7</sub>, b<sub>i5</sub>) where both b<sub>i7 </sub>and b<sub>i5 </sub>were synthesized but where at least one of b<sub>i7</sub>, b<sub>i5 </sub>was never used in the experiment. Counts in region B, therefore, quantify the cumulative random cross-contamination and the cross-contamination at the synthesis provider site. Region A contains tuples (b<sub>i7</sub>,b<sub>i5</sub>) where both b<sub>i7 </sub>and b<sub>i5 </sub>were synthesized and used in the experiment. Off-diagonal elements in region A, therefore, quantify the cumulative random, site dependent and experimental cross-contamination. Experimental cross-contamination contains, amongst others, cross-contamination due to handling errors, laboratory conditions and provider dependent experimental errors. The latter can, for instance, be the result of the instability of synthesized sequences during sequencing. Differences in synthesis provider dependent experimental error are reflected by differences in the off-diagonal counts in regions P1, P2 and P3, which contain barcode tuples (b<sub>i7</sub>, b<sub>i5</sub>) generated by provider 1, 2 and 3. From the regions in the count matrix in <figref idref="DRAWINGS">FIG. <b>12</b></figref> we derived the amounts of cross-contamination in Table 4. Due to small levels of cross-contamination, values in Table 4 are given in parts per million. The rows in Table 4 are labeled with the region in which the cross-contamination was measured. Row label &#x201c;C diag&#x201d; stands for the amount of cross-contamination in the diagonal of region &#x201c;C&#x201d;. Label &#x201c;A-nonP&#x201d; stands for the provider independent experimental cross-contamination. We estimate the latter by subtracting the provider dependent from the overall experimental cross-contamination. To avoid underestimation of the provider independent experimental cross-contamination we assume that the smallest cross-contamination measured for any provider is entirely the result of provider independent factors. On the other hand, we assume that differences between the provider dependent experimental cross-contamination are entirely the result of provider dependent factors. In Table 4, therefore, we calculate the provider independent experimental cross-contamination as A&#x2212;nonP=A&#x2212;(P1+P3&#x2212;2P2).</p><p id="p-0216" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Amount (parts per million) of different types</entry></row><row><entry>of synthesis provider dependent cross-contamination.</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="63pt" align="center"/><tbody valign="top"><row><entry/><entry>ff-L (8)</entry><entry>ff-L (10)</entry><entry>ff-L (12)</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="77pt" align="char" char="."/><colspec colname="3" colwidth="42pt" align="char" char="."/><colspec colname="4" colwidth="63pt" align="char" char="."/><tbody valign="top"><row><entry>C</entry><entry>52.565</entry><entry>0.072</entry><entry>0.000</entry></row><row><entry>C diag</entry><entry>16.741</entry><entry>0.000</entry><entry>0.000</entry></row><row><entry>B</entry><entry>0.019</entry><entry>0.003</entry><entry>0.003</entry></row><row><entry>A</entry><entry>18.840</entry><entry>14.599</entry><entry>11.904</entry></row><row><entry>P1</entry><entry>1.367</entry><entry>1.197</entry><entry>1.095</entry></row><row><entry>P2</entry><entry>0.382</entry><entry>0.339</entry><entry>0.283</entry></row><row><entry>P3</entry><entry>5.256</entry><entry>3.857</entry><entry>3.122</entry></row><row><entry>A-nonP</entry><entry>12.981</entry><entry>10.223</entry><entry>8.253</entry></row><row><entry>Total</entry><entry>71.424</entry><entry>14.674</entry><entry>11.907</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0217" num="0191">Table 4 shows that the total cross-contamination increases significantly when reducing the barcode length to 8. For barcode length 10 and 12 overall cross-contamination is smaller by a factor of around 5 and 6, respectively. The main contribution to this increase comes from the large random error (C) for barcode length 8. Table 4 shows, further, that the overall cross-contamination at the provider site (B) is negligible. However, experimental cross-contamination differs noticeably between providers. In comparison to provider 2 (P2), experimental cross-contamination for provider 1 (P1) and 3 (P3) is higher by a factor of around 4 and 11, respectively. The provider independent experimental cross-contamination (A-nonP) is, for all barcode lengths, close to 69% of the total minus the random cross-contamination indicating that 69% of non-random cross-contamination in this experiment is contributed by provider independent sources.</p><p id="p-0218" num="0192">Overall, the results in this example show that the ff-Levenshtein-5(8,10,12) barcode set can be used with barcode lengths 8, 10 and 12 to quantify low levels of cross-contamination. This is a necessary prerequisite for identifying and reducing different sources of cross-contamination.</p><heading id="h-0029" level="1">References</heading><p id="p-0219" num="0193">[1] Buschmann and Bystrykh. <i>BMC Bioinformatics, </i>14:272, 2013</p><p id="p-0220" num="0194">[2] Conway and Sloane. <i>IEEE Trans. Inf. Theor., </i>32(3):337-348, 1986</p><p id="p-0221" num="0195">[3] Hawkins et al. <i>PNAS, </i>115(27): E6217-E6226, 2018</p><p id="p-0222" num="0196">[4] WO 2018/204423 A1</p><p id="p-0223" num="0197">[5] MacConaill et al. <i>BMC Genomics, </i>19(1):30-30, 2018</p><p id="p-0224" num="0198">[6] WO 2018/136248 A1</p><p id="p-0225" num="0199">[7] WO 2018/204423 A1</p><p id="p-0226" num="0200">[8] WO 2011/100617 A1</p><p id="p-0227" num="0201">All references are incorporated herein by reference.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-sequence-list-doc id="SEQLST-1"><sequence-list file="US20230005570A1-20230105-S00001.XML" carriers="internal-electronic" seq-file-type="ST.25"/></us-sequence-list-doc><us-chemistry idref="CHEM-US-00001" cdx-file="US20230005570A1-20230105-C00001.CDX" mol-file="US20230005570A1-20230105-C00001.MOL"/><us-math idrefs="MATH-US-00001" nb-file="US20230005570A1-20230105-M00001.NB"><img id="EMI-M00001" he="12.36mm" wi="76.20mm" file="US20230005570A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230005570A1-20230105-M00002.NB"><img id="EMI-M00002" he="12.36mm" wi="76.20mm" file="US20230005570A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230005570A1-20230105-M00003.NB"><img id="EMI-M00003" he="9.91mm" wi="76.20mm" file="US20230005570A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230005570A1-20230105-M00004.NB"><img id="EMI-M00004" he="9.91mm" wi="76.20mm" file="US20230005570A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230005570A1-20230105-M00005.NB"><img id="EMI-M00005" he="9.91mm" wi="76.20mm" file="US20230005570A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A set of oligonucleotides comprising index sequences and wherein the set comprises a plurality of subsets of oligonucleotides with different index sequences,<claim-text>wherein the index sequences of a subset of oligonucleotides differ at least by a non-zero number of sequence changes from each other;</claim-text><claim-text>wherein the set comprises at least 2 hierarchical tiers of subsets, wherein index sequences of a higher tier subset are members of a lower tier subset and the lower tier subset contains more index sequences than the higher tier subset, and wherein the index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the index sequences of a higher tier subset; and</claim-text><claim-text>wherein the oligonucleotides are assigned to one or more subsets.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The set of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the index sequences of a subset contain each a truncated index sequence, which contains a truncation of an index sequence of the same subset, and the truncated index sequences of at least one subset differ at least by a non-zero number of sequence changes from each other truncated index sequence within said subset;</claim-text><claim-text>preferably wherein the minimum number of sequence changes between truncated index sequences of a subset is larger than the minimum number of sequence changes of the index sequences in the subset minus the difference between the length of the index sequences and the truncated index sequences.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The set of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the truncated index sequences of a higher tier subset are members of truncated index sequences of a lower tier subset, and wherein the truncated index sequences of a lower tier subset differ by a lower minimum number of sequence changes from each other than the truncated index sequences of a higher tier subset.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The set of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein sequence changes are selected from nucleotide substitutions, deletions and insertions and wherein the minimum number of sequence changes corresponds to the minimum needed to change any index sequence to another index sequence.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The set of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the sequence changes are quantified as sequence distance which is the amount of nucleotide changes or a probability of changes; preferably wherein the amount of sequence distance is a Hamming distance, a Levenshtein distance or a Sequence-Levenshtein distance, preferably a Sequence-Levenshtein distance; or preferably wherein the probability of changes is a maximum or a sum of probabilities, such as a sum of probabilities of nucleotide changes that transform one sequence to another.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The set of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the sequence changes are quantified as Sequence-Levenshtein distance and the Sequence-Levenshtein distance between the index sequences of the highest tier subset is at least 4.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The set of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the index sequences have a length of at least 4 nucleotides and/or the highest tier subset comprises at least 2 different index sequences.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The set of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the oligonucleotides are assigned to a subset by placement in a container that is labelled by a subset identifier; preferably wherein the container is a well in a well plate.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The set of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the index sequences have a G/C content of 30% to 70%; and/or wherein the index sequences do not contain repeats of the same nucleotide of at least 3 in length; and/or wherein the index sequences of a subset have a balanced nucleotide distribution wherein the number of shared nucleotides at the same position within the index sequences between different index sequences is at most 0.5 times the number of index sequences in said subset or wherein in at least 50% of the positions of the index sequences the frequency for all index sequences of a subset for each nucleotide type is 0.5 or less.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method of generating a set of oligonucleotides comprising a plurality of subsets of oligonucleotides with a subset of index sequences comprising the steps of:<claim-text>generating a first subset of oligonucleotides with index sequences with a first sequence distance to each other within the first subset, wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another, and</claim-text><claim-text>generating a second subset by including the first subset and adding further oligonucleotides with index sequences with a second sequence distance to each other within the second subset, which second sequence distance is a lower sequence distance than the first sequence distance, whereby the second subset comprises oligonucleotides with index sequences that are not part of the first subset</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein generating a first and/or second subset comprises selecting index sequences that comprise truncated index sequences and the truncated index sequences of at least one subset differ at least by a non-zero number of sequence changes from each other truncated index sequence within said subset.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein generating a subset comprises selecting index sequences by adding an index sequence candidate and evaluating the sequence distance of the index distance candidate to all other pre-existing index sequences in the subset; and adding the index sequence candidate to the index sequences of the subset if it fulfils a pre-set sequence distance requirement.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein an index sequence candidate is selected from a pool of index sequence candidates, wherein members of the pool of index sequence candidates fulfill a pre-set sequence distance requirement to each other member of the pool, and wherein an index sequence candidate of the pool is added to the index sequences of the subset, when the sum of the absolute values of the differences of the frequency of each nucleotide type of the genetic code at each position to 0.25 is the lowest for the index sequence candidate as compared to the other index sequence candidates of the pool.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, comprising:<claim-text>generating a plurality of subset candidates each with a given amount of members and selecting a subset candidate as subset, when said subset candidate has the lowest average over all index sequences per respective subset candidate of the sum of the absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25; or</claim-text><claim-text>comprising generating a plurality of subset candidates each with a given amount of members and selecting a subset candidate as subset, wherein said subset candidate is selected by exclusion of other subset candidates,<claim-text>wherein a subset candidate is excluded when in a method that comprises adding index sequence candidates from a pool of index sequence candidates to the subset candidate, and optionally further adding comparative index sequences, the subset candidate has a higher average over all its index sequences sum of absolute values of differences of the frequency of each nucleotide type of the genetic code at each position to 0.25 as compared to another subset or subset candidate.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A method of assigning sequencing reads to a sample of oligonucleotides comprising the steps of<claim-text>a) obtaining sample oligonucleotides from a plurality of samples,</claim-text><claim-text>b) selecting a subset of oligonucleotide index sequences from a set according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a subset is selected over another subset based on a higher sequence distance of the index sequences to each other within the selected subset;</claim-text></claim-text><claim-text>wherein a sequence distance is a quantified amount of sequence changes that transforms one sequence into another or a monotonically decreasing function of a probability of sequence changes that transforms one sequence into another, and wherein the selected subset has at least as many different index sequences as the number of samples of step a),<claim-text>c) adding index sequences from said subset to each sample oligonucleotide wherein the index sequences are indicative of the sample,</claim-text><claim-text>d) determining the sequence of the sample oligonucleotides or fragments of sample oligonucleotides and determining the index sequence, and</claim-text><claim-text>e) assigning an obtained read sequence to a sample based on the determined index sequence or based on the index sequence which has the lowest sequence distance to the determined index sequence, wherein if two or more index sequence have the same lowest distance then said obtained read is discarded; wherein optionally the sequence distance does not exceed a pre-set criterion value.</claim-text></claim-text></claim></claims></us-patent-application>