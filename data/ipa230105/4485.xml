<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004486A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004486</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17856199</doc-number><date>20220701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>36</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3688</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3692</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>3664</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SOFTWARE TESTING USING MACHINE LEARNING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63218483</doc-number><date>20210705</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>DataRobot, Inc.</orgname><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Drozhak</last-name><first-name>Borys</first-name><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Baliuk</last-name><first-name>Ievgenii</first-name><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Burke</last-name><first-name>Dustin</first-name><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>DataRobot, Inc.</orgname><role>02</role><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The system can identify data stored in repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application. The system can determine, based on the data and using machine learning with historical data associated with applications tested or deployed to test performance of the version, and without execution of the tests, a score for each of a plurality of tests configured to test performance of the version of the application. The system can select, based on the scores, a subset of the tests to execute, and provide an indication of the selected subset of the tests to cause execution of the subset of the tests to evaluate performance of the version of the application prior to deployment of the version of the application.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="101.01mm" wi="158.75mm" file="US20230004486A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="224.79mm" wi="173.74mm" orientation="landscape" file="US20230004486A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="255.86mm" wi="185.00mm" orientation="landscape" file="US20230004486A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="236.30mm" wi="84.41mm" orientation="landscape" file="US20230004486A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="263.06mm" wi="134.54mm" orientation="landscape" file="US20230004486A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="251.88mm" wi="175.51mm" orientation="landscape" file="US20230004486A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="265.43mm" wi="192.11mm" file="US20230004486A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="229.53mm" wi="83.48mm" orientation="landscape" file="US20230004486A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="217.09mm" wi="149.94mm" orientation="landscape" file="US20230004486A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="218.78mm" wi="164.93mm" orientation="landscape" file="US20230004486A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCES TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims the benefit of priority under 35 U.S.C. &#xa7; 119 to U.S. Provisional Patent Application Ser. No. 63/218,483, entitled &#x201c;SOFTWARE TESTING SYSTEMS AND METHODS,&#x201d; filed Jul. 5, 2021, the contents of such application being hereby incorporated by reference in its entirety and for all purposes as if completely and fully set forth herein.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure generally relates to machine learning and data analytics. Portions of the disclosure relate specifically to the application of improved software testing systems and methods to the software development life cycle (SDLC).</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Software failures are a significant problem for many software users and providers, and for the economy as a whole. Software failures cost the economy US$1.7 trillion in financial losses. Software testing has been important as it not only improves product quality but also accounts for 60% of the total software development cost.</p><heading id="h-0004" level="1">BRIEF SUMMARY OF THE DISCLOSURE</heading><p id="p-0005" num="0004">This technical solution is directed at least to an adaptive, artificial intelligence (AI)-driven tool to predict the success or failure of individual tests in a suite of tests available for regression testing. Aspects of this technical solution may select the tests to be performed in response to a &#x201c;software development unit of request&#x201d; (e.g., &#x201c;pull request&#x201d; or &#x201c;PR&#x201d;) based on historical data, which may include historical pull requests and the results of previous runs of specific tests. Aspects of this technical solution may include a module (e.g., an adaptive test learner module) interposed between the software testing and deployment modules in a SDLC to reduce software deployment cycle times and testing costs while maintaining high product quality. The adaptive test learner may also inform project planners of quick, easy-to-implement, and/or low cost features that may aid decision makers on the selection of new features to implement. This technical solution can provide technical improvements including at least to 1) predict whether a test executed under a set of specific constraints will succeed with confidence; 2) reduce the human effort involved in regression testing, relative to systems in which humans create test selection rules or manually select tests to run; 3) improve the accuracy of test selection by using advanced predictive analytics rather than rule-based test selection; 4) provide recommendations of &#x201c;quick win&#x201d; features (features that were quick and less costly to implement and test) to Project Managers and Planners; and 5) adapt over time by continuously learning using automatic model retraining and feature drift detection.</p><p id="p-0006" num="0005">At least one aspect is directed to a system. The system can include a data processing system. The data processing system can include one or more processors, coupled to memory. The system can receive a request to test performance of a version of an application. The data processing system can identify, responsive to the request, data stored in one or more repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application. The data processing system can determine, based on the data and via a model trained using machine learning with historical data associated with one or more applications tested or deployed before receipt of the request to test performance of the version, and without execution of the plurality of tests, a score for each of a plurality of tests configured to test performance of the version of the application. The data processing system can select, based at least in part on the score for each of the plurality of tests, a subset of the plurality of tests to execute. The data processing system can provide an indication of the selected subset of the plurality of tests to cause execution of the subset of the plurality of tests to evaluate performance of the version of the application prior to deployment of the version of the application.</p><p id="p-0007" num="0006">At least one aspect is directed to a method. The method can include receiving, by a data processing system with memory and one or more processors, a request to test performance of a version of an application. The method can include identifying, by the data processing system, responsive to the request, data stored in one or more repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application. The method can include determining, by the data processing system, based on the data and via a model trained using machine learning with historical data associated with one or more applications tested or deployed before receipt of the request to test performance of the version, and without execution of the plurality of tests, a score for each of a plurality of tests configured to test performance of the version of the application. The method can include selecting, by the data processing system based at least in part on the score for each of the plurality of tests, a subset of the plurality of tests to execute. The method can include providing, by the data processing system, an indication of the selected subset of the plurality of tests to cause execution of the subset of the plurality of tests to evaluate performance of the version of the application prior to deployment of the version of the application.</p><p id="p-0008" num="0007">At least one aspect is directed to a non-transitory computer-readable medium storing instructions that can be executed by one or more processors, the cause the one or more processors. The one or more processors can receive a request to test performance of a version of an application. The one or more processors can identify, responsive to the request, data stored in one or more repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application. The one or more processors can determine, based on the data and via a model trained using machine learning with historical data associated with one or more applications tested or deployed before receipt of the request to test performance of the version, and without execution of the plurality of tests, a score for each of a plurality of tests configured to test performance of the version of the application. The one or more processors can select, based at least in part on the score for each of the plurality of tests, a subset of the plurality of tests to execute. The one or more processors can provide an indication of the selected subset of the plurality of tests to cause execution of the subset of the plurality of tests to evaluate performance of the version of the application prior to deployment of the version of the application.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The accompanying figures, which are included as part of the present specification, illustrate the presently preferred embodiments and together with the general description given above and the detailed description of the preferred embodiments given below serve to explain and teach the principles described herein.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a block diagram of an exemplary software development life cycle (SDLC) for a software application.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a block diagram of an improved SDLC, according to some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a block diagram of a model development system for developing a software testing model, according to some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a block diagram of a blueprint for a software testing model, according to some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a block diagram of an AI-driven software testing platform, according to some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a flowchart of an AI-driven software testing method, according to some embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a block diagram of a model deployment system, according to some embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a block diagram of an example computing apparatus.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a block diagram of a computer system for implementing the software testing systems and methods, according to some embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0019" num="0018">While the present disclosure is subject to various modifications and alternative forms, specific embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. The present disclosure should be understood to not be limited to the particular forms disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present disclosure.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0020" num="0019">The present implementations will now be described in detail with reference to the drawings, which are provided as illustrative examples of the implementations so as to enable those skilled in the art to practice the implementations and alternatives apparent to those skilled in the art. Notably, the figures and examples below are not meant to limit the scope of the present implementations to a single implementation, but other implementations are possible by way of interchange of some or all of the described or illustrated elements. Moreover, where certain elements of the present implementations can be partially or fully implemented using known components, only those portions of such known components that are necessary for an understanding of the present implementations will be described, and detailed descriptions of other portions of such known components will be omitted so as not to obscure the present implementations. Implementations described as being implemented in software should not be limited thereto, but can include implementations implemented in hardware, or combinations of software and hardware, and vice-versa, as will be apparent to those skilled in the art, unless otherwise specified herein. In the present specification, an implementation showing a singular component should not be considered limiting; rather, the present disclosure is intended to encompass other implementations including a plurality of the same component, and vice-versa, unless explicitly stated otherwise herein. Moreover, applicants do not intend for any term in the specification or claims to be ascribed an uncommon or special meaning unless explicitly set forth as such. Further, the present implementations encompass present and future known equivalents to the known components referred to herein by way of illustration.</p><p id="p-0021" num="0020">Automated machine learning technology can refer to technology that can be used to automate some or all of the portions of the process of developing data analytics tools. Automated machine learning technology can lower the barriers to the development of certain types of data analytics tools, particularly those that operate on time-series data, structured and unstructured textual data, categorical data, and numerical data. Regression testing can determine whether software development activities (e.g., introduction of new software modules or modification of existing software modules) have fixed known bugs and/or introduced new bugs into software. Such regression testing of software is often automated. Although automation of testing can have a high initial implementation cost, it can provide positive effects on software quality increase the overall effectiveness of the testing process.</p><p id="p-0022" num="0021">Data analytics can refer to the process of analyzing data (e.g., using machine learning models or techniques) to discover information, draw conclusions, and/or support decision-making. Species of data analytics can include descriptive analytics (e.g., processes for describing the information, trends, anomalies, etc. in a data set), diagnostic analytics (e.g., processes for inferring why specific trends, patterns, anomalies, etc. are present in a data set), predictive analytics (e.g., processes for predicting future events or outcomes), and prescriptive analytics (processes for determining or suggesting a course of action).</p><p id="p-0023" num="0022">Machine learning can refer to or include the application of certain techniques (e.g., pattern recognition and/or statistical inference techniques) by computer systems to perform specific tasks. Machine learning techniques (automated or otherwise) may be used to build data analytics models based on sample data (e.g., &#x201c;training data&#x201d;) and to validate the models using validation data (e.g., &#x201c;testing data&#x201d;). The sample and validation data may be organized as sets of records (e.g., &#x201c;observations&#x201d; or &#x201c;data samples&#x201d;), with each record indicating values of specified data fields (e.g., &#x201c;independent variables,&#x201d; &#x201c;inputs,&#x201d; &#x201c;features,&#x201d; or &#x201c;predictors&#x201d;) and corresponding values of other data fields (e.g., &#x201c;dependent variables,&#x201d; &#x201c;outputs,&#x201d; or &#x201c;targets&#x201d;). Machine learning techniques may be used to train models to infer the values of the outputs based on the values of the inputs. When presented with other data (e.g., &#x201c;inference data&#x201d;) similar to or related to the sample data, such models may accurately infer the unknown values of the targets of the inference data set.</p><p id="p-0024" num="0023">A feature of a data sample may be a measurable property of an entity (e.g., person, thing, event, activity, etc.) represented by or associated with the data sample. In some cases, a feature of a data sample is a description of (or other information regarding) an entity represented by or associated with the data sample. A value of a feature may be a measurement of the corresponding property of an entity or an instance of information regarding an entity. In some cases, a value of a feature can indicate a missing value (e.g., no value). For instance, in the above example in which a feature is the price of a house, the value of the feature may be &#x2018;NULL&#x2019;, indicating that the price of the house is missing.</p><p id="p-0025" num="0024">Features can also have data types. For instance, a feature can have a numerical data type, a categorical data type, a time-series data type, a text data type (e.g., a structured text data type or an unstructured (&#x201c;free&#x201d;) text data type), an image data type, a spatial data type, or any other suitable data type. In general, a feature's data type is categorical if the set of values that can be assigned to the feature is finite.</p><p id="p-0026" num="0025">Time-series data can refer to data collected at different points in time. For example, in a time-series data set, each data sample may include the values of one or more variables sampled at a particular time. In some embodiments, the times corresponding to the data samples are stored within the data samples (e.g., as variable values) or stored as metadata associated with the data set. In some embodiments, the data samples within a time-series data set are ordered chronologically. In some embodiments, the time intervals between successive data samples in a chronologically-ordered time-series data set are substantially uniform.</p><p id="p-0027" num="0026">Time-series data may be useful for tracking and inferring changes in the data set over time. In some cases, a time-series data analytics model (or &#x201c;time-series model&#x201d;) may be trained and used to predict the values of a target Z at time t and optionally times t+1, . . . , t+i, given observations of Z at times before t and optionally observations of other predictor variables P at times before t. For time-series data analytics problems, the objective is generally to predict future values of the target(s) as a function of prior observations of all features, including the targets themselves.</p><p id="p-0028" num="0027">Image data can refer to one or more of a sequence of digital images (e.g., video), a set of digital images, a single digital image, and one or more portions of any of the foregoing. A digital image may include an organized set of picture elements (&#x201c;pixels&#x201d;). Digital images may be stored in computer-readable file. Any suitable format and type of digital image file may be used, including but not limited to raster formats (e.g., TIFF, JPEG, GIF, PNG, BMP, etc.), vector formats (e.g., CGM, SVG, etc.), compound formats (e.g., EPS, PDF, PostScript, etc.), and/or stereo formats (e.g., MPO, PNS, JPS, etc.).</p><p id="p-0029" num="0028">Non-image data can refer to or include any type of data other than image data, including but not limited to structured textual data, unstructured textual data, categorical data, and/or numerical data. Natural language data can refer to speech signals representing natural language, text (e.g., unstructured text) representing natural language, and/or data derived therefrom. Speech data can refer to speech signals (e.g., audio signals) representing speech, text (e.g., unstructured text) representing speech, and data derived therefrom. Auditory data can refer to audio signals representing sound and/or data derived therefrom.</p><p id="p-0030" num="0029">Spatial data can refer to or include data relating to the location, shape, and/or geometry of one or more spatial objects. A spatial object may be an entity or thing that occupies space and/or has a location in a physical or virtual environment. A spatial object may be represented by an image (e.g., photograph, rendering, etc.) of the object. A spatial object may be represented by one or more geometric elements (e.g., points, lines, curves, and/or polygons), which may have locations within an environment (e.g., coordinates within a coordinate space corresponding to the environment).</p><p id="p-0031" num="0030">A spatial attribute can refer to or include an attribute of a spatial object that relates to the object's location, shape, or geometry. Spatial objects or observations may also have non-spatial attributes. For example, a residential lot is a spatial object that that can have spatial attributes (e.g., location, dimensions, etc.) and non-spatial attributes (e.g., market value, owner of record, tax assessment, etc.). A spatial feature can refer to a feature that is based on (e.g., represents or depends on) a spatial attribute of a spatial object or a spatial relationship between or among spatial objects. A location feature can refer to a spatial feature that is based on a location of a spatial object. A spatial observation can refer to an observation that includes a representation of a spatial object, values of one or more spatial attributes of a spatial object, and/or values of one or more spatial features.</p><p id="p-0032" num="0031">Spatial data may be encoded in vector format, raster format, or any other suitable format. In vector format, each spatial object is represented by one or more geometric elements. In this context, each point has a location (e.g., coordinates), and points also may have one or more other attributes. Each line (or curve) comprises an ordered, connected set of points. Each polygon comprises a connected set of lines that form a closed shape. In raster format, spatial objects are represented by values (e.g., pixel values) assigned to cells (e.g., pixels) arranged in a regular pattern (e.g., a grid or matrix). In this context, each cell represents a spatial region, and the value assigned to the cell applies to the represented spatial region.</p><p id="p-0033" num="0032">Data (e.g., variables, features, etc.) having certain data types, including data of the numerical, categorical, or time-series data types, are generally organized in tables for processing by machine-learning tools. Data having such data types may be referred to collectively herein as tabular data (or tabular variables, tabular features, etc.). Data of other data types, including data of the image, textual (structured or unstructured), natural language, speech, auditory, or spatial data types, may be referred to collectively herein as non-tabular data (or non-tabular variables, non-tabular features, etc.).</p><p id="p-0034" num="0033">A data analytics model can refer to or include any suitable model artifact generated by the process of using a machine learning algorithm to fit a model to a specific training data set. The terms data analytics model, machine learning model and machine learned model can be used interchangeably herein.</p><p id="p-0035" num="0034">Development of a machine learning model can refer to construction of the machine learning model. Machine learning models may be constructed by computers using training data sets. Thus, development of a machine learning model may include the training of the machine learning model using a training data set. In some cases (generally referred to as supervised learning), a training data set used to train a machine learning model can include known outcomes (e.g., labels or target values) for individual data samples in the training data set. For example, when training a supervised computer vision model to detect images of cats, a target value for a data sample in the training data set may indicate whether or not the data sample includes an image of a cat. For example, in unsupervised learning, a training data set does not include known outcomes for individual data samples in the training data set.</p><p id="p-0036" num="0035">Following development, a machine learning model may be used to generate inferences with respect to inference data sets. For example, following development, a computer vision model may be configured to distinguish data samples including images of cats from data samples that do not include images of cats. As used herein, the &#x201c;deployment&#x201d; of a machine learning model may refer to the use of a developed machine learning model to generate inferences about data other than the training data.</p><p id="p-0037" num="0036">A modeling blueprint (or blueprint) can refer to a computer-executable set of data processing operations and modeling operations that, when executed, extract model features from a data set and perform one or more modeling tasks using the extracted features. Blueprints may be generated &#x201c;on-the-fly&#x201d; based on any suitable information including, without limitation, the size of the user data, features types, feature distributions, etc. Blueprints may be capable of jointly using multiple (e.g., all) data types. In some examples, a blueprint may be used to develop a machine-learning model (e.g., to train and validate the model). In some examples, a blueprint may be used to deploy a trained machine-learning model.</p><p id="p-0038" num="0037">In some embodiments, a blueprint may include a set of data processing steps and machine learning (or artificial intelligence) operations that a platform uses to uncover relationships, patterns, insights, and/or predictions from data, leading to great flexibility. In some embodiments, a blueprint includes feature engineering module(s), model training module(s), model tuning module(s), and/or other suitable modules.</p><p id="p-0039" num="0038">Data analysis tools may use feature importance analysis to determine the significance of particular features to particular models (e.g., the extent to which a particular model relies on a particular feature to estimate or predict values of a target variable). Determining the feature importance of various features may involve permutation importance analysis.</p><p id="p-0040" num="0039">As the complexity of technology and software increases, the number of tests performed to validate the interactions of new functionality with existing functionality can increase rapidly (e.g., exponentially). Test volume can become a bottleneck for rapid development and directly limit engineering velocity. Managing a large automated regression test suite generally involves large-scale human effort and running an entire test suite to validate every change in a software application can be costly, time-consuming and inefficient. Such inefficiency tends to increase with product growth, headcount growth and development velocity. Specific software and platforms are generally used to run these automated regression tests, for example, Jenkins, GitLab, TeamCity, and GitHub, and maintaining a seamless integration between the various platforms and the testing suite can be costly and time-consuming. As the software development team grows, the software application increases in size and complexity, and the testing platforms evolve, instabilities are introduced into the testing process and &#x201c;flakes&#x201d; (e.g., random unrelated failures) are observed. The more flakes there are, the more tests are rerun therefore increasing both testing time and costs.</p><p id="p-0041" num="0040">Reducing the number of tests performed to validate changes in a software application can alleviate the above-described bottlenecks and inefficiencies. To reduce the time and cost of regression testing, rules and heuristics may be used to select a subset of the available tests to validate a particular batch of changes to the software, thereby limiting the number of tests performed. However, in practice, such rule-based systems tend to be difficult to scale and maintain. Over time, as more software features are added to an application, there is an increased difficulty in selecting a small yet sufficient set of regression tests that cover the changes and the overall system interactions to reliably detect software defects. In many cases, rule-based selection systems become too complex for a human to understand, and the test selection rules tend to be overly conservative, in the sense that they select more tests than necessary to avoid missed detections of software defects.</p><p id="p-0042" num="0041">Thus, this technical solution is directed to software testing techniques using machine learning and can improve the selection of tests for regression testing. The present disclosure describes methods and systems for using an adaptive, artificial intelligence (AI)-driven tool to predict the success or failure of individual tests in a suite of tests available for regression testing. If the model predicts, with confidence, that a specific test will pass, then the specific test may be skipped or automatically deployed; otherwise the specific test may be performed. In this way, the number of tests performed to validate changes in an application may be reduced.</p><p id="p-0043" num="0042">Improved software testing techniques are disclosed. Data analytics tools are used to guide decision-making and/or to control systems in a wide variety of fields and industries, e.g., security; transportation; fraud detection; risk assessment and management; supply chain logistics; development and discovery of pharmaceuticals and diagnostic techniques; and energy management. Historically, the processes used to develop data analytics tools suitable for carrying out specific data analytics tasks generally have been expensive and time-consuming, and often have required the expertise of highly-trained data scientists. Such processes generally includes steps of data collection, data preparation, feature engineering, model generation, and/or model deployment.</p><p id="p-0044" num="0043">In some embodiments, the AI tool may select the tests to be performed in response to a &#x201c;software development unit of request&#x201d; (e.g., &#x201c;pull request&#x201d; or &#x201c;PR&#x201d;) based on historical data, which may include historical pull requests and the results of previous runs of specific tests.</p><p id="p-0045" num="0044">Some embodiments may include a module (e.g., adaptive test learner module) interposed between the software testing and deployment modules in a SDLC to reduce software deployment cycle times and testing costs while maintaining high product quality. The adaptive test learner may also inform project planners of quick, easy-to-implement, and/or low cost features that may aid decision makers on the selection of new features to implement.</p><p id="p-0046" num="0045">In some embodiments, the AI tool may include data extraction and preparation modules, one or more machine learned models (e.g., models trained on historical test data) with natural language processing capabilities, a historical test database for storing the data (e.g., new scoring data and/or training data), a test selector, and/or automatic model retrain (or rebuild) systems. In some embodiments, the test selector may determine whether to perform a test, skip the test, or automatically deploy the test based on the tool's confidence that the test will pass or fail, a confidence level (or threshold), and a set of guard rail checks (e.g., rules). The test selector may also include details of costs and run times for project planners.</p><p id="p-0047" num="0046">Some embodiments may be applicable to testing practices in non-software industries (e.g., semiconductor fabrication, chip verification, and/or other suitable industries).</p><p id="p-0048" num="0047">Some embodiments may 1) predict whether a test executed under a set of specific constraints will succeed with confidence; 2) reduce the human effort involved in regression testing, relative to systems in which humans create test selection rules or manually select tests to run; 3) improve the accuracy of test selection by using advanced predictive analytics rather than rule-based test selection; 4) provide recommendations of &#x201c;quick win&#x201d; features (features that were quick and less costly to implement and test) to Project Managers and Planners; and 5) adapt over time by continuously learning using automatic model retraining and feature drift detection.</p><p id="p-0049" num="0048">Some embodiments may address one or more of the following specific problems with rule-based testing systems.</p><p id="p-0050" num="0049">For example, rule-based software testing may account for approximately 40% to 50% of total project resources, 30% of the total project effort and 50% to 60% of the total cost of software development. As software becomes increasingly complex with the addition of new features, these figures are likely to increase. Some embodiments of an intelligent, adaptive, automated testing system may decrease the amount of human effort, costs and time associated with validating and deploying software.</p><p id="p-0051" num="0050">For example, with conventional approaches to regression testing, a large number of historical tests may be executed on every system change, even though the change may not be relevant to large portions of the overall system. Rule-based test selection techniques may reduce the number of tests to be executed by a ratio of 10% to 15%, whereas some embodiments may reduce the number of executed tests by 30% to 50%. Some embodiments produce advantages such as cost savings in cloud resources, reduced number of tests, reduced test runtime, and reduced the flake rate by &#x2dc;50%.</p><p id="p-0052" num="0051">For example, most software is dependent on external libraries, for example, Python modules. When these external modules are upgraded, parts of the software that rely on those modules may also be modified. When these types of system upgrades happen, some tests become obsolete and new tests are written. In most cases, due to the dynamic nature of a software application, knowledge of some of the test components may be sparse and the obsolete tests may not be decommissioned out of an abundance of caution. In contrast, by using a predictive analytics model, some embodiments reliably identify obsolete tests and prioritize those tests for decommissioning.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an exemplary software development life cycle (SDLC) <b>100</b> for a software application, according to some examples. The SDLC <b>100</b> may be used by a software developer to design, develop and/or test software applications and to achieve goals by identifying and fixing inefficiencies and higher costs. In some cases, the SDLC <b>100</b> may include steps of project planning <b>110</b>, requirements definition <b>120</b>, design <b>130</b>, software development <b>140</b>, software testing <b>150</b>, and software deployment <b>160</b>. In other examples, a SDLC may further include other steps and/or omit one or more steps illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> depending on the scope of a project.</p><p id="p-0054" num="0053">At project planning step <b>110</b>, a project planner may evaluate the terms of a project. For example, the evaluation may include calculating labor and material costs, creating a timetable with target goals, creating the project's teams and leadership structure, gathering feedback (for example, from stakeholders, potential customers, developers, subject matter experts, and sales representatives), etc. A project planner may define the scope and purpose of the application to be developed, plot the course and provisions for a team to effectively create the software, and/or set boundaries to help keep the project from expanding or shifting from its original purpose.</p><p id="p-0055" num="0054">At requirements definition step <b>120</b>, the application's specifications (e.g., functionality, performance characteristics, etc.) may be defined. For example, a social media application's functional requirements may include the ability to connect with a friend. In some examples, defining the project's requirements may also include defining the resources to be used to develop the software. For example, if software to control a custom manufacturing machine is being developed, the project's requirements will likely include access to the machine.</p><p id="p-0056" num="0055">At design step <b>130</b>, a developer may design the software application. The software's design may include aspects of its architecture, user interface, platforms, programming language and methods, communications, and security. In some examples, the design step may include development of a prototype, such as an early version of the software demonstrating some aspects of the application's appearance and functionality, for further improvement.</p><p id="p-0057" num="0056">At software development step <b>140</b>, a developer (e.g., a development team) may write and rewrite programs that, when executed, provide the application's functionality in accordance with the requirements defined at step <b>120</b> and the design decisions made at step <b>130</b>.</p><p id="p-0058" num="0057">At software testing step <b>150</b>, a developer may test individual parts of an application, sets of interacting parts of an application, and/or the application as a whole before making the application (or parts of the application) available to users to confirm that the application operates correctly. The testing may help reduce the number of bugs and glitches that users encounter, resulting in higher user satisfaction and/or increased adoption of the software. In some examples, the testing (for example, security testing) may be automated. In some examples, the testing may be performed in a specific environment.</p><p id="p-0059" num="0058">In some examples, the software testing step <b>150</b> may run concurrently with the software development step <b>140</b>. For example, developers may write or modify programs to fix errors detected during testing. In some cases, the software testing step <b>150</b> and the software development step <b>140</b> may be performed iteratively (or concurrently) until the errors detected in the testing step satisfy certain constraints (e.g., the number of errors is less than a threshold number, the number of critical errors is less than a threshold number, etc.).</p><p id="p-0060" num="0059">At deployment step <b>160</b>, the application may be made available to users. For example, an application may be deployed on a website, through an application that can be downloaded on a smartphone, etc.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an a block diagram of an improved SDLC <b>200</b> for a software application, according to some embodiments. Compared with an SDLC <b>100</b>, SDLC <b>200</b> may use an adaptive test learner module <b>270</b> to improve the software development life cycle (e.g., by reducing software deployment cycle times and/or testing costs while maintaining high product quality). In some embodiments, the adaptive test learner module <b>270</b> may provide information regarding the extent of the testing that would be recommended if a new feature were added to the application, which may aid decision makers in determining whether potential new features can be implemented quickly and/or at low cost. In some embodiments, the adaptive test learner module <b>270</b> may be used during the software development <b>140</b>, software testing <b>150</b>, and/or deployment steps <b>160</b>, as described in further detail below.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of a model development system <b>300</b> for developing a software testing model <b>370</b>, according to some embodiments. The above-described adaptive test learner module <b>270</b> may comprise the software testing model <b>370</b>. The model development system <b>300</b> may include a feature extraction module <b>320</b>, a data preparation and feature engineering module <b>340</b>, and a model creation and evaluation module <b>360</b>. In some embodiments, the model development system <b>300</b> receives raw modeling data <b>310</b> and uses the raw modeling data <b>310</b> to develop (e.g., automatically develop) one or more software testing models <b>370</b> (e.g., machine learning models, etc.) that can predict whether specific tests for a software application under development will pass or fail based on data relating to the tests and the software development project. Some embodiments of the components and functions of the model development system <b>300</b> are described in further detail below. The software testing model <b>370</b> can be one or a subset of a plurality of models <b>371</b>. The model development system <b>300</b> can store the software testing model <b>370</b> to a physical or logical location corresponding to the models <b>371</b>. The model development system <b>300</b> can generate a plurality of models <b>371</b>, where the plurality of generated models <b>371</b> includes the software testing model <b>370</b>.</p><p id="p-0063" num="0062">The raw modeling data <b>310</b> may include any data suitable for training or validating a software testing model <b>370</b>. Some examples of suitable modeling data are described below with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0064" num="0063">In some embodiments, the feature extraction module <b>320</b> performs data pre-processing and data feature extraction on the raw modeling data <b>310</b>, and provides the extracted features to the data preparation and feature engineering module <b>340</b> as feature candidates <b>332</b> within a processed modeling dataset <b>330</b>.</p><p id="p-0065" num="0064">In some embodiments, the data preparation and feature engineering module <b>340</b> automatically assembles the processed modeling data <b>330</b> into a modeling table. Optionally, the data preparation and feature engineering module <b>340</b> may perform automatic exploratory data analysis on the modeling data. In such instances, automatic exploratory data analysis may include, without limitation, identifying the data types of the feature candidates <b>332</b> (e.g., numeric, categorical, date/time, text, image, location (geospatial), etc.) and/or determining basic descriptive statistics for one or more (e.g., all) features candidates <b>332</b>. The results of such exploratory data analysis may help the user verify that the system has understood the uploaded data correctly and identify data quality issues early.</p><p id="p-0066" num="0065">In some embodiments, the data preparation and feature engineering module <b>340</b> partitions the modeling data <b>330</b> into a training set, a validation set, and a holdout set. Alternatively, the data partitioning module may partition the modeling data <b>330</b> into multiple cross-validation sets (or &#x201c;folds&#x201d;) and a holdout set.</p><p id="p-0067" num="0066">The data preparation and feature engineering module <b>340</b> may perform data preparation and/or feature engineering operations on the processed modeling data <b>330</b>. The data preparation operations may include, for example, characterizing the input data. Characterizing the input data may include detecting missing observations, detecting missing variable values, and/or identifying outlying variable values. In some embodiments, characterizing the input data includes detecting duplicate portions of the modeling data <b>330</b> (e.g., observations, spatial objects, images, etc.). If duplicate portions of the modeling data <b>330</b> are detected, the model development system <b>300</b> may notify a user of the detected duplication.</p><p id="p-0068" num="0067">In some embodiments, the data preparation and feature engineering module <b>340</b> also performs feature selection operations (e.g., dropping uninformative features, dropping highly correlated features, replacing original features with top principal components, etc.). The data preparation and feature engineering module <b>340</b> may provide refined modeling data <b>350</b> with a curated (e.g., analyzed, engineered, selected, etc.) set of features <b>351</b> to the model creation and evaluation module <b>360</b> for use in creating and evaluating models. In some embodiments, the data preparation and feature engineering module <b>340</b> determines the importance (e.g., feature importance) or feature impact of the individual feature candidates <b>332</b> and/or individual engineered features derived therefrom, and selects a subset of those feature candidates (e.g., the N most important feature candidates, all feature candidates having importance scores above a threshold value, etc.) as the features <b>351</b> used by the model creation and evaluation module <b>360</b> to generate and evaluate one or more models.</p><p id="p-0069" num="0068">The model creation and evaluation module <b>360</b> may create one or more models and evaluate the models to determine how well (e.g., accurately) they solve the data analytics problem at hand (e.g., predicting whether specific tests for a software application under development will pass or fail). In some embodiments, the model creation and evaluation module <b>360</b> performs model-fitting steps to fit models to the training data (e.g., to the features <b>351</b> of the refined modeling data <b>350</b>). The model-fitting steps may include, without limitation, algorithm selection, parameter estimation, hyperparameter tuning, scoring, diagnostics, etc. The model creation and evaluation module <b>360</b> may perform model fitting operations on any suitable type of model, including (without limitation) decision trees, neural networks, support vector machine models, regression models, boosted trees, random forests, deep learning neural networks, k-nearest neighbors models, na&#xef;ve Bayes models, etc. In some embodiments, the model creation and evaluation module <b>360</b> performs post-processing steps on fitted models. Some non-limiting examples of post-processing steps may include calibration of predictions, censoring, blending, choosing a prediction threshold, etc.</p><p id="p-0070" num="0069">In some embodiments, the data preparation and feature engineering module <b>340</b> and the model creation and evaluation module <b>360</b> form part of an automated model development pipeline, which the model development system <b>300</b> uses to systematically evaluate the space of potential solutions to the data analytics problem at hand. In some cases, results <b>365</b> of the model development process may be provided to the data preparation and feature engineering module <b>340</b> to aid in the curation of features <b>351</b>. Some non-limiting examples of systematic processes for evaluating the space of potential solutions to data analytics problems are described in U.S. patent application Ser. No. 15/331,797 (now U.S. Pat. No. 10,366,346).</p><p id="p-0071" num="0070">During the process of evaluating the space of potential modeling solutions for a data analytics problem, some embodiments of the mod&#x26; creation and evaluation module <b>360</b> may allocate resources for evaluation of modeling solutions based in part on the feature importance scores of the features in the dataset (e.g., refined modeling data <b>350</b>) representing the data analytics problem. In general, the model creation and evaluation module <b>360</b> may select or suggest potential modeling solutions that are predicted to be suitable or highly suitable for a dataset. When determining the suitability of a predictive modeling procedure for a data analytics problem, the model creation and evaluation module <b>360</b> may treat the characteristics of the more important features of the dataset as the characteristics of the data analytics problem. In this way, the model creation and evaluation module <b>360</b> may generate &#x201c;suitability scores&#x201d; for potential modeling solutions, such that the suitability scores are tailored to the more important features of the dataset. The model creation and evaluation module may then allocate computational resources to model training and evaluation tasks based on those suitability scores, Thus, tailoring the suitability scores to the more important features of the dataset may result in resources being allocated to the evaluation of potential modeling solutions based in part on feature importance scores.</p><p id="p-0072" num="0071">In some embodiments, the model creation and evaluation module <b>360</b> selects models for blending based on the feature importance scores, and blends the selected models. The model creation and evaluation module <b>360</b> may use any suitable technique to select models for blending. For example, &#x201c;complementary top models&#x201d; may be selected for blending. In this context, &#x201c;complementary top models&#x201d; may include high-performing models that achieve their high performance (e.g., high accuracy) through different mechanisms. The model creation and evaluation module <b>360</b> may classify a model as a &#x201c;top&#x201d; model if a score representing the model's performance is greater than a threshold, if the model has one of the N highest scores among the fitted models, if the model does not have one of the M lowest scores among the fitted models, etc. The model creation and evaluation module <b>360</b> may classify two models as &#x201c;complementary&#x201d; models if (1) the most important features for the models (e.g., the features having the highest feature importance scores for the models) are different, or (2) a feature that has high importance to the first model has low importance to the second model, and a feature that has low importance to the first model has high importance to the second model. In this context, a feature may have &#x201c;high importance&#x201d; to a model if the feature has a high feature importance score for the model (e.g., the highest feature importance score, one of the highest N feature importance scores, a feature importance score greater than a threshold value, etc.). In this context, a feature may have &#x201c;low importance&#x201d; to a model if the feature has a low feature importance score for the model (e.g., the lowest feature importance score, one of the lowest N feature importance scores, a feature importance score lower than a threshold value, etc.). In some embodiments, the model creation and evaluation module <b>360</b> may use the above-described classification techniques to select two or more complementary top models for blending. In some cases, blending complementary top models may yield blended models with very high performance, relative to the component models. By contrast, blending non-complementary models may not yield blended models with significantly better performance than the component models.</p><p id="p-0073" num="0072">In some cases, the model generated by the creation and evaluation module <b>360</b> includes a gradient boosting machine (e.g., gradient boosted decision tree, gradient boosted tree, boosted tree model, any other model developed using a gradient tree boosting algorithm, etc.). Gradient boosting machines are generally well-suited to data analytics problems involving heterogeneous tabular data.</p><p id="p-0074" num="0073">In some cases, the model generated by the creation and evaluation module <b>360</b> includes a feed-forward neural network, with zero or more hidden layers. Feed forward neural networks are generally well-suited to data analytics problems that involve combining data from multiple domains (e.g., spatial data and image data; spatial data and numeric, categorical, or text data, etc.), pairs of inputs from the same domain (e.g., pairs of spatial datasets, pairs of images, pairs of text samples, pairs of tables, etc.), multiple inputs from the same domain (e.g., spatial datasets, sets of images, sets of text samples, sets of tables, etc.), or combinations of singular, paired, and multiple inputs from a variety of domains (e.g., spatial data, image data, text data, and tabular data).</p><p id="p-0075" num="0074">In some cases, the model generated by the creation and evaluation module <b>360</b> includes a regression model, which can generally handle both dense and sparse data. Regression models are often useful because they can be trained more quickly than other models that can handle both dense and sparse data (e.g., gradient boosting machines or feed forward neural networks).</p><p id="p-0076" num="0075">In some embodiments, the model development pipeline tailors its search of the solution space based on the computational resources available to the model development system <b>300</b>. For example, the model development pipeline may obtain resource data indicating the computational resources available for the model creation and evaluation process. If the available computational resources are relatively modest (e.g., commodity hardware), the model development pipeline may extract feature candidates <b>332</b>, select features <b>351</b>, select model types, and/or select machine learning algorithms that tend to facilitate computationally efficient creation and evaluation of modeling solutions. If the computational resources available are more substantial (e.g., graphics processing units (GPUs), tensor processing units (TPUs), or other hardware accelerators), the model development pipeline may extract feature candidates <b>332</b>, select features <b>351</b>, select model types, and/or select machine learning algorithms that tend to produce highly accurate modeling solutions at the expense of using substantial computational resources during the model creation and evaluation process.</p><p id="p-0077" num="0076">The system can include the data processing system to receive the request via a graphical user interface presented on a client device remote from the data processing system. The data processing system can provide, via the graphical user interface, the indication of the selected subset of the plurality of tests.</p><p id="p-0078" num="0077">The system can include the data processing system to identify the data stored in the one or more repositories can include at least one of pull request data, issue tracker information, or changed files data. The data processing system can generate, based at least in part on the data, a plurality of features for the version of the application. The data processing system can determine, based on the plurality of features and via the model, the score for each of the plurality of tests configured to test performance of the version of the application.</p><p id="p-0079" num="0078">The system can include the data processing system to identify the data stored in the one or more repositories can include a number of lines of code in the version of the application that have changed relative to the prior version of the application. The system can include the data processing system to identify, from the historical data, a plurality of features. The data processing system can train the model via the machine learning based on the plurality of features and the historical data. The system can include the data processing system to perform pre-processing on raw data associated with the historical data. The data processing system can generate the plurality of features based on the pre-processed raw data. The system can include the data processing system to determine the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes.</p><p id="p-0080" num="0079">The system can determine a score corresponding to one or more tests without execution of the plurality of tests. For example, the system can generate scores based on historical data corresponding to previous versions of the application or previous versions of other applications. For example, the system can generate the score based on one or more aspects of the version of the application based on previous versions of the application or previous versions of other applications, including but not limited to features. For example, the system can determine or generate the score corresponding to a particular version of the application based on data of or metadata corresponding to the particular version of the application. Thus, the system can forgo performance of a test of a version of an application by generating a score at least from features derived based on the version of the application, and independent of execution of the version of the application. Forgoing performance of a test of a version of an application can provide the technical improvement of reducing computational resources required to evaluate and select applications satisfying particular criteria based on structure and operation associated with an application.</p><p id="p-0081" num="0080">The system can include the data processing system to compare the score for each of the plurality of tests with a threshold. The data processing system can group, based on the comparison, the plurality of tests into the subset of the plurality of tests and a second subset of the plurality of tests that is different from the subset of the plurality of tests. The data processing system can assign a first action to perform for the subset of the plurality of tests. The data processing system can assign a second action to perform for the second subset of the plurality of tests, the second action different from the first action. The system where the first action corresponds to execution of the test, and the second action corresponds to skipping the test or automatic deployment of the test.</p><p id="p-0082" num="0081">The system can include the data processing system to determine the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes. The data processing system can select the subset of the plurality of tests based on the score of the subset of the plurality of tests less than a threshold.</p><p id="p-0083" num="0082">The system can include the data processing system to determine the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes. The data processing system can select a second subset of the plurality of tests based on the score of the second subset of the plurality of tests greater than a threshold. The data processing system can skip execution of the second subset of the plurality of tests to reduce computing resource utilization associated with performance testing of the version of the application, where the subset of the plurality of tests is less than the plurality of the tests.</p><p id="p-0084" num="0083">A Blueprint for a Software Testing Model</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of a blueprint <b>400</b> for a software testing model <b>430</b> (e.g., software testing model <b>370</b>), according to some embodiments. In some examples, the model development system <b>300</b> may generate the blueprint <b>400</b> and use it to train a machine-learning model <b>430</b> to predict whether specific tests for a software application under development will pass or fail based on input data <b>410</b> relating to the tests and the software development project. In some examples, a model deployment system <b>700</b> may deploy the blueprint <b>400</b> to generate predictions <b>440</b> indicating whether specific tests for a software application under development will pass or fail based on input data <b>410</b> relating to the tests and the software development project.</p><p id="p-0086" num="0085">In the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the blueprint <b>400</b> includes data processing modules (<b>422</b>, <b>424</b>, <b>426</b>, <b>428</b>) and a software testing model <b>430</b>, all of which are described in further detail below. When applied to the processed input data, the software testing model <b>430</b> may generate a prediction <b>440</b> indicating whether specific tests for a software application under development will pass or fail.</p><p id="p-0087" num="0086">The input data <b>410</b> may include any data suitable for predicting whether specific tests for a software application under development will pass or fail. Some examples of suitable input data are described below with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>. In some embodiments, the input data <b>410</b> may be divided into categorical variables <b>412</b>, text variables <b>414</b>, and numerical variables <b>416</b> for processing. Each of the categorical variables <b>412</b> may be encoded using a one-hot encoding scheme <b>422</b>. Each (or all) of the text variables <b>414</b> may be encoded as a matrix of word-grams occurrences <b>424</b> (e.g., using natural language processing (NLP) techniques). Each of the numerical variables <b>416</b> may be processed by imputing missing values <b>426</b> and by standardizing <b>428</b> the variable values (e.g., converting the raw numeric values to corresponding values on a fixed scale, such as a scale from 0.0 to 1.0).</p><p id="p-0088" num="0087">After the data processing (<b>422</b>, <b>424</b>, <b>426</b>, <b>428</b>), the processed data may be provided as input to the software testing model <b>430</b>, which may output the corresponding prediction <b>440</b>. The model <b>430</b> may be any suitable model. In some embodiments, the model <b>430</b> may be an elastic-net classifier (e.g., with mixing alpha=0.5 or binominal deviance). In some embodiments, the model <b>430</b> may be a linear model, while in other embodiments, the model <b>430</b> may be a decision tree. In some embodiments, the model <b>430</b> may be a binary classification model.</p><p id="p-0089" num="0088">In some embodiments, the prediction <b>440</b> may be represented by one or more labels and/or one or more quantitative values (e.g., real numbers between 0 and 1). For example, the prediction <b>440</b> may include a label indicating whether a test is predicted to pass or fail, and a quantitative value indicating the model's confidence in the accuracy of the label.</p><p id="p-0090" num="0089">Software Testing System and Methods</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an AI-driven software testing platform <b>500</b>, according to some embodiments. The software testing platform <b>500</b> may include a software test selection system <b>502</b>. The software test selection system <b>502</b> may include a data preparation module <b>522</b>, a software testing model <b>528</b>, historical data <b>524</b>, an automatic retraining and model rebuilding module <b>526</b>, and a test selector module <b>530</b>. In some embodiments, the data preparation module <b>522</b> and software testing model <b>528</b> may be provided by a modeling blueprint <b>400</b>. For example, the data preparation module <b>522</b> may perform the data processing operations of a modeling blueprint <b>400</b> (e.g., the operations of data processing modules <b>422</b>-<b>428</b>), and the software testing model <b>528</b> may be the software testing model <b>430</b> of the modeling blueprint <b>400</b>.</p><p id="p-0092" num="0091">Inputs to the software test selection system <b>502</b> may be provided, for example, by other tools used in the software development process (e.g., a testing automation platform <b>512</b>, a code management tool <b>514</b>, etc.) and/or by other data sources. These inputs may include, for example, the input data <b>410</b> for a modeling blueprint <b>400</b>. Other inputs may include information related to the project planning step <b>110</b> of the SDLC. Outputs generated by the software test selection system <b>502</b> may be provided to other tools used in the software development process (e.g., tools used for software testing <b>150</b> and/or for automated test deployment <b>560</b>). Additional outputs regarding the costs and/or benefits of various tests may be provided to project planners.</p><p id="p-0093" num="0092">In some embodiments, the input data <b>410</b> for the software test selection system <b>502</b> may include changed files data, pull request data, issue tracker information, and/or other suitable types of data. The changed files data may include data relating to one or more files of a software application (e.g., data files, configuration files, source code files, etc.) that have been changed (e.g., edited, added, or deleted). Such data may include the file names of one or more changed files, modules where the changed files are located, top-level directories where the changed files are located, file extensions of the changed files, etc. The system <b>502</b> may infer, based on the file extensions of the changed files, which portions of a software application were involved in a pull request. For example, .if Python files (.py extension) were changed, the system <b>502</b> may infer that the changes relate to the application's backend. In another example, if JavaScript files (.js extension) were changed, the system <b>502</b> may infer that the application's frontend has changed.</p><p id="p-0094" num="0093">The pull request data may include one or more titles of a pull request, numbers of changed files (which may indicate the complexity of the change), commit data, and/or user data. In some embodiments, the title of a pull request may include words that indicate whether the changes are simple or complex, and the AI model <b>528</b> may estimate risk based on that information. In some embodiments, the AI model <b>528</b> may infer the complexity of the change based on the number of files changed, the number lines of codes changed, and/or any other suitable metrics. In some embodiments, the commit data may identify the files changed, the person making the changes, and any text (e.g., comments) provided by the user when the change is committed.</p><p id="p-0095" num="0094">In some embodiments, the data preparation module <b>522</b> may extract one or more features (e.g., ticket name, project name, summary, issue type, priority, status, resolution, label, acceptance criteria, description of changes, file name, top-level directory name, module name, file extension, a pull request title, etc.) from the pull request data and/or issue tracking data for use by the software testing model <b>528</b>. These features are described further below.</p><p id="p-0096" num="0095">Ticket name: In some embodiments, the software testing model <b>528</b> may infer the scope of the changes associated with a pull request based on the name of the ticket corresponding to the pull request. In some embodiments, the software testing model <b>528</b> may infer the risk of the changes breaking a test based on the inferred scope of the changes.</p><p id="p-0097" num="0096">Project name: In some embodiments, the software testing model <b>528</b> may infer which software development team is changing the software application based on the project name. In some embodiments, the model <b>528</b> may infer the risk of the changes breaking a test based on the team that is making the changes. (Based on historical data, different teams may be more or less likely to break tests (in general, or specific tests) when making changes of comparable scope.)</p><p id="p-0098" num="0097">Summary: The summary of a pull request may include a (e.g., short) description of the changes being made. In some embodiments, the model <b>528</b> may infer which parts of the application are affected by the changes based on the summary of the pull request. In some embodiments, the model <b>528</b> may infer that the risk of a change breaking a specific test is higher if the test relates to a part of the application affected by the change.</p><p id="p-0099" num="0098">Issue type: The issue type may indicate whether the changes associated with a pull request implement bug fix or a new feature.</p><p id="p-0100" num="0099">File names: Based on the names of the files in which changes have been made, the model <b>528</b> may infer that testing of the functionality implemented by some files (e.g., the changed files and files containing code that interacts with the code in the changed files) is warranted and/or that testing of the functionality implemented by other files (e.g., files that have not been changed and files containing no code that interacts with the code in the changed files) is not warranted</p><p id="p-0101" num="0100">Top-level directory names: Based on the names of the top-level directories in which the changed files are stored, the model <b>528</b> may infer which parts of the software application are likely to be affected by the changes. As discussed above, the model <b>528</b> may infer that the risk of a change breaking a specific test is higher if the test relates to a part of the application affected by the change.</p><p id="p-0102" num="0101">In some embodiments, features with high feature importance to the model <b>528</b> may include one or more of the following features:</p><p id="p-0103" num="0102">all_modules_joined (a text feature that specifies the names of all the changed modules associated with the pull request),</p><p id="p-0104" num="0103">all_top_level_dirs (e.g., a text feature that specifies the names of all the top-level directories containing changed modules associated with the pull request),</p><p id="p-0105" num="0104">pr_title (e.g., a text feature indicating the title of the pull request),</p><p id="p-0106" num="0105">project_name (e.g., a text feature indicating the name of the software development project),</p><p id="p-0107" num="0106">all_file_names (e.g., a text feature that specifies the names of all the changed files associated with the pull request),</p><p id="p-0108" num="0107">summary (e.g., the pull request summary),</p><p id="p-0109" num="0108">all_file_extensions (e.g., a text feature that specifies the file extensions of all the changed files associated with the pull request),</p><p id="p-0110" num="0109">number_of_files_changed (e.g., a numeric feature indicating the number of changed files associated with the pull request, and/or</p><p id="p-0111" num="0110">type (e.g., a categorical feature indicating the issue type addressed by the pull request.</p><p id="p-0112" num="0111">In some embodiments, one or more above-mentioned features may be monitored for drift. If drift is detected, the retraining and model rebuilding module <b>526</b> may initiate retraining or refreshing of the software testing model <b>528</b>.</p><p id="p-0113" num="0112">The test selector <b>530</b> received predictions and insights sent from the AI model <b>528</b> for determining either deployment or selecting a test. In some embodiments, the test selector <b>530</b> automatically sends an alert to a developer (e.g., an engineer <b>510</b>) regarding the decision for a test (e.g., whether a test is predicted to pass or fail, and/or whether the system recommends performing the test, automatically deploying the test, or skipping the test) according to the prediction of the test. The engineer <b>510</b> may receive the alert (for example, at some or all times) of the progress through communication channels, such as Slack.</p><p id="p-0114" num="0113">In some embodiments, a default confidence threshold may be 75%, e.g., the prediction of a test has to be greater than 0.75 for the test to be sent for automatic deployment. The threshold may be set by the engineer <b>510</b> before running the adaptive test learner <b>270</b>. Other tests may be executed on the automatic testing platform <b>512</b>.</p><p id="p-0115" num="0114">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the test selector <b>530</b> may also monitor and collect the results of the tests including the cost savings, and then create at least two reports. One report may be a PR test summary for engineers (e.g. the engineer <b>510</b>), and another report may be the insights and costs of the tests run for the release cycle for project planning step <b>110</b>.</p><p id="p-0116" num="0115">In some embodiments, with new features constantly being developed, the life cycle of an AI model for software development may be relatively short and may get outdated in a short amount of time. To combat this, the historical data <b>524</b> from the latest release may be added to the training data, and the AI model <b>528</b> is rebuilt. The retrain or rebuild may be automatic. The retrain or rebuild may be triggered by release dates provided by the project planners from the project planning step <b>110</b>, automated drift analysis, and/or other factors.</p><p id="p-0117" num="0116">As described above, a primary purpose of some embodiments is to reduce the number of tests run per pull request by using the AI model <b>528</b>.</p><p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of an AI-driven software testing method <b>600</b>, according to some embodiments.</p><p id="p-0119" num="0118">At step <b>605</b>, a software testing system (e.g., a software testing system that includes the software test selection system <b>502</b>) receives a request to test software.</p><p id="p-0120" num="0119">At step <b>610</b>, the software testing system obtains data (e.g., raw modeling data) from an automation platform and/or code management system, and prepares the data for use by an AI model (e.g., software testing model <b>528</b>). In some embodiments, the obtained data includes the input data <b>410</b>. In some embodiments, the system may obtain at least a portion of the data by automatically extracting test run logs from the automated platform (e.g., Jenkins) and the code management system (e.g., GitHub). In some embodiments, preparing the data for use by the AI model may include creating machine-readable features from the data. Such data preparation may be performed, for example, by the data preparation module <b>522</b> of the software test selection system <b>502</b>.</p><p id="p-0121" num="0120">At step <b>620</b>, the software testing system may send the prepared data to an AI model (e.g., software testing model <b>528</b>) for processing. Some embodiments of the processing performed by the software testing model <b>528</b> are described below with reference to steps <b>630</b>-<b>650</b> of the method <b>600</b>. In some embodiments, the AI model includes natural language processing capabilities.</p><p id="p-0122" num="0121">At step <b>622</b>, the software test selection system may store the prepared data in an historical data store <b>524</b> (e.g., historical database). In some embodiments, the historical database includes training data suitable for training the AI model (which may include training data and/or validation data previously used to train and/or validate the AI model). In addition or in the alternative, the historical data store <b>524</b> may include scoring data (e.g., input data that the AI model previously processed and for which the AI model generated one or more inferences). In some embodiments, that AI model has been trained on at least some of the historical data stored in the historical data store.</p><p id="p-0123" num="0122">In steps <b>630</b>-<b>650</b>, the software test selection system <b>502</b> evaluates a set of tests T (e.g., all available tests for the software under development, or a subset thereof) to determine which tests to perform, which tests to automatically deploy, and which tests to skip. When determining whether to perform, deploy, or skip one or more tests, the system <b>502</b> may evaluate tests individually or in groups (e.g., &#x201c;suites&#x201d;) of two or more. For example, the system <b>502</b> may determine that a first test or suite of tests should be performed, that a second test or suite of tests should be deployed, and that a third tests or suite of tests should be skipped. The system's evaluation of the individual tests or suites of tests may be performed sequentially or in parallel.</p><p id="p-0124" num="0123">At step <b>630</b>, for each of the individual tests or suites of tests in the set of tests T, the AI model (e.g., software testing model <b>528</b>) predicts the outcome of performing the test (or test suite). For example, for a given test (or test suite), the AI model may generate a value (e.g., confidence score) indicating the predicted probability of the software passing the test (or test suite).</p><p id="p-0125" num="0124">The AI model's prediction may be provided to the system's test selector module <b>530</b>. The test selector module <b>530</b> may then compare the value generated by the AI model to a confidence threshold (or &#x201c;level&#x201d;) to generate a binary prediction as to whether the test (or test suite) will pass or fail. Any suitable confidence threshold may be used. In some embodiments, the confidence threshold is a probability value between 0.0 and 1.0. In some embodiments, the default value of the confidence threshold is between 0.55 and 0.95 (e.g., <b>0</b>.<b>75</b>). In some embodiments, the value of the confidence threshold may be set by a user of the software testing system. In some embodiments, the confidence threshold depends on the criticality of the associated tests. In some embodiments, the confidence threshold may be different for groups and/or categories of tests. In some embodiments, the confidence threshold may be different for different phases of testing (e.g., individual testing versus integration testing).</p><p id="p-0126" num="0125">At step <b>640</b>, if the test selector module <b>530</b> predicts, with confidence, that the test (or test suite) will pass (e.g., the AI model's predicted probability of the test or test suite passing is greater than or equal to the test selector module's confidence threshold), then the test selector module <b>530</b> may perform guard rail checking (step <b>640</b>) on the predicted passing test(s) Trp. As used herein, a &#x201c;guard rail&#x201d; may include one or more rules, heuristics, set of criteria, processes, and/or or systems configured to select one or more tests to validate a change to the software under development. If the application of one or more guard rails to a predicted passing test indicates that the predicted passing test is selected to validate the changes to the software, the test selector module <b>530</b> may designate the predicted passing test for actual deployment (e.g., place the test on a list of tests to be performed) or automatic deployment (e.g., place the test on a list of tests to be automatically deployed). The system may automatically deploy a predicted passing test by adding an entry in the testing logs for the software under development indicating that the test was selected and predictively passed, rather than actually performing the predicted passing test on the changed software. If a predicted passing test is not selected by the guard rails to validate the changes to the software, the test selector module may skip the test rather than actually or automatically deploying it.</p><p id="p-0127" num="0126">Some non-limiting examples of guard rails may include a rule-based test selection system, the rules applied by a rule-based test selection system, a test selection blacklist, a test selection whitelist, a user interface (UX) for manually selecting tests, etc. For example, if the rules of a rule-based test selection system indicate that one or more of the predicted passing tests (or test suites) should be performed to validate the changes to the software under development, the test selector module <b>530</b> may designate those tests for actual or automatic deployment. As another example, the test selector module <b>530</b> may cross-check the predicted passing tests TPP against a blacklist or whitelist of files in the software development project. If a predicted passing test relates to validation of a file listed on the blacklist, the test selector module <b>530</b> may select the test for actual or automatic deployment rather than skipping it. Likewise, if a predicted passing test relates to validation of a file not listed on the whitelist, the test selector module <b>530</b> may select the test for actual or automatic deployment rather than skipping it.</p><p id="p-0128" num="0127">As yet another example, the test selector module <b>530</b> may present a test selection user interface (UX) whereby a user (e.g., developer) can provide input directing the system to override the current designation of a test (as being selected for actual deployment, automatic deployment, or skipped). For example, the UX may identify one or more (e.g., all) predicted passing tests, describe the AI model's prediction with respect to the test (e.g., the confidence score generated by the AI model for the test), indicate the outcomes of any other guard rail checks applied to the test, indicate the test's current designation, etc. Through the user interface, the user may provide input related to the designations of one or more of the predicted passing tests. Based on such input, the system may change the designation of one or more of the predicted passing tests. In some embodiments, when the user provides input via the UX requesting a change to a test's designation, the system may permit the requested change to the test's designation only if that change decreases the testing risk (e.g., if the requested change in designation is from &#x201c;skipped&#x201d; to &#x201c;actual deployment&#x201d; or &#x201c;automatic deployment&#x201d;, or from &#x201c;automatic deployment&#x201d; to &#x201c;actual deployment&#x201d;), while prohibiting any change to a test's designation that increases the testing risk (e.g., a change in designation from &#x201c;actual deployment&#x201d; to &#x201c;automatic deployment&#x201d; or &#x201c;skipped&#x201d;, or from &#x201c;automatic deployment&#x201d; to &#x201c;skipped&#x201d;).</p><p id="p-0129" num="0128">The test selector module <b>530</b> may be configured to apply all available guard rails to all predicted passing tests T<sub>PP</sub>, or to selectively apply the available guard rails to specific predicted passing tests TPP based on suitable criteria. For example, the test selector module <b>530</b> may apply rules-based guard rails, blacklist-based guard rails, and/or whitelist-based guard rails to all predicted passing tests. In some embodiments, the test selector module <b>530</b> may permit a user to override the system's designation of a test through the test selection user interface only if the user is a project manager or has been delegated the rights to override the system's test designations by a project manager.</p><p id="p-0130" num="0129">At step <b>650</b>, if the test selector module <b>530</b> predicts that a test (or test suite) will fail (e.g., the prediction is not greater, e.g., lower than the confidence threshold), then the test selector module <b>650</b> may designate the test for actual deployment (e.g., select the test for software testing).</p><p id="p-0131" num="0130">At step <b>660</b>, the software test selection system <b>502</b> may send information in one or more communications regarding test selection (for example, details of costs and run times) to notify desired target users, such as project planners. For example, the system may send a digital communication to a client device or present a user interface on the client device, which may (1) identify the available tests, (2) indicate which tests were predicted to pass by the test selector module <b>530</b>, (3) indicate the confidence score generated by the AI model for each test, (4) identify the designation assigned to each test by the system (e.g., &#x201c;skipped,&#x201d; &#x201c;automatically deployed,&#x201d; or &#x201c;actually deployed&#x201d;), (5) identify any overrides of the test designations made in response to user input, (6) provide an estimate of the cost and run time of the tests selected for actual deployment, (7) provide an estimate of the cost savings and run time reduction associated with the automatic deployment (rather than actual deployment) of the tests selected for automatic deployment, etc.</p><p id="p-0132" num="0131">At step <b>670</b>, the system may perform the tests designated for actual deployment, and store the test results in the historical database.</p><p id="p-0133" num="0132">As described above, in some embodiments, the system may override the test selector module's designations for one or more tests based on user input received via the test selection UX. For example, a software development engineering may provide input via the test selection UX instructing the system to override a test's designation as &#x201c;skipped&#x201d; or &#x201c;automatically deployed&#x201d; in favor of actual deployment if the engineer believes the PR requires it (e.g., a critical part of functionality with complex interactions).</p><p id="p-0134" num="0133">In some embodiments, as software is constantly being developed with the addition of new features, data drift may happen quite quickly. For example, for each software release, there may be significant drift in the training data because each release tends to focus on different features of the platform, which means that the text of the pull requests and/or other data may vary significantly from one release to the next. To resolve this challenge, at step <b>624</b>, the software testing systems and method in the present disclosed embodiments may include an automatic model re-trainer that is linked to project planning software release dates. For each release cycle, the model re-trainer may be triggered and the system may collect the data from the historical test database and builds a new model ready for the next cycle.</p><p id="p-0135" num="0134">The method can include receiving, by the data processing system, the request via a graphical user interface presented on a client device remote from the data processing system. The method can include providing, by the data processing system via the graphical user interface, the indication of the selected subset of the plurality of tests.</p><p id="p-0136" num="0135">The method can include identifying, by the data processing system, the data stored in the one or more repositories can include at least one of pull request data, issue tracker information, or changed files data. The method can include generating, by the data processing system based at least in part on the data, a plurality of features for the version of the application. The method can include determining, by the data processing system based on the plurality of features and via the model, the score for each of the plurality of tests configured to test performance of the version of the application.</p><p id="p-0137" num="0136">The method can include identifying, by the data processing system, the data stored in the one or more repositories can include a number of lines of code in the version of the application that have changed relative to the prior version of the application. The method of can include identifying, by the data processing system from the historical data, a plurality of features. The method can include training, by the data processing system, the model via the machine learning based on the plurality of features and the historical data. The method can include determining, by the data processing system, the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes.</p><p id="p-0138" num="0137">The method can include comparing, by the data processing system, the score for each of the plurality of tests with a threshold, the score indicating a likelihood that a test of the plurality of tests passes. The method can include grouping, by the data processing system based on the comparison, the plurality of tests into the subset of the plurality of tests and a second subset of the plurality of tests that is different from the subset of the plurality of tests. The method can include assigning, by the data processing system, a first action to perform for the subset of the plurality of tests. The method can include assigning, by the data processing system, a second action to perform for the second subset of the plurality of tests, the second action different from the first action.</p><p id="p-0139" num="0138"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram of a model deployment system, according to some embodiments. A data analytics model deployment system <b>700</b> may include a feature extraction module <b>720</b>, a data preparation and feature engineering module <b>740</b>, a model management and monitoring module <b>770</b>, and an interpretation module <b>780</b>. In some embodiments, the model deployment system <b>700</b> receives raw inference data <b>710</b> and processes it using one or more models (e.g., machine learning models, etc.) to solve a problem in a domain of data analytics. The inference data <b>710</b> may include spatial data, image data, numeric data, categorical data, text data, and other suitable data. Some embodiments of the components and functions of the model deployment system <b>700</b> are described in further detail below.</p><p id="p-0140" num="0139">The feature extraction module <b>720</b> may perform data pre-processing and feature extraction on the raw interface data <b>710</b>, and provide the extracted features to the data preparation and feature engineering module <b>740</b> as feature candidates <b>732</b> within a processed inference dataset <b>730</b>. The extracted features may include attributes of objects represented by the raw interface data <b>710</b>,</p><p id="p-0141" num="0140">The data preparation and feature engineering module <b>740</b> may perform data preparation and/or feature engineering operations on the processed inference data <b>730</b>. Some embodiments of suitable techniques for performing data preparation and feature engineering operations are described above with reference to data preparation and feature engineering module <b>340</b>.</p><p id="p-0142" num="0141">The model management and monitoring module <b>770</b> may manage the application of a model to the features <b>751</b> of the refined inference data <b>750</b>, thereby solving the data analytics problem and producing results <b>771</b> characterizing the solution.</p><p id="p-0143" num="0142">In some embodiments, the model management and monitoring module <b>770</b> may present (e.g., display) evaluations of models on client devices accessible to users. Such model evaluations may include feature importance scores of one or more features for one or more models. Presenting the feature importance scores in this manner may assist the user in understanding the relative performance of the evaluated models. For example, based on the presented feature importance scores, the user (or the system) may identify a top model M that is outperforming the other top models, and one or more features F that are important to the model M but not to the other top models. The user may conclude (or the system may indicate) that, relative to the other top models, the model M is making better use of the information represented by the features F.</p><p id="p-0144" num="0143">The interpretation module <b>780</b> may interpret the relationships between the results <b>771</b> (e.g., predictions) provided by the model deployment system <b>700</b> and the portions of the inference data (e.g., spatial data and/or non-spatial data) on which those results <b>771</b> are based, and may provide interpretations (or &#x201c;explanations&#x201d;) <b>781</b> of those relationships. In some embodiments, the interpretation module <b>780</b> may perform one or more of the operations described in Appendix A with reference to &#x201c;image model prediction explanations.&#x201d;</p><p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example computing apparatus. General-purpose computers, network appliances, mobile devices, or other electronic systems may also include at least portions of the computing apparatus <b>800</b>. The computing apparatus <b>800</b> includes a processor <b>810</b>, a memory <b>820</b>, a storage device <b>830</b>, and an input/output device <b>840</b>. Each of the components <b>810</b>, <b>820</b>, <b>830</b>, and <b>840</b> may be interconnected, for example, using a system bus <b>850</b>. The processor <b>810</b> is capable of processing instructions for execution within the computing apparatus <b>800</b>. In some implementations, the processor <b>810</b> is a single-threaded processor. In some implementations, the processor <b>810</b> is a multi-threaded processor. The processor <b>810</b> is capable of processing instructions stored in the memory <b>820</b> or on the storage device <b>830</b>.</p><p id="p-0146" num="0145">The memory <b>820</b> stores information within the computing apparatus <b>800</b>. In some implementations, the memory <b>820</b> is a non-transitory computer-readable medium. In some implementations, the memory <b>820</b> is a volatile memory unit. In some implementations, the memory <b>820</b> is a non-volatile memory unit.</p><p id="p-0147" num="0146">The storage device <b>830</b> is capable of providing mass storage for the computing apparatus <b>800</b>. In some implementations, the storage device <b>830</b> is a non-transitory computer-readable medium. In various different implementations, the storage device <b>830</b> may include, for example, a hard disk device, an optical disk device, a solid-date drive, a flash drive, or some other large capacity storage device. For example, the storage device may store long-term data (e.g., database data, file system data, etc.). The input/output device <b>840</b> provides input/output operations for the computing apparatus <b>800</b>. In some implementations, the input/output device <b>840</b> may include one or more of a network interface devices, e.g., an Ethernet card, a serial communication device, e.g., an RS-232 port, and/or a wireless interface device, e.g., an 802.11 card, a 3G wireless modem, or a 4G wireless modem. In some implementations, the input/output device may include driver devices configured to receive input data and send output data to other input/output devices, e.g., keyboard, printer and display devices <b>860</b>. In some examples, mobile computing devices, mobile communication devices, and other devices may be used.</p><p id="p-0148" num="0147">The one or more processors can receive the request via a graphical user interface presented on a client device remote from the data processing system. The one or more processors can provide, via the graphical user interface, the indication of the selected subset of the plurality of tests. The foregoing Summary is intended to assist the reader in understanding the present disclosure, and does not limit the scope of any of the claims.</p><p id="p-0149" num="0148">In some implementations, at least a portion of the approaches described above may be realized by instructions that upon execution cause one or more processing devices to carry out the processes and functions described above. Such instructions may include, for example, interpreted instructions such as script instructions, or executable code, or other instructions stored in a non-transitory computer readable medium. The storage device <b>830</b> may be implemented in a distributed way over a network, for example as a server farm or a set of widely distributed servers, or may be implemented in a single computing device.</p><p id="p-0150" num="0149">Although an example computing device has been described in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, embodiments of the subject matter, functional operations and processes described in this specification can be implemented in other types of digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more modules of computer program instructions encoded on a tangible nonvolatile program carrier for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.</p><p id="p-0151" num="0150">The term &#x201c;system&#x201d; may encompass all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. A processing system may include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). A processing system may include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.</p><p id="p-0152" num="0151">A computer program (which may also be referred to or described as a program, software, a software application, an engine, a pipeline, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a standalone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p><p id="p-0153" num="0152">The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).</p><p id="p-0154" num="0153">Computers suitable for the execution of a computer program can include, by way of example, general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. A computer generally includes a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.</p><p id="p-0155" num="0154">Computer readable media suitable for storing computer program instructions and data include all forms of nonvolatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p><p id="p-0156" num="0155">To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's user device in response to requests received from the web browser.</p><p id="p-0157" num="0156">Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;) and a wide area network (&#x201c;WAN&#x201d;), e.g., the Internet.</p><p id="p-0158" num="0157">The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.</p><p id="p-0159" num="0158">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, in some embodiments, a software testing system <b>900</b> includes at least one client <b>910</b> and at least one server <b>950</b>. The illustrative configuration is only for exemplary purposes, and it is intended that there can be any number of clients <b>910</b> and/or servers <b>950</b>. Each client <b>910</b> and each server <b>950</b> may be or include a computing apparatus <b>800</b> and/or a virtual machine.</p><p id="p-0160" num="0159">In some embodiments, software testing system <b>900</b> may perform one or more (e.g., all) steps of method <b>600</b>. In some embodiments, a client <b>910</b> may implement a user interface <b>918</b> of the software testing system <b>900</b>, the model development module <b>954</b> of a server <b>950</b> may implement or control a model development system <b>300</b>, the model deployment module <b>956</b> of a server <b>950</b> may implement or control a model deployment system <b>700</b>, and a software testing module <b>958</b> of a server <b>950</b> may implement or control a software testing platform <b>500</b>. However, embodiments are not limited by the manner in which the components of the software testing system <b>900</b> are distributed between client(s) <b>910</b> and server(s) <b>950</b>. For example, the server <b>950</b> can include software <b>952</b> at least partially implementing the model development module <b>954</b>, the model deployment module <b>956</b>, and the software testing module <b>958</b>. Furthermore, in some embodiments, all components of the software testing system <b>900</b> may be implemented on a single computing apparatus (instead of being distributed between one or more clients <b>910</b> and/or servers <b>950</b>.</p><p id="p-0161" num="0160">One or more communications networks <b>930</b> connect the client(s) <b>910</b> with the server(s) <b>950</b>. Some examples of communication networks are described above. The communication may take place via any media such as standard telephone lines, LAN or WAN links, broadband connections, wireless links, etc. Preferably, the network <b>930</b> can carry TCP/IP protocol communications, and data (e.g., HTTP/HTTPS requests, etc.) transmitted by client(s) <b>910</b> and server(s) <b>950</b> can be communicated over such TCP/IP networks. The type of network is not a limitation, however, and any suitable network may be used. Some non-limiting examples of networks that can serve as or be part of the communications network <b>930</b> include a wireless or wired Ethernet-based intranet, a local or wide-area network (LAN or WAN), and/or the global communications network known as the Internet, which may accommodate many different communications media and protocols.</p><p id="p-0162" num="0161">A client <b>910</b> may be implemented with software <b>512</b> running on hardware or a virtual machine. In some embodiments, the hardware may include a general-purpose computing device <b>800</b> (e.g., a desktop computer, laptop computer, mobile phone, tablet, etc.) or a special-purpose hardware device designed specifically to provide the functionality of a client <b>910</b>. In some embodiments, clients <b>910</b> can be operated and used for various activities including sending and receiving electronic mail, requesting and viewing content available over the Internet, or performing other tasks commonly done using a computer, handheld device, or mobile phone. Clients <b>910</b> can also be operated by users on behalf of others, such as employers, who provide the clients <b>910</b> to the users as part of their employment.</p><p id="p-0163" num="0162">In various embodiments, the software <b>912</b> of client <b>910</b> includes one or more applications <b>914</b> and/or a web browser <b>916</b>. The web browser <b>916</b> allows the client <b>910</b> to request a web page or other downloadable program, application, or document (e.g., from the server <b>950</b>) with a web-page request. One example of a web page is a data file that includes computer executable or interpretable information, graphics, sound, text, and/or video, that can be displayed, executed, played, processed, streamed, and/or stored and that can contain links, or pointers, to other web pages. In some embodiments, the web browser <b>916</b> and/or application(s) <b>914</b> may allow the client to access a user interface <b>918</b> for a software testing system <b>900</b>. Some examples of user interfaces (e.g., a test selection user interface) are described above.</p><p id="p-0164" num="0163">The server <b>950</b> interacts with the client <b>910</b>. The server <b>950</b> is preferably implemented on one or more server-class computers that have sufficient memory, data storage, and processing power and that run a server-class operating system. System hardware and software other than that specifically described herein may also be used, depending on the capacity of the device and the size of the user base. For example, the server <b>950</b> may be or may be part of a logical group of one or more servers such as a server farm or server network. As another example, there may be multiple servers <b>950</b> associated with or connected to each other, or multiple servers may operate independently, but with shared data. In a further embodiment and as is typical in large-scale systems, application software can be implemented in components, with different components running on different server computers, on the same server, or some combination.</p><p id="p-0165" num="0164">In some embodiments, server <b>950</b> includes or is communicatively coupled to one or more data storage apparatus <b>970</b>. For example, the data storage apparatus <b>970</b> can include at least a first data storage apparatus <b>970</b><i>a </i>and a second data storage apparatus <b>970</b><i>n</i>. For example, the data storage apparatus <b>970</b> can include any number of data storage apparatuses <b>970</b><i>a</i>-<i>n </i>in accordance with a local or distributed data storage architecture. In some embodiments, server <b>950</b> may communicate the outputs of the software testing module <b>958</b> to the client <b>910</b>. One or more (e.g., each) of the modules described throughout the specification (e.g., the modules of a model development system <b>300</b>, a model deployment system <b>700</b>, and/or a software testing platform <b>500</b>) can be implemented in whole or in part as software program using any suitable programming language or languages and/or as a hardware device (e.g., ASIC, FPGA, processor, memory, storage and the like).</p><p id="p-0166" num="0165">At least one aspect is directed to an automated software testing method. The method can include receiving, by a software test selection system, a request to test software The method can include generating, by a data preparation module of the software test selection system, a plurality of model features based on data associated with the request The method can include generating, by a machine-learned software testing model of the software test selection system, a plurality of predictive values indicating whether each of a plurality of tests is predicted to pass, where the machine-learned software testing model generates the plurality of predictive values based on the model features The method can include selecting, by a test selector module of the software test selection system, first and second subsets of the plurality of tests based on the plurality of predictive values The method can include initiating, by the software test selection system, performance of the second subset of tests.</p><p id="p-0167" num="0166">The method can include the data associated with the request provided by an automated software testing platform and/or a code management system.</p><p id="p-0168" num="0167">The method can include obtaining the data associated with the request, where obtaining at least a portion of the data associated with the request includes automatically extracting, by the data preparation module of the software test selection system, one or more test run logs from the automated software testing platform.</p><p id="p-0169" num="0168">The method can include storing the generated model features in a data store.</p><p id="p-0170" num="0169">The method can include the data store that includes training data for the machine-learned software testing model.</p><p id="p-0171" num="0170">The method can include the data store that includes scoring data for the machine-learned software testing model.</p><p id="p-0172" num="0171">The method can include selecting the first and second subsets of the tests by at least comparing the plurality of predictive values to a confidence threshold. The method can include selecting, as the first subset of the tests, one or more tests for which the corresponding predictive values from the plurality of predictive values are greater than or equal to the confidence threshold, where the first subset of tests are predicted to pass The method can include applying guard rail checking to the first subset of tests The method can include selecting, as the second subset of the tests, one or more tests for which the corresponding predictive values from the plurality of predictive values are lower than the confidence threshold.</p><p id="p-0173" num="0172">The method can include applying the guard rail checking to the first subset of tests by at least selecting one or more tests in the first subset of tests for automatic deployment.</p><p id="p-0174" num="0173">The method can include at least one of the tests selected for automatic deployment based on application of one or more rules, a blacklist of files, or a whitelist of files.</p><p id="p-0175" num="0174">The method can include applying the guard rail checking to the first subset of tests by at least presenting, on a client device, a user interface including one or more user interface components for designating one or more tests to be skipped, automatically deployed, or actually deployed. The method can include at least one of the tests selected for automatic deployment is selected based on user input received via the user interface.</p><p id="p-0176" num="0175">The method can include initiating performance of the second subset of tests The method can include obtaining test results of the second subset of tests The method can include storing the test results in a datastore.</p><p id="p-0177" num="0176">The method can include the plurality of predictive values including a plurality of respective quantitative values.</p><p id="p-0178" num="0177">At least one aspect is directed to an automated software testing system, including a processor, a memory, and one or more modules stored in the memory and executable by the processor to perform operations. The processor can perform operations including receiving a request to test software The processor can perform operations including generating a plurality of model features based on data associated with the request The processor can perform operations including generating, by a machine-learned software testing model, a plurality of predictive values indicating whether each of a plurality of tests is predicted to pass, where the machine-learned software testing model generates the plurality of predictive values based on the model features The processor can perform operations including selecting first and second subsets of the plurality of tests based on the plurality of predictive values. The processor can perform operations including initiating performance of the second subset of tests.</p><p id="p-0179" num="0178">The system can include the data associated with the request provided by an automated software testing platform and/or a code management system.</p><p id="p-0180" num="0179">The processor can perform operations including obtaining the data associated with the request, and where obtaining at least a portion of the data associated with the request includes automatically extracting one or more test run logs from the automated software testing platform.</p><p id="p-0181" num="0180">The processor can perform operations including storing the generated model features in a data store in the memory.</p><p id="p-0182" num="0181">The system can include the data store with training data and/or scoring data for the machine-learned software testing model.</p><p id="p-0183" num="0182">The processor can perform operations including selecting the first and second subsets of the tests by at least comparing the plurality of predictive values to a confidence threshold. The processor can perform operations including selecting the first and second subsets of the tests by at least selecting, as the first subset of the tests, one or more tests for which the corresponding predictive values from the plurality of predictive values are greater than or equal to the confidence threshold, where the first subset of tests are predicted to pass. The processor can perform operations including selecting the first and second subsets of the tests by at least applying guard rail checking to the first subset of tests. The processor can perform operations including selecting the first and second subsets of the tests by at least selecting, as the second subset of the tests, one or more tests for which the corresponding predictive values from the plurality of predictive values are lower than the confidence threshold.</p><p id="p-0184" num="0183">The processor can perform operations including applying the guard rail checking to the first subset of tests by at least selecting one or more tests in the first subset of tests for automatic deployment.</p><p id="p-0185" num="0184">The system can include at least one of the tests selected for automatic deployment based on application of one or more rules, a blacklist of files, or a whitelist of files.</p><p id="p-0186" num="0185">The system can include a client device, where applying the guard rail checking to the first subset of tests includes presenting, on the client device, a user interface including one or more user interface components for designating one or more tests to be skipped, automatically deployed, or actually deployed. The system can include at least one of the tests selected for automatic deployment based on user input received via the user interface.</p><p id="p-0187" num="0186">The processor can perform operations including initiating performance of the second subset of tests. The processor can perform operations including obtaining test results of the second subset of tests. The processor can perform operations including storing the test results in a datastore.</p><p id="p-0188" num="0187">At least one aspect is directed to a non-transitory computer readable medium storing instructions which, when executed by a processor, cause operations to be performed. The processor can perform operations including receiving, by a software test selection system, a request to test software. The processor can perform operations including generating, by a data preparation module of the software test selection system, a plurality of model features based on data associated with the request. The processor can perform operations including generating, by a machine-learned software testing model of the software test selection system, a plurality of predictive values indicating whether each of a plurality of tests is predicted to pass, where the machine-learned software testing model generates the plurality of predictive values based on the model features. The processor can perform operations including selecting, by a test selector module of the software test selection system, first and second subsets of the tests based on the plurality of predictive values. The processor can perform operations including initiating, by the software test selection system, performance of the second subset of tests.</p><p id="p-0189" num="0188">At least one aspect is directed to an automated software testing system with a display device, a processor, a memory, and one or more modules stored in the memory and executable by the processor to perform operations. The processor can perform operations including presenting, on the display device, a test selection user interface configured to identify one or more software tests and to indicate, for each of the software tests, a respective designation assigned to the software test by a software test selection system, where the designations indicate whether the corresponding tests are to be skipped, automatically deployed, or actually deployed, and where the test selection user interface is further configured to present a user interface component configured to receive user input relating to the designations assigned to the software tests. The processor can perform operations including receiving, via the user interface component, user input related to changing the designation assigned to a first test included in the software tests. The processor can perform operations including based on the user input, changing the designation assigned to the first test. The processor can perform operations including initiating performance of a subset of the software tests having the designation indicating that the respective software tests are to be actually deployed.</p><p id="p-0190" num="0189">In the system, the user input can relate to changing the designation assigned to the first test from a first designation indicating the first test is to be skipped to a second designation indicating the first test is to be automatically deployed.</p><p id="p-0191" num="0190">In the system, the user input can relate to changing the designation assigned to the first test from a second designation indicating the first test is to be automatically deployed to a third designation indicating the first test is to be actually deployed</p><p id="p-0192" num="0191">While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable sub-combination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a sub-combination or variation of a sub-combination.</p><p id="p-0193" num="0192">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p><p id="p-0194" num="0193">Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous. Other steps or stages may be provided, or steps or stages may be eliminated, from the described processes. Accordingly, other implementations are within the scope of the following claims.</p><p id="p-0195" num="0194">The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting.</p><p id="p-0196" num="0195">The term &#x201c;approximately&#x201d;, the phrase &#x201c;approximately equal to&#x201d;, and other similar phrases, as used in the specification and the claims (e.g., &#x201c;X has a value of approximately Y&#x201d; or &#x201c;X is approximately equal to Y&#x201d;), should be understood to mean that one value (X) is within a predetermined range of another value (Y). The predetermined range may be plus or minus 20%, 10%, 5%, 3%, 1%, 0.1%, or less than 0.1%, unless otherwise indicated.</p><p id="p-0197" num="0196">Measurements, sizes, amounts, etc. may be presented herein in a range format. The description in range format is merely for convenience and brevity and should not be construed as an inflexible limitation on the scope of the invention. Accordingly, the description of a range should be considered to have specifically disclosed all the possible subranges as well as individual numerical values within that range. For example, description of a range such as 10-20 inches should be considered to have specifically disclosed subranges such as 10-11 inches, 10-12 inches, 10-13 inches, 10-14 inches, 11-12 inches, 11-13 inches, etc.</p><p id="p-0198" num="0197">The indefinite articles &#x201c;a&#x201d; and &#x201c;an,&#x201d; as used in the specification and in the claims, unless clearly indicated to the contrary, should be understood to mean &#x201c;at least one.&#x201d; The phrase &#x201c;and/or,&#x201d; as used in the specification and in the claims, should be understood to mean &#x201c;either or both&#x201d; of the elements so conjoined, e.g., elements that are conjunctively present in some cases and disjunctively present in other cases. Multiple elements listed with &#x201c;and/or&#x201d; should be construed in the same fashion, e.g., &#x201c;one or more&#x201d; of the elements so conjoined. Other elements may optionally be present other than the elements specifically identified by the &#x201c;and/or&#x201d; clause, whether related or unrelated to those elements specifically identified. Thus, as a non-limiting example, a reference to &#x201c;A and/or B&#x201d;, when used in conjunction with open-ended language such as &#x201c;comprising&#x201d; can refer, in one embodiment, to A only (optionally including elements other than B); in another embodiment, to B only (optionally including elements other than A); in yet another embodiment, to both A and B (optionally including other elements); etc.</p><p id="p-0199" num="0198">As used in the specification and in the claims, &#x201c;or&#x201d; should be understood to have the same meaning as &#x201c;and/or&#x201d; as defined above. For example, when separating items in a list, &#x201c;or&#x201d; or &#x201c;and/or&#x201d; shall be interpreted as being inclusive, e.g., the inclusion of at least one, but also including more than one, of a number or list of elements, and, optionally, additional unlisted items. Only terms clearly indicated to the contrary, such as &#x201c;only one of or &#x201c;exactly one of,&#x201d; or, when used in the claims, &#x201c;consisting of,&#x201d; will refer to the inclusion of exactly one element of a number or list of elements. In general, the term &#x201c;or&#x201d; as used shall only be interpreted as indicating exclusive alternatives (e.g. &#x201c;one or the other but not both&#x201d;) when preceded by terms of exclusivity, such as &#x201c;either,&#x201d; &#x201c;one of&#x201d; &#x201c;only one of&#x201d; or &#x201c;exactly one of.&#x201d; &#x201c;Consisting essentially of,&#x201d; when used in the claims, shall have its ordinary meaning as used in the field of patent law.</p><p id="p-0200" num="0199">As used in the specification and in the claims, the phrase &#x201c;at least one,&#x201d; in reference to a list of one or more elements, should be understood to mean at least one element selected from any one or more of the elements in the list of elements, but not necessarily including at least one of each and every element specifically listed within the list of elements and not excluding any combinations of elements in the list of elements. This definition also allows that elements may optionally be present other than the elements specifically identified within the list of elements to which the phrase &#x201c;at least one&#x201d; refers, whether related or unrelated to those elements specifically identified. Thus, as a non-limiting example, &#x201c;at least one of A and B&#x201d; (or, equivalently, &#x201c;at least one of A or B,&#x201d; or, equivalently &#x201c;at least one of A and/or B&#x201d;) can refer, in one embodiment, to at least one, optionally including more than one, A, with no B present (and optionally including elements other than B); in another embodiment, to at least one, optionally including more than one, B, with no A present (and optionally including elements other than A); in yet another embodiment, to at least one, optionally including more than one, A, and at least one, optionally including more than one, B (and optionally including other elements); etc.</p><p id="p-0201" num="0200">The use of &#x201c;including,&#x201d; &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; &#x201c;containing,&#x201d; &#x201c;involving,&#x201d; and variations thereof, is meant to encompass the items listed thereafter and additional items.</p><p id="p-0202" num="0201">Use of ordinal terms such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., in the claims to modify a claim element does not by itself connote any priority, precedence, or order of one claim element over another or the temporal order in which acts of a method are performed. Ordinal terms are used merely as labels to distinguish one claim element having a certain name from another element having a same name (but for use of the ordinal term), to distinguish the claim elements.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising:<claim-text>a data processing system comprising memory and one or more processors to:</claim-text><claim-text>receive a request to test performance of a version of an application;</claim-text><claim-text>identify, responsive to the request, data stored in one or more repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application;</claim-text><claim-text>determine, based on the data and via a model trained using machine learning with historical data associated with one or more applications tested or deployed before receipt of the request to test performance of the version, and without execution of a plurality of tests, a score for each of the plurality of tests configured to test performance of the version of the application;</claim-text><claim-text>select, based at least in part on the score for each of the plurality of tests, a subset of the plurality of tests to execute; and</claim-text><claim-text>provide an indication of the selected subset of the plurality of tests to cause execution of the subset of the plurality of tests to evaluate performance of the version of the application prior to deployment of the version of the application.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>receive the request via a graphical user interface presented on a client device remote from the data processing system; and</claim-text><claim-text>provide, via the graphical user interface, the indication of the selected subset of the plurality of tests.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>identify the data stored in the one or more repositories comprising at least one of pull request data, issue tracker information, or changed files data;</claim-text><claim-text>generate, based at least in part on the data, a plurality of features for the version of the application; and</claim-text><claim-text>determine, based on the plurality of features and via the model, the score for each of the plurality of tests configured to test performance of the version of the application.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>the data processing system to identify the data stored in the one or more repositories comprising a number of lines of code in the version of the application that have changed relative to the prior version of the application.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>identify, from the historical data, a plurality of features; and</claim-text><claim-text>train the model via the machine learning based on the plurality of features and the historical data.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>perform pre-processing on raw data associated with the historical data; and</claim-text><claim-text>generate the plurality of features based on the pre-processed raw data.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>the data processing system to determine the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>compare the score for each of the plurality of tests with a threshold;</claim-text><claim-text>group, based on the comparison, the plurality of tests into the subset of the plurality of tests and a second subset of the plurality of tests that is different from the subset of the plurality of tests;</claim-text><claim-text>assign a first action to perform for the subset of the plurality of tests; and</claim-text><claim-text>assign a second action to perform for the second subset of the plurality of tests, the second action different from the first action.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first action corresponds to execution of the test, and the second action corresponds to skipping the test or automatic deployment of the test.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>determine the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes; and</claim-text><claim-text>select the subset of the plurality of tests based on the score of the subset of the plurality of tests less than a threshold.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising the data processing system to:<claim-text>determine the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes;</claim-text><claim-text>select a second subset of the plurality of tests based on the score of the second subset of the plurality of tests greater than a threshold; and</claim-text><claim-text>skip execution of the second subset of the plurality of tests to reduce computing resource utilization associated with performance testing of the version of the application, wherein the subset of the plurality of tests is less than the plurality of the tests.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A method, comprising:<claim-text>receiving, by a data processing system comprising memory and one or more processors, a request to test performance of a version of an application;</claim-text><claim-text>identifying, by the data processing system, responsive to the request, data stored in one or more repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application;</claim-text><claim-text>determining, by the data processing system, based on the data and via a model trained using machine learning with historical data associated with one or more applications tested or deployed before receipt of the request to test performance of the version, and without execution of a plurality of tests, a score for each of the plurality of tests configured to test performance of the version of the application;</claim-text><claim-text>selecting, by the data processing system based at least in part on the score for each of the plurality of tests, a subset of the plurality of tests to execute; and</claim-text><claim-text>providing, by the data processing system, an indication of the selected subset of the plurality of tests to cause execution of the subset of the plurality of tests to evaluate performance of the version of the application prior to deployment of the version of the application.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, comprising:<claim-text>receiving, by the data processing system, the request via a graphical user interface presented on a client device remote from the data processing system; and</claim-text><claim-text>providing, by the data processing system via the graphical user interface, the indication of the selected subset of the plurality of tests.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, comprising:<claim-text>identifying, by the data processing system, the data stored in the one or more repositories comprising at least one of pull request data, issue tracker information, or changed files data;</claim-text><claim-text>generating, by the data processing system based at least in part on the data, a plurality of features for the version of the application; and</claim-text><claim-text>determining, by the data processing system based on the plurality of features and via the model, the score for each of the plurality of tests configured to test performance of the version of the application.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, comprising:<claim-text>identifying, by the data processing system, the data stored in the one or more repositories comprising a number of lines of code in the version of the application that have changed relative to the prior version of the application.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, comprising:<claim-text>identifying, by the data processing system from the historical data, a plurality of features; and</claim-text><claim-text>training, by the data processing system, the model via the machine learning based on the plurality of features and the historical data.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, comprising:<claim-text>determining, by the data processing system, the score for each of the plurality of tests, the score indicating a likelihood that a test of the plurality of tests passes.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, comprising:<claim-text>comparing, by the data processing system, the score for each of the plurality of tests with a threshold, the score indicating a likelihood that a test of the plurality of tests passes;</claim-text><claim-text>grouping, by the data processing system based on the comparison, the plurality of tests into the subset of the plurality of tests and a second subset of the plurality of tests that is different from the subset of the plurality of tests;</claim-text><claim-text>assigning, by the data processing system, a first action to perform for the subset of the plurality of tests; and</claim-text><claim-text>assigning, by the data processing system, a second action to perform for the second subset of the plurality of tests, the second action different from the first action.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A non-transitory computer-readable medium storing instructions that, when executed by one or more processors, cause the one or more processors to:<claim-text>receive a request to test performance of a version of an application;</claim-text><claim-text>identify, responsive to the request, data stored in one or more repositories that indicate changes in the version of the application relative to a prior version of the application tested or deployed before receipt of the request to test the performance of the version of the application;</claim-text><claim-text>determine, based on the data and via a model trained using machine learning with historical data associated with one or more applications tested or deployed before receipt of the request to test performance of the version, and without execution of a plurality of tests, a score for each of the plurality of tests configured to test performance of the version of the application;</claim-text><claim-text>select, based at least in part on the score for each of the plurality of tests, a subset of the plurality of tests to execute; and</claim-text><claim-text>provide an indication of the selected subset of the plurality of tests to cause execution of the subset of the plurality of tests to evaluate performance of the version of the application prior to deployment of the version of the application.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the instructions further comprise instructions to:<claim-text>receive the request via a graphical user interface presented on a client device remote from the data processing system; and</claim-text><claim-text>provide, via the graphical user interface, the indication of the selected subset of the plurality of tests.</claim-text></claim-text></claim></claims></us-patent-application>