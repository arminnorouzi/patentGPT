<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004399A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004399</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17783577</doc-number><date>20201209</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="regional"><country>EP</country><doc-number>19214499.6</doc-number><date>20191209</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4401</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>01</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>38</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>79</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4415</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>011</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>385</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>79</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>602</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2213</main-group><subgroup>0042</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD FOR CONFIGURING AN EMBEDDED DEVICE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only"><addressbook><orgname>SPINELLIS, Diomidis</orgname><address><city>Athens</city><country>GR</country></address></addressbook><residence><country>GR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Spinellis</last-name><first-name>Diomidis</first-name><address><city>Athens</city><country>GR</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/EP2020/085319</doc-number><date>20201209</date></document-id><us-371c12-date><date>20220608</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Configuring an embedded device of a first type by means of a host device. The embedded device comprises a computing unit to provide configurable functionality according to input configuration items. The host device comprises an operating system to provide a means for communication with a number of predetermined types of embedded devices. The method includes coupling, via a coupling unit, the embedded device with the host device, including identifying the embedded device to the host device as a second type of device different from the first type or that operates in a different manner from the first type and is comprised of the predetermined types of embedded devices. The method includes presenting or offering a means for entering, retrieving, and supplying configuration items to the embedded device and receiving the configuration items by the computing unit, and performing configuration of the embedded device according to the received configuration items.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="210.82mm" wi="145.29mm" file="US20230004399A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="210.82mm" wi="154.26mm" file="US20230004399A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="216.92mm" wi="151.38mm" file="US20230004399A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a U.S. national phase of International Patent Application No. PCT/EP2020/085319 filed on Dec. 9, 2020, which claims priority to European Patent Application No. 19214499.6, filed in Europe on Dec. 9, 2019. The entire contents of both applications are hereby incorporated herein by this reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">DESCRIPTION</heading><p id="p-0003" num="0002">The present invention relates to a method for configuring an embedded device of a specific(first) type in a computing environment by means of a host device, wherein the embedded device comprises a computing unit, which is adapted to provide configurable functionality according to externally input configuration items, and the host device comprises an operating system running thereon, wherein the operating systems provides respective means for communication with embedded devices. Furthermore, the invention relates to a computer-readable storage medium, comprising instructions for performing such a method, an embedded device for performing such a method and a system comprising the embedded device and a host device.</p><p id="p-0004" num="0003">It has previously been known to have a host device in a computing environment communicate with embedded devices by means of dedicated communication protocols on application or operating system level, which requires the installation and execution of specialized software or drivers. Such an installation of specialized software and its subsequent maintenance can be cumbersome for end users who generally expect their newly acquired devices to work straight away without any additional steps to be taken. Additionally, this approach is challenging when mismatched operating systems (Windows, Android, MacOS, Linux etc.) and/or mismatched software applications are used, and also since enterprise users typically lack the administrative access to install the required software on their devices, while outdated software or even incompatible versions of the same software can be prohibitive for smooth access to the dedicated communication channels.</p><p id="p-0005" num="0004">On the other hand, it is well established that all commonly used operating systems for host devices inherently offer communication functionality for certain basic types of peripheral devices, such as file systems, keyboards and printers, without the need of additional software to be installed and running under the respective operating system. However, these communication channels are currently often useless for more specialized devices which usually require the above mentioned additional drivers or software applications to be properly addressed and configured by means of a host device.</p><p id="p-0006" num="0005">It is therefore an object of the present invention to provide a novel method for configuring an embedded device that eliminates the need for dedicated driver or software application installation and execution and thus constitutes a platform-independent, reliable and intuitive way of configuring a wide array of embedded devices.</p><p id="p-0007" num="0006">In order to achieve this object, the method according to the invention comprises the following steps:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0007">coupling the embedded device with the host device, wherein the computing unit identifies the embedded device to the host device as a second type of device, wherein the second type may be different from the first type or operate differently from the first type and is comprised of predetermined types of devices;</li>        <li id="ul0002-0002" num="0008">presenting or enabling a user of the host device with a means for entering configuration items;</li>        <li id="ul0002-0003" num="0009">retrieving the configuration items entered by the user and supplying them to the embedded device by a means for communication with the second type of device provided by the operating system;</li>        <li id="ul0002-0004" num="0010">receiving the configuration items by the computing unit of the embedded device; and</li>        <li id="ul0002-0005" num="0011">performing configuration of the embedded device according to the received configuration items by the computing device.</li>    </ul>    </li></ul></p><p id="p-0008" num="0012">Thus, the invention relies on the inherent capabilities of all common operating systems to communicate with a finite number of certain basic types of peripheral devices, which in the present context are referred to as &#x201c;predetermined types&#x201d; of devices. In order to be able to use said communication channels, the embedded device cloaks its actual identity and identifies itself as a &#x201c;second type&#x201d; of device found among the predetermined devices and different from its actual first type. Based on said cloaked identity, the host device is capable of sending data to the embedded device using the communication protocol established for the selected device identity, which data in the context of the present invention will be referred to as &#x201c;configuration items&#x201d;. Said communication items will then be received by the computing unit of the embedded device which is able to extract the relevant information from the supplied data in order to perform the configuration of the embedded device. Thus, the method according to the invention may be considered to comprise an overloading of basic communication functions of the operating system originally reserved for basic peripheral devices in order to provide configuration items to embedded devices not originally supported by the operating devices without additional drivers or software application.</p><p id="p-0009" num="0013">Possible predetermined types of embedded devices, with which all common operating systems are able to communicate without additional drivers or software applications include printers, storage systems and keyboard lock indicators, such as Caps Lock or Num Lock. Examples for operating system level printer communication in turn include Ipr and CUPS commands found in different UNIX systems as well as the Print Spooler API functionality of Windows systems. In a similar manner, storage systems and keyboard lock indicators also have their respective sets of commands and communication channels readily available across different operating systems. Further possible examples of predetermined types of embedded devices may be known to the person skilled in the art or may even be established in the future. In any case, the computing unit of the embedded device in order to be able to perform the method according to the invention has to be able to identify the embedded device to the host device as one of the predetermined types of devices and to receive and process data of the respective communication protocol.</p><p id="p-0010" num="0014">One additional example for a second type of device as which the computing unit may identify the embedded device to the host device may be a virtual file system, wherein the means for communication therewith comprise writing to a file or renaming a file or a directory stored in the virtual file system. Even though a virtual file system does not constitute a physical device as such, in the context of the present invention it may well serve as a predetermined type of device. Thus, in this example, the computing unit of the embedded device will typically present to the host device a virtual storage volume comprising directories and/or files, which may be manipulated by the host device in order to supply the configuration items to the computing unit of the embedded device by means of file system manipulation commands, from which said computing unit will extract the relevant information.</p><p id="p-0011" num="0015">In one particularly well-suited embodiment, the means for entering the configuration items may be constituted by a an interface allowing to rename a file or directory with the configuration items. Said interface may in turn be constituted by all suitable means known to the person skilled in the art such as command line access to file system commands for example provided by Unix command line interfaces or Windows power shell or higher level graphic file managers provided with most Linux distributions and versions of Windows and macOS.</p><p id="p-0012" num="0016">In some examples, the embedded device may be operable in at least two discrete operational states wherein the configurable functionality comprises toggling between the discrete operational states. Particular embodiments may comprise switching on and off certain functionalities of the embedded device and choosing between different operation modes or parameter sets for the operation of the embedded device. It has to be understood, however, that the present invention in its broadest sense is not limited to toggling between discrete states but may be used to configure arbitrary functionality of the embedded device.</p><p id="p-0013" num="0017">In some other examples of the method according to the invention, the configurable functionality of the embedded device may comprise a functionality with protected access and the configuration items may comprise access details, wherein in an unlocked state of the embedded device access to the functionality is granted and in a locked state of the embedded device access to the functionality is denied, wherein the computing unit of the embedded device verifies the received access details against preset access details in order to unlock the embedded device, wherein preferably the computing unit based on the received configuration items furthermore performs at least one of initially presetting the access details, locking the embedded device and resetting the embedded device to its initial state.</p><p id="p-0014" num="0018">Thus, in said examples, the method according to the invention may for example serve as a means to provide a passphrase or similar access credentials constituting the configuration items to the embedded device upon which the computing unit of the embedded device may enter an unlocked state and provide access to a formerly denied functionality. Even though different communication channels as explained above may be used for providing this kind of configuration, a particularly suited second type of device may be given by the above-mentioned virtual file system with the functionality of renaming a file or directory with the configuration items. One concrete embodiment in the form of a secure removable storage will be explained below in greater detail.</p><p id="p-0015" num="0019">Said exemplary concrete embodiment comprises a storage unit as the embedded device and its configurable functionality is accessing data stored in the storage unit, wherein preferably the data is stored in an encrypted manner and the accessing thereof comprises decrypting the data and/or wherein preferably the accessing of the data comprises a transfer of the data, for example by means of the Media Transfer Protocol or the USB Mass Storage Access Protocol. It has to be kept in mind that in said embodiment, the physical storage unit serves as the first type of embedded device while a virtual file system may serve as the second type of device as explained above. Thus, in this particular as well as in related embodiments, physical storage devices and virtual file systems are to be explicitly considered different types of devices.</p><p id="p-0016" num="0020">In order to provide a more intuitive user experience, the presenting a user of the host device with a means for entering configuration items may comprise presenting the user with instructions on how to enter the configuration items. Possible examples for this measure may include naming the second device as which the embedded device presents itself to the host device in a manner that the user can derive the operation principle of the means for entering the configuration items based on said name or in the case of the above-mentioned requesting to rename a file or directory of a virtual file system, the original name of the file or directory to be renamed may comprise human readable instructions for entering the respective configuration items.</p><p id="p-0017" num="0021">On the other hand, as an additional safety layer, the presenting a user of the host device with a means for entering configuration items may comprise obfuscating the configurable functionality to the user. Thus, in the example of providing a virtual file system for entering the configuration items by means of renaming files or directories, a large number of dummy files or directories may be provided amongst which only one or a few selected ones are designated for entering the configuration items such that security by obscurity or plausible deniability may be achieved in a sense that a user of the host device may not even be aware of the configurable functionality of the embedded device.</p><p id="p-0018" num="0022">According to another aspect, the present invention relates to a computer-readable storage medium, thereon comprising instructions which, when executed by a processor, perform the method of the present invention as outlined above. It shall be understood that said computer-readable storage medium may be of any type known to the person skilled in the art and that the computer-readable code comprising the instructions can be provided to a suitable embedded device in order to carry out the method according to the invention at any time before or after its first use.</p><p id="p-0019" num="0023">Furthermore, the invention relates to an embedded device of a first type for performing a method according to the invention, comprising a coupling unit for coupling the embedded device to a host device and a computing unit, which is adapted to identify the embedded device to the host device as a second type of device, wherein the second type is different from the first type, receive the configuration items from the host device, and perform configuration of the embedded device according to the received configuration items.</p><p id="p-0020" num="0024">Possible embodiments of the embedded device comprise input devices, such as a configurable keyboard or a remote control, a wearable device, for example a health monitor device or a smartwatch, a configurable network device, and a removable storage device. Depending on the type of embedded device and the desired extent of configurability, the configuration items can be used to either toggle between at least two discrete operational states of the device or for a range of configurable access features.</p><p id="p-0021" num="0025">The coupling unit of the physical device may be adapted for physical coupling with the host device, wherein the coupling unit preferably comprises a USB protocol. However, different embodiments of the coupling device for physical coupling can be employed, and the embedded device may also be coupled to the host device in a wireless manner, for example via Bluetooth or similar wireless technologies.</p><p id="p-0022" num="0026">Lastly, the invention relates to a system for accessing configurable functionality on an embedded device according to the invention, comprising the embedded device and a host device comprising a processing unit, an operating device running thereon and an interface for interaction with a user. One of the main advantages of the present invention is the portability between different hardware and operating systems of the host device, such that it may be embodied by a wide variety of computing devices, including personal computers, portable computers and also mobile devices such as smartphones or tablets running all commonly used operating system such as Windows, macOS, Linux, Android, etc. The only requirements for the host device and its operating systems are the capability of coupling an embedded device thereto and communicating with at least one predetermined type of embedded device serving as the second device in the present invention.</p><p id="p-0023" num="0027">In an even more convenient embodiment, the operating system of the host device upon a detection of the coupling of the embedded device may perform a predetermined action based on the second type of device as which the embedded device presents itself to the host device. Said action can be triggered by AutoPlay, AutoRun or similar functionalities provided by many operating systems, which automatically examine newly discovered embedded devices and launch an appropriate application to play or display its content. In the above cited example of the second device being a virtual file system, said application may be a file manager or a similar application which may automatically be launched and displays icons for files or folders together with their names and offers a mechanism for renaming said files or folders.</p><p id="p-0024" num="0028">Alternatively, the user may be required to start a suitable application himself/herself in order to be able to rename the corresponding file or folder. It shall be stated in this context that said application does not necessarily have to be provided by the operating system since the present invention merely requires an operating level communication channel to the second type of embedded device such that the application may increase usability, yet the input by the user may for example simply be performed by pressing certain keys on a keyboard without a high-level application running.</p><p id="p-0025" num="0029">In order to clarify the scope and terminology of the present invention, a non-exclusive list of exemplary embodiments will be discussed in the following, in which the method and system of the invention can be incorporated in an especially beneficial manner.</p><heading id="h-0003" level="1">FIRST EXAMPLE</heading><p id="p-0026" num="0030">Presentation clickers are single-purpose remote controls which can be coupled to a host computer, e.g. via Bluetooth, in order to allow a user a hands-free scrolling between pages during presentations or speeches by means of a single pair of next/previous buttons. Since some software applications for this purpose require pressing the PgUp/PgDn-keys in order to select the next or the previous page and other software applications require the left/right-arrow keys, it can be desirable to enable the presentation clicker to switch between two configurable operation modes, in which it sends the respective PgUp/PgDn or left/right-arrow signal to the host computer upon pressing the respective button.</p><p id="p-0027" num="0031">In presentation clickers known in the art, either a hardware switch had to be incorporated in order to select between the two possible operation modes or a driver or dedicated software application had to be installed on a host computer in order to configure the clicker. With the present invention, an easier and faster method for said configuration becomes possible by employing communication channels and protocols already provided by all commonly used host device operating systems. For this purpose, upon coupling with the host device, e.g. by means of a USB cord or a wireless protocol such as Bluetooth, the device will not communicate with the host device as its actual first type of embedded device, in this case a two-button keyboard, but rather as a second type of device, in the present example a full-featured keyboard. Since all commonly used operating systems comprise means to communicate with keyboards including sending lock indicator signals to them based on which the NumLock, CapsLock and ScrollLock LEDs of the keyboards will be operated (lit), within the scope of the present invention, the means for entering communication items can be given by the customary keyboard of the host device, such that when the dedicated key (Scroll Lock, Num Lock or Caps Lock) for configuring the clicker is pressed on the host device keyboard (serving as the &#x201c;entering of the configuration items&#x201d; in the language of the present application), the host device will send a respective lock indicator signal to the clicker identifying itself as a full-featured keyboard. Now, the computing unit of the clicker is adapted to interpret said lock indicator signal as a command to switch between its two possible configurable operation modes, such that the configuration of the clicker can be completed without the need of any dedicated driver or software application for the clicker to be installed on the host computer.</p><heading id="h-0004" level="1">SECOND EXAMPLE</heading><p id="p-0028" num="0032">A second example for implementing the present invention may be embodied by a configurable health care device, such as a pulse rate monitor, which may be coupled to a host device wirelessly or by means of a USB cord and is adapted to identify itself to the host device as a printer.</p><p id="p-0029" num="0033">Using the basic printing capabilities provided by all commonly used operating systems, specially formatted pages may be &#x201c;printed&#x201d; to the health care device in such a manner that its computing unit will configure it according to the information provided on the printed pages. Examples for such configuration items may comprise allowed heart rate ranges outside of which the user will be notified or a minimum number of steps a user is supposed to walk per day before he/she will be notified of his/her success.</p><p id="p-0030" num="0034">In a modification of the second example, also a configurable network device might identify itself to a host computer as a printer and various configuration items such as white lists or black lists of permitted and non-permitted IP addresses or TCP/UDP ports or on/off flags concerning the network traffic as a whole may be sent to the device by means of the printer communication channel provided by the operating systems and specially formatted pages &#x201c;printed&#x201d; to the device. Still further modifications of the second example can include configurable keyboards and similar devices.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">THIRD EXAMPLE</heading><p id="p-0031" num="0035">In the following, a third embodiment of the present invention will be described in even more detail and making reference to the following drawings:</p><p id="p-0032" num="0036"><figref idref="DRAWINGS">FIG. <b>1</b></figref> a schematic view of a system for accessing securely stored data according to the invention;</p><p id="p-0033" num="0037"><figref idref="DRAWINGS">FIG. <b>2</b></figref> a state/flow diagram illustrating an embodiment of a method according to the invention; and</p><p id="p-0034" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b></figref> an embodiment of information displayed to a user on a screen of the host device in the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> when performing the method according to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0035" num="0039">The third example relates to a removable storage device for securely storing data, such as a USB flash drive or a portable hard disk drive. Such devices allow the effortless transferring of files between multiple computers avoiding the drawbacks and limitations often associated with online communication, such as e-mail file size limits, low bandwidth delays, eavesdropping risk, lack of connectivity or firewall restrictions as well as the requirement to rely on third-party providers of cloud storage, which are often associated with the risk of data loss, security breaches, regulatory compliance complications and substantial costs.</p><p id="p-0036" num="0040">However, storing data on removable storage devices in possession of individuals and organizations comes with risks associated with data confidentiality and integrity. A forgotten or misplaced removable storage device can disclose valuable data or even allow third parties to alter it. This is especially important when and, as often the case, the data concerns confidential and/or personal information. Possible leaks may expose individuals to identify theft or institutions to industrial espionage.</p><p id="p-0037" num="0041">In the past, security breaches have happened in which, solely through the loss of USB flash drives, personal details of thousands of private pension holders have occurred, while in another case, a USB flash drive was stolen with the names, grades and social security numbers of thousands of former students of a university. It has even occurred that USB flash drives with classified military information were found for sale in public market places both online and offline. A study sponsored by IBM has found in 2018 that the average cost of each data breach amounts to 2.86 million dollars.</p><p id="p-0038" num="0042">Previously, application-level or operating system-level encryption or other access control has been used in order to mitigate the above-described problems. However, additional burdens have been introduced by said access control methods, in particular both parties concerned with writing and reading the corresponding data need to have compatible access control or device driver software available or installed on their hardware. This approach is especially challenging when mismatched operating systems (Windows, Android, MacOS, Linux etc.) and/or mismatched software applications (BitLocker, DiskCryptor, VeraCrypt, GnuPG, 7-Zip, etc.) are used, and also since enterprise users typically lack the administrative access to install the required software on their devices, while outdated software or even incompatible versions of the same software can be prohibitive for smooth access to protected files on removable storage devices.</p><p id="p-0039" num="0043">As a somewhat more platform-independent measure, removable storage devices, such as USB flash drives, with native encryption have been introduced, but they either require proprietary drivers which suffer from the above-described compatibility problems or are supplied with a costly, cumbersome and unreliable embedded keyboard or an expensive and insecure biometric sensor.</p><p id="p-0040" num="0044">Using the method according to the present invention may overcome the above-identified problems and provide secure communication with the embedded device while neither requiring the installation and use of dedicated communication software nor the installation of driver software on a host device nor the embedding of a keyboard or biometric sensor on the embedded device itself.</p><p id="p-0041" num="0045">In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a schematic view of a system according to the invention is illustrated and generally denoted with reference numeral <b>10</b>. The system consists of a host device <b>100</b> and a removable storage device <b>200</b> acting as the embedded device in the sense of the invention, which are coupled by means of respective coupling units <b>102</b> and <b>202</b>. The coupling units <b>102</b> and <b>202</b> may for example be USB plug and socket or similar physical coupling arrangements, or in an alternative embodiment may also be wireless coupling units such as Bluetooth transceivers. The coupling units <b>102</b> and <b>202</b> communicate via the logical interface <b>301</b>, which presents the removable storage device <b>200</b> as a device of a first type, and the logical interface <b>302</b>, which presents the removable storage device <b>200</b> as a device of a second type.</p><p id="p-0042" num="0046">The host device <b>100</b> may for example be a personal computer which in addition to the coupling arrangement <b>102</b> comprises known components such as a processor <b>104</b> with a volatile memory in the form of random access memory <b>106</b> and a non-volatile memory <b>108</b> such as a hard disk drive.</p><p id="p-0043" num="0047">Furthermore, the host device <b>100</b> comprises peripheral devices such as a display unit <b>110</b> and input means <b>112</b> such as a keyboard and/or a mouse, wherein the display unit <b>110</b> and the input devices <b>112</b> provide an interface for interaction with a human user of the host device <b>100</b>. The host device <b>100</b> is running an operating system which is stored in its non-volatile memory <b>108</b> and uses the volatile memory <b>106</b> during run time. Said operating system provides both low-level and high-level functionalities, both of which are employed in embodiments of the present invention, in particular on the one hand the high-level abilities to display information to the user by means of the display device <b>110</b> and to retrieve input from the user by means of the input devices <b>112</b> and on the other hand the low-level abilities to manipulate files stored in both the physical storage units and virtual file systems, for example by writing to them or renaming them. In this context, the term &#x201c;file&#x201d; may also encompass directories or folders in different types of filesystems known in the art.</p><p id="p-0044" num="0048">On the other hand, the removable storage device <b>200</b> in addition to its coupling unit <b>202</b> also comprises a computing unit <b>204</b> which may be embodied by a microprocessor or microcontroller which associated thereto has a non-volatile memory such as an EEPROM <b>206</b> on which software to be run by the microprocessor <b>204</b> is stored in a non-volatile manner, wherein the microprocessor <b>204</b> furthermore has a volatile memory <b>208</b> associated thereto which is used by the microprocessor <b>204</b> during the runtime of said software.</p><p id="p-0045" num="0049">Additionally, the storage device also comprises a dedicated storage unit <b>210</b>, which can for example in turn comprise blocks of flash memory, on which large amounts of data can be stored, preferably in a protected manner, e.g. through encryption. Alternative implementations of the removable storage device <b>200</b> may combine the non-volatile memory <b>206</b> with the storage unit <b>210</b> such that software and data are stored in a common memory. Said data may have been copied to the storage unit of the removable storage device from the host unit <b>100</b> or any other compatible computing device already in a protected manner or it may have been protected during its transfer to the removable storage device from the host device <b>100</b> or any other compatible computing resource by the computing unit <b>204</b> of the storage device <b>200</b>.</p><p id="p-0046" num="0050">For the accessing of the protected data stored in the storage unit <b>210</b> of the removable storage device <b>200</b>, a method connected to the state/flow diagram shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> is employed, which embodies a method according to the present invention. For this purpose, the removable storage device <b>200</b> identifies to the host device <b>100</b> via the logical interface <b>302</b> as a virtual file system which serves as the second type of device in the sense of the invention, while the storage device <b>200</b> itself is of the first type of device.</p><p id="p-0047" num="0051">In state S<b>1</b>, the removable storage device <b>200</b> is not yet initialized and thus neither has protected data stored in its storage unit <b>210</b> nor access details defined, which will serve as a way for accessing the (protected) data. Thus, after its first coupling to a suitable host device <b>100</b>, which is illustrated by arrow S<b>2</b>, said host device <b>100</b> will cooperate with the computing unit <b>204</b> of the removable storage device in order to initialize the removable storage device <b>200</b> in the initialization step S<b>3</b>. For this purpose, in the present embodiment, the user will be presented an interface for configuring the access details of the storage device <b>200</b> in step S<b>4</b>, which will refer to the second type of device as which the storage device <b>200</b> identifies itself to the host device <b>100</b>. In the present example, the access details and all further information entered by the user will serve as configuration items in the sense of the present invention.</p><p id="p-0048" num="0052">In one embodiment discussed herein, the user will be presented a folder icon in a file manager application of the operating system of the host unit <b>100</b> on its display <b>110</b> in a similar manner as is shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> and discussed below which is the typical tool of the present operating system for allowing user operations on file systems, including the present virtual file system serving as second type of device. The user can now rename the folder with a suitable alphanumeric string which will be forwarded from the host device <b>100</b> to the computing unit <b>204</b> of the storage device <b>200</b> by means of basic file system manipulation functionality natively supported by the operating system of the host device <b>100</b>. In order to assist the user with said task, the folder to be renamed may initially have a name consisting of instructions on how to set a key-phrase in a similar manner as is shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> in connection with the entering of the access details at a later stage of the method. At this stage and by means of the method according to the invention, a simple access method (e.g. through a passphrase, password, or PIN) can be configured, or one or more operations can be used to configure more sophisticated access control, e.g. through user identifiers, passwords, roles, and corresponding access rights.</p><p id="p-0049" num="0053">The computing unit <b>204</b> of the storage device retrieves the alphanumeric string from the host device <b>100</b> and initializes the storage in a protected manner, for example by means of a symmetrical encryption key associated directly or indirectly with the provided access details. After said initialization step S<b>3</b>, the removable storage device <b>200</b> is initialized yet in a locked state, corresponding to state S<b>7</b> discussed below. In an alternative implementation, at this point, the removable storage device might also enter state S<b>10</b> as discussed below, in which it is ready to process secure data. In case the storage device <b>200</b> is uncoupled from the host device <b>100</b> before the key-phrase is properly set through the operation just described, it will return to its uninitialized state S<b>1</b> as illustrated by the corresponding dashed arrow.</p><p id="p-0050" num="0054">As soon as the coupling between the host device <b>100</b> and the initialized removable storage device <b>200</b> is cut once step S<b>4</b> has been performed, for example by physically disconnecting the coupling units <b>102</b> and <b>202</b> or in case the host device <b>100</b> is powered down, as illustrated by the corresponding dashed arrow, the storage device <b>200</b> enters, actively or by default, a locked state S<b>5</b>, in which access to the protected files is denied.</p><p id="p-0051" num="0055">After re-coupling the storage device <b>200</b> with the host device <b>100</b> in its initialized, yet locked state in step S<b>6</b>, the storage device will enter state S<b>7</b> and the user of the host device <b>100</b> will be presented the folder icon in the above-mentioned file manager application of the operating system of the host unit <b>100</b> on the display <b>110</b> as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, left side. The user may now enter access details serving as configuration items, e.g. by renaming the folder shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and the entered access details are forwarded from the host device <b>100</b> to the computing unit <b>204</b> of the storage device <b>200</b> by means of the basic file system manipulation functionality of the operating system of the host device <b>100</b> discussed above.</p><p id="p-0052" num="0056">Now, the computing unit <b>204</b> will again verify if the access details are compatible with those provided in step S<b>8</b>, e.g. by deriving the encryption key from the access details, and in case they can be correctly used to access the protected data (state S<b>9</b>), the storage device will enter state S<b>10</b> in which the storage device <b>200</b> is unlocked and data can be transferred thereto and retrieved therefrom by means of file transfer operations provided by the operating system of the host device <b>100</b> via the logical interface <b>301</b>, wherein the computing unit <b>204</b> of the removable storage device <b>200</b> may perform additional encryption and/or decryption operations during said file manipulation operations. <figref idref="DRAWINGS">FIG. <b>3</b></figref>, right side refers to such an unlocked state, in which the user can perform file manipulation operations by means of the file manager application of the operating system of the host device <b>100</b> as previously discussed. Similarly to state S<b>7</b>, if the storage device <b>200</b> gets uncoupled from the host device <b>100</b> while in state S<b>10</b>, the storage device <b>200</b> enters locked state S<b>5</b>, as illustrated by the corresponding dashed arrow, in which access to the protected files is denied.</p><p id="p-0053" num="0057">On the other hand, in case the entered and forwarded access details and the stored key-phrase in cannot be used to access the protected data in step S<b>8</b> (state S<b>11</b>), the user may again be presented the folder icon as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, left side, with its original name wherein additional safety measures can be taken, for example a maximum number of tries to enter the correct access details may be provided to the user before the removable storage device <b>200</b> permanently locks itself or wipes all stored data.</p><p id="p-0054" num="0058">Through the operating system level mechanisms discussed above, which in the present example are related to renaming dedicated files with suitable alphanumeric names serving as commands to the computing unit <b>204</b>, additional operations can be performed on the storage device <b>200</b>, such as wiping data or resetting the key-phrase while the storage device is in state S<b>7</b> (step S<b>13</b>) thus un-initializing the storage device <b>200</b> and returning it into its uninitialized state S<b>3</b> or locking the storage device while in state S<b>10</b> thus returning to state S<b>7</b> (step S<b>12</b>). All of the respective inputs for said operations constitute configuration items in the sense of the present invention.</p><p id="p-0055" num="0059">Although a commonly adopted approach for securing stored data is through encryption, other approaches are also possible. For example, the storage device <b>200</b> may store the initial access details and compare them against newly-entered ones to provide access to the (not necessarily encrypted) data when the entered access details match those stored when the device was initialized. The security vulnerabilities of this approach can be mitigated by utilizing secure tamper-proof hardware for implementing the storage device <b>200</b>.</p><p id="p-0056" num="0060">The method just described in the context of accessing data on a secure storage device, in which file or directory names in a virtual file system are modified in order to provide configuration items to a configurable embedded device may also be used for other types of embedded devices such as configurable keyboards. Nowadays, the task of programming macro-commands on computer keyboards is accomplished by dedicated, platform-specific application programs and/or device drivers. Applying the present invention to said task may allow to present a user a means for entering configuration items, such as the virtual file system discussed above, wherein the operation of each function key can be programmed simply by editing the file corresponding to the given key. For this purpose, the programmable keyboard also has to identify itself to the host device as a virtual file system.</p><p id="p-0057" num="0061">Similarly, the communication with a USB-to-Ethernet adapter offering firewall functionality can also be performed without a dedicated application program and device driver, thereby making the device more portable and possibly also offering the potential to make it more secure. Specifically in an embodiment, the firewall's rules, such as white-lists or black-lists of IP addresses or TCP/UDP ports may be presented to the user through a virtual file system as files which can be edited. Other virtual files may provide details of accepted and rejected packets during the firewall's operation.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for configuring an embedded device of a first type in a computing environment by means of a host device, wherein:<claim-text>the embedded device comprises a computing unit adapted to provide configurable functionality according to externally input configuration items; and</claim-text><claim-text>the host device comprises an operating system running thereon, wherein the operating system provides means for communication with a number of predetermined types of embedded devices,</claim-text><claim-text>the method comprising:<claim-text>coupling the embedded device with the host device, wherein the computing unit identifies the embedded device to the host device as a second type of device of the predetermined types of embedded devices, wherein the second type is different from the first type or operates in a different manner from the first type;</claim-text><claim-text>providing, by the host device with, a means for entering configuration items;</claim-text><claim-text>retrieving the configuration items entered and supplying the configuration items to the embedded device by a means for communication with the second type of device provided by the operating system;</claim-text><claim-text>receiving the configuration items by the computing unit of the embedded device; and</claim-text><claim-text>performing configuration of the embedded device according to the received configuration items by the computing device.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined types of embedded devices include printers, storage systems and keyboard lock indicators.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second type of device comprises a virtual file system, and wherein communication with the embedded device comprises creating or removing a file or directory, writing to a file or renaming a file or a directory stored in the virtual file system.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the means for entering configuration items comprises a prompt requesting to rename a file or a directory with the configuration items.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the embedded device is operable in at least two discrete operational states, and wherein the configurable functionality comprises toggling between the discrete operational states.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the configurable functionality of the embedded device comprises a functionality with protected access and the configuration items comprise access details,<claim-text>wherein, in a unlocked state of the embedded device, access to the functionality is granted and, in a locked state of the embedded device, access to the functionality is denied, and</claim-text><claim-text>wherein the computing unit of the embedded device verifies received access details against preset access details in order to unlock the embedded device.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the embedded device comprises a storage unit and the configurable functionality is accessing data stored in the storage unit.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein providing the means for entering configuration items comprises presenting a user with instructions on how to enter the configuration items.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein providing the means for entering configuration items comprises obfuscating the configurable functionality to the user.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising a computer-readable storage medium, comprising instructions, which when executed by a processor, cause the processor to perform the method.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An embedded device of a first type comprising:<claim-text>a coupling unit for coupling the embedded device to a host device; and</claim-text><claim-text>a computing unit which is adapted to:<claim-text>identify the embedded device to the host device as a second type of device, wherein the second type is different from the first type or operates differently from the first type,</claim-text><claim-text>receive configuration items from the host device by a means for communication with the second type of device, and</claim-text><claim-text>perform configuration of the embedded device according to the received configuration items.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The embedded device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the embedded device is one of an input device, a wearable device, a configurable network device, or a removable storage device.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The embedded device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the coupling unit is adapted for a physical coupling with the host device.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A system for accessing configurable functionality on an embedded device, comprising:<claim-text>an embedded device; and</claim-text><claim-text>a host device comprising a processing unit, an operating system running thereon, and an interface for receiving configuration items from a user,</claim-text><claim-text>wherein the embedded device comprises:<claim-text>a coupling unit for coupling the embedded device to the host device; and</claim-text><claim-text>a computing unit which is adapted to:<claim-text>identify the embedded device to the host device as a second type of device, wherein the second type is different from the first type or operates differently from the first type;</claim-text><claim-text>receive the configuration items from the host device; and</claim-text><claim-text>perform configuration of the embedded device according to the received configuration items.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the operating system of the host device, upon a detection of the coupling of the embedded device, performs a predetermined action based on the second type of device.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the computing unit based on the received configuration items further performs at least one of:<claim-text>initially presetting the access details;</claim-text><claim-text>locking the embedded device; and</claim-text><claim-text>resetting the embedded device to its initial state.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>,<claim-text>wherein the data is stored in an encrypted manner and the accessing thereof comprises decrypting the data; and/or</claim-text><claim-text>wherein the accessing of the data comprises a transfer of the data by means of Media Transfer Protocol or Universal Serial Bus (USB) Mass Storage Access Protocol.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The embedded device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the embedded device is an input device comprising a configurable keyboard or remote control.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The embedded device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the embedded device is a wearable device comprising a health monitor device or a smartwatch.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The embedded device of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the coupling unit comprises a Universal Serial Bus (USB) protocol.</claim-text></claim></claims></us-patent-application>