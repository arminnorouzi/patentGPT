<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004557A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004557</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17810595</doc-number><date>20220702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>248</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>248</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">Systems and Methods for Network Explainability</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63218201</doc-number><date>20210702</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>63235082</doc-number><date>20210819</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Virtualitics, Inc.</orgname><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>V&#xe1;zquez Mart&#xed;nez</last-name><first-name>H&#xe9;ctor Javier</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Indurkhya</last-name><first-name>Sagar</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Zanfardino</last-name><first-name>Gennaro</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Indurkhya</last-name><first-name>Aakash</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Sahu</last-name><first-name>Sarthak</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Donalek</last-name><first-name>Ciro</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Amori</last-name><first-name>Michael</first-name><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Virtualitics, Inc.</orgname><role>02</role><address><city>Pasadena</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems and methods for network explainability in accordance with embodiments of the invention are illustrated. In many embodiments, network structures are extracted from tabular data structures. Communities within the network structure can be identified and processed to generate rules that explain relationships in the underlying data. In various embodiments, the rules are translated into natural language for presentation to a user.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="68.83mm" wi="158.75mm" file="US20230004557A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="175.34mm" wi="157.14mm" orientation="landscape" file="US20230004557A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="181.53mm" wi="139.78mm" orientation="landscape" file="US20230004557A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="231.56mm" wi="157.06mm" file="US20230004557A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="233.17mm" wi="173.74mm" file="US20230004557A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="189.74mm" wi="154.18mm" orientation="landscape" file="US20230004557A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="238.34mm" wi="131.74mm" orientation="landscape" file="US20230004557A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="238.34mm" wi="131.74mm" orientation="landscape" file="US20230004557A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="238.34mm" wi="138.35mm" orientation="landscape" file="US20230004557A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="204.13mm" wi="158.75mm" orientation="landscape" file="US20230004557A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The current application claims priority under 35 U.S.C. 119(e) to U.S. Provisional Patent Application Ser. No. 63/218,201, entitled &#x201c;Systems and Methods for Network Explainability&#x201d;, filed Jul. 2, 2021, and U.S. Provisional Patent Application Ser. No. 63/235,082, entitled &#x201c;Network Explainability&#x201d;, filed Aug. 19, 2021. The disclosure of U.S. Provisional Patent Application Ser. Nos. 63/218,201, and 63/235,082 are incorporated herein by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE INVENTION</heading><p id="p-0003" num="0002">This invention generally relates to the visualization of data, and to the explaining networks detected within datasets.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Three-dimensional (3D) computer graphics are graphics that use a three-dimensional representation of geometric data stored in memory for the purposes of performing calculations and rendering 2D images. Conventional computer displays are capable of rendering a 2D image that gives the appearance of depth. Recently, Virtual Reality (VR) and Augmented Reality (AR) devices have been developed that simulate depth using stereoscopy, where different viewpoints of the same scene are displayed to the left and right eyes, such as the Vive, by HTC, or the Oculus Rift, by Oculus VR.</p><p id="p-0005" num="0004">Data visualization using computer systems involves displaying data as a graphical representation of the data and is an important tool for data analysis. 3D computer graphic techniques have recently been used to try and represent large data sets in ways that are understandable by human users. Virtual reality has begun to be used to present 3D data to users.</p><p id="p-0006" num="0005">Network Graphs (sometimes simply referred to as &#x201c;networks&#x201d; or &#x201c;graphs&#x201d;) are a way of representing things and the relationships that exist between them. Networks are made of nodes and edges. Nodes can represent things from tangible objects to abstract ideas. Edges represent the relationships between nodes. Edges can have a weight which represent the strength of the relationship between the two nodes the edge connects.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0007" num="0006">Systems and methods for network explainability in accordance with embodiments of the invention are illustrated. One embodiment includes a data visualization system for explaining network structures in data, including a processor, and a memory, where the memory contains a data visualization application that configures the processor to: obtain a tabular database including a plurality of rows, and a plurality of columns, extract a network representation of the tabular database, where the network representation includes a plurality of nodes, where each node in the plurality of nodes represents a unique value in a target column in the plurality of columns, and a plurality of edges, where each edge connects two nodes in the plurality of nodes and reflects a shared value in one or more associative columns in the plurality of columns, identify communities within the network representation, add a community column to the tabular database, where values for each row in the community column indicate the community to which that row belongs, recursively, until a predefined breakpoint is hit: construct a tree structure for each associative column by partitioning the identified community column values into each tree structure, calculate a branch disorder value for each branch of each tree structure, calculate whole-tree disorder for each tree structure based on the calculated branch disorder values, partition the community column values into branches of the tree having the lowest whole-tree disorder, extract a plurality of explanatory rules based on the traversal of the resulting tree having the lowest whole-tree disorder, and provide the plurality of explanatory rules.</p><p id="p-0008" num="0007">In another embodiment, the predefined breakpoint occurs when the tree having the lowest whole-tree disorder is homogenously partitioned.</p><p id="p-0009" num="0008">In a further embodiment, the predefined breakpoint occurs at a preset limit on recursions.</p><p id="p-0010" num="0009">In still another embodiment, the preset limit on recursions is between 2 and 5 recursions.</p><p id="p-0011" num="0010">In a still further embodiment, the data visualization application further configures the processor to translate the plurality of explanatory rules into natural language.</p><p id="p-0012" num="0011">In yet another embodiment, the data visualization application further configures the processor to: identify dense community intraconnections for each identified community, and provide a feature which most densely connects a given identified community as an explanation of the given identified community.</p><p id="p-0013" num="0012">In a yet further embodiment, to identify dense community intraconnections, the data visualization application further configures the processor to calculate the relative edge density for each identified community.</p><p id="p-0014" num="0013">In another additional embodiment, to identify dense community intraconnections, the data visualization application further configures the processor to calculate the normalized relative edge density for each identified community.</p><p id="p-0015" num="0014">In a further additional embodiment, the identified communities are Louvain communities.</p><p id="p-0016" num="0015">In another embodiment again, the explanations are provided along with a visualization of the network structure.</p><p id="p-0017" num="0016">In a further embodiment again, a data visualization method for explaining network structures in data, includes obtaining a tabular database including a plurality of rows, and a plurality of columns, extracting a network representation of the tabular database, where the network representation includes a plurality of nodes, where each node in the plurality of nodes represents a unique value in a target column in the plurality of columns, and a plurality of edges, where each edge connects two nodes in the plurality of nodes and reflects a shared value in one or more associative columns in the plurality of columns, identifying communities within the network representation, add a community column to the tabular database, where values for each row in the community column indicate the community to which that row belongs, recursively, until a predefined breakpoint is hit: constructing a tree structure for each associative column by partitioning the identified community column values into each tree structure, calculating a branch disorder value for each branch of each tree structure, calculating whole-tree disorder for each tree structure based on the calculated branch disorder values, partitioning the community column values into branches of the tree having the lowest whole-tree disorder, extracting a plurality of explanatory rules based on the traversal of the resulting tree having the lowest whole-tree disorder, and providing the plurality of explanatory rules.</p><p id="p-0018" num="0017">In still yet another embodiment, the predefined breakpoint occurs when the tree having the lowest whole-tree disorder is homogenously partitioned.</p><p id="p-0019" num="0018">In a still yet further embodiment, the predefined breakpoint occurs at a preset limit on recursions.</p><p id="p-0020" num="0019">In still another additional embodiment, the preset limit on recursions is 3 recursions.</p><p id="p-0021" num="0020">In a still further additional embodiment, the method further includes translating the plurality of explanatory rules into natural language.</p><p id="p-0022" num="0021">In still another embodiment again, the method further includes identifying dense community intraconnections for each identified community, providing a feature which most densely connects a given identified community as an explanation of the given identified community.</p><p id="p-0023" num="0022">In a still further embodiment again, identifying dense community intraconnections includes calculating the relative edge density for each identified community.</p><p id="p-0024" num="0023">In yet another additional embodiment, identifying dense community intraconnections includes calculating the normalized relative edge density for each identified community.</p><p id="p-0025" num="0024">In a yet further additional embodiment, the identified communities are Louvain communities.</p><p id="p-0026" num="0025">In yet another embodiment again, the explanations are provided along with a visualization of the network structure.</p><p id="p-0027" num="0026">Additional embodiments and features are set forth in part in the description that follows, and in part will become apparent to those skilled in the art upon examination of the specification or may be learned by the practice of the invention. A further understanding of the nature and advantages of the present invention may be realized by reference to the remaining portions of the specification and the drawings, which forms a part of this disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a network diagram for a data visualization system in accordance with an embodiment of the invention.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>2</b></figref> conceptually illustrates a data visualization system implemented on a single computing device in accordance with an embodiment of the invention.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a network explanation process in accordance with an embodiment of the invention.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating a network explanation process for extracting predictive rules using a greedy decision tree approach in accordance with an embodiment of the invention is illustrated.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref> graphically a network explanation process for extracting predictive rules using a greedy decision tree approach on an example data set in accordance with an embodiment of the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0033" num="0032">3D data visualization systems are built to enable users to understand their data in intuitive, visual ways. By interacting with data visually, the human mind is capable of using its significant pattern recognition abilities to make sense of data. However, 3D rendering, and especially rendering images for Virtual Reality (VR), Augmented Reality (AR), and Mixed Reality (MR) systems takes a significant amount of computing power. In the age of Big Data, data sets that are increasingly large and complex are becoming both invaluable and readily available. However, as the complexity and volume of a dataset increases, so too does the processing power required to visualize and interpret the data.</p><p id="p-0034" num="0033">This issue presents multiple challenges for the effective usage and visualization of data, many of which are discussed in U.S. Pat. No. 10,621,762, entitled &#x201c;Systems and Methods for High Dimensional 3D Data Visualization&#x201d;, granted Apr. 14, 2020, and U.S. patent application Ser. No. 17/157,819, entitled &#x201c;Systems and Methods for 3D Data Visualization and Network Extraction&#x201d;, filed Jan. 25, 2021. The entirety of both U.S. Pat. No. 10,621,762 and U.S. patent application Ser. No. 17/157,819 are hereby incorporated by reference. While visualization of data as a network or graph can be itself useful to a viewer, systems and methods described herein can provide natural language explanations of the underlying structure of a graph, e.g. why nodes in the graph are where they are. These explanatory tools can automate the process of understanding datasets which are often too large and complex for humans to reliably parse on any reasonable timescale.</p><p id="p-0035" num="0034">In many embodiments, data visualization systems use a network extractor tool to create a network representation of a data set. The network representation can then be further processed by generating greedy decision trees which, after creation, contain paths which reflect predictive rules for any record in the dataset or an arbitrary newly added record. In many embodiments, irrespective of complexity, these paths can be represented as a logical rule, and the logical statement can be translated into natural language. Data visualization systems are described in further detail below.</p><heading id="h-0007" level="2">Data Visualization Systems</heading><p id="p-0036" num="0035">Data visualization systems can be implemented using a variety of architectures, from single computing devices to distributed computing systems. In numerous embodiments, multiple user interface devices can be connected to enable multiple users to interact with the data and with each other in a virtual environment. In many embodiments, the distribution of computational activity is dependent upon the number of users interacting with the visualization.</p><p id="p-0037" num="0036">A data visualization system in accordance with an embodiment of the invention is illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Data visualization system <b>100</b> includes a data visualizer <b>110</b>. Data visualizers can be implemented using a variety of different hardware. For example, personal computers, servers, server systems (e.g. cloud computing architectures), could be used as a data visualizer. In numerous embodiments, data visualizers can leverage distributed computer hardware. Data visualizers can perform data visualization processes including, but not limited to, those discussed in below sections. Data visualization processes are not restricted to those which create a graphical representation of the data, but also can refer to explanatory processes which produce text-based representations of the data such as explanations of a visualization and/or other summaries of the data.</p><p id="p-0038" num="0037">Data visualization system <b>100</b> further includes a number of user interface devices, such as a VR display <b>120</b>, a computer terminal <b>130</b>, and smartphone <b>140</b>. Example VR displays can be, but are not limited to, VR headsets such as the Oculus Rift, HTC Vive, or the Google Cardboard, AR displays such as the Microsoft Hololens, and/or MR displays such as Windows Mixed Reality Headsets. In many embodiments, user interface devices include a display capable of rendering high dimensional data in accordance with data visualization processes. In a variety of embodiments, user interface devices enable users to set visualization parameters, manipulate the view point of the visualization, and/or access generated insights. Data visualization systems can provide different viewpoints of the same visualization to each connected user interface device, and/or provide the same viewpoint to two or more user interface devices.</p><p id="p-0039" num="0038">Data visualizer <b>100</b> is connected to interface devices via a network <b>150</b>. Network <b>150</b> can be a wired network, a wireless network, or a combination of both wired and wireless networks. In many embodiments, networks include (but are not limited to) wide area networks, local area networks, personal area networks, the Internet, or any other communication protocol and/or network architecture as appropriate to the requirements of specific applications of embodiments of the invention.</p><p id="p-0040" num="0039">As can be readily appreciated, any number of architectures can be used, such as, but not limited to, architectures that involved distributed computing platforms, different numbers of user interface devices, and/or any other implementation that may be appropriate to the requirements of a given application. Data visualizers are discussed in further detail below.</p><heading id="h-0008" level="2">Data Visualizers</heading><p id="p-0041" num="0040">As noted above, data visualizers are capable of performing data visualization processes, including explanatory processes. While below is a discussion of an exemplary data visualization system implemented using a single computing device, in numerous embodiments, Data visualizers are implemented using distributed architectures. The specific architecture can change based on the processing power required and the number of users that are designed to interact with the system.</p><p id="p-0042" num="0041">A data visualizer implemented on a single computing device in accordance with an embodiment of the invention is illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Data visualizer <b>200</b> includes a generic processing module <b>210</b> and a graphics processing module <b>212</b>. In numerous embodiments, generic processing modules are general purpose processors such as a Central Processing Unit (CPU). Graphics processing modules are processors architected to excel at numerous, parallelizable functions such as rendering images including, but not limited to, GPUs. In some embodiments, generic processing module <b>210</b> and graphics processing module <b>212</b> can be implemented using the same processing circuitry and/or using more than two processing components. As can readily be appreciated, Data visualizers can take advantage of the capabilities of different processor configurations to optimize computational resources.</p><p id="p-0043" num="0042">Data visualizer <b>200</b> includes an input/output (I/O) interface <b>220</b>. I/O interface can connect to user interface devices such as a VR headset, or a 2D display. In numerous embodiments, displays can be completely integrated into the data visualizer. In many embodiments I/O interfaces enable communications with distributed computing hardware, the acquisition of user data to visualize, and/or obtaining visualization parameters. As can be readily appreciated, any number of I/O circuitries can be used, including multiple types of I/O interfaces that are specialized for communication with different types of devices.</p><p id="p-0044" num="0043">Data visualizer <b>200</b> further includes a memory <b>230</b>. Memory <b>230</b> can be any type of memory, such as (but not limited to) volatile memory, non-volatile memory, or any combination thereof. Memory <b>230</b> contains a data visualization application <b>232</b>. Data visualization applications can configure generic processing modules and graphics processing modules to perform data visualization processes. In many embodiments, data visualization applications can determine what hardware is available, and optimize performance of the data visualization application by utilizing specialized data structures that can take advantage of different hardware. Memory <b>230</b> can further include user date <b>234</b> acquired from a user interface device. As can be readily appreciated, additional memory can be incorporated into the system. For example, in various embodiments, the GPU may have dedicated memory separate from memory <b>230</b> such as (but not limited to) video random access memory (VRAM). In some embodiments, the GPU may have a dedicated portion of memory <b>230</b>.</p><p id="p-0045" num="0044">As can readily be appreciated, any number of system designs can be used to enable a computer system to perform a data visualization processes. For example, in numerous embodiments, Data visualizers may include multiple generic processing modules and/or graphics processing modules. Data visualization processes for explaining networks are discussed in further detail below.</p><heading id="h-0009" level="2">Network Explanation</heading><p id="p-0046" num="0045">Networks have information encoded within their structure. However, what the structure means is not always immediately clear. For example, certain data points may be spatially clustered together, but (especially with high dimension data) it might not be clear why these data are clustered together. Processes described herein attempt to computationally comprehend the structure of the network and provide a natural language explanation of it to a human user.</p><p id="p-0047" num="0046">Turning now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a process for generating a natural language explanation of a network structure in accordance with an embodiment of the invention is illustrated. Process <b>300</b> includes loading (<b>310</b>) user data. In numerous embodiments, user data is tabular, having many rows and columns. Columns, or &#x201c;dimensions,&#x201d; represent a specific type of value. Rows, or &#x201c;records,&#x201d; are data entries that have values for at least one of the dimensions. Typically, almost all, if not all, dimensions are populated per record, although it is not a requirement. Further, data might be input in a different format, e.g. as a graph, or even already as a network. If a network is not already obtained, a network structure is extracted (<b>320</b>) from the user data. In numerous embodiments, this is achieved using a network extractor tool such as those described in U.S. patent application Ser. No. 17/157,819 referenced and incorporated above.</p><p id="p-0048" num="0047">The network structure is used to identify (<b>330</b>) communities. In many embodiments, a new column can be added to the user data that stores the assigned community of each record. The community column can be referred to as a &#x201c;target&#x201d; to explain, and the &#x201c;associative columns&#x201d; from which nodes in the network were generated are now referred to as &#x201c;feature columns&#x201d; or &#x201c;features&#x201d;. The &#x201c;features&#x201d; will be used to explain the target. That is, after the instant process is complete, by knowing the feature values for an arbitrary record, then the target value can be predicted.</p><p id="p-0049" num="0048">Once communities have been identified, dense community intraconnections, (i.e. edges that most densely connect each community to itself rather than to the rest of the network) are identified (<b>340</b>). In numerous embodiments, this is achieved by calculating relative edge density (RED). RED conceptually defined as for each feature-value pairing, identify the proportion of edges in each community that correspond to that feature value. Put another way, how intraconnected a particular community is along a specific feature-value can be measured by tallying the edges where the pair of connected nodes is within the community of interest (intra-community edges). Next, how many edges corresponding to that same feature value either connect nodes in that community to nodes outside of it, or connect pars of nodes entirely outside the community (inter-community edges). In some embodiments, the tallies are optionally normalized depending on the downstream need. Normalization can be implemented using an L<sup>2 </sup>normalization on both intra- and inter-community edges with respect to all edges in the network, and then dividing by the normalized count of intracommunity edges by the normalized count of intercommunity edges. This is formalized as:</p><p id="p-0050" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mi>RelativeEdgeDensity</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <msub>    <mi>c</mi>    <mi>i</mi>   </msub>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mfrac>   <msub>    <mrow>     <mo>&#xf605;</mo>     <mrow>      <mi>IntraCommunityEdges</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <msub>       <mi>c</mi>       <mi>i</mi>      </msub>      <mo>)</mo>     </mrow>     <mo>&#xf606;</mo>    </mrow>    <mn>2</mn>   </msub>   <msub>    <mrow>     <mo>&#xf605;</mo>     <mrow>      <mi>InterCommunityEdges</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <msub>       <mi>c</mi>       <mi>i</mi>      </msub>      <mo>)</mo>     </mrow>     <mo>&#xf606;</mo>    </mrow>    <mn>2</mn>   </msub>  </mfrac> </mrow></math></maths></p><p id="p-0051" num="0049">An alternative formulation of RED, referred to as Normalized RED (NRED) which cannot exceed 1.0, and does not rely on the application of an L<sup>2 </sup>normalization is formalized as:</p><p id="p-0052" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <mrow>   <mi>NormRelativeEdgeDensity</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <msub>    <mi>c</mi>    <mi>i</mi>   </msub>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mfrac>   <mrow>    <mi>IntraCommunityEdges</mi>    <mo>&#x2061;</mo>    <mo>(</mo>    <msub>     <mi>c</mi>     <mi>i</mi>    </msub>    <mo>)</mo>   </mrow>   <mrow>    <mrow>     <mi>InterCommunityEdges</mi>     <mo>&#x2061;</mo>     <mo>(</mo>     <msub>      <mi>c</mi>      <mi>i</mi>     </msub>     <mo>)</mo>    </mrow>    <mo>+</mo>    <mrow>     <mi>IntraCommunityEdges</mi>     <mo>&#x2061;</mo>     <mo>(</mo>     <msub>      <mi>c</mi>      <mi>i</mi>     </msub>     <mo>)</mo>    </mrow>   </mrow>  </mfrac> </mrow></math></maths></p><p id="p-0053" num="0050">In many embodiments, once RED is calculated for each community at the feature level, feature values that yielded maximum RED values along with the frequency in that particular community are tabulated and stored.</p><p id="p-0054" num="0051">Process <b>300</b> further includes identifying (<b>350</b>) predictive community features. In many embodiments, RED and/or NRED are used to generate high-level explanations. The identified feature values which yield maximum RED for a particular community can provide some amount of insight into which features are most impactful in the clustering. In various embodiments, a more detailed identification takes place using greedy decision trees which is discussed in further detail with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, below. Identifying predictive community features can include identifying a set of one or more rules which define, for an arbitrary record having an arbitrary set of feature values, which community said record would be assigned to. These rules are used to generate (<b>360</b>) a natural language explanation of the communities. Natural language explanations based on RED/NRED can include highlighting features which are most impactful in the clustering. In various embodiments, template language can be used where impactful features are socketed into a template statement.</p><p id="p-0055" num="0052">As can readily be appreciated, RED and/or greedy decision tree approaches can be used as the foundation for generating natural language explanations using natural language processes. Further, as can be readily appreciated, network extraction methodologies that generate communities may technically differ without departing from the scope or spirit of the invention. As calculation of RED/NRED and construction of greedy decision trees are not reliant upon each other, these tasks can be performed at the same time. Further, in many embodiments, only one of RED/NRED or greedy decision trees are constructed, rather than both steps being performed. In such situations, the natural language explanations are generated based only on the performed step.</p><p id="p-0056" num="0053">RED and NRED can provide meaningful insights with respect to a community when the statistics of feature values the points take on in that community deviate beyond the statistics of feature values in the general dataset. However, in some situations, RED does not easily describe unforeseen records, and to which communities they may belong. A greedy decision tree approach is described which generates a natural language (e.g. plain English) description of the rules that would lead any data point, new or otherwise, to fall into a given community. Greedy decision trees can leverage the Louvain Communities produced by the network extraction. Conceptually, these Louvain Communities can be thought of as the output of an unsupervised clustering algorithm where the clustering was performed on categorical data. In order to explain what may have led to those clusters, a greedy decision tree that uses categorical features to predict to which cluster a given point may belong can be constructed.</p><p id="p-0057" num="0054">Turning now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a process for extracting predictive rules using a greedy decision tree approach in accordance with an embodiment of the invention is illustrated. Process <b>400</b> includes generating (<b>410</b>) a decision tree for each associative column used to generate the network in the user data. In many embodiments, each associative column used to generate the network is taken as a feature test (t<sub>i</sub>) and the user data is partitioned throughout the branches (b<sub>j</sub>) of each tree, where each branch is a unique value found in the original associative column.</p><p id="p-0058" num="0055">Disorder is calculated (<b>420</b>) for each branch: BranchDisorder(b<sub>j</sub>), formalized as:</p><p id="p-0059" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mrow>   <mi>Disorder</mi>   <mo>(</mo>   <msub>    <mi>b</mi>    <mi>j</mi>   </msub>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>-</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>l</mi>      <mo>=</mo>      <mn>0</mn>     </mrow>     <mi>M</mi>    </munderover>    <mtext> </mtext>    <mrow>     <mfrac>      <mrow>       <mi>points</mi>       <mo>(</mo>       <msub>        <mi>c</mi>        <mi>l</mi>       </msub>       <mo>)</mo>      </mrow>      <mrow>       <mi>points</mi>       <mo>(</mo>       <msub>        <mi>b</mi>        <mi>j</mi>       </msub>       <mo>)</mo>      </mrow>     </mfrac>     <mo>&#x22c6;</mo>     <mrow>      <msub>       <mi>log</mi>       <mi>M</mi>      </msub>      <mo>(</mo>      <mfrac>       <mrow>        <mi>points</mi>        <mo>(</mo>        <msub>         <mi>c</mi>         <mi>l</mi>        </msub>        <mo>)</mo>       </mrow>       <mrow>        <mi>points</mi>        <mo>(</mo>        <msub>         <mi>b</mi>         <mi>j</mi>        </msub>        <mo>)</mo>       </mrow>      </mfrac>      <mo>)</mo>     </mrow>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0060" num="0056">Whole-tree disorder is then calculated (<b>430</b>) based on BranchDisorder for each branch: TestDisorder(t<sub>i</sub>), formalized as:</p><p id="p-0061" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <mrow>   <mi>TestDisorder</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <msub>    <mi>t</mi>    <mi>i</mi>   </msub>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>-</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>j</mi>      <mo>=</mo>      <mn>0</mn>     </mrow>     <mi>K</mi>    </munderover>    <mtext> </mtext>    <mrow>     <mfrac>      <mrow>       <mi>points</mi>       <mo>(</mo>       <msub>        <mi>b</mi>        <mi>l</mi>       </msub>       <mo>)</mo>      </mrow>      <mrow>       <mi>points</mi>       <mo>(</mo>       <msub>        <mi>t</mi>        <mi>j</mi>       </msub>       <mo>)</mo>      </mrow>     </mfrac>     <mo>&#x22c6;</mo>     <mrow>      <mi>Disorder</mi>      <mo>(</mo>      <msub>       <mi>b</mi>       <mi>j</mi>      </msub>      <mo>)</mo>     </mrow>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0062" num="0057">TestDisorder can be interpreted as the weighted average of all the BranchDisorders of a given feature test, where the weighting is the number of points that particular branch has with respect to all the points throughout the tree. The feature test with the lowest test disorder is selected and the data is partitioned (<b>440</b>) into each of its branches. The above steps are recursively applied on the data subset at each of the selected test's branches until (<b>450</b>) all of the data points are perfectly homogenous with respect to the target Louvain Community column, or until there are no more feature tests left to be applied. The resulting greedy decision tree from this recursive process can be used to place any arbitrary record into a community by following its path down the tree. These paths are extracted (<b>460</b>) as predictive rules, which can be represented in natural language. For example, a natural language explanation may be something similar to &#x201c;Community 1 contains users who are between the ages of 45-50, and are dentists, but not married.&#x201d; As can be readily appreciated, the rules themselves and their specific conversion to natural language are highly dependent upon the particular data set. Indeed, the form of the natural language may also be dependent upon user preference, but all navigation of the tree can be logically expressed, and therefore converted into natural language form as a series of one or more logical statements.</p><p id="p-0063" num="0058">As can readily be appreciated, explanations based on RED and explanations based on greedy decision trees provide different information to an end user, and therefore in many embodiments, either one may not be performed depending on the particular use case. RED-based explanations typically provide a higher-level explanation of different communities, whereas greedy decision trees provide explicit rules for how arbitrary records would be classified. Furthermore, the above processes can be modified depending on the desires of the user. In various embodiments, an additional halting condition for constructing greedy decision trees (besides homogeneity and having no more feature tests) is a threshold level of recursion which, once met, halts the recursive process. In numerous embodiments, this threshold level is set at between 3-5 levels, as any more recursive depth can lead to logical rules that when converted to natural language are unhelpful to humans due to their complexity. However, the threshold level can be set at any level, higher or lower, with resulting rules being more or less precise, respectively, but also potentially more or less complex, respectively.</p><p id="p-0064" num="0059">This process is graphically represented in <figref idref="DRAWINGS">FIGS. <b>5</b>A-E</figref>. <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows example tabular data having 4 original dimensions and an extracted community column. The categorical values of &#x201c;University&#x201d; and &#x201c;Pet Type&#x201d; have been selected as the feature columns, and the community assignment is the target column. Trees are generated and shown in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> for each associated feature, and BranchDisorder values are shown for each branch in <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>. The TestDisorder is calculated and shown for each tree in <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>. The data is partitioned into the lowest disorder tree, &#x201c;University,&#x201d; illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>E</figref>. While in the instant example, there is another feature test that could be applied (&#x201c;Pet Type&#x201d;), the data is homogenous and therefore the recursive process ends. The explanatory rule in this simple example is now clear, as community 1 contains users who studied at Caltech, and community 2 contains users who studied at USC. As can be readily appreciated, a much higher dimensionality dataset may yield much more complicated rules and use multiple recursions before a halting condition is met.</p><p id="p-0065" num="0060">Although specific systems and methods for explaining network structures are described herein, many different system architectures and methods can be implemented in accordance with many different embodiments of the invention. It is therefore to be understood that the present invention may be practiced in ways other than specifically described, without departing from the scope and spirit of the present invention, for example, by performing steps in the processes in different orders, in parallel, and/or with added, subtracted, and/or substitute steps. Thus, embodiments of the present invention should be considered in all respects as illustrative and not restrictive. Accordingly, the scope of the invention should be determined not by the embodiments illustrated, but by the appended claims and their equivalents.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004557A1-20230105-M00001.NB"><img id="EMI-M00001" he="6.01mm" wi="76.20mm" file="US20230004557A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230004557A1-20230105-M00002.NB"><img id="EMI-M00002" he="9.91mm" wi="76.20mm" file="US20230004557A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230004557A1-20230105-M00003.NB"><img id="EMI-M00003" he="8.13mm" wi="76.20mm" file="US20230004557A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230004557A1-20230105-M00004.NB"><img id="EMI-M00004" he="8.47mm" wi="76.20mm" file="US20230004557A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A data visualization system for explaining network structures in data, comprising:<claim-text>a processor; and</claim-text><claim-text>a memory, where the memory contains a data visualization application that configures the processor to:<claim-text>obtain a tabular database comprising:<claim-text>a plurality of rows; and</claim-text><claim-text>a plurality of columns;</claim-text></claim-text><claim-text>extract a network representation of the tabular database, where the network representation comprises:<claim-text>a plurality of nodes, where each node in the plurality of nodes represents a unique value in a target column in the plurality of columns; and</claim-text><claim-text>a plurality of edges, where each edge connects two nodes in the plurality of nodes and reflects a shared value in one or more associative columns in the plurality of columns;</claim-text></claim-text><claim-text>identify communities within the network representation;</claim-text><claim-text>add a community column to the tabular database, where values for each row in the community column indicate the community to which that row belongs;</claim-text><claim-text>recursively, until a predefined breakpoint is hit:<claim-text>construct a tree structure for each associative column by partitioning the identified community column values into each tree structure;</claim-text><claim-text>calculate a branch disorder value for each branch of each tree structure;</claim-text><claim-text>calculate whole-tree disorder for each tree structure based on the calculated branch disorder values;</claim-text><claim-text>partition the community column values into branches of the tree having the lowest whole-tree disorder;</claim-text></claim-text><claim-text>extract a plurality of explanatory rules based on the traversal of the resulting tree having the lowest whole-tree disorder; and</claim-text><claim-text>provide the plurality of explanatory rules.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predefined breakpoint occurs when the tree having the lowest whole-tree disorder is homogenously partitioned.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predefined breakpoint occurs at a preset limit on recursions.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the preset limit on recursions is 3 recursions.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data visualization application further configures the processor to translate the plurality of explanatory rules into natural language.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data visualization application further configures the processor to:<claim-text>identify dense community intraconnections for each identified community;</claim-text><claim-text>provide a feature which most densely connects a given identified community as an explanation of the given identified community.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein to identify dense community intraconnections, the data visualization application further configures the processor to calculate the relative edge density for each identified community.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein to identify dense community intraconnections, the data visualization application further configures the processor to calculate the normalized relative edge density for each identified community.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identified communities are Louvain communities.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The data visualization system for explaining network structures in data of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the explanations are provided along with a visualization of the network structure.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A data visualization method for explaining network structures in data, comprising:<claim-text>obtaining a tabular database comprising:<claim-text>a plurality of rows; and</claim-text><claim-text>a plurality of columns;</claim-text></claim-text><claim-text>extracting a network representation of the tabular database, where the network representation comprises:<claim-text>a plurality of nodes, where each node in the plurality of nodes represents a unique value in a target column in the plurality of columns; and</claim-text><claim-text>a plurality of edges, where each edge connects two nodes in the plurality of nodes and reflects a shared value in one or more associative columns in the plurality of columns;</claim-text></claim-text><claim-text>identifying communities within the network representation;</claim-text><claim-text>add a community column to the tabular database, where values for each row in the community column indicate the community to which that row belongs;</claim-text><claim-text>recursively, until a predefined breakpoint is hit:<claim-text>constructing a tree structure for each associative column by partitioning the identified community column values into each tree structure;</claim-text><claim-text>calculating a branch disorder value for each branch of each tree structure;</claim-text><claim-text>calculating whole-tree disorder for each tree structure based on the calculated branch disorder values;</claim-text><claim-text>partitioning the community column values into branches of the tree having the lowest whole-tree disorder;</claim-text></claim-text><claim-text>extracting a plurality of explanatory rules based on the traversal of the resulting tree having the lowest whole-tree disorder; and</claim-text><claim-text>providing the plurality of explanatory rules.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the predefined breakpoint occurs when the tree having the lowest whole-tree disorder is homogenously partitioned.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the predefined breakpoint occurs at a preset limit on recursions.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the preset limit on recursions is 3 recursions.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising translating the plurality of explanatory rules into natural language.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:<claim-text>identifying dense community intraconnections for each identified community;</claim-text><claim-text>providing a feature which most densely connects a given identified community as an explanation of the given identified community.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein identifying dense community intraconnections comprises calculating the relative edge density for each identified community.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein identifying dense community intraconnections comprises calculating the normalized relative edge density for each identified community.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the identified communities are Louvain communities.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The data visualization method for explaining network structures in data of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the explanations are provided along with a visualization of the network structure.</claim-text></claim></claims></us-patent-application>