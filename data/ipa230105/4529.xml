<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004530A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004530</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17901808</doc-number><date>20220901</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>176</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>438</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>176</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>1454</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>542</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>1423</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>4393</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>167</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>09</class><subclass>G</subclass><main-group>2340</main-group><subgroup>045</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>09</class><subclass>G</subclass><main-group>2370</main-group><subgroup>022</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>09</class><subclass>G</subclass><main-group>2370</main-group><subgroup>24</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>09</class><subclass>G</subclass><main-group>2340</main-group><subgroup>0442</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>09</class><subclass>G</subclass><main-group>2370</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Disparate Workflow Integration Using a Meshed Visualization Canvas</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16123746</doc-number><date>20180906</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11461278</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17901808</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62560062</doc-number><date>20170918</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Sococo, LLC</orgname><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Nelbach, JR.</last-name><first-name>Francis Joseph</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Nagy</last-name><first-name>Stephan Christopher</first-name><address><city>Fishers</city><state>IN</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Cuzzort</last-name><first-name>Adam P.</first-name><address><city>Westfield</city><state>IN</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Sococo, LLC</orgname><role>02</role><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Techniques are described to support shared applications, including a shared application that permits retrieval, presentation and traversal of information resources. The innovative techniques enable multiple participants at different locations to both see and interact with assets such as a web-based content. The innovative techniques centralize the functionality of an application that is to be shared. A shared application is executed, during a collaboration, at a centralized location in a manner that does not require any local resources to create an application instance.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="215.31mm" wi="158.75mm" file="US20230004530A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="244.60mm" wi="170.52mm" file="US20230004530A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="219.37mm" wi="184.40mm" file="US20230004530A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="246.38mm" wi="169.59mm" file="US20230004530A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="246.38mm" wi="174.58mm" file="US20230004530A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="238.59mm" wi="172.80mm" file="US20230004530A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="225.98mm" wi="187.62mm" file="US20230004530A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="167.30mm" wi="111.93mm" file="US20230004530A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="247.99mm" wi="152.32mm" file="US20230004530A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CLAIM OF PRIORITY</heading><p id="p-0002" num="0001">This application claims priority under 35 U.S.C. &#xa7; 119(e) to U.S. Provisional Patent Application No. 62/560,062, filed Sep. 18, 2017, and titled &#x201c;Disparate Workflow Integration Using a Meshed Visualization Canvas&#x201d; the entire disclosure of which is hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Shared workspaces may be implemented via a network to support a virtual environment in which users are able to share assets such as applications, content, video conferencing, annotations, and other media across a plurality of appliances. Shared workspaces thus enable users distributed over a variety of geographic locations to collaborate in real time to share thoughts and ideas.</p><p id="p-0004" num="0003">Sharing applications amongst multiple users can be challenging from a technical standpoint. For example, some approaches in the past have required local execution of software that had to be installed on the computer of each participant. If some participants taking part in a collaboration did not have the required software, then they could not participate in the sharing until they acquired and installed the software. Other approaches utilize specialized plug-ins, extensions, or applets which, again, if a participant does not have such resources, they are unable to participate in the sharing. Local execution of software to permit application sharing also gives rise to challenges associated with maintaining synchronization of content and state as between the different computing devices, managing control and interaction, and maintaining and promoting security.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The detailed description is described with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different instances in the description and the figures may indicate similar or identical items. Entities represented in the figures may be indicative of one or more entities and thus reference may be made interchangeably to single or plural forms of the entities in the discussion.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustration of a collaboration system operable to employ techniques described herein.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a conceptual diagram of a communication infrastructure of the collaboration system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> as sharing content streams across appliances.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a streaming infrastructure of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in greater detail.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a messaging infrastructure of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in greater detail.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts two appliances taking part in a collaboration by way of a collaboration server.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts an example system that can be utilized to share applications, including a shared application that permits retrieval, presentation and traversal of information resources.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram depicting a procedure in an example implementation in accordance with one or more embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example system including various components of an example device that can be implemented as any type of computing device as described and/or utilize with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>6</b></figref> to implement embodiments of the techniques described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0014" num="0013">Overview</p><p id="p-0015" num="0014">In the discussion below, innovative techniques are described to implement shared applications, including a shared application that permits retrieval, presentation and traversal of information resources. The innovative techniques can be applied to any suitable type of application. In operation, in at least some embodiments, any application a client appliance is running can be managed by a server in order to share out interactions with the application across a group of other client appliances participating in a collaboration. Any other individual client appliances are able to interact with the application without having to execute a local version of the application. That is, the server acts as manager of the running of the application, and the client appliances participating in the collaboration are then &#x201c;video mirrors&#x201d; of that application, as described below in more detail. It is to be appreciated and understood that the application can be hosted by one of the collaborating client appliances. Alternately or additionally, the application can be hosted by the server. In some embodiments, the client appliances note where on the display the user clicks or performs a function, and the server knows the user pointer action and location and performs that function from a server hosted application. Alternately or additionally, in situations where the client appliance hosts the application, the server can capture the client activities performed on the client appliance-hosted application. In some embodiments, the region in which the application appears on the client appliance is determined by the server or client, and the identified region undergoes a screen capture video which is provided to the server. This video is then shared out by the server to the other client appliances in a collaboration in the same location of the canvas as determined by the host client. Since the server knows where any interactions appear on the canvas, this information can be shared with the host client application as if an individual user were locally providing input, e.g., clicking, dragging, and the like, within that application. The server thus captures video of the activity and then shares video with all of the client appliances in the collaboration. The video is then rendered on the various other client appliances to provide a shared interaction experience in correlation to x-y locations within the collaboration identified workspace. Any of the client appliances can provide input, which is then received, processed and shared out by the server as described below in more detail. As noted above, the experience can be applied to any application that can be executed by a client appliance including both web-based applications and applications that are not web based. The innovations described herein can thus bring people, their applications, and their data into a single environment, regardless of the tools employed by the corresponding client appliances. The applications can be for any purpose, and can be shared and interacted with by multiple parties across a network, such as the Internet. The applications do not have to be a cloud-based, and do not have to be part of the same ecosystem. In one or more embodiments, the innovative solutions are multi-threaded and support heterogeneous, open ecosystem tools. This means that the solutions can be applied across different platforms and, in this sense, are platform agnostic. The innovative solutions do not necessarily require a meeting, which improves upon past approaches in which a meeting is required in order to share in the manner described herein. That is, the innovations can be applied without the need for a formal collaboration. For example, the same user might have two different displays that are used to provide the shared experience. The innovative solutions are persistent and allow simultaneous rendering of persistent data alongside real-time applications.</p><p id="p-0016" num="0015">One such web-based application is a web browser which permits retrieval, presentation and traversal of information resources on the World Wide Web. An information resource can be identified by a Uniform Resource Identifier (URI/URL) that may be a web page, image, video or other piece of content. Web browsers can also be used to access information provided by web servers in private networks or files in file systems. The innovative techniques enable multiple participants at different locations to both see and interact with assets such as a web-based content. The innovative techniques centralize the functionality of an application that is to be shared. A shared application is executed, during a collaboration, at a centralized location by a centralized server in a manner that does not require any local resources to create an application instance. A software camera is utilized to capture video of the executing application which is then streamed to collaboration participants or, more accurately, each collaboration appliance. The video is then rendered on each appliance so that collaboration participants can then interact with the video in a similar manner as they would interact with the application. Interactions at each appliance are captured as events which are then relayed back to the centralized server. The centralized server then processes the events and executes the interactions on the shared application. These executed interactions are then captured by the software camera and streamed back out to the appliances where they are rendered. Thus, two or more clients executing on different appliances can interact with the shared application by way of the centralized server that executes the shared application. The interactions at the different applications can occur at the same time, or the interactions can be serialized such that only one client is allowed to interact with the shared application at a time. That is, in at least some embodiments, a control mechanism can be employed that passes control amongst the participants to ensure that there are no collisions, such as one that might arise if two participants were to interact with the video at the same time and in different, inconsistent manners. As noted above, interactions are captured as events, which are then relayed back to the centralized location, processed, and executed by the shared application. Again, the software camera captures this execution which is then streamed to the collaboration participants, and so on.</p><p id="p-0017" num="0016">In at least some embodiments, security is promoted when control is passed among participants by dehydrating state information associated with a particular user from whom control is passed. The next participant's state information is maintained by the shared application so long as the next participant has control. However, upon passing control to a further participant, the current participant's state information is dehydrated from the shared application, and so on. If control returns to a participant whose state information has been dehydrated, their particular state information is rehydrated as long as they maintain control. A particular participant's state information can be maintained in the event the participant exits a particular collaboration session so that upon return, if the participant receives control of the shared application, their state information can be rehydrated. So essentially, for example, when a user has control of a browser, the user's state information is loaded into the browser that they are controlling. When the user relinquishes control, their state information is captured and stored (i.e. dehydrated) so that it can be reloaded (i.e. rehydrated) once they again regain control of the browser.</p><p id="p-0018" num="0017">The innovative techniques provide an easily scalable solution due, in part, to the fact that local computing resources are not needed to render an instance of the shared application. Thus, it is unnecessary for any specialized software to be installed on a computing appliance in order to share an application. Furthermore, participant state information and user data is protected because it is not shared when application control passes to a new participant. Furthermore, because the results of application interactions are transmitted as a video stream, each local appliance is relieved of the burden of having to create, modify, and maintain application-related structures, such as a document object model (DOM) in the case when the application is a web browser. Offloading the burden of maintaining application-related structures on local appliances greatly reduces the computing complexity for the local appliances and thus, improves the efficiency with which local appliances can participate in a collaboration. Application-related structures refer to the various software support infrastructure that is typically created locally to support local execution of an application. So, for example, in the case of a web browser, such would include a document object model which is a tree structure in which each node is an object representing part of the document. The objects can be manipulated programmatically and any visible changes occurring as a result may then be reflected in the display of the document. Other application-related structures in the browser context can include layout engines that parse HTML into a DOM. Applications that are different from browsers, such as other web-based or non web-based applications, may have different application-related structures which, as a result of the innovations described herein, need not necessarily be created, maintained and operated locally.</p><p id="p-0019" num="0018">It is to be appreciated and understood, however, that the innovative techniques can be utilized in any suitable streaming environment and, not necessarily, a virtual collaboration between multiple different appliances.</p><p id="p-0020" num="0019">Shared workspaces enable virtual collaboration of remote and locally connected appliances having a variety of different hardware characteristics, such as tablet computers, wall displays, computing devices, mobile phones, and so forth. These appliances may also include a variety of software having differing characteristics usable to render assets as part of the shared workspace, such as particular word processors, presentation software, drawing applications, and so forth. Examples of assets include documents, images, video conferencing, and so forth as further described in the following.</p><p id="p-0021" num="0020">Virtual collaborations that utilize shared workspaces typically use a network connection to place the remote and locally connected appliances into communication with one another. The network connection can, in many instances, utilize an Internet connection. So, for example, multiple appliances located in one location may participate in a collaboration with multiple appliances located in a separate, remote location. Each location can maintain a network connection to the Internet.</p><p id="p-0022" num="0021">In some instances, a virtual collaboration can employ one or more large-format appliances and one or more reduced-format appliances. In yet other instances, a virtual collaboration may involve multiple reduced-format appliances such as a collaboration amongst multiple employees from their desktop or laptop devices. Thus, the displays amongst the collaboration users may vary. The workspace itself defines where the location of the scraped application appears. The &#x201c;scraped application&#x201d; refers to the application that is the subject of sharing. The application is &#x201c;scraped&#x201d; in the sense that input provided on the appliance hosting the application is captured as video, which is then forwarded to the other participating appliances as described above and below. A large-format appliance is typically configured to be mounted to a wall, for instance, and may be feature rich and configured to support a high resolution, network bandwidth, and hardware resources such as memory and processing. This large-format appliance may also include an application configured to consume particular asset formats, such as to support word processing, drawing (e.g., CAD), and so forth. A reduced-format appliance, such as a tablet or mobile phone configured to be held by one or more hands of a user, however, may have reduced resolution, network bandwidth, and hardware resources when compared to the large-format appliance.</p><p id="p-0023" num="0022">In some instances, a large-format appliance may upload, e.g., stream an asset to a service provider for sharing that is configured for consumption via a corresponding application, e.g., a particular word processor. In addition, the reduced-format appliances may also upload or stream assets to the service provider for sharing with other appliances participating in the collaboration. The techniques described herein enable multiple participants at different locations to both see and interact with assets such as web-based content. The innovative techniques centralize the functionality of an application that is to be shared. A shared application is executed, during a collaboration, at a centralized location in a manner that does not require any local resources to create an application instance. The innovative techniques provide an easily scalable solution due, in part, to the fact that local computing resources are not needed to render an instance of the shared application. Thus, it is unnecessary for any specialized software to be installed on a computing appliance in order to share an application. In the embodiments described below, a shared application in the form of a web browser is described. It is to be appreciated and understood, however, that this is merely for illustrative purposes. Accordingly, applications other than a web browser can be utilized to implement the innovative techniques described herein.</p><p id="p-0024" num="0023">In the following discussion, an example environment is first described that may employ the techniques described herein. Example procedures are then described which may be performed in the example environment as well as other environments. Consequently, performance of the example procedures is not limited to the example environment and the example environment is not limited to performance of the example procedures.</p><heading id="h-0005" level="1">Example Environment</heading><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustration of a collaboration system <b>100</b> in an example implementation that is configured to implement one or more aspects of the techniques described herein. As shown, collaboration system <b>100</b> includes, without limitation, a service provider <b>104</b> and appliances that are used to implement a shared workspace, illustrated examples of which include a large-format appliance <b>106</b> and a reduced-format appliance <b>108</b>, each of which are communicatively coupled via a network <b>110</b>. Although large and reduced format appliances <b>106</b>, <b>108</b> are described in relation to the following examples, it should be readily apparent that a plurality of appliances may be made up of appliances that support large or reduced formats, solely.</p><p id="p-0026" num="0025">The service provider <b>104</b> is illustrated as including a collaboration manager module <b>112</b> and the appliances are illustrated as including respective collaboration service modules <b>114</b>, <b>116</b> that together are representative of functionality implemented at least partially in hardware to support a shared workspace of a collaborative environment as further described in the following. Collaboration service modules <b>114</b>, <b>116</b>, for instance, may be configured as software such as applications, third-party plug-in modules, webpages, web applications, web platforms, and so on that support participation as part of a shared workspace. The collaboration manager module <b>112</b> is representative of functionality (e.g., implemented via software) that is usable to manage this interaction, examples of which are further described in relation to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>4</b></figref>. Although illustrated separately, functionality of the collaboration manager module <b>112</b> to manage the shared workspace may also be incorporated by the appliances themselves.</p><p id="p-0027" num="0026">The collaboration service modules <b>114</b>, <b>116</b>, for instance, may be implemented as part of a web platform that works in connection with network content, e.g. public content available via the &#x201c;web,&#x201d; to implement a shared workspace. A web platform can include and make use of many different types of technologies such as, by way of example and not limitation, URIs, HTTP, REST, HTML, CSS, JavaScript, DOM, and the like. The web platform can also work with a variety of data formats such as XML, JSON, and the like. The web platform can include various web browsers, web applications (i.e. &#x201c;web apps&#x201d;), and the like. When executed, the web platform allows a respective appliance to retrieve assets (e.g., web content) such as electronic documents in the form of webpages (or other forms of electronic documents, such as a document file, XML file, PDF file, XLS file, etc.) from a Web server (e.g., the service provider) for display on a display device in conjunction with the shared workspace.</p><p id="p-0028" num="0027">The shared workspace is configured to share assets and user interactions with those assets. In the context of this disclosure, an &#x201c;asset&#x201d; may refer to any interactive renderable content that can be displayed on a display, such as on a display device of the large-format appliance <b>106</b> or reduced-format appliance <b>108</b>, among others. Interactive renderable content is generally derived from one or more persistent or non-persistent content streams that include sequential frames of video data, corresponding audio data, metadata, flowable/reflowable unstructured content, and potentially other types of data.</p><p id="p-0029" num="0028">Generally, an asset may be displayed within a dynamically adjustable presentation window. An example of this is illustrated presentation windows <b>118</b>, <b>120</b> for the large-format appliance <b>106</b> and presentation window <b>122</b> as displayed for the reduced-format appliance <b>108</b>. For simplicity, an asset and corresponding dynamically adjustable presentation window are generally referred to herein as a single entity, i.e., an &#x201c;asset.&#x201d; Assets may comprise content sources that are file-based, web-based, or Live Source. Assets may include images, videos, web browsers, documents, renderings of laptop screens, presentation slides, any other graphical user interface (GUI) of a software application, and the like.</p><p id="p-0030" num="0029">An asset generally includes at least one display output generated by a software application, such as a GUI of the software application. In one example, the display output is a portion of a content stream. In addition, an asset is generally configured to receive one or more software application inputs. The reduced-format appliance <b>108</b>, for instance, may include a display device <b>124</b> having gesture detection functionality (e.g., a touch sensitive display device, a display device associated with one or more cameras configured to capture a natural user input, and so forth) to capture a gesture, such as an annotation <b>126</b> to circle text in a document made by one or more fingers of a user's hand <b>128</b>.</p><p id="p-0031" num="0030">With respect to the annotation, the annotation is then communicated and displayed on the large-format appliance <b>106</b> as annotation <b>126</b>&#x2032; that also circles corresponding text in a presentation window <b>118</b> that is viewable by users <b>130</b>, <b>132</b> of that appliance. Thus, unlike a fixed image, an asset is a dynamic element that enables interaction with the software application associated with the asset, for example, for manipulation of the asset. For example, an asset may include select buttons, pull-down menus, control sliders, and so forth that are associated with the software application and can provide inputs to the software application.</p><p id="p-0032" num="0031">As also referred to herein, a &#x201c;shared workspace&#x201d; is a virtual &#x201c;digital canvas&#x201d; or &#x201c;digital ink canvas&#x201d; on which assets associated therewith, and their corresponding content streams, are displayed within a suitable dynamic &#x201c;viewport window&#x201d;. Thus, a shared workspace may comprise one or more associated assets (each asset displayed within a presentation window), whereby the entire shared workspace is displayed within a dynamically adjustable viewport window. A shared workspace may be displayed in the entire potential render area/space of a display device of the large-format appliance <b>106</b> and/or the reduced-format appliance <b>108</b>, so that only a single shared workspace can be displayed on the surface thereof. In this case, the area of the viewport window that displays the shared workspace comprises the entire render area of the large-format appliance <b>106</b> and/or the reduced-format appliance <b>108</b>. In other implementations, however, the shared workspace and the viewport window may be displayed in a sub-area of the total display area of the large-format appliance <b>106</b> and/or the reduced-format appliance <b>108</b> that does not comprise the entire render area of respective display devices of these appliances. For example, multiple shared workspaces may be displayed in multiple viewport windows on the large-format appliance <b>106</b> and/or the reduced-format appliance <b>108</b> concurrently, whereby each shared workspace and viewport window does not correspond to the entire display surface. Each asset associated with a shared workspace, and content stream(s) corresponding to the asset, are displayed in a presentation window according to defined dimensions (height and width) and a location within the shared workspace and viewport window. The asset and presentation window dimensions and location may also be user-adjustable. As also referred to herein, a &#x201c;project&#x201d; may comprise a set of one or more related shared workspaces.</p><p id="p-0033" num="0032">The large-format appliance <b>106</b> in this example is formed using a plurality of display tiles <b>134</b>, e.g., arranged to form a display wall. The service provider <b>104</b> includes digital image content <b>136</b>, which is illustrated as stored in collaboration data storage <b>136</b>, e.g., using one or more memory devices as further described in relation to <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The service provider <b>104</b> may receive this digital image content <b>136</b> from a variety of sources, such as the reduced-format appliance <b>108</b>, the large-format appliance <b>106</b>, remotely via a third-party source via the network <b>110</b> (e.g., a website), or from an information network or other data routing device, and converts the input into image data signals. Thus, digital image content <b>136</b> may be generated locally, with the large-format appliance <b>106</b> or the reduced-format appliance <b>108</b>, or from some other location. For example, when the collaboration system <b>100</b> is used for remote conferencing, digital image content <b>136</b> may be received via any technically feasible communications or information network, wired or wireless, that allows data exchange, such as a wide area network (WAN), a local area network (LAN), a wireless (Wi-Fi) network, and/or the Internet, among others as represented by network <b>110</b>. The service provider <b>104</b>, reduced-format appliance <b>108</b>, and large-format appliance <b>106</b> may be implemented as one of more computing devices, such as part of dedicated computers, as one or more servers of a server farm (e.g., for the service provider <b>104</b> as implementing one or more web services), dedicated integrated circuit, and so on. These computing devices are configured to maintain instructions in computer-readable media and that are executable by a processing system to perform one or more operations as further described in relation to <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0034" num="0033">Display devices of the large-format appliance <b>106</b> and/or the reduced-format appliance <b>108</b> may include the display surface or surfaces of any technically feasible display device or system type, including but not limited to the display surface of a light-emitting diode (LED) display, a digital light (DLP) or other projection displays, a liquid crystal display (LCD), optical light emitting diode display (OLED), laser-phosphor display (LPD) and/or a stereo 3D display all arranged as a single stand-alone display, head mounted display or as a single or multi-screen tiled array of displays. Display sizes may range from smaller handheld or head mounted display devices to full wall displays. In the example illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the large-format appliance <b>106</b> includes a plurality of display light engine and screen tiles mounted in an array, which are represented by the display tiles <b>134</b>.</p><p id="p-0035" num="0034">In operation, the large-format appliance <b>106</b> displays image data signals received from the service provider <b>104</b>. For a tiled display, image data signals <b>102</b> are appropriately distributed among display tiles <b>134</b> such that a coherent image is displayed on a display surface <b>138</b> of the large-format appliance <b>106</b>. Display surface <b>140</b> typically includes the combined display surfaces of display tiles <b>134</b>. In addition, the display surface <b>138</b> of large-format appliance <b>106</b> is touch-sensitive that extends across part or all surface area of display tiles <b>134</b>. In one implementation, the display surface <b>140</b> senses touch by detecting interference between a user and one or more beams of light, including, e.g., infrared laser beams. In other implementations, display surface <b>140</b> may rely on capacitive touch techniques, including surface capacitance, projected capacitance, or mutual capacitance, as well as optical techniques (e.g., sensor in a pixel), acoustic wave-based touch detection, resistive touch approaches, and so forth, without limitation and thus may detect &#x201c;touch&#x201d; inputs that do not involve actual physical contact, e.g., as part of a natural user interface. Touch sensitivity of the display surface <b>138</b> enables users to interact with assets displayed on the wall implementing touch gestures including tapping, dragging, swiping, and pinching. These touch gestures may replace or supplement the use of typical peripheral I/O devices, although the display surface <b>140</b> may receive inputs from such devices, as well. In this regard, the large-format appliance <b>106</b> may also include typical peripheral I/O devices (not shown), such as an external keyboard or mouse.</p><p id="p-0036" num="0035">The display surface <b>140</b> may be a &#x201c;multi-touch&#x201d; surface, which can recognize more than one point of contact on the large-format appliance <b>106</b>, enabling the recognition of complex gestures, such as two or three-finger swipes, pinch gestures, and rotation gestures as well as multiuser two, four, six etc. hands touch or gestures. Thus, a plurality of users <b>130</b>, <b>132</b> may interact with assets on the display surface <b>140</b> implementing touch gestures such as dragging to reposition assets on the screen, tapping assets to display menu options, swiping to page through assets, or implementing pinch gestures to resize assets. Multiple users <b>130</b>, <b>132</b> may also interact with assets on the screen simultaneously. Again, examples of assets include application environments, images, videos, web browsers, documents, mirroring or renderings of laptop screens, presentation slides, content streams, and so forth. Touch signals are sent from the display surface <b>140</b> to the service provider <b>104</b> for processing and interpretation. It will be appreciated that the system shown herein is illustrative only and that variations and modifications are possible.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a conceptual diagram of a communication infrastructure <b>200</b> of the collaboration system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> as sharing content streams across appliances, e.g., across the large and reduced format appliances <b>106</b>, <b>108</b> through interaction with the service provider <b>104</b>. As shown, this communication infrastructure <b>200</b> includes, without limitation, the large-format appliance <b>106</b> and the reduced-format appliance <b>108</b> communicatively coupled to service provider <b>104</b> via a network <b>110</b>. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, communication infrastructure <b>200</b> of this example implementation includes streaming infrastructure <b>202</b> and messaging infrastructure <b>204</b> included as part of the collaboration manager module <b>112</b> to support communication of the collaboration service modules <b>114</b>, <b>116</b> to implement the shared workspace. In this example, large-format appliance <b>106</b> includes a collaboration service module <b>114</b>, one or more client applications <b>206</b> and a shared browsing module <b>210</b>. The shared browsing module <b>210</b> can, more generally, be thought of as an &#x201c;application module&#x201d; when the inventive techniques described herein are used to share an application other than a web browser or other than a web-based application. Reduced-format appliance <b>108</b> includes a collaboration service module <b>116</b>, one or more client applications <b>208</b> and a shared browsing module <b>212</b>. Again, the shared browsing module <b>212</b> can be thought of, more generally, as an &#x201c;application module&#x201d; when the inventive techniques described herein are used to share an application other than a web browser or other than a web-based application. The shared browsing modules <b>210</b>, <b>212</b> are responsible for communicating with a centralized service provider (also referred to as a centralized server) when a collaboration participant wishes to start an instance of a web browser during a collaboration. This enables the centralized service provider to create a &#x201c;container&#x201d; within which a browser, e.g., Chrome, is executed and shared amongst the collaboration participants. The browser is shared by way of a user interface element that is created on each appliance. As the browser is executed in the container, video of the browser execution is captured and shared with, i.e. streamed, to each appliance's user interface element which, in turn, plays the video and accepts user interactions. The user interaction is captured in the form of events that take place at locations on the video and are then sent back to the container, as described in more detail below. In various embodiments, nothing in the video stream is editable, clickable or touchable. Rather, events associated with such types of inputs that occur at some coordinates in the rendered stream are captured and returned to the container for execution by the browser in the container. Thus, the user interface element on each appliance captures the user's interaction and an event that is relayed back to the container for actual execution by the browser. So, for example, if a user clicks on some random area of the screen that does not accept text and starts typing, nothing will happen because the user is interacting with an area whose corresponding coordinates do not correspond to an area that accepts text. However, if the user clicks on an area of the screen whose coordinates include a text box, any keystrokes will be captured and sent as events to the container for execution by the browser running in the container. Doing so enables multiple participants at different locations to both see and interact with assets such as a web-based content. That is, a collaboration participant may actively choose to create a shared browser. When this happens, the shared browsing module on the participant's appliance receives the user's input and communicates the desire to create a shared browser to the centralized service provider. The browser is then created by the centralized service provider within the container, and streamed to the requestor (i.e. the participant who caused the shared browser to be created), and any participants in the current collaboration session. The participant who is controlling the browser causes events to be emitted that are then relayed to the container at the centralized service provider, as described below in more detail. When the event is received by the container, the container creates a so-called synthetic user interface event that is sent to the browser. The synthetic user interface event is an event that signals to the executing browser that an action took place. This action corresponding to the event can then be executed by the browser in the container, and subsequently streamed back out to the participating appliances. In at least some embodiments, if ownership or control passes to another participant, that new participant causes events to be emitted while other participants of the session are passive consumers. In one or more embodiments, the browser is executed in the container in a full screen, fixed resolution so that its position and other coordinate information are known, e.g., X, Y, height, width and size. Any event that is generated within the user interface element of a participating appliance has its coordinates translated to the coordinate system of the browser running within the container. In one or more embodiments, the browser size in the container is always fixed and client-side video is scaled to fit the size set by the user, while maintaining a fixed aspect ratio, e.g., 6&#xd7;9, such that the coordinates associated with each appliance can be reliably translated back to the container.</p><p id="p-0038" num="0037">Thus, the centralized service provider centralizes the functionality of the web browser that is to be shared in a manner that does not require any local resources to create a local web browser instance. A software camera is utilized to capture video of the executing web browser at the centralized service provider. The software camera is a virtual camera implemented in software that is used to capture the video display or a region of the video display as a video stream. The video is then streamed to collaboration participants or, more accurately, each collaboration appliance. The video is rendered on each appliance so that collaboration participants can then interact with the video in the same manner as they would interact with the web browser. In one or more embodiments, a control mechanism passes control amongst the participants to ensure that there are no collisions, such as one that might arise if two participants were to interact with the video at the same time and in different manners. Web browser interactions are captured as events, which are then relayed back to the centralized service provider, processed, and executed by the shared web browser. Again, the software camera captures this execution which is then streamed to the collaboration participants.</p><p id="p-0039" num="0038">Large-format appliance <b>106</b> is illustrated as sharing a content stream A, via communication infrastructure <b>200</b>, with the reduced-format appliance <b>108</b>. In response, reduced-format appliance <b>108</b> is configured to retrieve content stream A from communication infrastructure <b>200</b> and to display that content stream on a display device of the reduced-format appliance <b>108</b> with its content stream B. Likewise, reduced-format appliance <b>108</b> is configured to share content stream B, via communication infrastructure <b>200</b>, with the large-format appliance <b>106</b>. In response, the large-format appliance <b>106</b> is configured to retrieve content stream B from communication infrastructure <b>200</b> and to display that content stream on a display device of the large-format appliance <b>106</b> with its content stream A.</p><p id="p-0040" num="0039">In this fashion, the large and reduced format appliances <b>106</b>, <b>108</b> are configured to coordinate with one another via the service provider <b>104</b> to generate a shared workspace that includes content streams A and B. Content streams A and B may be used to generate different assets rendered within the shared workspace. In one embodiment, each of the large and reduced format appliances <b>106</b>, <b>108</b> perform a similar process to reconstruct the shared workspace, thereby generating a local version of that shared workspace that is similar to other local versions of the shared workspace reconstructed at other appliances. As a general matter, the functionality of the large and reduced format appliances <b>106</b>, <b>108</b> are coordinated by respective collaboration service modules <b>114</b>, <b>116</b> and client applications <b>206</b>, <b>208</b>, respectively.</p><p id="p-0041" num="0040">Client applications <b>206</b>, <b>208</b> are software programs that generally reside within a memory (as further described in relation to <figref idref="DRAWINGS">FIG. <b>8</b></figref>) associated with the respective appliances. Client applications <b>206</b>, <b>208</b> may be executed by a processing system included within the respective appliances. When executed, client applications <b>206</b>, <b>208</b> set up and manage the shared workspace discussed above in conjunction with <figref idref="DRAWINGS">FIG. <b>2</b></figref>, which, again, includes content streams A and B. In one implementation, the shared workspace is defined by metadata that is accessible by both the large and reduced format appliances <b>106</b>, <b>108</b>. Each of the large and reduced format appliances <b>106</b>, <b>108</b> may generate a local version of the shared workspace that is substantially synchronized with the other local version, based on that metadata (discussed below in relation to <figref idref="DRAWINGS">FIG. <b>3</b></figref>).</p><p id="p-0042" num="0041">In doing so, client application <b>206</b> is configured to transmit content stream A to streaming infrastructure <b>200</b> for subsequent streaming to the reduced-format appliance <b>108</b>. Client application <b>206</b> also transmits a message to the reduced-format appliance <b>108</b>, via messaging infrastructure <b>204</b>, that indicates to the large-format appliance <b>106</b> that content stream A is available and can be accessed at a location reflected in the message. In like fashion, client application <b>208</b> is configured to transmit content stream B to streaming infrastructure <b>202</b> for subsequent streaming to the large-format appliance <b>106</b>. Client application <b>208</b> also transmits a message to the large-format appliance <b>106</b>, via messaging infrastructure <b>204</b>, that indicates to the large-format appliance <b>106</b> that content stream B is available and can be accessed at a location reflected in the message. The message indicates that access may occur from a location within streaming infrastructure <b>202</b>.</p><p id="p-0043" num="0042">Client application <b>206</b> may also broadcast a message via messaging infrastructure <b>204</b> to the reduced-format appliance <b>108</b> that specifies various attributes associated with content stream A that may be used to display content stream A. The attributes may include a location/position, a picture size, an aspect ratio, or a resolution with which to display content stream A on the reduced-format appliance <b>108</b>, among others, and may be included within metadata described below in relation to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Client application <b>208</b> may extract the attributes from messaging infrastructure <b>204</b>, and then display content stream A at a particular position on a display device of the reduced-format appliance <b>108</b>, with a specific picture size, aspect ratio, and resolution, as provided by messaging infrastructure <b>204</b>. Through this technique, the large-format appliance <b>106</b> is capable of sharing content stream A with the reduced-format appliance <b>108</b>. The reduced-format appliance <b>108</b> is also configured to perform a complimentary technique in order to share content stream B with the large-format appliance <b>106</b>.</p><p id="p-0044" num="0043">Client applications <b>206</b>, <b>208</b> are thus configured to perform similar techniques in order to share content streams A and B, respectively with one another. When client application <b>206</b> renders content stream A on a display device of the large-format appliance <b>106</b> and, also, streams content stream B from streaming infrastructure <b>202</b>, the large-format appliance <b>106</b> thus constructs a version of a shared workspace that includes content stream A and B. Similarly, when client application <b>208</b> renders content stream B on a display device of the reduced-format appliance <b>108</b> and, also streams content stream A from streaming infrastructure <b>202</b>, the large-format appliance <b>106</b> similarly constructs a version of that shared workspace that includes content streams A and B.</p><p id="p-0045" num="0044">The shared browsing modules <b>210</b>, <b>212</b> may be part of the client applications or may be a separate component.</p><p id="p-0046" num="0045">The appliances (e.g., the large and reduced format appliances <b>106</b>, <b>108</b>) discussed herein are generally coupled together via streaming infrastructure <b>202</b> and messaging infrastructure <b>204</b>. Each of these different infrastructures may include hardware that is cloud-based and/or co-located on-premises with the various appliance, which are both represented by network <b>110</b>. However, persons skilled in the art will recognize that a wide variety of different approaches may be implemented to stream content streams and transport messages/messages between display systems.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram <b>300</b> showing the streaming infrastructure <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in greater detail. Streaming infrastructure <b>202</b> in this example includes a collaboration server <b>302</b>, a database server <b>304</b>, and a file server <b>306</b>. Each server may comprise a computer device having a processor (such as processing system unit described in relation to <figref idref="DRAWINGS">FIG. <b>8</b></figref>) and a computer-readable medium such as memory, the processor executing software for performing functions and operations described herein. Collaboration server <b>302</b>, database server <b>304</b>, and file server <b>306</b> may be implemented as shown as separate and distinct computing devices/structures coupled to each other and to the appliances via a network <b>110</b>. Alternatively, functionality of collaboration server <b>302</b>, database server <b>304</b>, and file server <b>306</b> may be implemented as a single computing device/structure in a single location (e.g., logically or virtually), or in any other technically feasible combination of structures. Further, one or more of collaboration server <b>302</b>, database server <b>304</b>, and/or file server <b>306</b> may be implemented as a distributed computing system. The network <b>110</b> may be via any technically feasible communications or information network, wired or wireless, that allows data exchange, such as a wide area network (WAN), a local area network (LAN), a wireless (WiFi) network, and/or the Internet, among others.</p><p id="p-0048" num="0047">Collaboration server <b>302</b> coordinates the flow of information between the various appliances (e.g., the large and reduced format appliances <b>106</b>, <b>108</b>), database server <b>304</b>, and file server <b>306</b>. Thus, in some implementations, collaboration server <b>302</b> is a streaming server for the appliances. In some embodiments, the application program interface (API) endpoint for the appliances and/or business logic associated with streaming infrastructure <b>202</b> resides in collaboration server <b>302</b>. In addition, collaboration server <b>302</b> receives requests from appliances and can send notifications to the appliances. Therefore, there is generally a two-way connection between collaboration server <b>302</b> and each of appliances, e.g., the large and reduced format appliances <b>106</b>, <b>108</b>. Alternatively or additionally, appliances may make requests on collaboration server <b>302</b> through the API. For example, during collaborative work on a particular project via collaboration system <b>100</b>, an appliance may send a request to collaboration server <b>302</b> for information associated with an asset to display the asset in a shared workspace of the particular project.</p><p id="p-0049" num="0048">Database server <b>304</b> (as well as collaboration server <b>302</b>) may store metadata <b>308</b> associated with collaboration system <b>200</b>, such as metadata for specific assets, shared workspaces, and/or projects. For example, such metadata may include which assets are associated with a particular shared workspace, which shared workspaces are associated with a particular project, the state of various settings for each shared workspace, annotations made to specific assets, etc. Metadata <b>308</b> may also include aspect ratio metadata and asset metadata for each asset. In some implementations, aspect ratio metadata may include an aspect ratio assigned to the project (referred to herein as the &#x201c;assigned aspect ratio&#x201d;). An aspect ratio assigned to a project applies to the shared workspaces of the project so that all shared workspaces of the project have the same aspect ratio assigned to the project. Asset metadata for an asset may specify a location/position and dimensions/size of the asset within an associated shared workspace.</p><p id="p-0050" num="0049">The asset metadata indicates the position and size of an asset, for example, implementing horizontal and vertical (x and y) coordinate values. In some embodiments, the asset metadata may express the position and size of an asset in percentage values. In such implementations, the size (width and height) and position (x, y) of the asset is represented in terms of percent locations along an x-axis (horizontal axis) and y-axis (vertical axis) of the associated shared workspace. For example, the position and size of an asset may be expressed as percentages of the shared workspace width and shared workspace height. The horizontal and vertical (x and y) coordinate values may correspond to a predetermined point on the asset, such as the position of the upper left corner of the asset. Thus, when display surfaces of appliances have different sizes and/or aspect ratios, each asset can still be positioned and sized proportional to the specific shared workspace in which is it being displayed. When multiple display devices of multiple appliances separately display a shared workspace, each may configure the local version of the shared workspace based on the received metadata.</p><p id="p-0051" num="0050">File server <b>306</b> is the physical storage location for some or all asset content <b>310</b> that are rendered as files, such as documents, images, and videos. In some embodiments, file server <b>306</b> can receive requests for asset content <b>310</b> directly from appliances. For example, an asset, such as a word-processing document, may be associated with a shared workspace that is displayed on a display device of a plurality of appliances, e.g., the large and reduced format appliances <b>106</b>, <b>108</b>. When the asset is modified by a user at the large-format appliance <b>106</b>, metadata for a file associated with the asset is updated in file server <b>306</b> by collaboration server <b>302</b>, the reduced-format appliance <b>108</b> downloads the updated metadata for the file from file server <b>306</b>, and the asset is then displayed, as updated, on the gesture-sensitive display surface <b>124</b> of the reduced-format appliance <b>108</b>. Thus, file copies of all assets for a particular shared workspace and project may be stored at the file server <b>306</b>, as well as stored at each appliance that is collaborating on a project.</p><p id="p-0052" num="0051">Each of the appliances is an instance of a collaborative multi-media platform disposed at a different location in a collaboration system <b>100</b>. Each collaboration appliance is configured to provide a digital system that can be mirrored at one or more additional and remotely located appliances. Thus, collaboration clients facilitate the collaborative modification of assets, shared workspaces, and/or complete presentations or other projects, as well as the presentation thereof.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts the messaging infrastructure <b>204</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in greater detail. As shown, messaging infrastructure <b>204</b> includes server machines <b>402</b> and <b>404</b> coupled together via centralized cache and storage <b>406</b>. Server machine <b>402</b> is coupled to the large-format appliance <b>106</b> and includes a messaging application <b>408</b>. Server machine <b>404</b> is coupled to the reduced-format appliance <b>108</b> and includes a messaging application <b>410</b>.</p><p id="p-0054" num="0053">Server machines <b>402</b> and <b>404</b> are generally cloud-based or on-premises computing devices that include memory and processing systems as further described in relation to <figref idref="DRAWINGS">FIG. <b>8</b></figref> configured to store and execute messaging applications <b>408</b> and <b>410</b>, respectively. Messaging applications <b>408</b> and <b>410</b> are configured to generate real-time socket connections with the large and reduced format appliances <b>106</b>, <b>108</b>, respectively, to allow messages to be transported quickly between the appliances. In one implementation, messaging applications <b>408</b> and <b>410</b> are implemented as ASP.NET applications and rely on signalR WebSockets to accomplish fast, real-time messaging.</p><p id="p-0055" num="0054">Centralized cache and storage <b>406</b> provides a persistent messaging backend through which messages can be exchanged between messaging applications <b>408</b> and <b>410</b>. In one embodiment, centralized cache and storage includes a Redis cache backed by a SQL database. Messaging applications <b>408</b> and <b>410</b> may be configured to periodically poll centralized cache and storage <b>406</b> for new messages, thereby allowing messages to be delivered to those applications quickly.</p><p id="p-0056" num="0055">In operation, when the large-format appliance <b>106</b> transmits a message indicating that content stream A is available on streaming infrastructure <b>202</b>, as described above, the large-format appliance <b>106</b> transmits that message to messaging application <b>408</b>. Messaging application <b>408</b> may then relay the message to centralized cache and storage <b>406</b>. Messaging application <b>410</b> polls centralized cache and storage <b>406</b> periodically, and may thus determine that the message has arrived. Messaging application <b>410</b> then relays the message to the reduced-format appliance <b>108</b>. The reduced-format appliance <b>108</b> may then parse the message to retrieve an identifier associated with the large-format appliance <b>106</b>, and then stream content associated with the large-format appliance <b>106</b> from streaming infrastructure <b>202</b>.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example environment <b>500</b> that includes a collaboration server <b>302</b> such as that described above, and multiple different reduced-format appliances <b>108</b> that are participating in a collaboration from a common location. In this instance, each of reduced-format appliances <b>108</b> shares a common network connection through which each can communicate with collaboration server <b>302</b>. Although only two appliances are illustrated, more than two appliances can be located at any one particular location.</p><p id="p-0058" num="0057">The common network connection that is shared by the reduced-format appliances <b>108</b> allows for content, including a shared web browser, to be shared amongst the appliances.</p><p id="p-0059" num="0058">As noted above, innovative techniques are described to implement shared applications, including a shared web browser. In the example about to be described, a web browser is shared amongst participants participating in a collaboration. The innovative techniques provide an on-demand shared browser experience in which the collaboration participants can see and interact with the shared browser. That is, the shared browser can be created when needed or wanted by any of the collaboration's participants. The innovative techniques enable multiple participants at different locations to both see and interact with assets such as a web-based content. In operation, when a participant joins a project for a collaboration, the system knows that all of the participants who have joined the project are collaborating in a workspace. The workspace provides the mechanism by which a digital canvas can be utilized for collaborating. When a user, during the course of a collaboration, adds a web browser onto the associated workspace, as by interacting with the shared browsing module <b>210</b> or <b>212</b>, to open the web browser, the system knows that because the participant is attempting to open the browser in the context of a collaboration, the system must implement a shared browsing experience.</p><p id="p-0060" num="0059">To implement the shared browsing experience, the innovative techniques centralize the functionality of the web browser that is to be shared. This is done by dynamically creating or re-creating all of the back end resources that are needed to render the web browser centrally, so that it can be shared out amongst the participants.</p><p id="p-0061" num="0060">In operation, a centralized service provider utilizes a &#x201c;container&#x201d;. A container is alight weight virtualization environment that segregates network, file, and system processes from one another. The container allows for deployment of distributed applications, such as a shared web browser. The distributed applications can include many different types of applications including, by way of example and not limitation, 3-D computer-aided design applications, multimedia editing applications, word processing applications, spreadsheet applications, and the like. The container allows software to be packaged in a standardized unit and contains everything the software needs to run including code, runtime, system tools, system libraries, and the like. The container runs an instance of the web browser that is to be shared (or whatever application is being centrally executed) and includes custom functionality that enables the container to receive and then emulate input from each participant, such as a touch input, mouse input, or keyboard input. Doing so, in this manner, relieves each participating appliance from having to use any local resources to create a local web browser instance.</p><p id="p-0062" num="0061">In one or more embodiments, the container employs a virtual frame buffer capture process that is implemented by a software camera that is utilized to capture video of the executing web browser. The virtual frame buffer implements, in software, the concept of a frame buffer&#x2014;which is used by a hardware video card to prepare an image for display on a physical screen. In one or more embodiments, the captured video, captured as raw YUV frames, is then encoded into a H264 video stream and then streamed by the container to a live video streaming engine where it is transcoded into a different video format, e.g., Motion JPEG (MJPEG), and broadcast to registered participants. Although MJPEG is used in this specific example, any suitable format can be used, as will be appreciated by the skilled artisan. In this specific example, the live video streaming engine includes a cam server module and a port mapper module. The cam server module is implemented as a software component that receives, transcodes (e.g., from a H264 video stream to a MJPEG video stream), and broadcasts live video streams. The port mapper module is implemented as a software component that negotiates connections to the cam server module and distributes live video streams.</p><p id="p-0063" num="0062">Accordingly, the captured video of the executing web browser is streamed to collaboration participants or, more accurately, each collaboration appliance. In some instances, the resolution of the streamed video can be changed depending on the type of appliance that is to receive the stream. For example, in limited bandwidth scenarios, the downstream framerate and/or bitrate can be throttled to conform to the available network conditions, e.g., a user of a mobile device utilizing a 3G, 4G, or LTE data connection via a cellular data provider. In addition, in some embodiments, in order to facilitate lower bandwidth scenarios, the frame rate of the streamed video can be reduced. For example, a queue of output frames can be maintained. If the queue continues to build, the number of frames per second can be reduced by half to throttle the connection. If the queue remains empty, the framerate can be slowly increased until the queue starts to build tip and then the framerate can be reduced by half, with further reductions until a steady state is reached.</p><p id="p-0064" num="0063">The video is then rendered on each appliance so that collaboration participants can then interact with the video in a similar manner as they would interact with the web browser. So, for example, in some embodiments, collaboration participants have registered an interest in receiving any data added to the workspace. When a shared browser is created, an asset is added to the workspace and includes a unique identifier. Each appliance is notified of the asset and its unique identifier. This asset can be added to each of the workspaces of the appliances. In this case, the added asset is a video player that knows how to render the stream that it obtains from the service. The asset obtains the URL of the stream so that it can obtain and render the stream.</p><p id="p-0065" num="0064">In the illustrated and described embodiment, all of the functionality required to share the web browser is provided by the container at the centralized service provider&#x2014;which is implemented as a cloud-based service. The functionality and resources utilized to share the web browser are created dynamically as part of the container. That is, when the container is created, a virtual touch device is created which serves as the desktop on which the browser which is to be shared will execute. If a state persistence store has not already been created, a state persistence store is created. The state persistence store allows state associated with the shared browser to be maintained, e.g., session cookies, etc. . . . The virtual frame buffer is then created and started and an event relay process is started. The event relay process enables events to be relayed from appliances to the container. The container then starts the web browser that is to be shared and its execution can be captured, encoded and streamed as described above and below. This provides fine granular scalability because every shared web browser collaboration session has an associated new container instance. Furthermore, when a participant wishes to invoke a web browser, as by interacting with the shared browsing module <b>210</b> or <b>212</b>, a container can be created very quickly to provide a seamless user experience.</p><p id="p-0066" num="0065">In one or more embodiments, a control mechanism is provided and passes control amongst the participants to ensure that there are no collisions, such as one that might arise if two participants were to interact with the video at the same time and in different, inconsistent manners. For example, when a user interacts with the rendered video stream, such as by typing, touching, clicking on the video stream (as by clicking on a video rendering of a link), and the like, an event is generated with metadata describing the action that was just taken. This event is sent to the event relay in the container. This event relay then generates a synthetic event within the container that is processed by the application (web-browser in this case) as if that action took place locally. So, if a user appears to click on a hyper link in the video stream, that event is sent to the corresponding browser in the container and to the user, a click appears to happen locally.</p><p id="p-0067" num="0066">Thus, interactions with the video stream at the appliances are captured as events, which are then relayed back to event listeners at the centralized service provider, processed, and executed by the shared web browser. Again, the software camera at the container captures this execution which is then streamed to the collaboration participants as described above.</p><p id="p-0068" num="0067">In at least some embodiments, security is promoted when control is passed among participants by dehydrating state information associated with a particular user from whom control is passed. The next participant's state information is maintained by the shared web browser so long as the next participant has control. However, upon passing control to a further participant, the current participant's state information is dehydrated from the shared web browser, and so on. If control returns to a participant whose state information has been dehydrated, their particular state information is rehydrated as long as they maintain control. A particular participant's state information can be maintained in the event the participant exits a particular collaboration session so that upon return, if the participant receives control of the shared application, their state information can be rehydrated.</p><p id="p-0069" num="0068">The innovative techniques provide an easily scalable solution due, in part, to the fact that local computing hardware resources are not needed to render an instance of the shared web browser because the shared browser is streamed, as a video stream, in a standard format, e.g., MJPEG. Thus, it is unnecessary for any specialized software to be installed on a computing appliance in order to share a web browser. Furthermore, participant state information and user data is protected because it is not shared when application control passes to a new participant. For example, a participant who has control may enter a password into a website which the browser remembers while the participant has control. This information is not shared when control passes to another participant, thus avoiding a situation where another participant can use the previous participant's information to access the same website. Furthermore, because the results of application interactions, i.e., the results that represent execution of the events at the browser in the container received from the collaboration participants, are transmitted as a video stream, each local appliance is relieved of the burden of having to create, modify, and maintain application-related structures, such as a document object model for the web browser. Offloading the burden of maintaining application-related structures on local appliances greatly reduces the computing complexity for the local appliances and thus, improves the efficiency with which local appliances can participate in a collaboration.</p><p id="p-0070" num="0069">Consider now <figref idref="DRAWINGS">FIG. <b>6</b></figref> which illustrates an example system in accordance with one embodiment, generally at <b>600</b>. System <b>600</b> includes a large-format appliance <b>106</b> and two reduced-format appliances <b>108</b>. Each of the appliances includes components such as those described above including, for the large-forat appliance <b>106</b>, a collaboration service module <b>114</b>, client application <b>206</b>, and shared browsing module <b>210</b>; and, for the reduced-format appliances <b>108</b>, a collaboration service module <b>116</b>, a client application <b>208</b>, and a shared browsing module <b>212</b>. In addition, system <b>600</b> includes a container <b>602</b> and a port mapper/cam server <b>604</b>. The container <b>602</b>, which is supported by a centralized service provider, includes one or more event listeners <b>606</b>, a software camera <b>608</b> and, when instantiated, a web browser <b>610</b> that can be shared out amongst the participants, i.e., appliances <b>106</b> and <b>108</b>.</p><p id="p-0071" num="0070">In this example, three users are participating in a collaboration, each of which is associated with one of the appliances. Assume that the user of large-format appliance <b>106</b> wishes to start a browser and add it to the collaboration. In this instance, the shared browsing module <b>210</b> receives the user's input and sends a message to the centralized service provider (which is not one of the multiple appliances participating in the collaboration), such as a backend service, that indicates that a shared browser is to be created, i.e. the &#x201c;create shared browser&#x201d; message that emanates from large-format appliance <b>106</b>. The centralized service provider receives the message and, responsive to receiving the message instantiates a new container <b>602</b>. The container <b>602</b> starts a virtual desktop that starts the browser <b>610</b>, the event listeners <b>606</b> and the software camera <b>608</b>. This enables the container to begin to capture the virtual desktop or browser <b>610</b> using the software camera <b>608</b>. The software camera <b>608</b> captures frames of the browser <b>610</b> so that the frames can be streamed to the port mapper/cam server <b>604</b>. In some instances, frames are captured at a capture rate which matches the playback rate at which the frames are played back. That is, in some instances, there is no transrate conversion. In other instances, transrate conversion can be utilized so that the capture rate need not match the playback rate. So, by virtue of indicating their desire to start a browser on large-format appliance <b>106</b>, the shared browsing module <b>210</b> causes the container to be instantiated and for the components therewithin (i.e., the event listeners <b>606</b>, software camera <b>608</b>, and browser <b>610</b>) to be started.</p><p id="p-0072" num="0071">The event listeners <b>606</b> are components inside the container <b>602</b> that listen for various user input events. So, for example, if a user interacts with a video stream that represents the shared browser to simulate clicking on a link, typing in a text box, touching the screen, and the like, such event is reported or relayed back to the container <b>602</b> for processing by the event listeners <b>606</b>. The events that are relayed back to the container result in actions being executed on browser <b>610</b>. These executed actions are captured by the software camera <b>608</b> and streamed as video (i.e. the &#x201c;streamed browser&#x201d; arrow) from the container <b>602</b> to the port mapper/cam server <b>604</b>. This streamed video is then provided by the port mapper/cam server <b>604</b> to each of the appliances <b>106</b>, <b>108</b> and rendered as video (i.e., the &#x201c;render shared browser&#x201d; arrows from the port mapper/cam server <b>604</b> to each of the appliances). This provides a shared browser user interface through which the various participants can see and interact with the shared browser, subject to control mechanisms described above and below. Interactions with the rendered shared browser are captured as events by each appliance, which events are then relayed back to the container <b>602</b>, processed by the event listeners <b>606</b> and executed by the browser <b>610</b>, streamed back out, and so on.</p><p id="p-0073" num="0072">As noted above, the port mapper negotiates connections to the cam server and distributes live video streams. The cam server receives, transcodes, and broadcasts live video streams to the appliances taking part in the collaboration. So, when the container <b>602</b> starts, the software camera <b>608</b> contacts the port mapper to indicate that it would like to start a new stream for the shared browser. The port mapper serves as a load balancer, in a sense, that is in front of all of the instances of the cam server. So, in order to scale the system to support more users, multiple cam servers can be utilized. The port mapper is basically responsible for balancing all of the loads across the different cam servers that may be instantiated. In one or more embodiments, there are N number of port mappers connected via a mesh network such that there is no single point of failure while negotiating a connection with a cam server. The port mapper selects a cam server that should be used for streaming from the container <b>602</b>. The port mapper informs the container which cam server should receive the stream. At this point, the camera <b>608</b> can begin to stream the browser to the cam server.</p><p id="p-0074" num="0073">During the startup process a separate event is sent to each of the appliances participating in the project or collaboration. The separate event informs each of the appliances that a new shared browser has been created and, on which cam server the shared browser is accessible i.e., the URL for the stream. Accordingly, each of the appliances in the collaboration knows how and where to access the stream associated with the shared browser.</p><p id="p-0075" num="0074">Now that browser <b>610</b> is running and being streamed to the cam server, in at least some embodiments, control can be passed amongst the appliances to enable that, at any one time, only a single participant can interact with the shared browser. So, for example, if a particular user wishes to interact with the shared browser, they can signal browser control to the current user who has control of the shared browser. In the illustrated and described embodiment, the signal browser control is implemented as an event that goes through the event relay process which is essentially multidirectional as between the various appliances in the collaboration. The signal browser control can be implemented in connection with a user interface component that enables the current controller of the shared browser to allow someone else to take over control. That is, the current controller of the shared browser can either allow or deny control to be passed. So, for example, if a new user wishes to take control of the browser, they can click a button or otherwise indicate, through a user interface instrumentality, a request to control the browser. This request is relayed as an event to the current controller. The current controller can then be presented with a prompt that indicates that a new user would like to take control of the browser. The current controller can choose to allow or deny control to be passed. In at least some embodiments, the signal browser control can also start a timer which, after expiration, can automatically transfer control to the new user. This enables the collaboration to keep moving forward and maintain momentum.</p><p id="p-0076" num="0075">In one or more embodiments, security is promoted when control is passed among participants by dehydrating state information associated with a particular user from whom control is passed. The next participant's state information is maintained by the shared browser so long as the next participant has control. However, upon passing control to a further participant, the current participant's state information is dehydrated from the shared browser, and so on. If control returns to a participant whose state information has been dehydrated, their particular state information is rehydrated as long as they maintain control. A particular participant's state information can be maintained in the event the participant exits a particular collaboration session so that upon return, if the participant receives control of the shared browser, their state information can be rehydrated. So, for example, if a particular participant has control of the shared browser <b>610</b> and logs into a website, there is some state that is stored in the shared browser <b>610</b>. The state can include who the particular user is, which documents the user is able to access in their drive, and so on. Thus, the user may be authenticated to a number of different sites and associated information is stored in the browser session state as, for example, a session cookie.</p><p id="p-0077" num="0076">In the illustrated and described embodiment, all of the session cookies for a particular user who controls the shared web browser are saved in a file on behalf of that particular user on the server. This file is attached to one and only one user in the collaboration. When control of the shared browser is passed, this file is saved and unloaded from the browser session. The new user who controls the shared browser will then not have access to any of the previous user's session state. However, their own state will be maintained and saved in a similar fashion in the event control is further passed to other users.</p><p id="p-0078" num="0077">In the event control returns to a previous user whose session state has been saved in the manner described above, such information can be rehydrated so that they will again be logged into all of the previous websites that they had visited. In some embodiments, the file associated with the user's session state can be maintained even when a user logs out of a particular collaboration. If the user returns to the collaboration at some point in the future, their session state can be rehydrated in the manner described above.</p><p id="p-0079" num="0078">In one or more embodiments, visual indications can be provided to indicate which participant has control of the shared web browser. For example, a small user interface instrumentality can be presented on the browser window to indicate who has current control. Such small user interface instrumentality can include, by way of example and not limitation, an icon displaying the user's picture, the user's name, the user's initials, and the like. In the event multiple browsers are being shared within the same collaboration, multiple different user interface instrumentalities can be presented to indicate who has current control of a particular respective shared web browser.</p><p id="p-0080" num="0079">In the embodiments described above, the collaboration between appliances is supported by a collaboration service module and a client application that is dedicated to the collaboration, with the support of the centralized service provider. It is to be appreciated and understood, however, that the collaboration can be supported by a more portable HTML version of the client application. The HTML version of the application permits shared browsing or co-browsing while the corresponding appliance is connected to the collaboration through the browser. In this sense, the HTML version of the application provides a browser within a browser experience.</p><p id="p-0081" num="0080">Having considered the embodiments described above, consider now example procedures in accordance with one or more embodiments.</p><heading id="h-0006" level="1">Example Procedures</heading><p id="p-0082" num="0081">The following discussion describes techniques that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. In the illustrated and described embodiment, the operations are performed in a collaborative environment, such as that described above, in which multiple appliances can share a common network connection to participate in a shared workspace in which data can be streamed to other appliances also participating in the shared workspace.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a procedure <b>700</b> in an example implementation in which an application can be shared amongst multiple participants in a collaboration among associated appliances. Any suitable application can be the subject of a collaboration and, accordingly, can be shared. In but one example, an application in the form of a web browser can be shared amongst the participants.</p><p id="p-0084" num="0083">At block <b>702</b>, a message is received by a central service provider that indicates that a shared application is to be created as part of a collaboration amongst multiple appliances. An example of how this can be done is provided above. In the illustrated and described embodiment, the centralized service provider is not one of the multiple appliances participating in a collaboration. This means that the centralized service provider is not an appliance that has a human participant who is logged into or otherwise registered or participating as an active participant of the collaboration. At block <b>704</b>, responsive to receiving the message, a container configured to execute the shared application is instantiated. An example of how this can be done is provided above, including various components that are used by the container to promote application sharing. At block <b>706</b>, the container is used to cause the shared application to be shared with the multiple appliances. Examples of how this can be done are provided above.</p><p id="p-0085" num="0084">Consider now some example use cases in accordance with one or more embodiments.</p><heading id="h-0007" level="1">Example Use Cases</heading><p id="p-0086" num="0085">In the context of the use case examples, content includes at least a) all live Applications or the entire live Windows Desktop b) snapshots of application screens, the Desktop or clipboard data c) annotations made to live applications or data d) shared websites and e) data files capable of being rendered a particular workspace.</p><p id="p-0087" num="0086">Use case 1: A new HR employee receives an email from IT with instructions to download and learn about the company's collaboration tool of choice, the Prysm Application Suite (PAS). Just as with his other Microsoft tools, he navigates to the Windows Application Store and finds, downloads and installs the PAS desktop client. When the PAS launches for the first time, it walks him through a series of panels with high-level summaries of the value proposition behind the tool and how to get started using it. PAS then presents him with his personal home screen where a pre-defined Project can be selected to learn more about the tool.</p><p id="p-0088" num="0087">Use case 2: A new IR employee receives an email from IT with instructions to download and learn about the company's collaboration tool of choice, the Prysm Application Suite. Just as with his other Microsoft tools, he navigates to the Windows Application Store and finds, downloads and installs the PAS desktop client. When the PAS launches for the first time, it prompts him to personalize his presence settings, allowing him to change his stock photo, add a preferred nickname, and provide a space where he can let everyone know a little about his life outside of the office. PAS then presents him with his personal home screen with a menu of options: 1) learn about PAS 2) go to his PAS &#x201c;Department Home Workspace&#x201d; 3) browse message channels that might be of interest to him or 4) create a visual workspace. The new employee is able to learn at his own pace and experiment with this new tool, learn about his company's and departments procedures and policies through the rich interactive media placed in his department's home workspace, connect with people in and out of the department, and ultimately begin his own workspace to collaborate with those people.</p><p id="p-0089" num="0088">Use case 3: A financial analyst is prepping for an upcoming meeting with her Team that will make use of PAS. She browses her data files using Windows File Explorer, selecting content, and with one click sends up to 10 files at once to the Finance Department's end-of-quarter audit Project.</p><p id="p-0090" num="0089">Use case 4: Even with all these files she doesn't worry if there are last minute revisions prior to the meeting because the automated file update feature will take care of the update without having to login to PAS or the PAS Web Admin website to manually upload them.</p><p id="p-0091" num="0090">Use case 5: An engineer has her personal laptop open, searching the Web for information relevant to the meeting she's currently participating in. She finds the content, and since it's just a static diagram she uses one click to send it straight into the current Project and Workspace using a snapshot function on her Browser window. It appears immediately on the Workspace that is open on the large format display in the conference room. If it was a live Website the team needed, she would simply have copied the URL and opened a Browser in the Workspace via a website sharing function, all without getting up from the table, and without having to use an awkward on-screen keyboard or find the in-room keyboard.</p><p id="p-0092" num="0091">Use case 6: A graphic artist is working remotely, and he wants to share and contribute content to a collaboration session happening in a conference room back at the office. The team is using S4B to connect audio and video, and he uses his software to share, modify and annotate the marketing materials in real-time. The graphic artist is alternately sharing applications on his desktop, the entire desktop itself, and his secondary desktop when a separate space for private work is required. Additionally, anything shared on the display in the room, from personal devices via WSS, or plugged-in devices via HDMI or QuadLynk, to content within the Project, is shared back to the graphic artist via a visualization tool. The graphic artist is using one of the new MS Surface Studio computers, creating rich, beautiful content using the MS pen and Surface Dial and with no on-desktop UI.</p><p id="p-0093" num="0092">Use case 7: A supplier and a buyer are in geographically separate locations, and the buyer is a Prysm PAS customer. They are using Google Docs for simultaneous editing a BOM, and they want to get agreement on proposed component changes with the buyer's boss in a conference room at a third location. The three of them discuss the content using S4B for audio and video, and because the buyer has the document open, they use the collaboration software to share it with the boss and make changes in real time. Even though the supplier doesn't have collaboration software, collaboration software is used to bridge her current collaboration toolset out to a wider audience.</p><p id="p-0094" num="0093">Use case 8: Two astronomers are in geographically separate locations, at their respective desks, using disparate tool sets that are not web based or otherwise simultaneously viewed, let alone edited. They use S4B for audio, video, chat, and file transfer, and they both share out their applications, live, into the visualization tool. They can see each other's work, in real time. Once they have reviewed, annotated, revised and coordinated their respective observations, they snapshot the updated materials into the workspace so others in the Project can come along later to see the latest findings on intergalactic dust.</p><p id="p-0095" num="0094">Use case 9: Our new HR employee has mastered PAS and is looking to contribute to a new office-space design that is underway as part of a full-building re-model. Having been invited to the PAS &#x201c;HQ Remodel&#x201d; Project, he believes he might have some alternate ideas to the out-moded cube-farm being proposed. He uses PAS to chat with a couple of the younger members of the HR team, and they trade photos and floor plan graphics in the channel, comparing and contrasting them to existing plans, and realize they need a space to compare plans side-by-side, and visualize how an alternate plan might fit in the constraints of the facility layout. They create a Prysm workspace to visualize the implementation, and since it works surprisingly well, they invite their boss to view their work by sending a link to the Project/Workspace they have created. When the Boss sees it, she uses the in-project PAS audio capability to discuss refinements in real-time with the authors. She quickly determines that it's probably a stronger space that could appeal to the younger workers they are trying to attract, and should be considered as part of the HQ Remodel. As owner of the PAS HQ Remodel Project, she is able to import the new workspace with the alternate plans, and have them be considered along-side the other workspaces.</p><p id="p-0096" num="0095">Having considered example use cases in accordance with one or more embodiments, consider now an example system and device that can be utilized to implement the described embodiments.</p><heading id="h-0008" level="1">Example System and Device</heading><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example system generally at <b>800</b> that includes an example computing device <b>802</b> that is representative of one or more computing systems and/or devices that may implement the various techniques described herein. This is illustrated through inclusion of the shared browsing module <b>212</b>. The computing device <b>802</b> may be, for example, a server of a service provider, a device associated with a client (e.g., a client device), an on-chip system, and/or any other suitable computing device or computing system.</p><p id="p-0098" num="0097">The example computing device <b>802</b> as illustrated includes a processing system <b>804</b>, one or more computer-readable media <b>806</b>, and one or more I/O interface <b>808</b> that are communicatively coupled, one to another. Although not shown, the computing device <b>802</b> may further include a system bus or other data and command transfer system that couples the various components, one to another. A system bus can include any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and/or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated, such as control and data lines.</p><p id="p-0099" num="0098">The processing system <b>804</b> is representative of functionality to perform one or more operations using hardware. Accordingly, the processing system <b>804</b> is illustrated as including hardware elements <b>810</b> that may be configured as processors, functional blocks, and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements <b>810</b> are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors may be comprised of semiconductor(s) and/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions.</p><p id="p-0100" num="0099">The computer-readable storage media <b>806</b> is illustrated as including memory/storage <b>812</b>. The memory/storage <b>812</b> represents memory/storage capacity associated with one or more computer-readable media. The memory/storage component <b>812</b> may include volatile media (such as random access memory (RAM)) and/or nonvolatile media (such as read only memory (ROM), Flash memory, optical disks, magnetic disks, and so forth). The memory/storage component <b>812</b> may include fixed media (e.g., RAM, ROM, a fixed hard drive, and so on) as well as removable media (e.g., Flash memory, a removable hard drive, an optical disc, and so forth). The computer-readable media <b>806</b> may be configured in a variety of other ways as further described below.</p><p id="p-0101" num="0100">Input/output interface(s) <b>808</b> are representative of functionality to allow a user to enter commands and information to computing device <b>802</b>, and also allow information to be presented to the user and/or other components or devices using various input/output devices. Examples of input devices include a keyboard, a cursor control device (e.g., a mouse), a microphone, a scanner, touch functionality (e.g., capacitive or other sensors that are configured to detect physical touch), a camera (e.g., which may employ visible or non-visible wavelengths such as infrared frequencies to recognize movement as gestures that do not involve touch), and so forth. Examples of output devices include a display device (e.g., a monitor or projector), speakers, a printer, a network card, tactile-response device, and so forth. Thus, the computing device <b>802</b> may be configured in a variety of ways as further described below to support user interaction.</p><p id="p-0102" num="0101">Various techniques may be described herein in the general context of software, hardware elements, or program modules. Generally, such modules include routines, programs, objects, elements, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. The terms &#x201c;module,&#x201d; &#x201c;functionality,&#x201d; and &#x201c;component&#x201d; as used herein generally represent software, firmware, hardware, or a combination thereof. The features of the techniques described herein are platform-independent, meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.</p><p id="p-0103" num="0102">An implementation of the described modules and techniques may be stored on or transmitted across some form of computer-readable media. The computer-readable media may include a variety of media that may be accessed by the computing device <b>802</b>. By way of example, and not limitation, computer-readable media may include &#x201c;computer-readable storage media&#x201d; and &#x201c;computer-readable signal media.&#x201d;</p><p id="p-0104" num="0103">&#x201c;Computer-readable storage media&#x201d; may refer to media and/or devices that enable persistent and/or non-transitory storage of information in contrast to mere signal transmission, carrier waves, or signals per se. Thus, computer-readable storage media refers to non-signal bearing media. The computer-readable storage media includes hardware such as volatile and non-volatile, removable and non-removable media and/or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions, data structures, program modules, logic elements/circuits, or other data. Examples of computer-readable storage media may include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, hard disks, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or other storage device, tangible media, or article of manufacture suitable to store the desired information and which may be accessed by a computer.</p><p id="p-0105" num="0104">&#x201c;Computer-readable signal media&#x201d; may refer to a signal-bearing medium that is configured to transmit instructions to the hardware of the computing device <b>802</b>, such as via a network. Signal media typically may embody computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier waves, data signals, or other transport mechanism. Signal media also include any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media.</p><p id="p-0106" num="0105">As previously described, hardware elements <b>810</b> and computer-readable media <b>806</b> are representative of modules, programmable device logic and/or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein, such as to perform one or more instructions. Hardware may include components of an integrated circuit or on-chip system, an application-specific integrated circuit (ASIC), a field-programmable gate array (FPGA), a complex programmable logic device (CPLD), and other implementations in silicon or other hardware. In this context, hardware may operate as a processing device that performs program tasks defined by instructions and/or logic embodied by the hardware as well as a hardware utilized to store instructions for execution, e.g., the computer-readable storage media described previously.</p><p id="p-0107" num="0106">Combinations of the foregoing may also be employed to implement various techniques described herein. Accordingly, software, hardware, or executable modules may be implemented as one or more instructions and/or logic embodied on some form of computer-readable storage media and/or by one or more hardware elements <b>810</b>. The computing device <b>802</b> may be configured to implement particular instructions and/or functions corresponding to the software and/or hardware modules. Accordingly, implementation of a module that is executable by the computing device <b>802</b> as software may be achieved at least partially in hardware, e.g., through use of computer-readable storage media and/or hardware elements <b>810</b> of the processing system <b>804</b>. The instructions and/or functions may be executable/operable by one or more articles of manufacture (for example, one or more computing devices <b>802</b> and/or processing systems <b>804</b>) to implement techniques, modules, and examples described herein.</p><p id="p-0108" num="0107">The techniques described herein may be supported by various configurations of the computing device <b>802</b> and are not limited to the specific examples of the techniques described herein. This functionality may also be implemented all or in part through use of a distributed system, such as over a &#x201c;cloud&#x201d; <b>814</b> via a platform <b>816</b> as described below.</p><p id="p-0109" num="0108">The cloud <b>814</b> includes and/or is representative of a platform <b>816</b> for resources <b>818</b>. The platform <b>816</b> abstracts underlying functionality of hardware (e.g., servers) and software resources of the cloud <b>814</b>. The resources <b>818</b> may include applications and/or data that can be utilized while computer processing is executed on servers that are remote from the computing device <b>802</b>. Resources <b>818</b> can also include services provided over the Internet and/or through a subscriber network, such as a cellular or Wi-Fi network.</p><p id="p-0110" num="0109">The platform <b>816</b> may abstract resources and functions to connect the computing device <b>802</b> with other computing devices. The platform <b>816</b> may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources <b>818</b> that are implemented via the platform <b>816</b>. Accordingly, in an interconnected device embodiment, implementation of functionality described herein may be distributed throughout the system <b>800</b>. For example, the functionality may be implemented in part on the computing device <b>802</b> as well as via the platform <b>816</b> that abstracts the functionality of the cloud <b>814</b>.</p><heading id="h-0009" level="1">CONCLUSION</heading><p id="p-0111" num="0110">Although the invention has been described in language specific to structural features and/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as example forms of implementing the claimed invention. U.S. patent application Ser. No. 16/123,746 is incorporated by reference in its entirety.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method comprising:<claim-text>receiving, by a centralized service provider, a message that indicates that a shared application that permits retrieval, presentation and traversal of information resources is to be created as part of a collaboration amongst multiple appliances, wherein the centralized service provider is not one of the multiple appliances participating in the collaboration;</claim-text><claim-text>responsive to receiving the message, instantiating a container at the centralized service provider, the container being configured to execute the shared application; and</claim-text><claim-text>using the container to cause the shared application to be shared with the multiple appliances.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said using comprises capturing video of execution of the shared application using a software camera and streaming the captured video to a server configured to share the captured video with the multiple appliances.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said using comprises using one or more event listeners to listen for user events associated with an appliance user's interaction with the shared application and causing said user's interaction to be executed on the shared application.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said using comprises using one or more event listeners to listen for user events associated with an appliance user's interaction with the shared application and causing said user's interaction to be executed on the shared application; capturing video of execution of the appliance user's interaction with the shared application using a software camera; and streaming the captured video to a server configured to share the captured video with the multiple appliances.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said using comprises contacting a port mapper to ascertain a server to which captured video of execution of the shared application is to be streamed.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said using comprises:<claim-text>contacting a port mapper to ascertain a server to which captured video of execution of the shared application is to be streamed;</claim-text><claim-text>capturing video of execution of the shared application using a software camera; and</claim-text><claim-text>streaming the captured video to the server, wherein the server is configured to share the captured video with the multiple appliances.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said using comprises:<claim-text>contacting a port mapper to ascertain a server to which captured video of execution of the shared application is to be streamed;</claim-text><claim-text>sending an event to each of the multiple appliances informing each of the multiple appliances of the server from which the captured video may be accessed;</claim-text><claim-text>capturing video of execution of the shared application using a software camera; and</claim-text><claim-text>streaming the captured video to the server, wherein the server is configured to share the captured video with the multiple appliances.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising enabling control to be passed amongst the multiple appliances to enable only one user to interact with the shared application at a time.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method as described in <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, responsive to control of the shared application being passed from one user to another, dehydrating state information associated with a particular user from whom control is passed.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method as described in <claim-ref idref="CLM-00009">claim 9</claim-ref> further comprising responsive to control of the shared application being passed back to the particular user, rehydrating the state information.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system implemented in a collaborative environment in which multiple appliances can share a common network connection to participate in a collaboration in which assets can be shared amongst the multiple appliances, the system comprising:<claim-text>a centralized service provider;</claim-text><claim-text>one or more processors associated with the centralized service provider;</claim-text><claim-text>one or more computer-readable media storing computer-executable instructions which, when executed by the one or more processors perform operations comprising:<claim-text>receiving, by the centralized service provider, a message that indicates that a shared application is to be created as part of the collaboration amongst multiple appliances, wherein the centralized service provider is not one of the multiple appliances participating in the collaboration;</claim-text><claim-text>responsive to receiving the message, instantiating, by the centralized service provider, a container configured to execute the shared application; and</claim-text><claim-text>using the container to cause the shared application to be shared with the multiple appliances.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said using comprises capturing video of execution of the shared application using a software camera and streaming the captured video to a server configured to share the captured video with the multiple appliances.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said using comprises using one or more event listeners to listen for user events associated with an appliance user's interaction with the shared application and causing said user's interaction to be executed on the shared application.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said using comprises using one or more event listeners to listen for user events associated with an appliance user's interaction with the shared application and causing said user's interaction to be executed on the shared application; capturing video of execution of the appliance user's interaction with the shared application using a software camera; and streaming the captured video to a server configured to share the captured video with the multiple appliances.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said using comprises contacting a port mapper to ascertain a server to which captured video of execution of the shared application is to be streamed.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said using comprises:<claim-text>contacting a port mapper to ascertain a server to which captured video of execution of the shared application is to be streamed;</claim-text><claim-text>capturing video of execution of the shared application using a software camera; and</claim-text><claim-text>streaming the captured video to the server, wherein the server is configured to share the captured video with the multiple appliances.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein said using comprises:<claim-text>contacting a port mapper to ascertain a server to which captured video of execution of the shared application is to be streamed;</claim-text><claim-text>sending an event to each of the multiple appliances informing each of the multiple appliances of the server from which the captured video may be accessed;</claim-text><claim-text>capturing video of execution of the shared application using a software camera; and</claim-text><claim-text>streaming the captured video to the server, wherein the server is configured to share the captured video with the multiple appliances.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system as described in <claim-ref idref="CLM-00011">claim 11</claim-ref> further comprising enabling control to be passed amongst the multiple appliances to enable only one user to interact with the shared application at a time.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. One or more computer-readable media storing computer-executable instructions which, when executed by the one or more processors, perform operations comprising:<claim-text>receiving, by a centralized service provider, a message that indicates that a shared application is to be created as part of a collaboration amongst multiple appliances, wherein the centralized service provider is not one of the multiple appliances participating in the collaboration;</claim-text><claim-text>responsive to receiving the message, instantiating a container configured to execute shared application; and</claim-text><claim-text>using the container to cause the shared application to be shared with the multiple appliances.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The one or more computer-readable media as described in <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the shared application comprises an application that permits retrieval, presentation and traversal of information resources.</claim-text></claim></claims></us-patent-application>