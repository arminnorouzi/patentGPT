<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005056A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005056</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17939897</doc-number><date>20220907</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>40</main-group><subgroup>02</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>40</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>40</main-group><subgroup>025</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>3678</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>40</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>3676</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>0658</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Systems and Methods for Tokenized Control of Smart Contracts</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16721067</doc-number><date>20191219</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11468509</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17939897</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62897589</doc-number><date>20190909</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62879187</doc-number><date>20190726</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62835801</doc-number><date>20190418</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62832145</doc-number><date>20190410</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Akiva Capital Holdings Inc.</orgname><address><city>New York</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Dubrofsky</last-name><first-name>Akiva</first-name><address><city>Toronto</city><country>CA</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods and systems for automatically conducting a continuous forward rate agreement in a cryptocurrency using smart contracts. An obligation object is generated and provided with control of a first smart contract, which may be a collateralized debt position smart contract, and control of a lender amount. The obligation object is executed to update balances for first and second parties until the obligation object is liquidated or terminated. Additional parties may be introduced. Upon liquidation or termination, the obligation object accounts to each of the parties based on their balances, and based on tokens generated to track positions in the obligation object.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="112.61mm" wi="158.75mm" file="US20230005056A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="193.21mm" wi="158.75mm" orientation="landscape" file="US20230005056A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="186.44mm" wi="120.99mm" orientation="landscape" file="US20230005056A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="225.21mm" wi="141.90mm" file="US20230005056A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="222.33mm" wi="135.81mm" file="US20230005056A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="233.51mm" wi="165.27mm" file="US20230005056A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="202.18mm" wi="133.52mm" file="US20230005056A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="202.18mm" wi="132.67mm" file="US20230005056A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="222.25mm" wi="133.77mm" file="US20230005056A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="198.46mm" wi="144.19mm" file="US20230005056A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="232.16mm" wi="150.62mm" orientation="landscape" file="US20230005056A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="101.09mm" wi="150.62mm" orientation="landscape" file="US20230005056A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="108.29mm" wi="135.21mm" orientation="landscape" file="US20230005056A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="210.90mm" wi="150.62mm" orientation="landscape" file="US20230005056A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="241.38mm" wi="167.47mm" file="US20230005056A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/721,067, filed Dec. 19, 2019, which claims the benefit of U.S. Provisional Patent Application No. 62/832,145, filed Apr. 10, 2019, U.S. Provisional Patent Application No. 62/835,801, filed Apr. 18, 2019, U.S. Provisional Patent Application No. 62/879,187, filed Jul. 26, 2019, U.S. Provisional Patent Application No. 62/897,589, filed Sep. 9, 2019, and U.S. patent application Ser. No. 16/721,067, filed Dec. 19, 2019, the entire contents of which are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">The described embodiments relate to systems and methods for conducting electronic transactions and, in particular, electronic transactions in a distributed ledger system.</p><heading id="h-0003" level="1">INTRODUCTION</heading><p id="p-0004" num="0003">The Ethereum blockchain is programmable, and allows users to create and deploy custom programs in the form of smart contracts. The programmability of the Ethereum blockchain is made possible in part by the Ethereum Virtual Machine (&#x201c;EVM&#x201d;), which is Turing complete, and operates to execute the program code of smart contracts deployed on the Ethereum blockchain.</p><p id="p-0005" num="0004">The Ethereum blockchain is comprised of multiple nodes that communicate with each other via a peer-to-peer network protocol. Each node executes its own EVM and, in particular, each node executes the same program code of deployed smart contracts using its own local EVM. Because each node executes the EVM separately, the Ethereum network uses a protocol to maintain consensus across all nodes, allowing nodes to maintain a shared state. This consensus mechanism renders certain data stored in the blockchain immutable after it has been confirmed via the consensus mechanism.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">In a first broad aspect, there is provided a method for automatically conducting a continuous forward rate agreement (CFRA) in a cryptocurrency using smart contracts, the method comprising: identifying a first smart contract, the first smart contract having a first address and a first borrower address associated therewith, the first smart contract having (i) a owed amount value initially based on an amount of cryptocurrency transferred to the first borrower address, (ii) a collateral value representing a value of a collateral object committed to the smart contract associated with the first borrower address, (iii) an interest rate query routine configured to periodically determine a first variable interest rate based at least on an extrinsic rate or an intrinsic rate; identifying at least one loan token associated with the first smart contract, the at least one loan token representing an interest in the collateral object; identifying a second smart contract, the second smart contract having a second address and a first lender address associated therewith, the second smart contract having (i) a lender balance representing a lender amount of cryptocurrency associated with the first lender address, and (ii) a second interest rate query routine configured to periodically determine a second variable interest rate based at least on the extrinsic rate or the intrinsic rate; generating an obligation object, wherein generating the obligation object comprises: receiving control of the at least one loan token; generating a borrower balance of the obligation object based on the collateral value associated with the at least one loan token; receiving control of the lender amount; generating the lender balance of the obligation object based on the lender amount; generating at least one lender token and at least one borrower token; associating the at least one lender token with the first lender address; associating the at least one borrower token with the first borrower address; and determining a predetermined interest rate associated with the obligation object; and executing the obligation object, wherein executing the obligation object comprises: receiving at least one first payment from the first borrower address; receiving at least one second payment from the first lender address; updating the borrower balance based on the at least one first payment and the at least one second payment; detecting a triggering event; and in response to detection of the triggering event: computing a lender return amount based on the lender balance and the at least one first payment; computing a borrower return amount based on the borrower balance and the at least one first payment; and releasing a cryptocurrency based on the lender return amount and the borrower return amount.</p><p id="p-0007" num="0006">In some cases, the at least one lender token comprises a plurality of lender tokens.</p><p id="p-0008" num="0007">In some cases, a subset of the plurality of lender tokens is associated with a second lender address, and wherein the lender amount is re-allocated between the first lender address and the second lender address according to a proportion of the plurality of lender tokens associated with the first and second lender addresses, respectively.</p><p id="p-0009" num="0008">In some cases, the method may further comprise: de-associating the at least one lender token from the first lender address; transferring a subset of the loan amount to the first lender; and receiving a secondary loan amount to replace the subset of the loan amount, from the second lender.</p><p id="p-0010" num="0009">In some cases, the at least one borrower token comprises a plurality of borrower tokens.</p><p id="p-0011" num="0010">In some cases, a subset of the plurality of borrower tokens is associated with a second borrower address, and wherein the borrower balance is re-allocated between the first borrower address and the second borrower address according to a proportion of the plurality of borrower tokens associated with the first and second borrower addresses, respectively.</p><p id="p-0012" num="0011">In some cases, the method may further comprise de-associating the at least one borrower token from the first borrower address.</p><p id="p-0013" num="0012">In some cases, generating the obligation object further comprises querying an external server or smart contract to determine the predetermined interest rate.</p><p id="p-0014" num="0013">In some cases, the predetermined interest rate is fixed.</p><p id="p-0015" num="0014">In some cases, executing the obligation object further comprises: determining that the extrinsic rate is below the predetermined interest rate; and increasing a proportion of the loan amount to be allocated to the lender address, based on the difference between the extrinsic rate and the predetermined interest rate.</p><p id="p-0016" num="0015">In some cases, executing the obligation object further comprises: determining that the extrinsic rate is above the predetermined interest rate; and increasing a proportion of the loan amount to be allocated to the borrower address, based on the difference between the extrinsic rate and the predetermined interest rate.</p><p id="p-0017" num="0016">In some cases, receiving control of the lender amount comprises the obligation object receiving control of the lender amount, the method further comprising transferring a portion of the lender amount to the first smart contract to reduce the owed amount value.</p><p id="p-0018" num="0017">In some cases, detecting the triggering event comprises detecting that the collateral value is lower than the loan amount presently allocated to the lender.</p><p id="p-0019" num="0018">In some cases, detecting the triggering event comprises detecting that a term of the obligation object has elapsed.</p><p id="p-0020" num="0019">In some cases, the first payment is at least one borrower interest payment based on the first variable interest rate.</p><p id="p-0021" num="0020">In some cases, the second payment is at least one lender interest payment based on the second variable interest rate.</p><p id="p-0022" num="0021">In some cases, the obligation object is a smart contract.</p><p id="p-0023" num="0022">In some cases, the at least one first payment comprises a plurality of payments, and wherein the monitoring the at least one first payment comprises periodically monitoring the plurality of payments.</p><p id="p-0024" num="0023">In some cases, the cryptocurrency is based on a form of Dai. In some cases, the extrinsic rate is a Dai Savings Rate. In some cases, the extrinsic rate is based on a dividend rate.</p><p id="p-0025" num="0024">In another broad aspect, there is provided a method for automatically conducting a continuous forward rate agreement in a cryptocurrency using smart contracts, the method comprising: generating an obligation object, the obligation object having a first address and a first borrower address associated therewith, the obligation object having (i) an owed amount value initially based on an amount of cryptocurrency transferred to the first borrower address, (ii) a collateral value representing a value of a collateral object committed to the obligation object by the first borrower address, (iii) an interest rate query routine configured to periodically determine a first variable interest rate based at least on an extrinsic rate or an intrinsic rate, the obligation object further having a first lender address associated therewith, and (i) a lender balance representing a lender amount of cryptocurrency associated with the first lender address, wherein generating the obligation object further comprises: generating a borrower balance of the obligation object based on the collateral value associated with the at least one loan token; generating the lender balance of the obligation object based on the lender amount; generating at least one lender token and at least one borrower token; associating the at least one lender token with the first lender address; associating the at least one borrower token with the first borrower address; and determining a predetermined interest rate associated with the obligation object; and executing the obligation object, wherein executing the obligation object comprises: receiving at least one first payment from the first borrower address; receiving at least one second payment from the first lender address; updating the borrower balance based on the at least one first payment and the at least one second payment; detecting a triggering event; and in response to detection of the triggering event: computing a lender return amount based on the lender balance and the at least one first payment; computing a borrower return amount based on the borrower balance and the at least one first payment; and releasing a cryptocurrency based on the lender return amount and the borrower return amount.</p><p id="p-0026" num="0025">In another broad aspect, there is provided a non-transitory computer readable medium storing computer program code executable by a processor, which when executed by the processor causes the processor to carry out the methods described herein.</p><p id="p-0027" num="0026">In still another broad aspect, there is provided a system for automatically conducting a continuous forward rate agreement in a cryptocurrency using smart contracts, the system comprising: a data communications network; at least one lender device; at least one borrower device; and at least one node device comprising a processor and a memory, the processor configured to carry out the methods described herein.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">DRAWINGS</heading><p id="p-0028" num="0027">A preferred embodiment of the present invention will now be described in detail with reference to the drawings, in which:</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic block diagram of a system in accordance with at least some example embodiments;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a simplified schematic block diagram of a computing device in accordance with at least some example embodiments;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIGS. <b>3</b>A to <b>3</b>C</figref> are process flow diagrams illustrating methods of conducting transactions in accordance with at least some embodiments;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a process flow diagram of a method of changing at least one or more lenders associated with an obligation object;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a process flow diagram of a method of changing at least one or more borrowers associated with an obligation object;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a process flow diagram for an example life cycle of a CDP smart contract;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a process flow diagram for an example method of transferring lenders associated with an obligation object in accordance with some embodiments;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIGS. <b>8</b>A to <b>8</b>D</figref> are process flow diagrams illustrating the creation of obligation objects in accordance with some embodiments; and</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a process flow diagram illustrating methods of conducting transactions in accordance with at least some embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DEFINITIONS</heading><p id="p-0038" num="0037">Collateralized Debt Position (CDP)&#x2014;an agreement, generally enforced via smart contract, which permits an assetholder to deposit a digital asset, and borrow a corresponding amount of Dai. The borrowed Dai must be repaid to withdraw the collateral asset. A CDP is collateralized in excess, meaning that the value of the collateral is intended to be higher than the value of the generated Dai.<br/>Continuous Forward Rate Agreement (CFRA)&#x2014;a variant of a forward rate agreement that incorporates the continuous aspects of an interest rate swap. In a CFRA, the amount owed may be a function of an externally-defined rate or rates over the life of the contract (rather than merely the end). This is in contrast to a conventional forward rate agreement, in which the amount owed is computed solely based on the rate at the expiry of the agreement term.<br/>Decentralized Autonomous Organization (DAO)&#x2014;an organization represented by rules defined in a computer program, such as a smart contract, and which is controlled by shareholders. The DAO's records and program rules may be stored and updated on a blockchain.<br/>Dai&#x2014;a decentralized, collateral-backed cryptocurrency, which is programmed to maintain a stable value relative to an extrinsic store of value (i.e., U.S. Dollar). Dai is administered by the Maker DAO. Dai is stabilized through a system of Collateralized Debt Positions, autonomous feedback mechanisms and incentives for external actors.<br/>Dai Savings&#x2014;a mechanism, such as a smart contract, implemented in the Dai cryptocurrency that enables a holder of Dai cryptocurrency to lock or unlock Dai at any time. Dai that is locked accrues additional Dai over time, at a rate based on the DSR value.<br/>Dai Savings Rate (DSR)&#x2014;a global system variable in the Dai cryptocurrency system, which defines the interest or accrual rate for locked Dai.<br/>Governance Fee&#x2014;a fee paid by holders of a CDP smart contract to the holders of the MKR governance token, as compensation for the costs of minting Dai and to incentivize MKR holders to keep the value of Dai stable.<br/>MKR&#x2014;a governance token within the Maker DAO system. Holders of MKR tokens are permitted to cast votes on proposals for changes to the Maker DAO.<br/>Stability Fee&#x2014;a fee charged to borrow Dai using a CDP, the Stability Fee is based on the Governance Fee and DSR.</p><heading id="h-0007" level="1">DESCRIPTION OF VARIOUS EMBODIMENTS</heading><p id="p-0039" num="0038">It will be appreciated that for simplicity and clarity of illustration, where considered appropriate, reference numerals may be repeated among the figures to indicate corresponding or analogous elements or steps. In addition, numerous specific details are set forth in order to provide a thorough understanding of the exemplary embodiments described herein. However, it will be understood by those of ordinary skill in the art that the embodiments described herein may be practiced without these specific details, or with other methods, components, materials, etc. In other instances, well-known methods, procedures and components have not been described in detail since these are known to those skilled in the art. Furthermore, it should be noted that this description is not intended to limit the scope of the embodiments described herein, but rather as merely describing one or more exemplary implementations.</p><p id="p-0040" num="0039">Unless the context requires otherwise, throughout the specification and claims which follow, the word &#x201c;comprise&#x201d; and variations thereof, such as, &#x201c;comprises&#x201d; and &#x201c;comprising&#x201d; are to be construed in an open, inclusive sense, that is as &#x201c;including, but not limited to.&#x201d;</p><p id="p-0041" num="0040">It should be noted that terms of degree such as &#x201c;substantially&#x201d;, &#x201c;about&#x201d; and &#x201c;approximately&#x201d; when used herein mean a reasonable amount of deviation of the modified term such that the end result is not significantly changed. These terms of degree should be construed as including a deviation of the modified term if this deviation would not negate the meaning of the term it modifies.</p><p id="p-0042" num="0041">Reference throughout this specification to &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; means that a particular feature, structures, or characteristics may be combined in any suitable manner in one or more embodiments.</p><p id="p-0043" num="0042">As used in this specification and the appended claims, the singular forms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; include plural referents unless the content clearly dictates otherwise. It should also be noted that the term &#x201c;or&#x201d; is generally employed in its broadest sense, that is as meaning &#x201c;and/or&#x201d; unless the content clearly dictates otherwise.</p><p id="p-0044" num="0043">The headings and Abstract of the Disclosure provided herein are for convenience only and do not interpret the scope or meaning of the embodiments.</p><p id="p-0045" num="0044">The terms &#x201c;coupled&#x201d; or &#x201c;coupling&#x201d; as used herein can have several different meanings depending in the context in which these terms are used. For example, the terms coupled or coupling may be used to indicate that an element or device can electrically, optically, or wirelessly send data to another element or device as well as receive data from another element or device.</p><p id="p-0046" num="0045">Similarly, throughout this specification and the appended claims the term &#x201c;communicative&#x201d; as in &#x201c;communicative pathway,&#x201d; &#x201c;communicative coupling,&#x201d; and in variants such as &#x201c;communicatively coupled,&#x201d; is generally used to refer to any engineered arrangement for transferring and/or exchanging information. Exemplary communicative pathways include, but are not limited to, electrically conductive pathways (e.g., electrically conductive wires, electrically conductive traces), magnetic pathways (e.g., magnetic media), optical pathways (e.g., optical fiber), electromagnetically radiative pathways (e.g., radio waves), or any combination thereof. Exemplary communicative couplings include, but are not limited to, electrical couplings, magnetic couplings, optical couplings, radio couplings, or any combination thereof.</p><p id="p-0047" num="0046">Throughout this specification and the appended claims, infinitive verb forms are often used. Examples include, without limitation: &#x201c;to detect,&#x201d; &#x201c;to provide,&#x201d; &#x201c;to transmit,&#x201d; &#x201c;to communicate,&#x201d; &#x201c;to process,&#x201d; &#x201c;to route,&#x201d; and the like. Unless the specific context requires otherwise, such infinitive verb forms are used in an open, inclusive sense, that is as &#x201c;to, at least, detect,&#x201d; to, at least, provide,&#x201d; &#x201c;to, at least, transmit,&#x201d; and so on.</p><p id="p-0048" num="0047">The example embodiments of the systems and methods described herein may be implemented as a combination of hardware or software. In some cases, the example embodiments described herein may be implemented, at least in part, by using one or more computer programs, executing on one or more programmable devices comprising at least one processing element, and a data storage element (including volatile memory, non-volatile memory, storage elements, or any combination thereof). These devices may also have at least one input device (e.g. a keyboard, mouse, touchscreen, or the like), and at least one output device (e.g. a display screen, a printer, a wireless radio, or the like) depending on the nature of the device.</p><p id="p-0049" num="0048">It should also be noted that there may be some elements that are used to implement at least part of one of the embodiments described herein that may be implemented via software or software applications that are written in a high-level computer programming language such as one that employs a functional paradigm or object-oriented paradigm. Accordingly, the program code may be written in Python, Java, C, C++ or any other suitable programming language and may comprise modules or classes, as is known to those skilled in object-oriented programming. Alternatively, or in addition thereto, some of these elements implemented via software may be written in assembly language, machine language or firmware as needed. In either case, the language may be a compiled or interpreted language.</p><p id="p-0050" num="0049">A software application can be, for example, a monolithic software application, built in-house by an organization and possibly running on custom hardware; a set of interconnected modular subsystems running on similar or diverse hardware; a software-as-a-service application operated remotely by a third party; third party software running on outsourced infrastructure, etc. In some cases, a software application also may be less formal, or constructed in ad hoc fashion, such as a programmable spreadsheet document that has been modified to perform computations for the organization's needs.</p><p id="p-0051" num="0050">Software applications may be deployed to and installed on a computing device on which they are to operate. Depending on the nature of the operating system and/or platform of the computing device, an application may be deployed directly to the computing device, and/or the application may be downloaded from an application marketplace. For example, user of the user device may download the application through an app store such as the Apple App Store&#x2122; or Google&#x2122; Play&#x2122;.</p><p id="p-0052" num="0051">At least some of these software programs may be stored on a storage media (e.g. a computer readable medium such as, but not limited to, ROM, EEPROM, magnetic disk, optical disc) or a device that is readable by a general or special purpose programmable device. The software program code, when read by the programmable device, configures the programmable device to operate in a new, specific and predefined manner in order to perform at least one of the methods described herein.</p><p id="p-0053" num="0052">The terms &#x201c;program&#x201d;, &#x201c;software program&#x201d;, &#x201c;software application&#x201d;, &#x201c;application&#x201d; and &#x201c;smart contract&#x201d; as used herein refer to computer-executable instructions, particularly computer-executable instructions stored in a non-transitory medium, such as a non-volatile memory, and executed by a computer processor. The computer processor, when executing the instructions, may receive inputs and transmit outputs to any of a variety of input or output devices to which it is coupled. Software applications may include mobile applications or &#x201c;apps&#x201d; for use on mobile devices such as smartphones and tablets or other &#x201c;smart&#x201d; devices.</p><p id="p-0054" num="0053">A smart contract is a particular type of software program. Generally, a smart contract is programmed to apply or enforce a set of rules or conditions. These rules or conditions may depend on extrinsic factors, such as data from external sources (e.g., a web server, a third-party device, etc.). For example, in at least some smart contracts, the program code may be triggered by an input message, causing the smart contract to execute at least one subroutine. The at least one subroutine may, for example, query a server, obtain response data, and then carry out some further action (e.g., &#x201c;enforce&#x201d; certain terms of the smart contract) according to the smart contract's program code.</p><p id="p-0055" num="0054">In at least some embodiments, a smart contract may be implemented using a blockchain or distributed ledger system, such as the Ethereum blockchain developed by the Ethereum Foundation. However, in some alternative embodiments, a smart contract may be implemented without a blockchain or distributed ledger system.</p><p id="p-0056" num="0055">Operation of the Ethereum blockchain can be modeled as a series of state transitions for a plurality of &#x201c;accounts&#x201d;. Accordingly, the Ethereum blockchain, via execution of EVMs at each node, tracks the state of every account. State transitions on the Ethereum blockchain can be considered as transfers of information by and/or between accounts. There are two primary types of accounts: Externally Owned Accounts (EOAs), which are controlled by private cryptographic keys; and Contract Accounts, which are controlled by smart contract code, and may be &#x201c;activated&#x201d; or &#x201c;triggered&#x201d; by an EOA or, more particularly, when a transaction occurs that causes the Contract Account to activate and perform an operation. Both types of accounts have an address associated therewith, which may be represented as a hexadecimal string (e.g., 0xbfb2e296d9cf3e593a79981235aed29aa9984c0f).</p><p id="p-0057" num="0056">The term &#x201c;smart contract&#x201d; can refer to code in a Contract Account&#x2014;programs that execute when a transaction is sent to that account. Users can create new contracts by deploying code to the blockchain. Each smart contract generally has at least one Contract Account, and therefore at least one unique address. Generally, the computer program code of smart contracts executes in discrete intervals, in response to external triggers or activations (e.g., queries, updates or other transactions on the underlying blockchain), rather than executing continuously over time.</p><p id="p-0058" num="0057">While the embodiments are described herein with reference to the Ethereum blockchain, the described embodiments may also be implemented using other blockchain or distributed ledger systems. In some cases, the described embodiments may also be implemented using a centralized approach.</p><p id="p-0059" num="0058">The description sets forth various embodiments of the systems, devices and/or processes via the use of block diagrams, schematics, and examples. Insofar as such block diagrams, schematics, and examples contain one or more functions and/or operations, it will be understood by those skilled in the art that each function and/or operation within such block diagrams, flowcharts, or examples can be implemented, individually and/or collectively, by a wide range of hardware, software, firmware, or virtually any combination thereof. However, those skilled in the art will recognize that the embodiments disclosed herein, in whole or in part, can be equivalently implemented in standard integrated circuits, as one or more computer programs executed by one or more computers (e.g., as one or more programs running on one or more computer systems), as one or more programs executed by on one or more controllers (e.g., microcontrollers) as one or more programs executed by one or more processors (e.g., microprocessors, central processing units, graphical processing units), as firmware, or as virtually any combination thereof, and that designing the circuitry and/or writing the code for the software and or firmware would be well within the skill of one of ordinary skill in the art in light of the teachings of this disclosure.</p><p id="p-0060" num="0059">When logic is implemented as software and stored in memory, logic or information can be stored on any processor-readable medium for use by or in connection with any processor-related system or method. In the context of this disclosure, a memory is a processor-readable medium that is an electronic, magnetic, optical, or other physical device or means that contains or stores a computer and/or processor program. Logic and/or the information can be embodied in any processor-readable medium for use by or in connection with an instruction execution system, apparatus, or device, such as a computer-based system, processor-containing system, or other system that can fetch the instructions from the instruction execution system, apparatus, or device and execute the instructions associated with logic and/or information.</p><p id="p-0061" num="0060">In the context of this specification, a &#x201c;non-transitory computer-readable medium&#x201d; can be any element that can store the program associated with logic and/or information for use by or in connection with the instruction execution system, apparatus, and/or device. The processor-readable medium can be, for example, but is not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus or device. More specific examples (a non-exhaustive list) of the computer readable medium would include the following: a portable computer diskette (magnetic, compact flash card, secure digital, or the like), a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM, EEPROM, or Flash memory), a portable compact disc read-only memory (CDROM), digital tape, and other non-transitory media.</p><p id="p-0062" num="0061">Popular digital assets such as Bitcoin (BTC) and Ether (ETH) are too volatile to be used as everyday currency. The value of BTC often experiences large fluctuations, rising or falling by as much as 25% in a single day and occasionally rising over 300% in one month.</p><p id="p-0063" num="0062">The Dai Stablecoin (&#x201c;Dai&#x201d;) is a collateral-backed cryptocurrency whose value is designed to be stable relative to a given fiat currency, such as the United States Dollar. The Dai Stablecoin is administered and managed by a decentralized autonomous organization (DAO) called Maker DAO, or simply &#x201c;Maker&#x201d;.</p><p id="p-0064" num="0063">Maker provides a smart contract platform on the Ethereum blockchain that backs and stabilizes the value of Dai related to a fiat currency through a dynamic system of Collateralized Debt Positions (CDPs), autonomous feedback mechanisms, and incentives to external actors.</p><p id="p-0065" num="0064">Maker enables anyone to leverage their Ethereum assets to generate Dai on the Maker Platform. Once generated, Dai can be used in the same manner as any other cryptocurrency: it can be freely sent to others, used as payments for goods and services, or held as long-term savings. The generation of Dai also creates the components needed for a robust decentralized lending platform. Users also can obtain Dai by buying it from brokers or exchanges</p><p id="p-0066" num="0065">Holders of Dai can utilize the Dai Savings mechanism to earn a steady, low-risk return on their holdings based on the Dai Savings Rate.</p><p id="p-0067" num="0066">Anyone who has collateral assets can leverage them to generate Dai using Maker's Collateralized Debt Positions. Generally, a collateral asset is a digital asset that the decentralized Maker governance process has recognized and input into the system. For example, Ether cryptocurrency (ETH) is one form of digital asset that may be recognized as a collateral asset.</p><p id="p-0068" num="0067">CDPs are smart contracts that hold collateral assets deposited by a user and permit the user to generate Dai in exchange for control of the collateral asset. However, generating the Dai also accrues a debt. This debt effectively locks the deposited collateral assets inside the CDP smart contract until it is later covered by transferring an equivalent amount of Dai to the CDP smart contract, along with accrued interest, at which point the collateral asset can be withdrawn. As a policy, active CDPs are collateralized in excess, meaning that the value of the collateral is higher than the value of the debt.</p><p id="p-0069" num="0068">In the Maker platform, if the value of collateral in a CDP drops below the total debt (e.g., borrowed amount+accrued interest), the CDP can be liquidated and terminated.</p><p id="p-0070" num="0069">In the Maker platform, holders of Dai can be considered as indirect lenders to CDP users, since Dai holders essentially&#x2014;through their locked Dai&#x2014;serve to provide liquidity to the debt generated by CDP users. In view of this, Dai holders may be referred to as &#x201c;lenders&#x201d; and CDP users may be referred to as &#x201c;borrowers&#x201d;, even though there need not be any direct lending or borrowing between any parties. That is, any &#x201c;lending&#x201d; and &#x201c;borrowing&#x201d; may be indirect via the distinct mechanisms of Dai Savings and CDP smart contracts.</p><p id="p-0071" num="0070">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, there is illustrated a process flow diagram for an example life cycle of a CDP smart contract. As described herein, the process flow diagram may be carried out by a node of a blockchain, such as the Ethereum blockchain, when executed in an EVM.</p><p id="p-0072" num="0071">At <b>604</b>, the CDP may be instantiated by a transaction to Maker, and at <b>608</b>, a collateral deposit may be received by the CDP smart contract, e.g., in the form of ETH cryptocurrency. At this point, the CDP may be considered collateralized.</p><p id="p-0073" num="0072">At <b>612</b>, the CDP generates an amount of Dai cryptocurrency based on the determined value of the collateral deposit at <b>608</b>.</p><p id="p-0074" num="0073">At <b>616</b>, the CDP receives a withdrawal transaction from the user. The withdrawal transaction indicates an amount of Dai desired to be withdrawn from the CDP. The CDP smart contract then determines whether the Dai is available to be withdrawn and, if it is, authorizes the withdrawal. The CDP smart contract also updates an internal debt balance, which can be used to cause the smart contract to prevent withdrawal of the entire collateral asset until the internal debt balance is reduced to zero. However, in some embodiments, partial withdrawal of the collateral asset may be permitted by the smart contract according to a proportion of the total debt that has been paid.</p><p id="p-0075" num="0074">At <b>620</b>, the CDP receives a repayment transaction from the user. The repayment transaction transfers an amount of Dai to the CDP smart contract. At <b>624</b>, the CDP smart contract computes a fee, also called a Stability Fee, based on the amount of time the debt has been outstanding and adds this to the internal debt balance. The fee may also be computed at other times.</p><p id="p-0076" num="0075">At <b>628</b>, the CDP determines whether it has received repayment of any portion of the internal debt balance, including any fee or fees that have accrued. If payments have been received, then the CDP may permit withdrawal of a corresponding portion of the collateral asset at <b>632</b>. For example, if repayments of 40% of the debt balance (and associated fees) have been received, then up to 40% of the collateral asset may be permitted to be withdrawn, if it is sub divisible. At <b>636</b>, the CDP may be closed if it contains no collateral assets (e.g., if all repayments have been made and collateral assets withdrawn).</p><p id="p-0077" num="0076">Although the acts of method <b>600</b> are shown as discrete acts, in some embodiments, at least some acts may be combined, or further subdivided. For example, in some embodiments, the act of generating Dai cryptocurrency (<b>612</b>) may be combined with the act of withdrawal (<b>616</b>) in a single combined act.</p><p id="p-0078" num="0077">When, due to changing market dynamics, the market price of Dai deviates from the Target Price in the short run, Maker can mitigate this price instability by modifying the Dai Savings Rate. The Dai Savings Rate is a global system parameter that both affects how much Dai holders can earn in return on their holdings over time, as well as the base borrowing cost for generating Dai from CDPs.</p><p id="p-0079" num="0078">For example, if the market price of Dai falls below a target price (e.g., $1 USD), the Dai Savings Rate may increase. This boosts demand and stifles supply by incentivizing more Dai holders, and fewer CDP users, which is expected to increase the market price up towards the $1 USD target price.</p><p id="p-0080" num="0079">On the contrary, if the market price of Dai is above 1 USD, the Dai Savings Rate may decrease. This stifles demand and boosts supply, which is expected to reduce the market price of Dai down towards the $1 USD target price.</p><p id="p-0081" num="0080">Together these two mechanisms serve to adjust the value of Dai towards the target price.</p><p id="p-0082" num="0081">The Maker platform also provides for a savings system, which pays interest. A person who holds Dai cryptocurrency may lock Dai using the Dai Savings mechanism at any time, and may unlock Dai at any time also. When locked using the Dai Savings mechanism, Dai accrues over time, based on a global system variable called the Dai Savings Rate (DSR). There are no restrictions or fees for using the Dai Savings mechanism other than the Ethereum &#x201c;gas&#x201d; required for locking and unlocking transactions.</p><p id="p-0083" num="0082">For example, if the DSR remains at an average of 2%, a user who locks 100 Dai into DSR mode, and keeps it locked for the full year, would earn 2 Dai, which will be added automatically to their account. The accrued amount may be added, for example, when the Dai is unlocked or, in some cases, may be added at periodic intervals (e.g., in response to a query, update or other transaction).</p><p id="p-0084" num="0083">The DSR is funded out of the Stability Fees paid in CDP smart contracts. For example, if the average Stability Fees collected on CDPs are 3%, such fees may be used to fund a DSR of 2%.</p><p id="p-0085" num="0084">The DSR helps balance the supply and demand of Dai, and is one of the monetary policy levers that decentralized Maker governance can control. As noted, DSR is a global parameter that may be adjusted often to deal with short-term changes in market conditions of the Dai economy. This is in contrast to risk governance, which is a long-term process that involves setting Stability Fees, and other risk parameters individually for each collateral type.</p><p id="p-0086" num="0085">It should be noted again that, while the various embodiments are described herein with reference to the Ethereum blockchain, Maker platform and Dai cryptocurrency, the described methods and systems may be applied in other contexts, for example on different blockchain systems, with different cryptocurrencies, or, in some cases, in centralized non-blockchain systems.</p><p id="p-0087" num="0086">Both Stability Fees and the Dai Savings Rate are variable, and fluctuate over time. However, users may desire to have predetermined rates both when borrowing and when depositing their Dai.</p><p id="p-0088" num="0087">The described embodiments may relate to systems and methods for providing predetermined interest rates for borrowers and depositors of an asset (e.g., Dai or other cryptocurrency) through a continuous forward rate agreement.</p><p id="p-0089" num="0088">In an aspect of the described approach, a user, a borrower, may borrow Dai using a first smart contract (CDP smart contract), in exchange for collateral (e.g., ETH cryptocurrency) that is valued more than the borrowed Dai. The borrower pays a Stability Fee (i.e., interest) at a variable rate to borrow the Dai. The Stability Fee is based on a Governance Fee and the Dai Savings Rate (DSR), both of which may fluctuate over time.</p><p id="p-0090" num="0089">Another user, a depositor, may hold Dai. The depositor may lock the held Dai and thereafter receive interest at a variable rate based on the DSR.</p><p id="p-0091" num="0090">In an aspect, the described systems and methods provide for a continuous forward rate agreement smart contract (or other digital contract). The continuous forward rate agreement contract generally sets a predetermined or fixed interest rate (or a rate tied to some external metric other than DSR such as Federal Funds Rate or London Inter-bank Offer Rate (LIBOR)) between the borrower and depositor. If the current DSR drops below the predetermined interest rate, the borrower may be required to pay the depositor the difference from its lower borrowing costs, such that both parties' interest rate remains at the predetermined rate or rates. However, since the DSR and Stability Fee are correlated, the Stability Fee paid by the depositor may also decrease. Similarly, if the current DSR rises above the predetermined interest rate, the depositor may be required to pay the borrower the difference from the increased interest profits (and the Stability Fee increases). Accordingly, both parties can obtain a predetermined interest rate, due to the correlation between the DSR and the Stability Fee.</p><p id="p-0092" num="0091">In at least some embodiments, the continuous forward rate agreement may be initiated by the borrower, through an intermediary user, which may price the CFRA based on a risk analysis of the collateral assets and other aspects of the proposed CFRA. The intermediary may purchase the CFRA from the borrower and then sell the CFRA to a depositor.</p><p id="p-0093" num="0092">In some embodiments, the system can include multiple forms of escrow. In particular, a first centralized custody may hold tokens representing the borrower's and the depositor's positions in the CFRA contract. A second custody (either centralized or decentralized) may hold control of the CDP from the borrower and control of the Dai from the depositor as collateral for the CFRA contract.</p><p id="p-0094" num="0093">In some embodiments, the borrower and depositor may sell their CFRA positions (i.e., the tokens representing their respective position) to a subsequent borrower(s) or a subsequent depositor(s), respectively. The initial party can then receive back some of their collateral from the second custody, which is replenished by the subsequent party (e.g., if additional collateral is required). The tokens at the first custody are then updated to reflect the new positions of the parties.</p><p id="p-0095" num="0094">Generally, the smart contract has a fixed term at which the contract may end. In some circumstances, a mechanism may be provided for extending the term of the CFRA contract based on one or more factors, such as agreement of the parties. However, the smart contract may also end in some other circumstances (e.g., if the value of the CDP drops below the value the borrower owes the depositor). When the smart contract ends, each party's position is settled by paying out each party their amount owed. This may involve multiple parties if the borrower or depositor has sold their CFRA position to a subsequent borrower or a subsequent depositor.</p><p id="p-0096" num="0095">Depositors generally may desire assurances that the collateral to a CFRA contract is within their risk tolerances. Accordingly, intermediary users may be called upon to assess collateral and price CFRA contracts. Intermediary users may also, in some cases, determine if the collateral is likely to drop below the liquidation price (minimum collateralization ratio) of a CFRA contract during its term, and whether the collateral can be liquidated. In general, the intermediary may be incentivized to improve the user experience of the lender. This principle&#x2014;that the interest accrues with time&#x2014;then also improves the user experience of the borrower, since the borrower will not wish to pay interest if their collateral has been liquidated.</p><p id="p-0097" num="0096">Intermediary users may be compensated each time the CFRA contract is executed, or at prescribed milestones (e.g., termination of the CFRA contract).</p><p id="p-0098" num="0097">The described systems and methods provide for CFRA contracts to be collateralized by control or ownership of CDP contracts, as control of CDP contracts can be tokenized, and the tokens representing the control or ownership interest can be used as collateral for CFRA contracts. In some embodiments, the CDP contract itself may be tokenized. In other embodiments, a separate smart contract may be used to &#x201c;wrap&#x201d; the CDP contract and generate tokens representing control of, or interest in, the CDP contract. In such a way, a third-party can control the collateral object (e.g., CDP contract), by receiving the tokens that represent control of, or interest in, the CDP contract.</p><p id="p-0099" num="0098">Some of the described systems and methods involve the use of tokens that are managed by smart contracts and therefore such tokens can be, among other things, created, transferred, subdivided, multiplied, destroyed and so forth. These functions can be performed autonomously by the nodes of a blockchain system according to the execution of smart contracts (each of which has respective Contract Accounts), and therefore without the intervention of a human administrator. Moreover, the origin and use of the such tokens can be cryptographically secured&#x2014;both by Externally Owned Accounts and Contract Accounts&#x2014;and recorded, which enhances security, reliability and trustworthiness both in the tokens themselves, and also in the transactions that involve such tokens. In this sense, the described tokens are just one example of the manner in which at least some embodiments apply or use certain inherent aspects of blockchain or distributed ledger technology to enhance the security, reliability and trustworthiness of the described transactions.</p><p id="p-0100" num="0099">In another example, the use of smart contracts, which are controlled by Contract Accounts, enhances the security, reliability and trustworthiness of the described transactions in a way that would not be achievable if the functions of the smart contracts were executed by humans. In particular, because Contract Accounts can be designed to operate securely and autonomously, their use can enhance trust in the risk management functions they perform in a manner that would not be possible if human operators were performing the same functions. Unlike human agents, Contract Accounts inherently are not susceptible to moral hazards, and therefore can be used as escrow agents. Therefore, when a Contract Account&#x2014;by way of its associated smart contract&#x2014;receives control of an asset by virtue of a cryptographically-signed transaction, all parties can have increased confidence that the agreed-upon rules of the smart contract will be followed and that fraud by the smart contract itself is unlikely, if not altogether impossible. This then mitigates counterparty risk.</p><p id="p-0101" num="0100">In another aspect, the distributed nature of the described embodiments can enhance trustworthiness of the system, since the activity of many users dealing in small amounts serves to strengthen the overall system. By design, individual liquidations will not adversely affect other users.</p><p id="p-0102" num="0101">In some embodiments, assets other than stablecoins (e.g., DAI) may be used as collateral by an intermediary user, and placed into a collateral object. For example, an asset that is correlated to the extrinsic or intrinsic interest rate may be used as collateral.</p><p id="p-0103" num="0102">In some embodiments, the borrower user may undertake some counterparty risk and allow the intermediary user to use the same collateral object for multiple CFRA contracts. However, the presence of some collateral may allow the parties to enter the contract with a low level of risk.</p><p id="p-0104" num="0103">There can be a variety of different intermediary users, who aim to improve experience of either borrower, lender, or both. As noted, the described embodiments allow for positions (whether borrower, depositor, or intermediary) in a CFRA contract to be transferred by transfer of the tokens representing that position.</p><p id="p-0105" num="0104">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, there is provided a schematic block diagram of an example system in accordance with at least some embodiments. System <b>100</b> has a network <b>110</b>, one or more node devices <b>120</b> that communicate via network <b>110</b>, a borrower device <b>130</b><i>a</i>, and a lender device <b>140</b><i>a</i>. Optionally, system <b>100</b> may have one or more additional borrower device <b>130</b><i>b </i>and one or more lender device <b>140</b><i>b</i>. In at least some embodiments, system <b>100</b> has at least one intermediary device <b>160</b>. In at least some embodiments, system <b>100</b> has at least one external server <b>150</b>.</p><p id="p-0106" num="0105">Network <b>110</b> is a data communications network, such as the Internet, which enables data communication among elements of network <b>110</b> via one or more protocols and interfaces such as Ethernet. In some cases, various data communications among one or more elements of network <b>110</b> may be encrypted or tunneled via virtual private networks. In some cases, network <b>110</b> may be a private network, or a combination of public and private networks.</p><p id="p-0107" num="0106">Nodes <b>120</b> are computing devices in data communication with network <b>110</b>. In at least some embodiments, each node <b>120</b> is configured to act as a blockchain node, by executing a blockchain node software application. For example, the node <b>120</b> may be an Ethereum blockchain node, and may be configured to execute the Ethereum Virtual Machine, and to participate in the Ethereum blockchain peer-to-peer network. However, in some alternative embodiments, one or more node <b>120</b> may be a conventional server computer, which serves as a gateway to a centralized system.</p><p id="p-0108" num="0107">Each borrower device <b>130</b><i>a </i>and <b>130</b><i>b</i>, and lender device <b>140</b><i>a </i>and <b>140</b><i>b </i>is a computing device, such as a personal computer, server computer, tablet computer, smartphone or other computing device. In embodiments that employ a blockchain system, borrower devices and lender devices may connect to a node <b>120</b> of the blockchain system to initiate transactions and other actions, and to receive notifications of the results of those transactions (e.g., the current state) as described further herein.</p><p id="p-0109" num="0108">Although borrower and lender devices are shown as connecting to a node <b>120</b> for illustrative purposes, each of the borrower and lender devices may connect to other elements of network <b>110</b>, and have their data communications routed to and from a node <b>120</b>.</p><p id="p-0110" num="0109">External server <b>150</b> is a server computer that may or may not participate in the blockchain system. However, external server <b>150</b> may be queried by other devices for a response to some inquiry. For example, in some embodiments, external server <b>150</b> may serve as an agreed-upon &#x201c;oracle&#x201d; for certain data, such as prevailing interest rates.</p><p id="p-0111" num="0110">Intermediary device <b>160</b> is at least one computing device, such as a personal computer, server computer, tablet computer, smartphone or other computing device, which may be operated by an intermediary entity, a custodial entity, or both, as described further herein.</p><p id="p-0112" num="0111">Each of devices <b>130</b><i>a</i>, <b>130</b><i>b</i>, <b>140</b><i>a</i>, <b>140</b><i>b</i>, <b>150</b> and <b>160</b> may couple to the network <b>110</b> through a wired or wireless connection. Although only a small number of computing devices are shown so as not to obscure the description, in some embodiments there may be a large plurality of computing devices and, in particular, borrower and lender devices.</p><p id="p-0113" num="0112">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, there is provided a simplified schematic block diagram of a computing device in accordance with at least some embodiments. Computing device <b>200</b> is an example computing device, and illustrates the components of various computing devices, such as borrower device <b>130</b><i>a</i>, <b>130</b><i>b</i>, lender device <b>140</b><i>a</i>, <b>140</b><i>b</i>, node <b>120</b>, external server <b>150</b> and intermediary device <b>160</b>.</p><p id="p-0114" num="0113">Computing device <b>200</b> has at least a processor <b>204</b>, a memory <b>208</b> and at least one input and/or output device <b>212</b>, each of which may be connected to a system bus <b>220</b>. In some cases, processor <b>204</b> may be configured to communicate directly with memory <b>208</b> or input/output device <b>212</b>, bypassing system bus <b>220</b>. Computing device <b>200</b> may be a personal computer, server computer, tablet computer, smartphone, other computing device, or any combination of these.</p><p id="p-0115" num="0114">It will be understood that, in some embodiments, each of the processor <b>204</b>, the input/output device <b>212</b>, and the memory <b>208</b> may be combined into a fewer number of components or may be separated into further components.</p><p id="p-0116" num="0115">The processor <b>204</b> may be any suitable processors, controllers or digital signal processors that can provide sufficient processing power depending on the configuration, purposes and requirements of the system <b>100</b>. In some embodiments, the processor <b>204</b> can include more than one processor with each processor being configured to perform different dedicated tasks.</p><p id="p-0117" num="0116">The input/output device <b>212</b> may be any interface device that enables the computing device <b>200</b> to receive inputs or transmit outputs. For example, input/output device <b>212</b> can be at least one of a serial port, a parallel port or a Universal Serial Bus (USB) port. The input/output device <b>212</b> may also be at least one of an Internet, Local Area Network (LAN), Ethernet, Firewire, modem or digital subscriber line connection. Various combinations of these elements may be incorporated within the input/output device <b>212</b>.</p><p id="p-0118" num="0117">For example, the input/output device <b>212</b> may receive inputs from various input devices, such as a mouse, a keyboard, a touch screen, a thumbwheel, a track-pad, a track-ball, a card-reader, voice recognition software and the like depending on the requirements and implementation of computing device <b>200</b>. Similarly, the input/output device <b>212</b> may transmit outputs, for example in the form of a display, a printer, or other output device.</p><p id="p-0119" num="0118">The memory <b>208</b> can include RAM, ROM, one or more hard drives, one or more flash drives or some other suitable data storage elements such as disk drives, etc. The memory <b>208</b> can be used to store an operating system and software applications. For instance, the operating system can provide various basic operational processes. The programs can include various user programs so that a user can interact with input/output devices <b>212</b> to perform various functions such as, but not limited to, viewing and/or responding to the notifications generated by the computing device <b>200</b>. User programs can also include, for example, blockchain node software or client software.</p><p id="p-0120" num="0119">Referring now to <figref idref="DRAWINGS">FIGS. <b>3</b>A to <b>3</b>C</figref>, there are illustrated methods of conducting transactions in accordance with at least some embodiments. Method <b>300</b> is a method for automatically conducting a continuous forward rate agreement in a cryptocurrency using smart contracts, and may be carried out, for example, by one or more nodes <b>120</b> of system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0121" num="0120">Method <b>300</b> begins at <b>304</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, with identifying a first smart contract. In at least some embodiments, the first smart contract is a CDP smart contract, and also may be referred to as a CDP contract or loan contract. As described, the first smart contract generally has a first address (e.g., the address of its Contract Account) and a first borrower address (e.g., the address belonging to a user who initiated the first smart contract via a borrower device) associated therewith. The first smart contract generally has one or more parameters, such as an owed amount value initially based on an amount of cryptocurrency transferred to the first borrower address (e.g., the initial value of the cryptocurrency received from the CDP), and a collateral value representing a value of a collateral object committed to the smart contract associated with the first borrower address. The first smart contract may also have an interest rate query subroutine configured to periodically determine a first variable interest rate based at least on an extrinsic rate. In at least some embodiments, the cryptocurrency may be Dai and/or other cryptocurrencies such as Ether (ETH). In at least some embodiments, tokens representing a real estate interest, a security interest, or other interest or both. The extrinsic rate may be the Dai Savings Rate, which may be queried from one or more sources, such as an external server of system <b>100</b>. The first variable interest rate may be determined based on the extrinsic rate.</p><p id="p-0122" num="0121">In some variant embodiments, an intrinsic rate may be used instead of the extrinsic rate. The intrinsic rate may be specified at the time the obligation object is instantiated, or by a subroutine of the obligation object.</p><p id="p-0123" num="0122">At <b>308</b>, at least one loan token associated with the first smart contract is identified. In some embodiments, the first smart contract is tokenized, and generates its own transferrable tokens representing control of the CDP smart contract and an interest in the collateral object. However, in some other embodiments, the first smart contract may not be tokenized natively, in which case a tokenizing smart contract that wraps and &#x201c;tokenizes&#x201d; the first smart contract may be used. The tokenizing smart contract may be provided by a third party in some cases to assume control of the CDP smart contract and generate one or more transferrable tokens representing control of the CDP smart contract and an interest in the collateral object.</p><p id="p-0124" num="0123">At <b>312</b>, a second smart contract is identified. The second smart contract may be referred to as a deposit smart contract or deposit contract. The second smart contract generally has a second address (e.g., the address of its Contract Account) and a first lender address (e.g., the address belonging to a user who wishes to earn interest from their cryptocurrency, equipped with a lender device) associated therewith. The second smart contract generally has one or more parameters, such as an owned amount value or lender balance representing a lender amount of cryptocurrency associated with the first lender address, and which the lender owns and wishes to lend or deposit or lock. In at least some embodiments, the second smart contract also may have a second interest rate query routine configured to periodically determine a second variable interest rate based at least on the extrinsic rate. As with the first smart contract, the extrinsic rate may be the Dai Savings Rate, which may be queried from one or more sources, such as an external server of system <b>100</b>. The second variable interest rate also may be determined based on the extrinsic rate.</p><p id="p-0125" num="0124">In some embodiments, the second smart contract may be a locking mechanism, in which a portion of the user's cryptocurrency (e.g., the owned amount value or lender balance) is simply locked by a cryptocurrency issuing mechanism (which may itself be one or more smart contract). The locked portion may accrue interest during the time it is locked, which may be paid out when the portion is unlocked or in response to another query, update or other transaction.</p><p id="p-0126" num="0125">At <b>316</b>, an obligation object is generated. In at least some embodiments, the obligation object is a further smart contract that is configured to carry out a continuous forward rate agreement when executed and, as a smart contract, has an obligation object address. Accordingly, the obligation object may be referred to as a CFRA smart contract or swap contract. Generation of the obligation object further comprises acts <b>320</b> to <b>348</b> as described further herein. However, in some alternate embodiments, the obligation object may be a programmatic contract, albeit not a blockchain-based smart contract.</p><p id="p-0127" num="0126">For ease of description, the obligation object is described as carrying out the acts described herein, however it is reiterated that in at least some of the described embodiments each obligation object is software code (e.g., a smart contract) that can be executed by the processors (e.g., of one or more nodes of a distributed ledger system) to carry out the described acts.</p><p id="p-0128" num="0127">In some alternative embodiments, the first or second smart contracts, or both can be omitted, and the obligation object generated at <b>316</b> may be configured to substitute for the first and second smart contracts as needed. In such embodiments, acts <b>304</b>, <b>308</b> and <b>312</b> may be omitted, and the obligation object can be configured to perform the functions of the CDP smart contract, the deposit contract, or both.</p><p id="p-0129" num="0128">The obligation object also has parameters, such as a borrower balance, a lender balance, a term and a predetermined interest rate, as described further herein.</p><p id="p-0130" num="0129">At <b>320</b>, the obligation object receives control of the at least one loan token, for example, by the at least one loan token being transferred to the obligation object address via a transaction.</p><p id="p-0131" num="0130">At <b>324</b>, the obligation object generates or updates a borrower balance of the obligation object based on the collateral value associated with the at least one loan token. The collateral value may be ascertained, for example, by querying the first smart contract associated with the at least one loan token.</p><p id="p-0132" num="0131">At <b>328</b>, the obligation object receives control of a lender amount. The lender amount may be cryptocurrency (e.g., Dai), which a lender user wishes to lend, deposit or commit to the obligation object in exchange for an interest amount. In some cases, the lender amount may be tokens representing an interest in another cryptocurrency, which interest may be in the form of a smart contract.</p><p id="p-0133" num="0132">At <b>332</b>, the obligation object generates or updates the lender balance of the obligation object based on the lender amount received at <b>328</b>.</p><p id="p-0134" num="0133">At <b>336</b>, the obligation object tokenizes the lender balance and the borrower balance by generating at least one lender token and at least one borrower token, respectively. In some cases, a plurality of lender tokens or a plurality of borrower tokens, or both, may be generated. Some lender or borrower tokens may be generated at later stages, also. In some cases, tokens may be subdivisible by users. Generating the at least one lender token may involve generating a lender ledger to track the positions of each lender associated with the obligation object. Likewise, generating the at least one borrower token may involve generating a borrower ledger to track the positions of each borrower associated with the obligation object.</p><p id="p-0135" num="0134">In some alternative embodiments, generation of at least one lender token, at least one borrower token, or both, may be omitted. Instead, the obligation object may record one or more addresses associated with the lender, borrower, or both. Each address may be have corresponding values associated therewith, representing the respective lender balance or borrower balance, as the case may be. The one or more addresses may be recorded in at least one ledger used for this purpose, and the addresses and values may be updated over time thereafter.</p><p id="p-0136" num="0135">At <b>340</b>, the at least one lender token is associated with the first lender address, for example by transferring the at least one lender token to the first lender address in a transaction. In embodiments where lender tokens are not generated, the transfer may be carried out by recording the first lender address in a ledger and updating a value associated with the first lender address (e.g., to equal the lender balance).</p><p id="p-0137" num="0136">At <b>344</b>, the at least one borrower token is associated with the first borrower address, for example by transferring the at least one borrower token to the first borrower address in a transaction. In embodiments where borrower tokens are not generated, the transfer may be carried out by recording the first borrower address in a ledger and updating a value associated with the first borrower address (e.g., to equal the borrower balance).</p><p id="p-0138" num="0137">At <b>348</b>, the obligation object determines one or more predetermined interest rate. In some cases, the predetermined interest rate may be the same for both the lender and borrower. However, in other cases, the predetermined interest rates may differ for the lender and borrower. For example, there may be a first predetermined interest rate for the borrower and a second predetermined interest rate for the lender. The predetermined interest rates may be determined, for example, automatically based on an extrinsic rate such as the LIBOR etc.), based on a dividend rate for stocks or synthetic stocks, or by querying an external server such as external server <b>150</b>. In some cases, the query may be a transaction to another smart contract. Alternatively, the predetermined interest rates may be determined based on an intrinsic rate in embodiments where it is used. In other cases, the predetermined interest rates may be parameters provided by one or more parties when the obligation object is created or funded. In at least some embodiments, the predetermined interest rate is fixed for the duration of the obligation object.</p><p id="p-0139" num="0138">The method <b>300</b> may continue with execution of the obligation object's transaction subroutine, as shown in method <b>350</b> of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. The transaction subroutine may be triggered, for example, by a party that sends a transaction to the obligation object, causing one or more nodes of the system to execute the transaction subroutine. The transaction may be a funds transfer transaction, a query transaction, an update transaction, a trigger transaction or some other transaction.</p><p id="p-0140" num="0139">At <b>354</b> of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the transaction is received and the transaction subroutine begins to execute.</p><p id="p-0141" num="0140">At <b>356</b>, the obligation object may determine whether an extrinsic rate such as the Dai Savings Rate or Stability Fee (or its equivalent for platforms other than Maker) has changed, for example by querying an external server such as external server <b>150</b>, or a blockchain node. In some cases, the query may be a transaction to another smart contract. Alternatively, the intrinsic rate may be determined in embodiments where it is used.</p><p id="p-0142" num="0141">At <b>358</b>, the obligation object determines whether the transaction is a funds transfer transaction initiated, e.g., by the holder of the at least one borrower token. If yes, the borrower balance is updated based on the payment at <b>366</b>. The funds transfer may be a first payment, which can be at least one borrower interest payment, based on the first variable interest rate of the first smart contract.</p><p id="p-0143" num="0142">At <b>370</b>, the obligation object determines whether a triggering event has occurred. A triggering event may occur, for example, in response to a trigger transaction (e.g., a query), in response to determining that a borrower balance exceeds the collateral value, or in response to determining that the term of the obligation object has expired or elapsed. A triggering event may also be a determination that the extrinsic rate has changed.</p><p id="p-0144" num="0143">In response to detection of the triggering event, the obligation object may perform further processing at <b>374</b>, and proceed to <b>382</b> of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> to perform further processing as shown in method <b>380</b> of <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. Otherwise, the obligation may await a further transaction, whereupon it may return to <b>354</b>. In this way, the obligation object may periodically monitor and process a plurality of payments.</p><p id="p-0145" num="0144">At <b>382</b>, the obligation object determines whether the lender balance exceeds the collateral value associated with the first smart contract. If the lender balance is within a predetermined threshold value of the collateral value, then the obligation object may proceed to liquidation at <b>384</b> and terminate the obligation object at <b>388</b>, as described further herein. For example, if the predetermined threshold is set to 105% of the collateral value, and if the lender balance is less than 105% of the collateral value, then liquidation may be initiated. In some embodiments, the obligation object may determine whether the borrower balance exceeds the collateral value associated with the first smart contract. If the borrower balance is within a second predetermined threshold value of the collateral value, then the obligation object may proceed to liquidation at <b>384</b> and terminate the obligation object at <b>388</b>, as described further herein.</p><p id="p-0146" num="0145">At <b>386</b>, the obligation object determines whether the term of the obligation object has expired, in which case it may proceed to terminate at <b>388</b>.</p><p id="p-0147" num="0146">At <b>390</b>, the obligation object compares the extrinsic rate to the predetermined interest rate.</p><p id="p-0148" num="0147">If the extrinsic rate has increased relative to the predetermined interest rate, then at <b>396</b> the borrower balance may be increased by an adjustment amount to compensate for the change in interest rate (which would otherwise cause the lender to receive more than the predetermined interest rate, and likewise cause the borrower to be charged more than the predetermined interest rate) and the lender balance may be decreased by the equivalent adjustment amount. Optionally, the obligation object may immediately transfer the adjustment amount to a separate account allocated to the borrower at <b>398</b>. The adjustment amount may be based on the difference between the extrinsic rate and the predetermined interest rate.</p><p id="p-0149" num="0148">In some cases, the adjustment amount may be automatically transferred immediately or in increments, or both, to the first smart contract, to prevent inadvertent liquidation of the first smart contract in the event that the extrinsic rate increases.</p><p id="p-0150" num="0149">If the extrinsic rate has decreased relative to the predetermined interest rate, then at <b>392</b> the lender balance may be increased by an adjustment amount to compensate for the change in interest rate (which would otherwise cause the borrower to be charged less than the predetermined interest rate, and likewise cause the lender to accrue less than the predetermined interest rate) and the borrower balance may be decreased by the equivalent adjustment amount.</p><p id="p-0151" num="0150">Optionally, the obligation object may immediately transfer the adjustment amount to a separate account allocated to the lender (not shown), which may be considered an escrow account. As above, the adjustment amount may be based on the difference between the extrinsic rate and the predetermined interest rate.</p><p id="p-0152" num="0151">The adjustment amount may be obtained by performing a partial or full liquidation of the collateral, and releasing and transferring the liquidated portion of the collateral from the CDP smart contract to the separate account.</p><p id="p-0153" num="0152">In some embodiments, the obligation object instead may withdraw new (i.e., additional) Dai from the CDP smart contract, assuming that there is collateral remaining which is sufficient to support the generation or withdrawal of additional Dai (e.g., if the collateralization ratio, or loan-to-value ratio has not been exhausted previously).</p><p id="p-0154" num="0153">By way of example, if collateral valued at 100 Dai is held by the CDP smart contract, and only 30 Dai has been withdrawn from the CDP smart contract, then it may be possible to withdraw additional Dai without triggering a liquidation of the entire CDP smart contract (e.g., an additional 10 Dai may be withdrawn if the collateralization ratio is 3:2). Note that the liquidation threshold may, in some cases, be different than the collateralization ratio (e.g., the threshold may allow collateralization as low as 1:1).</p><p id="p-0155" num="0154">Withdrawal of additional Dai causes the CDP smart contract to move closer to meeting the liquidation threshold, and may be considered another form of partially liquidating the CDP smart contract.</p><p id="p-0156" num="0155">Any additional Dai received according to the above approaches may be transferred to the above-mentioned escrow account to ensure that the lender balance is maintained and sufficient interest can be paid to the lender.</p><p id="p-0157" num="0156">At <b>394</b>, the obligation object may determine whether the lender balance exceeds the collateral value associated with the first smart contract. If the lender balance is within a predetermined threshold value of the collateral value, then the obligation object may proceed to liquidate at <b>384</b>, and terminate at <b>388</b>. For example, if the predetermined threshold is set to 105% of the collateral value, and if the lender balance is less than 105% of the collateral value, then liquidation may be initiated.</p><p id="p-0158" num="0157">Otherwise, the method may return, or await further execution cycles at <b>354</b>.</p><p id="p-0159" num="0158">Terminating or liquidating the obligation object at <b>388</b> may involve computing a lender return amount based on the lender balance and the at least one first payment, computing a borrower return amount based on the borrower balance and the at least one first payment, and releasing a cryptocurrency based on the lender return amount and the borrower return amount. Releasing the cryptocurrency may involve transferring the lender return amount to the holder of the at least one lender token in a transaction (or the address of the lender(s)), and transferring the borrower return amount to the holder of the at least one borrower token (or the address of the borrower(s)). In some embodiments, the lender return amount and the borrower return amount may also be computed based on outstanding obligation tokens, as described herein, and at least a portion of the lender return amount or borrower return amount, or both, may be allocated to addresses holding outstanding obligation tokens.</p><p id="p-0160" num="0159">In some embodiments, termination of the obligation object <b>388</b> may involve an auction process, which may permit interested users to bid on the assets held by the obligation object (e.g., borrower balance, lender balance). Following the conclusion of the bidding process, the winners send the winning bid amounts and receive control of the relevant assets in exchange. However, in some embodiments, bidders may receive only a subset of the assets, those subsets computed by determining and subtracting amounts owed to other parties according to the obligation object (e.g., amounts owed to the lender or borrower, holders of secondary tokens, etc.), who may receive control of the relevant assets prior to&#x2014;or concurrently with&#x2014;the auction winners.</p><p id="p-0161" num="0160">When computing interest rates, the obligation object <b>388</b> may compute interest amounts by using predetermined interval compounding (e.g., annual, monthly, daily, etc.) or, in some cases, may compute interest amounts using continuous compounding. For instance, the Maker DAO Stability Fee is calculated using continuous compounding.</p><p id="p-0162" num="0161">To compute interest using continuous compounding, the following formula may be used:</p><p id="p-0163" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Pe</i><sup>rt</sup><i>&#x2212;P=A </i><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0164" num="0000">Where P is the principal investment amount (e.g., the initial deposit or loan amount), r is the annual interest rate (in decimal form), t is the number of years the funds have been invested, e is Euler's number, and A is the interest amount.</p><p id="p-0165" num="0162">To aid understanding, some examples of the execution of the obligation object are provided next. In these examples, it may be assumed that the extrinsic rate (e.g., DSR) is 2% annual interest, and the predetermined interest rate is fixed at 3% annually. The collateral value associated with the at least one loan token is assessed at 1000 currency units (e.g., dollars), and the lender amount is also 1000 currency units. To ease understanding, annual compounding is used, however other types of compounding may be used in practice, including continuous compounding, which would result in different computation results.</p><p id="p-0166" num="0163">In a first example, one month after initiation of the obligation object, there has been no adjustment in the extrinsic rate, which remains at 2% annually. In this case, the borrower is obligated to transfer value to the lender, to make up for the difference between the predetermined interest rate (3% annually) and the DSR (which remains at 2% annually). The obligation object can account for this value transfer simply by updating the borrower balance when it is next executed (e.g., upon receipt of a query transaction or other transaction). The payment is not due immediately, but may be required to be paid in order to release the collateral held by the obligation object.</p><p id="p-0167" num="0164">Alternatively, in some embodiments, the payment may be effected immediately and/or in small increments by invoking a partial liquidation of a corresponding portion of the collateral held by the obligation object, transferring control of the corresponding portion to the obligation object, and updating the lender balance of the obligation object accordingly. In some cases, the collateral may be partially liquidated and a corresponding portion of the collateral released from the CDP smart contract to be held in escrow. Alternatively, additional Dai may be created and withdrawn from the CDP smart contract (e.g., if the collateralization ratio permits) and likewise held in escrow. Such adjusting transactions can be made each time an updating function of the obligation object is executed, e.g., on a daily basis.</p><p id="p-0168" num="0165">Continuing the example, in the second month after initiation of the obligation object, the extrinsic rate rises to 4% annually. In this case, the lender is obligated to transfer value to the lender, to make up for the difference between the predetermined interest rate (3% annually) and the DSR (which is now at 4% annually). As before, the obligation object can account for this value transfer simply by updating the borrower balance when it is next executed (e.g., upon receipt of a query transaction or other transaction) and, in this case, the borrower balance would equalize.</p><p id="p-0169" num="0166">Continuing the example further, in the third month after initiation of the obligation object, the extrinsic rate rises to 15% annually. In this case, the lender is again obligated to transfer value to the lender, to make up for the difference between the predetermined interest rate (3% annually) and the DSR (which is now at 15% annually). The difference between the predetermined interest rate is 12% annually, or 1% per month. Therefore, the obligation object can account for this value transfer by updating the borrower balance by 1% of the lender amount for the third month, when it is next executed (e.g., upon receipt of a query transaction or other transaction).</p><p id="p-0170" num="0167">If the obligation object is terminated after the third month, 1% of the lender amount, or 10 units, would be transferred to the borrower address, or to the first smart contract.</p><p id="p-0171" num="0168">In a second example, immediately after the obligation object is instantiated, the extrinsic rate falls to zero, where it remains for one month. If the obligation object is terminated after one month, the borrower must transfer the difference between the predetermined interest rate (3% annually) and the extrinsic rate (0%)&#x2014; i.e., 3/12% of the lender amount&#x2014;to the obligation object (or, in some cases, to the lender address), in order for the obligation object to release control of the at least one loan token (and the collateral).</p><p id="p-0172" num="0169">In a third example, immediately after the obligation object is instantiated, the extrinsic rate rises to 23% and stays there for a year. During that time the collateral object associated with the first smart contract drops significantly in value, such that the collateral value is approaching the liquidation price (e.g., collateral value less the owed amount value) of the first smart contract, which may cause the first smart contract to be terminated. However, since the obligation object sets a predetermined interest rate for both parties, the first smart contract should not be liquidated. In this case, the obligation object may transfer funds under its control to the first smart contract, to prevent liquidation of the first smart contract. In this scenario, the lender is effectively paying down the debt of the borrower prior to expiry of the obligation object, in order to maintain the first smart contract in effect.</p><p id="p-0173" num="0170">In a fourth example, the extrinsic rate stays at 2% for one year following instantiation of the obligation object, however the collateral value of the first smart contract falls by 95%. Ownership of the first smart contract is then transferred to a third party, which closes the first smart contract and returns the collateral object to the holder of the at least one loan token, which is the obligation object. Accordingly, the obligation object can then use the collateral object to pay the lender the additional 1% interest above the extrinsic rate (2%) required to achieve the 3% predetermined rate. Any remaining amount of the collateral object, if any, can be returned to the borrower.</p><p id="p-0174" num="0171">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, there is illustrated an example process flow diagram of a method of changing at least one or more lenders associated with an obligation object.</p><p id="p-0175" num="0172">Method <b>400</b> may begin at any time following the creation of an obligation object, and begins with the obligation object receiving a request for change in lender at <b>404</b>. The request may be a transaction, and may identify the addresses of the additional lender or lenders to be introduced and include their respective shares of the loan amount (to replace any amount that may be withdrawn by another lender).</p><p id="p-0176" num="0173">At <b>408</b>, the obligation object associates the additional lender addresses with the lender tokens internally. For example, a subset of the plurality of existing lender tokens may be associated with a second lender address.</p><p id="p-0177" num="0174">At <b>412</b>, the lender amount can be re-allocated between the first lender address and the second lender address&#x2014;and any additional lender addresses&#x2014;according to a proportion of the plurality of lender tokens associated with the first and second (and additional) lender addresses. The proportion of allocation can be verified with reference to holdings of the lender tokens as recorded in the blockchain and cross-checked against any loan amount received as part of the change transaction.</p><p id="p-0178" num="0175">In some cases, the original or existing lenders may also be removed as part of the request, in which case the transaction identifies the lenders to be removed.</p><p id="p-0179" num="0176">At <b>416</b>, the obligation object determines if a lender is to be removed or de-associated. If yes, then the obligation object can internally de-associate the at least one lender token from the first lender address and determine a subset of the loan amount to be returned to the first lender address. The obligation object may, optionally, verify that it has received one or more secondary loan amount at <b>420</b>, to replace the subset of the loan amount.</p><p id="p-0180" num="0177">The subset of the loan amount may be transferred to the first lender address at <b>424</b>.</p><p id="p-0181" num="0178">In some embodiments, the subset of the loan amount may not be transferred to the first lender address (or other removed lender) immediately. Instead, the one or more obligation tokens may be generated and transferred to the first (or other) lender address. In such embodiments, the one or more obligation tokens that are outstanding upon the liquidation or other termination of the obligation object, are tabulated and used by the obligation object to apportion the loan amount.</p><p id="p-0182" num="0179">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, there is illustrated an example process flow diagram of a method of changing at least one or more borrowers associated with an obligation object.</p><p id="p-0183" num="0180">Method <b>500</b> may begin at any time following the creation of an obligation object, and begins with the obligation object receiving a request for change in borrower at <b>504</b>. The request may be a transaction, and may identify the addresses of the additional borrower or borrowers to be introduced and include their respective shares of the borrower balance.</p><p id="p-0184" num="0181">At <b>508</b>, the obligation object associates the additional borrower addresses with the borrower tokens internally. For example, a subset of the plurality of existing borrower tokens may be associated with a second borrower address.</p><p id="p-0185" num="0182">At <b>512</b>, the borrower balance can be re-allocated between the first borrower address and the second borrower address&#x2014;and any additional borrower addresses&#x2014;according to a proportion of the plurality of borrower tokens associated with the first and second (and additional) borrower addresses. The proportion of allocation can be verified with reference to holdings of the borrower tokens as recorded in the blockchain.</p><p id="p-0186" num="0183">In some cases, the proportion of the borrower balance that belongs to the original or existing borrowers may be reduced to zero as part of the request, in which case the corresponding borrowers can be removed.</p><p id="p-0187" num="0184">At <b>516</b>, the obligation object determines if a borrower can be removed or de-associated. If yes, then the obligation object can internally de-associate the at least one borrower token from the first borrower address at <b>520</b>. In at least some embodiments, the obligation object may transfer a portion of the lender amount to the first smart contract to reduce the owed amount value.</p><p id="p-0188" num="0185">As in method <b>400</b>, in some embodiments, the subset of the loan amount may not be transferred to the first lender address (or other removed lender) immediately. Instead, the one or more obligation tokens may be generated and transferred to the first (or other) lender address. In such embodiments, the one or more obligation tokens that are outstanding upon the liquidation or other termination of the obligation object, are tabulated and used by the obligation object to apportion the loan amount.</p><p id="p-0189" num="0186">As described herein, at least some of the described embodiments may be used as a collateral management system for a plurality of users. For example, the described systems and methods may be used to permit lenders to transfer their positions to new lenders in a trustless fashion and without the requirement for an intermediary or counterparty. The existing lender may then withdraw the loan amount. In some cases, the extrinsic rate (e.g., DSR) may differ when a lender transfers its position to a new lender. In such cases, the original lender may continue to accrue interest at the original rate, and this accrued interest may be represented in the form of secondary tokens, or interest tokens, which represent an entitlement to the difference between the original predetermined rate at the time the obligation object was generated and the new predetermined rate for the new lender. Interest due to holders of the secondary tokens may accrue over time, or may be calculated when the secondary tokens are redeemed. In some cases, the obligation object may generate the secondary tokens. In some embodiments, the secondary tokens may be the same type of token as provided to the initial lender. In some cases, the &#x201c;token&#x201d; may simply be an account associated with a balance. This transfer process may be repeated for additional lenders.</p><p id="p-0190" num="0187">As part of such transfers between lenders, counterparty risk can be reduced or eliminated by the replenishment of collateral when an existing lender sells its position to a new lender.</p><p id="p-0191" num="0188">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, there is illustrated an example method of transferring lenders associated with an obligation object, in accordance with some embodiments. Method <b>700</b> may be carried with an existing obligation object, as described herein.</p><p id="p-0192" num="0189">At <b>705</b>, a lender holds a CFRA position (e.g., in the form of lender tokens) in an obligation object.</p><p id="p-0193" num="0190">At <b>710</b>, the lender determines that it wishes to transfers its lender tokens to a new lender, and transmits a transfer request to the obligation object. The transfer request identifies an amount of lender tokens to be transferred, a new predetermined rate, a new lender address and may be signed by the existing lender. The obligation object may, in some cases, determine that the new predetermined rate differs from the original predetermined rate.</p><p id="p-0194" num="0191">At <b>715</b>, the obligation object determines an amount of the loan amount that will be replenished as part of the transfer. In some cases, the replenishment may be carried out by the obligation object receiving a suitable amount (e.g., twice the loan amount plus or minus any interest accrued or other adjustments owed to or by the existing lender, so that the existing lender can be reimbursed). In some other cases, the replenishment may be carried out by the existing lender receiving a suitable amount from the new lender (e.g., the reimbursement amount), and notifying the obligation object of the transaction.</p><p id="p-0195" num="0192">At <b>720</b>, the obligation object confirms that it has received a replenishment amount and sends the reimbursement amount to the existing lender, if required. Alternatively, the obligation object confirms that the existing lender has received the reimbursement amount from the new lender. The obligation object then generates secondary tokens representing the difference between the original predetermined rate and the new predetermined rate, and transfers the newly-generated secondary tokens to the existing lender.</p><p id="p-0196" num="0193">At <b>725</b>, the obligation object generates new lender tokens, representing ownership of the loan amount, and transfers the newly-generated lender tokens to the new lender address. The new lender then becomes the existing lender.</p><p id="p-0197" num="0194">Method <b>700</b> may then return to <b>705</b>, if the most recent existing lender wishes to transfers its position to a still newer lender.</p><p id="p-0198" num="0195">In some embodiments, analogous systems and methods may be used to permit borrowers to transfer their positions to new borrowers.</p><p id="p-0199" num="0196">To illustrate how method <b>700</b> may be executed several times successively, an example scenario is shown in Table 1. In this example, the first amount X<sub>1</sub>, second amount X<sub>2 </sub>and third amount X<sub>3 </sub>are related as follows:</p><p id="p-0200" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>X</i><sub>3</sub><i>&#x2264;X</i><sub>1</sub><i>&#x2264;X</i><sub>2 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0201" num="0197">It will be appreciated that the specific values of X<sub>1</sub>, X<sub>2 </sub>and X<sub>3 </sub>can differ in each transaction (e.g., since the interest rate and initial amounts can vary), although the above relation generally will be observed so long as interest rates do not decrease and/or become negative.</p><p id="p-0202" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="112pt" align="center"/><colspec colname="3" colwidth="112pt" align="center"/><thead><row><entry namest="1" nameend="3" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Time</entry><entry>Event</entry><entry>Consequence</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>t = 0</entry><entry>Lender 1 deposits a first amount of</entry><entry/></row><row><entry/><entry>DAI, X<sub>1</sub>; Borrower deposits CDP</entry><entry/></row><row><entry/><entry>valued at or about X<sub>1 </sub>DAI;</entry><entry/></row><row><entry/><entry>Predetermined rate set at 4% (equal</entry><entry/></row><row><entry/><entry>to DSR).</entry><entry/></row><row><entry>t + 1 day</entry><entry>DSR decreases to 2%.</entry><entry>Obligation object will continue to</entry></row><row><entry/><entry/><entry>accrue 4% interest on X<sub>1 </sub>DAI for</entry></row><row><entry/><entry/><entry>Lender 1.</entry></row><row><entry>t + 180 days</entry><entry>Lender 1 transfers position to Lender</entry><entry>Obligation object notes transfer</entry></row><row><entry/><entry>2; New predetermined rate set at 2%;</entry><entry>OR transfers reimbursement</entry></row><row><entry/><entry>Lender 2 transfers approximately X<sub>1</sub></entry><entry>amount to Lender 1. Lender 2 is</entry></row><row><entry/><entry>DAI to Lender 1 OR transfers X<sub>2</sub></entry><entry>now the only lender.</entry></row><row><entry/><entry>DAI to obligation object; Obligation</entry><entry/></row><row><entry/><entry>object generates secondary tokens</entry><entry/></row><row><entry/><entry>and transfers to Lender 1; obligation</entry><entry/></row><row><entry/><entry>object generates new lender tokens</entry><entry/></row><row><entry/><entry>and transfers to Lender 2.</entry><entry/></row><row><entry>t + 181 days</entry><entry>DSR increases to 8%.</entry><entry>Obligation object will continue to</entry></row><row><entry/><entry/><entry>accrue (4 &#x2212; 2) = 2% interest on X<sub>1</sub></entry></row><row><entry/><entry/><entry>DAI for Lender 1; obligation</entry></row><row><entry/><entry/><entry>object will continue to 2% interest</entry></row><row><entry/><entry/><entry>on X<sub>2 </sub>DAI for Lender 2.</entry></row><row><entry>t + 240 days</entry><entry>Lender 2 transfers partial position to</entry><entry>Obligation object notes transfer</entry></row><row><entry/><entry>Lender 3; New predetermined rate</entry><entry>OR transfers reimbursement</entry></row><row><entry/><entry>set at 8%; Lender 3 transfers X<sub>3 </sub>DAI</entry><entry>amount to Lender 2.</entry></row><row><entry/><entry>(plus accrued interest) to Lender 2</entry><entry/></row><row><entry/><entry>OR transfers approximately X<sub>2 </sub>&#x2212; X<sub>1 </sub>&#x2212;</entry><entry/></row><row><entry/><entry>X<sub>3 </sub>DAI plus accrued interest to</entry><entry/></row><row><entry/><entry>obligation object; Obligation object</entry><entry/></row><row><entry/><entry>generates additional secondary</entry><entry/></row><row><entry/><entry>tokens and transfers to Lender 2;</entry><entry/></row><row><entry/><entry>obligation object generates new</entry><entry/></row><row><entry/><entry>lender tokens and transfers to Lender</entry><entry/></row><row><entry/><entry>3.</entry><entry/></row><row><entry>t + 270 days</entry><entry>DSR decreases to 4%.</entry><entry>Collateral of borrower drops</entry></row><row><entry/><entry/><entry>significantly prompting</entry></row><row><entry/><entry/><entry>liquidation; obligation object</entry></row><row><entry/><entry/><entry>terminates and transfers payouts</entry></row><row><entry/><entry/><entry>to Lenders 1, 2 and 3 (Lender 1</entry></row><row><entry/><entry/><entry>receives interest accrued in the six</entry></row><row><entry/><entry/><entry>months after transferring position</entry></row><row><entry/><entry/><entry>to Lender 2 at a lower rate;</entry></row><row><entry/><entry/><entry>Lender 2 receives a large part of</entry></row><row><entry/><entry/><entry>loan amount back plus amount</entry></row><row><entry/><entry/><entry>lost by selling at a higher rate;</entry></row><row><entry/><entry/><entry>Lender 3 receives almost all of its</entry></row><row><entry/><entry/><entry>loan amount back).</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0203" num="0198">As noted above, in some embodiments, lender or borrower tokens, or both, may not be generated. In such embodiments, in lieu of generating and transferring tokens, the obligation object may track obligations by recording addresses associated with borrowers and lenders, and thereafter updating values associated with each address.</p><p id="p-0204" num="0199">Referring now to <figref idref="DRAWINGS">FIGS. <b>8</b>A to <b>8</b>D</figref>, there are illustrated process flow diagrams for methods of administrating obligation objects in accordance with at least some embodiments. Process flows <b>800</b><i>a</i>, <b>800</b><i>b</i>, <b>800</b><i>c </i>and <b>800</b><i>d </i>can be carried out by the elements of system <b>100</b>, for example. In particular, borrower device <b>830</b> may be analogous to a borrower device <b>130</b><i>a</i>, <b>130</b><i>b</i>, etc., while lender device <b>840</b> may be analogous to a lender device <b>140</b><i>a</i>, <b>140</b><i>b</i>, etc.</p><p id="p-0205" num="0200">A monitoring server <b>802</b> may be an external server, such as external server <b>150</b> or an intermediary device, such as intermediary device <b>160</b>. Monitoring server <b>802</b> may execute a periodic monitoring function (known as &#x201c;cron&#x201d; in some embodiments), to initiate portions of flow <b>700</b>, as described further herein.</p><p id="p-0206" num="0201">Dai smart contract <b>812</b> is a smart contract executed by one or more nodes of a blockchain, such as nodes <b>120</b> of system <b>100</b>, to implement and operate the Dai cryptocurrency.</p><p id="p-0207" num="0202">CFRA administrative smart contract <b>814</b> is a smart contract executed by one or more nodes of a blockchain, such as nodes <b>120</b> of system <b>100</b>, to implement the CFRA as described herein. CFRA administrative smart contract <b>814</b> generally operates to track and monitor the creation and completion of individual obligation objects, which can be deployed as separate smart contracts.</p><p id="p-0208" num="0203">Obligation object <b>816</b> may be an individual CFRA smart contract, which may be a smart contract created by CFRA administrative smart contract <b>814</b>.</p><p id="p-0209" num="0204">Wrapper contract <b>818</b> is a smart contract that interfaces with a CDP smart contract on behalf of the obligation object <b>816</b>, and allows the obligation object <b>816</b> to execute certain functions such as checking a DSR, unlocking Dai within the CDP, terminating the CDP, etc.</p><p id="p-0210" num="0205">Proxy contract <b>808</b> is a smart contract that interfaces with a CDP smart contract on behalf of the Maker DAO organization, and permits the Maker DAO organization to administer the CDP as described elsewhere herein.</p><p id="p-0211" num="0206">Referring now to <figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, there is shown a process flow <b>800</b><i>a </i>for a method of creating an obligation object in accordance with some embodiments.</p><p id="p-0212" num="0207">Flow <b>800</b><i>a </i>begins at <b>832</b> with a borrower device <b>830</b> transmitting a request to the CFRA administrative smart contract <b>814</b>, to create a new obligation object. The request may specify an expiration date, a collateral value, a debt value and a predetermined interest rate for the obligation object.</p><p id="p-0213" num="0208">At <b>834</b>, the CFRA administrative smart contract <b>814</b> creates and instantiates the obligation object <b>816</b>, and returns the address of the obligation object at <b>836</b>.</p><p id="p-0214" num="0209">At <b>838</b>, the obligation object <b>816</b> transmits a request to create a new CDP, lock a cryptocurrency amount (e.g., Ether) and draw a corresponding Dai amount. That is, the deposit of cryptocurrency as collateral in the Maker system triggers a function to create Dai which can be drawn upon.</p><p id="p-0215" num="0210">In response to the request, at <b>841</b>, the wrapper <b>818</b> transmits a request to proxy <b>808</b> to create the new CDP, lock the cryptocurrency amount and draw the Dai amount.</p><p id="p-0216" num="0211">Upon creation of the CDP, the proxy responds at <b>842</b> with the identifier of the CDP, which the wrapper returns to the obligation object at <b>844</b>.</p><p id="p-0217" num="0212">At <b>846</b>, the CFRA administrative smart contract <b>814</b> may publish the existence of the new obligation object, for example in response to request for lists of obligation objects with unmatched lenders and borrowers, to thereby enable lenders to identify obligation objects in which they wish to participate.</p><p id="p-0218" num="0213">Referring now to <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, there is shown a process flow <b>800</b><i>b </i>for a method of viewing a list of obligation objects in accordance with some embodiments.</p><p id="p-0219" num="0214">Flow <b>800</b><i>b </i>may be carried out by a lender device <b>840</b>, which may send a request at <b>848</b> for a list of pending or unmatched obligation objects to the CFRA administrative smart contract <b>814</b>. The CFRA administrative smart contract may respond to the request accordingly.</p><p id="p-0220" num="0215">Referring now to <figref idref="DRAWINGS">FIG. <b>8</b>C</figref>, there is shown a process flow <b>800</b><i>c </i>for a method of administrative approval for obligation objects in accordance with some embodiments.</p><p id="p-0221" num="0216">Optionally, in some embodiments, administrative approval may be required for each newly-created obligation object. In such cases, an administrator <b>801</b> may review each obligation object and, when satisfied that the obligation object is acceptable, transmit an approval at <b>850</b> to the CFRA administrative smart contract, which may notify the obligation object <b>816</b> of the approval at <b>852</b>. The obligation object <b>816</b> may subsequently change its state to approved at <b>854</b>.</p><p id="p-0222" num="0217">Referring now to <figref idref="DRAWINGS">FIG. <b>8</b>D</figref>, there is shown a process flow <b>800</b><i>d </i>for a method of accepting an obligation object for a lender.</p><p id="p-0223" num="0218">At <b>860</b>, the lender device <b>840</b> approves the amount of Dai to be transferred based on the obligation object and transmits the approval for release of the Dai to the Dai smart contract <b>812</b>. At <b>862</b>, the lender device also transmits an agreement request to the obligation object <b>816</b>. The agreement request may contain an authorization to control the agreed-upon amount of Dai.</p><p id="p-0224" num="0219">In response to the agreement request, the obligation object <b>816</b> transmits a confirmation to the Dai smart contract at <b>864</b>. The confirmation may include a lender identifier or address and the lending amount.</p><p id="p-0225" num="0220">At <b>866</b>, the obligation object <b>816</b> transmits a Dai lock request to the wrapper <b>818</b>, which sends an approval to the Dai smart contract <b>812</b> with an identification of proxiy <b>808</b> and the requested amount, at <b>868</b>. The wrapper <b>818</b> also registers the locked Dai with the proxy <b>808</b> at <b>870</b>, which forwards the registration at <b>872</b>, to ensure that the Dai accrues interest according to the DSR.</p><p id="p-0226" num="0221">At <b>874</b>, the obligation object <b>816</b> updates its state to active.</p><p id="p-0227" num="0222">Referring now to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, there is illustrated a process flow diagram illustrating methods of conducting transactions in accordance with at least some embodiments. Process flow <b>900</b> can be carried out by the elements of system <b>100</b>, for example. In particular, borrower device <b>930</b> may be analogous to a borrower device <b>130</b><i>a</i>, <b>130</b><i>b</i>, etc., while lender device <b>940</b> may be analogous to a lender device <b>140</b><i>a</i>, <b>140</b><i>b</i>, etc.</p><p id="p-0228" num="0223">A monitoring server <b>902</b> may be an external server, such as external server <b>150</b> or an intermediary device, such as intermediary device <b>160</b>. Monitoring server <b>902</b> may execute a periodic monitoring function (known as &#x201c;cron&#x201d; in some embodiments), to initiate portions of flow <b>900</b>, as described further herein.</p><p id="p-0229" num="0224">Dai smart contract <b>912</b> is a smart contract executed by one or more nodes of a blockchain, such as nodes <b>120</b> of system <b>100</b>, to implement and operate the Dai cryptocurrency.</p><p id="p-0230" num="0225">CFRA administrative smart contract <b>914</b> is a smart contract executed by one or more nodes of a blockchain, such as nodes <b>120</b> of system <b>100</b>, to implement the CFRA as described herein. CFRA administrative smart contract <b>914</b> generally operates to track and monitor the creation and completion of individual obligation objects, which can be deployed as separate smart contracts.</p><p id="p-0231" num="0226">Obligation object <b>916</b> may be an individual CFRA smart contract, which may be a smart contract created by CFRA administrative smart contract <b>914</b>.</p><p id="p-0232" num="0227">Wrapper contract <b>918</b> is a smart contract that interfaces with a CDP smart contract on behalf of the obligation object <b>916</b>, and allows the obligation object <b>916</b> to execute certain functions such as checking a DSR, unlocking Dai within the CDP, terminating the CDP, etc.</p><p id="p-0233" num="0228">Proxy contract <b>908</b> is a smart contract that interfaces with a CDP smart contract on behalf of the Maker DAO organization, and permits the Maker DAO organization to administer the CDP as described elsewhere herein.</p><p id="p-0234" num="0229">Process flow <b>900</b> begins at <b>920</b> with monitoring server <b>902</b> issuing a check agreement request to the CFRA administrative smart contract <b>914</b>. The request may be issued in response to a user input, or as a periodic check at a predetermined interval.</p><p id="p-0235" num="0230">At <b>922</b>, CFRA administrative smart contract <b>914</b> processes the check agreement request and sends individual check agreement requests to each obligation object <b>916</b> it has created (or been configured to monitor).</p><p id="p-0236" num="0231">At <b>924</b>, in response to the check agreement request, each obligation object <b>916</b> requests the current DSR from wrapper contract <b>918</b> for the CDP associated with the obligation object <b>916</b>. The wrapper contract <b>918</b> returns the current DSR at <b>926</b>.</p><p id="p-0237" num="0232">At <b>928</b>, the obligation object <b>916</b> determines the length of time that has elapsed since the last check was performed, and issues a request to the wrapper contract <b>918</b> to unlock all Dai held by the CDP, at <b>931</b>.</p><p id="p-0238" num="0233">If the DSR is presently greater than the predetermined interest rate associated with the obligation object <b>916</b>, then subflow <b>941</b> is executed. If the DSR is presently greater than the predetermined interest rate associated with the obligation object <b>916</b>, then subflow <b>950</b> is executed. If the DSR is equal to the predetermined interest rate, then either subflow <b>941</b> or subflow <b>950</b>, or none, may be executed, depending on how the system is configured.</p><p id="p-0239" num="0234">When subflow <b>941</b> is executed, obligation object <b>916</b> computes a current difference between the DSR and interest rate at <b>942</b>. The current difference may be computed using, e.g., the formula:</p><p id="p-0240" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>currentDifference=debtValue*(currentDSR&#x2212;interestRate)*timeInterval/minsInYear<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0241" num="0000">Where debtValue is the present value of the debt held in the CDP, interestRate is the predetermined interest rate, timelnterval is the interval computed at <b>928</b>, and minsInYear is the number of minutes in one year (in some embodiments, other granularities may be used).</p><p id="p-0242" num="0235">At <b>944</b>, a pending injection amount (required of the lender to update the lender balance) is updated based on the current difference computed at <b>942</b>. If the pending injection amount exceeds a predetermined injection threshold, then at <b>946</b>, the obligation object <b>916</b> instructs the wrapper <b>918</b> to transfer the pending injection amount to the CDP, which the wrapper <b>918</b> does at <b>947</b>, before notifying the proxy <b>908</b> of the injection, at <b>949</b>. Use of the predetermined injection threshold enables the obligation object <b>916</b> to avoid updating the CDP each time a check occurs, which may incur transaction and computing costs.</p><p id="p-0243" num="0236">When subflow <b>950</b> is executed, obligation object computes a current difference between the DSR and interest rate at <b>952</b> (using, e.g., the same formula as at <b>942</b>), and updates the borrower balance accordingly at <b>954</b>.</p><p id="p-0244" num="0237">At <b>951</b>, the obligation object <b>916</b> may request the wrapper <b>918</b> to lock the Dai amount in the CDP once again, and the wrapper <b>918</b> may do so at <b>953</b> and notify the proxy <b>908</b> accordingly.</p><p id="p-0245" num="0238">When an expiry date of the obligation object <b>916</b> has been reached, an expiry or liquidation subflow <b>960</b> may be executed.</p><p id="p-0246" num="0239">Optionally, subflow <b>960</b> may begin at <b>962</b> with the obligation object <b>916</b> requesting that the borrower device <b>930</b> confirm a Dai smart contract address that will supply the required amount to account for the borrower balance. In some cases, this action may be carried out before the expiry date.</p><p id="p-0247" num="0240">At <b>964</b>, obligation object <b>916</b> requests wrapper <b>918</b> to unlock all Dai held in the CDP. Wrapper <b>918</b> executes a liquidation routine and notifies proxy <b>908</b> of the request at <b>966</b>.</p><p id="p-0248" num="0241">At <b>968</b>, wrapper <b>918</b> may, optionally, notify obligation object <b>916</b> of the amount of Dai that has been unlocked.</p><p id="p-0249" num="0242">At <b>970</b>, borrower device <b>930</b> confirms the Dai smart contract address to supply the required funds to account for the borrower balance, and executes a transfer function of the Dai smart contract <b>912</b>. Optionally, the borrower device <b>930</b> may elect not to supply a Dai smart contract address, or not to return the borrower balance (which may result in loss of control of the CDP, and thus the collateral held by the CDP).</p><p id="p-0250" num="0243">At <b>972</b>, the obligation object requests the borrower balance amount of Dai from the Dai smart contract <b>912</b> and the borrower balance amount may be transferred back from the Dai smart contract <b>912</b>, at <b>974</b>.</p><p id="p-0251" num="0244">At <b>976</b>, in response to successful receipt of the borrower balance amount, the obligation object <b>916</b> transfers the unlocked Dai amount from the CDP and the borrower balance amount to the lender device <b>940</b> (or an address designated by the lender device <b>940</b>).</p><p id="p-0252" num="0245">In cases where the borrower balance amount is not received at <b>974</b> (e.g., because the borrower did not approve the release of Dai to pay off the borrower balance), then subflow <b>980</b> may be executed.</p><p id="p-0253" num="0246">Subflow <b>980</b> begins at <b>982</b>, with the obligation object <b>916</b> requesting liquidation of the CDP via wrapper <b>918</b>. Wrapper <b>918</b> carries out the liquidation function of the CDP, and optionally notifies obligation object <b>916</b> of the funds amount available following liquidation, at <b>984</b>.</p><p id="p-0254" num="0247">At <b>986</b>, obligation object <b>916</b> requests transfer of the funds amount following liquidation. At <b>988</b>, wrapper <b>918</b> transfers the liquidation amount (which may be generated by sale of the collateral) to obligation object <b>916</b>.</p><p id="p-0255" num="0248">At <b>990</b>, obligation object <b>916</b> transfers the unlocked Dai amount to the lender device <b>940</b> (or a designated address).</p><p id="p-0256" num="0249">At <b>992</b>, obligation object <b>916</b> transfers the borrower balance to the lender device <b>940</b> (or a designated address) or, if the liquidation amount is less than the borrower balance, transfers the liquidation amount.</p><p id="p-0257" num="0250">If the liquidation amount exceeds the borrower balance, then the difference between the liquidation amount and borrower balance (i.e., any remaining amount of the liquidation amount) can be transferred to the borrower device <b>930</b> (or a designated address) at <b>994</b>.</p><p id="p-0258" num="0251">At <b>998</b>, obligation object <b>916</b> may set a parameter indicating the last check time of the obligation object, to the current time.</p><p id="p-0259" num="0252">Although certain of the embodiments have been described herein as involving an obligation object and a separate wrapper contract, in some other embodiments, the functions of the obligation object and wrapper contract may be merged. That is, the obligation object may be configured to directly perform certain of the functions described herein as carried out by the wrapper contract, whereas certain other functions of the wrapper contract may be modified or unnecessary when the wrapper functionality is incorporated into the obligation object.</p><p id="p-0260" num="0253">The present invention has been described here by way of example only, while numerous specific details are set forth herein in order to provide a thorough understanding of the exemplary embodiments described herein. However, it will be understood by those of ordinary skill in the art these embodiments may, in some cases, be practiced without these specific details. In other instances, well-known methods, procedures and components have not been described in detail so as not to obscure the description of the embodiments. Various modifications and variations may be made to these exemplary embodiments without departing from the spirit and scope of the invention, which is limited only by the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for automatically conducting a continuous forward rate agreement in a cryptocurrency using smart contracts, the method comprising:<claim-text>identifying a first smart contract, the first smart contract having a first address and a first borrower address associated therewith, the first smart contract having (i) a owed amount value initially based on an amount of cryptocurrency transferred to the first borrower address, (ii) a collateral value representing a value of a collateral object committed to the smart contract associated with the first borrower address, (iii) an interest rate query routine configured to periodically determine a first variable interest rate based at least on an extrinsic rate or an intrinsic rate;</claim-text><claim-text>identifying at least one loan token associated with the first smart contract, the at least one loan token representing an interest in the collateral object;</claim-text><claim-text>identifying a second smart contract, the second smart contract having a second address and a first lender address associated therewith, the second smart contract having (i) a lender balance representing a lender amount of cryptocurrency associated with the first lender address, and (ii) a second interest rate query routine configured to periodically determine a second variable interest rate based at least on the extrinsic rate or the intrinsic rate;</claim-text><claim-text>generating an obligation object, wherein generating the obligation object comprises:</claim-text><claim-text>receiving control of the at least one loan token;</claim-text><claim-text>generating a borrower balance of the obligation object based on the collateral value associated with the at least one loan token;</claim-text><claim-text>receiving control of the lender amount;</claim-text><claim-text>generating at least one lender token and at least one borrower token;</claim-text><claim-text>associating the at least one lender token with the first lender address;</claim-text><claim-text>associating the at least one borrower token with the first borrower address; and</claim-text><claim-text>determining a predetermined interest rate associated with the obligation object; and</claim-text><claim-text>executing the obligation object, wherein executing the obligation object comprises:</claim-text><claim-text>receiving at least one first payment from the first borrower address;</claim-text><claim-text>receiving at least one second payment from the first lender address;</claim-text><claim-text>updating the borrower balance based on the at least one first payment and the at least one second payment;</claim-text><claim-text>detecting a triggering event; and</claim-text><claim-text>in response to detection of the triggering event:<claim-text>i) computing a lender return amount based on the lender balance and the at least one first payment;</claim-text><claim-text>ii) computing a borrower return amount based on the borrower balance and the at least one first payment; and</claim-text><claim-text>iii) releasing a cryptocurrency based on the lender return amount and the borrower return amount.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one lender token comprises a plurality of lender tokens.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein a subset of the plurality of lender tokens is associated with a second lender address, and wherein the lender amount is re-allocated between the first lender address and the second lender address according to a proportion of the plurality of lender tokens associated with the first and second lender addresses, respectively.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>de-associating the at least one lender token from the first lender address;</claim-text><claim-text>transferring a subset of the loan amount to the first lender; and</claim-text><claim-text>receiving a secondary loan amount to replace the subset of the loan amount, from the second lender.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one borrower token comprises a plurality of borrower tokens.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein a subset of the plurality of borrower tokens is associated with a second borrower address, and wherein the borrower balance is reallocated between the first borrower address and the second borrower address according to a proportion of the plurality of borrower tokens associated with the first and second borrower addresses, respectively.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising de-associating the at least one borrower token from the first borrower address.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the obligation object further comprises querying an external server or smart contract to determine the predetermined interest rate.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the predetermined interest rate is fixed.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein executing the obligation object further comprises:<claim-text>determining that the extrinsic rate has decreased relative to the predetermined interest rate; and</claim-text><claim-text>increasing a proportion of the loan amount to be allocated to the lender address, based on the difference between the extrinsic rate and the predetermined interest rate.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein increasing the proportion of the loan amount to be allocated to the lender address further comprises:<claim-text>computing the proportion of the loan amount;</claim-text><claim-text>invoking a partial liquidation function of the obligation object; and</claim-text><claim-text>receiving the proportion of the loan amount in an escrow account.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein executing the obligation object further comprises:<claim-text>determining that the extrinsic rate has increased relative to the predetermined interest rate; and</claim-text><claim-text>increasing a proportion of the loan amount to be allocated to the borrower address, based on the difference between the extrinsic rate and the predetermined interest rate.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein receiving control of the lender amount comprises the obligation object receiving control of the lender amount, the method further comprising transferring a portion of the lender amount to the first smart contract to reduce the owed amount value.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein detecting the triggering event comprises detecting that the collateral value is lower than the loan amount presently allocated to the lender.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein detecting the triggering event comprises detecting that a term of the obligation object has elapsed.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first payment is at least one borrower interest payment based on the first variable interest rate.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second payment is at least one lender interest payment based on the second variable interest rate.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the obligation object is a smart contract.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one first payment comprises a plurality of payments, and wherein the monitoring the at least one first payment comprises periodically monitoring the plurality of payments.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the cryptocurrency is based on a form of Dai.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the extrinsic rate is a Dai Savings Rate.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00020">claim 20</claim-ref>, wherein the extrinsic rate is based on a dividend rate.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. A method for automatically conducting a continuous forward rate agreement in a cryptocurrency using smart contracts, the method comprising:<claim-text>generating an obligation object, the obligation object having a first address and a first borrower address associated therewith, the obligation object having (i) an owed amount value initially based on an amount of cryptocurrency transferred to the first borrower address, (ii) a collateral value representing a value of a collateral object committed to the obligation object by the first borrower address, (iii) an interest rate query routine configured to periodically determine a first variable interest rate based at least on an extrinsic rate or an intrinsic rate, the obligation object further having a first lender address associated therewith, and (i) a lender balance representing a lender amount of cryptocurrency associated with the first lender address, wherein generating the obligation object further comprises:<claim-text>generating a borrower balance of the obligation object based on the collateral value associated with the at least one loan token;</claim-text><claim-text>generating the lender balance of the obligation object based on the lender amount;</claim-text><claim-text>generating at least one lender token and at least one borrower token;</claim-text><claim-text>associating the at least one lender token with the first lender address;</claim-text><claim-text>associating the at least one borrower token with the first borrower address; and</claim-text><claim-text>determining a predetermined interest rate associated with the obligation object; and</claim-text><claim-text>executing the obligation object, wherein executing the obligation object comprises:</claim-text><claim-text>receiving at least one first payment from the first borrower address;</claim-text><claim-text>receiving at least one second payment from the first lender address;</claim-text><claim-text>updating the borrower balance based on the at least one first payment and the at least one second payment;</claim-text><claim-text>detecting a triggering event; and</claim-text><claim-text>in response to detection of the triggering event:<claim-text>i) computing a lender return amount based on the lender balance and the at least one first payment;</claim-text><claim-text>ii) computing a borrower return amount based on the borrower balance and the at least one first payment; and</claim-text><claim-text>iii) releasing a cryptocurrency based on the lender return amount and the borrower return amount.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. A non-transitory computer readable medium storing computer program code executable by a processor, which when executed by the processor causes the processor to carry out the method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim></claims></us-patent-application>