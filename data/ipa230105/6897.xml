<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006898A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006898</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779770</doc-number><date>20191128</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>46</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>02</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">A Method of Capturing Packets from a Container in a Cluster</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Siemens Aktiengesellschaft</orgname><address><city>Muenchen</city><country>DE</country></address></addressbook><residence><country>DE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>ALBRECHT</last-name><first-name>Harald</first-name><address><city>Nuernberg</city><country>DE</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/EP2019/082894</doc-number><date>20191128</date></document-id><us-371c12-date><date>20220525</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for capturing packets originating from a first container from a cluster of containers that each container includes at least one network interface for transmitting packets, wherein the method includes detecting a first connection for transmission of packets from a first network interface associated with a first container and injecting container information of the first container in a packet stream associated with the first connection, where the injected container information serves for identification of the first container by a packet capture tool configured to capture the packet stream associated with the first connection.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="96.27mm" wi="158.75mm" file="US20230006898A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="198.46mm" wi="153.75mm" file="US20230006898A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="74.93mm" wi="161.97mm" file="US20230006898A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="244.26mm" wi="151.21mm" orientation="landscape" file="US20230006898A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="241.72mm" wi="161.97mm" file="US20230006898A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="129.46mm" wi="143.59mm" file="US20230006898A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="128.44mm" wi="147.83mm" file="US20230006898A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a U.S. national stage of application No. PCT/EP2019/082894 filed 28 Nov. 2019.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><heading id="h-0003" level="1">1. Field of the Invention</heading><p id="p-0003" num="0002">The current disclosure relates to containers in industrial automation and, more particularly, relates to packet capture and analysis of network traffic in relation to containers, where a packet capture tool (also known as a packet sniffer or packet analyzer) is a program or special hardware that is capable of intercepting and logging packets that are transmitted in a network, and where the packets are then used to analyze network behavior to improve network performance.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">The current disclosure relates to packet capture and analysis in industrial networks. With the advent of container technology, containers have been deployed in a plurality of environments including industrial automation. Accordingly, in addition to a multitude of physical assets, there are a large number of virtual participants in automation networks. These virtual participants or industrial applications are deployed and executed in huge numbers, because they are container based and are rather small and nimble. These industrial applications may run in the industrial plant on industrial Edges or may be executed on industrial OT clusters, having direct network access to the production network of the plant.</p><p id="p-0005" num="0004">Accordingly, given the large number of participants (both physical and virtual) in the automation network, it becomes necessary to perform network analysis to ensure network utilization is optimal. In order to perform network analysis, packets in the network are recorded for analysis. This is achieved by packet capture tools, such as TCPdump, and/or Dumpcap. As a part of packet capture, in addition to the packets, certain metadata in relation to the packets such as network interface from which the packet is transmitted, name of the operating system, and/or version of the hardware, is recorded along with the corresponding packet.</p><p id="p-0006" num="0005">However, the abovementioned industrial applications are not applications found directly in a host or virtual machine (VM), but rather containers that form an intermediate layer within a host or virtual machine. As a result, metadata from packet capture is often not sufficiently useful. A plurality of containers may share the same network interface name and, accordingly, merely recording network interface name does not provide sufficient indication regarding the origin of the packet. Accordingly, there is a need for a method and system for addressing the above-mentioned aspects.</p><heading id="h-0005" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0007" num="0006">Accordingly, it is an object of the current disclosure to provide a method for capturing packets originating from a first container from a cluster of containers. Each container comprises one or more network interfaces for transmitting packets. The method comprises detecting a first connection for transmission of packets from a first network interface associated with a first container; and injecting container information of the first container in a packet stream associated with the first connection. The injected container information serves to provide identification of the first container by a packet capture tool configured to capture the packet stream associated with the first connection.</p><p id="p-0008" num="0007">Accordingly, the current method allows for captured packets to be easily correlated with the containers in the cluster. This is particularly advantageous in being able to create a way for existing analysis tools to become &#x2018;container-aware&#x2019;. Additionally, &#x2018;Capture as a Service&#x2019; can be realized and the acquisition of packets in the cluster can be made possible from using standard packet capture tools. Moreover, existing containers or pods do not need to be specially adjusted or restarted to enable packet capture.</p><p id="p-0009" num="0008">In an example, the container information is determined based on one or more of a network identifier of the first network interface and a container catalogue. The container catalogue comprises container information of one or more containers. Container information of a container comprises a container identifier of the container and one or more network identifiers of corresponding one or more network interfaces of the container. Accordingly, based on the identifier of the network interface, the container information is determined. Consequently, this provides a non-intrusive manner of determining container information without modifying container deployment.</p><p id="p-0010" num="0009">In an example, the network identifier of the first network interface includes one or more of a network namespace identifier, process identifier of a process associated with the first container, media access control (MAC) identifier, and identifier associated with a IP stack of the network interface.</p><p id="p-0011" num="0010">In another example, the container catalogue is generated by a cluster discovery service. The cluster discovery service includes a plurality of node discovery modules, each discovery module hosted on a corresponding node for discovering container and network interface information associated with the corresponding node. Accordingly, cluster discovery service allows for discovery of containers and network interfaces along with their association to containers in an automated manner.</p><p id="p-0012" num="0011">In another example, injecting container information further comprises identifying a first section header block in the packet stream associated with the first connection and appending the container information of the first container in a comment section of the first section header block. Accordingly, the container information is embedded in the section header block which could be understood by users and by packet capture applications.</p><p id="p-0013" num="0012">In a further example, the first network interface is monitored by a capture client associated with the cluster. This allows for automated monitoring of network interfaces, detection of connections and capture of packets on the network interfaces.</p><p id="p-0014" num="0013">It is also an object of the current disclosure to provide a system for capturing packets from one or more containers in a cluster of containers. The system comprises a cluster discovery service hosted in the cluster of containers, where the cluster discovery service is configured to discover the one or more containers in the cluster and generate a container catalogue. The system also includes a capture client hosted in the cluster of containers, configured to transmit plurality of packets associated with the one or more containers in the cluster, and further includes a data injector configured to receive plurality of packets from the capture client and inject container information of the corresponding container into one or more packets, based on the container catalogue, and a packet capture tool configured to record the plurality of packets, where the packet capture tool is configured to identify the corresponding container based on the injected container information from the one or more packets from the packet stream.</p><p id="p-0015" num="0014">It is also an object of the current to provide a non-transitory storage medium for capturing packets originating from a first container from a cluster of containers. Each container comprises one or more network interfaces for transmitting packets. The non-transitory storage medium has a plurality of machine-readable instructions stored therein which, when executed by one or more processors, cause the one or more processors to detect a first connection for transmission of packets from a first network interface associated with the first container, and inject container information of the first container in a packet stream associated with the first connection, where the injected container information is for identification of the first container by a packet capture tool configured to capture the packet stream associated with the first connection.</p><p id="p-0016" num="0015">Additionally, the current application incorporates by the reference in its entirety the details set forth in EP application 19204976.5 filed on 24 Oct. 2019 belonging to the current applicant.</p><p id="p-0017" num="0016">Other objects and features of the present invention will become apparent from the following detailed description considered in conjunction with the accompanying drawings. It is to be understood, however, that the drawings are designed solely for purposes of illustration and not as a definition of the limits of the invention, for which reference should be made to the appended claims. It should be further understood that the drawings are not necessarily drawn to scale and that, unless otherwise indicated, they are merely intended to conceptually illustrate the structures and procedures described herein.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0018" num="0017">The following detailed description references the figures, in which:</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an exemplary section of an example industrial network for capturing packets from a container in a cluster in accordance with the invention;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary method for capturing packets from a container in a cluster in accordance with the invention;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an exemplary cluster configuration in an industrial network in accordance with the invention;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an exemplary method for generating and transmitting a container catalogue to a data injector in accordance with the invention;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary method for capturing and transmitting packets to a data injector in accordance with the invention;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates another exemplary packet stream and modified packet stream in accordance with the invention; and</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an exemplary data injector device for capturing packets from a container in a cluster in accordance with the invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION OF THE EXEMPLARY EMBODIMENT</heading><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a plurality of clusters (<b>110</b>, <b>150</b>) in an industrial network <b>100</b> in an industrial facility (also referred to as an industrial plant). Industrial facility herein refers to any environment in which one or more industrial processes such as manufacturing, refining, smelting, assembly of equipment may occur and includes process plants, oil refineries, and/or automobile factories. The industrial facility may comprise a plurality of control devices connected to a plurality of field devices for monitoring and regulating one or more industrial processes in the industrial facility. Industrial network herein refers to any electronic data network and accordingly includes office campus networks, industrial automation networks, private radio networks, and any other networks. Each cluster is capable of analyzing and processing industrial data from one or more industrial data sources (i.e., field devices and control devices). Each cluster (<b>110</b>, <b>150</b>) includes a plurality of physical and virtual nodes (also known as work nodes or nodes) upon which a plurality of containers (<b>120</b>, <b>130</b>, <b>140</b>, <b>160</b>, <b>170</b>) are hosted.</p><p id="p-0027" num="0026">For example, a work node or node of a cluster might be a (separate) device or a (separate) hardware component. In another example, a work node is available as a &#x201c;virtual node&#x201d;, for example, a virtual machine executed on a device such as a PC, server or a computational platform. In yet another example, a work node can also be hosted on an automation component, such as a control device, and/or gateway device. Particularly preferably, at least one work node is an edge device, especially an industrial edge device. An edge device is in particular a device that performs one or more functions associated with edge computing. For example, an industrial edge device might be provided by an industrial computer, a gateway device, or an industrial server that performs an edge computing function. A cluster can also include different types of work nodes, such as at least one edge device and at least one virtual machine.</p><p id="p-0028" num="0027">Each container (<b>120</b>, <b>130</b>, <b>140</b>, <b>160</b>, <b>170</b>) is configured to execute one or more related industrial applications for processing the abovementioned industrial data. Containers (also referred to as application containers) herein refers to runtime environments that can run independently, no matter where they are deployed. In contrast to virtual machines that represent an entire computing environment, the containers typically contain only the important libraries, files and other resources needed to run the application. Container contains software or application to be executed and resources needed to execute the same. Containerised applications can be easily and conveniently deployed in modular fashion.</p><p id="p-0029" num="0028">For example, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the cluster <b>110</b> includes containers <b>120</b>, <b>130</b> and <b>140</b>. A plurality of industrial applications are hosted on the containers <b>120</b>, <b>130</b> and <b>140</b>. Similarly, the cluster <b>150</b> includes two containers: container <b>160</b> and container <b>170</b>. A plurality of industrial applications are hosted on the containers <b>160</b> and <b>170</b>. The applications on the containers are capable of communicating with other applications within the same cluster and across different clusters.</p><p id="p-0030" num="0029">Additionally, a packet capture framework is present in the industrial network <b>100</b>. The packet capture framework includes a plurality of capture clients (<b>145</b>, <b>185</b>), cluster discovery services (also referred to service instances) (<b>125</b>, <b>165</b>) and a packet capture tool (<b>180</b>). Each capture client (<b>145</b>, <b>185</b>) and cluster discovery service (<b>125</b>, <b>165</b>) is located with a corresponding cluster (<b>110</b>, <b>150</b>). For example, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the capture client <b>145</b> and cluster discovery service <b>125</b> are hosted in cluster <b>110</b>. Similarly, the capture client <b>185</b> and cluster discovery service <b>165</b> are hosted in cluster <b>150</b>.</p><p id="p-0031" num="0030">The cluster discovery service (<b>125</b>, <b>165</b>) is hosted in the corresponding cluster (<b>110</b>, <b>150</b>) and is responsible for discovering the containers and corresponding container configuration in the corresponding cluster (<b>110</b>, <b>150</b>). The cluster discovery service (<b>125</b>, <b>165</b>) discovers network interfaces of each node of the corresponding cluster and containers that exist on the respective node. Additionally, if containers are present, then the cluster discovery service determines associations between the containers of the respective node and network interfaces of the respective node. The capture client (<b>145</b>, <b>185</b>) is hosted in the corresponding cluster (<b>110</b>, <b>150</b>) and is responsible for monitoring communication and duplicating packets transmitted from and to containers, for recording the packets. The capture client transmits the duplicated or captured packets to the packet capture tool <b>180</b>. The packet capture tool <b>180</b> records the duplicated packets which are then used for network analysis.</p><p id="p-0032" num="0031">Additionally, the packet capture framework includes one or more data injectors (<b>135</b>, <b>175</b>). In an example, the data injector acts as an intermediary between the capture client (<b>145</b>, <b>185</b>) and the packet capture tool (<b>180</b>). In another example, the data injector (<b>135</b>, <b>175</b>) is hosted within the corresponding cluster (<b>110</b>, <b>150</b>). In further example, a data injector is hosted on a separate device and connected to the plurality of clusters (<b>110</b>, <b>150</b>). The data injector receives the duplicated packets from the capture client and injects container information of the container associated with the packets, into a section of one or more packets. The injected information is used by the packet capture tool <b>180</b> to identify the container from which the packets originate.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a method <b>200</b> for capturing packets from a container in a cluster. The method <b>200</b> is explained in relation to data injector <b>135</b>. In the example, a communication is initiated between an application on container <b>140</b> and an application on container <b>130</b>. Accordingly, a connection (also referred to as first connection) is established between a first network interface associated with container <b>140</b> and a second network interface associated with the container <b>130</b>. Packets are then transmitted from the container <b>140</b> (also referred to as first container <b>140</b>) to the container <b>130</b>. In the example, the method <b>200</b> is executed by the data injector <b>135</b> for capturing packets associated with the abovementioned communication between container <b>140</b> and <b>130</b> in coordination with the packet capture tool <b>180</b>. While the method <b>200</b> is explained in relation to communication between containers <b>140</b> and <b>130</b>, the current disclosure is applicable to communication amongst containers on different clusters as well. For example, communication between container <b>120</b> (on cluster <b>110</b>) and container <b>170</b> (on cluster <b>150</b>) can also be captured in accordance with the method <b>200</b>.</p><p id="p-0034" num="0033">At step <b>210</b>, the data injector <b>135</b> detects the first connection for transmission of packets from the first network interface associated with the first container <b>140</b> in the cluster <b>110</b>. In an example, the data injector <b>135</b> detects the first connection in coordination with the capture client <b>145</b> in the cluster <b>110</b>.</p><p id="p-0035" num="0034">The capture client <b>145</b> is configured to monitor a plurality of network interfaces within the cluster <b>110</b> and accordingly detects any connections established on a network interface from the plurality of network interfaces of the cluster <b>110</b>. The capture client <b>145</b> then intimates or informs the data injector <b>135</b>. In an example, the data injector <b>135</b> receives a network identifier of the first network interface on which the first connection is detected, from the capture client <b>145</b>.</p><p id="p-0036" num="0035">At step <b>220</b>, the data injector <b>135</b> next injects container information of the first container <b>140</b> in a packet stream associated with the first connection. Packet stream relates to a sequence of data packets (also referred to as packets) transmitted from a source to destination. In an example, the data injector <b>135</b> determines the container information based on a container catalogue and the network identifier associated with the first network interface. The container catalogue is generated by the cluster discovery service (<b>125</b>, <b>165</b>) hosted in the corresponding cluster (<b>110</b>, <b>150</b>). Each cluster (<b>110</b>, <b>150</b>) is equipped with a cluster discovery service (<b>125</b>, <b>165</b>) which, so to speak, provides the corresponding data injector (<b>135</b>, <b>175</b>) with an understanding of containers and their relation to network interfaces and other network resources, such as IP stacks (virtual and actual).</p><p id="p-0037" num="0036">In a preferred embodiment, the cluster discovery service (also referred to as cluster acquisition module) is connected to a plurality of node discovery modules located on each node of the corresponding cluster.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example cluster <b>310</b> configuration in the industrial network. The exemplary cluster <b>310</b> includes work nodes <b>320</b> and <b>330</b>. The work node <b>320</b> includes container <b>323</b> and work node <b>330</b> includes containers <b>333</b> and <b>336</b>. A capture client <b>345</b> is connected to the nodes <b>320</b> and <b>330</b> for capturing packets from the containers on the nodes <b>320</b> and <b>330</b>. The capture client is connected to the data injector <b>360</b> for transmitting captured packets to the packet capture tool <b>180</b>.</p><p id="p-0039" num="0038">Additionally, the cluster <b>310</b> includes the cluster discovery service <b>315</b>. The cluster discovery service <b>315</b> is connected to node discovery module <b>325</b> on the node <b>320</b> and node discovery module <b>335</b> on the node <b>330</b>. Each node discovery module (<b>325</b>, <b>335</b>) is configured to discover the network resources present on the corresponding node (<b>320</b>, <b>330</b>), such as IP stacks, their network interfaces, and the containers present on the nodes. In other words, each node discovery module (<b>325</b>, <b>335</b>) determines which containers are present on the node (<b>320</b>, <b>330</b>), which network stacks the respective node has, which network interfaces are associated with the network stacks of the respective node and which container is associated with which network stack of the respective node.</p><p id="p-0040" num="0039">In an embodiment, the network stacks (also referred to as networking stacks, IP stacks or protocol stacks) of the respective node are captured by the node discovery module (<b>325</b>, <b>335</b>) of the respective node (<b>320</b>, <b>330</b>) based on one or the process table of the operating system of the respective node (<b>320</b>, <b>330</b>). Similarly, in an example, the node discovery module of the respective node determines network stack of the respective node, by currently reading active mounts (in particular &#x201c;/proc/$PID/mountinfo&#x201d;) of the operating system of the respective node. In an embodiment, the (respective) node discovery module searches the network namespaces used by processes, in particular by checking all references in &#x201c;/proc/$PID/ns/net&#x201d; for network stacks. Here, $PID is replaced in turn by all PIDs of the currently running processes.</p><p id="p-0041" num="0040">In an example, in order to identify or capture the containers on a node, the (corresponding) node discovery module can contact the container engine associated with that node.</p><p id="p-0042" num="0041">Container engines (such as dockers, for example) are typically used to manage the containers, such as downloading the required container images and starting and stopping them. Additionally, the process identifiers (PIDs) belonging to the containers are also determined along with names belonging to the containers, in particular names used by the container engine, which the container has from an applicative point of view and/or user-side.</p><p id="p-0043" num="0042">Then, for each captured container, the node discovery module determines the network stack used by the container based on of the process table of the operating system (in particular via &#x201c;/proc/$PID/ns/net&#x201d;). It should be noted that the process identifiers (PIDs) of the container are used here. This means that the respective network interfaces are also known for the containers that are captured. It is known which container/pod is assigned to which network stack, and which network interfaces belong to which network stack. Consequently, it is also known which network interface(s) belongs to which container/pod or belong.</p><p id="p-0044" num="0043">Subsequent to the discovery of the containers and the related network resources (interfaces, and/or stacks), the node discovery module (<b>325</b>, <b>335</b>) transmits the information regarding the containers and the related network resources to the cluster discovery service <b>315</b>. In an example, the node discovery module (<b>325</b>, <b>335</b>) transmits the information in a form of the JSON data structure as shown below:</p><p id="p-0045" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="133pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>HTTP/1.1 200 OK</entry></row><row><entry/><entry/><entry>Content-Type: application/json</entry></row><row><entry/><entry/><entry>{</entry></row><row><entry/><entry/><entry>&#x2003;&#x201c;targets&#x201d;: [</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;name&#x201d;: &#x201c;containerx&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;ipstack&#x201d;: &#x201c;4026532600&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;network-interfaces&#x201d;: [</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;eth2&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;mLAN&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x201c;Nice stay&#x201d;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;] ,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;path&#x201d;: &#x201c;&#x201d;,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;pid&#x201d; : 42,</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;type&#x201d;: &#x201c;container&#x201d;</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;},</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;. . .</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0046" num="0044">The cluster discovery service <b>315</b> receives the information from all the node discovery modules (<b>325</b>, <b>335</b>) and generates the container catalogue of the corresponding cluster <b>310</b>. This is explained further in reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0047" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an exemplary method <b>400</b> for generating and transmitting a container catalogue by the cluster discovery service <b>315</b> to the data injector <b>360</b>. At step <b>410</b>, the cluster discovery service <b>315</b> receives container and network interface information from all the node discovery modules (<b>325</b>, <b>335</b>), as mentioned above. At step <b>420</b>, based on the same, the cluster discovery service <b>315</b> then generates the container catalogue. The container catalogue contains the names of all containers and related identifiers (IDs) on the cluster <b>310</b>, present node numbers of the respective assigned (virtual or actual) network stacks, the names of the corresponding network interfaces and a reference to the respective node discovery module, such as in the form of an IP address. At step <b>430</b>, the cluster discovery service <b>315</b> then transmits the container catalogue to the data injector <b>360</b>. Based on the container catalogue, the data injector <b>360</b> can determine the identifier of container based on the identifier of the related network stack or network interface, which is assigned to at least one container.</p><p id="p-0048" num="0046">Accordingly, in addition to the determination of the container information, the data injector <b>135</b> receives packets from the capture client <b>145</b>. Continuing the above-mentioned example, data packets of the first container <b>140</b> (transmitted to the container <b>130</b>) is captured by the capture client <b>145</b> on the cluster <b>110</b>, by capturing the traffic at the first network interface (or network stack) that is associated with the first container <b>140</b>.</p><p id="p-0049" num="0047"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary method <b>500</b> for capturing and transmitting packets from the capture client <b>145</b> to the data injector <b>135</b>. The capture client includes well known tools and means for capturing packets such as TCPdump, and/or Wireshark At step <b>510</b>, the capture client <b>145</b> detects the first connection for transmission of packets on the first network interface associated with the container <b>140</b>. At step <b>520</b>, the capture client <b>145</b> then transmits the network identifier of the first network interface to the data injector <b>135</b>. The network identifier is used by the data injector <b>135</b> to determine the container information of the first container <b>140</b> associated with the first network interface based on the network catalogue from the cluster discovery service <b>310</b>. At step <b>530</b>, the capture client <b>145</b> captures packets on the first network interface.</p><p id="p-0050" num="0048">In an embodiment, each capture client on a corresponding cluster, comprises a plurality of node capture services. Each node capture service is deployed on a corresponding node of the corresponding cluster associated with the capture client. Each node capture service is configured to monitor the corresponding node to detect or determine if connections from (or to) the containers on the corresponding node have been established. In an example, a node capture service detects whether a connection has been established by monitoring a plurality of sockets on the IP stacks associated with the containers on the corresponding node and the corresponding process table of the corresponding node. In an example, the node capture service may be based on existing network tools and network APIS, such as netstat, iproute2, and/or RTNETLINK API. Subsequent to the detection of a connection, the node capture service is configured to capture packets associated with the detected connection. In an example, the captured packets are then transmitted to the capture client.</p><p id="p-0051" num="0049">At step <b>540</b>, the capture client <b>145</b> next transmits the captured or duplicate packets as a packet stream to the data injector <b>135</b>. In an example, the capture service provided by the capture client is at the container-specific virtual level (i.e., virtual network stack or network interface).</p><p id="p-0052" num="0050">Subsequent to receiving the packets from the capture client <b>145</b>, the data injector <b>135</b> modifies the packet stream by appending the container information of the first container to one or more packets of the packet stream and transmits the same to the packet capture tool <b>180</b>.</p><p id="p-0053" num="0051"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an exemplary captured and modified packet streams <b>610</b> and <b>650</b> respectively. The captured packet stream <b>610</b> is transmitted from the capture client (for example, the capture client <b>145</b>) to the data injector <b>135</b>.</p><p id="p-0054" num="0052">The captured packet stream <b>610</b> is composed of duplicate packets, captured on the first network interface in relation to the packets transmitted from container <b>140</b> to the container <b>130</b>. In the example, the duplicate packets are transmitted in packet data format &#x201c;PCAPNG&#x201d; (Packet CAPture Next Generation Dump File Format). Accordingly, the data injector <b>135</b> determines a section header block of the PCAPNG file and appends the container information of the first container in the comments section of the section header block. For example, as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the packet stream <b>610</b> from the capture client may include a plurality of packets (<b>620</b>-<b>680</b>) as a part of PCAPNG file. The data injector <b>135</b> parses each packet to see whether the packet includes the section header block. In the current case, the section header block is present in packet <b>630</b>. If the packet does not contain the section header block, then the data injector <b>135</b> transmits the packet in its current form to the packet capture tool. This is the case for packets (<b>620</b>&#x2032;, <b>640</b>&#x2032;-<b>680</b>&#x2032;).</p><p id="p-0055" num="0053">These packets are same as the packets <b>620</b>, <b>640</b>-<b>680</b>. The packet <b>630</b> is modified by appending the container information (<b>635</b>) to the comments section of the section header block and a new packet <b>630</b>&#x2032; is generated by the data injector <b>135</b>. The packet <b>630</b>&#x2032; along with the other packets (<b>620</b>&#x2032;, <b>640</b>&#x2032;-<b>680</b>&#x2032;) is transmitted in the same sequence in which they were received from the capture client <b>145</b>.</p><p id="p-0056" num="0054">In an example, the appended container information includes an identifier of the container, an identifier of the node on which the container is hosted, an identifier of the cluster upon which the node is present and a type identifier indicative of the type of container the first container is. For example, the container information appended may be:</p><p id="p-0057" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="154pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>{</entry></row><row><entry/><entry/><entry>&#x201c;container-meta&#x201d; :</entry></row><row><entry/><entry/><entry>{</entry></row><row><entry/><entry/><entry>&#x201c;name&#x201d;: &#x201c;default/foo&#x201d;,</entry></row><row><entry/><entry/><entry>&#x201c;type&#x201d;: &#x201c;pod&#x201d;,</entry></row><row><entry/><entry/><entry>&#x201c;node&#x201d;: &#x201c;node-42&#x201d;,</entry></row><row><entry/><entry/><entry>&#x201c;cluster-id&#x201d;: &#x201c;1234-56-78-9abc12305678&#x201d;,</entry></row><row><entry/><entry/><entry>&#x201c;cluster-name&#x201d;: &#x201c;clusterf&#x201d;</entry></row><row><entry/><entry/><entry>}</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0058" num="0055">As mentioned previously, in an example, the data injector may be realized within each cluster as a cluster specific data injector (as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). In an example, the data injector may be realized as a part of the capture client or the node capture service. In another example, the data injector may be realized as separate service, outside of any cluster (as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The data injector acts like a proxy between the capture clients and the packet capture tool and injects container information. Additionally, while the above examples have been explained in reference to connections established for transmitting packets from a container, the current disclosure may also be applied to connections established for receiving packets at a container.</p><p id="p-0059" num="0056">Additionally, the current disclosure is applicable to any data transmission wherein at least one entity involved in a container. The second entity may be a different container on the same cluster as the first container, a different container on a different cluster, and/or a different application outside of any clusters.</p><p id="p-0060" num="0057">The present disclosure can take a form of a computer program product comprising program modules accessible from computer-usable or computer-readable medium storing program code for use by or in connection with one or more computers, processing units, or instruction execution system. For example, the data injector may be realized across one or more devices.</p><p id="p-0061" num="0058">Accordingly, the current disclosure describes a data injector device <b>700</b> as shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. The data injector device <b>700</b> includes an Input/Output (I/O) interface <b>710</b>, one or more processors <b>720</b> and a non-transitory storage medium <b>730</b>. The non-transitory storage medium <b>730</b> contains a plurality of instructions (<b>733</b>, and <b>736</b>) for injecting container information in packet streams for packet capture.</p><p id="p-0062" num="0059">Upon execution of the connection detection instructions <b>733</b>, the one or more processors <b>720</b> in coordination with the one or more capture clients in the clusters monitor the network interfaces for a connection. When a connection is established from a container, the network interface is then identified via its network identifier. When the data injection instructions <b>736</b> are executed by the one or more processors <b>720</b>, the duplicate packets in the packet stream from a capture client is injected with container information of the first container associated with the first network interface.</p><p id="p-0063" num="0060">While the current disclosure describes the data injector <b>700</b> as an independent component or device, the data injector <b>700</b> may be a software component and may be realized within a network device or any other management device in the industrial network. For the purpose of this disclosure, a computer-usable or computer-readable non-transitory storage medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device. The medium can be electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation mediums in and of themselves as signal carriers are not included in the definition of physical computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, random access memory (RAM), a read only memory (ROM), a rigid magnetic disk and optical disk such as compact disk read-only memory (CD-ROM), compact disk read/write, and DVD. Both processing units and program code for implementing each aspect of the technology can be centralized or distributed (or a combination thereof) as known to those skilled in the art.</p><p id="p-0064" num="0061">While the current disclosure is described with references to few industrial devices, a plurality of industrial devices may be utilized in the context of the current disclosure. While the present disclosure has been described in detail with reference to certain embodiments, it should be appreciated that the present disclosure is not limited to those embodiments. Additionally, while the current disclosure is explained in reference to containers, the term containers herein includes other similar execution environments such as pods in Kubernetes. In view of the present disclosure, many modifications and variations would be present themselves, to those skilled in the art without departing from the scope of the various embodiments of the present disclosure, as described herein. The scope of the present disclosure is, therefore, indicated by the following claims rather than by the foregoing description. All changes, modifications, and variations coming within the meaning and range of equivalency of the claims are to be considered within their scope. All advantageous embodiments claimed in method claims may also be applied to device/non transitory storage medium claims.</p><p id="p-0065" num="0062">Thus, while there have been shown, described and pointed out fundamental novel features of the invention as applied to a preferred embodiment thereof, it will be understood that various omissions and substitutions and changes in the form and details of the methods described and the devices illustrated, and in their operation, may be made by those skilled in the art without departing from the spirit of the invention. For example, it is expressly intended that all combinations of those elements and/or method steps which perform substantially the same function in substantially the same way to achieve the same results are within the scope of the invention. Moreover, it should be recognized that structures and/or elements and/or method steps shown and/or described in connection with any disclosed form or embodiment of the invention may be incorporated in any other disclosed or described or suggested form or embodiment as a general matter of design choice. It is the intention, therefore, to be limited only as indicated by the scope of the claims appended hereto.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-001-8" num="001-8"><claim-text><b>1</b>.-<b>8</b>. (canceled)</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A method for capturing packets originating from a first container from a cluster of containers, each container comprising at least one network interface for transmitting packets, the method comprising:<claim-text>a) detecting a first connection for transmission of packets from a first network interface associated with a first container; and</claim-text><claim-text>b) injecting container information of the first container in a packet stream associated with the first connection, the injected container information serving for identification of the first container by a packet capture tool configured to capture the packet stream associated with the first connection; and</claim-text><claim-text>c) capturing, by the packet capture tool, the packet stream associated with the first connection;<claim-text>wherein the container information is determined based on at least one network identifier of the first network interface and a container catalogue comprising container information of one or more containers; and</claim-text><claim-text>wherein container information of a container comprises a identifier of the container and one or more network identifiers of corresponding one or more network interfaces of the container.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the network identifier of the first network interface includes at least one of a network namespace identifier, a process identifier of a process associated with the first container, media access control (MAC) identifier and an identifier associated with a IP stack of the network interface.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the container catalogue is generated by a cluster discovery service; and wherein a cluster discovery service includes a plurality of node discovery modules, each node discovery module hosted on a corresponding node serving for discovering container and network interface information associated with the corresponding node.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein injecting container information further comprises identifying a first section header block in the packet stream associated with the first connection and appending the container information of the first container in a comment section of the first section header block.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method as claimed in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the first network interface is monitored by a capture client associated with the cluster.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A system for capturing packets from one or more containers in at least one cluster of containers, the system comprising:<claim-text>a) a cluster discovery service hosted in the cluster of containers, the cluster discovery service being configured to discover the at least one containers in the cluster and generate a container catalogue;</claim-text><claim-text>b) a capture client hosted in the cluster of containers, the capture client being configured to transmit plurality of packets associated with the one or more containers in the cluster;</claim-text><claim-text>c) a data injector configured to receive plurality of packets from the capture client and inject container information of a corresponding container into at least one packet based on the container catalogue; and</claim-text><claim-text>d) a packet capture tool configured to record the plurality of packets, said the packet capture tool being further configured to identify the corresponding container based on the injected container information from one or more packets from the packet stream.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system as claimed in <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the container catalogue comprises container information of one or more containers; and wherein container information of a container comprises a container identifier of the container and at least one network identifier of corresponding one or more network interfaces of the container.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A non-transitory storage medium for capturing packets originating from a first container from a cluster of containers, each container comprising at least one network interface for transmitting packets, the non-transitory storage medium having machine-readable instructions stored therein which, when executed by at least one processor, cause the at least one processor to:<claim-text>a) detect a first connection for transmission of packets from a first network interface associated with the first container; and</claim-text><claim-text>b) inject container information of the first container in a packet stream associated with the first connection, the injected container information serving for identification of the first container by a packet capture tool configured to capture the packet stream associated with the first connection.</claim-text></claim-text></claim></claims></us-patent-application>