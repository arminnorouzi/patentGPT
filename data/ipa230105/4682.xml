<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004683A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004683</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17305300</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>10</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>19</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>10</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>19</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>2219</main-group><subgroup>2008</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>30</main-group><subgroup>15</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">LOGICAL TRAVERSAL OF SOLID MODELS</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>The Boeing Compay</orgname><address><city>Chicago</city><state>IL</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Heiserman</last-name><first-name>Jeff Alan</first-name><address><city>Clinton</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for designing solid models, computer system, and computer program product are presented. The computer system receives a model of a three dimensional solid. The computer system determines at least one of vertices, edges, and faces for the model. The computer system traverses the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="117.94mm" wi="158.75mm" file="US20230004683A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="257.30mm" wi="152.32mm" orientation="landscape" file="US20230004683A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="253.49mm" wi="169.84mm" orientation="landscape" file="US20230004683A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="259.59mm" wi="168.23mm" orientation="landscape" file="US20230004683A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="256.71mm" wi="168.49mm" file="US20230004683A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="262.97mm" wi="170.01mm" file="US20230004683A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="258.49mm" wi="168.06mm" file="US20230004683A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="222.50mm" wi="131.83mm" file="US20230004683A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="242.65mm" wi="127.85mm" file="US20230004683A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND INFORMATION</heading><heading id="h-0002" level="1">1. Field</heading><p id="p-0002" num="0001">The present disclosure relates generally to computer-aided design (CAD) files and, more specifically, to a system and method for logically traversing solid models.</p><heading id="h-0003" level="1">2. Background</heading><p id="p-0003" num="0002">In modern manufacturing, large, complex, and challenging products are designed and manufactured utilizing computer-aided (CAD) files. CAD files are three-dimensional computer models that can be used to represent physical parts to be manufactured. CAD files can be used to perform simulations or to generate manufacturing instructions for equipment such as additive manufacturing equipment or computer numerical control (CNC) manufacturing equipment.</p><p id="p-0004" num="0003">Designing products may include families of designs and design alternatives, composed of millions of parts and components. Managing, designing, and analyzing this many components by human operators can be undesirably time-consuming and/or expensive. The precision necessary for generating instructions for manufacturing equipment is undesirably difficult and time-consuming. Additionally, after each modification, a design must be re-evaluated.</p><p id="p-0005" num="0004">Therefore, it would be desirable to have a method and apparatus that take into account at least some of the issues discussed above, as well as other possible issues. It would be desirable to use automation or optimization tools to design and/or manage complex products. In addition, it would be desirable to provide ways of providing access to the geometric data of a solid model in a logically consistent way.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">An embodiment of the present disclosure provides a method in a computer system for designing solid models that are manifold or non-manifold solids. A model of a three-dimensional solid is received by the computer system. At least one of vertices, edges, and faces for the model is determined by the computer system. The at least one of vertices, edges, and faces of the model is traversed by the computer system to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid.</p><p id="p-0007" num="0006">Another embodiment of the present disclosure provides a computer system for designing solid models that are manifold or non-manifold solids. The computer system comprises a bus system, a storage device connected to the bus system, and a processor connected to the bus system. The storage device stores program instructions. The processor executes the program instructions to: receive a model of a three dimensional solid; determine at least one of vertices, edges, and faces for the model; and traverse the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traverse, wherein the program instructions are configured to traverse the at least one of vertices, edges, and faces of the model independent of whether the model is a manifold solid or a non-manifold solid.</p><p id="p-0008" num="0007">Yet another embodiment of the present disclosure provides a computer program product. The computer program product comprises a computer-readable storage medium including instructions for organizing data sets, the instructions comprising first program code for receiving a model of a three-dimensional solid, second program code for determining at least one of vertices, edges, and faces for the model, and third program code for traversing the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid.</p><p id="p-0009" num="0008">A further embodiment of the present disclosure provides a method in a computer system for designing solid models that are manifold or non-manifold solids. A model of a three-dimensional solid is received by the computer system. A design requirement is received by the computer system. At least one of vertices, edges, and faces to be traversed is determined by the computer system based on the design requirement. The computer system traverses the at least one of vertices, edges, and faces of the model based on the design requirement to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid.</p><p id="p-0010" num="0009">The features and functions can be achieved independently in various embodiments of the present disclosure or may be combined in yet other embodiments in which further details can be seen with reference to the following description and drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0011" num="0010">The novel features believed characteristic of the illustrative embodiments are set forth in the appended claims. The illustrative embodiments, however, as well as a preferred mode of use, further objectives and features thereof, will best be understood by reference to the following detailed description of an illustrative embodiment of the present disclosure when read in conjunction with the accompanying drawings, wherein:</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an illustration of an aircraft in which an illustrative embodiment may be implemented;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an illustration of a block diagram of a design environment in which an illustrative embodiment may be implemented;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an illustration of a solid model in accordance with an illustrative embodiment;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is another illustration of a solid model in accordance with an illustrative embodiment;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is another illustration of a solid model in accordance with an illustrative embodiment;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is another illustration of a solid model in accordance with an illustrative embodiment;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an illustration of a flowchart of a computer-implemented method of designing solid models in accordance with an illustrative embodiment;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an illustration of a flowchart of a computer-implemented method of designing solid models in accordance with an illustrative embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an illustration of a block diagram of a data processing system in accordance with an illustrative embodiment;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is an illustration of an aircraft manufacturing and service method in the form of a block diagram in accordance with an illustrative embodiment; and</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is an illustration of an aircraft in the form of a block diagram in which an illustrative embodiment may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0023" num="0022">The illustrative embodiments recognize and take into account one or more different considerations. For example, the illustrative embodiments recognize and take into account that basic solids are represented by their boundary elements, such as vertices, edges, and faces. The illustrative embodiments recognize and take into account that to analyze both manifold and non-manifold solids, the representation can include vertices, vertex uses, edges and edge uses, faces, loops, shells and shell uses (independent surfaces), and solids (combination of all other). The illustrative embodiments recognize and take into account that non-geometric data can be associated with any of the vertices, edges, or faces.</p><p id="p-0024" num="0023">The illustrative embodiments recognize and take into account that there are several commercially available CAD formats and programs. The illustrative embodiments also recognize and take into account that commercial CAD and design systems can be used to develop large-scale, complex products, but these commercially available programs have limitations. Existing computer-aided design (CAD) and geometry systems provide ad hoc, implementation specific and often proprietary interfaces to their geometric and design representations. The illustrative embodiments recognize and take into account that one of the available systems provides a comprehensive logical reasoning capability.</p><p id="p-0025" num="0024">The illustrative embodiments recognize and take into account that using proprietary interfaces drives substantial engineering time and cost into developing these capabilities and especially in migrating these capabilities from current underlying systems into next generation systems.</p><p id="p-0026" num="0025">The illustrative examples provide the methods and computational foundation for a logical reasoning system that operates on the geometric and topological representations of solid models. These illustrative examples enable automated reasoning that incorporates engineering design knowledge and design rules for developing large-scale, integrated product designs. These illustrative examples in turn enable reductions in non-recurring and recurring engineering labor during product development, improved design quality, and reduced development costs.</p><p id="p-0027" num="0026">Turning now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an illustration of an aircraft is depicted in accordance with an illustrative embodiment. Aircraft <b>100</b> has wing <b>102</b> and wing <b>104</b> attached to body <b>106</b>. Aircraft <b>100</b> includes engine <b>108</b> attached to wing <b>102</b> and engine <b>110</b> attached to wing <b>104</b>.</p><p id="p-0028" num="0027">Body <b>106</b> has tail section <b>112</b>. Horizontal stabilizer <b>114</b>, horizontal stabilizer <b>116</b>, and vertical stabilizer <b>118</b> are attached to tail section <b>112</b> of body <b>106</b>.</p><p id="p-0029" num="0028">Aircraft <b>100</b> is an example of an aircraft in which components of the aircraft are designed or developed using the illustrative examples in accordance with an illustrative embodiment. For example, a portion of wing <b>102</b> or wing <b>104</b> could be designed or analyzed using the illustrative examples. As another example, components inside body <b>106</b> such as lavatories, storage, or other components could be designed or analyzed using the illustrative examples.</p><p id="p-0030" num="0029">Turning now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, an illustration of a block diagram of a design environment is depicted in which an illustrative embodiment may be implemented. Design environment <b>200</b> includes computer system <b>202</b> that performs methods for designing solid models <b>204</b>. Model <b>206</b> of three-dimensional solid <b>208</b> is one of solid models <b>204</b>. Computer system <b>202</b> performs traversing <b>209</b> of model <b>206</b> to perform analysis of model <b>206</b>. Traversing <b>209</b> is configured to be performed on model <b>206</b> independent of whether model <b>206</b> is a manifold solid or a non-manifold solid.</p><p id="p-0031" num="0030">Traversing <b>209</b> of model <b>206</b> determines topological adjacencies for model <b>206</b>. The topological adjacencies include V of E/E of V, V of F/F of V, V of S/S of V, E of F/F of E, E of S/S of E, F of S/S of F, wherein V is a vertex, E is an edge, F is a face, and S is a solid. To perform traversing <b>209</b>, find first and find next are utilized.</p><p id="p-0032" num="0031">Program code <b>211</b> for traversing <b>209</b> of solid models <b>204</b>, such as model <b>206</b>, utilizes logical mechanism <b>213</b>. The basic mechanism for traversing <b>209</b> of model <b>206</b> is provided by logical mechanism <b>213</b>. Logical mechanism <b>213</b> is further described and demonstrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> and <figref idref="DRAWINGS">FIG. <b>4</b></figref> in traversing respective solid models, solid model <b>300</b>, and solid model <b>400</b>.</p><p id="p-0033" num="0032">Logical mechanism <b>213</b> includes first=dataelement.find_first_x( ); next=first.find_next_x( ) or next=first.find_next_x(dataelement). This is the underlying mechanism for implementing a backtracking search&#x2014;without carrying around an iterator or any additional state.</p><p id="p-0034" num="0033">For this traversal to be logically correct, the result must have each data element (such as a face, edge, or vertex) adjacent to the instance (vertex, face, or solid) returned once and only once&#x2014;even in the presence of degenerate geometries, bridge edges, non-manifold conditions, etc. This traversal will operate for multiple solid modeling data representations, linear and non-linear, manifold and non-manifold. The order of traversal is not limited, as long as the above characteristic is preserved. There is no special geometric or topological significance to the ordering, either in selecting the first or in the ordering of each of the next elements in traversals. The order of traversal can be chosen to suit what is best supported in a particular data representation. The ordering in the traversal must return each element once and only once, and must be consistent across method/function calls. However, if changes are allowed during traversal, it is best that new elements are added at the beginning of the traversal. Adding new elements at the beginning of the traversal is intended to avoid infinite loops, stack, or heap overflows and eases debugging.</p><p id="p-0035" num="0034">Model <b>206</b> includes vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b>. Each vertex of vertices <b>210</b> is a three-dimensional point. Each edge of edges <b>212</b> is bounded by two vertices of vertices <b>210</b>, except in the non-linear, non-manifold case where an edge is adjacent to a single vertex at both ends. Each face of faces <b>214</b> is bounded by a plurality of edges in edges <b>212</b>.</p><p id="p-0036" num="0035">To perform an analysis, traversing <b>209</b> can be performed for each of the faces of vertices <b>210</b>, faces of edges <b>212</b>, edges of faces <b>214</b>, vertices of faces <b>214</b>, edges of vertices <b>210</b>, and vertices of edges <b>212</b>. Faces of vertices <b>210</b> is a subset of faces <b>214</b>. Faces of edges <b>212</b> is a subset of faces <b>214</b>. Edges of faces <b>214</b> is a subset of edges <b>212</b>. Vertices of faces <b>214</b> is a subset of vertices <b>210</b>. Edges of vertices <b>210</b> is a subset of vertices <b>210</b>. Vertices of edges <b>212</b> is a subset of vertices <b>210</b>.</p><p id="p-0037" num="0036">To perform traversing <b>209</b>, computer system <b>202</b> first receives model <b>206</b> of three-dimensional solid <b>208</b> and determines at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b> for model <b>206</b>. Computer system <b>202</b> then performs traversing <b>209</b> of at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b> of model <b>206</b> to determine corresponding adjacent vertices <b>216</b>, adjacent edges <b>218</b>, or adjacent faces <b>220</b> for the at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b> such that each of corresponding adjacent vertices <b>216</b>, corresponding adjacent edges <b>218</b>, or corresponding adjacent faces <b>220</b> are counted exactly once in traversing <b>209</b>.</p><p id="p-0038" num="0037">As one example of logical mechanism <b>213</b> for traversing <b>209</b>, to perform traversal V of E of model <b>206</b>, the following logic is used E-&#x3e;Eu-&#x3e;Vu-&#x3e;V and OtherEu-&#x3e;Vu-&#x3e;V unless both are equal. This logic uses edges <b>212</b>, edge uses <b>238</b>, vertices <b>210</b>, and vertex uses <b>240</b>. An edge use in edge uses <b>238</b> is a two manifold use of an edge, and corresponds to a pair of incident faces with respect to that edge. A vertex use in vertex uses <b>240</b> is a two manifold use of a vertex.</p><p id="p-0039" num="0038">Model <b>206</b> has any desirable quantity of vertices in vertices <b>210</b>. For discussion purposes, a limited quantity of vertices are depicted in vertices <b>210</b>. For example, vertex <b>232</b> is one of vertices <b>210</b> of model <b>206</b>. During traversing <b>209</b> of model <b>206</b>, all edges of edges <b>212</b> associated with vertex <b>232</b> and all faces of faces <b>214</b> associated with vertex <b>232</b> will be returned only once.</p><p id="p-0040" num="0039">In one illustrative example, vertex <b>232</b> is connected to second vertex <b>226</b> by edge <b>234</b>. In this illustrative example, E of V for vertex <b>232</b> would include edge <b>234</b>. In this illustrative example, V of E for edge <b>234</b> would include vertex <b>232</b> and second vertex <b>226</b>.</p><p id="p-0041" num="0040">In some illustrative examples, face <b>236</b> and second face <b>230</b> are joined at edge <b>234</b>. In these illustrative examples, F of E for edge <b>234</b> would include face <b>236</b> and second face <b>230</b>.</p><p id="p-0042" num="0041">In some illustrative examples, edge <b>234</b> and second edge <b>228</b> form parts of face <b>236</b>. In these illustrative examples, E of F for face <b>236</b> would include edge <b>234</b> and second edge <b>228</b>.</p><p id="p-0043" num="0042">Computer system <b>202</b> determines geometric property <b>222</b> of model <b>206</b> based on the at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b> of model <b>206</b> and the corresponding adjacent vertices <b>216</b>, adjacent edges <b>218</b>, or adjacent faces <b>220</b> for the at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b>. Geometric properties, such as geometric property <b>222</b>, are mathematical equations that describe where in a three-dimensional space model components are present. Geometric property <b>222</b> can include information about face geometry, edge geometry, vertex geometry, or transformations. For example, three-dimensional coordinates of a vertex, parametric equation of a curve that passes through an edge, a parametric equation of a surface that passes through a face that define the boundary of the set of points of a solid.</p><p id="p-0044" num="0043">Computer system <b>202</b> determines whether model <b>206</b> satisfies design requirement <b>224</b> based on geometric property <b>222</b>. In some illustrative examples, design requirement <b>224</b> comprises one of a relationship between the at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b> of model <b>206</b> and second vertex <b>226</b>, second edge <b>228</b>, or second face <b>230</b> of model <b>206</b> and a relationship between the at least one of vertices <b>210</b>, edges <b>212</b>, and faces <b>214</b> of model <b>206</b> and second model <b>242</b> of second three-dimensional solid <b>244</b>.</p><p id="p-0045" num="0044">Computer system <b>202</b> can be utilized to perform traversing <b>209</b> on any desirable model of solid models <b>204</b>. Computer system <b>202</b> can be utilized to perform analysis and traversing <b>209</b> on a family of models or series of models. For example, computer system <b>202</b> can determine second geometric property <b>246</b> of second model <b>242</b> of second three-dimensional solid <b>244</b>. Computer system <b>202</b> determines a relationship between geometric property <b>222</b> and second geometric property <b>246</b>.</p><p id="p-0046" num="0045">Computer system <b>202</b> is used to create designs, analyze designs, and change designs for products. Computer system <b>202</b> is capable of analyzing solid models <b>204</b> and modifying solid models <b>204</b> as necessary to meet design principles or design requirements, such as design requirement <b>224</b>. In some illustrative examples, responsive to a determination that model <b>206</b> of three-dimensional solid <b>208</b> does not satisfy design requirement <b>224</b>, computer system <b>202</b> modifies model <b>206</b> to generate modified model <b>248</b> that satisfies design requirement <b>224</b>. By computer system <b>202</b> modifying model <b>206</b>, at least one of operator time and operator cost is reduced.</p><p id="p-0047" num="0046">In computer system <b>202</b> using logical mechanism <b>213</b>, the results of traversing <b>209</b> are deterministic <b>250</b> and persistent <b>252</b>. Deterministic is used in the sense of a deterministic algorithm. When traversing <b>209</b> is deterministic <b>250</b>, a same query will result in the same result in the same order. Additionally, traversal results do not change if multiple traversals are interleaved. For example, traversal results do not change a traversal of edges of a face to determine proximity can be performed concurrently with a traversal of the same edges of the same face to determine adjacency to another face. Using logical mechanism <b>213</b>, traversing <b>209</b> is reentrant <b>254</b>, allowing multiple simultaneous traversals over a same model.</p><p id="p-0048" num="0047">In some illustrative examples, using logical mechanism <b>213</b> results in traversal data <b>256</b> not being stored in geometric data structures. By not storing traversal data <b>256</b>, computing resources are reduced for traversing <b>209</b> in contrast to analysis provided by commercially available CAD programs.</p><p id="p-0049" num="0048">By utilizing logical mechanism <b>213</b>, traversing <b>209</b> is robust <b>258</b> during dynamic modification <b>260</b> of model <b>206</b>, such that the method of traversing <b>209</b> is tolerant of additions, modifications, and removals of model elements during dynamic modification <b>260</b> to model <b>206</b>. When traversing <b>209</b> is robust <b>258</b>, modifications to a solid model, such as model <b>206</b>, will have minimal or no effect on the success of the traversal. For example, when traversing <b>209</b> is robust <b>258</b>, the addition or modification of an element is done in a way that avoids an infinite loop in the traversal, and the removal of an element will not cause the traversal to fail.</p><p id="p-0050" num="0049">Implementation of logical mechanism <b>213</b> in program code <b>211</b> on computer system <b>202</b> transforms computer system <b>202</b> to logical reasoning system <b>262</b>. Logical reasoning system <b>262</b> is capable of designing solid models <b>204</b> that meet design requirement <b>224</b>. Logical reasoning system <b>262</b> is capable of analyzing solid models <b>204</b> to determine whether solid models <b>204</b> meet design requirements, such as design requirement <b>224</b>.</p><p id="p-0051" num="0050">Logical reasoning system <b>262</b> reduces the cost associated with designing products. Logical reasoning system <b>262</b> provides for the production of designs within at least one of a desirable cost or a desirable schedule. Logical reasoning system <b>262</b> can result in less error than designing by hand or migrating designs between software and systems. Logical reasoning system <b>262</b> allows for closing development business cases. The automated reasoning capabilities of Logical reasoning system <b>262</b> provides the capability for designing complex systems more quickly than with conventional methods and systems.</p><p id="p-0052" num="0051">Turning now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, an illustration of a solid model is depicted in accordance with an illustrative embodiment. Solid model <b>300</b> is a physical implementation of model <b>206</b>. Solid model <b>300</b> is a manifold solid. A manifold solid is a solid where every place on the surface is two-dimensional. In this illustrative example, solid model <b>300</b> comprises a tetrahedron. Solid model <b>300</b> has vertices <b>301</b>, edges <b>303</b>, and faces <b>305</b>.</p><p id="p-0053" num="0052">Vertices <b>301</b> are all of the vertices of solid model <b>300</b> and are described as V of S. Vertices <b>301</b> include vertex <b>302</b>, vertex <b>304</b>, vertex <b>306</b>, and vertex <b>308</b>. Edges <b>303</b> are all edges of solid model <b>300</b> and are described as E of S. Edges <b>303</b> include edge <b>310</b>, edge <b>312</b>, edge <b>314</b>, edge <b>317</b>, edge <b>318</b>, and edge <b>322</b>. Faces <b>305</b> are all of the faces of solid model <b>300</b> and are described as F of S. Faces <b>305</b> include face <b>316</b>, face <b>320</b>, face <b>324</b>, and face <b>326</b>.</p><p id="p-0054" num="0053">Solid model <b>300</b> can be traversed using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Logical mechanism <b>213</b> includes first=dataelement.find_first_x( ); next=first.find_next_x( ) or next=first.find_next_x(dataelement). This is the underlying mechanism for implementing a backtracking search without carrying around an iterator or any additional state.</p><p id="p-0055" num="0054">Vertices <b>301</b> include vertex <b>302</b>, vertex <b>304</b>, vertex <b>306</b>, and vertex <b>308</b>. Edge <b>310</b> terminates at vertex <b>302</b> and vertex <b>304</b>. Edge <b>312</b> terminates at vertex <b>302</b> and vertex <b>308</b>. Edge <b>314</b> terminates at vertex <b>304</b> and vertex <b>308</b>. Face <b>316</b> is bordered by edge <b>310</b>, edge <b>312</b>, and edge <b>314</b>.</p><p id="p-0056" num="0055">In topological adjacencies, vertex <b>302</b> and vertex <b>304</b> may be described as V of E for edge <b>310</b>. In topological adjacencies, edge <b>310</b>, edge <b>312</b>, and edge <b>317</b> are described as E of V for vertex <b>302</b>. In topological adjacencies, edge <b>310</b>, edge <b>314</b>, and edge <b>318</b> are described as E of V for vertex <b>304</b>.</p><p id="p-0057" num="0056">Edge <b>317</b> terminates at vertex <b>302</b> and vertex <b>306</b>. Edge <b>318</b> terminates at vertex <b>304</b> and vertex <b>306</b>. Face <b>320</b> is bordered by edge <b>310</b>, edge <b>317</b>, and edge <b>318</b>.</p><p id="p-0058" num="0057">In topological adjacencies, vertex <b>302</b> and vertex <b>306</b> may be described as V of E for edge <b>317</b>. In topological adjacencies, edge <b>317</b>, edge <b>318</b>, and edge <b>322</b> are described as E of V for vertex <b>306</b>.</p><p id="p-0059" num="0058">Edge <b>322</b> terminates at vertex <b>306</b> and vertex <b>308</b>. Face <b>324</b> is bordered by edge <b>312</b>, edge <b>317</b>, and edge <b>322</b>. Face <b>326</b> is bordered by edge <b>314</b>, edge <b>318</b>, and edge <b>322</b>.</p><p id="p-0060" num="0059">In topological adjacencies, vertex <b>302</b> and vertex <b>308</b> may be described as V of E for edge <b>312</b>. In topological adjacencies, edge <b>312</b>, edge <b>314</b>, and edge <b>322</b> are described as E of V for vertex <b>308</b>.</p><p id="p-0061" num="0060">To perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, vertices of each edge (V of E) are traversed. To perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: first return E-&#x3e;Eu-&#x3e;Vu-&#x3e;V, and then return E-&#x3e;Eu-&#x3e;OtherEu-&#x3e;Vu-&#x3e;V, except in the non-manifold case where the edge has the same vertex at both ends and therefore the condition E-&#x3e;Eu-&#x3e;Vu-&#x3e;V==E-&#x3e;Eu-&#x3e;OtherEu-&#x3e;Vu-&#x3e;V is satisfied. An example of this non-manifold case is illustrated by edge <b>526</b> and vertex <b>534</b> in FIG. <b>5</b>. Traversal method E.find_first_vertex( ) returns the first vertex. The V.find_next_vertex(E) method resumes the traversal and returns the second vertex.</p><p id="p-0062" num="0061">Performing vertex traversals using this method correctly accounts for non-manifold edges that loop onto themselves. An edge that loops onto itself is an edge has the same vertex at both ends.</p><p id="p-0063" num="0062">An edge use, denoted Eu, is a two manifold use of an edge, and corresponds to a pair of incident faces with respect to that edge. Any edge on a two manifold surface will have a single pair of incident faces, thus a single edge use. In this illustrative example, each edge of edges <b>303</b> has a single edge use. In contrast, at least one edge of edges <b>403</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref> will have multiple edge uses.</p><p id="p-0064" num="0063">A vertex use, denoted Vu, is a two manifold use of a vertex. This is a use of a vertex with respect to a shell. Any vertex on a two manifold surface will have a single vertex use. In this illustrative example, each vertex of edges <b>303</b> has a single edge use. In contrast, at least one edge of edges <b>403</b> in <figref idref="DRAWINGS">FIG. <b>4</b></figref> will have multiple edge uses.</p><p id="p-0065" num="0064">In topological adjacencies, vertex <b>302</b>, vertex <b>304</b>, and vertex <b>308</b> are described as V of F for face <b>316</b>. In topological adjacencies, face <b>316</b>, face <b>320</b>, and face <b>324</b> are described as F of V for vertex <b>302</b>. In topological adjacencies, face <b>316</b>, face <b>320</b>, and face <b>326</b> are described as F of V for vertex <b>304</b>. In topological adjacencies, face <b>320</b>, face <b>324</b>, and face <b>326</b> are described as F of V for vertex <b>306</b>. In topological adjacencies, face <b>316</b>, face <b>324</b>, and face <b>326</b> are described as F of V for vertex <b>308</b>.</p><p id="p-0066" num="0065">In topological adjacencies, vertex <b>302</b>, vertex <b>304</b>, and vertex <b>306</b> are described as V of F for face <b>320</b>. In topological adjacencies, vertex <b>302</b>, vertex <b>306</b>, and vertex <b>308</b> are described as V of F for face <b>324</b>. In topological adjacencies, vertex <b>304</b>, vertex <b>306</b>, and vertex <b>308</b> are described as V of F for face <b>326</b>.</p><p id="p-0067" num="0066">To perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, vertices of each face (V of F) are traversed. To perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: F-&#x3e;L-&#x3e;Eu-&#x3e;Vu-&#x3e;V.isFirstUseOfVertexOnFace(F) and F-&#x3e;L-&#x3e;Vu-&#x3e;V.isFirstUseOfVertexOnFace(F). In this logic, F is a face, L is a face loop that is a boundary on a face, Eu is an edge use, Vu is a vertex use, and V is a vertex. The traversal method loops through each face loop of the face, and each edge use of the face loop, each vertex use of the edge use, each vertex use of the face loop, and each vertex of the vertex use. Performing this F.find_first_vertex( ) method returns a first use of V on F. The V.find_next_vertex(F) resets the loop invariants and resumes the traversal, returning the next and subsequent vertices of V on F. The isFirstUseOfVertexOnFace method is determined by satisfying the condition V-&#x3e;Vu-&#x3e;Eu-&#x3e;L-&#x3e;F==F or V-&#x3e;Vu-&#x3e;L-&#x3e;F==F.</p><p id="p-0068" num="0067">The method returns topological elements that satisfy the logical conditions as it walks through. This method does not double count elements. Unlike conventional programs, this method does not require deletion of duplicate instances of elements from a spreadsheet or other data storage.</p><p id="p-0069" num="0068">To perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, vertices of each solid (V of S) are traversed. To perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: S-&#x3e;Sh-&#x3e;Shu-&#x3e;F-&#x3e;L-&#x3e;Eu-&#x3e;Vu-&#x3e;V if Vu==Vu-&#x3e;V-&#x3e;Vu. In this logic, S is a solid, Sh is a shell, and Shu is a shell use. The solid includes all edges, vertices, and faces. The traversal method loops through each shell of the solid, each shell use of the shell, each face of the shell use, each face loop of the face, each edge use of the face loop, each vertex use of the edge use, each vertex use of the face loop, and each vertex of the vertex use. Performing the S.find_first_vertex( ) method returns a first use of V on S. The V.find_next_vertex(S) resets the loop invariants and resumes the traversal, returning the next and subsequent vertices of V on S.</p><p id="p-0070" num="0069">A shell use, denoted Shu, is a two manifold piece of a connected surface. Shell uses of a surface can be separated by splitting apart the vertices and edges with nonmanifold neighborhoods. A shell use is a partition of the faces, edge uses, and vertex uses of a shell (surface) such that one can traverse from any face, edge use, or vertex use of that partition to any other by their adjacencies without crossing any faces, edge uses, or vertex uses of any other partition. A two manifold shell will have a single shell use, and a two manifold solid will have an equal number of shells and shell uses. A nonmanifold solid may have more shell uses than shells.</p><p id="p-0071" num="0070">The method will only return the first use of V, i.e., when the condition Vu==Vu-&#x3e;V-&#x3e;Vu is satisfied. By performing this method, the returned vertices are unique on a solid for both manifold and non-manifold solids.</p><p id="p-0072" num="0071">To perform edge traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, edges of each vertex (E of V) are traversed. To perform edge traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: loop through the vertex uses of the vertex V-&#x3e;Vu and loop through edge uses adjacent to the vertex use Vu-&#x3e;Eu and Eu-&#x3e;CcwEu-&#x3e;OtherEu, returning the edge E of the edge use Eu that satisfies Eu.isFirstUseOfEdgeByVertex(V). Performing the V.find_first_edge( ) method returns a first use of E on V. The E.find_next_edge(V) resets the loop invariants and resumes the traversal, returning the next and subsequent edges E on V. During this method, the computer system &#x201c;walks&#x201d; around the edges of the vertex uses Vu and edge uses Eu of the vertex V. This logic is designed to return only the first use of the edge by the vertex, which provides correct results with both manifold and non-manifold cases. The isFirstUseOfEdgeByVertex method checks if logical condition Eu==Eu-&#x3e;E.findFirstUseOfEdgeByVertex(V) is satisfied, and where methods findFirstUseOfEdgeByVertex loops through the edge uses of the edge E-&#x3e;Eu and Eu-&#x3e;OtherEu returning the first edge use adjacent to the given vertex V and the logical condition Eu-&#x3e;Vu-&#x3e;V==V is satisfied.</p><p id="p-0073" num="0072">As used herein, Ccw stands for counterclockwise. CcwEu describes a counterclockwise edge use that is a relationship between the elements in graph connectivity.</p><p id="p-0074" num="0073">To perform edge traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, edges of each face (E of F) are traversed. To perform edge traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: F-&#x3e;L-&#x3e;Eu-&#x3e;E. The traversal method loops through each face loop of the face, each edge use of the face loop L-&#x3e;Eu and the edge of the edge use Eu-&#x3e;E. Performing the F.find_first_edge( ) method returns a first use of E on F. The E.find_next_edge(F) resets the loop invariants and resumes the traversal, returning the next and subsequent edges of E on F. The method is designed to return only the first use of the edge by the face by satisfying the logical condition Eu-&#x3e;E-&#x3e;findFirstEhUseOfEdgeByFace(F)==Eu. If this condition is satisfied, the traversal returns the edge of the edge use. The findFirstEhUseOfEdgeByFace method is determined by looping through the edge uses of the edge and returning the first edge use that satisfies the condition Eu-&#x3e;L-&#x3e;F==F. This method avoids double counting of non-manifold edges such as edge <b>526</b> of face <b>506</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0075" num="0074">In topological adjacencies, edge <b>310</b>, edge <b>312</b>, and edge <b>314</b> are described as E of F for face <b>316</b>. In topological adjacencies, edge <b>310</b>, edge <b>317</b>, and edge <b>318</b> are described as E of F for face <b>320</b>. In topological adjacencies, edge <b>312</b>, edge <b>317</b>, and edge <b>322</b> are described as E of F for face <b>324</b>. In topological adjacencies, edge <b>314</b>, edge <b>318</b>, and edge <b>322</b> are described as E of F for face <b>326</b>.</p><p id="p-0076" num="0075">To perform edge traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, edges of the solid (E of S) are traversed. To perform edge traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: S-Sh-Shu-&#x3e;F-&#x3e;L-&#x3e;Eu-&#x3e;E. The traversal method loops through each shell of the solid, each shell use of the shell, each face of the shell use, each face loop of the face, each edge use of the face loop, and the edge of the edge use. Performing the S.find_first_edge( ) method returns a first use of E on S. The E.find_next_edge(S) resets the loop invariants and resumes the traversal, returning the next and subsequent edges of E on S. The method is designed to return only the first use of the edge by the solid by satisfying the logical condition Eu=Eu-&#x3e;E-&#x3e;Eu.</p><p id="p-0077" num="0076">To perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, faces of each vertex (F of V) are traversed. To perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: V-&#x3e;Vu-&#x3e;Eu-&#x3e;L-&#x3e;F, Eu-&#x3e;OtherEu-&#x3e;CcwEu-&#x3e;L-&#x3e;F, and V-&#x3e;Vu-&#x3e;L-&#x3e;F. Performing the V.find_first_face( ) method returns a first use of F of V. The F.find_next_face(V) resets the loop invariants and resumes the traversal, returning the next and subsequent faces F of V. Loop through the vertex uses of the vertex V-&#x3e;Vu, the edge uses of the vertex uses, the face of the face loops of the edge uses, and face of the face loops of the vertex uses (where a face loop contains only one vertex use). Break the loop and return the face of the edge use when the logical condition Eu.isFirstUseOfFaceOnVertex( ) is satisfied, or when Vu-&#x3e;L.isFirstUseOfFaceOVertex( ) is satisfied. The Eu.isFirstUseOfFaceOnVertex( ) is satisfied when logical condition Eu==Eu-&#x3e;L-&#x3e;F.findFirstEdgeUseOfFaceOnVertex(Eu-&#x3e;Vu-&#x3e;V) is satisfied, where F.findFirstEdgeUseOfFaceOnVertex(V) returns the first edge use of the edge use's face adjacent to the given vertex.</p><p id="p-0078" num="0077">To traverse the faces that are adjacent to a single vertex v1 of a tetrahedron, the logic is f1=v1.find_first_face( ); f2=f1.find_next_face(v1); f3=f2.find_next_face(v1); f4=f3.find_next_face(v1)==null. In this illustrative example, if v1 is vertex <b>302</b>, for f1=v1.find_first_face( ), f1=face <b>316</b>. In this illustrative example, if v1 is vertex <b>302</b>, for f2=f1.find_next_face(v1), f2=face <b>320</b>. In this illustrative example, if v1 is vertex <b>302</b>, for f3=f2.find_next_face(v1), f3=face <b>324</b>. In this illustrative example, if v1 is vertex <b>302</b>, f4=f3.find_next_face(v1)==null.</p><p id="p-0079" num="0078">An alternate formulation is f1=v1.find_first(Face); f2=f1.find_next(v1) or f1=find_first(v1, Face); f2=find_next(f1, v1). The result of this traversal has each face adjacent to the vertex returned once and only once&#x2014;even in the presence of degenerate geometries, bridge edges, non-manifold conditions, etc.</p><p id="p-0080" num="0079">Similarly, it is desired to traverse the faces of edges, edges of faces, vertices of faces, edges of vertices, and vertices of edges as described above and below. Similar logic statements including &#x201c;find_first&#x201d; and &#x201c;find_next&#x201d; can be written for each of traversing the faces of edges, edges of faces, vertices of faces, edges of vertices, and vertices of edges.</p><p id="p-0081" num="0080">To perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, faces of each edge (F of E) are traversed. Performing the E.find_first_face( ) method returns a first use of F of E. The F.find_next_face(E) resets the loop invariants and resumes the traversal, returning the next and subsequent faces F of E. The method loops through the edge uses of the edge, the face loops of the edge uses, and returns the faces of the face loops that in the traversal order, specifically E-&#x3e;Eu-&#x3e;L-&#x3e;F to find the first face. For subsequent faces, find the first edge use of the edge E on the face F, then traverse to the next edge use Eu-&#x3e;OtherEu of the edge, check if the logical condition Eu==E.findFirstEdgeUseOfEdgeByFace(Eu-&#x3e;L-&#x3e;F) is satisfied, and if it is return Eu-&#x3e;L-&#x3e;F. If the logical condition continue looping through the remainder of the edge uses of the edge. The method E.findFirstEdgeUseOfEdgeByFace(F) loops through the edge uses of the edge and returns the first edge use adjacent to the given face F.</p><p id="p-0082" num="0081">In topological adjacencies, face <b>316</b> and face <b>320</b> are described as F of E for edge <b>310</b>. In topological adjacencies, face <b>316</b> and face <b>324</b> are described as F of E for edge <b>312</b>. In topological adjacencies, face <b>316</b> and face <b>326</b> are described as F of E for edge <b>314</b>. In topological adjacencies, face <b>320</b> and face <b>324</b> are described as F of E for edge <b>317</b>. In topological adjacencies, face <b>320</b> and face <b>326</b> are described as F of E for edge <b>318</b>. In topological adjacencies, face <b>324</b> and face <b>326</b> are described as F of E for edge <b>322</b>.</p><p id="p-0083" num="0082">To perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, faces of the solid (F of S) are traversed. To perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: S-Sh-Shu-&#x3e;F, F-&#x3e;nextF, F-&#x3e;Shu-&#x3e;nextShu-&#x3e;F, F-&#x3e;Shu-&#x3e;Sh-&#x3e;nextSh-&#x3e;Shu-&#x3e;F, etc. The traversal method loops through each shell of the solid, each shell use of the shell, and each face of the shell use. Performing the S.find_first_face( ) method returns a first use of F on S. The F.find_next_face(S) resets the loop invariants and resumes the traversal, returning the next and subsequent faces F on S. In this method, the returned faces are unique on a solid.</p><p id="p-0084" num="0083">Turning now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, an illustration of a solid model is depicted in accordance with an illustrative embodiment. Solid model <b>400</b> is a physical implementation of model <b>206</b>. Solid model <b>400</b> comprises a nonmanifold solid. A nonmanifold solid will have points that are not two-dimensional. For example, points that have two or more portions of the surface that touch at an edge or a vertex. Solid model <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a manifold solid while solid model <b>400</b> is a nonmanifold solid.</p><p id="p-0085" num="0084">Solid model <b>400</b> can be traversed using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Logical mechanism <b>213</b> includes first=dataelement.find_first_x( ); next=first.find_next_x( ) or next=first.find_next_x(dataelement). This is the underlying mechanism for implementing a backtracking search without carrying around an iterator or any additional state.</p><p id="p-0086" num="0085">Solid model <b>400</b> has vertices <b>401</b>, edges <b>403</b>, and faces <b>405</b>. Vertices <b>401</b> include vertex <b>402</b>, vertex <b>404</b>, vertex <b>406</b>, vertex <b>408</b>, vertex <b>410</b>, vertex <b>412</b>, vertex <b>414</b>, vertex <b>416</b>, and vertex <b>418</b>. Edges <b>403</b> include edge <b>420</b>, edge <b>422</b>, edge <b>424</b>, edge <b>426</b>, edge <b>428</b>, edge <b>430</b>, edge <b>432</b>, edge <b>434</b>, edge <b>436</b>, edge <b>438</b>, edge <b>440</b>, edge <b>442</b>, edge <b>444</b>, edge <b>446</b>, edge <b>448</b>, edge <b>449</b>, and edge <b>450</b>. Faces <b>405</b> include face <b>451</b>, face <b>452</b>, face <b>454</b>, face <b>456</b>, face <b>458</b>, face <b>460</b>, face <b>462</b>, face <b>464</b>, face <b>466</b>, face <b>468</b>, face <b>470</b>, and face <b>472</b>.</p><p id="p-0087" num="0086">Although the geometry of solid model <b>400</b> is more complicated than that of solid model <b>300</b>, the same logical analysis is performed on solid model <b>400</b> to perform traversals of faces of vertices, vertices of faces, faces of edges, edges of faces, edges of vertices, and vertices of edges. Using each of the traversals, the method determines the vertices, edges, and faces of the solid, solid model <b>400</b>.</p><p id="p-0088" num="0087">For example, in performing a traversal of the edges of vertices, edge <b>428</b>, edge <b>430</b>, edge <b>422</b>, edge <b>434</b>, edge <b>432</b>, and edge <b>440</b> are all E of V for vertex <b>408</b>. Vertex <b>408</b> is a non-manifold condition. As another example, in performing traversal of the faces of edges, face <b>460</b>, face <b>464</b>, face <b>466</b>, and face <b>472</b> are each F of E for non-manifold edge, edge <b>442</b>.</p><p id="p-0089" num="0088">The traversals supporting the logical mechanism described above are deterministic and persistent by design. For example, in a query for an edge of vertex <b>412</b>, the (low level) traversal would return the first edge of vertex <b>412</b>, edge <b>432</b>. The query would always return the same first edge, edge <b>432</b>. In the traversal, the next edge of vertex <b>412</b> after <b>432</b> is sought. Again the next returned edge it would always be the same next edge. The traversal repeatedly queries for the next edge, getting edge <b>432</b>, edge <b>438</b>, edge <b>442</b>, edge <b>449</b>, and edge <b>446</b>, and then no more. Performing this traversal, returns the same result in the same order, deterministically, when the same query is made.</p><p id="p-0090" num="0089">The logical mechanism uses this first, next traversal in the backtracking search, and could be used to satisfy a design condition. For example, one could search for an edge of vertex <b>412</b> that is adjacent to both face <b>460</b> and face <b>466</b>. Only edge <b>442</b> would satisfy that condition.</p><p id="p-0091" num="0090">Solid model <b>400</b> is a nonmanifold solid and has more vertex uses and edge uses than solid model <b>300</b>. For example, the three nonmanifold vertices of solid model <b>400</b>, vertex <b>408</b>, vertex <b>412</b>, and vertex <b>414</b>, each have two vertex uses. As another example, the nonmanifold edge, edge <b>442</b>, of solid model <b>400</b> has two edge uses.</p><p id="p-0092" num="0091">The nonmanifold solid, solid model <b>400</b>, can be divided into three shell uses. To separate solid model <b>400</b> into shell uses, solid model <b>400</b> would be separated at vertex <b>408</b>, vertex <b>412</b>, and vertex <b>414</b> to form three tetrahedrons.</p><p id="p-0093" num="0092">Turning now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, an illustration of a solid model is depicted in accordance with an illustrative embodiment. Solid model <b>500</b> is a physical implementation of model <b>206</b>. Solid model <b>500</b> comprises a nonmanifold solid. A nonmanifold solid will have points that are not two-dimensional. For example, points that have two or more portions of the surface that touch at an edge or a vertex.</p><p id="p-0094" num="0093">Solid model <b>500</b> can be traversed using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Logical mechanism <b>213</b> includes first=dataelement.find_first_x( ); next=first.find_next_x( ) or next=first.find_next_x(dataelement). This is the underlying mechanism for implementing a backtracking search without carrying around an iterator or any additional state.</p><p id="p-0095" num="0094">Solid model <b>500</b> has vertices, edges, and faces. The faces of solid model <b>500</b> include face <b>502</b>, face <b>504</b>, face <b>506</b>, face <b>508</b>, face <b>510</b>, and a face opposite face <b>504</b> that is not visible in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The edges of solid model <b>500</b> include edge <b>512</b>, edge <b>514</b>, edge <b>516</b>, edge <b>518</b>, edge <b>520</b>, edge <b>522</b>, edge <b>524</b>, edge <b>526</b>, edge <b>528</b>, edge <b>530</b>, and edge <b>532</b>. The vertices of solid model <b>500</b> include vertex <b>534</b>, vertex <b>536</b>, vertex <b>538</b>, vertex <b>540</b>, vertex <b>542</b>, and vertex <b>544</b>.</p><p id="p-0096" num="0095">Although the geometry of solid model <b>500</b> is more complicated than that of solid model <b>300</b>, the same logical analysis is performed on solid model <b>500</b> to perform traversals of faces of vertices, vertices of faces, faces of edges, edges of faces, edges of vertices, and vertices of edges. Using each of the traversals, the method determines the vertices, edges, and faces of the solid, solid model <b>500</b>.</p><p id="p-0097" num="0096">For example, in performing a traversal of the edges of vertices, edge <b>516</b>, edge <b>520</b>, and edge <b>528</b> are all E of V for vertex <b>534</b>. In performing a traversal of the edges of vertices without logical mechanism <b>213</b>, edge <b>516</b> could be returned twice for vertex <b>534</b>. However, to perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: E-&#x3e;Eu-&#x3e;Vu-&#x3e;V and OtherEu-&#x3e;Vu-&#x3e;V unless both are equal. Performing vertex traversals using this method avoids edges that loop onto themselves. By designating &#x201c;unless both are equal,&#x201d; in logical mechanism <b>213</b>, edge <b>516</b> is not counted twice in a traversal of solid model <b>500</b>.</p><p id="p-0098" num="0097">As another example, in performing a traversal of the edges of vertices, edge <b>518</b>, edge <b>524</b>, and edge <b>532</b> are all E of V for vertex <b>540</b>. In performing a traversal of the edges of vertices without logical mechanism <b>213</b>, edge <b>518</b> could be returned twice for vertex <b>540</b>. By designating &#x201c;unless both are equal,&#x201d; in logical mechanism <b>213</b>, edge <b>518</b> is not counted twice in a traversal of solid model <b>500</b>.</p><p id="p-0099" num="0098">To perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, faces of each edge (F of E) are traversed. In performing a traversal of the faces of edges, face <b>506</b>, face <b>508</b>, and face <b>510</b> are all F of E for edge <b>526</b>. In performing a traversal of the faces of edges without logical mechanism <b>213</b>, face <b>506</b> could be returned twice for edge <b>526</b>. However, to perform face traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, face <b>506</b> is not counted twice in a traversal of solid model <b>500</b>.</p><p id="p-0100" num="0099">Solid model <b>500</b> has one shell and one shell use. To separate solid model <b>500</b> into shell uses, solid model <b>500</b> would be separated at edge <b>526</b>.</p><p id="p-0101" num="0100">Turning now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, an illustration of a solid model is depicted in accordance with an illustrative embodiment. Solid model <b>600</b> is a physical implementation of model <b>206</b>. Solid model <b>600</b> comprises a nonmanifold solid.</p><p id="p-0102" num="0101">Solid model <b>600</b> can be traversed using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Logical mechanism <b>213</b> includes first=dataelement.find_first_x( ); next=first.find_next_x( ) or next=first.find_next_x(dataelement). This is the underlying mechanism for implementing a backtracking search without carrying around an iterator or any additional state.</p><p id="p-0103" num="0102">Solid model <b>600</b> has vertices, edges, and faces. The faces of solid model <b>600</b> include face <b>602</b>, face <b>604</b>, face <b>606</b>, face <b>608</b>, face <b>610</b>, and a face opposite face <b>604</b> that is not visible in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The edges of solid model <b>600</b> include edge <b>612</b>, edge <b>614</b>, edge <b>616</b>, edge <b>618</b>, edge <b>620</b>, edge <b>622</b>, edge <b>624</b>, edge <b>626</b>, edge <b>628</b>, edge <b>630</b>, edge <b>632</b>, and edge <b>634</b>. The vertices of solid model <b>600</b> include vertex <b>636</b>, vertex <b>638</b>, vertex <b>640</b>, vertex <b>642</b>, vertex <b>644</b>, vertex <b>646</b>, and vertex <b>648</b>.</p><p id="p-0104" num="0103">For example, in performing a traversal of the edges of vertices, edge <b>616</b>, edge <b>620</b>, and edge <b>628</b> are all E of V for vertex <b>636</b>. In performing a traversal of the edges of vertices without logical mechanism <b>213</b>, edge <b>616</b> could be returned twice for vertex <b>636</b>. However, to perform vertex traversals using logical mechanism <b>213</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the following method is performed: E-&#x3e;Eu-&#x3e;Vu-&#x3e;V and OtherEu-&#x3e;Vu-&#x3e;V unless both are equal. Performing vertex traversals using this method avoids edges that loop onto themselves. By designating &#x201c;unless both are equal,&#x201d; in logical mechanism <b>213</b>, edge <b>616</b> is not counted twice in a traversal of solid model <b>600</b>.</p><p id="p-0105" num="0104">Solid model <b>600</b> has one shell and one shell use. To separate solid model <b>600</b> into shell uses, solid model <b>600</b> would be separated at vertex <b>636</b>.</p><p id="p-0106" num="0105">Turning now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, an illustration of a flowchart of a computer-implemented method of designing solid models is depicted in accordance with an illustrative embodiment. Method <b>700</b> can be used to design or analyze a component of aircraft <b>100</b>. Method <b>700</b> can be implemented in computer system <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Method <b>700</b> can be used in designing solid model <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Method <b>700</b> can be used in designing solid model <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Method <b>700</b> can be used in designing solid model <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Method <b>700</b> can be used in designing solid model <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0107" num="0106">Method <b>700</b> receives, by the computer system, a model of a three-dimensional solid (operation <b>702</b>). The three-dimensional solid can be a manifold solid or a nonmanifold solid. The type of product represented by the three-dimensional solid is not limited in this illustrative example.</p><p id="p-0108" num="0107">Method <b>700</b> determines, by the computer system, at least one of vertices, edges, and faces for the model (operation <b>704</b>). Method <b>700</b> traverses, by the computer system, the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid (operation <b>706</b>). Afterward, method <b>700</b> terminates.</p><p id="p-0109" num="0108">In some illustrative examples, method <b>700</b> determines, by the computer system, a geometric property of the model based on the at least one of the vertices, the edges, and the faces of the model and the corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces (operation <b>708</b>). A geometric property includes mathematical equations that describe where in a three-dimensional space components of the model are present.</p><p id="p-0110" num="0109">In some illustrative examples, method <b>700</b> determines, by the computer system, whether the model satisfies a design requirement based on the geometric property (operation <b>710</b>). In some illustrative examples, the design requirement comprises one of a relationship between the at least one of the vertices, the edges, and the faces of the model and a second vertex, a second edge, or a second face of the model and a relationship between the at least one of the vertices, the edges, and the faces of the model and a second model of a second three dimensional solid (operation <b>712</b>).</p><p id="p-0111" num="0110">In some illustrative examples, the geometric property comprises a first geometric property and method <b>700</b> determines, by the computer system, a second geometric property of a second model of a second three-dimensional solid (operation <b>714</b>). In some illustrative examples, method <b>700</b> determines, by the computer system, a relationship between the first geometric property and the second geometric property (operation <b>716</b>).</p><p id="p-0112" num="0111">In some illustrative examples, method <b>700</b>, responsive to a determination that the model of the three-dimensional solid does not satisfy the design requirement, modifies, by the computer system, the model to generate a modified model that satisfies the design requirement (operation <b>718</b>).</p><p id="p-0113" num="0112">In method <b>700</b>, the results of the traversing are deterministic and persistent (operation <b>720</b>). In method <b>700</b>, the traversing is reentrant allowing multiple simultaneous traversals over a same model (operation <b>722</b>).</p><p id="p-0114" num="0113">In some illustrative examples, traversal data is not stored in geometric data structures (operation <b>724</b>). By not saving traversal data in the geometric data structures, the illustrative examples greatly reduce the computing requirements in contrast to other geometric analysis. By not saving the traversal data in the geometric data structures, the illustrative examples may have reduced computing requirements in contrast to other CAD programs. In method <b>700</b>, the traversing is robust during dynamic modification of the model, such that the method of traversal is tolerant of additions, modifications, and removals of model elements during dynamic modifications to the model (operation <b>726</b>).</p><p id="p-0115" num="0114">Turning now to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, an illustration of a flowchart of a computer-implemented method of designing solid models is depicted in accordance with an illustrative embodiment. Method <b>800</b> can be used to design or analyze a component of aircraft <b>100</b>. Method <b>800</b> can be implemented in computer system <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Method <b>800</b> can be used in designing solid model <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Method <b>800</b> can be used in designing solid model <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Method <b>800</b> can be used in designing solid model <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Method <b>800</b> can be used in designing solid model <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0116" num="0115">Method <b>800</b> receive, by the computer system, a model of a three dimensional solid (operation <b>802</b>). Method <b>800</b> receives, by the computer system, a design requirement (operation <b>804</b>). Method <b>800</b> determines, by the computer system, at least one of vertices, edges, and faces to be traversed based on the design requirement (operation <b>806</b>). Depending upon the design requirement, different ones of the vertices, edges, or faces are used to determine whether the model satisfies the design requirement. Accordingly, depending upon the design requirement, different ones of the vertices, edges, or faces are desirably traversed to determine if the design requirement is satisfied. Not all of the vertices, edges, and faces will always be traversed for each design requirement.</p><p id="p-0117" num="0116">Method <b>800</b> traverses, by the computer system, the at least one of vertices, edges, and faces of the model based on the design requirement to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid (operation <b>808</b>). By traversing based on the design requirement, the at least one of vertices, edges, and faces of the model are traversed in an order that is desirable for the design requirement. Afterwards, method <b>800</b> terminates.</p><p id="p-0118" num="0117">In some illustrative examples, method <b>800</b> further comprises determining, by the computer system, a geometric property of the model based on the at least one of the vertices, the edges, and the faces of the model and the corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces (operation <b>810</b>). In some illustrative examples, method <b>800</b> determines, by the computer system, whether the model satisfies the design requirement based on the geometric property (operation <b>812</b>).</p><p id="p-0119" num="0118">In some illustrative examples, the design requirement comprises one of a relationship between the at least one of the vertices, the edges, and the faces of the model and a second vertex, a second edge, or a second face of the model and a relationship between the at least one of the vertices, the edges, and the faces of the model and a second model of a second three dimensional solid (operation <b>814</b>).</p><p id="p-0120" num="0119">In some illustrative examples, the geometric property comprises a first geometric property and method <b>800</b> further comprises determining, by the computer system, a second geometric property of a second model of a second three dimensional solid (operation <b>816</b>), and determining, by the computer system, a relationship between the first geometric property and the second geometric property (operation <b>818</b>). In some illustrative examples, method <b>800</b>, responsive to a determination that the model of the three dimensional solid does not satisfy the design requirement, modifies, by the computer system, the model to generate a modified model that satisfies the design requirement (operation <b>820</b>).</p><p id="p-0121" num="0120">As used herein, the phrase &#x201c;at least one of,&#x201d; when used with a list of items, means different combinations of one or more of the listed items may be used and only one of each item in the list may be needed. For example, &#x201c;at least one of item A, item B, or item C&#x201d; may include, without limitation, item A, item A and item B, or item B. This example also may include item A, item B, and item C or item B and item C. Of course, any combinations of these items may be present. In other examples, &#x201c;at least one of&#x201d; may be, for example, without limitation, two of item A; one of item B; and ten of item C; four of item B and seven of item C; or other suitable combinations. The item may be a particular object, thing, or a category. In other words, at least one of means any combination items and number of items may be used from the list but not all of the items in the list are required.</p><p id="p-0122" num="0121">As used herein, &#x201c;a number of,&#x201d; when used with reference to items, means one or more items.</p><p id="p-0123" num="0122">The flowcharts and block diagrams in the different depicted embodiments illustrate the architecture, functionality, and operation of some possible implementations of apparatuses and methods in an illustrative embodiment. In this regard, each block in the flowcharts or block diagrams may represent at least one of a module, a segment, a function, or a portion of an operation or step.</p><p id="p-0124" num="0123">In some alternative implementations of an illustrative embodiment, the function or functions noted in the blocks may occur out of the order noted in the figures. For example, in some cases, two blocks shown in succession may be executed substantially concurrently, or the blocks may sometimes be performed in the reverse order, depending upon the functionality involved. Also, other blocks may be added in addition to the illustrated blocks in a flowchart or block diagram. Some blocks may be optional. For example, any of operation <b>708</b> through operation <b>726</b> may be optional. As another example, any of operation <b>810</b> through operation <b>820</b> may be optional.</p><p id="p-0125" num="0124">Turning now to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, an illustration of a block diagram of a data processing system is depicted in accordance with an illustrative embodiment. Data processing system <b>900</b> may be used to implement computer system <b>202</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. In this illustrative example, data processing system <b>900</b> includes communications framework <b>902</b>, which provides communications between processor unit <b>904</b>, storage devices <b>906</b>, persistent storage <b>916</b>, communications unit <b>908</b>, input/output unit <b>910</b>, and display <b>912</b>. In this example, communications framework <b>902</b> may take the form of a bus system.</p><p id="p-0126" num="0125">Processor unit <b>904</b> serves to execute instructions for software that may be loaded into one of storage devices <b>906</b>. Processor unit <b>904</b> may be a number of processors, a multi-processor core, or some other type of processor, depending on the particular implementation. In an embodiment, processor unit <b>904</b> comprises one or more conventional general-purpose central processing units (CPUs). In an alternate embodiment, processor unit <b>904</b> comprises one or more graphical processing units (GPUs).</p><p id="p-0127" num="0126">Memory <b>914</b> and persistent storage <b>916</b> are examples of storage devices <b>906</b>. A storage device is any piece of hardware that is capable of storing information, such as, for example, without limitation, at least one of data, program code in functional form, or other suitable information either on a temporary basis, a permanent basis, or both on a temporary basis and a permanent basis. Storage devices <b>906</b> may also be referred to as computer-readable storage devices in these illustrative examples. Memory <b>914</b>, in these examples, may be, for example, a random-access memory or any other suitable volatile or non-volatile storage device. Persistent storage <b>916</b> may take various forms, depending on the particular implementation.</p><p id="p-0128" num="0127">For example, persistent storage <b>916</b> may contain one or more components or devices. For example, persistent storage <b>916</b> may include a hard drive, a flash memory, a rewritable optical disk, a rewritable magnetic tape, or some combination of the above. The media used by persistent storage <b>916</b> also may be removable. For example, a removable hard drive may be used for persistent storage <b>916</b>.</p><p id="p-0129" num="0128">Storage devices <b>906</b> are connected to the bus system. In some illustrative examples, one of storage devices <b>906</b> stores program instructions to perform a method, such as method <b>700</b> or method <b>800</b>. Processor unit <b>904</b> is connected to the bus system. In some illustrative examples, processor unit <b>904</b> executes the program instructions to receive a model of a three dimensional solid; determine at least one of vertices, edges, and faces for the model; and traverse the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traverse.</p><p id="p-0130" num="0129">Communications unit <b>908</b>, in these illustrative examples, provides for communications with other data processing systems or devices. In these illustrative examples, communications unit <b>908</b> is a network interface card.</p><p id="p-0131" num="0130">Input/output unit <b>910</b> allows for input and output of data with other devices that may be connected to data processing system <b>900</b>. For example, input/output unit <b>910</b> may provide a connection for user input through at least one of a keyboard, a mouse, or some other suitable input device. Further, input/output unit <b>910</b> may send output to a printer. Display <b>912</b> provides a mechanism to display information to a user.</p><p id="p-0132" num="0131">Instructions for at least one of the operating system, applications, or programs may be located in storage devices <b>906</b>, which are in communication with processor unit <b>904</b> through communications framework <b>902</b>. The processes of the different embodiments may be performed by processor unit <b>904</b> using computer-implemented instructions, which may be located in a memory, such as memory <b>914</b>.</p><p id="p-0133" num="0132">These instructions are referred to as program code, computer-usable program code, or computer-readable program code that may be read and executed by a processor in processor unit <b>904</b>. The program code in the different embodiments may be embodied on different physical or computer-readable storage media, such as storage devices <b>906</b> including memory <b>914</b> or persistent storage <b>916</b>.</p><p id="p-0134" num="0133">Program code <b>918</b> is located in a functional form on computer-readable media <b>920</b> that is selectively removable and may be loaded onto or transferred to data processing system <b>900</b> for execution by processor unit <b>904</b>. Program code <b>918</b> and computer-readable media <b>920</b> form computer program product <b>922</b> in these illustrative examples. In one example, computer-readable media <b>920</b> may be computer-readable storage media <b>924</b> or computer-readable signal media <b>926</b>.</p><p id="p-0135" num="0134">Further, as used herein, &#x201c;computer-readable media <b>920</b>&#x201d; can be singular or plural. For example, program code <b>918</b> can be located in computer-readable media <b>920</b> in the form of a single storage device or system. In another example, program code <b>918</b> can be located in computer-readable media <b>920</b> that is distributed in multiple data processing systems. In other words, some instructions in program code <b>918</b> can be located in one data processing system while other instructions in in program code <b>918</b> can be located in one data processing system. For example, a portion of program code <b>918</b> can be located in computer-readable media <b>920</b> in a server computer while another portion of program code <b>918</b> can be located in computer-readable media <b>920</b> located in a set of client computers.</p><p id="p-0136" num="0135">The different components illustrated for data processing system <b>900</b> are not meant to provide architectural limitations to the manner in which different embodiments can be implemented. In some illustrative examples, one or more of the components may be incorporated in or otherwise form a portion of, another component. For example, memory <b>914</b>, or portions thereof, can be incorporated in processor unit <b>904</b> in some illustrative examples. The different illustrative embodiments can be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system <b>900</b>. Other components shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> can be varied from the illustrative examples shown. The different embodiments can be implemented using any hardware device or system capable of running program code <b>918</b>.</p><p id="p-0137" num="0136">In these illustrative examples, computer-readable storage media <b>924</b> is a physical or tangible storage device used to store program code <b>918</b> rather than a medium that propagates or transmits program code <b>918</b>. Alternatively, program code <b>918</b> may be transferred to data processing system <b>900</b> using computer-readable signal media <b>926</b>.</p><p id="p-0138" num="0137">Computer-readable signal media <b>926</b> may be, for example, a propagated data signal containing program code <b>918</b>. For example, computer-readable signal media <b>926</b> may be at least one of an electromagnetic signal, an optical signal, or any other suitable type of signal. These signals may be transmitted over at least one of communications links, such as wireless communications links, optical fiber cable, coaxial cable, a wire, or any other suitable type of communications link.</p><p id="p-0139" num="0138">The different components illustrated for data processing system <b>900</b> are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system <b>900</b>. Other components shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of running program code <b>918</b>.</p><p id="p-0140" num="0139">Illustrative embodiments of the present disclosure may be described in the context of aircraft manufacturing and service method <b>1000</b> as shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref> and aircraft <b>1100</b> as shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. Turning first to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, an illustration of an aircraft manufacturing and service method is depicted in accordance with an illustrative embodiment. During pre-production, aircraft manufacturing and service method <b>1000</b> may include specification and design <b>1002</b> of aircraft <b>1100</b> in <figref idref="DRAWINGS">FIG. <b>11</b></figref> and material procurement <b>1004</b>.</p><p id="p-0141" num="0140">During production, component and subassembly manufacturing <b>1006</b> and system integration <b>1008</b> of aircraft <b>1100</b> takes place. Thereafter, aircraft <b>1100</b> may go through certification and delivery <b>1010</b> in order to be placed in service <b>1012</b>. While in service <b>1012</b> by a customer, aircraft <b>1100</b> is scheduled for routine maintenance and service <b>1014</b>, which may include modification, reconfiguration, refurbishment, or other maintenance and service.</p><p id="p-0142" num="0141">Each of the processes of aircraft manufacturing and service method <b>1000</b> may be performed or carried out by a system integrator, a third party, and/or an operator. In these examples, the operator may be a customer. For the purposes of this description, a system integrator may include, without limitation, any number of aircraft manufacturers and major-system subcontractors; a third party may include, without limitation, any number of vendors, subcontractors, and suppliers; and an operator may be an airline, a leasing company, a military entity, a service organization, and so on.</p><p id="p-0143" num="0142">With reference now to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, an illustration of an aircraft is depicted in which an illustrative embodiment may be implemented. In this example, aircraft <b>1100</b> is produced by aircraft manufacturing and service method <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> and may include airframe <b>1102</b> with plurality of systems <b>1104</b> and interior <b>1106</b>. Examples of systems <b>1104</b> include one or more of propulsion system <b>1108</b>, electrical system <b>1110</b>, hydraulic system <b>1112</b>, and environmental system <b>1114</b>. Any number of other systems may be included.</p><p id="p-0144" num="0143">Apparatuses and methods embodied herein may be employed during at least one of the stages of aircraft manufacturing and service method <b>1000</b>. One or more illustrative embodiments may be manufactured or used during at least one of component and subassembly manufacturing <b>1006</b>, system integration <b>1008</b>, in service <b>1012</b>, or maintenance and service <b>1014</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0145" num="0144">Method <b>700</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref> or method <b>800</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref> can be performed during specification and design <b>1002</b> of method <b>1000</b>. Logical reasoning system <b>262</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be used during specification and design <b>1002</b> of method <b>1000</b>. Model <b>206</b> analyzed using logical reasoning system <b>262</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be used to manufacture a component in component and subassembly manufacturing <b>1006</b> of method <b>1000</b>. Components designed or analyzed using logical reasoning system <b>262</b> can be operated during in service <b>1012</b> of method <b>1000</b>. Products designed or analyzed using logical reasoning system <b>262</b> or using method <b>700</b> or method <b>800</b> can be a portion of airframe <b>1102</b>, interior <b>1106</b>, or any of systems <b>1104</b> of aircraft <b>1100</b>.</p><p id="p-0146" num="0145">Thus, the illustrative examples provide a method, computer system, and computer program product that can be used in the development and analysis of solid models. The illustrative examples provide the methods and computational foundation for a logical reasoning system that operates on the geometric and topological representations of solid models. These illustrative examples enable automated reasoning that incorporates engineering design knowledge and design rules for developing large-scale, integrated product designs. These illustrative examples in turn enable reductions in non-recurring and recurring engineering labor during product development, improved design quality and reduced development costs.</p><p id="p-0147" num="0146">The illustrative examples provide the framework and methods for: 1. logical reasoning about solids and geometric models for product design; 2. declarative expression of design conditions (both positive and negative); 3. logical expressions as a foundation for geometric reasoning; 4. logical expressions as a foundation for feature extraction; 5. logical expressions as a foundation for expressing conditions in applying design rules; and 6. a foundation for shape grammars operating on (CAD) geometric models and assemblies.</p><p id="p-0148" num="0147">The illustrative examples provide logical reasoning over a geometric representation of both manifold and non-manifold solids. Note that manifold solids are not closed under Boolean operations. Providing logical reasoning over both manifold and non-manifold solids provides an improvement over conventional CAD programs that are limited in geometries and implementations.</p><p id="p-0149" num="0148">The illustrative examples provide logical reasoning from any of the topological elements to all its adjacent elements, e.g., models, solids, faces, edges, vertices, and including the adjacencies of non-manifold edges to all adjacent faces, and non-manifold vertices to all adjacent edges. The illustrative examples provide logical reasoning about of the geometric elements and their geometric values.</p><p id="p-0150" num="0149">The illustrative examples described herein satisfy the requirements of logical traversal of solids for automated reasoning. For example, in the illustrative examples, the results are deterministic and persistent as the results are consistent from traversal to traversal. In the illustrative examples, traversals are reentrant, allowing multiple traversals over the same structure (but not necessarily multi-threaded). In the illustrative examples, the traversal data need not be stored in geometric data structures. In the illustrative examples, the traversals are robust in the context of dynamic modification of geometric models. For example, during dynamic modification, topological elements are added in a way that they impact a prior (possibly reentrant) traversal. If allowing dynamic modification of objects, objects are added to beginning of traversal lists.</p><p id="p-0151" num="0150">The illustrative examples allow for development of large-scale, complex products using a CAD program. Using the illustrative examples allows for the production of feasible designs, closing the development business case, reducing the extensive non-recurring engineering costs, and doing so with the goal of breaking the development cost curve. The automated reasoning capabilities of these illustrative examples add significant capability for designing these complex systems more quickly and with less error.</p><p id="p-0152" num="0151">The description of the different illustrative embodiments has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Further, different illustrative embodiments may provide different features as compared to other illustrative embodiments. The embodiment or embodiments selected are chosen and described in order to best explain the principles of the embodiments, the practical application, and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method in a computer system for designing solid models that are manifold or non-manifold solids, comprising:<claim-text>receiving, by the computer system, a model of a three dimensional solid;</claim-text><claim-text>determining, by the computer system, at least one of vertices, edges, and faces for the model; and</claim-text><claim-text>traversing, by the computer system, the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining, by the computer system, a geometric property of the model based on the at least one of the vertices, the edges, and the faces of the model and the corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>determining, by the computer system, whether the model satisfies a design requirement based on the geometric property.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the design requirement comprises one of a relationship between the at least one of the vertices, the edges, and the faces of the model and a second vertex, a second edge, or a second face of the model and a relationship between the at least one of the vertices, the edges, and the faces of the model and a second model of a second three dimensional solid.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the geometric property comprises a first geometric property and further comprising:<claim-text>determining, by the computer system, a second geometric property of a second model of a second three dimensional solid; and</claim-text><claim-text>determining, by the computer system, a relationship between the first geometric property and the second geometric property.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising:<claim-text>responsive to a determination that the model of the three dimensional solid does not satisfy the design requirement, modifying, by the computer system, the model to generate a modified model that satisfies the design requirement.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein results of the traversing are deterministic and persistent.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the traversing is reentrant allowing multiple simultaneous traversals over a same model.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein traversal data is not stored in geometric data structures.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the traversing is robust during dynamic modification of the model, such that the method of traversal is tolerant of additions, modifications, and removals of model elements during dynamic modifications to the model.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A computer system for designing solid models that are manifold or non-manifold solids, the computer system comprising:<claim-text>a bus system;</claim-text><claim-text>a storage device connected to the bus system, wherein the storage device stores program instructions; and</claim-text><claim-text>a processor connected to the bus system, wherein the processor executes the program instructions to:<claim-text>receive a model of a three dimensional solid;</claim-text><claim-text>determine at least one of vertices, edges, and faces for the model; and</claim-text><claim-text>traverse the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traverse, wherein the program instructions are configured to traverse the at least one of vertices, edges, and faces of the model independent of whether the model is a manifold solid or a non-manifold solid.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the program instructions further comprise program instructions to:<claim-text>determine a geometric property of the model based on the at least one of the vertices, the edges, and the faces of the model and the corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the program instructions further comprise program instructions to:<claim-text>determine whether the model satisfies a design requirement based on the geometric property.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the design requirement comprises one of a relationship between the at least one of the vertices, the edges, and the faces of the model and a second vertex, a second edge, or a second face of the model and a relationship between the at least one of the vertices, the edges, and the faces of the model and a second model of a second three dimensional solid.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the geometric property comprises a first geometric property and wherein the program instructions further comprise program instructions to:<claim-text>determine a second geometric property of a second model of a second three dimensional solid; and</claim-text><claim-text>determining a relationship between the first geometric property and the second geometric property.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the program instructions further comprise program instructions to:<claim-text>responsive to a determination that the model of the three dimensional solid does not satisfy the design requirement, modify the model to generate a modified model that satisfies the design requirement.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein results of the traverse are deterministic and persistent.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the program instructions to the at least one of the vertices, the edges, and the faces of the model is reentrant allowing multiple traversals over a same model.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein traversal data is not stored in geometric data structures.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the program instructions to traverse is robust during dynamic modification of the model.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A computer program product comprising:<claim-text>a computer-readable storage medium including instructions for organizing data sets, the instructions comprising:</claim-text><claim-text>first program code for receiving a model of a three dimensional solid;</claim-text><claim-text>second program code for determining at least one of vertices, edges, and faces for the model; and</claim-text><claim-text>third program code for traversing the at least one of vertices, edges, and faces of the model to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A method in a computer system for designing solid models that are manifold or non-manifold solids, comprising:<claim-text>receiving, by the computer system, a model of a three dimensional solid;</claim-text><claim-text>receiving, by the computer system, a design requirement;</claim-text><claim-text>determining, by the computer system, at least one of vertices, edges, and faces to be traversed based on the design requirement; and</claim-text><claim-text>traversing, by the computer system, the at least one of vertices, edges, and faces of the model based on the design requirement to determine corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces such that each of corresponding adjacent vertices, corresponding adjacent edges, or corresponding adjacent faces are counted exactly once in the traversing, wherein the traversing is configured to be performed on the model independent of whether the model is a manifold solid or a non-manifold solid.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, further comprising:<claim-text>determining, by the computer system, a geometric property of the model based on the at least one of the vertices, the edges, and the faces of the model and the corresponding adjacent vertices, adjacent edges, or adjacent faces for the at least one of the vertices, the edges, and the faces; and</claim-text><claim-text>determining, by the computer system, whether the model satisfies the design requirement based on the geometric property.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the design requirement comprises one of a relationship between the at least one of the vertices, the edges, and the faces of the model and a second vertex, a second edge, or a second face of the model and a relationship between the at least one of the vertices, the edges, and the faces of the model and a second model of a second three dimensional solid.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the geometric property comprises a first geometric property and further comprising:<claim-text>determining, by the computer system, a second geometric property of a second model of a second three dimensional solid; and</claim-text><claim-text>determining, by the computer system, a relationship between the first geometric property and the second geometric property.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, further comprising:<claim-text>responsive to a determination that the model of the three dimensional solid does not satisfy the design requirement, modifying, by the computer system, the model to generate a modified model that satisfies the design requirement.</claim-text></claim-text></claim></claims></us-patent-application>