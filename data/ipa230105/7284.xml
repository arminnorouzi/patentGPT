<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007285A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007285</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17862696</doc-number><date>20220712</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>1</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>7</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>85</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>15</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>T</subclass><main-group>5</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>1</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20170101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>7</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>85</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>15</main-group><subgroup>503</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>5</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>T</subclass><main-group>2200</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Lossless Compression for Multisample Render Targets Alongside Fragment Compression</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17227993</doc-number><date>20210412</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11399194</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17862696</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16661522</doc-number><date>20191023</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11006138</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17227993</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16228252</doc-number><date>20181220</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10499073</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16661522</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15873379</doc-number><date>20180117</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10212443</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16228252</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15477034</doc-number><date>20170401</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>9912957</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>15873379</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Surti</last-name><first-name>Prasoonkumar</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Appu</last-name><first-name>Abhishek R.</first-name><address><city>El Dorado Hills</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Norris</last-name><first-name>Michael J.</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Liskay</last-name><first-name>Eric G.</first-name><address><city>Folsom</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Intel Corporation</orgname><role>02</role><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Described herein is a data processing system having a multisample antialiasing compressor coupled to a texture unit and shader execution array. In one embodiment, the data processing system includes a memory device to store a multisample render target, the multisample render target to store color data for a set of sample locations of each pixel in a set of pixels; and general-purpose graphics processor comprising a multisample antialiasing compressor to apply multisample antialiasing compression to color data generated for the set of sample locations of a first pixel in the set of pixels and a multisample render cache to store color data generated for the set of sample locations of the first pixel in the set of pixels, wherein color data evicted from the multisample render cache is to be stored to the multisample render target.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="206.93mm" wi="152.91mm" file="US20230007285A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="228.35mm" wi="156.21mm" file="US20230007285A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="220.13mm" wi="144.78mm" file="US20230007285A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="199.39mm" wi="138.94mm" file="US20230007285A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="196.26mm" wi="157.90mm" file="US20230007285A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="229.62mm" wi="161.46mm" file="US20230007285A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="204.30mm" wi="163.24mm" file="US20230007285A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="213.02mm" wi="163.15mm" file="US20230007285A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="228.94mm" wi="146.05mm" orientation="landscape" file="US20230007285A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="225.38mm" wi="164.51mm" orientation="landscape" file="US20230007285A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="226.82mm" wi="163.07mm" orientation="landscape" file="US20230007285A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="218.69mm" wi="156.72mm" file="US20230007285A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="194.06mm" wi="161.29mm" orientation="landscape" file="US20230007285A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="215.82mm" wi="140.38mm" orientation="landscape" file="US20230007285A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="227.16mm" wi="158.83mm" file="US20230007285A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="213.61mm" wi="124.38mm" file="US20230007285A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="195.16mm" wi="140.29mm" file="US20230007285A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="223.77mm" wi="154.94mm" file="US20230007285A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="192.11mm" wi="152.82mm" file="US20230007285A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="227.41mm" wi="153.50mm" orientation="landscape" file="US20230007285A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="222.50mm" wi="162.81mm" file="US20230007285A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="152.82mm" wi="116.67mm" file="US20230007285A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="175.26mm" wi="128.52mm" file="US20230007285A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="201.51mm" wi="145.63mm" file="US20230007285A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="224.87mm" wi="162.05mm" file="US20230007285A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="204.89mm" wi="154.77mm" orientation="landscape" file="US20230007285A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="217.00mm" wi="155.96mm" orientation="landscape" file="US20230007285A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="225.30mm" wi="155.79mm" orientation="landscape" file="US20230007285A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="215.31mm" wi="155.96mm" orientation="landscape" file="US20230007285A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="194.56mm" wi="141.14mm" orientation="landscape" file="US20230007285A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="216.24mm" wi="161.21mm" orientation="landscape" file="US20230007285A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="217.34mm" wi="165.61mm" file="US20230007285A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="221.32mm" wi="157.40mm" file="US20230007285A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="224.03mm" wi="163.91mm" file="US20230007285A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="221.40mm" wi="148.76mm" orientation="landscape" file="US20230007285A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="200.41mm" wi="136.23mm" file="US20230007285A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="183.64mm" wi="137.08mm" file="US20230007285A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="200.32mm" wi="132.93mm" file="US20230007285A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE</heading><p id="p-0002" num="0001">This application claims priority to U.S. patent application Ser. No. 17/227,993, filed Apr. 12, 2021, which is a continuation of U.S. patent application Ser. No. 16/661,522, filed Oct. 23, 2019, which is a continuation of Ser. No. 16/228,252, filed Dec. 20, 2018, and issued on Dec. 3, 2019 as U.S. Pat. No. 10,499,073, which is a continuation of U.S. patent application Ser. No. 15/873,379, filed Jan. 17, 2018, and issued as U.S. Pat. No. 10,212,443 on Feb. 19, 2019, which is a continuation of U.S. patent application Ser. No. 15/477,034 filed Apr. 1, 2017, issued as U.S. Pat. No. 9,912,957 on Mar. 6, 2018, all of which are hereby incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF INVENTION</heading><p id="p-0003" num="0002">This invention relates generally to data processing and more particularly to data processing via a general-purpose graphics processing unit.</p><heading id="h-0003" level="1">BACKGROUND OF THE DESCRIPTION</heading><p id="p-0004" num="0003">Current parallel graphics data processing includes systems and methods developed to perform specific operations on graphics data such as, for example, linear interpolation, tessellation, rasterization, texture mapping, depth testing, etc. Traditionally, graphics processors used fixed function computational units to process graphics data; however, more recently, portions of graphics processors have been made programmable, enabling such processors to support a wider variety of operations for processing vertex and fragment data.</p><p id="p-0005" num="0004">To further increase performance, graphics processors typically implement processing techniques such as pipelining that attempt to process, in parallel, as much graphics data as possible throughout the different parts of the graphics pipeline. Parallel graphics processors with single instruction, multiple thread (SIMT) architectures are designed to maximize the amount of parallel processing in the graphics pipeline. In an SIMT architecture, groups of parallel threads attempt to execute program instructions synchronously together as often as possible to increase processing efficiency. A general overview of software and hardware for SIMT architectures can be found in Shane Cook, <i>CUDA Programming</i>, Chapter 3, pages 37-51 (2013) and/or Nicholas Wilt, CUDA Handbook, <i>A Comprehensive Guide to GPU Programming</i>, Sections 2.6.2 to 3.1.2 (June 2013).</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005">The features of the present invention are described reference to various embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a computer system configured to implement one or more aspects of the embodiments described herein;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>A-<b>2</b>D</figref> illustrate parallel processor components, according to an embodiment;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b>A-<b>3</b>B</figref> are block diagrams of graphics multiprocessors, according to embodiments;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b>A-<b>4</b>F</figref> illustrate an exemplary architecture in which a plurality of GPUs is communicatively coupled to a plurality of multi-core processors;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a conceptual diagram of a graphics processing pipeline, according to an embodiment;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of a GPGPU, according to an embodiment;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an exemplary memory layout for a multisample render target;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates MSAA compression, according to an embodiment;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an illustration of fragment/pixel processing unit, according to an embodiment;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates progressive MSAA plane allocation, according to an embodiment;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a system to implement lossless compression of data within a multisample render target, according to an embodiment;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a compression control surface, according to an embodiment;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flow diagram illustrating a process for progressive multisample antialiasing, according to an embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow diagram illustrating a process for lossless compression of multisample render target data alongside fragment compression, according to an embodiment;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a block diagram of a processing system, according to an embodiment;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a block diagram of a processor according to an embodiment;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram of a graphics processor, according to an embodiment;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram of a graphics processing engine of a graphics processor in accordance with some embodiments;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram of a graphics processor provided by an additional embodiment;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates thread execution logic including an array of processing elements employed in some embodiments;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram illustrating graphics processor instruction formats according to some embodiments;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a block diagram of a graphics processor according to another embodiment.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>23</b>A-<b>23</b>B</figref> illustrate a graphics processor command format and command sequence, according to some embodiments;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates exemplary graphics software architecture for a data processing system according to some embodiments;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a block diagram illustrating an IP core development system, according to an embodiment;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>26</b></figref> is a block diagram illustrating an exemplary system on a chip integrated circuit, according to an embodiment;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>27</b></figref> is a block diagram illustrating an additional exemplary graphics processor, according to an embodiment; and</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a block diagram illustrating an additional exemplary graphics processor of a system on a chip integrated circuit, according to an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0035" num="0034">In the following description, numerous specific details are set forth to provide a more thorough understanding. However, it will be apparent to one of skill in the art that the embodiments described herein may be practiced without one or more of these specific details. In other instances, well-known features have not been described to avoid obscuring the details of the present embodiments.</p><p id="p-0036" num="0035">In some embodiments, a graphics processing unit (GPU) is communicatively coupled to host/processor cores to accelerate graphics operations, machine-learning operations, pattern analysis operations, and various general-purpose GPU (GPGPU) functions. The GPU may be communicatively coupled to the host processor/cores over a bus or another interconnect (e.g., a high-speed interconnect such as PCIe or NVLink). In other embodiments, the GPU may be integrated on the same package or chip as the cores and communicatively coupled to the cores over an internal processor bus/interconnect (i.e., internal to the package or chip). Regardless of the manner in which the GPU is connected, the processor cores may allocate work to the GPU in the form of sequences of commands/instructions contained in a work descriptor. The GPU then uses dedicated circuitry/logic for efficiently processing these commands/instructions.</p><p id="p-0037" num="0036">In general, graphics rendering may generate an image or images from model data using a wide range of computer implemented techniques. In some graphics rendering implementations an image may be rendered using rasterization by sampling different functions such as, for example, a visibility function and/or a shading function. In general, the samples for a visibility function may be termed visibility samples and the samples for a shading function may be termed shading samples. When implementing techniques such as multi-sampling anti-aliasing (MSAA), multiple visibility samples may be used per. Rendering to a multisample render target that stores multiple samples per pixels is more bandwidth intensive than using a simple sample. To restrain bandwidth consumption, various forms of compression can be used. When lossless color compression techniques are implemented for a multisample render target, storing the samples in an interleaved manner can increase the efficiency of such techniques in comparison to planar techniques of storing sample data.</p><heading id="h-0006" level="2">System Overview</heading><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a computing system <b>100</b> configured to implement one or more aspects of the embodiments described herein. The computing system <b>100</b> includes a processing subsystem <b>101</b> having one or more processor(s) <b>102</b> and a system memory <b>104</b> communicating via an interconnection path that may include a memory hub <b>105</b>. The memory hub <b>105</b> may be a separate component within a chipset component or may be integrated within the one or more processor(s) <b>102</b>. The memory hub <b>105</b> couples with an I/O subsystem <b>111</b> via a communication link <b>106</b>. The I/O subsystem <b>111</b> includes an I/O hub <b>107</b> that can enable the computing system <b>100</b> to receive input from one or more input device(s) <b>108</b>. Additionally, the I/O hub <b>107</b> can enable a display controller, which may be included in the one or more processor(s) <b>102</b>, to provide outputs to one or more display device(s) <b>110</b>A. In one embodiment the one or more display device(s) <b>110</b>A coupled with the I/O hub <b>107</b> can include a local, internal, or embedded display device.</p><p id="p-0039" num="0038">In one embodiment the processing subsystem <b>101</b> includes one or more parallel processor(s) <b>112</b> coupled to memory hub <b>105</b> via a bus or other communication link <b>113</b>. The communication link <b>113</b> may be one of any number of standards based communication link technologies or protocols, such as, but not limited to PCI Express, or may be a vendor specific communications interface or communications fabric. In one embodiment the one or more parallel processor(s) <b>112</b> form a computationally focused parallel or vector processing system that can include a large number of processing cores and/or processing clusters, such as a many integrated core (MIC) processor. In one embodiment the one or more parallel processor(s) <b>112</b> form a graphics processing subsystem that can output pixels to one of the one or more display device(s) <b>110</b>A coupled via the I/O hub <b>107</b>. The one or more parallel processor(s) <b>112</b> can also include a display controller and display interface (not shown) to enable a direct connection to one or more display device(s) <b>110</b>B.</p><p id="p-0040" num="0039">Within the I/O subsystem <b>111</b>, a system storage unit <b>114</b> can connect to the I/O hub <b>107</b> to provide a storage mechanism for the computing system <b>100</b>. An I/O switch <b>116</b> can be used to provide an interface mechanism to enable connections between the I/O hub <b>107</b> and other components, such as a network adapter <b>118</b> and/or wireless network adapter <b>119</b> that may be integrated into the platform, and various other devices that can be added via one or more add-in device(s) <b>120</b>. The network adapter <b>118</b> can be an Ethernet adapter or another wired network adapter. The wireless network adapter <b>119</b> can include one or more of a Wi-Fi, Bluetooth, near field communication (NFC), or other network device that includes one or more wireless radios.</p><p id="p-0041" num="0040">The computing system <b>100</b> can include other components not explicitly shown, including USB or other port connections, optical storage drives, video capture devices, and the like, may also be connected to the I/O hub <b>107</b>. Communication paths interconnecting the various components in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be implemented using any suitable protocols, such as PCI (Peripheral Component Interconnect) based protocols (e.g., PCI-Express), or any other bus or point-to-point communication interfaces and/or protocol(s), such as the NV-Link high-speed interconnect, or interconnect protocols known in the art.</p><p id="p-0042" num="0041">In one embodiment, the one or more parallel processor(s) <b>112</b> incorporate circuitry optimized for graphics and video processing, including, for example, video output circuitry, and constitutes a graphics processing unit (GPU). In another embodiment, the one or more parallel processor(s) <b>112</b> incorporate circuitry optimized for general-purpose processing, while preserving the underlying computational architecture, described in greater detail herein. In yet another embodiment, components of the computing system <b>100</b> may be integrated with one or more other system elements on a single integrated circuit. For example, the one or more parallel processor(s) <b>112</b>, memory hub <b>105</b>, processor(s) <b>102</b>, and I/O hub <b>107</b> can be integrated into a system on chip (SoC) integrated circuit. Alternatively, the components of the computing system <b>100</b> can be integrated into a single package to form a system in package (SIP) configuration. In one embodiment at least a portion of the components of the computing system <b>100</b> can be integrated into a multi-chip module (MCM), which can be interconnected with other multi-chip modules into a modular computing system.</p><p id="p-0043" num="0042">It will be appreciated that the computing system <b>100</b> shown herein is illustrative and that variations and modifications are possible. The connection topology, including the number and arrangement of bridges, the number of processor(s) <b>102</b>, and the number of parallel processor(s) <b>112</b>, may be modified as desired. For instance, in some embodiments, system memory <b>104</b> is connected to the processor(s) <b>102</b> directly rather than through a bridge, while other devices communicate with system memory <b>104</b> via the memory hub <b>105</b> and the processor(s) <b>102</b>. In other alternative topologies, the parallel processor(s) <b>112</b> are connected to the I/O hub <b>107</b> or directly to one of the one or more processor(s) <b>102</b>, rather than to the memory hub <b>105</b>. In other embodiments, the I/O hub <b>107</b> and memory hub <b>105</b> may be integrated into a single chip. Some embodiments may include two or more sets of processor(s) <b>102</b> attached via multiple sockets, which can couple with two or more instances of the parallel processor(s) <b>112</b>.</p><p id="p-0044" num="0043">Some of the particular components shown herein are optional and may not be included in all implementations of the computing system <b>100</b>. For example, any number of add-in cards or peripherals may be supported, or some components may be eliminated. Furthermore, some architectures may use different terminology for components similar to those illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the memory hub <b>105</b> may be referred to as a Northbridge in some architectures, while the I/O hub <b>107</b> may be referred to as a Southbridge.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates a parallel processor <b>200</b>, according to an embodiment. The various components of the parallel processor <b>200</b> may be implemented using one or more integrated circuit devices, such as programmable processors, application specific integrated circuits (ASICs), or field programmable gate arrays (FPGA). The illustrated parallel processor <b>200</b> is a variant of the one or more parallel processor(s) <b>112</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to an embodiment.</p><p id="p-0046" num="0045">In one embodiment the parallel processor <b>200</b> includes a parallel processing unit <b>202</b>. The parallel processing unit includes an I/O unit <b>204</b> that enables communication with other devices, including other instances of the parallel processing unit <b>202</b>. The I/O unit <b>204</b> may be directly connected to other devices. In one embodiment the I/O unit <b>204</b> connects with other devices via the use of a hub or switch interface, such as memory hub <b>105</b>. The connections between the memory hub <b>105</b> and the I/O unit <b>204</b> form a communication link <b>113</b>. Within the parallel processing unit <b>202</b>, the I/O unit <b>204</b> connects with a host interface <b>206</b> and a memory crossbar <b>216</b>, where the host interface <b>206</b> receives commands directed to performing processing operations and the memory crossbar <b>216</b> receives commands directed to performing memory operations.</p><p id="p-0047" num="0046">When the host interface <b>206</b> receives a command buffer via the I/O unit <b>204</b>, the host interface <b>206</b> can direct work operations to perform those commands to a front end <b>208</b>. In one embodiment the front end <b>208</b> couples with a scheduler <b>210</b>, which is configured to distribute commands or other work items to a processing cluster array <b>212</b>. In one embodiment the scheduler <b>210</b> ensures that the processing cluster array <b>212</b> is properly configured and in a valid state before tasks are distributed to the processing clusters of the processing cluster array <b>212</b>.</p><p id="p-0048" num="0047">The processing cluster array <b>212</b> can include up to &#x201c;N&#x201d; processing clusters (e.g., cluster <b>214</b>A, cluster <b>214</b>B, through cluster <b>214</b>N). Each cluster <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> can execute a large number of concurrent threads. The scheduler <b>210</b> can allocate work to the clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> using various scheduling and/or work distribution algorithms, which may vary depending on the workload arising for each type of program or computation. The scheduling can be handled dynamically by the scheduler <b>210</b>, or can be assisted in part by compiler logic during compilation of program logic configured for execution by the processing cluster array <b>212</b>. In one embodiment, different clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> can be allocated for processing different types of programs or for performing different types of computations.</p><p id="p-0049" num="0048">The processing cluster array <b>212</b> can be configured to perform various types of parallel processing operations. In one embodiment the processing cluster array <b>212</b> is configured to perform general-purpose parallel compute operations. For example, the processing cluster array <b>212</b> can include logic to execute processing tasks including filtering of video and/or audio data, performing modeling operations, including physics operations, and performing data transformations.</p><p id="p-0050" num="0049">In one embodiment the processing cluster array <b>212</b> is configured to perform parallel graphics processing operations. In embodiments in which the parallel processor <b>200</b> is configured to perform graphics processing operations, the processing cluster array <b>212</b> can include additional logic to support the execution of such graphics processing operations, including, but not limited to texture sampling logic to perform texture operations, as well as tessellation logic and other vertex processing logic. Additionally, the processing cluster array <b>212</b> can be configured to execute graphics processing related shader programs such as, but not limited to vertex shaders, tessellation shaders, geometry shaders, and pixel shaders. The parallel processing unit <b>202</b> can transfer data from system memory via the I/O unit <b>204</b> for processing. During processing the transferred data can be stored to on-chip memory (e.g., parallel processor memory <b>222</b>) during processing, then written back to system memory.</p><p id="p-0051" num="0050">In one embodiment, when the parallel processing unit <b>202</b> is used to perform graphics processing, the scheduler <b>210</b> can be configured to divide the processing workload into approximately equal sized tasks, to better enable distribution of the graphics processing operations to multiple clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b>. In some embodiments, portions of the processing cluster array <b>212</b> can be configured to perform different types of processing. For example a first portion may be configured to perform vertex shading and topology generation, a second portion may be configured to perform tessellation and geometry shading, and a third portion may be configured to perform pixel shading or other screen space operations, to produce a rendered image for display. Intermediate data produced by one or more of the clusters <b>214</b>A-<b>214</b>N may be stored in buffers to allow the intermediate data to be transmitted between clusters <b>214</b>A-<b>214</b>N for further processing.</p><p id="p-0052" num="0051">During operation, the processing cluster array <b>212</b> can receive processing tasks to be executed via the scheduler <b>210</b>, which receives commands defining processing tasks from front end <b>208</b>. For graphics processing operations, processing tasks can include indices of data to be processed, e.g., surface (patch) data, primitive data, vertex data, and/or pixel data, as well as state parameters and commands defining how the data is to be processed (e.g., what program is to be executed). The scheduler <b>210</b> may be configured to fetch the indices corresponding to the tasks or may receive the indices from the front end <b>208</b>. The front end <b>208</b> can be configured to ensure the processing cluster array <b>212</b> is configured to a valid state before the workload specified by incoming command buffers (e.g., batch-buffers, push buffers, etc.) is initiated.</p><p id="p-0053" num="0052">Each of the one or more instances of the parallel processing unit <b>202</b> can couple with parallel processor memory <b>222</b>. The parallel processor memory <b>222</b> can be accessed via the memory crossbar <b>216</b>, which can receive memory requests from the processing cluster array <b>212</b> as well as the I/O unit <b>204</b>. The memory crossbar <b>216</b> can access the parallel processor memory <b>222</b> via a memory interface <b>218</b>. The memory interface <b>218</b> can include multiple partition units (e.g., partition unit <b>220</b>A, partition unit <b>220</b>B, through partition unit <b>220</b>N) that can each couple to a portion (e.g., memory unit) of parallel processor memory <b>222</b>. In one implementation the number of partition units <b>220</b>A-<b>220</b>N is configured to be equal to the number of memory units, such that a first partition unit <b>220</b>A has a corresponding first memory unit <b>224</b>A, a second partition unit <b>220</b>B has a corresponding memory unit <b>224</b>B, and an Nth partition unit <b>220</b>N has a corresponding Nth memory unit <b>224</b>N. In other embodiments, the number of partition units <b>220</b>A-<b>220</b>N may not be equal to the number of memory devices.</p><p id="p-0054" num="0053">In various embodiments, the memory units <b>224</b>A-<b>224</b>N can include various types of memory devices, including dynamic random access memory (DRAM) or graphics random access memory, such as synchronous graphics random access memory (SGRAM), including graphics double data rate (GDDR) memory. In one embodiment, the memory units <b>224</b>A-<b>224</b>N may also include 3D stacked memory, including but not limited to high bandwidth memory (HBM). Persons skilled in the art will appreciate that the specific implementation of the memory units <b>224</b>A-<b>224</b>N can vary, and can be selected from one of various conventional designs. Render targets, such as frame buffers or texture maps may be stored across the memory units <b>224</b>A-<b>224</b>N, allowing partition units <b>220</b>A-<b>220</b>N to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processor memory <b>222</b>. In some embodiments, a local instance of the parallel processor memory <b>222</b> may be excluded in favor of a unified memory design that utilizes system memory in conjunction with local cache memory.</p><p id="p-0055" num="0054">In one embodiment, any one of the clusters <b>214</b>A-<b>214</b>N of the processing cluster array <b>212</b> can process data that will be written to any of the memory units <b>224</b>A-<b>224</b>N within parallel processor memory <b>222</b>. The memory crossbar <b>216</b> can be configured to transfer the output of each cluster <b>214</b>A-<b>214</b>N to any partition unit <b>220</b>A-<b>220</b>N or to another cluster <b>214</b>A-<b>214</b>N, which can perform additional processing operations on the output. Each cluster <b>214</b>A-<b>214</b>N can communicate with the memory interface <b>218</b> through the memory crossbar <b>216</b> to read from or write to various external memory devices. In one embodiment the memory crossbar <b>216</b> has a connection to the memory interface <b>218</b> to communicate with the I/O unit <b>204</b>, as well as a connection to a local instance of the parallel processor memory <b>222</b>, enabling the processing units within the different processing clusters <b>214</b>A-<b>214</b>N to communicate with system memory or other memory that is not local to the parallel processing unit <b>202</b>. In one embodiment the memory crossbar <b>216</b> can use virtual channels to separate traffic streams between the clusters <b>214</b>A-<b>214</b>N and the partition units <b>220</b>A-<b>220</b>N.</p><p id="p-0056" num="0055">While a single instance of the parallel processing unit <b>202</b> is illustrated within the parallel processor <b>200</b>, any number of instances of the parallel processing unit <b>202</b> can be included. For example, multiple instances of the parallel processing unit <b>202</b> can be provided on a single add-in card, or multiple add-in cards can be interconnected. The different instances of the parallel processing unit <b>202</b> can be configured to inter-operate even if the different instances have different numbers of processing cores, different amounts of local parallel processor memory, and/or other configuration differences. For example and in one embodiment, some instances of the parallel processing unit <b>202</b> can include higher precision floating-point units relative to other instances. Systems incorporating one or more instances of the parallel processing unit <b>202</b> or the parallel processor <b>200</b> can be implemented in a variety of configurations and form factors, including but not limited to desktop, laptop, or handheld personal computers, servers, workstations, game consoles, and/or embedded systems.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram of a partition unit <b>220</b>, according to an embodiment. In one embodiment the partition unit <b>220</b> is an instance of one of the partition units <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. As illustrated, the partition unit <b>220</b> includes an L2 cache <b>221</b>, a frame buffer interface <b>225</b>, and a ROP <b>226</b> (raster operations unit). The L2 cache <b>221</b> is a read/write cache that is configured to perform load and store operations received from the memory crossbar <b>216</b> and ROP <b>226</b>. Read misses and urgent write-back requests are output by L2 cache <b>221</b> to frame buffer interface <b>225</b> for processing. Updates can also be sent to the frame buffer via the frame buffer interface <b>225</b> for processing. In one embodiment the frame buffer interface <b>225</b> interfaces with one of the memory units in parallel processor memory, such as the memory units <b>224</b>A-<b>224</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> (e.g., within parallel processor memory <b>222</b>).</p><p id="p-0058" num="0057">In graphics applications, the ROP <b>226</b> is a processing unit that performs raster operations such as stencil, z test, blending, and the like. The ROP <b>226</b> then outputs processed graphics data that is stored in graphics memory. In some embodiments the ROP <b>226</b> includes compression logic to compress depth or color data that is written to memory and decompress depth or color data that is read from memory. The compression logic can be lossless compression logic that makes use of one or more of multiple compression algorithms. The type of compression that is performed by the ROP <b>226</b> can vary based on the statistical characteristics of the data to be compressed. For example, in one embodiment, delta color compression is performed on depth and color data on a per-tile basis.</p><p id="p-0059" num="0058">In some embodiments, the ROP <b>226</b> is included within each processing cluster (e.g., cluster <b>214</b>A-<b>214</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) instead of within the partition unit <b>220</b>. In such embodiment, read and write requests for pixel data are transmitted over the memory crossbar <b>216</b> instead of pixel fragment data. The processed graphics data may be displayed on a display device, such as one of the one or more display device(s) <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, routed for further processing by the processor(s) <b>102</b>, or routed for further processing by one of the processing entities within the parallel processor <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a block diagram of a processing cluster <b>214</b> within a parallel processing unit, according to an embodiment. In one embodiment the processing cluster is an instance of one of the processing clusters <b>214</b>A-<b>214</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. The processing cluster <b>214</b> can be configured to execute many threads in parallel, where the term &#x201c;thread&#x201d; refers to an instance of a particular program executing on a particular set of input data. In some embodiments, single-instruction, multiple-data (SIMD) instruction issue techniques are used to support parallel execution of a large number of threads without providing multiple independent instruction units. In other embodiments, single-instruction, multiple-thread (SIMT) techniques are used to support parallel execution of a large number of generally synchronized threads, using a common instruction unit configured to issue instructions to a set of processing engines within each one of the processing clusters. Unlike a SIMD execution regime, where all processing engines typically execute identical instructions, SIMT execution allows different threads to more readily follow divergent execution paths through a given thread program. Persons skilled in the art will understand that a SIMD processing regime represents a functional subset of a SIMT processing regime.</p><p id="p-0061" num="0060">Operation of the processing cluster <b>214</b> can be controlled via a pipeline manager <b>232</b> that distributes processing tasks to SIMT parallel processors. The pipeline manager <b>232</b> receives instructions from the scheduler <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> and manages execution of those instructions via a graphics multiprocessor <b>234</b> and/or a texture unit <b>236</b>. The illustrated graphics multiprocessor <b>234</b> is an exemplary instance of a SIMT parallel processor. However, various types of SIMT parallel processors of differing architectures may be included within the processing cluster <b>214</b>. One or more instances of the graphics multiprocessor <b>234</b> can be included within a processing cluster <b>214</b>. The graphics multiprocessor <b>234</b> can process data and a data crossbar <b>240</b> can be used to distribute the processed data to one of multiple possible destinations, including other shader units. The pipeline manager <b>232</b> can facilitate the distribution of processed data by specifying destinations for processed data to be distributed via the data crossbar <b>240</b>.</p><p id="p-0062" num="0061">Each graphics multiprocessor <b>234</b> within the processing cluster <b>214</b> can include an identical set of functional execution logic (e.g., arithmetic logic units, load-store units, etc.), which may be pipelined, allowing a new instruction to be issued before a previous instruction has finished. Any combination of functional execution logic may be provided. In one embodiment, the functional logic supports a variety of operations including integer and floating-point arithmetic (e.g., addition and multiplication), comparison operations, Boolean operations (AND, OR, XOR), bit-shifting, and computation of various algebraic functions (e.g., planar interpolation, trigonometric, exponential, and logarithmic functions, etc.); and the same functional-unit hardware can be leveraged to perform different operations.</p><p id="p-0063" num="0062">The series of instructions transmitted to the processing cluster <b>214</b> constitutes a thread, as previously defined herein, and the collection of a certain number of concurrently executing threads across the parallel processing engines (not shown) within a graphics multiprocessor <b>234</b> is referred to herein as a thread group. As used herein, a thread group refers to a group of threads concurrently executing the same program on different input data, with one thread of the group being assigned to a different processing engine within a graphics multiprocessor <b>234</b>. A thread group may include fewer threads than the number of processing engines within the graphics multiprocessor <b>234</b>, in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the graphics multiprocessor <b>234</b>, in which case processing will take place over consecutive clock cycles. Each graphics multiprocessor <b>234</b> can support up to G thread groups concurrently. Additionally, a plurality of related thread groups may be active (in different phases of execution) at the same time within a graphics multiprocessor <b>234</b>.</p><p id="p-0064" num="0063">In one embodiment the graphics multiprocessor <b>234</b> includes an internal cache memory to perform load and store operations. In one embodiment, the graphics multiprocessor <b>234</b> can forego an internal cache and use a cache memory (e.g., L1 cache <b>248</b>) within the processing cluster <b>214</b>. Each graphics multiprocessor <b>234</b> also has access to L2 caches within the partition units (e.g., partition units <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) that are shared among all processing clusters <b>214</b> and may be used to transfer data between threads. The graphics multiprocessor <b>234</b> may also access off-chip global memory, which can include one or more of local parallel processor memory and/or system memory. Any memory external to the parallel processing unit <b>202</b> may be used as global memory. Embodiments in which the processing cluster <b>214</b> includes multiple instances of the graphics multiprocessor <b>234</b> can share common instructions and data, which may be stored in the L1 cache <b>248</b>.</p><p id="p-0065" num="0064">Each processing cluster <b>214</b> may include an MMU <b>245</b> (memory management unit) that is configured to map virtual addresses into physical addresses. In other embodiments, one or more instances of the MMU <b>245</b> may reside within the memory interface <b>218</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. The MMU <b>245</b> includes a set of page table entries (PTEs) used to map a virtual address to a physical address of a tile and optionally a cache line index. The MMU <b>245</b> may include address translation lookaside buffers (TLB) or caches that may reside within the graphics multiprocessor <b>234</b> or the L1 cache or processing cluster <b>214</b>. The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units. The cache line index may be used to determine whether a request for a cache line is a hit or miss.</p><p id="p-0066" num="0065">In graphics and computing applications, a processing cluster <b>214</b> may be configured such that each graphics multiprocessor <b>234</b> is coupled to a texture unit <b>236</b> for performing texture mapping operations, e.g., determining texture sample positions, reading texture data, and filtering the texture data. Texture data is read from an internal texture L1 cache (not shown) or in some embodiments from the L1 cache within graphics multiprocessor <b>234</b> and is fetched from an L2 cache, local parallel processor memory, or system memory, as needed. Each graphics multiprocessor <b>234</b> outputs processed tasks to the data crossbar <b>240</b> to provide the processed task to another processing cluster <b>214</b> for further processing or to store the processed task in an L2 cache, local parallel processor memory, or system memory via the memory crossbar <b>216</b>. A preROP <b>242</b> (pre-raster operations unit) is configured to receive data from graphics multiprocessor <b>234</b>, direct data to ROP units, which may be located with partition units as described herein (e.g., partition units <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The preROP <b>242</b> unit can perform optimizations for color blending, organize pixel color data, and perform address translations.</p><p id="p-0067" num="0066">It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units, e.g., graphics multiprocessor <b>234</b>, texture units <b>236</b>, preROPs <b>242</b>, etc., may be included within a processing cluster <b>214</b>. Further, while only one processing cluster <b>214</b> is shown, a parallel processing unit as described herein may include any number of instances of the processing cluster <b>214</b>. In one embodiment, each processing cluster <b>214</b> can be configured to operate independently of other processing clusters <b>214</b> using separate and distinct processing units, L1 caches, etc.</p><p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a graphics multiprocessor <b>234</b>, according to one embodiment. In such embodiment the graphics multiprocessor <b>234</b> couples with the pipeline manager <b>232</b> of the processing cluster <b>214</b>. The graphics multiprocessor <b>234</b> has an execution pipeline including but not limited to an instruction cache <b>252</b>, an instruction unit <b>254</b>, an address mapping unit <b>256</b>, a register file <b>258</b>, one or more general-purpose graphics processing unit (GPGPU) cores <b>262</b>, and one or more load/store units <b>266</b>. The GPGPU cores <b>262</b> and load/store units <b>266</b> are coupled with cache memory <b>272</b> and shared memory <b>270</b> via a memory and cache interconnect <b>268</b>.</p><p id="p-0069" num="0068">In one embodiment, the instruction cache <b>252</b> receives a stream of instructions to execute from the pipeline manager <b>232</b>. The instructions are cached in the instruction cache <b>252</b> and dispatched for execution by the instruction unit <b>254</b>. The instruction unit <b>254</b> can dispatch instructions as thread groups (e.g., warps), with each thread of the thread group assigned to a different execution unit within GPGPU core <b>262</b>. An instruction can access any of a local, shared, or global address space by specifying an address within a unified address space. The address mapping unit <b>256</b> can be used to translate addresses in the unified address space into a distinct memory address that can be accessed by the load/store units <b>266</b>.</p><p id="p-0070" num="0069">The register file <b>258</b> provides a set of registers for the functional units of the graphics multiprocessor <b>234</b>. The register file <b>258</b> provides temporary storage for operands connected to the data paths of the functional units (e.g., GPGPU cores <b>262</b>, load/store units <b>266</b>) of the graphics multiprocessor <b>234</b>. In one embodiment, the register file <b>258</b> is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file <b>258</b>. In one embodiment, the register file <b>258</b> is divided between the different warps being executed by the graphics multiprocessor <b>234</b>.</p><p id="p-0071" num="0070">The GPGPU cores <b>262</b> can each include floating-point units (FPUs) and/or integer arithmetic logic units (ALUs) that are used to execute instructions of the graphics multiprocessor <b>234</b>. The GPGPU cores <b>262</b> can be similar in architecture or can differ in architecture, according to embodiments. For example and in one embodiment, a first portion of the GPGPU cores <b>262</b> include a single precision FPU and an integer ALU while a second portion of the GPGPU cores include a double precision FPU. In one embodiment the FPUs can implement the IEEE 754-2008 standard for floating-point arithmetic or enable variable precision floating-point arithmetic. The graphics multiprocessor <b>234</b> can additionally include one or more fixed function or special function units to perform specific functions such as copy rectangle or pixel blending operations. In one embodiment one or more of the GPGPU cores can also include fixed or special function logic</p><p id="p-0072" num="0071">The memory and cache interconnect <b>268</b> is an interconnect network that connects each of the functional units of the graphics multiprocessor <b>234</b> to the register file <b>258</b> and to the shared memory <b>270</b>. In one embodiment, the memory and cache interconnect <b>268</b> is a crossbar interconnect that allows the load/store unit <b>266</b> to implement load and store operations between the shared memory <b>270</b> and the register file <b>258</b>. The register file <b>258</b> can operate at the same frequency as the GPGPU cores <b>262</b>, thus data transfer between the GPGPU cores <b>262</b> and the register file <b>258</b> is very low latency. The shared memory <b>270</b> can be used to enable communication between threads that execute on the functional units within the graphics multiprocessor <b>234</b>. The cache memory <b>272</b> can be used as a data cache for example, to cache texture data communicated between the functional units and the texture unit <b>236</b>.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>3</b>A-<b>3</b>B</figref> illustrate additional graphics multiprocessors, according to embodiments. The illustrated graphics multiprocessors <b>325</b>, <b>350</b> are variants of the graphics multiprocessor <b>234</b> of <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>. The illustrated graphics multiprocessors <b>325</b>, <b>350</b> can be configured as a streaming multiprocessor (SM) capable of simultaneous execution of a large number of execution threads.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> shows a graphics multiprocessor <b>325</b> according to an additional embodiment. The graphics multiprocessor <b>325</b> includes multiple additional instances of execution resource units relative to the graphics multiprocessor <b>234</b> of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. For example, the graphics multiprocessor <b>325</b> can include multiple instances of the instruction unit <b>332</b>A-<b>332</b>B, register file <b>334</b>A-<b>334</b>B, and texture unit(s) <b>344</b>A-<b>344</b>B. The graphics multiprocessor <b>325</b> also includes multiple sets of graphics or compute execution units (e.g., GPGPU core <b>336</b>A-<b>336</b>B, GPGPU core <b>337</b>A-<b>337</b>B, GPGPU core <b>338</b>A-<b>338</b>B) and multiple sets of load/store units <b>340</b>A-<b>340</b>B. In one embodiment the execution resource units have a common instruction cache <b>330</b>, texture and/or data cache memory <b>342</b>, and shared memory <b>346</b>.</p><p id="p-0075" num="0074">The various components can communicate via an interconnect fabric <b>327</b>. In one embodiment the interconnect fabric <b>327</b> includes one or more crossbar switches to enable communication between the various components of the graphics multiprocessor <b>325</b>.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> shows a graphics multiprocessor <b>350</b> according to an additional embodiment. The graphics processor includes multiple sets of execution resources <b>356</b>A-<b>356</b>D, where each set of execution resource includes multiple instruction units, register files, GPGPU cores, and load store units, as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. The execution resources <b>356</b>A-<b>356</b>D can work in concert with texture unit(s) <b>360</b>A-<b>360</b>D for texture operations, while sharing an instruction cache <b>354</b>, and shared memory <b>362</b>. In one embodiment the execution resources <b>356</b>A-<b>356</b>D can share an instruction cache <b>354</b> and shared memory <b>362</b>, as well as multiple instances of a texture and/or data cache memory <b>358</b>A-<b>358</b>B. The various components can communicate via an interconnect fabric <b>352</b> similar to the interconnect fabric <b>327</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>.</p><p id="p-0077" num="0076">Persons skilled in the art will understand that the architecture described in <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>2</b>A-<b>2</b>D</figref>, and <b>3</b>A-<b>3</b>B are descriptive and not limiting as to the scope of the present embodiments. Thus, the techniques described herein may be implemented on any properly configured processing unit, including, without limitation, one or more mobile application processors, one or more desktop or server central processing units (CPUs) including multi-core CPUs, one or more parallel processing units, such as the parallel processing unit <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, as well as one or more graphics processors or special purpose processing units, without departure from the scope of the embodiments described herein.</p><p id="p-0078" num="0077">In some embodiments a parallel processor or GPGPU as described herein is communicatively coupled to host/processor cores to accelerate graphics operations, machine-learning operations, pattern analysis operations, and various general-purpose GPU (GPGPU) functions. The GPU may be communicatively coupled to the host processor/cores over a bus or other interconnect (e.g., a high speed interconnect such as PCIe or NVLink). In other embodiments, the GPU may be integrated on the same package or chip as the cores and communicatively coupled to the cores over an internal processor bus/interconnect (i.e., internal to the package or chip). Regardless of the manner in which the GPU is connected, the processor cores may allocate work to the GPU in the form of sequences of commands/instructions contained in a work descriptor. The GPU then uses dedicated circuitry/logic for efficiently processing these commands/instructions.</p><heading id="h-0007" level="2">Techniques for GPU to Host Processor Interconnection</heading><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates an exemplary architecture in which a plurality of GPUs <b>410</b>-<b>413</b> are communicatively coupled to a plurality of multi-core processors <b>405</b>-<b>406</b> over high-speed links <b>440</b>A-<b>440</b>D (e.g., buses, point-to-point interconnects, etc.). In one embodiment, the high-speed links <b>440</b>A-<b>440</b>D support a communication throughput of 4 GB/s, 30 GB/s, 80 GB/s or higher, depending on the implementation. Various interconnect protocols may be used including, but not limited to, PCIe 4.0 or 5.0 and NVLink 2.0. However, the underlying principles of the invention are not limited to any particular communication protocol or throughput.</p><p id="p-0080" num="0079">In addition, in one embodiment, two or more of the GPUs <b>410</b>-<b>413</b> are interconnected over high-speed links <b>442</b>A-<b>442</b>B, which may be implemented using the same or different protocols/links than those used for high-speed links <b>440</b>A-<b>440</b>D. Similarly, two or more of the multi-core processors <b>405</b>-<b>406</b> may be connected over high speed link <b>443</b> which may be symmetric multi-processor (SMP) buses operating at 20 GB/s, 30 GB/s, 120 GB/s or higher. Alternatively, all communication between the various system components shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> may be accomplished using the same protocols/links (e.g., over a common interconnection fabric). As mentioned, however, the underlying principles of the invention are not limited to any particular type of interconnect technology.</p><p id="p-0081" num="0080">In one embodiment, each multi-core processor <b>405</b>-<b>406</b> is communicatively coupled to a processor memory <b>401</b>-<b>402</b>, via memory interconnects <b>430</b>A-<b>430</b>B, respectively, and each GPU <b>410</b>-<b>413</b> is communicatively coupled to GPU memory <b>420</b>-<b>423</b> over GPU memory interconnects <b>450</b>A-<b>450</b>D, respectively. The memory interconnects <b>430</b>A-<b>430</b>B and <b>450</b>A-<b>450</b>D may utilize the same or different memory access technologies. By way of example, and not limitation, the processor memories <b>401</b>-<b>402</b> and GPU memories <b>420</b>-<b>423</b> may be volatile memories such as dynamic random access memories (DRAMs) (including stacked DRAMs), Graphics DDR SDRAM (GDDR) (e.g., GDDR5, GDDR6), or High Bandwidth Memory (HBM) and/or may be non-volatile memories such as 3D XPoint or Nano-Ram. In one embodiment, some portion of the memories may be volatile memory and another portion may be non-volatile memory (e.g., using a two-level memory (2LM) hierarchy).</p><p id="p-0082" num="0081">As described below, although the various processors <b>405</b>-<b>406</b> and GPUs <b>410</b>-<b>413</b> may be physically coupled to a particular memory <b>401</b>-<b>402</b>, <b>420</b>-<b>423</b>, respectively, a unified memory architecture may be implemented in which the same virtual system address space (also referred to as the &#x201c;effective address&#x201d; space) is distributed among all of the various physical memories. For example, processor memories <b>401</b>-<b>402</b> may each comprise 64 GB of the system memory address space and GPU memories <b>420</b>-<b>423</b> may each comprise 32 GB of the system memory address space (resulting in a total of 256 GB addressable memory in this example).</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates additional details for an interconnection between a multi-core processor <b>407</b> and a graphics acceleration module <b>446</b> in accordance with one embodiment. The graphics acceleration module <b>446</b> may include one or more GPU chips integrated on a line card which is coupled to the processor <b>407</b> via the high-speed link <b>440</b>. Alternatively, the graphics acceleration module <b>446</b> may be integrated on the same package or chip as the processor <b>407</b>.</p><p id="p-0084" num="0083">The illustrated processor <b>407</b> includes a plurality of cores <b>460</b>A-<b>460</b>D, each with a translation lookaside buffer <b>461</b>A-<b>461</b>D and one or more caches <b>462</b>A-<b>462</b>D. The cores may include various other components for executing instructions and processing data which are not illustrated to avoid obscuring the underlying principles of the invention (e.g., instruction fetch units, branch prediction units, decoders, execution units, reorder buffers, etc.). The caches <b>462</b>A-<b>462</b>D may comprise level 1 (L1) and level 2 (L2) caches. In addition, one or more shared caches <b>456</b> may be included in the caching hierarchy and shared by sets of the cores <b>460</b>A-<b>460</b>D. For example, one embodiment of the processor <b>407</b> includes 24 cores, each with its own L1 cache, twelve shared L2 caches, and twelve shared L3 caches. In this embodiment, one of the L2 and L3 caches are shared by two adjacent cores. The processor <b>407</b> and the graphics accelerator integration module <b>446</b> connect with system memory <b>441</b>, which may include processor memories <b>401</b>-<b>402</b>.</p><p id="p-0085" num="0084">Coherency is maintained for data and instructions stored in the various caches <b>462</b>A-<b>462</b>D, <b>456</b> and system memory <b>441</b> via inter-core communication over a coherence bus <b>464</b>. For example, each cache may have cache coherency logic/circuitry associated therewith to communicate to over the coherence bus <b>464</b> in response to detected reads or writes to particular cache lines. In one implementation, a cache snooping protocol is implemented over the coherence bus <b>464</b> to snoop cache accesses. Cache snooping/coherency techniques are well understood by those of skill in the art and will not be described in detail here to avoid obscuring the underlying principles of the invention.</p><p id="p-0086" num="0085">In one embodiment, a proxy circuit <b>425</b> communicatively couples the graphics acceleration module <b>446</b> to the coherence bus <b>464</b>, allowing the graphics acceleration module <b>446</b> to participate in the cache coherence protocol as a peer of the cores. In particular, an interface <b>435</b> provides connectivity to the proxy circuit <b>425</b> over high-speed link <b>440</b> (e.g., a PCIe bus, NVLink, etc.) and an interface <b>437</b> connects the graphics acceleration module <b>446</b> to the high-speed link <b>440</b>.</p><p id="p-0087" num="0086">In one implementation, an accelerator integration circuit <b>436</b> provides cache management, memory access, context management, and interrupt management services on behalf of a plurality of graphics processing engines <b>431</b>, <b>432</b>, N of the graphics acceleration module <b>446</b>. The graphics processing engines <b>431</b>, <b>432</b>, N may each comprise a separate graphics processing unit (GPU). Alternatively, the graphics processing engines <b>431</b>, <b>432</b>, N may comprise different types of graphics processing engines within a GPU such as graphics execution units, media processing engines (e.g., video encoders/decoders), samplers, and blit engines. In other words, the graphics acceleration module may be a GPU with a plurality of graphics processing engines <b>431</b>-<b>432</b>, N or the graphics processing engines <b>431</b>-<b>432</b>, N may be individual GPUs integrated on a common package, line card, or chip.</p><p id="p-0088" num="0087">In one embodiment, the accelerator integration circuit <b>436</b> includes a memory management unit (MMU) <b>439</b> for performing various memory management functions such as virtual-to-physical memory translations (also referred to as effective-to-real memory translations) and memory access protocols for accessing system memory <b>441</b>. The MMU <b>439</b> may also include a translation lookaside buffer (TLB) (not shown) for caching the virtual/effective to physical/real address translations. In one implementation, a cache <b>438</b> stores commands and data for efficient access by the graphics processing engines <b>431</b>-<b>432</b>, N. In one embodiment, the data stored in cache <b>438</b> and graphics memories <b>433</b>-<b>434</b>, M is kept coherent with the core caches <b>462</b>A-<b>462</b>D, <b>456</b> and system memory <b>411</b>. As mentioned, this may be accomplished via proxy circuit <b>425</b> which takes part in the cache coherency mechanism on behalf of cache <b>438</b> and memories <b>433</b>-<b>434</b>, M (e.g., sending updates to the cache <b>438</b> related to modifications/accesses of cache lines on processor caches <b>462</b>A-<b>462</b>D, <b>456</b> and receiving updates from the cache <b>438</b>).</p><p id="p-0089" num="0088">A set of registers <b>445</b> store context data for threads executed by the graphics processing engines <b>431</b>-<b>432</b>, N and a context management circuit <b>448</b> manages the thread contexts. For example, the context management circuit <b>448</b> may perform save and restore operations to save and restore contexts of the various threads during contexts switches (e.g., where a first thread is saved and a second thread is stored so that the second thread can be execute by a graphics processing engine). For example, on a context switch, the context management circuit <b>448</b> may store current register values to a designated region in memory (e.g., identified by a context pointer). It may then restore the register values when returning to the context. In one embodiment, an interrupt management circuit <b>447</b> receives and processes interrupts received from system devices.</p><p id="p-0090" num="0089">In one implementation, virtual/effective addresses from a graphics processing engine <b>431</b> are translated to real/physical addresses in system memory <b>411</b> by the MMU <b>439</b>. One embodiment of the accelerator integration circuit <b>436</b> supports multiple (e.g., 4, 8, 16) graphics accelerator modules <b>446</b> and/or other accelerator devices. The graphics accelerator module <b>446</b> may be dedicated to a single application executed on the processor <b>407</b> or may be shared between multiple applications. In one embodiment, a virtualized graphics execution environment is presented in which the resources of the graphics processing engines <b>431</b>-<b>432</b>, N are shared with multiple applications or virtual machines (VMs). The resources may be subdivided into &#x201c;slices&#x201d; which are allocated to different VMs and/or applications based on the processing requirements and priorities associated with the VMs and/or applications.</p><p id="p-0091" num="0090">Thus, the accelerator integration circuit acts as a bridge to the system for the graphics acceleration module <b>446</b> and provides address translation and system memory cache services. In addition, the accelerator integration circuit <b>436</b> may provide virtualization facilities for the host processor to manage virtualization of the graphics processing engines, interrupts, and memory management.</p><p id="p-0092" num="0091">Because hardware resources of the graphics processing engines <b>431</b>-<b>432</b>, N are mapped explicitly to the real address space seen by the host processor <b>407</b>, any host processor can address these resources directly using an effective address value. One function of the accelerator integration circuit <b>436</b>, in one embodiment, is the physical separation of the graphics processing engines <b>431</b>-<b>432</b>, N so that they appear to the system as independent units.</p><p id="p-0093" num="0092">As mentioned, in the illustrated embodiment, one or more graphics memories <b>433</b>-<b>434</b>, M are coupled to each of the graphics processing engines <b>431</b>-<b>432</b>, N, respectively. The graphics memories <b>433</b>-<b>434</b>, M store instructions and data being processed by each of the graphics processing engines <b>431</b>-<b>432</b>, N. The graphics memories <b>433</b>-<b>434</b>, M may be volatile memories such as DRAMs (including stacked DRAMs), GDDR memory (e.g., GDDR5, GDDR6), or HBM, and/or may be non-volatile memories such as 3D XPoint or Nano-Ram.</p><p id="p-0094" num="0093">In one embodiment, to reduce data traffic over the high-speed link <b>440</b>, biasing techniques are used to ensure that the data stored in graphics memories <b>433</b>-<b>434</b>, M is data which will be used most frequently by the graphics processing engines <b>431</b>-<b>432</b>, N and preferably not used by the cores <b>460</b>A-<b>460</b>D (at least not frequently). Similarly, the biasing mechanism attempts to keep data needed by the cores (and preferably not the graphics processing engines <b>431</b>-<b>432</b>, N) within the caches <b>462</b>A-<b>462</b>D, <b>456</b> of the cores and system memory <b>411</b>.</p><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. <b>4</b>C</figref> illustrates another embodiment in which the accelerator integration circuit <b>436</b> is integrated within the processor <b>407</b>. In this embodiment, the graphics processing engines <b>431</b>-<b>432</b>, N communicate directly over the high-speed link <b>440</b> to the accelerator integration circuit <b>436</b> via interface <b>437</b> and interface <b>435</b> (which, again, may be utilize any form of bus or interface protocol). The accelerator integration circuit <b>436</b> may perform the same operations as those described with respect to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, but potentially at a higher throughput given its close proximity to the coherency bus <b>464</b> and caches <b>462</b>A-<b>462</b>D, <b>456</b>.</p><p id="p-0096" num="0095">One embodiment supports different programming models including a dedicated-process programming model (no graphics acceleration module virtualization) and shared programming models (with virtualization). The latter may include programming models which are controlled by the accelerator integration circuit <b>436</b> and programming models which are controlled by the graphics acceleration module <b>446</b>.</p><p id="p-0097" num="0096">In one embodiment of the dedicated process model, graphics processing engines <b>431</b>-<b>432</b>, N are dedicated to a single application or process under a single operating system. The single application can funnel other application requests to the graphics engines <b>431</b>-<b>432</b>, N, providing virtualization within a VM/partition.</p><p id="p-0098" num="0097">In the dedicated-process programming models, the graphics processing engines <b>431</b>-<b>432</b>, N, may be shared by multiple VM/application partitions. The shared models require a system hypervisor to virtualize the graphics processing engines <b>431</b>-<b>432</b>, N to allow access by each operating system. For single-partition systems without a hypervisor, the graphics processing engines <b>431</b>-<b>432</b>, N are owned by the operating system. In both cases, the operating system can virtualize the graphics processing engines <b>431</b>-<b>432</b>, N to provide access to each process or application.</p><p id="p-0099" num="0098">For the shared programming model, the graphics acceleration module <b>446</b> or an individual graphics processing engine <b>431</b>-<b>432</b>, N selects a process element using a process handle. In one embodiment, process elements are stored in system memory <b>411</b> and are addressable using the effective address to real address translation techniques described herein. The process handle may be an implementation-specific value provided to the host process when registering its context with the graphics processing engine <b>431</b>-<b>432</b>, N (that is, calling system software to add the process element to the process element linked list). The lower 16-bits of the process handle may be the offset of the process element within the process element linked list.</p><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>4</b>D</figref> illustrates an exemplary accelerator integration slice <b>490</b>. As used herein, a &#x201c;slice&#x201d; comprises a specified portion of the processing resources of the accelerator integration circuit <b>436</b>. Application effective address space <b>482</b> within system memory <b>411</b> stores process elements <b>483</b>. In one embodiment, the process elements <b>483</b> are stored in response to GPU invocations <b>481</b> from applications <b>480</b> executed on the processor <b>407</b>. A process element <b>483</b> contains the process state for the corresponding application <b>480</b>. A work descriptor (WD) <b>484</b> contained in the process element <b>483</b> can be a single job requested by an application or may contain a pointer to a queue of jobs. In the latter case, the WD <b>484</b> is a pointer to the job request queue in the application's address space <b>482</b>.</p><p id="p-0101" num="0100">The graphics acceleration module <b>446</b> and/or the individual graphics processing engines <b>431</b>-<b>432</b>, N can be shared by all or a subset of the processes in the system. Embodiments of the invention include an infrastructure for setting up the process state and sending a WD <b>484</b> to a graphics acceleration module <b>446</b> to start a job in a virtualized environment.</p><p id="p-0102" num="0101">In one implementation, the dedicated-process programming model is implementation-specific. In this model, a single process owns the graphics acceleration module <b>446</b> or an individual graphics processing engine <b>431</b>. Because the graphics acceleration module <b>446</b> is owned by a single process, the hypervisor initializes the accelerator integration circuit <b>436</b> for the owning partition and the operating system initializes the accelerator integration circuit <b>436</b> for the owning process at the time when the graphics acceleration module <b>446</b> is assigned.</p><p id="p-0103" num="0102">In operation, a WD fetch unit <b>491</b> in the accelerator integration slice <b>490</b> fetches the next WD <b>484</b> which includes an indication of the work to be done by one of the graphics processing engines of the graphics acceleration module <b>446</b>. Data from the WD <b>484</b> may be stored in registers <b>445</b> and used by the MMU <b>439</b>, interrupt management circuit <b>447</b> and/or context management circuit <b>448</b> as illustrated. For example, one embodiment of the MMU <b>439</b> includes segment/page walk circuitry for accessing segment/page tables <b>486</b> within the OS virtual address space <b>485</b>. The interrupt management circuit <b>447</b> may process interrupt events <b>492</b> received from the graphics acceleration module <b>446</b>. When performing graphics operations, an effective address <b>493</b> generated by a graphics processing engine <b>431</b>-<b>432</b>, N is translated to a real address by the MMU <b>439</b>.</p><p id="p-0104" num="0103">In one embodiment, the same set of registers <b>445</b> are duplicated for each graphics processing engine <b>431</b>-<b>432</b>, N and/or graphics acceleration module <b>446</b> and may be initialized by the hypervisor or operating system. Each of these duplicated registers may be included in an accelerator integration slice <b>490</b>. Exemplary registers that may be initialized by the hypervisor are shown in Table 1.</p><p id="p-0105" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Hypervisor Initialized Registers</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="28pt" align="left"/><colspec colname="3" colwidth="175pt" align="left"/><tbody valign="top"><row><entry/><entry>1</entry><entry>Slice Control Register</entry></row><row><entry/><entry>2</entry><entry>Real Address (RA) Scheduled Processes Area Pointer</entry></row><row><entry/><entry>3</entry><entry>Authority Mask Override Register</entry></row><row><entry/><entry>4</entry><entry>Interrupt Vector Table Entry Offset</entry></row><row><entry/><entry>5</entry><entry>Interrupt Vector Table Entry Limit</entry></row><row><entry/><entry>6</entry><entry>State Register</entry></row><row><entry/><entry>7</entry><entry>Logical Partition ID</entry></row><row><entry/><entry>8</entry><entry>Real address (RA) Hypervisor Accelerator Utilization </entry></row><row><entry/><entry/><entry>Record Pointer</entry></row><row><entry/><entry>9</entry><entry>Storage Description Register</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0106" num="0104">Exemplary registers that may be initialized by the operating system are shown in Table 2.</p><p id="p-0107" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Operating System Initialized Registers</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="189pt" align="left"/><tbody valign="top"><row><entry>1</entry><entry>Process and Thread Identification</entry></row><row><entry>2</entry><entry>Effective Address (EA) Context Save/Restore Pointer</entry></row><row><entry>3</entry><entry>Virtual Address (VA) Accelerator Utilization Record Pointer</entry></row><row><entry>4</entry><entry>Virtual Address (VA) Storage Segment Table Pointer</entry></row><row><entry>5</entry><entry>Authority Mask</entry></row><row><entry>6</entry><entry>Work descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0108" num="0105">In one embodiment, each WD <b>484</b> is specific to a particular graphics acceleration module <b>446</b> and/or graphics processing engine <b>431</b>-<b>432</b>, N. It contains all the information a graphics processing engine <b>431</b>-<b>432</b>, N requires to do its work or it can be a pointer to a memory location where the application has set up a command queue of work to be completed.</p><p id="p-0109" num="0106"><figref idref="DRAWINGS">FIG. <b>4</b>E</figref> illustrates additional details for one embodiment of a shared model. This embodiment includes a hypervisor real address space <b>498</b> in which a process element list <b>499</b> is stored. The hypervisor real address space <b>498</b> is accessible via a hypervisor <b>496</b> which virtualizes the graphics acceleration module engines for the operating system <b>495</b>.</p><p id="p-0110" num="0107">The shared programming models allow for all or a subset of processes from all or a subset of partitions in the system to use a graphics acceleration module <b>446</b>. There are two programming models where the graphics acceleration module <b>446</b> is shared by multiple processes and partitions: time-sliced shared and graphics directed shared.</p><p id="p-0111" num="0108">In this model, the system hypervisor <b>496</b> owns the graphics acceleration module <b>446</b> and makes its function available to all operating systems <b>495</b>. For a graphics acceleration module <b>446</b> to support virtualization by the system hypervisor <b>496</b>, the graphics acceleration module <b>446</b> may adhere to the following requirements: 1) An application's job request must be autonomous (that is, the state does not need to be maintained between jobs), or the graphics acceleration module <b>446</b> must provide a context save and restore mechanism. 2) An application's job request is guaranteed by the graphics acceleration module <b>446</b> to complete in a specified amount of time, including any translation faults, or the graphics acceleration module <b>446</b> provides the ability to preempt the processing of the job. 3) The graphics acceleration module <b>446</b> must be guaranteed fairness between processes when operating in the directed shared programming model.</p><p id="p-0112" num="0109">In one embodiment, for the shared model, the application <b>480</b> is required to make an operating system <b>495</b> system call with a graphics acceleration module <b>446</b> type, a work descriptor (WD), an authority mask register (AMR) value, and a context save/restore area pointer (CSRP). The graphics acceleration module <b>446</b> type describes the targeted acceleration function for the system call. The graphics acceleration module <b>446</b> type may be a system-specific value. The WD is formatted specifically for the graphics acceleration module <b>446</b> and can be in the form of a graphics acceleration module <b>446</b> command, an effective address pointer to a user-defined structure, an effective address pointer to a queue of commands, or any other data structure to describe the work to be done by the graphics acceleration module <b>446</b>. In one embodiment, the AMR value is the AMR state to use for the current process. The value passed to the operating system is similar to an application setting the AMR. If the accelerator integration circuit <b>436</b> and graphics acceleration module <b>446</b> implementations do not support a User Authority Mask Override Register (UAMOR), the operating system may apply the current UAMOR value to the AMR value before passing the AMR in the hypervisor call. The hypervisor <b>496</b> may optionally apply the current Authority Mask Override Register (AMOR) value before placing the AMR into the process element <b>483</b>. In one embodiment, the CSRP is one of the registers <b>445</b> containing the effective address of an area in the application's address space <b>482</b> for the graphics acceleration module <b>446</b> to save and restore the context state. This pointer is optional if no state is required to be saved between jobs or when a job is preempted. The context save/restore area may be pinned system memory.</p><p id="p-0113" num="0110">Upon receiving the system call, the operating system <b>495</b> may verify that the application <b>480</b> has registered and been given the authority to use the graphics acceleration module <b>446</b>. The operating system <b>495</b> then calls the hypervisor <b>496</b> with the information shown in Table 3.</p><p id="p-0114" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>OS to Hypervisor Call Parameters</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="14pt" align="left"/><colspec colname="3" colwidth="189pt" align="left"/><tbody valign="top"><row><entry/><entry>1</entry><entry>A work descriptor (WD)</entry></row><row><entry/><entry>2</entry><entry>An Authority Mask Register (AMR) value (potentially masked).</entry></row><row><entry/><entry>3</entry><entry>An effective address (EA) Context Save/Restore Area Pointer </entry></row><row><entry/><entry/><entry>(CSRP)</entry></row><row><entry/><entry>4</entry><entry>A process ID (PID) and optional thread ID (TID)</entry></row><row><entry/><entry>5</entry><entry>A virtual address (VA) accelerator utilization record pointer </entry></row><row><entry/><entry/><entry>(AURP)</entry></row><row><entry/><entry>6</entry><entry>The virtual address of the storage segment table pointer (SSTP)</entry></row><row><entry/><entry>7</entry><entry>A logical interrupt service number (LISN)</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0115" num="0111">Upon receiving the hypervisor call, the hypervisor <b>496</b> verifies that the operating system <b>495</b> has registered and been given the authority to use the graphics acceleration module <b>446</b>. The hypervisor <b>496</b> then puts the process element <b>483</b> into the process element linked list for the corresponding graphics acceleration module <b>446</b> type. The process element may include the information shown in Table 4.</p><p id="p-0116" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Process Element Information</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="189pt" align="left"/><tbody valign="top"><row><entry>&#x2002;1</entry><entry>A work descriptor (WD)</entry></row><row><entry>&#x2002;2</entry><entry>An Authority Mask Register (AMR) value (potentially masked).</entry></row><row><entry>&#x2002;3</entry><entry>An effective address (EA) Context Save/Restore Area Pointer </entry></row><row><entry/><entry>(CSRP)</entry></row><row><entry>&#x2002;4</entry><entry>A process ID (PID) and optional thread ID (TID)</entry></row><row><entry>&#x2002;5</entry><entry>A virtual address (VA) accelerator utilization record pointer </entry></row><row><entry/><entry>(AURP)</entry></row><row><entry>&#x2002;6</entry><entry>The virtual address of the storage segment table pointer (SSTP)</entry></row><row><entry>&#x2002;7</entry><entry>A logical interrupt service number (LISN)</entry></row><row><entry>&#x2002;8</entry><entry>Interrupt vector table, derived from the hypervisor call </entry></row><row><entry/><entry>parameters.</entry></row><row><entry>&#x2002;9</entry><entry>A state register (SR) value</entry></row><row><entry>10</entry><entry>A logical partition ID (LPID)</entry></row><row><entry>11</entry><entry>A real address (RA) hypervisor accelerator utilization record </entry></row><row><entry/><entry>pointer</entry></row><row><entry>12</entry><entry>The Storage Descriptor Register (SDR)</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0117" num="0112">In one embodiment, the hypervisor initializes a plurality of accelerator integration slice <b>490</b> registers <b>445</b>.</p><p id="p-0118" num="0113">As illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, one embodiment of the invention employs a unified memory addressable via a common virtual memory address space used to access the physical processor memories <b>401</b>-<b>402</b> and GPU memories <b>420</b>-<b>423</b>. In this implementation, operations executed on the GPUs <b>410</b>-<b>413</b> utilize the same virtual/effective memory address space to access the processors memories <b>401</b>-<b>402</b> and vice versa, thereby simplifying programmability. In one embodiment, a first portion of the virtual/effective address space is allocated to the processor memory <b>401</b>, a second portion to the second processor memory <b>402</b>, a third portion to the GPU memory <b>420</b>, and so on. The entire virtual/effective memory space (sometimes referred to as the effective address space) is thereby distributed across each of the processor memories <b>401</b>-<b>402</b> and GPU memories <b>420</b>-<b>423</b>, allowing any processor or GPU to access any physical memory with a virtual address mapped to that memory.</p><p id="p-0119" num="0114">In one embodiment, bias/coherence management circuitry <b>494</b>A-<b>494</b>E within one or more of the MMUs <b>439</b>A-<b>439</b>E ensures cache coherence between the caches of the host processors (e.g., <b>405</b>) and the GPUs <b>410</b>-<b>413</b> and implements biasing techniques indicating the physical memories in which certain types of data should be stored. While multiple instances of bias/coherence management circuitry <b>494</b>A-<b>494</b>E are illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, the bias/coherence circuitry may be implemented within the MMU of one or more host processors <b>405</b> and/or within the accelerator integration circuit <b>436</b>.</p><p id="p-0120" num="0115">One embodiment allows GPU-attached memory <b>420</b>-<b>423</b> to be mapped as part of system memory, and accessed using shared virtual memory (SVM) technology, but without suffering the typical performance drawbacks associated with full system cache coherence. The ability to GPU-attached memory <b>420</b>-<b>423</b> to be accessed as system memory without onerous cache coherence overhead provides a beneficial operating environment for GPU offload. This arrangement allows the host processor <b>405</b> software to setup operands and access computation results, without the overhead of tradition I/O DMA data copies. Such traditional copies involve driver calls, interrupts and memory mapped I/O (MMIO) accesses that are all inefficient relative to simple memory accesses. At the same time, the ability to access GPU attached memory <b>420</b>-<b>423</b> without cache coherence overheads can be critical to the execution time of an offloaded computation. In cases with substantial streaming write memory traffic, for example, cache coherence overhead can significantly reduce the effective write bandwidth seen by a GPU <b>410</b>-<b>413</b>. The efficiency of operand setup, the efficiency of results access, and the efficiency of GPU computation all play a role in determining the effectiveness of GPU offload.</p><p id="p-0121" num="0116">In one implementation, the selection of between GPU bias and host processor bias is driven by a bias tracker data structure. A bias table may be used, for example, which may be a page-granular structure (i.e., controlled at the granularity of a memory page) that includes 1 or 2 bits per GPU-attached memory page. The bias table may be implemented in a stolen memory range of one or more GPU-attached memories <b>420</b>-<b>423</b>, with or without a bias cache in the GPU <b>410</b>-<b>413</b> (e.g., to cache frequently/recently used entries of the bias table). Alternatively, the entire bias table may be maintained within the GPU.</p><p id="p-0122" num="0117">In one implementation, the bias table entry associated with each access to the GPU-attached memory <b>420</b>-<b>423</b> is accessed prior the actual access to the GPU memory, causing the following operations. First, local requests from the GPU <b>410</b>-<b>413</b> that find their page in GPU bias are forwarded directly to a corresponding GPU memory <b>420</b>-<b>423</b>. Local requests from the GPU that find their page in host bias are forwarded to the processor <b>405</b> (e.g., over a high-speed link as discussed above). In one embodiment, requests from the processor <b>405</b> that find the requested page in host processor bias complete the request like a normal memory read. Alternatively, requests directed to a GPU-biased page may be forwarded to the GPU <b>410</b>-<b>413</b>. The GPU may then transition the page to a host processor bias if it is not currently using the page.</p><p id="p-0123" num="0118">The bias state of a page can be changed either by a software-based mechanism, a hardware-assisted software-based mechanism, or, for a limited set of cases, a purely hardware-based mechanism.</p><p id="p-0124" num="0119">One mechanism for changing the bias state employs an API call (e.g. OpenCL), which, in turn, calls the GPU's device driver which, in turn, sends a message (or enqueues a command descriptor) to the GPU directing it to change the bias state and, for some transitions, perform a cache flushing operation in the host. The cache flushing operation is required for a transition from host processor <b>405</b> bias to GPU bias, but is not required for the opposite transition.</p><p id="p-0125" num="0120">In one embodiment, cache coherency is maintained by temporarily rendering GPU-biased pages uncacheable by the host processor <b>405</b>. To access these pages, the processor <b>405</b> may request access from the GPU <b>410</b> which may or may not grant access right away, depending on the implementation. Thus, to reduce communication between the processor <b>405</b> and GPU <b>410</b> it is beneficial to ensure that GPU-biased pages are those which are required by the GPU but not the host processor <b>405</b> and vice versa.</p><heading id="h-0008" level="2">Graphics Processing Pipeline</heading><p id="p-0126" num="0121"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a graphics processing pipeline <b>500</b>, according to an embodiment. In one embodiment a graphics processor can implement the illustrated graphics processing pipeline <b>500</b>. The graphics processor can be included within the parallel processing subsystems as described herein, such as the parallel processor <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, which, in one embodiment, is a variant of the parallel processor(s) <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The various parallel processing systems can implement the graphics processing pipeline <b>500</b> via one or more instances of the parallel processing unit (e.g., parallel processing unit <b>202</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) as described herein. For example, a shader unit (e.g., graphics multiprocessor <b>234</b> of <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>) may be configured to perform the functions of one or more of a vertex processing unit <b>504</b>, a tessellation control processing unit <b>508</b>, a tessellation evaluation processing unit <b>512</b>, a geometry processing unit <b>516</b>, and a fragment/pixel processing unit <b>524</b>. The functions of data assembler <b>502</b>, primitive assemblers <b>506</b>, <b>514</b>, <b>518</b>, tessellation unit <b>510</b>, rasterizer <b>522</b>, and raster operations unit <b>526</b> may also be performed by other processing engines within a processing cluster (e.g., processing cluster <b>214</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) and a corresponding partition unit (e.g., partition unit <b>220</b>A-<b>220</b>N of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The graphics processing pipeline <b>500</b> may also be implemented using dedicated processing units for one or more functions. In one embodiment, one or more portions of the graphics processing pipeline <b>500</b> can be performed by parallel processing logic within a general-purpose processor (e.g., CPU). In one embodiment, one or more portions of the graphics processing pipeline <b>500</b> can access on-chip memory (e.g., parallel processor memory <b>222</b> as in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>) via a memory interface <b>528</b>, which may be an instance of the memory interface <b>218</b> of <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>.</p><p id="p-0127" num="0122">In one embodiment the data assembler <b>502</b> is a processing unit that collects vertex data for surfaces and primitives. The data assembler <b>502</b> then outputs the vertex data, including the vertex attributes, to the vertex processing unit <b>504</b>. The vertex processing unit <b>504</b> is a programmable execution unit that executes vertex shader programs, lighting and transforming vertex data as specified by the vertex shader programs. The vertex processing unit <b>504</b> reads data that is stored in cache, local or system memory for use in processing the vertex data and may be programmed to transform the vertex data from an object-based coordinate representation to a world space coordinate space or a normalized device coordinate space.</p><p id="p-0128" num="0123">A first instance of a primitive assembler <b>506</b> receives vertex attributes from the vertex processing unit <b>504</b>. The primitive assembler <b>506</b> readings stored vertex attributes as needed and constructs graphics primitives for processing by tessellation control processing unit <b>508</b>. The graphics primitives include triangles, line segments, points, patches, and so forth, as supported by various graphics processing application programming interfaces (APIs).</p><p id="p-0129" num="0124">The tessellation control processing unit <b>508</b> treats the input vertices as control points for a geometric patch. The control points are transformed from an input representation from the patch (e.g., the patch's bases) to a representation that is suitable for use in surface evaluation by the tessellation evaluation processing unit <b>512</b>. The tessellation control processing unit <b>508</b> can also compute tessellation factors for edges of geometric patches. A tessellation factor applies to a single edge and quantifies a view-dependent level of detail associated with the edge. A tessellation unit <b>510</b> is configured to receive the tessellation factors for edges of a patch and to tessellate the patch into multiple geometric primitives such as line, triangle, or quadrilateral primitives, which are transmitted to a tessellation evaluation processing unit <b>512</b>. The tessellation evaluation processing unit <b>512</b> operates on parameterized coordinates of the subdivided patch to generate a surface representation and vertex attributes for each vertex associated with the geometric primitives.</p><p id="p-0130" num="0125">A second instance of a primitive assembler <b>514</b> receives vertex attributes from the tessellation evaluation processing unit <b>512</b>, reading stored vertex attributes as needed, and constructs graphics primitives for processing by the geometry processing unit <b>516</b>. The geometry processing unit <b>516</b> is a programmable execution unit that executes geometry shader programs to transform graphics primitives received from primitive assembler <b>514</b> as specified by the geometry shader programs. In one embodiment the geometry processing unit <b>516</b> is programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters used to rasterize the new graphics primitives.</p><p id="p-0131" num="0126">In some embodiments the geometry processing unit <b>516</b> can add or delete elements in the geometry stream. The geometry processing unit <b>516</b> outputs the parameters and vertices specifying new graphics primitives to primitive assembler <b>518</b>. The primitive assembler <b>518</b> receives the parameters and vertices from the geometry processing unit <b>516</b> and constructs graphics primitives for processing by a viewport scale, cull, and clip unit <b>520</b>. The geometry processing unit <b>516</b> reads data that is stored in parallel processor memory or system memory for use in processing the geometry data. The viewport scale, cull, and clip unit <b>520</b> performs clipping, culling, and viewport scaling and outputs processed graphics primitives to a rasterizer <b>522</b>.</p><p id="p-0132" num="0127">The rasterizer <b>522</b> can perform depth culling and other depth-based optimizations. The rasterizer <b>522</b> also performs scan conversion on the new graphics primitives to generate fragments and output those fragments and associated coverage data to the fragment/pixel processing unit <b>524</b>. The fragment/pixel processing unit <b>524</b> is a programmable execution unit that is configured to execute fragment shader programs or pixel shader programs. The fragment/pixel processing unit <b>524</b> transforming fragments or pixels received from rasterizer <b>522</b>, as specified by the fragment or pixel shader programs. For example, the fragment/pixel processing unit <b>524</b> may be programmed to perform operations included but not limited to texture mapping, shading, blending, texture correction and perspective correction to produce shaded fragments or pixels that are output to a raster operations unit <b>526</b>. The fragment/pixel processing unit <b>524</b> can read data that is stored in either the parallel processor memory or the system memory for use when processing the fragment data. Fragment or pixel shader programs may be configured to shade at sample, pixel, tile, or other granularities depending on the sampling rate configured for the processing units.</p><p id="p-0133" num="0128">The raster operations unit <b>526</b> is a processing unit that performs raster operations including, but not limited to stencil, z test, blending, and the like, and outputs pixel data as processed graphics data to be stored in graphics memory (e.g., parallel processor memory <b>222</b> as in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, and/or system memory <b>104</b> as in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), to be displayed on the one or more display device(s) <b>110</b> or for further processing by one of the one or more processor(s) <b>102</b> or parallel processor(s) <b>112</b>. In some embodiments the raster operations unit <b>526</b> is configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.</p><heading id="h-0009" level="2">Additional Exemplary GPGPU Multiprocessor and Shared Resources</heading><p id="p-0134" num="0129"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of a GPGPU <b>600</b>, according to an embodiment. The GPGPU <b>600</b> includes compression/decompression unit <b>628</b>, which according to various embodiments, can compress or decompress various types and formats of data at various points along the graphics processor rendering pipeline. The GPGPU <b>600</b> includes one or more graphics multiprocessor clusters <b>610</b>A-<b>610</b>B that may be configured to perform computations to enable various graphics processing operations. While two graphics multiprocessor clusters <b>610</b>A-<b>610</b>B are illustrated, embodiments are not so limited, as a variable number of processing clusters may be included.</p><p id="p-0135" num="0130">Each of the graphics multiprocessor clusters <b>610</b>A-<b>610</b>B includes graphics processing and computational logic, such as the logic illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>. In one embodiment the graphics multiprocessor clusters <b>610</b>A-<b>610</b>B share a set of shared resources <b>620</b>. The GPGPU <b>600</b> additionally includes an L3 cache <b>630</b> which can cache memory transactions between caches within the shared resources <b>620</b> and a last level cache or system memory. The L3 cache <b>630</b> connects with the shared resources <b>620</b> via a memory bus <b>629</b>. In one embodiment the memory bus <b>629</b> is a fabric interconnect that couples the L3 cache <b>630</b> with the shared resources <b>620</b> and the graphics multiprocessor clusters <b>610</b>A-<b>610</b>B.</p><p id="p-0136" num="0131">In one embodiment the shared resources <b>620</b> include a rasterizer <b>621</b>, a sampler <b>622</b>, a cache controller <b>623</b>, a render cache <b>624</b>, and compression/decompression unit <b>628</b>. The rasterizer <b>621</b> analyzes data representing a geometric object to be rendered by traversing, or walking, a primitive and generating pixel data for each pixel that is part of a geometric primitive to be rendered. The GPGPU <b>600</b> can also include a more advanced and/or configurable rasterizer or may additionally include ray tracing acceleration logic to accelerate ray tracing or hybrid rasterization. In one embodiment the rasterizer <b>621</b> is a tile-based rasterizer, in which pixels are rendered on the granularity of an image space grid of pixels. Tile-based rasterization can be performed on data stored in tile caches to reduce the number of off-chip memory accesses. The rasterizer <b>621</b> can be a variant of the rasterizer <b>522</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0137" num="0132">The sampler <b>622</b> provides texture sampling for 3D operations and media sampling for media operations. The sampler <b>622</b> can access render target data stored in the render cache <b>624</b>, for example, when dynamically rendered textures are in use, or when the graphics processor otherwise has an operational need to sample data from a render target.</p><p id="p-0138" num="0133">The render cache <b>624</b> stores render target data to be displayed via display engine or to be used to render subsequent images for display. Data generated by the graphics multiprocessor clusters <b>610</b>A-<b>610</b>B can be written to the render cache <b>624</b>, where such data may be readily accessed by other graphics processor components, such as the display engine or the sampler <b>622</b>. Memory within the render cache is divided into cache lines. The size of the cache lines can vary among embodiments. One embodiment provides for 68-byte cache lines, while another embodiment provides for 64-byte cache lines. In one embodiment the render cache <b>624</b> can be configured as a multisample render cache and can store multiple samples of color data per-pixel.</p><p id="p-0139" num="0134">In one embodiment the render cache <b>624</b> is controlled by a cache controller <b>623</b>. The cache controller <b>623</b> manages cache line allocation for data to be stored in the render cache <b>624</b> and maintains status information for the cache lines of the render cache <b>624</b>. Components within the graphics processor core can query the cache controller <b>623</b> to determine if data for a particular pixel or group of pixels is stored in the render cache <b>624</b> to determine which cache lines store such data. In one embodiment the cache controller <b>623</b> is also involved in maintaining cache coherence between the render cache <b>624</b> and other caches in the graphics processor. In one embodiment the render cache <b>624</b> is fully associative (e.g., m-way set associative).</p><p id="p-0140" num="0135">A compression boundary for compressed data can be configured such that data is compressed or decompressed before transiting a specific boundary in the memory hierarchy. For example, data can be stored in a render cache <b>624</b> in a compressed format or can be decompressed before being written to the render cache <b>624</b>. In one embodiment a compression operation can be performed by the compression/decompression unit <b>628</b> to compress the data that is evicted from the render cache <b>624</b> before the data is written to the L3 cache <b>630</b> and/or system memory via the memory bus <b>629</b>. Whether data is stored in a compressed or uncompressed format at a given location in memory may be determined based on whether graphics processor components that will consume the data from a given memory unit support reading data in a compressed format.</p><p id="p-0141" num="0136">In one embodiment, tile-based compression is used, in which pixel data for an N&#xd7;M tile is pixels is stored in cache or in memory in a compressed state. Various tile sizes may be used, including but not limited to an 8&#xd7;4 tile or a 4&#xd7;4 tile of pixels. Accompanying compressed data is compression metadata which maintains a compression status for a given cache line or tile. The compression metadata can include one or more bits per tile, cache line, cache block, etc., to indicate status such as compressed or uncompressed, or to indicate the form of compression that is in use. In many lossless compression implementations, if the input data cannot be compressed to the desired compression ratio without data loss, the data may be output or stored in an uncompressed state.</p><p id="p-0142" num="0137">Many different compression techniques can be applied to data generated by the GPU, such as color data, depth (e.g., Z) data, or other buffers written or otherwise output via the GPU. In addition to GPU generated data, the GPU consumes some static data during the rendering operations. This static data is read-only data from the GPU perspective and includes, but is not limited to static texture buffers, vertex buffers, constant buffers, uniform buffers, or other static or constant input buffers to the GPU. The static read-only data may also be constant data used by a compute shader or other general-purpose parallel computation logic within the GPU. Memory surfaces containing such data can be compressed once and used in multiple frames or multiple shader instances if the data can be compressed without data loss. Metadata can be associated with the compressed data to indicate a compression status (e.g., compressed or uncompressed) for the data. When a static (e.g., read only) resource is bound to a GPU pipeline, the corresponding meta-data is also bound. In one embodiment the metadata binding is performed via a bindless resource scheme. In one embodiment the metadata can be bound via legacy resource binding. Compression and decompression of the data can be performed on the fly and in real time, reducing the memory bandwidth required to load and store static or read-only data streams.</p><heading id="h-0010" level="2">Multisample Anti-Aliasing on a GPGPU</heading><p id="p-0143" num="0138">The pixel output from the rendering of geometric primitives may result in distortion artifacts known as aliasing. Aliasing can result whenever a high-resolution image is represented at a lower resolution. Anti-aliasing removes signal components that have a higher frequency than can properly be resolved via the rendered samples. In the specific case of triangle rasterization, aliasing can result is jagged edges in rendered images. Anti-aliasing improves the appearance of rendered edges by smoothing the rendered results. The specific case of multisampling anti-aliasing, multiple locations are sampled for every pixel. Each sample represents a potential output color for the pixels. If a triangle to be raster zed covers multiple sample locations within a pixel, a shading computation is performed for the samples and the results are combined to generate an output color for the pixel.</p><p id="p-0144" num="0139"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an exemplary memory layout for a multisample render target. A multisample render target can store multiple samples output for each pixel. In some existing multisample render target implementations, pixels can be represented in a planar format, in which each set of samples is stored in a separate memory plane. <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates 4&#xd7;MSAA in which four samples are used per pixel. A 3&#xd7;3 pixel tile <b>702</b> of nine pixels (A-I) is represented.</p><p id="p-0145" num="0140">While a 3&#xd7;3 pixel tile <b>702</b> of nine pixels is illustrated, the pixel tile <b>702</b> may include any number of pixels. For example and in one embodiment the pixel tile <b>702</b> may be an 8&#xd7;4 pixel tile including 32 pixels. Each set of samples for the tile can be stored in a separate plane (e.g., planes <b>704</b>A-<b>704</b>D). In one embodiment the number of plane that are allocated is determined by the number of distinct colors associated with the various samples. For example, if the four samples have four different color values, four color plane are used. If a single value is present for all samples, only a single value is stored in a single plane. Before a final image is output, an MSAA resolve operation is performed on the tile in which the color values for each sample of a pixel are combined. If only a single value is stored for a pixel, the resolve operation uses the single value. In one embodiment, if multiple different color values are stored for differing samples for a pixel, the color values may be averaged.</p><p id="p-0146" num="0141">As illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, conventional MSAA techniques store the multiple samples for a pixel in multiple memory planes, where each plane is configured and regarded as a block of contiguous memory. Some implementations of conventional MSAA pre-allocate all required planes for a block of pixels and stores the required sample color data as necessary. This technique requires the MSAA module to expend resources scanning the block of pixels to determine the number of planes that are to be allocated, which can be expensive in terms of time and system resources. Embodiments described herein perform MSAA plane allocation without requiring pre-review of the planes to be allocated. Instead, planes are allocated in a progressive manner, with additional memory planes allocated only when needed.</p><p id="p-0147" num="0142"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates MSAA compression, according to an embodiment. Multiple MSAA planes are used for storing color data samples, where each plane is configured and regarded as a block of contiguous memory. Instead of performing a full allocation of the maximum number of planes that may be needed (e.g., four planes for 4&#xd7;MSAA, eight planes for 8&#xd7;MSAA, etc.) only the necessary number of planes are allocated. Allocating only the necessary number of planes can reduce the overall size of a multisample render target by avoid allocating memory that is not necessary to store all information for the render target. Less than the full number of planes can be allocated because, for a given pixel, it is possible that all samples of the pixel have the same color.</p><p id="p-0148" num="0143">In one embodiment, samples color values are stored in a decoupled manner, such that instead of allocating N memory planes for N&#xd7;MSAA, the sample values for each pixel are mapped to a sample storing the appropriate color data. A 3&#xd7;2 block of pixels is illustrated in which the six pixels <b>801</b>A-<b>801</b>F are intersected by two edges (e.g., edge <b>802</b>, edge <b>804</b>). The edges are associated with geometric primitives that cover the illustrated sample points (X) for each pixel <b>801</b>A-<b>801</b>F. For the illustrated pixels <b>801</b>A-<b>801</b>F, edge <b>802</b> and edge <b>804</b> delimit three geometric objects having three colors <b>806</b>A-<b>806</b>C. The specific color values are not material. The key concept is that the illustrated edges create a scenario in which samples of the pixels <b>801</b>A-<b>801</b>F can be associated with one of three colors <b>806</b>A-<b>806</b>C. As three colors are associated with the block of pixels, only three planes are necessary to store color data for the four samples per pixel.</p><p id="p-0149" num="0144">The coverage for the sample can be used to determine the color is associated with the sample. If a pixel is completely inside a triangle being rendered, then all color samples within the pixel will have the same color. Instead of storing duplicate color values for each pixel a multisample control surface <b>808</b> can be allocated to store a set of index values that map the samples for the block of pixels to the plane storing the associated color value. For example, pixel <b>801</b>A is entirely within edge <b>802</b>. Accordingly, all samples of pixel <b>801</b>A have color <b>806</b>A. This detail is also true for pixel <b>801</b>E-<b>801</b>F. Because pixels <b>801</b>A, <b>801</b>E, and <b>801</b>F only store a single color, only a single plane is needed. Accordingly, the multisample control surface <b>808</b> can indicate that each of sample 0-3 of pixels <b>801</b>A, <b>801</b>E, and <b>801</b>F are stored in plane 0. Plane 0 can then be used to store color <b>806</b>A.</p><p id="p-0150" num="0145">However, Pixel <b>801</b>B-<b>801</b>D are intersected by at least one of edge <b>802</b> or edge <b>804</b>. Edge <b>802</b> intersects pixel <b>801</b>B, pixel <b>801</b>C, and pixel <b>801</b>D, while edge <b>804</b> intersects pixel <b>801</b>C. Due to this intersection, three samples of pixel <b>801</b>B have color <b>806</b>A, while one sample of pixel <b>801</b>B has color <b>806</b>B. Specifically, numbering the samples from left to right, samples 0-2 have color <b>806</b>A and sample 3 has color <b>806</b>B. Accordingly, the multisample control surface <b>808</b> can indicate that pixel <b>801</b>B has sample data stored in plane 0 for samples 0-2, while sample data for sample 3 is stored in plane 1 (01b). Pixel <b>801</b>C has samples 0-1 with color <b>806</b>B and samples 2-3 with color <b>806</b>C. Color <b>806</b>B can be stored in plane 1, while color <b>806</b>C can be stored in plane 2 (0b10), as indicated by the multisample control surface <b>808</b>. Pixel <b>801</b>D has samples 0-1 having color <b>806</b>A and samples 2-3 having color <b>806</b>C. Accordingly, sample data for pixel <b>801</b>D, as indicated by the multisample control surface <b>808</b>, can store sample data in plane 0 (0b00) for sample 0-1 and plane 2 (0b10) for samples 2-3. Using this technique, memory bandwidth requirements for MSAA can be significantly reduced.</p><p id="p-0151" num="0146"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is an illustration of fragment/pixel processing unit, according to an embodiment. The fragment/pixel processing unit <b>524</b>, also shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, includes a set of input registers <b>902</b> that receive input data from the rasterizer <b>522</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The input data includes fragment and coverage data that represents a rasterized portion of a primitive. The fragment data can be associated with a specific sample location within a pixel. The fragment data can include details such as a window space location of the fragment, clipping data associated with the fragment, multisample coverage masks when MSAA is enabled, and any other data that can be used to generate output color data for a pixel or sample associated with the fragment. The input data can be read from the input registers <b>902</b> by pixel shader logic <b>904</b>.</p><p id="p-0152" num="0147">The pixel shader logic <b>904</b> can perform various mathematical operations to map or blend texture and color data onto the input fragments. Based on the input data, the fragment can be shaded or can be discarded. The pixel shader logic <b>904</b> can communicate with a data crossbar <b>240</b> to access memory or other components of the graphics processing logic. The pixel shader logic <b>904</b> can use compute units within the GPU to perform the shading operations. Threads on the compute units are used to execute shading code that defines the pixel shader logic <b>904</b>. Groups of threads can be dispatched to the compute units to perform numerous shading operations in parallel. The pixel shader logic <b>904</b> can write results from the shading operations to output registers <b>908</b>. In various configurations, threads can be dispatched from the shader logic <b>904</b> on a per-pixel or a per-sample basis, where a pixel shader thread is executed once for each pixel or once for each sample within a pixel. For per-sample dispatch, an output mask <b>906</b> can be used to specify the samples for which the output is to be associated. The data in the output registers <b>908</b> can then be transmitted to a render cache, then evicted to the render target in memory. While <figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates pixel shader logic <b>904</b>, the fragment/pixel processing unit <b>524</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> can also be configured to perform other shading operations. In one embodiment the fragment/pixel processing unit <b>524</b> is part of a unified shader architecture and can be used to perform computations for vertex shaders and compute shaders as well as pixel or fragment shader programs.</p><heading id="h-0011" level="2">Progressive Multisample Anti-Aliasing (MSAA)</heading><p id="p-0153" num="0148"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates progressive MSAA plane allocation, according to an embodiment. In conventional MSAA techniques, when performing MSAA data compression an initial calculation is performed to determine the number of planes that are to be allocated for the render target. The necessary planes are then allocated to enable access merges across multiple pixels. However, such techniques are required to pre-determine the planes to be allocated, which may be an inefficient operation and consumes unnecessary system resources. Embodiment described herein can perform MSAA plane allocation without expensing computational time and system resources to review the planes to be allocated. This technique reduces the required amount of logic gates required to implement MSAA plane allocation and has a lower power consumption relative to previous techniques.</p><p id="p-0154" num="0149">As illustrated, a pixel MSAA plane allocator <b>1010</b> is configured to perform per-pixel memory plane allocation for multiple pixels in parallel. Sample data <b>1004</b> (e.g., <b>1004</b>A-<b>1004</b>D) determined by pixel shader logic can be processed by MSAA compression logic within MSAA compression modules <b>1006</b>A-<b>1006</b>D to reduce the amount of data required to be transmitted to a multisample render target. The MSAA compression modules <b>1006</b>A-<b>1006</b>D are configured to choose the lowest order plane available to store the sample data. The lowest order plane is the lowest plane number that is referenced by the samples for a pixel. For example, if sample data <b>1004</b>A for pixel 0 references plane 0 [P0] and plane 1 [P1], MSAA compression module <b>1006</b>A will select plane 0 [P0] for allocation for the pixel input for pixel 0. If sample data <b>1004</b>B for pixel 1 references plane 1 [P1] and plane 2 [P2], then MSAA compression module <b>1006</b>B will select plane 1 [P1] for allocation. If sample data <b>1004</b>C for pixel 2 references plane 1 [P1] and plane 3 [P3], then MSAA compression module <b>1006</b>C will select plane 1 [P1] for allocation. If sample data <b>1004</b>D for pixel 3 references plane 2 [P2] and plane 3 [P3], then MSAA compression module <b>1006</b>D will select plane 2 [P2] for allocation. The selected lowest order planes define the pixel inputs <b>1008</b> that are supplied as pixel data <b>1008</b> to pixel MSAA plane allocator <b>1010</b>.</p><p id="p-0155" num="0150">Instead of allocating all planes in an initial pass, the pixel MSAA plane allocator <b>1010</b> performs allocation in a progressive manner. Planes for each pixel are allocated from lowest order to highest order and an allocation merge can be performed for multiple pixels that require allocation for the same plane. The plane to pixel mapping <b>1014</b> illustrates the planes allocated for pixel data <b>1008</b> that is handled by the pixel MSAA plane allocator <b>1010</b>. For a first cycle, pixel 0 allocates space for plane 0 [P0]. During a second cycle, an allocation merge can be performed to allocate plane 1 [P1] for both pixel 1 and pixel 2. During a third cycle, plane 2 [P2] is allocated for pixel 3. As shown in the pixel mapping <b>1014</b>, pixel 1 and pixel 2 reference plane 1 [P1]. Accordingly, the allocation for pixel 1 and pixel 2 can be performed during the same cycle, reducing the amount of time required to perform plane allocations for the pixel. If, for example, all the pixels of the pixel inputs <b>1008</b> were to reference the same plane, for example, plane 0, then the allocation for all the pixels can be performed in a single cycle. In one embodiment accumulated data from the plane to pixel mapping <b>1014</b> can be used to create the multisample control surface <b>808</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The multisample control surface can be used to unpack the sample data during subsequent processing of the multisample render target to which the multisample data is to be written. In one embodiment, when the MSAA compression modules <b>1006</b>A-<b>1006</b>D consistently detect only plane 0 [P0] allocations, the MSAA compression modules can request a lower bus frequency to reduce system power consumption.</p><heading id="h-0012" level="2">Lossless Compression of MSRT Data Alongside Fragment Compression</heading><p id="p-0156" num="0151">In one embodiment, lossless color compression is combined with MSAA sample compression. To combine lossless compression with MSAA compression, multiple control surfaces are used. A first control surface (e.g., the multisample control surface) is used to specify the location of the sample data for the pixels. An additional control surface can be associated with each plane that is allocated to maintain compression related metadata for each allocated plane. The compression metadata can specify a compression status for the plane to indicate whether the data for the plane is compressed or uncompressed. In one embodiment the compression metadata can also specify a clear status for the plane to indicate whether the plane data has been set to a clear color.</p><p id="p-0157" num="0152"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a system <b>1100</b> to implement lossless compression of data within a multisample render target, according to an embodiment. To perform MSAA compression, for example, as illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a set of input pixels <b>1102</b> can be processed by an MSAA compression module <b>1104</b>. The MSAA compression module <b>1104</b> can be similar to the MSAA compression modules <b>1006</b>A-<b>1006</b>D as in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. The MSAA compression module <b>1104</b> can examine the number of colors that are to be stored for the various samples of the set of input pixels <b>1102</b>. The illustrated set of input pixels is a 4&#xd7;4 block of pixels, although embodiments are not so limited. The pixel data for the set of input pixels can be written to a render cache, such as the render cache <b>624</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. Upon eviction from the render cache, the set of input pixels can be processed by the MSAA compression module <b>1104</b> to compact the sample data by storing only the unique color values that are contained within the set of input pixels.</p><p id="p-0158" num="0153">As described with respect to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, planes can be allocated based on the number of different colors in the block of pixels. Additionally, planes can be allocated in a progressive manner, as illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. Up to N planes may be allocated (0, N&#x2212;1) for N&#xd7;MSAA, as for a given set of pixels, up to N colors may be present. N control surfaces can be allocated for each plane to store a per-plane compression status for the plane. For example, for 4&#xd7;MSAA, up to 4 planes and 4 control surfaces <b>1110</b>A-<b>1110</b>D can be allocated to store a compression status for each plane. A mapping between samples and planes can be generated and stored in a multisample control surface <b>1108</b>, which can be a variant of the multisample control surface <b>808</b> as in <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0159" num="0154">After the MSAA compression module <b>1104</b> compresses the sample data, a lossless compression module <b>1105</b> can perform lossless compression on the individual planes. The specific lossless compression algorithm can vary and the target compression ratio can vary based on the compression algorithm and the input data. In one embodiment, multiple compression algorithms can be tested against the pixel data and the compression algorithm that achieves the highest compression ratio can be used. In such embodiment, the control surface associated with the plane containing the compressed data can be updated to indicate a compressed status for the plane as well as a codec used to compress the data. In one embodiment, the lossless compression module <b>1105</b> will attempt to compress the pixel data to a target compression ratio and, if the target compression ratio cannot be achieved, the pixel data will be stored in an uncompressed format. In such embodiment, if the pixel data for a plane cannot be compressed, the associated control surface <b>1110</b>A-<b>1110</b>D for the plane will be updated to indicate that the plane data is stored in an uncompressed format. In general, for each plane a set of per-plane compression control surface (CCS) updates <b>1107</b> are performed up indicate a compression status for each plane.</p><p id="p-0160" num="0155">In one embodiment if all pixels in a block of pixels are clear, no memory may be required, as metadata can indicate that the block of input pixels has been cleared to the clear color. In such scenario, a clear color sampling rendering mechanism can be used in which pixel data that has been cleared to a pre-defined clear color is not required to be stored in memory. Instead, metadata associated with the pixel can indicate that the pixel color is stored, for example, in an internal clear color register. In one embodiment, if a block of pixels has at least some clear pixels, a control surface can be allocated to specify the clear color status for the pixel data without requiring an underlying plane allocation.</p><p id="p-0161" num="0156"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a compression control surface <b>1200</b>, according to an embodiment. In one embodiment a set of compression control surfaces <b>1200</b>, which can be similar to the compression control surfaces <b>1110</b>A-<b>1110</b>D of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, can store a variety of data that is used to specify a compression, data, or clear status <b>1202</b> of a plane used for lossless color compression. The compression control surfaces <b>1200</b> can be an indexed array of control surfaces in which the index to a given control surface is defined by the plane to which the compression control surface is associated. For example, compression control surface [0] can store information related to a compression, data, or clear status for plane 0. Compression control surface [1] can be used to store status for plane 1.</p><p id="p-0162" num="0157">In some instances, an equal number of compression control surfaces can be allocated as the number of planes that store multisample data for a block of pixels. However, where the pixel data for a plane is set to a clear color following a clear operation, the compression control surface <b>1108</b> can indicate that the plane is clear without requiring an actual data allocation for the plane. For example, a set of virtual memory addresses can be associated with a plane that stores clear pixels, but a backing physical memory allocation will not be created and an actual memory access will not occur.</p><p id="p-0163" num="0158">In one embodiment, multiple types of compression algorithms can be applied to color data. A codec entry <b>1204</b> within the compression control surface <b>1108</b> can specify the compression algorithm or compression method that is associated with the plane that the compression control surface <b>1200</b> references. In one embodiment different hardware codecs are associated with different lossless compression techniques or algorithms. In such embodiment the codec <b>1204</b> can be used as routing information to determine the hardware block to which the plane data is to be sent for decompression. In one embodiment the compression control surfaces <b>1200</b> can be stored in a compressed format. Components of the pixel processing pipeline of the graphics processor can be configured to decompress the compression control surfaces <b>1200</b> before use.</p><p id="p-0164" num="0159">While planar MSAA is described herein, embodiments are not strictly limited to implementations that store MSAA data in a planar format. Embodiments can be applied to any data arrangement for multisample data, including packed pixel or interleaved formats in which the sample data for each pixel is stored in an interleaved format. In such embodiments, the control surfaces can reference virtual planes that are associated with a subset of an interleaved surface.</p><p id="p-0165" num="0160"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram illustrating progressive multisample antialiasing, according to an embodiment. Instead of determining the number of planes that are to be allocated for the render target in advance, embodiment described herein can perform MSAA plane allocation without expensing computational time and system resources to review the planes to be allocated. The progressive plane allocation can be performed by an MSAA compression module and an MSAA plane allocator, such as the MSAA compression modules <b>1006</b>A-<b>1006</b>D and pixel MSAA plane allocator <b>1010</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>. In one embodiment an MSAA compression module can analyze color data for a set of multiple sample locations in a first pixel, as shown at block <b>1302</b>. The color data can be generated by a fragment processing unit, such as the fragment processing unit <b>524</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The compression module can determine a first plane to allocate for the first pixel, as shown at block <b>1304</b>. The first plane is a lowest order plane to be allocated for the first pixel. An MSAA plane allocator can then merge a plane allocation for the first pixel with a plane allocation for a second pixel when the first plane is the lowest order plane to be allocated for the second pixel, as shown at block <b>1306</b>.</p><p id="p-0166" num="0161"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a block diagram illustrating lossless compression of multisample render target data alongside fragment compression, according to an embodiment. Lossless compression of multisample render target data can be performed by a lossless compression module, which can apply one or more lossless compression algorithms to color data. The lossless compression algorithm can be any lossless compression algorithm known in the art, such as a delta compression algorithm. In one embodiment the lossless compression module is configured to only compress data that is losslessly compressible to a target compression ratio (e.g., 2:1, 4:1, etc.). In one embodiment the lossless compression module can be configured to select from multiple lossless compression algorithms. The lossless compression is applied in concert with MSAA compression, which removes duplicate sample data before writing the sample data to a multisample render target. To track a compression status for the color data, a compression control surface is maintained for each data plane that stores the color data. The compression control surface can indicate a compressed status, an uncompressed status, or a cleared status.</p><p id="p-0167" num="0162">In one embodiment an MSAA compression module can compact sample data for multiple samples of a pixel by storing unique color values contained within the multiple samples, as shown at block <b>1402</b>. The MSAA compression module can then map the sample data to a set of memory planes storing the unique color values, as shown at block <b>1404</b>. The set of memory planes are memory locations allocated to store the unique color values. A lossless compression module can then apply lossless compression to the unique color values in the set of memory planes, as shown at block <b>1406</b>. The lossless compression module can then update a compression control surface for each memory plane in the set of memory planes to indicate a compressed or uncompressed status for each memory plane, as shown at <b>1408</b>. In one embodiment compression control surfaces are stored in a compressed format. Accordingly, to updating a compressed compression control surface can include decompressing the compressed control surface, updating the control surface, and recompressing the compressed control surface.</p><heading id="h-0013" level="2">Additional Exemplary Graphics Processing System</heading><p id="p-0168" num="0163">Details of the embodiments described above can be incorporated within graphics processing systems and devices described below. The graphics processing system and devices of <figref idref="DRAWINGS">FIG. <b>15</b>-<b>28</b></figref> illustrate alternative systems and graphics processing hardware that can implement any and all of the techniques described above.</p><p id="p-0169" num="0164"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a block diagram of a processing system <b>1500</b>, according to an embodiment. In various embodiments the system <b>1500</b> includes one or more processors <b>1502</b> and one or more graphics processors <b>1508</b>, and may be a single processor desktop system, a multiprocessor workstation system, or a server system having a large number of processors <b>1502</b> or processor cores <b>1507</b>. In one embodiment, the system <b>1500</b> is a processing platform incorporated within a system-on-a-chip (SoC) integrated circuit for use in mobile, handheld, or embedded devices.</p><p id="p-0170" num="0165">An embodiment of system <b>1500</b> can include, or be incorporated within a server-based gaming platform, a game console, including a game and media console, a mobile gaming console, a handheld game console, or an online game console. In some embodiments system <b>1500</b> is a mobile phone, smart phone, tablet computing device or mobile Internet device. Data processing system <b>1500</b> can also include, couple with, or be integrated within a wearable device, such as a smart watch wearable device, smart eyewear device, augmented reality device, or virtual reality device. In some embodiments, data processing system <b>1500</b> is a television or set top box device having one or more processors <b>1502</b> and a graphical interface generated by one or more graphics processors <b>1508</b>.</p><p id="p-0171" num="0166">In some embodiments, the one or more processors <b>1502</b> each include one or more processor cores <b>1507</b> to process instructions which, when executed, perform operations for system and user software. In some embodiments, each of the one or more processor cores <b>1507</b> is configured to process a specific instruction set <b>1509</b>. In some embodiments, instruction set <b>1509</b> may facilitate Complex Instruction Set Computing (CISC), Reduced Instruction Set Computing (RISC), or computing via a Very Long Instruction Word (VLIW). Multiple processor cores <b>1507</b> may each process a different instruction set <b>1509</b>, which may include instructions to facilitate the emulation of other instruction sets. Processor core <b>1507</b> may also include other processing devices, such a Digital Signal Processor (DSP).</p><p id="p-0172" num="0167">In some embodiments, the processor <b>1502</b> includes cache memory <b>1504</b>. Depending on the architecture, the processor <b>1502</b> can have a single internal cache or multiple levels of internal cache. In some embodiments, the cache memory is shared among various components of the processor <b>1502</b>. In some embodiments, the processor <b>1502</b> also uses an external cache (e.g., a Level-3 (L3) cache or Last Level Cache (LLC)) (not shown), which may be shared among processor cores <b>1507</b> using known cache coherency techniques. A register file <b>1506</b> is additionally included in processor <b>1502</b> which may include different types of registers for storing different types of data (e.g., integer registers, floating-point registers, status registers, and an instruction pointer register). Some registers may be general-purpose registers, while other registers may be specific to the design of the processor <b>1502</b>.</p><p id="p-0173" num="0168">In some embodiments, processor <b>1502</b> is coupled with a processor bus <b>1510</b> to transmit communication signals such as address, data, or control signals between processor <b>1502</b> and other components in system <b>1500</b>. In one embodiment the system <b>1500</b> uses an exemplary &#x2018;hub&#x2019; system architecture, including a memory controller hub <b>1516</b> and an Input Output (I/O) controller hub <b>1530</b>. A memory controller hub <b>1516</b> facilitates communication between a memory device and other components of system <b>1500</b>, while an I/O Controller Hub (ICH) <b>1530</b> provides connections to I/O devices via a local I/O bus. In one embodiment, the logic of the memory controller hub <b>1516</b> is integrated within the processor.</p><p id="p-0174" num="0169">Memory device <b>1520</b> can be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory device, phase-change memory device, or some other memory device having suitable performance to serve as process memory. In one embodiment the memory device <b>1520</b> can operate as system memory for the system <b>1500</b>, to store data <b>1522</b> and instructions <b>1521</b> for use when the one or more processors <b>1502</b> executes an application or process. Memory controller hub <b>1516</b> also couples with an optional external graphics processor <b>1512</b>, which may communicate with the one or more graphics processors <b>1508</b> in processors <b>1502</b> to perform graphics and media operations.</p><p id="p-0175" num="0170">In some embodiments, ICH <b>1530</b> enables peripherals to connect to memory device <b>1520</b> and processor <b>1502</b> via a high-speed I/O bus. The I/O peripherals include, but are not limited to, an audio controller <b>1546</b>, a firmware interface <b>1528</b>, a wireless transceiver <b>1526</b> (e.g., Wi-Fi, Bluetooth), a data storage device <b>1524</b> (e.g., hard disk drive, flash memory, etc.), and a legacy I/O controller <b>1540</b> for coupling legacy (e.g., Personal System 2 (PS/2)) devices to the system. One or more Universal Serial Bus (USB) controllers <b>1542</b> connect input devices, such as keyboard and mouse <b>1544</b> combinations. A network controller <b>1534</b> may also couple with ICH <b>1530</b>. In some embodiments, a high-performance network controller (not shown) couples with processor bus <b>1510</b>. It will be appreciated that the system <b>1500</b> shown is exemplary and not limiting, as other types of data processing systems that are differently configured may also be used. For example, the I/O controller hub <b>1530</b> may be integrated within the one or more processor <b>1502</b>, or the memory controller hub <b>1516</b> and I/O controller hub <b>1530</b> may be integrated into a discreet external graphics processor, such as the external graphics processor <b>1512</b>.</p><p id="p-0176" num="0171"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a block diagram of an embodiment of a processor <b>1600</b> having one or more processor cores <b>1602</b>A-<b>1602</b>N, an integrated memory controller <b>1614</b>, and an integrated graphics processor <b>1608</b>. Those elements of <figref idref="DRAWINGS">FIG. <b>16</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such. Processor <b>1600</b> can include additional cores up to and including additional core <b>1602</b>N represented by the dashed lined boxes. Each of processor cores <b>1602</b>A-<b>1602</b>N includes one or more internal cache units <b>1604</b>A-<b>1604</b>N. In some embodiments each processor core also has access to one or more shared cached units <b>1606</b>.</p><p id="p-0177" num="0172">The internal cache units <b>1604</b>A-<b>1604</b>N and shared cache units <b>1606</b> represent a cache memory hierarchy within the processor <b>1600</b>. The cache memory hierarchy may include at least one level of instruction and data cache within each processor core and one or more levels of shared mid-level cache, such as a Level 2 (L2), Level 3 (L3), Level 4 (L4), or other levels of cache, where the highest level of cache before external memory is classified as the LLC. In some embodiments, cache coherency logic maintains coherency between the various cache units <b>1606</b> and <b>1604</b>A-<b>1604</b>N.</p><p id="p-0178" num="0173">In some embodiments, processor <b>1600</b> may also include a set of one or more bus controller units <b>1616</b> and a system agent core <b>1610</b>. The one or more bus controller units <b>1616</b> manage a set of peripheral buses, such as one or more Peripheral Component Interconnect buses (e.g., PCI, PCI Express). System agent core <b>1610</b> provides management functionality for the various processor components. In some embodiments, system agent core <b>1610</b> includes one or more integrated memory controllers <b>1614</b> to manage access to various external memory devices (not shown).</p><p id="p-0179" num="0174">In some embodiments, one or more of the processor cores <b>1602</b>A-<b>1602</b>N include support for simultaneous multi-threading. In such embodiment, the system agent core <b>1610</b> includes components for coordinating and operating cores <b>1602</b>A-<b>1602</b>N during multi-threaded processing. System agent core <b>1610</b> may additionally include a power control unit (PCU), which includes logic and components to regulate the power state of processor cores <b>1602</b>A-<b>1602</b>N and graphics processor <b>1608</b>.</p><p id="p-0180" num="0175">In some embodiments, processor <b>1600</b> additionally includes graphics processor <b>1608</b> to execute graphics processing operations. In some embodiments, the graphics processor <b>1608</b> couples with the set of shared cache units <b>1606</b>, and the system agent core <b>1610</b>, including the one or more integrated memory controllers <b>1614</b>. In some embodiments, a display controller <b>1611</b> is coupled with the graphics processor <b>1608</b> to drive graphics processor output to one or more coupled displays. In some embodiments, display controller <b>1611</b> may be a separate module coupled with the graphics processor via at least one interconnect, or may be integrated within the graphics processor <b>1608</b> or system agent core <b>1610</b>.</p><p id="p-0181" num="0176">In some embodiments, a ring-based interconnect <b>1612</b> is used to couple the internal components of the processor <b>1600</b>. However, an alternative interconnect unit may be used, such as a point-to-point interconnect, a switched interconnect, or other techniques, including techniques well known in the art. In some embodiments, graphics processor <b>1608</b> couples with the ring-based interconnect <b>1612</b> via an I/O link <b>1613</b>.</p><p id="p-0182" num="0177">The exemplary I/O link <b>1613</b> represents at least one of multiple varieties of I/O interconnects, including an on package I/O interconnect which facilitates communication between various processor components and a high-performance embedded memory module <b>1618</b>, such as an module. In some embodiments, each of the processor cores <b>1602</b>A-<b>1602</b>N and graphics processor <b>1608</b> use embedded memory modules <b>1618</b> as a shared Last Level Cache.</p><p id="p-0183" num="0178">In some embodiments, processor cores <b>1602</b>A-<b>1602</b>N are homogenous cores executing the same instruction set architecture. In another embodiment, processor cores <b>1602</b>A-<b>1602</b>N are heterogeneous in terms of instruction set architecture (ISA), where one or more of processor cores <b>1602</b>A-<b>1602</b>N execute a first instruction set, while at least one of the other cores executes a subset of the first instruction set or a different instruction set. In one embodiment processor cores <b>1602</b>A-<b>1602</b>N are heterogeneous in terms of microarchitecture, where one or more cores having a relatively higher power consumption couple with one or more power cores having a lower power consumption. Additionally, processor <b>1600</b> can be implemented on one or more chips or as an SoC integrated circuit having the illustrated components, in addition to other components.</p><p id="p-0184" num="0179"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram of a graphics processor <b>1700</b>, which may be a discrete graphics processing unit, or may be a graphics processor integrated with a plurality of processing cores. In some embodiments, the graphics processor communicates via a memory mapped I/O interface to registers on the graphics processor and with commands placed into the processor memory. In some embodiments, graphics processor <b>1700</b> includes a memory interface <b>1714</b> to access memory. Memory interface <b>1714</b> can be an interface to local memory, one or more internal caches, one or more shared external caches, and/or to system memory.</p><p id="p-0185" num="0180">In some embodiments, graphics processor <b>1700</b> also includes a display controller <b>1702</b> to drive display output data to a display device <b>1720</b>. Display controller <b>1702</b> includes hardware for one or more overlay planes for the display and composition of multiple layers of video or user interface elements. In some embodiments, graphics processor <b>1700</b> includes a video codec engine <b>1706</b> to encode, decode, or transcode media to, from, or between one or more media encoding formats, including, but not limited to Moving Picture Experts Group (MPEG) formats such as MPEG-2, Advanced Video Coding (AVC) formats such as H.264/MPEG-4 AVC, as well as the Society of Motion Picture &#x26; Television Engineers (SMPTE) 421M/VC-1, and Joint Photographic Experts Group (JPEG) formats such as JPEG, and Motion JPEG (MJPEG) formats.</p><p id="p-0186" num="0181">In some embodiments, graphics processor <b>1700</b> includes a block image transfer (BLIT) engine <b>1704</b> to perform two-dimensional (2D) rasterizer operations including, for example, bit-boundary block transfers. However, in one embodiment, 2D graphics operations are performed using one or more components of graphics processing engine (GPE) <b>1710</b>. In some embodiments, GPE <b>1710</b> is a compute engine for performing graphics operations, including three-dimensional (3D) graphics operations and media operations.</p><p id="p-0187" num="0182">In some embodiments, GPE <b>310</b> includes a 3D pipeline <b>1712</b> for performing 3D operations, such as rendering three-dimensional images and scenes using processing functions that act upon 3D primitive shapes (e.g., rectangle, triangle, etc.). The 3D pipeline <b>1712</b> includes programmable and fixed function elements that perform various tasks within the element and/or spawn execution threads to a 3D/Media subsystem <b>1715</b>. While 3D pipeline <b>1712</b> can be used to perform media operations, an embodiment of GPE <b>1710</b> also includes a media pipeline <b>1716</b> that is specifically used to perform media operations, such as video post-processing and image enhancement.</p><p id="p-0188" num="0183">In some embodiments, media pipeline <b>1716</b> includes fixed function or programmable logic units to perform one or more specialized media operations, such as video decode acceleration, video de-interlacing, and video encode acceleration in place of, or on behalf of video codec engine <b>1706</b>. In some embodiments, media pipeline <b>1716</b> additionally includes a thread spawning unit to spawn threads for execution on 3D/Media subsystem <b>1715</b>. The spawned threads perform computations for the media operations on one or more graphics execution units included in 3D/Media subsystem <b>1715</b>.</p><p id="p-0189" num="0184">In some embodiments, 3D/Media subsystem <b>1715</b> includes logic for executing threads spawned by 3D pipeline <b>1712</b> and media pipeline <b>1716</b>. In one embodiment, the pipelines send thread execution requests to 3D/Media subsystem <b>1715</b>, which includes thread dispatch logic for arbitrating and dispatching the various requests to available thread execution resources. The execution resources include an array of graphics execution units to process the 3D and media threads. In some embodiments, 3D/Media subsystem <b>1715</b> includes one or more internal caches for thread instructions and data. In some embodiments, the subsystem also includes shared memory, including registers and addressable memory, to share data between threads and to store output data.</p><heading id="h-0014" level="2">Additional Exemplary Graphics Processing Engine</heading><p id="p-0190" num="0185"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram of a graphics processing engine <b>1810</b> of a graphics processor in accordance with some embodiments. In one embodiment, the graphics processing engine (GPE) <b>1810</b> is a version of the GPE <b>1710</b> shown in <figref idref="DRAWINGS">FIG. <b>17</b></figref>. Elements of <figref idref="DRAWINGS">FIG. <b>18</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such. For example, the 3D pipeline <b>1712</b> and media pipeline <b>1716</b> of <figref idref="DRAWINGS">FIG. <b>17</b></figref> are illustrated. The media pipeline <b>1716</b> is optional in some embodiments of the GPE <b>1810</b> and may not be explicitly included within the GPE <b>1810</b>. For example and in at least one embodiment, a separate media and/or image processor is coupled to the GPE <b>1810</b>.</p><p id="p-0191" num="0186">In some embodiments, GPE <b>1810</b> couples with or includes a command streamer <b>1803</b>, which provides a command stream to the 3D pipeline <b>1712</b> and/or media pipelines <b>1716</b>. In some embodiments, command streamer <b>1803</b> is coupled with memory, which can be system memory, or one or more of internal cache memory and shared cache memory. In some embodiments, command streamer <b>1803</b> receives commands from the memory and sends the commands to 3D pipeline <b>1712</b> and/or media pipeline <b>1716</b>. The commands are directives fetched from a ring buffer, which stores commands for the 3D pipeline <b>1712</b> and media pipeline <b>1716</b>. In one embodiment, the ring buffer can additionally include batch command buffers storing batches of multiple commands. The commands for the 3D pipeline <b>1712</b> can also include references to data stored in memory, such as but not limited to vertex and geometry data for the 3D pipeline <b>1712</b> and/or image data and memory objects for the media pipeline <b>1716</b>. The 3D pipeline <b>1712</b> and media pipeline <b>1716</b> process the commands and data by performing operations via logic within the respective pipelines or by dispatching one or more execution threads to a graphics core array <b>1814</b>.</p><p id="p-0192" num="0187">In various embodiments the 3D pipeline <b>1712</b> can execute one or more shader programs, such as vertex shaders, geometry shaders, pixel shaders, fragment shaders, compute shaders, or other shader programs, by processing the instructions and dispatching execution threads to the graphics core array <b>1814</b>. The graphics core array <b>1814</b> provides a unified block of execution resources. Multi-purpose execution logic (e.g., execution units) within the graphics core array <b>1814</b> includes support for various 3D API shader languages and can execute multiple simultaneous execution threads associated with multiple shaders.</p><p id="p-0193" num="0188">In some embodiments the graphics core array <b>1814</b> also includes execution logic to perform media functions, such as video and/or image processing. In one embodiment, the execution units additionally include general-purpose logic that is programmable to perform parallel general-purpose computational operations, in addition to graphics processing operations. The general-purpose logic can perform processing operations in parallel or in conjunction with general-purpose logic within the processor core(s) <b>1507</b> of <figref idref="DRAWINGS">FIG. <b>15</b></figref> or core <b>1602</b>A-<b>1602</b>N as in <figref idref="DRAWINGS">FIG. <b>16</b></figref>.</p><p id="p-0194" num="0189">Output data generated by threads executing on the graphics core array <b>1814</b> can output data to memory in a unified return buffer (URB) <b>1818</b>. The URB <b>1818</b> can store data for multiple threads. In some embodiments the URB <b>1818</b> may be used to send data between different threads executing on the graphics core array <b>1814</b>. In some embodiments the URB <b>1818</b> may additionally be used for synchronization between threads on the graphics core array and fixed function logic within the shared function logic <b>1820</b>.</p><p id="p-0195" num="0190">In some embodiments, graphics core array <b>1814</b> is scalable, such that the array includes a variable number of graphics cores, each having a variable number of execution units based on the target power and performance level of GPE <b>1810</b>. In one embodiment the execution resources are dynamically scalable, such that execution resources may be enabled or disabled as needed.</p><p id="p-0196" num="0191">The graphics core array <b>1814</b> couples with shared function logic <b>1820</b> that includes multiple resources that are shared between the graphics cores in the graphics core array. The shared functions within the shared function logic <b>1820</b> are hardware logic units that provide specialized supplemental functionality to the graphics core array <b>1814</b>. In various embodiments, shared function logic <b>1820</b> includes but is not limited to sampler <b>1821</b>, math <b>1822</b>, and inter-thread communication (ITC) <b>1823</b> logic. Additionally, some embodiments implement one or more cache(s) <b>1825</b> within the shared function logic <b>1820</b>. A shared function is implemented where the demand for a given specialized function is insufficient for inclusion within the graphics core array <b>1814</b>. Instead a single instantiation of that specialized function is implemented as a stand-alone entity in the shared function logic <b>1820</b> and shared among the execution resources within the graphics core array <b>1814</b>. The precise set of functions that are shared between the graphics core array <b>1814</b> and included within the graphics core array <b>1814</b> varies between embodiments.</p><p id="p-0197" num="0192"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram of another embodiment of a graphics processor <b>1900</b>. Elements of <figref idref="DRAWINGS">FIG. <b>19</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such.</p><p id="p-0198" num="0193">In some embodiments, graphics processor <b>1900</b> includes a ring interconnect <b>1902</b>, a pipeline front-end <b>1904</b>, a media engine <b>1937</b>, and graphics cores <b>1980</b>A-<b>1980</b>N. In some embodiments, ring interconnect <b>1902</b> couples the graphics processor to other processing units, including other graphics processors or one or more general-purpose processor cores. In some embodiments, the graphics processor is one of many processors integrated within a multi-core processing system.</p><p id="p-0199" num="0194">In some embodiments, graphics processor <b>1900</b> receives batches of commands via ring interconnect <b>1902</b>. The incoming commands are interpreted by a command streamer <b>1903</b> in the pipeline front-end <b>1904</b>. In some embodiments, graphics processor <b>1900</b> includes scalable execution logic to perform 3D geometry processing and media processing via the graphics core(s) <b>1980</b>A-<b>1980</b>N. For 3D geometry processing commands, command streamer <b>1903</b> supplies commands to geometry pipeline <b>1936</b>. For at least some media processing commands, command streamer <b>1903</b> supplies the commands to a video front end <b>1934</b>, which couples with a media engine <b>1937</b>. In some embodiments, media engine <b>1937</b> includes a Video Quality Engine (VQE) <b>1930</b> for video and image post-processing and a multi-format encode/decode (MFX) <b>1933</b> engine to provide hardware-accelerated media data encode and decode. In some embodiments, geometry pipeline <b>1936</b> and media engine <b>1937</b> each generate execution threads for the thread execution resources provided by at least one graphics core <b>1980</b>A.</p><p id="p-0200" num="0195">In some embodiments, graphics processor <b>1900</b> includes scalable thread execution resources featuring modular cores <b>1980</b>A-<b>1980</b>N (sometimes referred to as core slices), each having multiple sub-cores <b>1950</b>A-<b>550</b>N, <b>1960</b>A-<b>1960</b>N (sometimes referred to as core sub-slices). In some embodiments, graphics processor <b>1900</b> can have any number of graphics cores <b>1980</b>A through <b>1980</b>N. In some embodiments, graphics processor <b>1900</b> includes a graphics core <b>1980</b>A having at least a first sub-core <b>1950</b>A and a second sub-core <b>1960</b>A. In other embodiments, the graphics processor is a low power processor with a single sub-core (e.g., <b>1950</b>A). In some embodiments, graphics processor <b>1900</b> includes multiple graphics cores <b>1980</b>A-<b>1980</b>N, each including a set of first sub-cores <b>1950</b>A-<b>1950</b>N and a set of second sub-cores <b>1960</b>A-<b>1960</b>N. Each sub-core in the set of first sub-cores <b>1950</b>A-<b>1950</b>N includes at least a first set of execution units <b>1952</b>A-<b>1952</b>N and media/texture samplers <b>1954</b>A-<b>1954</b>N. Each sub-core in the set of second sub-cores <b>1960</b>A-<b>1960</b>N includes at least a second set of execution units <b>1962</b>A-<b>1962</b>N and samplers <b>1964</b>A-<b>1964</b>N. In some embodiments, each sub-core <b>1950</b>A-<b>1950</b>N, <b>1960</b>A-<b>1960</b>N shares a set of shared resources <b>1970</b>A-<b>1970</b>N. In some embodiments, the shared resources include shared cache memory and pixel operation logic. Other shared resources may also be included in the various embodiments of the graphics processor.</p><heading id="h-0015" level="2">Additional Exemplary Execution Units</heading><p id="p-0201" num="0196"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates thread execution logic <b>2000</b> including an array of processing elements employed in some embodiments of a GPE. Elements of <figref idref="DRAWINGS">FIG. <b>20</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein, but are not limited to such.</p><p id="p-0202" num="0197">In some embodiments, thread execution logic <b>2000</b> includes a shader processor <b>2002</b>, a thread dispatcher <b>2004</b>, instruction cache <b>2006</b>, a scalable execution unit array including a plurality of execution units <b>2008</b>A-<b>2008</b>N, a sampler <b>2010</b>, a data cache <b>2012</b>, and a data port <b>2014</b>. In one embodiment the scalable execution unit array can dynamically scale by enabling or disabling one or more execution units (e.g., any of execution unit <b>2008</b>A, <b>2008</b>B, <b>2008</b>C, <b>2008</b>D, through <b>2008</b>N-<b>1</b> and <b>2008</b>N) based on the computational requirements of a workload. In one embodiment the included components are interconnected via an interconnect fabric that links to each of the components. In some embodiments, thread execution logic <b>2000</b> includes one or more connections to memory, such as system memory or cache memory, through one or more of instruction cache <b>2006</b>, data port <b>2014</b>, sampler <b>2010</b>, and execution units <b>2008</b>A-<b>2008</b>N. In some embodiments, each execution unit (e.g. <b>2008</b>A) is a stand-alone programmable general-purpose computational unit that is capable of executing multiple simultaneous hardware threads while processing multiple data elements in parallel for each thread. In various embodiments, the array of execution units <b>2008</b>A-<b>2008</b>N is scalable to include any number individual execution units.</p><p id="p-0203" num="0198">In some embodiments, the execution units <b>2008</b>A-<b>2008</b>N are primarily used to execute shader programs. A shader processor <b>2002</b> can process the various shader programs and dispatch execution threads associated with the shader programs via a thread dispatcher <b>2004</b>. In one embodiment the thread dispatcher includes logic to arbitrate thread initiation requests from the graphics and media pipelines and instantiate the requested threads on one or more execution unit in the execution units <b>2008</b>A-<b>2008</b>N. For example, the geometry pipeline (e.g., <b>1936</b> of <figref idref="DRAWINGS">FIG. <b>19</b></figref>) can dispatch vertex, tessellation, or geometry shaders to the thread execution logic <b>2000</b> (<figref idref="DRAWINGS">FIG. <b>20</b></figref>) for processing. In some embodiments, thread dispatcher <b>2004</b> can also process runtime thread spawning requests from the executing shader programs.</p><p id="p-0204" num="0199">In some embodiments, the execution units <b>2008</b>A-<b>2008</b>N support an instruction set that includes native support for many standard 3D graphics shader instructions, such that shader programs from graphics libraries (e.g., Direct 3D and OpenGL) are executed with a minimal translation. The execution units support vertex and geometry processing (e.g., vertex programs, geometry programs, vertex shaders), pixel processing (e.g., pixel shaders, fragment shaders) and general-purpose processing (e.g., compute and media shaders). Each of the execution units <b>2008</b>A-<b>2008</b>N is capable of multi-issue single instruction multiple data (SIMD) execution and multi-threaded operation enables an efficient execution environment in the face of higher latency memory accesses. Each hardware thread within each execution unit has a dedicated high-bandwidth register file and associated independent thread-state. Execution is multi-issue per clock to pipelines capable of integer, single and double precision floating-point operations, SIMD branch capability, logical operations, transcendental operations, and other miscellaneous operations. While waiting for data from memory or one of the shared functions, dependency logic within the execution units <b>2008</b>A-<b>2008</b>N causes a waiting thread to sleep until the requested data has been returned. While the waiting thread is sleeping, hardware resources may be devoted to processing other threads. For example, during a delay associated with a vertex shader operation, an execution unit can perform operations for a pixel shader, fragment shader, or another type of shader program, including a different vertex shader.</p><p id="p-0205" num="0200">Each execution unit in execution units <b>2008</b>A-<b>2008</b>N operates on arrays of data elements. The number of data elements is the &#x201c;execution size,&#x201d; or the number of channels for the instruction. An execution channel is a logical unit of execution for data element access, masking, and flow control within instructions. The number of channels may be independent of the number of physical Arithmetic Logic Units (ALUs) or Floating-Point Units (FPUs) for a particular graphics processor. In some embodiments, execution units <b>2008</b>A-<b>2008</b>N support integer and floating-point data types.</p><p id="p-0206" num="0201">The execution unit instruction set includes SIMD instructions. The various data elements can be stored as a packed data type in a register and the execution unit will process the various elements based on the data size of the elements. For example, when operating on a 256-bit wide vector, the 256 bits of the vector are stored in a register and the execution unit operates on the vector as four separate 64-bit packed data elements (Quad-Word (QW) size data elements), eight separate 32-bit packed data elements (Double Word (DW) size data elements), sixteen separate 16-bit packed data elements (Word (W) size data elements), or thirty-two separate 8-bit data elements (byte (B) size data elements). However, different vector widths and register sizes are possible.</p><p id="p-0207" num="0202">One or more internal instruction caches (e.g., <b>2006</b>) are included in the thread execution logic <b>2000</b> to cache thread instructions for the execution units. In some embodiments, one or more data caches (e.g., <b>2012</b>) are included to cache thread data during thread execution. In some embodiments, a sampler <b>2010</b> is included to provide texture sampling for 3D operations and media sampling for media operations. In some embodiments, sampler <b>2010</b> includes specialized texture or media sampling functionality to process texture or media data during the sampling process before providing the sampled data to an execution unit.</p><p id="p-0208" num="0203">During execution, the graphics and media pipelines send thread initiation requests to thread execution logic <b>2000</b> via thread spawning and dispatch logic. Once a group of geometric objects has been processed and rasterized into pixel data, pixel processor logic (e.g., pixel shader logic, fragment shader logic, etc.) within the shader processor <b>2002</b> is invoked to further compute output information and cause results to be written to output surfaces (e.g., color buffers, depth buffers, stencil buffers, etc.). In some embodiments, a pixel shader or fragment shader calculates the values of the various vertex attributes that are to be interpolated across the rasterized object. In some embodiments, pixel processor logic within the shader processor <b>2002</b> then executes an application programming interface (API)-supplied pixel or fragment shader program. To execute the shader program, the shader processor <b>2002</b> dispatches threads to an execution unit (e.g., <b>2008</b>A) via thread dispatcher <b>2004</b>. In some embodiments, shader processor <b>2002</b> uses texture sampling logic in the sampler <b>2010</b> to access texture data in texture maps stored in memory. Arithmetic operations on the texture data and the input geometry data compute pixel color data for each geometric fragment, or discards one or more pixels from further processing.</p><p id="p-0209" num="0204">In some embodiments, the data port <b>2014</b> provides a memory access mechanism for the thread execution logic <b>2000</b> output processed data to memory for processing on a graphics processor output pipeline. In some embodiments, the data port <b>2014</b> includes or couples to one or more cache memories (e.g., data cache <b>2012</b>) to cache data for memory access via the data port.</p><p id="p-0210" num="0205"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram illustrating graphics processor instruction formats <b>2100</b> according to some embodiments. In one or more embodiment, the graphics processor execution units support an instruction set having instructions in multiple formats. The solid lined boxes illustrate the components that are generally included in an execution unit instruction, while the dashed lines include components that are optional or that are only included in a sub-set of the instructions. In some embodiments, instruction format <b>2100</b> described and illustrated are macro-instructions, in that they are instructions supplied to the execution unit, as opposed to micro-operations resulting from instruction decode once the instruction is processed.</p><p id="p-0211" num="0206">In some embodiments, the graphics processor execution units natively support instructions in a 128-bit instruction format <b>2110</b>. A 64-bit compacted instruction format <b>2130</b> is available for some instructions based on the selected instruction, instruction options, and number of operands. The native 128-bit instruction format <b>710</b> provides access to all instruction options, while some options and operations are restricted in the 64-bit format <b>2130</b>. The native instructions available in the 64-bit format <b>2130</b> vary by embodiment. In some embodiments, the instruction is compacted in part using a set of index values in an index field <b>2113</b>. The execution unit hardware references a set of compaction tables based on the index values and uses the compaction table outputs to reconstruct a native instruction in the 128-bit instruction format <b>2110</b>.</p><p id="p-0212" num="0207">For each format, instruction opcode <b>2112</b> defines the operation that the execution unit is to perform. The execution units execute each instruction in parallel across the multiple data elements of each operand. For example, in response to an add instruction the execution unit performs a simultaneous add operation across each color channel representing a texture element or picture element. By default, the execution unit performs each instruction across all data channels of the operands. In some embodiments, instruction control field <b>2114</b> enables control over certain execution options, such as channels selection (e.g., predication) and data channel order (e.g., swizzle). For instructions in the 128-bit instruction format <b>2110</b> an exec-size field <b>2116</b> limits the number of data channels that will be executed in parallel. In some embodiments, exec-size field <b>2116</b> is not available for use in the 64-bit compact instruction format <b>2130</b>.</p><p id="p-0213" num="0208">Some execution unit instructions have up to three operands including two source operands, src<b>0</b> <b>2120</b>, src<b>1</b> <b>2122</b>, and one destination <b>2118</b>. In some embodiments, the execution units support dual destination instructions, where one of the destinations is implied. Data manipulation instructions can have a third source operand (e.g., SRC<b>2</b> <b>2124</b>), where the instruction opcode <b>2112</b> determines the number of source operands. An instruction's last source operand can be an immediate (e.g., hard-coded) value passed with the instruction.</p><p id="p-0214" num="0209">In some embodiments, the 128-bit instruction format <b>2110</b> includes an access/address mode field <b>2126</b> specifying, for example, whether direct register addressing mode or indirect register addressing mode is used. When direct register addressing mode is used, the register address of one or more operands is directly provided by bits in the instruction.</p><p id="p-0215" num="0210">In some embodiments, the 128-bit instruction format <b>2110</b> includes an access/address mode field <b>2126</b>, which specifies an address mode and/or an access mode for the instruction. In one embodiment the access mode is used to define a data access alignment for the instruction. Some embodiments support access modes including a 16-byte aligned access mode and a 1-byte aligned access mode, where the byte alignment of the access mode determines the access alignment of the instruction operands. For example, when in a first mode, the instruction may use byte-aligned addressing for source and destination operands and when in a second mode, the instruction may use 16-byte-aligned addressing for all source and destination operands.</p><p id="p-0216" num="0211">In one embodiment, the address mode portion of the access/address mode field <b>2126</b> determines whether the instruction is to use direct or indirect addressing. When direct register addressing mode is used bits in the instruction directly provide the register address of one or more operands. When indirect register addressing mode is used, the register address of one or more operands may be computed based on an address register value and an address immediate field in the instruction.</p><p id="p-0217" num="0212">In some embodiments instructions are grouped based on opcode <b>2112</b> bit-fields to simplify Opcode decode <b>2140</b>. For an 8-bit opcode, bits <b>4</b>, <b>5</b>, and <b>6</b> allow the execution unit to determine the type of opcode. The precise opcode grouping shown is merely an example. In some embodiments, a move and logic opcode group <b>2142</b> includes data movement and logic instructions (e.g., move (mov), compare (cmp)). In some embodiments, move and logic group <b>2142</b> shares the five most significant bits (MSB), where move (mov) instructions are in the form of 0000xxxxb and logic instructions are in the form of 0001xxxxb. A flow control instruction group <b>2144</b> (e.g., call, jump (jmp)) includes instructions in the form of 0010xxxxb (e.g., 0x20). A miscellaneous instruction group <b>2146</b> includes a mix of instructions, including synchronization instructions (e.g., wait, send) in the form of 0011xxxxb (e.g., 0x30). A parallel math instruction group <b>2148</b> includes component-wise arithmetic instructions (e.g., add, multiply (mul)) in the form of 0100xxxxb (e.g., 0x40). The parallel math group <b>2148</b> performs the arithmetic operations in parallel across data channels. The vector math group <b>2150</b> includes arithmetic instructions (e.g., dp4) in the form of 0101xxxxb (e.g., 0x50). The vector math group performs arithmetic such as dot product calculations on vector operands.</p><heading id="h-0016" level="2">Additional Exemplary Graphics Pipeline</heading><p id="p-0218" num="0213"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a block diagram of another embodiment of a graphics processor <b>2200</b>. Elements of <figref idref="DRAWINGS">FIG. <b>22</b></figref> having the same reference numbers (or names) as the elements of any other figure herein can operate or function in any manner similar to that described elsewhere herein but are not limited to such.</p><p id="p-0219" num="0214">In some embodiments, graphics processor <b>2200</b> includes a graphics pipeline <b>2220</b>, a media pipeline <b>2230</b>, a display engine <b>2240</b>, thread execution logic <b>2250</b>, and a render output pipeline <b>2270</b>. In some embodiments, graphics processor <b>2200</b> is a graphics processor within a multi-core processing system that includes one or more general-purpose processing cores. The graphics processor is controlled by register writes to one or more control registers (not shown) or via commands issued to graphics processor <b>2200</b> via a ring interconnect <b>2202</b>. In some embodiments, ring interconnect <b>2202</b> couples graphics processor <b>2200</b> to other processing components, such as other graphics processors or general-purpose processors. Commands from ring interconnect <b>2202</b> are interpreted by a command streamer <b>2203</b>, which supplies instructions to individual components of graphics pipeline <b>2220</b> or media pipeline <b>2230</b>.</p><p id="p-0220" num="0215">In some embodiments, command streamer <b>2203</b> directs the operation of a vertex fetcher <b>2205</b> that reads vertex data from memory and executes vertex-processing commands provided by command streamer <b>2203</b>. In some embodiments, vertex fetcher <b>2205</b> provides vertex data to a vertex shader <b>2207</b>, which performs coordinate space transformation and lighting operations to each vertex. In some embodiments, vertex fetcher <b>2205</b> and vertex shader <b>2207</b> execute vertex-processing instructions by dispatching execution threads to execution units <b>2252</b>A-<b>2252</b>B via a thread dispatcher <b>2231</b>.</p><p id="p-0221" num="0216">In some embodiments, execution units <b>2252</b>A-<b>2252</b>B are an array of vector processors having an instruction set for performing graphics and media operations. In some embodiments, execution units <b>2252</b>A-<b>2252</b>B have an attached L1 cache <b>2251</b> that is specific for each array or shared between the arrays. The cache can be configured as a data cache, an instruction cache, or a single cache that is partitioned to contain data and instructions in different partitions.</p><p id="p-0222" num="0217">In some embodiments, graphics pipeline <b>2220</b> includes tessellation components to perform hardware-accelerated tessellation of 3D objects. In some embodiments, a programmable hull shader <b>811</b> configures the tessellation operations. A programmable domain shader <b>817</b> provides back-end evaluation of tessellation output. A tessellator <b>2213</b> operates at the direction of hull shader <b>2211</b> and contains special purpose logic to generate a set of detailed geometric objects based on a coarse geometric model that is provided as input to graphics pipeline <b>2220</b>. In some embodiments, if tessellation is not used, tessellation components (e.g., hull shader <b>2211</b>, tessellator <b>2213</b>, and domain shader <b>2217</b>) can be bypassed.</p><p id="p-0223" num="0218">In some embodiments, complete geometric objects can be processed by a geometry shader <b>2219</b> via one or more threads dispatched to execution units <b>2252</b>A-<b>2252</b>B or can proceed directly to the clipper <b>2229</b>. In some embodiments, the geometry shader operates on entire geometric objects, rather than vertices or patches of vertices as in previous stages of the graphics pipeline. If the tessellation is disabled the geometry shader <b>2219</b> receives input from the vertex shader <b>2207</b>. In some embodiments, geometry shader <b>2219</b> is programmable by a geometry shader program to perform geometry tessellation if the tessellation units are disabled.</p><p id="p-0224" num="0219">Before rasterization, a clipper <b>2229</b> processes vertex data. The clipper <b>2229</b> may be a fixed function clipper or a programmable clipper having clipping and geometry shader functions. In some embodiments, a rasterizer and depth test component <b>2273</b> in the render output pipeline <b>2270</b> dispatches pixel shaders to convert the geometric objects into their per pixel representations. In some embodiments, pixel shader logic is included in thread execution logic <b>2250</b>. In some embodiments, an application can bypass the rasterizer and depth test component <b>2273</b> and access un-rasterized vertex data via a stream out unit <b>2223</b>.</p><p id="p-0225" num="0220">The graphics processor <b>2200</b> has an interconnect bus, interconnect fabric, or some other interconnect mechanism that allows data and message passing amongst the major components of the processor. In some embodiments, execution units <b>2252</b>A-<b>2252</b>B and associated cache(s) <b>2251</b>, texture and media sampler <b>2254</b>, and texture/sampler cache <b>2258</b> interconnect via a data port <b>2256</b> to perform memory access and communicate with render output pipeline components of the processor. In some embodiments, sampler <b>2254</b>, caches <b>2251</b>, <b>2258</b> and execution units <b>2252</b>A-<b>2252</b>B each have separate memory access paths.</p><p id="p-0226" num="0221">In some embodiments, render output pipeline <b>2270</b> contains a rasterizer and depth test component <b>2273</b> that converts vertex-based objects into an associated pixel-based representation. In some embodiments, the rasterizer logic includes a windower/masker unit to perform fixed function triangle and line rasterization. An associated render cache <b>2278</b> and depth cache <b>2279</b> are also available in some embodiments. A pixel operations component <b>2277</b> performs pixel-based operations on the data, though in some instances, pixel operations associated with 2D operations (e.g. bit block image transfers with blending) are performed by the 2D engine <b>2241</b>, or substituted at display time by the display controller <b>2243</b> using overlay display planes. In some embodiments, a shared L3 cache <b>2275</b> is available to all graphics components, allowing the sharing of data without the use of main system memory.</p><p id="p-0227" num="0222">In some embodiments, graphics processor media pipeline <b>2230</b> includes a media engine <b>2237</b> and a video front end <b>2234</b>. In some embodiments, video front end <b>2234</b> receives pipeline commands from the command streamer <b>2203</b>. In some embodiments, media pipeline <b>2230</b> includes a separate command streamer. In some embodiments, video front end <b>2234</b> processes media commands before sending the command to the media engine <b>2237</b>. In some embodiments, media engine <b>2237</b> includes thread spawning functionality to spawn threads for dispatch to thread execution logic <b>2250</b> via thread dispatcher <b>2231</b>.</p><p id="p-0228" num="0223">In some embodiments, graphics processor <b>2200</b> includes a display engine <b>2240</b>. In some embodiments, display engine <b>2240</b> is external to graphics processor <b>2200</b> and couples with the graphics processor via the ring interconnect <b>2202</b>, or some other interconnect bus or fabric. In some embodiments, display engine <b>2240</b> includes a 2D engine <b>2241</b> and a display controller <b>2243</b>. In some embodiments, display engine <b>2240</b> contains special purpose logic capable of operating independently of the 3D pipeline. In some embodiments, display controller <b>2243</b> couples with a display device (not shown), which may be a system integrated display device, as in a laptop computer, or an external display device attached via a display device connector.</p><p id="p-0229" num="0224">In some embodiments, graphics pipeline <b>2220</b> and media pipeline <b>2230</b> are configurable to perform operations based on multiple graphics and media programming interfaces and are not specific to any one application programming interface (API). In some embodiments, driver software for the graphics processor translates API calls that are specific to a particular graphics or media library into commands that can be processed by the graphics processor. In some embodiments, support is provided for the Open Graphics Library (OpenGL), Open Computing Language (OpenCL), and/or Vulkan graphics and compute API, all from the Khronos Group. In some embodiments, support may also be provided for the Direct3D library from the Microsoft Corporation. In some embodiments, a combination of these libraries may be supported. Support may also be provided for the Open Source Computer Vision Library (OpenCV). A future API with a compatible 3D pipeline would also be supported if a mapping can be made from the pipeline of the future API to the pipeline of the graphics processor.</p><heading id="h-0017" level="2">Graphics Pipeline Programming</heading><p id="p-0230" num="0225"><figref idref="DRAWINGS">FIG. <b>23</b>A</figref> is a block diagram illustrating a graphics processor command format <b>2300</b> according to some embodiments. <figref idref="DRAWINGS">FIG. <b>23</b>B</figref> is a block diagram illustrating a graphics processor command sequence <b>2310</b> according to an embodiment. The solid lined boxes in <figref idref="DRAWINGS">FIG. <b>23</b>A</figref> illustrate the components that are generally included in a graphics command while the dashed lines include components that are optional or that are only included in a sub-set of the graphics commands. The exemplary graphics processor command format <b>2300</b> of <figref idref="DRAWINGS">FIG. <b>23</b>A</figref> includes data fields to identify a target client <b>2302</b> of the command, a command operation code (opcode) <b>2304</b>, and the relevant data <b>2306</b> for the command. A sub-opcode <b>2305</b> and a command size <b>2308</b> are also included in some commands.</p><p id="p-0231" num="0226">In some embodiments, client <b>2302</b> specifies the client unit of the graphics device that processes the command data. In some embodiments, a graphics processor command parser examines the client field of each command to condition the further processing of the command and route the command data to the appropriate client unit. In some embodiments, the graphics processor client units include a memory interface unit, a render unit, a 2D unit, a 3D unit, and a media unit. Each client unit has a corresponding processing pipeline that processes the commands. Once the command is received by the client unit, the client unit reads the opcode <b>2304</b> and, if present, sub-opcode <b>2305</b> to determine the operation to perform. The client unit performs the command using information in data field <b>2306</b>. For some commands an explicit command size <b>2308</b> is expected to specify the size of the command. In some embodiments, the command parser automatically determines the size of at least some of the commands based on the command opcode. In some embodiments commands are aligned via multiples of a double word.</p><p id="p-0232" num="0227">The flow diagram in <figref idref="DRAWINGS">FIG. <b>23</b>B</figref> shows an exemplary graphics processor command sequence <b>2310</b>. In some embodiments, software or firmware of a data processing system that features an embodiment of a graphics processor uses a version of the command sequence shown to set up, execute, and terminate a set of graphics operations. A sample command sequence is shown and described for purposes of example only as embodiments are not limited to these specific commands or to this command sequence. Moreover, the commands may be issued as batch of commands in a command sequence, such that the graphics processor will process the sequence of commands in at least partially concurrence.</p><p id="p-0233" num="0228">In some embodiments, the graphics processor command sequence <b>2310</b> may begin with a pipeline flush command <b>2312</b> to cause any active graphics pipeline to complete the currently pending commands for the pipeline. In some embodiments, the 3D pipeline <b>2322</b> and the media pipeline <b>2324</b> do not operate concurrently. The pipeline flush is performed to cause the active graphics pipeline to complete any pending commands. In response to a pipeline flush, the command parser for the graphics processor will pause command processing until the active drawing engines complete pending operations and the relevant read caches are invalidated. Optionally, any data in the render cache that is marked &#x2018;dirty&#x2019; can be flushed to memory. In some embodiments, pipeline flush command <b>2312</b> can be used for pipeline synchronization or before placing the graphics processor into a low power state.</p><p id="p-0234" num="0229">In some embodiments, a pipeline select command <b>2313</b> is used when a command sequence requires the graphics processor to explicitly switch between pipelines. In some embodiments, a pipeline select command <b>2313</b> is required only once within an execution context before issuing pipeline commands unless the context is to issue commands for both pipelines. In some embodiments, a pipeline flush command <b>2312</b> is required immediately before a pipeline switch via the pipeline select command <b>2313</b>.</p><p id="p-0235" num="0230">In some embodiments, a pipeline control command <b>2314</b> configures a graphics pipeline for operation and is used to program the 3D pipeline <b>2322</b> and the media pipeline <b>2324</b>. In some embodiments, pipeline control command <b>2314</b> configures the pipeline state for the active pipeline. In one embodiment, the pipeline control command <b>2314</b> is used for pipeline synchronization and to clear data from one or more cache memories within the active pipeline before processing a batch of commands.</p><p id="p-0236" num="0231">In some embodiments, commands associated with the return buffer state <b>2316</b> are used to configure a set of return buffers for the respective pipelines to write data. Some pipeline operations require the allocation, selection, or configuration of one or more return buffers into which the operations write intermediate data during processing. In some embodiments, the graphics processor also uses one or more return buffers to store output data and to perform cross thread communication. In some embodiments, the return buffer state <b>2316</b> includes selecting the size and number of return buffers to use for a set of pipeline operations.</p><p id="p-0237" num="0232">The remaining commands in the command sequence differ based on the active pipeline for operations. Based on a pipeline determination <b>2320</b>, the command sequence is tailored to the 3D pipeline <b>2322</b> beginning with the 3D pipeline state <b>2330</b> or the media pipeline <b>2324</b> beginning at the media pipeline state <b>2340</b>.</p><p id="p-0238" num="0233">The commands to configure the 3D pipeline state <b>2330</b> include 3D state setting commands for vertex buffer state, vertex element state, constant color state, depth buffer state, and other state variables that are to be configured before 3D primitive commands are processed. The values of these commands are determined at least in part based on the particular 3D API in use. In some embodiments, 3D pipeline state <b>2330</b> commands are also able to selectively disable or bypass certain pipeline elements if those elements will not be used.</p><p id="p-0239" num="0234">In some embodiments, 3D primitive <b>2332</b> command is used to submit 3D primitives to be processed by the 3D pipeline. Commands and associated parameters that are passed to the graphics processor via the 3D primitive <b>2332</b> command are forwarded to the vertex fetch function in the graphics pipeline. The vertex fetch function uses the 3D primitive <b>2332</b> command data to generate vertex data structures. The vertex data structures are stored in one or more return buffers. In some embodiments, 3D primitive <b>2332</b> command is used to perform vertex operations on 3D primitives via vertex shaders. To process vertex shaders, 3D pipeline <b>2322</b> dispatches shader execution threads to graphics processor execution units.</p><p id="p-0240" num="0235">In some embodiments, 3D pipeline <b>2322</b> is triggered via an execute <b>2334</b> command or event. In some embodiments, a register write triggers command execution. In some embodiments execution is triggered via a &#x2018;go&#x2019; or &#x2018;kick&#x2019; command in the command sequence. In one embodiment, command execution is triggered using a pipeline synchronization command to flush the command sequence through the graphics pipeline. The 3D pipeline will perform geometry processing for the 3D primitives. Once operations are complete, the resulting geometric objects are rasterized and the pixel engine colors the resulting pixels. Additional commands to control pixel shading and pixel back end operations may also be included for those operations.</p><p id="p-0241" num="0236">In some embodiments, the graphics processor command sequence <b>2310</b> follows the media pipeline <b>2324</b> path when performing media operations. In general, the specific use and manner of programming for the media pipeline <b>2324</b> depends on the media or compute operations to be performed. Specific media decode operations may be offloaded to the media pipeline during media decode. In some embodiments, the media pipeline can also be bypassed and media decode can be performed in whole or in part using resources provided by one or more general-purpose processing cores. In one embodiment, the media pipeline also includes elements for general-purpose graphics processor unit (GPGPU) operations, where the graphics processor is used to perform SIMD vector operations using computational shader programs that are not explicitly related to the rendering of graphics primitives.</p><p id="p-0242" num="0237">In some embodiments, media pipeline <b>2324</b> is configured in a similar manner as the 3D pipeline <b>2322</b>. A set of commands to configure the media pipeline state <b>2340</b> are dispatched or placed into a command queue before the media object commands <b>2342</b>. In some embodiments, media pipeline state commands <b>2340</b> include data to configure the media pipeline elements that will be used to process the media objects. This includes data to configure the video decode and video encode logic within the media pipeline, such as encode or decode format. In some embodiments, media pipeline state commands <b>2340</b> also support the use of one or more pointers to &#x201c;indirect&#x201d; state elements that contain a batch of state settings.</p><p id="p-0243" num="0238">In some embodiments, media object commands <b>2342</b> supply pointers to media objects for processing by the media pipeline. The media objects include memory buffers containing video data to be processed. In some embodiments, all media pipeline states must be valid before issuing a media object command <b>2342</b>. Once the pipeline state is configured and media object commands <b>2342</b> are queued, the media pipeline <b>2324</b> is triggered via an execute command <b>2344</b> or an equivalent execute event (e.g., register write). Output from media pipeline <b>2324</b> may then be post processed by operations provided by the 3D pipeline <b>2322</b> or the media pipeline <b>2324</b>. In some embodiments, GPGPU operations are configured and executed in a similar manner as media operations.</p><heading id="h-0018" level="2">Graphics Software Architecture</heading><p id="p-0244" num="0239"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates exemplary graphics software architecture for a data processing system <b>2400</b> according to some embodiments. In some embodiments, software architecture includes a 3D graphics application <b>2410</b>, an operating system <b>2420</b>, and at least one processor <b>2430</b>. In some embodiments, processor <b>2430</b> includes a graphics processor <b>2432</b> and one or more general-purpose processor core(s) <b>2434</b>. The graphics application <b>2410</b> and operating system <b>2420</b> each execute in the system memory <b>2450</b> of the data processing system.</p><p id="p-0245" num="0240">In some embodiments, 3D graphics application <b>2410</b> contains one or more shader programs including shader instructions <b>2412</b>. The shader language instructions may be in a high-level shader language, such as the High-level Shader Language (HLSL) or the OpenGL Shader Language (GLSL). The application also includes executable instructions <b>2414</b> in a machine language suitable for execution by the general-purpose processor core <b>2434</b>. The application also includes graphics objects <b>2416</b> defined by vertex data.</p><p id="p-0246" num="0241">In some embodiments, operating system <b>2420</b> is a Microsoft&#xae; Windows&#xae; operating system from the Microsoft Corporation, a proprietary UNIX-like operating system, or an open source UNIX-like operating system using a variant of the Linux kernel. The operating system <b>2420</b> can support a graphics API <b>2422</b> such as the Direct3D API, the OpenGL API, or the Vulkan API. When the Direct3D API is in use, the operating system <b>2420</b> uses a front-end shader compiler <b>2424</b> to compile any shader instructions <b>2412</b> in HLSL into a lower-level shader language. The compilation may be a just-in-time (JIT) compilation or the application can perform shader pre-compilation. In some embodiments, high-level shaders are compiled into low-level shaders during the compilation of the 3D graphics application <b>2410</b>. In some embodiments, the shader instructions <b>2412</b> are provided in an intermediate form, such as a version of the Standard Portable Intermediate Representation (SPIR) used by the Vulkan API.</p><p id="p-0247" num="0242">In some embodiments, user mode graphics driver <b>2426</b> contains a back-end shader compiler <b>2427</b> to convert the shader instructions <b>2412</b> into a hardware specific representation. When the OpenGL API is in use, shader instructions <b>2412</b> in the GLSL high-level language are passed to a user mode graphics driver <b>2426</b> for compilation. In some embodiments, user mode graphics driver <b>2426</b> uses operating system kernel mode functions <b>2428</b> to communicate with a kernel mode graphics driver <b>2429</b>. In some embodiments, kernel mode graphics driver <b>2429</b> communicates with graphics processor <b>2432</b> to dispatch commands and instructions.</p><heading id="h-0019" level="2">IP Core Implementations</heading><p id="p-0248" num="0243">One or more aspects of at least one embodiment may be implemented by representative code stored on a machine-readable medium which represents and/or defines logic within an integrated circuit such as a processor. For example, the machine-readable medium may include instructions which represent various logic within the processor. When read by a machine, the instructions may cause the machine to fabricate the logic to perform the techniques described herein. Such representations, known as &#x201c;IP cores,&#x201d; are reusable units of logic for an integrated circuit that may be stored on a tangible, machine-readable medium as a hardware model that describes the structure of the integrated circuit. The hardware model may be supplied to various customers or manufacturing facilities, which load the hardware model on fabrication machines that manufacture the integrated circuit. The integrated circuit may be fabricated such that the circuit performs operations described in association with any of the embodiments described herein.</p><p id="p-0249" num="0244"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a block diagram illustrating an IP core development system <b>2500</b> that may be used to manufacture an integrated circuit to perform operations according to an embodiment. The IP core development system <b>2500</b> may be used to generate modular, re-usable designs that can be incorporated into a larger design or used to construct an entire integrated circuit (e.g., an SOC integrated circuit). A design facility <b>2530</b> can generate a software simulation <b>2510</b> of an IP core design in a high-level programming language (e.g., C/C++). The software simulation <b>2510</b> can be used to design, test, and verify the behavior of the IP core using a simulation model <b>2512</b>. The simulation model <b>2512</b> may include functional, behavioral, and/or timing simulations. A register transfer level (RTL) design <b>2515</b> can then be created or synthesized from the simulation model <b>2512</b>. The RTL design <b>2515</b> is an abstraction of the behavior of the integrated circuit that models the flow of digital signals between hardware registers, including the associated logic performed using the modeled digital signals. In addition to an RTL design <b>2515</b>, lower-level designs at the logic level or transistor level may also be created, designed, or synthesized. Thus, the particular details of the initial design and simulation may vary.</p><p id="p-0250" num="0245">The RTL design <b>2515</b> or equivalent may be further synthesized by the design facility into a hardware model <b>2520</b>, which may be in a hardware description language (HDL), or some other representation of physical design data. The HDL may be further simulated or tested to verify the IP core design. The IP core design can be stored for delivery to a 3<sup>rd </sup>party fabrication facility <b>2565</b> using non-volatile memory <b>2540</b> (e.g., hard disk, flash memory, or any non-volatile storage medium). Alternatively, the IP core design may be transmitted (e.g., via the Internet) over a wired connection <b>2550</b> or wireless connection <b>2560</b>. The fabrication facility <b>2565</b> may then fabricate an integrated circuit that is based at least in part on the IP core design. The fabricated integrated circuit can be configured to perform operations in accordance with at least one embodiment described herein.</p><heading id="h-0020" level="2">Exemplary System on a Chip Integrated Circuit</heading><p id="p-0251" num="0246"><figref idref="DRAWINGS">FIG. <b>26</b>-<b>28</b></figref> illustrated exemplary integrated circuits and associated graphics processors that may be fabricated using one or more IP cores, according to various embodiments described herein. In addition to what is illustrated, other logic and circuits may be included, including additional graphics processors/cores, peripheral interface controllers, or general-purpose processor cores.</p><p id="p-0252" num="0247"><figref idref="DRAWINGS">FIG. <b>26</b></figref> is a block diagram illustrating an exemplary system on a chip integrated circuit <b>2600</b> that may be fabricated using one or more IP cores, according to an embodiment. Exemplary integrated circuit <b>2600</b> includes one or more application processor(s) <b>2605</b> (e.g., CPUs), at least one graphics processor <b>2610</b>, and may additionally include an image processor <b>2615</b> and/or a video processor <b>2620</b>, any of which may be a modular IP core from the same or multiple different design facilities. Integrated circuit <b>2600</b> includes peripheral or bus logic including a USB controller <b>2625</b>, UART controller <b>2630</b>, an SPI/SDIO controller <b>2635</b>, and an I<sup>2</sup>S/I<sup>2</sup>C controller <b>2640</b>. Additionally, the integrated circuit can include a display device <b>2645</b> coupled to one or more of a high-definition multimedia interface (HDMI) controller <b>2650</b> and a mobile industry processor interface (MIPI) display interface <b>2655</b>. Storage may be provided by a flash memory subsystem <b>2660</b> including flash memory and a flash memory controller. Memory interface may be provided via a memory controller <b>2665</b> for access to SDRAM or SRAM memory devices. Some integrated circuits additionally include an embedded security engine <b>2670</b>.</p><p id="p-0253" num="0248"><figref idref="DRAWINGS">FIG. <b>27</b></figref> is a block diagram illustrating an exemplary graphics processor <b>2710</b> of a system on a chip integrated circuit that may be fabricated using one or more IP cores, according to an embodiment. Graphics processor <b>2710</b> can be a variant of the graphics processor <b>2610</b> of <figref idref="DRAWINGS">FIG. <b>26</b></figref>. Graphics processor <b>2710</b> includes a vertex processor <b>2705</b> and one or more fragment processor(s) <b>2715</b>A-<b>2715</b>N (e.g., <b>2715</b>A, <b>2715</b>B, <b>2715</b>C, <b>2715</b>D, through <b>2715</b>N-<b>1</b>, and <b>2715</b>N). Graphics processor <b>2710</b> can execute different shader programs via separate logic, such that the vertex processor <b>2705</b> is optimized to execute operations for vertex shader programs, while the one or more fragment processor(s) <b>2715</b>A-<b>2715</b>N execute fragment (e.g., pixel) shading operations for fragment or pixel shader programs. The vertex processor <b>2705</b> performs the vertex processing stage of the 3D graphics pipeline and generates primitives and vertex data. The fragment processor(s) <b>2715</b>A-<b>2715</b>N use the primitive and vertex data generated by the vertex processor <b>2705</b> to produce a framebuffer that is displayed on a display device. In one embodiment, the fragment processor(s) <b>2715</b>A-<b>2715</b>N are optimized to execute fragment shader programs as provided for in the OpenGL API, which may be used to perform similar operations as a pixel shader program as provided for in the Direct 3D API.</p><p id="p-0254" num="0249">Graphics processor <b>2710</b> additionally includes one or more memory management units (MMUs) <b>2720</b>A-<b>2720</b>B, cache(s) <b>2725</b>A-<b>2725</b>B, and circuit interconnect(s) <b>2730</b>A-<b>2730</b>B. The one or more MMU(s) <b>2720</b>A-<b>2720</b>B provide for virtual to physical address mapping for graphics processor <b>2710</b>, including for the vertex processor <b>2705</b> and/or fragment processor(s) <b>2715</b>A-<b>2715</b>N, which may reference vertex or image/texture data stored in memory, in addition to vertex or image/texture data stored in the one or more cache(s) <b>2725</b>A-<b>2725</b>B. In one embodiment the one or more MMU(s) <b>2720</b>A-<b>2720</b>B may be synchronized with other MMUs within the system, including one or more MMUs associated with the one or more application processor(s) <b>2605</b>, image processor <b>2615</b>, and/or video processor <b>2620</b> of <figref idref="DRAWINGS">FIG. <b>26</b></figref>, such that each processor <b>2605</b>-<b>2620</b> can participate in a shared or unified virtual memory system. The one or more circuit interconnect(s) <b>2730</b>A-<b>2730</b>B enable graphics processor <b>2710</b> to interface with other IP cores within the SoC, either via an internal bus of the SoC or via a direct connection, according to embodiments.</p><p id="p-0255" num="0250"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a block diagram illustrating an additional exemplary graphics processor <b>2810</b> of a system on a chip integrated circuit that may be fabricated using one or more IP cores, according to an embodiment. Graphics processor <b>2810</b> can be a variant of the graphics processor <b>2610</b> of <figref idref="DRAWINGS">FIG. <b>26</b></figref>. Graphics processor <b>2810</b> includes the one or more MMU(s) <b>2720</b>A-<b>2720</b>B, caches <b>2725</b>A-<b>2725</b>B, and circuit interconnect(s) <b>2730</b>A-<b>2730</b>B of the integrated circuit <b>2700</b> of <figref idref="DRAWINGS">FIG. <b>27</b></figref>.</p><p id="p-0256" num="0251">Graphics processor <b>2810</b> includes one or more shader cores <b>2815</b>A-<b>2815</b>N (e.g., <b>2815</b>A, <b>2815</b>B, <b>2815</b>C, <b>2815</b>D, <b>2815</b>E, <b>2815</b>F, through <b>2815</b>N-<b>1</b>, and <b>2815</b>N), which provides for a unified shader core architecture in which a single core or type or core can execute all types of programmable shader code, including shader program code to implement vertex shaders, fragment shaders, and/or compute shaders. The exact number of shader cores present can vary among embodiments and implementations. Additionally, graphics processor <b>2810</b> includes an inter-core task manager <b>2805</b>, which acts as a thread dispatcher to dispatch execution threads to one or more shader cores <b>2815</b>A-<b>2815</b>N and a tiling unit <b>2818</b> to accelerate tiling operations for tile-based rendering, in which rendering operations for a scene are subdivided in image space, for example to exploit local spatial coherence within a scene or to optimize use of internal caches.</p><p id="p-0257" num="0252">The following clauses and/or examples pertain to specific embodiments or examples thereof. Specifics in the examples may be used anywhere in one or more embodiments. The various features of the different embodiments or examples may be variously combined with some features included and others excluded to suit a variety of different applications. Examples may include subject matter such as a method, means for performing acts of the method, at least one machine-readable medium including instructions that, when performed by a machine cause the machine to perform acts of the method, or of an apparatus or system according to embodiments and examples described herein. Various components can be a means for performing the operations or functions described.</p><p id="p-0258" num="0253">One embodiment provides for a general-purpose graphics processor comprising a multisample antialiasing compression module to examine a number of colors to be stored for a set of sample locations of a pixel and allocate one or more planes to store color data for the set of sample locations of the pixel and a lossless compression module to apply lossless compression on the one or more planes and update a compression status in a compression control surface for each of the one or more planes.</p><p id="p-0259" num="0254">One embodiment provides for a method of performing lossless color compression alongside fragment compression, the method comprising compacting sample data for multiple sample locations of a pixel; mapping the multiple sample locations to memory locations storing compacted sample data; applying lossless compression to the compacted sample data; and updating a compression control surface associated with the memory location to indicate a compression status for the memory location.</p><p id="p-0260" num="0255">One embodiments provide for a data processing system comprising a non-transitory machine-readable medium to store instructions for execution by one or more processors of the data processing system; a memory module to store a multisample render target; and a general-purpose graphics processor comprising a multisample antialiasing compression module and a lossless compression module, wherein the multisample antialiasing module is to examine a number of colors to be stored for a set of sample locations of a pixel and allocate one or more planes to store color data for the set of sample locations of the pixel, and wherein the lossless compression module is to apply lossless compression on the one or more planes and update a compression status in a compression control surface for each of the one or more planes.</p><p id="p-0261" num="0256">The embodiments described herein refer to specific configurations of hardware, such as application specific integrated circuits (ASICs), configured to perform certain operations or having a predetermined functionality. Such electronic devices typically include a set of one or more processors coupled to one or more other components, such as one or more storage devices (non-transitory machine-readable storage media), user input/output devices (e.g., a keyboard, a touchscreen, and/or a display), and network connections. The coupling of the set of processors and other components is typically through one or more busses and bridges (also termed as bus controllers). The storage device and signals carrying the network traffic respectively represent one or more machine-readable storage media and machine-readable communication media. Thus, the storage devices of a given electronic device typically store code and/or data for execution on the set of one or more processors of that electronic device.</p><p id="p-0262" num="0257">One embodiment provides for a data processing system comprising a memory module to store a multisample render target, the multisample render target to store one or more sample locations for each pixel in a set of pixels and general-purpose graphics processor comprising a multisample antialiasing compression module. The multisample antialiasing compression module can be configured to analyze color data for a set of sample locations of a first pixel, determine a first memory plane to allocate for the first pixel, the first memory plane a lowest order memory plane to be allocated for the first pixel, wherein the lowest order memory plane is the lowest numbered memory plane referenced by one or more sample locations of a pixel and merge a memory plane allocation for the first pixel with a memory plane allocation for a second pixel in response to a determination that the first memory plane is the lowest order memory plane to be allocated for the second pixel.</p><p id="p-0263" num="0258">One embodiment provides for a method comprising compacting sample data for multiple sample locations of a pixel, mapping the multiple sample locations to memory locations storing compacted sample data, the memory locations mapped to memory of a general-purpose graphics processor, applying lossless compression to the compacted sample data, and updating a compression control surface associated with the memory locations to indicate a compression status for the memory locations. In one embodiment, compacting the sample data includes storing only unique color values within the sample data and mapping the multiple sample locations to memory locations storing the compacted sample data includes updating a multisample control surface with a mapping between the multiple sample locations and a memory plane storing color data associated with the multiple sample locations. Mapping the multiple sample locations to memory locations storing the compacted sample data includes allocating a memory plane for each unique color value associated with the sample locations. Applying lossless compression to the compacted sample data includes applying one or more lossless compression algorithms to a memory plane storing a unique color value. Updating the compression control surface includes storing an indicator for the one or more lossless compression algorithms applied to the memory plane.</p><p id="p-0264" num="0259">One embodiment provides for a graphics processing device comprising an interface to a system interconnect and a general-purpose graphics processor coupled to the interface, the general-purpose graphics processor comprising a multisample antialiasing compressor and a lossless compressor. The multisample antialiasing compressor can compact sample data for multiple sample locations of a pixel and map the multiple sample locations to memory locations within memory of the general-purpose graphics processor, the memory locations to store compacted sample data. The lossless compressor can apply lossless compression to the compacted sample data and update a compression control surface associated with the memory locations to indicate a compression status for the memory locations. The graphics processing device can additionally include a display interface to an external display device.</p><p id="p-0265" num="0260">One embodiment provides for a data processing system comprising a memory device to store a multisample render target and a general-purpose graphics processor comprising a multisample antialiasing compressor and a multisample render cache. The multisample render target can store color data for a set of sample locations of each pixel in a set of pixels. The multisample antialiasing compressor can apply multisample antialiasing compression to color data generated for the set of sample locations of a first pixel in the set of pixels. The multisample render cache can store color data generated for the set of sample locations of the first pixel in the set of pixels. Color data evicted from the multisample render cache is stored to the multisample render target. To apply the multisample antialiasing compression to color data generated for the set of sample locations of a first pixel, the multisample antialiasing compressor is to determine a first memory plane to allocate for the first pixel based on a color of a sample of the first pixel, wherein the color of the sample of the first pixel is a first color and the first memory plane is to store the first color and merge a memory plane allocation for the first pixel with a memory plane allocation for a second pixel when a first memory plane to be allocated for the second pixel is to store a same color as the first color.</p><p id="p-0266" num="0261">One embodiment provides for a method comprising, on a general-purpose graphics processor comprising a general-purpose graphics processor including a multisample render cache and a multisample antialiasing compressor, storing a multisample render target to a memory module, the multisample render target to store color data for a set of sample locations for each pixel in a set of pixels, generating color data for the set of sample locations of a first pixel in the set of pixels, compressing color data generated for the set of sample locations for the first pixel in the set of pixels via the multisample antialiasing compressor, and storing generated color data to the multisample render cache, wherein color data evicted from the multisample render cache is to be stored to the multisample render target.</p><p id="p-0267" num="0262">One embodiment provides for a graphics processing device comprising an interface to a system interconnect, a memory module to store a multisample render target, and a general-purpose graphics processor comprising a multisample antialiasing compressor. The multisample render target can store color data for a set of sample locations of each pixel in a set of pixels. The multisample antialiasing compressor can apply multisample antialiasing compression to color data generated for the set of sample locations of a first pixel in the set of pixels. The general-purpose graphics processor can additionally include a multisample render cache to store color data generated for the set of sample locations of the first pixel in the set of pixels. Color data evicted from the multisample render cache can be stored to the multisample render target.</p><p id="p-0268" num="0263">One embodiment provides an apparatus comprising a graphics processor comprising graphics rendering circuitry to process graphics data within a plurality of graphics pipeline stages and render images. The graphics processor comprises a multilevel cache subsystem comprising a plurality of cache levels, a shader execution array to simultaneously execute instructions of a plurality of shaders including graphics shaders and compute shaders, the graphics shaders comprising a first graphics shader type to process vertices and a second graphics shader type to process pixel data, a primitive assembler to assemble triangles based on the vertices, a rasterizer to generate pixels based on the triangles, a texture unit coupled to the multilevel cache subsystem to perform texture mapping operations, and color compression circuitry coupled to the texture unit and shader execution array, the color compression circuitry to perform lossless delta color compression of pixel color data provided by the shader execution array and texture unit to generate compressed color data. The compressed color data to be stored at one or more levels of the multilevel cache subsystem. The apparatus further comprises a display engine to output image information for display. The display engine is configured to support reading at least a portion of the compressed color data. The apparatus additionally comprises a multi-protocol on-chip communication fabric coupled to at least a portion of the multilevel cache subsystem and the shader execution array and a memory controller coupled to the multi-protocol on-chip communication fabric.</p><p id="p-0269" num="0264">Of course, one or more parts of an embodiment may be implemented using different combinations of software, firmware, and/or hardware. Throughout this detailed description, for the purposes of explanation, numerous specific details were set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the embodiments may be practiced without some of these specific details. In certain instances, well-known structures and functions were not described in elaborate detail to avoid obscuring the inventive subject matter of the embodiments. Accordingly, the scope and spirit of the invention should be judged in terms of the claims that follow.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A data processing system comprising:<claim-text>a memory device to store a multisample render target, the multisample render target to store color data for a set of sample locations of each pixel in a set of pixels; and</claim-text><claim-text>general-purpose graphics processor comprising a multisample antialiasing compressor to apply multisample antialiasing compression to color data generated for the set of sample locations of a first pixel in the set of pixels and a multisample render cache to store color data generated for the set of sample locations of the first pixel in the set of pixels, wherein color data evicted from the multisample render cache is to be stored to the multisample render target.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The data processing system as in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to apply the multisample antialiasing compression to color data generated for the set of sample locations of a first pixel, the multisample antialiasing compression is to:<claim-text>determine a first memory plane to allocate for the first pixel based on a color of a sample of the first pixel, wherein the color of the sample of the first pixel is a first color and the first memory plane is to store the first color; and</claim-text><claim-text>merge a memory plane allocation for the first pixel with a memory plane allocation for a second pixel when a first memory plane to be allocated for the second pixel is to store a same color as the first color.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The data processing system as in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first color is generated via a shader program configured to execute on a processing resource of the general-purpose graphics processor.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The data processing system as in <claim-ref idref="CLM-00002">claim 2</claim-ref>, the general-purpose graphics processor additionally comprising a multisample antialiasing plane allocator to allocate one or more memory planes, the multisample antialiasing plane allocator to progressively allocate memory planes for multiple pixels without pre-calculating an entire set of planes to be allocated.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The data processing system as in <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein to merge the memory plane allocation for the first pixel with the memory plane allocation for the second pixel includes to allocate a shared memory plane via the multisample antialiasing plane allocator.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The data processing system as in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein to merge the memory plane allocation for the first pixel with the memory plane allocation for the second pixel additionally includes to update a plane to pixel map to map the shared memory plane to the first pixel and the second pixel.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The data processing system as in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the general-purpose graphics processor additionally includes a lossless compressor to perform lossless compression on color data evicted from the multisample render cache.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The data processing system as in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the lossless compressor is to compress the color data evicted from the multisample render cache before the color data is stored to the multisample render target.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The data processing system as in <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein to perform lossless compression on the color data, the lossless compressor is to determine if color data is compressible to a target compression ratio and compress the color data when the color data is compressible to the target compression ratio.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The data processing system as in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the lossless compressor is to perform lossless compression on a per-plane basis and update a compression control surface for each plane to indicate a compression status for the plane.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A non-transitory machine readable medium storing instructions which, when executed by one or more processors including a general-purpose graphics processor including a multisample render cache and a multisample antialiasing compressor, the operations comprising<claim-text>storing a multisample render target to a memory module, the multisample render target to store color data for a set of sample locations for each pixel in a set of pixels;</claim-text><claim-text>generating color data for the set of sample locations of a first pixel in the set of pixels;</claim-text><claim-text>compressing color data generated for the set of sample locations for the first pixel in the set of pixels via the multisample antialiasing compression module; and</claim-text><claim-text>storing generated color data to the multisample render cache, wherein color data evicted from the multisample render cache is to be stored to the multisample render target.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory machine readable medium storing as in <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein compressing the color data generated for the set of sample locations for the first pixel includes:<claim-text>determining a first memory plane to allocate for the first pixel based on a color of a sample of the first pixel, wherein the color of the first pixel is a first color and the first memory plane is to store the first color; and</claim-text><claim-text>merging a memory plane allocation for the first pixel with a memory plane allocation for a second pixel when a first memory plane to be allocated for the second pixel is to store a same color as the first color, wherein the first color is generated via a program configured to execute on a processing resource of the general-purpose graphics processor.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory machine readable medium storing as in <claim-ref idref="CLM-00012">claim 12</claim-ref>, additionally comprising allocating one or more memory planes via a multisample antialiasing plane allocator, the multisample antialiasing plane allocator to progressively allocate memory planes for multiple pixels without pre-calculating an entire set of planes to be allocated.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory machine readable medium storing as in <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein merging the memory plane allocation for the first pixel with the memory plane allocation for the second pixel includes:<claim-text>allocating a shared memory plane via the multisample antialiasing plane allocator, wherein the color of the first pixel is a first color, the first memory plane is to store the first color, and the memory plane allocation for the first pixel is merged with the memory plane allocation for the second pixel with the second pixel is to store the first color; and</claim-text><claim-text>updating a plane to pixel map to map the shared memory plane to the first pixel and the second pixel.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A graphics processing device comprising:<claim-text>an interface to a system interconnect;</claim-text><claim-text>a memory module to store a multisample render target, the multisample render target to store color data for a set of sample locations of each pixel in a set of pixels; and</claim-text><claim-text>a general-purpose graphics processor comprising a multisample antialiasing compressor to apply multisample antialiasing compression to color data generated for the set of sample locations of a first pixel in the set of pixels and a multisample render cache to store color data generated for the set of sample locations of the first pixel in the set of pixels, wherein color data evicted from the multisample render cache is to be stored to the multisample render target.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The graphics processing device as in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein to apply the multisample antialiasing compression to color data generated for the set of sample locations of a first pixel, the multisample antialiasing compression is to:<claim-text>determine a first memory plane to allocate for the first pixel based on a color of a sample of the first pixel, wherein the color of the sample of the first pixel is a first color and the first memory plane is to store the first color; and</claim-text><claim-text>merge a memory plane allocation for the first pixel with a memory plane allocation for a second pixel when a first memory plane to be allocated for the second pixel is to store a same color as the first color.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The graphics processing device as in <claim-ref idref="CLM-00016">claim 16</claim-ref>, the general-purpose graphics processor additionally comprising a multisample antialiasing plane allocator to allocate one or more memory planes, the multisample antialiasing plane allocator to progressively allocate memory planes for multiple pixels without pre-calculating an entire set of planes to be allocated.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The graphics processing device as in <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein to merge the memory plane allocation for the first pixel with the memory plane allocation for the second pixel includes to allocate a shared memory plane via the multisample antialiasing plane allocator.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The graphics processing device as in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein to merge the memory plane allocation for the first pixel with the memory plane allocation for the second pixel additionally includes to update a plane to pixel map to map the shared memory plane to the first pixel and the second pixel.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The graphics processing device as in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the general-purpose graphics processor additionally includes a lossless compressor to perform lossless compression on color data evicted from the multisample render cache, wherein the lossless compressor is to compress the color data evicted from the multisample render cache before the color data is stored to the multisample render target, wherein to perform lossless compression on the color data, the lossless compressor is to determine if color data is compressible to a target compression ratio and compress the color data when the color data is compressible to the target compression ratio, and the lossless compressor is to perform lossless compression on a per-plane basis and update a compression control surface for each plane to indicate a compression status for the plane.</claim-text></claim></claims></us-patent-application>