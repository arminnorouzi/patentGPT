<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230003533A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230003533</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363226</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>C</subclass><main-group>21</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>C</subclass><main-group>21</main-group><subgroup>3407</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">FAST COLLISION FREE PATH GENERATION BY CONNECTING C-SLICES THROUGH CELL DECOMPOSITION</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Motional AD LLC</orgname><address><city>Boston</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Ma</last-name><first-name>Qianli</first-name><address><city>Pittsburgh</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ruan</last-name><first-name>Sipu</first-name><address><city>Pittsburgh</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Lin</last-name><first-name>Shu-Kai</first-name><address><city>Pittsburgh</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Shih-Yuan</first-name><address><city>Arlington</city><state>MA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Among other things, techniques are described for collision free path generation by connecting C-slices through cell decomposition. An environment is sampled at discrete headings of a vehicle to generate a configuration space (C-space) with one or more C-slices. A first C-slice is decomposed into one or more cells that represent free space. A C-slice adjacency list is generated for the first C-slice. A super adjacency list is derived that connects vertices of interest across the one or more C-slices to form a super adjacency graph. In embodiments, Dubins path is used for connecting the vertices of interest both within and across C-slices to ensure the kinematic feasibility of all the searched paths. An optimal path is navigated, wherein the optimal path is a shortest path from a starting pose to a goal pose on the super adjacency graph.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="212.43mm" wi="155.62mm" file="US20230003533A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="225.38mm" wi="168.91mm" file="US20230003533A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="235.37mm" wi="155.96mm" orientation="landscape" file="US20230003533A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="234.10mm" wi="152.06mm" orientation="landscape" file="US20230003533A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="242.40mm" wi="106.26mm" orientation="landscape" file="US20230003533A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="206.42mm" wi="130.73mm" orientation="landscape" file="US20230003533A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="229.70mm" wi="107.78mm" orientation="landscape" file="US20230003533A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="193.72mm" wi="155.28mm" orientation="landscape" file="US20230003533A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="225.89mm" wi="103.72mm" orientation="landscape" file="US20230003533A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="238.59mm" wi="126.83mm" orientation="landscape" file="US20230003533A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="220.81mm" wi="109.39mm" orientation="landscape" file="US20230003533A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="227.75mm" wi="162.56mm" orientation="landscape" file="US20230003533A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="229.28mm" wi="123.87mm" orientation="landscape" file="US20230003533A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="245.79mm" wi="136.74mm" file="US20230003533A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="169.16mm" wi="108.29mm" file="US20230003533A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="247.48mm" wi="145.88mm" orientation="landscape" file="US20230003533A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="236.64mm" wi="128.78mm" orientation="landscape" file="US20230003533A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="180.17mm" wi="147.83mm" orientation="landscape" file="US20230003533A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="177.88mm" wi="129.46mm" orientation="landscape" file="US20230003533A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="240.54mm" wi="99.31mm" file="US20230003533A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="194.48mm" wi="148.17mm" file="US20230003533A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE INVENTION</heading><p id="p-0002" num="0001">This description relates to collision free path generation by connecting C-slices through cell decomposition.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Navigation of a vehicle from an initial location to a final destination often requires the vehicle's decision-making system to select a path from the initial location to the requested final destination. Various objects can be located between the initial location and the final destination. Possible paths are represented using a graph with a number of vertices and edges, and the decision making system of the vehicle selects paths according to any number of constraints. Objects impact the location of possible paths. Collision free paths are those paths that avoid vertices and edges that lie across or near objects. When a graph contains a large number of vertices and edges, planning a path can be time consuming as well as computational resource consuming.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example of an autonomous vehicle (AV) having autonomous capability.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example &#x201c;cloud&#x201d; computing environment.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a computer system.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example architecture for an AV.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of inputs and outputs that can be used by a perception system.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example of a LiDAR system.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows the LiDAR system in operation.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows the operation of the LiDAR system in additional detail.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a block diagram of the relationships between inputs and outputs of a planning system.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a directed graph used in path planning.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a block diagram of the inputs and outputs of a control system.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a block diagram of the inputs, outputs, and components of a controller.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> is an illustration of a vehicle on a collision path.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> is an illustration of a vehicle navigating a collision free path.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a process flow diagram of a process that enables fast collision free path generation.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a process flow diagram of a process that enables cell decomposition and vertex connection.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is an illustration of a C-space with a set of C-slices.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>17</b>A</figref> is an illustration of a C-slice post processed by trapezoidal decomposition.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>17</b>B</figref> is an illustration of a C-slice with adaptive vertex of interest insertion.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>18</b>A</figref> is an illustration of a super adjacency graph using a brute force connection strategy.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>18</b>B</figref> is an illustration of a super adjacency graph using a brute force beyond a ball connection strategy.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>18</b>C</figref> is an illustration of a super adjacency graph using an adjacent cell, brute force adjacent slices connection strategy.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>18</b>D</figref> is an illustration of a super adjacency graph using an adjacent cell, brute force inter-slice connection strategy.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>18</b>E</figref> is an illustration of a super adjacency graph using a grid-like connection strategy.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>19</b></figref> a process flow diagram of a process that enables fast collision free path generation by connecting C-slices through cell decomposition.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0029" num="0028">In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. It will be apparent, however, that the present disclosure can be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present disclosure.</p><p id="p-0030" num="0029">In the drawings, specific arrangements or orderings of schematic elements, such as those representing devices, modules, systems, instruction blocks, and data elements, are shown for ease of description. However, it should be understood by those skilled in the art that the specific ordering or arrangement of the schematic elements in the drawings is not meant to imply that a particular order or sequence of processing, or separation of processes, is required. Further, the inclusion of a schematic element in a drawing is not meant to imply that such element is required in all embodiments or that the features represented by such element may not be included in or combined with other elements in some embodiments.</p><p id="p-0031" num="0030">Further, in the drawings, where connecting elements, such as solid or dashed lines or arrows, are used to illustrate a connection, relationship, or association between or among two or more other schematic elements, the absence of any such connecting elements is not meant to imply that no connection, relationship, or association can exist. In other words, some connections, relationships, or associations between elements are not shown in the drawings so as not to obscure the disclosure. In addition, for ease of illustration, a single connecting element is used to represent multiple connections, relationships or associations between elements. For example, where a connecting element represents a communication of signals, data, or instructions, it should be understood by those skilled in the art that such element represents one or multiple signal paths (e.g., a bus), as may be needed, to affect the communication.</p><p id="p-0032" num="0031">Reference will now be made in detail to embodiments, examples of which are illustrated in the accompanying drawings. In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the various described embodiments. However, it will be apparent to one of ordinary skill in the art that the various described embodiments may be practiced without these specific details. In other instances, well-known methods, procedures, components, circuits, and networks have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.</p><p id="p-0033" num="0032">Several features are described hereafter that can each be used independently of one another or with any combination of other features. However, any individual feature may not address any of the problems discussed above or might only address one of the problems discussed above. Some of the problems discussed above might not be fully addressed by any of the features described herein. Although headings are provided, information related to a particular heading, but not found in the section having that heading, may also be found elsewhere in this description. Embodiments are described herein according to the following outline:</p><p id="p-0034" num="0033">1. General Overview</p><p id="p-0035" num="0034">2. System Overview</p><p id="p-0036" num="0035">3. AV Architecture</p><p id="p-0037" num="0036">4. AV Inputs</p><p id="p-0038" num="0037">5. Path Planning</p><p id="p-0039" num="0038">6. AV Control</p><p id="p-0040" num="0039">7. Obstacle Avoidance</p><p id="p-0041" num="0040">8. C-Space Generation and Cell decomposition</p><p id="p-0042" num="0041">9. Graph Generation and Search</p><p id="p-0043" num="0042">10. Collision free path generation by connecting C-slices through cell decomposition</p><heading id="h-0005" level="1">General Overview</heading><p id="p-0044" num="0043">A vehicle can independently navigate through an environment from a starting pose to an ending pose. To successfully navigate through the environment, the environment is represented as a configuration space (C-space) with any number of objects, represented by C-obstacles within the C-space. The C-space is a three-dimensional space parameterized by latitude (e.g., x), longitude (e.g., y), and a heading (e.g., &#x3b8;). The vehicle and objects are represented by convex polygons within the C-space. Each discrete heading corresponds to a slice (C-slice) of the C-space. Cell decomposition is performed on each C-slice and vertices of interest are generated by strategically inserting vertices at free cell boundaries based on, at least in part, a C-obstacle type, to obtain a C-slice adjacency list. A super adjacency list is derived from the set of C-slice adjacency lists. A super adjacency graph is derived for the C-space by connecting vertices of interest within the C-slice adjacency lists and across the C-slices according to transition and collision detection techniques.</p><p id="p-0045" num="0044">Some of the advantages of these techniques include a high success rate in finding feasible paths with relatively short computation time. Discretizing the heading enables the representation of the vehicle and objects as convex polygons, which ultimately enables the cell decomposition with a reduced computational complexity when compared to vehicle and object representations in a higher-order space. Moreover, the derived adjacency lists require fewer vertices to generate collision free paths among many objects when compared to other algorithms, and a path computed via the present techniques is smoother in terms of an accumulation of curvatures.</p><heading id="h-0006" level="1">System Overview</heading><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example of an AV <b>100</b> having autonomous capability.</p><p id="p-0047" num="0046">As used herein, the term &#x201c;autonomous capability&#x201d; refers to a function, feature, or facility that enables a vehicle to be partially or fully operated without real-time human intervention, including without limitation fully AVs, highly AVs, and conditionally AVs.</p><p id="p-0048" num="0047">As used herein, an autonomous vehicle (AV) is a vehicle that possesses autonomous capability.</p><p id="p-0049" num="0048">As used herein, &#x201c;vehicle&#x201d; includes means of transportation of goods or people. For example, cars, buses, trains, airplanes, drones, trucks, boats, ships, submersibles, dirigibles, etc. A driverless car is an example of a vehicle.</p><p id="p-0050" num="0049">As used herein, &#x201c;trajectory&#x201d; refers to a path or route to navigate an AV from a first spatiotemporal location to second spatiotemporal location. In an embodiment, the first spatiotemporal location is referred to as the initial or starting location and the second spatiotemporal location is referred to as the destination, final location, goal, goal position, or goal location. In some examples, a trajectory is made up of one or more segments (e.g., sections of road) and each segment is made up of one or more blocks (e.g., portions of a lane or intersection). In an embodiment, the spatiotemporal locations correspond to real world locations. For example, the spatiotemporal locations are pick up or drop-off locations to pick up or drop-off persons or goods.</p><p id="p-0051" num="0050">As used herein, &#x201c;sensor(s)&#x201d; includes one or more hardware components that detect information about the environment surrounding the sensor. Some of the hardware components can include sensing components (e.g., image sensors, biometric sensors), transmitting and/or receiving components (e.g., laser or radio frequency wave transmitters and receivers), electronic components such as analog-to-digital converters, a data storage device (such as a RAM and/or a nonvolatile storage), software or firmware components and data processing components such as an ASIC (application-specific integrated circuit), a microprocessor and/or a microcontroller.</p><p id="p-0052" num="0051">As used herein, a &#x201c;scene description&#x201d; is a data structure (e.g., list) or data stream that includes one or more classified or labeled objects detected by one or more sensors on the AV vehicle or provided by a source external to the AV.</p><p id="p-0053" num="0052">As used herein, a &#x201c;road&#x201d; is a physical area that can be traversed by a vehicle, and may correspond to a named thoroughfare (e.g., city street, interstate freeway, etc.) or may correspond to an unnamed thoroughfare (e.g., a driveway in a house or office building, a section of a parking lot, a section of a vacant lot, a dirt path in a rural area, etc.). Because some vehicles (e.g., 4-wheel-drive pickup trucks, sport utility vehicles, etc.) are capable of traversing a variety of physical areas not specifically adapted for vehicle travel, a &#x201c;road&#x201d; may be a physical area not formally defined as a thoroughfare by any municipality or other governmental or administrative body.</p><p id="p-0054" num="0053">As used herein, a &#x201c;lane&#x201d; is a portion of a road that can be traversed by a vehicle. A lane is sometimes identified based on lane markings. For example, a lane may correspond to most or all of the space between lane markings, or may correspond to only some (e.g., less than 50%) of the space between lane markings. For example, a road having lane markings spaced far apart might accommodate two or more vehicles between the markings, such that one vehicle can pass the other without traversing the lane markings, and thus could be interpreted as having a lane narrower than the space between the lane markings, or having two lanes between the lane markings. A lane could also be interpreted in the absence of lane markings. For example, a lane may be defined based on physical features of an environment, e.g., rocks and trees along a thoroughfare in a rural area or, e.g., natural obstructions to be avoided in an undeveloped area. A lane could also be interpreted independent of lane markings or physical features. For example, a lane could be interpreted based on an arbitrary path free of obstructions in an area that otherwise lacks features that would be interpreted as lane boundaries. In an example scenario, an AV could interpret a lane through an obstruction-free portion of a field or empty lot. In another example scenario, an AV could interpret a lane through a wide (e.g., wide enough for two or more lanes) road that does not have lane markings. In this scenario, the AV could communicate information about the lane to other AVs so that the other AVs can use the same lane information to coordinate path planning among themselves.</p><p id="p-0055" num="0054">The term &#x201c;over-the-air (OTA) client&#x201d; includes any AV, or any electronic device (e.g., computer, controller, IoT device, electronic control unit (ECU)) that is embedded in, coupled to, or in communication with an AV.</p><p id="p-0056" num="0055">The term &#x201c;over-the-air (OTA) update&#x201d; means any update, change, deletion or addition to software, firmware, data or configuration settings, or any combination thereof, that is delivered to an OTA client using proprietary and/or standardized wireless communications technology, including but not limited to: cellular mobile communications (e.g., 2G, 3G, 4G, 5G), radio wireless area networks (e.g., WiFi) and/or satellite Internet.</p><p id="p-0057" num="0056">The term &#x201c;edge node&#x201d; means one or more edge devices coupled to a network that provide a portal for communication with AVs and can communicate with other edge nodes and a cloud based computing platform, for scheduling and delivering OTA updates to OTA clients.</p><p id="p-0058" num="0057">The term &#x201c;edge device&#x201d; means a device that implements an edge node and provides a physical wireless access point (AP) into enterprise or service provider (e.g., VERIZON, AT&#x26;T) core networks. Examples of edge devices include but are not limited to: computers, controllers, transmitters, routers, routing switches, integrated access devices (IADs), multiplexers, metropolitan area network (MAN) and wide area network (WAN) access devices.</p><p id="p-0059" num="0058">&#x201c;One or more&#x201d; includes a function being performed by one element, a function being performed by more than one element, e.g., in a distributed fashion, several functions being performed by one element, several functions being performed by several elements, or any combination of the above.</p><p id="p-0060" num="0059">It will also be understood that, although the terms first, second, etc. are, in some instances, used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first contact could be termed a second contact, and, similarly, a second contact could be termed a first contact, without departing from the scope of the various described embodiments. The first contact and the second contact are both contacts, but they are not the same contact.</p><p id="p-0061" num="0060">The terminology used in the description of the various described embodiments herein is for the purpose of describing particular embodiments only and is not intended to be limiting. As used in the description of the various described embodiments and the appended claims, the singular forms &#x201c;a,&#x201d; &#x201c;an&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will also be understood that the term &#x201c;and/or&#x201d; as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms &#x201c;includes,&#x201d; &#x201c;including,&#x201d; &#x201c;comprises,&#x201d; and/or &#x201c;comprising,&#x201d; when used in this description, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.</p><p id="p-0062" num="0061">As used herein, the term &#x201c;if&#x201d; is, optionally, construed to mean &#x201c;when&#x201d; or &#x201c;upon&#x201d; or &#x201c;in response to determining&#x201d; or &#x201c;in response to detecting,&#x201d; depending on the context. Similarly, the phrase &#x201c;if it is determined&#x201d; or &#x201c;if [a stated condition or event] is detected&#x201d; is, optionally, construed to mean &#x201c;upon determining&#x201d; or &#x201c;in response to determining&#x201d; or &#x201c;upon detecting [the stated condition or event]&#x201d; or &#x201c;in response to detecting [the stated condition or event],&#x201d; depending on the context.</p><p id="p-0063" num="0062">As used herein, an AV system refers to the AV along with the array of hardware, software, stored data, and data generated in real-time that supports the operation of the AV. In an embodiment, the AV system is incorporated within the AV. In an embodiment, the AV system is spread across several locations. For example, some of the software of the AV system is implemented on a cloud computing environment similar to cloud computing environment <b>200</b> described below with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0064" num="0063">In general, this document describes technologies applicable to any vehicles that have one or more autonomous capabilities including fully AVs, highly AVs, and conditionally AVs, such as so-called Level 5, Level 4 and Level 3 vehicles, respectively (see SAE International's standard J3016: Taxonomy and Definitions for Terms Related to On-Road Motor Vehicle Automated Driving Systems, which is incorporated by reference in its entirety, for more details on the classification of levels of autonomy in vehicles). The technologies described in this document are also applicable to partially AVs and driver assisted vehicles, such as so-called Level 2 and Level 1 vehicles (see SAE International's standard J3016: Taxonomy and Definitions for Terms Related to On-Road Motor Vehicle Automated Driving Systems). In an embodiment, one or more of the Level 1, 2, 3, 4 and 5 vehicle systems can automate certain vehicle operations (e.g., steering, braking, and using maps) under certain operating conditions based on processing of sensor inputs. The technologies described in this document can benefit vehicles in any levels, ranging from fully AVs to human-operated vehicles.</p><p id="p-0065" num="0064">AVs have advantages over vehicles that require a human driver. One advantage is safety. For example, in 2016, the United States experienced 6 million automobile accidents, 2.4 million injuries, 40,000 fatalities, and 13 million vehicles in crashes, estimated at a societal cost of $910+ billion. U.S. traffic fatalities per 100 million miles traveled have been reduced from about six to about one from 1965 to 2015, in part due to additional safety measures deployed in vehicles. For example, an additional half second of warning that a crash is about to occur is believed to mitigate 60% of front-to-rear crashes. However, passive safety features (e.g., seat belts, airbags) have likely reached their limit in improving this number. Thus, active safety measures, such as automated control of a vehicle, are the likely next step in improving these statistics. Because human drivers are believed to be responsible for a critical pre-crash event in 95% of crashes, automated driving systems are likely to achieve better safety outcomes, e.g., by reliably recognizing and avoiding critical situations better than humans; making better decisions, obeying traffic laws, and predicting future events better than humans; and reliably controlling a vehicle better than a human.</p><p id="p-0066" num="0065">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, an AV system <b>120</b> operates the vehicle <b>100</b> along a trajectory <b>198</b> through an environment <b>190</b> to a destination <b>199</b> (sometimes referred to as a final location) while avoiding objects (e.g., natural obstructions <b>191</b>, vehicles <b>193</b>, pedestrians <b>192</b>, cyclists, and other obstacles) and obeying rules of the road (e.g., rules of operation or driving preferences).</p><p id="p-0067" num="0066">In an embodiment, the AV system <b>120</b> includes devices <b>101</b> that are instrumented to receive and act on operational commands from the computer processors <b>146</b>. We use the term &#x201c;operational command&#x201d; to mean an executable instruction (or set of instructions) that causes a vehicle to perform an action (e.g., a driving maneuver). Operational commands can, without limitation, include instructions for a vehicle to start moving forward, stop moving forward, start moving backward, stop moving backward, accelerate, decelerate, perform a left turn, and perform a right turn. In an embodiment, computing processors <b>146</b> are similar to the processor <b>304</b> described below in reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Examples of devices <b>101</b> include a steering control <b>102</b>, brakes <b>103</b>, gears, accelerator pedal or other acceleration control mechanisms, windshield wipers, side-door locks, window controls, and turn-indicators.</p><p id="p-0068" num="0067">In an embodiment, the AV system <b>120</b> includes sensors <b>121</b> for measuring or inferring properties of state or condition of the vehicle <b>100</b>, such as the AV's position, linear and angular velocity and acceleration, and heading (e.g., an orientation of the leading end of vehicle <b>100</b>). Example of sensors <b>121</b> are GPS, inertial measurement units (IMU) that measure both vehicle linear accelerations and angular rates, wheel speed sensors for measuring or estimating wheel slip ratios, wheel brake pressure or braking torque sensors, engine torque or wheel torque sensors, and steering angle and angular rate sensors.</p><p id="p-0069" num="0068">In an embodiment, the sensors <b>121</b> also include sensors for sensing or measuring properties of the AV's environment. For example, monocular or stereo video cameras <b>122</b> in the visible light, infrared or thermal (or both) spectra, LiDAR <b>123</b>, RADAR, ultrasonic sensors, time-of-flight (TOF) depth sensors, speed sensors, temperature sensors, humidity sensors, and precipitation sensors.</p><p id="p-0070" num="0069">In an embodiment, the AV system <b>120</b> includes a data storage unit <b>142</b> and memory <b>144</b> for storing machine instructions associated with computer processors <b>146</b> or data collected by sensors <b>121</b>. In an embodiment, the data storage unit <b>142</b> is similar to the ROM <b>308</b> or storage device <b>310</b> described below in relation to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In an embodiment, memory <b>144</b> is similar to the main memory <b>306</b> described below. In an embodiment, the data storage unit <b>142</b> and memory <b>144</b> store historical, real-time, and/or predictive information about the environment <b>190</b>. In an embodiment, the stored information includes maps, driving performance, traffic congestion updates or weather conditions. In an embodiment, data relating to the environment <b>190</b> is transmitted to the vehicle <b>100</b> via a communications channel from a remotely located database <b>134</b>.</p><p id="p-0071" num="0070">In an embodiment, the AV system <b>120</b> includes communications devices <b>140</b> for communicating measured or inferred properties of other vehicles' states and conditions, such as positions, linear and angular velocities, linear and angular accelerations, and linear and angular headings to the vehicle <b>100</b>. These devices include Vehicle-to-Vehicle (V2V) and Vehicle-to-Infrastructure (V2I) communication devices and devices for wireless communications over point-to-point or ad hoc networks or both. In an embodiment, the communications devices <b>140</b> communicate across the electromagnetic spectrum (including radio and optical communications) or other media (e.g., air and acoustic media). A combination of Vehicle-to-Vehicle (V2V) Vehicle-to-Infrastructure (V2I) communication (and, in some embodiments, one or more other types of communication) is sometimes referred to as Vehicle-to-Everything (V2X) communication. V2X communication typically conforms to one or more communications standards for communication with, between, and among AVs.</p><p id="p-0072" num="0071">In an embodiment, the communication devices <b>140</b> include communication interfaces. For example, wired, wireless, WiMAX, Wi-Fi, Bluetooth, satellite, cellular, optical, near field, infrared, or radio interfaces. The communication interfaces transmit data from a remotely located database <b>134</b> to AV system <b>120</b>. In an embodiment, the remotely located database <b>134</b> is embedded in a cloud computing environment <b>200</b> as described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The communication devices <b>140</b> transmit data collected from sensors <b>121</b> or other data related to the operation of vehicle <b>100</b> to the remotely located database <b>134</b>. In an embodiment, communication devices <b>140</b> transmit information that relates to teleoperations to the vehicle <b>100</b>. In some embodiments, the vehicle <b>100</b> communicates with other remote (e.g., &#x201c;cloud&#x201d;) servers <b>136</b>.</p><p id="p-0073" num="0072">In an embodiment, the remotely located database <b>134</b> also stores and transmits digital data (e.g., storing data such as road and street locations). Such data is stored on the memory <b>144</b> on the vehicle <b>100</b>, or transmitted to the vehicle <b>100</b> via a communications channel from the remotely located database <b>134</b>.</p><p id="p-0074" num="0073">In an embodiment, the remotely located database <b>134</b> stores and transmits historical information about driving properties (e.g., speed and acceleration profiles) of vehicles that have previously traveled along trajectory <b>198</b> at similar times of day. In one implementation, such data can be stored on the memory <b>144</b> on the vehicle <b>100</b>, or transmitted to the vehicle <b>100</b> via a communications channel from the remotely located database <b>134</b>.</p><p id="p-0075" num="0074">Computer processors <b>146</b> located on the vehicle <b>100</b> algorithmically generate control actions based on both real-time sensor data and prior information, allowing the AV system <b>120</b> to execute its autonomous driving capabilities.</p><p id="p-0076" num="0075">In an embodiment, the AV system <b>120</b> includes computer peripherals <b>132</b> coupled to computer processors <b>146</b> for providing information and alerts to, and receiving input from, a user (e.g., an occupant or a remote user) of the vehicle <b>100</b>. In an embodiment, peripherals <b>132</b> are similar to the display <b>312</b>, input device <b>314</b>, and cursor controller <b>316</b> discussed below in reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The coupling is wireless or wired. Any two or more of the interface devices can be integrated into a single device.</p><p id="p-0077" num="0076">In an embodiment, the AV system <b>120</b> receives and enforces a privacy level of a passenger, e.g., specified by the passenger or stored in a profile associated with the passenger. The privacy level of the passenger determines how particular information associated with the passenger (e.g., passenger comfort data, biometric data, etc.) is permitted to be used, stored in the passenger profile, and/or stored on the cloud server <b>136</b> and associated with the passenger profile. In an embodiment, the privacy level specifies particular information associated with a passenger that is deleted once the ride is completed. In an embodiment, the privacy level specifies particular information associated with a passenger and identifies one or more entities that are authorized to access the information. Examples of specified entities that are authorized to access information can include other AVs, third party AV systems, or any entity that could potentially access the information.</p><p id="p-0078" num="0077">A privacy level of a passenger can be specified at one or more levels of granularity. In an embodiment, a privacy level identifies specific information to be stored or shared. In an embodiment, the privacy level applies to all the information associated with the passenger such that the passenger can specify that none of her personal information is stored or shared. Specification of the entities that are permitted to access particular information can also be specified at various levels of granularity. Various sets of entities that are permitted to access particular information can include, for example, other AVs, cloud servers <b>136</b>, specific third party AV systems, etc.</p><p id="p-0079" num="0078">In an embodiment, the AV system <b>120</b> or the cloud server <b>136</b> determines if certain information associated with a passenger can be accessed by the AV <b>100</b> or another entity. For example, a third-party AV system that attempts to access passenger input related to a particular spatiotemporal location must obtain authorization, e.g., from the AV system <b>120</b> or the cloud server <b>136</b>, to access the information associated with the passenger. For example, the AV system <b>120</b> uses the passenger's specified privacy level to determine whether the passenger input related to the spatiotemporal location can be presented to the third-party AV system, the AV <b>100</b>, or to another AV. This enables the passenger's privacy level to specify which other entities are allowed to receive data about the passenger's actions or other data associated with the passenger.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example &#x201c;cloud&#x201d; computing environment. Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g. networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services). In typical cloud computing systems, one or more large cloud data centers house the machines used to deliver the services provided by the cloud. Referring now to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the cloud computing environment <b>200</b> includes cloud data centers <b>204</b><i>a</i>, <b>204</b><i>b</i>, and <b>204</b><i>c </i>that are interconnected through the cloud <b>202</b>. Data centers <b>204</b><i>a</i>, <b>204</b><i>b</i>, and <b>204</b><i>c </i>provide cloud computing services to computer systems <b>206</b><i>a</i>, <b>206</b><i>b</i>, <b>206</b><i>c</i>, <b>206</b><i>d</i>, <b>206</b><i>e</i>, and <b>206</b><i>f </i>connected to cloud <b>202</b>.</p><p id="p-0081" num="0080">The cloud computing environment <b>200</b> includes one or more cloud data centers. In general, a cloud data center, for example the cloud data center <b>204</b><i>a </i>shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, refers to the physical arrangement of servers that make up a cloud, for example the cloud <b>202</b> shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, or a particular portion of a cloud. For example, servers are physically arranged in the cloud datacenter into rooms, groups, rows, and racks. A cloud datacenter has one or more zones, which include one or more rooms of servers. Each room has one or more rows of servers, and each row includes one or more racks. Each rack includes one or more individual server nodes. In some implementations, servers in zones, rooms, racks, and/or rows are arranged into groups based on physical infrastructure requirements of the datacenter facility, which include power, energy, thermal, heat, and/or other requirements. In an embodiment, the server nodes are similar to the computer system described in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The data center <b>204</b><i>a </i>has many computing systems distributed through many racks.</p><p id="p-0082" num="0081">The cloud <b>202</b> includes cloud data centers <b>204</b><i>a</i>, <b>204</b><i>b</i>, and <b>204</b><i>c </i>along with the network and networking resources (for example, networking equipment, nodes, routers, switches, and networking cables) that interconnect the cloud data centers <b>204</b><i>a</i>, <b>204</b><i>b</i>, and <b>204</b><i>c </i>and help facilitate the computing systems' <b>206</b><i>a</i>-<i>f </i>access to cloud computing services. In an embodiment, the network represents any combination of one or more local networks, wide area networks, or internetworks coupled using wired or wireless links deployed using terrestrial or satellite connections. Data exchanged over the network, is transferred using any number of network layer protocols, such as Internet Protocol (IP), Multiprotocol Label Switching (MPLS), Asynchronous Transfer Mode (ATM), Frame Relay, etc. Furthermore, in embodiments where the network represents a combination of multiple sub-networks, different network layer protocols are used at each of the underlying sub-networks. In some embodiments, the network represents one or more interconnected internetworks, such as the public Internet.</p><p id="p-0083" num="0082">The computing systems <b>206</b><i>a</i>-<i>f </i>or cloud computing services consumers are connected to the cloud <b>202</b> through network links and network adapters. In an embodiment, the computing systems <b>206</b><i>a</i>-<i>f </i>are implemented as various computing devices, for example servers, desktops, laptops, tablet, smartphones, Internet of Things (IoT) devices, AVs (including, cars, drones, shuttles, trains, buses, etc.) and consumer electronics. In an embodiment, the computing systems <b>206</b><i>a</i>-<i>f </i>are implemented in or as a part of other systems.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a computer system <b>300</b>. In an implementation, the computer system <b>300</b> is a special purpose computing device. The special-purpose computing device is hard-wired to perform the techniques or includes digital electronic devices such as one or more application-specific integrated circuits (ASICs) or field programmable gate arrays (FPGAs) that are persistently programmed to perform the techniques, or can include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware, memory, other storage, or a combination. Such special-purpose computing devices can also combine custom hard-wired logic, ASICs, or FPGAs with custom programming to accomplish the techniques. In various embodiments, the special-purpose computing devices are desktop computer systems, portable computer systems, handheld devices, network devices or any other device that incorporates hard-wired and/or program logic to implement the techniques.</p><p id="p-0085" num="0084">In an embodiment, the computer system <b>300</b> includes a bus <b>302</b> or other communication mechanism for communicating information, and a processor <b>304</b> coupled with a bus <b>302</b> for processing information. The processor <b>304</b> is, for example, a general-purpose microprocessor. The computer system <b>300</b> also includes a main memory <b>306</b>, such as a random-access memory (RAM) or other dynamic storage device, coupled to the bus <b>302</b> for storing information and instructions to be executed by processor <b>304</b>. In one implementation, the main memory <b>306</b> is used for storing temporary variables or other intermediate information during execution of instructions to be executed by the processor <b>304</b>. Such instructions, when stored in non-transitory storage media accessible to the processor <b>304</b>, render the computer system <b>300</b> into a special-purpose machine that is customized to perform the operations specified in the instructions.</p><p id="p-0086" num="0085">In an embodiment, the computer system <b>300</b> further includes a read only memory (ROM) <b>308</b> or other static storage device coupled to the bus <b>302</b> for storing static information and instructions for the processor <b>304</b>. A storage device <b>310</b>, such as a magnetic disk, optical disk, solid-state drive, or three-dimensional cross point memory is provided and coupled to the bus <b>302</b> for storing information and instructions.</p><p id="p-0087" num="0086">In an embodiment, the computer system <b>300</b> is coupled via the bus <b>302</b> to a display <b>312</b>, such as a cathode ray tube (CRT), a liquid crystal display (LCD), plasma display, light emitting diode (LED) display, or an organic light emitting diode (OLED) display for displaying information to a computer user. An input device <b>314</b>, including alphanumeric and other keys, is coupled to bus <b>302</b> for communicating information and command selections to the processor <b>304</b>. Another type of user input device is a cursor controller <b>316</b>, such as a mouse, a trackball, a touch-enabled display, or cursor direction keys for communicating direction information and command selections to the processor <b>304</b> and for controlling cursor movement on the display <b>312</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x-axis) and a second axis (e.g., y-axis), that allows the device to specify positions in a plane.</p><p id="p-0088" num="0087">According to one embodiment, the techniques herein are performed by the computer system <b>300</b> in response to the processor <b>304</b> executing one or more sequences of one or more instructions contained in the main memory <b>306</b>. Such instructions are read into the main memory <b>306</b> from another storage medium, such as the storage device <b>310</b>. Execution of the sequences of instructions contained in the main memory <b>306</b> causes the processor <b>304</b> to perform the process steps described herein. In alternative embodiments, hard-wired circuitry is used in place of or in combination with software instructions.</p><p id="p-0089" num="0088">The term &#x201c;storage media&#x201d; as used herein refers to any non-transitory media that store data and/or instructions that cause a machine to operate in a specific fashion. Such storage media includes non-volatile media and/or volatile media. Non-volatile media includes, for example, optical disks, magnetic disks, solid-state drives, or three-dimensional cross point memory, such as the storage device <b>310</b>. Volatile media includes dynamic memory, such as the main memory <b>306</b>. Common forms of storage media include, for example, a floppy disk, a flexible disk, hard disk, solid-state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NV-RAM, or any other memory chip or cartridge.</p><p id="p-0090" num="0089">Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example, transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise the bus <b>302</b>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infrared data communications.</p><p id="p-0091" num="0090">In an embodiment, various forms of media are involved in carrying one or more sequences of one or more instructions to the processor <b>304</b> for execution. For example, the instructions are initially carried on a magnetic disk or solid-state drive of a remote computer. The remote computer loads the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to the computer system <b>300</b> receives the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector receives the data carried in the infrared signal and appropriate circuitry places the data on the bus <b>302</b>. The bus <b>302</b> carries the data to the main memory <b>306</b>, from which processor <b>304</b> retrieves and executes the instructions. The instructions received by the main memory <b>306</b> can optionally be stored on the storage device <b>310</b> either before or after execution by processor <b>304</b>.</p><p id="p-0092" num="0091">The computer system <b>300</b> also includes a communication interface <b>318</b> coupled to the bus <b>302</b>. The communication interface <b>318</b> provides a two-way data communication coupling to a network link <b>320</b> that is connected to a local network <b>322</b>. For example, the communication interface <b>318</b> is an integrated service digital network (ISDN) card, cable modem, satellite modem, or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, the communication interface <b>318</b> is a local area network (LAN) card to provide a data communication connection to a compatible LAN. In some implementations, wireless links are also implemented. In any such implementation, the communication interface <b>318</b> sends and receives electrical, electromagnetic, or optical signals that carry digital data streams representing various types of information.</p><p id="p-0093" num="0092">The network link <b>320</b> typically provides data communication through one or more networks to other data devices. For example, the network link <b>320</b> provides a connection through the local network <b>322</b> to a host computer <b>324</b> or to a cloud data center or equipment operated by an Internet Service Provider (ISP) <b>326</b>. The ISP <b>326</b> in turn provides data communication services through the world-wide packet data communication network now commonly referred to as the &#x201c;Internet&#x201d; <b>328</b>. The local network <b>322</b> and Internet <b>328</b> both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on the network link <b>320</b> and through the communication interface <b>318</b>, which carry the digital data to and from the computer system <b>300</b>, are example forms of transmission media. In an embodiment, the network <b>320</b> contains the cloud <b>202</b> or a part of the cloud <b>202</b> described above.</p><p id="p-0094" num="0093">The computer system <b>300</b> sends messages and receives data, including program code, through the network(s), the network link <b>320</b>, and the communication interface <b>318</b>. In an embodiment, the computer system <b>300</b> receives code for processing. The received code is executed by the processor <b>304</b> as it is received, and/or stored in storage device <b>310</b>, or other non-volatile storage for later execution.</p><heading id="h-0007" level="2">AV Architecture</heading><p id="p-0095" num="0094"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example architecture <b>400</b> for an AV (e.g., the vehicle <b>100</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The architecture <b>400</b> includes a perception system <b>402</b> (sometimes referred to as a perception circuit), a planning system <b>404</b> (sometimes referred to as a planning circuit), a control system <b>406</b> (sometimes referred to as a control circuit), a localization system <b>408</b> (sometimes referred to as a localization circuit), and a database system <b>410</b> (sometimes referred to as a database circuit). Each system plays a role in the operation of the vehicle <b>100</b>. Together, the systems <b>402</b>, <b>404</b>, <b>406</b>, <b>408</b>, and <b>410</b> can be part of the AV system <b>120</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In some embodiments, any of the systems <b>402</b>, <b>404</b>, <b>406</b>, <b>408</b>, and <b>410</b> is a combination of computer software (e.g., executable code stored on a computer-readable medium) and computer hardware (e.g., one or more microprocessors, microcontrollers, application-specific integrated circuits [ASICs]), hardware memory devices, other types of integrated circuits, other types of computer hardware, or a combination of any or all of these things). Each of the systems <b>402</b>, <b>404</b>, <b>406</b>, <b>408</b>, and <b>410</b> is sometimes referred to as a processing circuit (e.g., computer hardware, computer software, or a combination of the two). A combination of any or all of the systems <b>402</b>, <b>404</b>, <b>406</b>, <b>408</b>, and <b>410</b> is also an example of a processing circuit.</p><p id="p-0096" num="0095">In use, the planning system <b>404</b> receives data representing a destination <b>412</b> and determines data representing a trajectory <b>414</b> (sometimes referred to as a route) that can be traveled by the vehicle <b>100</b> to reach (e.g., arrive at) the destination <b>412</b>. In order for the planning system <b>404</b> to determine the data representing the trajectory <b>414</b>, the planning system <b>404</b> receives data from the perception system <b>402</b>, the localization system <b>408</b>, and the database system <b>410</b>.</p><p id="p-0097" num="0096">The perception system <b>402</b> identifies nearby physical objects using one or more sensors <b>121</b>, e.g., as also shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The objects are classified (e.g., grouped into types such as pedestrian, bicycle, automobile, traffic sign, etc.) and a scene description including the classified objects <b>416</b> is provided to the planning system <b>404</b>.</p><p id="p-0098" num="0097">The planning system <b>404</b> also receives data representing the AV position <b>418</b> from the localization system <b>408</b>. The localization system <b>408</b> determines the AV position by using data from the sensors <b>121</b> and data from the database system <b>410</b> (e.g., a geographic data) to calculate a position. For example, the localization system <b>408</b> uses data from a GNSS (Global Navigation Satellite System) sensor and geographic data to calculate a longitude and latitude of the AV. In an embodiment, data used by the localization system <b>408</b> includes high-precision maps of the roadway geometric properties, maps describing road network connectivity properties, maps describing roadway physical properties (such as traffic speed, traffic volume, the number of vehicular and cyclist traffic lanes, lane width, lane traffic directions, or lane marker types and locations, or combinations of them), and maps describing the spatial locations of road features such as crosswalks, traffic signs or other travel signals of various types. In an embodiment, the high-precision maps are constructed by adding data through automatic or manual annotation to low-precision maps.</p><p id="p-0099" num="0098">The control system <b>406</b> receives the data representing the trajectory <b>414</b> and the data representing the AV position <b>418</b> and operates the control functions <b>420</b><i>a</i>-<i>c </i>(e.g., steering, throttling, braking, ignition) of the AV in a manner that will cause the vehicle <b>100</b> to travel the trajectory <b>414</b> to the destination <b>412</b>. For example, if the trajectory <b>414</b> includes a left turn, the control system <b>406</b> will operate the control functions <b>420</b><i>a</i>-<i>c </i>in a manner such that the steering angle of the steering function will cause the vehicle <b>100</b> to turn left and the throttling and braking will cause the vehicle <b>100</b> to pause and wait for passing pedestrians or vehicles before the turn is made.</p><heading id="h-0008" level="2">AV Inputs</heading><p id="p-0100" num="0099"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of inputs <b>502</b><i>a</i>-<i>d </i>(e.g., sensors <b>121</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and outputs <b>504</b><i>a</i>-<i>d </i>(e.g., sensor data) that is used by the perception system <b>402</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>). One input <b>502</b><i>a </i>is a LiDAR (Light Detection and Ranging) system (e.g., LiDAR <b>123</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). LiDAR is a technology that uses light (e.g., bursts of light such as infrared light) to obtain data about physical objects in its line of sight. A LiDAR system produces LiDAR data as output <b>504</b><i>a</i>. For example, LiDAR data is collections of 3D or 2D points (also known as point clouds) that are used to construct a representation of the environment <b>190</b>.</p><p id="p-0101" num="0100">Another input <b>502</b><i>b </i>is a RADAR system. RADAR is a technology that uses radio waves to obtain data about nearby physical objects. RADARs can obtain data about objects not within the line of sight of a LiDAR system. A RADAR system produces RADAR data as output <b>504</b><i>b</i>. For example, RADAR data are one or more radio frequency electromagnetic signals that are used to construct a representation of the environment <b>190</b>.</p><p id="p-0102" num="0101">Another input <b>502</b><i>c </i>is a camera system. A camera system uses one or more cameras (e.g., digital cameras using a light sensor such as a charge-coupled device [CCD]) to obtain information about nearby physical objects. A camera system produces camera data as output <b>504</b><i>c</i>. Camera data often takes the form of image data (e.g., data in an image data format such as RAW, JPEG, PNG, etc.). In some examples, the camera system has multiple independent cameras, e.g., for the purpose of stereopsis (stereo vision), which enables the camera system to perceive depth. Although the objects perceived by the camera system are described here as &#x201c;nearby,&#x201d; this is relative to the AV. In some embodiments, the camera system is configured to &#x201c;see&#x201d; objects far, e.g., up to a kilometer or more ahead of the AV. Accordingly, in some embodiments, the camera system has features such as sensors and lenses that are optimized for perceiving objects that are far away.</p><p id="p-0103" num="0102">Another input <b>502</b><i>d </i>is a traffic light detection (TLD) system. A TLD system uses one or more cameras to obtain information about traffic lights, street signs, and other physical objects that provide visual navigation information. A TLD system produces TLD data as output <b>504</b><i>d</i>. TLD data often takes the form of image data (e.g., data in an image data format such as RAW, JPEG, PNG, etc.). A TLD system differs from a system incorporating a camera in that a TLD system uses a camera with a wide field of view (e.g., using a wide-angle lens or a fish-eye lens) in order to obtain information about as many physical objects providing visual navigation information as possible, so that the vehicle <b>100</b> has access to all relevant navigation information provided by these objects. For example, the viewing angle of the TLD system is about 120 degrees or more.</p><p id="p-0104" num="0103">In some embodiments, outputs <b>504</b><i>a</i>-<i>d </i>are combined using a sensor fusion technique. Thus, either the individual outputs <b>504</b><i>a</i>-<i>d </i>are provided to other systems of the vehicle <b>100</b> (e.g., provided to a planning system <b>404</b> as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), or the combined output can be provided to the other systems, either in the form of a single combined output or multiple combined outputs of the same type (e.g., using the same combination technique or combining the same outputs or both) or different types type (e.g., using different respective combination techniques or combining different respective outputs or both). In some embodiments, an early fusion technique is used. An early fusion technique is characterized by combining outputs before one or more data processing steps are applied to the combined output. In some embodiments, a late fusion technique is used. A late fusion technique is characterized by combining outputs after one or more data processing steps are applied to the individual outputs.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows an example of a LiDAR system <b>602</b> (e.g., the input <b>502</b><i>a </i>shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>). The LiDAR system <b>602</b> emits light <b>604</b><i>a</i>-<i>c </i>from a light emitter <b>606</b> (e.g., a laser transmitter). Light emitted by a LiDAR system is typically not in the visible spectrum; for example, infrared light is often used. Some of the light <b>604</b><i>b </i>emitted encounters a physical object <b>608</b> (e.g., a vehicle) and reflects back to the LiDAR system <b>602</b>. (Light emitted from a LiDAR system typically does not penetrate physical objects, e.g., physical objects in solid form.) The LiDAR system <b>602</b> also has one or more light detectors <b>610</b>, which detect the reflected light. In an embodiment, one or more data processing systems associated with the LiDAR system generates an image <b>612</b> representing the field of view <b>614</b> of the LiDAR system. The image <b>612</b> includes information that represents the boundaries <b>616</b> of a physical object <b>608</b>. In this way, the image <b>612</b> is used to determine the boundaries <b>616</b> of one or more physical objects near an AV.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows the LiDAR system <b>602</b> in operation. In the scenario shown in this figure, the vehicle <b>100</b> receives both camera system output <b>504</b><i>c </i>in the form of an image <b>702</b> and LiDAR system output <b>504</b><i>a </i>in the form of LiDAR data points <b>704</b>. In use, the data processing systems of the vehicle <b>100</b> compares the image <b>702</b> to the data points <b>704</b>. In particular, a physical object <b>706</b> identified in the image <b>702</b> is also identified among the data points <b>704</b>. In this way, the vehicle <b>100</b> perceives the boundaries of the physical object based on the contour and density of the data points <b>704</b>.</p><p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows the operation of the LiDAR system <b>602</b> in additional detail. As described above, the vehicle <b>100</b> detects the boundary of a physical object based on characteristics of the data points detected by the LiDAR system <b>602</b>. As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a flat object, such as the ground <b>802</b>, will reflect light <b>804</b><i>a</i>-<i>d </i>emitted from a LiDAR system <b>602</b> in a consistent manner. Put another way, because the LiDAR system <b>602</b> emits light using consistent spacing, the ground <b>802</b> will reflect light back to the LiDAR system <b>602</b> with the same consistent spacing. As the vehicle <b>100</b> travels over the ground <b>802</b>, the LiDAR system <b>602</b> will continue to detect light reflected by the next valid ground point <b>806</b> if nothing is obstructing the road. However, if an object <b>808</b> obstructs the road, light <b>804</b><i>e</i>-<i>f </i>emitted by the LiDAR system <b>602</b> will be reflected from points <b>810</b><i>a</i>-<i>b </i>in a manner inconsistent with the expected consistent manner. From this information, the vehicle <b>100</b> can determine that the object <b>808</b> is present.</p><heading id="h-0009" level="2">Path Planning</heading><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a block diagram <b>900</b> of the relationships between inputs and outputs of a planning system <b>404</b> (e.g., as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). In general, the output of a planning system <b>404</b> is a route <b>902</b> from a start point <b>904</b> (e.g., source location or initial location), and an end point <b>906</b> (e.g., destination or final location). The route <b>902</b> is typically defined by one or more segments. For example, a segment is a distance to be traveled over at least a portion of a street, road, highway, driveway, or other physical area appropriate for automobile travel. In some examples, e.g., if the vehicle <b>100</b> is an off-road capable vehicle such as a four-wheel-drive (4WD) or all-wheel-drive (AWD) car, SUV, pick-up truck, or the like, the route <b>902</b> includes &#x201c;off-road&#x201d; segments such as unpaved paths or open fields.</p><p id="p-0109" num="0108">In addition to route <b>902</b>, a planning system also outputs lane-level route planning data <b>908</b>. The lane-level route planning data <b>908</b> is used to traverse segments of the route <b>902</b> based on conditions of the segment at a particular time. For example, if the route <b>902</b> includes a multi-lane highway, the lane-level route planning data <b>908</b> includes trajectory planning data <b>910</b> that the vehicle <b>100</b> can use to choose a lane among the multiple lanes, e.g., based on whether an exit is approaching, whether one or more of the lanes have other vehicles, or other factors that vary over the course of a few minutes or less. Similarly, in some implementations, the lane-level route planning data <b>908</b> includes speed constraints <b>912</b> specific to a segment of the route <b>902</b>. For example, if the segment includes pedestrians or un-expected traffic, the speed constraints <b>912</b> may limit the vehicle <b>100</b> to a travel speed slower than an expected speed, e.g., a speed based on speed limit data for the segment.</p><p id="p-0110" num="0109">In an embodiment, the inputs to the planning system <b>404</b> includes database data <b>914</b> (e.g., from the database system <b>410</b> shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), current location data <b>916</b> (e.g., the AV position <b>418</b> shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), destination data <b>918</b> (e.g., for the destination <b>412</b> shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), and object data <b>920</b> (e.g., the classified objects <b>416</b> as perceived by the perception system <b>402</b> as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). In some embodiments, the database data <b>914</b> includes rules used in planning. Rules are specified using a formal language, e.g., using Boolean logic. In any given situation encountered by the vehicle <b>100</b>, at least some of the rules will apply to the situation. A rule applies to a given situation if the rule has conditions that are met based on information available to the vehicle <b>100</b>, e.g., information about the surrounding environment. Rules can have priority. For example, a rule that says, &#x201c;if the road is a freeway, move to the leftmost lane&#x201d; can have a lower priority than &#x201c;if the exit is approaching within a mile, move to the rightmost lane.&#x201d;</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a directed graph <b>1000</b> used in path planning, e.g., by the planning system <b>404</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>). In general, a directed graph <b>1000</b> like the one shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref> is used to determine a path between any start point <b>1002</b> and end point <b>1004</b>. In real-world terms, the distance separating the start point <b>1002</b> and end point <b>1004</b> may be relatively large (e.g, in two different metropolitan areas) or may be relatively small (e.g., two intersections abutting a city block or two lanes of a multi-lane road).</p><p id="p-0112" num="0111">In an embodiment, the directed graph <b>1000</b> has nodes <b>1006</b><i>a</i>-<i>d </i>representing different locations between the start point <b>1002</b> and the end point <b>1004</b> that could be occupied by a vehicle <b>100</b>. In some examples, e.g., when the start point <b>1002</b> and end point <b>1004</b> represent different metropolitan areas, the nodes <b>1006</b><i>a</i>-<i>d </i>represent segments of roads. In some examples, e.g., when the start point <b>1002</b> and the end point <b>1004</b> represent different locations on the same road, the nodes <b>1006</b><i>a</i>-<i>d </i>represent different positions on that road. In this way, the directed graph <b>1000</b> includes information at varying levels of granularity. In an embodiment, a directed graph having high granularity is also a subgraph of another directed graph having a larger scale. For example, a directed graph in which the start point <b>1002</b> and the end point <b>1004</b> are far away (e.g., many miles apart) has most of its information at a low granularity and is based on stored data, but also includes some high granularity information for the portion of the graph that represents physical locations in the field of view of the vehicle <b>100</b>.</p><p id="p-0113" num="0112">The nodes <b>1006</b><i>a</i>-<i>d </i>are distinct from objects <b>1008</b><i>a</i>-<i>b </i>which cannot overlap with a node. In an embodiment, when granularity is low, the objects <b>1008</b><i>a</i>-<i>b </i>represent regions that cannot be traversed by automobile, e.g., areas that have no streets or roads. When granularity is high, the objects <b>1008</b><i>a</i>-<i>b </i>represent physical objects in the field of view of the vehicle <b>100</b>, e.g., other automobiles, pedestrians, or other entities with which the vehicle <b>100</b> cannot share physical space. In an embodiment, some or all of the objects <b>1008</b><i>a</i>-<i>b </i>are a static objects (e.g., an object that does not change position such as a street lamp or utility pole) or dynamic objects (e.g., an object that is capable of changing position such as a pedestrian or other car).</p><p id="p-0114" num="0113">The nodes <b>1006</b><i>a</i>-<i>d </i>are connected by edges <b>1010</b><i>a</i>-<i>c</i>. If two nodes <b>1006</b><i>a</i>-<i>b </i>are connected by an edge <b>1010</b><i>a</i>, it is possible for a vehicle <b>100</b> to travel between one node <b>1006</b><i>a </i>and the other node <b>1006</b><i>b</i>, e.g., without having to travel to an intermediate node before arriving at the other node <b>1006</b><i>b</i>. (When we refer to a vehicle <b>100</b> traveling between nodes, we mean that the vehicle <b>100</b> travels between the two physical positions represented by the respective nodes.) The edges <b>1010</b><i>a</i>-<i>c </i>are often bidirectional, in the sense that a vehicle <b>100</b> travels from a first node to a second node, or from the second node to the first node. In an embodiment, edges <b>1010</b><i>a</i>-<i>c </i>are unidirectional, in the sense that a vehicle <b>100</b> can travel from a first node to a second node, however the vehicle <b>100</b> cannot travel from the second node to the first node. Edges <b>1010</b><i>a</i>-<i>c </i>are unidirectional when they represent, for example, one-way streets, individual lanes of a street, road, or highway, or other features that can only be traversed in one direction due to legal or physical constraints.</p><p id="p-0115" num="0114">In an embodiment, the planning system <b>404</b> uses the directed graph <b>1000</b> to identify a path <b>1012</b> made up of nodes and edges between the start point <b>1002</b> and end point <b>1004</b>.</p><p id="p-0116" num="0115">An edge <b>1010</b><i>a</i>-<i>c </i>has an associated cost <b>1014</b><i>a</i>-<i>b</i>. The cost <b>1014</b><i>a</i>-<i>b </i>is a value that represents the resources that will be expended if the vehicle <b>100</b> chooses that edge. A typical resource is time. For example, if one edge <b>1010</b><i>a </i>represents a physical distance that is twice that as another edge <b>1010</b><i>b</i>, then the associated cost <b>1014</b><i>a </i>of the first edge <b>1010</b><i>a </i>may be twice the associated cost <b>1014</b><i>b </i>of the second edge <b>1010</b><i>b</i>. Other factors that affect time include expected traffic, number of intersections, speed limit, etc. Another typical resource is fuel economy. Two edges <b>1010</b><i>a</i>-<i>b </i>may represent the same physical distance, but one edge <b>1010</b><i>a </i>may require more fuel than another edge <b>1010</b><i>b</i>, e.g., because of road conditions, expected weather, etc.</p><p id="p-0117" num="0116">When the planning system <b>404</b> identifies a path <b>1012</b> between the start point <b>1002</b> and end point <b>1004</b>, the planning system <b>404</b> typically chooses a path optimized for cost, e.g., the path that has the least total cost when the individual costs of the edges are added together.</p><heading id="h-0010" level="2">AV Control</heading><p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a block diagram <b>1100</b> of the inputs and outputs of a control system <b>406</b> (e.g., as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). A control system operates in accordance with a controller <b>1102</b> which includes, for example, one or more processors (e.g., one or more computer processors such as microprocessors or microcontrollers or both) similar to processor <b>304</b>, short-term and/or long-term data storage (e.g., memory random-access memory or flash memory or both) similar to main memory <b>306</b>, ROM <b>308</b>, and storage device <b>310</b>, and instructions stored in memory that carry out operations of the controller <b>1102</b> when the instructions are executed (e.g., by the one or more processors).</p><p id="p-0119" num="0118">In an embodiment, the controller <b>1102</b> receives data representing a desired output <b>1104</b>. The desired output <b>1104</b> typically includes a velocity, e.g., a speed and a heading. The desired output <b>1104</b> can be based on, for example, data received from a planning system <b>404</b> (e.g., as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). In accordance with the desired output <b>1104</b>, the controller <b>1102</b> produces data usable as a throttle input <b>1106</b> and a steering input <b>1108</b>. The throttle input <b>1106</b> represents the magnitude in which to engage the throttle (e.g., acceleration control) of a vehicle <b>100</b>, e.g., by engaging the steering pedal, or engaging another throttle control, to achieve the desired output <b>1104</b>. In some examples, the throttle input <b>1106</b> also includes data usable to engage the brake (e.g., deceleration control) of the vehicle <b>100</b>. The steering input <b>1108</b> represents a steering angle, e.g., the angle at which the steering control (e.g., steering wheel, steering angle actuator, or other functionality for controlling steering angle) of the AV should be positioned to achieve the desired output <b>1104</b>.</p><p id="p-0120" num="0119">In an embodiment, the controller <b>1102</b> receives feedback that is used in adjusting the inputs provided to the throttle and steering. For example, if the vehicle <b>100</b> encounters a disturbance <b>1110</b>, such as a hill, the measured speed <b>1112</b> of the vehicle <b>100</b> is lowered below the desired output speed. In an embodiment, any measured output <b>1114</b> is provided to the controller <b>1102</b> so that the necessary adjustments are performed, e.g., based on the differential <b>1113</b> between the measured speed and desired output. The measured output <b>1114</b> includes a measured position <b>1116</b>, a measured velocity <b>1118</b> (including speed and heading), a measured acceleration <b>1120</b>, and other outputs measurable by sensors of the vehicle <b>100</b>. In embodiments, a current steering angle <b>1124</b> is provided as a measured output.</p><p id="p-0121" num="0120">In an embodiment, information about the disturbance <b>1110</b> is detected in advance, e.g., by a sensor such as a camera or LiDAR sensor, and provided to a predictive feedback system <b>1122</b>. The predictive feedback system <b>1122</b> then provides information to the controller <b>1102</b> that the controller <b>1102</b> can use to adjust accordingly. For example, if the sensors of the vehicle <b>100</b> detect (&#x201c;see&#x201d;) a hill, this information can be used by the controller <b>1102</b> to prepare to engage the throttle at the appropriate time to avoid significant deceleration.</p><p id="p-0122" num="0121"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows a block diagram <b>1200</b> of the inputs, outputs, and components of the controller <b>1102</b>. The controller <b>1102</b> has a speed profiler <b>1202</b> which affects the operation of a throttle/brake controller <b>1204</b>. For example, the speed profiler <b>1202</b> instructs the throttle/brake controller <b>1204</b> to engage acceleration or engage deceleration using the throttle/brake <b>1206</b> depending on, e.g., feedback received by the controller <b>1102</b> and processed by the speed profiler <b>1202</b>.</p><p id="p-0123" num="0122">The controller <b>1102</b> also has a lateral tracking controller <b>1208</b> which affects the operation of a steering controller <b>1210</b>. For example, the lateral tracking controller <b>1208</b> instructs the steering controller <b>1210</b> to adjust the position of the steering angle actuator <b>1212</b> depending on, e.g., feedback received by the controller <b>1102</b> and processed by the lateral tracking controller <b>1208</b>.</p><p id="p-0124" num="0123">The controller <b>1102</b> receives several inputs used to determine how to control the throttle/brake <b>1206</b> and steering angle actuator <b>1212</b>. A planning system <b>404</b> provides information used by the controller <b>1102</b>, for example, to choose a heading when the vehicle <b>100</b> begins operation and to determine which road segment to traverse when the vehicle <b>100</b> reaches an intersection. A localization system <b>408</b> provides information to the controller <b>1102</b> describing the current location of the vehicle <b>100</b>, for example, so that the controller <b>1102</b> can determine if the vehicle <b>100</b> is at a location expected based on the manner in which the throttle/brake <b>1206</b> and steering angle actuator <b>1212</b> are being controlled. In an embodiment, the controller <b>1102</b> receives information from other inputs <b>1214</b>, e.g., information received from databases, computer networks, etc.</p><heading id="h-0011" level="2">Obstacle Avoidance</heading><p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> is an illustration of a vehicle on a collision path <b>1300</b>A. The vehicle <b>1302</b> (e.g., vehicle <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may be an autonomous vehicle and is illustrated as traveling along a path <b>1304</b>. For purposes of description, the path is drawn along the center of a lane of traffic. However, the path can occur along any physical area that can be traversed by a vehicle, can correspond to a named thoroughfare (e.g., city street, interstate freeway, etc.) or can correspond to an unnamed thoroughfare (e.g., a driveway in a house or office building, a section of a parking lot, a section of a vacant lot, a dirt path in a rural area, etc.). Thus, the illustrated lanes of traffic are for explanation and should not be viewed as limiting.</p><p id="p-0126" num="0125">In the example of <figref idref="DRAWINGS">FIG. <b>13</b>A</figref>, a continuous route along the path <b>1304</b> is infeasible due to the location of an object <b>1306</b>. The object <b>1306</b> (e.g., natural obstructions <b>191</b>, vehicles <b>193</b>, pedestrians <b>192</b>, cyclists, and other obstacles of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) is detected by, for example, a perception circuit <b>402</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The path <b>1304</b> is a blocked path due to the location of object <b>1306</b>. A collision free path <b>1308</b> is also illustrated. In the example of <figref idref="DRAWINGS">FIG. <b>13</b>A</figref>, in a scenario where the vehicle <b>1302</b> continues along the path <b>1304</b>, the vehicle <b>1302</b> will collide with the object <b>1306</b>.</p><p id="p-0127" num="0126"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> is an illustration of a vehicle navigating a collision free path <b>1300</b>B. The vehicle <b>1302</b> is illustrated as avoiding a collision with the object <b>1306</b> by traveling from the path <b>1304</b> to the path <b>1308</b> to avoid the object <b>1306</b>. Once past a possibility of collision with the object <b>1306</b>, the vehicle <b>1302</b> returns to the path <b>1304</b>, which is clear beyond the object <b>1306</b>. The vehicle can also remain on path <b>1308</b>, which is also clear.</p><p id="p-0128" num="0127">Generally, the paths <b>1304</b> and <b>1308</b> are derived from a graph, such as the directed graph <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>. In an embodiment, a graph representing collision free paths through a space is generated within a configuration space (C-space). The C-space is a three-dimensional space parameterized by latitude (e.g., x), longitude (e.g., y), and a heading (e.g., <b>0</b>). The continuous C-space can be decomposed into a sequence of C-slices where a discrete heading corresponds to a slice (C-slice) of the C-space. Accordingly, the C-space decomposed into the set of C-slices is discrete in that the values of the heading are independent and at a predetermined resolution. In an embodiment, each discrete heading value represents a direction in which the vehicle is pointing, typically represented by an angle. For example, the heading value is an angular value within a field of view of one or more sensors, such as sensors <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Objects (e.g., natural obstructions <b>191</b>, vehicles <b>193</b>, pedestrians <b>192</b>, cyclists, and other obstacles of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) are represented as C-obstacles on each C-slice.</p><heading id="h-0012" level="2">C-Space Generation and Cell Decomposition</heading><p id="p-0129" num="0128">To quickly and efficiently determine a collision free path around one or more objects, the present techniques enable collision free path generation by connecting C-slices through cell decomposition. In embodiments, cell decomposition is performed to generate collision free paths among objects. In particular, trapezoidal decomposition is used to generate a number of collision free spaces within each C-slice corresponding to the multiple predetermined headings of a vehicle.</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow diagram of a process <b>1400</b> that enables fast collision free path generation. A collision free path is a path that avoids collisions with detected objects. Objects are detected using one or more sensors (e.g., sensors <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) such as radar, LiDAR (e.g., LiDAR <b>123</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>), or camera (e.g., cameras <b>122</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The sensor data (e.g., output <b>504</b><i>a</i>-<b>504</b><i>d </i>of <figref idref="DRAWINGS">FIG. <b>5</b></figref>) is obtained to calculate the poses and geometric shapes of all objects detected in the environment (e.g., environment <b>190</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0131" num="0130">At block <b>1402</b> a C-space is generated. To generate the C-space, the vehicle and objects are represented as convex polygons. Additionally, a start pose and an end pose are specified by the current and goal poses of the vehicle. Minkowski sums are computed between the vehicle and all detected objects. Representing the vehicle and the detected objects as convex polygons enables the calculation of the Minkowski sums as described below. In particular, Minkowski sums between the vehicle and all detected objects yields the C-space of the vehicle. The C-space consists of a number of C-slices, with each C-slice corresponding to a heading of the vehicle. Objects are represented in each C-slice as C-obstacles.</p><p id="p-0132" num="0131">At block <b>1404</b>, cell decomposition is performed for each C-slice. During cell decomposition, C-obstacle vertices are used to decompose each C-slice into a number of cells. Each cell of a C-slice represents free space that the vehicle can occupy. Discretizing the heading to obtain a number of C-slices and representing the vehicle and objects as convex polygons ultimately enables cell decomposition with a reduced computational complexity when compared to vehicle and obstacle representations in a higher-order space</p><p id="p-0133" num="0132">In <figref idref="DRAWINGS">FIG. <b>14</b></figref>, block <b>1406</b> represents vertex connection. Generally, during C-space generation at block <b>1402</b> vertices are generated and connected to define the C-obstacles. During cell decomposition at block <b>1404</b>, vertices of interest are inserted at strategic points within the free space of each C-slice. In an embodiment, vertices of interest are inserted along cell boundaries according to the C-obstacle type to obtain a C-slice adjacency list. The C-slice adjacency lists for all C-slices in a C-space forms a set of C-slice adjacency lists for the C-space. Cell decomposition and vertex connection are further described below with respect to <figref idref="DRAWINGS">FIG. <b>15</b></figref>.</p><p id="p-0134" num="0133">At block <b>1408</b>, graph generation is performed. During graph generation, a super adjacency list is derived from the set of C-slice adjacency lists. The super adjacency list is derived by connecting vertices of interest across the C-slice adjacency lists according to collision detection techniques. In an embodiment, the C-slice adjacency list is mapped to a C-slice adjacency graph that connects vertices of interest within each C-slice. The super adjacency list is mapped to a super adjacency graph for the entire C-space that connects vertices of interest across all C-slices. The derived adjacency lists require fewer vertices to generate collision free paths among many obstacles compared to other algorithms, and a path computed via the present techniques is smoother in terms of accumulation of curvatures. At block <b>1410</b>, a graph search is performed. The graph search enables the generation of collision free paths through the environment.</p><p id="p-0135" num="0134">The process flow diagram of <figref idref="DRAWINGS">FIG. <b>14</b></figref> is not intended to indicate that the blocks of the example process <b>1400</b> are to be executed in any order, or that all of the blocks are to be included in every case. Further, any number of additional blocks not shown may be included within the example process <b>1400</b>, depending on the details of the specific implementation. In some examples, the vertex connections may include adaptive vertex connection, such that insertion locations for the vertices are dependent on the type of C-obstacle, the location of the C-obstacle with respect to other C-obstacles, and the like.</p><p id="p-0136" num="0135"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a process flow diagram of a process <b>1500</b> that enables cell decomposition and vertex connection. At block <b>1502</b>, one or more headings within a field of view (e.g., field of view <b>614</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>) of a vehicle are sampled to generate the C-space. In an embodiment, headings of the vehicle are uniformly sampled. The heading is expressed as an angle within a field of view of a perception system. For example, a perception system <b>402</b> (<figref idref="DRAWINGS">FIG. <b>4</b></figref>) samples at multiple headings to capture sensor data for each heading in the x-y domain. The sensor data (e.g., output <b>504</b><i>a</i>, output <b>504</b><i>b</i>, output <b>504</b><i>c</i>, and output <b>504</b><i>d </i>of <figref idref="DRAWINGS">FIG. <b>5</b></figref>) is processed to identify nearby physical objects using one or more sensors <b>121</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). In an embodiment, the objects are identified in a Euclidean space. Sampling along the discrete heading values generates a continuous x-y space for each heading value and enables the creation of a C-space as a continuous three dimensional (3D) model. <figref idref="DRAWINGS">FIG. <b>16</b></figref> is an illustration of the continuous 3D model with a number of C-slices.</p><p id="p-0137" num="0136"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is an illustration of a C-space <b>1600</b> with a set of C-slices <b>1602</b>. As illustrated, an observed environment (e.g., environment <b>190</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) is mapped to each of C-slice <b>1602</b>A, C-slice <b>1602</b>B, C-slice <b>1602</b>C, C-slice <b>1602</b>D, C-slice <b>1602</b>E, and C-slice <b>1602</b>F. Each C-slice corresponds to a heading of a vehicle. One or more C-obstacles <b>1604</b> are computed for each C-slice <b>1602</b> based on the location of detected objects at the heading for each C-slice. The C-space <b>1600</b> is a three-dimensional space that is continuous in the x-y planes, identified according to the x, y, <b>0</b> coordinates 1606. A collision free path <b>1608</b> is generated across C-slices via a super adjacency list as described below.</p><p id="p-0138" num="0137">Referring again to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, at block <b>1504</b>, an iterative process for C-obstacle generation and cell decomposition for each C-slice is initiated. In an embodiment, the field of view of a sensor is divided into a predetermined number of C-slices. In an embodiment, the C-slices are evenly spaced throughout the field of view. For example, consider a full 360&#xb0; field of view in a global reference frame. In the example of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, the number of C-slices is six. Thus, the C-slices correspond to six heading values, each spaced 30&#xb0; apart to uniformly sample the environment across 180&#xb0; of the entire field of view. In an environment with a large number of detected objects, a finer level of sampling may be needed to accurately detect objects and generate C-obstacles. For example, increasing the number of C-slices to eleven, each spaced 15&#xb0; apart, defines a C-space with a finer resolution.</p><p id="p-0139" num="0138">A general assumption when computing the Minkowski sum between two geometric shapes is that the orientations are fixed, and in the context of C-slice generation this means that the headings of both the ego vehicle and the other object (e.g., actor vehicle) will be fixed. When generating multiple C-slices, the number of predetermined headings of the ego vehicle may vary with the heading of the actor vehicle fixed. In an example, the resolution of the headings is pi/20, to obtain 10 C-slices within the field of view of the AV. For ease of description, a particular number of predetermined headings within a certain field of view is described. However, the number of predetermined headings, the resultant number of C-slices, and the field of view of the vehicle may vary and should not be viewed as limiting. Further, in an embodiment, C-slices can be placed at a higher resolution in areas of the field of view where a high number of objects are detected, while being placed at a low resolution in areas of the field of view where there are relatively few or no objects.</p><p id="p-0140" num="0139">At block <b>1506</b>, for a current C-slice, a Minkowski sum is calculated between the vehicle and the detected objects. Calculating the Minkowski sum for the vehicle and all detected objects generates C-obstacles for each C-slice. Generally, the Minkowski sum calculates an offset that shifts the edges of the polygons that represent the detected objects by a certain distance. In particular, the Minkowski sum identifies a set of coordinates for which one polygon overlaps another polygon. By assuming the polygons are convex, the computational complexity of computing the Minkowski sum is reduced. To compute the Minkowski sum the smallest convex set that contains the vehicle and the smallest convex set that contains the objects are computed. In an example, this is the respective polygons for each of the vehicles and detected objects. Normals (e.g., a theoretical line extending from an edge of the polygon) for the edges of the convex polygons are drawn. The normals are drawn outward for the detected objects and inward for the vehicle. The normals are then sorted in an increasing order with respect to their angles. A first point in the Minkowski sum is arbitrarily chosen as a point where a centroid of the vehicle lies at one of the vertex-vertex contacts of the obstacle and vehicle. The Minkowski sum is generated by adding each edge in the order specified by the normals. A significant observation is that every edge of the Minkowski sum polygon is a translated edge from either a detected object or the vehicle convex polygon. After the Minkowski sum has been calculated for each detected object, the detected objects are drawn in the respective C-slice as C-obstacles. In an embodiment, the vehicle is represented in each C-slice as a point that moves through the C-space. By fixing the heading of the vehicle at various values throughout the environment, multiple C-slices are generated with the same object represented as a C-obstacle in each slice with different shapes as a result of the Minkowski sum operation.</p><p id="p-0141" num="0140">At block <b>1508</b>, cell decomposition is performed for the C-slice. During cell decomposition, C-obstacle vertices are used to decompose the C-slice into a number of cells that represent the free space within the C-space. As used herein, the free space is a portion of the C-slice where no C-obstacles are drawn. The free space of the C-slice corresponds to areas of the environment where no objects are detected. Cell decomposition creates a number of cell boundary lines within a C-slice based on the C-obstacle location. For a current C-slice, trapezoidal cell decomposition is performed to break down one C-slice of the C-space into several trapezoidal cells. <figref idref="DRAWINGS">FIG. <b>17</b>A</figref> is an illustration of C-slice <b>1700</b>A with a number of cells.</p><p id="p-0142" num="0141">In the C-slice <b>1700</b>A, a C-obstacle <b>1702</b> and a C-obstacle <b>1704</b> are illustrated. The C-obstacles <b>1702</b> and <b>1704</b> are derived by calculating Minkowski sums as described above. To generate the cells of the C-slice, boundary lines <b>1706</b> are drawn from each vertex of a C-obstacle to a border of the C-slice. The boundary lines include boundary lines <b>1706</b>A<b>1</b>, <b>1706</b>A<b>2</b>, <b>1706</b>B, <b>1706</b>C, <b>1706</b>D<b>1</b>, <b>1706</b>D<b>2</b>, <b>1706</b>E<b>1</b>, <b>1706</b>E<b>2</b>, <b>1706</b>F, <b>1706</b>G, <b>1706</b>H<b>1</b>, and <b>1706</b>H<b>2</b>. The border of the C-slice is the end of data for the C-slice. A C-obstacle vertex is a point where two edges of the C-obstacle convex polygon meet. The C-obstacle <b>1702</b> has C-obstacle vertices <b>1702</b>A, <b>1702</b>B, <b>1702</b>C and <b>1702</b>D. The C-obstacle <b>1704</b> has C-obstacle vertices <b>1704</b>A, <b>1704</b>B, <b>1704</b>C and <b>1704</b>D.</p><p id="p-0143" num="0142">Cell decomposition for each C-slice ensures that any path within a cell is obstacle free. In an embodiment, the cell decomposition is exact cell decomposition. In exact cell decomposition, at each vertex of a C-obstacle on the respective C-slice, a boundary line is extended from the vertex of the C-obstacle until a border of the C-space or another C-obstacle is reached. In the example of <figref idref="DRAWINGS">FIG. <b>17</b>A</figref>, boundary lines <b>1706</b> are illustrated using dashed lines that extend from a respective vertex of C-obstacles <b>1702</b> and <b>1704</b>. The dashed lines create a number of cells <b>1708</b>A, <b>1708</b>B, <b>1708</b>C, <b>1708</b>D, <b>1708</b>E, <b>1708</b>F, <b>1708</b>G, <b>1708</b>H, <b>1708</b>I, <b>1708</b>J, and <b>1708</b>K. In an embodiment, cell decomposition is approximate. In approximate cell decomposition, beginning with the entire C-slice as a cell, the cells are recursively subdivided until a cell lies completely within free space or completely within a C-obstacle. The subdivision may also end when a predetermined limit on cell subdivision is achieved. The boundary lines <b>1706</b> create a number of cells that are trapezoidal. By extending boundary lines <b>1706</b> from vertices of the C-obstacle, the resulting free cells are ensured to be convex trapezoids.</p><p id="p-0144" num="0143">Referring again to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, cells are defined during cell decomposition at block <b>1510</b>. Cells (e.g. cells <b>1708</b>A-K of <figref idref="DRAWINGS">FIG. <b>17</b></figref>) are assigned a cell identification (ID). A cell adjacency list is also derived. The cell adjacency list identifies cells that are adjacent via a list of pairwise cell IDs. Two cells are adjacent, for example, when the cells share a boundary line <b>1706</b>. For example, with respect to <figref idref="DRAWINGS">FIG. <b>17</b>A</figref>, cells <b>1708</b>A and <b>1708</b>B are adjacent, as they share boundary line <b>1706</b>A<b>1</b>. Additionally, cells <b>1708</b>A and <b>1708</b>C are adjacent, as they share boundary line <b>1706</b>A<b>2</b>.</p><p id="p-0145" num="0144">At block <b>1512</b>, vertices of interest are inserted into each C-slice. For each C-slice corresponding to a particular pose of the vehicle, a vertex of interest is inserted at each boundary line <b>1706</b>. Each vertex is identified by a vertex ID and a cell ID location. Referring again to <figref idref="DRAWINGS">FIG. <b>17</b>A</figref>, vertices of interest <b>1710</b> are inserted at the midpoint of each boundary line <b>1706</b>, where the midpoint is measured from the C-obstacle vertex to the border of the C-slice. In embodiments, the vertices of interest are inserted at a midpoint of a corresponding boundary line. <figref idref="DRAWINGS">FIG. <b>17</b>A</figref> includes a number of vertices of interest <b>1710</b>, each illustrated as a black dot on a boundary line <b>1706</b>. Since the free space trapezoidal cells are convex polygons, a straight line that connects a vertex of interest along one boundary line to a vertex of interest of another boundary line (e.g., boundary lines <b>1706</b>A<b>1</b>, <b>1706</b>D<b>1</b>, <b>1706</b>E<b>1</b>, and <b>1706</b>H<b>1</b>) is a collision free path through the cell when the cells are adjacent.</p><p id="p-0146" num="0145">At block <b>1512</b>, a list of adjacent vertices of interest is generated. A first vertex of interest is adjacent to a second vertex of interest if they are located on boundary lines <b>1706</b> that have a cell in common. For example, vertex of interest <b>1710</b>A is adjacent to vertex <b>1710</b>C, as each of the boundary lines <b>1706</b>A<b>1</b> and <b>1706</b>B border cell <b>1708</b>B. Vertex of interest <b>1710</b>A is adjacent to vertex <b>1710</b>B, as each of the boundary lines <b>1706</b>A<b>1</b> and <b>1706</b>B are collinear and connected by C-obstacle vertex <b>1702</b>A. A list of adjacent vertices of interest is a pairwise list of vertex identification (IDs).</p><p id="p-0147" num="0146">In <figref idref="DRAWINGS">FIG. <b>17</b>A</figref>, the selection of vertices of interest is according to the midpoint of each boundary line <b>1706</b> as described above. Selecting the midpoint of each cell boundary line as a vertex is typically sufficient to cover all free space in the C-space. Selecting the midpoint of the boundary lines for vertices of interest also reduces the number of vertices needed to cover the free space of a C-space. Redundant vertices that cover approximately the same space as the midpoint vertices are eliminated.</p><p id="p-0148" num="0147">In embodiments, the selection of a location for a vertex of interest is adaptive based on a type of C-obstacle nearest to the boundary line. For example, consider a scenario where the C-obstacle corresponds to a pedestrian. Rather than selecting a midpoint of the boundary line generated from the pedestrian C-obstacle as the location for vertex insertion, the vertex of interest is placed even further away from the pedestrian. For example, the vertex of interest is inserted at 75% of the distance from the C-obstacle vertex to the end of the boundary line. Thus, the present techniques are not obstacle agnostic and can evaluate the type of object when establishing vertices of interest.</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>17</b>B</figref> is an illustration of adaptive insertion of vertices of interest. In adaptive insertion, vertices of interest are generated to create paths with difference clearance strategies such that a path can be closer to one type of object (such as a sedan) while further away from another type of object (huge truck, pedestrian). For example, the C-obstacle <b>1722</b> represents a vehicle. When the C-obstacle is a vehicle, vertices of interest may be inserted closer to the C-obstacle. In the example of <figref idref="DRAWINGS">FIG. <b>17</b>B</figref>, the C-obstacle <b>1724</b> represents a pedestrian. For a pedestrian, vertex insertion is located farther away from the C-obstacle to provide a greater amount of space when planning a path near the pedestrian. Accordingly, vertices of interest <b>1720</b>A, <b>1720</b>B, <b>1720</b>C, <b>1720</b>D, <b>1720</b>E, and <b>1720</b>F are closer to C-obstacle <b>1722</b> when compared to vertices of interest <b>1720</b>G, <b>1720</b>H, <b>1720</b>I, <b>1720</b>J, <b>1720</b>K, and <b>1720</b>L near C-obstacle <b>1724</b>. Accordingly, the inserted vertices are not required to be uniformly spaced. In an embodiment, the insertion of vertices is adaptive based on the type of detected object on which the C-obstacle is based.</p><p id="p-0150" num="0149">Referring again to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, at block <b>1514</b> vertices of interest are connected by transitions across adjacent cells to form an adjacency graph for each C-slice. The identification of valid Dubins paths in the list of adjacent vertices in view of a connection strategy can transform the list of adjacent vertices to an adjacency graph for the C-slice as described with respect to <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref>. The adjacency list provides information on which vertices of interest are adjacent to other vertices of interest on a current C-slice. In an embodiment, the adjacency list is based on whether the cells are connected (adjacent) to each other. The adjacency list for each C-slice is further pruned by determining whether two adjacent vertices can be connected by a valid Dubins path without collision. A Dubins path is the shortest curve that connects two points in a two-dimensional Euclidean plane (X-Y plane). A Dubins path has a constraint on the curvature of the path and the prescribed initial and terminal tangents to the path. Further, there is an assumption that the vehicle traveling the path only travels forward. To perform the collision checking, a set of vehicle poses is calculated by discretizing the Dubins path, and then for each pose, a traditional convex polygon intersection algorithm is used to determine if the vehicle collides (intersects) with any of the C-obstacles. Generally, discretizing the Dubins path creates a polygonal path based on the curvature constrained Dubins path. The discretized Dubins path is subject to turn constraints and length constraints. When connecting vertices of interest according to a connection strategy as described herein, the connections are valid Dubins paths as detected at block <b>1514</b>. By adding only valid Dubins paths, the present techniques consider the kinematics of the vehicle when generating an adjacency graph via vertex connection. Note that all calculations described with respect to block <b>1514</b> <figref idref="DRAWINGS">FIG. <b>15</b></figref> are applied a current C-slice, and vertices of interest for each C-slice are generated independently of other C-slices. The vertices of interest are connected by valid Dubins paths to form an adjacency graph for each C-slice.</p><p id="p-0151" num="0150">If there are additional C-slices left for decomposition and adjacency graph determination, process flow returns to block <b>1504</b>. If all C-slices have been decomposed and a C-slice adjacency list generated, process flow continues to block <b>1516</b>. At block <b>1516</b>, vertices of interest are connected across all C-slices. For example, the C-slice adjacency lists are combined to generate a super adjacency list for the C-slice. The identification of valid Dubins paths in the super adjacency list in view of a connection strategy can transform the super adjacency list to a super adjacency graph for the C-space as described with respect to <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref>. The connections across C-slices that are not valid Dubins paths are removed from the super adjacency graph.</p><p id="p-0152" num="0151">The process flow diagram of <figref idref="DRAWINGS">FIG. <b>15</b></figref> is not intended to indicate that the blocks of the example process <b>1500</b> are to be executed in any order, or that all of the blocks are to be included in every case. Further, any number of additional blocks not shown may be included within the example process <b>1500</b>, depending on the details of the specific implementation. In some examples, the vertex connections may include adaptive vertex connection, such that insertion locations for the vertices are dependent on the type of C-obstacle, the location of the C-obstacle with respect to other C-obstacles, and the like.</p><p id="p-0153" num="0152">The block diagrams of <figref idref="DRAWINGS">FIGS. <b>16</b>, <b>17</b>A, and <b>17</b>B</figref> are not intended to indicate that the C-slices of <figref idref="DRAWINGS">FIGS. <b>16</b>, <b>17</b>A, and <b>17</b>B</figref> are to include all of the components shown in <figref idref="DRAWINGS">FIGS. <b>16</b>, <b>17</b>A</figref>, and <b>17</b>B. Rather, the C-slices can include fewer or additional components not illustrated in <figref idref="DRAWINGS">FIGS. <b>16</b>, <b>17</b>A, and <b>17</b>B</figref> (e.g., additional C-slices, C-obstacles, vertices of interest, boundary lines, etc.). The C-space <b>1600</b>, C-slice <b>1700</b>A, and C-slice <b>1700</b>B may include any number of additional components not shown, depending on the details of the specific implementation. Furthermore, any of the cell decomposition, adjacency list generation, cell ID generation, vertex ID generation, graph generation and other described functionalities may be partially, or entirely, implemented in hardware and/or in a processor. For example, the functionality may be implemented with an application specific integrated circuit, in logic implemented in a processor, in logic implemented in a specialized graphics processing unit, or in any other device.</p><heading id="h-0013" level="2">Graph Generation and Search</heading><p id="p-0154" num="0153">Referring again to <figref idref="DRAWINGS">FIG. <b>17</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>17</b>B</figref>, illustrations of C-slices <b>1700</b>A and <b>1700</b>B are provided. For example, the C-slices <b>1700</b>A and <b>1700</b>B are a C-slice <b>1602</b> from <figref idref="DRAWINGS">FIG. <b>16</b></figref>. As discussed above, for each C-slice, C-obstacles are represented by a convex polygon. For each C-slice cell decomposition is performed and an adjacency list is generated for each C-slice. In a similar manner, a super adjacency list for vertices of interest across for C-slices is generated. The generation of a super adjacency graph based on the super adjacency list slices is according to the connection strategies described with respect to <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref>. The connection strategies are based on, at least in part, the location of a first C-slice with respect to other C-slices within the C-space.</p><p id="p-0155" num="0154">A C-slice is adjacent to another C-slice when the C-slices are adjacent in a list of sequential heading values for the C-slices. For example, consider a C-space with six C-slices that sample the environment every 30&#xb0;. A first C-slice samples at a heading of 0&#xb0;, a second C-slice samples at a heading of 30&#xb0;, a third C-slice samples at a heading of 60&#xb0;, a fourth C-slice samples at a heading of 90&#xb0;, a fifth C-slice samples at a heading of 120&#xb0;, and a sixth C-slice samples at a heading of 150&#xb0;. In this example, the second C-slice is adjacent to the first C-slice and the third C-slice. Connection strategies vary how vertices of interest are connected within each C-slice, and how vertices of interest are connected across C-slices. The connection of vertices of interest across C-slices results in a super adjacency graph for the entire C-space. As described with respect to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the available connections within each C-slice and across C-slices will be those for which a valid Dubins path exists. In an embodiment, the resulting adjacency graph for the C-space is augmented by computing the cost for each edge that connects two adjacent poses.</p><p id="p-0156" num="0155"><figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref> are illustrations of connectivity strategies. <figref idref="DRAWINGS">FIG. <b>18</b>A</figref> is an illustration of super adjacency graph <b>1800</b>A using a brute force connection strategy. In a brute force connection strategy, vertices of interest in a first C-slice are connected to all vertices of interest in the first C-slice and in other C-slices. The computational complexity for generating the super adjacency graph <b>1800</b>A using the brute force connection strategy is O(m<sup>2</sup>n<sup>2</sup>), where m is the number of C-slices and n is the number of vertices of interest within each C-slice. The brute force connection strategy creates a complete super adjacency graph <b>1800</b>A that includes all possible paths in the C-space. A planning system of the vehicle can select a best, most convenient path using the super adjacency graph <b>1800</b> as all possible paths are available.</p><p id="p-0157" num="0156"><figref idref="DRAWINGS">FIG. <b>18</b>B</figref> is an illustration of super adjacency graph <b>1800</b>B using a brute force beyond a ball connection strategy. Generally, connections using a Dubins path within a certain radius (e.g., ball) from a vertex could violate the minimum turning radius of the vehicle, which can be eliminated automatically without attempting to make the connections. Therefore, to enforce connections beyond a ball region around a graph vertex makes graph connections faster since some infeasible graph edges are not attempted to connect at all.</p><p id="p-0158" num="0157">In the brute force beyond a ball connection strategy, vertices of interest in a first C-slice are connected to all vertices of interest in the first C-slice and in other C-slices, within a predetermined distance from the respective vertex of interest. For example, a first vertex of interest connects only to other vertices of interest within a particular range, such as those within a predetermined radius within the C-space. The radius is used to filter out the vertices of interest that are too far away from a current vertex of interest. The computational complexity is dependent on the radius of the sphere. The computational complexity for generating the super adjacency graph <b>1800</b>B using the brute force beyond a ball connection strategy approaches O(m<sup>2</sup>n<sup>2</sup>) as the radius increases.</p><p id="p-0159" num="0158"><figref idref="DRAWINGS">FIG. <b>18</b>C</figref> is an illustration of a super adjacency graph <b>1800</b>C using an adjacent cell, brute force adjacent slices connection strategy. Recall that each C-slice has a number of cells that are generated during cell decomposition. In the adjacent cell, brute force adjacent slices connection strategy, vertices of interest in a first C-slice are connected to all vertices of interest in adjacent cells of the first C-slice. Across C-slices, each vertex of interest is connected to all vertices of interest in adjacent C-slices. For the adjacent cell, brute force adjacent slices connection strategy, the computational complexity is O(mn<sup>2</sup>). By limiting the connection strategy across C-slices to only those adjacent C-slices, the number of possible C-slices available for connection is reduced. This results in a reduction in computational complexity.</p><p id="p-0160" num="0159"><figref idref="DRAWINGS">FIG. <b>18</b>D</figref> is an illustration of a super adjacency graph <b>1800</b>D using an adjacent cell, brute force inter-slice connection strategy. The adjacent cell, brute force inter-slice connection strategy connects vertices of interest in a first C-slice with vertices of interest at adjacent cells of the first C-slice. Across C-slices, each vertex of interest is connected to all vertices of interest in all other C-slices. For the adjacent cell, brute force inter-slice connection strategy, the computational complexity is O(m<sup>2</sup>n<sup>2</sup>).</p><p id="p-0161" num="0160"><figref idref="DRAWINGS">FIG. <b>18</b>E</figref> is an illustration of a super adjacency graph <b>1800</b>E using a grid-like connection strategy. In the grid-like connection strategy, vertices of interest in a first C-slice are connected to all vertices of interest in adjacent cells of the first C-slice. Across C-slices, each vertex of interest is connected to all vertices of interest in adjacent C-slices. For each vertex, connections are made between the vertices within the adjacent cells from the adjacent C-slice (no attempt connections across multiple cells). For grid-like adjacency, the computation time is O(mn).</p><p id="p-0162" num="0161">The block diagrams of <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref> are not intended to indicate that the super adjacency graphs of <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref> are to include all of the components shown in <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref>. Rather, the graphs can include fewer or additional components not illustrated in FIGs. <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref> (e.g., additional C-slices, C-slices at differing resolutions, adaptive vertex insertion, vertices of interest, edges, etc.). The super adjacency graphs may include any number of additional components not shown, depending on the details of the specific implementation. Furthermore, any of the connection strategies may be partially, or entirely, implemented in hardware and/or in a processor. For example, the functionality may be implemented with an application specific integrated circuit, in logic implemented in a processor, in logic implemented in a specialized graphics processing unit, or in any other device.</p><p id="p-0163" num="0162">The connection strategies described with respect to <figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>E</figref> selectively reduce the number of edges within the C-slice adjacency graphs and the C-space super adjacency graph. This reduction ultimately reduces the amount of collision avoidance computations performed by a planning system (e.g., planning system <b>404</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>) when planning a path. In an embodiment, a graph search is performed to identify a path using the super adjacency graph.</p><p id="p-0164" num="0163">During a graph search, a k-nearest neighbor algorithm is executed to obtain a set of start vertices and a set of end vertices in the super adjacency graph that are closest to the start and end poses of the vehicle. In some cases the actual start and end pose of the vehicle do not completely line up with vertices of the generated C-space. Invalid start and end vertices are filtered out by determining if a valid Dubins path exists that can connect the start vertices and the end vertices. Given all combinations of valid start and end vertices, the shortest path between each start vertex and an end vertex pair is calculated using a shortest path algorithm. The path with the smallest total cost is selected as the optimal path through the space. In an embodiment, Dijkstra's algorithm is executed to find the shortest path in the graph for each pair of start and end vertices. In an embodiment, the shortest path algorithm is an A* algorithm. For ease of description, paths are described as being selected according to a lowest cost. However, a most optimal path can be selected based on time, environment, or any other factors.</p><heading id="h-0014" level="2">Collision Free Path Generation by Connecting C-Slices Through Cell Decomposition</heading><p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. <b>19</b></figref> a process flow diagram of a process <b>1900</b> that enables fast collision free path generation by connecting C-slices through cell decomposition. In the example of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, Dubins paths are determined and used to connect the critical points between C-slices.</p><p id="p-0166" num="0165">At block <b>1902</b>, the environment (e.g., environment <b>190</b>) is sampled at discrete headings of a vehicle to generate a configuration space (C-space) with one or more C-slices, each C-slice corresponding to a discrete heading of the vehicle. In an embodiment, the environment is sampled using a perception system (e.g., perception system <b>402</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Discrete headings enable the use of Minkowski sums to represent the vehicle and objects as convex polygons.</p><p id="p-0167" num="0166">At block <b>1904</b>, cell decomposition is performed at the one or more C-slices. Cell decomposition decomposes each C-slice into a number of cells that represent areas of the environment where no objects are detected.</p><p id="p-0168" num="0167">At block <b>1906</b>, a C-slice adjacency list is generated. The C-slice adjacency list is a list of vertices of interest for each C-slice and adjacency information associated with each vertex of interest. Two cells that share a boundary line are adjacent, and vertices of interest are inserted along boundary lines. In an embodiment, vertices of interest are inserted at the mid-point of each cell boundary line. In an embodiment, vertices of interest are located adaptively by selecting a vertex location on the cell boundary based on a type of nearby C-obstacle.</p><p id="p-0169" num="0168">At block <b>1908</b>, a super adjacency list of vertices of interest is derived for the C-space. The super adjacency list and the adjacency lists are used to connect vertices of interest with one or more edges to form a super adjacency graph. Strategies for connections of vertices of interest across the one or more C-slices include, for example, cell based brute-force (e.g., <figref idref="DRAWINGS">FIG. <b>18</b>A</figref>), brute-force beyond a ball (e.g., <figref idref="DRAWINGS">FIG. <b>18</b>B</figref>), cell-based, adjacent cell and brute-force for inter-cell connections (e.g., <figref idref="DRAWINGS">FIG. <b>18</b>C</figref>), cell-based, adjacent cell and brute-force for adjacent cell connections (e.g., <figref idref="DRAWINGS">FIG. <b>18</b>D</figref>), or cell-based, grid-like (e.g., <figref idref="DRAWINGS">FIG. <b>18</b>E</figref>).</p><p id="p-0170" num="0169">At block <b>1910</b>, an optimal path for the vehicle to traverse is navigated by determining a shortest path from a starting pose to a goal pose via the super adjacency graph.</p><p id="p-0171" num="0170">In the foregoing description, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The description and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention, and what is intended by the applicants to be the scope of the invention, is the literal and equivalent scope of the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. In addition, when we use the term &#x201c;further comprising,&#x201d; in the foregoing description or following claims, what follows this phrase can be an additional step or entity, or a sub-step/sub-entity of a previously-recited step or entity.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>sampling, by a perception circuit, an environment at discrete headings of a vehicle to generate a configuration space (C-space) with one or more C-slices, wherein a first C-slice corresponds to a discrete heading of the vehicle, and the vehicle and detected objects are represented by convex polygons;</claim-text><claim-text>decomposing, by a processor, the first C-slice into one or more cells that represent free space;</claim-text><claim-text>generating, by the processor, a C-slice adjacency list for the first C-slice, wherein two cells that share a boundary line are adjacent and vertices of interest are inserted along boundary lines;</claim-text><claim-text>deriving, by the processor, a super adjacency list for the C-space, wherein the super adjacency list connects vertices of interest across the one or more C-slices to form a super adjacency graph based on, at least in part, a Dubins path; and</claim-text><claim-text>navigating, by a planning circuit, an optimal path, wherein the optimal path is a shortest path from a starting pose to a goal pose on the super adjacency graph.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the discrete headings are predetermined.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein decomposing the first C-slice into a number of cells comprises:<claim-text>calculating a Minkowski sum between a convex polygon of the vehicle and a convex polygon of the detected objects to obtain C-obstacle vertices, wherein a detected object corresponds to a C-obstacle; and</claim-text><claim-text>inserting a boundary line with a first point at a C-obstacle vertex and extending the boundary line to a second point, wherein the second point is located at another C-obstacle, a border of the first C-slice, or any combinations thereof.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a vertex of interest is inserted at a midpoint of a corresponding boundary line.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the vertices of interest are adaptively inserted based on, at least in part, a C-obstacle type.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the super adjacency graph is derived by connecting the vertices of interest in the first C-slice with all remaining vertices of interest in other C-slices of the one or more of C-slices.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the super adjacency graph is derived by, for each vertex of interest in the first C-slice, connecting a respective vertex of interest of the first C-slice with the vertices of interest in other C-slices that are within a predetermined distance from the respective vertex of interest.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the super adjacency graph is derived by, for each vertex of interest in the first C-slice, connecting the vertices of interest in the first C-slice to the vertices of interest in adjacent cells of the first C-slice and connecting the vertices of interest in the first C-slice to the vertices of interest in adjacent C-slices.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the super adjacency graph is derived by connecting the vertices of interest in the first C-slice with the vertices of interest in adjacent cells of the first C-slice and connecting the vertices of interest in the first C-slice to the vertices of interest in the one or more C-slices.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the super adjacency graph is derived by, for each vertex of interest in the first C-slice, connecting a respective vertex of interest to other vertices of interest in other C-slices to form a grid.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A non-transitory computer-readable storage medium comprising at least one program for execution by at least one processor of a first device, the at least one program including instructions which, when executed by the at least one processor, carry out a method comprising:<claim-text>sampling an environment at discrete headings of a vehicle to generate a configuration space (C-space) with one or more C-slices, wherein a first C-slice corresponds to a discrete heading of the vehicle, and the vehicle and detected objects are represented by convex polygons;</claim-text><claim-text>decomposing the first C-slice into one or more of cells that represent free space;</claim-text><claim-text>generating a C-slice adjacency list for the first C-slice, wherein two cells that share a boundary line are adjacent and vertices of interest are inserted along boundary lines;</claim-text><claim-text>deriving a super adjacency list for the C-space, wherein the super adjacency list connects vertices of interest across the one or more C-slices to form a super adjacency graph based on, at least in part, a Dubins path; and</claim-text><claim-text>navigating an optimal path, wherein the optimal path is a shortest path from a starting pose to a goal pose on the super adjacency graph.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-readable storage medium of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein decomposing the first C-slice into a number of cells comprises:<claim-text>calculating a Minkowski sum between a convex polygon of the vehicle and a convex polygon of the detected objects to obtain C-obstacle vertices, wherein a detected object corresponds to a C-obstacle; and</claim-text><claim-text>inserting a boundary line with a first point at a C-obstacle vertex and extending the boundary line to a second point, wherein the second point is located at another C-obstacle, a border of the first C-slice, or any combination thereof.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A vehicle, comprising:<claim-text>at least one sensor configured to detect poses and geometric shapes of objects in an environment, wherein a start pose and an end pose of the vehicle is specified;</claim-text><claim-text>at least one computer-readable medium storing computer-executable instructions;</claim-text><claim-text>at least one processor communicatively coupled to the at least one sensor and configured to execute the computer executable instructions, the execution carrying out operations including:</claim-text><claim-text>sampling the environment at discrete headings of the vehicle to generate a configuration space (C-space) with one or more C-slices, wherein a first C-slice corresponds to a discrete heading of the vehicle, and wherein the vehicle and the objects are represented by convex polygons;</claim-text><claim-text>decomposing the first C-slice into one or more cells that represent free space;</claim-text><claim-text>generating a C-slice adjacency list for the first C-slice, wherein two cells that share a boundary line are adjacent and vertices of interest are inserted along boundary lines;</claim-text><claim-text>deriving a super adjacency list for the C-space, wherein the super adjacency list connects vertices of interest across the one or more C-slices to form a super adjacency graph based on at least in part, a Dubins path; and</claim-text><claim-text>a control circuit communicatively coupled to the at least one processor, wherein the control circuit is configured to operate the vehicle from the start pose to the end pose based on the super adjacency graph.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The vehicle of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the operations comprise:<claim-text>calculating a Minkowski sum between a convex polygon of vehicle and a convex polygon the objects obtain C-obstacle vertices, wherein an object corresponds to a C-obstacle; and</claim-text><claim-text>inserting a boundary line with a first point at a C-obstacle vertex and extending the boundary line to a second point, wherein the second point is located at another C-obstacle, a border of the first C-slice, or any combinations thereof.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise inserting a vertex of interest at a midpoint of a corresponding boundary line.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise adaptively inserting the vertices of interest based on, at least in part, a C-obstacle type.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise deriving the super adjacency graph by connecting the vertices of interest in the first C-slice with all remaining vertices of interest in other C-slices of the one or more of C-slices.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise deriving the super adjacency graph by, for each vertex of interest in the first C-slice, connecting a respective vertex of interest of the first C-slice with vertices of interest in other C-slices that are within a predetermined distance from the respective vertex of interest.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise deriving the super adjacency graph by, for each vertex of interest in the first C-slice, connecting the vertices of interest in the first C-slice to the vertices of interest in adjacent cells of the first C-slice and connecting each vertex of interest in the first C-slice to the vertices of interest in adjacent C-slices.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise deriving the super adjacency graph by, for each vertex of interest in the first C-slice, connecting vertices of interest in the first C-slice with the vertices of interest in adjacent cells of the first C-slice and connecting the vertices of interest in the first C-slice to the vertices of interest in each of the one or more C-slices.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The vehicle of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the operations comprise deriving the super adjacency graph by, for each vertex of interest in the first C-slice, connecting a respective vertex of interest to other vertices of interest in other C-slices to form a grid.</claim-text></claim></claims></us-patent-application>