<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005547A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005547</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17939012</doc-number><date>20220907</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>KR</country><doc-number>10-2020-0116067</doc-number><date>20200910</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>10</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>107</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">MEMORY CONTROLLER, MEMORY DEVICE AND STORAGE DEVICE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17191412</doc-number><date>20210303</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11468952</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17939012</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SAMSUNG ELECTRONICS CO., LTD.</orgname><address><city>SUWON-SI</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>KIM</last-name><first-name>IN-SU</first-name><address><city>YONGIN-SI</city><country>KR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CHOI</last-name><first-name>HYUN JIN</first-name><address><city>SUWON-SI</city><country>KR</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>TRAN</last-name><first-name>ALAIN</first-name><address><city>HWASEONG-SI</city><country>KR</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>SHIN</last-name><first-name>BEOM KYU</first-name><address><city>SEONGNAM-SI</city><country>KR</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>CHEONG</last-name><first-name>WOO SEONG</first-name><address><city>SUWON-SI</city><country>KR</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A memory controller includes an interface and a control module. The interface interfaces with a memory device which includes a plurality of dies that each include a plurality of blocks. The control module groups a plurality of blocks included in different dies and manages the plurality of blocks as a super block. The control module performs scheduling to alternately perform a program on a part of an Nth super block, wherein N is a natural number, and a phased erase on an N+1st super block, and the control module completes the program on the Nth super block and the erase on the Nth super block before the program on the N+1st super block starts.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="59.18mm" wi="150.28mm" file="US20230005547A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="200.07mm" wi="154.09mm" file="US20230005547A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="182.80mm" wi="108.37mm" file="US20230005547A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="147.57mm" wi="157.06mm" file="US20230005547A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="148.08mm" wi="84.16mm" orientation="landscape" file="US20230005547A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="190.16mm" wi="158.92mm" file="US20230005547A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="124.04mm" wi="57.32mm" file="US20230005547A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="129.29mm" wi="166.45mm" file="US20230005547A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="146.22mm" wi="133.10mm" file="US20230005547A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="147.49mm" wi="132.67mm" file="US20230005547A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="149.61mm" wi="163.15mm" file="US20230005547A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="161.80mm" wi="78.99mm" orientation="landscape" file="US20230005547A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="197.36mm" wi="156.89mm" file="US20230005547A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="134.54mm" wi="127.76mm" file="US20230005547A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This is a Continuation of U.S. application Ser. No. 17/191,412, filed Mar. 3, 2021, and a claim priority under 35 U.S.C. &#xa7; 119 is made to Korean Patent Application No. 10-2020-0116067, filed on Sep. 10, 2020 in the Korean Intellectual Property Office, the contents of which are herein incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Technical Field</heading><p id="p-0003" num="0002">The inventive concept(s) described herein relate to a memory controller, a memory device, and a storage device.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">By configuring a storage device so that a plurality of NAND dies operate in parallel, consistency of write performance may be enhanced. For example, a plurality of blocks included in NAND dies different from each other may be grouped and controlled by super block management.</p><p id="p-0005" num="0004">In order to program a specific block of a NAND die, an erase of the specific block needs to precede programming. While the NAND die performs the erase operation, the programming required for the NAND die may not be performed. If all the plurality of NAND dies controlled in this manner by the super block management have blocks being erased, none of the plurality of NAND dies may execute programming requested by a host. That is, a throughput (a host write throughput) may be 0 in a section in which all the plurality of NAND dies have blocks being erased.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0006" num="0005">According to aspects of the present disclosure, a memory controller and a memory device are capable of improving erasing of a plurality of NAND dies controlled by a super block management and thereby enhancing the consistency of write performance. According to another aspect of the present disclosure, a storage device that includes the memory controller and the memory device is capable of improving erasing of the plurality of NAND dies controlled by the super block management and thereby enhancing the consistency of write performance.</p><p id="p-0007" num="0006">However, aspects of the inventive concept(s) described herein are not restricted to those set forth herein. Other aspects of the inventive concept(s) described herein will become more apparent to one of ordinary skill in the art to which the present disclosure pertains by referencing the detailed description of the present disclosure as provided below.</p><p id="p-0008" num="0007">According to an aspect of the present disclosure, a memory controller includes an interface and a control module. The interface is provided for communicating with a memory device which includes a first die and a second die. The first die includes a first block and a second block, and the second die includes a third block and a fourth block. The control module manages the memory device in units of a first super block and a second super block. The first super block includes the first block and the third block, and the second super block including the second block and the fourth block. The control module causes a program of the first super block and an erase of the second super block to complete before starting the program of the second super block. The erase of the second super block is performed in multiple steps. Completion of the program of the first super block and the erase of the second super block includes performing a first step erase of the second block after programming a first portion of the first block, programming a second portion of the first block after the first step erase of the second block, and performing a second step erase of the second block after programming the second portion of the first block.</p><p id="p-0009" num="0008">According to another aspect of the present disclosure, a memory controller includes an interface and a control module. The interface interfaces with a memory device including a plurality of dies that each include a plurality of blocks. The control module groups the plurality of blocks included in different dies and manages the plurality of blocks as super blocks. The control module performs scheduling to alternately perform a program of a part of an Nth super block, wherein N is a natural number, and a phased erase of an N+1st super block. The control module causes the program on the Nth super block and the erase on the N+1st super block to complete before the program on the N+1st super block starts.</p><p id="p-0010" num="0009">According to another aspect of the present disclosure, a memory device includes a first die and a second die. The first die includes a first block and a second block. The second die includes a third block and a fourth block. The memory device is controlled in units of a first super block and a second super block, the first super block includes the first block and the third block, and the second super block includes the second block and the fourth block. Before starting a program of the second super block, a program of the first super block and an erase of the second super block are completed, and the erase of the second super block is divided into multiple steps. Completion of the program of the first super block and the erase of the second super block includes performing a first step erase of the second block after programming a first portion of the first block, programming a second portion of the first block after the first step erase of the second block, and performing a second step erase of the second block after programming the second portion of the first block.</p><p id="p-0011" num="0010">According to an aspect of the present disclosure, a storage device includes a memory device and a controller. The memory device includes a first die and a second die. The first die includes a first block and a second block, and the second die includes a third block and a fourth block. The controller manages the memory device by a first super block or a second super block. The first super block includes the first block and the third block, and the second super block includes the second block and the fourth block. The controller completes a program on the first super block and an erase on the second super block before starting the program of the second super block, and divides performance of the erase on the second super block into multiple steps. The program of the first super block and the erase of the second super block include performing a first step erase of a second block after programming a first portion of the first block, programming a second portion of the first block after the first step erase of the second block, and performing a second step erase of the second block after programming a second portion of the first block.</p><p id="p-0012" num="0011">According to an aspect of the present disclosure, a memory controller includes an interface and a control module. The interface is provided for communicating with a memory device which includes a first die and a second die. The first die includes a first block and a second block, and the second die includes a third block and a fourth block. The control module manages the memory device in units of a first super block and a second super block. The first super block includes the first block and the third block, and the second super block includes the second block and the fourth block. The control module causes a program of the first super block and an erase of the second super block to complete, before starting the program of the second super block, and the control module controls so that an erase section of the second block of the first die and an erase section of the fourth block of the second die only partially overlap to erase the second super block.</p><p id="p-0013" num="0012">According to another aspect of the present disclosure, a memory controller includes an interface and a control module. The interface is provided for communicating with a memory device which includes a first die and a second die. The first die includes a first block and a second block, and the second die includes a third block and a fourth block. The control module manages the memory device in units of a first super block and a second super block. The first super block includes the first block and the third block, and the second super block includes the second block and the fourth block. The control module completes an erase of the second super block before starting a program of the second super block. The erase of the second super block includes starting the erase of the second block of the first die, reducing a total token from an initial number by a predetermined consumed token, when the erase of the second block of the first die starts, increasing the number of total tokens with an erase progress time, and starting the erase of the fourth block of the second die, when the number of total tokens reaches the number of threshold tokens.</p><p id="p-0014" num="0013">According to an aspect of the present disclosure, a memory device includes a first die and a second die. The first die includes a first block and a second block. The second die includes a third block and a fourth block. The memory device is controlled in units of a first super block and a second super block. The first super block includes the first block and the third block, and the second super block includes the second block and the fourth block. Before starting a program of the second super block, a program of the first super block and an erase of the second super block are completed, and the second super block is erased by controlling so that an erase section of the second block of the first die and an erase section of the fourth block of the second die only partially overlap.</p><p id="p-0015" num="0014">According to an aspect of the present disclosure, a storage device includes a memory device and a controller. The memory device includes a first die and a second die. The first die includes a first block and a second block, and the second die includes a third block and a fourth block. The controller manages the memory device by a first super block or a second super block. The first super block includes the first block and the third block, and the second super block includes the second block and the fourth block. The controller completes a program on the first super block and an erase on the second super block, before starting the program of the second super block, and the controller controls so that an erase section of the second block of the first die and an erase section of the fourth block of the second die only partially overlap to erase the second super block.</p><p id="p-0016" num="0015">Specific matters of other embodiments are included in the detailed description and drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0017" num="0016">These and other aspects and features of the inventive concept(s) described herein will become more apparent by describing in detail exemplary embodiments thereof referring to the attached drawings, in which:</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a system including a storage device according to some embodiments of the present disclosure;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating a memory device of the system in <figref idref="DRAWINGS">FIG. <b>1</b></figref>;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram for explaining a queue and job scheduler used in a memory controller of the system in <figref idref="DRAWINGS">FIG. <b>1</b></figref>;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a conceptual diagram for explaining the operation of a memory controller according to some embodiments of the present disclosure;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref> are diagrams for explaining the operation of a memory controller according to some embodiments of the present disclosure;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>7</b></figref>, <figref idref="DRAWINGS">FIG. <b>8</b></figref>, <figref idref="DRAWINGS">FIG. <b>9</b></figref>, and <figref idref="DRAWINGS">FIG. <b>10</b></figref> are diagrams for explaining an implementing method in which a program on a part of a Nth super block and a phased erase of a N+1st super block are alternately performed;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart for explaining the operation of a memory controller according to some embodiments of the present disclosure;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is another flowchart for explaining the operation of a memory controller according to some embodiments of the present disclosure</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is another flowchart for explaining the operation of a memory controller according to some embodiments of the present disclosure</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram for explaining the operation of a memory controller according to some other embodiments of the present disclosure;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>15</b></figref> and <figref idref="DRAWINGS">FIG. <b>16</b></figref> are diagrams for explaining a control so that erase sections of the dies overlap to a minimum by introduction of a token concept; and</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>17</b></figref> and <figref idref="DRAWINGS">FIG. <b>18</b></figref> are flowcharts for explaining the operation of a memory controller according to some other embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0030" num="0029">In the following detailed description, for the purposes of explanation and not limitation, representative embodiments disclosing specific details are set forth in order to provide a thorough understanding of an embodiment according to the present teachings. Descriptions of known systems, devices, materials, methods of operation and methods of manufacture may be omitted so as to avoid obscuring the description of the representative embodiments. Nonetheless, systems, devices, materials and methods that are within the purview of one of ordinary skill in the art are within the scope of the present teachings and may be used in accordance with the representative embodiments. It is to be understood that the terminology used herein is for purposes of describing particular embodiments only and is not intended to be limiting. The defined terms are in addition to the technical and scientific meanings of the defined terms as commonly understood and accepted in the technical field of the present teachings.</p><p id="p-0031" num="0030">It will be understood that, although the terms first, second, third etc. may be used herein to describe various elements or components, these elements or components should not be limited by these terms. These terms are only used to distinguish one element or component from another element or component. Thus, a first element or component discussed below could be termed a second element or component without departing from the teachings of the inventive concept.</p><p id="p-0032" num="0031">The terminology used herein is for purposes of describing particular embodiments only and is not intended to be limiting. As used in the specification and appended claims, the singular forms of terms &#x2018;a&#x2019;, &#x2018;an&#x2019; and &#x2018;the&#x2019; are intended to include both singular and plural forms, unless the context clearly dictates otherwise. Additionally, the terms &#x201c;comprises&#x201d;, and/or &#x201c;comprising,&#x201d; and/or similar terms when used in this specification, specify the presence of stated features, elements, and/or components, but do not preclude the presence or addition of one or more other features, elements, components, and/or groups thereof. As used herein, the term &#x201c;and/or&#x201d; includes any and all combinations of one or more of the associated listed items.</p><p id="p-0033" num="0032">Unless otherwise noted, when an element or component is said to be &#x201c;connected to&#x201d;, &#x201c;coupled to&#x201d;, or &#x201c;adjacent to&#x201d; another element or component, it will be understood that the element or component can be directly connected or coupled to the other element or component, or intervening elements or components may be present. That is, these and similar terms encompass cases where one or more intermediate elements or components may be employed to connect two elements or components. However, when an element or component is said to be &#x201c;directly connected&#x201d; to another element or component, this encompasses only cases where the two elements or components are connected to each other without any intermediate or intervening elements or components.</p><p id="p-0034" num="0033">The present disclosure, through one or more of its various aspects, embodiments and/or specific features or sub-components, is thus intended to bring out one or more of the advantages as specifically noted below. For purposes of explanation and not limitation, example embodiments disclosing specific details are set forth in order to provide a thorough understanding of an embodiment according to the present teachings. However, other embodiments consistent with the present disclosure that depart from specific details disclosed herein remain within the scope of the appended claims. Moreover, descriptions of well-known apparatuses and methods may be omitted so as to not obscure the description of the example embodiments. Such methods and apparatuses are within the scope of the present disclosure.</p><p id="p-0035" num="0034">Hereinafter, various embodiments of the present disclosure will be explained referring to the accompanying drawings.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating a system including a storage device according to some embodiments of the present disclosure. <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating a memory device of the system in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0037" num="0036">The system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be a mobile system such as a mobile phone, a smart phone, a laptop computer, a tablet PC (tablet personal computer), a wearable device, a healthcare device or an IOT (internet of things) device. However, the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref> is not necessarily limited to mobile systems, but may also be a personal computer, a workstation computer, a server, a media player, or an automotive device such as a navigation controller.</p><p id="p-0038" num="0037">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the storage device <b>100</b> may communicate with the host <b>10</b> to write or read data at the request of the host <b>10</b>. The host <b>10</b> may be physically separated from the storage device <b>100</b> and may be connected to the storage device <b>100</b> via a wired interface or a wireless interface. Nevertheless, the host <b>10</b> and the storage device <b>100</b> may also or alternatively be components of an integrated system, and may even be housed within a common housing.</p><p id="p-0039" num="0038">The storage device <b>100</b> functions as a non-volatile storage device that stores data regardless of a power supply. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the storage device <b>100</b> includes a memory controller <b>110</b>, and a memory device <b>150</b> that stores data under the control of the memory controller <b>110</b>.</p><p id="p-0040" num="0039">The memory controller <b>110</b> may include an arrangement of circuitry and/or other components including a memory interface <b>141</b>, a host interface <b>142</b>, a control module <b>120</b>, and a memory <b>130</b> connected to each other through a bus <b>119</b>. The control module <b>120</b> communicates with the host <b>10</b> through the host interface <b>142</b>, and controls the memory device <b>150</b> through the memory interface <b>141</b>. The control module <b>120</b> performs some or all aspects of methods attributed to the memory controller <b>110</b> herein, such as an erase control method to be explained referring to <figref idref="DRAWINGS">FIGS. <b>4</b> to <b>18</b></figref>. The control module <b>120</b> may be or include a processor, such as a microprocessor, that executes instructions from the memory <b>130</b> to implement some or all aspects of methods attributed to the control module <b>120</b> herein. The control module <b>120</b> may also or alternatively be or include an application specific integrated circuit (ASIC).</p><p id="p-0041" num="0040">The host interface <b>142</b> provides a connection that may send and receive data to and from the host <b>10</b>, and may be, for example, compliant with various interface standards, protocols and/or conventions such as ATA (Advanced Technology Attachment), SATA (Serial ATA), e-SATA (external SATA), SCSI (Small Computer Small Interface), SAS (Serial Attached SCSI), PCI (Peripheral Component Interconnection), PCIe (PCI express), NVMe (NVM express), IEEE 1394, USB (universal serial bus), SD (secure digital) card, MMC (multi-media card), eMMC (embedded multi-media card), UFS (Universal flash Storage), eUFS (embedded Universal flash Storage), or CF (compact flash). The memory interface <b>141</b> may be implemented to comply with standard conventions such as Toggle or ONFI. Examples of the host interface <b>142</b> and/or the memory interface <b>141</b> includes ports, adapters, sockets, connectors, drives and other types of physical interfaces compliant with one or more standards, protocols and/or conventions of the type noted above.</p><p id="p-0042" num="0041">The memory <b>130</b> may serve as a buffer memory which temporarily stores the data provided when the host <b>10</b> requests the write. Also, the memory <b>130</b> may also serve as a queue in which commands and information for tasks related to the operations of the memory device <b>150</b> (e.g., program commands, read commands, and refresh commands) are sequentially stored. Also, the memory <b>130</b> may be, but is not limited to, a volatile memory such as a SRAM (static random-access memory) and/or a DRAM (dynamic random-access memory).</p><p id="p-0043" num="0042">The memory device <b>150</b> may include, but is not limited to, a V-NAND flash memory of 2D (2-dimensional) or 3D (3-dimensional) structure. As noted above, the storage device <b>100</b> may be physically separated from the host <b>10</b> and also or alternatively may be implemented in the same package as the host <b>10</b>.</p><p id="p-0044" num="0043">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the memory device <b>150</b> may include a plurality of dies from DIE<b>0</b> to DIE<b>3</b>, i.e., DIE<b>0</b>, DIE<b>1</b>, DIE<b>2</b> and DIE<b>3</b>.</p><p id="p-0045" num="0044">Each of the dies DIE<b>0</b> to DIE<b>3</b> may include a plurality of blocks BLK<b>0</b> to BLKa (here, a is a natural number). Super blocks SPBLK<b>0</b> to SPBLKa are each a different group of a plurality of blocks BLK<b>0</b> to BLKa included in different of the dies DIE<b>0</b> to DIE<b>3</b>. The plurality of blocks BLK<b>0</b> to BLKa of any particular super block may be selected by the memory controller <b>110</b> simultaneously. For example, in many embodiments described herein, a first die may be DIE<b>0</b> and may include at least a first block (e.g., a BLK<b>0</b>) and a second block (e.g., a BLK<b>1</b>), and a second die may be DIE<b>1</b> and may include a third block (e.g., a BLK<b>0</b>) and a fourth block (e.g., a BLK<b>1</b>).</p><p id="p-0046" num="0045">Although in <figref idref="DRAWINGS">FIG. <b>2</b></figref> a plurality of blocks belonging to the super block SPBLK<b>0</b> are shown as BLK<b>0</b> of each die DIE<b>0</b> to DIE<b>3</b> as an example, the present disclosure is not limited thereto. For example, the plurality of blocks belonging to the super block SPBLK<b>0</b> may be BLK<b>0</b> in the die DIE<b>0</b>, may be BLK<b>1</b> in another die DIE<b>1</b>, and may be BLK<b>2</b> in still another die DIE<b>2</b>. That is, there may be various methods for binding a plurality of blocks of the different dies DIE<b>0</b> to DIE<b>3</b> with any of the super blocks SPBLK<b>0</b> to SPBLKa, and the relative order of the BLK in each DIE of any super block may vary.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram for explaining the queue and job scheduler used in a memory controller of the system in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0048" num="0047">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the memory <b>130</b> of the memory controller <b>110</b> includes a plurality of queues <b>131</b> and <b>132</b>. The control module <b>120</b> may include a job scheduler <b>121</b> that schedules tasks on the basis of commands stored in the queues <b>131</b> and <b>132</b> of the memory <b>130</b>. For example, the job scheduler <b>121</b> may check a program command and an erase command and perform a scheduling operation. The queues <b>131</b> and <b>132</b> and other queues of the memory <b>130</b> may be physically and/or logically partitioned from one another and from other components of the memory <b>130</b>. The queues <b>131</b> and <b>132</b> may also be dedicated to functionality as queues on a persistent basis so as to remain as queues <b>131</b> and <b>132</b> even when no tasks are stored therein or thereon.</p><p id="p-0049" num="0048">Each of the plurality of queues <b>131</b> and <b>132</b> may correspond to a plurality of dies, respectively. For example, the queue <b>131</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref> corresponds to the die DIE<b>0</b> and sequentially stores commands related to the tasks to be performed in the die DIE<b>0</b>. Also, the queue <b>132</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref> corresponds to the die DIE<b>1</b>, and sequentially stores commands related to the tasks to be performed by the die DIEL</p><p id="p-0050" num="0049">In particular, as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, program commands (PGMs) and erase commands (ERSs) may be managed separately inside each of different queues for a DIE. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the plurality of program commands are stored sequentially in one queue (e.g., a second queue for each DIE as in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) in the order of task. The plurality of erase commands are stored sequentially in another queue (e.g., a third queue for each DIE as in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) in the order of task. Furthermore, the plurality of read commands may be stored sequentially in another queue (e.g., a first queue for each DIE in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) in the order of task. The labels of first, second and third for the queues for each DIE in <figref idref="DRAWINGS">FIG. <b>3</b></figref> are arbitrary, such that for each DIE (e.g., the DIE<b>0</b>, the DIE<b>1</b>, the DIE<b>2</b> and the DIE<b>3</b>), a first queue may store a program command for a corresponding DIE for each of the plurality of DIEs, and a second queue which is different from the first queue may store an erase command for the corresponding DIE for each of the plurality of DIEs.</p><p id="p-0051" num="0050">When managing the queue in this way, the control module <b>120</b> may check commands and perform a scheduling operation to schedule a plurality of pending tasks of different types. For example, using the plurality of queues in the manner arranged in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, it is possible to perform the scheduling operation effectively, while simultaneously considering a program operation of the Nth super block (where N is a natural number) and an erase operation of the N+1st super block. The scheduling method will be explained below referring to <figref idref="DRAWINGS">FIGS. <b>4</b> to <b>18</b></figref>.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a conceptual diagram for explaining the operation of the memory controller according to some embodiments of the present disclosure.</p><p id="p-0053" num="0052">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, it is assumed that the memory controller <b>110</b> controls performance of the program on the Nth super block (where N is a natural number) and performance of the program on the N+1st super block. That it, it is assumed that the control module <b>120</b> in the memory controller <b>110</b> controls performance of the program on the Nth super block (where N is a natural number) and performance of the program on the N+1st super block.</p><p id="p-0054" num="0053">Here, the erase on the N+1st super block precedes the start of the program on the N+1st super block.</p><p id="p-0055" num="0054">When the program on the Nth super block, the erase on the N+1st super block, and the program on the N+1st super block are performed in sequence, throughput (i.e., a host write throughput) may be 0 in at least a part of a section in which erase is performed on the N+1st super block. The reason is that, if all the dies corresponding to the N+1st super block have blocks that are being erased, all the dies corresponding to the N+1st super block may not perform the program requested by the host <b>10</b>.</p><p id="p-0056" num="0055">Specifically, the host write throughput may be kept above 0 while the program data provided by the host <b>10</b> is stored in a buffer memory such as the memory <b>130</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. However, from the moment when an amount of program data provided by the host <b>10</b> becomes larger than the storage capacity of the buffer memory (i.e., the memory <b>130</b>), because the buffer memory may not receive any more program data provided by the host <b>10</b>, the host write throughput becomes 0. A large amount of buffer memory is required in order to store all the program data provided by the host <b>10</b> during the time when all the dies with blocks included in the N+1st super block have blocks that are being erased. However, it is difficult to adopt a large capacity of buffer memory because its size is quite large.</p><p id="p-0057" num="0056">In this way, when throughput becomes 0 in a section, the solution throughput of the storage device <b>100</b> has no choice but to deteriorate. This is because the solution throughput is calculated as an average of the throughput of a program section and the throughput of an erase section.</p><p id="p-0058" num="0057">Even if a MAX throughput of the memory device <b>150</b> is larger than a Host Interface Max Write Throughput, when such a section in which the throughput becomes 0 occurs, the solution throughput becomes smaller than the Host Interface Max Write Throughput. Therefore, in order for the solution throughput to fulfill the Host Interface Max Write Throughput, it is necessary to improve the manner of erase on the N+1st super block.</p><p id="p-0059" num="0058">As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, in some embodiments of the present disclosure, the program on the Nth super block and the erase on the N+1st super block are completed within a predetermined time t<b>1</b> at S<b>10</b>, and thereafter, the program on the N+1st super block is performed within a time t<b>2</b> at S<b>20</b>. The program on the N+1st super block may be held until the predetermined time t<b>1</b> has passed, and/or until the program on the Nth super block and the erase on the N+1st super block are completed.</p><p id="p-0060" num="0059">In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, within the time (i.e., t<b>1</b>) at which the program on the Nth super block needs to be completed, the erase on the N+1st super block is not completed at once, and the erase on the N+1st super block may be divided into multiple steps. That is, the erase on the N+1st super block may be divided into multiple steps, and the erase section performed at one time may be adjusted to be shorter. When the erase on the N+1st super block is divided into multiple steps each with a lower duration, since the data provided by the host <b>10</b> may be stored in the buffer memory during the erase section without significantly increasing the storage capacity of the buffer memory, the host write throughput does not become 0. Such an erase method will be explained below referring to <figref idref="DRAWINGS">FIGS. <b>5</b> to <b>13</b></figref>.</p><p id="p-0061" num="0060">Alternatively, the control may be performed so that the erase sections of the dies overlap to a minimum within the time (i.e., t<b>1</b>) at which the program on the Nth super block needs to be completed. With such a control, since it is possible to prevent a situation in which all dies perform the erase operations at the same time, the host write throughput does not become 0. Such an erasing method will be explained below referring to <figref idref="DRAWINGS">FIGS. <b>14</b> to <b>18</b></figref>.</p><p id="p-0062" num="0061">A method of performing the erase of the super block divided into multiple steps will be explained referring to <figref idref="DRAWINGS">FIGS. <b>5</b> to <b>13</b></figref>.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>5</b></figref> and <figref idref="DRAWINGS">FIG. <b>6</b></figref> are diagrams for explaining the operation of the memory controller according to some embodiments of the present disclosure.</p><p id="p-0064" num="0063">First, referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, programs PGM<b>1</b> to PGM<b>3</b> of a part of the Nth super block, and phased erases ERS<b>1</b> to ERS<b>4</b> of the N+1st super block are alternately performed for a predetermined time t<b>1</b>, so that the programs PGM<b>1</b> to PGM<b>3</b> on the Nth super block and the erases ERS<b>1</b> to ERS<b>4</b> on the Nth super block are completed before the N+1st super block program starts at S<b>10</b>.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is explained using a first block (e.g., BLK<b>0</b>) of the first die (e.g., DIE<b>0</b>) included in the Nth super block and a second block (e.g., BLK<b>1</b>) of the first die DIE<b>0</b> included in the N+1st super block.</p><p id="p-0066" num="0065">A first step erase ERS<b>1</b> of the second block BLK<b>1</b> is performed for the time tn. The erase is performed in block units. The erase on the second block BLK<b>1</b> is performed according to a predetermined rule (or according to a predetermined standard), and then is suspended. The first step erase ERS<b>1</b> is an erase operation from after the start of the erase on the second block BLK<b>1</b> until suspension.</p><p id="p-0067" num="0066">Subsequently, the program PGM<b>1</b> on the first portion of the first block BLK<b>0</b> is performed for the time t<b>21</b>. Since the program is performed in word line units, NAND flash cells connected to some word lines included in the first block BLK<b>0</b> are programmed for the time t<b>21</b>. The meaning of the &#x201c;portion&#x201d; of the first block BLK<b>0</b> in this embodiment may be NAND flash cells connected to at least one word line belonging to the first block BLK<b>0</b>.</p><p id="p-0068" num="0067">Subsequently, a second step erase ERS<b>2</b> of the second block BLK<b>1</b> is executed for the time t<b>12</b>. The erase that was suspended for the second block BLK<b>1</b> is resumed, performed according to the predetermined rule (or according to the predetermined standard), and then is suspended again. The second step erase ERS<b>2</b> is an erase operation from when the erase of the second block BLK<b>1</b> is resumed and until the erase operation is suspended again.</p><p id="p-0069" num="0068">Subsequently, a program PGM<b>2</b> on the second portion of the first block BLK<b>0</b> is performed for the time t<b>22</b>.</p><p id="p-0070" num="0069">Subsequently, a third step erase ERS<b>3</b> of the second block BLK<b>1</b> is executed for time t<b>13</b>. Similarly, the third step erase ERS<b>3</b> is an erase operation from when the erase on the suspended second block BLK<b>1</b> is resumed and until the erase operation is suspended again.</p><p id="p-0071" num="0070">Subsequently, the program PGM<b>3</b> on the third portion of the first block BLK<b>0</b> is performed for the time t<b>23</b>.</p><p id="p-0072" num="0071">Subsequently, a fourth step erase ERS<b>4</b> of the second block BLK<b>1</b> is executed for the time t<b>14</b>, and thus, the erase on the second block BLK<b>1</b> is completed. Similarly, the fourth step erase ERS<b>4</b> is an erase operation from when the erase of the second block BLK<b>1</b> is resumed and until the erase is completed.</p><p id="p-0073" num="0072">For convenience of explanation, although <figref idref="DRAWINGS">FIG. <b>5</b></figref> explains that the erase on the second block BLK<b>1</b> is completed through the four-step erase, embodiments based on <figref idref="DRAWINGS">FIG. <b>5</b></figref> are not limited thereto. Although, the program of the first block BLK<b>0</b> is explained as being divided into three steps, embodiments based on <figref idref="DRAWINGS">FIG. <b>5</b></figref> are not limited thereto.</p><p id="p-0074" num="0073">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, programs PGM<b>1</b> to PGM<b>3</b> on a plurality of dies (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the Nth super block, and the erases ERS<b>1</b> to ERS<b>4</b> on a plurality of dies (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the N+1st super block are performed alternately.</p><p id="p-0075" num="0074">As shown, in the first step erase ERS<b>1</b> section, the first step erase (see, reference numeral &#x201c;N+1.first&#x201d;) of the first block BLK<b>0</b> of each die (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the N+1st super block may be performed. Accordingly, four blocks total are subject to the step erase operation, and the erased blocks are one block (i.e., the first block BLK<b>0</b>) of each of the four DIEs with blocks included in the N+1st super block.</p><p id="p-0076" num="0075">Subsequently, in the program PGM<b>1</b> section, the program of the second block BLK<b>1</b> of each die (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the Nth super block is performed. Unlike the programming shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, here four blocks total are programmed, and the programmed blocks are one block (i.e., the second block BLK<b>1</b>) of each of the four DIEs with blocks included in the Nth super block.</p><p id="p-0077" num="0076">Subsequently, in the third step erase ERS<b>3</b> section, a n&#x2212;1 step erase (see, reference numeral &#x201c;N+1&#xb7;n&#x2212;1&#x201d;) of the first block BLK<b>0</b> of each die (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the N+1st super block may be performed. Here, again, four blocks total are subject to the step erase operation, and the erased blocks are one block (i.e., the first block BLK<b>0</b> again) of each of the four DIEs with blocks included in the N+1st super block.</p><p id="p-0078" num="0077">Subsequently, in the program PGM<b>3</b> section, the program of the second block BLK<b>1</b> of each die (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the Nth super block is performed. Here, again, the four blocks total are programmed, and the programmed blocks are one block (i.e., the second block BLK<b>1</b> again) of each of the four DIEs with blocks included in the Nth super block.</p><p id="p-0079" num="0078">Subsequently, in a fourth step erase ERS<b>4</b> section, a n-step erase (see, reference numeral &#x201c;N+1.n&#x201d;) of the first block BLK<b>0</b> of each die (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the N+1st super block may be performed. Here, again, four blocks total are subject to the step erase operation, and the erased blocks are one block (i.e., the first block BLK<b>0</b> again) of each of the four DIEs with blocks included in the N+1st super block.</p><p id="p-0080" num="0079">As shown, the multiple step erase (ERS<b>1</b> to ERS<b>4</b>) sections of each die (e.g., DIE<b>0</b> to DIE<b>3</b>) with blocks included in the N+1st super block may overlap each other. However, since the step erase (ERS<b>1</b> to ERS<b>4</b>) sections of each step are short compared to performing the erase operation for the first block BLK<b>0</b> of each die (e.g., DIE <b>0</b> to DIE<b>3</b>) without stopping until completion, the data provided by the host <b>10</b> may be stored in the buffer memory during the erase (ERS<b>1</b> to ERS<b>4</b>) sections of each step without significantly increasing the storage capacity of the buffer memory (e.g. the memory <b>130</b>), and the host write throughput does not become 0.</p><p id="p-0081" num="0080">Hereinafter, an implementing method of alternately performing a program on a part of the Nth super block and a phased erase of the N+1st super block will be explained referring to <figref idref="DRAWINGS">FIGS. <b>7</b> to <b>10</b></figref> as an example. For convenience of explanation, <figref idref="DRAWINGS">FIGS. <b>7</b> to <b>10</b></figref> mainly explain the operation of the first die DIE<b>0</b>.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>7</b></figref>, <figref idref="DRAWINGS">FIG. <b>8</b></figref> and <figref idref="DRAWINGS">FIG. <b>9</b></figref> are diagrams indicating a current throughput (Current throughput). In each of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, <figref idref="DRAWINGS">FIG. <b>8</b></figref> and <figref idref="DRAWINGS">FIG. <b>9</b></figref>, an x-axis indicates a time, and a y-axis indicates a throughput. TH<b>1</b> indicates a threshold throughput, and MAX<b>1</b> indicates the maximum throughput of the first die.</p><p id="p-0083" num="0082">As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, <figref idref="DRAWINGS">FIG. <b>8</b></figref>, and <figref idref="DRAWINGS">FIG. <b>9</b></figref>, and as explained below, when a program of a block (e.g., BLK<b>0</b>) is performed, the current throughput of the DIE (e.g., DIE<b>0</b>) that includes the block increases, whereas when an erase of the block (e.g., BLK<b>1</b>) is performed, the current throughput of the DIE (e.g., DIE<b>0</b>) that includes the block decreases. Thus, for a first DIE, the current throughput of the first DIE increases when the program of the first block of the first DIE is performed, and the current throughput of the first DIE decreases when the erase of the second block of the first DIE is performed. First, referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a first program PGM<b>1</b> on the first block BLK<b>0</b> of the first die DIE<b>0</b> is performed. While the first program PGM<b>1</b> is performed, the current throughput continuously increases and may reach the maximum throughput MAX<b>1</b> (see, reference numeral P<b>1</b>).</p><p id="p-0084" num="0083">When the first program PGM<b>1</b> is completed, the first step erase ERS<b>1</b> of the second block BLK<b>1</b> may be performed. If the current throughput of the first die DIE<b>0</b> is greater than the threshold throughput TH<b>1</b> when the first program PGM<b>1</b> is completed, the first step erase ERS<b>1</b> of the second block BLK<b>1</b> may be performed. Here, since the program operation is not performed during an erase operation, the current throughput is reduced from the maximum throughput MAX<b>1</b> to the threshold throughput TH<b>1</b> (see, reference numeral B<b>1</b>). When the current throughput becomes equal to or smaller than the threshold throughput TH<b>1</b>, it is confirmed whether a program task waits in the queue. If the program task awaits, the erase operation is suspended.</p><p id="p-0085" num="0084">Subsequently, the waiting program tsk (i.e., the second program PGM<b>2</b>) is performed. While the second program PGM<b>2</b> is performed, the current throughput continuously increases and may reach the maximum throughput MAX<b>1</b>.</p><p id="p-0086" num="0085">When the second program PGM<b>2</b> is completed, the erase may be resumed to perform the second step erase ERS<b>2</b> of the second block BLK<b>1</b>. If the current throughput of the first die DIE<b>0</b> is greater than the threshold throughput TH<b>1</b> when the second program PGM<b>2</b> is completed, the second step erase ERS<b>2</b> of the second block BLK<b>1</b> may be performed. The current throughput is reduced from the maximum throughput MAX<b>1</b> to the threshold throughput TH<b>1</b>. If the current throughput becomes equal to or smaller than the threshold throughput TH<b>1</b> and the program task awaits, the erase operation is again suspended.</p><p id="p-0087" num="0086">Then, the waiting program task (i.e., the third program PGM<b>3</b>) is performed. That is, the programming task that is waiting to be performed, is performed.</p><p id="p-0088" num="0087">In this way, the program on the first block BLK<b>0</b> and the erase on the second block BLK<b>1</b> may be alternately performed so that the current throughput is controlled between the threshold throughput TH<b>1</b> and the maximum throughput MAX<b>1</b>.</p><p id="p-0089" num="0088">Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the first program PGM<b>1</b> on the first block BLK<b>0</b> of the first die DIE<b>0</b> is performed. While the first program PGM<b>1</b> is performed, the current throughput continuously increases and may reach the maximum throughput MAX<b>1</b> (see, reference numeral P<b>1</b>).</p><p id="p-0090" num="0089">When the first program PGM<b>1</b> is completed, the first step erase ERS<b>1</b> of the second block BLK<b>1</b> is performed. Since the program operation is not performed during an erase operation, the current throughput may be reduced from the maximum throughput MAX<b>1</b> to the threshold throughput TH<b>1</b> (see, reference numeral B<b>2</b>). When the current throughput reaches the threshold throughput TH<b>1</b>, it is confirmed whether the program task waits in the queue. If there is no waiting program task, the first step erase ERS<b>1</b> is continued. Since there is no program requested by the host <b>10</b>, even if the first step erase ERS<b>1</b> is continued, the current throughput maintains the threshold throughput TH<b>1</b>.</p><p id="p-0091" num="0090">When there is a program request from the host <b>10</b>, the erase ERS<b>1</b> is suspended, and the second program PGM<b>2</b> on the first block BLK<b>0</b> of the first die DIE<b>0</b> is performed.</p><p id="p-0092" num="0091">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref> and <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the maximum throughput MAX<b>1</b> and MAX<b>2</b> may be set differently depending on the position where programming is occurring in the first block BLK<b>0</b>.</p><p id="p-0093" num="0092">For example, in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, when programming some word lines (for example, WL<b>0</b> to WL<b>2</b>) at the beginning of the first block BLK<b>0</b>, the maximum throughput may be set to MAX<b>1</b>, and when programming some word lines (e.g., WL<b>3</b> to WL<b>6</b>) located in the middle of the first block BLK<b>0</b>, the maximum throughput may be set to MAX<b>2</b> greater than MAX<b>1</b>. Also, the maximum throughput when programming some word lines (e.g., WLb) located at the end of the first block may be reduced from MAX<b>1</b> to MAX<b>2</b>.</p><p id="p-0094" num="0093">The program of the first block BLK<b>0</b> may be performed in the order of the arranged word lines (that is, in the order of WL<b>0</b> to WLb).</p><p id="p-0095" num="0094">The first program PGM<b>1</b> on the first block BLK<b>0</b> of the first die DIE<b>0</b> is performed. Here, the first program PGM<b>1</b> may be performed on the word lines WL<b>0</b> to WL<b>2</b>. While the first program PGM<b>1</b> is being performed, the current throughput continuously increases, and may reach the maximum throughput MAX<b>1</b> (see, reference numeral P<b>1</b>).</p><p id="p-0096" num="0095">When the first program PGM<b>1</b> is completed, the first step erase ERS<b>1</b> of the second block BLK<b>1</b> is performed. The current throughput is reduced from the maximum throughput MAX<b>1</b> to the threshold throughput TH<b>1</b> (see, reference numeral B<b>1</b>). Because the program task waits in the queue, the erase is suspended.</p><p id="p-0097" num="0096">Next, the waiting program task (i.e., the second program PGM<b>2</b>) is performed. Here, the second program PGM<b>2</b> may be performed on the word lines WL<b>3</b> to WL<b>6</b>. While the second program PGM<b>2</b> is being performed, the current throughput continuously increases and may reach the maximum throughput MAX<b>2</b> (see, reference numeral P<b>3</b>).</p><p id="p-0098" num="0097">When the second program PGM<b>2</b> is completed, the erase is resumed and the second step erase ERS<b>2</b> of the second block BLK<b>1</b> is performed. The current throughput is reduced from the maximum throughput MAX<b>2</b> to the threshold throughput TH<b>1</b> (see, reference numeral B<b>3</b>). When the program task waits, the erase is suspended.</p><p id="p-0099" num="0098">A duration of the second step erase ERS<b>2</b> is longer than a duration of the first step erase ERS<b>1</b>. Since the maximum throughput MAX<b>2</b> is larger than the maximum throughput MAX<b>1</b>, the time taken to reach from the maximum throughput MAX<b>2</b> to the threshold throughput TH<b>1</b> (that is, the duration of the second step erase ERS<b>2</b>) becomes longer than the time taken to reach from the maximum throughput MAX<b>1</b> to the threshold throughput TH<b>1</b> (that is, the duration of the first step erase ERS<b>1</b>).</p><p id="p-0100" num="0099">Next, the waiting program task (that is, the third program PGM<b>3</b>) is performed. The third program PGM<b>3</b> may be performed on the word line WLb. While the third program PGM<b>3</b> is being performed, the current throughput gradually increases and may reach the maximum throughput MAX<b>1</b> (see, reference numeral P<b>4</b>). Although not shown separately, the third step erase ERS<b>3</b> is performed after the third program PGM<b>3</b>, and the third step erase ERS<b>3</b> is performed until the current throughput reaches from the maximum throughput MAX<b>1</b> to the threshold throughput TH<b>1</b>. Therefore, the duration of the third step erase ERS<b>3</b> is shorter than the duration of the second step erase ERS<b>2</b>.</p><p id="p-0101" num="0100">In this way, the durations of the phased erases ERS<b>1</b> and ERS<b>2</b> may be adjusted by setting the maximum throughputs MAX<b>1</b> and MAX<b>2</b> differently depending on the position of the programming operation in the first block BLK<b>0</b>.</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>11</b></figref>, <figref idref="DRAWINGS">FIG. <b>12</b></figref> and <figref idref="DRAWINGS">FIG. <b>13</b></figref> are flowcharts for explaining the operation of the memory controller according to some embodiments of the present disclosure.</p><p id="p-0103" num="0102">First, referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, it is assumed that the program on the Nth super block and the erase on the N+1st super block are both waiting in the queue.</p><p id="p-0104" num="0103">The process of <figref idref="DRAWINGS">FIG. <b>11</b></figref> begins by selecting one die among all dies at S<b>310</b>. For example, the selected die may be selected according to a round robin procedure. Selection by the round robin procedure may mean selection of one die among all dies without prioritization. All dies may be subject to selection by the round robin procedure, and dies may be individually selected using the round robin procedure in a plurality of selections.</p><p id="p-0105" num="0104">Next, the process of <figref idref="DRAWINGS">FIG. <b>11</b></figref> includes confirming whether the selected die is being erased at S<b>320</b>.</p><p id="p-0106" num="0105">When the die is being erased (S<b>320</b>=Y), an erase start time (erase_start_time) is subtracted from the current time (current_time) to calculate an erase processing time (erase_processing_time). The erase processing time is calculated at S<b>332</b> as shown in <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0107" num="0106">Next, the current value of the current throughput (Current_throughput) is calculated at S<b>334</b> as shown in <figref idref="DRAWINGS">FIG. <b>12</b></figref>. A value obtained by multiplying the throughput of the selected die (Die_throughput) by the erase processing time (erase_processing_time) is subtracted from the previous value of the current throughput to determine the current value of the current throughput.</p><p id="p-0108" num="0107">Subsequently, at S<b>336</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the final current throughput (Current_throughput) is determined by comparing the value calculated in S<b>334</b> with the threshold throughput (threshold_throughput). The final current throughput (Current_throughput) does not fall below the threshold throughput (threshold_throughput). As explained in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, when there is no waiting program task, even if the erase operation is continued without suspension, the current throughput maintains the threshold throughput TH<b>1</b>.</p><p id="p-0109" num="0108">Next, at S<b>338</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the erase start time (erase_start_time) is recorded as the current time (current_time).</p><p id="p-0110" num="0109">Referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref> again, after S<b>338</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, at S<b>340</b> it is checked whether the current throughput (Current_throughput) is equal to or smaller than the threshold throughput (threshold throughput).</p><p id="p-0111" num="0110">If the current throughput (Current_throughput) is equal to or smaller than the threshold throughput (threshold_throughput) (S<b>340</b>=Y), it is checked whether there is a waiting program at S<b>350</b>.</p><p id="p-0112" num="0111">If there is a waiting program (S<b>350</b>=Y), the erase is suspended at S<b>360</b>, and the programming operation starts at S<b>362</b>. Next, the program start time (program_start_time) is recorded as the current time at S<b>370</b>.</p><p id="p-0113" num="0112">If there is no waiting program in step S<b>350</b> (S<b>350</b>=N), the process ends at S<b>391</b> and may return to the beginning. Or, if the current throughput (Current_throughput) is larger than the threshold throughput (threshold_throughput) in step S<b>340</b> (S<b>340</b>=N), the process ends at S<b>391</b> and may return to the beginning.</p><p id="p-0114" num="0113">On the other hand, if the erase operation is not being performed in step S<b>320</b> (S<b>320</b>=N), it is checked whether the program operation is performed at S<b>322</b>.</p><p id="p-0115" num="0114">If the program operation is performed (S<b>322</b>=Y), the program start time (program_start_time) is subtracted from the current time (current_time) to calculate the program processing time (program_processing_time), as shown in S<b>382</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0116" num="0115">Next, the current value of the current throughput (Current_throughput) is calculated at S<b>384</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. The previous value of current throughput is added to the value obtained by multiplying the throughput of die (Die_throughput) by the program processing time (program_processing_time) to determine the current value of current throughput.</p><p id="p-0117" num="0116">Subsequently, the final current throughput (Current_throughput) is determined by comparing the value calculated at S<b>384</b> with the throughput of die (Die_throughput), as shown in S<b>386</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. The final current throughput (Current_throughput) does not exceed the throughput of die (Die_throughput) (i.e., the maximum throughput of die). This is because the current throughput may not exceed the throughput of die, even if only a program is continued without erasing in the middle.</p><p id="p-0118" num="0117">Next, the program start time (program_start_time) is recorded as the current_time (current_time) at S<b>388</b> of <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0119" num="0118">Referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref> again, after S<b>338</b> in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the process ends at S<b>391</b> and may return to the beginning.</p><p id="p-0120" num="0119">On the other hand, if the program operation is not performed (S<b>322</b>=N) in step S<b>322</b>, it is checked whether there is a suspended erase (S<b>324</b>).</p><p id="p-0121" num="0120">If there is a suspended erase (S<b>324</b>=Y), the erase is resumed again at S<b>392</b>.</p><p id="p-0122" num="0121">Next, the erase start time (erase_start_time) is recorded as the current time (current_time) at S<b>394</b>.</p><p id="p-0123" num="0122">On the other hand, if there is no suspended erase (S<b>324</b>=N) in step S<b>324</b>, it is confirmed whether there is an erase task in the queue corresponding to the selected die at S<b>326</b>.</p><p id="p-0124" num="0123">If there is an erase task in the queue (S<b>326</b>=Y), the erase starts at S<b>392</b>, and if there is no erase task in the queue (S<b>326</b>=N), the process returns to the beginning at S<b>310</b>.</p><p id="p-0125" num="0124">Hereinafter, a method for controlling so that erase sections of the dies overlap to a minimum within the time (i.e., t<b>1</b>) at which the program on the Nth super block needs to be completed will be explained referring to <figref idref="DRAWINGS">FIGS. <b>14</b> to <b>19</b></figref>.</p><p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram for explaining the operation of the memory controller according to some other embodiments of the present disclosure.</p><p id="p-0127" num="0126">In <figref idref="DRAWINGS">FIG. <b>14</b></figref>, as with many other embodiments herein, a first die may be DIE<b>0</b> and may include at least a first block (e.g., a BLK<b>0</b>) and a second block (e.g., a BLK<b>1</b>), and a second die may be DIE<b>1</b> and may include a third block (e.g., a BLK<b>0</b>) and a fourth block (e.g., a BLK<b>1</b>). Referring to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the erase sections ERS<b>10</b>, ERS<b>11</b>, ERS<b>12</b>, and ERS<b>13</b> of dies DIED, DIE<b>1</b>, DIE<b>2</b>, and DIE<b>3</b> are placed so as not to overlap each other for a predetermined time t<b>1</b>. For example, while a die DIE<b>0</b> performs the erase ERS<b>10</b> of the N+1st super block, other dies DIE<b>1</b>, DIE<b>2</b>, and DIE<b>3</b> do not perform erases ERS<b>11</b>, ERS<b>12</b>, and ERS<b>13</b> of the N+1st super block. Thus, for example, a first erase section of the second block of DIE<b>0</b> and a first step erase section of the fourth block of DIE<b>1</b> do not overlap at all in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. Similarly, if a third die may be DIE<b>2</b> and may include at least a fifth block (e.g., a BLK<b>0</b>) and a sixth block (e.g., a BLK<b>1</b>), the first erase section of the fourth block of DIE<b>1</b> and a first erase section of the sixth block of DIE<b>2</b> do not overlap at all in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. Moreover, if a fourth die may be DIE<b>3</b> and may include at least a seventh block (e.g., a BLK<b>0</b>) and an eighth block (e.g., a BLK<b>1</b>), the first erase section of the sixth block of DIE<b>2</b> and the first erase section of the eighth block of DIE<b>3</b> do not overlap at all in <figref idref="DRAWINGS">FIG. <b>14</b></figref>.</p><p id="p-0128" num="0127">Specifically, if the program of the Nth super block needs to be completed for 100 ms, the erase of the N+1st super block also needs to be completed within 100 ms. For example, if the memory device is assumed to include four dies and the time taken for one die to perform the erase operation is 25 ms, the four dies may perform the erase without overlapping at all because the 4 segments each of 25 ms total to 100 ms.</p><p id="p-0129" num="0128">However, if the time taken for one die to perform the erase operation is 30 ms, the four dies may not perform an erase without overlapping at all because the 4 segments each of 30 ms total to 120 ms, and thus exceed the 100 ms time for completion. When comparing the program time (100 ms) with the total erase time (120 ms), the erases of the four dies overlap by at least 20% (=20 ms/100 ms).</p><p id="p-0130" num="0129">In this way, the overlapping erase sections may be determined in consideration of the program time of the Nth super block, and the erase time of each die (that is, the time to erase the blocks included in the N+1st super block on each die).</p><p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. <b>15</b></figref> and <figref idref="DRAWINGS">FIG. <b>16</b></figref> show a control so that the erase sections of the dies overlap to a minimum by the introduction of a token concept.</p><p id="p-0132" num="0131">The token concept described herein may be considered analogous to a timer such as an hourglass used to count up from an initial number of total tokens during a step erase and that is at <b>0</b> or from an offset from 0 at the beginning of each step erase. The initial number of total tokens and the rate of increase may both be adjusted based on a length of an erase section (e.g., durations of step erases for a second block and for a fourth block of a second super block), and/or based on a length of a program time (e.g., a duration of a programming operation for a first block and for a third block of a first super block).</p><p id="p-0133" num="0132">Referring to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, for example, the initial number of total tokens may be given as 10. The initial number of total tokens may be determined in consideration of the program time on the Nth super block, and the erase time of each die (that is, the time to erase the blocks included in the N+1st super block on each die).</p><p id="p-0134" num="0133">At time t<b>21</b>, the blocks included in the N+1st super block of the first die DIE<b>0</b> are erased. When the DIE<b>0</b> erase starts, the initial number is reduced by predetermined consumed tokens. Because the initial number is 10, and the number of predetermined consumed tokens is 10, the total tokens becomes 0 at time t<b>21</b> (&#x2235;10&#x2212;10=0).</p><p id="p-0135" num="0134">If the erase progresses, the number of total tokens gradually increases with the erase progress time.</p><p id="p-0136" num="0135">Or, the number of total tokens may increase in consideration of not only the erase progress time but also the number of dies in which the erase operation is being performed. That is, &#x201c;erase progress time&#xd7;number of erase operation dies=number of increased tokens&#x201d; may be established. For example, if one die performs an erase for a specific time, the number of total tokens may be increased by 1 (&#x2235;1&#xd7;1=1). However, if two dies perform the erase for the specific time, the number of total tokens may be increased by 2 (&#x2235;1&#xd7;2=2). Hereinafter, a case where the number of total tokens is increased in consideration of the erase progress time and the number of dies in which the erase operation is being performed will be explained.</p><p id="p-0137" num="0136">At time t<b>22</b>, the number of total tokens becomes 5 (&#x2235;5&#xd7;1=5) in consideration of the erase progress time and the number of dies in which the erase operation is performed. Since the number of total tokens has not reached the number of threshold tokens (for example, 10), the blocks included in the N+1st super block of the second die DIE<b>1</b> are not erased.</p><p id="p-0138" num="0137">At time t<b>23</b>, the number of total tokens becomes 10 in consideration of the erase progress time and the number of dies in which the erase operation is performed. Since the number of total tokens has reached the number of threshold tokens (for example, 10), the blocks included in the N+1st super block of the second die DIE<b>1</b> are erased. When the DIE<b>1</b> erase starts, the total tokens decrease by predetermined consumed tokens, and becomes 0 (&#x2235;10&#x2212;10=0).</p><p id="p-0139" num="0138">At time t<b>24</b>, the number of total tokens becomes 5.</p><p id="p-0140" num="0139">At time t<b>25</b>, the number of total tokens becomes 10. Since the number of total tokens has reached the number of threshold tokens (for example, 10), the blocks included in the N+1st super block of the third die DIE<b>2</b> are erased. When the DIE<b>2</b> erase starts, the total tokens decrease by the predetermined consumed tokens, and becomes 0 (10&#x2212;10=0).</p><p id="p-0141" num="0140">At time t<b>26</b>, the number of total tokens becomes 5.</p><p id="p-0142" num="0141">At time t<b>27</b>, since the number of total tokens becomes 10, the blocks included in the N+1st super block of the fourth die DIE<b>3</b> are erased.</p><p id="p-0143" num="0142">At time t<b>28</b>, the number of total tokens becomes 5.</p><p id="p-0144" num="0143">At time t<b>29</b>, since the number of total tokens reached <b>10</b>, although not shown separately, the erase of the blocks included in the N+1st super block is finished and the blocks included in the N+2nd super block of the first die DIE<b>0</b> may be erased.</p><p id="p-0145" num="0144">The greatest difference between the method explained in <figref idref="DRAWINGS">FIG. <b>16</b></figref> and the method explained in <figref idref="DRAWINGS">FIG. <b>15</b></figref> is that the initial number of total tokens is different. Referring to <figref idref="DRAWINGS">FIG. <b>16</b></figref>, for example, the initial number of total tokens may be given as 15. The initial number of total tokens is determined by considering the program time on the Nth super block, and the erase time of each die (that is, the time to erase the blocks included in the N+1st super block on each die). In <figref idref="DRAWINGS">FIG. <b>16</b></figref>, as with many other embodiments herein, a first die may be DIE<b>0</b> and may include at least a first block (e.g., a BLK<b>0</b>) and a second block (e.g., a BLK<b>1</b>), and a second die may be DIE<b>1</b> and may include a third block (e.g., a BLK<b>0</b>) and a fourth block (e.g., a BLK<b>1</b>). As explained below, in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, for example, a first erase section of the second block of DIE<b>0</b> and a first step erase section of the fourth block of DIE<b>1</b> only partially overlap. Similarly, if a third die may be DIE<b>2</b> and may include at least a fifth block (e.g., a BLK<b>0</b>) and a sixth block (e.g., a BLK<b>1</b>), the first erase section of the fourth block of DIE<b>1</b> and a first erase section of the sixth block of DIE<b>2</b> only partially overlap in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. Moreover, if a fourth die may be DIE<b>3</b> and may include at least a seventh block (e.g., a BLK<b>0</b>) and an eighth block (e.g., a BLK<b>1</b>), the first erase section of the sixth block of DIE<b>2</b> and the first erase section of the eighth block of DIE<b>3</b> only partially overlap in <figref idref="DRAWINGS">FIG. <b>16</b></figref>.</p><p id="p-0146" num="0145">Referring to <figref idref="DRAWINGS">FIG. <b>16</b></figref>, at time t<b>21</b>, the blocks included in the N+1st super block of the first die DIE<b>0</b> are erased. When the DIE<b>0</b> erase starts, the total tokens are reduced from the initial number <b>15</b> by predetermined consumed tokens <b>10</b>, and becomes 0 at time t<b>21</b> (&#x2235;5&#x2212;10=5).</p><p id="p-0147" num="0146">The number of total tokens increases, in consideration of the erase progress time and the number of dies in which the erase operation is performed.</p><p id="p-0148" num="0147">At time t<b>22</b>, the total tokens increase by 5 (&#x2235;5&#xd7;1=5), in consideration of the erase progress time and the number of dies in which the erase operation is performed, and the number of total tokens becomes 10. Since the number of total tokens has reached the number of threshold tokens (for example, 10), the blocks included in the N+1st super block of the second die DIE<b>1</b> are erased. Since the erase starts, the total tokens decrease by the predetermined consumed tokens <b>10</b>, and becomes 0 (&#x2235;10&#x2212;10=0). At time t<b>22</b>, under the situation in which the erase of the first die DIE<b>0</b> does not end, it may be known that the erase of the second die DIE<b>1</b> starts.</p><p id="p-0149" num="0148">At time t<b>23</b>, the total tokens increase by 10 (&#x2235;5&#xd7;2=10) in consideration of the erase progress time and the number of dies in which the erase operation is performed, and the number of total tokens becomes 10. Since the number of total tokens has reached the number of threshold tokens (for example, 10), the blocks included in the N+1st super block of the third die DIE<b>2</b> are erased. Since the erase starts, the total tokens decrease by predetermined consumed token <b>10</b>, and becomes 0 (&#x2235;10&#x2212;10=0). At time t<b>23</b>, under the situation in which the erase of the second die DIE<b>1</b> is not ended, it may be known that the erase of the third die DIE<b>2</b> starts.</p><p id="p-0150" num="0149">At time t<b>24</b>, the total tokens increase by 10 (&#x2235;5&#xd7;2=10), in consideration of the erase progress time and the number of dies in which the erase operation is performed, and the number of total tokens becomes 10. The blocks included in the N+1st super block of the fourth die DIE<b>3</b> are erased. The erase starts, and at the same time, the total tokens decrease by predetermined consumed tokens <b>10</b>, and becomes 0 (&#x2235;10&#x2212;10=0).</p><p id="p-0151" num="0150">Similarly, at time t<b>25</b>, the total token becomes 10, and the blocks included in the N+2nd super block of the first die DIE<b>0</b> are erased.</p><p id="p-0152" num="0151">At time t<b>26</b>, the total token becomes 10, and the blocks included in the N+2nd super block of the second die DIE<b>1</b> are erased.</p><p id="p-0153" num="0152">At time t<b>27</b>, the total token becomes 10, and the blocks included in the N+2nd super block of the third die DIE<b>2</b> are erased.</p><p id="p-0154" num="0153">At time t<b>28</b>, the total token becomes 10, and the blocks included in the N+2nd super block of the fourth die DIE<b>3</b> are erased.</p><p id="p-0155" num="0154">As explained using <figref idref="DRAWINGS">FIGS. <b>15</b> and <b>16</b></figref>, by setting the number of tokens to increase in consideration of at least one of the initial number of total tokens, the number of tokens consumed at the start of the erase, and the erase progress time, it is possible to control the degree of overlap of the erase sections of the plurality of dies. For example, as explained below, when a first die includes a first block and a second block and a second die includes a third block and a fourth block, the relative and/or absolute amount of overlap of the overlapping section changes or may be changed. The change in relative and/or absolute amount of overlap may be based on, for example, a program time of the first super block, a length of the erase section of the second block of the first die, and a length of the erase section of the fourth block of the second die (e.g., when the second block of the first die and the fourth block of the second die comprise a second super block). The number of total tokens at the start of a step erase may change or be changed based on factors such as these.</p><p id="p-0156" num="0155">For example, as shown in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, by setting the initial number of total tokens to 10 and the number of tokens consumed at the start of erase to 10, it is possible to perform the control so that the erase sections of two dies (e.g., DIE<b>0</b> and DIE<b>1</b>) do not overlap. The control may be performed so that the erase of the first die DIE<b>0</b> ends, and at the same time, the erase of the second die DIE<b>1</b> starts.</p><p id="p-0157" num="0156">As shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, by setting the initial number of total tokens to 15 and the number of tokens consumed at the start of erase to 10, it is possible to perform the control so that the erase sections of the two dies (e.g., DIE<b>0</b> and DIE<b>1</b>) overlap each other by about 50%.</p><p id="p-0158" num="0157">As still another example, when the initial number of total tokens is set to 12, and the number of tokens consumed at the start of erase is set to 10, it is possible to perform the control so that the erase sections of the two dies (e.g., DIE<b>0</b> and DIE<b>1</b>) overlap each other by about 20%.</p><p id="p-0159" num="0158">As still another example, when the initial number of total tokens is set to 8, and the number of tokens consumed at the start of erase is set to 10, it is possible to perform the control so that an erase free section (a section in which the erase is not performed on any die) is located between the erase sections of two dies (e.g., DIE<b>0</b> and DIE<b>1</b>).</p><p id="p-0160" num="0159"><figref idref="DRAWINGS">FIG. <b>17</b></figref> and <figref idref="DRAWINGS">FIG. <b>18</b></figref> are flow charts for explaining an operation of a memory controller according to other embodiments of the present disclosure.</p><p id="p-0161" num="0160">Referring to <figref idref="DRAWINGS">FIG. <b>17</b></figref> first, it is assumed that the program on the Nth super block and the erase on the N+1st super block are waiting in the queue.</p><p id="p-0162" num="0161">It is checked whether the erase operations are being performed at S<b>410</b>.</p><p id="p-0163" num="0162">If the erase operations are being performed (S<b>410</b>=Y), an elapsed time (elapsed_time) is calculated for all the dies in which the erase operations are being performed at S<b>422</b> of <figref idref="DRAWINGS">FIG. <b>18</b></figref>. The elapsed time (elapsed_time) is calculated by subtracting the check time (check_time) from the current time (current_time).</p><p id="p-0164" num="0163">Next, the number of remaining tokens (remain_tokens) (that is, total tokens) is calculated at S<b>424</b> of <figref idref="DRAWINGS">FIG. <b>18</b></figref>.</p><p id="p-0165" num="0164">The previous value of the remaining tokens (remain_tokens) is added to the number of tokens which increases in proportion to the elapsed time (elapsed_time) to determine the current value of the remaining tokens (remain_tokens).</p><p id="p-0166" num="0165">Specifically, the number of increasing tokens may be a value obtained by multiplying the token (erase_consume_token) consumed at the same time as the start of erase by the ratio of the elapsed time (elapsed_time) and the erase time (erase_time). That is, if the token (erase_consume_token) consumed at the same time as the start of erase is 10, the erase time (erase_time) is 25 ms, and the elapsed time (elapsed_time) is 5 ms, the number of increasing tokens is 2 (&#x2235;2=10&#xd7; 5/25).</p><p id="p-0167" num="0166">Then, the current time (current_time) is recorded as the check time (check_time) at S<b>426</b> of <figref idref="DRAWINGS">FIG. <b>18</b></figref>.</p><p id="p-0168" num="0167">Refer to <figref idref="DRAWINGS">FIG. <b>17</b></figref> again, it is checked whether there are remaining erases to be performed at S<b>430</b>.</p><p id="p-0169" num="0168">If there are remaining erases to be performed (S<b>340</b>=Y), a die that has no record of performing the erase (that is, the erase count (die_erase_count) is smaller than 1) is selected at S<b>440</b>.</p><p id="p-0170" num="0169">Next, it is checked whether the remaining tokens (total tokens) are equal to or larger than the consumed tokens (erase_consume_token) at S<b>450</b>.</p><p id="p-0171" num="0170">If the remaining tokens are equal to or larger than the consumed tokens (S<b>450</b>=Y), the consumed tokens are subtracted from the initial values of the remaining tokens to calculate the current value of the remaining tokens at S<b>460</b>.</p><p id="p-0172" num="0171">Next, the erase operation starts at S<b>470</b>.</p><p id="p-0173" num="0172">Next, the current time (current_time) is recorded as the check time (check_time) at S<b>480</b>. Next, the process returns to S<b>430</b>.</p><p id="p-0174" num="0173">On the other hand, if there are no remaining erases to be performed in step S<b>430</b> (S<b>430</b>=N), or if the remaining tokens are smaller than the consumed tokens in step S<b>450</b> (S<b>450</b>=N), the process ends.</p><p id="p-0175" num="0174">On the other hand, although the method for performing the erase on the N+1st super block divided into multiple steps (see <figref idref="DRAWINGS">FIGS. <b>5</b> to <b>13</b></figref>), and the method for controlling so that the erase sections of dies overlap to the minimum (see <figref idref="DRAWINGS">FIGS. <b>14</b> to <b>18</b></figref>) have been explained, the methods may be used in combination with each other.</p><p id="p-0176" num="0175">For example, although <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows that the erase section (N+1.first) of the first die DIE<b>0</b> and the erase section (N+1.first) of the second die DIE<b>0</b> belonging to the first step erase ERS<b>1</b> overlap each other, the erase section (N+1.first) of the first die DIE<b>0</b> and the erase section (N+1.first) of the second die DIE<b>0</b> belonging to the first step erase ERS<b>1</b> may only partially overlap or may not completely overlap each other. Or, the erase section (N+1.n) of the first die DIE<b>0</b> and the erase section (N+1.n) of the second die DIE<b>1</b> belonging to some other step erase (e.g., ERS<b>4</b>) may only partly overlap or may not completely overlap each other.</p><p id="p-0177" num="0176">On the other hand, in some embodiments of the present disclosure, the maximum throughput (Max throughput) of the memory device <b>150</b> is larger than the Host Interface Max Write Throughput. Therefore, even if a large-capacity buffer memory is not adopted, the erase section may be controlled in the same manner as in the above-mentioned methods, and the solution throughput of the storage device <b>100</b> may be made as much as the maximum write throughput of the host interface.</p><p id="p-0178" num="0177">Although examples of implementations relating to the inventive concept(s) described herein have been explained above referring to the attached drawings, the inventive concept(s) described herein are not limited to the examples and may be produced or otherwise manifested in various different forms. Those skilled in the art will appreciate that the examples may be implemented in other specific forms without changing the technical ideas and essential features of the inventive concept(s) described herein. Therefore, the disclosed preferred embodiments of the inventive concept(s) described herein are used in a generic and descriptive sense only and not for purposes of limitation.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A storage device comprising:<claim-text>a memory including a plurality of NAND dies that include a first die and a second die; and</claim-text><claim-text>a controller configured to perform an erase operation on the first die during a first time period, and to perform the erase operation on the second die during a second time period,</claim-text><claim-text>wherein during the first time period, the controller does not perform the erase operation on the second die, and</claim-text><claim-text>during the second time period, the controller does not perform the erase operation on the first die.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The storage device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein during a third time period which is between the first time period and the second time period, the controller performs the erase operation on both the first die and the second die.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The storage device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the controller performs a program on the second die during the first time period, and performs the program on the first die during the second time period.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The storage device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein while the erase operation is performed on the first die, the erase operation is not performed on any other die among the plurality of NAND dies.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The storage device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein while the erase operation is performed on the first die, a program is performed on all the other dies of the plurality of NAND dies.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The storage device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first die includes a first block and a second block,<claim-text>the second die includes a third block and a fourth block,</claim-text><claim-text>a first super block includes the first block and the third block,</claim-text><claim-text>a second super block includes the second block and the fourth block, and</claim-text><claim-text>the controller completes the erase operation on the second super block before starting a program on the second super block.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The storage device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the controller performs a program on at least one die among the plurality of NAND dies while the controller performs the erase operation on at least one other die among the plurality of NAND dies.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A storage device comprising:<claim-text>a memory including a plurality of NAND dies that include a first die and a second die; and</claim-text><claim-text>a controller configured to perform an erase operation on the first die during a first time period, to perform the erase operation on both the first die and the second die during a second time period, and to perform the erase operation on the second die during a third time period,</claim-text><claim-text>wherein during the first time period, the controller does not perform the erase operation on the second die, and</claim-text><claim-text>during the third time period, the controller does not perform the erase operation on the first die.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The storage device of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the second time period is between the first time period and the third time period.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The storage device of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the controller performs a program on the second die during the first time period, and performs the program on the first die during the third time period.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The storage device of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first die includes a first block and a second block,<claim-text>the second die includes a third block and a fourth block,</claim-text><claim-text>a first super block includes the first block and the third block,</claim-text><claim-text>a second super block includes the second block and the fourth block, and</claim-text><claim-text>the controller completes the erase operation on the second super block before starting a program on the second super block.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The storage device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the controller performs the program on the first super block while the controller performs the erase operation on the second super block.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The storage device of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the controller performs a program on at least one die among the plurality of NAND dies while the controller performs the erase operation on at least one other die among the plurality of NAND dies.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A storage device comprising:<claim-text>a memory including a plurality of NAND dies that include a first die and a second die; and</claim-text><claim-text>a controller configured to perform an erase operation on the first die and perform a program on the second die during a first time period, and to perform the erase operation on the second die and perform a program on the first die during a second time period,</claim-text><claim-text>wherein during the first time period, the controller does not perform the erase operation on the second die, and</claim-text><claim-text>during the second time period, the controller does not perform the erase operation on the first die.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The storage device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein during a third time period which is between the first time period and the second time period, the controller performs the erase operation on both the first die and the second die.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The storage device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein while the erase operation is performed on the first die, the erase operation is not performed on any other die among the plurality of NAND dies.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The storage device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein while the erase operation is performed on the first die, a program is performed on all the other dies of the plurality of NAND dies.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The storage device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the first die includes a first block and a second block,<claim-text>the second die includes a third block and a fourth block,</claim-text><claim-text>a first super block includes the first block and the third block,</claim-text><claim-text>a second super block includes the second block and the fourth block, and</claim-text><claim-text>the controller completes the erase operation on the second super block before starting the program on the second super block.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The storage device of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the controller performs the program on the first block while the controller performs the erase operation on the fourth block, and<claim-text>the controller performs the program on the third block while the controller performs the erase operation on the second block.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The storage device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the controller performs the program on at least one die among the plurality of NAND dies while the controller performs the erase operation on at least one other die among the plurality of NAND dies.</claim-text></claim></claims></us-patent-application>