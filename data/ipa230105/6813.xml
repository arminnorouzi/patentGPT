<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006814A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006814</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363719</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>088</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>18</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHOD AND APPARATUS FOR IMPLEMENTING CHANGES TO A FILE SYSTEM THAT IS EMULATED WITH AN OBJECT STORAGE SYSTEM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SCALITY, S.A.</orgname><address><city>Paris</city><country>FR</country></address></addressbook><residence><country>FR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SCHUBERG</last-name><first-name>Bjorn</first-name><address><city>Paris</city><country>FR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CANCE</last-name><first-name>St&#xe9;phane</first-name><address><city>Montreuil</city><country>FR</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>FAURE</last-name><first-name>Boris</first-name><address><city>Courbevoie</city><country>FR</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>NGUYEN</last-name><first-name>Viet Tuan</first-name><address><city>Bussy-Saint-Georges</city><country>FR</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>DETOUR</last-name><first-name>Olivier</first-name><address><city>Oullins</city><country>FR</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>KING</last-name><first-name>Bradley</first-name><address><city>Malakoff</city><country>FR</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method is described. The method includes receiving logs from multiple connector nodes, each of the logs having entries that describe changes made to a file system at its respective one of the connector nodes. The method includes constructing a directed acyclic graph (DAG) from the logs' respective entries, the DAG comprising nodes connected by flows, the nodes describing actions made to directories and files of the file system, wherein, a flow of the flows connects a subset of the nodes that describe actions made to a particular directory or file of the file system. The method includes removing one or more irrelevant nodes from the DAG. The method includes applying actions described by remaining nodes of the DAG to an object storage system having respective objects for directories and files of the file system.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="92.03mm" wi="158.75mm" file="US20230006814A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="214.63mm" wi="125.31mm" orientation="landscape" file="US20230006814A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="180.00mm" wi="115.74mm" orientation="landscape" file="US20230006814A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="262.21mm" wi="144.44mm" orientation="landscape" file="US20230006814A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="76.88mm" wi="138.35mm" orientation="landscape" file="US20230006814A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="130.13mm" wi="138.51mm" orientation="landscape" file="US20230006814A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="169.25mm" wi="139.62mm" orientation="landscape" file="US20230006814A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="200.15mm" wi="139.62mm" orientation="landscape" file="US20230006814A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="200.15mm" wi="139.62mm" orientation="landscape" file="US20230006814A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="200.15mm" wi="139.62mm" orientation="landscape" file="US20230006814A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="243.42mm" wi="142.41mm" orientation="landscape" file="US20230006814A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="243.42mm" wi="144.61mm" orientation="landscape" file="US20230006814A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="243.42mm" wi="144.61mm" orientation="landscape" file="US20230006814A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="243.42mm" wi="144.61mm" orientation="landscape" file="US20230006814A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="262.55mm" wi="148.59mm" orientation="landscape" file="US20230006814A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="243.42mm" wi="144.61mm" orientation="landscape" file="US20230006814A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="247.14mm" wi="142.16mm" orientation="landscape" file="US20230006814A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF INVENTION</heading><p id="p-0002" num="0001">The field of invention pertains generally to the computing sciences, and, more specifically, to a method and apparatus for implementing changes to a file system that is emulated with an object storage system.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">With the emergence of big data, low latency access to large volumes of information is becoming an increasingly important parameter of the performance and/or capability of an application that processes or otherwise uses large volumes of information.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">FIGURES</heading><p id="p-0004" num="0003">A better understanding of the present invention can be obtained from the following detailed description in conjunction with the following drawings, in which:</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a storage system;</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a methodology performed by the storage system;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows exemplary logs having log entries;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIGS. <b>4</b><i>a</i>, <b>4</b><i>b</i>, <b>4</b><i>c</i>, <b>4</b><i>d</i>, <b>4</b><i>e</i>, <b>4</b><i>f</i>, <b>4</b><i>g</i>, <b>4</b><i>h</i>, <b>4</b><i>i </i>and <b>4</b><i>j </i></figref>show a directed acyclic graph (DAG) being constructed from the log entries of <figref idref="DRAWINGS">FIG. <b>3</b></figref>;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a method for constructing a DAG;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a synthesized DAG;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a computing system.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><heading id="h-0005" level="1">i. Overview</heading><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a storage system <b>100</b> having improved operational efficiency as described in more detail below. As observed in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the storage system <b>100</b> includes multiple connector nodes <b>101</b> coupled to a network <b>102</b> and a physical storage resource <b>103</b>. In operation, each connector node <b>101</b> presents one or more storage system interfaces to one or more users (e.g., client devices, customers, etc.). For example, connector node <b>101</b> may present any of a number of different file system interfaces to the users (e.g., FAT, NFS, NTFS, GFS2, GPFS, and/or any file system associated with and/or supported by various operating systems such as Microsoft Windows, Unix, Linux, MVS, and/or any file system associated with a cloud service such as S3 from Amazon Web Services (AWS), Azure from Microsoft, Google cloud storage, etc.).</p><p id="p-0013" num="0012">Users send storage system commands (e.g., reads, writes) that are compliant with a particular interface's format/syntax to their connector node through the corresponding interface. The connector node then processes the request and applies it to the underlying storage system. The physical storage resource <b>103</b> need not be implemented as the same kind of storage system as the interface(s). For example, according to various embodiments, one or more of the interfaces that are presented to the users are file system interfaces whereas the physical storage resource <b>103</b> is implemented as an object storage system.</p><p id="p-0014" num="0013">As is known in the art, a file system specifies locations in the system with a directory path, whereas, an object storage system identifies individual stored objects with their own unique key. With respect to the manner in which a file system is emulated with an object storage system, according to various embodiments, each directory and file in the file system is represented with its own unique object in the object storage system. As such, each file and directory has its own unique key and can be accessed by applying its key to the object storage system.</p><p id="p-0015" num="0014">Particularly in the case of large scale storage systems, a challenge is providing the users with fast response times while ensuring that their commands are correctly reflected in the physical storage resource <b>103</b>. An additional challenge is resolving conflicting requests (when two different users concurrently/simultaneously attempt to make a change to the same storage system resource (e.g., directory, file, etc.)).</p><p id="p-0016" num="0015">In order to address these challenges each connector node <b>101</b> includes a local change event log <b>104</b> (or simply, &#x201c;local log&#x201d;) and distributed locking logic <b>105</b>. The local log <b>104</b> records changes that are made to a particular file system at the log's connector node by the connector node's user base. The distributed locking logic <b>105</b> ensures that changes made to any particular item in a database (e.g., a directory, a file, etc.) are performed in a strict sequential order that are defined and respected across the storage system.</p><p id="p-0017" num="0016">Here, the distributed locking logic <b>105</b> assigns version numbers to directories and files. Any time the content of a file is changed, the version number of the file is incremented, and, any time a change is made to the structure/organization directly beneath a parent directory, the parent directory's version number is incremented. Because the locking mechanism operates across the entire file system, the strict sequential ordering of the versions of any particular file or directory is maintained across the entire file system (a connector node may operate with local copies of items but their versions are consistent with the same version of other copies of the same items on other connector nodes).</p><p id="p-0018" num="0017">With respect to the information kept by the local log <b>104</b>, a particular file system is viewed as an organization of directory items and file items (a folder is considered a directory item). File items and directory items are created and placed within (&#x201c;beneath&#x201d;) a parent directory. File items and directory items have names. Over the course of the file system's existence, certain changes can be made to the file system such as the deletion of any directory or file, the movement of any directory or file to a different parent directory and/or a change to the name of any file or directory.</p><p id="p-0019" num="0018">In various embodiments, as alluded to above, the physical storage resources <b>103</b> are implemented as an object storage system in which individual items are identified with keys rather than a directory file path. Here, for instance, a connector node <b>101</b> presents a file system interface to its users but internally maps the filepaths that are specified in the user commands to key values that are applied to the object storage system <b>103</b>. The object storage system <b>103</b> stores objects each having its own unique key. Any particular object is accessed by providing the object storage system <b>103</b> with the object's key. To emulate a file system, the file system's directory items and file items are stored as objects within the object storage system <b>103</b>.</p><p id="p-0020" num="0019">In various embodiments implemented as described just above, the following information is recorded in a local log <b>104</b> for each file system change (&#x201c;log entry event&#x201d;) made at the log's connector node:</p><p id="p-0021" num="0000">1. the type of change that was made (e.g., creation of a file or directory; deletion of a file or directory; change to a file, movement of a file or directory, etc.);<br/>2. the name of the item that was changed (e.g., the name of a file or directory);<br/>3. the key for the item that was changed (the unique identifier for the item in the object storage system<br/>4. the key of the item's parent directory;<br/>5. the item's version after the change;<br/>6 the parent directory's version after the change.</p><p id="p-0022" num="0020">In the case of name changes, the recorded information additionally includes the new name of the item (where #<b>2</b> above refers to the name of the item before the change). In the case of the movement of an item to a new parent directory, the recorded information additionally includes the key and version number of the &#x201c;source&#x201d; parent directory that the item was moved from (where #s <b>4</b> and <b>5</b> above refer to the key and version number of the &#x201c;destination&#x201d; parent directory that the item was moved to).</p><p id="p-0023" num="0021">The local log <b>104</b> of each connector node <b>101</b> has access to the mapping logic of its respective connector node so that the file system directory path for any file or directory can be mapped to its corresponding key within the object storage system.</p><p id="p-0024" num="0022"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a methodology that can be executed by the improved storage system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. As observed in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the event logs record change events <b>201</b> that they observe at their respective connector nodes. The event logs are then collected and processed into a directed acyclic graph (DAG) <b>202</b> that reflects the changes made across the multiple connector nodes. The DAG <b>203</b> is then synthesized into a reduced set of changes <b>203</b>. The reduced set of changes are then applied to the object storage system <b>204</b>.</p><heading id="h-0006" level="1">ii. Recording of Log Events</heading><p id="p-0025" num="0023"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts an example of the recordation of changes in multiple event logs as represented by feature <b>201</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Specifically, <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows the event histories for a pair of connector nodes (&#x201c;A&#x201d; and &#x201c;B&#x201d;) for an exemplary operational sequence in which the connector nodes' respective users make changes to a file system that is emulated with an object storage system <b>103</b> as described above.</p><p id="p-0026" num="0024">As observed in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a change made by a user at the first node A creates a directory named &#x201c;workdir&#x201d; at time T<b>1</b>. In response, the log for connector A creates event entry A<b>1</b>. As observed, event entry A<b>1</b> within log A includes</p><p id="p-0027" num="0000">1. the type of change (creation of directory (&#x201c;MKDIR&#x201d;);<br/>2. the name of the created directory (&#x201c;workdir&#x201d;);<br/>3. the key assigned to workdir/ (=1);<br/>4. the key of the parent of workdir/ (=0=the root node of the file system);<br/>5. the version for workdir/ (=1 because this is the first version of workdir/);<br/>6. the version of the parent of workdir/ (&#x201c;X&#x201d; in this example as the root node can, at this point, be of any version).</p><p id="p-0028" num="0025">Next, at time T<b>2</b>, a change is made at connector A that creates a file &#x201c;file1&#x201d; within workdir/. As such, the log for connector A creates event entry A<b>2</b>. As observed, event entry A<b>2</b> within log A includes:</p><p id="p-0029" num="0000">1. the type of change (creation of a file (&#x201c;MKNOD&#x201d;);<br/>2. the name of the created file (&#x201c;file1&#x201d;);<br/>3. the key assigned to file1 (=2);<br/>4. the key of the parent of file1 (=1 because file1 has been created within workdir/);<br/>5. the version for file1 (=1 because this is the first version of file1);<br/>6. the version of the parent of file1 (=2, the version of workdir/ is incremented in response to the creation of file1 within workdir/).</p><p id="p-0030" num="0026">Next, at time T<b>3</b>, a change is made at connector B that creates a directory &#x201c;res/&#x201d; within workdir/. As such, the log for connector B creates event entry B<b>1</b>. As observed in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, event entry B<b>1</b> within log B includes:</p><p id="p-0031" num="0000">1. the type of change (creation of a directory (&#x201c;MKDIR&#x201d;);<br/>2. the name of the created directory (res/);<br/>3. the key assigned to res/ (=3);<br/>4. the key of the parent of res/ (=1 because res/ has been created within workdir/);<br/>5. the version for res/ (=1 because this is the first version of res/);<br/>6. the version of the parent of res/ (=3, the version of workdir/ is incremented in response to the creation of res/ within workdir/).</p><p id="p-0032" num="0027">Next, at time T<b>4</b>, file1 is written to from connector A (file1 is modified). As such, the log for connector A creates event entry A<b>3</b>. As observed, event entry A<b>3</b> within log A includes:</p><p id="p-0033" num="0000">1. the type of change (file modification (&#x201c;CNTMOD&#x201d;));<br/>2. the name of the file that was changed (file1);<br/>3. the key assigned to file1 (=2 (see event entry A<b>2</b>));<br/>4. the key of the parent of file1 (=1=workdir/);<br/>5. the version for file1 (=2 because this is the second version of file1);<br/>6. the version of the parent of file1 (remains at 3 because the directory structure directly beneath workdir/ is the same before and after the write to file1).</p><p id="p-0034" num="0028">Next, at time T<b>5</b>, a change is made at connector B that moves file1 from directly beneath workdir/ to directly beneath res/. The file is also renamed to &#x201c;res1&#x201d;. As such, the log for connector B creates event entry B<b>2</b>. This particular change is of the type that triggers additional content within the log entry. As observed, event entry B<b>2</b> within log B includes:</p><p id="p-0035" num="0000">1. the type of change (file move and file name change (&#x201c;MOV_RNM_NOD&#x201d;);<br/>2a. the old/from name of the file (&#x201c;file1&#x201d;);<br/>2b. the new/to name of the file (&#x201c;res1&#x201d;);<br/>3. the key of the file being moved (=2);<br/>4a. the key of the file's old/from parent directory (=1=workdir/);<br/>4b. the key of the file's new/to parent directory (=3=res/);<br/>5. the version of the file (=3);<br/>6a. the version of the file's old/from parent directory (v_P_f=4, the version of workdir/ is incremented in response to this change);<br/>6b. the version of the file's new/to parent directory (=2, the version of res/ is incremented in response to this change).</p><p id="p-0036" num="0029">Next, at time T<b>6</b>, a change is made at connector A that creates a new file &#x201c;file2&#x201d; in workdir/. As such, the log for connector A creates event entry A<b>4</b>. As observed, event entry A<b>4</b> within log A includes:</p><p id="p-0037" num="0000">1. the type of change (creation of a file (&#x201c;MKNOD&#x201d;));<br/>2. the name of the created file (&#x201c;file2&#x201d;);<br/>3. the key assigned to file2 (=4);<br/>4. the key of file2's parent directory (=1 because file2 has been created within workdir/);<br/>5. the version for file2 (=1 because this is the first version of file2);<br/>6. the version of file2's parent directory (=5, the version of workdir/ is incremented in response to the creation of file2 within workdir/).</p><p id="p-0038" num="0030">Next, at time T<b>7</b>, a change made from connector A writes to file2 (file2 is modified). As such, the log for connector A creates event entry A<b>5</b>. As observed in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, event entry A<b>5</b> within log A includes:</p><p id="p-0039" num="0000">1. the type of change ((file modification (&#x201c;CNTMOD&#x201d;));<br/>2. the name of the file that was changed (file2);<br/>3. the key assigned to file2 (=4 (see event entry A<b>4</b>));<br/>4. the key of file1's parent directory (=1=/workdir);<br/>5. the version for file2 (=2 because this is the second version of file2);<br/>6. the version of the parent of file2 (remains at 5 because the directory structure directly beneath workdir/ is the same before and after the write to file2).</p><p id="p-0040" num="0031">Next, at time T<b>8</b>, a change made at connector B creates a new file &#x201c;files&#x201d; in res/. As such, the log for connector B creates event entry B<b>3</b>. As observed in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, event entry B<b>3</b> within log B includes:</p><p id="p-0041" num="0000">1. the type of change (creation of a file (&#x201c;MKNOD&#x201d;));<br/>2. the name of the created file (&#x201c;files&#x201d;);<br/>3. the key assigned to files (=5);<br/>4. the key of files's parent directory (=3 because files has been created within res/);<br/>5. the version for files (=1 because this is the first version of files);<br/>6. the version of files's parent directory (=3, the creation of files changes the directory structure directly beneath res/).</p><p id="p-0042" num="0032">Next, at time T<b>9</b>, another change made from connector B writes to files (files is modified). As such, the log for connector B creates event entry B<b>4</b>. As observed in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, event entry B<b>4</b> within log B includes:</p><p id="p-0043" num="0000">1. the type of change ((file modification (&#x201c;CNTMOD&#x201d;));<br/>2. the name of the file that was changed (files);<br/>3. the key assigned to files (=5 (see event entry B<b>3</b>));<br/>4. the key of the parent of files (=3=res/);<br/>5. the version for files (=2 because this is the second version of files);<br/>6. the version of files's parent directory (remains at 3 because the directory structure directly beneath res/ is the same before and after the write to files).</p><p id="p-0044" num="0033">Finally, at time T<b>10</b>, a change made at connector node B removes file2 from /workdir but does not delete file2 from the file system. In this case, file2 exists but it has not been assigned any specific location within the file system hierarchy. In response, the log for connector B creates event B<b>5</b> which specifies the removal of file2 from workdir/.</p><p id="p-0045" num="0000">1. the type of change (removal of file from directory (&#x201c;REMNOD&#x201d;);<br/>2. the name of the file that was removed (file2);<br/>3. the key of file2 (=4 (see event A<b>4</b>);<br/>4. the version of file2 (remains at 2 because the content and name of file2 remain unchanged)<br/>5. the key of file2's old/from parent directory (=1=workdir/);<br/>6. the version of file2's old/from parent directory (=6, the removal of file2 changes the directory structure directly beneath workdir/).</p><heading id="h-0007" level="1">iii. Processing of Log Events into a DAG</heading><p id="p-0046" num="0034">As described above with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, once changes have been recorded <b>201</b> in the respective logs of the respective connector nodes, they are collected (e.g., sent to a centralized location such as node <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and a DAG is constructed from their entries (e.g., node <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes processing logic for constructing a DAG from the events of multiple logs).</p><p id="p-0047" num="0035"><figref idref="DRAWINGS">FIGS. <b>4</b><i>a </i>through <b>4</b><i>j </i></figref>show an example of the application of the DAG construction methodology <b>203</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to the exemplary scenario of changes that were described above with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0048" num="0036">With respect to the construction of the DAG, actions made to specific items in the file system are represented with individual nodes within the DAG. The sequence of actions taken to any specific item over time are reflected in flows from one action/node to the next concerning the item. For example, the initial creation of any file item or directory item is represented with its own unique node in the DAG. Subsequent changes involving the file item or directory item are then tracked with flows in the DAG that emanate from the item's creation node.</p><p id="p-0049" num="0037">Special &#x201c;linking&#x201d; and &#x201c;un-linking&#x201d; nodes are introduced into the DAG to represent the placement (linking) or removal (un-linking) of file items and directory items to/from their respective parent directories. For example, to represent the placement of a file item or directory item beneath its parent directory, a link node is inserted into the DAG that &#x201c;links&#x201d; a first flow that represents the file/directory item being placed beneath the parent directory with a second flow that represents the parent directory item.</p><p id="p-0050" num="0038">Likewise, if a file/directory item is removed from its immediate parent directory, a first flow that represents the file/directory item and a second flow that represent the parent directory flow into a same &#x201c;un-link&#x201d; node. Other nodes correspond to other changes made to the file-system such as modifications/writes made to file items, deletions of file/directory items, etc.</p><p id="p-0051" num="0039">With respect to the first entry B<b>1</b> in log B, the res/ directory is created and placed beneath the workdir/ directory. As such, as observed in <figref idref="DRAWINGS">FIG. <b>4</b><i>a</i></figref>, first DAG node <b>401</b> is created for the creation of the res/ directory. The node <b>401</b> includes a description of the action (&#x201c;MKDIR&#x201d;=creation of a directory), the name of the affected item (&#x201c;res/&#x201d;), the key and the version for res/ as recorded in the entry (key=3 and v=1).</p><p id="p-0052" num="0040">Because entry B<b>1</b> infers the pre-existence of the workdir/ directory (the DAG processing logic has not processed the event that creates workdir/), a second &#x201c;shadow&#x201d; node <b>402</b> is created for the workdir/ directory.</p><p id="p-0053" num="0041">As will become more clear in the following discussion, shadow nodes are created for items for which no creation event has yet been processed by the DAG logic. Shadow nodes are eventually replaced with the creation node for the item once the DAG logic processes the creation event. Shadow nodes are given shadow node status in their description in the DAG (in the particular example of <figref idref="DRAWINGS">FIGS. <b>4</b><i>a </i>through <b>4</b><i>j</i></figref>, shadow nodes are represented with dashed lines).</p><p id="p-0054" num="0042">As observed in <figref idref="DRAWINGS">FIG. <b>4</b><i>a</i></figref>, the shadow node <b>402</b> for the creation of workdir/ includes the event (&#x201c;MKDIR&#x201d;=creation of a directory), the name (&#x201c;workdir/&#x201d;), the key as recorded in the log entry being processed (key=1). According to one embodiment, the status of shadow node is reflected in the node with a default version of 0 (v=0). That is, whereas actual creation nodes are given a version of v=1, by contrast, shadow creation nodes are given a version of v=0 which signifies their shadow status.</p><p id="p-0055" num="0043">To complete the processing of entry B<b>1</b>, a linking node <b>403</b> is entered in the DAG to represent the placement of res/ beneath workdir/. Here, flows from each of nodes <b>401</b> and <b>402</b> flow into link node <b>403</b>. Link node <b>403</b> identifies the key of the parent (workdir/, k=1) and the version of the parent after the link as recorded in the log entry (v=3). Note that the flow from /workdir is consistent in that the version numbers of /workdir increase when progressing through workdir/'s flow. At this point, the processing of the first entry B<b>1</b> in log B is complete.</p><p id="p-0056" num="0044">The second entry B<b>2</b> in log B is then processed. The second entry describes the renaming of &#x201c;file1&#x201d; to &#x201c;res1&#x201d; and the movement of the file from workdir/ to res/. Here, referring to <figref idref="DRAWINGS">FIG. <b>4</b><i>b</i></figref>, the existence of file1 is inferred because log B does not include the event that created file1. As such, a shadow node <b>404</b> for file1 is inserted in the DAG having the key for file1 as recorded in the entry (key=2) and a default version of 0 (v=0).</p><p id="p-0057" num="0045">In order to represent the movement of file1 from workdir/ to res/, an unlink node <b>405</b> is inserted in the DAG to represent file1's removal from workdir/ and a link node <b>406</b> is inserted into the DAG to represent file1's insertion beneath res/. Notably, the version for workdir/ as recorded in the entry is v=4 which is one increment above the version of workdir/ after res/ was created and placed beneath it (entry B<b>1</b>). As such, a flow is added that flows directly from node <b>403</b> to node <b>404</b>. That is, nodes that contain versions of a same item/key (in this case, workdir/ having key k=1) are connected by a flow from lesser version number to higher version number.</p><p id="p-0058" num="0046">To reflect the name change of the file and its movement into res/, an event node <b>407</b> is inserted for the name change (RNM) between the shadow node <b>404</b> for file1 and the link node <b>406</b> that inserts res1 beneath res/. The name change node <b>407</b> contains the new version of the file as recorded in entry B<b>2</b> (v=3). The link node <b>406</b> contains the key (k=3) of the parent directory (res/) and its version after the file res1 in inserted beneath it (v_p=2). Because nodes <b>406</b> and <b>401</b> describe versions of the same item/key (directory res/ having key k=3) where node <b>401</b> has the lesser version and node <b>406</b> has the higher version, a flow is created from node <b>401</b> to node <b>406</b>. At this point the processing of the second log entry is complete.</p><p id="p-0059" num="0047">The third entry B<b>3</b> of log B describes the creation of the &#x201c;files&#x201d; file and its placement under the res/ directory. Here, referring to <figref idref="DRAWINGS">FIG. <b>4</b><i>c</i></figref>, because the log describes the actual creation of the file, a true creation node <b>408</b> (not a shadow node) is inserted into the DAG with the key number and version for the file as specified in the entry (key=5, v=1). A link node <b>409</b> that represents the insertion of &#x201c;files&#x201d; beneath res/ is also inserted into the DAG having the new version number (v_p=3) for the res/ parent directory (k_p=3). The &#x201c;files&#x201d; node <b>408</b> flows into the link node <b>409</b> to represent the placing of files beneath res/. Because the version of res/ in node <b>409</b> is higher than the version of res/ in node <b>406</b>, a direct flow from node <b>406</b> to node <b>409</b> is also added to the DAG.</p><p id="p-0060" num="0048">The fourth entry B<b>4</b> of log B describes the modification made to &#x201c;files&#x201d;. Here, as observed in <figref idref="DRAWINGS">FIG. <b>4</b><i>d</i></figref>, a node <b>410</b> is created and entered to the DAG that represents the modification. The node includes the incremented version for &#x201c;files&#x201d; as contained in the B<b>4</b> entry (v=2). A flow is therefore added that flows from the creation node <b>408</b> to the modification node <b>410</b>.</p><p id="p-0061" num="0049">The fifth entry B<b>5</b> of log B describes the removal of &#x201c;file2&#x201d; from workdir/. Here, as observed in <figref idref="DRAWINGS">FIG. <b>4</b><i>e</i></figref>, because log B does not include an entry for the creation of &#x201c;file2&#x201d;, a shadow node <b>411</b> is inserted in the DAG to represent the existence of &#x201c;file2&#x201d;. The node includes file2's key as specified in the B<b>5</b> entry (k=4) and a default version of 0.</p><p id="p-0062" num="0050">To represent the removal of file2 from workdir/, an unlink node <b>412</b> is added to the DAG and the file2 shadow node <b>411</b> flows into the un-link node <b>412</b>. Notably, the version of workdir/ as reflected in the B<b>5</b> log entry (v_p=6) is less than the version within node <b>405</b> (v_p=4, which reflects the change made to workdir/ when &#x201c;file1&#x201d; is removed from beneath it). As such, a flow is drawn from node <b>405</b> to node <b>412</b>. Finally, even though file2 was removed from workdir/, file2 was not deleted. As such, the DAG reflects both the existence of file2 (node <b>411</b>) and its lack of being underneath any directory (node <b>411</b> flows into an un-link node <b>412</b> and does not flow into any link node).</p><p id="p-0063" num="0051">At this point the processing of the log B is complete and log A is next processed. The first event A<b>1</b> in log A describes the creation of workdir/. As such, as observed in <figref idref="DRAWINGS">FIG. <b>4</b><i>f</i></figref>, the shadow node <b>404</b> that was put in place for workdir/ is removed and a node <b>413</b> that represents the actual creation of workdir/ is inserted in its place with key=1 and version=1 as described in the A<b>1</b> log entry.</p><p id="p-0064" num="0052">The next entry A<b>2</b> in log A describes the creation of file1 and its insertion beneath workdir/. As such, referring to <figref idref="DRAWINGS">FIG. <b>4</b><i>g</i></figref>, the shadow node <b>404</b> that was put in place for file1 is removed and is replaced by the actual creation node <b>414</b> for file1 having key=2 and version=1 as specified in the A<b>2</b> entry. A link event <b>415</b> is also added to reflect the insertion of file1 beneath workdir/. Node <b>414</b> therefore flows into node <b>415</b>. As articulated in the A<b>2</b> log entry, the version of workdir/ is v=2 after the insertion of file1. As such, a flow is drawn from node <b>413</b> (workdir/ v=1) to node <b>415</b> in the DAG. Moreover, with node <b>415</b> having v=2 for workdir/ and node <b>403</b> having v=3 for workdir/, a flow is drawn from node <b>415</b> to node <b>403</b>.</p><p id="p-0065" num="0053">The next entry A<b>3</b> in log A is a write to file1. As such, referring to <figref idref="DRAWINGS">FIG. <b>4</b><i>h</i></figref>, a node <b>415</b> is added to the DAG to represent the write which results in file1 having version v=2 as specified in the A<b>3</b> entry. As such, the newly added node is inserted with corresponding flows between nodes <b>414</b> and <b>407</b> which represents versions v=1 and v=3 of file1.</p><p id="p-0066" num="0054">The next entry A<b>4</b> in log A is the creation of file2 and its inclusion beneath workdir/. Referring to <figref idref="DRAWINGS">FIG. <b>4</b><i>i</i></figref>, the shadow node <b>411</b> that was originally created for file2 is replaced with an actual creation node <b>416</b> having key=4 and version v=1. As specified in the A<b>4</b> entry, the inclusion of file2 beneath workdir/ corresponds to the 5<sup>th </sup>version of workdir/. As such the link node <b>417</b> that is added to the DAG to represent the inclusion of file2 beneath workdir/ is inserted between nodes <b>405</b> and <b>412</b> with corresponding flows.</p><p id="p-0067" num="0055">The last entry A<b>5</b> of log A is a modification to file2 which increments the version of file2 from v=1 to v=2. As such, referring to <figref idref="DRAWINGS">FIG. <b>4</b><i>j</i></figref>, a flow from file2's creation node <b>416</b> to the new modification node <b>418</b> is inserted into the DAG.</p><p id="p-0068" num="0056">Although not addressed in the above example, in the case of the deletion of an item, in various embodiments, the version of the item is incremented in the log entry that describes the deletion. A deletion node is inserted into to the DAG for the item and receives a flow consistent with its version number (which should be its highest version number that terminates its flow). For example, if file2 were subsequently deleted, a node would be added to the DAG that describes the deletion and receives a flow from node <b>418</b>.</p><p id="p-0069" num="0057">Moreover, in the above example each file and directory item that was processed was also newly created. In other scenarios changes are made to an item that was created a long time ago and thus its creation event is not processed in the collection of log entries. In this case the shadow node remains in the completed DAG. The presence of the shadow node signifies to the system that the object for the item already exists in the object storage system and need not be created (the change(s) can be made directly to it).</p><p id="p-0070" num="0058">In additional embodiments, attributes (e.g., time of last access, time of last write, permissions, etc.) are also kept for directories and/or files. The attributes are essentially additional files that are associated with their respective directory/file (e.g., have overlapping directory path). In various embodiments, log entries record changes made to attributes (e.g., by the storage system or storage system manager) no differently than user files or directories and are likewise mapped to a DAG no differently than user files or directories.</p><p id="p-0071" num="0059"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a flow diagram for a DAG construction process that is consistent with the example discussed above. As observed in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, after a log amongst multiple logs has been selected, an entry from the chosen log is selected and the item(s) (e.g., directory items and/or file items) that are acted upon by the entry are identified <b>501</b>. If there is no existing node in the DAG for any of the item(s), a respective shadow node is created for such item(s) <b>502</b> (unless the log entry being processed includes the creation of the item(s)).</p><p id="p-0072" num="0060">If an item is created in the entry being processed, a node that describes the creation having the item's key and its initial version value is inserted into the DAG <b>503</b>. If an item is deleted in the entry being processed, a node that describes the item's deletion is inserted into the DAG having the item's key and its version number as recorded in the entry <b>503</b>.</p><p id="p-0073" num="0061">If the content of an item is modified (such as a file, the attributes of a file or the attributes of a directory), a node that indicates the item was modified is inserted into the DAG having the item's key and version number as recorded in the entry <b>504</b>.</p><p id="p-0074" num="0062">If an item is inserted beneath a parent directory, a linking node is added to the DAG having the parent directory's key and version number after the item's insertion as recorded in the entry <b>505</b>. If an item is removed from beneath a parent directory, an un-linking node is added to the DAG having the parent directory's key and version number after the item's insertion as recorded in the entry <b>505</b>.</p><p id="p-0075" num="0063">After all nodes have been added to the DAG, flows are drawn to connect nodes having same keys in correct version order (from lower version number to higher version number). Linking and un-linking nodes not only receive/emanate flows for the respective parent directory but also receive flows from the item being inserted/removed from beneath the parent directory.</p><heading id="h-0008" level="1">iv. Synthesis into Reduced Set of Changes and Application to Object Storage System</heading><p id="p-0076" num="0064">Referring back to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, after the DAG has been constructed from the log entries <b>202</b>, it is synthesized into a reduced set of changes <b>203</b> and the changes are then applied to the object storage system <b>204</b>. Referring briefly back to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the synthesis can be performed by the same logic <b>106</b> that collects log entries and constructs a DAG from them. This same logic can also apply the changes or other orchestrate them.</p><p id="p-0077" num="0065">Here, referring to back to <figref idref="DRAWINGS">FIG. <b>4</b><i>j</i></figref>, note that the sequences of changes made directly beneath a directory can be understood by following the flow of linking and unlink nodes having a same parent directory key value. For example, the sequence of changes made directly beneath workdir/ is described by the sequence of nodes <b>415</b>, <b>403</b>, <b>405</b>, <b>417</b> and <b>412</b>. Likewise, the sequence of changes made directly beneath res/ is described by the sequence of nodes <b>406</b> and <b>409</b>. The flows commence from the creation node of their respective directory (node <b>413</b> for workdir/ and node <b>401</b> for res/).</p><p id="p-0078" num="0066">By contrast, the sequence of changes made to any file item can be understood by following the flow of nodes having the file's key. For example, the flow of changes made to file1 is described by the sequence of nodes <b>415</b>, <b>417</b>. Likewise, the flow of changes made to files is described by node <b>410</b> and file2 by node <b>418</b>. As with directories, the flows commence from the creation node of their respective file (node <b>414</b> for file1, node <b>408</b> for files and node <b>416</b> for file2.</p><p id="p-0079" num="0067">The DAG can therefore be synthesized into a reduced set of changes by eliminating ultimately irrelevant changes made along the flow for a particular directory or file. Here, according to one embodiment, ultimately irrelevant changes can correspond to: 1) the linking and then subsequent un-linking of a same item from beneath a directory; 2) all content modifications made to a file before its most recent modification (the version of the file after the most recent modification would include all previous changes made to the file); 3) all name changes made to a file or directory before its most recent name change; 4) all content modifications made to a file and all name changes made to a file or directory prior to its deletion.</p><p id="p-0080" num="0068">Only scenario <b>1</b>) above is applicable to the DAG of <figref idref="DRAWINGS">FIG. <b>4</b><i>j</i></figref>. Specifically, scenario <b>1</b>) above applies to link and un-link nodal pair <b>417</b>, <b>412</b> and by link and un-link nodal pair <b>415</b>, <b>405</b>. As such, nodes <b>417</b>, <b>412</b>, <b>415</b> and <b>405</b> can be removed from the DAG (with the respective flow of each removed node being modified to connect the removed node's immediately prior node and immediately subsequent node). The resultant DAG is shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0081" num="0069">Notably, separate flows exist for each of the directories and files. As such, changes to be made to any particular directory or file can be readily defined by analyzing the flow whose nodes have the directory's/file's key and increment in version number. Once the set of changes are defined for a particular directory or file they are applied to the storage system consistently with the object storage system's command protocol. Depending on the particular command protocol, some changes may be grouped into a single command.</p><p id="p-0082" num="0070">Regardless, because changes can be identified for directories and files separately, they can be applied to the object storage system concurrently. That is, because they each have their own unique key, their changes can be applied in parallel without conflict.</p><p id="p-0083" num="0071">A set of changes to be applied to the object storage system is then constructed from the remaining nodes in the DAG. The precise number of object storage system commands that are generated can depend upon the specific architecture of the object storage system, the manner and/or syntax by which commands are submitted to the object storage system and/or the manner in which the file system is emulated by the object storage system (among other possible influences).</p><p id="p-0084" num="0072">Regardless, of how the changes are applied, the set of changes to be made to any file or directory is defined by the changes that are present along the flow for a particular item (the flow strings together DAG nodes having a same key value) after the irrelevant changes have been removed.</p><p id="p-0085" num="0073">The set of changes to be made to the object storage system as determined from the DAG flow for any file can include the file's creation, the file's most recent name change, and the storage of the file's most recent version to the extent the corresponding changes are present in the file's flow in the DAG. If the file is not actually created in the processed log entries, a shadow node will remain in the DAG which does not result in any action applied to the object storage system (the object that represents the file already exists in the object storage system).</p><p id="p-0086" num="0074">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in order to effect the creation of a file, a new object is stored in the object storage system <b>103</b>. In order to effect a name change of the file, a new name is recorded in the object that represents the file within the storage system. According to one approach, in order to store the most recent version of a file, the object having the most recent change is physically stored in the object storage system <b>103</b> from the connector node where the change was made (e.g., logic <b>106</b> informs the connector node to commit the object to the object storage system <b>103</b>). Here, again, the connector nodes are presumed to include caches or otherwise make changes to physical copies or representations of objects that are correctly versioned at the connector nodes <b>101</b> according to the versioning logic <b>105</b>.</p><p id="p-0087" num="0075">The set of changes to be made to the object storage system as determined from the DAG flow for any directory can include the directory's creation, the directory's most recent name change, each new insertion of an item that was not subsequently removed and each new removal of an item that was not subsequently inserted. If the directory is not actually created in the processed log entries, a shadow node will remain in the DAG which does not result in any action applied to the object storage system (the object that represents the directory already exists in the object storage system).</p><p id="p-0088" num="0076">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in order to effect the creation of a directory, a new object is stored in the object storage system <b>103</b>. In order to effect a name change of a directory, a new name is recorded in the object that represents the directory within the storage system.</p><p id="p-0089" num="0077">In various embodiments, the object that represents a directory within the object storage system <b>103</b> includes one or more pages (e.g., text documents) that lists the items (files and sub-directories) that are directly beneath the directory within the file system. As such, new insertions of files or sub-directories beneath a directory are effected by adding them to the list in the object that represents the directory. Likewise, new removals of files or sub-directories from beneath a directory are effected by deleting them from the list in the object that represents the directory.</p><p id="p-0090" num="0078">Referring to the reduced DAG of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, assuming all changes to be made for a single file can be made in a single command, the following changes will be made:</p><p id="p-0091" num="0079">1. store a new file object having key=2, name=&#x201c;res1&#x201d; and the content of the v=2 version of file1 (consolidation of nodes <b>414</b>, <b>415</b>, <b>407</b>);</p><p id="p-0092" num="0080">2. store a new file object having key=4, name=&#x201c;file2&#x201d; and the content of the v=2 version of file <b>2</b> (consolidation of nodes <b>416</b>, <b>418</b>);</p><p id="p-0093" num="0081">3. store a new file object having key=5, name=&#x201c;files&#x201d; and the content of the v=2 version of files (consolidation of nodes <b>408</b>, <b>410</b>);</p><p id="p-0094" num="0082">4. create a new directory workdir/ beneath the root directory;</p><p id="p-0095" num="0083">5. create a new directory res/ beneath workdir/</p><p id="p-0096" num="0084">6. store the &#x201c;res1&#x201d; and &#x201c;files&#x201d; file objects beneath res/.</p><p id="p-0097" num="0085">Although the description above has emphasized a collection of basic actions that can be made to a file or directory and their representations in the log entries and the DAG, other embodiments may describe more complicated &#x201c;macro&#x201d; actions that, e.g., are a collection of such actions. For example, a single action, log entry and DAG node may be constructed for a directory insertion that includes a change of the name of the item that is being inserted.</p><heading id="h-0009" level="1">v. Closing Comments</heading><p id="p-0098" num="0086">Referring back to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, any of the log logic <b>104</b>, the versioning logic <b>105</b> and the DAG construction, synthesis and change application logic <b>106</b> can be implemented as software programs that execute on a respective computing system such as a computer. Here, for example, each of connector nodes <b>101</b>_<b>1</b> through <b>101</b>_N can be implemented as one or more computers having the connector node logic, including the local log function <b>104</b> and the distributed locking function <b>105</b>, implemented as one or more software programs that execute on the one or more computers. In various other implementations, the connector node logic is partially or wholly implemented in hardware.</p><p id="p-0099" num="0087">Likewise, centralizing node <b>106</b> that collects logs, processes the logs into DAGs and then synthesizes the DAGs can be implemented as one or more software programs executing on one or more computers. The object storage system <b>103</b> can be implemented with one or more computers having non volatile storage media and software to execute functions of the object storage system.</p><p id="p-0100" num="0088">Network <b>102</b> can be implemented as one or more networks such as any/all of one or more private networks and/or one or more public networks (such as the Internet). Network <b>102</b> can also be implemented with one or more local area networks, metropolitan area networks and/or wide area networks.</p><p id="p-0101" num="0089"><figref idref="DRAWINGS">FIG. <b>7</b></figref> provides an exemplary depiction of a computing system <b>700</b> or computer such as any of the computers mentioned just above. As such, any of the aforementioned cloud services can be constructed, e.g., from networked clusters of computers having at least some of the components described below and/or networked clusters of such components.</p><p id="p-0102" num="0090">As observed in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the basic computing system/computer <b>700</b> may include a central processing unit (CPU) <b>701</b> (which may include, e.g., a plurality of general purpose processing cores <b>715</b>_<b>1</b> through <b>715</b>_X) and a main memory controller <b>717</b> disposed on a multi-core processor or applications processor, main memory <b>702</b> (also referred to as &#x201c;system memory&#x201d;), a local wired point-to-point link (e.g., universal serial bus (USB)) interface <b>704</b>, a peripheral control hub (PCH) <b>718</b>; various network I/O functions <b>705</b> (such as an Ethernet interface and/or cellular modem subsystem), a wireless local area network (e.g., WiFi) interface <b>706</b>, a wireless point-to-point link (e.g., Bluetooth) interface <b>707</b> and a Global Positioning System interface <b>708</b>, various sensors <b>709</b>_<b>1</b> through <b>709</b>_Y, a battery <b>711</b>, a power management control unit <b>712</b>, a speaker and microphone <b>713</b> and an audio coder/decoder <b>714</b>.</p><p id="p-0103" num="0091">An applications processor or multi-core processor <b>750</b> may include one or more general purpose processing cores <b>715</b> within its CPU <b>701</b>, one or more graphical processing units <b>716</b>, a main memory controller <b>717</b> and a peripheral control hub (PCH) <b>718</b> (also referred to as I/O controller and the like). The general purpose processing cores <b>715</b> typically execute the operating system and application software of the computing system. The graphics processing unit <b>716</b> typically executes graphics intensive functions to, e.g., generate graphics information that is presented on a display. The main memory controller <b>717</b> interfaces with the main memory <b>702</b> to write/read data to/from main memory <b>702</b>. The power management control unit <b>712</b> generally controls the power consumption of the system <b>700</b>. The peripheral control hub <b>718</b> manages communications between the computer's processors and memory and the I/O (peripheral) devices.</p><p id="p-0104" num="0092">Each of the communication interfaces <b>704</b>-<b>707</b>, the GPS interface <b>708</b>, the sensors <b>709</b>, and the speaker/microphone codec <b>713</b>, <b>714</b> all can be viewed as various forms of I/O (input and/or output) relative to the overall computing system including, where appropriate, an integrated peripheral device as well. Depending on implementation, various ones of these 1/O components may be integrated on the applications processor/multi-core processor <b>750</b> or may be located off the die or outside the package of the applications processor/multi-core processor <b>750</b>. The computing system also includes non-volatile mass storage <b>720</b> which may be the mass storage component of the system. The non-volatile mass storage <b>720</b> may be implemented with one or more solid state drives (SSDs), hard disk drive (HDDs), etc.</p><p id="p-0105" num="0093">Embodiments of the invention may include various processes as set forth above. The processes may be embodied in program code (e.g., machine-executable instructions). The program code, when processed, causes a general-purpose or special-purpose processor to perform the program code's processes. Alternatively, these processes may be performed by specific/custom hardware components that contain hard interconnected logic circuitry (e.g., application specific integrated circuit (ASIC) logic circuitry) or programmable logic circuitry (e.g., field programmable gate array (FPGA) logic circuitry, programmable logic device (PLD) logic circuitry) for performing the processes, or by any combination of program code and logic circuitry.</p><p id="p-0106" num="0094">Elements of the present invention may also be provided as a machine-readable storage medium for storing the program code. The machine-readable medium can include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, FLASH memory, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards or other type of media/machine-readable medium suitable for storing electronic instructions. The program code is to be executed by one or more computers.</p><p id="p-0107" num="0095">In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>receiving logs from multiple connector nodes, each of the logs having entries that describe changes made to a file system at its respective one of the connector nodes;</claim-text><claim-text>constructing a directed acyclic graph (DAG) from the logs' respective entries, the DAG comprising nodes connected by flows, the nodes describing actions made to directories and files of the file system, wherein, a flow of the flows connects a subset of the nodes that describe actions made to a particular directory or file of the file system;</claim-text><claim-text>removing one or more irrelevant nodes from the DAG; and,</claim-text><claim-text>applying actions described by remaining nodes of the DAG to an object storage system having respective objects for directories and files of the file system.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the subset of nodes each include a same key value, the key being a unique identifier to the object storage system of the particular directory or file of the file system, the version.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref> wherein the subset of nodes each include a different version number, the sequence of the subset of nodes within the flow arranged in version number order.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein a respective subset of the entries that generated the subset of nodes each include the same key value.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the DAG comprises linking nodes that represent the insertion of files and/or directories beneath their parent directories, each linking node receiving a first flow that represents a corresponding parent directory and a second flow that represents a corresponding file or directory that is being inserted beneath the corresponding parent directory.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the DAG comprises un-linking nodes that represent the removal of files and/or directories from beneath their parent directories, each un-linking node receiving a first flow that represents a corresponding parent directory and a second flow that represents a corresponding file or directory that is being removed from beneath the corresponding parent directory.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the one or more irrelevant nodes comprise a first node that represents removal of a first file or directory from a parent directory and a second that represents insertion of the first file or directory into the parent directory.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> wherein the one or more irrelevant nodes comprise a node that represents a change made to a file other than a most recent change made to the file.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. One or more machine readable storage media having program code stored thereon, the program code to perform a method when performed by one or more computers, the method comprising:<claim-text>receiving logs from multiple connector nodes, each of the logs having entries that describe changes made to a file system at its respective one of the connector nodes;</claim-text><claim-text>constructing a directed acyclic graph (DAG) from the logs' respective entries, the DAG comprising nodes connected by flows, the nodes describing actions made to directories and files of the file system, wherein, a flow of the flows connects a subset of the nodes that describe actions made to a particular directory or file of the file system;</claim-text><claim-text>removing one or more irrelevant nodes from the DAG; and,</claim-text><claim-text>applying actions described by remaining nodes of the DAG to an object storage system having respective objects for directories and files of the file system.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the subset of nodes each include a same key value, the key being a unique identifier to the object storage system of the particular directory or file of the file system, the version.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00010">claim 10</claim-ref> wherein the subset of nodes each include a different version number, the sequence of the subset of nodes within the flow arranged in version number order.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein a respective subset of the entries that generated the subset of nodes each include the same key value.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the DAG comprises linking nodes that represent the insertion of files and/or directories beneath their parent directories, each linking node receiving a first flow that represents a corresponding parent directory and a second flow that represents a corresponding file or directory that is being inserted beneath the corresponding parent directory.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the DAG comprises un-linking nodes that represent the removal of files and/or directories from beneath their parent directories, each un-linking node receiving a first flow that represents a corresponding parent directory and a second flow that represents a corresponding file or directory that is being removed from beneath the corresponding parent directory.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the one or more irrelevant nodes comprise a first node that represents removal of a first file or directory from a parent directory and a second that represents insertion of the first file or directory into the parent directory.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The one or more machine readable storage media of <claim-ref idref="CLM-00009">claim 9</claim-ref> wherein the one or more irrelevant nodes comprise a node that represents a change made to a file other than a most recent change made to the file.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. One or more computers, the one or more computers having respective processors, memory and storage media, the storage media containing program code that when processed by the respective processors causes a method to be performed, the method comprising:<claim-text>receiving logs from multiple connector nodes, each of the logs having entries that describe changes made to a file system at its respective one of the connector nodes;</claim-text><claim-text>constructing a directed acyclic graph (DAG) from the logs' respective entries, the DAG comprising nodes connected by flows, the nodes describing actions made to directories and files of the file system, wherein, a flow of the flows connects a subset of the nodes that describe actions made to a particular directory or file of the file system;</claim-text><claim-text>removing one or more irrelevant nodes from the DAG; and,</claim-text><claim-text>applying actions described by remaining nodes of the DAG to an object storage system having respective objects for directories and files of the file system.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The one or more computers of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the subset of nodes each include a same key value, the key being a unique identifier to the object storage system of the particular directory or file of the file system, the version.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The one or more computers of <claim-ref idref="CLM-00018">claim 18</claim-ref> wherein the subset of nodes each include a different version number, the sequence of the subset of nodes within the flow arranged in version number order.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The one or more computers of <claim-ref idref="CLM-00017">claim 17</claim-ref> wherein the DAG comprises linking nodes that represent the insertion of files and/or directories beneath their parent directories, each linking node receiving a first flow that represents a corresponding parent directory and a second flow that represents a corresponding file or directory that is being inserted beneath the corresponding parent directory.</claim-text></claim></claims></us-patent-application>