<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004659A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004659</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17930648</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>60</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>295</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>955</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>52</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>403</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1074</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>306</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>604</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6218</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>104</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20200101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>40</main-group><subgroup>295</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9566</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>52</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>105</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>403</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1078</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>51</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1097</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0861</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>102</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1416</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>1095</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>306</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6245</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1408</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1425</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>101</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">COLLECTION FOLDER FOR COLLECTING FILE SUBMISSIONS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17538860</doc-number><date>20211130</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11475144</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17930648</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17123788</doc-number><date>20201216</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11244062</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17538860</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16506313</doc-number><date>20190709</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10885210</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17123788</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16149027</doc-number><date>20181001</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10599858</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16506313</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>14961287</doc-number><date>20151207</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10089479</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16149027</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62149338</doc-number><date>20150417</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Dropbox, Inc.</orgname><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Mindy</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Piyush</last-name><first-name>Pranav</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A content management system for collecting files from one or more authenticated submitters in a collection folder. A collector, who generates the collection folder, can invite one or more submitters to submit one or more files to the collection folder. The one or more submitters have limited rights to the collection folder. The limited rights can include uploading rights and prohibiting a submitter from viewing files that other submitters associated with the collection folder submitted. Thus, the collection folder is able to store files from the one or more submitters, but prevent them from viewing other's submissions.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="234.95mm" wi="144.36mm" file="US20230004659A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="250.36mm" wi="146.64mm" file="US20230004659A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="223.77mm" wi="158.75mm" file="US20230004659A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="243.50mm" wi="166.12mm" file="US20230004659A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="238.84mm" wi="168.40mm" file="US20230004659A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="195.33mm" wi="153.59mm" file="US20230004659A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="242.23mm" wi="163.91mm" file="US20230004659A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="188.47mm" wi="142.58mm" file="US20230004659A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="188.98mm" wi="112.61mm" file="US20230004659A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="211.67mm" wi="149.86mm" orientation="landscape" file="US20230004659A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="251.38mm" wi="166.54mm" file="US20230004659A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="211.67mm" wi="149.86mm" orientation="landscape" file="US20230004659A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="222.25mm" wi="165.27mm" file="US20230004659A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="246.21mm" wi="159.60mm" orientation="landscape" file="US20230004659A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="175.01mm" wi="82.63mm" file="US20230004659A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="212.17mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="212.77mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="212.17mm" wi="149.78mm" orientation="landscape" file="US20230004659A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="212.17mm" wi="150.20mm" orientation="landscape" file="US20230004659A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00042" num="00042"><img id="EMI-D00042" he="212.51mm" wi="149.78mm" orientation="landscape" file="US20230004659A1-20230105-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00043" num="00043"><img id="EMI-D00043" he="181.02mm" wi="72.64mm" file="US20230004659A1-20230105-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00044" num="00044"><img id="EMI-D00044" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00045" num="00045"><img id="EMI-D00045" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00046" num="00046"><img id="EMI-D00046" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00046.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00047" num="00047"><img id="EMI-D00047" he="157.31mm" wi="113.45mm" file="US20230004659A1-20230105-D00047.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00048" num="00048"><img id="EMI-D00048" he="246.21mm" wi="159.60mm" orientation="landscape" file="US20230004659A1-20230105-D00048.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00049" num="00049"><img id="EMI-D00049" he="160.27mm" wi="79.08mm" file="US20230004659A1-20230105-D00049.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00050" num="00050"><img id="EMI-D00050" he="246.21mm" wi="159.60mm" orientation="landscape" file="US20230004659A1-20230105-D00050.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00051" num="00051"><img id="EMI-D00051" he="166.45mm" wi="118.96mm" file="US20230004659A1-20230105-D00051.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00052" num="00052"><img id="EMI-D00052" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00052.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00053" num="00053"><img id="EMI-D00053" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00053.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00054" num="00054"><img id="EMI-D00054" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00054.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00055" num="00055"><img id="EMI-D00055" he="169.50mm" wi="97.62mm" file="US20230004659A1-20230105-D00055.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00056" num="00056"><img id="EMI-D00056" he="246.21mm" wi="159.60mm" orientation="landscape" file="US20230004659A1-20230105-D00056.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00057" num="00057"><img id="EMI-D00057" he="223.18mm" wi="138.94mm" file="US20230004659A1-20230105-D00057.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00058" num="00058"><img id="EMI-D00058" he="246.21mm" wi="164.08mm" orientation="landscape" file="US20230004659A1-20230105-D00058.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00059" num="00059"><img id="EMI-D00059" he="246.21mm" wi="164.00mm" orientation="landscape" file="US20230004659A1-20230105-D00059.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00060" num="00060"><img id="EMI-D00060" he="246.21mm" wi="164.00mm" orientation="landscape" file="US20230004659A1-20230105-D00060.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00061" num="00061"><img id="EMI-D00061" he="246.21mm" wi="166.62mm" orientation="landscape" file="US20230004659A1-20230105-D00061.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00062" num="00062"><img id="EMI-D00062" he="246.21mm" wi="166.62mm" orientation="landscape" file="US20230004659A1-20230105-D00062.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00063" num="00063"><img id="EMI-D00063" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00063.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00064" num="00064"><img id="EMI-D00064" he="246.21mm" wi="166.62mm" orientation="landscape" file="US20230004659A1-20230105-D00064.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00065" num="00065"><img id="EMI-D00065" he="246.21mm" wi="162.22mm" orientation="landscape" file="US20230004659A1-20230105-D00065.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00066" num="00066"><img id="EMI-D00066" he="246.21mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00066.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00067" num="00067"><img id="EMI-D00067" he="233.43mm" wi="147.57mm" file="US20230004659A1-20230105-D00067.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00068" num="00068"><img id="EMI-D00068" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00068.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00069" num="00069"><img id="EMI-D00069" he="194.31mm" wi="114.22mm" file="US20230004659A1-20230105-D00069.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00070" num="00070"><img id="EMI-D00070" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00070.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00071" num="00071"><img id="EMI-D00071" he="246.13mm" wi="165.86mm" orientation="landscape" file="US20230004659A1-20230105-D00071.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00072" num="00072"><img id="EMI-D00072" he="201.17mm" wi="165.61mm" orientation="landscape" file="US20230004659A1-20230105-D00072.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/538,860, filed Nov. 30, 2021 which is a continuation of U.S. patent application Ser. No. 17/123,788, filed Dec. 16, 2020 issued as U.S. Pat. No. 11,244,062, which is a continuation of U.S. patent application Ser. No. 16/506,313, filed Jul. 9, 2019 issued as U.S. Pat. No. 10,885,210, which is a continuation of U.S. patent application Ser. No. 16/149,027, filed Oct. 1, 2018 issued as U.S. Pat. No. 10,599,858, which is a continuation of U.S. patent application Ser. No. 14/961,287, filed Dec. 7, 2015 which issued as U.S. Pat. No. 10,089,479, which claims the benefit of U.S. Provisional Application 62/149,338, filed Apr. 17, 2015. Each of the aforementioned applications are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present technology pertains to collecting files over a network, and more specifically pertains to a collection folder for collecting file submissions in which a submitter can only view his or her submission.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Conventional online storage systems provide online storage folders that can collect files from users. In such systems, a user who is invited and receives access to an online storage folder has access to all of the files in the online storage folder. For example, a teacher can provide students access to an online storage folder with each student having access to all of the files in the online storage folder. Thus, if the students submit homework to the online storage folder, each student has access to homework previously submitted by other students. To avoid, such a problem, the teacher can provide a single folder for each student. Such a scenario can create additional overhead and requires the teacher to access each folder to review each student's homework.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">Additional features and advantages of the disclosure will be set forth in the description which follows, and in part will be obvious from the description, or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims, or can be learned by the practice of the principles set forth herein.</p><p id="p-0006" num="0005">Disclosed are systems, methods, and non-transitory computer-readable storage media for collecting files in a collection folder in a user account in a content management system. The disclosed technology addresses the need in the art for a collector to collect files in one location from one or more submitters with less overhead and without requiring the collector to access individual folders to review each submitter's files. The solution allows for the collection of files in one collection folder. In addition, the submitter has limited rights which unlike conventional collection systems, prohibits the submitter from accessing and viewing files from other submitters.</p><p id="p-0007" num="0006">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to customize a file request. When creating a file request a user interface (UI) can allow a collector to set parameters for controlling what and/or how a submission can be submitted. The disclosed technology addresses the need in the art for a collector to dictate or customize their file request in order to receive submissions that conform with the customized file request.</p><p id="p-0008" num="0007">Disclosed are systems, methods and non-transitory computer-readable storage media for providing a commenting interface enabling a submitter and/or collector to add a comment associated with a submitted file. The commenting interface allows a submitter and/or collector to share one or more comments with the other. The disclosed technology addresses the need in the art for allowing a submitter and/or collector to comment on a submission that was submitted in response to a file request.</p><p id="p-0009" num="0008">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to use a public file request, such as a file request posted on a social network. The disclosed technology addresses the need in the art for allowing a collector to reach a larger audience rather than only the one or more submitters that receive an email message with a file request link.</p><p id="p-0010" num="0009">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to have a submissions scanned for malicious content. By using a malicious content detection feature, each submission can be scanned for malicious content prior to the collector having access to the submission. The disclosed technology addresses the need in the art for preventing malicious content to be introduced to the content management system or a user's account and potentially causing problems.</p><p id="p-0011" num="0010">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to have submission scanned for plagiarism. By using a plagiarism detection feature, each submission can be scanned for plagiarized content and if detected, can inform the collector of the potential plagiarism. The disclosed technology addresses the need in the art for trying to ensure that a submission is the submitter's own work.</p><p id="p-0012" num="0011">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to train a facial and/or object recognition feature to tag people or objects within photographs that are submitted. By training the facial and/or object recognition module, the collector can send a token, containing the one or more tagged people and/or objects, to one or more submitters who can use the token to submit additional photographs based on the token. The disclosed technology addresses the need in the art for a collector to be able to collect additional photographs from one or more submitters.</p><p id="p-0013" num="0012">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to request photos in one folder. By using a photo file request, submitters are able to submit photos in response to the photo file request. The disclosed technology addresses the need in the art for a collector to be able to collect photos from one or more submitters and have all of the photos stored in one collection folder.</p><p id="p-0014" num="0013">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing an administrator to monitor, view and control file requests/collection folders associated with an enterprise. By using administrator controls and dashboards, an administrator can monitor, view and control file submissions and control the privileges of collectors and submitters with respect to the file requests. The disclosed technology addresses the need in the art for an administrator to control, view and monitor people in their enterprise and their use of the file request feature.</p><p id="p-0015" num="0014">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to use email to collect submissions in response to a file request. By using email rather than a file request link, one or more submitters can reply to an email request for a file request rather than having to access a website to upload one or more files. The disclosed technology addresses the need in the art for a collector to provide an alternate manner to obtain file submissions other than via a file request link.</p><p id="p-0016" num="0015">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing a collector to share submissions with the one or more submitters and/or others in response to a file request. By using a close and publish feature, the collector is able to share submissions with the one or more submitters and/or others once the submissions are deemed to be complete. The disclosed technology addresses the need in the art for a collector to collect submissions and once collected, to share the submissions with the one or more submitters and/or others.</p><p id="p-0017" num="0016">Disclosed are systems, methods and non-transitory computer-readable storage media for allowing additional roles other than a collector and submitter role. By allowing a viewer access to the collection folder, a viewer is able to monitor a submitter's submission or submissions to ensure that the submitter responded to a file request. The disclosed technology addresses the need in the art for supervision of a submitter in responding to a file request, such as a parent or other-members of a team when the submitter is acting on behalf of the team.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0018" num="0017">The above-recited and other advantages and features of the disclosure will become apparent by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only exemplary embodiments of the disclosure and are not therefore to be considered to be limiting of its scope, the principles herein are described and explained with additional specificity and detail through the use of the accompanying drawings in which:</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a configuration of devices and a network in accordance with an exemplary embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a block diagram of the components of a link based collection module in accordance with an exemplary embodiment;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram of the components of a malicious content detection system in accordance with an exemplary embodiment;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart for a method for generating a collection folder in accordance with an exemplary embodiment;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is a homepage UI for an empty user's account in accordance with an exemplary embodiment;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> is a homepage UI for a non-empty user's account in accordance with an exemplary embodiment;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is an initial homepage UI for creating a collection folder in accordance with an exemplary embodiment;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is an initial homepage UI for creating a collection folder with a &#x201c;create new file request&#x201d; button being selected in accordance with an exemplary embodiment;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart for a method for rendering prompts requesting information from the collector in accordance with an exemplary embodiment;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref> is an initial UI rendering prompts in accordance with an exemplary embodiment;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>7</b>B</figref> is a customization UI in accordance with an exemplary embodiment;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>7</b>C</figref> is a file listing UI displaying files that the collector can choose for white labeling in accordance with an exemplary embodiment;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>7</b>D</figref> is a UI displaying template files in accordance with an exemplary embodiment;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, is a submitter invite UI in accordance with an exemplary embodiment;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>8</b>B</figref> is a second submitter invite UI in accordance with an exemplary embodiment;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> is a file upload UI in accordance with an exemplary embodiment;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> is a flowchart for a method for storing an uploaded file in a collection folder in accordance with an exemplary embodiment;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart for a method for scanning one or more uploaded files in accordance with an exemplary embodiment;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart for a method for detecting plagiarism in one or more uploaded files in accordance with an exemplary embodiment;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>12</b>A</figref> is a flowchart for a method for enabling users to provide comments to a submission in accordance with an exemplary embodiment;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>12</b>B</figref> is a file listing UI listing files in a user's account in accordance with an exemplary embodiment;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>12</b>C</figref> is a viewing UI rendering a selected file in accordance with an exemplary embodiment;</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>12</b>D</figref> is a UI rendering an expanded comment section in accordance with an exemplary embodiment;</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>12</b>E</figref> is a UI rendering a comment in the expanded comment section in accordance with an exemplary embodiment;</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>12</b>F</figref> is a UI rendering a plurality of comments in the expanded comment section in accordance with an exemplary embodiment;</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>12</b>G</figref> is a UI rendering a photo with a comment in accordance with an exemplary embodiment;</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> is a flowchart for a method for enabling users to have a chat session relating to a submission in accordance with an exemplary embodiment;</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> is a UI rendering a selected file and a chat icon in accordance with an exemplary embodiment;</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>13</b>C</figref> is a UI rendering that status of contacts in accordance with an exemplary embodiment;</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>13</b>D</figref> is a UI rendering a message box in accordance with an exemplary embodiment;</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>13</b>E</figref> is a UI rendering a chat message in a chat section in accordance with an exemplary embodiment;</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>13</b>F</figref> is a UI rendering a plurality of chat messages in a chat section in accordance with an exemplary embodiment;</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>13</b>G</figref> is a save UI rendering save options in accordance with an exemplary embodiment;</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>14</b>A</figref> is a flowchart for a method for using a facial and/or object recognition on a collection folder in accordance with an exemplary embodiment;</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>14</b>B</figref> is a Create a File Request UI rendering prompts for a file request in accordance with an exemplary embodiment;</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>14</b>C</figref> is a file upload UI for uploading photos in accordance with an exemplary embodiment;</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>14</b>D</figref> is a UI rendering a list of photo folders in accordance with an exemplary embodiment;</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>14</b>E</figref> is a flowchart for a method for training recognition software in accordance with an exemplary embodiment;</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>14</b>F</figref> is a viewing UI rendering a selected photo in accordance with an exemplary embodiment;</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>14</b>G</figref> is a UI rendering a first set of recognition menu options in accordance with an exemplary embodiment;</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>14</b>H</figref> is a UI rendering prompts to identify one or more recognized faces in accordance with an exemplary embodiment;</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>14</b>I</figref> is a UI rendering a second set of recognition menu options in accordance with an exemplary embodiment;</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>14</b>J</figref> is a UI rendering a third set of recognition menu options in accordance with an exemplary embodiment;</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>15</b>A</figref> is a flowchart for a method for creating a file request trigger in accordance with an exemplary embodiment;</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>15</b>B</figref> is a menu rendering a list of menu options in accordance with an exemplary embodiment;</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>15</b>C</figref> is a menu rendering a list of email menu options in accordance with an exemplary embodiment;</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>15</b>D</figref> is a menu rendering a list of trigger email menu options in accordance with an exemplary embodiment;</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>15</b>E</figref> is a flowchart for a method for creating a file request trigger in accordance with an exemplary embodiment;</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>15</b>F</figref> is a UI rendering a prompt to create a file request in accordance with an exemplary embodiment;</p><p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. <b>16</b>A</figref> is a flowchart for a method for creating a collection email address in accordance with an exemplary embodiment;</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>16</b>B</figref> is a rendered email in accordance with an exemplary embodiment;</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>17</b>A</figref> is a flowchart for a method for publishing the contents of a collection folder in accordance with an exemplary embodiment;</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>17</b>B</figref> is a UI with a rendered publish menu option in accordance with an exemplary embodiment;</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>17</b>C</figref> is a UI rendering layout menu options in accordance with an exemplary embodiment;</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>17</b>D</figref> is a UI rendering publishing menu options in accordance with an exemplary embodiment;</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>18</b>A</figref> is a flowchart for a method for managing collection folders in accordance with an exemplary embodiment;</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>18</b>B</figref> is a third party website rendering a file request icon in accordance with an exemplary embodiment;</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>19</b>A</figref> is a flowchart for a method for managing collection folders in accordance with an exemplary embodiment;</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>19</b>B</figref> is a collection folder homepage in accordance with an exemplary embodiment;</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>19</b>C</figref> is a first submission page for generating a vacation photos collection folder in accordance with an exemplary embodiment;</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>19</b>D</figref> is a second submission pages for generating a vacation photos collection folder in accordance with an exemplary embodiment;</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>19</b>E</figref> is a collection folder homepage after the vacation photos collection folder is created in accordance with an exemplary embodiment;</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>19</b>F</figref> is a Final papers collection folder being selected in accordance with an exemplary embodiment;</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>19</b>G</figref> is an edit file request page that allows a collector to deactivate a collection folder in accordance with an exemplary embodiment;</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>19</b>H</figref> is a collection folder homepage after a Final papers collection folder is deactivated in accordance with an exemplary embodiment;</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>19</b>I</figref> is an inactive requests home page in accordance with an exemplary embodiment;</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>19</b>J</figref> is an edit file request page that allows a collector to activate a collection folder in accordance with an exemplary embodiment;</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>20</b>A</figref> is a flowchart for a method for generating an activity log in accordance with an exemplary embodiment;</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>20</b>B</figref> is a UI rendering an activity log in accordance with an exemplary embodiment;</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. <b>21</b>A</figref> is a flowchart for a method for generating an activity log in accordance with an exemplary embodiment;</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>21</b>B</figref> is a file listing UI rendering a list of files in a folder along with a status file in accordance with an exemplary embodiment;</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>21</b>C</figref> is a rendered status file in accordance with an exemplary embodiment;</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>22</b>A</figref> is a block diagram of a system for implementing various embodiments of the present technology in accordance with an exemplary embodiment; and</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>22</b>B</figref> is a block diagram of a system for implementing various embodiments of the present technology in accordance with an alternative exemplary embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION</heading><p id="p-0093" num="0092">Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed, it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.</p><p id="p-0094" num="0093">Several definitions that apply throughout this disclosure will now be presented. The term &#x201c;coupled&#x201d; is defined as connected, whether directly or indirectly through intervening components, and is not necessarily limited to physical connections. The term &#x201c;communicatively coupled&#x201d; is defined as connected, either directly or indirectly through intervening components, and the connections are not necessarily limited to physical connections, but are connections that accommodate the transfer of data between the so-described components. The terms &#x201c;comprising,&#x201d; &#x201c;including&#x201d; and &#x201c;having&#x201d; are used interchangeably in this disclosure. The terms &#x201c;comprising,&#x201d; &#x201c;including&#x201d; and &#x201c;having&#x201d; mean to include, but not necessarily be limited to the things so described. The terms &#x201c;content,&#x201d; &#x201c;content item,&#x201d; &#x201c;content items,&#x201d; &#x201c;file&#x201d; and &#x201c;files&#x201d; are used interchangeably in this disclosure. The terms &#x201c;content,&#x201d; &#x201c;content item,&#x201d; &#x201c;content items,&#x201d; &#x201c;file&#x201d; and &#x201c;files&#x201d; mean something that a user submits to the content management system for storage in a collection folder.</p><p id="p-0095" num="0094">In one or more embodiments, a content management system receives a request to generate a link to use in collecting one or more files from one or more submitters. The request can come from a user having an account with the content management system. Such a user can be referred to as a collector. The one or more submitters can have an account with the content management system, not have an account with the content management system or any combination thereof. In response to the file request, the content management system can prompt the collector by requesting a name for the file request, a name for a designated collection folder to store the collected files from the one or more submitters and an email address for each submitter. In response to receiving the information, the content management system can generate a link to the collection folder. The content management system can then distribute the generated link to the one or more submitters via email. Alternatively, the collector can distribute the generated link to the one or more submitters via email, instant message, text message, or by posting the link to a website, or any other means of distributing the link. For example, the collector can type the link or paste the link to a social media website. The one or more submitters can upload one or more files to the collection folder. The one or more submitters can have limited rights to the collection folder. The limited rights can include uploading rights, but prohibit a submitter from viewing files that other submitters associated with the collection folder submitted. Thus, the collection folder is able to store files from the one or more submitters, but prevent them from viewing submissions from others. The uploaded files can be scanned for malicious code and/or plagiarized content. In addition, the collector can activate and deactivate one or more collection folders. An activated collection folder allows submitters to submit files to the activated collection folder and a deactivated folder prohibits submitters from accessing the deactivated collection folder. A collector can access activated collection folders and deactivated collection folders.</p><p id="p-0096" num="0095">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a block diagram of a configuration of devices and a network in accordance with an exemplary embodiment is illustrated. In system <b>100</b>, electronic devices communicate via a network for purposes of exchanging content and other data. System <b>100</b> can be configured for use on a wide area network, such as the Internet. However, the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example, each of the components of system <b>100</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> can be implemented in a localized or distributed fashion in a network.</p><p id="p-0097" num="0096">In system <b>100</b>, a user can interact with content management system <b>106</b> through client devices <b>102</b><sub>1</sub>, <b>102</b><sub>2</sub>, . . . , <b>102</b><sub>n </sub>(collectively &#x201c;<b>102</b>&#x201d; and individually &#x201c;<b>102</b><sub>i</sub>&#x201d;) connected to network <b>104</b> by direct and/or indirect communication. The network <b>104</b> can be one or more communication networks such as a local area network (LAN) or other suitable communication networks (e.g., the Internet, a metropolitan area network (MAN), a wide area network (WAN) a mobile, a wire or wireless network, a private network, a virtual private network, etc.). Content management system <b>106</b> can support connections from a variety of different client devices <b>102</b>, such as desktop computers; mobile computers; mobile communications devices, e.g., mobile phones, smart phones, tablets; smart televisions; set-top boxes; and/or any other network enabled computing devices. Client devices <b>102</b> can be of varying type, capabilities, operating systems, etc. Furthermore, content management system <b>106</b> can concurrently accept connections from and interact with multiple client devices <b>102</b>.</p><p id="p-0098" num="0097">A user can interact with content management system <b>106</b> via a client-side application installed on client device <b>102</b><sub>i</sub>. In some embodiments, the client-side application can include a content management system <b>106</b> specific component. For example, the component can be a stand-alone application, one or more application plug-ins, and/or a browser extension. However, the user can also interact with content management system <b>106</b> via a third-party application, such as a web browser, that resides on client device <b>102</b>, and is configured to communicate with content management system <b>106</b>. In either case, the client-side application can present a user interface (UI) for the user to interact with content management system <b>106</b>. For example, the user can interact with content management system <b>106</b> via a client-side application integrated with the file system or via a webpage displayed using a web browser application.</p><p id="p-0099" num="0098">Content management system <b>106</b> can make it possible for a user to store files, as well as perform a variety of content management tasks, such as retrieve, modify, browse, and/or share the content depending on who the user is and/or depending on parameters associated with a folder as explained below in further detail. Furthermore, content management system <b>106</b> can make it possible for a user to access the files from multiple client devices <b>102</b>. For example, a submitter can use a client device <b>102</b>, to upload files to content management system <b>106</b> via a network <b>104</b>. The files can later be retrieved from content management system <b>106</b> using the same client device <b>102</b>, or some other client device <b>102</b><sub>j</sub>.</p><p id="p-0100" num="0099">To facilitate the various content management services, a user can create an account with content management system <b>106</b>. The account information can be maintained in user account database <b>150</b>. User account database <b>150</b> can store profile information for registered users. In some cases, the only personal information in the user profile can be a username and/or email address. However, content management system <b>106</b> can also be configured to accept additional user information. Content management system <b>106</b> can store non-account user, e.g., submitters, information in a user account database <b>150</b>, where the non-account users are associated with a user account, e.g., a collector's user account.</p><p id="p-0101" num="0100">User account database <b>150</b> can also include account management information, such as account type, e.g., free or paid; usage information, e.g., file edit history; maximum storage space authorized; storage space used; content storage locations; security settings; personal configuration settings; content sharing data; etc. Account management module <b>124</b> can be configured to update and/or obtain user account details in user account database <b>150</b>. The account management module <b>124</b> can be configured to interact with any number of other modules in content management system <b>106</b>.</p><p id="p-0102" num="0101">An account can be used to store content, such as files, digital data, documents, text files, audio files, video files, etc., from one or more client devices <b>102</b> authorized on the account. The content can also include folders or other mechanisms of grouping content items together with different behaviors, such as playlists, albums, etc. For example, an account can include a public folder that is accessible to any user. In another example, an account can include a private folder that is only accessible to a specific user and/or any the specific user authorizes. In yet another example, an account can include a collection folder that is only accessible by the account user, e.g., a collector, and anyone the account user authorizes, e.g., a submitter. Each folder can be assigned a web-accessible address. A link to the web-accessible address can be used to access the contents of the public folder, a private folder or a collection folder. In another example, an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos; an audio folder that provides the ability to play back audio files and perform other audio related actions; or other special purpose folders. The photos folder can be a public folder, a private folder or a collection folder. An account can also include shared folders, collection folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for each folder.</p><p id="p-0103" num="0102">The content can be stored in content storage <b>160</b>. Content storage <b>160</b> can be a storage device, multiple storage devices, a server or multiple servers. The storage device, multiple storage devices, server or multiple servers can be configured to perform the methods described herein. Alternatively, content storage <b>160</b> can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system <b>106</b> can hide the complexity and details from client devices <b>102</b> so that client devices <b>102</b> do not need to know exactly where the content items are being stored by content management system <b>106</b>. In one variation, content management system <b>106</b> can store the content items in the same folder hierarchy as they appear on client device <b>102</b><sub>i</sub>. However, content management system <b>106</b> can store the content items in its own order, arrangement, or hierarchy. Content management system <b>106</b> can store the content items in a network accessible storage (SAN) device, in a redundant array of inexpensive disks (RAID), etc. Content storage <b>160</b> can store content items using one or more partition types, such as FAT, FAT32, NTFS, EXT2, EXT3, EXT4, ReiserFS, BTRFS, and so forth.</p><p id="p-0104" num="0103">Content storage <b>160</b> can also store metadata describing content items, content item types, and the relationship of content items to various accounts, folders, or groups. The metadata can include metadata tags for a content item and can be stored as part of the content item or can be stored separately. In one variation, each content item stored in content storage <b>160</b> can be assigned a system-wide unique identifier.</p><p id="p-0105" num="0104">Content storage <b>160</b> can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies, content storage <b>160</b> can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly, content storage <b>160</b> can store files more efficiently, as well as provide the ability to undo operations, by using a file version control that tracks changes to files, different versions of files (including diverging version trees), and a change history. The change history can include a set of changes that, when applied to the original file version, produce the changed file version.</p><p id="p-0106" num="0105">Content management system <b>106</b> can be configured to support automatic synchronization of content from one or more client devices <b>102</b>. The synchronization can be platform agnostic. That is, the content can be synchronized across multiple client devices <b>102</b> of varying type, capabilities, operating systems, etc. For example, client device <b>102</b><i>i </i>can include client software, which synchronizes, via a synchronization module <b>132</b> at content management system <b>106</b>, content in client device <b>102</b><i>i</i>'s file system with the content in an associated user account. In some cases, the client software can synchronize any changes to content in a designated folder and its sub-folders, such as new, deleted, modified, copied, or moved files or folders. The client software can be a separate software application, can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application, a user can manipulate content directly in a local folder, while a background process monitors the local folder for changes and synchronizes those changes to content management system <b>106</b>. Conversely, the background process can identify content that has been updated at content management system <b>106</b> and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations, and can provide indications of content statuses directly within the content management application. Sometimes client device <b>102</b><i>i </i>may not have a network connection available. In this scenario, the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system <b>106</b> when a network connection is available. Similarly, a user can manually stop or pause synchronization with content management system <b>106</b>.</p><p id="p-0107" num="0106">A user can also view or manipulate content via a web interface generated and served by user interface (UI) module <b>122</b>. For example, the user can navigate in a web browser to a web address provided by content management system <b>106</b>. Changes or updates to content in the content storage <b>160</b> made through the web interface, such as uploading a new version of a file, can be propagated back to other client devices <b>102</b> associated with the user's account. For example, multiple client devices <b>102</b>, each with their own client software, can be associated with a single account and files in the account can be synchronized between each of the multiple client devices <b>102</b>.</p><p id="p-0108" num="0107">Content management system <b>106</b> can include a communications interface module <b>120</b> for interfacing with various client devices <b>102</b>, and can interact with other content and/or service providers <b>1091</b>, <b>1092</b>, . . . , <b>109</b><i>n </i>(collectively &#x201c;<b>109</b>&#x201d;) via an Application Programming Interface (API). Certain software applications can access content storage <b>160</b> via an API on behalf of a user. For example, a software package, such as an application (or app) on a smartphone or tablet computing device, can programmatically make calls directly to content management system <b>106</b>, when a user provides credentials, to read, write, create, delete, share, or otherwise manipulate content. Similarly, the API can allow users to access all or part of content storage <b>160</b> through a web site.</p><p id="p-0109" num="0108">Content management system <b>106</b> can also include authenticator module <b>126</b>, which can verify user credentials, security tokens, API calls, specific client devices, and so forth, to ensure only authorized clients and users can access files. Content management system <b>106</b> can include content item management module <b>128</b>, which stores the content items in content storage <b>160</b>. Content item management module <b>128</b> can include a content directory for identifying the location of each content item stored in content storage <b>160</b>. Further, content management system <b>106</b> can include analytics module <b>134</b> that can track and report on aggregate file operations, user actions, network usage, total storage space used, as well as other technology, usage, or business metrics. A privacy and/or security policy can prevent unauthorized access to user data stored with content management system <b>106</b>.</p><p id="p-0110" num="0109">Content management system <b>106</b> can include collection module <b>130</b> for managing the collection and storage of content in one or more collection folders. The content in a collection folder can include one or more files uploaded by one or more users (a &#x201c;submitter&#x201d;) and/or content uploaded by a user (a &#x201c;collector&#x201d;) whose account includes the one or more collection folders. The one or more submitters can include a submitter who has an account with content management system <b>106</b>, a submitter who does not have an account with content management system <b>106</b> or any combination thereof. A submitter can have limited rights to the content in the one or more collection folders. The limited rights allow a submitter to view only the content that the submitter uploaded and prohibits access to content uploaded by other submitters. In one or more embodiments, the limited rights can only allow a submitter to upload content, but the submitter cannot access the uploaded content. In one or more embodiments, a submitter can have access to content that is uploaded by the collector. The collector can control the access to the content by setting one or more parameters associated with the content. The access can include read-only access, copy-only access and/or replace access. Read-only access allows a submitter to view the content but cannot edit the content. Copy-only access allows a submitter to copy a content item, edit the content item and upload the content item as a new content item. Replace access allows a submitter to replace a previously uploaded file.</p><p id="p-0111" num="0110">In some embodiments, content management system <b>106</b> can be configured to maintain a content directory identifying the location of each content item in content storage <b>160</b>. The content directory can include a unique content entry for each content item stored in the content storage. A content entry can include a content path that can be used to identify the location of the content item in content management system <b>106</b>. For example, the content path can include the name of the content item and a folder hierarchy associated with the content item. For example, the content path can include a collection folder or path of collection folders in which the content item is placed as well as the name of the content item. Content management system <b>106</b> can use the content path to present the content items in the appropriate folder hierarchy. A content entry can also include a content pointer that identifies the location of the content item in content storage <b>160</b>. For example, the content pointer can include the exact storage address of the content item in memory. In some embodiments, the content pointer can point to multiple locations, each of which contains a portion of the content item. In addition to a content path and content pointer, a content entry can also include a user identifier that identifies the user, e.g., a submitter or a collector, who has access to the content item.</p><p id="p-0112" num="0111">Collection module <b>130</b> can be configured to generate a custom network address, such as a uniform resource locator (URL), which allows any web browser to access the collection folder in content management system <b>106</b> without any authentication. To accomplish this, collection module <b>130</b> can be configured to include content identification data in the generated URL, which can later be used to properly identify the user, e.g., a collector or a submitter, and provide access to the collection folder. For example, collection module <b>130</b> can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL, the content identification data included in the URL can be transmitted to content management system <b>106</b>, which can use the received content identification data to identify the appropriate collection folder and provide access to the collection folder.</p><p id="p-0113" num="0112">In addition to generating the URL, collection module <b>130</b> can also be configured to record that a URL to the collection folder has been created. In some embodiments, the collection folder can include a URL flag indicating whether a URL to the collection folder has been created. For example, the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the collection folder has not been created. Collection module <b>130</b> can be configured to change the value of the flag to 1 or true after generating a URL to the collection folder.</p><p id="p-0114" num="0113">In some embodiments, collection module <b>130</b> can also be configured to deactivate a generated URL. For example, each collection folder can also include a URL active flag indicating whether the collection folder should be returned in response to a request from the generated URL. For example, collection module <b>130</b> can be configured to only return a collection folder requested by a generated link if the URL active flag is set to 1 or true. Thus, access to a collection folder for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a collector to restrict access to the collection folder without having to move the collection folder or delete the generated URL. Likewise, collection module <b>130</b> can reactivate the URL by again changing the value of the URL active flag to 1 or true. A collector can thus easily restore access to the collection folder without the need to generate a new URL. A collector has access to active collection folders and deactivated collection folders. A submitter only has access to active collection folders with limited access rights as described herein.</p><p id="p-0115" num="0114">In one or more embodiments, content management system <b>106</b> can include one or more modules. For example, content management system <b>106</b> can include customization module <b>136</b>, template module <b>138</b>, email module <b>140</b>, comment module <b>142</b>, plagiarism detection module <b>144</b> and/or recognition module <b>146</b>. Customization module <b>136</b> can allow a collector to customize settings/parameters for a file request by providing submitters with guidance and/or structure for the submissions. Template module <b>138</b> can allow a collector to provide a copy of a template file to each submitter, thereby allowing each submitter to modify the submitter's copy of the template file. Email module <b>140</b> can allow a submitter to respond to a file request via email and/or can allow a collector to request a file request in response to entering one or more trigger words in an email message. Comment module <b>142</b> can allow a user, e.g., collector and/or submitter, to comment on a file request and/or a submission. Plagiarism detection module <b>144</b> can allow one or more submissions to be scanned for plagiarism. Recognition module <b>146</b> can allow a collector and/or a submitter to tag people and/or objects in a photograph.</p><p id="p-0116" num="0115">While content management system <b>106</b> is presented with specific components, it should be understood by one skilled in the art, that the architectural configuration of system <b>106</b> is simply one possible configuration and that other configurations with more or less components are also possible.</p><p id="p-0117" num="0116">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, a block diagram of the components of a link based collection module <b>130</b> in accordance with an exemplary embodiment is illustrated. Collection module <b>130</b> enables a collector to provide others, e.g., submitters, access to a collection folder, associated with the collector, through a link, e.g., a collection link. As shown, collection module <b>130</b> can include link generation module <b>202</b>, file access module <b>204</b>, link distribution module <b>206</b>, link management module <b>208</b> and collection database <b>210</b>. Link generation module <b>202</b> can generate a link to the collection folder. File access module <b>204</b> can allow a submitter to upload content. Alternatively, file access module <b>204</b> can allow a submitter to upload content and/or access content that the submitter has permission to access via the generated links. Link distribution module <b>206</b> can distribute one or more links to one or more submitters. Link management module <b>308</b> allows a collector to view generated links. Collection database <b>210</b> can maintain information about the content in a collection folder and related information such as whether a collection folder is activated or deactivated.</p><p id="p-0118" num="0117">Link generation module <b>202</b> is configured to generate a link corresponding to a collection folder or collection folders specified by the collector. In one embodiment, upon receiving a file request, link generation module <b>202</b> generates a unique folder descriptor of the collection folder and a unique file location path or URL that serves as the link. Sharing module <b>206</b> saves an association of the collection folder descriptor and the file location path or URL to sharing database <b>210</b>. In some embodiments, the generated file collection link is independent of the collection folder descriptor so that the collection folder descriptor cannot be inferred from the collection folder link, and vice versa. An independent collection folder descriptor and file location path or URL prevents malfeasance by making it essentially impossible to guess or reverse engineer a collection folder link if it is not already known. As an example, when a collection folder &#x201c;Reunion&#x201d; with a file ID of 3D8B99, link generation module <b>202</b> might generate a unique (e.g., one-way pad, or a pseudo-random value) URL such as https://www.service.com/s/28rtiz608u2mnco/BBQ.pdf, where the URL component 28rtiz608u2mnco cannot be reverse-engineered, and accordingly create an entry &#x3c;3D8B99, https://www.service.com/s/28rtiz608u2mnco/BBQ.pdf&#x3e; in collection database <b>210</b>. In one embodiment, the generated link can further be shortened. In some embodiments, the generated URL https://www.service.com/s/28rtiz608u2mnco/BBQ.pdf can further be shortened using a link-shortening service to a shorter URL (e.g., http://db.tt/xOFounw), and an additional association between the original link and the shortened link can be added to sharing database <b>210</b>. In another embodiment, the collection folder can be directly associated with the shortened link rather than with an intermediate, longer generated link.</p><p id="p-0119" num="0118">In other embodiments, a collector can generate multiple different links to the same collection folder or collection folders. Thus, the collector can more selectively control access to the collection folder or collection folders by distributing different selections from among the multiple different links to different submitters. This may, for example, allow a collector to revoke certain submitters' access to the collection folder or collection folders while continuing to permit other submitters to access the file set (e.g., by deactivating certain submitters' links to the collection folder or collection folders while maintaining other submitters' links in active status). In other embodiments, a collector can deactivate a collection folder or collection folders. By deactivating a collection folder or collection folders, submitters can no longer upload content to the collection folder or collection folders. In addition, submitters are prohibited access to the collection folder or collection folders that are designated as deactivated.</p><p id="p-0120" num="0119">Moreover, since a collection folder link is versatile, in some embodiments, the system may include reference to a particular relevant application, or applications, in a link by embedding an application identifier in the generated link. As an example, the generated link for a given collection folder could be the URL https://www.service.com?app=1ps3q/s/28rtiz608u2mnco/BB Q.pdf, which specifies (via the portion &#x201c;app=1ps3q&#x201d;) that some application uniquely associated with the identifier &#x201c;1ps3q&#x201d; (e.g., Microsoft Word or Microsoft Visio) should be used to view a file in the collection folder. Alternatively, the association between the link and the application or application plug-in can be made as an entry in collection database <b>210</b>, rather than by including an application identifier in the link. For example, in various embodiments, a user may generate a first link to a collection folder that specifies use of a first application for viewing a file in the collection folder, and a second link that specifies use of a second application for viewing a file in the collection folder. In this example, collection database <b>210</b> would in turn contain two corresponding entries: i.e., &#x3c;collection file identifier, first link identifier, first application identifier&#x3e; and &#x3c;collection file identifier, second link identifier, second application identifier&#x3e;. In another embodiment, link-based sharing module <b>26</b> may be configured to select the proper applications or application plug-ins to use in the file browser, e.g., based on the types of files in the collection folder. Link-based collection module <b>130</b> may also allow collectors to specify which application should open a particular file or set of files when the files are accessed via a particular link.</p><p id="p-0121" num="0120">Malicious Code Detection</p><p id="p-0122" num="0121">In one or more embodiments, communications interface module <b>120</b> can interface with a malicious content detection system <b>170</b> via an API. Communications interface module <b>120</b> can receive a submission by a submitter using client device <b>102</b><i>i </i>via network <b>104</b>. In response to receiving the submission, communications interface module <b>120</b> can provide the submission to malicious content detection system <b>170</b>. Communication interface module <b>120</b> can provide a submission to malicious content detection system <b>170</b> via network <b>104</b> and/or via one or more different networks. The one or more different networks can be a local area network (LAN) and/or other suitable communication networks (e.g., the Internet, a metropolitan area network (MAN), a wide area network (WAN) a mobile, a wire or wireless network, a private network, a virtual private network, etc.). Malicious content detection system <b>170</b> can scan the submission for malicious code, such as viruses, trojans, malware, etc.</p><p id="p-0123" num="0122">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, a block diagram of the components of a malicious content detection system in accordance with an exemplary embodiment is illustrated. Malicious content detection system <b>170</b> can include firewall <b>172</b>, communication module <b>174</b>, temporary storage <b>176</b>, authentication module <b>178</b> and malware scanning tool <b>180</b>. Firewall <b>172</b> can be one or more firewalls with each being software and/or hardware. Firewall <b>172</b> can assist in preventing any malicious code from infecting content management system <b>106</b>. Communication module <b>174</b> can receive and transmit submissions to and from content management system <b>106</b>. Temporary storage module <b>176</b> can store the received submissions. Authentication module <b>178</b> can verify user credentials, security tokens, API calls, specific client devices, and so forth, to ensure only authorized clients submit files to content management system <b>106</b>. Alternatively, authentication module <b>178</b> can communicate with authenticator module <b>126</b> of content management system <b>106</b> to ensure that the submitter is authorized. Malware scanning tool <b>180</b> can scan the submission for malicious code. If malicious code is detected, malware scanning tool <b>180</b> can attempt to remove the malicious code from the submission. If the removal is successful or if the submission does not contain malicious code, the submission can be provided to content management system <b>106</b> for additional processing. If the removal is unsuccessful, the submission can be quarantined from content management system <b>106</b> or deleted. Malware scanning tool <b>180</b> can be custom software or an off-the-shelf malicious code scanning software, such as, McAfee AVERT Virus Identification System (MAVIS) or McAfree AntiVirus Plus, both available from McAfee of Santa Clara, Calif., or Kaspersky AntiVirus software available from Kaspersky of Moscow, Russia. Malicious content detection system <b>170</b> can be part of content management system <b>106</b> or can be a third party service that provides malicious content detection for content management system <b>106</b>.</p><p id="p-0124" num="0123">Customization</p><p id="p-0125" num="0124">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, content management system <b>106</b> can include customization module <b>136</b>, which can allow a collector to customize settings/parameters for a file request by providing submitters with guidance and/or structure for the submissions. The customization settings can allow the collector to specify the number of submissions that a submitter can submit in response to a file request, specify the type of files to be submitted in response to a file request, allow a submitter to override a previous submission, allow white labeling on an upload user interface (UI), allow for the use of a template file for submissions, specify a deadline for a file request and allow for a previous file request to be used again. In one or more embodiments, the customization settings can be default settings.</p><p id="p-0126" num="0125">A number of submissions setting can control the number of submissions each submitter can submit. For example, the collector can limit each submitter to upload only one submission. In another example, the collector can allow users to submit multiple submissions in response to the same file request. The collector can choose a number setting or an unlimited setting to control the number of submissions. A file type setting can control the type of files that a submitter can submit. For example, the file type setting can allow a collector to choose one or more file types. The file types can include, but are not limited to, .doc, .docx, .xls, .pdf, .zip, .mov, .jpg or any other file types. The override setting allows a collector to permit a submitter to replace or override a previous submission. By allowing a submitter to replace a previous submission, the override setting can reduce the number of submissions that are received in the collection folder. The override setting can be a yes or no setting with yes permitting overrides and no prohibiting overrides. The white labeling setting can allow a collector to have a logo or text displayed on the upload page. The white labeling setting can be a yes or no setting with yes permitting white labeling and no prohibiting white labeling. The template setting can allow a collector to use a template file. As discussed below, template module <b>138</b> generates a copy of the template file for each submitter. As a result, each submitter can modify the template file and save the modified template file to the collection folder. For example, a teacher can generate a template file for a homework assignment and have each student modify the student's template file. As a result, each submitter can modify the template file and save the modified template file to the collection folder. U.S. patent application Ser. No. 14/961,094 entitled &#x201c;Sharing A Template File&#x201d; filed on the same day as this application is hereby incorporated in its entirety. The deadline setting can allow a collector to set a deadline for permitting uploads to the collection folder. The previous file request setting allows a collector to reuse a previous file request. The previous file request setting allows a collector to select a previous file request from a rendered list of previous file requests. Once selected, the collector can select one or more of the customization settings to customize the settings of the previous file request. For example, the collector can update the deadline for the new file request.</p><p id="p-0127" num="0126">Example User Experience</p><p id="p-0128" num="0127">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a flowchart for a method for generating a collection folder in accordance with an exemplary embodiment is illustrated. Exemplary method <b>300</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>300</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>300</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>300</b>. Exemplary method <b>300</b> can begin at block <b>302</b>.</p><p id="p-0129" num="0128">At block <b>302</b>, render a homepage UI for a user's account in content management system <b>106</b>. For example, UI module <b>122</b> causes the rendering of a homepage UI for a user's account in content management system <b>106</b> to be rendered on collector's client device <b>102</b><i>i</i>. The rendering can be in response to a collector accessing the user's account via a web browser. To access the collector's account, the collector can click on an icon displayed on the collector's client device <b>102</b><i>i </i>or by entering the domain name in a web browser on the collector's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> shows rendered homepage UI <b>400</b> on a user's client device <b>102</b><i>i</i>, rendered homepage UI <b>400</b> is for an empty user's account along with a menu on the left with the &#x201c;file request&#x201d; menu option. <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> shows rendered homepage UI <b>410</b> on a user's client device <b>102</b><i>i</i>, rendered homepage <b>410</b> is for a non-empty user's account with a list of folders and files in a user's account along with a menu on the left with the &#x201c;file request&#x201d; menu option. After rendering the homepage UI for a user's account, method <b>300</b> can proceed to block <b>304</b> or to block <b>306</b>.</p><p id="p-0130" num="0129">At block <b>304</b>, render an initial homepage UI to generate a collection folder in response to receiving a selection of the file request menu option. For example, UI module <b>122</b> receives a selection of the file requests menu option and in response, causes the initial homepage to generate a collection folder to be rendered on the collector's client device <b>102</b>. <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> shows an initial homepage UI <b>500</b> for creating a collection folder. In addition, information associated with collection folders can be rendered as shown. For example, the additional information can be &#x201c;Give your file request a name,&#x201d; &#x201c;Send your request to people you want files from&#x201d; and &#x201c;File submissions will sync securely to your Dropbox.&#x201d; <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> shows an initial homepage UI <b>500</b> for creating a collection folder with &#x201c;create new file request&#x201d; button <b>502</b> being selected. Rendering initial homepage UI <b>500</b> for creating a collection folder can be optional. After rendering initial homepage UI <b>500</b> to generate a collection folder, method <b>300</b> can proceed to block <b>306</b>.</p><p id="p-0131" num="0130">At block <b>306</b>, render prompts requesting information from the collector in response to receiving a request to generate a link for use in collecting one or more files from one or more submitters. The request to generate a link can be from the collector selecting the file request menu option or from the collector selecting the create new file request. For example, UI module <b>122</b> receives a request to generate a link and causes the rendering of prompts requesting information from the collector to be rendered on the collector's client device <b>102</b><i>i</i>. The prompts can be rendered in various forms. For example, an initial UI prompting the collector for information can be rendered on the collector's client device <b>102</b><i>i. </i></p><p id="p-0132" num="0131">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, a flowchart for a method for rendering prompts requesting information from the collector in accordance with an exemplary embodiment is illustrated. Exemplary method <b>600</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>600</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>600</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>600</b>. Exemplary method <b>600</b> can begin at block <b>602</b>.</p><p id="p-0133" num="0132">At block <b>602</b>, render prompts for creating a file request. For example, UI module <b>122</b> causes an initial UI to be rendered on the collector's client device <b>102</b><i>i </i>prompting the collector to enter a name for the file request and a location where the requested files should be stored. For example, <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> shows exemplary initial UI <b>700</b> rendering prompts &#x201c;What would you like to name your file request?&#x201d; <b>702</b> and &#x201c;Where do you want your requested files to go?&#x201d; <b>704</b>. After rendering the prompts for creating a file request, method <b>600</b> can proceed to block <b>604</b>.</p><p id="p-0134" num="0133">At block <b>604</b>, receive responses to the prompts. For example, UI module <b>122</b> receives responses to the rendered prompts. Based on the submission to the name of the file request, UI module <b>122</b> can autofill the destination response. The destination response can be based on the name of the file request. Referring to <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the requested files will be called &#x201c;Final papers&#x201d; and the collected files will be stored in a &#x201c;Final papers&#x201d; collection folder under the Requests folder in the collector's user account, e.g., &#x201c;/Requests/Final papers.&#x201d; The collector can change the destination by selecting change destination button <b>706</b>. After receiving responses to the prompts, method <b>600</b> can proceed to block <b>606</b>.</p><p id="p-0135" num="0134">At block <b>606</b>, receive a button selection. For example, UI module <b>122</b> receives a button selection. Referring to <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the collector can customize the file request by selecting customization button <b>708</b>, can create the file request by selecting a create file request button <b>710</b> and/or can cancel the file request by selecting the cancel button <b>712</b>. If the customization button <b>708</b> is selected, method <b>600</b> can proceed to block <b>608</b>. If the create file request button is selected, method <b>600</b> can proceed to block <b>308</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. If the cancel button is selected, method <b>600</b> can proceed to block <b>302</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0136" num="0135">At block <b>608</b>, render a customization UI. For example, UI module <b>122</b> and/or the customization module <b>136</b> causes a customization UI to be rendered on the collector's client device <b>102</b><i>i</i>. Referring to <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, a customization UI is rendered on the collector's client device <b>102</b><i>i </i>and shows the customization settings. As shown, the collector can customize the file request by specifying one or more settings, such as the number of submissions <b>722</b>, types of files that can be submitted <b>724</b>, override <b>726</b>, white labeling <b>728</b>, deadline <b>730</b>, plagiarism detection <b>732</b>, template <b>734</b>, previous file request <b>736</b> and roles <b>738</b>.</p><p id="p-0137" num="0136">The customization settings can be set using various methodologies. The following is one methodology that can be used. By selecting &#x201c;Number of Submissions&#x201d; setting <b>722</b>, customization module <b>136</b> causes a drop down menu to be rendered on the collector's client device <b>102</b><i>i </i>with different numbers being displayed for the maximum number of submissions a submitter can submit. The default number of submissions setting <b>722</b> can be one. If a submitter attempts to submit more than the maximum permitted, UI module <b>122</b> can cause a message to be rendered on the submitter's client device <b>102</b><i>i </i>informing the submitter that the submitter has reached the maximum submissions. By selecting the &#x201c;Types of Files&#x201d; setting <b>724</b>, customization module <b>136</b> causes a drop down menu to be rendered on the collector's client device <b>102</b><i>i </i>with different file types being displayed. The collector can select one or more of the drop down menu selections for the different types of files that are permitted. The default types of files setting <b>724</b> can be any. If a submitter attempts to load a file type that is not permitted, user interface module <b>122</b> can cause a message to be rendered on the submitter's client device <b>102</b><i>i </i>informing the submitter that the file type is not permitted. By selecting the &#x201c;Override&#x201d; setting <b>726</b>, the collector can choose yes (permit) or no (prohibit) to allow or deny a submitter from replacing a submission. The default override setting <b>726</b> can be permitted. By selecting the &#x201c;White Labeling&#x201d; setting <b>728</b>, the collector can choose yes to have white labeling or no to not have white labeling. If yes is selected, the collector can be prompted to upload a file containing the white labeling image. The default white labeling setting <b>728</b> can be no. By selecting the &#x201c;Deadline&#x201d; setting <b>730</b>, the collector can choose yes to have a deadline or choose no not to have a deadline. If yes is selected a calendar can be rendered in which the collector can choose a date for a deadline. In addition, a dropdown menu can be displayed prompting the collector to select a time for the deadline. The default deadline setting <b>730</b> can be no. By selecting the &#x201c;Plagiarism&#x201d; setting, the collector can elect to have the submissions scanned for plagiarism by selecting yes or not to have the submissions scanned for plagiarism by selecting no. The default plagiarism detection setting <b>732</b> can be no. By selecting the &#x201c;Template&#x201d; setting <b>734</b>, the collector can choose yes to use a template or no not to use a template. If yes is selected, the collector can be prompted to upload a template file. The default template setting <b>734</b> can be no. By selecting the &#x201c;Previous File Request&#x201d; setting, the collector can choose yes to use a previous file request or no not to use a previous file request <b>736</b>. If yes is selected, the collector can be prompted to select a previous file request. The default previous file request setting <b>736</b> can be no. By selecting the &#x201c;Roles&#x201d; setting <b>738</b>, a dropdown menu can be rendered allowing the collector to choose between submitter and submitter/viewer. The submitter setting allows a user to submit files. The submitter/viewer setting allows for a submitter/user to submit files and a viewer can access the collection folder to see if a corresponding submitter submitted a file. The viewer can be a parent or guardian and has limited rights, such as viewing only rights. The viewer, like the submitter, can only view files that the corresponding submitter has submitted. In one or more embodiments, the collector can be prompted to enter a corresponding email address for a viewer when the collector is prompted to enter the submitter's email addresses. For example, the collector can enter an &#x201c;&#x26;&#x201d; between a submitter's email address and the viewer's email address or there can be separable fields for the submitter's and the viewer's email addresses. In one or more embodiments, the submitter can be prompted to enter a viewer's email address when uploading a file. If the collector selected the white labeling setting <b>728</b>, method <b>600</b> can proceed to block <b>610</b>. If the collector selected the deadline setting, method <b>600</b> can proceed to block <b>614</b>. If the collector selected the template setting, method <b>600</b> can proceed to block <b>622</b>. If the collector selected the previous file request setting, method <b>600</b> can proceed to block <b>626</b>. If the collector selected the save button <b>740</b>, method <b>600</b> can proceed to block <b>630</b>. If the collector selected the cancel button <b>742</b>, method <b>600</b> can proceed to block <b>308</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0138" num="0137">At block <b>610</b>, render a file listing UI displaying a list of white labeling files. For example, UI module <b>122</b> and/or customization module <b>136</b> can render a file listing UI on the collector's client device <b>102</b><i>i </i>displaying white labeling files for the collector to select a file for the white labeling. <figref idref="DRAWINGS">FIG. <b>7</b>C</figref> shows file listing UI <b>750</b> displaying files that the collector can choose for the white labeling. After rendering the file listing UI displaying a list of files, method <b>600</b> can proceed to block <b>612</b>. At block <b>612</b>, receive a white file labeling selection. For example, UI module <b>122</b> and/or customization module <b>136</b> receives a selection of a rendered file to be used for white labeling. After receiving the selection, method <b>600</b> can proceed to block <b>606</b>.</p><p id="p-0139" num="0138">At block <b>614</b>, render a UI displaying a calendar. For example, UI module <b>122</b> and/or customization module <b>136</b> renders a UI on the collector's client device <b>102</b><i>i </i>displaying a calendar for the collector to select a deadline. After rendering the UI displaying a calendar, method <b>600</b> can proceed to block <b>616</b>. At block <b>616</b>, receive a deadline date. For example, UI module <b>122</b> and/or customization module <b>136</b> receives a deadline date. After receiving the deadline date, method <b>600</b> can proceed to block <b>618</b>. At block <b>618</b>, render a UI displaying times. For example, UI module <b>122</b> and/or customization module <b>136</b> renders a UI on the collector's client device <b>102</b><i>i </i>displaying times for the collector to select a deadline. After rendering the UI displaying times, method <b>600</b> can proceed to block <b>620</b>. At block <b>620</b>, receive a deadline time. For example, UI module <b>122</b> and/or customization module <b>136</b> receives a deadline time. After receiving the deadline time, method <b>600</b> can proceed to block <b>606</b>.</p><p id="p-0140" num="0139">At block <b>622</b>, render a UI displaying a list of template files. For example, UI module <b>122</b> and/or customization module <b>136</b> renders a UI on the collector's client device <b>102</b><i>i </i>displaying a list of template files from which to select a template file. <figref idref="DRAWINGS">FIG. <b>7</b>D</figref> shows UI <b>760</b> displaying template files that the collector can choose for the template. After rendering the UI displaying a list of template files, method <b>600</b> can proceed to block <b>624</b>. At block <b>624</b>, receive a template file selection. For example, UI module <b>122</b> and/or customization module <b>136</b> receives a selection of a template file. After receiving the template file selection, method <b>600</b> can proceed to block <b>606</b>.</p><p id="p-0141" num="0140">At block <b>626</b>, render a UI displaying previous file requests. For example, UI module <b>122</b> and/or customization module <b>136</b> can render a UI on the collector's client device <b>102</b><i>i </i>displaying a list of previous file requests to select a previous file request. For example, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> shows a UI displaying previous file requests from which the collector can choose. After rendering the UI displaying a list of previous file requests, method <b>600</b> can proceed to block <b>628</b>. At block <b>628</b>, receive a previous file request selection. For example, UI module <b>122</b> and/or customization module <b>136</b> receives a selection of a previous file request. After receiving the previous file request selection, method <b>600</b> can proceed to block <b>606</b>.</p><p id="p-0142" num="0141">At block <b>630</b>, store the customization settings. For example, UI interface <b>122</b> and/or customization module <b>136</b> can store and associate the customization settings with the file request. After storing the customization settings, method <b>600</b> can proceed to block <b>308</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0143" num="0142">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, at block <b>308</b>, generate a link in response to receiving the prompted information. For example, link generation module <b>202</b> generates a collection link to a designated collection folder using at least some of the information received from the prompts, e.g., where the collector would like the uploaded files to be stored. If the designated collection folder does not exist, link generation module <b>202</b> can create the collection folder. Link generation module <b>202</b> can store the generated collection link. The generated collection link can be stored in one or more locations. For example, the generated collection link can be associated with the collection and stored in content storage <b>160</b> and/or in an activity log. After generating the link, method <b>300</b> can proceed to block <b>310</b>.</p><p id="p-0144" num="0143">At block <b>310</b>, render a prompt to identify submitters. For example, UI module <b>122</b> renders a submitter invite UI on the collector's client device <b>102</b><i>i </i>prompting the collector to enter email addresses of one or more submitters. As shown in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, the submitter invite UI <b>800</b> renders a generated collection link <b>802</b>. In this example, the collection link is &#x201c;https://meta-dbdev.dev. corp.dropbox.com/drops/4ooD8QgdMhqt.RjxH1.&#x201d; Rendering the generated collection link can be optional. Submitter invite UI <b>800</b> can prompt the collector to invite submitters to upload content to the collection folder. For example, the prompt is &#x201c;Or invite others to your file request via email.&#x201d; The collector can enter one or more email addresses for one or more submitters in invite box <b>804</b>. Alternatively, the collector can copy the file request link for later use. If the collector used a previous file request, the email addresses associated with the previous file request can be auto-filled into the invite box. If the user enters one or more email addresses and selects done button <b>806</b> rendered on submitter invite UI <b>800</b>, method <b>300</b> can proceed to block <b>312</b>. If the user does not enter one or more email addresses and selects done button <b>806</b> rendered on submitter invite UI <b>800</b>, method <b>300</b> can proceed to block <b>316</b>.</p><p id="p-0145" num="0144">At block <b>312</b>, render a prompt for a message. For example, UI module <b>122</b> renders a second submitter invite UI on the collector's client device <b>102</b><i>i </i>prompting the collector to enter a message to be sent to the one or more submitters along with the file request link. As shown in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, second submitter invite UI <b>810</b> can display file request link <b>802</b>, entered email addresses <b>804</b> and comment box <b>812</b> for entering a comment. Rendering the generated collection link can be optional. As shown in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, the exemplary email address is anglealli@dropbox.com and the message is &#x201c;Hey! Upload your final papers here.&#x201d; To have the file requests sent, the collector can select send button <b>814</b> rendered on second submitter invite UI <b>810</b>. Alternatively, the collector can select cancel button <b>816</b> rendered on second submitter invite UI <b>810</b> to cancel the file request. After receiving information to the prompts and receiving the selection of the send button, method <b>300</b> can proceed to block <b>314</b>.</p><p id="p-0146" num="0145">At block <b>314</b>, store the entered email addresses and a message if entered. For example, UI module <b>122</b> can store the entered email addresses and the message, if entered, in content storage <b>160</b>. After storing the one or more email addresses and a message, if entered, method <b>300</b> can proceed to block <b>316</b>.</p><p id="p-0147" num="0146">At block <b>316</b>, distribute the generated link. For example, collection module <b>130</b> and/or email module <b>140</b> sends an email message based on at least some of the received information. The email message can contain the generated link, and the message, if entered, to the one or more submitters whose email addresses were entered by the collector. In another example, the collector can type or paste the generated collection link in an email message and send it. In another example, the collector can paste the generated collection link in a website, such as a social network website. The email message or the website can contain the generated collection link, which the submitter can click on to upload one or more files to the collection folder. The email message can contain a hypertext link for the generated collection link. If the collector customized the file request, the email message can contain information based on the customization settings. For example, the email message can indicate the number of submissions that the submitter is allowed to submit, the types of file that the submitter can submit, if the submitter is permitted to override a submission and a deadline for completing a submission. If the file request is based on a template file, the submitter can be informed to complete the template file and submit the completed template file. If the collector did not enter an email address, an email message containing the generated collection link can be sent to the collector. After distributing the generated collection link, method <b>300</b> can proceed to block <b>318</b>.</p><p id="p-0148" num="0147">At block <b>318</b>, notify the collector that the collection folder request is established. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, collection module <b>130</b> and/or email module <b>140</b> sends an email message to the collector informing the collector that the collection folder request has been established. After notifying the collector that the collection folder request is established, method <b>300</b> can proceed to block <b>320</b>.</p><p id="p-0149" num="0148">At block <b>320</b>, render a file upload UI prompting the submitter for information in response to a submitter activating the generated collection link. For example, UI module <b>122</b> causes a file upload UI to be rendered on the submitter's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> shows rendered file upload UI <b>900</b>. As shown, the submitter is prompted to enter first name <b>902</b>, last name <b>904</b>, email address <b>906</b>, choose files <b>908</b> to upload to the collection folder and to add comment <b>910</b>. In one or more embodiments, rendered file upload UI <b>900</b> can inform the submitter of any customization settings, such as, number of submissions permitted <b>912</b>, type of files permitted <b>914</b>, if overrides <b>916</b> are permitted and deadline <b>918</b>, if any. If the file request was customized, then one or more of the customization setting can be displayed. In one or more embodiments, the customization settings can be displayed or not displayed if no customization settings were displayed. The rendered file upload UI <b>900</b> can render white labeling <b>920</b> if the collector elected to display one. As shown, ABC Corp. logo <b>920</b> is displayed as white labeling. After rendering the file upload page, method <b>300</b> can proceed to block <b>322</b>.</p><p id="p-0150" num="0149">At block <b>322</b>, receive information associated with the submitter and one or more uploaded files. For example, UI module <b>122</b> receives information provided by the submitter in response to the prompts and the selection of one or more files to be uploaded. To select the one or more files to be uploaded, the submitter can select the choose files option and a directory of the submitter's client device <b>102</b><i>i </i>can be rendered allowing the submitter to select one or more files for uploading. The submitter can enter a comment in response to comments prompt <b>910</b>, which will be provided to the collector. After receiving the information and the selection of one or more files to be uploaded, method <b>300</b> can proceed to block <b>324</b>.</p><p id="p-0151" num="0150">At block <b>324</b>, upload the information and one or more selected files. After providing the information and selecting one or more files to upload, the submitter can select upload button <b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to upload the information and one or more files to content management system <b>106</b>. For example, the client software on the submitter's client device <b>102</b><i>i </i>can cause the information and one or more selected files to be uploaded to content management system <b>106</b>. After uploading the information and one or more files, method <b>300</b> can proceed to block <b>326</b>.</p><p id="p-0152" num="0151">At block <b>326</b>, store the one or more uploaded files. For example, content item management module <b>128</b> stores the one or more uploaded files in content storage <b>160</b>. The one or more uploaded files can be stored in the collection folder and/or be associated with the collection folder. A content directory can identify the location of each content item in content storage <b>160</b>. The content directory can include a unique content entry for each content item stored in content storage <b>160</b>. The content entry can include a content pointer that identifies the location of the content item in content storage <b>160</b> if the submitter has an account with content management system <b>106</b>. After storing the one or more uploaded files, method <b>300</b> can proceed to block <b>328</b>.</p><p id="p-0153" num="0152">At block <b>328</b>, notify the collector in response to one or more files being stored in the collection folder. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, account management module <b>124</b>, email module <b>140</b> and/or link distribution module <b>206</b> causes an email message to be sent to the collector notifying the collector that one or more files have been uploaded to the collection folder. The email message can provide information associated with the uploaded one or more files. For example, the information can include the file name, a timestamp for when the file was uploaded and the name of the submitter for each uploaded file. After notifying the collector of one or more files being stored in the collection folder, method <b>300</b> can proceed to block <b>330</b>.</p><p id="p-0154" num="0153">At block <b>330</b>, access the collection folder by the collector. For example, the collector can access the collector's account and can select the collection folder. The collector can access the collector's account via a web browser or via the client software residing on the collector's client device <b>102</b><i>i</i>. Alternatively, the collector can click on a link in the email message to access the collection folder. After accessing the collection folder, method <b>300</b> can proceed to block <b>332</b>.</p><p id="p-0155" num="0154">At block <b>332</b>, publish the collection folder in response to a publish command. For example, collection module <b>130</b> can receive a publish command and cause the collection folder to be available to the submitters. As a result, a submitter can access the collection folder and view other submitters' uploaded files. Block <b>332</b> is further discussed below.</p><p id="p-0156" num="0155">Roles/Permission</p><p id="p-0157" num="0156">In one or more embodiments, content management system <b>106</b> does not require the submitter to be authenticated in order to submit one or more files. In one or more embodiments, the submitter can be authenticated. For example, authenticator module <b>134</b> can perform the authentication of a submitter prior to storing the submitter's uploaded content. In order for a submitter to upload content to the collection folder, the submitter uses the file request link and enters limited data, such as, a first name, last name and email address. Authentication can include the submitter having to login into the submitter's user account and/or entering a password. Authenticator module <b>126</b> can authenticate a submitter by determining if the user is logged into a user account. If the submitter is not logged into a user account, the submitter can be prompted to enter user account login information. For example, the submitter can enter a user name and a password that are associated with the submitter's user account. In one or more embodiments, authenticator module <b>126</b> can authenticate a user by prompting the user to enter a password. The password can be a password that the collector registered when the collection folder was created. The collector can distribute the password via email or using other known methods. For example, a teacher can simply tell the password to the students in person. Alternatively, the password can be a password that the submitter set when the submitter initially accessed a link associated with content management system <b>100</b>.</p><p id="p-0158" num="0157">Referring to <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, a flowchart for a method for storing an uploaded file in a collection folder in accordance with an exemplary embodiment is illustrated. Exemplary method <b>950</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>950</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>950</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>9</b>B</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>900</b>. Exemplary method <b>950</b> can begin at block <b>952</b>.</p><p id="p-0159" num="0158">At block <b>952</b>, receive information associated with the submitter and the one or more files to be uploaded. For example, communications interface module <b>120</b> receives information associated with the submitter and the one or more uploaded files. After receiving the information and the one or more files, method <b>950</b> can proceed to block <b>954</b>.</p><p id="p-0160" num="0159">At block <b>954</b>, determine if the submitter is an authorized submitter. For example, authenticator module <b>126</b> can determine if the submitter is authorized to upload content based on the information received from the submitter. For example, authenticator module <b>126</b> can compare the received information against information associated with the collection folder to determine if the submitter is authorized to upload content. If the submitter is not authorized, method <b>950</b> can proceed to block <b>956</b>. If the submitter is authorized, method <b>950</b> can proceed to block <b>958</b>.</p><p id="p-0161" num="0160">At block <b>956</b>, notify the submitter. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, authenticator module <b>126</b>, UI module <b>122</b> and/or email module <b>144</b> notifies the submitter that the submitter is not authorized to upload content to the collection folder. UI module <b>122</b> can cause a message to be rendered on the submitter's client device <b>102</b><i>i </i>and/or email module <b>144</b> can send an email message to the submitter. The message and/or email message can inform the submitter that they are not authorized to submit a file. The notification can be done via an email message or a web page.</p><p id="p-0162" num="0161">At block <b>958</b>, generate a file name for each of the uploaded files. For example, file access module <b>204</b> determines how many files the submitter has submitted in the collection folder under the file request name and generates a file name for each of the uploaded files. The file name is generated by combining the file request name and either the submitter's name or the submitter's user name of the submitter's email address. The submitter's first name, last name or any combination thereof can be used. For example, if the file request was named Homework Assignment #3 and Jane Doe uploaded a file, the file name can be &#x201c;Homework Assignment #3&#x2014;Jane Doe&#x201d;. Depending on whether the submitter's name or user name is unique a number may be added. For example, if two submitter's have the same first and last name, then a number can be added to the one of the submitter's name to differentiate the two submitters. If the submitter has submitted more than one file, the files submitted after the first file can include a number. For example, if a file request for a Wedding Photos collection folder is generated and Bob Smith submits three files/photos, the first photo can be named Bob Smith Wedding Photo, the second photo can be named Bob Smith Wedding Photo 2 and the third photo can be Bob Smith Wedding Photo 3. One of ordinary skill in the art would recognize other methods for generating unique names for the submitters and for generating unique file names can be used. After generating a file name for each uploaded file, method <b>900</b> can proceed to block <b>910</b>.</p><p id="p-0163" num="0162">At block <b>910</b>, store each file and the associated file name. For example, file access module <b>204</b> stores each file and the generated name in content storage <b>160</b>.</p><p id="p-0164" num="0163">Malicious Content Detection</p><p id="p-0165" num="0164">In one or more embodiments, the information and one or more uploaded files from a submitter can be provided to malicious content detection system <b>170</b> prior to being stored in collection folder and/or content storage <b>160</b>. For example, in response to a submitter uploading the information and one or more files at block <b>324</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the information and the one or more uploaded files can be provided to malicious content detection system <b>170</b> for scanning. Alternatively, the one or more uploaded files can be received by content management system <b>106</b> and then sent to malicious code detection system <b>170</b> for scanning.</p><p id="p-0166" num="0165">Referring to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, a flowchart for a method for scanning one or more uploaded files in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1000</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1000</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>B</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1000</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1000</b>. Exemplary method <b>1000</b> can begin at block <b>1002</b>.</p><p id="p-0167" num="0166">At block <b>1002</b>, receive and store one or more uploaded files. For example, malicious content detection system <b>170</b> can receive the one or more uploaded files and store the received files in memory. The one or more uploaded files can be received from the submitter's client device <b>102</b><i>i </i>or can be received from content management system <b>106</b>. For example, the one or more uploaded files can be sent by communication interface module <b>120</b>. The one or more uploaded files can pass through firewall <b>172</b> and be received by communication module <b>174</b>, which stores the one or more uploaded files in temporary storage <b>176</b>. Temporary storage <b>176</b> can be random access memory (RAM), hard disk drive (HDD), flash memory, such as a solid state drive (SSD), one or more servers, etc. After receiving and storing the one or more uploaded files, method <b>1000</b> can proceed to block <b>1004</b>.</p><p id="p-0168" num="0167">At block <b>1004</b>, determine whether the submitter of the one or more files is authorized. For example, authenticator module <b>178</b> can verify whether the submitter is an authorized user/submitter. Authenticator module <b>178</b> can determine if the submitter is associated with the collection folder. The determination can be based on credentials, security tokens, API calls, specific client devices, and so forth. Alternatively, authenticator module <b>178</b> can communicate with authentication module <b>122</b> to determine if the submitter is authorized. If the submitter is determined not to be associated with the collection folder, method <b>1000</b> can proceed to block <b>1006</b>. If the submitter is determined to be associated with the collection folder, method <b>1000</b> can proceed to block <b>1010</b>.</p><p id="p-0169" num="0168">At block <b>1006</b>, notify the submitter that the submission is not authorized. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, communication module <b>174</b> can send an email message to the submitter notifying the submitter that the submission is not authorized. Alternatively, communication module <b>174</b> can send a command to UI module <b>122</b> that can cause a notification UI to be rendered on the submitter's client device <b>102</b><i>i </i>notifying the submitter that the submission is not authorized. Alternatively, communication module <b>174</b> can send a command to UI module <b>122</b> that can cause an email message to be sent to the submitter notifying the submitter that the submission is not authorized. After notifying the submitter, method <b>1000</b> can proceed to block <b>1008</b>. At block <b>1008</b>, delete the submission from the temporary storage. For example, communication module <b>174</b> can cause the submission to be deleted from temporary storage <b>176</b>.</p><p id="p-0170" num="0169">At block <b>1010</b>, scan each uploaded file for malicious code. For example, malware scanning tool <b>180</b> can scan each uploaded file for malicious code, such as viruses, trojans, malware, etc. If an uploaded file contains malicious content, method <b>1000</b> can proceed to block <b>1012</b>. If an uploaded file does not contain malicious code, method <b>1000</b> can proceed to block <b>1020</b>.</p><p id="p-0171" num="0170">At block <b>1012</b>, attempt to remove the malicious code. For example, malware scanning tool <b>180</b> attempts to remove the malicious code. If the malicious code is not successfully removed from an uploaded file, method <b>1000</b> can proceed to block <b>1014</b>. If the malicious code is successfully removed from an uploaded file, method <b>1000</b> can proceed to block <b>1020</b>.</p><p id="p-0172" num="0171">At block <b>1014</b>, quarantine a file containing malicious code. For example, malware scanning tool <b>180</b> quarantines an uploaded file containing malicious code. Quarantining can include maintaining an uploaded file containing malicious code in temporary storage <b>176</b>, storing an uploaded file containing malicious code in separate storage, deleting an uploaded file containing malicious code and/or flagging an uploaded file containing malicious content. After quarantining an uploaded file containing malicious code, method <b>1000</b> can proceed to block <b>1016</b>.</p><p id="p-0173" num="0172">At block <b>1016</b>, notify the submitter of a quarantined file. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, communication module <b>174</b> can send an email message to the submitter notifying the submitter that an uploaded file contains malicious code. Alternatively, communication module <b>174</b> can send a command to UI module <b>122</b> that causes a notification UI to be rendered on the submitter's client device <b>102</b><i>i </i>notifying the submitter that an uploaded file contains malicious code. After notifying the submitter, method <b>1000</b> can proceed to block <b>1018</b>.</p><p id="p-0174" num="0173">At block <b>1018</b>, notify the collector of a quarantined file. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, communication module <b>174</b> can send an email message to the collector notifying the collector that an uploaded file contains malicious code. Alternatively, communication module <b>174</b> can send a command to UI module <b>122</b> that causes a notification UI to be rendered on the collector's client device <b>102</b><i>i </i>notifying the collector that an uploaded file contains malicious code. After notifying the collector, method <b>1000</b> can proceed to block <b>1020</b> if another uploaded file does not contain malicious code.</p><p id="p-0175" num="0174">At block <b>1020</b>, provide each uploaded file that does not contain malicious code to the content management system. For example, communication module <b>174</b> provides each of the uploaded files that do not contain malicious code to content management system <b>106</b> for storage.</p><p id="p-0176" num="0175">Plagiarism Detection</p><p id="p-0177" num="0176">In one or more embodiments, the one or more uploaded files from a submitter can be scanned for plagiarism. For example, in response to storing one or more uploaded files at block <b>326</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, plagiarism module <b>144</b> can scan the one or more uploaded files for plagiarism. For example, each uploaded file can be compared to the other uploaded files in the collection folder and/or content items available via the Internet and/or content items stored in a database built from archived instances of the Internet. The plagiarism detection can be done by plagiarism module <b>144</b> and/or via a third party service <b>109</b><i>i</i>. For example, plagiarism module <b>144</b> can include a plagiarism API which can send one or more uploaded files to a plagiarism detector service, such as, Turnitin by iParadigms, LLC of Oakland, Calif., Plagiarism Detector Pro or Plagiarism Detector Accumulator Server by Skyline, Inc. of Alexandria, Va. or plagiarism module <b>144</b> can include plagiarism software from such vendors and/or proprietary plagiarism software.</p><p id="p-0178" num="0177">Referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, a flowchart for a method for detecting plagiarism in one or more uploaded files in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1100</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1100</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1100</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1100</b>. Exemplary method <b>1100</b> can begin at block <b>1102</b>.</p><p id="p-0179" num="0178">At block <b>1102</b>, receive one or more uploaded files associated with the collection folder. For example, collection module <b>130</b> receives one or more uploaded files submitted to the collection folder. After receiving the one or more uploaded files, method <b>1100</b> can proceed to block <b>1104</b>.</p><p id="p-0180" num="0179">At block <b>1104</b>, provide the one or more uploaded files to the plagiarism detection module. For example, collection module <b>130</b> provides the content item to plagiarism detection module <b>144</b>. The one or more uploaded files can be provided to the plagiarism detection module <b>144</b> at the time the uploaded file is received, at periodic intervals and/or upon completion of a file request collection. After providing the content item to the plagiarism detection module <b>144</b>, method <b>1100</b> can proceed to block <b>1106</b>.</p><p id="p-0181" num="0180">At block <b>1106</b>, scan the one or more uploaded files for plagiarism/similarity. For example, plagiarism detection module <b>144</b> can run plagiarism software or send the content item to plagiarism service <b>109</b><i>i </i>to scan for plagiarism/similarities. In one or more embodiments, the plagiarism software or plagiarism service <b>109</b><i>i </i>compares the one or more uploaded files to other uploaded files in the collection folder and/or checks the one or more uploaded files by comparing each uploaded file with other content items available via the Internet and/or one or more databases available via the Internet. For example, plagiarism detection is performed by breaking a received content item, e.g., the parent content item, into phrases. Then the phrases are sent to a search engine. Then, the search engine results are downloaded and each search engine source is analyzed by comparing the phrases from the parent content item with phrases in other content items. After scanning the one or more uploaded files for plagiarism/similarity, method <b>1100</b> can proceed to block <b>1108</b>.</p><p id="p-0182" num="0181">At block <b>1108</b>, generate a plagiarism/similarity report. For example, plagiarism detection module <b>144</b> or plagiarism detection service <b>109</b><i>i </i>generates a plagiarism/similarity report. If plagiarism detection service <b>109</b><i>i </i>performs the plagiarism scanning then plagiarism detection service <b>109</b><i>i </i>provides the plagiarism/similarity report to plagiarism detection module <b>144</b>. The plagiarism/similarity report can include a similarity parameter. After generating a plagiarism/similarity report, method <b>1100</b> can proceed to block <b>1110</b>.</p><p id="p-0183" num="0182">At block <b>1110</b>, compare the similarity parameter with a predetermined threshold. For example, plagiarism detection module <b>144</b> compares a similarity parameter from the plagiarism/similarity report to a predetermined threshold. The predetermined threshold can be set by the plagiarism software, plagiarism service <b>109</b><i>i </i>or by the collector. If the comparison indicates plagiarism, e.g., the similarity parameter meets or exceeds the predetermined threshold, then method <b>1100</b> can proceed to block <b>1112</b>. If the comparison does not indicate plagiarism, e.g., the similarity parameter is below the predetermined threshold, then method <b>1100</b> can proceed to block <b>1114</b>.</p><p id="p-0184" num="0183">At block <b>1112</b>, notify the collector of potential plagiarism. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, email module <b>140</b> or plagiarism detection module <b>144</b> sends an email message to the collector notifying the collector of potential plagiarism. The email message can include the plagiarism/similarity report. After notifying the collector, method <b>1100</b> can proceed to block <b>1114</b>.</p><p id="p-0185" num="0184">At block <b>1114</b>, store the plagiarism/similarity report. For example, collection module <b>130</b> and/or plagiarism detection module <b>144</b> stores the plagiarism/similarity report in the collection folder.</p><p id="p-0186" num="0185">Commenting</p><p id="p-0187" num="0186">In one or more embodiments, online content management system <b>106</b> can enable users, e.g., submitter and/or collectors, to provide comments regarding a submission. As discussed below, a user can enter comments in a comment section rendered in a viewing UI. The comment section can be provided across devices, platforms, and file types. For example, content management system <b>106</b> can provide storage, retrieval, editing, and commenting service for content items such as word processing documents, spreadsheets, presentations, videos, streaming content, images, and any other content or file type. In one or more embodiments, the comment section can be provided, by content management system <b>106</b>, on an interface different from a native application associated with a respective content item. For example, the comment section could be an application layer independent from, or layered on top of, the native application of a respective file type being displayed. In one example, the layer could be associated with an application provided by the online content management system or by a browser plug-in when viewed through a web browser. In one example, this could be achieved by adding metadata to each content item that is readable by the application provided by online content management system <b>106</b> or the metadata could point to a location with comment data that is retrievable by online content management system <b>106</b>. Alternatively, the comments may also be displayed though the native application associated with the content item.</p><p id="p-0188" num="0187">Referring to <figref idref="DRAWINGS">FIG. <b>12</b>A</figref>, a flowchart for a method for enabling users to provide comments to a submission in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1200</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1200</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1200</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>12</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1200</b>. Exemplary method <b>1200</b> can begin at block <b>1202</b>.</p><p id="p-0189" num="0188">At block <b>1202</b>, render a file listing UI. For example, UI module <b>122</b> causes the rendering of a file listing UI displaying a list of files that a user has saved to content management system <b>106</b>. For example, UI module <b>122</b> renders a file listing UI <b>1250</b> on the submitter's client device <b>102</b><i>i </i>listing three files that submitter Jane Doe has stored in content management system <b>106</b> as shown in <figref idref="DRAWINGS">FIG. <b>12</b>B</figref>. As shown, the three files are: Homework Assignment #1&#x2014;Jane Doe <b>1252</b>, Homework Assignment #2&#x2014;Jane Doe <b>1254</b> and Homework Assignment #3&#x2014;Jane Doe <b>1256</b>. The collector can have a similar listing of files for files that were submitted to a collection folder. After rendering the file listing UI, method <b>1200</b> can proceed to block <b>1204</b>.</p><p id="p-0190" num="0189">At block <b>1204</b>, receive a file selection. For example, UI module <b>122</b> receives a file selection made by the user. In this example, the submitter selected the Homework Assignment #3&#x2014;Jane Doe file. After receiving the file selection, method <b>1200</b> can proceed to block <b>1206</b>.</p><p id="p-0191" num="0190">At block <b>1206</b>, render the selected file in a viewing UI. For example, UI module <b>122</b> causes the rendering of a viewing UI displaying the selected file. The selected file, Homework Assignment #3&#x2014;Jane Doe, is rendered in viewing UI <b>1260</b> on the submitter's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>12</b>C</figref>. After rendering the selected file, method <b>1200</b> can proceed to block <b>1208</b>.</p><p id="p-0192" num="0191">At block <b>1208</b>, receive a selection of a comment icon. For example, UI module <b>122</b> and/or comment module <b>142</b> receives the selection of displayed comment icon <b>1264</b> shown in <figref idref="DRAWINGS">FIG. <b>12</b>C</figref>. After receiving the comment icon selection, method <b>1200</b> can proceed to block <b>1210</b>.</p><p id="p-0193" num="0192">At block <b>1210</b>, expand a comment section and render a comment box. For example, UI module <b>112</b> and/or the comment module <b>142</b> can cause comment section <b>1268</b> to expand and causes comment box <b>1266</b> to be rendered as shown in <figref idref="DRAWINGS">FIG. <b>12</b>D</figref>. As shown, information associated with the content item can be rendered <b>1270</b> by UI module <b>112</b> and/or comment module <b>142</b> on the submitter's client device <b>102</b><i>i</i>. For example, the title of the submitted file is rendered: &#x201c;Homework Assignment #3&#x201d; and information about when the content item was shared is displayed: &#x201c;Sent 2 days ago by John Doe.&#x201d; After expanding the comment section and rendering a comment box, method <b>1250</b> can proceed to block <b>1212</b>.</p><p id="p-0194" num="0193">At block <b>1212</b>, receive a comment. For example, UI module <b>112</b> and/or comment module <b>142</b> receives a comment that the user entered in comment box <b>1266</b>. For example, the submitter, Jane, enters a comment, &#x201c;I did not do well on this assignment and would like to meet with you to discuss.&#x201d; After receiving the comment, method <b>1200</b> can proceed to block <b>1214</b>.</p><p id="p-0195" num="0194">At block <b>1214</b>, render the comment in the comment section. For example, UI module <b>112</b> and/or comment module <b>142</b> can cause the comment to be rendered on the submitter's client device <b>102</b><i>i </i>in the comment section on the viewing UI as shown in <figref idref="DRAWINGS">FIG. <b>12</b>E</figref>. The user can enter another comment by entering a comment in comment box <b>1266</b>. After rendering the comment, method <b>1200</b> can proceed to block <b>1216</b>.</p><p id="p-0196" num="0195">At block <b>1216</b>, synchronize the comment with the associated file. For example, synchronization module <b>134</b> can synchronize the comment by the first user, e.g., the submitter, with the uploaded file associated with the user account of the second user, e.g., the collector. After synchronizing the comment, method <b>1200</b> can proceed to block <b>1218</b>.</p><p id="p-0197" num="0196">At block <b>1218</b>, render the comment on the other user's client device. For example, UI module <b>112</b> and/or comment module <b>142</b> can cause the comment to be rendered on the other user's client device <b>102</b><i>i</i>, e.g., the collector's client device <b>102</b><i>i</i>. Comment section <b>1269</b> with the comment can be rendered next to document <b>1262</b> when the user opens the file associated with the comment. The other user can respond to the comment and have the new comment posted to both users' client devices <b>102</b><i>i</i>. For example, the comments can be posted on the submitter's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>12</b>F</figref>. As shown, the collector responded with &#x201c;How about Wednesday after class?&#x201d;</p><p id="p-0198" num="0197">Although the above example is directed at the submitter, one of ordinary skill in the art would recognize that the example can be directed to the collector entering an initial comment. In another example, a user can enter a comment for a photograph to provide details of the photo. For example, as shown in <figref idref="DRAWINGS">FIG. <b>12</b>G</figref>, a user, Jane, entered the comment, &#x201c;I took this photo from my office on Oct. 30, 2015.&#x201d;</p><p id="p-0199" num="0198">Chat</p><p id="p-0200" num="0199">In one or more embodiments, online content management system <b>106</b> can enable users, e.g., submitter and/or collectors, to chat about a submission. As discussed below, a user can enter comments in a chat section rendered in a viewing UI. The chat section can be provided across devices, platforms, and file types. For example, content management system <b>106</b> can provide storage, retrieval, editing, and commenting service for content items such as word processing documents, spreadsheets, presentations, videos, streaming content, images, and any other content or file type. In one or more embodiments, the chat section can be provided, by the content management provider, on an interface different from a native application associated with a respective content item. For example, the chat section could be an application layer independent from, or layered on top of, the native application of a respective file type being displayed. In one example, the layer could be associated with an application provided by the online content management system or by a browser plug-in when viewed through a web browser. In one example, this could be achieved by adding metadata to each content item that is readable by the application provided by the online content management system or the metadata could point to a location with chat data that is retrievable by the online content management system. Alternatively, the chat session may also be displayed though the native application associated with the content item.</p><p id="p-0201" num="0200">Referring to <figref idref="DRAWINGS">FIG. <b>13</b>A</figref>, a flowchart for a method for enabling users to have a chat session relating to a submission in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1300</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1300</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1300</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>13</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1200</b>. Exemplary method <b>1300</b> can begin at block <b>1302</b>.</p><p id="p-0202" num="0201">At block <b>1302</b>, render a file listing UI. For example, UI module <b>122</b> causes the rendering of a file listing UI displaying a list of files that a user has saved to content management system <b>106</b>. For example, UI module <b>122</b> renders file listing UI <b>1250</b> on the submitter's client device <b>102</b><i>i </i>listing three files that submitter Jane Doe has stored in content management system <b>106</b> as shown in <figref idref="DRAWINGS">FIG. <b>12</b>B</figref>. As shown, Jane Doe has three files: Homework Assignment #1&#x2014;Jane Doe <b>1252</b>, Homework Assignment #2&#x2014;Jane Doe <b>1254</b> and Homework Assignment #3&#x2014;Jane Doe <b>1256</b>. The collector can have a similar listing of files for files that were submitted to a collection folder. After rendering the file listing UI, method <b>1300</b> can proceed to block <b>1304</b>.</p><p id="p-0203" num="0202">At block <b>1304</b>, receive a file selection. For example, UI module <b>122</b> receives a file selection made by the user. In this example, the submitter selected the Homework Assignment #3&#x2014;Jane Doe file. After receiving the file selection, method <b>1300</b> can proceed to block <b>1306</b>.</p><p id="p-0204" num="0203">At block <b>1306</b>, render the selected file in a viewing UI. For example, UI module <b>122</b> causes the rendering of a viewing UI displaying the selected file on the submitter's client device <b>102</b><i>i</i>. The selected file, Homework Assignment #3&#x2014;Jane Doe, is rendered in viewing UI <b>1260</b> as shown in <figref idref="DRAWINGS">FIG. <b>13</b>B</figref>. After rendering the selected file, method <b>1300</b> can proceed to block <b>1308</b>.</p><p id="p-0205" num="0204">At block <b>1308</b>, receive a selection of a chat icon. For example, UI module <b>122</b> and/or comment module <b>142</b> receives the selection of displayed chat icon <b>1352</b> shown in <figref idref="DRAWINGS">FIG. <b>13</b>B</figref>. After receiving the chat icon selection, method <b>1300</b> can proceed to block <b>1310</b>.</p><p id="p-0206" num="0205">At block <b>1310</b>, expand a chat section and render a list of contacts associated with the user. For example, UI module <b>112</b> and/or comment module <b>143</b> can expand chat section <b>1354</b> and cause a list of contacts associated with the user to be rendered along with each user's online status with content management system <b>106</b> or the chat feature if separate from content management system <b>106</b>. For example, list of associated contacts <b>1358</b> along with online status <b>1360</b> is rendered on the submitter's client device <b>102</b><i>i </i>in status box <b>1360</b> as shown in <figref idref="DRAWINGS">FIG. <b>13</b>C</figref>. Contacts that are online can have a green online status <b>1360</b> and contacts that are offline can have a red online status. Other status identifiers can be used in place of the green and red online statuses <b>1360</b>. After rendering the list of contacts, method <b>1300</b> can proceed to block <b>1314</b>.</p><p id="p-0207" num="0206">At block <b>1312</b>, receive a selection of a contact. For example, UI module <b>112</b> and/or comment module <b>143</b> can receive a selection of a contact rendered on the submitter's client device <b>102</b><i>i</i>. After receiving a selection of a contact, method <b>1300</b> can proceed to block <b>1314</b>.</p><p id="p-0208" num="0207">At block <b>1314</b>, render a message box. For example, UI module <b>112</b> and/or comment module <b>142</b> can cause message box <b>1356</b> to be rendered on the submitter's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>13</b>D</figref>. As shown, information associated with the content item can be rendered <b>1270</b> by UI module <b>112</b> and/or comment module <b>142</b>. For example, the title of the submitted file is rendered: Homework Assignment #3 and information about when the file was shared is displayed: Sent 2 days ago by John Doe. After rendering a message box, method <b>1300</b> can proceed to block <b>1316</b>.</p><p id="p-0209" num="0208">At block <b>1316</b>, receive a chat message. For example, UI module <b>112</b> and/or comment module <b>142</b> receives a chat message that the user enters in message box <b>1356</b> rendered on the submitter's client device <b>102</b><i>i</i>. For example, the submitter, Jane, enters a chat message, &#x201c;Can we setup a meeting to discuss the homework assignment.&#x201d; After receiving the chat message, method <b>1300</b> can proceed to block <b>1318</b>.</p><p id="p-0210" num="0209">At block <b>1318</b>, render the chat message in the comment section. For example, UI module <b>112</b> and/or comment module <b>142</b> can cause the chat message to be rendered in chat section <b>1354</b> on the viewing UI as shown in <figref idref="DRAWINGS">FIG. <b>13</b>E</figref>. As shown, the chat message, &#x201c;Can we setup a meeting to discuss the homework assignment.&#x201d; is rendered on the submitter's client device <b>102</b><i>i</i>. The user can enter another chat message by entering a comment in chat box <b>1356</b>. After rendering the chat message, method <b>1300</b> can proceed to block <b>1320</b>.</p><p id="p-0211" num="0210">At block <b>1320</b>, synchronize the chat message with the other user. For example, synchronization module <b>134</b> can synchronize the chat message by the first user, e.g., the submitter, with the user account of the second user, e.g., the collector. After synchronizing the chat message, method <b>1300</b> can proceed to block <b>1322</b>.</p><p id="p-0212" num="0211">At block <b>1322</b>, render the chat message on the other user's client device. For example, UI module <b>112</b> and/or comment module <b>142</b> can cause the chat message to be rendered on the other user's client device <b>102</b><i>i</i>, e.g., the collector's client device <b>102</b><i>i</i>. The other user can respond to the chat message and have the new chat message posted to both users' client devices <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>13</b>F</figref>. As shown, the collector responded with &#x201c;Sure. What time?&#x201d; After rendering the chat message, method <b>1300</b> can proceed to block <b>1324</b>.</p><p id="p-0213" num="0212">At block <b>1324</b>, receive an exit command. For example, UI module <b>112</b> and/or comment module <b>142</b> can receive an exit command in response to one of the users in the chat session selecting exit button <b>1358</b> rendered in the viewing UI <b>1260</b> as shown in <figref idref="DRAWINGS">FIG. <b>13</b>F</figref>. After receiving an exit command, method <b>1300</b> can proceed to block <b>1326</b>.</p><p id="p-0214" num="0213">At block <b>1326</b>, prompt the user to save the chat session. For example, in response to a user selecting exit button <b>1358</b>, UI module <b>112</b> and/or comment module <b>142</b> can prompt a user to select save button <b>1360</b>, email button <b>1362</b> or end button <b>1364</b> in a save UI <b>1366</b>. <figref idref="DRAWINGS">FIG. <b>13</b>G</figref> shows save UI <b>1366</b> that is rendered over viewing UI <b>1260</b>, save UI <b>1366</b> prompting the user to save the chat session, method <b>1300</b> can proceed to block <b>1328</b>.</p><p id="p-0215" num="0214">At block <b>1328</b>, receive a response to the save prompt. For example, UI module <b>112</b> and/or comment module <b>142</b> receives the response to the save prompts. If the user selected save button <b>1360</b> and the chat session is associated with a submission, method <b>1300</b> can proceed to block <b>1334</b>. If the user selected save button <b>1360</b> and the chat session is not associated with a submission, method <b>1300</b> can proceed to block <b>1330</b>. If the user selected email button <b>1362</b>, method <b>1300</b> can proceed to block <b>1336</b>. If the user selected end button <b>1364</b>, method <b>1300</b> can proceed to block <b>1338</b>.</p><p id="p-0216" num="0215">At block <b>1330</b>, render a file listing. For example, UI module <b>112</b> and/or comment module <b>142</b> renders a file listing to a collection folder homepage on the user's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> shows an exemplary file listing. After rendering the file listing, method <b>1300</b> can proceed to block <b>1332</b>.</p><p id="p-0217" num="0216">At block <b>1332</b>, receive a selection of a submission. For example, UI module <b>112</b> and/or comment module <b>142</b> receives a submission selection to associate with the chat session. After receiving a selection of a submission, method <b>1300</b> can proceed to block <b>1334</b>.</p><p id="p-0218" num="0217">At block <b>1334</b>, associate the chat session with the selected submission and save the chat session. For example, UI module <b>112</b> and/or comment module <b>142</b> associates the chat session with the selected submission and saves the chat session. After saving the chat session, method <b>1300</b> can proceed to block <b>1338</b>.</p><p id="p-0219" num="0218">At block <b>1336</b>, email the chat session to the user. For example, email module <b>140</b> emails the chat session to the user. After emailing the chat session to the user, method <b>1300</b> can proceed to block <b>1338</b>.</p><p id="p-0220" num="0219">At block <b>1338</b>, collapse the chat session. For example, UI module <b>112</b> and/or comment module <b>142</b> causes the chat section <b>1354</b> to collapse as shown in <figref idref="DRAWINGS">FIG. <b>13</b>B</figref>.</p><p id="p-0221" num="0220">Although the above example is directed at the submitter, however one of ordinary skill in the art would recognize that the example can be directed to the collector initiating the chat session. In one or more embodiments, the chat feature does not need to be tied to a submission. For example, a submitter, prior to submitting a file, can select chat icon <b>1352</b> as shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> and can proceed to block <b>1308</b> of <figref idref="DRAWINGS">FIG. <b>13</b>A</figref>.</p><p id="p-0222" num="0221">Facial and/or Object Recognition</p><p id="p-0223" num="0222">In one or more embodiments, recognition module <b>146</b> can be used to associate metadata tags with an identified person and/or an identified object. To identify faces and/or objects a user can use an image interface to train recognition module <b>146</b> to recognize and identify faces and/or objects in a digital image and/or video. Recognition module <b>146</b> can include proprietary or known facial recognition software and/or object recognition software. For example, for facial recognition software, iPhoto by Apple, Inc. of Cupertino, Calif., Photoshop Elements by Adobe Systems of Mountain View, Calif., Picassa by Google of Mountain View, Calif. or any other facial recognition software can be used. For example, for object recognition software, Object Recognition Software by Dynamic Ventures, Inc. d/b/a Computer Vision Software of Cupertino, Calif., GoogLeNet by Google of Mountain View, Calif., or any other object recognition software can be used. In one or more embodiments, recognition module <b>146</b> can use service provider <b>109</b><i>i</i>, which can be offered by one or more of the vendors recited above. In such embodiments, an API can be used to perform the recognition method described below.</p><p id="p-0224" num="0223">Using uploaded files stored in the collection folder or elsewhere, a collector can train the facial recognition software and/or object recognition software by viewing and tagging faces and/or objects in photographs or videos. The tags can be saved as metadata, e.g., metadata tags. The metadata and metadata tags can be saved as a token. For example, a collector can tag people in one or more photographs and then run photographs against the facial recognition software to tag people in different photographs. Similarly, the collector can do the same for the object recognition software. The object recognition software can tag animals, such as a family pet, and/or objects such as the Eiffel Tower or Statute of Liberty. In one or more embodiments, recognition module <b>146</b> can provide different tokens: event specific tokens and global tokens. An event specific token can include the metadata as well as metadata filter parameters. The global token can include the metadata without the metadata filter parameters. The metadata filter parameters can include filters for identifying photographs based a variety of different parameters, such as date, time, location and/or season. For example, if a collector uploads photographs from an event to a collector folder and trains recognition module <b>146</b> to recognize the faces, the collector can also add a filter for date(s) and/or location(s) for the event based on metadata associated with the photographs. Once trained, the collector can save the event token. Then the collector can send a file request to others with the trained event token to collect additional photographs from people who have attended the same event. For example, the event can be a wedding, party, game, etc.</p><p id="p-0225" num="0224">In one or more embodiments, once recognition module <b>146</b> is run against the contents in a collection folder, recognition module <b>146</b> can cause an email message to be sent to the collector informing the collector of how many photographs the collector was identified in. An exemplary email message can be, &#x201c;You're in 3 photos received in your photo request.&#x201d;</p><p id="p-0226" num="0225">Referring to <figref idref="DRAWINGS">FIG. <b>14</b>A</figref>, a flowchart for a method for using facial and/or object recognition on a collection folder in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1400</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1400</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1400</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>14</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1400</b>. Exemplary method <b>1400</b> can begin at block <b>1402</b>.</p><p id="p-0227" num="0226">At block <b>1402</b>, create a file request. For example, the collector can execute blocks <b>302</b>-<b>306</b> in method <b>300</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. For example, in response to the prompts at block <b>306</b>, the collector can name the file request &#x201c;Family Wedding&#x201d; with the requested files being stored at &#x201c;/Requests/Family Wedding&#x201d; as shown in <figref idref="DRAWINGS">FIG. <b>14</b>B</figref>. The collector can select the rendered create new file request option <b>710</b>. After selecting the file request menu option, method <b>1400</b> can proceed to block <b>1404</b>.</p><p id="p-0228" num="0227">At block <b>1404</b>, render the submitter invite UI. For example, collection module <b>130</b> can render submitter invite UI <b>800</b> including generated collection link <b>802</b> as shown in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> on the collector's client device <b>102</b><i>i</i>. After rendering submitter invite UI <b>800</b>, method <b>1400</b> can proceed to block <b>1406</b>.</p><p id="p-0229" num="0228">At block <b>1406</b>, receive a selection of the done button. For example, collection module <b>130</b> receives a selection of done button <b>806</b> as shown in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> without the collector entering any email addresses. After receiving the selection of the done button, method <b>1400</b> can proceed to block <b>1408</b>.</p><p id="p-0230" num="0229">At block <b>1408</b>, render a UI displaying a list of files. For example, UI module <b>122</b> renders a UI on the collector's client device <b>102</b><i>i </i>displaying a list of files for the collector to select a file. <figref idref="DRAWINGS">FIG. <b>7</b>C</figref> shows a UI <b>750</b> displaying files that the collector can choose. After rendering the UI displaying a list of files, method <b>1400</b> can proceed to block <b>1410</b>.</p><p id="p-0231" num="0230">At block <b>410</b>, train the recognition software. For example, the recognition module <b>146</b> can run the recognition software to recognize faces and/or objects in one or more photos to train the recognition software. The recognition software can apply any filters associated with the token. The recognition software can recognize faces and/or objects <b>1464</b>, <b>1466</b>. <figref idref="DRAWINGS">FIG. <b>14</b>K</figref>, discussed below, provides a flowchart for training the recognition software in more detail. After training the recognition software, method <b>1400</b> can proceed to block <b>1412</b>.</p><p id="p-0232" num="0231">At block <b>1412</b>, execute blocks <b>310</b>-<b>316</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. At block <b>310</b>, render submitter invite UI <b>800</b>. For example, collection module <b>130</b> can render submitter invite UI <b>800</b> rendering generated collection link <b>802</b> as shown in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> on the collector's client device <b>102</b><i>i</i>. Alternatively, the collector can send an email message to one or more submitters. The email message can contain the generated link that the collector can copy and paste or type into the email message and can attach a token. After rendering submitter invite UI <b>800</b>, method <b>300</b> can proceed to block <b>312</b>. At block <b>312</b>, the collector can enter a message. For example, the collector can enter a message, such as, &#x201c;Please use the token to find photos from our wedding!&#x201d; After entering a message, method <b>300</b> can proceed to block <b>314</b>. At block <b>314</b>, store the entered email addresses and message, if entered. After storing the entered email addresses and message, if entered, method <b>300</b> can proceed to block <b>316</b>. At block <b>316</b>, the generated link is distributed. After executing blocks <b>310</b>-<b>316</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, method <b>1400</b> can proceed to block <b>1414</b>.</p><p id="p-0233" num="0232">At block <b>1414</b>, render a file upload UI prompting the submitter for file request information in response to a submitter activating the generated collection link. For example, UI module <b>122</b> causes a file upload UI to be rendered on the submitter's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>14</b>C</figref> shows rendered file upload UI <b>900</b>. As shown, the file request came from Gordon Shields. File upload UI <b>900</b> can render the message from the collector: &#x201c;Please use the token to find photos from our wedding!&#x201d; As shown, rendered file upload UI <b>900</b> includes a run a token button <b>924</b>. After rendering the file upload page, method <b>1400</b> can proceed to block <b>1416</b>.</p><p id="p-0234" num="0233">At block <b>1416</b>, receive a selection of the run a token button. For example, recognition module <b>146</b> receives a selection of run a token button <b>924</b>. After receiving a selection of run a token button <b>924</b>, method <b>1400</b> can proceed to block <b>1418</b>.</p><p id="p-0235" num="0234">At block <b>1418</b>, render a folder listing UI displaying a list of folders. For example, UI module <b>122</b> can render a folder listing of the submitter's files as shown in <figref idref="DRAWINGS">FIG. <b>14</b>D</figref> on which the submitter can choose to run the recognition software. After rendering the file listing UI displaying a list of files, method <b>1400</b> can proceed to block <b>1420</b>.</p><p id="p-0236" num="0235">At block <b>1420</b>, receive a folder selection. For example, UI module <b>122</b> receives a selection of a rendered folder to run the recognition software using the token from the collector. After receiving the selection, method <b>1400</b> can proceed to block <b>1422</b>.</p><p id="p-0237" num="0236">At block <b>1422</b>, run the recognition software using the token from the collector. For example, recognition module <b>146</b> can run the recognition feature using the token to recognize faces and/or objects in one or more photos or videos. In one or more embodiments, the submitter can train the recognition software. Recognition module <b>146</b> can store the entered names as metadata tags and associate the metadata tags with the corresponding photo/file. Recognition module <b>146</b> can store the entered names as metadata tags and associate the metadata tags with the token. The submitter can run the token against one or more folders. When the submitter is done running the recognition software, method <b>1400</b> can proceed to block <b>1424</b>.</p><p id="p-0238" num="0237">At block <b>1424</b>, render a file upload UI prompting the submitter for information in response to a submitter activating the generated collection link. For example, UI module <b>122</b> causes a file upload UI to be rendered on the submitter's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>14</b>C</figref> shows a rendered file upload UI <b>900</b>. As shown, the file request came from Bob Smith. The submitter can enter information in response to the prompts. The submitter can select one or more folders and/or files to upload. After rendering the file upload UI, method <b>1400</b> can proceed to block <b>1426</b>.</p><p id="p-0239" num="0238">At block <b>1426</b>, receive file request information and the selection of one or more uploaded files. For example, UI module <b>122</b> receives file request information provided by the submitter in response to the prompts and the selection of one or more files to be uploaded. To select the one or more files to be uploaded, the submitter can select the choose files option and a directory of the submitter's client device can be rendered allowing the submitter to select one or more files for uploading. After receiving the information and the one or more uploaded files are received, method <b>1400</b> can proceed to block <b>1428</b>.</p><p id="p-0240" num="0239">At block <b>1428</b>, upload the file request information and one or more selected files. After providing the information and selecting one or more files to upload, the submitter can select upload button <b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>14</b>C</figref> to upload the information and one or more files to content management system <b>106</b>. For example, the client software on the submitter's client device <b>102</b><i>i </i>can cause the information and one or more selected files to be uploaded to content management system <b>106</b>. After uploading the information and one or more files, method <b>1400</b> can proceed to block <b>1430</b>.</p><p id="p-0241" num="0240">At block <b>1430</b>, store the one or more uploaded files. For example, content item management module <b>128</b> stores the one or more uploaded files in content storage <b>160</b>. The one or more uploaded files can be stored in the collection folder and/or be associated with the collection folder. A content directory can identify the location of each content item in content storage <b>160</b>. The content directory can include a unique content entry for each content item stored in the content storage. The content entry can include a content pointer that identifies the location of the content item in content storage <b>160</b>. After storing the one or more uploaded files, method <b>1400</b> can proceed to block <b>1432</b>.</p><p id="p-0242" num="0241">At block <b>1432</b>, review the metadata tags associated with the uploaded files. For example, the recognition software can review the metadata tags associated with the uploaded files to locate one or more objects that the token was trained for, such as the collector's name. After reviewing the metadata tags, method <b>1400</b> can proceed to block <b>1424</b>.</p><p id="p-0243" num="0242">At block <b>1434</b>, notify the collector of the upload. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, email module <b>140</b> notifies the collector of the upload. Email module <b>140</b> can send an email to the collector informing the collector that a submitter uploaded file. For example, the email message can recite, &#x201c;Peter Smith uploaded 35 photos.&#x201d; If the metadata tags indicate that one or more objects were tagged, the email message can provide a notification of the metadata tags. For example, the email message can recite, &#x201c;Peter Smith uploaded 35 photos in which you were tagged in 20 photos.&#x201d; In another example, the email message can recite, &#x201c;Peter Smith uploaded 35 photos in which Fido was tagged in 20 photos.&#x201d;</p><p id="p-0244" num="0243">Referring to <figref idref="DRAWINGS">FIG. <b>14</b>E</figref>, a flowchart for a method for training the recognition software in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1440</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1440</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1440</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>14</b>E</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1440</b>. Exemplary method <b>1440</b> can begin at block <b>1442</b>.</p><p id="p-0245" num="0244">At block <b>1442</b>, upload photos into the collection folder. For example, the collector can upload photos from a camera, client device <b>102</b><i>i</i>, and/or the collector's user account as known in the art. After uploading photos into the collection folder, method <b>1480</b> can proceed to block <b>1444</b>.</p><p id="p-0246" num="0245">At block <b>1444</b>, select an uploaded photo to view. For example, the collector can select an uploaded photo from a list of photographs stored in the Family Wedding collection folder and rendered on the collector's client device <b>102</b><i>i</i>. After selecting an uploaded photo to view, method <b>1440</b> can proceed to block <b>1446</b>.</p><p id="p-0247" num="0246">At block <b>1446</b>, render the selected photo in a viewing UI. For example, UI module <b>122</b> causes the rendering of selected photo <b>1458</b> in viewing UI <b>1260</b> on the collector's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>14</b>F</figref>. Viewing UI <b>1260</b> can also display comment icon <b>1264</b>, chat icon <b>1352</b> and facial recognition and/or object recognition icon <b>1456</b>. Facial recognition and/or object recognition icon <b>1456</b> can be referred to as recognition icon <b>1456</b>. After rendering the selected photo and receiving a selection of recognition icon <b>1456</b>, method <b>1440</b> can proceed to block <b>1448</b>.</p><p id="p-0248" num="0247">At block <b>1448</b>, render a first set of recognition menu options and receive a selection of a menu option, the first set of recognition menu options is rendered in response to the selection of the recognition icon. For example, recognition module <b>146</b> can cause the rendering of a first set of recognition menu options <b>1466</b> as shown in <figref idref="DRAWINGS">FIG. <b>14</b>G</figref>. As shown, the first set of recognition menu options can include event token button <b>1460</b>, global token button <b>1462</b> and both <b>1464</b>. After rendering the recognition menu options and receiving a selection, method <b>1440</b> can proceed to block <b>1450</b>.</p><p id="p-0249" num="0248">At block <b>1450</b>, run recognition software on one or more photos. For example, recognition module <b>146</b> can run the recognition software to recognize faces and/or objects in one or more photos to train the recognition software. The recognition software can apply any filters associated with the token. The recognition software can recognize faces and/or objects <b>1466</b>, <b>1468</b>. The recognition software can prompt the collector to identify one or more recognized faces and/or objects <b>1470</b>, <b>1472</b> by typing names for the recognized faces and/or objects as shown in <figref idref="DRAWINGS">FIG. <b>14</b>H</figref>. As shown, the collector entered Gordon <b>1470</b> and Sue <b>1472</b>. Recognition module <b>146</b> can store the entered names as metadata tags and associate the metadata tags with the corresponding photo/file. Recognition module <b>146</b> can store the entered names as metadata tags and associate the metadata tags with the selected token: event token, global token or both. After tagging a photo, the collector can go through more photos and tag the recognized faces and/or objects. For example, the collector can use navigation buttons <b>1474</b>, <b>1476</b> to move to another photo. Recognition module <b>146</b> can save the event token <b>1460</b> in the corresponding collection folder. Recognition module <b>146</b> can save the event token <b>1460</b> and/or the global token <b>1462</b> in a photo folder or in a token folder. The event token can be saved and automatically named under the event, e.g., Family Wedding Token. The global token can be saved and automatically named, e.g., Global Token. When the user is done running the recognition software, method <b>1440</b> can proceed to block <b>1452</b>.</p><p id="p-0250" num="0249">At block <b>1452</b>, render a second set of recognition menu options and receive a selection of a menu option. For example, recognition module <b>146</b> can cause the rendering of a second set of recognition menu options <b>1484</b> on the collector's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>14</b>I</figref>. The second set of recognition menu options <b>1486</b> can include send event token button <b>1482</b> and/or send a global token button <b>1484</b>. If event token button <b>1460</b> was selected earlier, then only send event token button <b>1482</b> is rendered. If global token button <b>1462</b> was selected earlier, then only send global token button <b>1484</b> is rendered. If both button <b>1464</b> was selected earlier, then send event token button <b>1482</b> and send global button <b>1484</b> are rendered. After rendering the second set of recognition menu options and receiving a selection of a button, method <b>1440</b> can proceed to block <b>1454</b>.</p><p id="p-0251" num="0250">At block <b>1454</b>, render a third set of recognition menu options and receive a selection of a menu option. For example, recognition module <b>146</b> can cause the rendering of a third set of recognition menu options <b>1494</b> on the collector's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>14</b>J</figref> in response to one of send event token button <b>1482</b> and send global token button <b>1484</b> being selected. The third set of recognition menu options <b>1484</b> can include add date filter button <b>1488</b>, add a location filter button <b>1490</b> and continue button <b>1492</b>. If add a date filter button <b>1488</b> is selected, the collector can enter a date or a range of dates to the token. If add a location filter button <b>1490</b> is selected, the collector can add a location or a location with a distance threshold to the token. The collector can select both of add a date filter button <b>1488</b> and add a location filter button <b>1490</b>. In response to the collector selecting continue button <b>1492</b>, method <b>1440</b> can proceed to block <b>1412</b> of <figref idref="DRAWINGS">FIG. <b>14</b>A</figref>.</p><p id="p-0252" num="0251">Email</p><p id="p-0253" num="0252">In one or more embodiments, when a user is typing an email message, an email module <b>144</b> can monitor the text of the email message for one or more triggering words and suggest the use of a file request. For example, if the text recites, &#x201c;Can you send me that file,&#x201d; email module <b>144</b> can prompt the user if the user would like to have a file request generated. If you the user agrees to the use of a file request, email module <b>144</b> can cause a file request to be created and can embed the generated link into the email message. The generated link can be hypertext. Email module <b>144</b> can replace or supplement the text with the hypertext. For example, the text can become, &#x201c;can you send me that file using my collection folder.&#x201d; The &#x201c;my collection folder&#x201d; can be hypertext and when the submitter clicks on the hypertext, an upload page can be rendered on the submitter's client device. The triggering language can be set by content management system <b>106</b> and/or can be user driven. For user driven triggering language, a user can set one or more words or phrases to trigger the prompt for generating a file request.</p><p id="p-0254" num="0253">Referring to <figref idref="DRAWINGS">FIG. <b>15</b>A</figref>, a flowchart for a method for creating a file request trigger in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1500</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1500</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1500</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1500</b>. Exemplary method <b>1500</b> can begin at block <b>1502</b>.</p><p id="p-0255" num="0254">At block <b>1502</b>, receive a menu icon selection. For example, UI module <b>122</b> can receive a selection of a menu icon by the user, e.g., a collector, selecting menu icon <b>1520</b> rendered on the user's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>. After receiving a menu icon selection, method <b>1500</b> can proceed to block <b>1504</b>.</p><p id="p-0256" num="0255">At block <b>1504</b>, render a menu. For example, UI module <b>122</b> renders menu <b>1524</b> on the user's client device <b>102</b><i>i</i>, as shown in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>, a menu listing menu options. After rendering menu <b>1524</b>, method <b>1500</b> can proceed to block <b>1506</b>.</p><p id="p-0257" num="0256">At block <b>1506</b>, receive a selection of the email menu option. For example, UI module <b>122</b> and/or email module <b>140</b> receives a selection of email menu option <b>1524</b> or email expansion icon <b>1526</b>. After receiving the selection of the email menu option, method <b>1500</b> can proceed to block <b>1508</b>.</p><p id="p-0258" num="0257">At block <b>1508</b>, render email menu options. For example, UI module <b>122</b> and/or email module <b>140</b> renders email menu options <b>1530</b> on the user's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>15</b>C</figref>. As shown, there are two email menu options: email a file <b>1532</b> and triggers <b>1534</b>. After rendering the email menu options, method <b>1500</b> can proceed to block <b>1510</b>.</p><p id="p-0259" num="0258">At block <b>1510</b>, receive a selection of the triggers menu option. For example, UI module <b>122</b> and/or email module <b>140</b> receives a selection of triggers menu option <b>1534</b>. After receiving a selection of triggers menu option <b>1534</b>, method <b>1500</b> can proceed to block <b>1512</b>.</p><p id="p-0260" num="0259">At block <b>1512</b>, render the trigger menu options. For example, UI module <b>122</b> and/or email module <b>140</b> renders trigger menu options <b>1540</b> on the user's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>15</b>D</figref>. The trigger menu options can include user defined triggers and/or system default triggers. For example, as shown, there is one user defined trigger: &#x201c;send me a file&#x201d; <b>1542</b> and a system default trigger: &#x201c;email me a file&#x201d; <b>1544</b>. The menu can include an add option <b>1546</b> along with an entry box <b>1548</b>. If the user had previously entered one or more triggers, the previously entered one or more triggers would be displayed as shown. After rendering the trigger menu options, method <b>1500</b> can proceed to block <b>1514</b>.</p><p id="p-0261" num="0260">At block <b>1514</b>, receive a user entered trigger. For example, UI module <b>122</b> and/or email module <b>140</b> receives a user entered trigger, such as &#x201c;attach a file to your email.&#x201d; After receiving a user entered trigger, method <b>1500</b> can proceed to block <b>1516</b>.</p><p id="p-0262" num="0261">At block <b>1516</b>, save the user entered trigger. For example, UI module <b>122</b> and/or email module <b>140</b> saves the user entered trigger.</p><p id="p-0263" num="0262">Referring to <figref idref="DRAWINGS">FIG. <b>15</b>E</figref>, a flowchart for a method for creating a file request in response to detecting a trigger in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1550</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1550</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1550</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>15</b>E</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1550</b>. Exemplary method <b>1550</b> can begin at block <b>1552</b>.</p><p id="p-0264" num="0263">At block <b>1552</b>, monitor and compare the text of an email message. For example, email module <b>140</b> monitors the text of an email message as the email message is being typed and compares the text to one or more stored email triggers. If the comparison results in a match, method <b>1550</b> can proceed to block <b>1554</b>.</p><p id="p-0265" num="0264">At block <b>1554</b>, render an email triggered file request UI prompting the user to create a file request. For example, collection module <b>130</b> and/or email module <b>140</b> renders an email triggered file request UI prompting the user to create a file request on the user's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>15</b>F</figref>. As shown, email triggered file request UI <b>1572</b> prompts the user. The prompts include yes button <b>1574</b> to create a file request and no button <b>1576</b> not to create a file request while the user is typing email message <b>1570</b>. After rendering the email triggered file request UI, method <b>1550</b> can proceed to block <b>1556</b>.</p><p id="p-0266" num="0265">At block <b>1556</b>, receive a response. For example, collection module <b>130</b> and/or email module <b>140</b> receives a response to the prompt. If the response is a selection of yes button <b>1574</b>, method <b>1550</b> can proceed to block <b>1558</b>. If the response is the selection of no button <b>1576</b>, method <b>1560</b> can proceed to block <b>1552</b>.</p><p id="p-0267" num="0266">At block <b>1558</b>, generate a file request link and insert it into the email message. For example, collection module <b>130</b> and/or email module <b>140</b> can insert the generated file request link into the email message or replace text in the email message with a hypertext link. For example, if the user typed &#x201c;Can you send me that file?&#x201d;, the text can be supplemented with the generated file request link so the text recites, &#x201c;Can you send me the file at http://db.tt/xOFounw&#x201d;. In another example, if the text is replaced with a hyperlink, the text can recite, &#x201c;Can you send me the file?&#x201d; with the &#x201c;send me&#x201d; being a hyperlink. After generating the file request link and inserting it into the email message, the method <b>1550</b> can continue to block <b>1552</b>.</p><p id="p-0268" num="0267">In one or more embodiments, a collection email address can be created. The collection email address can be created in place of and/or in addition to the file request link. For example, the email address can be created when the link is generated by collection module <b>130</b>. In one or more embodiments, email module <b>140</b> can create the email address. By using an email, a submitter can upload one or more files to the collection folder by replying to the email message and attaching the one or more files.</p><p id="p-0269" num="0268">Referring to <figref idref="DRAWINGS">FIG. <b>16</b>A</figref>, a flowchart for a method for creating a collection email address in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1600</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1600</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1600</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1600</b>. Exemplary method <b>1600</b> can begin at block <b>1602</b>.</p><p id="p-0270" num="0269">At block <b>1602</b>, distribute the generated link. For example, collection module <b>130</b> and/or email module <b>140</b> sends an email message based on the at least some of the received information. This can be the same or similar to block <b>316</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> in which the received information was received in block <b>314</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The email message can contain the generated link, and the message, if entered, to the one or more submitters whose email addresses were entered by the collector. The email address from which the email address is sent from can be an email address generated by collection module <b>130</b> and/or email module <b>140</b>. After distributing the generated link, method <b>1600</b> can proceed to block <b>1604</b>.</p><p id="p-0271" num="0270">At block <b>1604</b>, render the email message. For example, an email program of content management system <b>106</b> or a third party email program can render an email message on a submitter's client device <b>102</b><i>i </i>as known in the art as shown in <figref idref="DRAWINGS">FIG. <b>16</b>B</figref>. As shown, email message <b>1650</b> can contain information associated with the file request, such as the email address, e.g., FinalPapers@Dropbbox.com <b>1652</b>, who the email is sent to, e.g., submitter, &#x201c;Amy Brown&#x201d; <b>1654</b>, subject, &#x201c;Final Papers&#x201d; <b>1656</b>, who caused the email to be sent, e.g., &#x201c;Gordon Shields&#x201d; <b>1658</b>, the title of the collection folder, e.g., &#x201c;Final Papers&#x201d; <b>1660</b>, the generated link, e.g., &#x201c;Please respond to the file request by clicking here or reply to this email message&#x201d; with &#x201c;here&#x201d; being hypertext link <b>1662</b> to the collection folder, and a comment from the collector if entered, e.g., &#x201c;This is the last project for US History <b>101</b>&#x201d; <b>1664</b>. If the collector customized the file request, email message <b>1650</b> can include additional information such as, &#x201c;Number of Submissions: 1&#x201d; <b>1666</b>, &#x201c;Type of Files: any&#x201d; <b>1668</b>, &#x201c;Deadline: Dec. 1, 2015&#x201d; <b>1670</b> and &#x201c;Override: yes&#x201d; <b>1672</b>. If the file request is a photo request, the email message can include a token as an attachment. After rendering the email message, method <b>1600</b> can proceed to block <b>1606</b>.</p><p id="p-0272" num="0271">At block <b>1606</b>, receive a reply email option. For example, the email program of content management system <b>106</b> or a third party email program receives a selection of the reply option or reply email option as known in the art. After receiving the reply option, method <b>1600</b> can proceed to block <b>1608</b>.</p><p id="p-0273" num="0272">At block <b>1608</b>, receive text and/or one or more file attachments. For example, the email program of content management system <b>106</b> or a third party email program receives text from the submitter and/or one or more file attachments as known in the art. After receiving text and/or one or more file attachments, method <b>1600</b> can proceed to block <b>1610</b>.</p><p id="p-0274" num="0273">At block <b>1610</b>, receive a send command. For example, the email program of content management system <b>106</b> or a third party email program receives a send command as known in the art. After receiving the send command, method <b>1600</b> can proceed to block <b>1612</b>.</p><p id="p-0275" num="0274">At block <b>1612</b>, send the email message. For example, the email program of content management system <b>106</b> or a third party email program sends the email message to content management system <b>106</b>. After sending the email message, method <b>1600</b> can proceed to block <b>1614</b>.</p><p id="p-0276" num="0275">At block <b>1614</b>, receive the email message from the submitter. For example, email module <b>140</b> receives the email message and one or more attached files from the submitter. After receiving the email message, method <b>1600</b> can proceed to block <b>1616</b>.</p><p id="p-0277" num="0276">At block <b>1616</b>, store the one or more attached files. For example, collection module <b>130</b> and/or email module <b>140</b> stores the one or more attached files in content storage <b>160</b>. The one or more files can be stored in the collection folder and/or be associated with the collection folder based on the email address that the email message was sent to. Collection module <b>130</b> and/or email module <b>140</b> can store the email as a separate file in the collection folder and/or be associated with the collection folder. A content directory can identify the location of each content item in content storage <b>160</b>. The content directory can include a unique content entry for each content item stored in content storage <b>160</b>. The content entry can include a content pointer that identifies the location of the content item in content storage <b>160</b>. After storing the one or more uploaded files, method <b>1600</b> can proceed to block <b>1618</b>.</p><p id="p-0278" num="0277">At block <b>1618</b>, notify the collector in response to one or more files being stored in the collection folder. Notification can include, but is not limited to, email, text message, posting to the account, application notifications (e.g., in-band notifications) or any other means of notification. For example, account management module <b>124</b> and/or email module <b>140</b> causes an email message to be sent to the collector in response to one or more files being stored in the collection folder. The notification can notify the collector that one or more files have been uploaded to the collection folder. The email message can provide information associated with the uploaded one or more files. For example, the information can include the file name, a timestamp for when the file was uploaded and the name of the submitter for each uploaded file.</p><p id="p-0279" num="0278">Publishing</p><p id="p-0280" num="0279">After receiving some or all of the content items in a collection folder, the collector can publish the contents of the collection folder. By publishing the collection folder, the collector is able to share submissions with the one or more submitters and/or others. The publishing of the collection folder can be private or public. A private publication can limit access to the private collection folder to only the submitters. A public publication can allow anyone to access the published collection folder. In one or more embodiments, the collector can publish the contents via a public discoverable URL, such as a vanity URL (e.g., www.dropbox.com/filerequest/gideon), or via a wiki, such as a company wiki. In one or more embodiments, the published collector folder can be published as an electronic dataroom.</p><p id="p-0281" num="0280">Referring to <figref idref="DRAWINGS">FIG. <b>17</b>A</figref>, a flowchart for a method for publishing the contents of a collection folder in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1700</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1700</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1700</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>17</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1700</b>. Exemplary method <b>1700</b> can begin at block <b>1702</b>.</p><p id="p-0282" num="0281">At block <b>1702</b>, access the collection folder by the collector. For example, the collector, e.g., Gordon Shields, accesses a collection folder by selecting a collection folder displayed in a homepage UI <b>410</b> rendered on the collector's client device <b>102</b><i>i </i>as shown in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. For example, the collector can select a collection folder, e.g., Homework Assignment #1 folder. After accessing the collection folder, method <b>1700</b> can proceed to block <b>1704</b>.</p><p id="p-0283" num="0282">At <b>1704</b>, receive a format menu option and format the content. For example, UI module <b>122</b> and/or content item management module <b>128</b> receives a selection of formatting icon <b>1752</b>, <b>1754</b> to format the contents of collection folder <b>1750</b> as shown in <figref idref="DRAWINGS">FIG. <b>17</b>B</figref>. By selecting ordering formatting icon <b>1752</b>, the contents of the collection folder can be organized by submitters, modification date, alphabetically, etc., as known in the art. By selecting template layout icon <b>1754</b>, the collector can organize the contents based on a template layout. For example, UI module <b>122</b> and/or content item management module <b>128</b> collector can cause a rendering of layout menu <b>1270</b> on the collector's client device <b>102</b><i>i </i>allowing the collector select a template layout from one of the displayed template layouts shown in <figref idref="DRAWINGS">FIG. <b>17</b>C</figref>. As shown, in this example, the collector can choose between list template layout <b>1272</b> and spread template layout <b>1274</b> displayed in option menu <b>1270</b>. The template layouts can be based on the file types of the files in the collection folder. For example, for image files, the collector can choose from different album template layouts. After formatting the contents, method <b>1700</b> can proceed to block <b>1706</b>.</p><p id="p-0284" num="0283">At block <b>1706</b>, receive a publish menu option. For example, UI module <b>122</b> and/or content item management module <b>128</b> receives a selection of publishing icon <b>1756</b> and causes the rendering of publishing menu <b>1280</b> on the collector's client device <b>102</b><i>i </i>allowing the collector to select a publishing option from the publishing options shown in <figref idref="DRAWINGS">FIG. <b>17</b>D</figref>. The publish to submitters only menu option <b>1282</b> allows all of the submitters access to all of the submitted files in the collection folder. The publish to website menu option <b>1284</b> allows the collector to enter a website to which to publish the collection folder. The publish to wiki menu option <b>1286</b> allows the collector to enter a wiki to which to publish the collection folder. The publish to dataroom menu option <b>1288</b> allows the collector to publish the collection folder and only allow users who have access rights and/or a password to access the collection folder. After receiving a publishing menu option, method <b>1700</b> can proceed to block <b>1708</b>.</p><p id="p-0285" num="0284">At block <b>1708</b>, publish the collection folder in accordance with the selected menu option. For example, UI module <b>122</b> and/or content item management module <b>128</b> changes the access rights to the folder in accordance with the selected publishing menu option. After publishing the collection folder, method <b>1700</b> can proceed to block <b>1710</b>.</p><p id="p-0286" num="0285">At block <b>1710</b>, send an email message to the submitters. For example, UI module <b>122</b> and/or email module <b>140</b> sends an email message to the submitters notifying them of the publication of the collection folder.</p><p id="p-0287" num="0286">Public File Request</p><p id="p-0288" num="0287">In one or more embodiments, a collector can make a file request a public file request. In one or more embodiments, the file request link can be discoverable via a publically discoverable share link, such as a vanity link, e.g., www/dropbox.com/filerequest/public/gideon. In one or more embodiments, a file request link can be made publically discoverable by changing the destination of the file request. For example, by selecting change destination box <b>706</b> in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the collector can make the destination address public by changing the destination address from &#x201c;/Requests/Final papers&#x201d; to &#x201c;/Requests/public/Final papers&#x201d;.</p><p id="p-0289" num="0288">In one or more embodiments, the social media network can include a file request widget on a user interface to facilitate the submission of one or more files to a collection folder. The file request widget may be used to facilitate the submission of one or more particular files that are associated with the widget directly to a collection folder in content management system <b>106</b>, such as a synchronized or non-synchronized cloud-based content management system. As a result, the collector is able to use the widget to have a file request link generated and inserted into a user interface of a website, such as a social networking website. For example, by clicking on a file request widget icon, the social network can communicate with content management system <b>106</b> to obtain a file request link, which can be inserted into the user interface, such as a Facebook posting or a Twitter tweet. The file request link can be inserted as hypertext and provide access to a collection folder which is created for the user and associated with an account associated with the user who elected to create the collection folder. When a user/submitter selects the file request link or hypertext, the user/submitter is able to upload a file into the associated collection folder with the submitters being unable to access files uploaded by other submitters. For example, a company, such as Dropbox, can a post a contest on their home page or post a message via social networking that recites, &#x201c;Win one free month of storage on Dropbox by submitting the funniest picture showing the Dropbox logo. Click here to submit your picture. Contest ends Nov. 21, 2015.&#x201d; The &#x201c;here&#x201d; can be a hypertext to a collection folder. In various embodiments, the file request widget may include a user interface element (e.g., a button, dialog box, or menu bar) that allows a user to select and/or initiate the request for content download of one or more content items by using the file request widget. The file download widget may be implemented, for example, by pasting a small piece of HTML code into the HTML code of a particular website. The code may be provided by, content management system <b>106</b>. More specifically, link management module <b>208</b> can be used to create the collection folder and direct content items to be downloaded to the collection folder.</p><p id="p-0290" num="0289">Referring to <figref idref="DRAWINGS">FIG. <b>18</b>A</figref>, a flowchart for a method for managing collection folders in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1000</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1800</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1800</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>18</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1800</b>. Exemplary method <b>1800</b> can begin at block <b>1802</b>.</p><p id="p-0291" num="0290">At block <b>1802</b>, render a file request icon on a third party website. For example, widget software from content management system <b>106</b></p><p id="p-0292" num="0291">is provided to a third party website where the widget software displays the file request icon on the third party website. The third party website is a website that is not operated by content management system <b>106</b>, such as a social networking website. <figref idref="DRAWINGS">FIG. <b>18</b>B</figref> shows an exemplary third party website <b>1850</b>, e.g., Twitter&#xae;, with file request icon <b>1854</b> displayed in text box <b>1852</b>. After rendering the file request icon on a third party website, method <b>1800</b> can proceed to block <b>1804</b>.</p><p id="p-0293" num="0292">At block <b>1804</b>, receive a request for generating a file request link from the third party website in response to the file request icon being selected. For example, link generation module <b>205</b> receives a request for generating a file request link from the third party website. The request can be generated by a user of the third party website selecting displayed file request icon <b>1854</b>. After receiving the request, method <b>1800</b> can proceed to block <b>1806</b>.</p><p id="p-0294" num="0293">At block <b>1806</b>, generate a file request link. For example, link generation module <b>202</b> generates a file request link. After generating a file request link, method <b>1800</b> can proceed to block <b>1808</b>.</p><p id="p-0295" num="0294">At block <b>1808</b>, provide the generated file request link to the third party website. For example, link distribution module <b>206</b> provides the generated file request link to the third party website. After providing the generated file request to the third party website, method <b>1800</b> can proceed to block <b>1810</b>.</p><p id="p-0296" num="0295">At block <b>1810</b>, embed the generated file request link into the third party website. For example, the widget software embeds the generated file request into the third party website. The generated file request can be displayed and/or displayed as hypertext, such as &#x201c;Click here to submit a file&#x201d; with &#x201c;here&#x201d; being the embedded generated file request link as hypertext. After embedding the generated file request link into the third party web site, method <b>1800</b> can proceed to block <b>318</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0297" num="0296">Managing Collection Folders</p><p id="p-0298" num="0297">Referring to <figref idref="DRAWINGS">FIG. <b>19</b>A</figref>, a flowchart for a method for managing collection folders in accordance with an exemplary embodiment is illustrated. Exemplary method <b>1900</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>1900</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>1900</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>19</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>1900</b>. Exemplary method <b>1900</b> can begin at block <b>1902</b>.</p><p id="p-0299" num="0298">At block <b>1902</b>, render a collection folder homepage in response to receiving a selection of the file request menu option. For example, UI module <b>122</b> receives a selection of the file requests menu option shown in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> and causes the collection folder homepage to be rendered on the collector's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>19</b>B</figref> shows an exemplary collection folder homepage. As shown, the collection folder homepage shows the collection folders in the active requests and a button for creating a new file request. In this example, the active collector has one collection folder: the Final papers collection folder having a date of Apr. 2, 2015 with &#x201c;0&#x201d; files submitted. After rendering the collection folder homepage, method <b>1900</b> can proceed to block <b>1904</b>.</p><p id="p-0300" num="0299">At block <b>1904</b>, determine a received command. For example, UI module <b>122</b> receives a command in response to the new file request, active requests, inactive requests, a collection folder or a side menu option being selected. In response to the command being for a new file request, the method can proceed to block <b>306</b> of method <b>300</b> where the collector can generate a new collection folder. <figref idref="DRAWINGS">FIG. <b>19</b>C</figref> is an initial UI <b>700</b> of a first submission page for generating a vacation photos collection folder. In <figref idref="DRAWINGS">FIG. <b>19</b>C</figref>, the prompts are &#x201c;What would like to name your file Request?&#x201d; and &#x201c;Where do you want your requested files to go?&#x201d; The exemplary answers are &#x201c;vacation photos&#x201d; and &#x201c;/Requests/Vacation photos,&#x201d; respectively. <figref idref="DRAWINGS">FIG. <b>19</b>D</figref> is an initial UI <b>700</b> of a first submission page with the &#x201c;create file request&#x201d; button being selection. After creating a new collection folder, method <b>1900</b> returns to block <b>1902</b>. <figref idref="DRAWINGS">FIG. <b>19</b>E</figref> shows file listing UI <b>1952</b> of the collection folder homepage after the vacation photos collection folder is created. The folders are &#x201c;Vacation photos&#x201d; and &#x201c;Final papers.&#x201d; In response to the command being for the active requests, method <b>1900</b> can proceed to block <b>1902</b> where the collection folder homepage is again rendered on the collector's client device <b>102</b><i>i</i>. In response to the command being the selection of a collection folder, method <b>1900</b> can proceed to block <b>1906</b>. <figref idref="DRAWINGS">FIG. <b>19</b>F</figref> shows the file listing UI <b>1952</b> of the Final papers collection folder being selected. In response to the command being for the inactive requests, method <b>1900</b> can proceed to block <b>1910</b>. In response to the inactive file being selected, a side menu is rendered and a menu option from the side menu being selected, method <b>1900</b> proceeds to execute the selected menu option.</p><p id="p-0301" num="0300">At block <b>1906</b>, an edit file request page is rendered. For example, UI module <b>122</b> causes the edit file request page to be rendered on the collector's client device <b>102</b><i>i</i>. As shown in <figref idref="DRAWINGS">FIG. <b>19</b>G</figref>, the edit file request page allows the collector to change the name of the collection folder, change the location for the collection folder and to deactivate the collection folder. If the name of the file request is changed or the location where the files go changes, the collector can select the save button and the changes are saved and method <b>1900</b> can proceed to block <b>1902</b>. If the collector selects the cancel button, the command is canceled and method <b>1900</b> can proceed to block <b>1902</b>. If the collector selects the deactivate request button, the method <b>1900</b> can proceed to block <b>1908</b>.</p><p id="p-0302" num="0301">At block <b>1908</b>, the selected folder is deactivated. For example, file access module <b>204</b> deactivates the selected folder. A deactivated collection folder prohibits a submitter from uploading files to the deactivated collection folder. After deactivating the folder, method <b>1900</b> can proceed to block <b>1902</b>. <figref idref="DRAWINGS">FIG. <b>19</b>H</figref> shows a collection folder homepage UI after the Final papers collection folder is deactivated with only the Vacation photos collection folder being in the active request collection folder.</p><p id="p-0303" num="0302">At block <b>1910</b>, render the inactive requests home page. For example, UI module <b>122</b> causes the rendering of the inactive requests home page on the collector's client device <b>102</b><i>i</i>. <figref idref="DRAWINGS">FIG. <b>19</b>I</figref> shows an inactive requests home page UI with the Final papers collection folder being displayed. After rendering the inactive requests home page, method <b>1900</b> can proceed to block <b>1912</b>.</p><p id="p-0304" num="0303">At block <b>1912</b>, determine the received command. For example, the UI module <b>122</b> receives a command in response to the active requests, inactive requests, a collection folder or a side menu option being selected. In response to the command being for the active requests, method <b>1900</b> can proceed to block <b>1902</b> where the collection folder home page is rendered. In response to the command being the selection of a collection folder, method <b>1900</b> can proceed to block <b>1914</b>. In response to the command being for the inactive requests, method <b>1900</b> can proceed to block <b>1910</b>. In response to a menu option from the side menu is selected, method <b>1900</b> proceeds to execute the selected menu option.</p><p id="p-0305" num="0304">At block <b>1914</b>, render an edit file request page. For example, UI module <b>122</b> causes the edit file request page to be rendered on the collector's client device <b>102</b><i>i</i>. As shown in <figref idref="DRAWINGS">FIG. <b>19</b>J</figref>, the edit file request page allows the collector to change the name of the collection folder, change the location for the collection folder and to activate the collection folder. If the name of the file request is changed or the location where the files go changes, the collector can select the save button and the changes are saved and method <b>1900</b> can proceed to block <b>1902</b>. If the collector selects the cancel button, the command is canceled and method <b>1900</b> can proceed to block <b>1902</b>. If the collector selects reactivate request button, method <b>1900</b> can proceed to block <b>1916</b>.</p><p id="p-0306" num="0305">At block <b>1916</b>, activate the selected folder. For example, file access module <b>204</b> reactivates the selected folder. A reactivated collection folder allows a submitter to upload files to the activated collection folder. After reactivating the folder, method <b>1900</b> can proceed to block <b>1002</b>. <figref idref="DRAWINGS">FIG. <b>19</b>E</figref> shows a collection folder homepage UI after the Final papers collection folder is reactivated.</p><p id="p-0307" num="0306">Administrative Controls and Dashboards</p><p id="p-0308" num="0307">In one or more embodiments, administrative controls can be employed. For a company using the content management system on an enterprise level, e.g., Dropbox Business, the company can have administrative controls. The administrative controls can include, but are not limited to, reviewing an activity log, view collection folders, be notified when a submission is made to a collection folder, be notified when a collection folder is published, control who creates collection folders/file requests, control who can review collection folders and control whether submitters need to be members of the enterprise. An administrator can access an activity log, which can record the number of file requests, the number of collection folders, who created the file requests, who has submitted a content item to a collection folder and create reports. Referring to <figref idref="DRAWINGS">FIG. <b>20</b>B</figref>, a UI rendering an activity log in accordance with an exemplary embodiment is illustrated. The administrator can review collection folders. For example, an administrator can select a rendered collection folder displayed in the activity log to view the contents of a collection folder. The administrator can receive a notification, such as an email message, in response to a submitter submitting a content item to a collection folder. The administrator can view a list of people who have access to the enterprise and control each users rights, e.g., the ability to create a file request/collection folder, the ability to control who can receive a file request, who can customize a file request and/or any other privilege that the users in the enterprise can do with respect to the collection folders. The administrator can control whether a submitter has to be a member of the enterprise to submit a content item.</p><p id="p-0309" num="0308">Referring to <figref idref="DRAWINGS">FIG. <b>20</b>A</figref>, a flowchart for a method for generating an activity log in accordance with an exemplary embodiment is illustrated. Exemplary method <b>2000</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>2000</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>2000</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>20</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>2000</b>. Exemplary method <b>2000</b> can begin at block <b>2002</b>.</p><p id="p-0310" num="0309">At block <b>2002</b>, monitor the activity in the content management system for activity. For example, analytics module <b>134</b> monitors activity associated with an enterprise account within the content management system <b>106</b> <i>f</i>. In response to detecting an activity, the method <b>2000</b> can proceed to block <b>2004</b>.</p><p id="p-0311" num="0310">At block <b>2004</b>, determine the activity. For example, analytics module <b>134</b> determines the activity associated with the enterprise account. For example, the activity can be accessing a folder, generating a collection folder, reactivating an inactive file request, deactivating an active file request, receiving a submission to a collection folder, receiving an overwrite in a collection folder, reaching a deadline in a collection folder, publishing a collection folder, detecting an improper submission (e.g., a user is not authenticated), receiving a submission with malicious code, detecting plagiarism, etc. After determining the activity method <b>2000</b> can proceed to block <b>2006</b>.</p><p id="p-0312" num="0311">At block <b>2006</b>, record the activity and associated information in an activity log. For example, analytics module <b>134</b> records the activity and associated information in an activity log. The associated information can include the activity, a timestamp for the activity, a user associated with the activity, user's role, etc. After recording the activity, method <b>2000</b> can proceed to block <b>2008</b>.</p><p id="p-0313" num="0312">At block <b>2008</b>, receive a request to view the activity log. For example, analytics module <b>134</b> receives a request to view the activity log. After receiving the request, method <b>2000</b> can proceed to block <b>2010</b>.</p><p id="p-0314" num="0313">At block <b>2010</b>, authenticate the user associated with the request to view the activity log. For example, authenticator module <b>126</b> authenticates the user associated with the request. The authentication can require the user to log into the requester's user account or can be based on a cookie stored on the requester's client device <b>102</b><i>i</i>. If the user is authenticated, method <b>2000</b> can proceed to block <b>2012</b>. If the user is not authenticated, method <b>2000</b> can proceed to block <b>2020</b>.</p><p id="p-0315" num="0314">At block <b>2012</b>, prompt the user for a range. For example, the analytics module <b>134</b> prompts the user to enter a range, which can be for a time period or a set number of entries. This can be done via a rendered menu. After rendering the prompt, method <b>2000</b> can proceed to block <b>2014</b>.</p><p id="p-0316" num="0315">At block <b>2014</b>, receive a range in response to the prompt. For example, analytics module <b>134</b> receives a time frame or a set number of entries in response to the prompt. After receiving the range, method <b>2000</b> can proceed to block <b>2016</b>.</p><p id="p-0317" num="0316">At block <b>2016</b>, obtain the activity log based on the entered range. For example, analytics module <b>134</b> obtains the activity log entries based on a set number of entries. After obtaining the activity log for the entered range, method <b>2000</b> can proceed to block <b>2018</b>.</p><p id="p-0318" num="0317">At block <b>2018</b>, render the obtained activity log for the entered range in an activity log UI. For example, UI module <b>122</b> renders the obtained activity log on the requester's client device <b>102</b><i>i </i>in activity log UI <b>2050</b> as shown in <figref idref="DRAWINGS">FIG. <b>20</b>B</figref>. As shown, the activity log UI <b>2050</b> shows the last ten entries along with the associated information. The associated information includes location, the user associated with the activity, the activity and a timestamp.</p><p id="p-0319" num="0318">At block <b>2020</b>, render a message to the user that they do not have proper access. For example, UI module <b>122</b> can cause the rendering of a message UI informing the user that the user did not enter proper credentials.</p><p id="p-0320" num="0319">In one or more embodiments, a collector can determine the status of a collection folder by accessing a status file associated with the collection folder. Referring to <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>, a flowchart for a method for generating an activity log in accordance with an exemplary embodiment is illustrated. Exemplary method <b>2100</b> is provided by way of example, as there are a variety of ways to carry out the method. Method <b>2100</b> described below can be carried out using the configurations illustrated in <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b>A</figref> by way of example, and various elements of these figures are referenced in explaining exemplary method <b>2100</b>. Each block shown in <figref idref="DRAWINGS">FIG. <b>21</b>A</figref> represents one or more processes, methods or subroutines, carried out in exemplary method <b>2100</b>. Exemplary method <b>2100</b> can begin at block <b>2102</b>.</p><p id="p-0321" num="0320">At block <b>2102</b>, generate a status file in response to a file request link being generated. For example, analytics module <b>134</b> generates a status file in response to a file request link being generated at block <b>308</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The status file can include a list of submitters associated with the file request and a timestamp for when the file request link was generated. The status file can be stored in the collection folder or can be associated with the collection folder. After generating the status file, method <b>2100</b> can proceed to block <b>2104</b>.</p><p id="p-0322" num="0321">At block <b>2104</b>, monitor the collection folder associated with the file request link for submissions and access and monitor the file request folder. For example, analytics module <b>134</b> monitors the collection folder for submissions from one or more submitters and monitors the file request folder. In response to a submission, method <b>2100</b> can proceed to block <b>2106</b>.</p><p id="p-0323" num="0322">At block <b>2106</b>, update the status file in response to receiving a submission. For example, analytics module <b>134</b> updates the status file in response to the collection folder receiving a submission. The update can include an indication of the submitter and a timestamp indicating when the submission was received. After updating the status file, method <b>2100</b> can proceed to block <b>2108</b>.</p><p id="p-0324" num="0323">At block <b>2108</b>, access the status file for each collection folder in the file request folder in response to a collector accessing the collector's file request folder. For example, analytics module <b>134</b> accesses the status file for each collection folder in the file request folder in response to a collector accessing the collector's file request folder. After accessing the status file for each collection folder, method <b>2100</b> can proceed to block <b>2110</b>.</p><p id="p-0325" num="0324">At block <b>2110</b>, render a collection folder icon for each folder associated with the file request folder along with a summary of the number of submitted files. For example, UI module <b>122</b> and/or analytics module <b>134</b> causes the rendering of a file icon for each collection folder in the file request folder and render the number of submitted files obtained from the status folder corresponding to the collection folder. <figref idref="DRAWINGS">FIG. <b>19</b>I</figref> shows one active collection folder, e.g., Final papers collection folder, for Gordon Shield's user account. As shown, the status of the Final papers file request includes five submissions and two non-submissions. A non-submission refers to a submitter who has not provided a submission to the collection folder. In response to the collector selecting a rendered file icon, method <b>2100</b> can proceed to block <b>2112</b>.</p><p id="p-0326" num="0325">At block <b>2112</b>, render a list of the submitted files and the status file. For example, UI module <b>122</b> and/or analytics module <b>134</b> causes the rendering of a list of files in the selected folder in a file listing UI. <figref idref="DRAWINGS">FIG. <b>21</b>B</figref> shows file listing UI <b>2152</b> listing the files in the folder along with status file <b>2154</b>. After rendering the list of submitted files and the status file, method <b>2100</b> can proceed to block <b>2114</b> in response to the collector selecting the status file.</p><p id="p-0327" num="0326">At block <b>2114</b>, render the status file. For example, UI module <b>122</b> and/or analytics module <b>134</b> causes the rendering of status file UI <b>2162</b> as shown in <figref idref="DRAWINGS">FIG. <b>21</b>C</figref>. As shown, the status file indicates that two submitters, e.g., Frank Fava <b>2158</b> and George Geiger <b>2160</b>, have not submitted files. The status file can list the submitters on top and the non-submitters below. In one or more embodiments, the submitters can be rendered in a first color and the non-submitters can be rendered in a second color. In one or more embodiments, the analytics module <b>134</b> can access an activity log and can indicate if a submitter overrode a previous submission. For example, the submitter who overrode a previous submission can be in a third color.</p><p id="p-0328" num="0327">Exemplary System</p><p id="p-0329" num="0328"><figref idref="DRAWINGS">FIGS. <b>22</b>A and <b>22</b>B</figref> show exemplary possible system embodiments. The more appropriate embodiment will be apparent to those of ordinary skill in the art when practicing the present technology. Persons of ordinary skill in the art will also readily appreciate that other system embodiments are possible.</p><p id="p-0330" num="0329"><figref idref="DRAWINGS">FIG. <b>22</b>A</figref> illustrates a conventional system bus computing system architecture <b>2200</b> wherein the components of the system are in electrical communication with each other using a bus <b>2205</b>. Exemplary system <b>2200</b> includes a processing unit (CPU or processor) <b>2210</b> and a system bus <b>2205</b> that couples various system components including the system memory <b>2215</b>, such as read only memory (ROM) <b>2220</b> and random access memory (RAM) <b>2225</b>, to the processor <b>2210</b>. The system <b>2200</b> can include a cache of high-speed memory connected directly with, in close proximity to, or integrated as part of the processor <b>2210</b>. The system <b>2200</b> can copy data from the memory <b>2215</b> and/or the storage device <b>2230</b> to the cache <b>2212</b> for quick access by the processor <b>2210</b>. In this way, the cache can provide a performance boost that avoids processor <b>2210</b> delays while waiting for data. These and other modules can control or be configured to control the processor <b>2210</b> to perform various actions. Other system memory <b>2215</b> may be available for use as well. The memory <b>2215</b> can include multiple different types of memory with different performance characteristics. The processor <b>2210</b> can include any general purpose processor and a hardware module or software module, such as module <b>1</b> <b>2232</b>, module <b>2</b> <b>2234</b>, and module <b>3</b> <b>2236</b> stored in storage device <b>2230</b>, configured to control the processor <b>2210</b> as well as a special-purpose processor where software instructions are incorporated into the actual processor design. The processor <b>2210</b> may essentially be a completely self-contained computing system, containing multiple cores or processors, a bus, memory controller, cache, etc. A multi-core processor may be symmetric or asymmetric.</p><p id="p-0331" num="0330">To enable user interaction with the computing device <b>2200</b>, an input device <b>2245</b> can represent any number of input mechanisms, such as a microphone for speech, a touch-sensitive screen for gesture or graphical input, keyboard, mouse, motion input, speech and so forth. An output device <b>2235</b> can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances, multimodal systems can enable a user to provide multiple types of input to communicate with the computing device <b>2200</b>. The communications interface <b>2240</b> can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.</p><p id="p-0332" num="0331">Storage device <b>2230</b> is a non-volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer, such as magnetic cassettes, flash memory cards, solid state memory devices, digital versatile disks, cartridges, random access memories (RAMs) <b>2225</b>, read only memory (ROM) <b>2220</b>, and hybrids thereof.</p><p id="p-0333" num="0332">The storage device <b>2230</b> can include software modules <b>2232</b>, <b>2234</b>, <b>2236</b> for controlling the processor <b>2210</b>. Other hardware or software modules are contemplated. The storage device <b>2230</b> can be connected to the system bus <b>2205</b>. In one aspect, a hardware module that performs a particular function can include the software component stored in a computer-readable medium in connection with the necessary hardware components, such as the processor <b>2210</b>, bus <b>2205</b>, display <b>2235</b>, and so forth, to carry out the function.</p><p id="p-0334" num="0333"><figref idref="DRAWINGS">FIG. <b>22</b>B</figref> illustrates a computer system <b>2250</b> having a chipset architecture that can be used in executing the described method and generating and displaying a graphical user interface (GUI). Computer system <b>2250</b> is an example of computer hardware, software, and firmware that can be used to implement the disclosed technology. System <b>2250</b> can include a processor <b>2255</b>, representative of any number of physically and/or logically distinct resources capable of executing software, firmware, and hardware configured to perform identified computations. Processor <b>2255</b> can communicate with a chipset <b>2260</b> that can control input to and output from processor <b>2255</b>. In this example, chipset <b>2260</b> outputs information to output <b>2265</b>, such as a display, and can read and write information to storage device <b>2270</b>, which can include magnetic media, and solid state media, for example. Chipset <b>2260</b> can also read data from and write data to RAM <b>2275</b>. A bridge <b>2280</b> for interfacing with a variety of user interface components <b>2285</b> can be provided for interfacing with chipset <b>2260</b>. Such user interface components <b>2285</b> can include a keyboard, a microphone, touch detection and processing circuitry, a pointing device, such as a mouse, and so on. In general, inputs to system <b>2250</b> can come from any of a variety of sources, machine generated and/or human generated.</p><p id="p-0335" num="0334">Chipset <b>2260</b> can also interface with one or more communication interfaces <b>2290</b> that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks, for broadband wireless networks, as well as personal area networks. Some applications of the methods for generating, displaying, and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor <b>2255</b> analyzing data stored in storage <b>2270</b> or <b>2275</b>. Further, the machine can receive inputs from a user via user interface components <b>2285</b> and execute appropriate functions, such as browsing functions by interpreting these inputs using processor <b>2255</b>.</p><p id="p-0336" num="0335">It can be appreciated that exemplary systems <b>2200</b> and <b>2250</b> can have more than one processor <b>2210</b> or be part of a group or cluster of computing devices networked together to provide greater processing capability.</p><p id="p-0337" num="0336">Any of the steps, operations, functions, or processes described herein may be performed or implemented by a combination of hardware and software modules, alone or in combination with other devices. In an embodiment, a software module can be software that resides in memory of a client device and/or one or more servers of a content management system and perform one or more functions when a processor executes the software associated with the module. The memory can be a non-transitory computer-readable medium.</p><heading id="h-0007" level="1">CONCLUSION</heading><p id="p-0338" num="0337">For clarity of explanation, in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices, device components, steps or routines in a method embodied in software, or combinations of hardware and software.</p><p id="p-0339" num="0338">In light of the above, it is to be understood that the invention is not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for the purposes of limitation.</p><p id="p-0340" num="0339">For clarity of explanation, in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices, device components, steps or routines in a method embodied in software, or combinations of hardware and software.</p><p id="p-0341" num="0340">In some embodiments the computer-readable storage devices, mediums, and memories can include a cable or wireless signal containing a bit stream and the like. However, when mentioned, non-transitory computer-readable storage media expressly exclude media such as energy, carrier signals, electromagnetic waves, and signals per se.</p><p id="p-0342" num="0341">Methods according to the above-described examples can be implemented using computer-executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise, for example, instructions and data which cause or otherwise configure a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language, firmware, or source code. Examples of computer-readable media that may be used to store instructions, information used, and/or information created during methods according to described examples include magnetic or optical disks, flash memory, USB devices provided with non-volatile memory, networked storage devices, and so on.</p><p id="p-0343" num="0342">Devices implementing methods according to these disclosures can comprise hardware, firmware and/or software, and can take any of a variety of form factors. Typical examples of such form factors include laptops, smart phones, small form factor personal computers, personal digital assistants, and so on. Functionality described herein also can be embodied in peripherals or add-in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device, by way of further example.</p><p id="p-0344" num="0343">The instructions, media for conveying such instructions, computing resources for executing them, and other structures for supporting such computing resources are means for providing the functions described in these disclosures.</p><p id="p-0345" num="0344">Although a variety of examples and other information was used to explain aspects within the scope of the appended claims, no limitation of the claims should be implied based on particular features or arrangements in such examples, as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and/or method steps, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example, such functionality can be distributed differently or performed in components other than those identified herein. Rather, the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method comprising:<claim-text>providing, by a content management system and to a submitter client device associated with a submitter, a file request link for use in collecting files in a collection folder from one or more submitters, the file request link generated in response to receiving a request from a collecting user device, the request comprising a password for using the file request link;</claim-text><claim-text>in response to receiving an indication of a submitter interaction with the file request link, providing, for display on the submitter client device, a prompt for the password;</claim-text><claim-text>providing, for display on the submitter client device and based on receiving the password from the submitter client device, a file upload user interface comprising an option to upload a file;</claim-text><claim-text>receiving, by the content management system, a file selected by the submitter based on the submitter interacting with the option to upload a file; and</claim-text><claim-text>storing, by the content management system, the file in the collection folder.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>providing a file request generation interface for display on the collecting user device; and</claim-text><claim-text>receiving the password from the collecting user device via the file request generation interface.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising registering the password with the collection folder, wherein registering the password with the collection folder causes the content management system to satisfy the password prior to storing a given file received from a given submitter client device of the one or more submitters.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>generating a first communication within which to provide the file request link to the submitter client device; and</claim-text><claim-text>generating a second communication that is different from the first communication within which to provide the password to the submitter client device.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>authenticating the submitter client device to upload files to the collection folder based on receiving the password from the submitter client device; and</claim-text><claim-text>wherein providing the file upload user interface is based on authenticating the submitter client device.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the file upload user interface comprises an option to provide a comment to be associated with the file.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein receiving the password from the submitter client device causes the content management system to grant the submitter client device limited rights to the collection folder, the limited rights providing uploading rights for uploading one or more files to the collection folder and prohibiting viewing of files within the collection folder that were uploaded by other submitters of the one or more submitters.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A system comprising:<claim-text>at least one processor; and</claim-text><claim-text>a non-transitory computer-readable storage medium comprising instructions that, when executed by the at least one processor, cause the system to:<claim-text>provide, by a content management system and to a collecting user device, a file request generation interface;</claim-text><claim-text>receive, from the collecting user device and via the file request generation interface, a request to generate a file request link for use in collecting files from one or more submitters, the request comprising a password;</claim-text><claim-text>generate, in response to receiving the request, a file request link associated with a collection folder, wherein access to the collection folder is restricted based on the password;</claim-text><claim-text>provide, to a submitter client device associated with a submitter, the file request link;</claim-text><claim-text>grant upload access to the submitter client device based on receiving the password from the submitter client device; and</claim-text><claim-text>store, by the content management system, a file received from the submitter client device in the collection folder.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the password comprises a user-defined password received from the collecting user device.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions that, when executed by the at least one processor, cause the system to:<claim-text>generate a first communication within which to provide the file request link to the submitter client device; and</claim-text><claim-text>generate a second communication that is different from the first communication within which to provide the password to the submitter client device.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions that, when executed by the at least one processor, cause the system to provide, for display on the submitter client device and in response to receiving an indication of an interaction with the file request link, a prompt for the password.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising instructions that, when executed by the at least one processor, cause the system to provide, for display on the submitter client device and based on the submitter providing the password, a file upload user interface comprising a file upload option.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising instructions that, when executed by the at least one processor, cause the system to register the password with the collection folder, wherein registering the password with the collection folder causes the content management system to satisfy the password prior to granting access to a given submitter client device.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein granting upload access to the submitter client device comprises granting limited rights to the collection folder, the limited rights providing uploading rights for uploading one or more files to the collection folder and prohibiting viewing of files uploaded by other submitters of the one or more submitters.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer-readable medium storing instructions that, when executed by at least one processor, cause a computing device to:<claim-text>receive, from a collecting user device and via a file request generation interface, a request to generate a file request link for use in collecting files from one or more submitters;</claim-text><claim-text>generate, in response to receiving the request, a file request link associated with a collection folder, wherein access to the collection folder is restricted based on one or more passwords;</claim-text><claim-text>provide, to a submitter client device associated with a submitter, the file request link;</claim-text><claim-text>grant upload access to the submitter client device based on receiving a first password of the one or more passwords from the submitter client device; and</claim-text><claim-text>store a file received from the submitter client device in the collection folder.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more passwords comprise:<claim-text>the first password that is associated with the submitter client device; and</claim-text><claim-text>a second password that is associated with an additional submitter client device.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further storing instructions that, when executed by the at least one processor, cause the computing device to provide, for display on the submitter client device and in response to receiving an indication of an interaction with the file request link, a prompt for the one or more passwords.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further storing instructions that, when executed by the at least one processor, cause the computing device to provide, for display on the submitter client device and based on the submitter providing the first password, a file upload user interface comprising a file upload option.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the file upload user interface comprises an option to provide a comment to be associated with the file.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further storing instructions that, when executed by the at least one processor, cause the computing device to register the one or more passwords with the collection folder, wherein registering the one or more passwords with the collection folder causes a content management system to satisfy at least one of the one or more passwords prior to granting access to the collection folder to a given submitter client device.</claim-text></claim></claims></us-patent-application>