<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004976A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004976</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17366293</doc-number><date>20210702</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20200501</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>4015</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>341</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEM AND METHOD FOR OBSERVABILITY, DASHBOARD, ALERTING AND PRO-ACTIVE ACTION MECHANISM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>JPMorgan Chase Bank, N.A.</orgname><address><city>New York</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>GHOSH</last-name><first-name>Souma Suvra</first-name><address><city>Wilmington</city><state>DE</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>RAJWANI</last-name><first-name>Amit</first-name><address><city>Voorhees</city><state>NJ</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>JPMorgan Chase Bank, N.A.</orgname><role>02</role><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A system and method for observability, dashboard, alerting and pro-active action framework for card authorizations application are disclosed. A receiver receives a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called socket manager corresponding to a card transaction. A processor operatively connected to the processor via a communication network collects application data from the message in connection with the card transaction; aggregates and stores the application data onto a dynamically allocated shared memory; reads the aggregated application data from the shared memory; stores the application data in an individual transient data queue attached to the socket manager; converts, in response to reading, the predefined first format of the payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform; and publishes the converted message onto the desired messaging platform.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="96.35mm" wi="158.75mm" file="US20230004976A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="228.18mm" wi="180.85mm" orientation="landscape" file="US20230004976A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="200.32mm" wi="178.31mm" orientation="landscape" file="US20230004976A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="196.51mm" wi="178.31mm" orientation="landscape" file="US20230004976A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="245.28mm" wi="178.31mm" orientation="landscape" file="US20230004976A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="229.95mm" wi="178.31mm" orientation="landscape" file="US20230004976A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="226.23mm" wi="178.31mm" orientation="landscape" file="US20230004976A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="226.82mm" wi="178.31mm" orientation="landscape" file="US20230004976A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="256.03mm" wi="172.30mm" file="US20230004976A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">This disclosure generally relates to card authorization applications, and, more particularly, to methods and apparatuses for implementing a robust application monitoring and dashboard module that checks constant health of an application and get notified and alerted when there is any system issue.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">The developments described in this section are known to the inventors. However, unless otherwise indicated, it should not be assumed that any of the developments described in this section qualify as prior art merely by virtue of their inclusion in this section, or that those developments are known to a person of ordinary skill in the art.</p><p id="p-0004" num="0003">Conventional credit card system of an organization may traditionally run on legacy mainframe system. When a customer makes a purchase whether on a terminal or online, an authorization request may be sent to the organization via VISA/MasterCard to the organization to approve or decline the purchase. An authorization system (i.e., a sophisticated rule engine) running on the mainframe system may perform credit and fraud check and then may decide to approve or decline the request.</p><p id="p-0005" num="0004">This authorization system proves to be a very critical system for a credit card as it controls the customer purchase experience. For example, a legitimate request should always be approved, whereas a bank may need to make sure that fraud requests are declined. Thus, this authorization system may need to be available twenty four hours a day and may also provide 100% response time within SLA (service-level agreement) of less than, for example, 50 milliseconds.</p><p id="p-0006" num="0005">As a result, a robust application monitoring system is needed to check the constant health of the application and get notified and alerted when there is any system issue. In addition, there should be a process for automated failover and recovery.</p><p id="p-0007" num="0006">However, the conventional credit card system being a legacy mainframe system, there is no out-of-box such application monitoring system available. Neither there is any product available in market place that can integrate with the application to provide the required application health and automation needed.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0008" num="0007">The present disclosure, through one or more of its various aspects, embodiments, and/or specific features or sub-components, provides, among other features, various systems, servers, devices, methods, media, programs, and platforms for implementing a robust application monitoring module on a mainframe system that checks constant health of an application and get notified and alerted when there is any system issue, but the disclosure is not limited thereto. For example, the present disclosure, through one or more of its various aspects, embodiments, and/or specific features or sub-components, provides, among other features, various systems, servers, devices, methods, media, programs, and platforms for building a robust application monitoring module on a mainframe system that may intercept, collect and aggregate metrics data real-time and, then may convert them and make them available to third-party tools. Additionally, the robust application monitoring module according to an aspect of the instant disclosure can integrate back the alerts and feedbacks provided by the third-party tools back to the mainframe system to take certain actions, but the disclosure is not limited thereto. According to an aspect of the present disclosure the framework implemented by the robust application monitoring module is a generic framework that can be implemented on any desired mainframe system and can be adopted for any desired metrics collection and dashboard, but the disclosure is not limited thereto.</p><p id="p-0009" num="0008">According to an aspect of the present disclosure, a method for monitoring application by utilizing one or more processors and one or more memories is disclosed. The method may include: receiving a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called a socket manager corresponding to a card transaction; collecting application data from the message in connection with the card transaction; aggregating and storing a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) which has limited storage capacity but is known and accessible to all the process running in a same CICS region; implementing a monitor process to obtain the location of the dynamically allocated shared memory by accessing the CWA and reading the aggregated application data from the shared memory; storing a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager; computing a delta or difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue for that socket manager; storing, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart; converting, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform; and publishing the converted message onto the desired messaging platform.</p><p id="p-0010" num="0009">According to another aspect of the present disclosure, the monitoring process may run on a different CICS system, and therefore, in that scenario the monitoring process has to communicate with the CICS region that hosts the socket manager/shared memory via remote call and instantiate a process there to gain access to the shared memory. This use-case is beneficial when the socket managers are running in different CICS regions in a distributed mode.</p><p id="p-0011" num="0010">According to a further aspect of the present disclosure, the dynamically allocated shared memory may contain command/action data also along with the metrics and statistical data. The command provided from action system which can be feedback coming back as alerts, action from third-party application system or a green screen application, can be acted by the socket manager. Examples of those actions can be stop or recycle socket manager, enable debugging and tracing of messages, route incoming message traffic to a healthy socket manager, etc., but the disclosure is not limited thereto.</p><p id="p-0012" num="0011">According to an additional aspect of the present disclosure, storing the data in dynamically allocated shared memory may give access to multiple processes to read and update the data simultaneously. For example, the socket manager can update the metrics and statistical data; the monitor process can read the latest data and feedback process can apply command on the shared memory which are picked up by socket manager to perform automated actions.</p><p id="p-0013" num="0012">According to another aspect of the present disclosure, wherein the transient data queue is being implemented in an environment that utilizes mixed-language application servers that provide online transaction management and connectivity for applications on predefined mainframe systems, but the disclosure is not limited thereto. According to a further aspect of the present disclosure, wherein the application may also store the metrics and statistical data on to persistence data store like database or file, thereby providing the ability to recover and replay the data in case of system failure or reboot.</p><p id="p-0014" num="0013">According to a further aspect of the present disclosure, wherein the application data may include metrics and statistical data corresponding to the card transaction, but the disclosure is not limited thereto.</p><p id="p-0015" num="0014">According to yet another aspect of the present disclosure, wherein the predefined first format is COBOL copybook format, but the disclosure is not limited thereto, and wherein the predefined second format may include one or more of the following formats: .JSON, .CSV, .HTML, .XML, and .XLS, but the disclosure is not limited thereto.</p><p id="p-0016" num="0015">According to a further aspect of the present disclosure, the method may further include: receiving a plurality of payment authorization request messages via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager; storing the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager; periodically collecting metrics and statistical data from all socket manager transient data queues; and aggregating and storing the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory. For example, according to an aspect of the present disclosure, the data may flow from the dynamically allocated shred memory to the transient data queues.</p><p id="p-0017" num="0016">According to yet another aspect of the present disclosure, the method may further include: consuming the formatted message from the desired messaging platform by a plurality of visualization tools that provides dashboard feature via different visualization charts such as but not limited to pie chart, bar chart, scattered plot, line plot, time series, etc.; identifying an alert in accordance with predefined rules; transmitting the alter or provide feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and triggering an automatic predefined mitigation process, in response to receiving the alert, to mitigate issues identified in the alert or the feedback data.</p><p id="p-0018" num="0017">According to another aspect of the present disclosure, a system for monitoring application is disclosed. The system may include: a processor; and a memory operatively connected to the processor via a communication interface, the memory storing computer readable instructions, when executed, may cause the processor to: receive a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called a socket manager corresponding to a card transaction; collect application data from the message in connection with the card transaction; aggregate and store a subset of the application data in a dynamically allocated shared memory and store location of the dynamically allocated shared memory in a CWA (common work area) which has a limited storage capacity but is known and accessible to all the process running in a same CICS region; implement a monitor process to obtain the location of the dynamically allocated shared memory by accessing the CWA and read the aggregated application data from the shared memory; store a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager; compute a delta or difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue for that socket manager; store, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart; convert, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform; and publish the converted message onto the desired messaging platform.</p><p id="p-0019" num="0018">According to a further aspect of the present disclosure, wherein the processor may be further configured to: receive a plurality of payment authorization request messages via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager; store the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager; periodically collect metrics and statistical data from all socket manager transient data queues; and aggregate and store the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory. For example, according to an aspect of the present disclosure, the data may flow from the dynamically allocated shred memory to the transient data queues.</p><p id="p-0020" num="0019">According to an additional aspect of the present disclosure, wherein the processor may be further configured to: consume the formatted message from the desired messaging platform by a plurality of visualization tools that provides dashboard feature via different visualization charts such as but not limited to pie chart, bar chart, scattered plot, line plot, time series, etc.; identify an alert in accordance with predefined rules; transmit the alter or provide feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and trigger an automatic predefined mitigation process, in response to receiving the alert, to mitigate issues identified in the alert or the feedback data.</p><p id="p-0021" num="0020">According to yet another aspect of the present disclosure, a non-transitory computer readable medium configured to store instructions for monitoring application is disclosed. The instructions, when executed, may cause a processor to perform the following: receiving a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called a socket manager corresponding to a card transaction; collecting application data from the message in connection with the card transaction; aggregating and storing a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) which has limited storage capacity but is known and accessible to all the process running in that CICS region; implementing a monitor process to obtain the location of the dynamically allocated shared memory by accessing the CWA and reading the aggregated application data from the shared memory; storing a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager; computing a delta or difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue for that socket manager; storing, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart; converting, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform; and publishing the converted message onto the desired messaging platform.</p><p id="p-0022" num="0021">According to a further aspect of the present disclosure, the instructions, when executed, may cause the processor to further perform the following: receiving a plurality of payment authorization request messages via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager; storing the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager; periodically collecting metrics and statistical data from all socket manager transient data queues; and aggregating and storing the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory. For example, according to an aspect of the present disclosure, the data may flow from the dynamically allocated shred memory to the transient data queues.</p><p id="p-0023" num="0022">According to a further aspect of the present disclosure, the instructions, when executed, may cause the processor to further perform the following: consuming the formatted message from the desired messaging platform by a plurality of visualization tools that provides dashboard feature via different visualization charts such as but not limited to pie chart, bar chart, scattered plot, line plot, time series, etc.; identifying an alert in accordance with predefined rules; transmitting the alter or provide feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and triggering an automatic predefined mitigation process in one scenario by updating the command section of the shared memory that is watched constantly or periodically by the socket manager, in response to receiving the alert, to mitigate issues identified in the alert or the feedback data.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0024" num="0023">The present disclosure is further described in the detailed description which follows, in reference to the noted plurality of drawings, by way of non-limiting examples of preferred embodiments of the present disclosure, in which like characters represent like elements throughout the several views of the drawings.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a computer system for implementing a robust application monitoring module that checks constant health of an application and get notified and alerted when there is any system issue in accordance with an exemplary embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary diagram of a network environment with a robust application monitoring device in accordance with an exemplary embodiment.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a system diagram for implementing a robust application monitoring device with a robust application monitoring module in accordance with an exemplary embodiment.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a system diagram for implementing a robust application monitoring module of <figref idref="DRAWINGS">FIG. <b>3</b></figref> in accordance with an exemplary embodiment.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary system architecture with the robust application monitoring module of <figref idref="DRAWINGS">FIG. <b>4</b></figref> in accordance with an exemplary embodiment.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an exemplary metrics collection and conversion process implemented by the robust application monitoring module of <figref idref="DRAWINGS">FIG. <b>4</b></figref> in accordance with an exemplary embodiment.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an exemplary framework implemented by the robust application monitoring module of <figref idref="DRAWINGS">FIG. <b>4</b></figref> for batch applications in accordance with an exemplary embodiment.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a flow chart of implementing a robust application monitoring module that checks constant health of an application and get notified and alerted when there is any system issue in accordance with an exemplary embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0033" num="0032">Through one or more of its various aspects, embodiments and/or specific features or sub-components of the present disclosure, are intended to bring out one or more of the advantages as specifically described above and noted below.</p><p id="p-0034" num="0033">The examples may also be embodied as one or more non-transitory computer readable media having instructions stored thereon for one or more aspects of the present technology as described and illustrated by way of the examples herein. The instructions in some examples include executable code that, when executed by one or more processors, cause the processors to carry out steps necessary to implement the methods of the examples of this technology that are described and illustrated herein.</p><p id="p-0035" num="0034">As is traditional in the field of the present disclosure, example embodiments are described, and illustrated in the drawings, in terms of functional blocks, units and/or modules. Those skilled in the art will appreciate that these blocks, units and/or modules are physically implemented by electronic (or optical) circuits such as logic circuits, discrete components, microprocessors, hard-wired circuits, memory elements, wiring connections, and the like, which may be formed using semiconductor-based fabrication techniques or other manufacturing technologies. In the case of the blocks, units and/or modules being implemented by microprocessors or similar, they may be programmed using software (e.g., microcode) to perform various functions discussed herein and may optionally be driven by firmware and/or software. Alternatively, each block, unit and/or module may be implemented by dedicated hardware, or as a combination of dedicated hardware to perform some functions and a processor (e.g., one or more programmed microprocessors and associated circuitry) to perform other functions. Also, each block, unit and/or module of the example embodiments may be physically separated into two or more interacting and discrete blocks, units and/or modules without departing from the scope of the inventive concepts. Further, the blocks, units and/or modules of the example embodiments may be physically combined into more complex blocks, units and/or modules without departing from the scope of the present disclosure.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an exemplary system for use in implementing a robust application monitoring module that checks constant health of an application and get notified and alerted when there is any system issue in accordance with the embodiments described herein. The system <b>100</b> is generally shown and may include a computer system <b>102</b>, which is generally indicated.</p><p id="p-0037" num="0036">The computer system <b>102</b> may include a set of instructions that can be executed to cause the computer system <b>102</b> to perform any one or more of the methods or computer-based functions disclosed herein, either alone or in combination with the other described devices. The computer system <b>102</b> may operate as a standalone device or may be connected to other systems or peripheral devices. For example, the computer system <b>102</b> may include, or be included within, any one or more computers, servers, systems, communication networks or cloud environment. Even further, the instructions may be operative in such cloud-based computing environment.</p><p id="p-0038" num="0037">In a networked deployment, the computer system <b>102</b> may operate in the capacity of a server or as a client user computer in a server-client user network environment, a client user computer in a cloud computing environment, or as a peer computer system in a peer-to-peer (or distributed) network environment. The computer system <b>102</b>, or portions thereof, may be implemented as, or incorporated into, various devices, such as a personal computer, a tablet computer, a set-top box, a personal digital assistant, a mobile device, a palmtop computer, a laptop computer, a desktop computer, a communications device, a wireless smart phone, a personal trusted device, a wearable device, a global positioning satellite (GPS) device, a web appliance, or any other machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single computer system <b>102</b> is illustrated, additional embodiments may include any collection of systems or sub-systems that individually or jointly execute instructions or perform functions. The term system shall be taken throughout the present disclosure to include any collection of systems or sub-systems that individually or jointly execute a set, or multiple sets, of instructions to perform one or more computer functions.</p><p id="p-0039" num="0038">As illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the computer system <b>102</b> may include at least one processor <b>104</b>. The processor <b>104</b> is tangible and non-transitory. As used herein, the term &#x201c;non-transitory&#x201d; is to be interpreted not as an eternal characteristic of a state, but as a characteristic of a state that will last for a period of time. The term &#x201c;non-transitory&#x201d; specifically disavows fleeting characteristics such as characteristics of a particular carrier wave or signal or other forms that exist only transitorily in any place at any time. The processor <b>104</b> is an article of manufacture and/or a machine component. The processor <b>104</b> is configured to execute software instructions in order to perform functions as described in the various embodiments herein. The processor <b>104</b> may be a general-purpose processor or may be part of an application specific integrated circuit (ASIC). The processor <b>104</b> may also be a microprocessor, a microcomputer, a processor chip, a controller, a microcontroller, a digital signal processor (DSP), a state machine, or a programmable logic device. The processor <b>104</b> may also be a logical circuit, including a programmable gate array (PGA) such as a field programmable gate array (FPGA), or another type of circuit that includes discrete gate and/or transistor logic. The processor <b>104</b> may be a central processing unit (CPU), a graphics processing unit (GPU), or both. Additionally, any processor described herein may include multiple processors, parallel processors, or both. Multiple processors may be included in, or coupled to, a single device or multiple devices.</p><p id="p-0040" num="0039">The computer system <b>102</b> may also include a computer memory <b>106</b>. The computer memory <b>106</b> may include a static memory, a dynamic memory, or both in communication. Memories described herein are tangible storage mediums that can store data and executable instructions, and are non-transitory during the time instructions are stored therein. Again, as used herein, the term &#x201c;non-transitory&#x201d; is to be interpreted not as an eternal characteristic of a state, but as a characteristic of a state that will last for a period of time. The term &#x201c;non-transitory&#x201d; specifically disavows fleeting characteristics such as characteristics of a particular carrier wave or signal or other forms that exist only transitorily in any place at any time. The memories are an article of manufacture and/or machine component. Memories described herein are computer-readable mediums from which data and executable instructions can be read by a computer. Memories as described herein may be random access memory (RAM), read only memory (ROM), flash memory, electrically programmable read only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), registers, a hard disk, a cache, a removable disk, tape, compact disk read only memory (CD-ROM), digital versatile disk (DVD), floppy disk, blu-ray disk, or any other form of storage medium known in the art. Memories may be volatile or non-volatile, secure and/or encrypted, unsecure and/or unencrypted. Of course, the computer memory <b>106</b> may comprise any combination of memories or a single storage.</p><p id="p-0041" num="0040">The computer system <b>102</b> may further include a display <b>108</b>, such as a liquid crystal display (LCD), an organic light emitting diode (OLED), a flat panel display, a solid-state display, a cathode ray tube (CRT), a plasma display, or any other known display.</p><p id="p-0042" num="0041">The computer system <b>102</b> may also include at least one input device <b>110</b>, such as a keyboard, a touch-sensitive input screen or pad, a speech input, a mouse, a remote control device having a wireless keypad, a microphone coupled to a speech recognition engine, a camera such as a video camera or still camera, a cursor control device, a global positioning system (GPS) device, an altimeter, a gyroscope, an accelerometer, a proximity sensor, or any combination thereof. Those skilled in the art appreciate that various embodiments of the computer system <b>102</b> may include multiple input devices <b>110</b>. Moreover, those skilled in the art further appreciate that the above-listed, exemplary input devices <b>110</b> are not meant to be exhaustive and that the computer system <b>102</b> may include any additional, or alternative, input devices <b>110</b>.</p><p id="p-0043" num="0042">The computer system <b>102</b> may also include a medium reader <b>112</b> which is configured to read any one or more sets of instructions, e.g., software, from any of the memories described herein. The instructions, when executed by a processor, can be used to perform one or more of the methods and processes as described herein. In a particular embodiment, the instructions may reside completely, or at least partially, within the memory <b>106</b>, the medium reader <b>112</b>, and/or the processor <b>110</b> during execution by the computer system <b>102</b>.</p><p id="p-0044" num="0043">Furthermore, the computer system <b>102</b> may include any additional devices, components, parts, peripherals, hardware, software or any combination thereof which are commonly known and understood as being included with or within a computer system, such as, but not limited to, a network interface <b>114</b> and an output device <b>116</b>. The output device <b>116</b> may be, but is not limited to, a speaker, an audio out, a video out, a remote control output, a printer, or any combination thereof.</p><p id="p-0045" num="0044">Each of the components of the computer system <b>102</b> may be interconnected and communicate via a bus <b>118</b> or other communication link. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the components may each be interconnected and communicate via an internal bus. However, those skilled in the art appreciate that any of the components may also be connected via an expansion bus. Moreover, the bus <b>118</b> may enable communication via any standard or other specification commonly known and understood such as, but not limited to, peripheral component interconnect, peripheral component interconnect express, parallel advanced technology attachment, serial advanced technology attachment, etc.</p><p id="p-0046" num="0045">The computer system <b>102</b> may be in communication with one or more additional computer devices <b>120</b> via a network <b>122</b>. The network <b>122</b> may be, but is not limited to, a local area network, a wide area network, the Internet, a telephony network, a short-range network, or any other network commonly known and understood in the art. The short-range network may include, for example, Bluetooth, Zigbee, infrared, near field communication, ultraband, or any combination thereof. Those skilled in the art appreciate that additional networks <b>122</b> which are known and understood may additionally or alternatively be used and that the exemplary networks <b>122</b> are not limiting or exhaustive. Also, while the network <b>122</b> is shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as a wireless network, those skilled in the art appreciate that the network <b>122</b> may also be a wired network.</p><p id="p-0047" num="0046">The additional computer device <b>120</b> is shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as a personal computer. However, those skilled in the art appreciate that, in alternative embodiments of the present application, the computer device <b>120</b> may be a laptop computer, a tablet PC, a personal digital assistant, a mobile device, a palmtop computer, a desktop computer, a communications device, a wireless telephone, a personal trusted device, a web appliance, a server, or any other device that is capable of executing a set of instructions, sequential or otherwise, that specify actions to be taken by that device. Of course, those skilled in the art appreciate that the above-listed devices are merely exemplary devices and that the device <b>120</b> may be any additional device or apparatus commonly known and understood in the art without departing from the scope of the present application. For example, the computer device <b>120</b> may be the same or similar to the computer system <b>102</b>. Furthermore, those skilled in the art similarly understand that the device may be any combination of devices and apparatuses.</p><p id="p-0048" num="0047">Of course, those skilled in the art appreciate that the above-listed components of the computer system <b>102</b> are merely meant to be exemplary and are not intended to be exhaustive and/or inclusive. Furthermore, the examples of the components listed above are also meant to be exemplary and similarly are not meant to be exhaustive and/or inclusive.</p><p id="p-0049" num="0048">In accordance with various embodiments of the present disclosure, the methods described herein may be implemented using a hardware computer system that executes software programs. Further, in an exemplary, non-limited embodiment, implementations can include distributed processing, component/object distributed processing, and an operation mode having parallel processing capabilities. Virtual computer system processing can be constructed to implement one or more of the methods or functionality as described herein, and a processor described herein may be used to support a virtual processing environment.</p><p id="p-0050" num="0049">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a schematic of an exemplary network environment <b>200</b> for implementing a robust application monitoring device (RAMD) of the instant disclosure is illustrated.</p><p id="p-0051" num="0050">According to exemplary embodiments, the above-described problems associated with conventional approach may be overcome by implementing a RAMD <b>202</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> that may provide a platform for implementing a robust application monitoring module on a mainframe system that checks constant health of an application and get notified and alerted when there is any system issue, but the disclosure is not limited thereto. For example, according to exemplary embodiments, the RAMD <b>202</b> may be configured to build a robust application monitoring module on a mainframe system that may intercept, collect and aggregate metrics data real-time and, then may convert them and make them available to third-party tools. Additionally, the RAMD <b>202</b> according to exemplary embodiments may integrate back the alerts and feedbacks provided by the third-party tools back to the mainframe system to take certain actions, but the disclosure is not limited thereto. According to exemplary embodiments, the framework implemented by the RAMD <b>202</b> may be a generic framework that can be implemented on any desired mainframe system and can be adopted for any desired metrics collection and dashboard, but the disclosure is not limited thereto.</p><p id="p-0052" num="0051">The RAMD <b>202</b> may be the same or similar to the computer system <b>102</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0053" num="0052">The RAMD <b>202</b> may store one or more applications that can include executable instructions that, when executed by the RAMD <b>202</b>, cause the RAMD <b>202</b> to perform actions, such as to transmit, receive, or otherwise process network messages, for example, and to perform other actions described and illustrated below with reference to the figures. The application(s) may be implemented as modules or components of other applications. Further, the application(s) can be implemented as operating system extensions, modules, plugins, or the like.</p><p id="p-0054" num="0053">Even further, the application(s) may be operative in a cloud-based computing environment. The application(s) may be executed within or as virtual machine(s) or virtual server(s) that may be managed in a cloud-based computing environment. Also, the application(s), and even the RAMD <b>202</b> itself, may be located in virtual server(s) running in a cloud-based computing environment rather than being tied to one or more specific physical network computing devices. Also, the application(s) may be running in one or more virtual machines (VMs) executing on the RAMD <b>202</b>. Additionally, in one or more embodiments of this technology, virtual machine(s) running on the RAMD <b>202</b> may be managed or supervised by a hypervisor.</p><p id="p-0055" num="0054">In the network environment <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the RAMD <b>202</b> is coupled to a plurality of server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) that hosts a plurality of databases <b>206</b>(<b>1</b>)-<b>206</b>(<i>n</i>), and also to a plurality of client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) via communication network(s) <b>210</b>. A communication interface of the RAMD <b>202</b>, such as the network interface <b>114</b> of the computer system <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, operatively couples and communicates between the RAMD <b>202</b>, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), and/or the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>), which are all coupled together by the communication network(s) <b>210</b>, although other types and/or numbers of communication networks or systems with other types and/or numbers of connections and/or configurations to other devices and/or elements may also be used.</p><p id="p-0056" num="0055">The communication network(s) <b>210</b> may be the same or similar to the network <b>122</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, although the RAMD <b>202</b>, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), and/or the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) may be coupled together via other topologies. Additionally, the network environment <b>200</b> may include other network devices such as one or more routers and/or switches, for example, which are well known in the art and thus will not be described herein.</p><p id="p-0057" num="0056">By way of example only, the communication network(s) <b>210</b> may include local area network(s) (LAN(s)) or wide area network(s) (WAN(s)), and can use TCP/IP over Ethernet and industry-standard protocols, although other types and/or numbers of protocols and/or communication networks may be used. The communication network(s) <b>202</b> in this example may employ any suitable interface mechanisms and network communication technologies including, for example, teletraffic in any suitable form (e.g., voice, modem, and the like), Public Switched Telephone Network (PSTNs), Ethernet-based Packet Data Networks (PDNs), combinations thereof, and the like.</p><p id="p-0058" num="0057">The RAMD <b>202</b> may be a standalone device or integrated with one or more other devices or apparatuses, such as one or more of the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), for example. In one particular example, the RAMD <b>202</b> may be hosted by one of the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), and other arrangements are also possible. Moreover, one or more of the devices of the RAMD <b>202</b> may be in the same or a different communication network including one or more public, private, or cloud networks, for example.</p><p id="p-0059" num="0058">The plurality of server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) may be the same or similar to the computer system <b>102</b> or the computer device <b>120</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, including any features or combination of features described with respect thereto. For example, any of the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) may include, among other features, one or more processors, a memory, and a communication interface, which are coupled together by a bus or other communication link, although other numbers and/or types of network devices may be used. The server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) in this example may process requests received from the RAMD <b>202</b> via the communication network(s) <b>210</b> according to the HTTP-based and/or JavaScript Object Notation (JSON) protocol, for example, although other protocols may also be used.</p><p id="p-0060" num="0059">The server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) may be hardware or software or may represent a system with multiple servers in a pool, which may include internal or external networks. The server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) hosts the databases <b>206</b>(<b>1</b>)-<b>206</b>(<i>n</i>) that are configured to store metadata sets, data quality rules, and newly generated data.</p><p id="p-0061" num="0060">Although the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) are illustrated as single devices, one or more actions of each of the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) may be distributed across one or more distinct network computing devices that together comprise one or more of the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>). Moreover, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) are not limited to a particular configuration. Thus, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) may contain a plurality of network computing devices that operate using a master/slave approach, whereby one of the network computing devices of the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) operates to manage and/or otherwise coordinate operations of the other network computing devices.</p><p id="p-0062" num="0061">The server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) may operate as a plurality of network computing devices within a cluster architecture, a peer-to peer architecture, virtual machines, or within a cloud architecture, for example. Thus, the technology disclosed herein is not to be construed as being limited to a single environment and other configurations and architectures are also envisaged.</p><p id="p-0063" num="0062">The plurality of client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) may also be the same or similar to the computer system <b>102</b> or the computer device <b>120</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, including any features or combination of features described with respect thereto. Client device in this context refers to any computing device that interfaces to communications network(s) <b>210</b> to obtain resources from one or more server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>) or other client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>).</p><p id="p-0064" num="0063">According to exemplary embodiments, the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) in this example may include any type of computing device that can facilitate the implementation of the RAMD <b>202</b> that may efficiently provide a platform for implementing a robust application monitoring module on a mainframe system that checks constant health of an application and get notified and alerted when there is any system issue, but the disclosure is not limited thereto.</p><p id="p-0065" num="0064">The client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) may run interface applications, such as standard web browsers or standalone client applications, which may provide an interface to communicate with the RAMD <b>202</b> via the communication network(s) <b>210</b> in order to communicate user requests. The client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) may further include, among other features, a display device, such as a display screen or touchscreen, and/or an input device, such as a keyboard, for example</p><p id="p-0066" num="0065">Although the exemplary network environment <b>200</b> with the RAMD <b>202</b>, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>), and the communication network(s) <b>210</b> are described and illustrated herein, other types and/or numbers of systems, devices, components, and/or elements in other topologies may be used. It is to be understood that the systems of the examples described herein are for exemplary purposes, as many variations of the specific hardware and software used to implement the examples are possible, as will be appreciated by those skilled in the relevant art(s).</p><p id="p-0067" num="0066">One or more of the devices depicted in the network environment <b>200</b>, such as the RAMD <b>202</b>, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), or the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>), for example, may be configured to operate as virtual instances on the same physical machine. For example, one or more of the RAMD <b>202</b>, the server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), or the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) may operate on the same physical device rather than as separate devices communicating through communication network(s) <b>210</b>. Additionally, there may be more or fewer RAMDs <b>202</b>, server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), or client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) than illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. According to exemplary embodiments, the RAMD <b>202</b> may be configured to send code at run-time to remote server devices <b>204</b>(<b>1</b>)-<b>204</b>(<i>n</i>), but the disclosure is not limited thereto.</p><p id="p-0068" num="0067">In addition, two or more computing systems or devices may be substituted for any one of the systems or devices in any example Accordingly, principles and advantages of distributed processing, such as redundancy and replication also may be implemented, as desired, to increase the robustness and performance of the devices and systems of the examples. The examples may also be implemented on computer system(s) that extend across any suitable network using any suitable interface mechanisms and traffic technologies, including by way of example only teletraffic in any suitable form (e.g., voice and modem), wireless traffic networks, cellular traffic networks, Packet Data Networks (PDNs), the Internet, intranets, and combinations thereof.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a system diagram for implementing a RAMD having a robust application monitoring module (RAMM) in accordance with an exemplary embodiment.</p><p id="p-0070" num="0069">As illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the system <b>300</b> may include a RAMD <b>302</b> within which a RAMM <b>306</b> is embedded, a server <b>304</b>, a database(s) <b>312</b>, a plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>), and a communication network <b>310</b>.</p><p id="p-0071" num="0070">According to exemplary embodiments, the RAMD <b>302</b> including the RAMM <b>306</b> may be connected to the server <b>304</b>, and the database(s) <b>312</b> via the communication network <b>310</b>. Although there is only one database has been illustrated, the disclosure is not limited thereto. Any number of databases may be utilized. The RAMD <b>302</b> may also be connected to the plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) via the communication network <b>310</b>, but the disclosure is not limited thereto.</p><p id="p-0072" num="0071">According to exemplary embodiment, the RAMD <b>302</b> is described and shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as including the RAMM <b>306</b>, although it may include other rules, policies, modules, databases, or applications, for example According to exemplary embodiments, the database(s) <b>312</b> may be embedded within the RAMD <b>302</b>. According to exemplary embodiments, the database(s) <b>312</b> may be configured to store user information data, card transaction data, payment format data etc., but the disclosure is not limited thereto.</p><p id="p-0073" num="0072">According to exemplary embodiments, the RAMM <b>306</b> may be configured to receive real-time feed of data from the plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) via the communication network <b>310</b>.</p><p id="p-0074" num="0073">According to exemplary embodiments, as will be described below, the RAMM <b>306</b> may be configured to receive a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called a socket manager corresponding to a card transaction; collect application data from the message in connection with the card transaction; aggregate and store a subset of the application data in a dynamically allocated shared memory and store location of the dynamically allocated shared memory in a CWA (common work area) which has a limited storage capacity but is known and accessible to all the process running in a same CICS region; implement a monitor process to obtain the location of the dynamically allocated shared memory by accessing the CWA and read the aggregated application data from the shared memory; store a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager; compute a delta or difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue for that socket manager; convert, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform; and publish the converted message onto the desired messaging platform, but the disclosure is not limited thereto.</p><p id="p-0075" num="0074">The plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) are illustrated as being in communication with the RAMD <b>302</b>. In this regard, the plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) may be &#x201c;clients&#x201d; of the RAMD <b>302</b> and are described herein as such. Nevertheless, it is to be known and understood that the plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) need not necessarily be &#x201c;clients&#x201d; of the RAMD <b>302</b>, or any entity described in association therewith herein. Any additional or alternative relationship may exist between either or both of the plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) and the RAMD <b>302</b>, or no relationship may exist.</p><p id="p-0076" num="0075">The first client device <b>308</b>(<b>1</b>) may be, for example, a smart phone. Of course, the first client device <b>308</b>(<b>1</b>) may be any additional device described herein. The second client device <b>308</b>(<i>n</i>) may be, for example, a personal computer (PC). Of course, the second client device <b>308</b>(<i>n</i>) may also be any additional device described herein. According to exemplary embodiments, the server <b>304</b> may be the same or equivalent to the server device <b>204</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0077" num="0076">The process may be executed via the communication network <b>310</b>, which may comprise plural networks as described above. For example, in an exemplary embodiment, one or more of the plurality of client devices <b>308</b>(<b>1</b>) . . . <b>308</b>(<i>n</i>) may communicate with the RAMD <b>302</b> via broadband or cellular communication. Of course, these embodiments are merely exemplary and are not limiting or exhaustive.</p><p id="p-0078" num="0077">The computing device <b>301</b> may be the same or similar to any one of the client devices <b>208</b>(<b>1</b>)-<b>208</b>(<i>n</i>) as described with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, including any features or combination of features described with respect thereto. The RAMD <b>302</b> may be the same or similar to the RAMD <b>202</b> as described with respect to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, including any features or combination of features described with respect thereto.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a system diagram for implementing a robust application monitoring and dashboard module (RAMM) of <figref idref="DRAWINGS">FIG. <b>3</b></figref> in accordance with an exemplary embodiment.</p><p id="p-0080" num="0079">According to exemplary embodiments, the system <b>400</b> may include a robust application monitoring device (RAMD) <b>402</b> within which a RAMM <b>406</b> is embedded, a server <b>404</b>, a database(s) <b>412</b>, and a communication network <b>410</b>.</p><p id="p-0081" num="0080">According to exemplary embodiments, the RAMD <b>402</b> including the RAMM <b>406</b> may be connected to the server <b>404</b>, and the database(s) <b>412</b> via the communication network <b>410</b>. The RAMD <b>402</b> may also be connected to the plurality of client devices <b>408</b>(<b>1</b>) . . . <b>408</b>(<i>n</i>) via the communication network <b>410</b>, but the disclosure is not limited thereto. According to exemplary embodiments, the RAMD <b>402</b>, the RAMM <b>406</b>, the database(s) <b>412</b>, the server <b>404</b>, the client devices <b>408</b>(<b>1</b>)-<b>408</b>(<i>n</i>), and the communication network <b>410</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be the same or similar to the RAMD <b>302</b>, the RAMM <b>306</b>, the database(s) <b>312</b>, the server <b>304</b>, the client devices <b>308</b>(<b>1</b>)-<b>308</b>(<i>n</i>), and the communication network <b>310</b>, respectively, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0082" num="0081">According to exemplary embodiments, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the RAMM <b>406</b> may include a receiving module <b>414</b>, a collecting module <b>416</b>, a storing module <b>418</b>, an aggregating module <b>420</b>, a reading module <b>422</b>, a converting module <b>424</b>, a publishing module <b>426</b>, a communication module <b>428</b> and a command processor module <b>430</b>.</p><p id="p-0083" num="0082">The process may be executed via the communication module <b>428</b> and the communication network <b>410</b>, which may comprise plural networks as described above. For example, in an exemplary embodiment, the various components of the RAMM <b>406</b> may communicate with the server <b>404</b>, and the database(s) <b>412</b> via the communication module <b>428</b> and the communication network <b>410</b>. Of course, these embodiments are merely exemplary and are not limiting or exhaustive.</p><p id="p-0084" num="0083">According to exemplary embodiments, the communication network <b>410</b> and the communication module <b>428</b> may be configured to establish a link between the database(s) <b>412</b>, the client devices <b>408</b>(<b>1</b>)-<b>408</b>(<i>n</i>) and the RAMM <b>406</b>.</p><p id="p-0085" num="0084">According to exemplary embodiments, each of the receiving module <b>414</b>, collecting module <b>416</b>, storing module <b>418</b>, aggregating module <b>420</b>, reading module <b>422</b>, converting module <b>424</b>, publishing module <b>426</b>, communication module <b>428</b> and the command processor module <b>430</b> may be implemented by microprocessors or similar, they may be programmed using software (e.g., microcode) to perform various functions discussed herein and may optionally be driven by firmware and/or software. Alternatively, each of the receiving module <b>414</b>, collecting module <b>416</b>, storing module <b>418</b>, aggregating module <b>420</b>, reading module <b>422</b>, converting module <b>424</b>, publishing module <b>426</b>, communication module <b>428</b> and the command processor module <b>430</b> may be implemented by dedicated hardware, or as a combination of dedicated hardware to perform some functions and a processor (e.g., one or more programmed microprocessors and associated circuitry) to perform other functions. Also, according to exemplary embodiments, each of the receiving module <b>414</b>, collecting module <b>416</b>, storing module <b>418</b>, aggregating module <b>420</b>, reading module <b>422</b>, converting module <b>424</b>, publishing module <b>426</b>, communication module <b>428</b> and the command processor module <b>430</b> may be physically separated into two or more interacting and discrete blocks, units, devices, and/or modules without departing from the scope of the inventive concepts.</p><p id="p-0086" num="0085">According to exemplary embodiments, each of the receiving module <b>414</b>, collecting module <b>416</b>, storing module <b>418</b>, aggregating module <b>420</b>, reading module <b>422</b>, converting module <b>424</b>, publishing module <b>426</b>, communication module <b>428</b> and the command processor module <b>430</b> of the RAMM <b>406</b> may be called by corresponding API, but the disclosure is not limited thereto.</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary system architecture <b>500</b> with the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> in accordance with an exemplary embodiment. <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an exemplary metrics collection and conversion process <b>600</b> implemented by the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> in accordance with an exemplary embodiment. <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an exemplary framework <b>700</b> implemented by the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> for batch applications in accordance with an exemplary embodiment.</p><p id="p-0088" num="0087">Referring to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>7</b></figref>, according to exemplary embodiments, the receiving module <b>414</b> may be configured to receive a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called a socket manager corresponding to a card transaction.</p><p id="p-0089" num="0088">According to exemplary embodiments, the collecting module <b>416</b> may be configured to collect application data from the message in connection with the card transaction.</p><p id="p-0090" num="0089">According to exemplary embodiments, the aggregating module <b>420</b> and the storing module may be configured to aggregate and store a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) (e.g., a common memory as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) which has limited storage capacity but is known and accessible to all the process running in a same CICS region.</p><p id="p-0091" num="0090">According to exemplary embodiments, the RAMM <b>406</b> may be configured to implement a monitor process to obtain the location of the dynamically allocated shared memory (e.g., a common memory as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) by accessing the CWA and reading the aggregated application data from the shared memory by utilizing the reading module <b>422</b>.</p><p id="p-0092" num="0091">According to exemplary embodiments, the storing module <b>418</b> may be configured to store a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager; computing a delta or difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue (i.e., <b>504</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>604</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) for that socket manager. According to exemplary embodiments, the storing module <b>418</b> may be further configured to store, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart.</p><p id="p-0093" num="0092">According to exemplary embodiments, the converting module <b>424</b> may be configured to convert, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform</p><p id="p-0094" num="0093">According to exemplary embodiments, the publishing module <b>426</b> may be configured to publish the converted message onto the desired messaging platform.</p><p id="p-0095" num="0094">According to exemplary embodiments, the command processor module <b>430</b> may be configured to receive the feedback/alerts from the visualization tools. For example, according to exemplary embodiments, the dynamically allocated shared memory may contain command/action data also along with the metrics and statistical data. The command provided from action system, which can be feedback coming back as alerts, action from third-party application system or a green screen application, can be acted by the socket manager. Examples of those actions can be stop or recycle socket manager, enable debugging and tracing of messages, route incoming message traffic to a healthy socket manager, etc., but the disclosure is not limited thereto.</p><p id="p-0096" num="0095">According to exemplary embodiments, storing the data in dynamically allocated shared memory by the storing module <b>418</b> may give access to multiple processes to read and update the data simultaneously. For example, the socket manager can update the metrics and statistical data; the monitor process implemented by the RAMM <b>406</b> can read the latest data and feedback process can apply command on the shared memory which are picked up by socket manager to perform automated actions.</p><p id="p-0097" num="0096">According to exemplary embodiments, wherein the transient data queue (i.e., <b>504</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>604</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) may be implemented in an environment that utilizes mixed-language application servers that provide online transaction management and connectivity for applications on predefined mainframe systems (i.e., mainframe <b>502</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> and/or mainframe <b>702</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>), but the disclosure is not limited thereto.</p><p id="p-0098" num="0097">According to exemplary embodiments, wherein the application data may include metrics and statistical data corresponding to the card transaction, but the disclosure is not limited thereto.</p><p id="p-0099" num="0098">According to exemplary embodiments, wherein the predefined first format is COBOL copybook format, but the disclosure is not limited thereto, and wherein the predefined second format may include one or more of the following formats: .JSON, .CSV, .HTML, .XML, and .XLS, but the disclosure is not limited thereto.</p><p id="p-0100" num="0099">According to exemplary embodiments, the receiving module <b>414</b> may be configured to receive a plurality of payment authorization request messages via a plurality of communication protocol sockets each including a corresponding socket manager. The storing module <b>418</b> may be configured to store the metrics and statistical data in a corresponding transient data queue (i.e., <b>504</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>604</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) attached to the corresponding socket manager.</p><p id="p-0101" num="0100">According to exemplary embodiment, the collecting module <b>416</b> may be configured to periodically collect metrics and statistical data from all socket manager and store it on shared memory(i.e., <b>504</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>).</p><p id="p-0102" num="0101">According to exemplary embodiments the aggregating module <b>420</b> may be configured to aggregate and store the collected metrics and statistical data from all of the socket manager transient data queues (i.e., <b>504</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>604</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) onto a shared memory (e.g., a common memory as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>).</p><p id="p-0103" num="0102">According to exemplary embodiments, a plurality of visualization tools (<b>520</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>720</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>) may consume the formatted message from the desired messaging platform (<b>516</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>716</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>). According to exemplary embodiments, the plurality of visualization tools (<b>520</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b> and/or <b>720</b></figref> as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>) may provide dashboard feature via different visualization charts such as but not limited to pie chart, bar chart, scattered plot, line plot, time series, etc., but the disclosure is not limited thereto.</p><p id="p-0104" num="0103">According to exemplary embodiments, the RAMM <b>406</b>, <b>506</b> may identify an alert in accordance with predefined rules; transmit the alter or provide feedback data to mainframe system <b>502</b>, <b>702</b> where the application is running via corresponding application programming interface (API) or message queue (MQ) <b>510</b>, <b>610</b>, <b>710</b> by utilizing the notification block <b>522</b>, <b>722</b>; and trigger an automatic predefined mitigation process in one scenario by updating the command section of the shared memory that is watched constantly or periodically by the socket manager, in response to receiving the alert, to mitigate issues identified in the alert or the feedback data.</p><p id="p-0105" num="0104">As disclosed above, <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an exemplary system architecture <b>500</b> with the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> in accordance with an exemplary embodiment. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a card authorization application on mainframe system <b>502</b> runs on CICS environment <b>503</b><i>a </i>and receives the payment authorization request messages via TCPIP sockets. The TCPIP communicator program called socket manager then forwards the messages to the backend process where data enrichment and decisioning happens.</p><p id="p-0106" num="0105">According to the exemplary system architecture <b>500</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, at step 1, a long running process running in the same CICS region <b>503</b><i>a </i>as socket manager intercepts the messages that are exchanged by socket manager programs with backend, collects and calculates the important metrics by utilizing the metrics collector <b>504</b>. At step 2, the metrics are stored in individual TSQ <b>504</b> attached to the socket manager program. At step 3, the application metrics data collected by the COBOL program converts the message from COBOL layout to JSON layout using the JSON generator API available in COBOL version 6 by utilizing the aggregator and message converter <b>508</b>. At step 4, the JSON converted metrics is written into MQ <b>510</b> (e.g., an IBM MQ). At step 5, the JSON messages from IBM MQ <b>510</b> triggers a COBOL CICS program <b>512</b> on another CICS region <b>503</b><i>b </i>on which a virtual machine <b>514</b> (e.g., Java Virtual Machine) is being activated. At step 6, the COBOL program formats the messages and link a Java process running inside the virtual machine <b>514</b> publishes the messages to a messaging Kafka topic using Kafka client libraries. At step 7, the Java process publishes the JSON message to a messaging platform <b>516</b> (e.g., Kafka). Once the messages are published to Kafka topic, they are consumed by loader process to database <b>518</b> and is available for consumption by a visualization tool <b>520</b> like Kibana, Grafana, etc. At step 8, the visualization tool <b>520</b> identifies the alert as per rule defined and sends an alert/feedback to the mainframe system <b>502</b> via API, MQ, etc., by utilizing the notification block <b>522</b>. At step 9, the triggered process on receiving the alert takes appropriate action as pre-defined to mitigate the issue in an automated fashion.</p><p id="p-0107" num="0106">According to exemplary embodiments, the MQ message triggers the CICS transaction that reads the MQ message; creates and appends an INDEX/KEY to the message to be used in data store. The COBOL program link to the Java JVM (e.g., virtual machine <b>514</b>) process running in the same CICS region <b>503</b><i>b </i>and then passes the prepared message for publish. The Java JVM process collects the JSON formatted message from COBOL; converts from EBCDIC to ASCII; and publishes the messages to Kafka topic using Kafka client libraries.</p><p id="p-0108" num="0107">According to exemplary embodiments, data collected for recovery purpose may be stored onto database <b>509</b> on mainframe. For example, according to exemplary embodiment, the application may also store the metrics and statistical data on to persistence data store like database <b>509</b> or file, thereby providing the ability to recover and replay the data in case of system failure or reboot.</p><p id="p-0109" num="0108">As disclosed above, <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an exemplary metrics collection and conversion process <b>600</b> implemented by the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> in accordance with an exemplary embodiment. According to exemplary embodiments, the socket manager process are CICS (e.g., <b>603</b> in <figref idref="DRAWINGS">FIG. <b>6</b></figref>) COBOL program that implements TCPIP socket interface to receive and send messages (e.g., credit card authorization request). The messages are delivered to backend for processing business logic and the reply is sent back via TCPIP connection.</p><p id="p-0110" num="0109">According to exemplary embodiments, the socket manager (e.g., SM1, SM2, . . . SMn) is initiated when a connection request is made by another system (e.g., client), and at its startup process&#x2014;i) acquires a memory location in shared mode; the metrics and statistical data will be stored in that memory; and ii) obtains the address to a common memory <b>606</b> which is accessible to all processes running in that CICS region <b>603</b> and inserts a record that indicates the location of the shared memory.</p><p id="p-0111" num="0110">According to exemplary embodiments, the socket manager (e.g., SM1, SM2, . . . SMn) constantly collects the metrics data from each business messages and update them on shared memory thus making it instantly available.</p><p id="p-0112" num="0111">A long running CICS process (A) that runs periodically finds the location of the shared memory <b>606</b> for each socket manager (e.g., SM1, SM2, . . . SMn) by accessing the common memory <b>606</b> which implements the following processes: i) creates a CICS TSQ to store the last collected metrics; ii) from each shared memory collects the latest metrics and compare them with last stored data in TSQ to generate the delta; iii) once the delta for that interval is calculated, it stores the latest values to the TSQ.</p><p id="p-0113" num="0112">According to exemplary embodiments, the new metrics calculated is then passed to a converter (C) which takes the message in COPYBOOK format and converts it into JSON format by using the COBOL 6 JSON converter API. The message is also converted to UTF-8 format from EBCDIC format that mainframe system use.</p><p id="p-0114" num="0113">Finally, the JSON formatted message is put into the MQ <b>610</b>.</p><p id="p-0115" num="0114">As disclosed above, <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an exemplary framework <b>700</b> implemented by the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> for batch applications in accordance with an exemplary embodiment. In batch pattern, the framework <b>700</b> also provides seamless integration for batch applications. In this scenario, the metrics and stats collected (e.g., by utilizing the metrics collector <b>704</b>) by batch process (Mainframe Batch Jobs) are converted (e.g., by utilizing the JSON converter <b>706</b>) and inserted to MQ <b>710</b> directly from the batch process. The JSON converter <b>706</b> is common for both online CICS as illustrated in <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>6</b></figref> and batch process as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0116" num="0115">Rules can be set on dashboard tools like Grafana, Kibana, etc. which can send the alerts when a threshold is breached to the system to perform certain actions. The actions can be delivered via API, MQ, gRPC, etc. calls.</p><p id="p-0117" num="0116">Mainframe system <b>702</b> exposes listeners that listens to the incoming alerts via any of these channels and take predefined action e.g., routing the traffic to healthy nodes/serves, scaling up or scaling down capacity, etc.</p><p id="p-0118" num="0117">For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the JSON messages from the MQ <b>710</b> triggers a COBOL CICS program <b>712</b> on CICS region <b>703</b><i>b </i>on which a virtual machine <b>714</b> (e.g., Java Virtual Machine) is being activated. The COBOL program formats the messages and link a Java process running inside the virtual machine <b>714</b> publishes the messages to a messaging Kafka topic using Kafka client libraries. The Java process publishes the JSON message to a messaging platform <b>716</b> (e.g., Kafka). Once the messages are published to Kafka topic, they are consumed by loader process to database <b>718</b> and is available for consumption by a visualization tool <b>720</b> like Kibana, Grafana, etc. The visualization tool <b>720</b> identifies the alert as per rule defined and sends an alert/feedback to the mainframe system <b>702</b> via API, MQ, gRPC, etc. calls by utilizing the notification block <b>722</b>. The triggered process on receiving the alert takes appropriate action as pre-defined to mitigate the issue in an automated fashion.</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a flow chart of a process <b>800</b> implemented by the RAMM <b>406</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> for automatic generation of a contract data tree structure of a plurality of contracts in accordance with an exemplary embodiment. It will be appreciated that the illustrated process <b>800</b> and associated steps may be performed in a different order, with illustrated steps omitted, with additional steps added, or with a combination of reordered, combined, omitted, or additional steps.</p><p id="p-0120" num="0119">As illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, at step S<b>802</b>, the process <b>800</b> may include receiving a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called socket manager corresponding to a card transaction.</p><p id="p-0121" num="0120">At step S<b>804</b>, the process <b>800</b> may include collecting application data from the message in connection with the card transaction.</p><p id="p-0122" num="0121">At step S<b>806</b>, the process <b>800</b> may include aggregating and storing a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) accessible to all processes running in a same CICS region.</p><p id="p-0123" num="0122">At step S<b>808</b>, the process <b>800</b> may include implementing a monitoring process to obtain the location of the dynamically allocated shared memory by accessing the CWA and reading the aggregated application data from the dynamically allocated shared memory.</p><p id="p-0124" num="0123">At step S<b>810</b>, the process <b>800</b> may include storing a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager.</p><p id="p-0125" num="0124">At step S<b>812</b>, the process <b>800</b> may include computing a difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue for that socket manager.</p><p id="p-0126" num="0125">At step S<b>814</b>, the process <b>800</b> may include converting, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform.</p><p id="p-0127" num="0126">At step S<b>816</b>, the process <b>800</b> may include publishing the converted message onto the desired messaging platform.</p><p id="p-0128" num="0127">According to another aspect of the present disclosure, wherein in the process <b>800</b>, the transient data queue may be implemented in an environment that utilizes mixed-language application servers that provide online transaction management and connectivity for applications on predefined mainframe systems, but the disclosure is not limited thereto.</p><p id="p-0129" num="0128">According to exemplary embodiments, the process <b>800</b> may further include: receiving a plurality of payment authorization request messages via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager; storing the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager; periodically collecting metrics and statistical data from all socket manager transient data queues; and aggregating and storing the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory. For example, according to exemplary embodiments, the data may flow from the dynamically allocated shred memory to the transient data queues.</p><p id="p-0130" num="0129">According to exemplary embodiments, the process <b>800</b> may further include: consuming the formatted message from the desired messaging platform by a plurality of visualization tools that provides dashboard feature via different visualization charts such as but not limited to pie chart, bar chart, scattered plot, line plot, time series, etc., but the disclosure is not limited thereto. According to exemplary embodiments, at step S<b>818</b>, the process may further include identifying an alert in accordance with predefined rules. At step S<b>820</b>, the process <b>800</b> may further include transmitting the alter or provide feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ). At step S<b>822</b>, the process <b>800</b> may further include triggering an automatic predefined mitigation process in one scenario by updating the command section of the shared memory that is watched constantly or periodically by the socket manager, in response to receiving the alert, to mitigate issues identified in the alert or the feedback data.</p><p id="p-0131" num="0130">According to exemplary embodiments, the RAMD <b>402</b> may include a memory (e.g., a memory <b>106</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) which may be a non-transitory computer readable medium that may be configured to store instructions for implementing a RAMM <b>406</b> for monitoring an application as disclosed herein. The RAMD <b>402</b> may also include a medium reader (e.g., a medium reader <b>112</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) which may be configured to read any one or more sets of instructions, e.g., software, from any of the memories described herein. The instructions, when executed by a processor embedded within the RAMM <b>406</b> or within the RAMD <b>402</b>, may be used to perform one or more of the methods and processes as described herein. In a particular embodiment, the instructions may reside completely, or at least partially, within the memory <b>106</b>, the medium reader <b>112</b>, and/or the processor <b>104</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>) during execution by the RAMD <b>402</b>.</p><p id="p-0132" num="0131">According to exemplary embodiments, the instructions, when executed, may cause the processor <b>104</b> to perform the following: receiving a payment authorization request message having a predefined first format via a communication protocol TCPIP socket including an application process called socket manager corresponding to a card transaction; collecting application data from the message in connection with the card transaction; aggregating and storing a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) accessible to all processes running in a same CICS region; implementing a monitoring process to obtain the location of the dynamically allocated shared memory by accessing the CWA and reading the aggregated application data from the dynamically allocated shared memory; storing a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager; computing a difference of the metrics data by comparing the data with the dynamically allocated shared memory with last saved values of transient data queue for that socket manager; converting, in response to reading, the predefined first format of the aggregated subset of payment authorization request message to a predefined second format suitable for publishing onto a desired messaging platform; and publishing the converted message onto the desired messaging platform.</p><p id="p-0133" num="0132">According to exemplary embodiments, the instructions, when executed, may cause the processor <b>104</b> to further perform the following: receiving a plurality of payment authorization request messages via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager; storing the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager; periodically collecting metrics and statistical data from all socket manager transient data queues; and aggregating and storing the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory. For example, according to exemplary embodiments, the data may flow from the dynamically allocated shred memory to the transient data queues.</p><p id="p-0134" num="0133">According to exemplary embodiments, the instructions, when executed, may cause the processor <b>104</b> to further perform the following: consuming the formatted message from the desired messaging platform by a plurality of visualization tools that provides dashboard feature via different visualization charts such as but not limited to pie chart, bar chart, scattered plot, line plot, time series, etc.; identifying an alert in accordance with predefined rules; transmitting the alter or provide feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and triggering an automatic predefined mitigation process in one scenario by updating the command section of the shared memory that is watched constantly or periodically by the socket manager, in response to receiving the alert, to mitigate issues identified in the alert or the feedback data.</p><p id="p-0135" num="0134">According to exemplary embodiments as disclosed above in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>, technical improvements effected by the instant disclosure may include a platform for implementing a robust application monitoring module on a mainframe system that checks constant health of an application and get notified and alerted when there is any system issue, but the disclosure is not limited thereto. For example, according to exemplary embodiments as disclosed above in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>, technical improvements effected by the instant disclosure may include a platform for building a robust application monitoring module on a mainframe system that may intercept, collect and aggregate metrics data real-time and, then may convert them and make them available to third-party tools. Additionally, according to exemplary embodiments as disclosed above in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>, technical improvements effected by the instant disclosure may include a platform for implementing a robust application monitoring module that can integrate back the alerts and feedbacks provided by the third-party tools back to the mainframe system to take certain actions, but the disclosure is not limited thereto. According to exemplary embodiments as disclosed above in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>8</b></figref>, technical improvements effected by the instant disclosure may include a platform for implementing the robust application monitoring module that is a generic framework that can be implemented on any desired mainframe system and can be adopted for any desired metrics collection and dashboard, but the disclosure is not limited thereto.</p><p id="p-0136" num="0135">Although the invention has been described with reference to several exemplary embodiments, it is understood that the words that have been used are words of description and illustration, rather than words of limitation. Changes may be made within the purview of the appended claims, as presently stated and as amended, without departing from the scope and spirit of the present disclosure in its aspects. Although the invention has been described with reference to particular means, materials and embodiments, the invention is not intended to be limited to the particulars disclosed; rather the invention extends to all functionally equivalent structures, methods, and uses such as are within the scope of the appended claims.</p><p id="p-0137" num="0136">For example, while the computer-readable medium may be described as a single medium, the term &#x201c;computer-readable medium&#x201d; includes a single medium or multiple media, such as a centralized or distributed database, and/or associated caches and servers that store one or more sets of instructions. The term &#x201c;computer-readable medium&#x201d; shall also include any medium that is capable of storing, encoding or carrying a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the embodiments disclosed herein.</p><p id="p-0138" num="0137">The computer-readable medium may comprise a non-transitory computer-readable medium or media and/or comprise a transitory computer-readable medium or media. In a particular non-limiting, exemplary embodiment, the computer-readable medium can include a solid-state memory such as a memory card or other package that houses one or more non-volatile read-only memories. Further, the computer-readable medium can be a random access memory or other volatile re-writable memory. Additionally, the computer-readable medium can include a magneto-optical or optical medium, such as a disk or tapes or other storage device to capture carrier wave signals such as a signal communicated over a transmission medium. Accordingly, the disclosure is considered to include any computer-readable medium or other equivalents and successor media, in which data or instructions may be stored.</p><p id="p-0139" num="0138">Although the present application describes specific embodiments which may be implemented as computer programs or code segments in computer-readable media, it is to be understood that dedicated hardware implementations, such as application specific integrated circuits, programmable logic arrays and other hardware devices, can be constructed to implement one or more of the embodiments described herein. Applications that may include the various embodiments set forth herein may broadly include a variety of electronic and computer systems. Accordingly, the present application may encompass software, firmware, and hardware implementations, or combinations thereof. Nothing in the present application should be interpreted as being implemented or implementable solely with software and not hardware.</p><p id="p-0140" num="0139">Although the present specification describes components and functions that may be implemented in particular embodiments with reference to particular standards and protocols, the disclosure is not limited to such standards and protocols. Such standards are periodically superseded by faster or more efficient equivalents having essentially the same functions. Accordingly, replacement standards and protocols having the same or similar functions are considered equivalents thereof.</p><p id="p-0141" num="0140">The illustrations of the embodiments described herein are intended to provide a general understanding of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure, such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Additionally, the illustrations are merely representational and may not be drawn to scale. Certain proportions within the illustrations may be exaggerated, while other proportions may be minimized Accordingly, the disclosure and the figures are to be regarded as illustrative rather than restrictive.</p><p id="p-0142" num="0141">One or more embodiments of the disclosure may be referred to herein, individually and/or collectively, by the term &#x201c;invention&#x201d; merely for convenience and without intending to voluntarily limit the scope of this application to any particular invention or inventive concept. Moreover, although specific embodiments have been illustrated and described herein, it should be appreciated that any subsequent arrangement designed to achieve the same or similar purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all subsequent adaptations or variations of various embodiments. Combinations of the above embodiments, and other embodiments not specifically described herein, will be apparent to those of skill in the art upon reviewing the description.</p><p id="p-0143" num="0142">The Abstract of the Disclosure is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter may be directed to less than all of the features of any of the disclosed embodiments. Thus, the following claims are incorporated into the Detailed Description, with each claim standing on its own as defining separately claimed subject matter.</p><p id="p-0144" num="0143">The above disclosed subject matter is to be considered illustrative, and not restrictive, and the appended claims are intended to cover all such modifications, enhancements, and other embodiments which fall within the true spirit and scope of the present disclosure. Thus, to the maximum extent allowed by law, the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents, and shall not be restricted or limited by the foregoing detailed description.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for monitoring application by utilizing one or more processors and one or more memories, the method comprising:<claim-text>calling, by an application process, a socket manager corresponding to a card transaction;</claim-text></claim-text><claim-text>receiving, via a communication protocol TCPIP socket including the application process called socket manager corresponding to the card transaction, a request to authorize a payment having a COBOL copybook format;<claim-text>collecting application data from the request in connection with the card transaction;</claim-text><claim-text>aggregating and storing a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) accessible to all processes running in a same CICS region;</claim-text><claim-text>implementing a monitoring process to obtain the location of the dynamically allocated shared memory by accessing the CWA and reading the aggregated application data from the dynamically allocated shared memory;</claim-text><claim-text>storing a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager;</claim-text><claim-text>computing a difference of the metrics data by computing a difference between the data with the dynamically allocated shared memory and last saved values of transient data queue for that socket manager;</claim-text><claim-text>storing, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart;</claim-text><claim-text>converting, in response to reading, the the COBOL copybook format of the aggregated subset of the request to authorize the payment to a predefined second format suitable for publishing onto a desired messaging platform; and</claim-text><claim-text>publishing the converted request onto the desired messaging platform.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, the method further comprising: implementing the transient data queue in an environment that utilizes mixed-language application servers that provide online transaction management and connectivity for applications on predefined mainframe systems.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the application data includes metrics and statistics of the card transaction.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. (canceled)</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the COBOL copybook format is converted to one or more of the following formats: .JSON, .CSV, .HTML, .XML, and .XLS.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving a plurality of requests to authorize payments via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager;</claim-text><claim-text>storing the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager;</claim-text><claim-text>periodically collecting metrics and statistical data from all socket manager transient data queues; and</claim-text><claim-text>aggregating and storing the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>consuming the converted request from the desired messaging platform by a plurality of visualization tools;</claim-text><claim-text>identifying an alert in accordance with predefined rules;</claim-text><claim-text>transmitting the alert or providing feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and</claim-text><claim-text>in response to receiving the alert, mitigating issues identified in the alert or the feedback data, by triggering an automatic predefined mitigation process.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A system for monitoring application comprising:<claim-text>a processor; and</claim-text><claim-text>a memory operatively connected to the processor via a communication interface, the memory storing computer readable instructions, when executed, cause the processor to:</claim-text><claim-text>call, by an application process, a socket manager corresponding to a card transaction;</claim-text><claim-text>receive, via a communication protocol TCPIP socket including the application process called socket manager corresponding to the card transaction, a request to authorize a payment having a COBOL copybook format;</claim-text><claim-text>collect application data from the request in connection with the card transaction;</claim-text><claim-text>aggregate and store a subset of the application data in a dynamically allocated shared memory and store location of the dynamically allocated shared memory in a CWA (common work area) accessible to all processes running in a same CICS region;</claim-text><claim-text>implement a monitoring process to obtain the location of the dynamically allocated shared memory by accessing the CWA and read the aggregated application data from the dynamically allocated shared memory;</claim-text><claim-text>store a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager;</claim-text><claim-text>compute a difference of the metrics data by computing a difference between the data with the dynamically allocated shared memory and last saved values of transient data queue for that socket manager;</claim-text><claim-text>store, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart;</claim-text><claim-text>convert, in response to reading, the COBOL copybook format of the aggregated subset of the request to authorize the payment to a predefined second format suitable for publishing onto a desired messaging platform; and</claim-text><claim-text>publish the converted request onto the desired messaging platform.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer executable instructions, when executed, further cause the processor to: implement the transient data queue in an environment that utilizes mixed-language application servers that provide online transaction management and connectivity for applications on predefined mainframe systems.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the application data includes metrics and statistics of the card transaction.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. (canceled)</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the COBOL copybook format is converted to one or more of the following formats: .JSON, .CSV, .HTML, .XML, and .XLS.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer readable instructions, when executed, further cause the processor to:<claim-text>receive a plurality of requests to authorize payments via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager;</claim-text><claim-text>store the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager;</claim-text><claim-text>periodically collect metrics and statistical data from all socket manager transient data queues; and</claim-text><claim-text>aggregate and store the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the computer readable instructions, when executed, further cause the processor to:<claim-text>consume the converted request from the desired messaging platform by a plurality of visualization tools;</claim-text><claim-text>identify an alert in accordance with predefined rules;</claim-text><claim-text>transmit the alert or provide feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and</claim-text><claim-text>in response to receiving the alert, mitigate issues identified in the alert or the feedback data, by triggering an automatic predefined mitigation process.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium storing instructions for monitoring application, wherein, when executed, the instructions cause a processor to perform the following:<claim-text>calling, by an application process, a socket manager corresponding to a card transaction;</claim-text></claim-text><claim-text>receiving, via a communication protocol TCPIP socket including the application process called socket manager corresponding to the card transaction, a request to authorize a payment having a COBOL copybook format;<claim-text>collecting application data from the request in connection with the card transaction;</claim-text><claim-text>aggregating and storing a subset of the application data in a dynamically allocated shared memory and storing location of the dynamically allocated shared memory in a CWA (common work area) accessible to all processes running in a same CICS region;</claim-text><claim-text>implementing a monitoring process to obtain the location of the dynamically allocated shared memory by accessing the CWA and reading the aggregated application data from the dynamically allocated shared memory;</claim-text><claim-text>storing a current snapshot of aggregated metrics and statistical data in a transient data queue assigned or attached to a specific socket manager;</claim-text><claim-text>computing a difference of the metrics data by computing a difference between the data with the dynamically allocated shared memory and last saved values of transient data queue for that socket manager;</claim-text><claim-text>storing, in response to reading, the data into persistence data store for instant access and recovery in case of system failure or application restart;</claim-text><claim-text>converting, in response to reading, the COBOL copybook format of the aggregated subset of the request to authorize the payment to a predefined second format suitable for publishing onto a desired messaging platform; and</claim-text><claim-text>publishing the converted request onto the desired messaging platform.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions further cause the processor to perform the following:<claim-text>implementing the transient data queue in an environment that utilizes mixed-language application servers that provide online transaction management and connectivity for applications on predefined mainframe systems.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the application data includes metrics and statistics of the card transaction.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the COBOL copybook format is converted to one or more of the following formats: .JSON, .CSV, .HTML, .XML, and .XLS.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions, when executed, further causes the processor to perform the following:<claim-text>receiving a plurality of requests to authorize payments via a plurality of communication protocol TCPIP sockets each including a corresponding socket manager;</claim-text><claim-text>storing the metrics and statistical data in a corresponding transient data queue attached to the corresponding socket manager;</claim-text><claim-text>periodically collecting metrics and statistical data from all socket manager transient data queues; and</claim-text><claim-text>aggregating and storing the collected metrics and statistical data from all of the socket manager transient data queues onto the dynamically allocated shared memory.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instructions, when executed, further causes the processor to perform the following:<claim-text>consuming the converted request from the desired messaging platform by a plurality of visualization tools;</claim-text><claim-text>identifying an alert in accordance with predefined rules;</claim-text><claim-text>transmitting the alert or providing feedback data to mainframe system where the application is running via corresponding application programming interface (API) or message queue (MQ); and</claim-text><claim-text>in response to receiving the alert, mitigating issues identified in the alert or the feedback data, by triggering an automatic predefined mitigation process.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>in response to the application process calling the socket manager, initiating the socket manager, wherein the socket manager is a COBOL program that implements a TCPIP socket interface; and</claim-text><claim-text>performing, by the socket manager, an automated action based on a command applied on the dynamically allocated shared memory, wherein the command is at least one from among:</claim-text><claim-text>stop socket manager, recycle socket manager, enable debugging and tracing of messages, and route incoming message traffic to a healthy socket manager.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The system according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processor is further configured to:<claim-text>in response to the application process calling the socket manager, initiating the socket manager, wherein the socket manager is a COBOL program that implements a TCPIP socket interface; and</claim-text><claim-text>performing, by the socket manager, an automated action based on a command applied on the dynamically allocated shared memory, wherein the command is at least one from among: stop socket manager, recycle socket manager, enable debugging and tracing of messages, and route incoming message traffic to a healthy socket manager.</claim-text></claim-text></claim></claims></us-patent-application>