<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004539A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004539</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364849</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>215</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2457</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>25</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>215</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2457</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>252</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2282</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SYSTEMS AND METHODS FOR CONTINUOUS DATA PROFILING</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>COLLIBRA NV</orgname><address><city>BRUSSELS</city><country>BE</country></address></addressbook><residence><country>BE</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Cushman, II</last-name><first-name>James B.</first-name><address><city>Longboat Key</city><state>FL</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Vaks</last-name><first-name>Vadim</first-name><address><city>Holland</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Goel</last-name><first-name>Satyender</first-name><address><city>Chicago</city><state>IL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The present disclosure is directed to continuous data profiling (CDP). Entities may house large amounts of disorganized and/or duplicative data. To organize and standardize data across a data set, the data may be profiled. However, profiling large data set can be inefficient and give rise to security problems, as profiling datasets typically requires exporting a dataset to a third-party profiling runtime environment. To remedy these issues, the present disclosure is directed to a continuous data profiling platform that comprises a CDP manager communicatively coupled to a client's database. The CDP manager provides access to a CDP API that may install CDP tools on a client's native database environment, enabling the database management system to profile datasets within the client's native database environment, which results in a more efficient use of computing resources and more secure process of profiling datasets.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="98.64mm" wi="158.75mm" file="US20230004539A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="207.69mm" wi="144.36mm" orientation="landscape" file="US20230004539A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="213.28mm" wi="147.40mm" orientation="landscape" file="US20230004539A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="234.27mm" wi="166.71mm" orientation="landscape" file="US20230004539A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="229.79mm" wi="102.28mm" file="US20230004539A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="204.22mm" wi="161.37mm" file="US20230004539A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="240.28mm" wi="163.91mm" orientation="landscape" file="US20230004539A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="164.00mm" wi="151.81mm" orientation="landscape" file="US20230004539A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading><p id="p-0002" num="0001">This application is related to U.S. patent application Ser. No. 16/844,927, titled &#x201c;CONTEXT DRIVEN DATA PROFILING&#x201d;; and U.S. patent application Ser. No. 17/236,823, titled &#x201c;SYSTEMS AND METHODS FOR PREDICTING CORRECT OR MISSING DATA AND DATA ANOMALIES&#x201d;, which are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to continuous data profiling and, in particular, to performing continuous data profiling to derive insights into the data while conserving computing power.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Entities maintain large volumes of data digitally on various computing devices. For example, an organization may maintain columns of data on a series of interconnected servers. It may be generally desirable to inspect and evaluate these volumes of data to determine various insights into various characteristics of the data. However, retrieving and processing large volumes of data may be computationally resource intensive. Further, it may be generally difficult to derive a quality of data given the large amount of information included within the volumes of data.</p><p id="p-0005" num="0004">As described previously in patent application Ser. No. 16/844,927, which is incorporated by reference in its entirety herein, a solution to this problem of obtaining insights into large quantities of data is data profiling, which is a process that may include the validation of attributes in client data, standardizing those attributes in a standardized format, and then processing the standardized attributes to derive insights from the data.</p><p id="p-0006" num="0005">As data continues to grow, however, it becomes cumbersome to profile in an efficient manner. Presently, entities that want to profile their datasets often use specialized third-party tools, which require the export of client data from its native platform to a separate, third-party platform for profiling. This process has many problems, including inefficiency in exporting and importing large amounts of data, unpredictable security measures on the third-party platform, and excessive use of computer resources. In practice, entities first export their data out of their native database (usually by creating a copy), then importing that copy of data into the third-party profiling runtime environment, then exporting the profiled data out of the third-party runtime environment, and finally importing the profiled copy of data back into the native database environment from which the initial dataset originated. Further, because a copy of the dataset is often used in data profiling, the client usually needs to reconcile the profiled dataset that is imported back into the database with the un-profiled data that remained in the database. This is another additional step that requires time and intensive computing power.</p><p id="p-0007" num="0006">As such, there is an increased need for systems and methods that can address the challenges of external and one-time data profiling, including profiling data in a compute-efficient manner utilizing less resources and requiring less export-import operations, which would further increase the security of the data, as the data less mobile.</p><p id="p-0008" num="0007">It is with respect to these and other general considerations that the aspects disclosed herein have been made. Also, although relatively specific problems may be discussed, it should be understood that the examples should not be limited to solving the specific problems identified in the background or elsewhere in the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">Non-limiting and non-exhaustive examples are described with reference to the following figures.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a distributed system for continuous data profiling, as described herein.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example input processor for continuous data profiling, as described herein.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example architecture for continuous data profiling.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example method for continuous data profiling, as described herein.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example architecture of a continuous data profiling manager and database management system.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example environment for continuous data profiling.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates one example of a suitable operating environment in which one or more of the present embodiments may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">Various aspects of the disclosure are described more fully below with reference to the accompanying drawings, which form a part hereof, and which show specific exemplary aspects. However, different aspects of the disclosure may be implemented in many different forms and should not be construed as limited to the aspects set forth herein; rather, these aspects are provided so that this disclosure will be thorough and complete, and will fully convey the scope of the aspects to those skilled in the art. Aspects may be practiced as methods, systems, or devices. Accordingly, aspects may take the form of a hardware implementation, an entirely software implementation or an implementation combining software and hardware aspects. The following detailed description is, therefore, not to be taken in a limiting sense.</p><p id="p-0018" num="0017">Embodiments of the present application are directed at systems and methods for continuous data profiling. Many entities (e.g., companies, organizations) maintain large volumes of data. This data can be stored in various registries or databases in computing devices. In many cases, these entities may need to identify and match records across disparate data sets as well as gain insights into the data sets. For example, an organization, in view of multiple similar data sets, may attempt to identify and select high quality and accurate datasets among the similar data sets.</p><p id="p-0019" num="0018">The present embodiments relate to the continuous processing and profiling of data and generating insights into the ingested data. A continuous data profiling process can include validation of an attribute of the client data, standardizing the attribute into a standardized format, and processing the data via one or more rules engines. Other information, such as a usage rank or a value score, can be generated based on obtained input information.</p><p id="p-0020" num="0019">The data profiling process can allow for insights into the data to be generated that increases data quality. An example of an insight can include duplicate or multiple instances of data attributes within a domain and across domains, including a percentage overlap. As a further example, an insight can include a data quality report from normalization and standardization (what percent is standard versus non-standard) or trends based on label processing (e.g., records with the same home address).</p><p id="p-0021" num="0020">As described previously, current systems and methods of data profiling typically require entities to export their datasets out of their native runtime environments and into a dedicated, third-party profiling runtime environment. This process is both insecure and inefficient from a computing resources standpoint. To remedy these problems, the present systems and methods disclose an efficient continuous data profiling process, in which an entity's datasets can be profiled natively within the database in which it is stored. This is facilitated via a continuous data profiling (CDP) manager, which is a lightweight frontend application, that communicates directly to a database management system (e.g., a software application that is natively coupled to the database in which an entity's dataset is stored). The CDP manager can be in the form of an application programming interface (API), where the CDP installs certain profiling logic directly into the database management system, allowing the database management system to handle all of the profiling (e.g., tracking, scheduling, computation, and storage of profiled data). As a further example, the CDP manager can allow the database management system to generate and store statistics tables, change-data-capture (CDC) tables, profiling procedures, and profiling triggers.</p><p id="p-0022" num="0021">Accordingly, the present disclosure provides a plurality of technical benefits including but not limited to enabling more efficient use of computer resources because entities no longer need to export and import their data out of their native database systems into third-party profiling systems. Rather, the systems and methods disclosed herein enable entities to simply call a CDP API that communicates directly with the entity's native database management systems, utilizing the entity's database compute resources for the profiling processes. Another technical benefit is the increased security of the entity's data. By avoiding the continuous export-import process into unknown and unpredictable third-party runtime environments, risks of security breaches or exposure of personally identifiable information is decreased significantly because the entity's data is not transported out of its native runtime environment before the profiling, during the profiling, and after the profiling. The data remains in a single, secure location. In short, a continuous data profiling process provides for more efficient use of computer resources and processing power and also provides for heightened security and protection of sensitive data.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a distributed system for continuous data profiling, as described herein. Example system <b>100</b> presented is a combination of interdependent components that interact to form an integrated whole for consolidating and enriching data on a data marketplace. Components of the systems may be hardware components or software implemented on, and/or executed by, hardware components of the systems. For example, system <b>100</b> comprises client devices <b>102</b>, <b>104</b>, and <b>106</b>, local databases <b>110</b>, <b>112</b>, and <b>114</b>, network(s) <b>108</b>, and server devices <b>116</b>, <b>118</b>, and/or <b>120</b>.</p><p id="p-0024" num="0023">Client devices <b>102</b>, <b>104</b>, and <b>106</b> may be configured to receive and transmit data. For example, client devices <b>102</b>, <b>104</b>, and <b>106</b> may contain client-specific data with client-specific data terminology and labels. Client devices may download a CDP manager program via network(s) <b>108</b> that may be communicatively coupled to database(s) <b>110</b>, <b>112</b>, and/or <b>114</b>, where the client data resides. In other embodiments, instead of downloading a CDP manager directly, client device(s) <b>102</b>, <b>104</b>, and/or <b>106</b> may simply call a CDP manager API via network(s) <b>108</b>, wherein the activation of the API allows the CDP manager (which may be operating remotely on server(s) <b>116</b>, <b>118</b>, and/or <b>120</b>) to communicate directly with and profile data stored on database(s) <b>110</b>, <b>112</b>, and/or <b>114</b>). Because the profiling of the data occurs at the native location of the client's datasets, the client data stored on database(s) <b>110</b>, <b>112</b>, and/or <b>114</b> is not transmitted via network(s) <b>108</b> to be profiled remotely, e.g., on third-party server(s) <b>116</b>, <b>118</b>, and/or <b>120</b>. The client-specific data is stored in local databases <b>110</b>, <b>112</b>, and <b>114</b>. The original, un-profiled data is stored on the local databases <b>110</b>, <b>112</b>, and <b>114</b>, and the profiled data (after the CDP process is run on the data) is also stored on the local database(s) <b>110</b>, <b>112</b>, and/or <b>114</b>. Server(s) <b>116</b>, <b>118</b>, and/or <b>120</b> may be third-party servers owned by an administrator of the CDP manager and/or CDP API. In other examples, once the data is profiled, profiled client-specific data may be stored in remote servers (in addition to or instead of local client devices and local databases) and may be transmitted from client servers to third-party servers via network(s) <b>108</b> and/or satellite <b>122</b>.</p><p id="p-0025" num="0024">In other examples, server(s) <b>116</b>, <b>118</b>, and/or <b>120</b> may be owned by the client. These server(s) <b>116</b>, <b>118</b>, and/or <b>120</b> may be client-owned cloud servers, where client-data resides. In this example, the client-data may be transmitted from a client-owned local database <b>110</b>, <b>112</b>, and/or <b>114</b> to a client-owned database <b>116</b>, <b>118</b>, and/or <b>120</b>. A CDP manager may be communicatively coupled to either the local or remote databases that are owned by the client. This communication channel between the CDP manager and the client-owned databases may be facilitated via network(s) <b>108</b> and/or satellite <b>122</b>. This example is applicable to the scenario where the remote databases/servers are owned by the client, not the third-party managing the CDP manager and/or API.</p><p id="p-0026" num="0025">In aspects, a client device, such as client devices <b>102</b>, <b>104</b>, and <b>106</b>, may have access to one or more datasets or data sources and/or databases comprising client-specific data. In other aspects, client devices <b>102</b>, <b>104</b>, and <b>106</b>, may be equipped to receive broadband and/or satellite signals carrying CDP management software and/or CDP API files that are necessary to be installed on the client-owned database for profiling to occur. The signals and information that client devices <b>102</b>, <b>104</b>, and <b>106</b> may receive may be transmitted from satellite <b>122</b>. Satellite <b>122</b> may also be configured to communicate with network(s) <b>108</b>, in addition to being able to communicate directly with client devices <b>102</b>, <b>104</b>, and <b>106</b>. In some examples, a client device may be a mobile phone, a laptop computer, a tablet, a smart home device, a desk phone, and a wearable (e.g., a smart watch), among other devices.</p><p id="p-0027" num="0026">To further elaborate on the network topology, client devices <b>102</b>, <b>104</b>, and/or <b>106</b> (along with their corresponding local databases <b>110</b>, <b>112</b>, and <b>114</b>) may receive CDP management files and information once the CDP manager is communicatively coupled to the local databases <b>110</b>, <b>112</b>, and/or <b>114</b>. Note, this is also applicable to the scenario where remote database(s) <b>116</b>, <b>118</b>, and/or <b>120</b> are client-owned. The CDP management files may include, but are not limited to, statistical tables, CDC tables, profiling procedures, and profiling triggers. Once the profiling of a dataset is complete, the profiled data may be stored on the initial database in which the original, un-profiled data is stored.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example input processor for continuous data profiling, as described herein. Input processor <b>200</b> may be embedded within a client device (e.g., client devices <b>102</b>, <b>104</b>, and/or <b>106</b>), remote web server device (e.g., devices <b>116</b>, <b>118</b>, and/or <b>120</b>), and other devices capable of implementing systems and methods for continuous data profiling. The input processing system contains one or more data processors and is capable of executing algorithms, software routines, and/or instructions based on processing data provided by at least one client-data source. The input processing system can be a factory-fitted system or an add-on unit to a particular device. Furthermore, the input processing system can be a general-purpose computer or a dedicated, special-purpose computer. No limitations are imposed on the location of the input processing system relative to a client or remote web server device, etc. According to embodiments shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the disclosed system can include memory <b>205</b>, one or more processors <b>210</b>, communications module <b>215</b>, Continuous Data Profiling (CDP) module <b>220</b>, and Database Management System (DMS) module <b>225</b>. Other embodiments of the present technology may include some, all, or none of these modules and components, along with other modules, applications, data, and/or components. Still yet, some embodiments may incorporate two or more of these modules and components into a single module and/or associate a portion of the functionality of one or more of these modules with a different module.</p><p id="p-0029" num="0028">Memory <b>205</b> can store instructions for running one or more applications or modules on processor(s) <b>210</b>. For example, memory <b>205</b> could be used in one or more embodiments to house all or some of the instructions needed to execute the functionality of CDP module <b>220</b> and/or DMS module <b>225</b>, as well as communications module <b>215</b>. Generally, memory <b>205</b> can include any device, mechanism, or populated data structure used for storing information. In accordance with some embodiments of the present disclosures, memory <b>205</b> can encompass, but is not limited to, any type of volatile memory, nonvolatile memory, and dynamic memory. For example, memory <b>205</b> can be random access memory, memory storage devices, optical memory devices, magnetic media, floppy disks, magnetic tapes, hard drives, SIMMs, SDRAM, RDRAM, DDR, RAM, SODIMMs, EPROMs, EEPROMs, compact discs, DVDs, and/or the like. In accordance with some embodiments, memory <b>205</b> may include one or more disk drives, flash drives, one or more databases, one or more tables, one or more files, local cache memories, processor cache memories, relational databases, flat databases, and/or the like. In addition, those of ordinary skill in the art will appreciate many additional devices and techniques for storing information that can be used as memory <b>205</b>.</p><p id="p-0030" num="0029">In some example aspects, memory <b>205</b> may store certain files from the CDP module <b>220</b> that may originate from the CDP manager, such as software applications that enable the client database(s) to generate, display, and store statistical tables, CDC tables, profiling processes, and profiling triggers. The CDP manager may also enable a user to configure any of the CDP files, which may allow for customization of the statistical and CDC tables, as well as the profiling processes and triggers. In further examples, memory <b>205</b> may store certain profiling statistics and profiled data that may be used to facilitate the profiling of data on a client database, as well as data flow between the CDP manager and the DMS.</p><p id="p-0031" num="0030">Communications module <b>215</b> is associated with sending/receiving information (e.g., CDP applications from CDP module <b>220</b> and data (unprofiled and profiled) from the DMS module <b>225</b>), commands received via client devices or server devices, other client devices, remote web servers, etc. These communications can employ any suitable type of technology, such as Bluetooth, WiFi, WiMax, cellular (e.g., 5G), single hop communication, multi-hop communication, Dedicated Short Range Communications (DSRC), or a proprietary communication protocol. In some embodiments, communications module <b>215</b> sends information output by CDP module <b>220</b> (e.g., software applications and/or logic to be installed on the DMS) and/or by DMS module <b>225</b> (e.g., profiled data, such as tracking, scheduling, computation, and storage of profiled data statistics per data table), and/or to client devices <b>102</b>, <b>104</b>, and/or <b>106</b>, as well as memory <b>205</b> to be stored for future use. In some examples, communications modules may be constructed on the HTTP protocol through a secure REST server(s) using RESTful services. In yet further examples, the CDP module <b>220</b> may communicate with DMS module <b>225</b> via a CDP API. In other examples, external applications may request profiled data statistics, and the communications module <b>215</b> may facilitate the transmission of profiled data from the DMS module <b>225</b> to a third-party external service.</p><p id="p-0032" num="0031">CDP module <b>220</b> is configured to install certain logic and software functionality on a database, specifically configuring the database management system that manages a client database. The logic and/or software that may be provided by CDP module <b>220</b> may include functions to facilitate the construction and storage of statistical tables, CDC tables, profiling procedures, and profiling triggers. For example, the CDP module <b>220</b> may enable the methods of change-data-capture to run on a client database via the DMS. These methods may include initiating timestamps or version numbers, table triggers (e.g., so that administrators of a database or a data table receive push notifications when data is changed), snapshots or table comparisons, and log scraping. Each of these methods allow for real-time reporting capabilities of the database status.</p><p id="p-0033" num="0032">The CDP module <b>220</b> may also be configured with an API that allows a DMS (such as DMS module <b>225</b>) to communicate with CDP module <b>220</b> and receive downloads and functions that are designed and supported by the CDP manager. Once the CDP module <b>220</b> is communicatively coupled to a local database where profiling is to be conducted, the profiling can occur continuously based on different factors. For instance, a profiling trigger could be established via the CDP module <b>220</b> that triggers profiling on new data that has been added to the dataset every 24 hours. In another example, the profiling trigger could be based on the amount of new data added to a certain dataset or data table. Once the new data amount reaches or exceeds, e.g., 10 gigabytes, the profiling process is triggered, and the new data is profiled automatically.</p><p id="p-0034" num="0033">DMS module <b>225</b> is configured to manage at least one local database that is storing client-specific data. The DMS module <b>225</b> is configured to operate the change tracking, scheduling, computation, and storage of profile statistics per data table. The bulk of the computational resources are managed by the DMS module <b>225</b>, since the CDP systems and methods described herein are using the native database resources to profile and store the data. DMS module <b>225</b> is also configured to generate and store certain timeline statistic tables that allows the DMS module <b>225</b> to capture the entire history of the profiled data. The statistic tables can be displayed via CDP module <b>220</b> based on a query received by the CDP module <b>220</b>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example architecture for continuous data profiling. A context-driven data profiling process can assist in determining a data quality of source data. Data profiling may include several processing steps that modify input information for generating insights for the data helpful in applications like optimizing matching accuracy. For example, data profiling can standardize and validate data before tokenizing profiled data.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example architecture for continuous data profiling, showing an example profiling flow <b>300</b>. A continuous data profiler can include a flexible data flow. Data can be accessed and/or processed in various batches, continuous streams, or a bulk load from a data source. As described previously, the present application is directed to the continuous data profiling streams. The data source(s) <b>302</b> can include a node (e.g., database devices <b>304</b><i>a</i>-<i>d</i>) configured to store/maintain data (e.g., data lake <b>306</b><i>a</i>, database <b>306</b><i>b</i>, flat file <b>306</b><i>c</i>, data stream <b>306</b><i>d</i>). For example, the data source <b>302</b> can include a single column of data, a series of relational databases with a plurality of tables of data, or data lakes with multitudes of data assets.</p><p id="p-0037" num="0036">Data quality can be resolved in the data profiler per use case or client. For example, context can be based on a column of data, a combination of columns of data, or a data source. During a data profiling process, various data can be derived, and a summary of the data can be generated. For instance, a summary of a column of data can be identified in the form of a data sketch. The data sketch can include numeric data and/or string data. Examples of numeric data included in the data sketch can include any of a number of missing values, a mean/variance/max/min of the numeric data, an approximate quantile estimate of numeric data that can be used to generate a distribution or histogram, etc. Examples of string data can include a number of missing values, a maximum character length, minimum character length, mean char length, frequency table of labels, frequency item set, a distinct value estimate, etc.</p><p id="p-0038" num="0037">Once any of a series of metrics are computed in a summary of the data, a data profiling score can be computed. The data profiling score can be used to determine a data quality and/or identify the best data, data composition, and targeting data quality enhancement activities. At user-set intervals, data profiling can be re-executed to recompute the metrics. These user-set intervals may be temporal (e.g., every 24 hours, new data received by data lake <b>306</b><i>a </i>is profiled) or size-based (e.g., every 1 GB of data added to flat file <b>306</b><i>c </i>is profiled). This can be used to track a history of data scores in the data lifecycle and to enable the flagging of data quality issues, in addition to efficiently using computer resources to continuously profile streams of data, rather than manual batch processing.</p><p id="p-0039" num="0038">In some embodiments, the summary of data can include a proportion of values that follow a specific regular expression (e.g., reference data). For instance, for phone numbers that follow a particular format, the summary of data can be indicative of a number of formats that are present.</p><p id="p-0040" num="0039">In some embodiments, the summary of data can include a number of anonymous values. For example, a known anonymous name (e.g., John Doe) can be identified in source data to determine a proportion of the data that includes anonymous values.</p><p id="p-0041" num="0040">In other embodiments, the summary of data can include a set of data quality metrics based on a library of data quality rules. The summary of data can be utilized to enable the learning of data quality rules based on reference data associated with an attribute. The summary of data can also be utilized to enable learning of the data quality rules directly from the source data (e.g., between which values should the source data include, what should be a minimum character length).</p><p id="p-0042" num="0041">As a first example, the source data can be inspected to derive a data quality score. The data quality score can include a score that is calculated at a column level or a record level of the source data. The data quality score can be derived from calculating any metrics included in the summary of data.</p><p id="p-0043" num="0042">As another example, the source data can be inspected to identify quality data. For a data profiling score for each column of data in each data source, a best possible set of data can be matched to a specific client. For instance, a table can be prepared that shows a set of columns/attributes (e.g., name, address phone date of birth, email address), a data profiling score for different sources in which the column/attributes are present (CRM, ERP, order management, web). Using the data included in such a table, a set of data with a highest quality of data can be selected for a specific client. In some instances, multiple sources can be matched to receive a highest possible quality of data. This can be performed without undue processing of the source data.</p><p id="p-0044" num="0043">As another example, the source data can be inspected to derive historical data profiling score and perform a what-if analysis. A what-if analysis can include an analysis of what would have been the case if other (certain) rules were invoked on the data. To facilitate computation of these, this can be done on sample data collected from the data summaries created during the computing the metrics stage. If the results of the what-if analysis are sufficient, a new full computation of the metrics can be performed using the new rules selected in the what-if analysis.</p><p id="p-0045" num="0044">Data extracted from data sources (e.g., data lake <b>306</b><i>a</i>, database <b>306</b><i>b</i>, flat file <b>306</b><i>c</i>, data stream <b>306</b><i>d</i>) can be fed into profilers (e.g., profilers <b>310</b><i>a</i>-<i>n</i>) via a data feed <b>308</b>. Data feed <b>308</b> can include a continuous feed of data to profilers. The profilers <b>310</b><i>a</i>-<i>n </i>may be installed on a local database via a CDP manager, which may be communicatively coupled to the database(s) <b>304</b><i>a</i>-<i>d </i>via a CDP module <b>220</b>, as described in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The data fed into profilers can include attributes (e.g., attributes <b>312</b><i>a</i>-<i>n</i>). Attributes can be portions of data in a table, in a source, or part of the same record.</p><p id="p-0046" num="0045">In the embodiment as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a first profiler <b>310</b><i>a </i>can process attribute <b>1</b> <b>312</b><i>a </i>and a second profiler <b>310</b><i>b </i>can process attribute <b>2</b> <b>312</b><i>b</i>. Any suitable number of profilers (e.g., profiler N <b>310</b><i>n</i>) can process any number of attributes (e.g., attribute N <b>312</b><i>n</i>). Each profiler <b>310</b><i>a</i>-<i>n </i>can include a set of standardization rules <b>314</b><i>a</i>-<i>n </i>and a set of rules engines <b>316</b><i>a</i>-<i>n</i>. The standardization rules <b>314</b><i>a</i>-<i>n </i>and rules engines <b>316</b><i>a</i>-<i>n </i>may be installed on database(s) <b>304</b><i>a</i>-<i>n </i>via a CDP manager communicatively coupled to the databases, providing for the continuous profiling of the data stored on the databases and provided to the profilers <b>310</b><i>a</i>-<i>n </i>via data feed <b>308</b>. The standardization rules <b>314</b><i>a</i>-<i>n </i>and/or the rules engines <b>316</b><i>a</i>-<i>n </i>can be modular, where each set of rules can be processed for an attribute. Each profiler can process a corresponding attribute using the corresponding set of standardization rules and the set of rules engines. In some embodiments, each profiler can implement various machine learning and/or artificial intelligence techniques and statistical tools to increase data quality in processing the attributes. The resultant data from each profiler <b>310</b><i>a</i>-<i>n </i>can include insights <b>318</b> indicative of various features of the attributes.</p><p id="p-0047" num="0046">In some embodiments, data quality rules can be adjusted, which can result in different determinations to be made when executing data quality improvement tasks. For instance, a dataset might have a good score, but it was not previously known that a name of &#x201c;John Doe&#x201d; was an anonymous (fake or synthetic) value. By updating rules to identify that &#x201c;John Doe&#x201d; is an anonymous value, a change in data profiling scores and the history of the scores may be modified. This change in data profiling scores can enable identification of various data included in the dataset.</p><p id="p-0048" num="0047">As another example, the source data can be inspected to derive automatic data quality improvement requests. A trigger can be associated with a data profiling score for a specific attribute or series of attributes. The trigger can state that if a data profiling score is below a threshold, the source data associated with the attribute can be inspected. The source data can be potentially improved if it has an identified value indicative of how the data is used in various contexts.</p><p id="p-0049" num="0048">As another example, the source data can be inspected to derive data insights. Processing data profiling scores of source data can generate distributions of data and other insights that can be utilized in understanding features of the data before initiating another analysis of the data.</p><p id="p-0050" num="0049">As another example, the source data can be inspected to derive smart data quality-based data selection decisioning. Based on mapping the source data to a model (e.g., a canonical model), highly correlated profiling/sampling output, correlated definitions, and/or similar endpoint consumption relationship patterns can provide recommendations for substitutes worthy of inspecting when data quality scores are superior for another dataset with similar attributes. Side-by-side comparisons can be run upon user-initiated requests to help a user identify a measure of overlap and express a relative preference. This can be stored/logged alongside user and community in order to provide recommendations calibrated with user-specific needs longer-term. For instance, a statistical table may be stored and generated via the database management system that manages data sources <b>302</b>. The statistical table may be provided to a CDP manager for display upon the CDP manager receiving a query to display said statistical table.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example method for continuous data profiling, as described herein. Method <b>400</b> begins with receiving a first input stream of data <b>402</b>. The streams of data may come from any number of client-owned data sources, such as those described in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The stream of data corresponding to the client may include one or more columns of client data.</p><p id="p-0052" num="0051">Once the first input stream of data is received at step <b>402</b>, the first input stream may be profiled at step <b>404</b>, where at least one attribute from the stream of data may be identified. Further steps of the data profiling process may include retrieving a set of validation rules and a set of standardization rules that correspond to the attribute. The set of validation rules can provide rules indicative of whether the attribute corresponds to the attribute. The set of standardization rules may provide rules to modify the attribute into the standardized format.</p><p id="p-0053" num="0052">The data profiling process step <b>404</b> may include comparing the attribute with the set of validation rules to determine whether the attribute corresponds to the attribute. If it is determined that the attribute corresponds to the attribute, the attribute can be modified, as described herein. In some embodiments, validating the attribute can include determining whether the attribute includes a null value that is identified in the set of validation rules. The attribute can be validated responsive to determining that the attribute does not include the null value.</p><p id="p-0054" num="0053">The data profiling process may include modifying the attribute into a standardized format according to the set of standardization rules. This may be performed responsive to determining that the attribute is validated via the validation rules.</p><p id="p-0055" num="0054">The data profiling process step <b>404</b> may include processing the attribute through multiple rules engines. The rules engines may include a name engine that associates the attribute with commonly associated names included in a listing of associated names, responsive to determining that the attribute is indicative of a name. The rules engines may also include an address library engine that adds the attribute to a library of addresses associated with the client, responsive to determining that the attribute is indicative of an address.</p><p id="p-0056" num="0055">In some embodiments, processing the modified attribute through the set rules engines at step <b>404</b> can include, responsive to determining that the attribute is indicative of a name, processing the modified attribute through a name engine that associates the attribute with associated names included in a listing of associated names. Processing the modified attribute through the set rules engines can also include, responsive to determining that the attribute is indicative of an address, processing the modified attribute through an address library engine that adds the attribute to a library of addresses associated with the data subject.</p><p id="p-0057" num="0056">In some embodiments, the method <b>400</b> at data profiling step <b>404</b> can include comparing a number of instances of the attribute relative to other attributes in the stream of data. A usage rank can be generated for the attribute. The usage rank can be based on the number of instances of the attribute in the stream of data, and the usage rank may be indicative of a number of insights that are capable of being derived from the attribute.</p><p id="p-0058" num="0057">In some embodiments, a series of features can be identified that are associated with the attribute and identified relative to other attributes in the stream of data. Example features of the series of features can include a quality feature, availability feature, cardinality feature, etc. A value score can be derived for the attribute based on an aggregation of the series of features.</p><p id="p-0059" num="0058">In some embodiments, at step <b>404</b>, deriving the value score for the attribute based on the aggregation of the series of features can include processing the attribute to derive a quality feature of the attribute, the quality feature identifies a number of differences between the attribute as identified in the stream of data and the modified attribute modified according to the set of standardization rules. Deriving the value score for the attribute based on the aggregation of the series of features can also include processing the attribute to derive an availability feature of the attribute, the availability feature indicative of a number of null entries in a portion of data in the stream of data that corresponds to the attribute. Deriving the value score for the attribute based on the aggregation of the series of features can also include processing the attribute to derive a cardinality feature of the attribute, the cardinality feature indicative of a difference of the attribute relative to other attributes in the stream of data. Deriving the value score for the attribute based on the aggregation of the series of features can also include aggregating the derived quality feature, availability feature, and cardinality feature of the attribute to generate the value score for the attribute.</p><p id="p-0060" num="0059">Once the first input stream of data is profiled at step <b>404</b>, a first profiled set of data may be generated at step <b>406</b>. At step <b>406</b>, the profiled data may be constructed into a statistical table and displayed via a CDP manager. The system described herein may also maintain profiled insights/ranks/scores on a series of processed and profiled attributes, which allow data quality insights to be derived from the original input stream of data.</p><p id="p-0061" num="0060">Once a first profiled set of data is generated at step <b>406</b>, the system may receive a second input stream of data at step <b>408</b>. In some examples, the second input stream of data may trigger a profiling process at step <b>410</b>. The trigger may be based on a timing factor (e.g., profile a new input stream of data every 24 hours) or on a size factor (e.g., once the new input stream of data reaches 1 GB in size, process the new input stream of data). In other examples, the second input stream of data at step <b>408</b> may be stored in a client database until the profiling process is triggered in step <b>410</b>. As such, the new data that is received by a client data store between the generation of the first profiled set of data and the triggering of a subsequent profiling process can be defined as the &#x201c;second input stream of data.&#x201d;</p><p id="p-0062" num="0061">Once the profiling process is triggered again at step <b>410</b>, the second input stream of data is profiled at step <b>412</b> in accordance with the profiling steps and processing described above with respect to the profiling step <b>404</b>.</p><p id="p-0063" num="0062">Similarly, once the second input stream of data is profiled at step <b>412</b>, a second profiled set of data is generated at step <b>414</b>, wherein new statistical tables and data quality insights may be derived from the input data.</p><p id="p-0064" num="0063">This process may continue to repeat as long as the profiling processing step is triggered as new input streams of data are received by client data stores, which are connected to a CDP manager. The CDP manager may monitor the inflow of data to client data store(s), and once a profiling trigger is initiated, the new inflow of data may be profiled in the client database.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example architecture of a continuous data profiling manager and database management system. Example architecture <b>500</b> includes a CDP manager <b>502</b>, which is a lightweight user-interface software application that provides communications between the underlying client database and CDP tools. In some examples, the CDP Manager <b>502</b> may administer the CDP API and provide access (or revoke access) to the CDP API. The CDP manager <b>502</b> may be communicatively coupled to the database management system <b>506</b>. The CDP manager <b>502</b> may install certain profiling tools from a CDP toolkit on the database management system <b>506</b>, such as the ability for the DMS <b>506</b> to generate and store statistical tables, CDC tables, profiling procedures, and profiling triggers. The CDP manager <b>502</b> may also provide tools to the DMS <b>506</b> for configuration of certain stored procedures and profiling triggers. For instance, the CDP manager <b>502</b> may allow a user to configure which profiling triggers are set for automatic data profiling, such as temporal or size-based triggers, as described previously.</p><p id="p-0066" num="0065">In some cases, the CDP manager plays a limited role, where the Data Warehouse is a public cloud hosted or manager (like Snowflake, BigQuery, Redshift, etc). The schedule and trigger may be provided by a Cloud Service native to the service provider but external to the database itself. In another example, an Amazon web services (AWS) event bridge handles scheduling and triggering of profiling execution within Redshift (e.g., Redshift is database of AWS).</p><p id="p-0067" num="0066">Architecture <b>500</b> also includes external processes <b>508</b>, which may be implicated if the DMS <b>506</b> is configured to use external processes <b>508</b>. For example, once data is profiled and stored in a client database, the DMS <b>506</b> may transmit the stored profiled data to external processes via an API <b>508</b> that may further analyze the profiled data. in other examples, external process <b>508</b> may comprise a data marketplace where a client may wish to enhance and/or buy/sell certain data assets related to a profiled dataset stored on a client database.</p><p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example environment for connecting continuous data profiling to an external application via API for analysis/insights. Environment <b>600</b> is comprised of client feeds <b>602</b>, which include data streams from a variety of data sources, such as those data sources described in <figref idref="DRAWINGS">FIG. <b>3</b></figref> (e.g., data lakes, databases, flat files, and data streams). Each of the data sources has its own CDP environment where the profiling statistics are stored on a continuous basis. The CDP feeds are readable via an API gateway to do rapid analysis and provide insights without excessive processing time delay. The API gateway can be provided by any third party with data profiling or data quality capabilities.</p><p id="p-0069" num="0068">The API gateway <b>610</b> is a continuous data profiling (CDP) gateway, managed by a CDP manager. The CDP manager may be a top-level, lightweight software interface that may be communicatively coupled to the client environment <b>604</b>. The CDP manager may derive its functionality from a CDP environment, where certain data profiling and data quality analysis tools reside. Certain CDP toolkits may be available for use on a client dataset via the CDP API <b>610</b>. The client CDP data feeds and the API gateway work as a lock and key mechanism, that client's can use to avail profiling insights on their data from a third party. Once the connection is established, the CDP API may install tools within the client environment <b>604</b> and/or provide for access to certain CDP tools via the CDP API that may be utilized (e.g., via cloud servers) to profile data stored within the client environment <b>604</b>. It is important to note that the client data (e.g., CDP feeds) is not transmitted outside of the client environment <b>604</b> to, e.g., the CDP environment <b>606</b>.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates one example of a suitable operating environment in which one or more of the present embodiments may be implemented. This is only one example of a suitable operating environment and is not intended to suggest any limitation as to the scope of use or functionality. Other well-known computing systems, environments, and/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, programmable consumer electronics such as smart phones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.</p><p id="p-0071" num="0070">In its most basic configuration, operating environment <b>700</b> typically includes at least one processing unit <b>702</b> and memory <b>704</b>. Depending on the exact configuration and type of computing device, memory <b>704</b> (storing, among other things, information related to detected devices, association information, personal gateway settings, and instructions to perform the methods disclosed herein) may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.), or some combination of the two. This most basic configuration is illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> by dashed line <b>706</b>. Further, environment <b>700</b> may also include storage devices (removable, <b>708</b>, and/or non-removable, <b>710</b>) including, but not limited to, magnetic or optical disks or tape. Similarly, environment <b>700</b> may also have input device(s) <b>714</b> such as keyboard, mouse, pen, voice input, etc. and/or output device(s) <b>716</b> such as a display, speakers, printer, etc. Also included in the environment may be one or more communication connections, <b>712</b>, such as LAN, WAN, point to point, etc.</p><p id="p-0072" num="0071">Operating environment <b>700</b> typically includes at least some form of computer readable media. Computer readable media can be any available media that can be accessed by processing unit <b>702</b> or other devices comprising the operating environment. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other tangible medium which can be used to store the desired information. Computer storage media does not include communication media.</p><p id="p-0073" num="0072">Communication media embodies non-transitory computer readable instructions, data structures, program modules, or other data. Computer readable instructions may be transported in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.</p><p id="p-0074" num="0073">The operating environment <b>700</b> may be a single computer operating in a networked environment using logical connections to one or more remote computers. The remote computer may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above as well as others not so mentioned. The logical connections may include any method supported by available communications media. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.</p><p id="p-0075" num="0074">Aspects of the present disclosure, for example, are described above with reference to block diagrams and/or operational illustrations of methods, systems, and computer program products according to aspects of the disclosure. The functions/acts noted in the blocks may occur out of the order as shown in any flowchart. For example, two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order, depending upon the functionality/acts involved.</p><p id="p-0076" num="0075">The description and illustration of one or more aspects provided in this application are not intended to limit or restrict the scope of the disclosure as claimed in any way. The aspects, examples, and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of claimed disclosure. The claimed disclosure should not be construed as being limited to any aspect, example, or detail provided in this application. Regardless of whether shown and described in combination or separately, the various features (both structural and methodological) are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application, one skilled in the art may envision variations, modifications, and alternate aspects falling within the spirit of the broader aspects of the general inventive concept embodied in this application that do not depart from the broader scope of the claimed disclosure.</p><p id="p-0077" num="0076">From the foregoing, it will be appreciated that specific embodiments of the invention have been described herein for purposes of illustration, but that various modifications may be made without deviating from the scope of the invention. Accordingly, the invention is not limited except as by the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system for continuously profiling data, comprising:<claim-text>a memory configured to store non-transitory computer readable instructions; and</claim-text><claim-text>a processor communicatively coupled to the memory, wherein the processor, when</claim-text><claim-text>executing the non-transitory computer readable instructions, is configured to:<claim-text>receive a first input stream of data;</claim-text><claim-text>profile the first input stream of data;</claim-text><claim-text>generate a first profiled set of data based on the profiling of the first input stream of data;</claim-text><claim-text>receive a second input steam of data;</claim-text><claim-text>compare the second input stream of data to at least one profile trigger;</claim-text><claim-text>initiate the at least one profile trigger;</claim-text><claim-text>profile the second input stream of data;</claim-text><claim-text>generate a second profiled set of data based on the profiling of the second input stream of data; and</claim-text><claim-text>store the first profiled set of data and the second profiled set of data in at least one client database.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the processor is further configured to:<claim-text>connect at least one continuous data profiling (CDP) manager application to the at least one client database; and</claim-text><claim-text>receive at least one instruction or function via the at least one continuous data profiling (CDP) manager application.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one profiling function is a function for generating a statistical table of profiled data.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one profiling function is a function for generating a change-data-store table of profiled data.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one profiling function is a function for managing at least one profiling process.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one profiling function is a function for managing the at least one profile trigger.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one profile trigger is at least one of: a temporal trigger, a size-based trigger, and a manual trigger.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein profiling the first input stream of data comprises the steps of:<claim-text>identify at least one attribute in the first input stream of data;</claim-text><claim-text>retrieve at least one set of profiling rules and at least one set of processing rules that correspond to the at least one attribute;</claim-text><claim-text>compare the at least one attribute with the at least one set of profiling and the at least one set of processing rules to validate information included in the at least one attribute;</claim-text><claim-text>responsive to determining that the information included in the at least one attribute is profiled according to the at least one set of processing rules, store the information for at least one attribute into at least one profiled format according to the at least one set of processing rules, wherein the information is provisioned via at least one API gateway; and</claim-text><claim-text>process the profiled at least one attribute through at least one set of rules engines.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein processing the profiled at least one attribute through the at least one set of rules engines comprises the step of:<claim-text>responsive to determining that the at least one attribute is indicative of a name, process the modified at least one attribute through a name engine that associated the at least one attribute with associated names included in a listing of associated names.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein processing the profiled at least one attribute through the at least one set of rules engines comprises the step of:<claim-text>responsive to determining that the at least one attribute is indicative of an address, process the modified at least one attribute through an address library engine that adds the attribute to a library of addresses.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the processor is further configured to:<claim-text>receive at least one query via the at least one continuous data profiling manager application, wherein the at least one query generates the statistical table of profiled data.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processor is further configured to:<claim-text>receive at least one set of continuous data profiling tools from a continuous data profiling manager, wherein the continuous data profiling manager is a frontend software application communicatively coupled to the at least one client database.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A method of continuously profiling data, comprising:<claim-text>receiving at least one set of continuous data profiling tools in at least one client database;</claim-text><claim-text>receiving a first input stream of data in the at least one client database;</claim-text><claim-text>profiling the first input stream of data using the at least one set of continuous data profiling tools in the at least one client database;</claim-text><claim-text>generating a first profiled set of data based on the profiling of the first input stream of data;</claim-text><claim-text>receiving a second input steam of data in the at least one client database;</claim-text><claim-text>comparing the second input stream of data to at least one profile trigger stored in the at least one client database;</claim-text><claim-text>determining that the at least one profile trigger is triggered;</claim-text><claim-text>profiling the second input stream of data using the at least one set of continuous data profiling tools in the at least one client database;</claim-text><claim-text>generating a second profiled set of data based on the profiling of the second input stream of data; and</claim-text><claim-text>storing the first profiled set of data and the second profiled set of data in at least one client database.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the at least one set of continuous data profiling tools is received from a continuous data profiling manager.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the continuous data profiling manager is a frontend software application communicatively coupled to the at least one client database.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the at least one set of continuous data profiling tools comprises a function for generating a statistical table of profiled data.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the at least one set of continuous data profiling tools comprises a function for generating a change-data-store table of profiled data.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the at least one set of continuous data profiling tools comprises a function for managing the at least one profile trigger.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the at least one profile trigger is at least one of: a temporal trigger, a size-based trigger, and a manual trigger.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer-readable media storing computer executable instructions that when executed cause a computer system to perform a method for continuous data profiling, comprising:<claim-text>receiving, from a continuous data profiling manager, at least one set of continuous data profiling statistics in at least one client database from an API gateway;</claim-text><claim-text>receiving a first input stream of data in the at least one client database;</claim-text><claim-text>profiling the first input stream of data using the at least one set of continuous data profiling tools in the at least one client database;</claim-text><claim-text>generating a first profiled set of data based on the profiling of the first input stream of data;</claim-text><claim-text>receiving a second input steam of data in the at least one client database;</claim-text><claim-text>comparing the second input stream of data to at least one profile trigger stored in the at least one client database;</claim-text><claim-text>based on the comparison of the second input stream of data to the at least one profile trigger, determining the at least one profile trigger is triggered;</claim-text><claim-text>profiling the second input stream of data using the at least one set of continuous data profiling tools in the at least one client database;</claim-text><claim-text>generating a second profiled set of data based on the profiling of the second input stream of data; and</claim-text><claim-text>storing the first profiled set of data and the second profiled set of data in at least one client database.</claim-text></claim-text></claim></claims></us-patent-application>