<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004584A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004584</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943072</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>28</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>04812</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>287</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>04812</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2282</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2246</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Using Objects in an Object Model as Database Entities</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16944056</doc-number><date>20200730</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442964</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17943072</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Tableau Software</orgname><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Nhan</last-name><first-name>Thomas</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Sulc</last-name><first-name>Elaine Weatherfield</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Doan</last-name><first-name>Sesan Denise</first-name><address><city>Brier</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Luebbert</last-name><first-name>Mathew Henry</first-name><address><city>Seattle</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computing device displays a data visualization user interface that includes a schema region. Each data field displayed in the schema region is visually associated with a respective data object of a plurality of data objects in an object model. The device receives user input to specify a mathematical expression that includes a first data field from a first object and a second data field from a second object. The first object and the second object are distinct objects in the object model. The device generates a calculated data field based on the mathematical expression. The device assigns the calculated data field as a member of a third object in the object model according to relations in the object model connecting the first object to the second object. The device displays the calculated data field, in the schema region, visually associated with the third object.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="90.42mm" wi="158.75mm" file="US20230004584A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="224.37mm" wi="148.34mm" orientation="landscape" file="US20230004584A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="215.98mm" wi="153.25mm" orientation="landscape" file="US20230004584A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="218.10mm" wi="151.89mm" orientation="landscape" file="US20230004584A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="230.21mm" wi="152.32mm" file="US20230004584A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="240.20mm" wi="158.50mm" file="US20230004584A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="218.44mm" wi="146.98mm" orientation="landscape" file="US20230004584A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="213.44mm" wi="146.98mm" orientation="landscape" file="US20230004584A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="208.70mm" wi="146.98mm" orientation="landscape" file="US20230004584A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="180.09mm" wi="146.98mm" orientation="landscape" file="US20230004584A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="225.98mm" wi="147.40mm" orientation="landscape" file="US20230004584A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="233.09mm" wi="97.37mm" file="US20230004584A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="226.99mm" wi="154.35mm" orientation="landscape" file="US20230004584A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="241.05mm" wi="141.48mm" file="US20230004584A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="214.55mm" wi="151.05mm" orientation="landscape" file="US20230004584A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="233.43mm" wi="156.80mm" orientation="landscape" file="US20230004584A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="219.79mm" wi="153.92mm" orientation="landscape" file="US20230004584A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="214.97mm" wi="154.26mm" orientation="landscape" file="US20230004584A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="237.74mm" wi="109.39mm" file="US20230004584A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="215.39mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="224.28mm" wi="155.96mm" orientation="landscape" file="US20230004584A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="221.74mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="215.65mm" wi="156.97mm" orientation="landscape" file="US20230004584A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="234.87mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="239.01mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="233.93mm" wi="143.26mm" orientation="landscape" file="US20230004584A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="242.32mm" wi="153.08mm" orientation="landscape" file="US20230004584A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="230.55mm" wi="142.58mm" orientation="landscape" file="US20230004584A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="234.19mm" wi="145.46mm" orientation="landscape" file="US20230004584A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="220.30mm" wi="137.33mm" orientation="landscape" file="US20230004584A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="235.29mm" wi="151.72mm" orientation="landscape" file="US20230004584A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="232.49mm" wi="154.01mm" orientation="landscape" file="US20230004584A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="241.22mm" wi="154.01mm" orientation="landscape" file="US20230004584A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="214.55mm" wi="151.72mm" orientation="landscape" file="US20230004584A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="214.55mm" wi="149.78mm" orientation="landscape" file="US20230004584A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="235.29mm" wi="150.03mm" orientation="landscape" file="US20230004584A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="231.39mm" wi="151.05mm" orientation="landscape" file="US20230004584A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="236.98mm" wi="86.61mm" file="US20230004584A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="233.93mm" wi="151.05mm" orientation="landscape" file="US20230004584A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="234.27mm" wi="152.91mm" orientation="landscape" file="US20230004584A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="237.74mm" wi="155.79mm" orientation="landscape" file="US20230004584A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="231.65mm" wi="151.98mm" orientation="landscape" file="US20230004584A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00042" num="00042"><img id="EMI-D00042" he="233.51mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00043" num="00043"><img id="EMI-D00043" he="231.48mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00044" num="00044"><img id="EMI-D00044" he="231.56mm" wi="153.16mm" orientation="landscape" file="US20230004584A1-20230105-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00045" num="00045"><img id="EMI-D00045" he="231.56mm" wi="155.87mm" orientation="landscape" file="US20230004584A1-20230105-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00046" num="00046"><img id="EMI-D00046" he="231.22mm" wi="152.99mm" orientation="landscape" file="US20230004584A1-20230105-D00046.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00047" num="00047"><img id="EMI-D00047" he="229.87mm" wi="157.82mm" orientation="landscape" file="US20230004584A1-20230105-D00047.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00048" num="00048"><img id="EMI-D00048" he="235.29mm" wi="154.94mm" orientation="landscape" file="US20230004584A1-20230105-D00048.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00049" num="00049"><img id="EMI-D00049" he="236.98mm" wi="84.92mm" file="US20230004584A1-20230105-D00049.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00050" num="00050"><img id="EMI-D00050" he="230.97mm" wi="154.94mm" orientation="landscape" file="US20230004584A1-20230105-D00050.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00051" num="00051"><img id="EMI-D00051" he="240.03mm" wi="154.94mm" orientation="landscape" file="US20230004584A1-20230105-D00051.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00052" num="00052"><img id="EMI-D00052" he="237.66mm" wi="144.86mm" file="US20230004584A1-20230105-D00052.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00053" num="00053"><img id="EMI-D00053" he="227.33mm" wi="145.03mm" file="US20230004584A1-20230105-D00053.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00054" num="00054"><img id="EMI-D00054" he="227.33mm" wi="144.95mm" file="US20230004584A1-20230105-D00054.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00055" num="00055"><img id="EMI-D00055" he="227.33mm" wi="144.95mm" file="US20230004584A1-20230105-D00055.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00056" num="00056"><img id="EMI-D00056" he="231.22mm" wi="144.95mm" file="US20230004584A1-20230105-D00056.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00057" num="00057"><img id="EMI-D00057" he="221.83mm" wi="144.95mm" file="US20230004584A1-20230105-D00057.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00058" num="00058"><img id="EMI-D00058" he="230.29mm" wi="144.95mm" file="US20230004584A1-20230105-D00058.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00059" num="00059"><img id="EMI-D00059" he="232.92mm" wi="144.86mm" file="US20230004584A1-20230105-D00059.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00060" num="00060"><img id="EMI-D00060" he="236.14mm" wi="144.86mm" file="US20230004584A1-20230105-D00060.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00061" num="00061"><img id="EMI-D00061" he="226.23mm" wi="144.95mm" file="US20230004584A1-20230105-D00061.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00062" num="00062"><img id="EMI-D00062" he="226.23mm" wi="144.95mm" file="US20230004584A1-20230105-D00062.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00063" num="00063"><img id="EMI-D00063" he="236.14mm" wi="144.95mm" file="US20230004584A1-20230105-D00063.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00064" num="00064"><img id="EMI-D00064" he="226.91mm" wi="144.95mm" file="US20230004584A1-20230105-D00064.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00065" num="00065"><img id="EMI-D00065" he="232.92mm" wi="144.95mm" file="US20230004584A1-20230105-D00065.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00066" num="00066"><img id="EMI-D00066" he="232.92mm" wi="144.95mm" file="US20230004584A1-20230105-D00066.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00067" num="00067"><img id="EMI-D00067" he="232.92mm" wi="144.95mm" file="US20230004584A1-20230105-D00067.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00068" num="00068"><img id="EMI-D00068" he="232.92mm" wi="144.95mm" file="US20230004584A1-20230105-D00068.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/944,056, filed Jul. 30, 2020, entitled &#x201c;Using Objects in an Object Model as Database Entities,&#x201d; which is incorporated by reference herein in its entirety.</p><p id="p-0003" num="0002">This application is related to the following applications, each of which is incorporated by reference herein in its entirety:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0003">(i) U.S. patent application Ser. No. 16/944,047, filed Jul. 30, 2020, entitled &#x201c;Analyzing Data Using Data Fields from Multiple Objects in an Object Model,&#x201d; now U.S. Pat. No. 11,216,450, which issued on Jan. 4, 2022; and</li>        <li id="ul0002-0002" num="0004">(ii) U.S. patent application Ser. No. 16/944,076, filed Jul. 30, 2020, entitled &#x201c;Schema Viewer Searching for a Data Analytics Platform,&#x201d; now U.S. Pat. No. 11,232,120, which issued on Jan. 25, 2022.</li>    </ul>    </li></ul></p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0004" num="0005">The disclosed implementations relate generally to analyzing data from data sources, and more specifically to analyzing data using data visualizations constructed according to data fields from multiple objects in an object model.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0005" num="0006">Data visualization applications enable a user to understand information in a database visually, including distribution, trends, outliers, and other factors that are important to making business decisions. In some cases, it is necessary for a user to access information from different data sources or tables to build a data visualization or create a custom calculation. For example, a large database may include hundreds or thousands of distinct tables or views, and it is frequently necessary to combine many of the tables in order to get a desired result. In some cases, a user's analysis requires access to more than one database (e.g., one or more tables in an SQL database and also data stored in a spreadsheet or CSV file). When there are many objects, it can be difficult for a user to find or access the right data.</p><p id="p-0006" num="0007">Some data visualization applications provide a user interface that enables users to build data visualizations and perform calculations. However, when using data from more than one object or table in the database, information regarding relationships between the objects may be required, or the tables may need to be joined in order to generate a new data set that includes data from multiple tables needed for a data visualization.</p><p id="p-0007" num="0008">In some cases, users do not know how the data from the tables will be used and thus may not be able to specify join types in anticipation of what questions can or will be asked from the data. Thus, the technical problem of using data from multiple objects or tables to build a data visualization or calculation can be particularly challenging.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0008" num="0009">Analyzing data from multiple data sets can be challenging. In some cases, it can help to organize the data as an object model. By storing relationships between different data sets in a database as an object model, relationships between data sets can be leveraged to assist users analyzing the data.</p><p id="p-0009" num="0010">An object is a collection of named attributes. An object often corresponds to a real-world object, event, or concept, such as a Store. The attributes are descriptions of the object that are conceptually at a 1:1 relationship with the object. Thus, a Store object may have a single [Manager Name] or [Employee Count] associated with it. At a physical level, an object is often stored as a row in a relational table, or as an object in JSON.</p><p id="p-0010" num="0011">A class is a collection of objects that share the same attributes. It must be analytically meaningful to compare objects within a class and to aggregate over them. At a physical level, a class is often stored as a relational table, or as an array of objects in JSON.</p><p id="p-0011" num="0012">An object model is a set of classes and a set of many-to-one relationships between them. Classes that are related by 1-to-1 relationships are conceptually treated as a single class, even if they are meaningfully distinct to a user. In addition, classes that are related by 1-to-1 relationships may be presented as distinct classes in a data visualization user interface. Many-to-many relationships are conceptually split into two many-to-one relationships by adding an associative table capturing the relationship. Thus, in a hierarchical object model, the objects are organized in a hierarchical order based on their classes. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> provides an example of how a database that includes multiple logical tables may be organized in a hierarchical object model of object classes. As used herein, an object class is typically referred to as a &#x201c;data object&#x201d; or a &#x201c;data set.&#x201d; In some implementations, object model may include different data objects that are obtained from different databases. For example, a first data object may be stored in an SQL database, a second data object may be stored as a desktop file (such as a spreadsheet file or a CSV file), and a third data object may be stored in cloud storage. In some instances, a data object corresponds almost exactly to a single physical table in a database. In some instances, a single physical table in a database corresponds to two or more logically distinct data objects that have been combined by a union and/or a join.</p><p id="p-0012" num="0013">In some implementations, a user may combine multiple physical tables (e.g., using joins and/or unions) to form one master table. In many cases such a master table is a logical table that is constructed on the fly as needed, but in some cases the master table is materialized as another physical table (e.g., in a data warehouse). Either way, the master table can be designated as a single data object. In particular, users can construct new objects from existing objects. Users can also create individual new data fields using data from one or more existing objects. When defining a new calculated data field, an important question is to determine where the new data field belongs in the object model. As described below, some implementations are able to determine where a new data field belongs based on the objects used to create the new data field and the relations between those objects. For example, a scalar calculation using data fields from a single object creates a new data field that is a member of the same single object.</p><p id="p-0013" num="0014">Once an object model is constructed, a data visualization application can assist a user in various ways. In some implementations, data fields may be displayed to a user organized hierarchically based on the object model. Alternatively, a data visualization application may present the data fields to a user based on a user-defined organization scheme, such as displaying the data fields based on their associations with user-defined folders. User-defined folders are particularly useful to users who access the same data sources repeatedly, but access only a small number of the available data fields.</p><p id="p-0014" num="0015">In some implementations, the data visualization application provides the user with relevant information, such as identifying which data fields are used in a data visualization or calculation, or the number of records from a data object that are used in a data visualization or a calculation. In another example, the data visualization application may also identify data fields that are not used in any data visualizations or calculations.</p><p id="p-0015" num="0016">By allowing the user to use data fields across multiple data sets in a database without having to combine the data sets into a single data set, the data visualization application allows users greater flexibility in working with their data as well as preventing aggregation errors that can occur when all of the data objects are combined into a single monolithic data set before generating a data visualization. This is explained in more details in U.S. application Ser. No. 16/246,611, filed Dec. 30, 2018, entitled &#x201c;Generating Data Visualizations According to an Object Model of Selected Data Sources,&#x201d; U.S. application Ser. No. 16/236,612, filed Dec. 30, 2018, entitled &#x201c;Generating Data Visualizations According to an Object Model of Selected Data Sources,&#x201d; and U.S. patent application Ser. No. 16/570,969, filed Sep. 13, 2019, entitled &#x201c;Utilizing Appropriate Measure Aggregation for Generating Data Visualizations of Multi-Fact Datasets,&#x201d; each of which is incorporated by reference herein in its entirety.</p><p id="p-0016" num="0017">(A1) In accordance with some implementations, a method for analyzing data from data sources is performed at a computer having one or more processors and memory. The memory stores one or more programs configured for execution by the one or more processors. The computer receives user selection of a data source and displays a data visualization user interface. The data visualization user interface includes a schema region, a data visualization region, and a plurality of shelf regions. Each shelf region is configured to define a respective characteristic of a displayed data visualization according to placement of data fields from the schema region into the respective shelf region. Each data field in the schema region is associated with a respective system-defined object from the data source. In a first display mode, displaying the schema region includes hierarchically displaying each system-defined object and the data fields associated with the respective system-defined object. In the first display mode, the computer receives a user input to switch from the first display mode to a second display mode. In the second display mode, each data field is displayed hierarchically in a respective user-defined folder and the user-defined folders are distinct from the system-defined objects. In either the first display mode or the second display mode, the computer receives user selection of a first data field from the schema region and user placement of the first data field into a first shelf region. The computer also receives user selection of a second data field from the schema region and user placement of the second data field into a second shelf region. (The placement of the first data field and the placement of the second data field may be performed in the same display mode or in different display modes.) In accordance with placement of the first data field into the first shelf region and placement of the second data field into the second shelf region, the computer generates and displays a data visualization in the data visualization region using data for the first data field and data for the second data field retrieved from the data source.</p><p id="p-0017" num="0018">(A2) In some implementations, the computer automatically generates a new data field that specifies the number of records in a first system-defined data object. The computer also automatically associates the new data field with the first system-defined object. In the first display mode, the computer displays the new data field in association with the first system-defined object. The &#x201c;number of records&#x201d; data field is a calculation that depends on context. The context includes what filters are applied. If some rows are being filtered out in a data visualization, then only the unfiltered rows add to the &#x201c;number of records.&#x201d; In addition, the number of records is split based on the visualization level of detail. For example, if the data is grouped by a Region data field, then the &#x201c;number of records&#x201d; data field computes the corresponding number of records for each of the Regions.</p><p id="p-0018" num="0019">(A3) In some implementations, in the second display mode, the computer detects a user gesture (e.g., click or hover) corresponding to the first data field. In accordance with detection of the user gesture corresponding to the first data field, the computer displays the system-defined object that is associated with the first data field (e.g., in a popup or tooltip).</p><p id="p-0019" num="0020">(A4) In some implementations, the first data field corresponds to (e.g., belongs to) a first system-defined object and the second data field corresponds to (e.g., belongs to) a second system-defined object that is distinct from the first system-defined object. In particular, a user can select data fields from any of the objects.</p><p id="p-0020" num="0021">(A5) In some implementations, in either the first display mode or the second display mode, and in accordance with placement of the first data field into the first shelf region and placement of the second data field into the second shelf region, the computer automatically joins the first system-defined object with the second system-defined object to retrieve data for the desired data visualization. In some implementations, the computer determines a join type between the first system-defined object and the second system-defined object based on the placement of the first and second data fields into the first and second shelf regions, and then the computer generates a joined table based on the join type. The computer then generates a data visualization based on the joined table. In some implementations, the join type is based on which data fields are selected by the user and the relationships between the data objects in the object model that connect the selected data fields.</p><p id="p-0021" num="0022">(A6) In some implementations, the first system-defined object is linked to the second system-defined object through a sequence of one or more relationships and at least one of the relationships in the sequence of one or more relationships is a many-to-many relationship. In some implementations, at least one of the relationships in the sequence of one or more relationships is a many-to-one relationship</p><p id="p-0022" num="0023">(A7) In some implementations, the computer receives user input to create a calculated data field using a fourth data field belonging to a third system-defined object. In accordance with the user input to create the calculation, the computer automatically generates a name and a caption for the calculation.</p><p id="p-0023" num="0024">(A8) In some implementations, in accordance with receiving the user input to create a new calculated data field, the computer automatically associates the calculated data field with the third system-defined object.</p><p id="p-0024" num="0025">(A9) In some implementations, in either the first display mode or the second display mode, the computer displays a search box in the schema region. The computer receives, in the search box, user input that includes a predefined contiguous string of characters that specify a parameter of a search. In response to the user input in the search box, the computer filters the data fields displayed in the schema region, displaying only data fields whose data type matches a data type specified by the search parameter.</p><p id="p-0025" num="0026">(A10) In some implementations, in the second display mode, the computer receives user input to associate a fifth data field with a first user-defined folder and user input to associate a sixth data field with the first user-defined folder. The fifth data field is associated with a sixth system-defined object, the sixth data field is distinct from the fifth data field, and the sixth data field is associated with a seventh system-defined object that is distinct from the sixth system-defined object. In the second display mode, the computer displays the fifth data field and the sixth data field in association with the first user-defined folder. The computer receives user input to switch from the second display mode to the first display mode. In the first display mode, the computer displays, in the schema region, the fifth data field as associated with the sixth system-defined object and the sixth data field as associated with the seventh system-defined object.</p><p id="p-0026" num="0027">(B1) In accordance with some implementations, a method for analyzing data from data sources is performed at a computer having one or more processors and memory. The memory stores one or more programs configured for execution by the one or more processors. The computer receives user input to specify a mathematical expression. The mathematical expression includes a first data field from a first system-defined object and a second data field from a second system-defined object. The second data field is distinct from the first data field. The first object and the second object are distinct objects of an object model comprising a tree in which each relation between objects represents a respective many-to-one relationship between respective objects. The computer then generates a calculated data field based on the mathematical expression and automatically assigns the calculated data field as a member of a third object in the object model according to relations in the tree connecting the first object to the second object.</p><p id="p-0027" num="0028">(B2) In some instances, the third object is distinct from the first object and distinct from the second object.</p><p id="p-0028" num="0029">(B3) In some instances, the tree includes a many-to-one relationship from the third object to the first object and a many-to-one relationship from the third object to the second object, and the third object is distinct from each of the first object and the second object.</p><p id="p-0029" num="0030">(B4) In some instances, the third object is the same as the first object or the third object is the same as the second object.</p><p id="p-0030" num="0031">(B5) In some instances, the tree includes a many-to-one relationship from the first object to the second object. In such cases, assigning the calculated data field as a member of the third object in the object model includes assigning the calculated data field as a member of the first object.</p><p id="p-0031" num="0032">(B6) In some instances, the mathematical expression includes a third data field from a fourth object. The tree includes a many-to-one relationship from the first object to the second object and a many-to-one relationship from the first object to the fourth object. In such cases, assigning the calculated data field as a member of the third object in the object model includes assigning the calculated data field as a member of the first object.</p><p id="p-0032" num="0033">(B7) In some instances, the mathematical expression includes a third data field from a fourth object, distinct from the first object and distinct from the second object. The tree includes: 1) a many-to-one relationship from the third object to the first object, 2) a many-to-one relationship from the third object to the second object, and 3) a many-to-one relationship from the third object to the fourth object. The third object is distinct from each of the first object, the second object, and the fourth object.</p><p id="p-0033" num="0034">(B8) In some implementations, assigning the calculated data field as a member of the third object in the object model includes identifying a set of candidate objects. Each candidate object has a respective sequence of zero or more many-to-one relations in the tree from the respective candidate object to each of the first and second objects. Assigning the calculated data field as a member of the third object in the object model includes selecting the third object as an object in the set of candidate objects having a smallest total sequence length to the first and second objects.</p><p id="p-0034" num="0035">(B9) In some implementations, each of the first object, the second object, and the third object belongs to a same data source.</p><p id="p-0035" num="0036">(B10) In some implementations, the computer receives a user selection to include the calculated data field in a data visualization and generates and displays the data visualization according to calculated data values for the calculated data field.</p><p id="p-0036" num="0037">(B11) In some implementations, the computer automatically generates a name and a caption associated with the calculated data field.</p><p id="p-0037" num="0038">(B12) In some implementations, in a first display mode of a user interface, the computer displays, in a schema region of the user interface, the calculated data field as belonging to the third object.</p><p id="p-0038" num="0039">(B13) In some implementations, the computer receives, in the first display mode, a user input to switch from the first display mode to a second display mode that is different from the first display mode. In the second display mode, the computer displays, in the schema region of the user interface, the calculated data field as belonging to a default folder.</p><p id="p-0039" num="0040">(B14) In some implementations, in the second display mode, the computer receives user input to associate the calculated data field with a user-defined folder that is distinct from the default folder. The computer also displays, in the schema region of the user interface, the calculated data field as belonging to the user-defined folder.</p><p id="p-0040" num="0041">(B15) In some implementations, in the second display mode, the computer receives user input to associate the first data field with the user-defined folder and displays, in the schema region of the user interface, the first data field and the calculated data field as belonging to the user-defined folder.</p><p id="p-0041" num="0042">(B16) In some implementations, the computer displays a search box in the schema region and receives user input in the search box. The user input includes a predefined contiguous string of characters that specify a parameter of a search. In response to the user input in the search box, the computer filters the data fields displayed in the schema region, displaying only data fields whose data type matches a data type specified by the search parameter.</p><p id="p-0042" num="0043">(B17) In some implementations, the predefined contiguous string of characters includes &#x201c;C:&#x201d; and the user input includes the predefined contiguous string of characters followed by one or more characters specifying a search term. The predefined contiguous string of characters specify a search of calculated data fields whose calculation expressions include the search term.</p><p id="p-0043" num="0044">(C1) In accordance with some implementations, a method for analyzing data from data sources is performed at a computer having one or more processors and memory. The memory stores one or more programs configured for execution by the one or more processors. The computer receives user selection of a data source and displays a data visualization user interface that includes a schema region and a search box. Each data field displayed in the schema region is associated with a respective system-defined object from the data source. In a first display mode, the computer displays the schema region by hierarchically displaying each system-defined object and the data fields associated with the respective system-defined object. The computer receives user input to switch from the first display mode to a second display mode. In the second display mode, each data field is displayed hierarchically in a respective user-defined folder, and the user-defined folders are distinct from the system-defined objects. In either the first display mode or the second display mode, the computer receives user input in the search box. The user input includes a predefined contiguous string of characters that specify a search parameter. In response to the user input in the search box, the data fields displayed in the schema region are filtered such that the computer displays only data fields whose data type matches the data type specified by the search parameter.</p><p id="p-0044" num="0045">(C2) In some implementations, the user input includes the predefined contiguous string of characters followed by one or more characters specifying a search string. Filtering the data fields displayed in the schema region includes displaying only data fields whose displayed names include the search string.</p><p id="p-0045" num="0046">(C3) In some implementations, the user input includes the predefined contiguous string of characters followed by one or more characters specifying a search string. The search parameter specifies searching for calculated data fields. Filtering the data fields displayed in the schema region includes displaying only data fields whose displayed names include the search string or whose corresponding calculation expressions include the search string.</p><p id="p-0046" num="0047">(C4) In some implementations, the data type specified by the search parameter is one of (i) dimension, (ii) measure, or (iii) calculation.</p><p id="p-0047" num="0048">(C5) In some implementations, receiving the user input in the search box includes detecting a user gesture to display a list of predefined search parameters. In response to detecting the user gesture, the computer displays a list of predefined search parameters. In response to receiving a user selection from the displayed list, the computer automatically populates the search box with the predefined contiguous string of characters corresponding to the user selection from the displayed list.</p><p id="p-0048" num="0049">(C6) In some implementations, the computer continues to display only data fields whose data type matches the data type specified by the search parameter in response to receiving the user input to switch from the first display mode to the second display mode.</p><p id="p-0049" num="0050">(C7) In some implementations, the schema region includes the search box.</p><p id="p-0050" num="0051">(C8) In some implementations, the computer receives user selection of a data field displayed in the schema region and user placement of the selected data field into a data visualization definition region of the data visualization user interface. The computer also generates a data visualization based on the user selection and placement, and displays the generated data visualization, including one or more visual marks corresponding to data from the selected data field.</p><p id="p-0051" num="0052">(C9) In accordance with some implementations, a method for analyzing data from data sources is performed at a computer having one or more processors and memory. The memory stores one or more programs configured for execution by the one or more processors. The computer receives user selection of a data source and displays a data visualization user interface that includes a schema region and a search box. Each data field displayed in the schema region is associated with a respective system-defined object from the data source. In a first display mode, the computer displays the schema region by hierarchically displaying each system-defined object and the data fields associated with the respective system-defined object. The computer receives user input to switch from the first display mode to a second display mode. In the second display mode, each data field is displayed hierarchically in a respective user-defined folder, and the user-defined folders are distinct from the system-defined objects. In either the first display mode or the second display mode, the computer receives user input, in the search box. The user input includes (i) a predefined contiguous string of characters specifying a search parameter and (ii) a search string. In response to the user input in the search box and a determination that the search parameter specifies a first metadata characteristic about data fields in the data source, the computer filters the data fields displayed in the schema region, displaying only data fields whose first metadata characteristic includes the search string.</p><p id="p-0052" num="0053">(C10) In some implementations, the first metadata characteristic stores user-provided comments about data fields from the data source.</p><p id="p-0053" num="0054">(C11) In some implementations, the computer detects a user gesture corresponding to a first data field displayed in the schema region, and in response to detecting the user gesture, the computer displays a comment associated with the first data field.</p><p id="p-0054" num="0055">(C12) In some implementations, the schema region includes the search box.</p><p id="p-0055" num="0056">In accordance with some implementations, a system for analyzing data from data sources includes one or more processors, memory, and one or more programs stored in the memory. The programs are configured for execution by the one or more processors. The programs include instructions for performing any of the methods described herein.</p><p id="p-0056" num="0057">In accordance with some implementations, a non-transitory computer readable storage medium stores one or more programs configured for execution by a computer system having one or more processors and memory. The one or more programs include instructions for performing any of the methods described herein.</p><p id="p-0057" num="0058">Thus methods, systems, and graphical user interfaces are provided for analyzing data from data sources.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTIONS OF THE DRAWINGS</heading><p id="p-0058" num="0059">For a better understanding of the aforementioned implementations of the invention as well as additional implementations, reference should be made to the Description of Implementations below, in conjunction with the following drawings in which like reference numerals refer to corresponding parts throughout the figures.</p><p id="p-0059" num="0060"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates example of an object model representation of a multi-object data source in accordance with some implementations.</p><p id="p-0060" num="0061"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example of a data visualization interface in an object-based display mode in accordance with some implementations.</p><p id="p-0061" num="0062"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates an example of a data visualization interface in a folder-based display mode in accordance with some implementations.</p><p id="p-0062" num="0063"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a block diagram of a computing device according to some implementations.</p><p id="p-0063" num="0064"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram of a data visualization server according to some implementations.</p><p id="p-0064" num="0065"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>E</figref> are block diagrams of object model schemas according to some implementations.</p><p id="p-0065" num="0066"><figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>F</figref> illustrate a graphical user interface in an object-based display mode according to some implementations.</p><p id="p-0066" num="0067"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>E</figref> illustrate a graphical user interface in a folder-based display mode according to some implementations.</p><p id="p-0067" num="0068"><figref idref="DRAWINGS">FIG. <b>5</b>F</figref> illustrates providing additional information regarding a data field via a graphical user interface according to some implementations.</p><p id="p-0068" num="0069"><figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>J</figref> illustrate features of a graphical user interface according to some implementations.</p><p id="p-0069" num="0070"><figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>C</figref> illustrate a data object screen according to some implementations.</p><p id="p-0070" num="0071"><figref idref="DRAWINGS">FIGS. <b>8</b>A-<b>8</b>P</figref> illustrate analyzing data in a data visualization application according to some implementations.</p><p id="p-0071" num="0072"><figref idref="DRAWINGS">FIGS. <b>9</b>A-<b>9</b>G</figref> provide a flow chart for a method of analyzing a data source with multiple data objects in accordance with some implementations.</p><p id="p-0072" num="0073"><figref idref="DRAWINGS">FIGS. <b>10</b>A-<b>10</b>F</figref> provide a flow chart for a method of analyzing a data source with multiple data objects in accordance with some implementations.</p><p id="p-0073" num="0074"><figref idref="DRAWINGS">FIGS. <b>11</b>A-<b>11</b>B</figref> provide a flow chart for a method of analyzing a data source in accordance with some implementations.</p><p id="p-0074" num="0075"><figref idref="DRAWINGS">FIGS. <b>12</b>A-<b>12</b>B</figref> provide a flow chart for a method of searching for data fields in a data visualization user interface in accordance with some implementations.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0075" num="0076">Reference will now be made in detail to implementations, examples of which are illustrated in the accompanying drawings. In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one of ordinary skill in the art that the present invention may be practiced without these specific details.</p><heading id="h-0006" level="1">DESCRIPTION OF IMPLEMENTATIONS</heading><p id="p-0076" num="0077">Some implementations of an interactive data visualization application use an object model <b>102</b> to show relationships <b>106</b> between data objects <b>104</b>, as shown in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. The data objects <b>104</b> that are part of the object model may be stored locally (e.g., on the same device that is displaying the user interface) or may be stored externally (e.g., on a database server or in the cloud). In this example, each relationship <b>106</b> is a many-to-one relationship between two data objects <b>104</b> in the object model. (The arrows point from the &#x201c;one&#x201d; side of each relationship to the &#x201c;many&#x201d; side of the relationship.) The hierarchical structure of the object model allows the relationships between the data objects <b>104</b> in the object model to be visualized. The object model <b>102</b> may also show characteristics or data fields that are present in each of the data objects <b>104</b> and link them to other data fields or characteristics in related data objects. The many-to-one relationships between the data objects <b>104</b> shows the organizational structure of the object model <b>102</b>. In some instances, each data object corresponds to a database table or a distinct physical file.</p><p id="p-0077" num="0078">Some implementations of an interactive data visualization application use an object model <b>102</b> to represent a multi-object data source. In some instances, an object model <b>102</b> applies to one database (e.g., one SQL database or one spreadsheet file), but an object model may encompass two or more databases. Typically, unrelated databases have distinct object models. In some instances, the object model <b>102</b> closely mimics the data model of the physical database (e.g., classes in the object model correspond to data sets or tables in a database). However, in some cases the object model <b>102</b> is more normalized (or less normalized) than the physical data sources. An object model <b>102</b> groups together attributes (e.g., data fields) that have a one-to-one relationship with each other to form classes (data objects <b>104</b>), and identifies many-to-one relationships <b>106</b> among the classes. In the illustrations below, the many-to-one relationships are illustrated with arrows, with the arrows originating from the &#x201c;one&#x201d; side of the relationship and pointing towards the &#x201c;many&#x201d; side of each relationship. When an object model is constructed, it can facilitate analyzing data from the data source using data fields that are specified or selected by a user. In some implementations, the data fields correspond to columns in the data set (e.g., in a data table).</p><p id="p-0078" num="0079">In some instances, a user may select data fields from different data objects <b>104</b> in the object model <b>102</b> to be included for analysis. The data fields may be added to a graphical user interface that allows the user to work with the data, such as generating calculated fields and creating data visualizations. <figref idref="DRAWINGS">FIGS. <b>1</b>B and <b>1</b>C</figref> show examples of a graphical user interface for analyzing data in a data source.</p><p id="p-0079" num="0080"><figref idref="DRAWINGS">FIGS. <b>1</b>B and <b>1</b>C</figref> show a graphical user interface <b>140</b> in an object-based display mode and a folder-based display mode, respectively, in accordance with some implementations. The graphical user interface <b>140</b> includes a schema region <b>150</b> (also sometimes referred to as a &#x201c;schema viewer&#x201d;), a plurality of shelf regions <b>152</b> (in this example, two shelf regions <b>152</b>-<b>1</b> and <b>152</b>-<b>2</b> are shown), and a data visualization region <b>154</b>. Data fields are shown in the schema region <b>150</b>. In some implementations, the schema region <b>150</b> shows data fields that are selected by the user. In some cases, the schema region <b>150</b> shows all data fields that are in object model <b>102</b> by default when no data fields are selected by the user. In some cases, the schema region <b>150</b> shows all data fields that are included in data objects <b>104</b> that are selected by the user. Each shelf region <b>152</b> is configured to define a respective characteristic of a displayed data visualization according to placement of data fields from the schema region <b>150</b> into the respective shelf region <b>152</b>. The data visualization region <b>154</b> is configured to display data visualizations.</p><p id="p-0080" num="0081">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>, in the object-based display mode, each data field in the schema region <b>150</b> is associated with a respective data object <b>104</b> of the object model <b>102</b>. In the object-based display mode, the schema region <b>150</b> displays each object <b>104</b> and the data fields <b>160</b> associated with the respective object <b>104</b> in a hierarchical manner. For example, the data fields &#x201c;Line Items,&#x201d; &#x201c;Order Number,&#x201d; and &#x201c;Order date&#x201d; are all included in the &#x201c;Sales Data&#x201d; data object <b>104</b>-<b>1</b> and thus, are shown in schema region <b>150</b> as belonging to the &#x201c;Sales Data&#x201d; data object <b>104</b>-<b>1</b> when the data visualization is in the object-based display mode.</p><p id="p-0081" num="0082">For example, in the object-based display mode, the schema region shows two distinct data objects <b>104</b>, a first data object <b>104</b>-<b>1</b> corresponding to a data set entitled &#x201c;Sales Data&#x201d;, and a second data object <b>104</b>-<b>2</b> corresponding to a data set entitled &#x201c;Customer Data.&#x201d; The data fields <b>160</b>-<b>1</b> are shown to be associated with (e.g., are included in, are part of, are nested under, belong to) the &#x201c;Sales Data&#x201d; object <b>104</b>-<b>1</b>. Similarly, the data fields <b>160</b>-<b>2</b> are shown to be associated with (e.g., are included in, are part of, are nested under, belong to) the &#x201c;Customer Data&#x201d; object <b>104</b>-<b>2</b>.</p><p id="p-0082" num="0083">Referring to <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, in the folder-based display mode, the schema region <b>150</b> displays the data fields <b>160</b> in a respective user-defined folder <b>170</b> in a hierarchical manner. Note that the data fields <b>160</b> displayed in <figref idref="DRAWINGS">FIGS. <b>1</b>B and <b>1</b>C</figref> correspond to the same data fields <b>160</b> from the same object model. For example, a user may select one or more data fields from a data object <b>104</b> to be included in a user-defined folder <b>170</b>. A user-defined folder <b>170</b> (e.g., user-defined folders <b>170</b>-<b>1</b>, <b>170</b>-<b>2</b>, and <b>170</b>-<b>3</b>) may include any number of data fields. In some cases, a user-defined folder <b>170</b> may include two or more data fields, each of which is associated with a different data object <b>104</b> in the object model <b>102</b>. For example, the &#x201c;Customers&#x201d; user-defined folder <b>170</b>-<b>2</b> includes two data fields, &#x201c;Customer Name&#x201d; from the &#x201c;Sales Data&#x201d; object <b>104</b>-<b>1</b> and &#x201c;Customer Name&#x201d; from the &#x201c;Customer Data&#x201d; object <b>104</b>-<b>2</b>. Thus, any data field can exist in any folder, allowing users to organize the data fields as they see fit.</p><p id="p-0083" num="0084">As shown in <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>, in the folder-based display mode, the schema region <b>150</b> shows 3 distinct user-defined folders, a &#x201c;Locations&#x201d; user-defined folder <b>170</b>-<b>1</b>, a &#x201c;Customers&#x201d; user-defined folder <b>170</b>-<b>2</b>, and a &#x201c;Product&#x201d; user-defined folder <b>170</b>-<b>3</b>. Data fields <b>172</b>-<b>1</b> are shown to be associated with (e.g., are included in, are part of, are nested under, belong to) the &#x201c;Locations&#x201d; user-defined folder <b>170</b>-<b>1</b>, data fields <b>172</b>-<b>2</b> are shown to be associated with (e.g., are included in, are part of, are nested under, belong to) the &#x201c;Customers&#x201d; user-defined folder <b>170</b>-<b>2</b>, and data fields <b>173</b>-<b>3</b> are shown to be associated with (e.g., are included in, are part of, are nested under, belong to) the &#x201c;Product&#x201d; user-defined folder <b>170</b>-<b>3</b>. Note that despite the fact that the data field &#x201c;Location&#x201d; belongs to the &#x201c;Customer Data&#x201d; object <b>104</b>-<b>2</b> (as shown in the object-based display mode in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref>), in the folder-based display mode, the schema region <b>150</b> shows that the data field &#x201c;Location&#x201d; belongs to the &#x201c;Locations&#x201d; user-defined folder <b>170</b>-<b>1</b>.</p><p id="p-0084" num="0085"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a block diagram illustrating a computing device <b>200</b> (e.g., a client device) that can execute a data visualization application <b>222</b> or a data visualization web application to display a data visualization. In some implementations, the computing device displays a graphical user interface <b>224</b> for the data visualization application. Computing devices <b>200</b> include desktop computers, laptop computers, tablet computers, and other computing devices with a display and a processor capable of running a data visualization application <b>222</b>. The data visualization application <b>222</b> may include a data source generator for database organization (e.g., generating object models for databases) as well as generating new data sources using existing databases. A computing device <b>200</b> typically includes one or more processing units/cores (CPUs) <b>202</b> for executing modules, programs, and/or instructions stored in the memory <b>214</b> and thereby performing processing operations, one or more network or other communications interfaces <b>204</b>, memory <b>214</b>, and one or more communication buses <b>212</b> for interconnecting these components. The communication buses <b>212</b> may include circuitry that interconnects and controls communications between system components. A computing device <b>200</b> includes a user interface <b>206</b> comprising a display <b>208</b> and one or more input devices or mechanisms <b>210</b>. In some implementations, the input device/mechanism includes a keyboard; in some implementations, the input device/mechanism includes a &#x201c;soft&#x201d; keyboard, which is displayed as needed on the display <b>208</b>, enabling a user to &#x201c;press keys&#x201d; that appear on the display <b>208</b>. In some implementations, the display <b>208</b> and input device/mechanism <b>210</b> comprise a touch screen display (also called a touch sensitive display). In some implementations, the display is an integrated part of the computing device <b>200</b>. In some implementations, the display is a separate display device.</p><p id="p-0085" num="0086">In some implementations, the memory <b>214</b> includes high-speed random-access memory, such as DRAM, SRAM, DDR RAM or other random-access solid-state memory devices. In some implementations, the memory <b>214</b> includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid-state storage devices. In some implementations, the memory <b>214</b> includes one or more storage devices remotely located from the CPUs <b>202</b>. The memory <b>214</b>, or alternatively the non-volatile memory devices within the memory <b>214</b>, comprises a non-transitory computer readable storage medium. In some implementations, the memory <b>214</b>, or the computer readable storage medium of the memory <b>214</b>, stores the following programs, modules, and data structures, or a subset thereof:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0087">an operating system <b>216</b>, which includes procedures for handling various basic system services and for performing hardware dependent tasks;</li>        <li id="ul0004-0002" num="0088">a communication module <b>218</b>, which is used for connecting the computing device <b>200</b> to other computers and devices via the one or more communication network interfaces <b>204</b> (wired or wireless) and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on;</li>        <li id="ul0004-0003" num="0089">a web browser <b>220</b> (or other client application), which enables a user to communicate over a network with remote computers or devices;</li>        <li id="ul0004-0004" num="0090">a data visualization application <b>222</b>, which provides a graphical user interface <b>224</b> for a user to construct visual graphics (e.g., an individual data visualization or a dashboard with a plurality of related data visualizations). In some implementations, the data visualization application <b>222</b> executes as a standalone application (e.g., a desktop application). In some implementations, the data visualization application <b>222</b> executes within the web browser <b>220</b> (e.g., as a web application);</li>        <li id="ul0004-0005" num="0091">the data visualization application <b>222</b> includes a graphical user interface <b>224</b>, which enables a user to build data visualizations by specifying elements visually, and also provides a graphical view to access or build object models and data sources;</li>        <li id="ul0004-0006" num="0092">the data visualization application also includes a data visualization generator <b>226</b>, which generates data visualizations according to user specification. In accordance with some implementations, the data visualization generator <b>226</b> generates a data visualization in accordance with user association (e.g., placement) of data fields with respective data shelf regions <b>152</b>. In some implementations, the data visualization generator <b>226</b> generates a data visualization based on characteristics such as data type (e.g., data characteristics) of a data field that is selected by the user for inclusion the data visualization;</li>        <li id="ul0004-0007" num="0093">the data visualization application also includes a calculation generator <b>228</b>, which generates calculated fields based on user-defined mathematical expressions. For example, a user may include one or more data fields in a mathematical expression that defines a calculated field. Calculated fields can be treated in the same way as data fields. For example, calculated fields may be associated with one or more user-defined folders, calculated fields may also be associated with a data object <b>104</b> of the object model <b>102</b>, and calculated fields may be used in generating data visualizations;</li>        <li id="ul0004-0008" num="0094">the data visualization application also includes a display mode module <b>230</b> that is responsible for the organization and display of data fields in the object-based display mode and the folder-based display mode. In some implementations, the display mode module <b>230</b> allows for smooth transitioning between the two display modes and updates the schema region <b>150</b> based on which display mode is currently selected (e.g., active). The display mode module <b>230</b> also keeps track of user-defined folders <b>170</b> and associations between data fields and the user-defined folders in the folder-based display mode;</li>        <li id="ul0004-0009" num="0095">the data visualization application also includes a naming module <b>232</b> that is configured to update names for user-defined folders <b>170</b>, data objects <b>104</b>, and data fields. In accordance with some implementations, the naming module <b>232</b> is configured to keep track of naming conventions and naming changes implemented by the user. In some implementations, the naming module <b>232</b> is configured to automatically rename or generate a new name for a data field that has a same name as another data field such that a user can distinguish between, for example, two data fields entitled &#x201c;Address,&#x201d; where the first data field includes delivery addresses from a first data object <b>104</b>-<b>1</b> and the second data field includes store addresses from a second data object <b>104</b>-<b>2</b> that is different from the first data object <b>104</b>-<b>1</b>;</li>        <li id="ul0004-0010" num="0096">the data visualization application also includes a relationships module <b>234</b> that is responsible for keeping track of the relationships between data objects <b>104</b> of object model <b>102</b>. In accordance with some implementations, the relationships module <b>234</b> uses the relationship between two or more data objects <b>104</b> of object model <b>102</b> in order to automatically determine (e.g., assign, categorize, discern) which data object <b>104</b> a generated data visualization or a calculated data field belongs to. In accordance with some implementations, the relationships module <b>234</b> uses the relationship between two or more data objects <b>104</b> of object model <b>102</b> in order to automatically form one or more joins that are specific to a user-defined calculation or a user-defined data visualization; and</li>        <li id="ul0004-0011" num="0097">one or more object models <b>102</b>, which identify the structure of one or more databases <b>112</b>. Each object model <b>102</b> includes a plurality of data objects (classes), such as a first data object <b>104</b>-<b>1</b> and a second data object. Each object model <b>102</b> also includes many-to-one relationships <b>106</b> between the data objects <b>104</b>. In some instances, an object model <b>102</b> maps each data set or table within a database to a data object <b>104</b>, with many-to-one relationships <b>106</b> between data objects <b>104</b> corresponding to foreign key relationships between the data sets. In some instances, the model of an underlying database does not cleanly map to an object model <b>102</b> in this simple way, so the object model <b>102</b> includes information that specifies how to transform the raw data into appropriate data objects <b>104</b>. In some instances, the raw data source is a simple file (e.g., a spreadsheet), which is transformed into multiple data sets objects (e.g., one data set per worksheet tab). In some implementations, the object model also includes one or more many-to-many relationships between objects. Because many-to-many relationships provide less information about how the objects are related, some implementations replace each many-to-many relationship with an additional object (e.g., an associative table) and many-to-one relationships to the additional object. This is particularly useful when the associative table corresponds to a meaningful concept. For example, there is a many-to-many relationship between Customers and Products for a store. These two objects are related by transactions in which a customer buys a specific product, and a transaction is an important concept on its own, with a sales date, purchase price, quantity sold, computed sales tax, and other attributes. Creating a Transactions object and/or a LineItems object can replace the many-to-many relationship with many-to-one relationships.</li>    </ul>    </li></ul></p><p id="p-0086" num="0098">Each of the above identified executable modules, applications, or set of procedures may be stored in one or more of the previously mentioned memory devices, and corresponds to a set of instructions for performing a function described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, or modules, and thus various subsets of these modules may be combined or otherwise re-arranged in various implementations. In some implementations, the memory <b>214</b> stores a subset of the modules and data structures identified above. In some implementations, the memory <b>214</b> stores additional modules or data structures not described above.</p><p id="p-0087" num="0099">Although <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> shows a computing device <b>200</b>, <figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is intended more as a functional description of the various features that may be present rather than as a structural schematic of the implementations described herein. In practice, and as recognized by those of ordinary skill in the art, items shown separately could be combined and some items could be separated.</p><p id="p-0088" num="0100"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram of a data visualization server <b>290</b> in accordance with some implementations. A data visualization server <b>290</b> may host one or more databases <b>286</b> or may provide various executable applications or modules. A server <b>290</b> typically includes one or more processing units/cores (CPUs) <b>250</b>, one or more network interfaces <b>252</b>, memory <b>260</b>, and one or more communication buses <b>254</b> for interconnecting these components. In some implementations, the server <b>290</b> includes a user interface <b>256</b>, which includes a display <b>258</b> and one or more input devices <b>259</b>, such as a keyboard and a mouse. In some implementations, the communication buses <b>254</b> include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.</p><p id="p-0089" num="0101">In some implementations, the memory <b>260</b> includes high-speed random-access memory, such as DRAM, SRAM, DDR RAM, or other random-access solid-state memory devices, and may include non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid-state storage devices. In some implementations, the memory <b>260</b> includes one or more storage devices remotely located from the CPU(s) <b>250</b>. The memory <b>260</b>, or alternatively the non-volatile memory devices within the memory <b>260</b>, comprise a non-transitory computer readable storage medium.</p><p id="p-0090" num="0102">In some implementations, the memory <b>260</b>, or the computer readable storage medium of the memory <b>260</b>, stores the following programs, modules, and data structures, or a subset thereof:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0103">an operating system <b>262</b>, which includes procedures for handling various basic system services and for performing hardware dependent tasks;</li>        <li id="ul0006-0002" num="0104">a network communication module <b>264</b>, which is used for connecting the server <b>290</b> to other computers via the one or more communication network interfaces <b>252</b> (wired or wireless) and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on;</li>        <li id="ul0006-0003" num="0105">a web server <b>266</b> (such as an HTTP server), which receives web requests from users and responds by providing responsive web pages or other resources;</li>        <li id="ul0006-0004" num="0106">a data visualization web application <b>270</b>, which may be downloaded and executed by a web browser <b>220</b> on a user's computing device <b>200</b>. In general, a data visualization web application <b>270</b> has the same functionality as a desktop data visualization application <b>222</b>, but provides the flexibility of access from any device at any location with network connectivity, and does not require installation and maintenance. In some implementations, the data visualization web application <b>270</b> includes various software modules to perform certain tasks. In some implementations, the data visualization web application <b>270</b> includes a user interface module <b>272</b>, which provides the user interface for all aspects of the data visualization web application <b>270</b>;</li>        <li id="ul0006-0005" num="0107">in some implementations, the data visualization web application includes a data visualization generator <b>274</b>, which generates and displays data visualizations according to user-selected data sources and data fields, as well as one or more object models <b>102</b>;</li>        <li id="ul0006-0006" num="0108">in some implementations, the data visualization web application includes a calculation generator <b>228</b>, a display mode module <b>230</b>, a naming module <b>232</b>, and a relationships module <b>234</b>, each of which is described above for a computing device <b>200</b>;</li>        <li id="ul0006-0007" num="0109">one or more object models <b>102</b>, as described above for a computing device <b>200</b>;</li>        <li id="ul0006-0008" num="0110">a data retrieval module <b>284</b>, which builds and executes queries to retrieve data from one or more databases <b>286</b>. The databases <b>286</b> may be stored locally on the server <b>290</b> or stored at an external database system. In some implementations, data from two or more different data sources (e.g., databases) may be blended. In some implementations, the data retrieval module <b>284</b> uses a visual specification to build the queries;</li>        <li id="ul0006-0009" num="0111">one or more databases <b>286</b>, which store data used or created by the data visualization web application <b>270</b> or data visualization application <b>222</b>. The databases <b>286</b> may store data sources <b>288</b>, which provide the data used in the generated data visualizations. Each data source <b>288</b> includes one or more data fields <b>292</b>. In some implementations, the database <b>286</b> stores user preferences. In some implementations, the database <b>286</b> includes a data visualization history log <b>294</b>. In some implementations, the data visualization history log <b>294</b> tracks each time the data visualization web application <b>270</b> or data visualization application <b>222</b> renders a data visualization.</li>    </ul>    </li></ul></p><p id="p-0091" num="0112">The databases <b>286</b> may store data in many different formats, and commonly includes many distinct tables, each with a plurality of data fields <b>292</b>. Some databases <b>286</b> comprise a single table. The data fields <b>292</b> include both raw fields from the database (e.g., a column from a database table or a column from a spreadsheet) as well as derived data fields, which may be computed or constructed from one or more other data fields. For example, derived data fields include computing a month or quarter from a date field, computing a span of time between two date fields, computing cumulative totals for a quantitative field, computing percent growth, and so on. In some instances, derived data fields are accessed by stored procedures or views in the database. In some implementations, the definitions of derived data fields <b>292</b> are stored separately from the data source <b>288</b>. In some implementations, the database <b>286</b> stores a set of user preferences for each user. The user preferences may be used when the data visualization web application <b>270</b> (or desktop data visualization application <b>222</b>) makes recommendations about how to view a set of data fields <b>292</b>. In some implementations, the database <b>286</b> stores a data visualization history log <b>294</b>, which stores information about each data visualization generated. In some implementations, the database <b>286</b> stores other information, including other information used by the data visualization application <b>222</b> or data visualization web application <b>270</b>. The databases <b>286</b> may be separate from the data visualization server <b>290</b>, or may be included with the data visualization server (or both).</p><p id="p-0092" num="0113">In some implementations, the data visualization history log <b>294</b> stores visual specifications selected by users, which may include a user identifier, a timestamp of when the data visualization was created, a list of the data fields used in the data visualization, the type of the data visualization (sometimes referred to as a &#x201c;view type&#x201d; or a &#x201c;chart type&#x201d;), data encodings (e.g., color and size of marks), and the data relationships selected. In some implementations, one or more thumbnail images of each data visualization are also stored. Some implementations store additional information about created data visualizations, such as the name and location of the data source <b>288</b>, the number of rows from the data source that were included in the data visualization, the version of the data visualization software, and so on.</p><p id="p-0093" num="0114">Each of the above identified executable modules, applications, or sets of procedures may be stored in one or more of the previously mentioned memory devices, and corresponds to a set of instructions for performing a function described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, or modules, and thus various subsets of these modules may be combined or otherwise re-arranged in various implementations. In some implementations, the memory <b>260</b> stores a subset of the modules and data structures identified above. In some implementations, the memory <b>260</b> stores additional modules or data structures not described above.</p><p id="p-0094" num="0115">Although <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> shows a data visualization server <b>290</b>, <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is intended more as a functional description of the various features that may be present rather than as a structural schematic of the implementations described herein. In practice, and as recognized by those of ordinary skill in the art, items shown separately could be combined and some items could be separated. In addition, some of the programs, functions, procedures, or data shown above with respect to a server <b>290</b> may be stored or executed on a computing device <b>200</b>. In some implementations, the functionality and/or data may be allocated between a computing device <b>200</b> and one or more servers <b>290</b>. Furthermore, one of skill in the art recognizes that <figref idref="DRAWINGS">FIG. <b>2</b>B</figref> need not represent a single physical device. In some implementations, the server functionality is allocated across multiple physical devices that comprise a server system. As used herein, references to a &#x201c;server&#x201d; or &#x201c;data visualization server&#x201d; include various groups, collections, or arrays of servers that provide the described functionality, and the physical servers need not be physically collocated (e.g., the individual physical devices could be spread throughout the United States or throughout the world).</p><p id="p-0095" num="0116"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>E</figref> are block diagrams of object model schemas according to some implementations. An object model can be depicted as a graph or block diagram, as shown in <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>E</figref>. <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>E</figref> illustrates different types of object models, all of which are supported by the data analysis methods described herein.</p><p id="p-0096" num="0117"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> shows an example of a hierarchical object model <b>300</b> that is arranged so that the &#x201c;many&#x201d; side of each relationship is always to the left of the &#x201c;one&#x201d; side. The many-to-one relationships <b>306</b> in the object model <b>300</b> are illustrated by arrows, with the arrows originating from the &#x201c;one&#x201d; side of the relationship and pointing towards the &#x201c;many&#x201d; side of each relationship. The object model <b>300</b> includes multiple data objects <b>104</b>, which are referred to individually as a data object <b>304</b>-<i>n </i>with n as a placeholder for a data set identifier (e.g., data object <b>304</b>-<b>1</b> is distinct from data object <b>304</b>-<b>2</b>). The data objects <b>304</b> in the object model <b>300</b> have many-to-one relationships <b>106</b>, connecting each data object <b>304</b>-<i>n </i>with at least one other data object and forming a tree. Thus, the tree structure illustrates different classes (data objects) in the object model <b>300</b>, as well as the many-to-one relationships <b>306</b> between the data objects <b>304</b>.</p><p id="p-0097" num="0118">For example, the data objects <b>304</b>-<b>5</b> and <b>304</b>-<b>6</b> each has a direct many-to-one relationship to the data object <b>304</b>-<b>4</b>. Each of the data objects <b>304</b>-<b>5</b> and <b>304</b>-<b>6</b> can be described as being &#x201c;upstream&#x201d; from the data object <b>304</b>-<b>4</b>.</p><p id="p-0098" num="0119">In a second example, the data object <b>304</b>-<b>3</b> is related to each of the data objects <b>304</b>-<b>5</b> and <b>304</b>-<b>6</b> via sequences of two many-to-one relationships. Thus, the data object <b>304</b>-<b>3</b> can be described as being &#x201c;downstream&#x201d; from each of the data objects <b>304</b>-<b>5</b> and <b>304</b>-<b>6</b>. Referring to the relationship between the data objects <b>304</b>-<b>3</b> and <b>304</b>-<b>7</b>, the data object <b>304</b>-<b>7</b> is not related to the data object <b>304</b>-<b>3</b> via a sequence of many-to-one relationships or via a sequence of one-to-many relationships. Thus the data object <b>304</b>-<b>7</b> is not considered to be &#x201c;upstream&#x201d; or &#x201c;downstream&#x201d; from the data object <b>304</b>-<b>3</b>. The data object <b>304</b>-<b>7</b> can be considered to be on a different &#x201c;branch&#x201d; of the tree. In the same way, the data objects <b>304</b>-<b>8</b>, <b>304</b>-<b>9</b>, <b>304</b>-<b>10</b>, and <b>304</b>-<b>11</b>, which are part of the same &#x201c;branch,&#x201d; are neither &#x201c;upstream&#x201d; nor &#x201c;downstream&#x201d; from any of the data objects <b>304</b>-<b>2</b>, <b>304</b>-<b>3</b>, <b>304</b>-<b>4</b>, <b>304</b>-<b>5</b>, and <b>304</b>-<b>6</b>, which form a different &#x201c;branch&#x201d; on the tree.</p><p id="p-0099" num="0120"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> shows an example of a hierarchical object model <b>310</b> that is arranged so that the &#x201c;many&#x201d; side of each relationship is always to the left of the &#x201c;one&#x201d; side. The many-to-one relationships <b>316</b> in the object model <b>310</b> are illustrated by arrows, with the arrows originating from the &#x201c;one&#x201d; side of the relationship and pointing towards the &#x201c;many&#x201d; side of each relationship. The object model <b>312</b> includes multiple data objects <b>314</b> that have many-to-one relationships <b>316</b>, connecting each data object <b>314</b>-<i>n </i>with at least one other data object and forming a tree.</p><p id="p-0100" num="0121">For example, the data object <b>314</b>-<b>1</b> has a direct many-to-one relationship to each of the data objects <b>314</b>-<b>2</b>, <b>314</b>-<b>3</b>, and <b>314</b>-<b>4</b>. Thus, data object <b>314</b>-<b>1</b> can be described as being &#x201c;upstream&#x201d; from each of the data objects <b>314</b>-<b>2</b>, <b>314</b>-<b>3</b>, and <b>314</b>-<b>4</b>.</p><p id="p-0101" num="0122">In a second example, the data object <b>314</b>-<b>8</b> is related to each of the data objects <b>314</b>-<b>3</b> and <b>314</b>-<b>1</b> via sequences of two many-to-one relationships. Thus, the data object <b>314</b>-<b>8</b> can be described as being &#x201c;downstream&#x201d; from each of the data objects <b>314</b>-<b>3</b> and <b>314</b>-<b>1</b>. Additionally, when looking at two or more data objects <b>314</b>, it is possible that two or more data objects <b>314</b> may share one or more common ancestors. For example, data objects <b>314</b>-<b>1</b> and <b>314</b>-<b>3</b> are common ancestors to the data objects <b>314</b>-<b>6</b>, <b>314</b>-<b>8</b>, and <b>314</b>-<b>10</b>. A least common ancestor is a common ancestor that is separated by the fewest number of many-to-one relationships to each of the &#x201c;descendant&#x201d; data objects <b>314</b>. In this example, data object <b>314</b>-<b>3</b> is the least common ancestor of data objects <b>314</b>-<b>6</b>, <b>314</b>-<b>8</b>, and <b>314</b>-<b>10</b>. In a second example, a least common ancestor of data objects <b>314</b>-<b>9</b> and <b>314</b>-<b>8</b> is data object <b>314</b>-<b>7</b>.</p><p id="p-0102" num="0123"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> shows an example of a hierarchical object model <b>320</b> that include data objects <b>324</b> that have many-to-one relationships <b>326</b>, connecting each data object <b>324</b>-<i>n </i>with at least one other data object and forming a tree, similar to object model <b>310</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. However, object model <b>320</b> includes a loop formed by data objects <b>324</b>-<b>5</b>, <b>324</b>-<b>6</b>, and <b>324</b>-<b>9</b>. As shown, each of the data objects <b>324</b>-<b>5</b> and <b>324</b>-<b>6</b> has a direct many-to-one-relationship to data object <b>324</b>-<b>9</b>. Additionally, data object <b>324</b>-<b>5</b> also has a direct many-to-one-relationship to data object <b>324</b>-<b>6</b>.</p><p id="p-0103" num="0124"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> shows an example of a star schema object model <b>330</b>. As shown, object model <b>330</b> includes data objects <b>334</b> that have many-to-one relationships <b>336</b>, connecting each data object <b>334</b>-<i>n </i>with at least one other data object. As shown, data object <b>336</b>-<b>1</b> has a direct many-to-one-relationship to each of the data objects <b>334</b>-<b>2</b>, <b>334</b>-<b>3</b>, <b>334</b>-<b>4</b>, <b>334</b>-<b>5</b>, and <b>334</b>-<b>6</b>.</p><p id="p-0104" num="0125"><figref idref="DRAWINGS">FIG. <b>3</b>E</figref> shows an example of a snowflake schema object model <b>340</b>. As shown, object model <b>340</b> includes data objects <b>344</b> that have many-to-one relationships <b>346</b>, connecting each data object <b>344</b>-<i>n </i>with at least one other data object. As shown, data object <b>346</b>-<b>1</b> has a direct many-to-one-relationship to each of the data objects <b>334</b>-<b>2</b>, <b>334</b>-<b>3</b>, <b>334</b>-<b>4</b>, and <b>334</b>-<b>6</b>. Additionally, the data object <b>344</b>-<b>4</b> has a direct many-to-one-relationship to the data object <b>344</b>-<b>5</b>. Similarly, the data object <b>344</b>-<b>6</b> has a direct many-to-one-relationship to each of the data objects <b>344</b>-<b>7</b> and <b>344</b>-<b>8</b>.</p><p id="p-0105" num="0126"><figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>F</figref> show examples a schema region <b>150</b> when a graphical user interface <b>140</b> is in an object-based display mode according to some implementations.</p><p id="p-0106" num="0127">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, when the object model includes a single data object (e.g., an object model that has one data object) and the data object includes a single table (e.g., the data object has one table), the schema region <b>150</b> shows data fields that are in the data object. Since there is only one data object and only one table in the data object, the schema region <b>150</b> may, in some cases, not display the data object name or a heading (e.g., name, title) for the table. Additionally, the data fields are grouped by whether the data field is a Dimension or a Measure. In general, Dimensions are data fields that generally cannot be aggregated (other than by counting). Dimensions are typically categorical fields, storing data such as names, products, regions, or stores. In contrast, Measures are data fields that can be measured, aggregated, or used in mathematical operations (e.g., computing sums). For example, as shown, the schema region <b>150</b> displays (e.g., shows, lists) the data fields grouped based on whether the data field is a Dimension or a Measure. Data fields that are Dimensions are shown above a line <b>410</b> (shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> as a solid gray line) and data fields that are measures are shown below the line <b>410</b>.</p><p id="p-0107" num="0128">Additionally, data fields from different data sets may be used to form calculations (also referred to as calculated field) or to generate a data visualization. In addition to any user-defined parameters, such as a mathematical expression defining a calculation or a user association of data fields to respective shelf regions, the relationships represented in the object model can be used to automatically associate the calculated fields or generated data visualizations to a particular data object in the object model.</p><p id="p-0108" num="0129">The schema region <b>150</b> also includes one or more data fields that are automatically generated by the data visualization application. In this example, the &#x201c;Number of Records&#x201d; data field is an automatically generated field.</p><p id="p-0109" num="0130">In some implementations, a generated field (e.g., a user-generated field such as a calculated field, or an application-generated field such as a number of records field) is shown below a data field with which the generated field is associated. Additionally, in some implementations, the schema region <b>150</b> displays generated fields using a text style (e.g., font characteristic) that is different from a text style used to display data fields from the data object. For example, as shown, generated data fields are shown in italicized font and data fields from the data object are shown in non-italicized font.</p><p id="p-0110" num="0131">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, when the object model includes a single data object and the data object includes multiple tables (e.g., the object model has one data object and the data object corresponds to a plurality of unionized tables), the schema region <b>150</b> shows the data fields in the data object grouped by the table to which the data field belongs (e.g., is associated with). Since there is only one data object, the schema region <b>150</b> may, in some cases, not display the data object name. Additionally, the data fields are grouped by whether the data field is a Dimension or a Measure. In this example, the data object has two tables, &#x201c;Orders&#x201d; and &#x201c;Customers,&#x201d; and a list of data fields associated with each table is displayed (e.g. shown, listed) underneath the table heading. Data fields shown above line <b>410</b> are Dimensions and data fields shown below the line <b>410</b> are Measures. As shown, the &#x201c;Orders&#x201d; table includes both Dimensions and Measures. Thus, the &#x201c;Orders&#x201d; table is shown once above the line <b>410</b> with Dimensions listed under the &#x201c;Orders&#x201d; heading, and once below the line <b>410</b> with Measures listed under the &#x201c;Orders&#x201d; heading. For example, the data fields &#x201c;Line Items&#x201d; and &#x201c;Order Number&#x201d; (among others) are data fields that are Dimensions and belong to the &#x201c;Orders&#x201d; table and &#x201c;Sales&#x201d; and &#x201c;Profit&#x201d; (among others) are data fields that are Measures and belong to the &#x201c;Orders&#x201d; table.</p><p id="p-0111" num="0132"><figref idref="DRAWINGS">FIG. <b>4</b>C</figref> provides additional examples of how a schema region <b>150</b> may display data fields when the object model includes a single data object (e.g., an object model that has one data object) and the data object includes multiple tables. When an object model includes a plurality of data objects (e.g., two or more data objects) and each data object includes one table (e.g., a single table, only one table), the schema region <b>150</b> displays the data fields grouped by the data object to which the data field belongs. In some implementations, the schema region <b>150</b> displays the data object names. In some implementations, the schema region <b>150</b> may optionally display the table headings (e.g., names). Additionally, the data fields are grouped by whether the data field is a Dimension or a Measure. In this example, there are three data objects (e.g., three tables), &#x201c;Actor,&#x201d; &#x201c;Appearance,&#x201d; and &#x201c;Character.&#x201d; The &#x201c;Actor&#x201d; data object includes two data fields, &#x201c;Actor&#x201d; and &#x201c;Height.&#x201d; A user viewing the schema region <b>150</b> is able to quickly determine that the data field &#x201c;Actor&#x201d; is a Dimension and the data field &#x201c;Height&#x201d; is a Measure based on the separation between the two data fields by the line <b>410</b>.</p><p id="p-0112" num="0133"><figref idref="DRAWINGS">FIG. <b>4</b>D</figref> provides additional examples of how a schema region <b>150</b> may display data fields when an object model includes a plurality of data objects (e.g., two or more data objects) and at least one of the data objects includes multiple tables (e.g., a plurality of tables, two or more tables), the schema region <b>150</b> displays the data fields grouped by the data object (or table) to which the data field belongs. In some implementations, the schema region <b>150</b> displays the data object names. In some implementations, the schema region <b>150</b> may optionally display the table headings (e.g., names). Additionally, the data fields are grouped by whether the data field is a Dimension or a Measure.</p><p id="p-0113" num="0134">For example, under the &#x201c;Sales Data&#x201d; data object, the line <b>410</b> separates the Dimensions and Measures that belong to the &#x201c;Sales Data&#x201d; data object. Thus, data fields that belong to the &#x201c;Sales Data&#x201d; data object and are Dimensions (such as &#x201c;Line Items,&#x201d; &#x201c;Order Number,&#x201d; &#x201c;Order Date,&#x201d; &#x201c;Ship Date,&#x201d; &#x201c;Customer Name,&#x201d; &#x201c;Product Name,&#x201d; and &#x201c;Top Customer by Profit&#x201d;) are shown above the line <b>410</b>, and data fields that belong to the &#x201c;Sales Data&#x201d; data object and are Measures (such as &#x201c;Sales,&#x201d; &#x201c;Profit,&#x201d; &#x201c;Discount,&#x201d; and &#x201c;Number of Sales Data Records&#x201d;) are shown below the line <b>410</b>.</p><p id="p-0114" num="0135">In some implementations, data fields that are not part of a table (e.g., does not belong to a table) are shown below all the tables (e.g., below all the tables and the data fields that belong to a table). Examples of data fields that may not be associated with a table include generated data fields, calculated data fields, and number of records data fields. An example is shown in <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, where data fields &#x201c;Measure Names,&#x201d; &#x201c;Number of Records,&#x201d; and &#x201c;Measure Values&#x201d; are at the bottom of the schema region <b>150</b> and are not shown to belong to or be associated with any data objects or tables. However, a user is able to quickly discern that the data field &#x201c;Measure Names&#x201d; is a Dimension and the data fields Number of Records&#x201d; and &#x201c;Measure Values&#x201d; are Measures since they are separated by the line <b>410</b>. Another example is shown in <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, where data fields &#x201c;Measure Names,&#x201d; &#x201c;Order Size per Customer,&#x201d; and &#x201c;Longitude (generated)&#x201d; are at the bottom of the schema region <b>150</b> and are shown as not belonging to or being associated with any data objects or tables.</p><p id="p-0115" num="0136">In some implementations, as shown in <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>, data fields that are not associated with a data object in the object model are listed under a &#x2018;No Object&#x2019; section <b>420</b> (e.g., a &#x201c;common area). In some implementations, data fields that are associated with multiple data objects in the object model (such as complex calculations) are also listed under the &#x2018;No Object&#x2019; section <b>420</b>. As shown, the data fields in the &#x2018;No Object&#x2019; section <b>420</b> are listed hierarchically and grouped based on whether the data field is a Dimension or Measure. For example, when a user generates a new data field (such as a calculated data field) that uses information from two or more data fields belonging to different data objects in the object model, the new data field may be listed under the &#x2018;No Object&#x2019; section <b>420</b>.</p><p id="p-0116" num="0137">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, a user may switch between the object-based display mode and the folder based display mode. In some implementations, as shown, the graphical user interface <b>140</b> displays an indication (e.g., check mark) of the active display mode. In this example, a drop down menu <b>530</b> shows that the user is currently in the object-based mode (e.g., &#x201c;Group by Data Source Object&#x201d;). The drop down menu <b>530</b> also provides the user with an option to select either the object-based display mode (e.g., &#x201c;Group by Data Source Object&#x201d; option) or the folder-based display mode (e.g., &#x201c;Group by Folder&#x201d; option), thereby allowing the user to seamlessly switch between the two display modes. Alternatively, an indication of the active display mode as well as options to switch between display modes may be shown as a pop-up. Additionally, the options to switch between display modes may be available via an icon or affordance that is part of the graphical user interface <b>140</b>. Alternatively, the options to switch between display modes may be accessible via one or more user gestures (e.g., a user right click on a portion of the schema region <b>150</b>).</p><p id="p-0117" num="0138"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>E</figref> show the schema region <b>150</b> when the graphical user interface <b>140</b> is in a folder-based display mode according to some implementations.</p><p id="p-0118" num="0139">When the graphical user interface <b>140</b> is first launched and before any custom (e.g., user-defined) folders are created, the schema region <b>150</b> simply lists the data fields in the object model. In some implementations, the schema region <b>150</b> may have one folder that s automatically generated as a default folder. In some implementations, the default folder is named the same as the data source. In such cases, as shown in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the data fields are grouped based on whether the data field is a Dimension or Measure. In some implementations, as shown, the line <b>410</b> separates the Dimensions from the Measures.</p><p id="p-0119" num="0140">Referring to <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, once one or more user-defined folders are created, the schema region <b>150</b> shows the user-defined folders and displays the data fields that are associated with each user-defined folder. In some implementations, a user may indicate (e.g., assign, determine) which data fields are associated with a specific user-defined folder by dragging and dropping a data field into a desired user-defined folder. In this example, there are three folders, an &#x201c;Orders&#x201d; folder, a &#x201c;Location&#x201d; folder, and a &#x201c;Customers&#x201d; folder. A user has identified that the data fields &#x201c;Line Items,&#x201d; &#x201c;Order Number,&#x201d; &#x201c;Profit,&#x201d; and &#x201c;Discount&#x201d; (among others) belong to the &#x201c;Orders&#x201d; folder and thus, the data fields are listed underneath the &#x201c;Orders&#x201d; folder heading. Additionally, within a given user-defined folder, the data fields are separated by line <b>410</b> based on whether the data field is a Dimension or Measure. The schema region <b>150</b> displays the information so that a user can quickly ascertain information regarding this data source. In this example, a user can quickly determine that the data field &#x201c;Person&#x201d; is a Dimension that belongs to the &#x201c;Orders&#x201d; folder, and the &#x201c;Sales&#x201d; data field is Measure that belongs to the &#x201c;Orders&#x201d; folder.</p><p id="p-0120" num="0141">The data visualization application <b>222</b> allows a user to organize the user-defined folders and data fields in any manner that he/she sees fit. Thus, any data field can belong to (e.g., be associated with) any folder.</p><p id="p-0121" num="0142">In some implementations, there may be one or more data fields that are not associated with any folder. In such cases, as shown in <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, the schema region <b>150</b> may display unassociated data fields at the bottom of the schema region <b>150</b>. In this example, the data fields &#x201c;Line Items,&#x201d; &#x201c;Person,&#x201d; and &#x201c;Sales,&#x201d; (among others) are displayed at the bottom of the schema region <b>150</b>, indicating that these data fields do not belong to a user-defined folder. Additionally, the schema region <b>150</b> separates the unassociated data fields using line <b>410</b> based on whether the unassociated data field is a Dimension or Measure.</p><p id="p-0122" num="0143">In some implementations, in response to a user gesture regarding a data field, the schema region <b>150</b> may show the data object that the data field is associated with. For example, <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> shows an example of displaying the data object that a data field is associated with when a user hovers over the data field. In this example, the user hovers over the &#x201c;Product Name&#x201d; data field that is part of the &#x201c;Orders&#x201d; folder. In response to the user hovering a mouse over the &#x201c;Product Name&#x201d; data field, the schema region <b>150</b> displays the data object to which the &#x201c;Product Name&#x201d; data field is associated (e.g., the &#x201c;sales data&#x201d; data object, shown in light grey). In another example, <figref idref="DRAWINGS">FIG. <b>5</b>E</figref> shows that the schema region <b>150</b> displays the data object to which the &#x201c;Customer Name&#x201d; data field is associated (e.g., the &#x201c;sales data&#x201d; data object) in response to a user clicking on the &#x201c;Customer Name&#x201d; data field.</p><p id="p-0123" num="0144">Thus, when the graphical user interface <b>140</b> is in the folder-based display mode, the schema region <b>150</b> allows the user flexibility to organize data fields into user-defined folders as they see fit. Additionally, the data fields are still connected to the underlying object model of the data source and users can quickly and easily determine the relationship of data fields to data objects in the object model (e.g., which data object the data field is associated with) without having to switch back to the object-based display mode.</p><p id="p-0124" num="0145">Referring to <figref idref="DRAWINGS">FIG. <b>5</b>F</figref>, in some implementations, the schema region <b>150</b> is configured to display additional information <b>550</b> regarding a specific data field in response to a user gesture regarding (e.g., selecting, indicating) the data field. The user gesture may be, for example, any of a hover, left-click, right click, or press and hold (in the case of touch sensitive displays). In some implementations, as shown, the additional information <b>550</b> is displayed in the form of a drop down menu. The additional information <b>550</b> may include any of: a summary or preview of the information stored in the data field, a number of records in the data field that are currently used in an data analysis (e.g., a calculation or data visualization), a number of records that are currently not used in data analysis (e.g., not used in a calculation or data visualization), and the names of calculations and/or data visualizations that utilize information from the selected data field. This functionality of providing additional information <b>550</b> regarding a selected (e.g., indicated) data field can be accessed from any of (e.g., both) the object-based display mode and the folder-based display mode.</p><p id="p-0125" num="0146"><figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>J</figref> show features of the graphical user interface according to some implementations. Once a user selects a data source, the user can add any data fields or tables from the data source to a workspace or workbook via the graphical user interface <b>140</b> at any point in time. Additionally, the user may generate data visualizations and calculations in the workspace. The name of a table or data field in the data source are referred to herein as &#x201c;field names&#x201d; and the name of the table as shown in the graphical user interface <b>140</b> and in the user's workspace is referred to herein as the &#x201c;remote name&#x201d; or &#x201c;local name.&#x201d; The user may, via graphical user interface <b>140</b>, change the field name of a table or data field (including both data fields from the data source and user-generated data fields). In some implementations, as a default, the remote name of a table or a data field is the same as the field name. However, in some implementations, a data source may include tables or data fields that have a same name, or a user may add a table after having started performing some analysis (e.g., creating some calculated fields or data visualizations). Such instances may lead to naming conflicts, which can be automatically handled (e.g., independently of user input, without additional user input or intervention) by the data visualization application <b>222</b>, described in detail below.</p><p id="p-0126" num="0147">Referring to <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, the graphical user interface <b>14</b> shows a data preparation screen for editing (e.g., adding, removing, editing) tables to a workspace. In this screen, the schema region <b>150</b> of displays (e.g., lists) tables that are included in the data source. In this example, the user has added (e.g., clicked, double clicked) the &#x201c;LineItems&#x201d; table to the user's workspace. In response to the user selection to add the &#x201c;LineItems&#x201d; table to the workspace, a list of data fields from the &#x201c;LineItems&#x201d; table is shown in panel <b>620</b>.</p><p id="p-0127" num="0148">As mentioned above, the user may also change the remote name of a table once the table has been added to the workspace. Following the example provided above in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> shows an example where the user has decided to rename the &#x201c;LineItems&#x201d; table to &#x201c;Table A.&#x201d; In response to the user changing the remote name of the &#x201c;LineItems&#x201d; table to &#x201c;Table A,&#x201d; the remote name of the table is automatically updated in the table section <b>610</b>, and data fields shown in the panel <b>620</b> are updated to reference &#x201c;Table A&#x201d; instead of &#x201c;LineItems.&#x201d; However, the schema region <b>150</b> shows &#x201c;LineItems&#x201d; and not &#x201c;Table A&#x201d; since the schema region <b>150</b> displays the field names of tables as they occur in the data source in the data preparation screen.</p><p id="p-0128" num="0149">Following the example provided above in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>C</figref> shows an example where the user adds a second table, &#x201c;Orders,&#x201d; to the workspace. In response to the user selection to add the &#x201c;Orders&#x201d; table, the data visualization application automatically performs a join between the &#x201c;LineItems&#x201d; table and the &#x201c;Orders&#x201d; table. Additionally, the panel <b>620</b> is updated to show data fields from both the &#x201c;LineItems&#x201d; table and the &#x201c;Orders&#x201d; table.</p><p id="p-0129" num="0150">In some implementations, two or more tables that are added to the workspace may include data fields having a same name (e.g., a same field name, a same name in the data source). For example, the two tables, &#x201c;LineItems&#x201d; and &#x201c;Orders,&#x201d; may both include a data field with the field name &#x201c;order ID.&#x201d; <figref idref="DRAWINGS">FIG. <b>6</b>D</figref> illustrates how the data visualization application <b>222</b> handles such situations. In <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, the graphical user interface <b>140</b> shows a workspace screen that includes the schema region <b>150</b>, the data visualization region, <b>154</b>, and the plurality of shelf regions <b>152</b>-<b>1</b> and <b>152</b>-<b>2</b>. Additionally, the graphical user interface is currently in the object-based display mode, evidenced by the grouping of data fields based on their association with tables in the object model in the schema region <b>150</b>. The schema region <b>150</b> shows that the &#x201c;LineItems&#x201d; table includes two data fields, &#x201c;Order ID&#x201d; and &#x201c;Product ID,&#x201d; and that the &#x201c;Orders&#x201d; table includes six data fields. One of the six data fields in the &#x201c;Orders&#x201d; table is &#x201c;Order ID.&#x201d; In order to differentiate between the two &#x201c;Order ID&#x201d; data fields, the data visualization application <b>222</b> automatically generates a new remote name (e.g., renames) the &#x201c;Order ID&#x201d; data field that is associated with the &#x201c;Orders&#x201d; table to &#x201c;Order ID (Orders)&#x201d; to differentiate it from the &#x201c;Order ID&#x201d; data field that is associated with the &#x201c;LineItems&#x201d; table, which is labeled as &#x201c;Order ID.&#x201d; In other words, the data visualization application <b>222</b> automatically adds a caption to the remote name of the data field so that the remote name of the data field is changed from &#x201c;Order ID&#x201d; to &#x201c;Order ID (Orders).&#x201d; In some implementations, the caption is automatically generated based on the table to which the data field belongs. In this example, the &#x201c;Order ID&#x201d; data field that is associated with the &#x201c;Orders&#x201d; table is renamed (e.g., the remote name is changed) since the &#x201c;Orders&#x201d; table was added after the &#x201c;LineItems&#x201d; table. Although <figref idref="DRAWINGS">FIG. <b>6</b>D</figref> shows the automatic renaming of the &#x201c;Order ID&#x201d; data field when the graphical user interface <b>140</b> is in the object-based display mode, the automatic renaming may also occur when the graphical user interface <b>140</b> is in the folder-based display mode. In some implementations, a change in the remote name (e.g., automatic renaming, a user-initiated name change, user-defined name change) is carried over when switching between the display modes.</p><p id="p-0130" num="0151"><figref idref="DRAWINGS">FIG. <b>6</b>D</figref> also shows an example of a generated data visualization. In this example, the data visualization application <b>222</b> has generated a data visualization that is a bar chart showing a sum of the information in the &#x201c;Sales&#x201d; data field. The shelf region <b>152</b>-<b>2</b> shows that a sum of the &#x201c;Sales&#x201d; data field is associated with the shelf region <b>152</b>-<b>2</b>. The graphical user interface <b>140</b> also shows an expanded window <b>630</b> (e.g., a pop-up window or drop down window) that allows a user to select from different data visualization types (e.g., data visualization options, chart types, graph types). In some implementations, window <b>630</b> shows data visualization types that are suggested or recommended by the data visualization application <b>222</b>. In some implementations, the data visualization types may be suggested based on any of: characteristics of the data field used in the data visualization (e.g., based on data type of the &#x201c;Sales&#x201d; data field), most popular data visualization types, and user preference of data visualization types.</p><p id="p-0131" num="0152"><figref idref="DRAWINGS">FIG. <b>6</b>E</figref> shows an example of generating a calculation (e.g., calculated data field, user-generated field) that uses data in a data field from the data source. In this example, the calculation references the &#x201c;Sales&#x201d; data field (e.g., uses information or data from the &#x201c;Sales&#x201d; data field). The data visualization application <b>222</b> automatically generates a remote name and caption for the calculated data field, in this example &#x201c;Calculation<b>1</b>.&#x201d; The calculation refers to the remote names and not the field names that are in the data source. Thus, if the user updates the remote name of the &#x201c;Sales&#x201d; data field to, for example, &#x201c;New Sales Name,&#x201d; the &#x201c;Calculation<b>1</b>&#x201d; calculated field will show that it references the &#x201c;New Sales Name&#x201d; data field.</p><p id="p-0132" num="0153">After the first calculated field is generated and automatically named, the user may choose to rename the calculated field. For example, the user may rename the &#x201c;Calculation<b>1</b>&#x201d; calculated field to &#x201c;NewCalc.&#x201d; In such cases, as shown in <figref idref="DRAWINGS">FIG. <b>6</b>F</figref>, all instances of &#x201c;Calculation<b>1</b>&#x201d; are updated (e.g., changed) to &#x201c;NewCalc.&#x201d;</p><p id="p-0133" num="0154"><figref idref="DRAWINGS">FIG. <b>6</b>F</figref> also shows an example of generating a calculation that references a calculated field (e.g., references another calculation). In this example, the user generates another calculation that references (e.g., uses information from) the &#x201c;NewCalc&#x201d; calculated field. As shown, the data visualization application <b>222</b> automatically generates a name and caption for the new calculated field &#x201c;Calculation<b>2</b>.&#x201d; In this example, if the &#x201c;Calculation<b>2</b>&#x201d; calculated field were generated before the name change of the &#x201c;Calculation<b>1</b>&#x201d; calculated field, the &#x201c;Calculation<b>2</b>&#x201d; calculated field would initially reference the &#x201c;Calculation<b>1</b>&#x201d; calculated field, and in response to the name change of the &#x201c;Calculation<b>1</b>&#x201d; calculated field to &#x201c;NewCalc,&#x201d; the &#x201c;Calculation<b>2</b>&#x201d; calculated field would be updated to show that it references the &#x201c;NewCalc&#x201d; calculated field.</p><p id="p-0134" num="0155">As described above, the user may add new tables to the workspace at any point in time. <figref idref="DRAWINGS">FIG. <b>6</b>G</figref> illustrates an example where the user adds a new table to the workspace after having started some data analysis. In this example, the user has already generated a few calculated fields, &#x201c;Customer Name,&#x201d; &#x201c;Number of Records,&#x201d; and &#x201c;Measure of Values&#x201d; (shown at the bottom of the schema region <b>150</b>). After having generated the calculated fields, the user adds a data field from the data source to the workspace. The data field has the field name the &#x201c;Customer Name&#x201d; in the data source and thus, the default setting would be for the remote name of the data field to also be &#x201c;Customer Name.&#x201d; However, a calculated field with the remote name &#x201c;Customer Name&#x201d; already exists in the workspace. In order to resolve this naming conflict and clearly distinguish (e.g., disambiguate) between the two data fields, the data visualization application <b>222</b> automatically adds a caption to the remote name and provides disambiguation logic in order to assign a unique remote name to the data field being added. In this example, the data field being added is automatically assigned the remote name &#x201c;Customer Name<b>1</b>.&#x201d; Note that unlike the previous example provided in <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, the added data field is name given the remote name &#x201c;Customer Name <b>1</b>&#x201d; and not &#x201c;Customer Name (Customer),&#x201d; which requires the caption to refer to the field name of the table or data object to which the data field is associated. This is because generated field (e.g., user-generated fields), including calculated fields, do not affect any field name to remote name disambiguation and thus, renaming of generated fields and automatic naming of generated fields do not reference or affect the field names of data tables or data fields in the data source.</p><p id="p-0135" num="0156">As described above, in some implementations, the user may change the remote name of a table once the table has been added to the workspace. Following the example provided above in <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>, <figref idref="DRAWINGS">FIGS. <b>6</b>H and <b>6</b>I</figref> show an example where the user has decided to rename the remote name of the &#x201c;Orders&#x201d; table to &#x201c;Table B.&#x201d; <figref idref="DRAWINGS">FIG. <b>6</b>H</figref> illustrates the data preparation screen of the graphical user interface <b>140</b>. In response to the user changing the remote name of the &#x201c;Orders&#x201d; table to &#x201c;Table B,&#x201d; the remote name of the table is automatically updated in the table section <b>610</b>, and data fields shown in the panel <b>620</b> are updated to reference &#x201c;Table B&#x201d; instead of &#x201c;Orders.&#x201d; However, the schema region <b>150</b> shows &#x201c;Orders&#x201d; and not &#x201c;Table B&#x201d; since the schema region <b>150</b> of the data preparation screen displays the field names of tables as they occur in the data source.</p><p id="p-0136" num="0157"><figref idref="DRAWINGS">FIG. <b>6</b>I</figref> illustrates the workspace screen of the graphical user interface <b>140</b>. After the remote name of the &#x201c;Orders&#x201d; table has been changed to &#x201c;Table B,&#x201d; the schema region <b>150</b> is updated to reflect the remote name change. The schema region shows two tables &#x201c;LineItems&#x201d; and &#x201c;Table B&#x201d; (compared to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, before the remote name is changed, which shows &#x201c;Orders&#x201d; instead of &#x201c;Table B&#x201d;). Following from the example in <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, where the remote name of the &#x201c;Order ID&#x201d; data field in the &#x201c;Orders&#x201d; table was automatically renamed to &#x201c;Order ID (Orders)&#x201d;, the field name of the data field remains unchanged and is not updated to &#x201c;Order ID (Table B).&#x201d; This is because the data visualization application <b>222</b> updates all remote names in the user workspace to the new name (e.g., &#x201c;Table B&#x201d;). However, references to tables use the field names as they occur in the data source. This allows a user to be able to quickly identify which data fields belong to which tables when there are duplicate field names in the data source. Similarly, when the graphical user interface <b>140</b> is in the folder-based display mode, in response to a user gesture (e.g., hover or click) regarding a data field that is associated with the &#x201c;Orders&#x201d; table, the graphical user interface <b>140</b> will show text indicating that the data field is associated with the &#x201c;Orders&#x201d; table, not &#x201c;Table B&#x201d; (e.g., the captions refer to the field names and not the remote names). <figref idref="DRAWINGS">FIG. <b>6</b>I</figref> also illustrates an example of a data visualization that utilizes information (e.g., data) from two data fields. As shown, the data visualization uses information from the &#x201c;Order ID (Orders)&#x201d; data field, which belongs to the &#x201c;Orders&#x201d; table (renamed &#x201c;Table B&#x201d;), and the &#x201c;Sales&#x201d; data field, which does not belong to any specific table in the object model (a user can derive this information from the schema region <b>150</b>, which lists the &#x201c;Sales&#x201d; data field in an area (e.g., a &#x2018;No Object&#x2019; region) to indicate that the &#x201c;Sales&#x201d; data field is not associated with any tables or data objects in the object model.</p><p id="p-0137" num="0158">In some implementations, the user may change the name of data field once the data field has been added to the workspace. <figref idref="DRAWINGS">FIG. <b>6</b>J</figref> illustrates an example changing the name of a data field. In this example, the user has renamed the &#x201c;Sales&#x201d; data field to &#x201c;Number of Sales.&#x201d; The schema region <b>150</b> is updated according and now displays &#x201c;Number of Sales&#x201d; as a data field under the heading &#x201c;Measures&#x201d; instead of &#x201c;Sales&#x201d; (see <figref idref="DRAWINGS">FIG. <b>6</b>I</figref>, which shows &#x201c;Sales&#x201d; before the name of the data field was changed). Accordingly, the remote name of the data field in the shelf region <b>152</b>-<b>1</b> is also updated to reflect the remote name change. From a user's perspective, everything that references the data field &#x201c;Sales&#x201d; is updated to reflect the remote name change so that all previous instances of the &#x201c;Sales&#x201d; data field shown on workspace screen is updated to show &#x201c;Number of Sales&#x201d; instead. For example, a calculated field that utilizes the &#x201c;Sales&#x201d; data field would be updated to use the new remote name (e.g., to show that the calculated field utilizes the &#x201c;Number of Sales&#x201d; data field). As described above, in some implementations, window <b>630</b> shows data visualization types that are suggested or recommended by the data visualization application <b>222</b>. <figref idref="DRAWINGS">FIG. <b>6</b>J</figref> shows an example where the &#x2018;horizontal bars&#x2019; data visualization type is suggested to the user in window <b>630</b>. The data visualization type is recommended based on the &#x201c;1 or more measures&#x201d; included in shelf region <b>152</b>-<b>1</b>. The window <b>630</b> also shows that the &#x2018;horizontal bars data&#x2019; visualization type is currently selected. This is further evidenced by the horizontal bar chart shown in the data visualization region <b>154</b>.</p><p id="p-0138" num="0159"><figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>C and <b>8</b>A-<b>8</b>P</figref> illustrate an example of analyzing data using data visualization application <b>222</b>. <figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>C</figref> show a graphical user interface <b>140</b> displaying a data source screen and <figref idref="DRAWINGS">FIGS. <b>8</b>A-<b>8</b>P</figref> show the graphical user interface <b>140</b> displaying a data visualization screen that allows a user to perform data analysis.</p><p id="p-0139" num="0160"><figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>C</figref> show a graphical user interface <b>140</b> displaying a data source screen for visualizing an object model according to some implementations. A data source is represented by an object model that includes information regarding the relationship between different data sets (e.g., data objects, tables) within the data source. The data source screen provides a visual representation <b>710</b> (e.g., diagram) of the object model that includes the data objects in the object model and how the data objects relate to one another. <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> illustrates an object model that includes 8 different data objects. In this example, each book has one author and thus, the object model shows a 1-to-many relationship between the &#x201c;Author&#x201d; data object and the &#x201c;Book&#x201d; data object (e.g., each book has one author, but each author may have written multiple books). In this example, the user has selected the &#x201c;Author&#x201d; data object, and data fields <b>712</b> (e.g., columns in the data table) in the selected &#x201c;Author&#x201d; data object are shown. In this example, there are seven data fields <b>712</b>-<b>1</b> to <b>712</b>-<b>7</b>. The data source screen <b>700</b> also provides a visual indication of whether a specific data field is a field that was generated by a user (e.g., a user-generated field) in the data visualization application <b>222</b>. For example, a line <b>714</b>-<b>1</b> above the data field <b>712</b>-<b>1</b> indicates that data field <b>712</b>-<b>1</b> is a data field that is extracted or linked from the database corresponding to the &#x201c;Author&#x201d; data object. In contrast, the absence of a line at position <b>714</b>-<b>7</b> above the data field <b>712</b>-<b>7</b> indicates that the data field <b>712</b>-<b>7</b> is a user-generated data field that does not exist in the database. In this example, the data field <b>712</b>-<b>7</b> is a user-generated data field that is a concatenation of the information from two other data fields in the data object: the authors first name (data field <b>712</b>-<b>2</b>) and the author's last name (data field <b>712</b>-<b>3</b>). While data field <b>712</b>-<b>7</b> appears in the &#x201c;Author&#x201d; data object and the object model in data visualization application <b>222</b>, data field <b>712</b>-<b>7</b> may not appear in the database from which the &#x201c;Author&#x201d; data object is linked or extracted.</p><p id="p-0140" num="0161">Details regarding the data objects and the relationship between two data objects in the object model are also provided. For example, as shown in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, in response to a user gesture (e.g., click, double click, hover) over line <b>722</b> which represents the relationship between the &#x201c;Award&#x201d; data object and the &#x201c;Book&#x201d; data object, the graphical user interface <b>140</b> displays additional information regarding the relationship. In this case, the relationship is between the &#x201c;Book&#x201d; and &#x201c;Award&#x201d; data objects, the relationship is a many-to-may relationship type (e.g., a book may have many awards and a specific award may be awarded to many different books), and that the data field &#x201c;Title&#x201d; in the &#x201c;Book&#x201d; data object is related to the &#x201c;Title (Award)&#x201d; data field in the &#x201c;Award&#x201d; data object. In some implementations, as shown, the addition information is displayed via a pop-up window <b>720</b>. In another example, shown in <figref idref="DRAWINGS">FIG. <b>7</b>C</figref>, in response to a user gesture (e.g., click, double click, hover) over the &#x201c;Book&#x201d; data object icon, additional information regarding the data object is provided. In this case, the additional information shows that the &#x201c;Book&#x201d; data object includes two tables that have been joined together. In some implementations, the additional information is provided in a pop-up window <b>724</b>. In some implementations, the additional information also provides instructions of additional gestures that may cause the graphical user interface <b>140</b> to display more information. For example, a suggestion or tip is provided in the pop-up window <b>724</b>, &#x201c;double-click this table to see joins.&#x201d;</p><p id="p-0141" num="0162">To analyze data from a multi-object data source, the relationships in the object model are leveraged when performing analysis (e.g., performing calculations and generating data visualizations) using data from the data source. For example, data fields from different data sets may be used without the user having to join (or define a join type between) two different data sets in the data source. This allows the relationships between data objects in the object model to be flexible and adapt as the user develops their analysis. By using flexible relationships in the object model opposed to generating a new table by joining multiple data sets from the object model, incorrect aggregations and duplications that may occur when joining data sets are avoided. For example, to generate a first data visualization using data fields from two different data objects (e.g., two different physical tables in the database), the relationships between the data objects to which the two data fields belong is used to determine what type of join should be performed in order to accurately generate desired data visualization. This process is repeated for each individual analytical step (e.g., generation of a data visualization or performing a calculation). Thus, two tables may be joined in a first way (e.g., an inner join) for a first data visualization and the same two tables may be joined in a second way (e.g., a left join, an outer join), different from the first way, for a second data visualization that utilizes data fields from the same two tables. The joined or unionized table generated for the first data visualization has no bearing or effect on join performed for the second data visualization and vice versa. By leveraging the relationships between objects in an object model to perform joins &#x201c;as needed,&#x201d; the user is not restricted in their data analysis options and can have confidence in data analysis results.</p><p id="p-0142" num="0163">When working via a data visualization application that provides a user interface, a user's workspace or workbook may be automatically organized using the relationships in the object model. <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> illustrates the graphical user interface <b>140</b> displaying a workspace screen in the object-based mode for the data source shown in <figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>7</b>C</figref>. The graphical user interface <b>140</b> displays the schema region <b>150</b>, one or more shelf regions <b>152</b> (e.g., shelf regions <b>152</b>-<b>1</b> and <b>152</b>-<b>2</b>), and a data visualization region <b>154</b>. In the object based mode, data fields are listed underneath the data object to which they belong in the schema region. <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> illustrates a zoom in of the schema region <b>150</b> in the object-based mode. As shown in <figref idref="DRAWINGS">FIGS. <b>8</b>A and <b>8</b>B</figref>, all data fields (including data fields that are automatically generated by the data visualization application <b>222</b>) that belong to the &#x201c;Author&#x201d; data object are listed under the &#x201c;Author&#x201d; table heading. Similarly, all data belong to the &#x201c;Book&#x201d; data object are listed under the &#x201c;Book&#x201d; table heading. Additionally, the data fields are categorized based on whether the field is a Dimension or a Measure. Data fields that are Dimensions are shown above the line <b>410</b> and data fields that are Measures are shown below line <b>410</b>.</p><p id="p-0143" num="0164">Additionally, the data visualization application <b>222</b> may automatically generate one or more data fields corresponding to a data object of the object model. In this example, the data fields &#x201c;Author (Count),&#x201d; &#x201c;Book (Count),&#x201d; and &#x201c;Checkouts (Count)&#x201d; are automatically generated by the data visualization application <b>222</b>. In response to a user gesture (e.g., click, double click, hover) over the &#x201c;Author (Count)&#x201d; data field, the graphical user interface displays information regarding the system-generated data field (e.g., application-generated data field). In this example, the &#x201c;Author (Count)&#x201d; data field is an automatically generated data field that provides a number of records (e.g., number of rows) that are in the &#x201c;Author&#x201d; data object. Further, the system-generated data field is automatically associated with the data object to which they are providing a count of a number of records. As shown in <figref idref="DRAWINGS">FIGS. <b>8</b>A and <b>8</b>B</figref>, the &#x201c;Author (Count)&#x201d; data field is automatically associated with the &#x201c;Author&#x201d; data field and thus, listed underneath the &#x201c;Author&#x201d; data field. Similarly, the &#x201c;Book (Count)&#x201d; data field is automatically associated with the &#x201c;Book&#x201d; data field and thus, listed underneath the &#x201c;Book&#x201d; data field. In some implementations, data fields, calculations, and/or data visualizations that are generated (e.g., user-generated, or automatically generated by the data visualization application <b>222</b>) may be automatically associated with a particular data object in the object model based on the relationships in the object model.</p><p id="p-0144" num="0165">In some implementations, the data visualization application <b>222</b> automatically generates a count data field for every data object in the object model. In some implementations, the data visualization application <b>222</b> automatically generates a count data field for a subset, less than all, of the data objects in the object model. In some implementations, in response to a change in the information in the data object, the count data field corresponding to the object is automatically updated. For example, if a new author is added to the &#x201c;Author&#x201d; data object, the &#x201c;Author (Count)&#x201d; data field would be automatically updated to reflect the new number of records in the Author&#x201d; data object. These system-generated data fields can be used in the user's analysis, such as in generating calculations and data visualizations.</p><p id="p-0145" num="0166"><figref idref="DRAWINGS">FIG. <b>8</b>C</figref> illustrates switching from the object-based mode to the folder-based mode. In some implementations, in response to a user gesture (e.g., right click in the schema region <b>150</b>, selection of icon <b>810</b>), the graphical user interface <b>140</b> displays a pop-up window or drop down menu <b>540</b> that includes options for the user to switch to the folder-based mode (e.g., by selecting the &#x201c;Group by Folder&#x201d; option). In response to a user selection to switch to the folder-based mode, the schema region <b>150</b> is updated to show data fields based on their association with user-defined folders, as shown in <figref idref="DRAWINGS">FIG. <b>8</b>D</figref>. In the folder-based mode, the user can group any data fields (including system-generated data fields) from any data object in the object model into user-defined folders. In this example, the user has grouped the fields &#x201c;AuthorID (Author)&#x201d; (from the &#x201c;Author&#x201d; data object&#x201d;) &#x201c;Author Name,&#x201d; &#x201c;Award (Award)&#x201d; (from the &#x201c;Award&#x201d; data object), and &#x201c;Checkout Month&#x201d; into a same folder that is currently named &#x201c;Folder <b>1</b>.&#x201d; The other data fields in the data object (such as the &#x201c;Auth ID&#x201d; data field and the &#x201c;Birthday&#x201d; data field) are displayed in schema region <b>150</b> as not being associated with any user-defined folders.</p><p id="p-0146" num="0167"><figref idref="DRAWINGS">FIGS. <b>8</b>D-<b>8</b>K</figref> illustrate an example of performing data analysis using data visualizations generated from the object model. As shown in <figref idref="DRAWINGS">FIG. <b>8</b>D</figref>, a user has associated the &#x201c;Edition (Count)&#x201d; data field with the first shelf region <b>152</b>-<b>1</b> (shown abbreviated in the shelf region <b>152</b>-<b>1</b> as &#x201c;CNT(Edition)&#x201d;) and associated the &#x201c;Title&#x201d; data field with the second shelf region <b>152</b>-<b>2</b>. In order to generate the resulting data visualization, displayed in data visualization region <b>154</b>, the data visualization application <b>222</b> performs a join between the &#x201c;Edition (Count)&#x201d; data field from the &#x201c;Edition&#x201d; data object and the &#x201c;Title&#x201d; data field from the &#x201c;Book&#x201d; data object. The data visualization application <b>222</b> uses the one-to-many relationship between the &#x201c;Book&#x201d; data object to the &#x201c;Edition&#x201d; data object (e.g., one book can have many editions) to determine and perform a left join between the &#x201c;Book&#x201d; data object to the &#x201c;Edition&#x201d; data object in order to generate the displayed data visualization. By performing a left join, the data visualization will include any books that may not have a listed edition and thus, no books are accidentally dropped from the data visualization. In other words, the data visualization application <b>222</b> automatically aggregates the &#x201c;Edition (Count)&#x201d; data field by the &#x201c;Title&#x201d; data field. The left join performed between the &#x201c;Book&#x201d; data object and the &#x201c;Edition&#x201d; data object is specific for generating this data visualization and does not change the object model or the relationships between the data objects in the object model.</p><p id="p-0147" num="0168">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>F</figref>, in response to a user selection of an icon <b>820</b>, the data visualization displays a numerical value corresponding to each visual mark (e.g., bar) displayed in the data visualization.</p><p id="p-0148" num="0169">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>G</figref>, in response to a user selection of an icon <b>822</b>, the data visualization displays the visual marks in order based on the number of editions each title (e.g., book) has. In some implementations, in response to a second user selection of the icon <b>822</b>, the data visualization displays the visual marks in reverse-order, based on the number of editions each title (e.g., book) has.</p><p id="p-0149" num="0170">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>H</figref>, in response to a user gesture (e.g., click, double click, hover) over a visual mark, the data visualization displays information corresponding to the visual mark. In this example, in response to a user hovering their mouse over a visual mark, the data visualization displays a pop-up window <b>824</b>-<b>1</b> that shows that the visual mark corresponds to a book with the title &#x201c;Zero over Twelve&#x201d; and that that title has 2 editions.</p><p id="p-0150" num="0171">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>I</figref>, the user has generated a new data visualization by associating the &#x201c;Edition (Count)&#x201d; data field with the first shelf region <b>152</b>-<b>1</b> (shown abbreviated in the shelf region <b>152</b>-<b>1</b> as &#x201c;CNT(Edition)&#x201d;) and associating the &#x201c;Author Name&#x201d; data field with the second shelf region <b>152</b>-<b>2</b>. In order to generate the resulting data visualization, displayed in data visualization region <b>154</b>, the data visualization application <b>222</b> aggregates the &#x201c;Edition (Count)&#x201d; data field by the &#x201c;Author Name&#x201d; data field. The aggregation performed between the &#x201c;Author&#x201d; data object and the &#x201c;Edition&#x201d; data object is specific for generating this data visualization, different and distinct from the aggregation described above with respect to <figref idref="DRAWINGS">FIG. <b>8</b>E</figref>, and does not change the object model or the relationships between the data objects in the object model. The resulting data visualization shows a number of book editions that each author has. In response to a user hover over a visual mark, information corresponding to the visual mark is displayed in a pop-up window <b>824</b>-<b>2</b>.</p><p id="p-0151" num="0172">By performing aggregating the data as described, the data visualization will include any authors that may not have a listed edition and thus, no authors are accidentally dropped from the data visualization. <figref idref="DRAWINGS">FIG. <b>8</b>J</figref> shows the data visualization displayed in a rank order. As shown, multiple authors (e.g., Wendell Barton, Robert Milofsky, etc.) that do not have any book editions are included in the data visualization and not accidentally dropped.</p><p id="p-0152" num="0173">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>K</figref>, the schema region <b>150</b> includes a search box <b>830</b> (e.g., search bar, search field). The search box <b>830</b> is accessible in both the object-based display mode and the folder-based display mode. The search box <b>830</b> is configured to perform incremental search, as shown in <figref idref="DRAWINGS">FIG. <b>8</b>K</figref>. In this example, the user has typed in &#x201c;au&#x201d; and the schema region <b>150</b> is updated to only display data fields that include the letters &#x201c;au&#x201d; in their data field name. In this example, the graphical user interface <b>140</b> is in the object-based mode and thus, the search results are shown grouped under the data object to which they belong. In the folder-based mode, the search results are shown grouped under the folder to which they belong (e.g., have been associated with).</p><p id="p-0153" num="0174">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>L</figref>, the schema region <b>150</b> also includes a search filter icon <b>832</b>. In response to a user selection (e.g., click, double click, hover) over the search filter icon <b>832</b>, a plurality of filter options <b>834</b> are displayed (e.g., via a pp-up window or drop-down menu). The data visualization application <b>222</b> includes a filter search function that allows the user to filter search results by category. For example, search results can be filtered to show only data fields that are a calculation, only data fields that are a Dimension, only data fields that are a Measure, and/or only data fields that include comments. Additionally, the filter search function includes predefined sets of characters that can be used as shorthand in order to implement the search filter function when using the search box <b>830</b>. For example, as shown in <figref idref="DRAWINGS">FIG. <b>8</b>M</figref>, the user types in a predefined set of characters, &#x201c;C:&#x201d;, that correspond to a filter by calculations function, in the search box <b>830</b>. In response to the user input of &#x201c;C:&#x201d;, the schema region <b>150</b> is updated to show only data fields that are calculations. Further, if the user were to type in &#x201c;C: ID&#x201d;, the schema region <b>150</b> will show only data fields that are calculations and include the characters &#x201c;ID&#x201d; in the data field name. In another example, shown in <figref idref="DRAWINGS">FIG. <b>8</b>N</figref>, the user may type &#x201c;F: certifi&#x201d; in the search box <b>830</b>, and the schema region <b>150</b> will only display data fields that include the characters &#x201c;certifi&#x201d; in the comments. In this example, a user gesture (e.g., click, double click, hover) over the &#x201c;isbn&#x201d; data field shows that the &#x201c;isbn&#x201d; data field includes a comment &#x201c;certified ISBN.&#x201d;</p><p id="p-0154" num="0175"><figref idref="DRAWINGS">FIGS. <b>8</b>O and <b>8</b>P</figref> illustrate an example of data visualization that is generated using a calculation. <figref idref="DRAWINGS">FIG. <b>8</b>O</figref> shows a data visualization generated based on the association of the &#x201c;Sales (Count)&#x201d; data field with the first shelf region <b>152</b>-<b>1</b> and the association of the &#x201c;Title&#x201d; and &#x201c;Isbn&#x201d; data fields with the second shelf region <b>152</b>-<b>2</b>. In order to generate the data visualization shown in the data visualization region <b>154</b>, the data visualization application aggregates the &#x201c;Sales (Count)&#x201d; data field (which represents a number of sales) by the &#x201c;Title&#x201d; and &#x201c;Isbn&#x201d; data fields. The resulting data visualization displayed in the in data visualization region <b>154</b> shows how many sales were made for each book title and ISBN. However, if a user wanted to know how much money was made rather than how many books were sold (since not all books are priced the same), the user may include a calculation in the shelf region. As shown in <figref idref="DRAWINGS">FIG. <b>8</b>P</figref>, the user may edit a data field in the shelf region to include a calculation. In this example, the user has associated a calculation with the first shelf region <b>152</b>-<b>1</b>. The calculation defines a data field that provides a total sum of the price of the book multiplied by the number of sales. Thus, the data visualization application aggregates the calculated field over book titles and ISBNs in order to generated the displayed data visualization. Since there are two data fields associated with the first shelf region <b>152</b>-<b>1</b>, the data visualization region <b>154</b> shows two bar charts: the left bar chart indicating a number of sold books by title and ISBN and the right bar chart showing a total sales value (in dollars) by title and ISBN.</p><p id="p-0155" num="0176"><figref idref="DRAWINGS">FIGS. <b>9</b>A-<b>9</b>G</figref> provide flow charts of a method <b>900</b> of analyzing data from data sources in accordance with some implementations. The method <b>900</b> is performed (<b>901</b>) at a computer system having one or more processors and memory that stores one or more programs configured for execution by the one or more processors. The method <b>900</b> includes receiving (<b>902</b>) user selection of a data source and displays (<b>903</b>) a data visualization user interface <b>140</b> (e.g., a graphical user interface <b>140</b>) that includes a schema region <b>150</b>, a data visualization region <b>154</b>, and a plurality of shelf regions <b>152</b> (e.g., shelf regions <b>152</b>-<b>1</b> and <b>152</b>-<b>2</b>). Each shelf region <b>152</b> is configured to define a respective characteristic of a displayed data visualization according to placement of data fields from the schema region <b>150</b> into the respective shelf region <b>152</b>. Each data field in the schema region <b>150</b> is associated with a respective system-defined object from the data source. In a first display mode (e.g., object-based display mode), displaying the schema region <b>150</b> includes hierarchically displaying each object and the data fields associated with the respective object. The method <b>900</b> also includes receiving (<b>904</b>) user input to switch from the first display mode to a second display mode (e.g., folder-based display mode) in which each data field is displayed hierarchically in a respective user-defined folder. The user-defined folders are distinct from the system-defined objects. The method <b>900</b> also includes, in either the first display mode or the second display mode, receiving (<b>905</b>) user selection of a first data field from the schema region <b>150</b> and user placement of the first data field into a first shelf region <b>152</b>-<b>1</b>, and receiving (<b>905</b>) user selection of a second data field from the schema region <b>150</b> and user placement of the second data field into a second shelf region <b>152</b>-<b>2</b>. The second data field is different (e.g., distinct) from the first data field and the second shelf region <b>152</b>-<b>2</b> is different (e.g., distinct) from the first shelf region <b>152</b>-<b>1</b>. In accordance with placement of the first data field in the first shelf region and placement of the second data field into the second shelf region, the method <b>900</b> also includes generating (<b>906</b>) and displaying (<b>906</b>) a data visualization in the data visualization region <b>154</b> using data from the first data field and the second data field retrieved from the data source. An example of switching between the first and second display modes is provided with respect to <figref idref="DRAWINGS">FIG. <b>4</b>F</figref> (e.g., see user selection of the &#x201c;Group by Folder&#x201d; option in the drop down menu <b>530</b> in order to switch from an object-based display mode to a folder-based display mode).</p><p id="p-0156" num="0177">In some implementations, the method <b>900</b> also includes automatically generating (<b>910</b>) a new data field that specifies a number of records in a system-defined object, automatically associating (<b>912</b>) the new data field with the system-defined object, and displaying (<b>914</b>), in the first display mode, the new data field in association (e.g., as being associated) with the system-defined object. For example, the computer may automatically generate an application-generated field (e.g., a &#x201c;number of records&#x201d; data field as shown in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>) in response to a first data field being associated with a first system-defined object. The application-generated field is automatically associated with the system-defined object and is displayed in the schema region <b>150</b> of the user interface <b>140</b> as being associated with the first system-defined object.</p><p id="p-0157" num="0178">In some implementations, the method <b>900</b> includes detecting (<b>920</b>), in the second display mode, a user gesture (e.g., single-click, double-click, hover) corresponding to the first data field. In accordance with detection of the user gesture corresponding to the first data field, the method <b>900</b> includes displaying (<b>922</b>) a system-defined object that is associated with the first data field. An example is provided in <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>, where in response to a user gesture (in this example, a hover) corresponding to the &#x201c;Product Name&#x201d; data field (that is associated with the &#x201c;Orders&#x201d; user defined folder), the user interface <b>140</b> displays, in the schema region <b>150</b>, the system-defined object to which the &#x201c;Product Name&#x201d; data field belongs (e.g., the &#x201c;sales data&#x201d; system-defined object).</p><p id="p-0158" num="0179">In some implementations, the method <b>900</b> also includes, in either the first display mode or second display mode, detecting (<b>940</b>) a user gesture corresponding to the first data field. In accordance with placement of the first data field into the first shelf region <b>152</b>-<b>1</b> and placement of the second data field into the second shelf region <b>152</b>-<b>2</b>, the method also includes automatically joining (<b>940</b>) the first system-defined object with the second system-defined object. Automatically joining (<b>940</b>) the first system-defined object with the second system-defined object includes: (i) determining (<b>942</b>) a join type between the first system-defined object and the second system-defined object based on the placement of the first and second data field into the first and second shelf regions <b>152</b>-<b>1</b> and <b>152</b>-<b>2</b>, and (ii) generating (<b>944</b>) a joined table based on the join type. An example of performing a join &#x201c;as needed&#x201d; is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>D</figref>.</p><p id="p-0159" num="0180">In some implementations, the first data field corresponds (<b>945</b>) to a first system-defined object and the second data field corresponds to a second system-defined object that is distinct from the first system-defined object.</p><p id="p-0160" num="0181">In some implementations, the first system-defined object is linked (<b>946</b>) to the second system-defined object through a sequence of one or more relationships and at least one of the relationships in the sequence of one or more relationships is a many-to-many relationship.</p><p id="p-0161" num="0182">In some implementations, the method <b>900</b> also includes generating (<b>948</b>) a data visualization based on the joined table.</p><p id="p-0162" num="0183">In some implementations, the method <b>900</b> further includes receiving (<b>950</b>) user input to create a calculation (e.g., a calculated field) using a fourth data field belonging to a third system-defined object. In accordance with receiving the user input to add the calculation, the method <b>900</b> also includes automatically generating (<b>952</b>) a name and a caption for the calculation. In accordance with receiving the user input to add the calculation, the method <b>900</b> also includes automatically associating (<b>954</b>) the calculation with the third system-defined object.</p><p id="p-0163" num="0184">In some implementations, the method <b>900</b> also includes, in either the first display mode or the second display mode, displaying a search box <b>830</b> in the schema region <b>150</b> and receiving (<b>962</b>) user input in the search box <b>830</b>. The user input includes one or more predefined characters that specify a parameter of a search. The method <b>900</b> also includes filtering (<b>964</b>) the data fields displayed in the schema region, displaying only data fields whose data type matches a data type specified by the search parameter. Examples of receiving user input that includes one or more predefined characters (such as &#x201c;C:&#x201d;, &#x201c;D:&#x201d;, &#x201c;M&#x201d;, and &#x201c;F:&#x201d;) are provided in <figref idref="DRAWINGS">FIGS. <b>8</b>L-<b>8</b>N</figref>.</p><p id="p-0164" num="0185">In some implementations, the method <b>900</b> includes, in the second display mode, receiving (<b>970</b>) user input to associate a fifth data field that belongs to (e.g., is associated with) a sixth system-defined object to a first user-defined folder. The method <b>900</b> also includes receiving (<b>972</b>) user input to associate a sixth data field to the first user-defined folder. The sixth data field is associated with a seventh system-defined object that is distinct from the sixth system-defined object (e.g., the fifth data field and the sixth data field each belong to (e.g., are each associated with different system-defined objects). The method <b>900</b> further includes displaying (<b>974</b>), in the second display mode, the first data field and the sixth data field as being associated with the first user defined folder. The method <b>900</b> also includes receiving (<b>976</b>) user input to switch from the second display mode to the first display mode and displaying (<b>978</b>), in the schema region <b>150</b> while in the first display mode, the fifth data field as associated with the sixth system-defined object and the sixth data field as associated with the seventh system-defined object. An example of switching between the first and second display modes is provided with respect to <figref idref="DRAWINGS">FIG. <b>4</b>F</figref> (e.g., see user selection of the &#x201c;Group by Folder&#x201d; option in the drop down menu <b>530</b> in order to switch from an object-based display mode to a folder-based display mode).</p><p id="p-0165" num="0186"><figref idref="DRAWINGS">FIGS. <b>10</b>A-<b>10</b>F</figref> provide flow charts of a method <b>1000</b> of analyzing data from data sources in accordance with some implementations. The method <b>1000</b> is performed (<b>1010</b>) at a computer system having one or more processors and memory that stores one or more programs configured for execution by the one or more processors. The method <b>1000</b> includes receiving (<b>1020</b>) user input to specify a mathematical expression that includes a first data field from a first object (e.g., a first system-defined object, first data object) and a second data field from a second object (e.g., a second system-defined object). The second data field is distinct from the first data field. The first object and the second object are distinct objects of an object model <b>102</b> that includes a tree in which each relation between the objects <b>104</b> (e.g., objects <b>104</b>-<b>1</b> and <b>104</b>-<b>2</b>) represents a respective many-to-one relationship between respective objects. The method <b>1000</b> also includes generating (<b>1030</b>) a calculated data field (e.g., a calculation) based on the mathematical expression. The method <b>1000</b> further includes assigning (<b>1040</b>) the calculated data field as a member of (e.g., belonging to) a third object (e.g., a system-defined object) in the object model <b>102</b> according to relations (e.g., relationships) in the tree connecting the first object to the second object. <figref idref="DRAWINGS">FIG. <b>6</b>E</figref> provides an example of generating a calculated data field (e.g., calculation).</p><p id="p-0166" num="0187">In some implementations, the third object is (<b>1042</b>) distinct (e.g., different) from each of the first object and the second object.</p><p id="p-0167" num="0188">In some implementations, third object is (<b>1044</b>) the same as the first object or the second object.</p><p id="p-0168" num="0189">In some implementations, the tree includes (<b>1046</b>) a many-to-one relationship from the third object to the first object and a many-to-one relationship from the third object to the second object. The third object is distinct from each of the first object and the second object.</p><p id="p-0169" num="0190">In some implementations, the tree includes (<b>1048</b>) a many-to-one relationship from the third object to the first object. The calculated data field is assigned as a member of the first object.</p><p id="p-0170" num="0191">In some implementations, the mathematical expression includes (<b>1050</b>) a third data field from a fourth object (e.g., a system-defined object). The tree includes a many-to-one relationship from the first object to the second object, and a many-to-one relationship from the first object to the fourth object. The calculated data field is assigned as a member of the first object.</p><p id="p-0171" num="0192">In some implementations, the mathematical expression includes (<b>1052</b>) a third data field from a fourth object that is distinct from each of the first object and the second object. The tree includes a many-to-one relationship from the third object to the first object, a many-to-one relationship from the third object to the second object, and a many-to-one relationship from the third object to the fourth object. The third object is distinct from each of the first object, the second object, and the fourth object.</p><p id="p-0172" num="0193">In some implementations, each of the first object, the second object, and the third object belongs (<b>1054</b>) to the same data source.</p><p id="p-0173" num="0194">In some implementations, the method <b>1000</b> further includes identifying (<b>1060</b>) a set of candidate objects. Each candidate object has a respective sequence of zero or more many-to-one relations in the tree from the respective candidate object to each of the first and second objects. The method <b>1000</b> selects (<b>1062</b>) the third object as an object in the set of candidate objects that has the smallest total sequence length to the first and second objects.</p><p id="p-0174" num="0195">In some implementations, the method <b>1000</b> includes receiving (<b>1070</b>) user selection to include the calculated data field in a data visualization, and generating (<b>1072</b>) and displaying (<b>1072</b>) the data visualization according to the calculated data values for the calculated data field. An example of a data visualization that uses a calculated data field is provided with respect to <figref idref="DRAWINGS">FIGS. <b>8</b>O and <b>8</b>P</figref>.</p><p id="p-0175" num="0196">In some implementations, the method <b>1000</b> further includes automatically generating (<b>1074</b>) a name and a caption that is associated with the calculated data field. An example is provided in <figref idref="DRAWINGS">FIG. <b>6</b>E</figref>, where the data visualization application <b>222</b> automatically generates the name &#x201c;Calculation<b>1</b>&#x201d; for the calculated data field. For example, referring to <figref idref="DRAWINGS">FIG. <b>6</b>E</figref>, a name and caption, &#x201c;Calculation<b>1</b>,&#x201d; is automatically generated for the calculated data field.</p><p id="p-0176" num="0197">In some implementations, the method <b>1000</b> further includes, in a first display mode (e.g., object-based display mode) of a user interface <b>140</b> (e.g., a graphical user interface <b>140</b>), displaying (<b>1080</b>) the first calculated field as belonging to the third object (e.g., system-defined object), in a schema region <b>150</b> of the user interface <b>140</b>. The method <b>1000</b> also includes receiving (<b>1081</b>), in the first display mode, a user input to switch from the first display mode to a second display mode (e.g., folder-based display mode) that is different from the first display mode. The method <b>1000</b> also includes, in the second display mode, displaying (<b>1082</b>), in the schema region <b>150</b>, the calculated data field as belonging to a default folder, and receiving (<b>1083</b>) a user input to associate the calculated data field with a user-defined folder that is distinct from the default folder. An example of switching between the first and second display modes is provided with respect to <figref idref="DRAWINGS">FIG. <b>4</b>F</figref> (e.g., see user selection of the &#x201c;Group by Folder&#x201d; option in the drop down menu <b>530</b> in order to switch from an object-based display mode to a folder-based display mode). An example of automatically associating a calculated field with a default folder (e.g., &#x201c;No Object&#x201d; section <b>420</b>) is provided with respect to <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>.</p><p id="p-0177" num="0198">The method <b>1000</b> also includes displaying (<b>1084</b>), in the schema region <b>150</b> of the user interface <b>140</b>, the calculated data field as belonging to the user-defined folder, and in the second display mode, receiving (<b>1085</b>) user input to associate the first data field with the user-defined folder. The method <b>1000</b> also includes displaying (<b>1086</b>), in the schema region <b>150</b> of the user interface <b>140</b> while in the second display mode, the first data field and the calculated data field as belonging (e.g., being associated with) the same user-defined folder.</p><p id="p-0178" num="0199">In some implementations, the method <b>1000</b> further includes displaying (<b>1090</b>) a search box <b>830</b> in a schema region <b>150</b>, and receiving (<b>1092</b>) user input in the search box <b>830</b>. The user input includes a predefined contiguous string of characters that specifies a parameter of a search. In response to the user input in the search box, the method filters (<b>1094</b>) the data fields displayed in the schema region, displaying only data fields whose data type matches a data type specified by the search parameter. Examples of receiving user input that includes one or more predefined characters (such as &#x201c;C:&#x201d;, &#x201c;D:&#x201d;, &#x201c;M&#x201d;, and &#x201c;F:&#x201d;) is provided in <figref idref="DRAWINGS">FIGS. <b>8</b>L-<b>8</b>N</figref>.</p><p id="p-0179" num="0200">In some implementations, the predefined contiguous string of characters includes (<b>1093</b>) &#x201c;C:&#x201d; and the user input includes the predefined contiguous string of characters followed by one or more characters corresponding to a search term. In some implementations, &#x201c;C:&#x201d; is a parameter that designates searching for calculated data fields (&#x201c;D:&#x201d; designates dimensions, &#x201c;M:&#x201d; designates measures, and &#x201c;F:&#x201d; designates searching comments). The predefined contiguous string of characters (&#x201c;C:&#x201d;) specifies searching only calculated data fields. In this case, filtering the data fields displayed in the schema region comprises (<b>1096</b>) displaying only calculated data fields whose field names contain the search term or whose calculation expressions include the search term.</p><p id="p-0180" num="0201">An example of searching using the predefined contiguous string of characters &#x201c;C:&#x201d; is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>M</figref>. Another example of a user input in the search box <b>830</b> that includes the predefined contiguous string of characters followed by one or more characters corresponding to a search term is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>N</figref> where the predefined contiguous string of characters is &#x201c;F:&#x201d; and the one or more characters corresponding to a search term is &#x201c;certifi&#x201d; and corresponds to (e.g., is at least a part of, is at least a subset of) the search term &#x201c;certified&#x201d;. The only data fields display are calculated data fields that include the term &#x201c;certifi&#x201d;.</p><p id="p-0181" num="0202"><figref idref="DRAWINGS">FIGS. <b>11</b>A-<b>11</b>B</figref> provide flow charts of a method <b>1100</b> of analyzing data from data sources in accordance with some implementations. The method <b>1100</b> is performed (<b>1110</b>) at a computer system having one or more processors and memory that stores one or more programs configured for execution by the one or more processors. The method <b>1100</b> includes receiving (<b>1120</b>) user selection of a data source, and displaying (<b>1130</b>) a data visualization interface <b>140</b>. The data visualization interface <b>140</b> includes a schema region <b>150</b> and a search box, and each data field displayed in the schema region <b>150</b> is associated with a respective system-defined object from the data source. In a first display mode (e.g., object-based display mode), displaying the schema region includes hierarchically displaying each system-defined object and the data fields associated with the respective system-defined object. The method <b>1100</b> also includes receiving (<b>1140</b>) user input to switch from the first display mode to the second display mode (e.g., a folder-based display mode). In the second display mode, each data field is displayed hierarchically in a respective user-defined folder, and the user-defined folders are distinct from the system-defined objects. The method <b>1100</b> further includes receiving (<b>1150</b>), in either the first display mode or the second display mode, user input in the search box <b>830</b>. The user input includes a predefined contiguous string of characters specifying a search parameter. The method <b>1100</b> also includes, in response to the user input in the search box <b>830</b>, filtering (<b>1160</b>) the data fields displayed in the schema region <b>150</b>, thereby displaying (<b>1160</b>) only data fields whose data type matches the data type specified by the search parameter. An example is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>M</figref> where the search box <b>830</b> includes a predefined contiguous string of characters, &#x201c;C:&#x201d;, which specifies a search parameter resulting in displaying only data fields that are calculations.</p><p id="p-0182" num="0203">In some implementations, the data type specified by the search parameter is (<b>1132</b>) one of: (i) dimension, (ii) measure, or (iii) calculation.</p><p id="p-0183" num="0204">In some implementations, the schema region <b>150</b> includes (<b>1142</b>) the search box <b>830</b>. <figref idref="DRAWINGS">FIG. <b>8</b>N</figref> illustrates a schema region <b>150</b> that includes the search box <b>830</b>.</p><p id="p-0184" num="0205">In some implementations, the user input includes (<b>1162</b>) the predefined contiguous string of characters followed by one or more characters specifying a search string, and the search parameter specifies searching for calculated data fields. The method <b>1100</b> filters (<b>1162</b>) the data fields displayed in the schema region, displaying only data fields whose displayed names include the search string or whose corresponding calculation expressions include the search string. An example is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>N</figref> where the search box <b>830</b> includes a predefined contiguous string of characters, &#x201c;C:&#x201d;, that specify a search parameter such that the search results display only data fields that are calculations, and one or more characters specifying a search string, &#x201c;certifi.&#x201d;</p><p id="p-0185" num="0206">In some implementations, the method <b>1100</b> further includes continuing to display (<b>1170</b>) only data fields whose data type matches the data type specified by the search parameter, even as the display mode changes. As shown in <figref idref="DRAWINGS">FIG. <b>8</b>M</figref>, the data fields, such as &#x201c;Author Name,&#x201d; &#x201c;BookID <b>2</b>,&#x201d; &#x201c;Sales by edition,&#x201d; &#x201c;Sales price by edition,&#x201d; &#x201c;Sales (pre-discount), &#x201c;Sales Actual,&#x201d; and &#x201c;Sales discounted,&#x201d; that shown in schema region <b>150</b> are data fields whose data type matches the data type specified by the search parameter. In this example, the predefined contiguous string of characters specifies that the data type is a calculation (e.g., the data field is a calculated data field). Thus each of the data fields displayed in the schema region <b>150</b> are data fields that are calculations (e.g., are calculated data fields).</p><p id="p-0186" num="0207">In some implementations, the method <b>1100</b> further includes receiving (<b>1180</b>) user selection of a data field displayed in the schema region <b>150</b> and user placement of the selected data field into a data visualization definition region (e.g., a shelf region <b>152</b>) of the data visualization user interface <b>140</b>.</p><p id="p-0187" num="0208">In some implementations, the method <b>1100</b> further includes (<b>1182</b>) generating a data visualization based on the user selection and placement. An example of generating a data visualization using a calculated field is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>P</figref>.</p><p id="p-0188" num="0209">In some implementations, the method also includes (<b>1184</b>) displaying the generated data visualization, including one or more visual marks corresponding to data from the selected data field. An example of generating a data visualization using a calculated field is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>P</figref>.</p><p id="p-0189" num="0210"><figref idref="DRAWINGS">FIGS. <b>12</b>A-<b>12</b>B</figref> provide flow charts of a method <b>1200</b> of analyzing data from data sources in accordance with some implementations. The method <b>1200</b> is performed (<b>1210</b>) at a computer system having one or more processors and memory that stores one or more programs configured for execution by the one or more processors. The method <b>1200</b> includes receiving (<b>1220</b>) user selection of a data source, and displaying (<b>1230</b>) a data visualization interface <b>140</b>. The data visualization interface <b>140</b> includes a schema region <b>150</b> and a search box, and each data field displayed in the schema region <b>150</b> is associated with a respective system-defined object from the data source. In a first display mode (e.g., object-based display mode), the user interface displays the schema region hierarchically, displaying each system-defined object and the data fields associated with the respective system-defined object. The method <b>1200</b> also includes receiving (<b>1240</b>) user input to switch from the first display mode to a second display mode (e.g., a folder-based display mode). In the second display mode, each data field is displayed hierarchically in a respective user-defined folder, and the user-defined folders are distinct from the system-defined objects. The method <b>1200</b> further includes receiving (<b>1250</b>), in either the first display mode or the second display mode, user input in the search box <b>830</b>. The user input includes (i) a predefined contiguous string of characters specifying a search parameter and (ii) a search string. The method <b>1200</b> also includes, in response to the user input in the search box <b>830</b> and a determination that the search parameter specifies a first metadata characteristic about data fields in the data source, filtering (<b>1260</b>) the data fields displayed in the schema region <b>150</b>, thereby displaying (<b>1260</b>) only data fields whose metadata characteristic includes the search string. An example of a user input, in the search box <b>830</b>, that includes (i) a predefined contiguous string of characters specifying a search parameter and (ii) a search string is provided with respect to <figref idref="DRAWINGS">FIG. <b>8</b>N</figref>.</p><p id="p-0190" num="0211">In some implementations, the schema region <b>150</b> includes (<b>1232</b>) the search box <b>830</b>. <figref idref="DRAWINGS">FIG. <b>8</b>N</figref> shows a schema region <b>150</b> that includes the search box <b>830</b>.</p><p id="p-0191" num="0212">In some implementations, the first metadata characteristic stores (<b>1262</b>) user-provided comments about data fields from the data source.</p><p id="p-0192" num="0213">In some implementations, the method <b>1200</b> further includes detecting (<b>1270</b>) a user gesture (e.g., a hover, click, or double-click) corresponding to a first data field displayed in the schema region <b>150</b>. In response to detecting the user gesture, the method displays (<b>1272</b>) a comment associated with the first data field. <figref idref="DRAWINGS">FIG. <b>8</b>N</figref> shows an example where in response to a user gesture (in this example, a hover) over the data field &#x201c;Isbn,&#x201d; the computer displays a comment, &#x201c;Certified ISBN,&#x201d; which is associated with the data field &#x201c;Isbn.&#x201d;</p><p id="p-0193" num="0214">The terminology used in the description of the invention herein is for the purpose of describing particular implementations only and is not intended to be limiting of the invention. As used in the description of the invention and the appended claims, the singular forms &#x201c;a,&#x201d; &#x201c;an,&#x201d; and &#x201c;the&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will also be understood that the term &#x201c;and/or&#x201d; as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms &#x201c;comprises&#x201d; and/or &#x201c;comprising,&#x201d; when used in this specification, specify the presence of stated features, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, steps, operations, elements, components, and/or groups thereof.</p><p id="p-0194" num="0215">The foregoing description, for purpose of explanation, has been described with reference to specific implementations. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The implementations were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various implementations with various modifications as are suited to the particular use contemplated.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for analyzing data from data sources, comprising:<claim-text>at a computer system having one or more processors and memory storing one or more programs configured for execution by the one or more processors:</claim-text><claim-text>displaying a data visualization user interface that includes a schema region, wherein each data field of a plurality of data fields displayed in the schema region is visually associated with a respective data object of a plurality of data objects in an object model;</claim-text><claim-text>receiving user input to specify a mathematical expression that includes a first data field from a first object of the plurality of data objects and a second data field from a second object of the plurality of data objects, wherein:<claim-text>the second data field is distinct from the first data field; and</claim-text><claim-text>the first object and the second object are distinct objects in the object model;</claim-text></claim-text><claim-text>generating a calculated data field based on the mathematical expression;</claim-text><claim-text>assigning the calculated data field as a member of a third object of the plurality of data objects according to relations in the object model connecting the first object to the second object; and</claim-text><claim-text>displaying the calculated data field, in the schema region, visually associated with the third object.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving user selection of the calculated data field from the schema region and placement of the calculated data field into a shelf region; and</claim-text><claim-text>generating and displaying a data visualization according to calculated data values for the calculated data field.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the third object is distinct from the first object and distinct from the second object.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the object model includes a many-to-one relationship from the third object to the first object and a many-to-one relationship from the third object to the second object; and</claim-text><claim-text>the third object is distinct from each of the first object and the second object.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the third object is the same as the first object or the third object is the same as the second object.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the object model includes a many-to-one relationship from the first object to the second object; and</claim-text><claim-text>assigning the calculated data field as a member of the third object in the object model comprises assigning the calculated data field as a member of the first object.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the mathematical expression includes a third data field from a fourth object;</claim-text><claim-text>the object model includes a many-to-one relationship from the first object to the second object and a many-to-one relationship from the first object to the fourth object; and</claim-text><claim-text>assigning the calculated data field as a member of the third object in the object model comprises assigning the calculated data field as a member of the first object.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the mathematical expression includes a third data field from a fourth object, distinct from the first object and distinct from the second object;</claim-text><claim-text>the object model includes:<claim-text>a many-to-one relationship from the third object to the first object;</claim-text><claim-text>a many-to-one relationship from the third object to the second object;</claim-text><claim-text>a many-to-one relationship from the third object to the fourth object; and</claim-text></claim-text><claim-text>the third object is distinct from each of the first object, the second object, and the fourth object.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein assigning the calculated data field as a member of the third object in the object model includes:<claim-text>identifying a set of candidate objects, each candidate object having a respective sequence of zero or more many-to-one relations in the object model from the respective candidate object to each of the first and second objects; and</claim-text><claim-text>selecting the third object as an object in the set of candidate objects having a smallest total sequence length to the first and second objects.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A computing device, comprising:<claim-text>one or more processors;</claim-text><claim-text>memory;</claim-text><claim-text>a display; and</claim-text><claim-text>one or more programs stored in the memory and configured for execution by the one or more processors, the one or more programs comprising instructions for:<claim-text>displaying a data visualization user interface that includes a schema region, wherein each data field of a plurality of data fields displayed in the schema region is visually associated with a respective data object of a plurality of data objects in an object model;</claim-text><claim-text>receiving user input to specify a mathematical expression that includes a first data field from a first object of the plurality of data objects and a second data field from a second object of the plurality of data objects, wherein:<claim-text>the second data field is distinct from the first data field; and</claim-text><claim-text>the first object and the second object are distinct objects in the object model;</claim-text></claim-text><claim-text>generating a calculated data field based on the mathematical expression;</claim-text><claim-text>assigning the calculated data field as a member of a third object of the plurality of data objects according to relations in the object model connecting the first object to the second object; and</claim-text><claim-text>displaying the calculated data field, in the schema region, visually associated with the third object.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computing device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein each of the first object, the second object, and the third object belongs to a same data source.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computing device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>automatically generating a name and a caption associated with the calculated data field.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computing device of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>displaying the calculated field in a first display mode of the user interface.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computing device of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>receiving, in the first display mode, a user input to switch from the first display mode to a second display mode that is different from the first display mode; and</claim-text><claim-text>in the second display mode, displaying, in the schema region of the user interface, the calculated data field as belonging to a default folder.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>in a second display mode:<claim-text>receiving user input to associate the calculated data field with a user-defined folder distinct from the default folder; and</claim-text><claim-text>displaying, in the schema region of the user interface, the calculated data field as belonging to the user-defined folder.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computing device of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>in the second display mode:<claim-text>receiving user input to associate the first data field with the user-defined folder; and</claim-text><claim-text>displaying, in the schema region of the user interface, the first data field and the calculated data field as belonging to the user-defined folder.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computing device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>in either the first display mode or the second display mode:<claim-text>receiving user selection of the first data field from the schema region and user placement of the first data field onto a first shelf region;</claim-text><claim-text>receiving user selection of the second data field from the schema region and user placement of the second data field onto a second shelf region; and</claim-text><claim-text>in accordance with placement of the first data field onto the first shelf region and placement of the second data field onto the second shelf region, generating and displaying a data visualization in the data visualization user interface using data for the first data field and the second data field retrieved from a data source.</claim-text></claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A non-transitory computer readable storage medium storing one or more programs configured for execution by a computing device having one or more processors, memory, and a display, the one or more programs comprising instructions for:<claim-text>displaying a data visualization user interface that includes a schema region, wherein each data field of a plurality of data fields displayed in the schema region is visually associated with a respective data object of a plurality of data objects in an object model;</claim-text><claim-text>receiving user input to specify a mathematical expression that includes a first data field from a first object of the plurality of data objects and a second data field from a second object of the plurality of data objects, wherein:<claim-text>the second data field is distinct from the first data field; and</claim-text><claim-text>the first object and the second object are distinct objects in the object model;</claim-text></claim-text><claim-text>generating a calculated data field based on the mathematical expression;</claim-text><claim-text>assigning the calculated data field as a member of a third object of the plurality of data objects according to relations in the object model connecting the first object to the second object; and</claim-text><claim-text>displaying the calculated data field, in the schema region, visually associated with the third object.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the one or more programs further comprise instructions for:<claim-text>displaying a search box in the schema region;</claim-text><claim-text>receiving user input in the search box, the user input including a predefined contiguous string of characters specifying a parameter of a search; and</claim-text><claim-text>in response to the user input in the search box, filtering the plurality of data fields displayed in the schema region, displaying only data fields whose data type matches a data type specified by the search parameter.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein:<claim-text>the predefined contiguous string of characters includes &#x201c;C:&#x201d; and the user input includes the predefined contiguous string of characters followed by one or more characters corresponding to a search term; and</claim-text><claim-text>filtering the data fields displayed in the schema region comprises displaying only calculated data fields whose field names contain the search term or whose calculation expressions include the search term.</claim-text></claim-text></claim></claims></us-patent-application>