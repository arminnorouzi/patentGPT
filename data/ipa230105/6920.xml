<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006921A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006921</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17902182</doc-number><date>20220902</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>202010148537.8</doc-number><date>20200305</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>00</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>34</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>45</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">DATA STREAM PROCESSING METHOD AND APPARATUS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2020/141750</doc-number><date>20201230</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17902182</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>HUAWEI TECHNOLOGIES CO., LTD.</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>WANG</last-name><first-name>Fang</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>ZHANG</last-name><first-name>Xudong</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>ZHANG</last-name><first-name>Peng</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method includes: receiving an uplink data stream packet; determining a resource module used to process the uplink data stream packet and an identifier of the resource module; modifying the uplink data stream packet based on the identifier of the resource module; and forwarding a modified uplink data stream packet. After a downlink data stream packet is received, a resource module used to process the downlink data stream packet is determined based on an identifier of a resource module in the downlink data stream packet, where the identifier of the resource module in the downlink data stream packet is added after learning the identifier of the resource module in the uplink data stream packet. In this method, the uplink and downlink data stream packets are transmitted by using a same resource module, so that a success rate of communication transmission is effectively improved.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="95.42mm" wi="158.75mm" file="US20230006921A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="214.55mm" wi="135.64mm" orientation="landscape" file="US20230006921A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="200.32mm" wi="120.23mm" orientation="landscape" file="US20230006921A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="208.70mm" wi="159.17mm" file="US20230006921A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="161.71mm" wi="162.73mm" file="US20230006921A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="200.83mm" wi="157.90mm" file="US20230006921A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="191.43mm" wi="157.65mm" file="US20230006921A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="208.03mm" wi="138.85mm" orientation="landscape" file="US20230006921A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="199.73mm" wi="157.40mm" orientation="landscape" file="US20230006921A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="218.69mm" wi="158.67mm" orientation="landscape" file="US20230006921A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="197.10mm" wi="150.03mm" orientation="landscape" file="US20230006921A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="209.21mm" wi="159.26mm" orientation="landscape" file="US20230006921A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="217.93mm" wi="157.65mm" orientation="landscape" file="US20230006921A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="218.02mm" wi="158.33mm" file="US20230006921A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="218.36mm" wi="143.59mm" file="US20230006921A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="213.36mm" wi="160.44mm" file="US20230006921A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="185.17mm" wi="160.61mm" file="US20230006921A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="222.33mm" wi="160.61mm" file="US20230006921A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="160.44mm" wi="154.18mm" file="US20230006921A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="215.39mm" wi="110.57mm" file="US20230006921A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of International Application No. PCT/CN2020/141750, filed on Dec. 30, 2020, which claims priority to Chinese Patent Application No. 202010148537.8, filed on Mar. 5, 2020. The disclosures of the aforementioned applications are hereby incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This application relates to the internet protocol (IP) field, and in particular, relates to a data stream processing method and apparatus.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In an uplink packet processing process of a data stream, there are usually some special stateful service functions (SFs), such as network address translation (NAT) and a firewall. To successfully complete the uplink packet processing of the data stream, for example, address translation or validity check, status information of a user is created and stored. However, to reduce communication and storage overheads in a system and improve processing performance, only the status information is locally stored in a resource module that executes the processing. Therefore, a service function forwarder (SFF) can obtain the status information only by sending uplink and downlink packets of a same data stream to a same resource module of an SF for processing, to successfully perform address translation or validity check.</p><p id="p-0005" num="0004">Currently, with development and maturity of virtualization and cloud-native technologies, a service function connected through a service function chain gradually evolves from a physical network function (PNF) to a virtualized network function (VNF) or a cloud-native network function (CNF), so that a resource module of the SF is more flexibly migrated or scaled in or out upon service changes.</p><p id="p-0006" num="0005">However, because the resource module of the SF may be scaled in or out upon the service changes, a corresponding resource module of the SF may change in uplink transmission and downlink transmission processes. Moreover, currently, because the resource module of the SF changes in the uplink and downlink transmission processes, uplink and downlink packets of a same data stream cannot be effectively ensured to be sent to a same resource module of the SF for processing, leading to a high communication transmission failure rate.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">This application provides a data stream processing method and apparatus, to improve a success rate of communication transmission.</p><p id="p-0008" num="0007">According to a first aspect, an embodiment of this application provides a data stream processing method, including:</p><p id="p-0009" num="0008">receiving an uplink data stream packet; determining a resource module used to process the uplink data stream packet and an identifier of the resource module used to process the uplink data stream packet; modifying the uplink data stream packet based on the identifier of the resource module, where a modified uplink data stream packet includes the identifier of the resource module used to process the uplink data stream packet; and sending the modified uplink data stream packet.</p><p id="p-0010" num="0009">Based on this solution, in an uplink data transmission process, the identifier of the resource module used to transmit the uplink data stream packet is recorded in the uplink data stream packet. Therefore, in a downlink data stream transmission process, the identifier is obtained from a packet, and the resource module used to perform uplink data stream transmission is determined based on the identifier, and the resource module continues to be used to transmit a downlink data stream packet. Therefore, a same module is used to process uplink and downlink data streams. This effectively improves a success rate of communication transmission.</p><p id="p-0011" num="0010">In an embodiment, a destination address for processing the uplink data stream packet is determined based on the received uplink data stream packet; and the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet are determined from resource modules corresponding to the destination address.</p><p id="p-0012" num="0011">Based on this solution, a more detailed method for determining the resource module and the unique identifier of the resource module is provided.</p><p id="p-0013" num="0012">In an embodiment, the modified uplink data stream packet carries a correspondence between the identifier of the resource module and an SF.</p><p id="p-0014" num="0013">Based on this solution, after the uplink data stream packet is transmitted, the correspondence between the unique identifier of the resource module used to transmit the uplink data stream packet and the SF used to transmit the uplink data stream packet is determined, and the correspondence is added to the uplink data stream packet. Therefore, in the downlink data stream packet transmission process, the resource module used to perform uplink data stream transmission may be determined based on the correspondence, and the downlink data stream packet is transmitted based on the resource module. This effectively improves a success rate of communication transmission.</p><p id="p-0015" num="0014">In an embodiment, the correspondence is added to an SRH of the uplink data stream packet.</p><p id="p-0016" num="0015">Based on this solution, a method for adding the correspondence is provided, which has a higher applicability.</p><p id="p-0017" num="0016">In an embodiment, the correspondence is added to a segment routing identifier (SID) in a segment list in the SRH; or the correspondence is added to an optional type-length-value (TLV) field in the SRH.</p><p id="p-0018" num="0017">Based on this solution, a method for adding the correspondence to the uplink data stream packet is provided, which has a higher applicability.</p><p id="p-0019" num="0018">In an embodiment, a forwarding entry is searched for based on the destination address, where the forwarding entry includes the resource modules corresponding to the destination address and identifiers of the resource modules corresponding to the destination address; and the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet are determined from the forwarding entry.</p><p id="p-0020" num="0019">In an embodiment, the method further includes: receiving a protocol packet, where the protocol packet carries the destination address and the resource modules corresponding to the destination address; and generating the forwarding entry based on the protocol packet.</p><p id="p-0021" num="0020">In an embodiment, the protocol packet further carries some or all of the following: a service SID type, a resource weight Resource Weight, and an SRv6 service function Service Function.</p><p id="p-0022" num="0021">In an embodiment, in the uplink data stream packet transmission process, a correspondence between the identifier of the resource module used to process the uplink data stream packet and an SF through which the uplink data stream passes is learned.</p><p id="p-0023" num="0022">Based on this solution, after a node in a service function chain completes uplink data stream processing corresponding to the node, the node may obtain the correspondence through learning, and encapsulates the correspondence into the downlink data stream packet. Therefore, in the downlink data stream packet transmission process, the node on the service function chain obtains, based on the correspondence in the downlink data stream packet, the resource module used to process the uplink data stream packet, and processes the downlink data stream packet based on the resource module. This effectively improves a success rate of communication transmission.</p><p id="p-0024" num="0023">In an embodiment, the identifier of the resource module is a globally unique identifier of the resource module, and &#x201c;globally&#x201d; is used to represent all service functions SFs in a data stream processing process; and/or the identifier of the resource module is a unique identifier of the resource module in the SF.</p><p id="p-0025" num="0024">In an embodiment, the method further includes: receiving the downlink data stream packet, where the downlink data stream packet carries the identifier of the resource module used to process the uplink data stream packet, a destination address of the downlink data stream packet is a source address of the uplink data stream packet, and a source address of the downlink data stream packet is the destination address of the uplink data stream packet; and determining, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet, where the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</p><p id="p-0026" num="0025">In an embodiment, the destination address for processing the downlink data stream packet is determined based on the received downlink data stream packet; and the resource module used to process the downlink data stream packet is determined based on the destination address and the identifier of the resource module used to process the uplink data stream packet.</p><p id="p-0027" num="0026">In an embodiment, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the service function SF is added to a segment routing header SRH of the downlink data stream packet.</p><p id="p-0028" num="0027">According to a second aspect, an embodiment of this application further provides a data stream processing method, including:</p><p id="p-0029" num="0028">receiving a downlink data stream packet, where the downlink data packet carries an identifier of a resource module used to process an uplink data stream packet corresponding to the downlink data stream packet; and determining, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet, where the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</p><p id="p-0030" num="0029">Based on this solution, the downlink data stream packet carries the identifier of the resource module, so that when the downlink data stream packet is transmitted, the resource module used to process the downlink data stream packet may be determined based on the identifier of the resource module. This improves a success rate of communication transmission.</p><p id="p-0031" num="0030">In an embodiment, the uplink data stream packet is received, where the uplink data stream packet carries a correspondence between the identifier of the resource module used to process the uplink data stream packet and a service function SF through which the uplink data stream packet passes; and a learning record is generated based on the uplink data stream packet, where the learning record includes the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</p><p id="p-0032" num="0031">In an embodiment, after the downlink data stream packet is received, the learning record corresponding to the downlink data stream packet is determined based on a correspondence between the uplink data stream packet and the downlink data stream packet; and the correspondence, included in the learning record, between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes is added to the downlink data stream packet.</p><p id="p-0033" num="0032">In an embodiment, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes are added to a segment routing header SRH of the downlink data stream packet.</p><p id="p-0034" num="0033">In an embodiment, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes is added to a segment routing identifier SID in a segment list in the SRH. Or the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes is added to an optional type-length-value TLV field in the SRH.</p><p id="p-0035" num="0034">In an embodiment, resource modules corresponding to the SF is determined based on a destination address; and based on the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes, the resource module used to process the downlink data stream packet is determined from the resource modules corresponding to the SF.</p><p id="p-0036" num="0035">In an embodiment, the method further includes: after determining that the resource module corresponding to the identifier of the resource module used to process the uplink data stream packet is faulty, a resource module is re-selected from remaining resource modules corresponding to the SF to process the downlink data stream packet.</p><p id="p-0037" num="0036">In an embodiment, the identifier of the resource module used to process the uplink data stream packet is a globally unique identifier of the resource module used to process the uplink data stream packet, and &#x201c;globally&#x201d; is used to represent all service functions SFs in a data stream processing process; and/or the identifier of the resource module is a unique identifier, in the SF, of the resource module used to process the uplink data stream packet.</p><p id="p-0038" num="0037">According to a third aspect, an embodiment of this application provides a data stream processing apparatus. The apparatus may be configured to perform the operations according to any one of the first aspect or embodiments of the first aspect. For example, the apparatus may include modules or units configured to perform the operations according to any one of the first aspect or embodiments of the first aspect; and/or the apparatus may be configured to perform the operations according to any one of the second aspect or embodiments of the second aspect. For example, the apparatus may include modules or units configured to perform the operations according to any one of the second aspect or embodiments of the second aspect.</p><p id="p-0039" num="0038">According to a fourth aspect, an embodiment of this application provides a data stream processing apparatus. The apparatus includes a processor and a transceiver, and optionally, further includes a memory. The processor, the transceiver, and the memory communicate with each other via an internal connection path. The memory is configured to store instructions, and the processor is configured to execute the instructions stored in the memory. When the processor executes the instructions stored in the memory, the foregoing execution enables the apparatus to perform any method according to the first aspect or embodiments of the first aspect, and/or enables the apparatus to perform any method according to the second aspect or embodiments of the second aspect.</p><p id="p-0040" num="0039">According to a fifth aspect, an embodiment of this application provides a data stream processing system. The system includes a first node, a second node, and the like.</p><p id="p-0041" num="0040">The first node is configured to perform the method according to any one of the first aspect or embodiments of the first aspect, and the second node is configured to perform the method according to any one of the second aspect or embodiments of the second aspect.</p><p id="p-0042" num="0041">According to a sixth aspect, an embodiment of this application provides a chip system. The system includes a processor, and optionally, a memory. The memory is configured to store a computer program, and the processor is configured to invoke the computer program from the memory and runs the computer program, to enable a communication device installed with the chip system to perform any method according to the first aspect or embodiments of the first aspect, and/or to perform any method according to the second aspect or embodiments of the second aspect.</p><p id="p-0043" num="0042">According to a seventh aspect, an embodiment of this application provides a computer program product. The computer program product includes computer program code. When the computer program code is run by a communication unit, a processing unit, a transceiver, or a processor of a communication device, the communication device is enabled to perform any method according to the first aspect or embodiments of the first aspect, and/or enabled to perform any method according to the second aspect or embodiments of the second aspect.</p><p id="p-0044" num="0043">According to an eighth aspect, an embodiment of this application provides a computer-readable storage medium. The computer-readable storage medium stores a program, and the program enables an apparatus to perform any method according to the first aspect or embodiments of the first aspect, and/or enables the apparatus to perform any method according to the second aspect or embodiments of the second aspect.</p><p id="p-0045" num="0044">According to a ninth aspect, an embodiment of this application provides a computer program. When the computer program is executed on a computer, the computer is enabled to perform any method according to the first aspect or embodiments of the first aspect, and/or perform any method according to the second aspect or the possible implementation of the second aspect.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram in which an SFF sends uplink and downlink packets to a same resource module of an SF for processing according to this application;</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a data stream transmission scenario according to this application;</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> are a schematic diagram of a data stream processing method according to this application;</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of a first type of uplink data packet processing according to this application;</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of a first type of downlink data packet processing according to this application;</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref> are a schematic flowchart of a first type of data stream processing according to this application;</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of a second type of uplink data packet processing according to this application;</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic diagram of a second type of downlink data packet processing according to this application;</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref> are a schematic flowchart of a second type of data stream processing according to this application;</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a schematic diagram of a first type of a data stream processing apparatus according to this application;</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a schematic diagram of a second type of a data stream processing apparatus according to this application;</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a schematic diagram of a third type of a data stream processing apparatus according to this application; and</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a schematic diagram of a fourth type of a data stream processing apparatus according to this application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0059" num="0058">When processing a data stream, an anycast service SID is assigned to an SF, the service SID is advertised using a dynamic routing protocol, and a load balancing entry is generated dynamically by a forwarder on a service function chain, to implement dynamic load balancing of the data stream among a plurality of resource modules. For some special stateful SFs, such as NAT and a firewall, status information of a user is created and stored in an uplink packet processing process of a data stream, to process, such as perform address translation or validity check on, a downlink packet of the data stream. However, to reduce communication and storage overheads in a system and improve processing performance, the status data is locally stored only in a resource module that executes the processing. Therefore, an SFF is required to send uplink and downlink packets of a same data stream to a same resource module of the SF for processing.</p><p id="p-0060" num="0059">For example, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, when an Access-Leaf node performs load balancing, a resource module <b>2</b> is selected to process an uplink data packet; and when a Border-Leaf node performs load balancing, the resource module <b>2</b> also needs to be selected to process a downlink data packet.</p><p id="p-0061" num="0060">Further, currently, with development and maturity of virtualization and cloud-native technologies, service functions connected through a service function chain gradually evolve from a PNF to a VNF or a cloud-native network function CNF, so that a resource module of an SF may be scaled in or out upon service changes.</p><p id="p-0062" num="0061">However, as the resource module of the SF may be scaled in or out flexibly upon the service changes, uplink and downlink packets of a same data stream cannot be effectively ensured to be sent to a same resource module of the SF for processing, leading to a high communication transmission failure rate.</p><p id="p-0063" num="0062">To solve this problem, embodiments of this application provide a data stream processing method. The method may be applied to any data stream sending scenario. A basic idea of embodiments of this application is to record, in an uplink forwarding process of a data stream, information about a resource module that performs processing, and send the recorded information about the resource module together with the data stream. In this way, in a downlink forwarding process of the data stream, based on the information about the resource module carried in the data stream, a same resource module may be determined for forwarding.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a data stream transmission scenario according to this application. It is assumed that a service function chain for data transmission includes an Access-Leaf, an SFF <b>1</b>, an SFF <b>2</b>, an SFF <b>3</b>, and a Border-Leaf, and SRv6 locators of the Access-Leaf, the SFF <b>1</b>, the SFF <b>2</b>, the SFF <b>3</b>, and the Border-Leaf are respectively B0::/64, B1::/64, B2::/64, B3::/64, and B4::/64. An SF <b>1</b>, an SF <b>2</b>, and an SF <b>3</b> include three resource modules, two resource modules, and one resource module respectively. Ahead-end and a tail-end of an uplink data stream service function chain are respectively the Access-Leaf and the Border-Leaf. A head-end and a tail-end of a downlink data stream service function chain are respectively the Border-Leaf and the Access-Leaf. For ease of description, in embodiments of this application, nodes that transmit an uplink data stream packet on the service function chain are all referred to as a first node, and nodes that transmit a downlink data stream packet on the service function chain are all referred to as a second node. In embodiments of this application, the first node and the second node may be the same or different.</p><p id="p-0065" num="0064">Embodiments of this application may be applied to an SRv6 service function chain scenario, and is applicable to a scenario in which an SF supports SRv6. For example, an SFF is not used as a service function chain (SFC) proxy. Embodiments of this application are also applicable to a scenario in which an SF does not support SRv6. For example, an SFF is also used as an SFC proxy.</p><p id="p-0066" num="0065">It should be noted that <figref idref="DRAWINGS">FIG. <b>2</b></figref> in embodiments of this application is merely a simplified schematic diagram for ease of understanding. The described transmission scenario is intended to describe the technical solutions in embodiments of this application more clearly, and does not constitute a limitation on the technical solutions provided in embodiments of this application. A person of ordinary skill in the art may know that, with evolution of a network architecture and emergence of a new service scenario, the technical solutions provided in embodiments of this application are also applicable to similar technical problems.</p><p id="p-0067" num="0066">The following describes related terms in embodiments of this application for ease of understanding.</p><p id="p-0068" num="0067">(1) A data stream is a data sequence of ordered bytes with a start point and an end point. The data stream includes an input stream and an output stream.</p><p id="p-0069" num="0068">(2) SRv6 may be considered as a native IPv6 technology in which new extension directly performed on an internet protocol (IP) extension header of internet protocol version 6 (IPv6), where an extension part is referred to as a segment routing header (SRH), and the extension does not damage a standard IP header.</p><p id="p-0070" num="0069">(3) Terms &#x201c;system&#x201d; and &#x201c;network&#x201d; may be used interchangeably in embodiments of this application. &#x201c;At least one&#x201d; means one or more, and &#x201c;a plurality of&#x201d; means two or more. The term &#x201c;and/or&#x201d; describes an association relationship for describing associated objects and represents that three relationships may exist. For example, A and/or B may represent the following cases: Only A exists, both A and B exist, and only B exists, where A and B may be singular or plural. The character &#x201c;/&#x201d; generally indicates a kind of &#x201c;or&#x201d; relationship between the associated objects. The term &#x201c;at least one (one piece) of the following&#x201d; or a similar expression thereof means any combination of these items, including any combination of a singular item (piece) or plural items (pieces). For example, at least one of a, b, or c may indicate: a, b, c, a and b, a and c, b and c, or a, b, and c, where a, b, and c may be singular or plural.</p><p id="p-0071" num="0070">Unless otherwise status, ordinal numbers such as &#x201c;first&#x201d; and &#x201c;second&#x201d; mentioned in embodiments of this application are intended to distinguish a plurality of objects, rather than limit an order, a time sequence, priorities, or importance degrees of the plurality of objects. For example, a first priority criterion and a second priority criterion are merely used to distinguish between different criteria, but do not indicate different content, priorities, importance, or the like of the two criteria.</p><p id="p-0072" num="0071">In addition, the terms &#x201c;include/comprise&#x201d; and &#x201c;have&#x201d; in embodiments, claims, and accompanying drawings of this application are not exclusive. For example, a process, a method, a system, a product, or a device including a series of operations or modules is not limited to the listed operations or modules, and may further include operations or modules that are not listed.</p><p id="p-0073" num="0072">As shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, an embodiment of this application provides a data stream processing method. The method includes the following operations.</p><p id="p-0074" num="0073">Operation S<b>300</b>. A node A receives an uplink data stream packet.</p><p id="p-0075" num="0074">It is assumed that the node A is a head node that is to process the uplink data stream packet. After receiving the uplink data stream packet, the node A obtains an SID-List based on a service function chain policy that is for uplink data stream packet processing.</p><p id="p-0076" num="0075">In addition, operation S<b>300</b> may further include: The head node receives a protocol packet, where the protocol packet carries a correspondence between a destination address and an SF.</p><p id="p-0077" num="0076">Operation S<b>301</b>. The node A sends the uplink data stream packet to a node B.</p><p id="p-0078" num="0077">It is assumed that the node B is a node on a service function chain for transmitting the uplink data stream packet.</p><p id="p-0079" num="0078">The node A may determine, based on the destination address in the SID-List, the node B that is to receive the uplink data stream packet, and then forward the uplink data stream packet to the node B.</p><p id="p-0080" num="0079">Operation S<b>302</b>. The node B determines a resource module used to process the uplink data stream packet and an identifier of the resource module used to process the uplink data stream packet.</p><p id="p-0081" num="0080">In an embodiment of this application, the node B searches for a forwarding entry based on the destination address, selects one entry from at least one entry corresponding to the forwarding entry, uses a resource module corresponding to the selected entry as the resource module for processing the uplink data stream packet, and records the identifier of the resource module in the forwarding entry.</p><p id="p-0082" num="0081">Further, in this embodiment of this application, an entry may be selected, based on a keyword of the uplink data stream packet, from the at least one entry by using a Hash algorithm.</p><p id="p-0083" num="0082">A person skilled in the art should understand that, in this embodiment of this application, the node B determines the forwarding entry based on the destination address in the SID-List may be understood as that the node B determines, based on the destination address in the SID-List, a corresponding SF, where the SF includes at least one resource module.</p><p id="p-0084" num="0083">Further, after determining the at least one resource module based on the destination address, the node B selects a resource from the at least one resource module as the resource module for processing the uplink data stream packet, and records an identifier of the selected resource module.</p><p id="p-0085" num="0084">For example, the node B determines, based on the destination address, that the SF corresponding to the destination address is an SF <b>1</b>, and the SF <b>1</b> includes three resource modules, where identifiers of the three resource modules are respectively a resource module identifier <b>1</b>, a resource module identifier <b>2</b>, and a resource module identifier <b>3</b>. Then, the node B selects one resource module from the three resource modules. For example, if the node B selects a resource module corresponding to the resource module identifier <b>3</b>, the resource module corresponding to the resource module identifier <b>3</b> is used as the resource module for processing the uplink data stream packet. Finally, the node B records the identifier, that is, the resource module identifier <b>3</b>, of the resource module used to process the uplink data stream packet.</p><p id="p-0086" num="0085">It should be noted that when the head node (the node A) on the service function chain is an SFF, for a specific execution manner of the node A in operation S<b>300</b>, refer to the execution manner of the node B in operation S<b>302</b>. For brevity, details are not described herein.</p><p id="p-0087" num="0086">Operation S<b>303</b>. The node B modifies the uplink data stream packet based on the identifier of the resource module.</p><p id="p-0088" num="0087">In an embodiment of this application, after determining the resource module used to process the uplink data stream packet, for example, the identifier of the resource module used to process the uplink data stream packet and selected by the node B is the resource module identifier <b>3</b>, the node B adds the identifier (the resource module identifier <b>3</b>) of the resource module to the uplink data stream packet. Therefore, a modified uplink data packet includes the identifier of the resource module used to process the uplink data stream packet.</p><p id="p-0089" num="0088">It should be noted that, in this embodiment of this application, the node B may modify, after determining the resource module used to process the uplink data stream packet and before processing the uplink data stream packet by using the resource module, the uplink data stream packet based on the identifier of the selected resource module; or the node B may modify, after determining the resource module used to process the uplink data stream packet and successfully performing local forwarding by using the resource module, the uplink data stream packet based on the identifier of the selected resource module. In other words, in this embodiment of this application, an occasion for modifying the uplink data stream packet based on the identifier of the selected resource module is not limited. Any modification manner and occasion applicable to this embodiment of this application shall fall within the protection scope of embodiments of this application.</p><p id="p-0090" num="0089">In an embodiment of this application, if the SF has a capability of modifying an SID in a segment list, the SF may modify the uplink data stream packet based on the identifier (for example, the resource module identifier <b>3</b>) of the resource module. Alternatively, if the SF does not have the capability of modifying the SID in the segment list, the node B may modify the uplink data stream packet based on the identifier (for example, the resource module identifier <b>3</b>) of the resource module.</p><p id="p-0091" num="0090">Operation S<b>304</b>. The node B sends the modified uplink data stream packet.</p><p id="p-0092" num="0091">In an embodiment of this application, the node B sends, based on the destination address in the SID-List, the modified uplink data stream packet to a next node corresponding to the service function chain.</p><p id="p-0093" num="0092">Further, the node B determines, based on a data stream key and the SID-List, the next node to which the packet is to be sent.</p><p id="p-0094" num="0093">A node that subsequently receives the uplink data stream packet performs operations S<b>302</b> to S<b>304</b> again until the service function chain completes the uplink data stream packet processing, that is, a tail node (for example, a node N) that is to process the uplink data stream packet on the service function chain receives the uplink data stream packet. Details are not described herein.</p><p id="p-0095" num="0094">It should be noted that, in the uplink data stream packet processing process, a node for querying the destination address and selecting the resource module and a node for modifying the uplink data packet may be the same or different. This embodiment of this application is merely an example for description, and does not impose a limitation.</p><p id="p-0096" num="0095">Operation S<b>305</b>. After receiving the uplink data stream packet, the node N learns, based on the uplink data stream packet, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF, and generates a learning record.</p><p id="p-0097" num="0096">In this embodiment of this application, through the foregoing operations, the uplink data stream packet carries the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes. Therefore, the node that receives the uplink data stream packet may obtain, through learning, content carried in the uplink data stream packet, and generate the corresponding learning record through learning.</p><p id="p-0098" num="0097">In another embodiment of this application, after receiving the uplink data stream packet, each node that is to process the uplink data stream packet may obtain and learn the correspondence, in the uplink data stream packet, between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes. Alternatively, after completing data stream processing, each node that is to process the uplink data stream packet may learn, based on the uplink data stream packet, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF in a data stream transmission process.</p><p id="p-0099" num="0098">It should be noted that when anode is not a tail node, the node may not need to learn the correspondence.</p><p id="p-0100" num="0099">Operation S<b>306</b>. The head node (for example, the node N) that is to process a downlink data stream packet receives the downlink data stream packet.</p><p id="p-0101" num="0100">In the procedure shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> in this embodiment of this application, it is assumed that a tail node that processes the uplink data stream packet is a head node that processes the downlink data stream packet, the head node that processes the downlink data stream packet is the node N.</p><p id="p-0102" num="0101">In addition, in this embodiment of this application, after receiving the downlink data stream packet, the node N obtains the SID-List from the service function chain policy.</p><p id="p-0103" num="0102">Operation S<b>307</b>. The node N adds, to the downlink data stream packet, the correspondence, included in the learning record, between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</p><p id="p-0104" num="0103">Specifically, after determining that the downlink data stream arrives, the head node that is to process the downlink data stream determines, based on a correspondence between the uplink data stream packet and the downlink data stream packet, the learning record corresponding to the downlink data stream packet, where the learning record includes the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes; and modifies the downlink data stream packet based on the learning record.</p><p id="p-0105" num="0104">For example, it is assumed that in a transmission process of the uplink data stream packet, there are three resource modules in the SF <b>1</b> used to transmit the uplink data stream packet, and identifiers of the three resource modules are a hash ID <b>1</b>, a hash ID <b>2</b>, and a hash ID <b>3</b> respectively. If a resource module with the identifier hash ID <b>2</b> in the SF <b>1</b> is selected to process the uplink data stream packet, a correspondence between the SF <b>1</b> and the resource module with the identifier hash ID <b>2</b> is recorded. After the downlink data stream arrives, the correspondence is learned, and the downlink data stream packet is modified. That is, using the resource module with the identifier hash ID <b>2</b> when the downlink data stream packet is processed via the SF <b>1</b> is recorded in the downlink data stream packet.</p><p id="p-0106" num="0105">In an embodiment of this application, a destination address of the downlink data stream packet is a source address of the uplink data stream packet, and a source address of the downlink data stream packet is the destination address of the uplink data stream packet; or a protocol of the uplink data stream packet is the same as a protocol of the downlink data stream packet.</p><p id="p-0107" num="0106">In addition, in this embodiment of this application, a source port and a destination port of the uplink data stream packet may be opposite to or different from a source port and a destination port of the downlink data stream packet. This is not specifically limited in this embodiment of this application.</p><p id="p-0108" num="0107">It should be noted that, in this embodiment of this application, the method in this application is still applicable to a case in which the destination address and the source address of the uplink data stream packet do not correspond to the source address and the destination address of the downlink data stream packet, and the method is also applicable to a case in which the protocol of the uplink data stream packet is different from the protocol of the downlink data stream packet. In addition, in this operation, the node may learn, only when the node is the head node that transmits the downlink data stream packet, the correspondence and add the learned correspondence to the downlink data stream packet. Another node that transmits the downlink data stream packet and that is on the service function chain may directly use the packet to which the correspondence has been added, and does not need to learn the correspondence.</p><p id="p-0109" num="0108">Operation S<b>308</b>. The node N determines, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet.</p><p id="p-0110" num="0109">In this embodiment of this application, the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</p><p id="p-0111" num="0110">Through learning the correspondence and modifying the downlink data stream packet by the node N in operation S<b>307</b>, the downlink data stream packet carries the identifier of the resource module used to process the uplink data stream packet corresponding to the downlink data stream packet.</p><p id="p-0112" num="0111">It is assumed that the node N forwards, based on the destination address in the SID-list and the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes, the downlink data stream packet to a corresponding node C, on the service function chain, that is to process the downlink data stream packet.</p><p id="p-0113" num="0112">In an embodiment of this application, the node, on the service function chain, that transmits the downlink data stream packet determines to select, from the at least one entry corresponding to the forwarding entry and based on the correspondence, carried in the downlink data stream packet, between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes, a resource module corresponding to which entry is used as the resource module for processing the downlink data stream packet.</p><p id="p-0114" num="0113">A node that subsequently receives the downlink data stream packet performs this operation again until the service function chain that processes the downlink data stream packet completes the downlink data stream packet processing. That is, a tail node that is to process the downlink data stream packet on the service function chain receives the downlink data stream packet.</p><p id="p-0115" num="0114">It should be noted that, in an embodiment of this application, during downlink data stream transmission, after determining that, in the current destination address, the resource module corresponding to the identifier of the resource module carried in the downlink data stream packet is faulty, the node may re-select a resource module from remaining resource modules corresponding to the destination address to process the downlink data stream packet. In an embodiment of this application, the identifier of the resource module in this embodiment of this application may be represented by a hash ID, and the SID includes three parts: Locator, Function, and Arguments. In this embodiment of this application, Arguments represents a hash ID of a resource module of the SF, and Arguments may further include a data stream, a service, or any other information required by Function.</p><p id="p-0116" num="0115">For example, in this embodiment, if an SID with a format of Locator:Function:1 is assigned to the SF, it indicates that a resource module with an identifier <b>1</b> in the SF is specified to perform the function. A value 0 of Arguments indicates that no resource module is specified to perform the function.</p><p id="p-0117" num="0116">In a data transmission process, there may be a plurality of SFs, and each SF may have a plurality of resource modules. To effectively determine a resource module used for transmission, the identifier of the resource module may be further used to identify one resource module in an entire network, or the identifier of the resource module may be used to identify one resource module in the SF. The following separately provides descriptions based on different cases of the identifier.</p><p id="p-0118" num="0117">Case 1 of the identifier: The identifier of the resource module is used to identify one resource module in the SF.</p><p id="p-0119" num="0118">For example, based on the service function chain shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a hash ID is assigned to a resource module of an SF, and the assigned hash ID is unique in the SF. A service SID of the SF, an interface connected to the resource module of the SF, and the hash ID are configured on a connected SFF.</p><p id="p-0120" num="0119">Each SFF advertises a service SID by using a dynamic routing protocol, and a protocol packet issued by the dynamic routing protocol carries a hash ID of a resource module of an SF. After learning the service SID of each SF, each SFF generates a forwarding entry for the service SID. Table 1 to Table 4 list some examples.</p><p id="p-0121" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example of service SID forwarding entries</entry></row><row><entry>generated by the Access-Leaf</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Prefix</entry><entry>Hash</entry><entry>Transit Node</entry><entry/></row><row><entry>Prefix</entry><entry>ID</entry><entry>Transit node</entry><entry>Type Type</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>A1::1:0/120</entry><entry>1</entry><entry>B1::1</entry><entry>Network-to-network interface NNI</entry></row><row><entry/><entry>2</entry><entry>B1::1</entry><entry>NNI</entry></row><row><entry/><entry>3</entry><entry>B2::1</entry><entry>NNI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0122" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example of service SID forwarding entries generated by the SFF 1</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Prefix</entry><entry>Hash</entry><entry>Transit Node</entry><entry/></row><row><entry>Prefix</entry><entry>ID</entry><entry>Transit node</entry><entry>Type Type</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>A1::1:0/120</entry><entry>1</entry><entry>&#x2014;</entry><entry>User-network interface UNI</entry></row><row><entry/><entry>2</entry><entry>&#x2014;</entry><entry>UNI</entry></row><row><entry/><entry>3</entry><entry>B2::1</entry><entry>Network-to-network interface NNI</entry></row><row><entry>A1::2:0/120</entry><entry>1</entry><entry>&#x2014;</entry><entry>UNI</entry></row><row><entry/><entry>2</entry><entry>B2::1</entry><entry>NNI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0123" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example of service SID forwarding entries generated by the SFF 2</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Prefix</entry><entry>Hash</entry><entry>Transit Node</entry><entry/></row><row><entry>Prefix</entry><entry>ID</entry><entry>Transit node</entry><entry>Type Type</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>A1::2:0/120</entry><entry>1</entry><entry>B1::1</entry><entry>Network-to-network interface NNI</entry></row><row><entry/><entry>2</entry><entry>&#x2014;</entry><entry>User-network interface UNI</entry></row><row><entry>A1::3:0/120</entry><entry>1</entry><entry>B3::1</entry><entry>NNI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0124" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example of service SID forwarding entries generated by the SFF 3</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="49pt" align="center"/><colspec colname="4" colwidth="91pt" align="left"/><tbody valign="top"><row><entry>Prefix</entry><entry>Hash</entry><entry>Transit Node</entry><entry/></row><row><entry>Prefix</entry><entry>ID</entry><entry>Transit node</entry><entry>Type Type</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>A3::2:0/120</entry><entry>1</entry><entry>&#x2014;</entry><entry>User-network interface UNI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0125" num="0120">Case 2 of the identifier: The identifier of the resource module is used to identify one resource module in the entire network.</p><p id="p-0126" num="0121">For example, based on the service function chain shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a hash ID is assigned to a resource module of an SF, and each network node generates an ECMP forwarding entry for the service SID, including a local static entry and a remote dynamic entry. A corresponding hash ID is recorded in each entry. Some examples are shown in Table 5 and Table 6.</p><p id="p-0127" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example of service SID forwarding entries</entry></row><row><entry>of each SF generated by the Access-Leaf</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Prefix</entry><entry>Hash</entry><entry>SID-List</entry><entry/></row><row><entry>Prefix</entry><entry>ID</entry><entry>List</entry><entry>Type Type</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>A1::1/128</entry><entry>1</entry><entry>&#x3c;B1::100&#x3e;</entry><entry>Network-to-network interface NNI</entry></row><row><entry/><entry>2</entry><entry>&#x3c;B1::101&#x3e;</entry><entry>NNI</entry></row><row><entry/><entry>4</entry><entry>&#x3c;B2::100&#x3e;</entry><entry>NNI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0128" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 6</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Example of service SID forwarding entries</entry></row><row><entry>of each SF generated by the SFF 1</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>Prefix</entry><entry>Hash</entry><entry>SID-List</entry><entry/></row><row><entry>Prefix</entry><entry>ID</entry><entry>List</entry><entry>Type List</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry>A2::1/128</entry><entry>3</entry><entry>&#x3c;B1::102&#x3e;</entry><entry>User-network interface UNI</entry></row><row><entry/><entry>5</entry><entry>&#x3c;B2::101&#x3e;</entry><entry>Network-to-network interface NNI</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0129" num="0122">Further, in this embodiment of this application, after the resource module used to process the uplink data stream packet and the identifier of the resource module are determined, a correspondence between the identifier of the resource module and the SF is further determined. Therefore, the uplink data stream packet is modified based on the correspondence between a unique identifier and the SF.</p><p id="p-0130" num="0123">In this embodiment of this application, in a process of modifying the uplink data stream packet based on the correspondence between the unique identifier and the SF, modification may be performed in the following manners:</p><p id="p-0131" num="0124">For example, in this embodiment of this application, the correspondence is added to an SRH of the uplink data stream packet.</p><p id="p-0132" num="0125">Further, this embodiment of this application provides a plurality of manners of adding the correspondence to the SRH, where the manners are not specifically limited to the following several manners.</p><p id="p-0133" num="0126">Modification manner 1: The correspondence is added to an SID in a segment list in the SRH.</p><p id="p-0134" num="0127">That is, the modification manner 1 is extending the dynamic routing protocol on a control plane.</p><p id="p-0135" num="0128">For example, as shown in Table 7, a service SID sub-TLV and a service attribute sub-sub-TLV are newly added. <?img id="EMI-00001" he="117.35mm" wi="222.50mm" file="US20230006921A1-20230105-P00001.TIF" alt="embedded image" img-content="drawing" img-format="tif" ?></p><p id="p-0136" num="0129">Modification manner 2: The correspondence is added to an optional TLV field in the SRH.</p><p id="p-0137" num="0130">That is, the modification manner 2 is extending the dynamic routing protocol on the control plane and a data plane.</p><p id="p-0138" num="0131">For example, as shown in Table 8, the modification on the control plane is as follows: <?img id="EMI-00002" he="130.39mm" wi="240.71mm" file="US20230006921A1-20230105-P00002.TIF" alt="embedded image" img-content="drawing" img-format="tif" ?></p><p id="p-0139" num="0132">As shown in Table 9, the modification on the data plane is as follows: <?img id="EMI-00003" he="144.86mm" wi="229.02mm" file="US20230006921A1-20230105-P00003.TIF" alt="embedded image" img-content="drawing" img-format="tif" ?></p><p id="p-0140" num="0133">To describe this embodiment of this application more clearly, the following provides two examples for detailed description based on different modification cases of a data stream packet.</p><p id="p-0141" num="0134">Case 1: After the uplink data stream is processed by the resource module of the SF, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the Arguments field, in the segment list in the SRH, corresponding to the SID is modified, and the resource module that processes the data stream is recorded. Then, the Border-Leaf learns a correspondence between the keyword of the uplink data stream and the segment list in the SRH. When encapsulating the downlink data stream packet, the Border-Leaf uses the SID, which contains valid Arguments, that is learned from the uplink data stream packet. When the network node forwards the downlink data stream packet, as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the Arguments field of the SID is identified as a hash ID, and a forwarding table is searched by using a combined key of Locator:Function and the hash ID.</p><p id="p-0142" num="0135">As shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, an embodiment of this application provides a data stream processing method based on the case 1. Specific operations are as follows:</p><p id="p-0143" num="0136">Operation S<b>600</b>. When an uplink data packet enters an Access-Leaf, obtain an SID-List from a service function chain policy.</p><p id="p-0144" num="0137">It is assumed that the SID-List is {A1::1:0, A2::1:0, A3::1:0, B4::1}, and B4::1 is an SID of a tail node Border-Leaf of the service function chain.</p><p id="p-0145" num="0138">Operation S<b>601</b>. Encapsulate the data packet based on the policy.</p><p id="p-0146" num="0139">The encapsulated packet is (B0::1, A1::1:0)(B4::1, A3::1:0, A2::1:0, A1::1:0; SL=3).</p><p id="p-0147" num="0140">Operation S<b>602</b>. The Access-Leaf queries a forwarding table for a current destination address A1::1:0, selects an entry with a hash ID <b>1</b> based on a data stream keyword, namely, hash, to perform forwarding, obtains a transit node B1::1, performs an insertion (T. Insert) operation to insert SRH(A1::1:0, B1::1; SL=1), and finally queries for a destination address B1::1 to forward a data packet (B0::1, B1::1)(A1::1:0, B1::1; SL=1)(B4::1, A3::1:0, A2::1:0, A1::1:0; SL=3).</p><p id="p-0148" num="0141">In an embodiment of this application, the data stream keyword may be a 5-tuple (source IP, destination IP, protocol number, source port number, destination port number), a triplet (source IP, destination IP, a Flow Label flow label), or the like.</p><p id="p-0149" num="0142">Operation S<b>603</b>. An SFF <b>1</b> receives the uplink data packet, performs local forwarding based on A1::1:0, selects the entry with the hash ID <b>1</b> to send a packet (B0::1, A1::1:0)(A1::1:0, B1::1; SL=0)(B4::1, A3::1:0, A2::1:0, A1::1:0; SL=3) to a resource module <b>1</b> of an SF <b>1</b>.</p><p id="p-0150" num="0143">It should be noted that, in this embodiment of this application, an entry with a hash ID <b>2</b> may be further selected to send the packet to a resource module <b>2</b> of the SF <b>1</b>.</p><p id="p-0151" num="0144">Operation S<b>604</b>. After receiving the uplink data packet and performing a corresponding service function, the resource module <b>1</b> of the SF <b>1</b> removes outer SRH encapsulation, modifies an Arguments segment of an inner SRH[SL], and returns the packet to the SFF <b>1</b>.</p><p id="p-0152" num="0145">It should be noted that, in this embodiment of this application, if the SF has no capability of modifying an SID in a segment list, operation S<b>604</b> may also be completed by the SFF <b>1</b>.</p><p id="p-0153" num="0146">Operation S<b>605</b>. The SFF <b>1</b> forwards a packet (B0::1, A2::1:0)(B4::1, A3::1:0, A2::1:0, A1::1:1; SL=2) based on a next SID.</p><p id="p-0154" num="0147">Operation S<b>606</b>. An SFF <b>2</b> receives the uplink data packet, performs local forwarding based on A2::1:0, and selects an entry with the hash ID <b>2</b> to send a packet (B0::1, A2::1:0)(A2::1:0, B2::1; SL=0)(B4::1, A3::1:0, A2::1:2, A1::1:1; SL=2) to a resource module <b>2</b> of an SF <b>2</b>.</p><p id="p-0155" num="0148">Operation S<b>607</b>. After receiving the uplink data packet and performing a corresponding service function, the resource module <b>2</b> of the SF <b>2</b> removes outer SRH encapsulation, modifies an Arguments segment of an inner SRH[SL], and returns the packet to the SFF <b>2</b>.</p><p id="p-0156" num="0149">It should be noted that, in this embodiment of this application, if the SF has no capability of modifying an SID in a segment list, operation S<b>606</b> may also be completed by the SFF <b>2</b>.</p><p id="p-0157" num="0150">Operation S<b>608</b>. The SFF <b>2</b> forwards a packet (B0::1, A3::1:0)(B4::1, A3::1:0, A2::1:2, A1::1:1; SL=1) based on a next SID.</p><p id="p-0158" num="0151">Operation S<b>609</b>. An SFF <b>3</b> receives the uplink data packet, performs local forwarding based on A3::1:0, selects an entry with the hash ID <b>1</b> to send a packet (B0::1, A3::1:0)(A3::1:0, B3::1; SL=0)(B4::1, A3::1:1, A2::1:2, A1::1:1; SL=1) to a resource module <b>1</b> of an SF <b>3</b>.</p><p id="p-0159" num="0152">Operation S<b>610</b>. After receiving the uplink data packet and performing a corresponding service function, the resource module <b>1</b> of the SF <b>3</b> removes outer SRH encapsulation, modifies an Arguments segment of an inner SRH[SL], and returns the packet to the SFF <b>3</b>.</p><p id="p-0160" num="0153">It should be noted that, in this embodiment of this application, if the SF has no capability of modifying an SID in a segment list, operation S<b>608</b> may also be completed by the SFF <b>3</b>.</p><p id="p-0161" num="0154">Operation S<b>611</b>. The SFF <b>3</b> forwards a packet (B0::1, B4::1)(B4::1, A3::1:1, A2::1:2, A1::1:1; SL=0) based on a next SID.</p><p id="p-0162" num="0155">Operation S<b>612</b>. The Border-Leaf receives the uplink data packet, and learns a correspondence between a data stream key and the SID-List, that is, {Flow Key, &#x3c;A1::1:1, A2::1:2, A3::1:1&#x3e;}.</p><p id="p-0163" num="0156">Operation S<b>613</b>. When a downlink data stream packet enters the Border-Leaf, obtain an SID-List {A3::1:0, A2::1:0, A1::1:0, B0::1} from the service function chain policy, where B0::1 is an SID of the tail node Access-Leaf of the service function chain.</p><p id="p-0164" num="0157">Operation S<b>614</b>. The Border-Leaf searches, based on a correspondence between flow keys of uplink and downlink data streams, for the record {Flow Key, &#x3c;A1::1:1, A2::1:2, A3::1:1&#x3e;} learned in operation S<b>609</b>, fills in an SRH by using an SID that includes Arguments, and searches the forwarding table by using the destination address A3::1:0 and the hash ID <b>1</b> as keywords, to forward a packet (B4::1, A3::1:1)(B0::1, A1::1:1, A2::1:2, A3::1:1; SL=3).</p><p id="p-0165" num="0158">Operation S<b>615</b>. The SFF <b>3</b> receives the downlink data packet, and searches the forwarding table by using the destination address A2::1:0 and the hash ID <b>2</b> as keywords to forward a packet (B4::1, A2::1:2)(B0::1, A1::1:1, A2::1:2, A3::1:1; SL=2).</p><p id="p-0166" num="0159">Operation S<b>616</b>. The SFF <b>2</b> receives the downlink data packet, and searches the forwarding table by using the destination address A1::1:0 and the hash ID <b>1</b> as keywords to forward a packet (B4::1,A1::1:1)(B0::1, A1::1:1, A2::1:2, A3::1:1; SL=1).</p><p id="p-0167" num="0160">Operation S<b>617</b>. The SFF <b>1</b> receives the downlink data packet, and searches the forwarding table by using a destination address B0::1 as a keyword to forward a packet (B4::1, B0::1)(B0::1,A1::1:1, A2::1:2, A3::1:1; SL=0).</p><p id="p-0168" num="0161">Operation S<b>618</b>. After receiving the downlink data packet, and performing SRH decapsulation, the Access-Leaf forwards the downlink data packet based on an IP header or a MAC header of an inner payload.</p><p id="p-0169" num="0162">The Access-Leaf serving as the tail end of the service function chain may choose to learn or not to learn a correspondence between a flow key of the downlink data stream packet and a hash ID of each SF. In an embodiment of this application, when a resource module of an SF is faulty in processing, an SFF may perform local protection switching after quickly sensing the fault via a detection mechanism. When uplink traffic reaches the SFF <b>1</b>, and the SFF <b>1</b> senses that the resource module with the hash ID <b>1</b> of the SF <b>1</b> is faulty, another ECMP entry may be switched to, and the packet is forwarded to the resource module with the hash ID <b>2</b> or to a resource module with a hash ID <b>3</b> via the SFF <b>2</b>. When the downlink data stream reaches the SFF <b>2</b>, and the SFF <b>2</b> senses that a resource module with a specified hash ID in the packet is faulty, the SFF <b>2</b> may determine, based on a local policy, to discard the packet or select another reachable entry to forward the packet.</p><p id="p-0170" num="0163">Case 2: After the uplink data stream is processed by the resource module of the SF, as shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, when forwarding the uplink data stream packet, each network node writes a hash ID of the resource module that performs processing into an optional TLV of the SRH, and adds the hash ID to the tail node of the service function chain hop by hop. The tail node dynamically learns a correspondence between the data stream and the resource module of the SF that processes the stream. After a downlink packet of a data stream enters the service function chain, as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, a hash ID of a resource module of an SF that processes an uplink packet of the data stream is searched for, and is encapsulated into an optional TLV of an SRH. A network node searches a table based on a service SID and the hash ID in the SRH, to forward the packet.</p><p id="p-0171" num="0164">As shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>, an embodiment of this application provides a data stream processing method based on the case 2. A case of selecting a service proxy is described and specific operations are as follows:</p><p id="p-0172" num="0165">Operation S<b>900</b>. When an uplink data packet enters an Access-Leaf, obtain an SID-List from a service function chain policy.</p><p id="p-0173" num="0166">It is assumed that the SID-List is {A1::1, A2::1, A3::1, B4::1}, and B4::1 is an SID of a tail node Border-Leaf of the service function chain.</p><p id="p-0174" num="0167">Operation S<b>901</b>. Encapsulate the data packet based on the policy.</p><p id="p-0175" num="0168">The encapsulated packet is (B0::1, A1::1)(B4::1, A3::1, A2::1, A1::1; SL=3).</p><p id="p-0176" num="0169">Operation S<b>902</b>. The Access-Leaf queries a forwarding table for a current destination address A1::1, and selects an entry with a hash ID <b>1</b> based on a data stream keyword, namely, hash, to forward a packet (B0::1, B1::100)(B4::1, A3::1, A2::1, A1::1; SL=3).</p><p id="p-0177" num="0170">In an embodiment of this application, because the SID-List in the entry includes only a unique SID, if no other attribute needs to be specified, an SRH may be omitted, and a destination address in an IPv6 header is directly modified.</p><p id="p-0178" num="0171">Operation S<b>903</b>. An SFF <b>1</b> receives the uplink data packet, and performs a service function chain proxy operation based on a destination address B1::100 of the packet.</p><p id="p-0179" num="0172">Operation S<b>904</b>. After the service proxy operation is completed, restore SRv6 encapsulation of the data stream, and fill in the SRH with a resource module hash ID of a resource module that performs the processing.</p><p id="p-0180" num="0173">For example, a resource module hash ID for performing SF <b>1</b> processing is filled in the SRH.</p><p id="p-0181" num="0174">A current packet is (B0::1, A2::1)(B4::1, A3::1, A2::1, A1::1; SL=2; &#x3c;index=3, HashID=1&#x3e;).</p><p id="p-0182" num="0175">It should be specially noted that, in addition to being completed by the SFF <b>1</b>, filling of the processing of the hash ID may also be completed by the Access-Leaf. A difference is that after the hash ID is filled by the Access-Leaf, the hash ID needs to be modified when the SFF <b>1</b> fast switches the traffic to another resource module due to a fault of a specified resource module. The hash ID may be prevented from being modified repeatedly if modified by the SFF <b>1</b>.</p><p id="p-0183" num="0176">Operation S<b>905</b>. The SFF <b>1</b> forwards the packet for the second time based on a current destination address A2::1, and the SFF <b>1</b> performs a hash operation to obtain an entry with a hash ID <b>5</b> for forwarding.</p><p id="p-0184" num="0177">A current packet is (B0::1, B2::101)(B4::1, A3::1, A2::1, A1::1; SL=2; &#x3c;index=3, HashID=1&#x3e;).</p><p id="p-0185" num="0178">Operation S<b>906</b>. An SFF <b>2</b> receives the uplink data packet, and performs a service function chain proxy operation based on a destination address B2::101 of the packet.</p><p id="p-0186" num="0179">Operation S<b>907</b>. After the service proxy operation is completed, restore SRv6 encapsulation of the data stream, and fill in the SRH with a resource module hash ID of a resource module that performs the processing.</p><p id="p-0187" num="0180">For example, a resource module hash ID for performing SF <b>2</b> processing is filled in the SRH.</p><p id="p-0188" num="0181">A current packet is (B0::1, A3::1)(B4::1, A3::1, A2::1, A1::1; SL=1; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;).</p><p id="p-0189" num="0182">Operation S<b>908</b>. The SFF <b>2</b> forwards the packet for the third time based on a current destination address A3::1, and the SFF <b>2</b> performs a hash operation to obtain an entry with a hash ID <b>6</b> for forwarding.</p><p id="p-0190" num="0183">A current packet is (B0::1, B3::100)(B4::1, A3::1, A2::1, A1::1; SL=1; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;).</p><p id="p-0191" num="0184">Operation S<b>909</b>. An SFF <b>3</b> receives the uplink data packet, and performs a service function chain proxy operation based on a destination address B3::100 of the packet.</p><p id="p-0192" num="0185">Operation S<b>910</b>. After the service proxy operation is completed, restore SRv6 encapsulation of the data stream, and fill in the SRH with a resource module hash ID of a resource module that performs the processing.</p><p id="p-0193" num="0186">For example, a resource module hash ID for performing SF <b>3</b> processing is filled in the SRH.</p><p id="p-0194" num="0187">A current packet is (B0::1, B4::1)(B4::1, A3::1, A2::1, A1::1; SL=0; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0195" num="0188">Operation S<b>911</b>. The SFF <b>3</b> forwards the packet for the third time based on a current destination address B4::<b>1</b>.</p><p id="p-0196" num="0189">Finally, the SFF <b>3</b> forwards the following data packet:</p><p id="p-0197" num="0190">(B0::1, B4::1)(B4::1, A3::1, A2::1, A1::1; SL=0; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0198" num="0191">Operation S<b>912</b>. The Border-Leaf receives the uplink data packet, and removes the SRH and learns a correspondence between a data stream key and an SF hashID recorded in the SRH, that is, {Flow Key, &#x3c;A1::1, 1&#x3e;, &#x3c;A2::1, 5&#x3e;, &#x3c;A3::1, 6&#x3e;}.</p><p id="p-0199" num="0192">Operation S<b>913</b>. When a downlink data packet enters the Border-Leaf, obtain an SID-List {A3::1, A2::1, A1::1, B0::1} from the service function chain policy, where B0::1 is an SID of the tail node Access-Leaf of the service function chain.</p><p id="p-0200" num="0193">Operation S<b>914</b>. The Border-Leaf searches, based on a correspondence between flow keys of uplink and downlink data streams, for the record {Flow Key, &#x3c;A1::1, 1&#x3e;, &#x3c;A2::1, 5&#x3e;, &#x3c;A3::1, 6&#x3e;} learned in S<b>911</b>, and encapsulates the hash ID of an SF service SID into the SRH:</p><p id="p-0201" num="0194">(B4::1, A3::1)(B0::1, A1::1, A2::1, A3::1; SL=3; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0202" num="0195">Operation S<b>915</b>. The Border-Leaf queries the forwarding table by using the destination address A3::1 and the hash ID <b>6</b> as a composite key to forward the packet:</p><p id="p-0203" num="0196">(B4::1, B3::100)(B0::1, A1::1, A2::1, A3::1; SL=3; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0204" num="0197">Operation S<b>916</b>. The SFF <b>3</b> receives the downlink data packet, and performs a service function chain proxy operation based on a destination address B3::100 of the packet.</p><p id="p-0205" num="0198">After the downlink data stream packet is returned from the destination address B3::100 (for example, the downlink data stream packet is returned from the SF <b>3</b>), SRv6 encapsulation of the downlink data stream packet is restored:</p><p id="p-0206" num="0199">(B4::1, A2::1)(B0::1, A1::1, A2::1, A3::1; SL=2; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0207" num="0200">Operation S<b>917</b>. The SFF <b>3</b> obtains a destination address A2::100 and the hash ID <b>5</b> from the packet, and performs query by using the destination address A2::100 and the hash ID <b>5</b> as a composite key to forward the packet:</p><p id="p-0208" num="0201">(B4::1, B2::101)(B0::1, A1::1, A2::1, A3::1; SL=2; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0209" num="0202">Operation S<b>918</b>. The SFF <b>2</b> receives the downlink data packet, and performs a service function chain proxy operation based on the destination address B2::101 of the packet.</p><p id="p-0210" num="0203">After the downlink data stream packet is returned from the destination address B2::101 (for example, the downlink data stream packet is returned from the SF <b>2</b>), SRv6 encapsulation of the downlink data stream packet is restored:</p><p id="p-0211" num="0204">(B4::1, A1::<b>1</b>)(B0::1, A1::1, A2::1, A3::1; SL=1; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0212" num="0205">Operation S<b>919</b>. The SFF <b>2</b> obtains a destination address A1::100 and the hash ID <b>1</b> from the packet, and performs query by using the destination address A1::<b>100</b> and the hash ID <b>1</b> as a composite key to forward the packet:</p><p id="p-0213" num="0206">(B4::1, B1::100)(B0::1, A1::1, A2::1, A3::1; SL=0; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0214" num="0207">Operation S<b>920</b>. The SFF <b>1</b> receives the downlink data packet, and performs a service function chain proxy operation based on the destination address B1::100 of the packet.</p><p id="p-0215" num="0208">After the downlink data stream packet is returned from the destination address B1::100 (for example, the downlink data stream packet is returned from the SF <b>1</b>), SRv6 encapsulation of the downlink data stream packet is restored:</p><p id="p-0216" num="0209">(B4::1, B0::1)(B0::1, A1::1, A2::1, A3::1; SL=0; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0217" num="0210">Operation S<b>921</b>. The SFF <b>1</b> obtains a destination address B0::1 from the packet, and forwards the packet:</p><p id="p-0218" num="0211">(B4::1, B0::1)(B0::1, A1::1, A2::1, A3::1; SL=0; &#x3c;index=3, HashID=1&#x3e;, &#x3c;index=2, HashID=5&#x3e;, &#x3c;index=1, HashID=6&#x3e;).</p><p id="p-0219" num="0212">Operation S<b>922</b>. After receiving the downlink data packet, and performing SRH decapsulation, the Access-Leaf forwards the downlink data packet based on an IP header or a MAC header of an inner payload.</p><p id="p-0220" num="0213">The Access-Leaf serving as a tail end of the service function chain may choose to learn or not to learn a correspondence between a flow key of the downlink data stream and a hash ID of each SF.</p><p id="p-0221" num="0214">In an embodiment of this application, when a resource module of an SF is faulty in processing, an SFF/SFC proxy may perform local protection switching after quickly sensing the fault via a detection mechanism. When uplink traffic reaches the SFF <b>1</b>, and the SFF <b>1</b> senses that a resource module with the hash ID <b>1</b> of the SF <b>1</b> is faulty, the SFF <b>1</b> can continue to query a local FIB, and forward the packet to a resource module with a hash ID <b>2</b> or forward the packet to a resource module with a hash ID <b>4</b> via the SFF <b>2</b>. When the downlink data stream reaches the SFF <b>2</b>, and the SFF <b>2</b> senses that a resource module with the hash ID <b>5</b> of the SF <b>2</b> is faulty, the SFF <b>2</b> may determine, based on a local policy, to discard the packet or select another local reachable entry to forward the packet.</p><p id="p-0222" num="0215">Based on the foregoing descriptions of the solutions in this application, it may be understood that, to implement the foregoing functions, the foregoing devices include corresponding hardware structures and/or software modules for executing the functions. A person skilled in the art should easily be aware that, in combination with units and algorithm operations of the examples described in embodiments disclosed in this specification, this application may be implemented by hardware or a combination of hardware and computer software. Whether a function is performed by hardware or hardware driven by computer software depends on particular applications and design constraints of the technical solutions. A person skilled in the art may use different methods to implement the described functions for each particular application, but it should not be considered that the implementation goes beyond the scope of this application.</p><p id="p-0223" num="0216">As shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, this application provides a data stream processing apparatus. The apparatus includes a processor <b>1000</b>, a memory <b>1010</b>, and a transceiver <b>1020</b>.</p><p id="p-0224" num="0217">The processor <b>1000</b> is responsible for managing a bus architecture and general processing, and the memory <b>1010</b> may store data used when the processor <b>1000</b> performs an operation. The transceiver <b>1020</b> is configured to receive and send data under control of the processor <b>1000</b>.</p><p id="p-0225" num="0218">The bus architecture may include any quantity of interconnected buses and bridges, and specifically links together various circuits of one or more processors represented by the processor <b>1000</b> and a memory represented by the memory <b>1010</b>. The bus architecture may further connect various other circuits such as a peripheral device, a voltage stabilizer, and a power management circuit. These are well known in the art, and therefore are not further described in this specification. The bus interface provides an interface. The processor <b>1000</b> is responsible for managing the bus architecture and the general processing, and the memory <b>1010</b> may store the data used when the processor <b>1000</b> performs an operation.</p><p id="p-0226" num="0219">The procedures disclosed in embodiments of this application may be applied to the processor <b>1000</b>, or may be implemented by the processor <b>1000</b>. In an implementation process, operations in a signal processing procedure may be completed by using an integrated logic circuit of hardware in the processor <b>1000</b> or instructions in a form of software. The processor <b>1000</b> may be a general-purpose processor, a digital signal processor, an application-specific integrated circuit, a field programmable gate array or another programmable logic device, a discrete gate or transistor logic device, or a discrete hardware component, and may implement or execute the methods, operations, and logical block diagrams disclosed in embodiments of this application. The general-purpose processor may be a microprocessor or any conventional processor or the like. The operations of the method disclosed with reference to an embodiment of this application may be directly performed by a hardware processor, or may be performed by using a combination of hardware in the processor and a software module. The software module may be located in a mature storage medium in the art, such as a random access memory, a flash memory, a read-only memory, a programmable read-only memory, an electrically erasable programmable memory, or a register. The storage medium is located in the memory <b>1010</b>, and the processor <b>1000</b> reads information in the memory <b>1010</b> and completes operations of the signal processing procedure in combination with the hardware of the processor <b>1000</b>.</p><p id="p-0227" num="0220">Specifically, the processor <b>1000</b> is configured to read the program in the memory <b>1010</b>; and perform the method procedure in operations S<b>300</b> to S<b>308</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>; or perform the method procedure in operations S<b>600</b> to S<b>618</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>; or perform the method procedure in operations S<b>900</b> to S<b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>.</p><p id="p-0228" num="0221">As shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, an embodiment of this application provides a data stream processing apparatus. The apparatus includes:</p><p id="p-0229" num="0222">a communication unit <b>1100</b>, configured to receive an uplink data stream packet; and</p><p id="p-0230" num="0223">a processing unit <b>1101</b>, configured to: determine a resource module used to process the uplink data stream packet and an identifier of the resource module; and modify the uplink data stream packet based on the identifier of the resource module, where a modified uplink data stream packet includes the identifier of the resource module used to process the uplink data stream packet.</p><p id="p-0231" num="0224">The communication unit <b>1100</b> is further configured to send the modified uplink data stream packet.</p><p id="p-0232" num="0225">Alternatively, when the apparatus runs, the processing unit may perform the method procedure in which the node on the service function chain for transmitting the uplink data stream packet processes the uplink data stream packet in operations S<b>300</b> to S<b>305</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and the communication unit may perform the method procedure in which the node on the service function chain for transmitting the uplink data stream packet receives and/or forwards the uplink data stream packet in operations S<b>300</b> to S<b>305</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. Alternatively, the processing unit may perform the method procedure in which the node on the service function chain for transmitting the uplink data stream packet processes the uplink data stream packet in operations S<b>600</b> to S<b>612</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>, and the communication unit may perform the method procedure in which the node on the service function chain for transmitting the uplink data stream packet receives and/or forwards the uplink data stream packet in operations S<b>600</b> to S<b>612</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>. Alternatively, the processing unit may perform the method procedure in which the node on the service function chain for transmitting the uplink data stream packet processes the uplink data stream packet in operations S<b>900</b> to S<b>912</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>C</figref>, and the communication unit may perform the method procedure in which the node on the service function chain for transmitting the uplink data stream packet receives and/or forwards the uplink data stream packet in operations S<b>900</b> to S<b>912</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>C</figref>.</p><p id="p-0233" num="0226">In an embodiment, the processing unit <b>1101</b> is specifically configured to:</p><p id="p-0234" num="0227">determine, based on a received uplink data stream packet, a destination address for processing the uplink data stream packet; and determine, from resource modules corresponding to the destination address, a resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet.</p><p id="p-0235" num="0228">In an embodiment, the modified uplink data stream packet carries a correspondence between the identifier of the resource module and a service function SF.</p><p id="p-0236" num="0229">In an embodiment, the processing unit <b>1101</b> is specifically configured to:</p><p id="p-0237" num="0230">add the correspondence to an SRH of the uplink data stream packet.</p><p id="p-0238" num="0231">In an embodiment, the processing unit <b>1101</b> is specifically configured to:</p><p id="p-0239" num="0232">add the correspondence to an SID in a segment list in the SRH; or add the correspondence to an optional TLV field in the SRH.</p><p id="p-0240" num="0233">In an embodiment, the processing unit <b>1101</b> is specifically configured to:</p><p id="p-0241" num="0234">search for a forwarding entry based on the destination address, where the forwarding entry includes the resource modules corresponding to the destination address and identifiers of the resource modules corresponding to the destination address; and</p><p id="p-0242" num="0235">obtain, from the forwarding entry, the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet.</p><p id="p-0243" num="0236">In an embodiment, the processing unit <b>1101</b> is further configured to:</p><p id="p-0244" num="0237">receive a protocol packet, where the protocol packet carries the destination address and the resource modules corresponding to the destination address; and</p><p id="p-0245" num="0238">generate the forwarding entry based on the protocol packet.</p><p id="p-0246" num="0239">In an embodiment, the protocol packet further carries some or all of the following:</p><p id="p-0247" num="0240">a service segment identifier SID type, a resource weight Resource Weight, and a segment routing internet protocol version 6 SRv6 service function Service Function.</p><p id="p-0248" num="0241">In an embodiment, the identifier of the resource module is a globally unique identifier of the resource module, and &#x201c;globally&#x201d; is used to represent all service functions SFs in a data stream processing process; and/or the identifier of the resource module is a unique identifier of the resource module in the SF.</p><p id="p-0249" num="0242">In an embodiment, the processing unit <b>1101</b> is further configured to:</p><p id="p-0250" num="0243">receive the downlink data stream packet, where the downlink data stream packet carries the identifier of the resource module used to process the uplink data stream packet, a destination address of a downlink data stream packet is a source address of the uplink data stream packet, and a source address of the downlink data stream packet is the destination address of the uplink data stream packet; and determine, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet, where the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</p><p id="p-0251" num="0244">In an embodiment, the processing unit <b>1101</b> is specifically configured to:</p><p id="p-0252" num="0245">determine, based on the received downlink data stream packet, the destination address for processing the downlink data stream packet; and</p><p id="p-0253" num="0246">determine, based on the destination address and the identifier of the resource module used to process the uplink data stream packet, the resource module used to process the downlink data stream packet.</p><p id="p-0254" num="0247">In an embodiment, the processing unit <b>1101</b> is further configured to:</p><p id="p-0255" num="0248">add, to the segment routing header SRH of the downlink data stream packet, a correspondence between the identifier of the resource module used to process the uplink data stream packet and the service function SF.</p><p id="p-0256" num="0249">Functions of the communication unit <b>1100</b> and the processing unit <b>1101</b> shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref> may be executed by the processor <b>1000</b> by running a program in the memory <b>1010</b>, or may be independently executed by the processor <b>1000</b>.</p><p id="p-0257" num="0250">As shown in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, this application provides a data stream processing apparatus. The apparatus includes a processor <b>1200</b>, a memory <b>1210</b>, and a transceiver <b>1220</b>.</p><p id="p-0258" num="0251">The processor <b>1200</b> is responsible for managing a bus architecture and general processing, and the memory <b>1210</b> may store data used when the processor <b>1200</b> performs an operation. The transceiver <b>1220</b> is configured to receive and send data under control of the processor <b>1200</b>.</p><p id="p-0259" num="0252">The bus architecture may include any quantity of interconnected buses and bridges, and specifically links together various circuits of one or more processors represented by the processor <b>1200</b> and a memory represented by the memory <b>1210</b>. The bus architecture may further connect various other circuits such as a peripheral device, a voltage stabilizer, and a power management circuit. These are well known in the art, and therefore are not further described in this specification. The bus interface provides an interface. The processor <b>1200</b> is responsible for managing the bus architecture and the general processing, and the memory <b>1210</b> may store the data used when the processor <b>1200</b> performs an operation.</p><p id="p-0260" num="0253">The procedures disclosed in embodiments of this application may be applied to the processor <b>1200</b>, or may be implemented by the processor <b>1200</b>. In an implementation process, operations in a signal processing procedure may be completed by using an integrated logic circuit of hardware in the processor <b>1200</b> or instructions in a form of software. The processor <b>1200</b> may be a general-purpose processor, a digital signal processor, an application-specific integrated circuit, a field programmable gate array or another programmable logic device, a discrete gate or transistor logic device, or a discrete hardware component, and may implement or execute the methods, operations, and logical block diagrams disclosed in embodiments of this application. The general-purpose processor may be a microprocessor or any conventional processor or the like. The operations of the method disclosed with reference to an embodiment of this application may be directly performed by a hardware processor, or may be performed by using a combination of hardware in the processor and a software module. The software module may be located in a mature storage medium in the art, such as a random access memory, a flash memory, a read-only memory, a programmable read-only memory, an electrically erasable programmable memory, or a register. The storage medium is located in the memory <b>1210</b>, and the processor <b>1200</b> reads information in the memory <b>1210</b> and completes operations of the signal processing procedure in combination with the hardware of the processor <b>1200</b>.</p><p id="p-0261" num="0254">Specifically, the processor <b>1200</b> is configured to read the program in the memory <b>1201</b>; and perform the method procedure in operations S<b>300</b> to S<b>308</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>; or perform the method procedure in operations S<b>600</b> to S<b>618</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>; or perform the method procedure in operations S<b>900</b> to S<b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>.</p><p id="p-0262" num="0255">As shown in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, this application provides a data stream processing apparatus. The apparatus includes:</p><p id="p-0263" num="0256">a communication unit <b>1300</b>, configured to receive a downlink data stream packet, where the downlink data packet carries an identifier of a resource module used to process an uplink data stream packet corresponding to the downlink data stream packet; and a processing unit <b>1301</b>, configured to determine, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet, where the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</p><p id="p-0264" num="0257">Alternatively, when the apparatus runs, the processing unit may perform the method procedure in which the node on the service function chain for transmitting the downlink data stream packet processes the downlink data stream packet in operations S<b>306</b> to S<b>308</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, and the communication unit may perform the method procedure in which the node on the service function chain for transmitting the downlink data stream packet receives and/or forwards the downlink data stream packet in operations S<b>306</b> to S<b>308</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. Alternatively, the processing unit may perform the method procedure in which the node on the service function chain for transmitting the downlink data stream packet processes the downlink data stream packet in S<b>613</b> to S<b>618</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>C</figref> and <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, and the communication unit may perform the method procedure in which the node on the service function chain for transmitting the downlink data stream packet receives and/or forwards the downlink data stream packet in S<b>613</b> to S<b>618</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>C</figref> and <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>. Alternatively, the processing unit may perform the method procedure in which the node on the service function chain for transmitting the downlink data stream packet processes the downlink data stream packet in S<b>913</b> to S<b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>C</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>, and the communication unit may perform the method procedure in which the node on the service function chain for transmitting the downlink data stream packet receives and/or forwards the downlink data stream packet in S<b>913</b> to S<b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>C</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>.</p><p id="p-0265" num="0258">In an embodiment, the processing unit <b>1301</b> is further configured to:</p><p id="p-0266" num="0259">receive the uplink data stream packet, where the uplink data stream packet carries a correspondence between the identifier of the resource module used to process the uplink data stream packet and a service functions SF through which the uplink data stream packet passes; and</p><p id="p-0267" num="0260">generate a learning record based on the uplink data stream packet, where the learning record includes the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</p><p id="p-0268" num="0261">In an embodiment, the processing unit <b>1301</b> is previously further configured to:</p><p id="p-0269" num="0262">determine the learning record based on a correspondence between the uplink data stream packet and the downlink data stream packet; and</p><p id="p-0270" num="0263">add, to the downlink data stream packet, the correspondence, included in the learning record, between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</p><p id="p-0271" num="0264">In an embodiment, the processing unit <b>1301</b> is specifically configured to:</p><p id="p-0272" num="0265">add, to a segment routing header SRH of the downlink data stream packet, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes.</p><p id="p-0273" num="0266">In an embodiment, the processing unit <b>1301</b> is specifically configured to:</p><p id="p-0274" num="0267">add, to a segment routing identifier SID in a segment list in the SRH, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the service function SF through which the uplink data stream passes; or</p><p id="p-0275" num="0268">add, to an optional type-length-value TLV field in the SRH, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the service function SF through which the uplink data stream passes.</p><p id="p-0276" num="0269">In an embodiment, the processing unit <b>1301</b> is specifically configured to:</p><p id="p-0277" num="0270">determine, based on a destination address, resource modules corresponding to the SF, and determine, based on the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream passes, a resource module used to process the downlink data stream packet from the resource modules corresponding to the SF.</p><p id="p-0278" num="0271">In an embodiment, the processing unit <b>1301</b> is further configured to:</p><p id="p-0279" num="0272">after determining that the resource module corresponding to the identifier of the resource module used to process the uplink data stream packet is faulty, re-select a resource module from remaining resource modules corresponding to the SF to process the downlink data stream packet.</p><p id="p-0280" num="0273">In an embodiment, the identifier of the resource module used to process the uplink data stream packet is a globally unique identifier of the resource module used to process the uplink data stream packet, and &#x201c;globally&#x201d; is used to represent all service functions SFs in a data stream processing process; and/or the identifier of the resource module is a unique identifier, in the SF, of the resource module used to process the uplink data stream packet.</p><p id="p-0281" num="0274">Functions of the communication unit <b>1300</b> and the processing unit <b>1301</b> shown in <figref idref="DRAWINGS">FIG. <b>13</b></figref> may be executed by the processor <b>1200</b> by running a program in the memory <b>1210</b>, or may be independently executed by the processor <b>1200</b>.</p><p id="p-0282" num="0275">An embodiment of this application further provides a data stream processing system, including a first node, a second node, and the like.</p><p id="p-0283" num="0276">The first node may be the node, shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, or <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>, that transmits the uplink data stream packet; and the second node may be the node, shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, or <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>, that transmits the downlink data stream packet.</p><p id="p-0284" num="0277">When the system runs, the first node may perform, for example, a method procedure performed by the node when transmitting the uplink data stream packet in operations S<b>300</b> to S<b>308</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>; perform, for example, a method procedure performed by the node when transmitting the uplink data stream packet in operations S<b>600</b> to S<b>618</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>; or perform, for example, a method procedure performed by the node when transmitting the uplink data stream packet in operations S<b>900</b> to S<b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>. Details are not described herein.</p><p id="p-0285" num="0278">The second node may perform, for example, a method procedure performed by the node when transmitting the downlink data stream packet in operations S<b>300</b> to S<b>308</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>; perform, for example, a method procedure performed by the node when transmitting the downlink data stream packet in operations S<b>600</b> to S<b>618</b> shown in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>; or perform, for example, a method procedure performed by the node when transmitting the downlink data stream packet in operations S<b>900</b> to S<b>922</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref> to <figref idref="DRAWINGS">FIG. <b>9</b>F</figref>. Details are not described herein.</p><p id="p-0286" num="0279">In some possible implementations, each aspect of the data stream processing method provided in embodiments of this application may be further implemented in a form of a program product, including program code. When the program code is run on a computer device, the program code is used to enable the computer device to perform the operations in the data stream processing methods described in this specification and according to various example implementations of this application.</p><p id="p-0287" num="0280">The program product may be any combination of one or more readable media. The readable medium may be a readable signal medium or a readable storage medium. For example, the readable storage medium may be, but is not limited to, an electrical, a magnetic, an optical, an electromagnetic, an infrared, or a semiconductor system, apparatus or device, or any combination thereof. More specific examples (non-exhaustive list) of the readable storage medium include: an electrical connection having one or more conducting wires, a portable disk, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage component, a magnetic storage component, or any appropriate combination thereof.</p><p id="p-0288" num="0281">The program product for data stream processing according to implementations of this application may use a portable compact disc read-only memory (CD-ROM), include program code, and run on a server device. However, the program product in this application is not limited thereto. In this document, the readable storage medium may be any tangible medium that includes or stores a program, and the program may be used by a data stream processing apparatus or component or used in combination with the data stream processing apparatus or component.</p><p id="p-0289" num="0282">The readable signal medium may include a data signal propagated in a baseband or as a part of a carrier, where the data signal carries readable program code. The propagated data signal may be in a plurality of forms, including but not limited to an electromagnetic signal, an optical signal, or any appropriate combination thereof. The readable signal medium may alternatively be any readable medium other than the readable storage medium. The readable medium may send, propagate, or transmit a program used by or in combination with a periodic network action system, apparatus, or device.</p><p id="p-0290" num="0283">The program code included in the readable medium may be transmitted by using any appropriate medium, including but not limited to a wireless medium, a wired medium, an optical cable, an RF medium, or any appropriate combination thereof.</p><p id="p-0291" num="0284">The program code used to execute the operations of this application may be written in any combination of one or more program design languages. The program design languages include object-oriented program design languages such as Java and C++, and further include a conventional procedural program design language such as a &#x201c;C&#x201d; language or a similar program design language. The program code may be completely executed on a computer device of a user, partially executed on user equipment, executed as an independent software package, partially executed on a computer device of a user and partially executed on a remote computer device, or completely executed on a remote computer device or server. When the program code is executed on the remote computer device, the remote computer device may be connected to the user's computer device by using any type of network, including a local area network (LAN) or a wide area network (WAN), or may be connected to an external computer device.</p><p id="p-0292" num="0285">An embodiment of this application further provides a computer device-readable storage medium for the data stream processing method. That is, content is not lost after power-off. The storage medium stores a software program, including program code. When the program code is run on a computer device, and the software program is read and executed by one or more processors, any one of the foregoing data stream processing solutions in embodiments of this application can be implemented.</p><p id="p-0293" num="0286">The foregoing describes this application with reference to the block diagrams and/or flowcharts of the method, the apparatus (system), and/or the computer program product in embodiments of this application. It should be understood that a block of the block diagrams and/or flowcharts and a combination of blocks in the block diagrams and/or flowcharts, can be implemented by using computer program instructions. These computer program instructions may be provided to a processor of a general-purpose computer, a processor of a dedicated computer, or another programmable data processing apparatus to produce a machine, so that the instructions executed by the processor of the computer and/or the another programmable data processing apparatus create a method for implementing a specific function/action in the block in the flowcharts and/or block diagrams.</p><p id="p-0294" num="0287">Correspondingly, this application may further be implemented by using hardware and/or software (including firmware, resident software, microcode, and the like). Still further, this application may be in a form of a computer program product on a computer-usable or computer-readable storage medium. The computer program product has computer-usable or computer-readable program code implemented in the medium, so that the computer-usable or computer-readable is used by an instruction execution system or used in combination with an instruction execution system. In the context of this application, the computer-usable or computer-readable medium may be any medium, and may include, store, communicate, transmit, or transfer a program, for use by an instruction execution system, apparatus, or device or used in combination with an instruction execution system, apparatus, or device.</p><p id="p-0295" num="0288">Although this application is described with reference to specific features and embodiments thereof, it is clear that various modifications and combinations may be made to them without departing from the spirit and scope of this application. Correspondingly, the specification and accompanying drawings are merely example description of this application defined by the appended claims, and are considered as any of or all modifications, variations, combinations or equivalents that cover the scope of this application. It is clearly that, a person skilled in the art can make various modifications and variations to this application without departing from the scope of this application. This application is intended to cover these modifications and variations of this application provided that they fall within the scope of protection defined by the following claims and their equivalent technologies.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A data stream processing method, comprising:<claim-text>receiving an uplink data stream packet;</claim-text><claim-text>determining a resource module used to process the uplink data stream packet and an identifier of the resource module used to process the uplink data stream packet;</claim-text><claim-text>modifying the uplink data stream packet based on the identifier of the resource module, wherein a modified uplink data packet comprises the identifier of the resource module used to process the uplink data stream packet; and</claim-text><claim-text>sending the modified uplink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet comprises:<claim-text>determining, based on the received uplink data stream packet, a destination address for processing the uplink data stream packet; and</claim-text><claim-text>determining, from resource modules corresponding to the destination address, the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the modified uplink data stream packet carries a correspondence between the identifier of the resource module and a service function (SF).</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein modifying the uplink data stream packet comprises:<claim-text>adding the correspondence to a segment routing header (SRH) of the uplink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein adding the correspondence to the SRH of the uplink data stream packet comprises:<claim-text>adding the correspondence to a segment routing identifier SID in a segment list in the SRH; or</claim-text><claim-text>adding the correspondence to an optional type-length-value TLV field in the SRH.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein determining, from resource modules corresponding to the destination address, the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet comprises:<claim-text>searching for a forwarding entry based on the destination address, wherein the forwarding entry comprises the resource modules corresponding to the destination address and identifiers of the resource modules corresponding to the destination address; and</claim-text><claim-text>obtaining, from the forwarding entry, the resource module used to process the uplink data stream packet and the identifier of the resource module used to process the uplink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>receiving a protocol packet, wherein the protocol packet carries the destination address and the resource modules corresponding to the destination address; and</claim-text><claim-text>generating the forwarding entry based on the protocol packet.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identifier of the resource module is used to uniquely identify the resource module in a service function (SF) to which the resource module belongs, or the identifier of the resource module is used to uniquely identify the resource module in all SFs for processing a data stream.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>after forwarding the modified uplink data stream packet, receiving a downlink data stream packet, wherein the downlink data stream packet carries the identifier of the resource module used to process the uplink data stream packet, a destination address of the downlink data stream packet is a source address of the uplink data stream packet, and a source address of the downlink data stream packet is the destination address of the uplink data stream packet; and</claim-text><claim-text>determining, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet, wherein the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein determining, based on the identifier of the resource module, the resource module used to process the downlink data stream packet comprises:<claim-text>determining, based on the received downlink data stream packet, the destination address for processing the downlink data stream packet; and</claim-text><claim-text>determining, based on the destination address and the identifier of the resource module used to process the uplink data stream packet, the resource module used to process the downlink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method according to <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>before determining the resource module used to process the downlink data stream packet, adding, to a segment routing header (SRH) of the downlink data stream packet, a correspondence between the identifier of the resource module used to process the uplink data stream packet and a service function (SF).</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A data stream processing method, comprising:<claim-text>receiving a downlink data stream packet, wherein the downlink data stream packet carries an identifier of a resource module used to process an uplink data stream packet corresponding to the downlink data stream packet; and</claim-text><claim-text>determining, based on the identifier of the resource module used to process the uplink data stream packet, a resource module used to process the downlink data stream packet, wherein the resource module used to process the downlink data stream packet is the same as the resource module used to process the uplink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>before receiving the downlink data stream packet, receiving the uplink data stream packet, wherein the uplink data stream packet carries a correspondence between the identifier of the resource module used to process the uplink data stream packet and a service function (SF) through which the uplink data stream packet passes; and</claim-text><claim-text>generating a learning record based on the uplink data stream packet, wherein the learning record comprises the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>after receiving the downlink data stream packet, determining the learning record based on a correspondence between the uplink data stream packet and the downlink data stream packet; and</claim-text><claim-text>adding, to the downlink data stream packet, the correspondence, comprised in the learning record, between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein adding, to the downlink data stream packet, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes comprises:<claim-text>adding, to a segment routing header (SRH) of the downlink data stream packet, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein adding the correspondence to the SRH of the downlink data stream packet comprises:<claim-text>adding, to a segment routing identifier SID in a segment list in the SRH, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes; or</claim-text><claim-text>adding, to an optional type-length-value TLV field in the SRH, the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method according to <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein determining, based on the identifier of the resource module used to process the uplink data stream packet, the resource module used to process the downlink data stream packet comprises:<claim-text>determining, based on a destination address, resource modules corresponding to the SF; and</claim-text><claim-text>determining, from the resource modules corresponding to the SF and based on the correspondence between the identifier of the resource module used to process the uplink data stream packet and the SF through which the uplink data stream packet passes, the resource module used to process the downlink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising:<claim-text>after determining that the resource module corresponding to the identifier of the resource module used to process the uplink data stream packet is faulty, re-selecting a resource module from remaining resource modules corresponding to the SF to process the downlink data stream packet.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the identifier of the resource module used to process the uplink data stream packet is a globally unique identifier of the resource module used to process the uplink data stream packet, and &#x201c;globally&#x201d; is used to represent all service functions (SFs) in a data stream processing process; and/or the identifier of the resource module is a unique identifier, in an SF, of the resource module used to process the uplink data stream packet.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A data stream processing apparatus, comprising: a processing unit and a communication unit, wherein<claim-text>the communication unit is configured to receive an uplink data stream packet;</claim-text><claim-text>the processing unit is configured to: determine a resource module used to process the uplink data stream packet and an identifier of the resource module used to process the uplink data stream packet; and modify the uplink data stream packet based on the identifier of the resource module, wherein a modified uplink data stream packet comprises the identifier of the resource module used to process the uplink data stream packet; and</claim-text><claim-text>the communication unit is further configured to send the modified uplink data stream packet.</claim-text></claim-text></claim></claims></us-patent-application>