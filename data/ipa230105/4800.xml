<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004801A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004801</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17898887</doc-number><date>20220830</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>063</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>V</subclass><main-group>10</main-group><subgroup>44</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>V</subclass><main-group>20</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>063</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6271</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>0454</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>V</subclass><main-group>10</main-group><subgroup>454</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>V</subclass><main-group>20</main-group><subgroup>56</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">TRAINING, TESTING, AND VERIFYING AUTONOMOUS MACHINES USING SIMULATED ENVIRONMENTS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16366875</doc-number><date>20190327</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11436484</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17898887</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62648399</doc-number><date>20180327</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>NVIDIA Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Farabet</last-name><first-name>Clement</first-name><address><city>Mill Valley</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Zedlewski</last-name><first-name>John</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Taylor</last-name><first-name>Zachary</first-name><address><city>Santa Cruz</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Heinrich</last-name><first-name>Greg</first-name><address><city>Nice</city><country>FR</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Delaunay</last-name><first-name>Claire</first-name><address><city>Menlo Park</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Daly</last-name><first-name>Mark</first-name><address><city>Eagle</city><state>ID</state><country>US</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Campbell</last-name><first-name>Matthew</first-name><address><city>Surf City</city><state>NC</state><country>US</country></address></addressbook></inventor><inventor sequence="07" designation="us-only"><addressbook><last-name>Beeson</last-name><first-name>Curtis</first-name><address><city>Irwin</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="08" designation="us-only"><addressbook><last-name>Hicok</last-name><first-name>Gary</first-name><address><city>Mesa</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="09" designation="us-only"><addressbook><last-name>Cox</last-name><first-name>Michael</first-name><address><city>Menlo Park</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="10" designation="us-only"><addressbook><last-name>Lebaredian</last-name><first-name>Rev</first-name><address><city>Los Gatos</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="11" designation="us-only"><addressbook><last-name>Tamasi</last-name><first-name>Tony</first-name><address><city>Portola Valley</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="12" designation="us-only"><addressbook><last-name>Auld</last-name><first-name>David</first-name><address><city>Saratoga</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In various examples, physical sensor data may be generated by a vehicle in a real-world environment. The physical sensor data may be used to train deep neural networks (DNNs). The DNNs may then be tested in a simulated environment&#x2014;in some examples using hardware configured for installation in a vehicle to execute an autonomous driving software stack&#x2014;to control a virtual vehicle in the simulated environment or to otherwise test, verify, or validate the outputs of the DNNs. Prior to use by the DNNs, virtual sensor data generated by virtual sensors within the simulated environment may be encoded to a format consistent with the format of the physical sensor data generated by the vehicle.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="99.74mm" wi="158.75mm" file="US20230004801A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="228.43mm" wi="158.16mm" orientation="landscape" file="US20230004801A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="253.49mm" wi="153.08mm" orientation="landscape" file="US20230004801A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="242.99mm" wi="161.12mm" orientation="landscape" file="US20230004801A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="242.91mm" wi="160.44mm" orientation="landscape" file="US20230004801A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="242.15mm" wi="161.29mm" orientation="landscape" file="US20230004801A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="221.83mm" wi="159.68mm" orientation="landscape" file="US20230004801A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="248.75mm" wi="156.80mm" orientation="landscape" file="US20230004801A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="245.45mm" wi="159.00mm" orientation="landscape" file="US20230004801A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="220.98mm" wi="157.48mm" orientation="landscape" file="US20230004801A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="128.19mm" wi="154.60mm" orientation="landscape" file="US20230004801A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="234.53mm" wi="164.85mm" orientation="landscape" file="US20230004801A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="198.71mm" wi="118.79mm" file="US20230004801A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="232.83mm" wi="160.61mm" orientation="landscape" file="US20230004801A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="236.64mm" wi="166.29mm" orientation="landscape" file="US20230004801A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="235.71mm" wi="156.89mm" orientation="landscape" file="US20230004801A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="156.97mm" wi="130.30mm" orientation="landscape" file="US20230004801A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="222.50mm" wi="119.04mm" file="US20230004801A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="236.81mm" wi="120.06mm" file="US20230004801A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="250.27mm" wi="145.54mm" orientation="landscape" file="US20230004801A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="244.09mm" wi="132.33mm" orientation="landscape" file="US20230004801A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="254.68mm" wi="170.52mm" file="US20230004801A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="220.05mm" wi="166.29mm" orientation="landscape" file="US20230004801A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="231.56mm" wi="130.81mm" file="US20230004801A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 16/366,875, filed Mar. 27, 2019, which claims the benefit of U.S. Provisional Application No. 62/648,399, filed on Mar. 27, 2018, which is hereby incorporated by reference in its entirety.</p><p id="p-0003" num="0002">This application is related to U.S. Non-Provisional application Ser. No. 16/356,439, filed on Mar. 18, 2019, U.S. Non-Provisional application Ser. No. 16/355,328, filed on Mar. 15, 2019, U.S. Non-Provisional application Ser. No. 16/286,329, filed on Feb. 26, 2019, U.S. Non-Provisional application Ser. No. 16/277,895, filed on Feb. 15, 2019, and U.S. Non-Provisional application Ser. No. 16/265,780, filed on Feb. 1, 2019, U.S. Non-Provisional application Ser. No. 16/241,005, filed on Jan. 7, 2019, U.S. Non-Provisional application Ser. No. 16/186,473, filed on Nov. 9, 2018, each of which is hereby incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Autonomous vehicles and semi-autonomous vehicles rely on machine learning, and specifically deep neural networks (DNNs), for performing any number of operations for operating, piloting, and navigating the vehicle. For example, DNNs may be used for object detection, lane and road boundary detection, safety analysis, drivable free-space analysis, control generation during vehicle maneuvers, and the like. However, in order to verify and validate the usage of the DNNs in autonomous or semi-autonomous vehicles, the DNNs need to be trained on a large amount of data, which requires vast amounts of time and effort, and yet still does not always guarantee universally accurate or usable results.</p><p id="p-0005" num="0004">For example, conventional systems often rely on data generated by physical vehicles navigating real-world environments to train the DNNs prior to deployment in working models. This approach has several limitations, however. For example, vehicles can only navigate to so many places, recreating dangerous or unique situations is difficult in the real-world environment, and testing the DNNs in these real-world environments may be dangerous. For example, especially where a DNN is used for obstacle avoidance or other safety measures, testing the DNNs in real-world environments may not be practical. On the other hand, an automaker likely will not deploy an autonomous vehicle into the real-world until an acceptable level of safety has been achieved. As a result, these competing interests make generating a sound, safe, accurate, and reliable autonomous driving system increasingly difficult.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments of the present disclosure relate training, testing, and verifying autonomous machines using simulated environments. Systems and methods are disclosed for training, testing, and/or verifying one or more features of a real-world system&#x2014;such as a software stack for use in autonomous vehicles and/or robots.</p><p id="p-0007" num="0006">In contrast to conventional systems, such as those described above, the systems of the present disclosure leverage a simulated environment to test one or more autonomous driving software stacks that include a multitude of DNNs. For example, physical sensor data, virtual sensor data, or a combination thereof may be used to train the DNNs of the software stack(s). Once trained, the DNNs may be tested, verified, and validated within a simulation system that generates a simulated environment for controlling a virtual object using the software stack(s). Simulation data from the simulated environment may be input into the DNNs of the software stack(s), and the DNNs may generate outputs. In some examples, the outputs may be used to control the virtual object within the simulated environment, to determine how the virtual object (and thus a physical object that corresponds to the virtual object) may perform in any number of different situations. In other examples, the outputs may be used to test the accuracy of the DNNs, and the results may be used to generate more data for further training (e.g., data that the DNNs are least consistent processing accurately), fine-tune the DNNs, verify the DNNs, and/or validate the DNNs. In any example, the simulated environment may be generated to create difficult to navigate, dangerous, unsafe, and/or otherwise unpredictable situations for the virtual object to navigate. As a result, previously untested scenarios (e.g., due to safety concerns, difficulty of reproduction, etc.) may be tested, repeated, and improved upon within the simulated environment.</p><p id="p-0008" num="0007">In some examples, vehicle hardware configured for installation within an autonomous vehicle may be used to execute the software stack(s) within the simulated environment. In addition, the virtual sensor data may be encoded to a format that is familiar to the software stack(s) (e.g., is bit-to-bit the same as the physical sensor data used for training the DNNs). As a result, the testing, training, verification, and/or validation of the DNNs may be substantially identical to employing the hardware/software components in a physical vehicle in a real-world environment.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">The present systems and methods for training, testing, and verifying autonomous machines using simulated environments is described in detail below with reference to the attached drawing figures, wherein:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example system for re-simulation, in accordance with some embodiments of the present disclosure;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> includes a data flow diagram for a process of testing, training, verifying, and/or validating neural networks, in accordance with some embodiments of the present disclosure;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>D</figref> include workflows used for training DNNs, in accordance with some embodiments of the present disclosure;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>F</figref> are example illustrations of a simulation system, in accordance with some embodiments of the present disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram showing a method for generating a simulated environment using a hardware-in-the-loop object, in accordance with some embodiments of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref> is an example illustration of a simulation system at runtime, in accordance with some embodiments of the present disclosure;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b>B</figref> includes a cloud-based architecture for a simulation system, in accordance with some embodiment of the present disclosure;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> includes a data flow diagram illustrating a process <b>700</b> for re-simulation or simulation using one or more codecs, in accordance with some embodiments of the present disclosure;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b></figref> includes a data flow diagram for key performance indicator (KPI) analysis and observation, in accordance with some embodiments of the present disclosure;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow diagram showing a method for controlling a virtual object in a simulated environment, in accordance with some embodiments of the present disclosure;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flow diagram showing a method for controlling a virtual object in a simulated environment using machine learning models trained on physical sensor data, in accordance with some embodiments of the present disclosure;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>11</b>A</figref> is an illustration of an example autonomous vehicle, in accordance with some embodiments of the present disclosure;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>11</b>B</figref> is an example of camera locations and fields of view for the example autonomous vehicle of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, in accordance with some embodiments of the present disclosure;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b>C</figref> is a block diagram of an example system architecture for the example autonomous vehicle of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, in accordance with some embodiments of the present disclosure;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>11</b>D</figref> is a system diagram for communication between cloud-based server(s) and the example autonomous vehicle of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, in accordance with some embodiments of the present disclosure; and</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram of an example computing device suitable for use in implementing some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0026" num="0025">Systems and methods disclosed are related to training, testing, and verifying autonomous machines or objects in simulated environments. The present disclosure may be described generally with respect to an example autonomous or semi-autonomous vehicle <b>102</b> (alternatively referred to herein as &#x201c;vehicle <b>102</b>&#x201d; or &#x201c;autonomous vehicle <b>102</b>&#x201d;), an example of which is described in more detail herein with respect to <figref idref="DRAWINGS">FIGS. <b>11</b>A-<b>11</b>D</figref>. However, this is not intended to be limiting. For example, and without departing from the scope of the present disclosure, the systems, methods, and/or processes described herein may be applicable to non-autonomous vehicles, robots, unmanned aerial vehicles, and/or any other type of vehicle or object.</p><p id="p-0027" num="0026">Re-Simulation System</p><p id="p-0028" num="0027">Now referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, <figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example system <b>100</b> for re-simulation, in accordance with some embodiments of the present disclosure. For example, the system <b>100</b> may be used for training, testing, verifying, deploying, updating, re-verifying, and/or deploying one or more neural networks for use in an autonomous vehicle, a semi-autonomous vehicle, a robot, and/or another object. In some examples, the system <b>100</b> may include some or all of the component, features, and/or functionality of system <b>1176</b> of <figref idref="DRAWINGS">FIG. <b>11</b>D</figref>, and/or may include additional and/or alternative components, features, and functionality of the system <b>1176</b>. It should be understood that this and other arrangements described herein are set forth only as examples. Other arrangements and elements (e.g., machines, interfaces, functions, orders, groupings of functions, etc.) may be used in addition to or instead of those shown, and some elements may be omitted altogether. Further, many of the elements described herein are functional entities that may be implemented as discrete or distributed components or in conjunction with other components, and in any suitable combination and location. Various functions described herein as being performed by entities may be carried out by hardware, firmware, and/or software. For instance, various functions may be carried out by a processor executing instructions stored in memory.</p><p id="p-0029" num="0028">One or more vehicles <b>102</b> may collect sensor data from one or more sensors of the vehicle(s) <b>102</b> in real-world (e.g., physical) environments. The sensors of the vehicle(s) <b>102</b> may include, without limitation, global navigation satellite systems sensor(s) <b>1158</b> (e.g., Global Positioning System sensor(s)), RADAR sensor(s) <b>1160</b>, ultrasonic sensor(s) <b>1162</b>, LIDAR sensor(s) <b>1164</b>, inertial measurement unit (IMU) sensor(s) <b>1166</b> (e.g., accelerometer(s), gyroscope(s), magnetic compass(es), magnetometer(s), etc.), microphone(s) <b>1196</b>, stereo camera(s) <b>1168</b>, wide-view camera(s) <b>1170</b> (e.g., fisheye cameras), infrared camera(s) <b>1172</b>, surround camera(s) <b>1174</b> (e.g., 360 degree cameras), long-range and/or mid-range camera(s) <b>1198</b>, speed sensor(s) <b>1144</b> (e.g., for measuring the speed of the vehicle <b>102</b>), vibration sensor(s) <b>1142</b>, steering sensor(s) <b>1140</b>, brake sensor(s) (e.g., as part of the brake sensor system <b>1146</b>), and/or other sensor types. The vehicle(s) <b>102</b> may include autonomous vehicles, semi-autonomous vehicles, non-autonomous vehicles, and/or may include objects other than vehicles <b>102</b>, such as robots, drones, unmanned aerial vehicles (UAVs), etc.</p><p id="p-0030" num="0029">The vehicle(s) <b>102</b> may include vehicle hardware <b>104</b>. For example, the vehicle hardware <b>104</b> may be responsible for managing the sensor data generated by the sensors (e.g., using a sensor manager of an autonomous driving software stack being executed by the vehicle hardware <b>104</b>). The autonomous driving software stack being executed using the vehicle hardware <b>104</b> may further include a world state manager that manages the world using one or more maps (e.g., 3D maps), localization component(s), perception component(s), and/or the like. In addition, the autonomous driving software stack may include planning component(s) (e.g., as part of a planning layer), control component(s) (e.g., as part of a control layer), actuation component(s) (e.g., as part of an actuation layer), obstacle avoidance component(s) (e.g., as part of an obstacle avoidance layer), and/or other component(s). In any example, the vehicle hardware <b>104</b> may include the hardware of the vehicle <b>102</b> that is used to control the vehicle <b>102</b> through real-world environments based on the sensor data, one or more machine learning models (e.g., neural networks), and/or the like. As such, the vehicle hardware <b>104</b> may be configured for installation within the vehicle <b>102</b> and for use by the vehicle <b>102</b> in executing an autonomous driving software stack for controlling, at least in part, the vehicle <b>102</b> through a real-world physical environment(s).</p><p id="p-0031" num="0030">The sensor data collected by the sensors of the vehicle(s) <b>102</b>, in addition to existing sensor data (e.g., sensor data stored in the data store(s) <b>110</b>), may be used by a training sub-system <b>106</b>. The training sub-system <b>106</b> may include a cloud-based deep learning infrastructure that may use artificial intelligence to analyze the sensor data received from the vehicle(s) <b>102</b> and/or stored in the data store(s) <b>110</b>, and incorporate or train up-to-date, real-time neural networks (and/or other machine learning models) for real-time intelligent inferencing. In some examples, the training sub-system <b>106</b> may include one or more graphics processing unit (GPU) servers <b>108</b>. For example, the training sub-system <b>106</b> may include a datacenter with GPUs, TPUs, CPUs, and/or other processor types. As such, the use of GPU with respect to GPU server(s) <b>108</b> is not intended to be limiting, and in some examples, the GPU server(s) <b>108</b> may not include GPU(s).</p><p id="p-0032" num="0031">The training sub-system <b>106</b> may train and/or test any number of machine learning models, including deep neural networks (DNNs), such as neural networks for performing operations associated with one or more layers of the autonomous driving software stack and/or an in-cabin experience (IX) software stack. For example, one or more autonomous vehicle (AV) perception DNNs may be trained and/or tested, where the AV perception DNNs may be used for detecting lanes and boundaries on driving surfaces, for detecting drivable free-space, for detecting traffic poles or signs, for detecting traffic lights, for detecting objects in the environment (e.g., vehicles, pedestrians, animals, inanimate objects, etc.), for detecting wait conditions and intersections, and/or the like. As another example, one or more in-cabin experience (IX) perception DNNs may be trained and/or tested, where the IX perception DNNs may be used for monitoring passengers and drivers within the vehicle <b>102</b>. For example, one or more IX perception DNNs may be trained to determine a state of the driver&#x2014;such as, but not limited to, gaze tracking, head pose tracking, drowsiness detection, sleepiness, eye openness, emotion detection, heart rate monitoring, liveliness of the driver, driver impairment, and/or the like.</p><p id="p-0033" num="0032">Once trained and/or tested, the IX perception DNNs, the AV perception DNNs, and/or other DNNs may be validated and/or verified by a validation/verification sub-system <b>112</b>. The validation/verification sub-system <b>112</b> may include similar components and/or features as the training sub-system <b>106</b>. In some examples, the training sub-system <b>106</b> and the validation/verification sub-system <b>112</b> may include the same hardware components, while in other examples the hardware components may differ. The validation/verification sub-system <b>112</b> may verify and/or validate performance, accuracy, and/or other criteria associated with the DNNs. Once verified and/or validated, the validated AV perception DNNs and/or the validated IX perception DNNs may be incorporated into software stack(s) <b>116</b> (e.g., the IX software stack and/or the autonomous driving software stack). Once incorporated into the software stack(s) <b>116</b>, the vehicle(s) <b>102</b> may execute the software stack(s) using the vehicle hardware <b>104</b> to control the vehicle(s) <b>102</b> within real-world environments. Although the vehicle(s) <b>102</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are illustrated as collecting data and using the deployed DNNs, this is not intended to be limiting. For example, some vehicles <b>102</b> may be used for data capture, while other vehicles <b>102</b> may be used for autonomous driving applications using the deployed DNNs. As such, in some examples, first vehicles <b>102</b> may collect the data, and second vehicles <b>102</b> may use the software stack(s) <b>116</b> once the data collected from the first vehicles <b>102</b> has been used to train the deployed DNNs.</p><p id="p-0034" num="0033">As such, the system <b>100</b> may include a re-simulation system that uses physical sensor data generated by vehicle(s) <b>102</b> in real-world environments to train, test, verify, and/or validate one or more DNNs for use in the software stack(s) <b>116</b>. In some examples, as described herein, the re-simulation system <b>100</b> may overlap with simulation system(s) <b>400</b>A, <b>400</b>B, <b>400</b>C, and/or <b>400</b>D in that at least some of the testing, training, verification, and/or validation may be performed within a simulated environment.</p><p id="p-0035" num="0034">Now referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes a data flow diagram for a process <b>118</b> of testing, training, verifying, and/or validating neural networks, in accordance with some embodiments of the present disclosure. The process <b>118</b> may include data ingestion of new driving data (e.g., sensor data) captured and/or generated by one or more vehicles <b>102</b> in real-world environments and/or simulated or virtual sensor data from one or more simulated environments. The process <b>118</b> may further include data indexing and curation <b>124</b>, data labeling services <b>126</b>, model training <b>128</b>, model refinement, pruning, and/or fine tuning <b>130</b>, model validation <b>132</b>, and/or updating global coverage maps <b>134</b>. The process <b>118</b> may include a training loop, whereby new data is generated by the vehicle(s) <b>102</b>, used to train, test, verify, and/or validate one or more perception DNNs, and the trained or deployed DNNs are then used by the vehicle(s) <b>102</b> to navigate real-world environments.</p><p id="p-0036" num="0035">The data store(s) <b>120</b> may store sensor data and/or virtual sensor data generated by one or more real-world sensors of one or more vehicle(s) <b>102</b> and/or virtual sensors of one or more virtual vehicles, respectively.</p><p id="p-0037" num="0036">Data ingestion <b>122</b> may include generating and/or recording the data output by the vehicle(s) <b>102</b> autonomous vehicle platform (e.g., the vehicle hardware <b>104</b> and/or the software stack(s) <b>116</b>). For a non-limiting example, the data may be written out to solid state drives (SSDs) and/or downloaded by wire and/or wirelessly to the data store(s) <b>120</b>.</p><p id="p-0038" num="0037">Data indexing and curation <b>124</b> may include indexing metadata associated with the data output by the vehicle(s) <b>102</b> for further search and/or retrieval. Search indexes may be used to retrieve specific segments of the data, which may then be tagged and/or flagged for further processing. In some examples, raw data may be stored in a lossless format to allow for further pre-processing and/or quantization. In such examples, an on-demand transcoding service may transform the raw data into various target formats (e.g., MPEG, JPEG, FP16, etc.) and may feed or input the transformed data to one or more processing pipelines (e.g., labeling, DNN training, re-simulation, etc.). Exported datasets may be stored in a dataset store, which may be a service that handles immutable datasets for further processing. Once the datasets are stored, the datasets may be used and re-used to reproduce training results exactly, or run and re-run simulation jobs.</p><p id="p-0039" num="0038">Data labeling services <b>126</b> may be used to tag and/or label the data, the raw data, the transformed data, and/or any other data used in the process <b>118</b>. In examples, the tagging and/or labeling may be performed by a human, by a machine, or by a combination thereof.</p><p id="p-0040" num="0039">Model training <b>128</b> may use a deep-learning platform to define training applications and to run the training application on a compute cluster (e.g., using the training sub-system <b>106</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The compute cluster may include one or more GPU-powered servers that may each include a plurality of GPUs, PCIe switches, and/or CPUs, interconnected with high-speed interconnects such as NVLink and PCIe connections. In some examples, a local cache (high-bandwidth scaled out file system) may be available next to the compute cluster and used to cache datasets next to the compute nodes. The system may handle the caching and may provide a local dataset to the compute job. The training apps may produce trained models and experimental metadata that may be stored in a model data store for further consumption.</p><p id="p-0041" num="0040">Model refinement, pruning, and/or fine tuning <b>130</b> may include updating the DNNs to further refine and improve the accuracy and efficacy of the DNNs. For example, hyper-parameter discovery may be enabled by an experiment service that may track information on the hyper-parameter space to explore hyper-parameter configurations, metrics, and model versions generated by each experiment. A workflow manager may be used to schedule and dispatch experiments to multiple nodes in parallel. Maximum compute efficiency may be enabled by early-termination heuristics which make it possible to terminate experiments that perform poorly relative to other experiments. The workflow manager may be responsible for building binaries out of Source Configuration Management (SCM) repositories, to ensure that no untracked information leaks from users to the generated models. As such, the platform may enable systematic tracking of all information pertaining to experiments, thereby enabling reproducible experiments. Pruning may be executed, as an example and without limitation, similarly to the pruning methods, processes, and systems disclosed in U.S. Provisional Patent Application No. 62/630,445, and U.S. patent application Ser. No. 16/246,414, each hereby incorporated by reference in its entirety.</p><p id="p-0042" num="0041">Model validation <b>132</b> may include verifying and/or validating the DNNs, such as by using the validation/verification sub-system <b>112</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Once models are validated, a global coverage map may be updated (at <b>134</b>). For example, once the necessary portions of the software stack(s) <b>116</b> are trained for a new region, and/or the software stack(s) <b>116</b> for an already covered region are updated, the global coverage map may be updated. As the global coverage map increases, the vehicle(s) <b>102</b> using the software stack(s) <b>116</b> may be able to navigate through additional regions. Once the models are trained, the models may be reloaded into a larger application and run other test datasets. In such examples, a similar model as used for training may be used for this re-training, testing, or fine tuning process.</p><p id="p-0043" num="0042">In some examples, active learning may be used. For example, existing trained models (e.g. DNNs) may be used to mine for more training data. The system may use existing models to score (or inference) newly collected data and/or raw data and to compute a confidence score for each piece of data. The confidence score may be representative of how informative or useful the data may be for training. For example, data already used that is modeled by an existing model may not provide much or any incremental value, while new data that the model poorly predicts may be reused to improve the model for real-world driving applications. In other words, data that the DNNs are already trained to process accurately may not be as useful as data that the DNNs are not trained to process accurately. Active learning may be used to identify the data that may be used to provide increased performance for the DNNs in additional or alternative situations or environments.</p><p id="p-0044" num="0043">Now referring to <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>E</figref>, <figref idref="DRAWINGS">FIGS. <b>3</b>A-<b>3</b>E</figref> include workflows used for training DNNs. <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> includes a workflow <b>300</b>A. The workflow <b>300</b>A may include data ingestion <b>122</b>, passing of the data to dataset store(s) <b>302</b> (e.g., a service that handles immutable datasets for further processing), labeling the data using data labeling services <b>126</b>, and training DNNs using model training <b>128</b>. The frames selected for labelling may be randomly selected in some examples. The workflow <b>300</b>A may include labeling of, for example, 300,000 to 600,000 frames (e.g., frames represented by the data). Once the DNNs are trained, the DNNs may be used in simulation and/or re-simulation applications <b>304</b>. The models may then be pruned, optimized, refined, and then deployed as deployed DNNs in the vehicle(s) <b>102</b> (e.g., in the software stack(s) <b>116</b>). Once the DNNs have been trained to an acceptable level of accuracy (e.g., 90%, 95%, 97%, etc.), the training and refinement process may move to a second workflow, such as workflow <b>300</b>B.</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> includes the workflow <b>300</b>B. The workflow <b>300</b>B may include a model store <b>306</b> that may contain pre-trained or previously trained models (e.g., DNNs). The pre-trained models may be used to score new data, and the score may be used to prioritize which data to label. For example, a pre-trained DNN may be used to compute a score for each new frame selected where the score may represent a confidence in the prediction of the DNN. When the confidence score is high (e.g., meaning the model is able to accurately handle the frame), the frame may be deprioritized for labeling. When the score is low, the frame may be prioritized. As such, when a frame is confusing for the DNN (i.e., when the confidence score is low), then the frame may be labeled so that the DNN can learn from the frame, thereby further refining the pre-trained DNN.</p><p id="p-0046" num="0045">In some examples, a scoring function may estimate an uncertainty pseudo-probability from the network output. In such examples, dropout may be leveraged by computing an output of the DNN many times, and each time randomly dropping out (e.g., zeroing) neurons of the previous to last layer. The variance of the predictions of the DNN may then be leveraged, and the variance may encode the uncertainty in the prediction, thereby leading to a score.</p><p id="p-0047" num="0046">Key performance indicators (KPIs) and/or metrics may be computed for one or more of the current DNNs (e.g., the best performing DNNs) in the model store <b>306</b> in order to determine conditions or combination of conditions which the current DNNs may not perform sufficiently well. For example, one condition dimension may include properties of the whole image or frame, such as, but not limited to, lighting or illumination (e.g., day, night, cloudy, twilight, backlit, etc.), weather (e.g., clear, rain, snow, fog, etc.), setting (e.g., rural, urban, suburban, highway, etc.), topography (e.g., flat, curve, hill, etc.), geographic region (e.g., Europe, North America, China, etc.), sensor (e.g., camera) properties such as position and/or lens type, and/or a combination thereof. The conditions or a combination of the conditions which the current DNNs are not considered to perform sufficiently well on (e.g., have an accuracy below a desired or required level) may be used to direct mining and labeling of data (e.g., additional data) that may increase the accuracy of the DNNs with reference to the conditions or combination of conditions. In some examples, the mining of the data may be facilitated by use tags that may have been added during data indexing and/or curation <b>124</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0048" num="0047">The workflow <b>300</b>B may provide for fine-tuning and/or transfer learning. For example, the system may reload models from the model store <b>306</b> (as indicated by dashed line <b>310</b> in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>) and continue to train them. This may be used for camera adaptation and quick experiments, for example.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes workflow <b>300</b>C. The workflow <b>300</b>C may provide for active learning. For example, the workflows <b>300</b>A and <b>300</b>B may not be able to continue indefinitely as this may result in too much data for even the largest systems to retain and process. For example, a data collection of approximately 10,000 hours may result in 30-50 petabytes of data, depending on the number of sensors of the vehicle(s) <b>102</b>. In addition, after the workflows <b>300</b>A and <b>300</b>B, the DNNs should be operating at high accuracy, and performing well on nearly all offline benchmarks. As such, the workflow <b>300</b>C may provide for edge-level confusion scoring, which may be similar to the workflow <b>300</b>B, but performed at the edge. In general, this may mean that anything that the DNN fails to understand at the vehicle level while driving may be logged and posted via an API, and flagged for further inspection (e.g., labeling).</p><p id="p-0050" num="0049">In some examples, pre-determined conditions or combinations of conditions (such as those described herein) that the DNNs fail to perform accurately enough may also be used to direct and focus data gathering at the edge. For example, the vehicle(s) <b>102</b> may not collect all data, but may only collect data where certain conditions or combinations of conditions are met (e.g., at night, in the rain, in certain tunnel types, etc.).</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> includes workflow <b>300</b>D. The workflow <b>300</b>D may provide for training and refinement of the DNNs. In some examples, the workflow <b>300</b>D may follow the workflow <b>300</b>C. Ultimately, the goal may be to use prediction scores and aggregate them on a map (e.g., a GPS or GNSS map), to illustrate locations or regions where the DNNs perform well, and where the DNNs perform less well (e.g., below desired accuracy levels). A heat map <b>312</b> may be generated to indicate the areas of lower performance, and the vehicle(s) <b>102</b> may be dispatched (e.g., at dispatch <b>308</b>) to these locations. In some examples, the KPIs and/or metrics may be leveraged to direct planning of routes for the vehicle(s) <b>102</b> in order to capture data representative of conditions or combinations of conditions that the DNN is not as accurate at generating predictions for.</p><p id="p-0052" num="0051">Simulation System</p><p id="p-0053" num="0052">The simulation system <b>400</b>&#x2014;e.g., represented by simulation systems <b>400</b>A, <b>400</b>B, <b>400</b>C, and <b>400</b>D, described in more detail herein&#x2014;may generate a global simulation that simulates a virtual world or environment (e.g., a simulated environment) that may include artificial intelligence (AI) vehicles or other objects (e.g., pedestrians, animals, etc.), hardware-in-the-loop (HIL) vehicles or other objects, software-in-the-loop (SIL) vehicles or other objects, and/or person-in-the-loop (PIL) vehicles or other objects. The global simulation may be maintained within an engine (e.g., a game engine), or other software-development environment, that may include a rendering engine (e.g., for 2D and/or 3D graphics), a physics engine (e.g., for collision detection, collision response, etc.), sound, scripting, animation, AI, networking, streaming, memory management, threading, localization support, scene graphs, cinematics, and/or other features. In some examples, as described herein, one or more vehicles or objects within the simulation system <b>400</b> (e.g., HIL objects, SIL objects, PIL objects, AI objects, etc.) may be maintained within their own instance of the engine. In such examples, each virtual sensor of each virtual object may include their own instance of the engine (e.g., an instance for a virtual camera, a second instance for a virtual LIDAR sensor, a third instance for another virtual LIDAR sensor, etc.). As such, an instance of the engine may be used for processing sensor data for each sensor with respect to the sensor's perception of the global simulation. As such, for a virtual camera, the instance may be used for processing image data with respect to the camera's field of view in the simulated environment. As another example, for an IMU sensor, the instance may be used for processing IMU data (e.g., representative of orientation) for the object in the simulated environment.</p><p id="p-0054" num="0053">AI (e.g., bots) vehicles or other objects may include pedestrians, animals, third-party vehicles, vehicles, and/or other object types. The AI objects in the simulated environment may be controlled using artificial intelligence (e.g., machine learning such as neural networks, rules-based control, a combination thereof, etc.) in a way that simulates, or emulates, how corresponding real-world objects would behave. In some examples, the rules, or actions, for AI objects may be learned from one or more HIL objects, SIL objects, and/or PIL objects. In an example where an AI object (e.g., bot) in the simulated environment corresponds to a pedestrian, the bot may be trained to act like a pedestrian in any of a number of different situations or environments (e.g., running, walking, jogging, not paying attention, on the phone, raining, snowing, in a city, in a suburban area, in a rural community, etc.). As such, when the simulated environment is used for testing vehicle performance (e.g., for HIL or SIL embodiments), the bot (e.g., the pedestrian) may behave as a real-world pedestrian would (e.g., by jaywalking in rainy or dark conditions, failing to heed stop signs or traffic lights, etc.), in order to more accurately simulate a real-world environment. This method may be used for any AI bot in the simulated environment, such as vehicles, bicyclists, or motorcycles, whose AI bots may also be trained to behave as real-world objects would (e.g., weaving in and out of traffic, swerving, changing lanes with no signal or suddenly, braking unexpectedly, etc.).</p><p id="p-0055" num="0054">The AI objects that may be distant from the vehicle of interest (e.g., the ego-vehicle in the simulated environment) may be represented in a simplified form&#x2014;such as a radial distance function, or list of points at known positions in a plane, with associated instantaneous motion vectors. As such, the AI objects may be modeled similarly to how AI agents may be modeled in videogame engines.</p><p id="p-0056" num="0055">HIL vehicles or objects may use hardware that is used in the physical vehicles or objects to at least assist in some of the control of the HIL vehicles or objects in the simulated environment. For example, a vehicle controlled in a HIL environment may use one or more SoCs <b>1104</b> (<figref idref="DRAWINGS">FIG. <b>11</b>C</figref>), CPU(S) <b>1118</b>, GPU(s) <b>1120</b>, etc. in a data flow loop for controlling the vehicle in the simulated environment. In some examples, the hardware from the vehicles may be an NVIDIA DRIVE AGX PegasusTM compute platform and/or an NVIDIA DRIVE PX XavierTM compute platform. For example, the vehicle hardware (e.g., vehicle hardware <b>104</b>) may include some or all of the components and/or functionality described in U.S. Non-Provisional application Ser. No. 16/186,473, filed on Nov. 9, 2018, which is hereby incorporated by reference in its entirety. In such examples, at least some of the control decisions may be generated using the hardware that is configured for installation within a real-world autonomous vehicle (e.g., the vehicle <b>102</b>) to execute at least a portion of a software stack(s) <b>116</b> (e.g., an autonomous driving software stack).</p><p id="p-0057" num="0056">SIL vehicles or objects may use software to simulate or emulate the hardware from the HIL vehicles or objects. For example, instead of using the actual hardware that may be configured for use in physical vehicles (e.g., the vehicle <b>102</b>), software, hardware, or a combination thereof may be used to simulate or emulate the actual hardware (e.g., simulate the SoC(s) <b>1104</b>).</p><p id="p-0058" num="0057">PIL vehicles or objects may use one or more hardware components that allow a remote operator (e.g., a human, a robot, etc.) to control the PIL vehicle or object within the simulated environment. For example, a person or robot may control the PIL vehicle using a remote control system (e.g., including one or more pedals, a steering wheel, a VR system, etc.), such as the remote control system described in U.S. Non-Provisional application Ser. No. 16/366,506, filed on Mar. 27, 2019, and hereby incorporated by reference in its entirety. In some examples, the remote operator may control autonomous driving level 0, 1, or 2 (e.g., according to the Society of Automotive Engineers document J3016) virtual vehicles using a VR headset and a CPU(s) (e.g., an X86 processor), a GPU(s), or a combination thereof. In other examples, the remote operator may control advanced AI-assisted level 2, 3, or 4 vehicles modeled using one or more advanced SoC platforms. In some examples, the PIL vehicles or objects may be recorded and/or tracked, and the recordings and/or tracking data may be used to train or otherwise at least partially contribute to the control of AI objects, such as those described herein.</p><p id="p-0059" num="0058">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is an example illustration of a simulation system <b>400</b>A, in accordance with some embodiments of the present disclosure. The simulation system <b>400</b>A may generate a simulated environment <b>410</b> that may include AI objects <b>412</b> (e.g., AI objects <b>412</b>A and <b>412</b>B), HIL objects <b>414</b>, SIL objects <b>416</b>, PIL objects <b>418</b>, and/or other object types. The simulated environment <b>410</b> may include features of a driving environment, such as roads, bridges, tunnels, street signs, stop lights, crosswalks, buildings, trees and foliage, the sun, the moon, reflections, shadows, etc., in an effort to simulate a real-world environment accurately within the simulated environment <b>410</b>. In some examples, the features of the driving environment within the simulated environment <b>410</b> may be more true-to-life by including chips, paint, graffiti, wear and tear, damage, etc. Although described with respect to a driving environment, this is not intended to be limiting, and the simulated environment may include an indoor environment (e.g., for a robot, a drone, etc.), an aerial environment (e.g., for a UAV, a drone, an airplane, etc.), an aquatic environment (e.g., for a boat, a ship, a submarine, etc.), and/or another environment type.</p><p id="p-0060" num="0059">The simulated environment <b>410</b> may be generated using virtual data, real-world data, or a combination thereof. For example, the simulated environment may include real-world data augmented or changed using virtual data to generate combined data that may be used to simulate certain scenarios or situations with different and/or added elements (e.g., additional AI objects, environmental features, weather conditions, etc.). For example, pre-recorded video may be augmented or changed to include additional pedestrians, obstacles, and/or the like, such that the virtual objects (e.g., executing the software stack(s) <b>116</b> as HIL objects and/or SIL objects) may be tested against variations in the real-world data.</p><p id="p-0061" num="0060">The simulated environment may be generated using rasterization, ray-tracing, using DNNs such as generative adversarial networks (GANs), another rendering technique, and/or a combination thereof. For example, in order to create more true-to-life, realistic lighting conditions (e.g., shadows, reflections, glare, global illumination, ambient occlusion, etc.), the simulation system <b>400</b>A may use real-time ray-tracing. In one or more embodiments, one or more hardware accelerators may be used by the simulation system <b>400</b>A to perform real-time ray-tracing. The ray-tracing may be used to simulate LIDAR sensor for accurate generation of LIDAR data. For example, ray casting may be used in an effort to simulate LIDAR reflectivity. In any example, ray-tracing techniques used by the simulation system <b>400</b>A may include one or more techniques described in U.S. Provisional Patent Application No. 62/644,385, filed Mar. 17, 2018, U.S. Provisional Patent Application No. 62/644,386, filed Mar. 17, 2018, U.S. Provisional Patent Application No. 62/644,601, filed Mar. 19, 2018, and U.S. Provisional Application No. 62/644,806, filed Mar. 19, 2018, U.S. Non-Provisional patent application Ser. No. 16/354,983, filed on Mar. 15, 2019, and/or U.S. Non-Provisional patent application Ser. No. 16/355,214, filed on Mar. 15, 2019, each of which is hereby incorporated by reference in its entirety.</p><p id="p-0062" num="0061">In some examples, the simulated environment may be rendered, at least in part, using one or more DNNs, such as generative adversarial neural networks (GANs). For example, real-world data may be collected, such as real-world data captured by autonomous vehicles (e.g., camera(s), LIDAR sensor(s), RADAR sensor(s), etc.), robots, and/or other objects, as well as real-world data that may be captured by any sensors (e.g., images or video pulled from data stores, online resources such as search engines, etc.). The real-world data may then be segmented, classified, and/or categorized, such as by labeling differing portions of the real-world data based on class (e.g., for an image of a landscape, portions of the image&#x2014;such as pixels or groups of pixels&#x2014;may be labeled as car, sky, tree, road, building, water, waterfall, vehicle, bus, truck, sedan, etc.). A GAN (or other DNN) may then be trained using the segmented, classified, and/or categorized data to generate new versions of the different types of objects, landscapes, and/or other features as graphics within the simulated environment.</p><p id="p-0063" num="0062">The simulator component(s) <b>402</b> of the simulation system <b>400</b> may communicate with vehicle simulator component(s) <b>406</b> over a wired and/or wireless connection. In some examples, the connection may be a wired connection using one or more sensor switches <b>408</b>, where the sensor switches may provide low-voltage differential signaling (LVDS) output. For example, the sensor data (e.g., image data) may be transmitted over an HDMI to LVDS connection between the simulator component(s) <b>402</b> and the vehicle simulator component(s) <b>406</b>. The simulator component(s) <b>402</b> may include any number of compute nodes (e.g., computers, servers, etc.) interconnected in order to ensure synchronization of the world state. In some examples, as described herein, the communication between each of the compute nodes (e.g., the vehicle simulator component(s) compute nodes and the simulator component(s) compute nodes) may be managed by a distributed shared memory (DSM) system (e.g., DSM <b>424</b> of <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>) using a distributed shared memory protocol (e.g., a coherence protocol). The DSM may include a combination of hardware (cache coherence circuits, network interfaces, etc.) and software. This shared memory architecture may separate memory into shared parts distributed among nodes and main memory, or distributing all memory between all nodes. In some examples, InfiniBand (IB) interfaces and associated communications standards may be used. For example, the communication between and among different nodes of the simulation system <b>400</b> (and/or <b>600</b>) may use IB.</p><p id="p-0064" num="0063">The simulator component(s) <b>402</b> may include one or more GPUs <b>404</b>. The virtual vehicle being simulated may include any number of sensors (e.g., virtual or simulated sensors) that may correspond to one or more of the sensors described herein at least with respect to <figref idref="DRAWINGS">FIGS. <b>11</b>A-<b>11</b>C</figref>. In some examples, each sensor of the vehicle may correspond to, or be hosted by, one of the GPUs <b>404</b>. For example, processing for a LIDAR sensor may be executed on a first GPU <b>404</b>, processing for a wide-view camera may be executed on a second GPU <b>404</b>, processing for a RADAR sensor may be executed on a third GPU, and so on. As such, the processing of each sensor with respect to the simulated environment may be capable of executing in parallel with each other sensor using a plurality of GPUs <b>404</b> to enable real-time simulation. In other examples, two or more sensors may correspond to, or be hosted by, one of the GPUs <b>404</b>. In such examples, the two or more sensors may be processed by separate threads on the GPU <b>404</b> and may be processed in parallel. In other examples, the processing for a single sensor may be distributed across more than one GPU. In addition to, or alternatively from, the GPU(s) <b>404</b>, one or more TPUs, CPUs, and/or other processor types may be used for processing the sensor data.</p><p id="p-0065" num="0064">Vehicle simulator component(s) <b>406</b> may include a compute node of the simulation system <b>400</b>A that corresponds to a single vehicle represented in the simulated environment <b>410</b>. Each other vehicle (e.g., <b>414</b>, <b>418</b>, <b>416</b>, etc.) may include a respective node of the simulation system. As a result, the simulation system <b>400</b>A may be scalable to any number of vehicles or objects as each vehicle or object may be hosted by, or managed by, its own node in the system <b>400</b>A. In the illustration of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the vehicle simulator component(s) <b>406</b> may correspond to a HIL vehicle (e.g., because the vehicle hardware <b>104</b> is used). However, this is not intended to be limiting and, as illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b>B and <b>4</b>C</figref>, the simulation system <b>400</b> may include SIL vehicles, HIL vehicles, PIL vehicles, and/or AI vehicles. The simulator component(s) <b>402</b> (e.g., simulator host device) may include one or more compute nodes of the simulation system <b>400</b>A, and may host the simulation of the environment with respect to each actor (e.g., with respect to each HIL, SIL, PIL, and AI actors), as well as hosting the rendering and management of the environment or world state (e.g., the road, signs, trees, foliage, sky, sun, lighting, etc.). In some examples, the simulator component(s) <b>402</b> may include a server(s) and associated components (e.g., CPU(s), GPU(s), computers, etc.) that may host a simulator (e.g., NVIDIA's DRIVE&#x2122; Constellation AV Simulator).</p><p id="p-0066" num="0065">The vehicle hardware <b>104</b>, as described herein, may correspond to the vehicle hardware <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> that may be used in the physical vehicle <b>102</b>. However, in the simulation system <b>400</b>A, the vehicle hardware <b>104</b> may be incorporated into the vehicle simulator component(s) <b>406</b>. As such, because the vehicle hardware <b>104</b> may be configured for installation within the vehicle <b>102</b>, the simulation system <b>400</b>A may be specifically configured to use the vehicle hardware <b>104</b> within a node (e.g., of a server platform) of the simulation system <b>400</b>A. For example, similar interfaces used in the physical vehicle <b>102</b> may need to be used by the vehicle simulator component(s) <b>406</b> to communicate with the vehicle hardware <b>104</b>. In some examples, the interfaces may include: (1) CAN interfaces, including a PCAN adapter, (2) Ethernet interfaces, including RAW UDP sockets with IP address, origin, VLA, and/or source IP all preserved, (3) Serial interfaces, with a USB to serial adapter, (4) camera interfaces, (5) InfiniBand (IB) interfaces, and/or other interface types.</p><p id="p-0067" num="0066">In any examples, once the sensor data representative of a field(s) of view of the sensor(s) of the vehicle in the simulated environment has been generated and/or processed (e.g., using one or more codecs, as described herein), the sensor data (and/or encoded sensor data) may be used by the software stack(s) <b>116</b> (e.g., the autonomous driving software stack) executed on the vehicle hardware <b>104</b> to perform one or more operations (e.g., generate one or more controls, route planning, detecting objects, identifying drivable free-space, monitoring the environment for obstacle avoidance, etc.). As a result, the identical, or substantially identical, hardware components used by the vehicle <b>102</b> (e.g., a physical vehicle) to execute the autonomous driving software stack in real-world environments may be used to execute the autonomous driving software stack in the simulated environment <b>410</b>. The use of the vehicle hardware <b>104</b> in the simulation system <b>400</b>A thus provides for a more accurate simulation of how the vehicle <b>102</b> will perform in real-world situations, scenarios, and environments without having to actually find and test the vehicle <b>102</b> in the real-world. This may reduce the amount of driving time required for testing the hardware/software combination used in the physical vehicle <b>102</b> and may reduce safety risks by not requiring actual real-world testing (especially for dangerous situations, such as other vehicles driving erratically or at unsafe speeds, children playing in the street, ice on a bridge, etc.).</p><p id="p-0068" num="0067">In addition to the vehicle hardware <b>104</b>, the vehicle simulator component(s) <b>406</b> may manage the simulation of the vehicle (or other object) using additional hardware, such as a computer&#x2014;e.g., an X86 box. In some examples, additional processing for virtual sensors of the virtual object may be executed using the vehicle simulation component(s) <b>406</b>. In such examples, at least some of the processing may be performed by the simulator component(s) <b>402</b>, and other of the processing may be executed by the vehicle simulator component(s) <b>406</b> (or <b>420</b>, or <b>422</b>, as described herein). In other examples, the processing of the virtual sensors may be executed entirely on the vehicle simulator component(s) <b>406</b>.</p><p id="p-0069" num="0068">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> is another example illustration of a simulation system <b>400</b>B, in accordance with some embodiments of the present disclosure. The simulation system <b>400</b>B may include the simulator component(s) <b>402</b> (as one or more compute nodes), the vehicle simulator component(s) <b>406</b> (as one or more compute nodes) for a HIL object(s), the vehicle simulator component(s) <b>420</b> (as one or more compute nodes) for a SIL object(s), the vehicle simulator component(s) <b>406</b> (as one or more compute nodes) for a PIL object(s), and/or additional component(s) (or compute nodes) for AI objects and/or other object types. Each of the PIL, HIL, SIL, AI, and/or other object type compute nodes may communicate with the simulator component(s) <b>402</b> to capture from the global simulation at least data that corresponds to the respective object within the simulate environment <b>410</b>.</p><p id="p-0070" num="0069">For example, the vehicle simulator component(s) <b>422</b> may receive (e.g., retrieve, obtain, etc.), from the global simulation (e.g., represented by the simulated environment <b>410</b>) hosted by the simulator component(s) <b>402</b>, data that corresponds to, is associated with, and/or is required by the vehicle simulator component(s) <b>422</b> to perform one or more operations by the vehicle simulator component(s) <b>422</b> for the PIL object. In such an example, data (e.g., virtual sensor data corresponding to a field(s) of view of virtual camera(s) of the virtual vehicle, virtual LIDAR data, virtual RADAR data, virtual location data, virtual IMU data, etc.) corresponding to each sensor of the PIL object may be received from the simulator component(s) <b>402</b>. This data may be used to generate an instance of the simulated environment corresponding to the field of view of a remote operator of the virtual vehicle controlled by the remote operator, and the portion of the simulated environment may be projected on a display (e.g., a display of a VR headset, a computer or television display, etc.) for assisting the remote operator in controlling the virtual vehicle through the simulated environment <b>410</b>. The controls generated or input by the remote operator using the vehicle simulator component(s) <b>422</b> may be transmitted to the simulator component(s) <b>402</b> for updating a state of the virtual vehicle within the simulated environment <b>410</b>.</p><p id="p-0071" num="0070">As another example, the vehicle simulator component(s) <b>420</b> may receive (e.g., retrieve, obtain, etc.), from the global simulation hosted by the simulator component(s) <b>402</b>, data that corresponds to, is associated with, and/or is required by the vehicle simulator component(s) <b>420</b> to perform one or more operations by the vehicle simulator component(s) <b>420</b> for the SIL object. In such an example, data (e.g., virtual sensor data corresponding to a field(s) of view of virtual camera(s) of the virtual vehicle, virtual LIDAR data, virtual RADAR data, virtual location data, virtual IMU data, etc.) corresponding to each sensor of the SIL object may be received from the simulator component(s) <b>402</b>. This data may be used to generate an instance of the simulated environment for each sensor (e.g., a first instance from a field of view of a first virtual camera of the virtual vehicle, a second instance from a field of view of a second virtual camera, a third instance from a field of view of a virtual LIDAR sensor, etc.). The instances of the simulated environment may thus be used to generate sensor data for each sensor by the vehicle simulator component(s) <b>420</b>. In some examples, the sensor data may be encoded using one or more codecs (e.g., each sensor may use its own codec, or each sensor type may use its own codec) in order to generate encoded sensor data that may be understood or familiar to an autonomous driving software stack simulated or emulated by the vehicle simulator component(s) <b>420</b>. For example, a first vehicle manufacturer may use a first type of LIDAR data, a second vehicle manufacturer may use a second type of LIDAR data, etc., and thus the codecs may customize the sensor data to the types of sensor data used by the manufacturers. As a result, the simulation system <b>400</b> may be universal, customizable, and/or useable by any number of different sensor types depending on the types of sensors and the corresponding data types used by different manufacturers. In any example, the sensor data and/or encoded sensor data may be used by an autonomous driving software stack to perform one or more operations (e.g., object detection, path planning, control determinations, actuation types, etc.). For example, the sensor data and/or encoded data may be used as inputs to one or more DNNs of the autonomous driving software stack, and the outputs of the one or more DNNs may be used for updating a state of the virtual vehicle within the simulated environment <b>410</b>. As such, the reliability and efficacy of the autonomous driving software stack, including one or more DNNs, may be tested, fine-tuned, verified, and/or validated within the simulated environment.</p><p id="p-0072" num="0071">In yet another example, the vehicle simulator component(s) <b>406</b> may receive (e.g., retrieve, obtain, etc.), from the global simulation hosted by the simulator component(s) <b>402</b>, data that corresponds to, is associated with, and/or is required by the vehicle simulator component(s) <b>406</b> to perform one or more operations by the vehicle simulator component(s) <b>406</b> for the HIL object. In such an example, data (e.g., virtual sensor data corresponding to a field(s) of view of virtual camera(s) of the virtual vehicle, virtual LIDAR data, virtual RADAR data, virtual location data, virtual IMU data, etc.) corresponding to each sensor of the HIL object may be received from the simulator component(s) <b>402</b>. This data may be used to generate an instance of the simulated environment for each sensor (e.g., a first instance from a field of view of a first virtual camera of the virtual vehicle, a second instance from a field of view of a second virtual camera, a third instance from a field of view of a virtual LIDAR sensor, etc.). The instances of the simulated environment may thus be used to generate sensor data for each sensor by the vehicle simulator component(s) <b>420</b>. In some examples, the sensor data may be encoded using one or more codecs (e.g., each sensor may use its own codec, or each sensor type may use its own codec) in order to generate encoded sensor data that may be understood or familiar to an autonomous driving software stack executing on the vehicle hardware <b>104</b> of the vehicle simulator component(s) <b>420</b>. Similar to the SIL object described herein, the sensor data and/or encoded sensor data may be used by an autonomous driving software stack to perform one or more operations (e.g., object detection, path planning, control determinations, actuation types, etc.).</p><p id="p-0073" num="0072">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>C</figref> is another example illustration of a simulation system <b>400</b>C, in accordance with some embodiments of the present disclosure. The simulation system <b>400</b>C may include distributed shared memory (DSM) system <b>242</b>, the simulator component(s) <b>402</b> (as one or more compute nodes), the vehicle simulator component(s) <b>406</b> (as one or more compute nodes) for a HIL object(s), the vehicle simulator component(s) <b>420</b> (as one or more compute nodes) for a SIL object(s), the vehicle simulator component(s) <b>406</b> (as one or more compute nodes) for a PIL object(s), and/or additional component(s) (or compute nodes) for AI objects and/or other object types (not shown). The simulation system <b>400</b>C may include any number of HIL objects (e.g., each including its own vehicle simulator component(s) <b>406</b>), any number of SIL objects (e.g., each including its own vehicle simulator component(s) <b>420</b>), any number of PIL objects (e.g., each including its own vehicle simulator component(s) <b>422</b>), and/or any number of AI objects (not shown, but may be hosted by the simulation component(s) <b>402</b> and/or separate compute nodes, depending on the embodiment).</p><p id="p-0074" num="0073">The vehicle simulator component(s) <b>406</b> may include one or more SoC(s) <b>1104</b> (or other components) that may be configured for installation and use within a physical vehicle. As such, as described herein, the simulation system <b>400</b>C may be configured to use the SoC(s) <b>1104</b> and/or other vehicle hardware <b>104</b> by using specific interfaces for communicating with the SoC(s) <b>1104</b> and/or other vehicle hardware. The vehicle simulator component(s) <b>420</b> may include one or more software instances <b>430</b> that may be hosted on one or more GPUs and/or CPUs to simulate or emulate the SoC(s) <b>1104</b>. The vehicle simulator component(s) <b>422</b> may include one or more SoC(s) <b>426</b>, one or more CPU(s) <b>428</b> (e.g., X86 boxes), and/or a combination thereof, in addition to the component(s) that may be used by the remote operator (e.g., keyboard, mouse, joystick, monitors, VR systems, steering wheel, pedals, in-vehicle components, such as light switches, blinkers, HMI display(s), etc., and/or other component(s)).</p><p id="p-0075" num="0074">The simulation component(s) <b>402</b> may include any number of CPU(s) <b>432</b> (e.g., X86 boxes), GPU(s), and/or a combination thereof. The CPU(s) <b>432</b> may host the simulation software for maintaining the global simulation, and the GPU(s) <b>434</b> may be used for rendering, physics, and/or other functionality for generating the simulated environment <b>410</b>.</p><p id="p-0076" num="0075">As described herein, the simulation system <b>400</b>C may include the DSM <b>424</b>. The DSM <b>424</b> may use one or more distributed shared memory protocols to maintain the state of the global simulation using the state of each of the objects (e.g., HIL objects, SIL objects, PIL objects, AI objects, etc.). As such, each of the compute nodes corresponding to the vehicle simulator component(s) <b>406</b>, <b>420</b>, and/or <b>422</b> may be in communication with the simulation component(s) <b>402</b> via the DSM <b>424</b>. By using the DSM <b>424</b> and the associated protocols, real-time simulation may be possible. For example, as opposed to how network protocols (e.g., TCP, UDP, etc.) are used in massive multiplayer online (MMO) games, the simulation system <b>400</b> may use a distributed shared memory protocol to maintain the state of the global simulation and each instance of the simulation (e.g., by each vehicle, object, and/or sensor) in real-time.</p><p id="p-0077" num="0076">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>D</figref> is an example illustration of a hardware-in-the-loop configuration, in accordance with some embodiments of the present disclosure. The vehicle simulator component(s) <b>406</b> may include the vehicle hardware <b>104</b>, as described herein, and may include one or more computer(s) <b>436</b>, one or more GPU(s) (not shown), and/or one or more CPU(s) (not shown). The computer(s) <b>436</b>, GPU(s), and/or CPU(s) may manage or host the simulation software <b>438</b>, or instance thereof, executing on the vehicle simulator component(s) <b>406</b>. The vehicle hardware <b>104</b> may execute the software stack(s) <b>116</b> (e.g., an autonomous driving software stack, an IX software stack, etc.).</p><p id="p-0078" num="0077">As described herein, by using the vehicle hardware <b>104</b>, the other vehicle simulator component(s) <b>406</b> within the simulation environment <b>400</b> may need to be configured for communication with the vehicle hardware <b>104</b>. For example, because the vehicle hardware <b>104</b> may be configured for installation within a physical vehicle (e.g., the vehicle <b>102</b>), the vehicle hardware <b>104</b> may be configured to communicate over one or more connection types and/or communication protocols that are not standard in computing environments (e.g., in server-based platforms, in general-purpose computers, etc.). For example, a CAN interface, LVDS interface, USB interface, Ethernet interface, InfiniBand (IB) interface, and/or other interfaces may be used by the vehicle hardware <b>104</b> to communicate signals with other components of the physical vehicle. As such, in the simulation system <b>400</b>, the vehicle simulator component(s) <b>406</b> (and/or other component(s) of the simulation system <b>400</b> in addition to, or alternative from, the vehicle simulator component(s) <b>406</b>) may need to be configured for use with the vehicle hardware <b>104</b>. In order to accomplish this, one or more CAN interfaces, LVDS interfaces, USB interfaces, Ethernet interfaces, and/or other interface may be used to provide for communication (e.g., over one or more communication protocols, such as LVDS) between vehicle hardware <b>104</b> and the other component(s) of the simulation system <b>400</b>.</p><p id="p-0079" num="0078">In some examples, the virtual vehicle that may correspond to the vehicle simulator component(s) <b>406</b> within the simulation system <b>400</b> may be modeled as a game object within an instance of a game engine. In addition, each of the virtual sensors of the virtual vehicle may be interfaced using sockets within the virtual vehicle's software stack(s) <b>116</b> executed on the vehicle hardware <b>104</b>. In some examples, each of the virtual sensors of the virtual vehicle may include an instance of the game engine, in addition to the instance of the game engine associated with the simulation software <b>438</b> for the virtual vehicle. In examples where the vehicle simulator component(s) <b>406</b> include a plurality of GPUs, each of the sensors may be executed on a single GPU. In other examples, multiple sensors may be executed on a single GPU, or at least as many sensors as feasible to ensure real-time generation of the virtual sensor data.</p><p id="p-0080" num="0079">Using HIL objects in the simulator system <b>400</b> may provide for a scalable solution that may simulate or emulate various driving conditions for autonomous software and hardware systems (e.g., NVIDIA's DRIVE AGX Pegasus&#x2122; compute platform and/or DRIVE PX Xavier&#x2122; compute platform). Some benefits of HIL objects may include the ability to test DNNs faster than real-time, the ability to scale verification with computing resources (e.g., rather than vehicles or test tracks), the ability to perform deterministic regression testing (e.g., the real-world environment is never the same twice, but a simulated environment can be), optimal ground truth labeling (e.g., no hand-labeling required), the ability to test scenarios difficult to produce in the real-world, rapid generation of test permutations, and the ability to test a larger space of permutations in simulation as compared to real-world.</p><p id="p-0081" num="0080">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>E</figref> is an example illustration of a hardware-in-the-loop configuration, in accordance with some embodiments of the present disclosure. The HIL configuration of <figref idref="DRAWINGS">FIG. <b>4</b>E</figref> may include vehicle simulator component(s) <b>406</b>, including the SoC(s) <b>1104</b>, a chassis fan(s) <b>456</b> and/or water-cooling system. The HIL configuration may include a two-box solution (e.g., the simulator component(s) <b>402</b> in a first box and the vehicle simulator component(s) <b>406</b> in a second box). Using this approach may reduce the amount of space the system occupies as well as reduce the number of external cables in data centers (e.g., by including multiple components together with the SoC(s) <b>1104</b> in the vehicle simulator component(s) <b>406</b>&#x2014;e.g., the first box). The vehicle simulator component(s) <b>406</b> may include one or more GPUs <b>452</b> (e.g., NVIDIA QUADRO GPU(s)) that may provide, in an example, non-limiting embodiment, 8 DP/HDMI video streams that may be synchronized using sync component(s) <b>454</b> (e.g., through a QUADRO Sync II Card). These GPU(s) <b>452</b> (and/or other GPU types) may provide the sensor input to the SoC(s) <b>1104</b> (e.g., to the vehicle hardware <b>104</b>). In some examples, the vehicle simulator component(s) <b>406</b> may include a network interface (e.g., one or more network interface cards (NICs) <b>450</b>) that may simulate or emulate RADAR sensors, LIDAR sensors, and/or IMU sensors (e.g., by providing 8 Gigabit ports with precision time protocol (PTP) support). In addition, the vehicle simulator component(s) <b>406</b> may include an input/output (I/O) analog integrated circuit. Registered Jack (RJ) interfaces (e.g., RJ45), high speed data (HSD) interfaces, USB interfaces, pulse per second (PPS) clocks, Ethernet (e.g., 10 Gb Ethernet (GbE)) interfaces, CAN interfaces, HDMI interfaces, and/or other interface types may be used to effectively transmit and communication data between and among the various component(s) of the system.</p><p id="p-0082" num="0081">Now referring to <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>F</figref> is an example illustration of a software-in-the-loop configuration, in accordance with some embodiments of the present disclosure. The vehicle simulator component(s) <b>420</b> may include computer(s) <b>440</b>, GPU(s) (not shown), CPU(s) (not shown), and/or other components. The computer(s) <b>440</b>, GPU(s), and/or CPU(s) may manage or host the simulation software <b>438</b>, or instance thereof, executing on the vehicle simulator component(s) <b>420</b>, and may host the software stack(s) <b>116</b>. For example, the vehicle simulator component(s) <b>420</b> may simulate or emulate, using software, the vehicle hardware <b>104</b> in an effort to execute the software stack(s) <b>116</b> as accurately as possible.</p><p id="p-0083" num="0082">In order to increase accuracy in SIL embodiments, the vehicle simulator component(s) <b>420</b> may be configured to communicate over one or more virtual connection types and/or communication protocols that are not standard in computing environments. For example, a virtual CAN interface, virtual LVDS interface, virtual USB interface, virtual Ethernet interface, and/or other virtual interfaces may be used by the computer(s) <b>440</b>, CPU(s), and/or GPU(s) of the vehicle simulator component(s) <b>420</b> to provide for communication (e.g., over one or more communication protocols, such as LVDS) between the software stack(s) <b>116</b> and the simulation software <b>438</b> within the simulation system <b>400</b>. For example, the virtual interfaces may include middleware that may be used to provide a continuous feedback loop with the software stack(s) <b>116</b>. As such, the virtual interfaces may simulate or emulate the communications between the vehicle hardware <b>104</b> and the physical vehicle using one or more software protocols, hardware (e.g., CPU(s), GPU(s), computer(s) <b>440</b>, etc.), or a combination thereof.</p><p id="p-0084" num="0083">The computer(s) <b>440</b> in some examples, may include X86 CPU hardware, and one or more X86 CPUs may execute both the simulation software <b>438</b> and the software stack(s) <b>116</b>. In other examples, the computer(s) <b>440</b> may include GPU hardware (e.g., an NVIDIA DGX system and/or cloud-based NVIDIA Tesla servers).</p><p id="p-0085" num="0084">In some examples, the virtual vehicle that may correspond to the vehicle simulator component(s) <b>420</b> within the simulation system <b>400</b> may be modeled as a game object within an instance of a game engine. In addition, each of the virtual sensors of the virtual vehicle may be interfaced using sockets within the virtual vehicle's software stack(s) <b>116</b> executed on the vehicle simulator component(s) <b>420</b>. In some examples, each of the virtual sensors of the virtual vehicle may include an instance of the game engine, in addition to the instance of the game engine associated with the simulation software <b>438</b> for the virtual vehicle. In examples where the vehicle simulator component(s) <b>406</b> include a plurality of GPUs, each of the sensors may be executed on a single GPU. In other examples, multiple sensors may be executed on a single GPU, or at least as many sensors as feasible to ensure real-time generation of the virtual sensor data.</p><p id="p-0086" num="0085">Now referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, each block of method <b>500</b>, described herein, comprises a computing process that may be performed using any combination of hardware, firmware, and/or software. For instance, various functions may be carried out by a processor executing instructions stored in memory. The method may also be embodied as computer-usable instructions stored on computer storage media. The method may be provided by a standalone application, a service or hosted service (standalone or in combination with another hosted service), or a plug-in to another product, to name a few. In addition, method <b>500</b> is described, by way of example, with respect to the simulation system <b>400</b> of <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>C</figref>. However, the method may additionally or alternatively be executed by any one system, or any combination of systems, including, but not limited to, those described herein.</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flow diagram showing a method <b>500</b> for generating a simulated environment using a hardware-in-the-loop object, in accordance with some embodiments of the present disclosure. The method <b>500</b>, at block B<b>502</b>, includes transmitting, from a first hardware component to a second hardware component, simulation data. For example, simulation component(s) <b>402</b> may transmit simulation data to one or more of the vehicle simulator component(s) <b>406</b>, the vehicle simulator component(s) <b>420</b>, and/or the vehicle simulator component(s) <b>422</b>. In some examples, the simulation data may be representative of at least a portion of the simulated environment <b>410</b> hosted by the simulation component(s) <b>402</b>, and may correspond to the simulated environment <b>410</b> with respect to at least one virtual sensor of a virtual object (e.g., a HIL object, a SIL object, a PIL object, and/or an AI object). In an example where the virtual sensor is a virtual camera, the simulation data may correspond to at least the data from the simulation necessary to generate a field of view of the virtual camera within the simulated environment <b>410</b>.</p><p id="p-0088" num="0087">The method <b>500</b>, at block B<b>504</b>, includes receiving a signal by the first hardware component and from the second hardware component. For example, the simulator component(s) <b>402</b> may receive a signal from one of the vehicle simulator component(s) <b>406</b>, the vehicle simulator component(s) <b>420</b>, and/or the vehicle simulator component(s) <b>422</b>. The signal may be representative of an operation (e.g., control, path planning, object detection, etc.) corresponding to a virtual object (e.g., a HIL object, a SIL object, a PIL object, and/or an AI object) as determined by a software stack(s) <b>116</b>. In some examples, such as where the virtual object is a HIL object, the signal (or data represented thereby) may be transmitted from the vehicle hardware <b>104</b> to one or more other vehicle simulator component(s) <b>406</b>, and then the vehicle simulator component(s) <b>406</b> may transmit the signal to the simulator component(s) <b>402</b>. In such examples, the signals between the vehicle simulator component(s) <b>406</b> (e.g., between the vehicle hardware <b>104</b> and one or more GPU(s), CPU(s), and/or computer(s) <b>436</b>) may be transmitted via a CAN interface, a USB interface, an LVDS interface, an Ethernet interface, and/or another interface. In another example, such as where the virtual object is a SIL object, the signal (or data represented thereby) may be transmitted from the vehicle simulator component(s) <b>420</b> to the simulator component(s) <b>402</b>, where the data included in the signal may be generated by the software stack(s) <b>116</b> executing on simulated or emulated vehicle hardware <b>104</b>. In such examples, the vehicle simulator component(s) <b>420</b> may use a virtual CAN, a virtual LVDS interface, a virtual USB interface, a virtual Ethernet interface, and/or other virtual interfaces.</p><p id="p-0089" num="0088">The method <b>500</b>, at block B<b>506</b>, includes updating, by the first hardware component, one or more attributes of a virtual object within a simulated environment. For example, based at least in part on the signal received from the vehicle simulator component(s) <b>406</b>, the vehicle simulator component(s) <b>420</b>, and/or the vehicle simulator component(s) <b>422</b>, the simulator component(s) <b>402</b> may update the global simulation (and the simulated environment may be updated accordingly). In some examples, the data represented by the signal may be used to update a location, orientation, speed, and/or other attributes of the virtual object hosted by the vehicle simulator component(s) <b>406</b>, the vehicle simulator component(s) <b>420</b>, and/or the vehicle simulator component(s) <b>422</b>.</p><p id="p-0090" num="0089">Now referring to <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>A</figref> is an example illustration of a simulation system <b>600</b> at runtime, in accordance with some embodiments of the present disclosure. Some or all of the components of the simulation system <b>600</b> may be used in the simulation system <b>400</b>, and some or all of the components of the simulation system <b>400</b> may be used in the simulation system <b>600</b>. As such, components, features, and/or functionality described with respect to the simulation system <b>400</b> may be associated with the simulation system <b>600</b>, and vice versa. In addition, each of the simulation systems <b>600</b>A and <b>600</b>B (<figref idref="DRAWINGS">FIG. <b>6</b>B</figref>) may include similar and/or shared components, features, and/or functionality.</p><p id="p-0091" num="0090">The simulation system <b>600</b>A (e.g., representing one example of simulation system <b>600</b>) may include the simulator component(s) <b>402</b>, codec(s) <b>614</b>, content data store(s) <b>602</b>, scenario data store(s) <b>604</b>, vehicle simulator component(s) <b>420</b> (e.g., for a SIL object), and vehicle simulator component(s) <b>406</b> (e.g., for a HIL object). The content data store(s) <b>602</b> may include detailed content information for modeling cars, trucks, people, bicyclists, signs, buildings, trees, curbs, and/or other features of the simulated environment. The scenario data store(s) <b>604</b> may include scenario information that may include dangerous scenario information (e.g., that is unsafe to test in the real-world environment), such as a child in an intersection.</p><p id="p-0092" num="0091">The simulator component(s) <b>402</b> may include an AI engine <b>608</b> that simulates traffic, pedestrians, weather, and/or other AI features of the simulated environment. The simulator component(s) <b>402</b> may include a virtual world manager <b>610</b> that manages the world state for the global simulation. The simulator component(s) <b>402</b> may further include a virtual sensor manger <b>612</b> that may mange the virtual sensors. The AI engine <b>608</b> may model traffic similar to how traffic is modeled in an automotive video game, and may be done using a game engine, as described herein. In other examples, custom AI may be used to provide the determinism and computational level of detail necessary for large-scale reproducible automotive simulation. In some examples, traffic may be modeled using SIL objects, HIL objects, PIL objects, AI objects, and/or combination thereof. The system <b>600</b> may create a subclass of an AI controller that examines map data, computes a route, and drives the route while avoiding other cars. The AI controller may compute desired steering, acceleration, and/or braking, and may apply those values to the virtual objects. The vehicle properties used may include mass, max RPM, torque curves, and/or other properties. A physics engine may be used to determine states of AI objects. As described herein, for vehicles or other objects that may be far away and may not have an impact on a current sensor(s), the system may choose not to apply physics for those objects and only determine locations and/or instantaneous motion vectors. Ray-casting may be used for each wheel to ensure that the wheels of the vehicles are in contact. In some examples, traffic AI may operate according to a script (e.g., rules-based traffic). Traffic AI maneuvers for virtual objects may include lateral lane changes (e.g., direction, distance, duration, shape, etc.), longitudinal movement (e.g., matching speed, relative target, delta to target, absolute value), route following, and/or path following. The triggers for the traffic AI maneuvers may be time-based (e.g., three seconds), velocity-based (e.g., at sixty mph), proximity-based to map (e.g., within twenty feet of intersection), proximity-based to actor (e.g., within twenty feet of another object), lane clear, and/or others.</p><p id="p-0093" num="0092">The AI engine <b>608</b> may model pedestrian AI similar to traffic AI, described herein, but for pedestrians. The pedestrians may be modeled similar to real pedestrians, and the system <b>600</b> may infer pedestrian conduct based on learned behaviors.</p><p id="p-0094" num="0093">The simulator component(s) <b>402</b> may be used to adjust the time of day such that street lights turn on and off, headlights turn on and off, shadows, glares, and/or sunsets are considered, etc. In some examples, only lights within a threshold distance to the virtual object may be considered to increase efficiency.</p><p id="p-0095" num="0094">Weather may be accounted for by the simulator component(s) <b>402</b> (e.g., by the virtual world manager <b>610</b>). The weather may be used to update the coefficients of friction for the driving surfaces, and temperature information may be used to update tire interaction with the driving surfaces. Where rain or snow are present, the system <b>600</b> may generate meshes to describe where rainwater and snow may accumulate based on the structure of the scene, and the meshes may be employed when rain or snow are present in the simulation.</p><p id="p-0096" num="0095">In some examples, as described herein, at least some of the simulator component(s) <b>402</b> may alternatively be included in the vehicle simulator component(s) <b>420</b> and/or <b>406</b>. For example, the vehicle simulator component(s) <b>420</b> and/or the vehicle simulator component(s) <b>406</b> may include the virtual sensor manager <b>612</b> for managing each of the sensors of the associated virtual object. In addition, one or more of the codecs <b>614</b> may be included in the vehicle simulator component(s) <b>420</b> and/or the vehicle simulator component(s) <b>406</b>. In such examples, the virtual sensor manager <b>612</b> may generate sensor data corresponding to a sensor of the virtual object, and the sensor data may be used by sensor emulator <b>616</b> of the codec(s) <b>614</b> to encode the sensor data according to the sensor data format or type used by the software stack(s) <b>116</b> (e.g., the software stack(s) <b>116</b> executing on the vehicle simulator component(s) <b>420</b> and/or the vehicle simulator component(s) <b>406</b>).</p><p id="p-0097" num="0096">The codec(s) <b>614</b> may provide an interface to the software stack(s) <b>116</b>. The codec(s) <b>614</b> (and/or other codec(s) described herein) may include an encoder/decoder framework. The codec(s) <b>614</b> may include CAN steering, throttle requests, and/or may be used to send sensor data to the software stack(s) <b>116</b> in SIL and HIL embodiments. The codec(s) <b>614</b> may be beneficial to the simulation systems described herein (e.g., <b>400</b> and <b>600</b>). For example, as data is produced by the re-simulation systems <b>100</b> and the simulation systems <b>400</b> and <b>600</b>, the data may be transmitted to the software stack(s) <b>116</b> such that the following standards may be met. The data may be transferred to the software stack(s) <b>116</b> such that minimal impact is introduced to the software stack(s) <b>116</b> and/or the vehicle hardware <b>104</b> (in HIL embodiments). This may result in more accurate simulations as the software stack(s) <b>116</b> and/or the vehicle hardware <b>104</b> may be operating in an environment that closely resembles deployment in a real-world environment. The data may be transmitted to the software stack(s) <b>116</b> such that the simulator and/or re-simulator may be agnostic to the actual hardware configuration of the system under test. This may reduce development overhead due to bugs or separate code paths depending on the simulation configuration. The data may be transmitted to the software stack(s) <b>116</b> such that the data may match (e.g., bit-to-bit) the data sent from a physical sensor of a physical vehicle (e.g., the vehicle <b>102</b>). The data may be transmitted to efficiently in both SIL and HIL embodiments.</p><p id="p-0098" num="0097">The sensor emulator <b>616</b> may emulate at least cameras, LIDAR sensors, and/or RADAR sensors. With respect to LIDAR sensors, some LIDAR sensors report tracked objects. As such, for each frame represented by the virtual sensor data, the simulator component(s) <b>402</b> may create a list of all tracked objects (e.g., trees, vehicles, pedestrians, foliage, etc.) within range of the virtual object having the virtual LIDAR sensors, and may cast virtual rays toward the tracked objects. When a significant number of rays strike a tracked object, that object may be added to the report of the LIDAR data. In some examples, the LIDAR sensors may be modeled using simple ray-casting without reflection, adjustable field of view, adjustable noise, and/or adjustable drop-outs. LIDAR with moving parts, limited fields of view, and/or variable resolutions may be simulated. For example, the LIDAR sensors may be modeled as solid state LIDAR and/or as Optix-based LIDAR. In examples, using Optix-based LIDAR, the rays may bounce from water, reflective materials, and/or windows. Texture may be assigned to roads, signs, and/or vehicles to model laser reflection at the wavelengths corresponding to the textures. RADAR may be implemented similarly to LIDAR. As described herein, RADAR and/or LIDAR may be simulated using ray-tracing techniques.</p><p id="p-0099" num="0098">In some examples, the vehicle simulator component(s) <b>406</b>, <b>420</b>, and/or <b>422</b> may include a feedback loop with the simulator component(s) <b>402</b> (and/or the component(s) that generate the virtual sensor data). The feedback loop may be used to provide information for updating the virtual sensor data capture or generation. For example, for virtual cameras, the feedback loop may be based on sensor feedback, such as changes to exposure responsive to lighting conditions (e.g., increase exposure in dim lighting conditions so that the image data may be processed by the DNNs properly). As another example, for virtual LIDAR sensors, the feedback loop may be representative of changes to energy level (e.g., to boost energy to produce more useable or accurate LIDAR data).</p><p id="p-0100" num="0099">GNNS sensors (e.g., GPS sensors) may be simulated within the simulation space to generate real-world coordinates. In order to this, noise functions may be used to approximate inaccuracy. As with any virtual sensors described herein, the virtual sensor data may be transmitted to the software stack(s) <b>116</b> using the codec(s) <b>614</b> to be converted to a bit-to-bit correct signal (e.g., corresponding accurately to the signals generated by the physical sensors of the physical vehicles).</p><p id="p-0101" num="0100">One or more plugin application programming interfaces (APIs) <b>606</b> may be used. The plugin APIs <b>606</b> may include first-party and/or third-party plugins. For example, third parties may customize the simulation system <b>600</b>B using their own plugin APIs <b>606</b> for providing custom information, such as performance timings, suspension dynamics, tire dynamics, etc.</p><p id="p-0102" num="0101">The plugin APIs <b>606</b> may include an ego-dynamics component(s) (not shown) that may receive information from the simulator component(s) <b>402</b> including position, velocity, car state, and/or other information, and may provide information to the simulator component(s) <b>402</b> including performance timings, suspension dynamics, tire dynamics, and/or other information. For examples, the simulator component(s) <b>402</b> may provide CAN throttle, steering, and the driving surface information to the ego-dynamics component(s). In some examples, the ego-dynamics component(s) may include an off-the-shelf vehicle dynamics package (e.g., IPG CARMAKER or VIRTUAL TEST DRIVE), while in other examples the ego-dynamics component(s) may be customized and/or received (e.g., from a first-party and/or a third-party).</p><p id="p-0103" num="0102">The plugin APIs <b>606</b> may include a key performance indicator (KPI) API. The KPI API may receive CAN data, ground truth, and/or virtual object state information (e.g., from the software stack(s) <b>116</b>) from the simulator component(s) <b>402</b> and may generate and/or provide a report (in real-time) that includes KPI's and/or commands to save state, restore state, and/or apply changes.</p><p id="p-0104" num="0103">Now referring to <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> includes a cloud-based architecture for a simulation system <b>600</b>B, in accordance with some embodiment of the present disclosure. The simulation system <b>600</b>B may, at least partly, reside in the cloud and may communicate over one or more networks, such as but not limited to those described herein (e.g., with respect to network <b>1190</b> of <figref idref="DRAWINGS">FIG. <b>1</b>D</figref>), with one or more GPU platforms <b>624</b> (e.g., that may include GPUs, CPUs, TPUS, and/or other processor types) and/or one or more HIL platforms <b>626</b> (e.g., which may include some or all of the components from the vehicle simulator component(s) <b>406</b>, described herein).</p><p id="p-0105" num="0104">A simulated environment <b>628</b> (e.g., which may be similar to the simulated environment <b>410</b> described herein) may be modeled by interconnected components including a simulation engine <b>630</b>, an AI engine <b>632</b>, a global illumination (GI) engine <b>634</b>, an asset data store(s) <b>636</b>, and/or other components. In some examples, these component(s) may be used to model a simulated environment (e.g., a virtual world) in a virtualized interactive platform (e.g., similar to a massive multiplayer online (MMO) game environment. The simulated environment may further include physics, traffic simulation, weather simulation, and/or other features and simulations for the simulated environment. GI engine <b>634</b> may calculate GI once and share the calculation with each of the nodes <b>618</b>(<b>1</b>)-<b>618</b>(N) and <b>620</b>(<b>1</b>)-<b>620</b>(N) (e.g., the calculation of GI may be view independent). The simulated environment <b>628</b> may include an AI universe <b>622</b> that provides data to GPU platforms <b>624</b> (e.g., GPU servers) that may create renderings for each sensor of the vehicle (e.g., at the virtual sensor/codec(s) <b>618</b> for a first virtual object and at the virtual sensor codec(s) <b>620</b> for a second virtual object). For example, the GPU platform <b>624</b> may receive data about the simulated environment <b>628</b> and may create sensor inputs for each of <b>618</b>(<b>1</b>)-<b>618</b>(N), <b>620</b>(<b>1</b>)-<b>620</b>(N), and/or virtual sensor/codec pairs corresponding to other virtual objects (depending on the embodiment). In examples where the virtual objects are simulated using HIL objects, the sensor inputs may be provided to the vehicle hardware <b>104</b> which may use the software stack(s) <b>116</b> to perform one or more operations and/or generate one or more commands, such as those described herein. In some examples, as described herein, the virtual sensor data from each of the virtual sensors may be encoded using a codec prior to being used by (or transmitted to) the software stack(s) <b>116</b>. In addition, in some examples, each of the sensors may be executed on its own GPU within the GPU platform <b>624</b>, while in other examples, two or more sensors may share the same GPU within the GPU platform <b>624</b>.</p><p id="p-0106" num="0105">The one or more operations or commands may be transmitted to the simulation engine <b>630</b> which may update the behavior of one or more of the virtual objects based on the operations and/or commands. For example, the simulation engine <b>630</b> may use the AI engine <b>632</b> to update the behavior of the AI agents as well as the virtual objects in the simulated environment <b>628</b>. The simulation engine <b>630</b> may then update the object data and characteristics (e.g., within the asset data store(s) <b>636</b>), may update the GI (and/or other aspects such as reflections, shadows, etc.), and then may generate and provide updated sensor inputs to the GPU platform <b>624</b>. This process may repeat until a simulation is completed.</p><p id="p-0107" num="0106">Now referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, <figref idref="DRAWINGS">FIG. <b>7</b></figref> includes a data flow diagram illustrating a process <b>700</b> for re-simulation or simulation using one or more codecs, in accordance with some embodiments of the present disclosure. The process <b>700</b> may include a current state and/or sensor data be transmitted from the simulation and/or re-simulation to one or more codecs <b>704</b>. At least some of the data (e.g., the sensor data) may then be encoded using the codec(s) <b>704</b> and provided to the software stack(s) <b>706</b> (e.g., similar to the software stack(s) <b>116</b>) for a current time slice. The driving commands and new sensor state may then transmitted (e.g., via CAN or V-CAN) to the codec(s) <b>704</b> and back to the simulation and/or re-simulation. The driving commands generated originally by the software stack(s) <b>706</b> (e.g., by an autonomous driving software stack) may then be passed to ego-object dynamics which may use custom or built-in dynamics to update the object state for the particular type of virtual object being simulated and the updated object state may be passed back to the simulation and/or re-simulation. The simulation system may use the object's state, commands, and/or information, in addition to using traffic AI, pedestrian AI, and/or other features of the simulation platform, to generate or update the simulated environment (e.g., to a current state). The current state may be passed to the KPI framework (e.g., at the same time as the driving commands being passed to the ego-object dynamics <b>708</b>, in some embodiments), and the KPI framework <b>710</b> may monitor and evaluate the current simulation and/or re-simulation. In some examples, the codec(s) <b>704</b> may buffer simulation data to increase performance and/or reduce latency of the system.</p><p id="p-0108" num="0107">Now referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes a data flow diagram for key performance indicator (KPI) analysis and observation, in accordance with some embodiments of the present disclosure. A KPI evaluation component may evaluate the performance of the virtual object(s) (e.g., vehicles, robots, etc.). Logs <b>806</b> may be generated and passed to re-simulator/simulator <b>804</b>. The re-simulator/simulator <b>804</b> may provide sensor data to the software stack(s) <b>116</b> which may be executed using HIL, SIL, or a combination thereof. The KPI evaluation component <b>802</b> may use different metrics for each simulation or re-simulation instance. For examples, for re-simulation, KPI evaluation component may provide access to the original re-played CAN data and/or the newly generated CAN data from the software stack(s) <b>116</b> (e.g., from HIL or SIL). In some examples, performance could be as simple as testing that the new CAN data does not create a false positive&#x2014;such as by triggering Automatic Emergency Braking (AEB), or another ADAS functionality. For example, the KPI evaluation component <b>802</b> may determine whether the new CAN data triggers a blind spot warning, or a lane departure warning. As a result, the system may help reduce the false positives that plague conventional ADAS systems. The KPI evaluation component <b>802</b> may also determine whether the new CAN data fails to trigger a warning that should have been implemented.</p><p id="p-0109" num="0108">In some examples, the KPI evaluation component <b>802</b> may also provide for more complex comparisons. For example, the KPI evaluation component <b>802</b> may be as complex as running analytics on the two differing CAN streams to find deviations. The KPI evaluation component <b>802</b> may compare the new CAN data against the original CAN data, and may evaluate both trajectories to determine which trajectory would best meet the systems safety goals. In some examples, the KPI evaluation component <b>802</b> may use one or more methods described in U.S. Provisional Application No. 62/625,351, or U.S. Non-Provisional patent application Ser. No. 16/256,780, each hereby incorporated by reference in its entirety. In other examples, the KPI Evaluation component <b>802</b> may use one or of the methods described in U.S. Provisional Application No. 62/628,831, or U.S. Non-Provisional patent application Ser. No. 16/269,921, each hereby incorporated by reference in its entirety. For example, safety procedures may be determined based on safe time of arrival calculations.</p><p id="p-0110" num="0109">In some examples, the KPI evaluation component <b>802</b> may also use the method described in U.S. Provisional Application No. 62/622,538 or U.S. Non-Provisional patent application Ser. No. 16/258,272, hereby incorporated by reference in its entirety, which may be used to detect hazardous driving using machine learning. For example, machine learning and deep neural networks (DNNs) may be used for redundancy and for path checking e.g., for a rationality checker as part of functional safety for autonomous driving. These techniques may be extended for use with the KPI evaluation component <b>802</b> to evaluate the performance of the system.</p><p id="p-0111" num="0110">The KPI Evaluation component may also use additional approaches to assess the performance of the system. For example, the KPI evaluation component <b>802</b> may consider whether the time to arrival (TTA) in the path of the cross-traffic is less than a threshold time&#x2014;e.g. two seconds. The threshold may vary depending on the speed of the vehicle, road conditions, weather, traffic, and/or other variables. For example, the threshold duration may be two seconds for speeds up to twenty MPH, and one second for any greater speed. Alternatively, the threshold duration may be reduced or capped whenever the system detects hazardous road conditions such as wet roads, ice, or snow. In some examples, hazardous road conditions may be detected by a DNN trained to detect such conditions.</p><p id="p-0112" num="0111">With respect to simulation, the KPI evaluation component may include an API, as described herein. The KPI evaluation component <b>802</b> may include additional inputs and/or provide more functionality. For example, the simulator may be able to share the &#x201c;ground truth&#x201d; for the scene, and may be able to determine the capability of the virtual object with respect to avoiding collisions, staying-in-lane, and/or performing other behaviors. For examples, the KPI evaluation component <b>802</b> may be more than a passive witness to the experiment, and may include an API to save the state of any ongoing simulation, change state or trigger behaviors, and continue with those changes. This may allow the KPI evaluation component to not only evaluate the car performance but to try to explore the space of potential dangerous scenarios.</p><p id="p-0113" num="0112">Now referring to <figref idref="DRAWINGS">FIGS. <b>9</b> and <b>10</b></figref>, each block of methods <b>900</b> and <b>1000</b>, described herein, comprises a computing process that may be performed using any combination of hardware, firmware, and/or software. For instance, various functions may be carried out by a processor executing instructions stored in memory. The methods may also be embodied as computer-usable instructions stored on computer storage media. The methods may be provided by a standalone application, a service or hosted service (standalone or in combination with another hosted service), or a plug-in to another product, to name a few. In addition, methods <b>900</b> and <b>1000</b> are described, by way of example, with respect to the re-simulation system <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the simulation system <b>400</b> of <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>C</figref>, and the simulation system <b>600</b> of <figref idref="DRAWINGS">FIGS. <b>6</b>A-<b>6</b>B</figref>. However, these methods may additionally or alternatively be executed by any one system, or any combination of systems, including, but not limited to, those described herein.</p><p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flow diagram showing a method <b>900</b> for controlling a virtual object in a simulated environment, in accordance with some embodiments of the present disclosure. The method <b>900</b>, at block B<b>902</b>, includes receiving simulation data representative of a simulated environment from a simulation host device. For example, the vehicle simulator component(s) <b>406</b>, <b>420</b>, and/or <b>422</b> may receive, from the simulator component(s) <b>402</b>, simulation data representative of the simulated environment <b>410</b>. In some examples, the simulation data received may be the simulation data corresponding to the sensors of the virtual object hosted by the vehicle simulator component(s).</p><p id="p-0115" num="0114">The method <b>900</b>, at block B<b>904</b>, includes generating virtual sensor data for each of a dynamically configurable number of virtual sensors. For example, the vehicle simulator component(s) <b>406</b>, <b>420</b>, and/or <b>422</b> may generate virtual sensor data using the simulation data for each of the virtual sensors of the vehicle. The virtual sensor data may be representative of the simulated environment <b>410</b> as perceived by at least one virtual sensor of a dynamically configurable number of virtual sensors of a virtual object within the simulated environment <b>410</b> (e.g., sensor data of a field of view of a virtual camera(s), sensor data of an orientation of the virtual vehicle using virtual IMU sensors, etc.). The number of virtual sensors used may be dynamically configurable such that one sensor may be used in a first simulation, five in another, ten in another, etc. In some examples, the dynamic configuration may be determined based on vehicle types (e.g., a first vehicle of year X, make Y, model Z may include 20 sensors, while a second vehicle of year A, make B, model C may include 30 sensors). In such examples, the simulation system <b>400</b>, <b>600</b> may be dynamically configurable to generate virtual sensor data for each of the virtual sensors of each, or any vehicle in the simulated environment. In addition, any number of different virtual objects may be simulated within the simulated environment at any one time. As such, for each of a first virtual object (e.g., executing on a first set of vehicle simulator component(s) <b>406</b>), a second virtual object (e.g., executing on a second set of vehicle simulator component(s) <b>420</b>), and/or any other virtual objects, a same or different number of virtual sensors and/or type of virtual sensors may generate virtual sensor data. The virtual sensor data for each virtual sensor may be representative of any other virtual objects as perceived by the respective virtual sensor. As such, the simulation system <b>400</b>, <b>600</b> (e.g., using the DSM <b>424</b>) may generate virtual sensor data for each of the virtual sensors that reflects the simulation state of the simulated environment with respect to each other virtual object. In this way, the simulation system is scalable and configurable to any number of virtual objects each having any number of virtual sensors that may each be processed in real-time.</p><p id="p-0116" num="0115">The method <b>900</b>, at block B<b>906</b>, includes encoding the virtual sensor data. For example, the virtual sensor data may be encoded using one or more codecs (e.g., codec(s) <b>614</b>) to generate encoded sensor data. In some examples, the virtual sensor data may be encoded to a format that is familiar to the software stack(s) <b>116</b> of the virtual object.</p><p id="p-0117" num="0116">The method <b>900</b>, at block B<b>908</b>, includes computing, by one or more machine learning models, at least one output. For example, one or more DNNs of the software stack(s) <b>116</b> may uses the encoded sensor data to generate one or more outputs (e.g., objects detections, controls, actuations, path plans, guidance, etc.). In some examples, as described herein, the software stack(s) <b>116</b> may be executed on the vehicle hardware <b>104</b> (e.g., for HIL objects), so the software and hardware used in the physical vehicle (e.g., physical vehicle) may be used in the simulation system <b>400</b> and <b>600</b> to more accurately produce results consistent with real-world deployment.</p><p id="p-0118" num="0117">The method <b>900</b>, at block B<b>910</b>, includes transmitting, to the simulation host device, a signal. For example, the output (or data representative thereof) may be transmitted in a signal to the simulation component(s) <b>402</b> to update the global simulation, and thus the simulation environment.</p><p id="p-0119" num="0118"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flow diagram showing a method <b>1000</b> for controlling a virtual object in a simulated environment using machine learning models trained on physical sensor data, in accordance with some embodiments of the present disclosure. The method <b>1000</b>, at block B<b>1002</b>, includes receiving physical sensor data generated by a physical sensor. For example, the vehicle(s) <b>102</b> (e.g., a physical or physical vehicle(s)) may generate physical sensor data and the re-simulation and/or simulation system may receive the physical sensor data.</p><p id="p-0120" num="0119">The method <b>1000</b>, at block B<b>1004</b>, includes training a machine learning model using the physical sensor data. For example, one or more DNNs that may be used in the software stack(s) <b>116</b> may be trained using the physical sensor data. Once trained, the DNN's may be considered trained DNNs.</p><p id="p-0121" num="0120">The method <b>1000</b>, at block B<b>1006</b>, includes receiving virtual sensor data generated by a virtual sensor. For example, the vehicle simulator component(s) <b>406</b>, <b>420</b>, and/or <b>422</b> may generate virtual sensor data using one or more virtual sensors and/or one or more codecs.</p><p id="p-0122" num="0121">The method <b>1000</b>, at block B<b>1008</b>, includes applying the virtual sensor data to a trained machine learning model. For example, the virtual sensor data&#x2014;which may be in the same format as the physical sensor data that was used to train the machine learning model&#x2014;may be applied to the trained machine learning model.</p><p id="p-0123" num="0122">The method <b>1000</b>, at block B<b>1010</b>, includes computing an output by the trained machine learning model. For example, the trained DNN may compute one or more outputs using the virtual sensor data. As described herein, the virtual sensor data may be encoded prior to use by the trained DNN.</p><p id="p-0124" num="0123">The method <b>1000</b>, at block B<b>1020</b>, includes controlling a virtual object within a simulated environment based at least in part on the output. For example, the virtual object (e.g., virtual vehicle) may be controlled within the simulated environment based at least in part on the output. In other examples, the outputs may be used for control. For example, the outputs may be object detection, lane detection, drivable free-space detection, safety procedure determination, etc. In any example, the outputs may be tested using one or more KPI's to determine the accuracy and effectiveness of the trained DNNs in any of a number of scenarios and environments. As such, where the trained DNNs suffer, fine-tuning may be executed to improve, validate, and verify the DNNs prior to deployment of the DNNs in real-world, physical vehicles (e.g., the vehicle <b>102</b>).</p><heading id="h-0006" level="1">Example Autonomous Vehicle</heading><p id="p-0125" num="0124"><figref idref="DRAWINGS">FIG. <b>11</b>A</figref> is an illustration of an example autonomous vehicle <b>102</b>, in accordance with some embodiments of the present disclosure. The autonomous vehicle <b>102</b> (alternatively referred to herein as the &#x201c;vehicle <b>102</b>&#x201d;) may include a passenger vehicle, such as a car, a truck, a bus, and/or another type of vehicle that accommodates one or more passengers. Autonomous vehicles are generally described in terms of automation levels, defined by the National Highway Traffic Safety Administration (NHTSA), a division of the US Department of Transportation, and the Society of Automotive Engineers (SAE) &#x201c;Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles&#x201d; (Standard No. J3016-201806, published on Jun. 15, 2018, Standard No. J3016-201609, published on Sep. 30, 2016, and previous and future versions of this standard). The vehicle <b>102</b> may be capable of functionality in accordance with one or more of Level 3-Level 5 of the autonomous driving levels. For example, the vehicle <b>102</b> may be capable of conditional automation (Level 3), high automation (Level 4), and/or full automation (Level 5), depending on the embodiment.</p><p id="p-0126" num="0125">The vehicle <b>102</b> may include components such as a chassis, a vehicle body, wheels (e.g., 2, 4, 6, 8, 18, etc.), tires, axles, and other components of a vehicle. The vehicle <b>102</b> may include a propulsion system <b>1150</b>, such as an internal combustion engine, hybrid electric power plant, an all-electric engine, and/or another propulsion system type. The propulsion system <b>1150</b> may be connected to a drive train of the vehicle <b>102</b>, which may include a transmission, to enable the propulsion of the vehicle <b>102</b>. The propulsion system <b>1150</b> may be controlled in response to receiving signals from the throttle/accelerator <b>1152</b>.</p><p id="p-0127" num="0126">A steering system <b>1154</b>, which may include a steering wheel, may be used to steer the vehicle <b>102</b> (e.g., along a desired path or route) when the propulsion system <b>1150</b> is operating (e.g., when the vehicle is in motion). The steering system <b>1154</b> may receive signals from a steering actuator <b>1156</b>. The steering wheel may be optional for full automation (Level 5) functionality.</p><p id="p-0128" num="0127">The brake sensor system <b>1146</b> may be used to operate the vehicle brakes in response to receiving signals from the brake actuators <b>1148</b> and/or brake sensors.</p><p id="p-0129" num="0128">Controller(s) <b>1136</b>, which may include one or more system on chips (SoCs) <b>1104</b> (<figref idref="DRAWINGS">FIG. <b>11</b>C</figref>) and/or GPU(s), may provide signals (e.g., representative of commands) to one or more components and/or systems of the vehicle <b>102</b>. For example, the controller(s) may send signals to operate the vehicle brakes via one or more brake actuators <b>1148</b>, to operate the steering system <b>1154</b> via one or more steering actuators <b>1156</b>, to operate the propulsion system <b>1150</b> via one or more throttle/accelerators <b>1152</b>. The controller(s) <b>1136</b> may include one or more onboard (e.g., integrated) computing devices (e.g., supercomputers) that process sensor signals, and output operation commands (e.g., signals representing commands) to enable autonomous driving and/or to assist a human driver in driving the vehicle <b>102</b>. The controller(s) <b>1136</b> may include a first controller <b>1136</b> for autonomous driving functions, a second controller <b>1136</b> for functional safety functions, a third controller <b>1136</b> for artificial intelligence functionality (e.g., computer vision), a fourth controller <b>1136</b> for infotainment functionality, a fifth controller <b>1136</b> for redundancy in emergency conditions, and/or other controllers. In some examples, a single controller <b>1136</b> may handle two or more of the above functionalities, two or more controllers <b>1136</b> may handle a single functionality, and/or any combination thereof.</p><p id="p-0130" num="0129">The controller(s) <b>1136</b> may provide the signals for controlling one or more components and/or systems of the vehicle <b>102</b> in response to sensor data received from one or more sensors (e.g., sensor inputs). The sensor data may be received from, for example and without limitation, global navigation satellite systems sensor(s) <b>1158</b> (e.g., Global Positioning System sensor(s)), RADAR sensor(s) <b>1160</b>, ultrasonic sensor(s) <b>1162</b>, LIDAR sensor(s) <b>1164</b>, inertial measurement unit (IMU) sensor(s) <b>1166</b> (e.g., accelerometer(s), gyroscope(s), magnetic compass(es), magnetometer(s), etc.), microphone(s) <b>1196</b>, stereo camera(s) <b>1168</b>, wide-view camera(s) <b>1170</b> (e.g., fisheye cameras), infrared camera(s) <b>1172</b>, surround camera(s) <b>1174</b> (e.g., 360 degree cameras), long-range and/or mid-range camera(s) <b>1198</b>, speed sensor(s) <b>1144</b> (e.g., for measuring the speed of the vehicle <b>102</b>), vibration sensor(s) <b>1142</b>, steering sensor(s) <b>1140</b>, brake sensor(s) (e.g., as part of the brake sensor system <b>1146</b>), and/or other sensor types.</p><p id="p-0131" num="0130">One or more of the controller(s) <b>1136</b> may receive inputs (e.g., represented by input data) from an instrument cluster <b>1132</b> of the vehicle <b>102</b> and provide outputs (e.g., represented by output data, display data, etc.) via a human-machine interface (HMI) display <b>1134</b>, an audible annunciator, a loudspeaker, and/or via other components of the vehicle <b>102</b>. The outputs may include information such as vehicle velocity, speed, time, map data (e.g., the HD map <b>1122</b> of <figref idref="DRAWINGS">FIG. <b>11</b>C</figref>), location data (e.g., the vehicle's <b>102</b> location, such as on a map), direction, location of other vehicles (e.g., an occupancy grid), information about objects and status of objects as perceived by the controller(s) <b>1136</b>, etc. For example, the HMI display <b>1134</b> may display information about the presence of one or more objects (e.g., a street sign, caution sign, traffic light changing, etc.), and/or information about driving maneuvers the vehicle has made, is making, or will make (e.g., changing lanes now, taking exit <b>34</b>B in two miles, etc.).</p><p id="p-0132" num="0131">The vehicle <b>102</b> further includes a network interface <b>1124</b> which may use one or more wireless antenna(s) <b>1126</b> and/or modem(s) to communicate over one or more networks. For example, the network interface <b>1124</b> may be capable of communication over LTE, WCDMA, UMTS, GSM, CDMA2000, etc. The wireless antenna(s) <b>1126</b> may also enable communication between objects in the environment (e.g., vehicles, mobile devices, etc.), using local area network(s), such as Bluetooth, Bluetooth LE, Z-Wave, ZigBee, etc., and/or low power wide-area network(s) (LPWANs), such as LoRaWAN, SigFox, etc.</p><p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. <b>11</b>B</figref> is an example of camera locations and fields of view for the example autonomous vehicle <b>102</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, in accordance with some embodiments of the present disclosure. The cameras and respective fields of view are one example embodiment and are not intended to be limiting. For example, additional and/or alternative cameras may be included and/or the cameras may be located at different locations on the vehicle <b>102</b>.</p><p id="p-0134" num="0133">The camera types for the cameras may include, but are not limited to, digital cameras that may be adapted for use with the components and/or systems of the vehicle <b>102</b>. The camera(s) may operate at automotive safety integrity level (ASIL) B and/or at another ASIL. The camera types may be capable of any image capture rate, such as 60 frames per second (fps), 1120 fps, 240 fps, etc., depending on the embodiment. The cameras may be capable of using rolling shutters, global shutters, another type of shutter, or a combination thereof. In some examples, the color filter array may include a red clear clear clear (RCCC) color filter array, a red clear clear blue (RCCB) color filter array, a red blue green clear (RBGC) color filter array, a Foveon X3 color filter array, a Bayer sensors (RGGB) color filter array, a monochrome sensor color filter array, and/or another type of color filter array. In some embodiments, clear pixel cameras, such as cameras with an RCCC, an RCCB, and/or an RBGC color filter array, may be used in an effort to increase light sensitivity.</p><p id="p-0135" num="0134">In some examples, one or more of the camera(s) may be used to perform advanced driver assistance systems (ADAS) functions (e.g., as part of a redundant or fail-safe design). For example, a Multi-Function Mono Camera may be installed to provide functions including lane departure warning, traffic sign assist and intelligent headlamp control. One or more of the camera(s) (e.g., all of the cameras) may record and provide image data (e.g., video) simultaneously.</p><p id="p-0136" num="0135">One or more of the cameras may be mounted in a mounting assembly, such as a custom designed (3-D printed) assembly, in order to cut out stray light and reflections from within the car (e.g., reflections from the dashboard reflected in the windshield mirrors) which may interfere with the camera's image data capture abilities. With reference to wing-mirror mounting assemblies, the wing-mirror assemblies may be custom 3-D printed so that the camera mounting plate matches the shape of the wing-mirror. In some examples, the camera(s) may be integrated into the wing-mirror. For side-view cameras, the camera(s) may also be integrated within the four pillars at each corner of the cabin.</p><p id="p-0137" num="0136">Cameras with a field of view that include portions of the environment in front of the vehicle <b>102</b> (e.g., front-facing cameras) may be used for surround view, to help identify forward facing paths and obstacles, as well aid in, with the help of one or more controllers <b>1136</b> and/or control SoCs, providing information critical to generating an occupancy grid and/or determining the preferred vehicle paths. Front-facing cameras may be used to perform many of the same ADAS functions as LIDAR, including emergency braking, pedestrian detection, and collision avoidance. Front-facing cameras may also be used for ADAS functions and systems including Lane Departure Warnings (&#x201c;LDW&#x201d;), Autonomous Cruise Control (&#x201c;ACC&#x201d;), and/or other functions such as traffic sign recognition.</p><p id="p-0138" num="0137">A variety of cameras may be used in a front-facing configuration, including, for example, a monocular camera platform that includes a CMOS (complementary metal oxide semiconductor) color imager. Another example may be a wide-view camera(s) <b>1170</b> that may be used to perceive objects coming into view from the periphery (e.g., pedestrians, crossing traffic or bicycles). Although only one wide-view camera is illustrated in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>, there may any number of wide-view cameras <b>1170</b> on the vehicle <b>102</b>. In addition, long-range camera(s) <b>1198</b> (e.g., a long-view stereo camera pair) may be used for depth-based object detection, especially for objects for which a neural network has not yet been trained. The long-range camera(s) <b>1198</b> may also be used for object detection and classification, as well as basic object tracking.</p><p id="p-0139" num="0138">One or more stereo cameras <b>1168</b> may also be included in a front-facing configuration. The stereo camera(s) <b>1168</b> may include an integrated control unit comprising a scalable processing unit, which may provide a programmable logic (FPGA) and a multi-core micro-processor with an integrated CAN or Ethernet interface on a single chip. Such a unit may be used to generate a 3-D map of the vehicle's environment, including a distance estimate for all the points in the image. An alternative stereo camera(s) <b>1168</b> may include a compact stereo vision sensor(s) that may include two camera lenses (one each on the left and right) and an image processing chip that may measure the distance from the vehicle to the target object and use the generated information (e.g., metadata) to activate the autonomous emergency braking and lane departure warning functions. Other types of stereo camera(s) <b>1168</b> may be used in addition to, or alternatively from, those described herein.</p><p id="p-0140" num="0139">Cameras with a field of view that include portions of the environment to the side of the vehicle <b>102</b> (e.g., side-view cameras) may be used for surround view, providing information used to create and update the occupancy grid, as well as to generate side impact collision warnings. For example, surround camera(s) <b>1174</b> (e.g., four surround cameras <b>1174</b> as illustrated in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>) may be positioned to on the vehicle <b>102</b>. The surround camera(s) <b>1174</b> may include wide-view camera(s) <b>1170</b>, fisheye camera(s), 360 degree camera(s), and/or the like. Four example, four fisheye cameras may be positioned on the vehicle's front, rear, and sides. In an alternative arrangement, the vehicle may use three surround camera(s) <b>1174</b> (e.g., left, right, and rear), and may leverage one or more other camera(s) (e.g., a forward-facing camera) as a fourth surround view camera.</p><p id="p-0141" num="0140">Cameras with a field of view that include portions of the environment to the rear of the vehicle <b>102</b> (e.g., rear-view cameras) may be used for park assistance, surround view, rear collision warnings, and creating and updating the occupancy grid. A wide variety of cameras may be used including, but not limited to, cameras that are also suitable as a front-facing camera(s) (e.g., long-range and/or mid-range camera(s) <b>1198</b>, stereo camera(s) <b>1168</b>), infrared camera(s) <b>1172</b>, etc.), as described herein.</p><p id="p-0142" num="0141"><figref idref="DRAWINGS">FIG. <b>11</b>C</figref> is a block diagram of an example system architecture for the example autonomous vehicle <b>102</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, in accordance with some embodiments of the present disclosure. It should be understood that this and other arrangements described herein are set forth only as examples. Other arrangements and elements (e.g., machines, interfaces, functions, orders, groupings of functions, etc.) may be used in addition to or instead of those shown, and some elements may be omitted altogether. Further, many of the elements described herein are functional entities that may be implemented as discrete or distributed components or in conjunction with other components, and in any suitable combination and location. Various functions described herein as being performed by entities may be carried out by hardware, firmware, and/or software. For instance, various functions may be carried out by a processor executing instructions stored in memory.</p><p id="p-0143" num="0142">Each of the components, features, and systems of the vehicle <b>102</b> in <figref idref="DRAWINGS">FIG. <b>11</b>C</figref> are illustrated as being connected via bus <b>1102</b>. The bus <b>1102</b> may include a Controller Area Network (CAN) data interface (alternatively referred to herein as a &#x201c;CAN bus&#x201d;). A CAN may be a network inside the vehicle <b>102</b> used to aid in control of various features and functionality of the vehicle <b>102</b>, such as actuation of brakes, acceleration, braking, steering, windshield wipers, etc. A CAN bus may be configured to have dozens or even hundreds of nodes, each with its own unique identifier (e.g., a CAN ID). The CAN bus may be read to find steering wheel angle, ground speed, engine revolutions per minute (RPMs), button positions, and/or other vehicle status indicators. The CAN bus may be ASIL B compliant.</p><p id="p-0144" num="0143">Although the bus <b>1102</b> is described herein as being a CAN bus, this is not intended to be limiting. For example, in addition to, or alternatively from, the CAN bus, FlexRay and/or Ethernet may be used. Additionally, although a single line is used to represent the bus <b>1102</b>, this is not intended to be limiting. For example, there may be any number of busses <b>1102</b>, which may include one or more CAN busses, one or more FlexRay busses, one or more Ethernet busses, and/or one or more other types of busses using a different protocol. In some examples, two or more busses <b>1102</b> may be used to perform different functions, and/or may be used for redundancy. For example, a first bus <b>1102</b> may be used for collision avoidance functionality and a second bus <b>1102</b> may be used for actuation control. In any example, each bus <b>1102</b> may communicate with any of the components of the vehicle <b>102</b>, and two or more busses <b>1102</b> may communicate with the same components. In some examples, each SoC <b>1104</b>, each controller <b>1136</b>, and/or each computer within the vehicle may have access to the same input data (e.g., inputs from sensors of the vehicle <b>102</b>), and may be connected to a common bus, such the CAN bus.</p><p id="p-0145" num="0144">The vehicle <b>102</b> may include one or more controller(s) <b>1136</b>, such as those described herein with respect to <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>. The controller(s) <b>1136</b> may be used for a variety of functions. The controller(s) <b>1136</b> may be coupled to any of the various other components and systems of the vehicle <b>102</b>, and may be used for control of the vehicle <b>102</b>, artificial intelligence of the vehicle <b>102</b>, infotainment for the vehicle <b>102</b>, and/or the like.</p><p id="p-0146" num="0145">The vehicle <b>102</b> may include a system(s) on a chip (SoC) <b>1104</b>. The SoC <b>1104</b> may include CPU(s) <b>1106</b>, GPU(s) <b>1108</b>, processor(s) <b>1110</b>, cache(s) <b>1112</b>, accelerator(s) <b>1114</b>, data store(s) <b>1116</b>, and/or other components and features not illustrated. The SoC(s) <b>1104</b> may be used to control the vehicle <b>102</b> in a variety of platforms and systems. For example, the SoC(s) <b>1104</b> may be combined in a system (e.g., the system of the vehicle <b>102</b>) with an HD map <b>1122</b> which may obtain map refreshes and/or updates via a network interface <b>1124</b> from one or more servers (e.g., server(s) <b>1178</b> of <figref idref="DRAWINGS">FIG. <b>11</b>D</figref>).</p><p id="p-0147" num="0146">The CPU(s) <b>1106</b> may include a CPU cluster or CPU complex (alternatively referred to herein as a &#x201c;CCPLEX&#x201d;). The CPU(s) <b>1106</b> may include multiple cores and/or L2 caches. For example, in some embodiments, the CPU(s) <b>1106</b> may include eight cores in a coherent multi-processor configuration. In some embodiments, the CPU(s) <b>1106</b> may include four dual-core clusters where each cluster has a dedicated L2 cache (e.g., a 2 MB L2 cache). The CPU(s) <b>1106</b> (e.g., the CCPLEX) may be configured to support simultaneous cluster operation enabling any combination of the clusters of the CPU(s) <b>1106</b> to be active at any given time.</p><p id="p-0148" num="0147">The CPU(s) <b>1106</b> may implement power management capabilities that include one or more of the following features: individual hardware blocks may be clock-gated automatically when idle to save dynamic power; each core clock may be gated when the core is not actively executing instructions due to execution of WFI/WFE instructions; each core may be independently power-gated; each core cluster may be independently clock-gated when all cores are clock-gated or power-gated; and/or each core cluster may be independently power-gated when all cores are power-gated. The CPU(s) <b>1106</b> may further implement an enhanced algorithm for managing power states, where allowed power states and expected wakeup times are specified, and the hardware/microcode determines the best power state to enter for the core, cluster, and CCPLEX. The processing cores may support simplified power state entry sequences in software with the work offloaded to microcode.</p><p id="p-0149" num="0148">The GPU(s) <b>1108</b> may include an integrated GPU (alternatively referred to herein as an &#x201c;iGPU&#x201d;). The GPU(s) <b>1108</b> may be programmable and may be efficient for parallel workloads. The GPU(s) <b>1108</b>, in some examples, may use an enhanced tensor instruction set. The GPU(s) <b>1108</b> may include one or more streaming microprocessors, where each streaming microprocessor may include an L1 cache (e.g., an L1 cache with at least 96 KB storage capacity), and two or more of the streaming microprocessors may share an L2 cache (e.g., an L2 cache with a 512 KB storage capacity). In some embodiments, the GPU(s) <b>1108</b> may include at least eight streaming microprocessors. The GPU(s) <b>1108</b> may use compute application programming interface(s) (API(s)). In addition, the GPU(s) <b>1108</b> may use one or more parallel computing platforms and/or programming models (e.g., NVIDIA's CUDA).</p><p id="p-0150" num="0149">The GPU(s) <b>1108</b> may be power-optimized for best performance in automotive and embedded use cases. For example, the GPU(s) <b>1108</b> may be fabricated on a Fin field-effect transistor (FinFET). However, this is not intended to be limiting and the GPU(s) <b>1108</b> may be fabricated using other semiconductor manufacturing processes. Each streaming microprocessor may incorporate a number of mixed-precision processing cores partitioned into multiple blocks. For example, and without limitation, 64 PF32 cores and 32 PF64 cores may be partitioned into four processing blocks. In such an example, each processing block may be allocated 16 FP32 cores, 8 FP64 cores, 16 INT32 cores, two mixed-precision NVIDIA TENSOR COREs for deep learning matrix arithmetic, an L0 instruction cache, a warp scheduler, a dispatch unit, and/or a 64 KB register file. In addition, the streaming microprocessors may include independent parallel integer and floating-point data paths to provide for efficient execution of workloads with a mix of computation and addressing calculations. The streaming microprocessors may include independent thread scheduling capability to enable finer-grain synchronization and cooperation between parallel threads. The streaming microprocessors may include a combined L1 data cache and shared memory unit in order to improve performance while simplifying programming.</p><p id="p-0151" num="0150">The GPU(s) <b>1108</b> may include a high bandwidth memory (HBM) and/or a 16 GB HBM2 memory subsystem to provide, in some examples, about 900 GB/second peak memory bandwidth. In some examples, in addition to, or alternatively from, the HBM memory, a synchronous graphics random-access memory (SGRAM) may be used, such as a graphics double data rate type five synchronous random-access memory (GDDR5).</p><p id="p-0152" num="0151">The GPU(s) <b>1108</b> may include unified memory technology including access counters to allow for more accurate migration of memory pages to the processor that accesses them most frequently, thereby improving efficiency for memory ranges shared between processors. In some examples, address translation services (ATS) support may be used to allow the GPU(s) <b>1108</b> to access the CPU(s) <b>1106</b> page tables directly. In such examples, when the GPU(s) <b>1108</b> memory management unit (MMU) experiences a miss, an address translation request may be transmitted to the CPU(s) <b>1106</b>. In response, the CPU(s) <b>1106</b> may look in its page tables for the virtual-to-physical mapping for the address and transmits the translation back to the GPU(s) <b>1108</b>. As such, unified memory technology may allow a single unified virtual address space for memory of both the CPU(s) <b>1106</b> and the GPU(s) <b>1108</b>, thereby simplifying the GPU(s) <b>1108</b> programming and porting of applications to the GPU(s) <b>1108</b>.</p><p id="p-0153" num="0152">In addition, the GPU(s) <b>1108</b> may include an access counter that may keep track of the frequency of access of the GPU(s) <b>1108</b> to memory of other processors. The access counter may help ensure that memory pages are moved to the physical memory of the processor that is accessing the pages most frequently.</p><p id="p-0154" num="0153">The SoC(s) <b>1104</b> may include any number of cache(s) <b>1112</b>, including those described herein. For example, the cache(s) <b>1112</b> may include an L3 cache that is available to both the CPU(s) <b>1106</b> and the GPU(s) <b>1108</b> (e.g., that is connected both the CPU(s) <b>1106</b> and the GPU(s) <b>1108</b>). The cache(s) <b>1112</b> may include a write-back cache that may keep track of states of lines, such as by using a cache coherence protocol (e.g., MEI, MESI, MSI, etc.). The L3 cache may include 4 MB or more, depending on the embodiment, although smaller cache sizes may be used.</p><p id="p-0155" num="0154">The SoC(s) <b>1104</b> may include one or more accelerators <b>1114</b> (e.g., hardware accelerators, software accelerators, or a combination thereof). For example, the SoC(s) <b>1104</b> may include a hardware acceleration cluster that may include optimized hardware accelerators and/or large on-chip memory. The large on-chip memory (e.g., 4 MB of SRAM), may enable the hardware acceleration cluster to accelerate neural networks and other calculations. The hardware acceleration cluster may be used to complement the GPU(s) <b>1108</b> and to off-load some of the tasks of the GPU(s) <b>1108</b> (e.g., to free up more cycles of the GPU(s) <b>1108</b> for performing other tasks). As an example, the accelerator(s) <b>1114</b> may be used for targeted workloads (e.g., perception, convolutional neural networks (CNNs), etc.) that are stable enough to be amenable to acceleration. The term &#x201c;CNN,&#x201d; as used herein, may include all types of CNNs, including region-based or regional convolutional neural networks (RCNNs) and Fast RCNNs (e.g., as used for object detection).</p><p id="p-0156" num="0155">The accelerator(s) <b>1114</b> (e.g., the hardware acceleration cluster) may include a deep learning accelerator(s) (DLA). The DLA(s) may include one or more Tensor processing units (TPUs) that may be configured to provide an additional ten trillion operations per second for deep learning applications and inferencing. The TPUs may be accelerators configured to, and optimized for, performing image processing functions (e.g., for CNNs, RCNNs, etc.). The DLA(s) may further be optimized for a specific set of neural network types and floating point operations, as well as inferencing. The design of the DLA(s) may provide more performance per millimeter than a general-purpose GPU, and vastly exceeds the performance of a CPU. The TPU(s) may perform several functions, including a single-instance convolution function, supporting, for example, INT8, INT16, and FP16 data types for both features and weights, as well as post-processor functions.</p><p id="p-0157" num="0156">The DLA(s) may quickly and efficiently execute neural networks, especially CNNs, on processed or unprocessed data for any of a variety of functions, including, for example and without limitation: a CNN for object identification and detection using data from camera sensors; a CNN for distance estimation using data from camera sensors; a CNN for emergency vehicle detection and identification and detection using data from microphones; a CNN for facial recognition and vehicle owner identification using data from camera sensors; and/or a CNN for security and/or safety related events.</p><p id="p-0158" num="0157">The DLA(s) may perform any function of the GPU(s) <b>1108</b>, and by using an inference accelerator, for example, a designer may target either the DLA(s) or the GPU(s) <b>1108</b> for any function. For example, the designer may focus processing of CNNs and floating point operations on the DLA(s) and leave other functions to the GPU(s) <b>1108</b> and/or other accelerator(s) <b>1114</b>.</p><p id="p-0159" num="0158">The accelerator(s) <b>1114</b> (e.g., the hardware acceleration cluster) may include a programmable vision accelerator(s) (PVA), which may alternatively be referred to herein as a computer vision accelerator. The PVA(s) may be designed and configured to accelerate computer vision algorithms for the advanced driver assistance systems (ADAS), autonomous driving, and/or augmented reality (AR) and/or virtual reality (VR) applications. The PVA(s) may provide a balance between performance and flexibility. For example, each PVA(s) may include, for example and without limitation, any number of reduced instruction set computer (RISC) cores, direct memory access (DMA), and/or any number of vector processors.</p><p id="p-0160" num="0159">The RISC cores may interact with image sensors (e.g., the image sensors of any of the cameras described herein), image signal processor(s), and/or the like. Each of the RISC cores may include any amount of memory. The RISC cores may use any of a number of protocols, depending on the embodiment. In some examples, the RISC cores may execute a real-time operating system (RTOS). The RISC cores may be implemented using one or more integrated circuit devices, application specific integrated circuits (ASICs), and/or memory devices. For example, the RISC cores may include an instruction cache and/or a tightly coupled RAM.</p><p id="p-0161" num="0160">The DMA may enable components of the PVA(s) to access the system memory independently of the CPU(s) <b>1106</b>. The DMA may support any number of features used to provide optimization to the PVA including, but not limited to, supporting multi-dimensional addressing and/or circular addressing. In some examples, the DMA may support up to six or more dimensions of addressing, which may include block width, block height, block depth, horizontal block stepping, vertical block stepping, and/or depth stepping.</p><p id="p-0162" num="0161">The vector processors may be programmable processors that may be designed to efficiently and flexibly execute programming for computer vision algorithms and provide signal processing capabilities. In some examples, the PVA may include a PVA core and two vector processing subsystem partitions. The PVA core may include a processor subsystem, DMA engine(s) (e.g., two DMA engines), and/or other peripherals. The vector processing subsystem may operate as the primary processing engine of the PVA, and may include a vector processing unit (VPU), an instruction cache, and/or vector memory (e.g., VMEM). A VPU core may include a digital signal processor such as, for example, a single instruction, multiple data (SIMD), very long instruction word (VLIW) digital signal processor. The combination of the SIMD and VLIW may enhance throughput and speed.</p><p id="p-0163" num="0162">Each of the vector processors may include an instruction cache and may be coupled to dedicated memory. As a result, in some examples, each of the vector processors may be configured to execute independently of the other vector processors. In other examples, the vector processors that are included in a particular PVA may be configured to employ data parallelism. For example, in some embodiments, the plurality of vector processors included in a single PVA may execute the same computer vision algorithm, but on different regions of an image. In other examples, the vector processors included in a particular PVA may simultaneously execute different computer vision algorithms, on the same image, or even execute different algorithms on sequential images or portions of an image. Among other things, any number of PVAs may be included in the hardware acceleration cluster and any number of vector processors may be included in each of the PVAs. In addition, the PVA(s) may include additional error correcting code (ECC) memory, to enhance overall system safety.</p><p id="p-0164" num="0163">The accelerator(s) <b>1114</b> (e.g., the hardware acceleration cluster) may include a computer vision network on-chip and SRAM, for providing a high-bandwidth, low latency SRAM for the accelerator(s) <b>1114</b>. In some examples, the on-chip memory may include at least 4 MB SRAM, consisting of, for example and without limitation, eight field-configurable memory blocks, that may be accessible by both the PVA and the DLA. Each pair of memory blocks may include an advanced peripheral bus (APB) interface, configuration circuitry, a controller, and a multiplexer. Any type of memory may be used. The PVA and DLA may access the memory via a backbone that provides the PVA and DLA with high-speed access to memory. The backbone may include a computer vision network on-chip that interconnects the PVA and the DLA to the memory (e.g., using the APB).</p><p id="p-0165" num="0164">The computer vision network on-chip may include an interface that determines, before transmission of any control signal/address/data, that both the PVA and the DLA provide ready and valid signals. Such an interface may provide for separate phases and separate channels for transmitting control signals/addresses/data, as well as burst-type communications for continuous data transfer. This type of interface may comply with ISO 26262 or IEC 61508 standards, although other standards and protocols may be used.</p><p id="p-0166" num="0165">In some examples, the SoC(s) <b>1104</b> may include a real-time ray-tracing hardware accelerator, such as described in U.S. patent application Ser. No. 16/101,232, filed on Aug. 10, 2018. The real-time ray-tracing hardware accelerator may be used to quickly and efficiently determine the positions and extents of objects (e.g., within a world model), to generate real0time visualization simulations, for RADAR signal interpretation, for sound propagation synthesis and/or analysis, for simulation of SONAR systems, for general wave propagation simulation, for comparison to LIDAR data for purposes of localization and/or other functions, and/or for other uses.</p><p id="p-0167" num="0166">The accelerator(s) <b>1114</b> (e.g., the hardware accelerator cluster) have a wide array of uses for autonomous driving. The PVA may be a programmable vision accelerator that may be used for key processing stages in ADAS and autonomous vehicles. The PVA's capabilities are a good match for algorithmic domains needing predictable processing, at low power and low latency. In other words, the PVA performs well on semi-dense or dense regular computation, even on small data sets, which need predictable run-times with low latency and low power. Thus, in the context of platforms for autonomous vehicles, the PVAs are designed to run classic computer vision algorithms, as they are efficient at object detection and operating on integer math.</p><p id="p-0168" num="0167">For example, according to one embodiment of the technology, the PVA is used to perform computer stereo vision. A semi-global matching-based algorithm may be used in some examples, although this is not intended to be limiting. Many applications for Level 3-5 autonomous driving require motion estimation/stereo matching on-the-fly (e.g., structure from motion, pedestrian recognition, lane detection, etc.). The PVA may perform computer stereo vision function on inputs from two monocular cameras.</p><p id="p-0169" num="0168">In some examples, the PVA may be used to perform dense optical flow. According to process raw RADAR data (e.g., using a 4D Fast Fourier Transform) to provide Processed RADAR. In other examples, the PVA is used for time of flight depth processing, by processing raw time of flight data to provide processed time of flight data, for example.</p><p id="p-0170" num="0169">The DLA may be used to run any type of network to enhance control and driving safety, including for example, a neural network that outputs a measure of confidence for each object detection. Such a confidence value may be interpreted as a probability, or as providing a relative &#x201c;weight&#x201d; of each detection compared to other detections. This confidence value enables the system to make further decisions regarding which detections should be considered as true positive detections rather than false positive detections. For example, the system may set a threshold value for the confidence and consider only the detections exceeding the threshold value as true positive detections. In an automatic emergency braking (AEB) system, false positive detections would cause the vehicle to automatically perform emergency braking, which is obviously undesirable. Therefore, only the most confident detections should be considered as triggers for AEB. The DLA may run a neural network for regressing the confidence value. The neural network may take as its input at least some subset of parameters, such as bounding box dimensions, ground plane estimate obtained (e.g. from another subsystem), inertial measurement unit (IMU) sensor <b>1166</b> output that correlates with the vehicle <b>102</b> orientation, distance, 3D location estimates of the object obtained from the neural network and/or other sensors (e.g., LIDAR sensor(s) <b>1164</b> or RADAR sensor(s) <b>1160</b>), among others.</p><p id="p-0171" num="0170">The SoC(s) <b>1104</b> may include data store(s) <b>1116</b> (e.g., memory). The data store(s) <b>1116</b> may be on-chip memory of the SoC(s) <b>1104</b>, which may store neural networks to be executed on the GPU and/or the DLA. In some examples, the data store(s) <b>1116</b> may be large enough in capacity to store multiple instances of neural networks for redundancy and safety. The data store(s) <b>1112</b> may comprise L2 or L3 cache(s) <b>1112</b>. Reference to the data store(s) <b>1116</b> may include reference to the memory associated with the PVA, DLA, and/or other accelerator(s) <b>1114</b>, as described herein.</p><p id="p-0172" num="0171">The SoC(s) <b>1104</b> may include one or more processor(s) <b>1110</b> (e.g., embedded processors). The processor(s) <b>1110</b> may include a boot and power management processor that may be a dedicated processor and subsystem to handle boot power and management functions and related security enforcement. The boot and power management processor may be a part of the SoC(s) <b>1104</b> boot sequence and may provide runtime power management services. The boot power and management processor may provide clock and voltage programming, assistance in system low power state transitions, management of SoC(s) <b>1104</b> thermals and temperature sensors, and/or management of the SoC(s) <b>1104</b> power states. Each temperature sensor may be implemented as a ring-oscillator whose output frequency is proportional to temperature, and the SoC(s) <b>1104</b> may use the ring-oscillators to detect temperatures of the CPU(s) <b>1106</b>, GPU(s) <b>1108</b>, and/or accelerator(s) <b>1114</b>. If temperatures are determined to exceed a threshold, the boot and power management processor may enter a temperature fault routine and put the SoC(s) <b>1104</b> into a lower power state and/or put the vehicle <b>102</b> into a chauffeur to safe stop mode (e.g., bring the vehicle <b>102</b> to a safe stop).</p><p id="p-0173" num="0172">The processor(s) <b>1110</b> may further include a set of embedded processors that may serve as an audio processing engine. The audio processing engine may be an audio subsystem that enables full hardware support for multi-channel audio over multiple interfaces, and a broad and flexible range of audio I/O interfaces. In some examples, the audio processing engine is a dedicated processor core with a digital signal processor with dedicated RAM.</p><p id="p-0174" num="0173">The processor(s) <b>1110</b> may further include an always on processor engine that may provide necessary hardware features to support low power sensor management and wake use cases. The always on processor engine may include a processor core, a tightly coupled RAM, supporting peripherals (e.g., timers and interrupt controllers), various I/O controller peripherals, and routing logic.</p><p id="p-0175" num="0174">The processor(s) <b>1110</b> may further include a safety cluster engine that includes a dedicated processor subsystem to handle safety management for automotive applications. The safety cluster engine may include two or more processor cores, a tightly coupled RAM, support peripherals (e.g., timers, an interrupt controller, etc.), and/or routing logic. In a safety mode, the two or more cores may operate in a lockstep mode and function as a single core with comparison logic to detect any differences between their operations.</p><p id="p-0176" num="0175">The processor(s) <b>1110</b> may further include a real-time camera engine that may include a dedicated processor subsystem for handling real-time camera management.</p><p id="p-0177" num="0176">The processor(s) <b>1110</b> may further include a high-dynamic range signal processor that may include an image signal processor that is a hardware engine that is part of the camera processing pipeline.</p><p id="p-0178" num="0177">The processor(s) <b>1110</b> may include a video image compositor that may be a processing block (e.g., implemented on a microprocessor) that implements video post-processing functions needed by a video playback application to produce the final image for the player window. The video image compositor may perform lens distortion correction on wide-view camera(s) <b>1170</b>, surround camera(s) <b>1174</b>, and/or on in-cabin monitoring camera sensors. In-cabin monitoring camera sensor is preferably monitored by a neural network running on another instance of the Advanced SoC, configured to identify in cabin events and respond accordingly. An in-cabin system may perform lip reading to activate cellular service and place a phone call, dictate emails, change the vehicle's destination, activate or change the vehicle's infotainment system and settings, or provide voice-activated web surfing. Certain functions are available to the driver only when the vehicle is operating in an autonomous mode, and are disabled otherwise.</p><p id="p-0179" num="0178">The video image compositor may include enhanced temporal noise reduction for both spatial and temporal noise reduction. For example, where motion occurs in a video, the noise reduction weights spatial information appropriately, decreasing the weight of information provided by adjacent frames. Where an image or portion of an image does not include motion, the temporal noise reduction performed by the video image compositor may use information from the previous image to reduce noise in the current image.</p><p id="p-0180" num="0179">The video image compositor may also be configured to perform stereo rectification on input stereo lens frames. The video image compositor may further be used for user interface composition when the operating system desktop is in use, and the GPU(s) <b>1108</b> is not required to continuously render new surfaces. Even when the GPU(s) <b>1108</b> is powered on and active doing 3D rendering, the video image compositor may be used to offload the GPU(s) <b>1108</b> to improve performance and responsiveness.</p><p id="p-0181" num="0180">The SoC(s) <b>1104</b> may further include a mobile industry processor interface (MIPI) camera serial interface for receiving video and input from cameras, a high-speed interface, and/or a video input block that may be used for camera and related pixel input functions. The SoC(s) <b>1104</b> may further include an input/output controller(s) that may be controlled by software and may be used for receiving I/O signals that are uncommitted to a specific role.</p><p id="p-0182" num="0181">The SoC(s) <b>1104</b> may further include a broad range of peripheral interfaces to enable communication with peripherals, audio codecs, power management, and/or other devices. The SoC(s) <b>1104</b> may be used to process data from cameras (e.g., connected over Gigabit Multimedia Serial Link and Ethernet), sensors (e.g., LIDAR sensor(s) <b>1164</b>, RADAR sensor(s) <b>1160</b>, etc. that may be connected over Ethernet), data from bus <b>1102</b> (e.g., speed of vehicle <b>102</b>, steering wheel position, etc.), data from GNSS sensor(s) <b>1158</b> (e.g., connected over Ethernet or CAN bus). The SoC(s) <b>1104</b> may further include dedicated high-performance mass storage controllers that may include their own DMA engines, and that may be used to free the CPU(s) <b>1106</b> from routine data management tasks.</p><p id="p-0183" num="0182">The SoC(s) <b>1104</b> may be an end-to-end platform with a flexible architecture that spans automation levels 3-5, thereby providing a comprehensive functional safety architecture that leverages and makes efficient use of computer vision and ADAS techniques for diversity and redundancy, provides a platform for a flexible, reliable driving software stack, along with deep learning tools. The SoC(s) <b>1104</b> may be faster, more reliable, and even more energy-efficient and space-efficient than conventional systems. For example, the accelerator(s) <b>1114</b>, when combined with the CPU(s) <b>1106</b>, the GPU(s) <b>1108</b>, and the data store(s) <b>1116</b>, may provide for a fast, efficient platform for level 3-5 autonomous vehicles.</p><p id="p-0184" num="0183">The technology thus provides capabilities and functionality that cannot be achieved by conventional systems. For example, computer vision algorithms may be executed on CPUs, which may be configured using high-level programming language, such as the C programming language, to execute a wide variety of processing algorithms across a wide variety of visual data. However, CPUs are oftentimes unable to meet the performance requirements of many computer vision applications, such as those related to execution time and power consumption, for example. In particular, many CPUs are unable to execute complex object detection algorithms in real-time, which is a requirement of in-vehicle ADAS applications, and a requirement for practical Level 3-5 autonomous vehicles.</p><p id="p-0185" num="0184">In contrast to conventional systems, by providing a CPU complex, GPU complex, and a hardware acceleration cluster, the technology described herein allows for multiple neural networks to be performed simultaneously and/or sequentially, and for the results to be combined together to enable Level 3-5 autonomous driving functionality. For example, a CNN executing on the DLA or dGPU (e.g., the GPU(s) <b>1120</b>) may include a text and word recognition, allowing the supercomputer to read and understand traffic signs, including signs for which the neural network has not been specifically trained. The DLA may further include a neural network that is able to identify, interpret, and provides semantic understanding of the sign, and to pass that semantic understanding to the path planning modules running on the CPU Complex.</p><p id="p-0186" num="0185">As another example, multiple neural networks may be run simultaneously, as is required for Level 3, 4, or 5 driving. For example, a warning sign consisting of &#x201c;Caution: flashing lights indicate icy conditions,&#x201d; along with an electric light, may be independently or collectively interpreted by several neural networks. The sign itself may be identified as a traffic sign by a first deployed neural network (e.g., a neural network that has been trained), the text &#x201c;Flashing lights indicate icy conditions&#x201d; may be interpreted by a second deployed neural network, which informs the vehicle's path planning software (preferably executing on the CPU Complex) that when flashing lights are detected, icy conditions exist. The flashing light may be identified by operating a third deployed neural network over multiple frames, informing the vehicle's path-planning software of the presence (or absence) of flashing lights. All three neural networks may run simultaneously, such as within the DLA and/or on the GPU(s) <b>1108</b>.</p><p id="p-0187" num="0186">In some examples, a CNN for facial recognition and vehicle owner identification may use data from camera sensors to identify the presence of an authorized driver and/or owner of the vehicle <b>102</b>. The always on sensor processing engine may be used to unlock the vehicle when the owner approaches the driver door and turn on the lights, and, in security mode, to disable the vehicle when the owner leaves the vehicle. In this way, the SoC(s) <b>1104</b> provide for security against theft and/or carjacking.</p><p id="p-0188" num="0187">In another example, a CNN for emergency vehicle detection and identification may use data from microphones <b>1196</b> to detect and identify emergency vehicle sirens. In contrast to conventional systems, that use general classifiers to detect sirens and manually extract features, the SoC(s) <b>1104</b> use the CNN for classifying environmental and urban sounds, as well as classifying visual data. In a preferred embodiment, the CNN running on the DLA is trained to identify the relative closing speed of the emergency vehicle (e.g., by using the Doppler effect). The CNN may also be trained to identify emergency vehicles specific to the local area in which the vehicle is operating, as identified by GNSS sensor(s) <b>1158</b>. Thus, for example, when operating in Europe the CNN will seek to detect European sirens, and when in the United States the CNN will seek to identify only North American sirens. Once an emergency vehicle is detected, a control program may be used to execute an emergency vehicle safety routine, slowing the vehicle, pulling over to the side of the road, parking the vehicle, and/or idling the vehicle, with the assistance of ultrasonic sensors <b>1162</b>, until the emergency vehicle(s) passes.</p><p id="p-0189" num="0188">The vehicle may include a CPU(s) <b>1118</b> (e.g., discrete CPU(s), or dCPU(s)), that may be coupled to the SoC(s) <b>1104</b> via a high-speed interconnect (e.g., PCIe). The CPU(s) <b>1118</b> may include an X86 processor, for example. The CPU(s) <b>1118</b> may be used to perform any of a variety of functions, including arbitrating potentially inconsistent results between ADAS sensors and the SoC(s) <b>1104</b>, and/or monitoring the status and health of the controller(s) <b>1136</b> and/or infotainment SoC <b>1130</b>, for example.</p><p id="p-0190" num="0189">The vehicle <b>102</b> may include a GPU(s) <b>1120</b> (e.g., discrete GPU(s), or dGPU(s)), that may be coupled to the SoC(s) <b>1104</b> via a high-speed interconnect (e.g., NVIDIA's NVLINK). The GPU(s) <b>1120</b> may provide additional artificial intelligence functionality, such as by executing redundant and/or different neural networks, and may be used to train and/or update neural networks based on input (e.g., sensor data) from sensors of the vehicle <b>102</b>.</p><p id="p-0191" num="0190">The vehicle <b>102</b> may further include the network interface <b>1124</b> which may include one or more wireless antennas <b>1126</b> (e.g., one or more wireless antennas for different communication protocols, such as a cellular antenna, a Bluetooth antenna, etc.). The network interface <b>1124</b> may be used to enable wireless connectivity over the Internet with the cloud (e.g., with the server(s) <b>1178</b> and/or other network devices), with other vehicles, and/or with computing devices (e.g., client devices of passengers). To communicate with other vehicles, a direct link may be established between the two vehicles and/or an indirect link may be established (e.g., across networks and over the Internet). Direct links may be provided using a vehicle-to-vehicle communication link. The vehicle-to-vehicle communication link may provide the vehicle <b>102</b> information about vehicles in proximity to the vehicle <b>102</b> (e.g., vehicles in front of, on the side of, and/or behind the vehicle <b>102</b>). This functionality may be part of a cooperative adaptive cruise control functionality of the vehicle <b>102</b>.</p><p id="p-0192" num="0191">The network interface <b>1124</b> may include a SoC that provides modulation and demodulation functionality and enables the controller(s) <b>1136</b> to communicate over wireless networks. The network interface <b>1124</b> may include a radio frequency front-end for up-conversion from baseband to radio frequency, and down conversion from radio frequency to baseband. The frequency conversions may be performed through well-known processes, and/or may be performed using super-heterodyne processes. In some examples, the radio frequency front end functionality may be provided by a separate chip. The network interface may include wireless functionality for communicating over LTE, WCDMA, UMTS, GSM, CDMA2000, Bluetooth, Bluetooth LE, Wi-Fi, Z-Wave, ZigBee, LoRaWAN, and/or other wireless protocols.</p><p id="p-0193" num="0192">The vehicle <b>102</b> may further include data store(s) <b>1128</b> which may include off-chip (e.g., off the SoC(s) <b>1104</b>) storage. The data store(s) <b>1128</b> may include one or more storage elements including RAM, SRAM, DRAM, VRAM, Flash, hard disks, and/or other components and/or devices that may store at least one bit of data.</p><p id="p-0194" num="0193">The vehicle <b>102</b> may further include GNSS sensor(s) <b>1158</b>. The GNSS sensor(s) <b>1158</b> (e.g., GPS and/or assisted GPS sensors), to assist in mapping, perception, occupancy grid generation, and/or path planning functions. Any number of GNSS sensor(s) <b>1158</b> may be used, including, for example and without limitation, a GPS using a USB connector with an Ethernet to Serial (RS-232) bridge.</p><p id="p-0195" num="0194">The vehicle <b>102</b> may further include RADAR sensor(s) <b>1160</b>. The RADAR sensor(s) <b>1160</b> may be used by the vehicle <b>102</b> for long-range vehicle detection, even in darkness and/or severe weather conditions. RADAR functional safety levels may be ASIL B. The RADAR sensor(s) <b>1160</b> may use the CAN and/or the bus <b>1102</b> (e.g., to transmit data generated by the RADAR sensor(s) <b>1160</b>) for control and to access object tracking data, with access to Ethernet to access raw data in some examples. A wide variety of RADAR sensor types may be used. For example, and without limitation, the RADAR sensor(s) <b>1160</b> may be suitable for front, rear, and side RADAR use. In some example, Pulse Doppler RADAR sensor(s) are used.</p><p id="p-0196" num="0195">The RADAR sensor(s) <b>1160</b> may include different configurations, such as long range with narrow field of view, short range with wide field of view, short range side coverage, etc. In some examples, long-range RADAR may be used for adaptive cruise control functionality. The long-range RADAR systems may provide a broad field of view realized by two or more independent scans, such as within a 250 m range. The RADAR sensor(s) <b>1160</b> may help in distinguishing between static and moving objects, and may be used by ADAS systems for emergency brake assist and forward collision warning. Long-range RADAR sensors may include monostatic multimodal RADAR with multiple (e.g., six or more) fixed RADAR antennae and a high-speed CAN and FlexRay interface. In an example with six antennae, the central four antennae may create a focused beam pattern, designed to record the vehicle's <b>102</b> surroundings at higher speeds with minimal interference from traffic in adjacent lanes. The other two antennae may expand the field of view, making it possible to quickly detect vehicles entering or leaving the vehicle's <b>102</b> lane.</p><p id="p-0197" num="0196">Mid-range RADAR systems may include, as an example, a range of up to 1160 m (front) or 80 m (rear), and a field of view of up to 42 degrees (front) or 1150 degrees (rear). Short-range RADAR systems may include, without limitation, RADAR sensors designed to be installed at both ends of the rear bumper. When installed at both ends of the rear bumper, such a RADAR sensor systems may create two beams that constantly monitor the blind spot in the rear and next to the vehicle.</p><p id="p-0198" num="0197">Short-range RADAR systems may be used in an ADAS system for blind spot detection and/or lane change assist.</p><p id="p-0199" num="0198">The vehicle <b>102</b> may further include ultrasonic sensor(s) <b>1162</b>. The ultrasonic sensor(s) <b>1162</b>, which may be positioned at the front, back, and/or the sides of the vehicle <b>102</b>, may be used for park assist and/or to create and update an occupancy grid. A wide variety of ultrasonic sensor(s) <b>1162</b> may be used, and different ultrasonic sensor(s) <b>1162</b> may be used for different ranges of detection (e.g., 2.5 m, 4 m). The ultrasonic sensor(s) <b>1162</b> may operate at functional safety levels of ASIL B.</p><p id="p-0200" num="0199">The vehicle <b>102</b> may include LIDAR sensor(s) <b>1164</b>. The LIDAR sensor(s) <b>1164</b> may be used for object and pedestrian detection, emergency braking, collision avoidance, and/or other functions. The LIDAR sensor(s) <b>1164</b> may be functional safety level ASIL B. In some examples, the vehicle <b>102</b> may include multiple LIDAR sensors <b>1164</b> (e.g., two, four, six, etc.) that may use Ethernet (e.g., to provide data to a Gigabit Ethernet switch).</p><p id="p-0201" num="0200">In some examples, the LIDAR sensor(s) <b>1164</b> may be capable of providing a list of objects and their distances for a 360-degree field of view. Commercially available LIDAR sensor(s) <b>1164</b> may have an advertised range of approximately 102 m, with an accuracy of 2 cm-3 cm, and with support for a 102 Mbps Ethernet connection, for example. In some examples, one or more non-protruding LIDAR sensors <b>1164</b> may be used. In such examples, the LIDAR sensor(s) <b>1164</b> may be implemented as a small device that may be embedded into the front, rear, sides, and/or corners of the vehicle <b>102</b>. The LIDAR sensor(s) <b>1164</b>, in such examples, may provide up to a 1120-degree horizontal and 35-degree vertical field-of-view, with a 200 m range even for low-reflectivity objects. Front-mounted LIDAR sensor(s) <b>1164</b> may be configured for a horizontal field of view between 45 degrees and 135 degrees.</p><p id="p-0202" num="0201">In some examples, LIDAR technologies, such as 3D flash LIDAR, may also be used. 3D Flash LIDAR uses a flash of a laser as a transmission source, to illuminate vehicle surroundings up to approximately 200 m. A flash LIDAR unit includes a receptor, which records the laser pulse transit time and the reflected light on each pixel, which in turn corresponds to the range from the vehicle to the objects. Flash LIDAR may allow for highly accurate and distortion-free images of the surroundings to be generated with every laser flash. In some examples, four flash LIDAR sensors may be deployed, one at each side of the vehicle <b>102</b>. Available 3D flash LIDAR systems include a solid-state 3D staring array LIDAR camera with no moving parts other than a fan (e.g., a non-scanning LIDAR device). The flash LIDAR device may use a 5 nanosecond class I (eye-safe) laser pulse per frame and may capture the reflected laser light in the form of 3D range point clouds and co-registered intensity data. By using flash LIDAR, and because flash LIDAR is a solid-state device with no moving parts, the LIDAR sensor(s) <b>1164</b> may be less susceptible to motion blur, vibration, and/or shock.</p><p id="p-0203" num="0202">The vehicle may further include IMU sensor(s) <b>1166</b>. The IMU sensor(s) <b>1166</b> may be located at a center of the rear axle of the vehicle <b>102</b>, in some examples. The IMU sensor(s) <b>1166</b> may include, for example and without limitation, an accelerometer(s), a magnetometer(s), a gyroscope(s), a magnetic compass(es), and/or other sensor types. In some examples, such as in six-axis applications, the IMU sensor(s) <b>1166</b> may include accelerometers and gyroscopes, while in nine-axis applications, the IMU sensor(s) <b>1166</b> may include accelerometers, gyroscopes, and magnetometers.</p><p id="p-0204" num="0203">In some embodiments, the IMU sensor(s) <b>1166</b> may be implemented as a miniature, high performance GPS-Aided Inertial Navigation System (GPS/INS) that combines micro-electro-mechanical systems (MEMS) inertial sensors, a high-sensitivity GPS receiver, and advanced Kalman filtering algorithms to provide estimates of position, velocity, and attitude. As such, in some examples, the IMU sensor(s) <b>1166</b> may enable the vehicle <b>102</b> to estimate heading without requiring input from a magnetic sensor by directly observing and correlating the changes in velocity from GPS to the IMU sensor(s) <b>1166</b>. In some examples, the IMU sensor(s) <b>1166</b> and the GNSS sensor(s) <b>1158</b> may be combined in a single integrated unit.</p><p id="p-0205" num="0204">The vehicle may include microphone(s) <b>1196</b> placed in and/or around the vehicle <b>102</b>. The microphone(s) <b>1196</b> may be used for emergency vehicle detection and identification, among other things.</p><p id="p-0206" num="0205">The vehicle may further include any number of camera types, including stereo camera(s) <b>1168</b>, wide-view camera(s) <b>1170</b>, infrared camera(s) <b>1172</b>, surround camera(s) <b>1174</b>, long-range and/or mid-range camera(s) <b>1198</b>, and/or other camera types. The cameras may be used to capture image data around an entire periphery of the vehicle <b>102</b>. The types of cameras used depends on the embodiments and requirements for the vehicle <b>102</b>, and any combination of camera types may be used to provide the necessary coverage around the vehicle <b>102</b>. In addition, the number of cameras may differ depending on the embodiment. For example, the vehicle may include six cameras, seven cameras, ten cameras, twelve cameras, and/or another number of cameras. The cameras may support, as an example and without limitation, Gigabit Multimedia Serial Link (GMSL) and/or Gigabit Ethernet. Each of the camera(s) is described with more detail herein with respect to <figref idref="DRAWINGS">FIG. <b>11</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>.</p><p id="p-0207" num="0206">The vehicle <b>102</b> may further include vibration sensor(s) <b>1142</b>. The vibration sensor(s) <b>1142</b> may measure vibrations of components of the vehicle, such as the axle(s). For example, changes in vibrations may indicate a change in road surfaces. In another example, when two or more vibration sensors <b>1142</b> are used, the differences between the vibrations may be used to determine friction or slippage of the road surface (e.g., when the difference in vibration is between a power-driven axle and a freely rotating axle).</p><p id="p-0208" num="0207">The vehicle <b>102</b> may include an ADAS system <b>1138</b>. The ADAS system <b>1138</b> may include a SoC, in some examples. The ADAS system <b>1138</b> may include autonomous/adaptive/automatic cruise control (ACC), cooperative adaptive cruise control (CACC), forward crash warning (FCW), automatic emergency braking (AEB), lane departure warnings (LDW), lane keep assist (LKA), blind spot warning (BSW), rear cross-traffic warning (RCTW), collision warning systems (CWS), lane centering (LC), and/or other features and functionality.</p><p id="p-0209" num="0208">The ACC systems may use RADAR sensor(s) <b>1160</b>, LIDAR sensor(s) <b>1164</b>, and/or a camera(s). The ACC systems may include longitudinal ACC and/or lateral ACC. Longitudinal ACC monitors and controls the distance to the vehicle immediately ahead of the vehicle <b>102</b> and automatically adjust the vehicle speed to maintain a safe distance from vehicles ahead. Lateral ACC performs distance keeping, and advises the vehicle <b>102</b> to change lanes when necessary. Lateral ACC is related to other ADAS applications such as LCA and CWS.</p><p id="p-0210" num="0209">CACC uses information from other vehicles that may be received via the network interface <b>1124</b> and/or the wireless antenna(s) <b>1126</b> from other vehicles via a wireless link, or indirectly, over a network connection (e.g., over the Internet). Direct links may be provided by a vehicle-to-vehicle (V2V) communication link, while indirect links may be infrastructure-to-vehicle (I2V) communication link. In general, the V2V communication concept provides information about the immediately preceding vehicles (e.g., vehicles immediately ahead of and in the same lane as the vehicle <b>102</b>), while the I2V communication concept provides information about traffic further ahead. CACC systems may include either or both I2V and V2V information sources. Given the information of the vehicles ahead of the vehicle <b>102</b>, CACC may be more reliable and it has potential to improve traffic flow smoothness and reduce congestion on the road.</p><p id="p-0211" num="0210">FCW systems are designed to alert the driver to a hazard, so that the driver may take corrective action. FCW systems use a front-facing camera and/or RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to driver feedback, such as a display, speaker, and/or vibrating component. FCW systems may provide a warning, such as in the form of a sound, visual warning, vibration and/or a quick brake pulse.</p><p id="p-0212" num="0211">AEB systems detect an impending forward collision with another vehicle or other object, and may automatically apply the brakes if the driver does not take corrective action within a specified time or distance parameter. AEB systems may use front-facing camera(s) and/or RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC. When the AEB system detects a hazard, it typically first alerts the driver to take corrective action to avoid the collision and, if the driver does not take corrective action, the AEB system may automatically apply the brakes in an effort to prevent, or at least mitigate, the impact of the predicted collision. AEB systems, may include techniques such as dynamic brake support and/or crash imminent braking.</p><p id="p-0213" num="0212">LDW systems provide visual, audible, and/or tactile warnings, such as steering wheel or seat vibrations, to alert the driver when the vehicle <b>102</b> crosses lane markings. A LDW system does not activate when the driver indicates an intentional lane departure, by activating a turn signal. LDW systems may use front-side facing cameras, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to driver feedback, such as a display, speaker, and/or vibrating component.</p><p id="p-0214" num="0213">LKA systems are a variation of LDW systems. LKA systems provide steering input or braking to correct the vehicle <b>102</b> if the vehicle <b>102</b> starts to exit the lane.</p><p id="p-0215" num="0214">BSW systems detects and warn the driver of vehicles in an automobile's blind spot. BSW systems may provide a visual, audible, and/or tactile alert to indicate that merging or changing lanes is unsafe. The system may provide an additional warning when the driver uses a turn signal. BSW systems may use rear-side facing camera(s) and/or RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to driver feedback, such as a display, speaker, and/or vibrating component.</p><p id="p-0216" num="0215">RCTW systems may provide visual, audible, and/or tactile notification when an object is detected outside the rear-camera range when the vehicle <b>102</b> is backing up. Some RCTW systems include AEB to ensure that the vehicle brakes are applied to avoid a crash. RCTW systems may use one or more rear-facing RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to driver feedback, such as a display, speaker, and/or vibrating component.</p><p id="p-0217" num="0216">Conventional ADAS systems may be prone to false positive results which may be annoying and distracting to a driver, but typically are not catastrophic, because the ADAS systems alert the driver and allow the driver to decide whether a safety condition truly exists and act accordingly. However, in an autonomous vehicle <b>102</b>, the vehicle <b>102</b> itself must, in the case of conflicting results, decide whether to heed the result from a primary computer or a secondary computer (e.g., a first controller <b>1136</b> or a second controller <b>1136</b>). For example, in some embodiments, the ADAS system <b>1138</b> may be a backup and/or secondary computer for providing perception information to a backup computer rationality module. The backup computer rationality monitor may run a redundant diverse software on hardware components to detect faults in perception and dynamic driving tasks. Outputs from the ADAS system <b>1138</b> may be provided to a supervisory MCU. If outputs from the primary computer and the secondary computer conflict, the supervisory MCU must determine how to reconcile the conflict to ensure safe operation.</p><p id="p-0218" num="0217">In some examples, the primary computer may be configured to provide the supervisory MCU with a confidence score, indicating the primary computer's confidence in the chosen result. If the confidence score exceeds a threshold, the supervisory MCU may follow the primary computer's direction, regardless of whether the secondary computer provides a conflicting or inconsistent result. Where the confidence score does not meet the threshold, and where the primary and secondary computer indicate different results (e.g., the conflict), the supervisory MCU may arbitrate between the computers to determine the appropriate outcome.</p><p id="p-0219" num="0218">The supervisory MCU may be configured to run a neural network(s) that is trained and configured to determine, based on outputs from the primary computer and the secondary computer, conditions under which the secondary computer provides false alarms. Thus, the neural network(s) in the supervisory MCU may learn when the secondary computer's output may be trusted, and when it cannot. For example, when the secondary computer is a RADAR-based FCW system, a neural network(s) in the supervisory MCU may learn when the FCW system is identifying metallic objects that are not, in fact, hazards, such as a drainage grate or manhole cover that triggers an alarm. Similarly, when the secondary computer is a camera-based LDW system, a neural network in the supervisory MCU may learn to override the LDW when bicyclists or pedestrians are present and a lane departure is, in fact, the safest maneuver. In embodiments that include a neural network(s) running on the supervisory MCU, the supervisory MCU may include at least one of a DLA or GPU suitable for running the neural network(s) with associated memory. In preferred embodiments, the supervisory MCU may comprise and/or be included as a component of the SoC(s) <b>1104</b>.</p><p id="p-0220" num="0219">In other examples, ADAS system <b>1138</b> may include a secondary computer that performs ADAS functionality using traditional rules of computer vision. As such, the secondary computer may use classic computer vision rules (if-then), and the presence of a neural network(s) in the supervisory MCU may improve reliability, safety and performance. For example, the diverse implementation and intentional non-identity makes the overall system more fault-tolerant, especially to faults caused by software (or software-hardware interface) functionality. For example, if there is a software bug or error in the software running on the primary computer, and the non-identical software code running on the secondary computer provides the same overall result, the supervisory MCU may have greater confidence that the overall result is correct, and the bug in software or hardware on primary computer is not causing material error.</p><p id="p-0221" num="0220">In some examples, the output of the ADAS system <b>1138</b> may be fed into the primary computer's perception block and/or the primary computer's dynamic driving task block. For example, if the ADAS system <b>1138</b> indicates a forward crash warning due to an object immediately ahead, the perception block may use this information when identifying objects. In other examples, the secondary computer may have its own neural network which is trained and thus reduces the risk of false positives, as described herein.</p><p id="p-0222" num="0221">The vehicle <b>102</b> may further include the infotainment SoC <b>1130</b> (e.g., an in-vehicle infotainment system (IVI)). Although illustrated and described as a SoC, the infotainment system may not be a SoC, and may include two or more discrete components. The infotainment SoC <b>1130</b> may include a combination of hardware and software that may be used to provide audio (e.g., music, a personal digital assistant, navigational instructions, news, radio, etc.), video (e.g., TV, movies, streaming, etc.), phone (e.g., hands-free calling), network connectivity (e.g., LTE, Wi-Fi, etc.), and/or information services (e.g., navigation systems, rear-parking assistance, a radio data system, vehicle related information such as fuel level, total distance covered, brake fuel level, oil level, door open/close, air filter information, etc.) to the vehicle <b>102</b>. For example, the infotainment SoC <b>1130</b> may radios, disk players, navigation systems, video players, USB and Bluetooth connectivity, carputers, in-car entertainment, Wi-Fi, steering wheel audio controls, hands free voice control, a heads-up display (HUD), an HMI display <b>1134</b>, a telematics device, a control panel (e.g., for controlling and/or interacting with various components, features, and/or systems), and/or other components. The infotainment SoC <b>1130</b> may further be used to provide information (e.g., visual and/or audible) to a user(s) of the vehicle, such as information from the ADAS system <b>1138</b>, autonomous driving information such as planned vehicle maneuvers, trajectories, surrounding environment information (e.g., intersection information, vehicle information, road information, etc.), and/or other information.</p><p id="p-0223" num="0222">The infotainment SoC <b>1130</b> may include GPU functionality. The infotainment SoC <b>1130</b> may communicate over the bus <b>1102</b> (e.g., CAN bus, Ethernet, etc.) with other devices, systems, and/or components of the vehicle <b>102</b>. In some examples, the infotainment SoC <b>1130</b> may be coupled to a supervisory MCU such that the GPU of the infotainment system may perform some self-driving functions in the event that the primary controller(s) <b>1136</b> (e.g., the primary and/or backup computers of the vehicle <b>102</b>) fail. In such an example, the infotainment SoC <b>1130</b> may put the vehicle <b>102</b> into a chauffeur to safe stop mode, as described herein.</p><p id="p-0224" num="0223">The vehicle <b>102</b> may further include an instrument cluster <b>1132</b> (e.g., a digital dash, an electronic instrument cluster, a digital instrument panel, etc.). The instrument cluster <b>1132</b> may include a controller and/or supercomputer (e.g., a discrete controller or supercomputer). The instrument cluster <b>1132</b> may include a set of instrumentation such as a speedometer, fuel level, oil pressure, tachometer, odometer, turn indicators, gearshift position indicator, seat belt warning light(s), parking-brake warning light(s), engine-malfunction light(s), airbag (SRS) system information, lighting controls, safety system controls, navigation information, etc. In some examples, information may be displayed and/or shared among the infotainment SoC <b>1130</b> and the instrument cluster <b>1132</b>. In other words, the instrument cluster <b>1132</b> may be included as part of the infotainment SoC <b>1130</b>, or vice versa.</p><p id="p-0225" num="0224"><figref idref="DRAWINGS">FIG. <b>11</b>D</figref> is a system diagram for communication between cloud-based server(s) and the example autonomous vehicle <b>102</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, in accordance with some embodiments of the present disclosure. The system <b>1176</b> may include server(s) <b>1178</b>, network(s) <b>1190</b>, and vehicles, including the vehicle <b>102</b>. The server(s) <b>1178</b> may include a plurality of GPUs <b>1184</b>(A)-<b>1184</b>(H) (collectively referred to herein as GPUs <b>1184</b>), PCIe switches <b>1182</b>(A)-<b>1182</b>(H) (collectively referred to herein as PCIe switches <b>1182</b>), and/or CPUs <b>1180</b>(A)-<b>1180</b>(B) (collectively referred to herein as CPUs <b>1180</b>). The GPUs <b>1184</b>, the CPUs <b>1180</b>, and the PCIe switches may be interconnected with high-speed interconnects such as, for example and without limitation, NVLink interfaces <b>1188</b> developed by NVIDIA and/or PCIe connections <b>1186</b>. In some examples, the GPUs <b>1184</b> are connected via NVLink and/or NVSwitch SoC and the GPUs <b>1184</b> and the PCIe switches <b>1182</b> are connected via PCIe interconnects. Although eight GPUs <b>1184</b>, two CPUs <b>1180</b>, and two PCIe switches are illustrated, this is not intended to be limiting. Depending on the embodiment, each of the server(s) <b>1178</b> may include any number of GPUs <b>1184</b>, CPUs <b>1180</b>, and/or PCIe switches. For example, the server(s) <b>1178</b> may each include eight, sixteen, thirty-two, and/or more GPUs <b>1184</b>.</p><p id="p-0226" num="0225">The server(s) <b>1178</b> may receive, over the network(s) <b>1190</b> and from the vehicles, image data representative of images showing unexpected or changed road conditions, such as recently commenced road-work. The server(s) <b>1178</b> may transmit, over the network(s) <b>1190</b> and to the vehicles, neural networks <b>1192</b>, updated neural networks <b>1192</b>, and/or map information <b>1194</b>, including information regarding traffic and road conditions. The updates to the map information <b>1194</b> may include updates for the HD map <b>1122</b>, such as information regarding construction sites, potholes, detours, flooding, and/or other obstructions. In some examples, the neural networks <b>1192</b>, the updated neural networks <b>1192</b>, and/or the map information <b>1194</b> may have resulted from new training and/or experiences represented in data received from any number of vehicles in the environment, and/or based on training performed at a datacenter (e.g., using the server(s) <b>1178</b> and/or other servers).</p><p id="p-0227" num="0226">The server(s) <b>1178</b> may be used to train machine learning models (e.g., neural networks) based on training data. The training data may be generated by the vehicles, and/or may be generated in a simulation (e.g., using a game engine). In some examples, the training data is tagged (e.g., where the neural network benefits from supervised learning) and/or undergoes other pre-processing, while in other examples the training data is not tagged and/or pre-processed (e.g., where the neural network does not require supervised learning). Once the machine learning models are trained, the machine learning models may be used by the vehicles (e.g., transmitted to the vehicles over the network(s) <b>1190</b>, and/or the machine learning models may be used by the server(s) <b>1178</b> to remotely monitor the vehicles.</p><p id="p-0228" num="0227">In some examples, the server(s) <b>1178</b> may receive data from the vehicles and apply the data to up-to-date real-time neural networks for real-time intelligent inferencing. The server(s) <b>1178</b> may include deep-learning supercomputers and/or dedicated AI computers powered by GPU(s) <b>1184</b>, such as a DGX and DGX Station machines developed by NVIDIA. However, in some examples, the server(s) <b>1178</b> may include deep learning infrastructure that use only CPU-powered datacenters.</p><p id="p-0229" num="0228">The deep-learning infrastructure of the server(s) <b>1178</b> may be capable of fast, real-time inferencing, and may use that capability to evaluate and verify the health of the processors, software, and/or associated hardware in the vehicle <b>102</b>. For example, the deep-learning infrastructure may receive periodic updates from the vehicle <b>102</b>, such as a sequence of images and/or objects that the vehicle <b>102</b> has located in that sequence of images (e.g., via computer vision and/or other machine learning object classification techniques). The deep-learning infrastructure may run its own neural network to identify the objects and compare them with the objects identified by the vehicle <b>102</b> and, if the results do not match and the infrastructure concludes that the AI in the vehicle <b>102</b> is malfunctioning, the server(s) <b>1178</b> may transmit a signal to the vehicle <b>102</b> instructing a fail-safe computer of the vehicle <b>102</b> to assume control, notify the passengers, and complete a safe parking maneuver.</p><p id="p-0230" num="0229">For inferencing, the server(s) <b>1178</b> may include the GPU(s) <b>1184</b> and one or more programmable inference accelerators (e.g., NVIDIA's TensorRT <b>3</b>). The combination of GPU-powered servers and inference acceleration may make real-time responsiveness possible. In other examples, such as where performance is less critical, servers powered by CPUs, FPGAs, and other processors may be used for inferencing.</p><heading id="h-0007" level="1">Example Computing Device</heading><p id="p-0231" num="0230"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram of an example computing device <b>1200</b> suitable for use in implementing some embodiments of the present disclosure. Computing device <b>1200</b> may include a bus <b>1202</b> that directly or indirectly couples the following devices: memory <b>1204</b>, one or more central processing units (CPUs) <b>1206</b>, one or more graphics processing units (GPUs) <b>1208</b>, a communication interface <b>1210</b>, input/output (I/O) ports <b>1212</b>, input/output components <b>1214</b>, a power supply <b>1216</b>, and one or more presentation components <b>1218</b> (e.g., display(s)).</p><p id="p-0232" num="0231">Although the various blocks of <figref idref="DRAWINGS">FIG. <b>12</b></figref> are shown as connected via the bus <b>1202</b> with lines, this is not intended to be limiting and is for clarity only. For example, in some embodiments, a presentation component <b>1218</b>, such as a display device, may be considered an I/O component <b>1214</b> (e.g., if the display is a touch screen). As another example, the CPUs <b>1206</b> and/or GPUs <b>1208</b> may include memory (e.g., the memory <b>1204</b> may be representative of a storage device in addition to the memory of the GPUs <b>1208</b>, the CPUs <b>1206</b>, and/or other components). In other words, the computing device of <figref idref="DRAWINGS">FIG. <b>12</b></figref> is merely illustrative. Distinction is not made between such categories as &#x201c;workstation,&#x201d; &#x201c;server,&#x201d; &#x201c;laptop,&#x201d; &#x201c;desktop,&#x201d; &#x201c;tablet,&#x201d; &#x201c;client device,&#x201d; &#x201c;mobile device,&#x201d; &#x201c;hand-held device,&#x201d; &#x201c;game console,&#x201d; &#x201c;electronic control unit (ECU),&#x201d; &#x201c;virtual reality system,&#x201d; and/or other device or system types, as all are contemplated within the scope of the computing device of <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0233" num="0232">The bus <b>1202</b> may represent one or more busses, such as an address bus, a data bus, a control bus, or a combination thereof. The bus <b>1202</b> may include one or more bus types, such as an industry standard architecture (ISA) bus, an extended industry standard architecture (EISA) bus, a video electronics standards association (VESA) bus, a peripheral component interconnect (PCI) bus, a peripheral component interconnect express (PCIe) bus, and/or another type of bus.</p><p id="p-0234" num="0233">The memory <b>1204</b> may include any of a variety of computer-readable media. The computer-readable media may be any available media that may be accessed by the computing device <b>1200</b>. The computer-readable media may include both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, the computer-readable media may comprise computer-storage media and communication media.</p><p id="p-0235" num="0234">The computer-storage media may include both volatile and nonvolatile media and/or removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, and/or other data types. For example, the memory <b>1204</b> may store computer-readable instructions (e.g., that represent a program(s) and/or a program element(s), such as an operating system. Computer-storage media may include, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which may be used to store the desired information and which may be accessed by computing device <b>1200</b>. As used herein, computer storage media does not comprise signals per se.</p><p id="p-0236" num="0235">The communication media may embody computer-readable instructions, data structures, program modules, and/or other data types in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term &#x201c;modulated data signal&#x201d; may refer to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, the communication media may include wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer-readable media.</p><p id="p-0237" num="0236">The CPU(s) <b>1206</b> may be configured to execute the computer-readable instructions to control one or more components of the computing device <b>1200</b> to perform one or more of the methods and/or processes described herein. The CPU(s) <b>1206</b> may each include one or more cores (e.g., one, two, four, eight, twenty-eight, seventy-two, etc.) that are capable of handling a multitude of software threads simultaneously. The CPU(s) <b>1206</b> may include any type of processor, and may include different types of processors depending on the type of computing device <b>1200</b> implemented (e.g., processors with fewer cores for mobile devices and processors with more cores for servers). For example, depending on the type of computing device <b>1200</b>, the processor may be an ARM processor implemented using Reduced Instruction Set Computing (RISC) or an x86 processor implemented using Complex Instruction Set Computing (CISC). The computing device <b>1200</b> may include one or more CPUs <b>1206</b> in addition to one or more microprocessors or supplementary co-processors, such as math co-processors.</p><p id="p-0238" num="0237">The GPU(s) <b>1208</b> may be used by the computing device <b>1200</b> to render graphics (e.g., 3D graphics). The GPU(s) <b>1208</b> may include hundreds or thousands of cores that are capable of handling hundreds or thousands of software threads simultaneously. The GPU(s) <b>1208</b> may generate pixel data for output images in response to rendering commands (e.g., rendering commands from the CPU(s) <b>1206</b> received via a host interface). The GPU(s) <b>1208</b> may include graphics memory, such as display memory, for storing pixel data. The display memory may be included as part of the memory <b>1204</b>. The GPU(s) <b>708</b> may include two or more GPUs operating in parallel (e.g., via a link). When combined together, each GPU <b>1208</b> may generate pixel data for different portions of an output image or for different output images (e.g., a first GPU for a first image and a second GPU for a second image). Each GPU may include its own memory, or may share memory with other GPUs.</p><p id="p-0239" num="0238">In examples where the computing device <b>1200</b> does not include the GPU(s) <b>1208</b>, the CPU(s) <b>1206</b> may be used to render graphics.</p><p id="p-0240" num="0239">The communication interface <b>1210</b> may include one or more receivers, transmitters, and/or transceivers that enable the computing device <b>700</b> to communicate with other computing devices via an electronic communication network, included wired and/or wireless communications. The communication interface <b>1210</b> may include components and functionality to enable communication over any of a number of different networks, such as wireless networks (e.g., Wi-Fi, Z-Wave, Bluetooth, Bluetooth LE, ZigBee, etc.), wired networks (e.g., communicating over Ethernet), low-power wide-area networks (e.g., LoRaWAN, SigFox, etc.), and/or the Internet.</p><p id="p-0241" num="0240">The I/O ports <b>1212</b> may enable the computing device <b>1200</b> to be logically coupled to other devices including the I/O components <b>1214</b>, the presentation component(s) <b>1218</b>, and/or other components, some of which may be built in to (e.g., integrated in) the computing device <b>1200</b>. Illustrative I/O components <b>1214</b> include a microphone, mouse, keyboard, joystick, game pad, game controller, satellite dish, scanner, printer, wireless device, etc. The I/O components <b>1214</b> may provide a natural user interface (NUI) that processes air gestures, voice, or other physiological inputs generated by a user. In some instances, inputs may be transmitted to an appropriate network element for further processing. An NUI may implement any combination of speech recognition, stylus recognition, facial recognition, biometric recognition, gesture recognition both on screen and adjacent to the screen, air gestures, head and eye tracking, and touch recognition (as described in more detail below) associated with a display of the computing device <b>1200</b>. The computing device <b>1200</b> may be include depth cameras, such as stereoscopic camera systems, infrared camera systems, RGB camera systems, touchscreen technology, and combinations of these, for gesture detection and recognition. Additionally, the computing device <b>1200</b> may include accelerometers or gyroscopes (e.g., as part of an inertia measurement unit (IMU)) that enable detection of motion. In some examples, the output of the accelerometers or gyroscopes may be used by the computing device <b>1200</b> to render immersive augmented reality or virtual reality.</p><p id="p-0242" num="0241">The power supply <b>1216</b> may include a hard-wired power supply, a battery power supply, or a combination thereof. The power supply <b>1216</b> may provide power to the computing device <b>1200</b> to enable the components of the computing device <b>1200</b> to operate.</p><p id="p-0243" num="0242">The presentation component(s) <b>1218</b> may include a display (e.g., a monitor, a touch screen, a television screen, a heads-up-display (HUD), other display types, or a combination thereof), speakers, and/or other presentation components. The presentation component(s) <b>1218</b> may receive data from other components (e.g., the GPU(s) <b>1208</b>, the CPU(s) <b>1206</b>, etc.), and output the data (e.g., as an image, video, sound, etc.).</p><p id="p-0244" num="0243">The disclosure may be described in the general context of computer code or machine-useable instructions, including computer-executable instructions such as program modules, being executed by a computer or other machine, such as a personal data assistant or other handheld device. Generally, program modules including routines, programs, objects, components, data structures, etc., refer to code that perform particular tasks or implement particular abstract data types. The disclosure may be practiced in a variety of system configurations, including hand-held devices, consumer electronics, general-purpose computers, more specialty computing devices, etc. The disclosure may also be practiced in distributed computing environments where tasks are performed by remote-processing devices that are linked through a communications network.</p><p id="p-0245" num="0244">As used herein, a recitation of &#x201c;and/or&#x201d; with respect to two or more elements should be interpreted to mean only one element, or a combination of elements. For example, &#x201c;element A, element B, and/or element C&#x201d; may include only element A, only element B, only element C, element A and element B, element A and element C, element B and element C, or elements A, B, and C. In addition, &#x201c;at least one of element A or element B&#x201d; may include at least one of element A, at least one of element B, or at least one of element A and at least one of element B. Further, &#x201c;at least one of element A and element B&#x201d; may include at least one of element A, at least one of element B, or at least one of element A and at least one of element B.</p><p id="p-0246" num="0245">The subject matter of the present disclosure is described with specificity herein to meet statutory requirements. However, the description itself is not intended to limit the scope of this disclosure. Rather, the inventors have contemplated that the claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the terms &#x201c;step&#x201d; and/or &#x201c;block&#x201d; may be used herein to connote different elements of methods employed, the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order of individual steps is explicitly described.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>receiving, from a simulation component, simulation data representing a simulated environment corresponding to a virtual representation of an autonomous or semi-autonomous machine;</claim-text><claim-text>generating, using the simulation data, virtual sensor data representing the simulated environment perceived using at least one virtual sensor of the virtual representation of the autonomous or semi-autonomous machine within the simulated environment;</claim-text><claim-text>determining, using one or more machine learning models executed using hardware corresponding to the autonomous or semi-autonomous machine, at least one operation for the virtual representation based at least on the virtual sensor data; and</claim-text><claim-text>transmitting, to the simulation component, operative data representing the at least one operation for the virtual representation.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual sensor data is generated using simulation software executed using one or more computing devices.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein:<claim-text>the hardware and the one or more computing devices are included in a simulator component; and</claim-text><claim-text>the simulator component communicates with the simulation component.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein:<claim-text>when integrated into the autonomous or semi-autonomous machine, the hardware communicates with one or more other components of the autonomous or semi-autonomous machine using at least one of a communication type or a communication protocol; and</claim-text><claim-text>during a simulation corresponding to the simulation data, the hardware communicates with the one or more computing devices using the at least one of the communication type or the communication protocol.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>generating encoded sensor data by encoding the virtual sensor data using a sensor data format that corresponds to real-world sensor data generated using a real-world sensor of the autonomous or semi-autonomous machine,</claim-text><claim-text>wherein the determining the at least one operation is based at least on the encoded sensor data.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual sensor data includes a sensor data format that corresponds to real-world sensor data generated using a real-world sensor of the autonomous or semi-autonomous machine.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>generating, using the simulation data, additional virtual sensor data representing the simulated environment perceived by at least one additional virtual sensor of the virtual representation; and</claim-text><claim-text>determining, using the one or more machine learning models executed using the hardware corresponding to the autonomous or semi-autonomous machine, at least one additional operation for the virtual representation based at least on the additional virtual sensor data,</claim-text><claim-text>wherein the operative data further represents the at least one additional operation for the virtual representation.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the virtual representation comprises at least one of a virtual vehicle or a virtual robot that simulates the autonomous or semi-autonomous machine.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the simulation data includes virtual data and real-world data, and the simulated environment includes one or more representations corresponding to the virtual data and one or more representations corresponding to the real-world data.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A method comprising:<claim-text>receiving, using hardware corresponding to an autonomous or semi-autonomous machine and from one or more computing devices of a simulation system, virtual sensor data representing a simulated environment perceived by at least one virtual sensor of a virtual representation of the autonomous or semi-autonomous machine within the simulated environment;</claim-text><claim-text>determining, using the hardware and one or more machine learning models, at least one operation for the virtual representation based at least on the virtual sensor data; and</claim-text><claim-text>transmitting, using the hardware and to at least one computing device of the one or more computing devices, operative data representing the at least one operation of the virtual representation.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein:<claim-text>the hardware and the one or more computing devices are included in a simulator component; and</claim-text><claim-text>the simulator component communicates with the simulation component.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein:<claim-text>when in deployment within the autonomous or semi-autonomous machine, the hardware communicates with one or more other components of the autonomous or semi-autonomous machine using at least one of a communication type or a communication protocol; and</claim-text><claim-text>during simulation, the hardware communicates with the one or more computing devices of the simulation system using the at least one of the communication type or the communication protocol.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the virtual sensor data is generated using simulation software executed using the one or more computing devices.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the virtual sensor data includes a sensor data format that corresponds to real-world sensor data generated using a real-world sensor of the autonomous or semi-autonomous machine.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:<claim-text>receiving, using the hardware and the one or more computing devices, additional virtual sensor data representing the simulated environment perceived by at least one additional virtual sensor of the virtual representation; and</claim-text><claim-text>determining, using the hardware and the one or more machine learning models, at least one additional operation for the virtual representation based at least on the additional virtual sensor data,</claim-text><claim-text>wherein the operative data further represents the at least one additional operation for the virtual representation.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the virtual representation corresponds to at least one of a virtual vehicle or a virtual robot that simulates the autonomous or semi-autonomous machine.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the simulated environment includes representations of virtual data augmented with representations of real-world data.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A processor for installation in an autonomous or semi-autonomous machine, the processor comprising one or more processing units to:<claim-text>receive, from one or more computing devices, virtual sensor data representing a simulated environment perceived using at least one virtual sensor of a virtual representation of the autonomous or semi-autonomous machine within the simulated environment;</claim-text><claim-text>determine, using one or more machine learning models, at least one operation for the virtual representation based at least on the virtual sensor data; and</claim-text><claim-text>transmit, to at least one computing device of the one or more computing devices, operative data representing the at least one operation of the virtual representation.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The processor of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein:<claim-text>the processor is included in hardware corresponding to the autonomous or semi-autonomous machine;</claim-text><claim-text>when installed in the autonomous or semi-autonomous machine, the hardware communicates with one or more other components of the autonomous or semi-autonomous machine using at least one of a communication type or a communication protocol; and</claim-text><claim-text>during simulation, the hardware communicates with the one or more computing devices using the at least one of the communication type or the communication protocol.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The processor of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the processor is comprised in at least one of:<claim-text>a control system for an autonomous or semi-autonomous machine;</claim-text><claim-text>a perception system for an autonomous or semi-autonomous machine;</claim-text><claim-text>a system for performing simulation operations;</claim-text><claim-text>a system for performing digital twin operations;</claim-text><claim-text>a system for performing real-time streaming;</claim-text><claim-text>a system for generating or presenting virtual reality (VR) content;</claim-text><claim-text>a system for generating or presenting augmented reality (AR) content;</claim-text><claim-text>a system for generating or presenting mixed reality (MR) content;</claim-text><claim-text>a system for performing light transport simulation;</claim-text><claim-text>a system for performing collaborative content creation for 3D assets;</claim-text><claim-text>a system for performing deep learning operations;</claim-text><claim-text>a system implemented using an edge device;</claim-text><claim-text>a system implemented using a robot;</claim-text><claim-text>a system for performing conversational AI operations;</claim-text><claim-text>a system for generating synthetic data;</claim-text><claim-text>a system incorporating one or more virtual machines (VMs);</claim-text><claim-text>a system implemented at least partially in a data center; or</claim-text><claim-text>a system implemented at least partially using cloud computing resources.</claim-text></claim-text></claim></claims></us-patent-application>