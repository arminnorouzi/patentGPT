<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004670A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004670</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17664135</doc-number><date>20220519</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9535</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6227</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9535</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0421</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0643</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SECURE MULTI-PARTY ENCRYPTED IDENTIFIER DATA SHARING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17390938</doc-number><date>20210731</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11347886</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17664135</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>63216888</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Snowflake Inc.</orgname><address><city>Bozeman</city><state>MT</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Langseth</last-name><first-name>Justin</first-name><address><city>Kailua</city><state>HI</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Rainey</last-name><first-name>Michael Earle</first-name><address><city>Pasco</city><state>WA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Stratton, JR.</last-name><first-name>William L.</first-name><address><city>Atlanta</city><state>GA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Embodiments of the present disclosure may provide a data clean room allowing encryption based data analysis across multiple accounts, including different provider database user accounts that provide user data and a network service and a requesting user that generates one or more clean room requests. The data clean room may also restrict which data may be used in the analysis and may restrict the output.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="98.98mm" wi="158.75mm" file="US20230004670A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="235.54mm" wi="157.06mm" orientation="landscape" file="US20230004670A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="223.86mm" wi="160.44mm" orientation="landscape" file="US20230004670A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="236.98mm" wi="159.85mm" orientation="landscape" file="US20230004670A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="214.55mm" wi="151.38mm" orientation="landscape" file="US20230004670A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="236.98mm" wi="153.08mm" orientation="landscape" file="US20230004670A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.27mm" wi="157.90mm" orientation="landscape" file="US20230004670A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="210.31mm" wi="149.44mm" file="US20230004670A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="224.37mm" wi="154.18mm" file="US20230004670A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="235.12mm" wi="108.71mm" file="US20230004670A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="226.14mm" wi="162.64mm" file="US20230004670A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="244.94mm" wi="160.02mm" file="US20230004670A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="220.73mm" wi="106.17mm" file="US20230004670A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="236.98mm" wi="155.70mm" file="US20230004670A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a Continuation of U.S. patent application Ser. No. 17/390,938 Jul. 31, 2021, which claims the benefit of priority to U.S. Provisional Patent Application Ser. No. 63/216,888, filed Jun. 30, 2021, the contents of which are hereby incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure generally relates to securely analyzing data using a data clean room of a distributed database.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Currently, most digital advertising is performed using third-party cookies. Cookies are small pieces of data generated and sent from a web server and stored on the user's computer by the user's web browser that are used to gather data about customers' habits based on their website browsing history. Because of privacy concerns, the use of cookies is being restricted. Companies may want to create target groups for advertising or marketing efforts for specific audience segments. To do so, companies may want to compare their customer information with that of other companies to see if their customer lists overlap for the creation of such target groups. Thus, companies may want to perform data analysis, such as an overlap analysis, of their customers or other data.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">Various ones of the appended drawings merely illustrate example embodiments of the present disclosure and should not be considered as limiting its scope.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing environment in which a network-based database system can data clean rooms, according to some example embodiments.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating components of a compute service manager, according to some example embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating components of an execution platform, according to some example embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a computing environment conceptually illustrating an example software architecture executing a user defined function (UDF) by a process running on a given execution node of the execution platform, according to some example embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of two separate accounts in a data warehouse system, according to some example embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating a method for operating a data clean room, according to some example embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> a secure encryption-based clean room architecture, according to some example embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a flow diagram of a method for implementing a secure encryption-based clean room architecture, according to some example embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref> show an example distributed database architecture for implementing multi-entity database clean rooms, according to some example embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a flow diagram of an example method for implementing a multi-entity encryption-based data clean room queries, according to some example embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a diagrammatic representation of a machine in the form of a computer system within which a set of instructions may be executed for causing the machine to perform any one or more of the methodologies discussed herein, in accordance with some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">The description that follows includes systems, methods, techniques, instruction sequences, and computing machine program products that embody illustrative embodiments of the disclosure. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident, however, to those skilled in the art, that embodiments of the inventive subject matter may be practiced without these specific details. In general, well-known instruction instances, protocols, structures, and techniques are not necessarily shown in detail.</p><p id="p-0018" num="0017">As discussed, it can be difficult to securely and efficiently share data between data stores of different entities. To this end, an encryption based data clean room can be implemented that performs direct matching of data (e.g., user IDs) in the different data sets in an encryption-based approach using shared functions and shared data objects, in accordance with some example embodiments. As an example, a requester database account can seek to perform overlap analysis with data of another account, e.g., user data of a provider database account. For example, the overlap analysis may require matching user identifiers (e.g., user IDs, emails) for users shared by the requestor and provider database accounts. To this end, and in accordance with some example embodiments, the provider database account can generate available values that the provider will include in a given query without exposing the underlying data. For instance, the provider can specify that a zip-code column of its user data can be included as part of the requester's query (e.g., referenced by a condition in a SELECT). Further, the requestor account specifies which of the requester's data is to be included in a given query (e.g., columns, and/or rows) and encrypts this data using a key that is kept private to the requester. The provider account can further generate a secure sharable function that is configured to perform direct matching when called (e.g., by the requester), where the function is configured to accept as input a decrypt key. The requestor can receive shared access to the function and run the function on the requester's encrypted data (e.g., using compute instances managed by the requester account), where the requester inputs the decrypt key to the shared function when initiated to perform direct matching of overlapping data between the data sets and to generate results data in a secure encryption-based approach.</p><p id="p-0019" num="0018">Further, the encryption based data clean room can be implemented to share data between multiple entities, such as between a requester account and a plurality of different provider accounts. In some example embodiments, the encryption based data clean room wraps encryption functions from the different provider accounts around a requester's encryption function such that direct encryption based matching can be performed by the encryption based data clean room without exposing the different provider's data to each other and the requester.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example shared data processing platform <b>100</b> implementing secure messaging between deployments, in accordance with some embodiments of the present disclosure. To avoid obscuring the inventive subject matter with unnecessary detail, various functional components that are not germane to conveying an understanding of the inventive subject matter have been omitted from the figures. However, a skilled artisan will readily recognize that various additional functional components may be included as part of the shared data processing platform <b>100</b> to facilitate additional functionality that is not specifically described herein.</p><p id="p-0021" num="0020">As shown, the shared data processing platform <b>100</b> comprises the network-based database system <b>102</b>, a cloud computing storage platform <b>104</b> (e.g., a storage platform, an AWS&#xae; service, Microsoft Azure&#xae;, or Google Cloud Services&#xae;), and a remote computing device <b>106</b>. The network-based database system <b>102</b> is a network-based system used for storing and accessing data (e.g., internally storing data, accessing external remotely located data) in an integrated manner, and reporting and analysis of the integrated data from the one or more disparate sources (e.g., the cloud computing storage platform <b>104</b>). The cloud computing storage platform <b>104</b> comprises a plurality of computing machines and provides on-demand computer system resources such as data storage and computing power to the network-based database system <b>102</b>. While in the embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a network-based database system is depicted, other embodiments may include other types of databases or other data processing systems.</p><p id="p-0022" num="0021">The remote computing device <b>106</b> (e.g., a user device such as a laptop computer) comprises one or more computing machines (e.g., a user device such as a laptop computer) that execute a remote software component <b>108</b> (e.g., browser accessed cloud service) to provide additional functionality to users of the network-based database system <b>102</b>. The remote software component <b>108</b> comprises a set of machine-readable instructions (e.g., code) that, when executed by the remote computing device <b>106</b>, cause the remote computing device <b>106</b> to provide certain functionality. The remote software component <b>108</b> may operate on input data and generates result data based on processing, analyzing, or otherwise transforming the input data. As an example, the remote software component <b>108</b> can an application that a data provider (e.g., provider database account) or data consumer (e.g., requester database account) implement to interact with the network-based database system <b>102</b> (e.g., a browser that creates active sessions with network services of the network-based database system <b>102</b> or cloud computing storage platform <b>104</b>).</p><p id="p-0023" num="0022">The network-based database system <b>102</b> comprises an access management system <b>110</b>, a compute service manager <b>112</b>, an execution platform <b>114</b>, and a database <b>116</b>. The access management system <b>110</b> enables administrative users to manage access to resources and services provided by the network-based database system <b>102</b>. Administrative users can create and manage users, roles, and groups, and use permissions to allow or deny access to resources and services. The access management system <b>110</b> can store share data that securely manages shared access to the storage resources of the cloud computing storage platform <b>104</b> amongst different users of the network-based database system <b>102</b>, as discussed in further detail below.</p><p id="p-0024" num="0023">The compute service manager <b>112</b> coordinates and manages operations of the network-based database system <b>102</b>. The compute service manager <b>112</b> also performs query optimization and compilation as well as managing clusters of computing services that provide compute resources (e.g., virtual warehouses, virtual machines, EC2 clusters). The compute service manager <b>112</b> can support any number of client accounts such as end users providing data storage and retrieval requests, system administrators managing the systems and methods described herein, and other components/devices that interact with compute service manager <b>112</b>.</p><p id="p-0025" num="0024">The compute service manager <b>112</b> is also coupled to database <b>116</b>, which is associated with the entirety of data stored on the shared data processing platform <b>100</b>. The database <b>116</b> stores data pertaining to various functions and aspects associated with the network-based database system <b>102</b> and its users.</p><p id="p-0026" num="0025">In some embodiments, database <b>116</b> includes a summary of data stored in remote data storage systems as well as data available from one or more local caches. Additionally, database <b>116</b> may include information regarding how data is organized in the remote data storage systems and the local caches. Database <b>116</b> allows systems and services to determine whether a piece of data needs to be accessed without loading or accessing the actual data from a storage device. The compute service manager <b>112</b> is further coupled to an execution platform <b>114</b>, which provides multiple computing resources (e.g., virtual warehouses) that execute various data storage and data retrieval tasks, as discussed in greater detail below.</p><p id="p-0027" num="0026">Execution platform <b>114</b> is coupled to multiple data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>that are part of a cloud computing storage platform <b>104</b>. In some embodiments, data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>are cloud-based storage devices located in one or more geographic locations. For example, data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>may be part of a public cloud infrastructure or a private cloud infrastructure. Data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>may be hard disk drives (HDDs), solid state drives (SSDs), storage clusters, Amazon S3 storage systems or any other data storage technology. Additionally, cloud computing storage platform <b>104</b> may include distributed file systems (such as Hadoop Distributed File Systems (HDFS)), object storage systems, and the like.</p><p id="p-0028" num="0027">The execution platform <b>114</b> comprises a plurality of compute nodes (e.g., virtual warehouses). A set of processes on a compute node executes a query plan compiled by the compute service manager <b>112</b>. The set of processes can include: a first process to execute the query plan; a second process to monitor and delete micro-partition files using a least recently used (LRU) policy, and implement an out of memory (OOM) error mitigation process; a third process that extracts health information from process logs and status information to send back to the compute service manager <b>112</b>; a fourth process to establish communication with the compute service manager <b>112</b> after a system boot; and a fifth process to handle all communication with a compute cluster for a given job provided by the compute service manager <b>112</b> and to communicate information back to the compute service manager <b>112</b> and other compute nodes of the execution platform <b>114</b>.</p><p id="p-0029" num="0028">The cloud computing storage platform <b>104</b> also comprises an access management system <b>118</b> and a web proxy <b>120</b>. As with the access management system <b>110</b>, the access management system <b>118</b> allows users to create and manage users, roles, and groups, and use permissions to allow or deny access to cloud services and resources. The access management system <b>110</b> of the network-based database system <b>102</b> and the access management system <b>118</b> of the cloud computing storage platform <b>104</b> can communicate and share information so as to enable access and management of resources and services shared by users of both the network-based database system <b>102</b> and the cloud computing storage platform <b>104</b>. The web proxy <b>120</b> handles tasks involved in accepting and processing concurrent API calls, including traffic management, authorization and access control, monitoring, and API version management. The web proxy <b>120</b> provides HTTP proxy service for creating, publishing, maintaining, securing, and monitoring APIs (e.g., REST APIs).</p><p id="p-0030" num="0029">In some embodiments, communication links between elements of the shared data processing platform <b>100</b> are implemented via one or more data communication networks. These data communication networks may utilize any communication protocol and any type of communication medium. In some embodiments, the data communication networks are a combination of two or more data communication networks (or sub-networks) coupled to one another. In alternate embodiments, these communication links are implemented using any type of communication medium and any communication protocol.</p><p id="p-0031" num="0030">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, data storage devices <b>124</b>-<b>1</b> to <b>124</b>-N are decoupled from the computing resources associated with the execution platform <b>114</b>. That is, new virtual warehouses can be created and terminated in the execution platform <b>114</b> and additional data storage devices can be created and terminated on the cloud computing storage platform <b>104</b> in an independent manner. This architecture supports dynamic changes to the network-based database system <b>102</b> based on the changing data storage/retrieval needs as well as the changing needs of the users and systems accessing the shared data processing platform <b>100</b>. The support of dynamic changes allows network-based database system <b>102</b> to scale quickly in response to changing demands on the systems and components within network-based database system <b>102</b>. The decoupling of the computing resources from the data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>supports the storage of large amounts of data without requiring a corresponding large amount of computing resources. Similarly, this decoupling of resources supports a significant increase in the computing resources utilized at a particular time without requiring a corresponding increase in the available data storage resources. Additionally, the decoupling of resources enables different accounts to handle creating additional compute resources to process data shared by other users without affecting the other users' systems. For instance, a data provider may have three compute resources and share data with a data consumer, and the data consumer may generate new compute resources to execute queries against the shared data, where the new compute resources are managed by the data consumer and do not affect or interact with the compute resources of the data provider.</p><p id="p-0032" num="0031">Compute service manager <b>112</b>, database <b>116</b>, execution platform <b>114</b>, cloud computing storage platform <b>104</b>, and remote computing device <b>106</b> are shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as individual components. However, each of compute service manager <b>112</b>, database <b>116</b>, execution platform <b>114</b>, cloud computing storage platform <b>104</b>, and remote computing environment may be implemented as a distributed system (e.g., distributed across multiple systems/platforms at multiple geographic locations) connected by APIs and access information (e.g., tokens, login data). Additionally, each of compute service manager <b>112</b>, database <b>116</b>, execution platform <b>114</b>, and cloud computing storage platform <b>104</b> can be scaled up or down (independently of one another) depending on changes to the requests received and the changing needs of shared data processing platform <b>100</b>. Thus, in the described embodiments, the network-based database system <b>102</b> is dynamic and supports regular changes to meet the current data processing needs.</p><p id="p-0033" num="0032">During typical operation, the network-based database system <b>102</b> processes multiple jobs (e.g., queries) determined by the compute service manager <b>112</b>. These jobs are scheduled and managed by the compute service manager <b>112</b> to determine when and how to execute the job. For example, the compute service manager <b>112</b> may divide the job into multiple discrete tasks and may determine what data is needed to execute each of the multiple discrete tasks. The compute service manager <b>112</b> may assign each of the multiple discrete tasks to one or more nodes of the execution platform <b>114</b> to process the task. The compute service manager <b>112</b> may determine what data is needed to process a task and further determine which nodes within the execution platform <b>114</b> are best suited to process the task. Some nodes may have already cached the data needed to process the task (due to the nodes having recently downloaded the data from the cloud computing storage platform <b>104</b> for a previous job) and, therefore, be a good candidate for processing the task. Metadata stored in the database <b>116</b> assists the compute service manager <b>112</b> in determining which nodes in the execution platform <b>114</b> have already cached at least a portion of the data needed to process the task. One or more nodes in the execution platform <b>114</b> process the task using data cached by the nodes and, if necessary, data retrieved from the cloud computing storage platform <b>104</b>. It is desirable to retrieve as much data as possible from caches within the execution platform <b>114</b> because the retrieval speed is typically much faster than retrieving data from the cloud computing storage platform <b>104</b>.</p><p id="p-0034" num="0033">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the shared data processing platform <b>100</b> separates the execution platform <b>114</b> from the cloud computing storage platform <b>104</b>. In this arrangement, the processing resources and cache resources in the execution platform <b>114</b> operate independently of the data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>in the cloud computing storage platform <b>104</b>. Thus, the computing resources and cache resources are not restricted to specific data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n</i>. Instead, all computing resources and all cache resources may retrieve data from, and store data to, any of the data storage resources in the cloud computing storage platform <b>104</b>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating components of the compute service manager <b>112</b>, in accordance with some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a request processing service <b>202</b> manages received data storage requests and data retrieval requests (e.g., jobs to be performed on database data). For example, the request processing service <b>202</b> may determine the data necessary to process a received query (e.g., a data storage request or data retrieval request). The data may be stored in a cache within the execution platform <b>114</b> or in a data storage device in cloud computing storage platform <b>104</b>. A management console service <b>204</b> supports access to various systems and processes by administrators and other system managers. Additionally, the management console service <b>204</b> may receive a request to execute a job and monitor the workload on the system. The clean room engine <b>225</b> manages performing secure queries on a data set shared by a plurality of database accounts (e.g., a requesting or consumer database account that generates the request, and a provider database account that shares user defined functions to complete the request), as discussed in further detail below.</p><p id="p-0036" num="0035">The compute service manager <b>112</b> also includes a job compiler <b>206</b>, a job optimizer <b>208</b>, and a job executor <b>210</b>. The job compiler <b>206</b> parses a job into multiple discrete tasks and generates the execution code for each of the multiple discrete tasks. The job optimizer <b>208</b> determines the best method to execute the multiple discrete tasks based on the data that needs to be processed. The job optimizer <b>208</b> also handles various data pruning operations and other data optimization techniques to improve the speed and efficiency of executing the job. The job executor <b>210</b> executes the execution code for jobs received from a queue or determined by the compute service manager <b>112</b>.</p><p id="p-0037" num="0036">A job scheduler and coordinator <b>212</b> sends received jobs to the appropriate services or systems for compilation, optimization, and dispatch to the execution platform <b>114</b>. For example, jobs may be prioritized and processed in that prioritized order. In an embodiment, the job scheduler and coordinator <b>212</b> determines a priority for internal jobs that are scheduled by the compute service manager <b>112</b> with other &#x201c;outside&#x201d; jobs such as user queries that may be scheduled by other systems in the database but may utilize the same processing resources in the execution platform <b>114</b>. In some embodiments, the job scheduler and coordinator <b>212</b> identifies or assigns particular nodes in the execution platform <b>114</b> to process particular tasks. A virtual warehouse manager <b>214</b> manages the operation of multiple virtual warehouses implemented in the execution platform <b>114</b>. As discussed below, each virtual warehouse includes multiple execution nodes that each include a cache and a processor (e.g., a virtual machine, an operating system level container execution environment).</p><p id="p-0038" num="0037">Additionally, the compute service manager <b>112</b> includes a configuration and metadata manager <b>216</b>, which manages the information related to the data stored in the remote data storage devices and in the local caches (i.e., the caches in execution platform <b>114</b>). The configuration and metadata manager <b>216</b> uses the metadata to determine which data micro-partitions need to be accessed to retrieve data for processing a particular task or job. A monitor and workload analyzer <b>218</b> oversees processes performed by the compute service manager <b>112</b> and manages the distribution of tasks (e.g., workload) across the virtual warehouses and execution nodes in the execution platform <b>114</b>. The monitor and workload analyzer <b>218</b> also redistributes tasks, as needed, based on changing workloads throughout the network-based database system <b>102</b> and may further redistribute tasks based on a user (e.g., &#x201c;external&#x201d;) query workload that may also be processed by the execution platform <b>114</b>. The configuration and metadata manager <b>216</b> and the monitor and workload analyzer <b>218</b> are coupled to a data storage device <b>220</b>. Data storage device <b>220</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> represent any data storage device within the network-based database system <b>102</b>. For example, data storage device <b>220</b> may represent caches in execution platform <b>114</b>, storage devices in cloud computing storage platform <b>104</b>, or any other storage device.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating components of the execution platform <b>114</b>, in accordance with some embodiments of the present disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, execution platform <b>114</b> includes multiple virtual warehouses, which are elastic clusters of compute instances, such as virtual machines. In the example illustrated, the virtual warehouses include virtual warehouse <b>1</b>, virtual warehouse <b>2</b>, and virtual warehouse n. Each virtual warehouse (e.g., EC2 cluster) includes multiple execution nodes (e.g., virtual machines) that each include a data cache and a processor. The virtual warehouses can execute multiple tasks in parallel by using the multiple execution nodes. As discussed herein, execution platform <b>114</b> can add new virtual warehouses and drop existing virtual warehouses in real time based on the current processing needs of the systems and users. This flexibility allows the execution platform <b>114</b> to quickly deploy large amounts of computing resources when needed without being forced to continue paying for those computing resources when they are no longer needed. All virtual warehouses can access data from any data storage device (e.g., any storage device in cloud computing storage platform <b>104</b>).</p><p id="p-0040" num="0039">Although each virtual warehouse shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> includes three execution nodes, a particular virtual warehouse may include any number of execution nodes. Further, the number of execution nodes in a virtual warehouse is dynamic, such that new execution nodes are created when additional demand is present, and existing execution nodes are deleted when they are no longer necessary (e.g., upon a query or job completion).</p><p id="p-0041" num="0040">Each virtual warehouse is capable of accessing any of the data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Thus, the virtual warehouses are not necessarily assigned to a specific data storage device <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>and, instead, can access data from any of the data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n </i>within the cloud computing storage platform <b>104</b>. Similarly, each of the execution nodes shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can access data from any of the data storage devices <b>124</b>-<b>1</b> to <b>124</b>-<i>n</i>. For instance, the storage device <b>124</b>-<b>1</b> of a first user (e.g., provider account user) may be shared with a worker node in a virtual warehouse of another user (e.g., consumer account user), such that the other user can create a database (e.g., read-only database) and use the data in storage device <b>124</b>-<b>1</b> directly without needing to copy the data (e.g., copy it to a new disk managed by the consumer account user). In some embodiments, a particular virtual warehouse or a particular execution node may be temporarily assigned to a specific data storage device, but the virtual warehouse or execution node may later access data from any other data storage device.</p><p id="p-0042" num="0041">In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, virtual warehouse <b>1</b> includes three execution nodes <b>302</b>-<b>1</b>, <b>302</b>-<b>2</b>, and <b>302</b>-<i>n</i>. Execution node <b>302</b>-<b>1</b> includes a cache <b>304</b>-<b>1</b> and a processor <b>306</b>-<b>1</b>. Execution node <b>302</b>-<b>2</b> includes a cache <b>304</b>-<b>2</b> and a processor <b>306</b>-<b>2</b>. Execution node <b>302</b>-<i>n </i>includes a cache <b>304</b>-<i>n </i>and a processor <b>306</b>-<i>n</i>. Each execution node <b>302</b>-<b>1</b>, <b>302</b>-<b>2</b>, and <b>302</b>-<i>n </i>is associated with processing one or more data storage and/or data retrieval tasks. For example, a virtual warehouse may handle data storage and data retrieval tasks associated with an internal service, such as a clustering service, a materialized view refresh service, a file compaction service, a storage procedure service, or a file upgrade service. In other implementations, a particular virtual warehouse may handle data storage and data retrieval tasks associated with a particular data storage system or a particular category of data.</p><p id="p-0043" num="0042">Similar to virtual warehouse <b>1</b> discussed above, virtual warehouse <b>2</b> includes three execution nodes <b>312</b>-<b>1</b>, <b>312</b>-<b>2</b>, and <b>312</b>-<i>n</i>. Execution node <b>312</b>-<b>1</b> includes a cache <b>314</b>-<b>1</b> and a processor <b>316</b>-<b>1</b>. Execution node <b>312</b>-<b>2</b> includes a cache <b>314</b>-<b>2</b> and a processor <b>316</b>-<b>2</b>. Execution node <b>312</b>-<i>n </i>includes a cache <b>314</b>-<i>n </i>and a processor <b>316</b>-<i>n</i>. Additionally, virtual warehouse <b>3</b> includes three execution nodes <b>322</b>-<b>1</b>, <b>322</b>-<b>2</b>, and <b>322</b>-<i>n</i>. Execution node <b>322</b>-<b>1</b> includes a cache <b>324</b>-<b>1</b> and a processor <b>326</b>-<b>1</b>. Execution node <b>322</b>-<b>2</b> includes a cache <b>324</b>-<b>2</b> and a processor <b>326</b>-<b>2</b>. Execution node <b>322</b>-<i>n </i>includes a cache <b>324</b>-<i>n </i>and a processor <b>326</b>-<i>n. </i></p><p id="p-0044" num="0043">In some embodiments, the execution nodes shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> are stateless with respect to the data the execution nodes are caching. For example, these execution nodes do not store or otherwise maintain state information about the execution node, or the data being cached by a particular execution node. Thus, in the event of an execution node failure, the failed node can be transparently replaced by another node. Since there is no state information associated with the failed execution node, the new (replacement) execution node can easily replace the failed node without concern for recreating a particular state.</p><p id="p-0045" num="0044">Although the execution nodes shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> each include one data cache and one processor, alternative embodiments may include execution nodes containing any number of processors and any number of caches. Additionally, the caches may vary in size among the different execution nodes. The caches shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> store, in the local execution node (e.g., local disk), data that was retrieved from one or more data storage devices in cloud computing storage platform <b>104</b> (e.g., S3 objects recently accessed by the given node). In some example embodiments, the cache stores file headers and individual columns of files as a query downloads only columns necessary for that query.</p><p id="p-0046" num="0045">To improve cache hits and avoid overlapping redundant data stored in the node caches, the job optimizer <b>208</b> assigns input file sets to the nodes using a consistent hashing scheme to hash over table file names of the data accessed (e.g., data in database <b>116</b> or database <b>122</b>). Subsequent or concurrent queries accessing the same table file will therefore be performed on the same node, according to some example embodiments.</p><p id="p-0047" num="0046">As discussed, the nodes and virtual warehouses may change dynamically in response to environmental conditions (e.g., disaster scenarios), hardware/software issues (e.g., malfunctions), or administrative changes (e.g., changing from a large cluster to smaller cluster to lower costs). In some example embodiments, when the set of nodes changes, no data is reshuffled immediately. Instead, the least recently used replacement policy is implemented to eventually replace the lost cache contents over multiple jobs. Thus, the caches reduce or eliminate the bottleneck problems occurring in platforms that consistently retrieve data from remote storage systems. Instead of repeatedly accessing data from the remote storage devices, the systems and methods described herein access data from the caches in the execution nodes, which is significantly faster and avoids the bottleneck problem discussed above. In some embodiments, the caches are implemented using high-speed memory devices that provide fast access to the cached data. Each cache can store data from any of the storage devices in the cloud computing storage platform <b>104</b>.</p><p id="p-0048" num="0047">Further, the cache resources and computing resources may vary between different execution nodes. For example, one execution node may contain significant computing resources and minimal cache resources, making the execution node useful for tasks that require significant computing resources. Another execution node may contain significant cache resources and minimal computing resources, making this execution node useful for tasks that require caching of large amounts of data. Yet another execution node may contain cache resources providing faster input-output operations, useful for tasks that require fast scanning of large amounts of data. In some embodiments, the execution platform <b>114</b> implements skew handling to distribute work amongst the cache resources and computing resources associated with a particular execution, where the distribution may be further based on the expected tasks to be performed by the execution nodes. For example, an execution node may be assigned more processing resources if the tasks performed by the execution node become more processor-intensive. Similarly, an execution node may be assigned more cache resources if the tasks performed by the execution node require a larger cache capacity. Further, some nodes may be executing much slower than others due to various issues (e.g., virtualization issues, network overhead). In some example embodiments, the imbalances are addressed at the scan level using a file stealing scheme. In particular, whenever a node process completes scanning its set of input files, it requests additional files from other nodes. If the one of the other nodes receives such a request, the node analyzes its own set (e.g., how many files are left in the input file set when the request is received), and then transfers ownership of one or more of the remaining files for the duration of the current job (e.g., query). The requesting node (e.g., the file stealing node) then receives the data (e.g., header data) and downloads the files from the cloud computing storage platform <b>104</b> (e.g., from data storage device <b>124</b>-<b>1</b>), and does not download the files from the transferring node. In this way, lagging nodes can transfer files via file stealing in a way that does not worsen the load on the lagging nodes.</p><p id="p-0049" num="0048">Although virtual warehouses <b>1</b>, <b>2</b>, and n are associated with the same execution platform <b>114</b>, the virtual warehouses may be implemented using multiple computing systems at multiple geographic locations. For example, virtual warehouse <b>1</b> can be implemented by a computing system at a first geographic location, while virtual warehouses <b>2</b> and n are implemented by another computing system at a second geographic location. In some embodiments, these different computing systems are cloud-based computing systems maintained by one or more different entities.</p><p id="p-0050" num="0049">Additionally, each virtual warehouse is shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> as having multiple execution nodes. The multiple execution nodes associated with each virtual warehouse may be implemented using multiple computing systems at multiple geographic locations. For example, an instance of virtual warehouse <b>1</b> implements execution nodes <b>302</b>-<b>1</b> and <b>302</b>-<b>2</b> on one computing platform at a geographic location and implements execution node <b>302</b>-<i>n </i>at a different computing platform at another geographic location. Selecting particular computing systems to implement an execution node may depend on various factors, such as the level of resources needed for a particular execution node (e.g., processing resource requirements and cache requirements), the resources available at particular computing systems, communication capabilities of networks within a geographic location or between geographic locations, and which computing systems are already implementing other execution nodes in the virtual warehouse.</p><p id="p-0051" num="0050">Execution platform <b>114</b> is also fault tolerant. For example, if one virtual warehouse fails, that virtual warehouse is quickly replaced with a different virtual warehouse at a different geographic location.</p><p id="p-0052" num="0051">A particular execution platform <b>114</b> may include any number of virtual warehouses. Additionally, the number of virtual warehouses in a particular execution platform is dynamic, such that new virtual warehouses are created when additional processing and/or caching resources are needed. Similarly, existing virtual warehouses may be deleted when the resources associated with the virtual warehouse are no longer necessary.</p><p id="p-0053" num="0052">In some embodiments, the virtual warehouses may operate on the same data in cloud computing storage platform <b>104</b>, but each virtual warehouse has its own execution nodes with independent processing and caching resources. This configuration allows requests on different virtual warehouses to be processed independently and with no interference between the requests. This independent processing, combined with the ability to dynamically add and remove virtual warehouses, supports the addition of new processing capacity for new users without impacting the performance observed by the existing users.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a computing environment <b>400</b> conceptually illustrating an example software architecture executing a user defined function (UDF) by a process running on a given execution node of the execution platform <b>114</b>, in accordance with some embodiments of the present disclosure. As illustrated, the execution node <b>302</b>-<b>1</b> from the execution platform <b>114</b> includes an execution node process <b>410</b>, which in an embodiment is running on the processor <b>306</b>-<b>1</b> and can also utilize memory from the cache <b>304</b>-<b>1</b> (or another memory device or storage). As mentioned herein, a &#x201c;process&#x201d; or &#x201c;computing process&#x201d; can refer to an instance of a computer program that is being executed by one or more threads by an execution node or execution platform.</p><p id="p-0055" num="0054">As mentioned before, the compute service manager <b>112</b> validates all communication from the execution platform <b>114</b> to validate that the content and context of that communication are consistent with the task(s) known to be assigned to the execution platform <b>114</b>. For example, the execution platform <b>114</b> executing a query A is not allowed to request access to a particular data source (e.g., data storage device <b>226</b> or any one of the storage devices in the cloud storage platform <b>104</b>) that is not relevant to query A. In an example, the execution node <b>302</b>-<b>1</b> may need to communicate with a second execution node (e.g., execution node <b>302</b>-<b>2</b>), but the security mechanisms described herein can disallow communication with a third execution node (e.g., execution node <b>312</b>-<b>1</b>). Moreover, any such illicit communication can be recorded (e.g., in a log <b>444</b> or other location). Further, the information stored on a given execution node is restricted to data relevant to the current query and any other data is unusable by destruction or encryption where the key is unavailable.</p><p id="p-0056" num="0055">The execution node process <b>410</b> is executing a UDF client <b>412</b> in the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In an embodiment, the UDF client <b>412</b> is implemented to support UDFs written in a particular programming language such as JAVA, and the like. In an embodiment, the UDF client <b>412</b> is implemented in a different programming language (e.g., C or C++) than the user code <b>430</b>, which can further improve security of the computing environment <b>400</b> by using a different codebase (e.g., one without the same or fewer potential security exploits).</p><p id="p-0057" num="0056">User code <b>430</b> may be provided as a package e.g., in the form of a JAR (JAVA archive) file which includes code for one or more UDFs. Server implementation code <b>432</b>, in an embodiment, is a JAR file that initiates a server which is responsible for receiving requests from the execution node process <b>410</b>, assigning worker threads to execute user code, and returning the results, among other types of server tasks.</p><p id="p-0058" num="0057">In an implementation, an operation from a UDF can be performed by a user code runtime <b>424</b> executing within a sandbox process <b>420</b>. In an embodiment, the user code runtime <b>424</b> is implemented as a virtual machine, such as a JAVA virtual machine (JVM). Since the user code runtime <b>424</b> advantageously executes in a separate process relative to the execution node process <b>410</b>, there is a lower risk of manipulating the execution node process <b>410</b>. Results of performing the operation, among other types of information or messages, can be stored in a log <b>444</b> for review and retrieval. In an embodiment, the log <b>444</b> can be stored locally in memory at the execution node <b>302</b>-<b>1</b>, or at a separate location such as the storage platform <b>104</b>. Moreover, such results can be returned from the user code runtime <b>424</b> to the UDF client <b>412</b> utilizing a high-performance protocol (e.g., without serialization or deserialization of data, without memory copies; operates on record batches without having to access individual columns, records or cells; utilizes efficient remote procedure call techniques and network protocol(s) for data transfer) for data transfer (e.g., distributed datasets) that further provides authentication and encryption of the data transfer. In an embodiment, the UDF client <b>412</b> uses a data transport mechanism that supports a network transfer of columnar data between the user code runtime <b>424</b> (and vice-versa) with the aforementioned advantages described above.</p><p id="p-0059" num="0058">Security Manager <b>422</b>, in an example, can prevent completion of an operation from a given UDF by throwing an exception (e.g., if the operation is not permitted), or returns (e.g., doing nothing) if the operation is permitted. In an implementation, the Security Manager <b>422</b> is implemented as a JAVA security manager object that allows applications to implement a security policy such as a security manager policy <b>442</b>, and enables an application to determine, before performing a possibly unsafe or sensitive operation, what the operation is and whether it is being attempted in a security context that allows the operation to be performed. The security manager policy <b>442</b> can be implemented as a file with permissions that the user code runtime <b>424</b> is granted. The application (e.g., UDF executed by the user code runtime <b>424</b>) therefore can allow or disallow the operation based at least in part on the security policy.</p><p id="p-0060" num="0059">Sandbox process <b>420</b>, in an embodiment, is a sub-process (or separate process) from the execution node process <b>410</b>. A sub-process, in an embodiment, refers to a child process of a given parent process (e.g., in this example, the execution node process <b>410</b>). The sandbox process <b>420</b>, in an example, is a program that reduces the risk of security breaches by restricting the running environment of untrusted applications using security mechanisms such as namespaces and secure computing modes (e.g., using a system call filter to an executing process and all its descendants, thus reducing the attack surface of the kernel of a given operating system). Moreover, in an example, the sandbox process <b>420</b> is a lightweight process in comparison to the execution node process <b>410</b> and is optimized (e.g., closely coupled to security mechanisms of a given operating system kernel) to process a database query in a secure manner within the sandbox environment.</p><p id="p-0061" num="0060">In an embodiment, the sandbox process <b>420</b> can utilize a virtual network connection in order to communicate with other components within the subject system. A specific set of rules can be configured for the virtual network connection with respect to other components of the subject system. For example, such rules for the virtual network connection can be configured for a particular UDF to restrict the locations (e.g., particular sites on the Internet or components that the UDF can communicate) that are accessible by operations performed by the UDF. Thus, in this example, the UDF can be denied access to particular network locations or sites on the Internet.</p><p id="p-0062" num="0061">The sandbox process <b>420</b> can be understood as providing a constrained computing environment for a process (or processes) within the sandbox, where these constrained processes can be controlled and restricted to limit access to certain computing resources.</p><p id="p-0063" num="0062">Examples of security mechanisms can include the implementation of namespaces in which each respective group of processes executing within the sandbox environment has access to respective computing resources (e.g., process IDs, hostnames, user IDs, file names, names associated with network access, and inter-process communication) that are not accessible to another group of processes (which may have access to a different group of resources not accessible by the former group of processes), other container implementations, and the like. By having the sandbox process <b>420</b> execute as a sub-process to the execution node process <b>410</b>, in some embodiments, latency in processing a given database query can be substantially reduced (e.g., a reduction in latency by a factor of 10&#xd7; in some instances) in comparison with other techniques that may utilize a virtual machine solution by itself.</p><p id="p-0064" num="0063">As further illustrated, the sandbox process <b>420</b> can utilize a sandbox policy <b>440</b> to enforce a given security policy. The sandbox policy <b>440</b> can be a file with information related to a configuration of the sandbox process <b>420</b> and details regarding restrictions, if any, and permissions for accessing and utilizing system resources. Example restrictions can include restrictions to network access, or file system access (e.g., remapping file system to place files in different locations that may not be accessible, other files can be mounted in different locations, and the like). The sandbox process <b>420</b> restricts the memory and processor (e.g., CPU) usage of the user code runtime <b>424</b>, ensuring that other operations on the same execution node can execute without running out of resources.</p><p id="p-0065" num="0064">As mentioned above, the sandbox process <b>420</b> is a sub-process (or separate process) from the execution node process <b>410</b>, which in practice means that the sandbox process <b>420</b> resides in a separate memory space than the execution node process <b>410</b>. In an occurrence of a security breach in connection with the sandbox process <b>420</b> (e.g., by errant or malicious code from a given UDF), if arbitrary memory is accessed by a malicious actor, the data or information stored by the execution node process is protected.</p><p id="p-0066" num="0065">Although the above discussion of <figref idref="DRAWINGS">FIG. <b>4</b></figref> describes components that are implemented using JAVA (e.g., object oriented programming language), it is appreciated that the other programming languages (e.g., interpreted programming languages) are supported by the computing environment <b>400</b>. In an embodiment, PYTHON is supported for implementing and executing UDFs in the computing environment <b>400</b>. In this example, the user code runtime <b>424</b> can be replaced with a PYTHON interpreter for executing operations from UDFs (e.g., written in PYTHON) within the sandbox process <b>420</b>.</p><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of two separate accounts in a data warehouse system, according to some example embodiments. Here, Company A may operate an account A <b>502</b> with a network-based data warehouse system as described herein. In account A <b>502</b>, Company A data <b>504</b> may be stored. The Company A data <b>504</b> may include, for example, customer data <b>506</b> relating to customers of Company A. The customer data <b>506</b> may be stored in a table or other format storing customer information and other related information. The other related information may include identifying information, such as email, and other known characteristics of the customers, such as gender, geographic location, purchasing habits, and the like. For example, if Company A is a consumer-goods company, purchasing characteristics may be stored, such as whether the customer is single, married, part of a suburban or urban family, etc. If Company A is a streaming service company, information about the watching habits of customers may be stored, such as whether the customer likes sci-fi, nature, reality, action, etc.</p><p id="p-0068" num="0067">Likewise, Company B may operate an account B <b>512</b> with the network-based database system as described herein. In account B <b>512</b>, Company B data <b>514</b> may be stored. The Company B data <b>514</b> may include, for example, customer data relating to customers of Company B. The customer data <b>516</b> may be stored in a table or other format storing customer information and other related information. The other related information may include identifying information, such as email, and other known characteristics of the customers, such as gender, geographic location, purchasing habits, etc., as described above.</p><p id="p-0069" num="0068">For security and privacy reasons, Company A's data may not be accessible to Company B and vice versa. However, Company A and Company B may want to share at least some of their data with each other without revealing sensitive information, such as a customer's personal identity information. For example, Company A and Company B may want to explore cross marketing or advertising opportunities and may want to see how many of their customers overlap and filter based on certain characteristics of the overlapping customers to identify relationships and patterns.</p><p id="p-0070" num="0069">To this end, a data clean room may be provided by the network-based database system as described herein. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram illustrating a method for operating a data clean room, according to some example embodiments. The data clean room may enable companies A and B to perform overlap analysis on their company data, without sharing sensitive data and without losing control over the data. The data clean room may create linkages between the data for each account and may include a set of blind cross reference tables.</p><p id="p-0071" num="0070">Next, example operations to create the data clean room are described. Account B may include customer data <b>602</b> for Company B, and account A may include customer data <b>604</b> for Company A. In this example, account B may initiate the creation of the data clean room; however, either account may initiate creation of the data clean room. Account B may create a secure function <b>606</b>. The secure function <b>606</b> may look up specific identifier information in account B's customer data <b>602</b>. The secure function <b>606</b> may anonymize the information by creating identifiers for each customer data (e.g., generating a first result set). The secure function <b>606</b> may be a secure user-defined function (e.g., database UDF that operates on tables UDTF, a java UDF that opens a Jar file to execute one or more java functions to return data).</p><p id="p-0072" num="0071">The secure function <b>606</b> may be implemented as a SQL UDF. The secure function <b>606</b> may be defined to protect the underlying data used to process the function. As such, the secure function <b>606</b> may restrict direct and indirect exposure of the underlying data.</p><p id="p-0073" num="0072">The secure function <b>606</b> may then be shared with account A using a secure share <b>608</b>. The secure share <b>608</b> may allow account A to execute the secure function <b>606</b> while restricting account A from having access to the underlying data of account B used by the function and from being able to see the code of the function. The secure share <b>608</b> may also restrict account A from accessing the code of the secure function <b>606</b>. Moreover, the secure share <b>608</b> may restrict account A from seeing any logs or other information about account B's use of the secure function <b>606</b> or the parameters provided by account B of the secure function <b>606</b> when it is called.</p><p id="p-0074" num="0073">Account A may execute the secure function <b>606</b> using customer data <b>604</b> (e.g., generating a second result set). The result of the execution of the secure function <b>606</b> may be communicated to account B. For instance, a cross reference table <b>610</b> may be created in account B, which may include anonymized customer information <b>612</b> (e.g., anonymized identification information, private salted by provider's secret salt, or via encryption as discussed below with reference to <figref idref="DRAWINGS">FIGS. <b>7</b>A-<b>10</b></figref>). Likewise, a cross reference table <b>614</b> may be created in account A, which may include anonymized customer information <b>616</b> for matching overlapping customers for both companies, and dummy identifiers for non-matching records. The data from the two companies may be securely joined so that neither account may access the underlying data or other identifiable information.</p><p id="p-0075" num="0074">For instance, cross reference table <b>610</b> (and anonymized customer information <b>612</b>) may include fields: &#x201c;my_cust_id,&#x201d; which may correspond to the customer ID in account B's data; &#x201c;my_link_id,&#x201d; which may correspond to an anonymized link to the identified customer information; and a &#x201c;their_link_id,&#x201d; which may correspond to an anonymized matched customer in company A. &#x201c;their_link_id&#x201d; may be anonymized (e.g., salted), so that company B cannot discern the identity of the matched customers. The anonymization may be performed using hashing, encryption, tokenization, or other suitable techniques.</p><p id="p-0076" num="0075">Moreover, to further anonymize the identity, all listed customers of company B in cross reference table <b>610</b> (and anonymized customer information <b>612</b>) may have a unique matched customer from company B listed, irrespective of whether there was an actual match or not. A dummy &#x201c;their_link_id&#x201d; may be created for customers not matched. This way neither company may be able to ascertain identity information of the matched customers. Neither company may discern where there is an actual match rather than a dummy returned identifier (no match). Hence, the cross reference tables <b>610</b> may include anonymized key-value pairs. A summary report may be created notifying the total number of matches, but other details of the matched customers may not be provided to safeguard the identities of the customers.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref> show a secure encryption-based clean room architecture, according to some example embodiments. In the example illustrated, Requester Database Account <b>705</b> is shown in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref> and the Provider Database Account <b>750</b> is shown in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, and data transferred between the accounts is shared (e.g., via metadata pointers), as indicated by the double-side arrows at the top of <figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref>, and the disconnected A, B, and C arrows at the sides of <figref idref="DRAWINGS">FIGS. <b>7</b>A and <b>7</b>B</figref>. With reference to the Requester Database Account <b>705</b> in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the requester data set <b>702</b> comprises requester-specific data to be used in clean room requests, according to some example embodiments. With reference to the Provider Database Account <b>750</b> in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, the provider data set <b>759</b> comprises provider-specific data to be used in clean room requests, according to some example embodiments. The data flows <b>3</b>A, <b>3</b>B, and <b>3</b>C are optional, in accordance with some example embodiments, and can be implemented to perform complex join queries. For example, in queries that require complex joining of one or more tables, encrypting the data may be impractical to join, and as such the data flows <b>3</b>A, <b>3</b>B, and <b>3</b>C can be implemented instead to perform joins on unencrypted data.</p><p id="p-0078" num="0077">With reference to Provider Database Account <b>750</b> in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, at data flow <b>3</b>A, the Provider Account Cleanroom Cross Reference Table <b>754</b> is generated by the Provider Database Account <b>750</b>, which stores the Provider ID(s) hashed with a private salt that is private to the Provider Database Account <b>750</b>. At data flow <b>3</b>B (in <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>), a Secure Hash Lookup Function <b>752</b> is created and shared from the Provider Database Account <b>750</b> to the Requester Database Account <b>705</b> as a Shared Secure Hash Lookup Function <b>712</b> (<figref idref="DRAWINGS">FIG. <b>7</b>A</figref>) to enable lookup of hashed IDs from the Provider Account Cleanroom Cross Reference Table <b>754</b>.</p><p id="p-0079" num="0078">With reference to the data flow <b>3</b>C in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the Requester Database Account <b>705</b> calls the Shared Secure Hash Lookup Function <b>712</b> (&#x201c;Secure Function Lookup_Hashed_ID( )&#x201d;) using a Stored Procedure <b>714</b> (&#x201c;CrossRef Lookup&#x201d;), which generates the requester's Cross Reference Table <b>716</b> in the Requester Database Account <b>705</b>.</p><p id="p-0080" num="0079">With reference to Provider Database Account <b>750</b> of <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, the Available Values Table <b>755</b> is created by the Provider Database Account <b>750</b>, which is then shared with the Requester Database Account <b>705</b> as Available Values Table <b>717</b> (in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>). The Available Values table <b>755</b> specifies data from the Provider Data Set <b>759</b> to which the Requester Database Account <b>705</b> has access (e.g., referenced by a WHERE in a SELECT query from the requester). That is, the Available Values Table <b>755</b> species which parts of a provider's data can be used in a given Requester's query (e.g., SQL select statements), or used as filters in a given clean room request when the given clean room request is generated by the Requester Database Account <b>705</b>. For example, the Provider may specify in the Available Values Table <b>755</b> one or more columns or rows of the Provider Data Set <b>759</b> that can be included in a Requester's query (e.g., reference in a SELECT statement of the requester query), and any columns or rows not in the Available Values Table <b>755</b> (e.g., customer social security numbers) or rows (e.g., subsets of customer data of customer's under 18 years old) are not includable in the requester's clean room requests.</p><p id="p-0081" num="0080">In <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, the Requester Database Account <b>705</b>, prior to generating a request, can generate the My Data Table <b>721</b>, which functions as a pre-filters for the final results data by sharing encrypted data of columns or rows (from the requester data set <b>702</b>) that are to be used in a given clean room request from the Requester Database Account <b>705</b> (where data not included in the My Data Table <b>721</b> are not used in the query, nor are matched or otherwise correlated with the Provider's data). The Requester ID(s) (e.g., customer emails) will be encrypted and included in the My Data Table <b>72</b>, in accordance with some example embodiments. In some example embodiments, the encrypted data is encrypted using a pass phrase, e.g., in AES-256 based encryption. In accordance with some example embodiments, a clean room request is created when the Requester Database Account <b>705</b> inserts query data (e.g., clean room request) into the My Secure Query Requests Table <b>722</b> which is then shared as My Secure Query Requests Table <b>723</b> in the Provider Database Account <b>750</b>. As an example, the inserted request data can include: select/group by columns and filter parameters, which can specify data fields (e.g., columns) from both the Requester Database Account <b>705</b> and the Provider Database Account <b>750</b> to be correlated and processed to generate final results for that given query.</p><p id="p-0082" num="0081">With reference to the Requester Database Account <b>705</b>, upon a request being inserted into the My Secure Query Requests Table <b>722</b>, the query data is shared with the Provider Database Account <b>750</b> as in the My Secure Query Requests Table <b>723</b>. The Query Runner Stored Procedure <b>777</b> accepts the new request, validates it against the Available Values Table <b>755</b> of the Provider Database Account <b>750</b>, applies any restrictions or thresholds (e.g., rejects or removes data not accessible per the Available Values Table <b>755</b>), and the Provider Database Account <b>750</b> builds a Secure User Defined Table Function <b>778</b> (UDTF, e.g., &#x201c;Secure User Defined Table Function Generate Results( )&#x201d;) as a share-able function that is call-able by others (e.g., the Requester, to run on the requester's compute instances via secure sandbox processes) who can pass in data (the key) and run the function from a client of an execution node of the requestor in secure sandbox processes (e.g., via sandbox process <b>420</b>), as discussed above with reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0083" num="0082">Whereas in the cross reference table approach, discussed above, performs pre-matching of hashed and cross referenced data to correlate user IDs that match in the respective data sets (e.g., matching emails in requester and provider data sets), the Secure User Defined Table Function <b>778</b> is a shareable secure function that accepts a decrypt key (as a parameter or input to the function upon the function being called, e.g., by the requester for a given clean room query).</p><p id="p-0084" num="0083">In accordance with some example embodiments, anytime the Secure User Defined Table Function <b>778</b> performs a join or otherwise references a given column of the My Data Table <b>767</b>, the Secure User Defined Table Function <b>778</b> is configured to wrap a decryption function around the joined or referenced data (e.g., columns specified in the query), where the function is configured to use an function input that is to be input by the requester (e.g., input decrypt pass phrase input by the requestor) as a decryption key to access the requesters user ID (e.g., user email) in plain text, which can then matched against the provider's data set (e.g., a matching email) in the sandbox processes of the Secure User Defined Table Function <b>778</b> (to run the UDF on the requestors compute instances). The Secure User Defined Table Function <b>778</b> thus works as a query that joins the two sets of data together (the provider and requester user IDs or emails that match), based on a given identifier (a customer having accounts in the requester's data and the provider's data). In this way, the Query Runner Stored Procedure <b>777</b> creates the Secure User Defined Table Function <b>778</b> to directly match the IDs of the Requester Database Account <b>705</b> to the IDs of the Provider Database Account <b>750</b>, directly, without using the cross reference table. Although as discussed, in some example embodiments, if the data clean room request is complex, the cross referenced data may be used to perform further join operations. An example a pure encryption based data clean room request that does not implement the cross reference approach includes directly matching email to email (or other single, one-to-one identifier based matching). An example of a complex query that may further implement the cross referenced table data includes any join or query processes that requires more than one-to-one matching of identifiers, such as obfuscating each users geographic area (e.g., in those example embodiments, further join or query operations can be performed using the pre-matching approach, and the encryption matching can be implemented using the encryption direct matching).</p><p id="p-0085" num="0084">While the Provider Database Account <b>750</b> can view the query (e.g., view the Secure User Defined Table Function <b>778</b>, such as view the columns' of the provider that the Requester Database Account <b>705</b> is specifying in the query), the Provider Database Account <b>750</b> cannot run the Secure User Defined Table Function <b>778</b> to generate results since the Provider Database Account <b>750</b> does not have the requester's decrypt key to pass in as a function parameter for the Secure User Defined Table Function <b>778</b>.</p><p id="p-0086" num="0085">The Secure User Defined Table Function <b>778</b> is then shared with the Requester Database Account <b>705</b> as Shared Secure User Defined Table Function <b>747</b> in <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>. The Requester Database Account <b>705</b> then inputs the decryption passphrase as a parameter input to the Shared Secure User Defined Table Function <b>747</b> to decrypt and access the data and generate the clean room request results. For example, the Requester Database Account <b>705</b> runs the Shared Secure User Defined Table Function <b>747</b> on its own commute instances (e.g., <figref idref="DRAWINGS">FIG. <b>3</b></figref>) to decrypt the encrypted data in the My Data Table <b>721</b> using the pass phrase and accesses portions of the provider's data using shared access (e.g., using metadata pointers, metadata stored in data storage device <b>220</b>, <figref idref="DRAWINGS">FIG. <b>2</b></figref>).</p><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a flow diagram of a method <b>800</b> for implementing a secure encryption-based clean room architecture, according to some example embodiments. At operation <b>805</b>, the Requester Database Account <b>705</b> generates requester data, such as the requester data set <b>702</b> (<figref idref="DRAWINGS">FIG. <b>7</b>A</figref>). At operation <b>810</b>, the Provider Database Account <b>750</b> generates provider data, such as the provider data set <b>759</b> (<figref idref="DRAWINGS">FIG. <b>7</b>B</figref>) and the Provider Account Cleanroom Cross Reference table <b>754</b>, for optional complex joins. For example, the encryption-based direct matching can be performed first followed by more complex cross-reference table based joins to generate query data. At operation <b>815</b>, the Provider Database Account <b>750</b> generates and shares which portions of the provider data is accessible in the query, as an available values table <b>755</b>. At operation <b>820</b>, the Requester Database Account <b>705</b> generates shared tables for use in the clean room queries. For example, the Requester Database Account <b>705</b> generates the My Data Table <b>721</b> and My Secure Query Requests Table <b>722</b> which is shared with the Provider Database Account <b>750</b> as My Secure Query Requests Table <b>723</b> and My Data Table <b>767</b>. As discussed, the data of the My Data Table <b>721</b> is encrypted with a pass phrase (e.g., AES 256 encryption pass phrase, pass key, encryption key) that is private or secret to the Requester Database Account <b>705</b>.</p><p id="p-0088" num="0087">At operation <b>825</b>, the Requester Database Account <b>705</b> generates a clean room request. For example, the Requester Database Account <b>705</b> inserts a query request into the My Secure Query Requests Table <b>722</b>, which is shared with the Provider Database Account <b>750</b> in My Secure Query Requests Table <b>723</b>, which initiates the Query Runner Stored Procedure <b>777</b> of the Provider Database Account <b>750</b>.</p><p id="p-0089" num="0088">At operation <b>830</b>, the Provider Database Account <b>750</b> initiates (e.g., runs) the Query Runner Stored Procedure <b>777</b> which generates the Secure User Defined Table Function <b>778</b>, which accepts the decryption key as a parameter. At operation <b>835</b>, the Provider Database Account <b>750</b> shares an encrypted table function. For example, the Provider Database Account <b>750</b> shares the Secure User Defined Table Function <b>778</b> with the Requester Database Account <b>705</b> as Shared Secure User Defined Table Function <b>747</b>.</p><p id="p-0090" num="0089">At operation <b>840</b>, the Requester Database Account <b>705</b> generates results data by passing the Shared Secure User Defined Table Function <b>747</b> the decrypt pass phrase, and the Shared Secure User Defined Table Function <b>747</b> (running on compute instances of the Requester Database Account <b>705</b>) decrypts the requester data and matches it to user IDs in the providers data set <b>759</b> which are accessed using metadata references, without exposing the data to the requester database account, in accordance with some example embodiments. In this way, the direct matching occurs when the Requester Database Account <b>705</b> calls the Shared Secure User Defined Table Function <b>747</b> (as the Provider Database Account <b>750</b> cannot execute the function because the provider does not have the encryption pass phrase that is used to encrypt the requester data to generate results data). At operation <b>845</b>, the results data is displayed (e.g., displays the results data on a display device of the Requester Database Account <b>705</b>).</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref> show an example distributed database architecture for implementing multi-entity database clean rooms (e.g., three or more different accounts of different organizations or users of the network-based database system <b>102</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>), according to some example embodiments. As illustrated, a Requester Database Account <b>905</b> (<figref idref="DRAWINGS">FIG. <b>9</b>A</figref>) shares data with a Provider A Database Account <b>950</b> (<figref idref="DRAWINGS">FIG. <b>9</b>B</figref>) and Provider B Database Account <b>990</b> (<figref idref="DRAWINGS">FIG. <b>9</b>B</figref>), as indicated by the double-side share arrows at the top of <figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref>. Further, the &#x201c;A&#x201d;, &#x201c;B&#x201d;, &#x201c;C&#x201d;, and &#x201c;D&#x201d; arrows are disconnected arrows between items shared across <figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref>. As an example, the Requester Database Account <b>905</b> is a media company that runs advertising campaigns (e.g., purchases ads) from multiple advertisers, each of which have different and independent distributed database accounts the network-based database system <b>102</b>, as discussed above, with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>3</b></figref>. As an example, Provider A Database Account <b>950</b> can include a first media streaming platform that provides advertisement services (e.g., ad space), and Provider B Database Account <b>990</b> can be another media streaming platform that similarly provides advertisement services. While database clean rooms can implement sharing between a single requester and single provider (discussed in the approaches above), implementing a secure data clean room that enables the requester access to advertisement results data (e.g., ad metrics and performance) from multiple different provider advertisers can be difficult to implement in a secure manner (e.g., without exposing the data of Provider A Database Account <b>950</b> to Provider B Database Account <b>990</b>, and vice versa). As an additional example, the Requester Database Account <b>905</b> can be a product company (e.g., product company that is purchasing ad space for different products or services), the Provider A Database Account <b>950</b> can be a streaming platform that provides advertisement services (e.g., displays the ads on a network site), and Provider B Database Account <b>990</b> can be a brick-and-mortar store that physically sells advertised products of the Requester Database Account <b>905</b>. In this example, it can be difficult to track conversion from purchased ads that were displayed to end-users (e.g., users that view a given ad) to those end-users later purchasing the product (e.g., in the brick-and-mortar store) due to the computational difficulties of securely sharing the data from different providers and the requester.</p><p id="p-0092" num="0091">To this end, the clean room engine <b>225</b> implements an encryption-based database clean room that can share data between multiple entities (e.g., three or more entities or accounts of the network-based database system <b>102</b>), including a Requester Database Account <b>905</b> and multiple provider accounts (e.g., Provider A Database Account <b>950</b>, Provider B Database Account <b>990</b>), where user data (e.g., user IDs of the end-users of the different accounts) is provided and securely shared via one or more encryption mechanisms, and the Requester Database Account <b>905</b> can perform verification and analysis of the data from the different providers entirely on the database account instance of the requester (e.g., on database storage devices and compute instances of the Requester Database Account <b>905</b> of the network-based database system <b>102</b>), in accordance with some example embodiments.</p><p id="p-0093" num="0092">With reference to <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, the Provider A Database Account <b>950</b> creates a Provider_A User ID Encryption Secure Function <b>952</b> which is a shareable secure function that can be shared with the Requester Database Account <b>905</b>, which is encrypted by an encryption function of the Provider A Database Account <b>950</b> (e.g., with keys that are private to that provider).</p><p id="p-0094" num="0093">The Provider B Database Account <b>990</b> generates a similar function: Provider_B User ID Encryption Secure Function <b>992</b>A, which is encrypted by an encryption function of the Provider B Database Account <b>990</b> (e.g., with keys that are private to the Provider B Database Account <b>990</b>). The Provider_B User ID Encryption Secure Function <b>992</b>A is then shared from the Provider B Database Account <b>990</b> to the Provider A Database Account <b>950</b> as Provider_B User ID Encryption Secure Function <b>992</b>B, which can be used to wrap functions and which can be called in execution to generate results data (e.g., shared with the Requester Database Account <b>905</b> and executed to provide end-user ID direct matching, without exposing the secure function's data to the Requester Database Account <b>905</b>), in accordance with some example embodiments.</p><p id="p-0095" num="0094">With reference to <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>, the Requester Database Account <b>905</b> generates a My Data Table <b>907</b>A which is the input data from the Requester Database Account <b>905</b> that is to be used for completing multi-entity data clean room queries that are generated by the requester. Further, the Requester Database Account <b>905</b> generates a Decrypt_ID Secure Function <b>909</b>A which is configured to perform decryption of the encrypted IDs in the My Data Table <b>907</b>A. In some example embodiments, the Decrypt_ID Secure Function <b>909</b>A stores a private pass key of the Requester Database Account <b>905</b> (e.g., AES <b>256</b> decryption key, pass phrase) which can be initiated to decrypt the IDs (user IDs) that are included in the My Data Table <b>907</b>A, according to some example embodiments.</p><p id="p-0096" num="0095">To initiate a multi-entity encryption-secured data clean room query, the Requester Database Account <b>905</b> adds query data to the My Secure Query Requests Table <b>911</b>A which is part of the clean room shared <b>913</b>A which is shared with Provider A Database Account <b>950</b> (in <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>) as the shared clean room data <b>913</b>B (shared object), which, as depicted, includes the My Secure Query Requests Table <b>911</b>B, which further comprises the data of the newly added request. The newly added query request initiates streams and tasks to run a Stored Procedure Query Runner <b>961</b> in <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, in accordance with some example embodiments.</p><p id="p-0097" num="0096">To generate data for the received request, in response to the Stored Procedure Query Runner <b>961</b> running, the Provider A Database Account <b>950</b> begins by creating an ID Encrypted Table <b>962</b>A by cycling through the My Data Table <b>907</b>B (shared object) in micro batches. In some example embodiments, the micro batches are mixed or re-ordered so they are not included in the initial order such that are not identifiable in the ID Encrypted Table <b>962</b>A.</p><p id="p-0098" num="0097">The ID Encrypted Table <b>962</b>A integrates the My Data Table <b>907</b>B by wrapping the Secure Function Decrypt_ID <b>909</b>B (shared object from the Requester Database Account <b>905</b>) around the table of encrypted IDs in the My Data Table <b>907</b>B (the shared object), and further wrapping the two encryption functions&#x2014;Provider_B User ID Encryption Secure Function <b>992</b>B, and the Provider_A User ID Encryption Secure Function <b>952</b>&#x2014;around the My Data Table <b>907</b>B (which is already wrapped by Secure Function Decrypt_ID <b>909</b>B), which results in triple encrypted data that uses the user IDs from the requester side as encrypted by the encryption functions of the providers. The triple encrypted object, ID Encrypted Table <b>962</b>A, is then shared from the Provider A Database Account <b>950</b> to the Requester Database Account <b>905</b> as the ID Encrypted Table <b>962</b>B (<figref idref="DRAWINGS">FIG. <b>9</b>A</figref>), in accordance with some example embodiments.</p><p id="p-0099" num="0098">The Provider A Database Account <b>950</b> (<figref idref="DRAWINGS">FIG. <b>9</b>B</figref>) then creates a table of exposure data, encrypted exposure data table <b>981</b>A, which is encrypted by encryption functions of the two providers (the Provider_B User ID Encryption Secure Function <b>992</b>B and Provider_A User ID Encryption Secure Function <b>952</b>). The encrypted exposure data table <b>981</b>A is created from the provider source data <b>982</b> (e.g., ad performance metrics, advertising exposure data set, reach and frequency data of different ads and users from provider data set <b>967</b>), for those user IDs that match between the requester and providers (e.g., via direct matching without a cross reference table). The encrypted exposure data table <b>981</b>A is shared with the Requester Database Account <b>905</b> as encrypted exposure data table <b>981</b>B.</p><p id="p-0100" num="0099">In some example embodiments, the encrypted exposure data table <b>981</b>A is only encrypted by the Provider_B User ID Encryption Secure Function <b>992</b>B and the Provider_A User ID Encryption Secure Function <b>952</b>, not by the requester's function (Secure Function Decrypt_ID <b>909</b>B). In some example embodiments to ensure that the data decrypts, the same ordering that is used to wrap the functions to create the ID Encrypted Table <b>962</b>A (<figref idref="DRAWINGS">FIG. <b>9</b>B</figref>) is used to create the encrypted exposure data table <b>981</b>A (<figref idref="DRAWINGS">FIG. <b>9</b>B</figref>). That is for example, if the Provider_B User ID Encryption Secure Function <b>992</b>B is wrapped around the Provider_A User ID Encryption Secure Function <b>952</b>, which is further wrapped around the Secure Function Decrypt_ID <b>909</b>B (which further is wrapped around My Data Table <b>907</b>B), then to create the encrypted exposure data table <b>981</b>A, the provider source data <b>982</b> (e.g., ad exposure data) is wrapped by the Provider_B User ID Encryption Secure Function <b>992</b>B and further by the Provider_A User ID Encryption Secure Function <b>952</b> to maintain the encryption order, such the data decrypts correctly when called by the query code of the Requester Database Account <b>905</b>, in accordance with some example embodiments.</p><p id="p-0101" num="0100">Once the Requester Database Account <b>905</b> receives the ID Encrypted Table <b>962</b>B (e.g., receives shared access to the ID Encrypted Table <b>962</b>A), and further receives the encrypted exposure data table <b>981</b>B (e.g., receives shared access to the encrypted exposure data table <b>981</b>A), the Requester Database Account <b>905</b> performs joins on the tables' data to initiate attribution modeling on the joined data using attribution modeling function <b>933</b> (e.g., machine learning, data modeling and analysis functions). That is, for example, the ID Encrypted Table <b>962</b>B is the requester's user ID data (triple encrypted, as discussed), and the encrypted exposure data table <b>981</b>B is the exposure data (e.g., Provider A's user data, such as ad performance) which includes the attributes and data values to enable the Requester Database Account <b>905</b> to perform reach and frequency analysis of the providers' services (e.g., ad services, product sales data) of the multiple providers. Although in the illustrated example of <figref idref="DRAWINGS">FIGS. <b>9</b>A and <b>9</b>B</figref>, a requester performs clean room analysis on two providers, it is appreciated that the number of providers can be scaled such that the requester can efficiently perform analysis on each provider with which the requester interacts (e.g., four provider accounts that provide ad space, one physical store provider account that sells products, and three online network retailers that sell the product(s)).</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows a flow diagram of an example method <b>1000</b> for implementing a multi-entity encryption-based data clean room queries, according to some example embodiments. At operation <b>1005</b>, the secure functions of the provider accounts are generated (e.g., Provider_B User ID Encryption Secure Function <b>992</b>B, from the Provider B Database Account <b>990</b>; and the Provider_A User ID Encryption Secure Function <b>952</b>, from Provider A Database Account <b>950</b>). At operation <b>1010</b>, the requester data tables are generated (e.g., My Data Table <b>907</b>A, Decrypt_ID Secure Function <b>909</b>A, and My Secure Query Requests Table <b>911</b>A), which are shared with the Provider A Database Account <b>950</b> in <figref idref="DRAWINGS">FIG. <b>9</b>B</figref>, as discussed above. At operation <b>1015</b>, a multi-entity query request is generated. For example, the Requester Database Account <b>905</b> adds new query request data to the My Secure Query Requests Table <b>911</b>A (<figref idref="DRAWINGS">FIG. <b>9</b>A</figref>) which is shared with the Provider A Database Account <b>950</b> in the My Secure Query Requests Table <b>911</b>B (<figref idref="DRAWINGS">FIG. <b>9</b>B</figref>).</p><p id="p-0103" num="0102">At operation <b>1020</b>, multi-entity ID data is generated. For example, the Provider A Database Account <b>950</b> generates the ID Encrypted Table <b>962</b>A by a wrapping the My Data Table <b>907</b>B with the Secure Function Decrypt_ID <b>909</b>B, which is then wrapped by Provider_B User ID Encryption Secure Function <b>992</b>B, which is then further wrapped by the Provider_A User ID Encryption Secure Function <b>952</b>. After the ID Encrypted Table <b>962</b>A is generated by the Provider A Database Account <b>950</b>, the ID Encrypted Table <b>962</b>A is shared with the Requester Database Account <b>905</b> as the ID Encrypted Table <b>962</b>B (in <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>).</p><p id="p-0104" num="0103">At operation <b>1025</b>, the provider data is generated. For example the Provider A Database Account <b>950</b> generates the encrypted exposure data table <b>981</b>A by wrapping the exposure data set of the provider source data <b>982</b> using the Provider_B User ID Encryption Secure Function <b>992</b>B and the Provider_A User ID Encryption Secure Function <b>952</b> (e.g., in the same order as was used to create the ID Encrypted Table <b>962</b>A, albeit without first wrapping the data with the Secure Function Decrypt_ID <b>909</b>B). Once generated, the encrypted exposure data table <b>981</b>A is shared with the Requester Database Account <b>905</b> as the encrypted exposure data table <b>981</b>B.</p><p id="p-0105" num="0104">At operation <b>1030</b>, the results data is generated. For example, the Requester Database Account <b>905</b> can perform joins on the ID Encrypted Table <b>962</b>B and the encrypted exposure data table <b>981</b>B, and an analysis function is applied to the joined data (e.g., attribution modeling function <b>933</b>). In some example embodiments, the requester's user data is decrypted using the passkey within the Decrypt_ID Secure Function <b>909</b>A, with the encryption functions of the providers, where direct matching can be implemented using the shared functions of the providers: Provider_B User ID Encryption Secure Function <b>992</b>B and the Provider_A User ID Encryption Secure Function <b>952</b>, which can access the respective providers user ID data behind the scenes, as secure function operations (UDFs) of the respective providers (respective sandbox processes), without exposing the function operations (and underlying data, such as exposure data) to the requester account that is executing the functions to generate to the results data.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a diagrammatic representation of a machine <b>1100</b> in the form of a computer system within which a set of instructions may be executed for causing the machine <b>1100</b> to perform any one or more of the methodologies discussed herein, according to an example embodiment. Specifically, <figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a diagrammatic representation of the machine <b>1100</b> in the example form of a computer system, within which instructions <b>1116</b> (e.g., software, a program, an application, an applet, an app, or other executable code) for causing the machine <b>1100</b> to perform any one or more of the methodologies discussed herein may be executed. For example, the instructions <b>1116</b> may cause the machine <b>1100</b> to execute any one or more operations of any one or more of the methods described herein. As another example, the instructions <b>1116</b> may cause the machine <b>1100</b> to implemented portions of the data flows described herein. In this way, the instructions <b>1116</b> transform a general, non-programmed machine into a particular machine <b>1100</b> (e.g., the remote computing device <b>106</b>, the access management system <b>110</b>, the compute service manager <b>112</b>, the execution platform <b>114</b>, the access management system <b>118</b>, the Web proxy <b>120</b>, remote computing device <b>106</b>) that is specially configured to carry out any one of the described and illustrated functions in the manner described herein.</p><p id="p-0107" num="0106">In alternative embodiments, the machine <b>1100</b> operates as a standalone device or may be coupled (e.g., networked) to other machines. In a networked deployment, the machine <b>1100</b> may operate in the capacity of a server machine or a client machine in a server-client network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine <b>1100</b> may comprise, but not be limited to, a server computer, a client computer, a personal computer (PC), a tablet computer, a laptop computer, a netbook, a smart phone, a mobile device, a network router, a network switch, a network bridge, or any machine capable of executing the instructions <b>1116</b>, sequentially or otherwise, that specify actions to be taken by the machine <b>1100</b>. Further, while only a single machine <b>1100</b> is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include a collection of machines <b>1100</b> that individually or jointly execute the instructions <b>1116</b> to perform any one or more of the methodologies discussed herein.</p><p id="p-0108" num="0107">The machine <b>1100</b> includes processors <b>1110</b>, memory <b>1130</b>, and input/output (I/O) components <b>1150</b> configured to communicate with each other such as via a bus <b>1102</b>. In an example embodiment, the processors <b>1110</b> (e.g., a central processing unit (CPU), a reduced instruction set computing (RISC) processor, a complex instruction set computing (CISC) processor, a graphics processing unit (GPU), a digital signal processor (DSP), an application-specific integrated circuit (ASIC), a radio-frequency integrated circuit (RFIC), another processor, or any suitable combination thereof) may include, for example, a processor <b>1112</b> and a processor <b>1114</b> that may execute the instructions <b>1116</b>. The term &#x201c;processor&#x201d; is intended to include multi-core processors <b>1110</b> that may comprise two or more independent processors (sometimes referred to as &#x201c;cores&#x201d;) that may execute instructions <b>1116</b> contemporaneously. Although <figref idref="DRAWINGS">FIG. <b>11</b></figref> shows multiple processors <b>1110</b>, the machine <b>1100</b> may include a single processor with a single core, a single processor with multiple cores (e.g., a multi-core processor), multiple processors with a single core, multiple processors with multiple cores, or any combination thereof.</p><p id="p-0109" num="0108">The memory <b>1130</b> may include a main memory <b>1132</b>, a static memory <b>1134</b>, and a storage unit <b>1136</b>, all accessible to the processors <b>1110</b> such as via the bus <b>1102</b>. The main memory <b>1132</b>, the static memory <b>1134</b>, and the storage unit <b>1136</b> comprising a machine storage medium <b>1138</b> may store the instructions <b>1116</b> embodying any one or more of the methodologies or functions described herein. The instructions <b>1116</b> may also reside, completely or partially, within the main memory <b>1132</b>, within the static memory <b>1134</b>, within the storage unit <b>1136</b>, within at least one of the processors <b>1110</b> (e.g., within the processor's cache memory), or any suitable combination thereof, during execution thereof by the machine <b>1100</b>.</p><p id="p-0110" num="0109">The I/O components <b>1150</b> include components to receive input, provide output, produce output, transmit information, exchange information, capture measurements, and so on. The specific I/O components <b>1150</b> that are included in a particular machine <b>1100</b> will depend on the type of machine. For example, portable machines such as mobile phones will likely include a touch input device or other such input mechanisms, while a headless server machine will likely not include such a touch input device. It will be appreciated that the I/O components <b>1150</b> may include many other components that are not shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The I/O components <b>1150</b> are grouped according to functionality merely for simplifying the following discussion and the grouping is in no way limiting. In various example embodiments, the I/O components <b>1150</b> may include output components <b>1152</b> and input components <b>1154</b>. The output components <b>1152</b> may include visual components (e.g., a display such as a plasma display panel (PDP), a light emitting diode (LED) display, a liquid crystal display (LCD), a projector, or a cathode ray tube (CRT)), acoustic components (e.g., speakers), other signal generators, and so forth. The input components <b>1154</b> may include alphanumeric input components (e.g., a keyboard, a touch screen configured to receive alphanumeric input, a photo-optical keyboard, or other alphanumeric input components), point-based input components (e.g., a mouse, a touchpad, a trackball, a joystick, a motion sensor, or another pointing instrument), tactile input components (e.g., a physical button, a touch screen that provides location and/or force of touches or touch gestures, or other tactile input components), audio input components (e.g., a microphone), and the like.</p><p id="p-0111" num="0110">Communication may be implemented using a wide variety of technologies. The I/O components <b>1150</b> may include communication components <b>1164</b> operable to couple the machine <b>1100</b> to a network <b>1180</b> via a coupler <b>1182</b> or to devices <b>1160</b> via a coupling <b>1162</b>. For example, the communication components <b>1164</b> may include a network interface component or another suitable device to interface with the network <b>1180</b>. In further examples, the communication components <b>1164</b> may include wired communication components, wireless communication components, cellular communication components, and other communication components to provide communication via other modalities. The devices <b>1160</b> may be another machine or any of a wide variety of peripheral devices (e.g., a peripheral device coupled via a universal serial bus (USB)). For example, as noted above, the machine <b>1100</b> may correspond to any one of the remote computing device <b>106</b>, the access management system <b>110</b>, the compute service manager <b>112</b>, the execution platform <b>114</b>, the access management system <b>118</b>, the Web proxy <b>120</b>, and the devices <b>1160</b> may include any other of these systems and devices.</p><p id="p-0112" num="0111">The various memories (e.g., <b>1130</b>, <b>1132</b>, <b>1134</b>, and/or memory of the processor(s) <b>1110</b> and/or the storage unit <b>1136</b>) may store one or more sets of instructions <b>1116</b> and data structures (e.g., software) embodying or utilized by any one or more of the methodologies or functions described herein. These instructions <b>1116</b>, when executed by the processor(s) <b>1110</b>, cause various operations to implement the disclosed embodiments.</p><p id="p-0113" num="0112">As used herein, the terms &#x201c;machine-storage medium,&#x201d; &#x201c;device-storage medium,&#x201d; and &#x201c;computer-storage medium&#x201d; mean the same thing and may be used interchangeably in this disclosure. The terms refer to a single or multiple storage devices and/or media (e.g., a centralized or distributed database, and/or associated caches and servers) that store executable instructions and/or data. The terms shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media, including memory internal or external to processors. Specific examples of machine-storage media, computer-storage media, and/or device-storage media include non-volatile memory, including by way of example semiconductor memory devices, e.g., erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), field-programmable gate arrays (FPGAs), and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The terms &#x201c;machine-storage media,&#x201d; &#x201c;computer-storage media,&#x201d; and &#x201c;device-storage media&#x201d; specifically exclude carrier waves, modulated data signals, and other such media, at least some of which are covered under the term &#x201c;signal medium&#x201d; discussed below.</p><p id="p-0114" num="0113">In various example embodiments, one or more portions of the network <b>1180</b> may be an ad hoc network, an intranet, an extranet, a virtual private network (VPN), a local-area network (LAN), a wireless LAN (WLAN), a wide-area network (WAN), a wireless WAN (WWAN), a metropolitan-area network (MAN), the Internet, a portion of the Internet, a portion of the public switched telephone network (PSTN), a plain old telephone service (POTS) network, a cellular telephone network, a wireless network, a Wi-Fi&#xae; network, another type of network, or a combination of two or more such networks. For example, the network <b>1180</b> or a portion of the network <b>1180</b> may include a wireless or cellular network, and the coupling <b>1182</b> may be a Code Division Multiple Access (CDMA) connection, a Global System for Mobile communications (GSM) connection, or another type of cellular or wireless coupling. In this example, the coupling <b>1182</b> may implement any of a variety of types of data transfer technology, such as Single Carrier Radio Transmission Technology (1&#xd7;RTT), Evolution-Data Optimized (EVDO) technology, General Packet Radio Service (GPRS) technology, Enhanced Data rates for GSM Evolution (EDGE) technology, third Generation Partnership Project (3GPP) including 3G, fourth generation wireless (4G) networks, Universal Mobile Telecommunications System (UMTS), High-Speed Packet Access (HSPA), Worldwide Interoperability for Microwave Access (WiMAX), Long Term Evolution (LTE) standard, others defined by various standard-setting organizations, other long-range protocols, or other data transfer technology.</p><p id="p-0115" num="0114">The instructions <b>1116</b> may be transmitted or received over the network <b>1180</b> using a transmission medium via a network interface device (e.g., a network interface component included in the communication components <b>1164</b>) and utilizing any one of a number of well-known transfer protocols (e.g., hypertext transfer protocol (HTTP)). Similarly, the instructions <b>1116</b> may be transmitted or received using a transmission medium via the coupling <b>1162</b> (e.g., a peer-to-peer coupling) to the devices <b>1160</b>. The terms &#x201c;transmission medium&#x201d; and &#x201c;signal medium&#x201d; mean the same thing and may be used interchangeably in this disclosure. The terms &#x201c;transmission medium&#x201d; and &#x201c;signal medium&#x201d; shall be taken to include any intangible medium that is capable of storing, encoding, or carrying the instructions <b>1116</b> for execution by the machine <b>1100</b>, and include digital or analog communications signals or other intangible media to facilitate communication of such software. Hence, the terms &#x201c;transmission medium&#x201d; and &#x201c;signal medium&#x201d; shall be taken to include any form of modulated data signal, carrier wave, and so forth. The term &#x201c;modulated data signal&#x201d; means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.</p><p id="p-0116" num="0115">The terms &#x201c;machine-readable medium,&#x201d; &#x201c;computer-readable medium,&#x201d; and &#x201c;device-readable medium&#x201d; mean the same thing and may be used interchangeably in this disclosure. The terms are defined to include both machine-storage media and transmission media. Thus, the terms include both storage devices/media and carrier waves/modulated data signals.</p><p id="p-0117" num="0116">The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of the methods described herein may be performed by one or more processors. The performance of certain of the operations may be distributed among the one or more processors, not only residing within a single machine, but also deployed across a number of machines. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment, or a server farm), while in other embodiments the processors may be distributed across a number of locations.</p><p id="p-0118" num="0117">Although the embodiments of the present disclosure have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader scope of the inventive subject matter. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show, by way of illustration, and not of limitation, specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be used and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled.</p><p id="p-0119" num="0118">Such embodiments of the inventive subject matter may be referred to herein, individually and/or collectively, by the term &#x201c;invention&#x201d; merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus, although specific embodiments have been illustrated and described herein, it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments, and other embodiments not specifically described herein, will be apparent, to those of skill in the art, upon reviewing the above description.</p><p id="p-0120" num="0119">In this document, the terms &#x201c;a&#x201d; or &#x201c;an&#x201d; are used, as is common in patent documents, to include one or more than one, independent of any other instances or usages of &#x201c;at least one&#x201d; or &#x201c;one or more.&#x201d; In this document, the term &#x201c;or&#x201d; is used to refer to a nonexclusive or, such that &#x201c;A or B&#x201d; includes &#x201c;A but not B,&#x201d; &#x201c;B but not A,&#x201d; and &#x201c;A and B,&#x201d; unless otherwise indicated. In the appended claims, the terms &#x201c;including&#x201d; and &#x201c;in which&#x201d; are used as the plain-English equivalents of the respective terms &#x201c;comprising&#x201d; and &#x201c;wherein.&#x201d; Also, in the following claims, the terms &#x201c;including&#x201d; and &#x201c;comprising&#x201d; are open-ended; that is, a system, device, article, or process that includes elements in addition to those listed after such a term in a claim is still deemed to fall within the scope of that claim.</p><p id="p-0121" num="0120">Described implementations of the subject matter can include one or more features, alone or in combination as illustrated below by way of example.</p><p id="p-0122" num="0121">Example 1. A method comprising: generating, by a requester database account of a distributed database, a clean room query request against a shared data set comprising requester data set from the requester database account and a provider data set from a provider database account of the distributed database, the requester database account not having access through the distributed database to the provider data set in plain text format, the provider database account not having access through the distributed database to the requester data set in plain text format, generating, by the requester database account, a requester shared data table comprising the requester data set in encrypted format that is encrypted using a pass phrase that is private to the requester database account; generating, by the provider database account, a user defined function that generates results data using the requester shared data table in the encrypted format and the provider data set, wherein the user defined function accepting a decryption parameter to generate the results data by decrypting the requester data set; generating, by the requester database account, the results data for the clean room query request by inputting, by the requester database account, the pass phrase into the user defined function and executing the user defined function.</p><p id="p-0123" num="0122">Example 2. The method of example 1, wherein the requester database account executes the user defined function and the user defined function executes on a provider database instance of the provider database account on the distributed database.</p><p id="p-0124" num="0123">Example 3. The method of examples 1 or 2, further comprising: sharing the requester data set in the encrypted format with the provider database account as a shared database object of the distributed database.</p><p id="p-0125" num="0124">Example 4. The method of examples 1-3, further comprising: sharing, by the provider database account, the user defined function with the requester database account.</p><p id="p-0126" num="0125">Example 5. The method of examples 1-4, wherein the user defined function generates the results data using metadata references to the provider data set.</p><p id="p-0127" num="0126">Example 6. The method of examples 1-5, wherein the pass phrase is private to the requester database.</p><p id="p-0128" num="0127">Example 7. The method of examples 1-6, wherein the provider database account cannot generate the results data by executing the user defined function without inputting the pass phrase due to the requester data set being in the encrypted format.</p><p id="p-0129" num="0128">Example 8. The method of examples 1-7, further comprising: storing, by the provider database account, available values table that specifies which portions of the provider data set are accessible to the requester database account via the clean room query request.</p><p id="p-0130" num="0129">Example 9. The method of examples 1-8, wherein the clean room query request specifies portions of the provider data set for processing in the clean room query request.</p><p id="p-0131" num="0130">Example 10. The method of examples 1-9, further comprising: determining whether the requester database account has access to the portions of the provider data set that are specified in the clean room query request, wherein the access is determined using the available values table of the provider database account.</p><p id="p-0132" num="0131">Example 11. A system comprising: one or more processors of a machine; and a memory storing instructions that, when executed by the one or more processors, cause the machine to perform operations implementing any one of example methods 1 to 10.</p><p id="p-0133" num="0132">Example 12. A machine-readable storage device embodying instructions that, when executed by a machine, cause the machine to perform operations implementing any one of example methods 1 to 10.</p><p id="p-0134" num="0133">Example 13. A method comprising: generating, from a requestor database account of a distributed database, a query against user data shared by multiple provider database accounts including a first provider database account and a second provider database account, the requestor database account and the multiple provider database account not having access user data identifiers in plain text format through the distributed database; receiving, from a requestor database account of a distributed database, a user identifier table wrapped in a decryption function of the requestor database account and a first encryption function of the first provider database account and a second encryption function of a second provider database account; receiving, from the requestor database account, a provider user data set of the first provider database account, the provider user data set being wrapped in the first encryption function of the first provider database account and the second encryption function of the second provider database account; and generating, from the requestor database account, results data using the first provider user data set and the user identifier table.</p><p id="p-0135" num="0134">Example 14. The method of example 13, wherein the user identifier table and the provider user data set are wrapped in a same order by the first encryption function of the first provider database account and the second encryption function of the second provider database account.</p><p id="p-0136" num="0135">Example 15. A system comprising: one or more processors of a machine; and a memory storing instructions that, when executed by the one or more processors, cause the machine to perform operations implementing any one of example methods 13 or 14.</p><p id="p-0137" num="0136">Example 16. A machine-readable storage device embodying instructions that, when executed by a machine, cause the machine to perform operations implementing any one of example methods 13 or 14.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>identifying a query against a shared user dataset shared by multiple provider databases including a first provider database and a second provider database;</claim-text><claim-text>receiving a user identifier table wrapped in a first encryption function of the first provider database and a second encryption function of the second provider database, the user identifier table wrapped by the first encryption function and the second encryption function in an order;</claim-text><claim-text>receiving a user data set that is wrapped in the first encryption function of the first provider database and the second encryption function of the second provider database in the same order as the user identifier table; and</claim-text><claim-text>generating, using or more processes of a machine, results data using the user identifier table to match user identifiers for users shared by a requester database and one or more of the multiple provider databases, and using the user data set to process the query using the matched user identifiers.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user data set comprises user attribute data of users having user identifiers in the user identifier table.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the requester database does not have access to a first set of user identifiers of the first provider database in plaintext format, and wherein the requester database further does not have access to a second set of user identifiers of the second provider database in plaintext format.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the first provider database does not have access to requester user identifiers of the requester database and other user identifiers of other provider databases of the multiple provider databases including the second provider database.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the second provider database does not have access to the requester user identifiers of the requester database and other user identifiers of other provider databases of the multiple provider databases including the first provider database.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user identifier table is received from the first provider database, and wherein the first provider database wraps a decryption function of the requester database with the first encryption function of the first provider database, followed by wrapping the decryption function and the first encryption function with the second encryption function.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the first provider database receives access to the decryption function from the requester database as a shared database object and further receives access to the second encryption function from the second provider database as another shared database object.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the requester database receives access to the first encryption function from the first provider database as a database share object and further receives the second encryption function from the second provider database as a further database share object.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein generating the results data by the requester database comprises:<claim-text>generating, by the requester database, the shared user dataset by executing, on the user identifier table, the second encryption function, followed by executing the first encryption function, followed by executing a decryption function of the requester database, wherein the decryption function is executed with a decryption key of the requester database, wherein the shared user dataset comprises the user identifiers for users shared by the requester database and the multiple provider databases;</claim-text><claim-text>generating exposure data by executing, on the user data set, the second encryption function, followed by executing the first encryption function, wherein the exposure data comprises attribute data of users of the first provider database; and</claim-text><claim-text>performing, by the requester database, data modeling on the shared user dataset and the exposure data to generate the results data.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising: sharing a decryption function with the first provider database.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the first provider database cannot execute the decryption function of the requester database without a decryption key that is private to the requester database.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the first encryption function and the second encryption function is a user defined function that can be shared for execution by other requester and provider databases through.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A system comprising:<claim-text>one or more processors of a machine; and</claim-text><claim-text>at least one memory storing instructions that, when executed by the one or more processors, cause the machine to perform operations comprising:</claim-text><claim-text>identifying a query against a shared user dataset shared by multiple provider databases including a first provider database and a second provider database;</claim-text><claim-text>receiving a user identifier table wrapped in a first encryption function of the first provider database and a second encryption function of the second provider database, the user identifier table wrapped by the first encryption function and the second encryption function in an order;</claim-text><claim-text>receiving a user data set that is wrapped in the first encryption function of the first provider database and the second encryption function of the second provider database in the same order as the user identifier table; and</claim-text><claim-text>generating, using or more processes of a machine, results data using the user identifier table to match user identifiers for users shared by a requester database and one or more of the multiple provider databases, and using the user data set to process the query using the matched user identifiers.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the user data set comprises user attribute data of users having user identifiers in the user identifier table.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the requester database does not have access to a first set of user identifiers of the first provider database in plaintext format, and wherein the requester database further does not have access to a second set of user identifiers of the second provider database in plaintext format.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first provider database does not have access to requester user identifiers of the requester database and other user identifiers of other provider databases of the multiple provider databases including the second provider database.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the second provider database does not have access to the requester user identifiers of the requester database and other user identifiers of other provider databases of the multiple provider databases including the first provider database.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the user identifier table is received from the first provider database, and wherein the first provider database wraps a decryption function of the requester database with the first encryption function of the first provider database, followed by wrapping the decryption function and the first encryption function with the second encryption function.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the first provider database receives access to the decryption function from the requester database as a shared database object and further receives access to the second encryption function from the second provider database as another shared database object.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the requester database receives access to the first encryption function from the first provider database as a database share object and further receives the second encryption function from the second provider database as a further database share object.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein generating the results data by the requester database comprises:<claim-text>generating, by the requester database, the shared user dataset by executing, on the user identifier table, the second encryption function, followed by executing the first encryption function, followed by executing a decryption function of the requester database, wherein the decryption function is executed with a decryption key of the requester database, wherein the shared user dataset comprises the user identifiers for users shared by the requester database and the multiple provider databases;</claim-text><claim-text>generating exposure data by executing, on the user data set, the second encryption function, followed by executing the first encryption function, wherein the exposure data comprises attribute data of users of the first provider database; and</claim-text><claim-text>performing, by the requester database, data modeling on the shared user dataset and the exposure data to generate the results data.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising: sharing a decryption function with the first provider database.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the first provider database cannot execute the decryption function of the requester database without a decryption key that is private to the requester database.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein each of the first encryption function and the second encryption function is a user defined function that can be shared for execution by other requester and provider databases through.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. A non-transitory machine-readable storage device embodying instructions that, when executed by a machine, cause the machine to perform operations comprising:<claim-text>identifying a query against a shared user dataset shared by multiple provider databases including a first provider database and a second provider database;</claim-text><claim-text>receiving a user identifier table wrapped in a first encryption function of the first provider database and a second encryption function of the second provider database, the user identifier table wrapped by the first encryption function and the second encryption function in an order;</claim-text><claim-text>receiving a user data set that is wrapped in the first encryption function of the first provider database and the second encryption function of the second provider database in the same order as the user identifier table; and</claim-text><claim-text>generating, using or more processes of a machine, results data using the user identifier table to match user identifiers for users shared by a requester database and one or more of the multiple provider databases, and using the user data set to process the query using the matched user identifiers.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The non-transitory machine-readable storage device of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the user data set comprises user attribute data of users having user identifiers in the user identifier table.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The non-transitory machine-readable storage device of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the requester database does not have access to a first set of user identifiers of the first provider database in plaintext format, and wherein the requester database further does not have access to a second set of user identifiers of the second provider database in plaintext format.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The non-transitory machine-readable storage device of <claim-ref idref="CLM-00027">claim 27</claim-ref>, wherein the first provider database does not have access to requester user identifiers of the requester database and other user identifiers of other provider databases of the multiple provider databases including the second provider database.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The non-transitory machine-readable storage device of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the second provider database does not have access to the requester user identifiers of the requester database and other user identifiers of other provider databases of the multiple provider databases including the first provider database.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The non-transitory machine-readable storage device of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the user identifier table is received from the first provider database, and wherein the first provider database wraps a decryption function of the requester database with the first encryption function of the first provider database, followed by wrapping the decryption function and the first encryption function with the second encryption function.</claim-text></claim></claims></us-patent-application>