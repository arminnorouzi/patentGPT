<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004415A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004415</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17390480</doc-number><date>20210730</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>455</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>45558</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>45545</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>608</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2009</main-group><subgroup>4557</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2009</main-group><subgroup>45595</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Merging Streams In Virtual Channel For Call Enhancement In Virtual Desktop Infrastructure</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63218375</doc-number><date>20210704</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Zoom Video Communications, Inc.</orgname><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Luo</last-name><first-name>Xingzhi</first-name><address><city>Sunnyvale</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ye</last-name><first-name>Daoquan</first-name><address><city>Hangzhou</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Calls run through a virtual desktop infrastructure server are enhanced by opening a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server. A first stream of media data for the call is merged with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream as the packets await transmission. A first packet of media data of the first stream is pushed into the first packet queue. A fill level of the first packet queue is compared to a first congest threshold associated with the first packet queue. Responsive to the fill level exceeding the first congest threshold, a congestion mitigation measure is invoked.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="177.97mm" wi="158.75mm" file="US20230004415A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="222.33mm" wi="168.23mm" file="US20230004415A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="221.49mm" wi="129.88mm" orientation="landscape" file="US20230004415A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="207.86mm" wi="169.59mm" file="US20230004415A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="218.61mm" wi="168.40mm" file="US20230004415A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="201.76mm" wi="161.46mm" file="US20230004415A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="210.23mm" wi="140.38mm" file="US20230004415A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="221.40mm" wi="156.72mm" file="US20230004415A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="221.40mm" wi="140.46mm" file="US20230004415A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="228.09mm" wi="170.86mm" file="US20230004415A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="218.61mm" wi="161.46mm" orientation="landscape" file="US20230004415A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.88mm" wi="113.54mm" file="US20230004415A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="231.65mm" wi="163.49mm" file="US20230004415A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="235.71mm" wi="167.30mm" orientation="landscape" file="US20230004415A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="227.75mm" wi="150.71mm" file="US20230004415A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="227.75mm" wi="142.07mm" file="US20230004415A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading><p id="p-0002" num="0001">This application claims the benefit of U.S. Provisional Application No. 63/218,375, filed on Jul. 4, 2021, which is incorporated herein by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Enterprise entities rely upon several modes of communication to support their operations, including telephone, email, internal messaging, and the like. These separate modes of communication have historically been implemented by service providers whose services are not integrated with one another. The disconnect between these services, in at least some cases, requires information to be manually passed by users from one service to the next. Furthermore, some services, such as telephony services, are traditionally delivered via on-premises systems, meaning that remote workers and those who are generally increasingly mobile may be unable to rely upon them. One type of system which addresses problems such as these includes a unified communications as a service (UCaaS) platform, which includes several communications services integrated over a network, such as the Internet, to deliver a complete communication experience regardless of physical location.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">Disclosed herein are, inter alia, implementations of systems and techniques for merging streams in a virtual channel for call enhancement in virtual desktop infrastructure.</p><p id="p-0005" num="0004">One aspect of this disclosure is a method including opening a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server, wherein the media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol for exchanging data for virtual desktop applications; merging a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream, wherein the first packet queue is associated with a first congest threshold; pushing a first packet of media data of the first stream into the first packet queue; comparing a fill level of the first packet queue to the first congest threshold; and, responsive to the fill level exceeding the first congest threshold, invoking a congestion mitigation measure.</p><p id="p-0006" num="0005">One aspect of this disclosure is a personal computing device, including a network interface, a processor, and a memory, wherein the memory stores instructions executable by the processor to: open a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server, wherein the media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol for exchanging data for virtual desktop applications; merge a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream, wherein the first packet queue is associated with a first congest threshold; push a first packet of media data of the first stream into the first packet queue; compare a fill level of the first packet queue to the first congest threshold; and, responsive to the fill level exceeding the first congest threshold, invoke a congestion mitigation measure.</p><p id="p-0007" num="0006">One aspect of this disclosure is a non-transitory computer-readable storage medium, comprising executable instructions that, when executed by a processor, facilitate performance of operations, including opening a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server, wherein the media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol for exchanging data for virtual desktop applications; merging a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream, wherein the first packet queue is associated with a first congest threshold; pushing a first packet of media data of the first stream into the first packet queue; comparing a fill level of the first packet queue to the first congest threshold; and responsive to the fill level exceeding the first congest threshold, invoking a congestion mitigation measure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007">This disclosure is best understood from the following detailed description when read in conjunction with the accompanying drawings. It is emphasized that, according to common practice, the various features of the drawings are not to-scale. On the contrary, the dimensions of the various features are arbitrarily expanded or reduced for clarity.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example of an electronic computing and communications system.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of an example internal configuration of a computing device of an electronic computing and communications system.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of an example of a software platform implemented by an electronic computing and communications system.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of an example of a virtual desktop infrastructure system configured to enable calls using a virtual desktop instance.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an example of a system configured to enable calls using a virtual desktop instance that illustrates the flow of media data to support a call.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of an example of a technique for selecting a media channel to support a call initiated using a virtual desktop infrastructure server.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of an example of a technique for testing communications network conditions for network socket pair connections in a system configured to enable calls using a virtual desktop instance.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart of an example of a technique for testing communications network conditions for network socket pair connections in a system configured to enable calls using a virtual desktop instance.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart of an example of a technique for selecting a media channel to support a call initiated using a virtual desktop infrastructure server.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram of an example of a set of packet queues for storing packets for a call to await transmission via a single, shared virtual channel of a virtual desktop infrastructure protocol.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is an illustration of an example of a set of packet queue showing with a congestion threshold and a refuse threshold.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>12</b>A</figref> is a flowchart of an example of a technique for storing packets for a call in a packet queue with a congest threshold to await transmission via a shared virtual channel.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>12</b>B</figref> is a flowchart of an example of a technique for reading packets for a call in a packet queue with a congest threshold for transmission via a shared virtual channel.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart of an example of a technique for transmitting packets for a call from multiple streams using packet queues with a congest threshold.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flowchart of an example of a technique for invoking congestion mitigation measures.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0024" num="0023">A service often offered to large groups of users remotely is virtual desktop infrastructure (VDI), which allows user access to a desktop interface that is provided by a server. This desktop interface provides access to applications that run on the operating system used by a virtual desktop instance, which may be a different operating system than that used by a personal computing device that a person uses to remotely access the virtual desktop.</p><p id="p-0025" num="0024">Client software for a UCaaS platform can be run on a virtual desktop instance. In some examples, UCaaS client software running on a VDI server can be used to facilitate the participation of a user in calls (e.g., video conferencing calls or voice-only calls) from their personal computing device that is connected to the VDI server. The VDI server may relay some or all data used to facilitate the call between one or more servers of a UCaaS platform and the user's personal computing device. It is advantageous in some circumstances to route media data (e.g., audio and/or video data) for a call more directly between a media server of the UCaaS platform and the personal computing device to bypass the VDI server. This practice is often referred to as media offloading. In appropriate circumstances, media offloading can conserve computing resources on the VDI server, conserve network bandwidth that would otherwise be used to relay the media data for the call, which can be a relatively high data rate, and reduce latency in the call, which can be a significant factor in perceived call quality. This comes at the expense of an increase in the use of processing resources on the personal computing device, which has to run media coders and decoders for the media streams locally. However, in some circumstances, media offloading can degrade call quality.</p><p id="p-0026" num="0025">Implementations of this disclosure address problems such as these by enabling a personal computing device that is entering a call setup by client software running in a VDI server to test the communication network conditions and select a media channel for transferring media data of the call from a set of supported media channels to suit the current conditions. In some examples, the set of supported media channels may include (1) a relatively direct connection to the media server that bypasses the VDI server and uses a network socket pair connection (e.g., using a User Datagram Protocol (UDP) socket pair) between the media server and the personal computing device; (2) a second media channel that is routed through the VDI server and encapsulated in a protocol (e.g., the Independent Computing Architecture (ICA) protocol or the Remote Desktop Protocol (RDP) protocol) for exchanging data for virtual desktop applications; and/or (3) a third media channel using a network socket pair connection (e.g., using a UDP socket pair) between the personal computing device and the VDI server. In some implementations, the more direct connection using the first media channel is preferred and may be used whenever test results for this direct connection satisfy a criterion (e.g., sufficient data throughput and/or low enough latency). In some implementations, the third media channel is preferred to the second media channel, and the second media channel is selected when the first media channel is unavailable, and the third media channel satisfies a criterion. If both the first media channel and the third media channel are unavailable, then the second media channel may be selected. In some implementations, test results for multiple supported media channels may be compared to each other and a media channel may be selected based on the comparison.</p><p id="p-0027" num="0026">In a first example scenario, a number of factors may be compared for the first media channel, the second media channel, and the third media channel, and the best media channel may be selected. In a second example scenario, a user is presented with all the data, or some simplified portion of the data, and the user is enabled to select which media channel is used. In an example, if multiple people are on a conference call watching a video, and some of them are experiencing poor quality, the system can either automatically switch to a better connection or the users can manually change the media channel (and review factors related to that change).</p><p id="p-0028" num="0027">When the second media channel (which is routed through the VDI server and encapsulated in a protocol (e.g., the ICA protocol or the RDP protocol) for exchanging data for virtual desktop applications) is used, it can be advantageous to conserve the number of virtual channels of the protocol that are used by a given call. In some examples, multiple media streams (e.g., from different call participants) may be merged into a single virtual channel of the protocol. In some implementations, all of the data exchanged during the call (e.g., including control data, audio data, video data, and share data) may be merged into a single virtual channel of the protocol. Conserving virtual channel usage may enable a VDI system to support a high volume of calls, making the system more scalable. Merging different types of call data into a single virtual channel of the protocol may also enable custom prioritization of the various traffic types by a phone agent or a meeting agent.</p><p id="p-0029" num="0028">The second media channel may be used to send and receive data of four types between a plugin running on a personal computing device and the VDI client running on the VDI server: command/signal, audio, video, and share (e.g., for screen sharing in a conference call). Conventional implementations have used separate virtual channels of the VDI protocol (e.g., ICA virtual channels) for each type of call data and rely on VDI protocol mechanisms to allocate quality of service between the types of call data. The number of virtual channels of the protocol that can be used for calls is limited. It may be beneficial to reduce the number of virtual channels used to support a call while maintaining or improving quality of service for the path between the personal computing device (e.g., a thin client) and the VDI server. In some implementations, the data types transferred via a shared virtual channel may be assigned priorities. In some examples, Command/signal data may be assigned a highest priority level, audio data may be assigned a high priority level, share data may be assigned a medium priority level, and video data may be assigned a low priority level. In some examples, it may be acceptable to drop packets of media data (e.g., audio, share, or video) and unacceptable to intentionally drop command/signal data.</p><p id="p-0030" num="0029">Some implementations described herein address quality of service issues for the path in the second media channel between the plugin running on the personal computing device (e.g., a thin client) and the VDI client running on the VDI server. A connection may be established between a media server (e.g., a private branch exchange (PBX) or multimedia router (MMR)) and a thin client to support a call in which a user of the thin client will participate. The connection is established via a VDI server. Call data of various types (e.g., command/control, audio, video, and share) are sent between the thin client running a conference call plugin and a conference call VDI client running on the VDI server via a single virtual channel of a protocol (e.g., the ICA protocol or the RDP protocol) for exchanging data for virtual desktop applications. Each data type may have its own send queue. In some examples, four thread safe data queues may be used to maintain the outgoing data queues for each of the four different data types. The send queues may have one or more fill thresholds, including a congestion threshold, that governs quality of service enhancement measures. In some examples, when a congestion threshold in a send buffer is exceeded, a congestion flag may be set in a channel state maintained by the plugin. This congestion flag may trigger one or more congestion mitigation measures, such as reducing the encoder data rate for one or more types of media data in the call and/or sending a congestion message to the media server and/or the VDI server. In some implementations, a send buffer also has a refuse threshold. When the fill level for the send buffer exceeds the refuse threshold, packets of data may be dropped.</p><p id="p-0031" num="0030">Some implementations may provide advantages, such as reducing the number of virtual channels (e.g., ICA virtual channels) needed to support a call and improving quality of service (QoS).</p><p id="p-0032" num="0031">To describe some implementations in greater detail, reference is first made to examples of hardware and software structures for merging streams in a virtual channel for call enhancement in virtual desktop infrastructure. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of an example of an electronic computing and communications system <b>100</b>, which can be or include a distributed computing system (e.g., a client-server computing system), a cloud computing system, a clustered computing system, or the like.</p><p id="p-0033" num="0032">The system <b>100</b> includes one or more customers, such as customers <b>102</b>A through <b>102</b>B, which may each be a public entity, private entity, or another corporate entity or individual that purchases or otherwise uses software services, such as of a UCaaS platform provider. Each customer can include one or more clients. For example, as shown and without limitation, the customer <b>102</b>A can include clients <b>104</b>A through <b>104</b>B, and the customer <b>102</b>B can include clients <b>104</b>C through <b>104</b>D. A customer can include a customer network or domain. For example, and without limitation, the clients <b>104</b>A through <b>104</b>B can be associated or communicate with a customer network or domain for the customer <b>102</b>A and the clients <b>104</b>C through <b>104</b>D can be associated or communicate with a customer network or domain for the customer <b>102</b>B.</p><p id="p-0034" num="0033">A client, such as one of the clients <b>104</b>A through <b>104</b>D, may be or otherwise refer to one or both of a client device or a client application. Where a client is or refers to a client device, the client can comprise a computing system, which can include one or more computing devices, such as a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, or another suitable computing device or combination of computing devices. Where a client instead is or refers to a client application, the client can be an instance of software running on a customer device (e.g., a client device or another device). In some implementations, a client can be implemented as a single physical unit or as a combination of physical units. In some implementations, a single physical unit can include multiple clients.</p><p id="p-0035" num="0034">The system <b>100</b> can include a number of customers and/or clients or can have a configuration of customers or clients different from that generally illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, and without limitation, the system <b>100</b> can include hundreds or thousands of customers, and at least some of the customers can include or be associated with a number of clients.</p><p id="p-0036" num="0035">The system <b>100</b> includes a datacenter <b>106</b>, which may include one or more servers. The datacenter <b>106</b> can represent a geographic location, which can include a facility, where the one or more servers are located. The system <b>100</b> can include a number of datacenters and servers or can include a configuration of datacenters and servers different from that generally illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, and without limitation, the system <b>100</b> can include tens of datacenters, and at least some of the datacenters can include hundreds or another suitable number of servers. In some implementations, the datacenter <b>106</b> can be associated or communicate with one or more datacenter networks or domains, which can include domains other than the customer domains for the customers <b>102</b>A through <b>102</b>B.</p><p id="p-0037" num="0036">The datacenter <b>106</b> includes servers used for implementing software services of a UCaaS platform. The datacenter <b>106</b> as generally illustrated includes an application server <b>108</b>, a database server <b>110</b>, and telephony server <b>112</b>. The servers <b>108</b> through <b>112</b> can each be a computing system, which can include one or more computing devices, such as a desktop computer, a server computer, or another computer capable of operating as a server, or a combination thereof. A suitable number of each of the servers <b>108</b> through <b>112</b> can be implemented at the datacenter <b>106</b>. The UCaaS platform uses a multi-tenant architecture in which installations or instantiations of the servers <b>108</b> through <b>112</b> is shared amongst the customers <b>102</b>A through <b>102</b>B.</p><p id="p-0038" num="0037">In some implementations, one or more of the servers <b>108</b> through <b>112</b> can be a non-hardware server implemented on a physical device, such as a hardware server. In some implementations, a combination of two or more of the application server <b>108</b>, the database server <b>110</b>, and the telephony server <b>112</b> can be implemented as a single hardware server or as a single non-hardware server implemented on a single hardware server. In some implementations, the datacenter <b>106</b> can include servers other than or in addition to the servers <b>108</b> through <b>112</b>, for example, a media server, a proxy server, or a web server.</p><p id="p-0039" num="0038">The application server <b>108</b> runs web-based software services deliverable to a client, such as one of the clients <b>104</b>A through <b>104</b>D. As described above, the software services may be of a UCaaS platform. For example, the application server <b>108</b> can implement all or a portion of a UCaaS platform, including conferencing software, messaging software, and/or other intra-party or inter-party communications software. The application server <b>108</b> may, for example, be or include a unitary Java Virtual Machine (JVM).</p><p id="p-0040" num="0039">In some implementations, the application server <b>108</b> can include an application node, which can be a process executed on the application server <b>108</b>. For example, and without limitation, the application node can be executed in order to deliver software services to a client, such as one of the clients <b>104</b>A through <b>104</b>D, as part of a software application. The application node can be implemented using processing threads, virtual machine instantiations, or other computing features of the application server <b>108</b>. In some such implementations, the application server <b>108</b> can include a suitable number of application nodes, depending upon a system load or other characteristics associated with the application server <b>108</b>. For example, and without limitation, the application server <b>108</b> can include two or more nodes forming a node cluster. In some such implementations, the application nodes implemented on a single application server <b>108</b> can run on different hardware servers.</p><p id="p-0041" num="0040">The database server <b>110</b> stores, manages, or otherwise provides data for delivering software services of the application server <b>108</b> to a client, such as one of the clients <b>104</b>A through <b>104</b>D. In particular, the database server <b>110</b> may implement one or more databases, tables, or other information sources suitable for use with a software application implemented using the application server <b>108</b>. The database server <b>110</b> may include a data storage unit accessible by software executed on the application server <b>108</b>. A database implemented by the database server <b>110</b> may be a relational database management system (RDBMS), an object database, an XML database, a configuration management database (CMDB), a management information base (MIB), one or more flat files, other suitable non-transient storage mechanisms, or a combination thereof. The system <b>100</b> can include one or more database servers, in which each database server can include one, two, three, or another suitable number of databases configured as or comprising a suitable database type or combination thereof.</p><p id="p-0042" num="0041">In some implementations, one or more databases, tables, other suitable information sources, or portions or combinations thereof may be stored, managed, or otherwise provided by one or more of the elements of the system <b>100</b> other than the database server <b>110</b>, for example, the client <b>104</b> or the application server <b>108</b>.</p><p id="p-0043" num="0042">The telephony server <b>112</b> enables network-based telephony and web communications from and to clients of a customer, such as the clients <b>104</b>A through <b>104</b>B for the customer <b>102</b>A or the clients <b>104</b>C through <b>104</b>D for the customer <b>102</b>B. Some or all of the clients <b>104</b>A through <b>104</b>D may be voice over Internet protocol (VOIP)-enabled devices configured to send and receive calls over a network <b>114</b>. In particular, the telephony server <b>112</b> includes a session initiation protocol (SIP) zone and a web zone. The SIP zone enables a client of a customer, such as the customer <b>102</b>A or <b>102</b>B, to send and receive calls over the network <b>114</b> using SIP requests and responses. The web zone integrates telephony data with the application server <b>108</b> to enable telephony-based traffic access to software services run by the application server <b>108</b>. Given the combined functionality of the SIP zone and the web zone, the telephony server <b>112</b> may be or include a cloud-based PBX system.</p><p id="p-0044" num="0043">The SIP zone receives telephony traffic from a client of a customer and directs same to a destination device. The SIP zone may include one or more call switches for routing the telephony traffic. For example, to route a VOIP call from a first VOIP-enabled client of a customer to a second VOIP-enabled client of the same customer, the telephony server <b>112</b> may initiate a SIP transaction between a first client and the second client using a PBX for the customer. However, in another example, to route a VOIP call from a VOIP-enabled client of a customer to a client or non-client device (e.g., a desktop phone which is not configured for VOIP communication) which is not VOIP-enabled, the telephony server <b>112</b> may initiate a SIP transaction via a VOIP gateway that transmits the SIP signal to a public switched telephone network (PSTN) system for outbound communication to the non-VOIP-enabled client or non-client phone. Hence, the telephony server <b>112</b> may include a PSTN system and may in some cases access an external PSTN system.</p><p id="p-0045" num="0044">The telephony server <b>112</b> includes one or more session border controllers (SBCs) for interfacing the SIP zone with one or more aspects external to the telephony server <b>112</b>. In particular, an SBC can act as an intermediary to transmit and receive SIP requests and responses between clients or non-client devices of a given customer with clients or non-client devices external to that customer. When incoming telephony traffic for delivery to a client of a customer, such as one of the clients <b>104</b>A through <b>104</b>D, originating from outside the telephony server <b>112</b> is received, a SBC receives the traffic and forwards it to a call switch for routing to the client.</p><p id="p-0046" num="0045">In some implementations, the telephony server <b>112</b>, via the SIP zone, may enable one or more forms of peering to a carrier or customer premise. For example, Internet peering to a customer premise may be enabled to ease the migration of the customer from a legacy provider to a service provider operating the telephony server <b>112</b>. In another example, private peering to a customer premise may be enabled to leverage a private connection terminating at one end at the telephony server <b>112</b> and at the other end at a computing aspect of the customer environment. In yet another example, carrier peering may be enabled to leverage a connection of a peered carrier to the telephony server <b>112</b>.</p><p id="p-0047" num="0046">In some such implementations, an SBC or telephony gateway within the customer environment may operate as an intermediary between the SBC of the telephony server <b>112</b> and a PSTN for a peered carrier. When an external SBC is first registered with the telephony server <b>112</b>, a call from a client can be routed through the SBC to a load balancer of the SIP zone, which directs the traffic to a call switch of the telephony server <b>112</b>. Thereafter, the SBC may be configured to communicate directly with the call switch.</p><p id="p-0048" num="0047">The web zone receives telephony traffic from a client of a customer, via the SIP zone, and directs same to the application server <b>108</b> via one or more Domain Name System (DNS) resolutions. For example, a first DNS within the web zone may process a request received via the SIP zone and then deliver the processed request to a web service which connects to a second DNS at or otherwise associated with the application server <b>108</b>. Once the second DNS resolves the request, it is delivered to the destination service at the application server <b>108</b>. The web zone may also include a database for authenticating access to a software application for telephony traffic processed within the SIP zone, for example, a softphone.</p><p id="p-0049" num="0048">The clients <b>104</b>A through <b>104</b>D communicate with the servers <b>108</b> through <b>112</b> of the datacenter <b>106</b> via the network <b>114</b>. The network <b>114</b> can be or include, for example, the Internet, a local area network (LAN), a wide area network (WAN), a virtual private network (VPN), or another public or private means of electronic computer communication capable of transferring data between a client and one or more servers. In some implementations, a client can connect to the network <b>114</b> via a communal connection point, link, or path, or using a distinct connection point, link, or path. For example, a connection point, link, or path can be wired, wireless, use other communications technologies, or a combination thereof.</p><p id="p-0050" num="0049">The network <b>114</b>, the datacenter <b>106</b>, or another element, or combination of elements, of the system <b>100</b> can include network hardware such as routers, switches, other network devices, or combinations thereof. For example, the datacenter <b>106</b> can include a load balancer <b>116</b> for routing traffic from the network <b>114</b> to various servers associated with the datacenter <b>106</b>. The load balancer <b>116</b> can route, or direct, computing communications traffic, such as signals or messages, to respective elements of the datacenter <b>106</b>.</p><p id="p-0051" num="0050">For example, the load balancer <b>116</b> can operate as a proxy, or reverse proxy, for a service, such as a service provided to one or more remote clients, such as one or more of the clients <b>104</b>A through <b>104</b>D, by the application server <b>108</b>, the telephony server <b>112</b>, and/or another server. Routing functions of the load balancer <b>116</b> can be configured directly or via a DNS. The load balancer <b>116</b> can coordinate requests from remote clients and can simplify client access by masking the internal configuration of the datacenter <b>106</b> from the remote clients.</p><p id="p-0052" num="0051">In some implementations, the load balancer <b>116</b> can operate as a firewall, allowing or preventing communications based on configuration settings. Although the load balancer <b>116</b> is depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as being within the datacenter <b>106</b>, in some implementations, the load balancer <b>116</b> can instead be located outside of the datacenter <b>106</b>, for example, when providing global routing for multiple datacenters. In some implementations, load balancers can be included both within and outside of the datacenter <b>106</b>. In some implementations, the load balancer <b>116</b> can be omitted.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of an example internal configuration of a computing device <b>200</b> of an electronic computing and communications system. In one configuration, the computing device <b>200</b> may implement one or more of the client <b>104</b>, the application server <b>108</b>, the database server <b>110</b>, or the telephony server <b>112</b> of the system <b>100</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0054" num="0053">The computing device <b>200</b> includes components or units, such as a processor <b>202</b>, a memory <b>204</b>, a bus <b>206</b>, a power source <b>208</b>, peripherals <b>210</b>, a user interface <b>212</b>, a network interface <b>214</b>, other suitable components, or a combination thereof. One or more of the memory <b>204</b>, the power source <b>208</b>, the peripherals <b>210</b>, the user interface <b>212</b>, or the network interface <b>214</b> can communicate with the processor <b>202</b> via the bus <b>206</b>.</p><p id="p-0055" num="0054">The processor <b>202</b> is a central processing unit, such as a microprocessor, and can include single or multiple processors having single or multiple processing cores. Alternatively, the processor <b>202</b> can include another type of device, or multiple devices, configured for manipulating or processing information. For example, the processor <b>202</b> can include multiple processors interconnected in one or more manners, including hardwired or networked. The operations of the processor <b>202</b> can be distributed across multiple devices or units that can be coupled directly or across a local area or other suitable type of network. The processor <b>202</b> can include a cache, or cache memory, for local storage of operating data or instructions.</p><p id="p-0056" num="0055">The memory <b>204</b> includes one or more memory components, which may each be volatile memory or non-volatile memory. For example, the volatile memory can be random access memory (RAM) (e.g., a DRAM module, such as DDR SDRAM). In another example, the non-volatile memory of the memory <b>204</b> can be a disk drive, a solid state drive, flash memory, phase-change memory, or another form of non-volatile memory configured for persistent electronic information storage. In some implementations, the memory <b>204</b> can be distributed across multiple devices. For example, the memory <b>204</b> can include network-based memory or memory in multiple clients or servers performing the operations of those multiple devices.</p><p id="p-0057" num="0056">The memory <b>204</b> can include data for immediate access by the processor <b>202</b>. For example, the memory <b>204</b> can include executable instructions <b>216</b>, application data <b>218</b>, and an operating system <b>220</b>. The executable instructions <b>216</b> can include one or more application programs, which can be loaded or copied, in whole or in part, from non-volatile memory to volatile memory to be executed by the processor <b>202</b>. For example, the executable instructions <b>216</b> can include instructions for performing some or all of the techniques of this disclosure. The application data <b>218</b> can include user data, database data (e.g., database catalogs or dictionaries), or the like. In some implementations, the application data <b>218</b> can include functional programs, such as a web browser, a web server, a database server, another program, or a combination thereof. The operating system <b>220</b> can be, for example, Microsoft Windows&#xae;, Mac OS X&#xae;, or Linux&#xae;; an operating system for a mobile device, such as a smartphone or tablet device; or an operating system for a non-mobile device, such as a mainframe computer.</p><p id="p-0058" num="0057">The power source <b>208</b> provides power to the computing device <b>200</b>. For example, the power source <b>208</b> can be an interface to an external power distribution system. In another example, the power source <b>208</b> can be a battery, such as where the computing device <b>200</b> is a mobile device or is otherwise configured to operate independently of an external power distribution system. In some implementations, the computing device <b>200</b> may include or otherwise use multiple power sources. In some such implementations, the power source <b>208</b> can be a backup battery.</p><p id="p-0059" num="0058">The peripherals <b>210</b> includes one or more sensors, detectors, or other devices configured for monitoring the computing device <b>200</b> or the environment around the computing device <b>200</b>. For example, the peripherals <b>210</b> can include a geolocation component, such as a global positioning system location unit. In another example, the peripherals can include a temperature sensor for measuring temperatures of components of the computing device <b>200</b>, such as the processor <b>202</b>. In some implementations, the computing device <b>200</b> can omit the peripherals <b>210</b>.</p><p id="p-0060" num="0059">The user interface <b>212</b> includes one or more input interfaces and/or output interfaces. An input interface may, for example, be a positional input device, such as a mouse, touchpad, touchscreen, or the like; a keyboard; or another suitable human or machine interface device. An output interface may, for example, be a display, such as a liquid crystal display, a cathode-ray tube, a light emitting diode display, or other suitable display.</p><p id="p-0061" num="0060">The network interface <b>214</b> provides a connection or link to a network (e.g., the network <b>114</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The network interface <b>214</b> can be a wired network interface or a wireless network interface. The computing device <b>200</b> can communicate with other devices via the network interface <b>214</b> using one or more network protocols, such as using Ethernet, transmission control protocol (TCP), internet protocol (IP), power line communication, an IEEE 802.X protocol (e.g., Wi-Fi, Bluetooth, or ZigBee), infrared, visible light, general packet radio service (GPRS), global system for mobile communications (GSM), code-division multiple access (CDMA), Z-Wave, another protocol, or a combination thereof.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram of an example of a software platform <b>300</b> implemented by an electronic computing and communications system, for example, the system <b>100</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The software platform <b>300</b> is a UCaaS platform accessible by clients of a customer of a UCaaS platform provider, for example, the clients <b>104</b>A through <b>104</b>B of the customer <b>102</b>A or the clients <b>104</b>C through <b>104</b>D of the customer <b>102</b>B shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The software platform <b>300</b> may be a multi-tenant platform instantiated using one or more servers at one or more datacenters including, for example, the application server <b>108</b>, the database server <b>110</b>, and the telephony server <b>112</b> of the datacenter <b>106</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0063" num="0062">The software platform <b>300</b> includes software services accessible using one or more clients. For example, a customer <b>302</b> as shown includes four clients&#x2014;a desk phone <b>304</b>, a computer <b>306</b>, a mobile device <b>308</b>, and a shared device <b>310</b>. The desk phone <b>304</b> is a desktop unit configured to at least send and receive calls and includes an input device for receiving a telephone number or extension to dial to and an output device for outputting audio and/or video for a call in progress. The computer <b>306</b> is a desktop, laptop, or tablet computer including an input device for receiving some form of user input and an output device for outputting information in an audio and/or visual format. The mobile device <b>308</b> is a smartphone, wearable device, or other mobile computing aspect including an input device for receiving some form of user input and an output device for outputting information in an audio and/or visual format. The desk phone <b>304</b>, the computer <b>306</b>, and the mobile device <b>308</b> may generally be considered personal devices configured for use by a single user. The shared device <b>310</b> is a desk phone, a computer, a mobile device, or a different device which may instead be configured for use by multiple specified or unspecified users.</p><p id="p-0064" num="0063">Each of the clients <b>304</b> through <b>310</b> includes or runs on a computing device configured to access at least a portion of the software platform <b>300</b>. In some implementations, the customer <b>302</b> may include additional clients not shown. For example, the customer <b>302</b> may include multiple clients of one or more client types (e.g., multiple desk phones or multiple computers) and/or one or more clients of a client type not shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> (e.g., wearable devices or televisions other than as shared devices). For example, the customer <b>302</b> may have tens or hundreds of desk phones, computers, mobile devices, and/or shared devices.</p><p id="p-0065" num="0064">The software services of the software platform <b>300</b> generally relate to communications tools, but are in no way limited in scope. As shown, the software services of the software platform <b>300</b> include telephony software <b>312</b>, conferencing software <b>314</b>, messaging software <b>316</b>, and other software <b>318</b>. Some or all of the software <b>312</b> through <b>318</b> uses customer configurations <b>320</b> specific to the customer <b>302</b>. The customer configurations <b>320</b> may, for example, be data stored within a database or other data store at a database server, such as the database server <b>110</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0066" num="0065">The telephony software <b>312</b> enables telephony traffic between ones of the clients <b>304</b> through <b>310</b> and other telephony-enabled devices, which may be other ones of the clients <b>304</b> through <b>310</b>, other VOIP-enabled clients of the customer <b>302</b>, non-VOIP-enabled devices of the customer <b>302</b>, VOIP-enabled clients of another customer, non-VOIP-enabled devices of another customer, or other VOIP-enabled clients or non-VOIP-enabled devices. Calls sent or received using the telephony software <b>312</b> may, for example, be sent or received using the desk phone <b>304</b>, a softphone running on the computer <b>306</b>, a mobile application running on the mobile device <b>308</b>, or using the shared device <b>310</b> that includes telephony features.</p><p id="p-0067" num="0066">The telephony software <b>312</b> further enables phones that do not include a client application to connect to other software services of the software platform <b>300</b>. For example, the telephony software <b>312</b> may receive and process calls from phones not associated with the customer <b>302</b> to route that telephony traffic to one or more of the conferencing software <b>314</b>, the messaging software <b>316</b>, or the other software <b>318</b>.</p><p id="p-0068" num="0067">The conferencing software <b>314</b> enables audio, video, and/or other forms of conferences between multiple participants, such as to facilitate a conference between those participants. In some cases, the participants may all be physically present within a single location, for example, a conference room, in which the conferencing software <b>314</b> may facilitate a conference between only those participants and using one or more clients within the conference room. In some cases, one or more participants may be physically present within a single location and one or more other participants may be remote, in which the conferencing software <b>314</b> may facilitate a conference between all of those participants using one or more clients within the conference room and one or more remote clients. In some cases, the participants may all be remote, in which the conferencing software <b>314</b> may facilitate a conference between the participants using different clients for the participants. The conferencing software <b>314</b> can include functionality for hosting, presenting scheduling, joining, or otherwise participating in a conference. The conferencing software <b>314</b> may further include functionality for recording some or all of a conference and/or documenting a transcript for the conference.</p><p id="p-0069" num="0068">The messaging software <b>316</b> enables instant messaging, unified messaging, and other types of messaging communications between multiple devices, such as to facilitate a chat or other virtual conversation between users of those devices. The unified messaging functionality of the messaging software <b>316</b> may, for example, refer to email messaging which includes a voicemail transcription service delivered in email format.</p><p id="p-0070" num="0069">The other software <b>318</b> enables other functionality of the software platform <b>300</b>. Examples of the other software <b>318</b> include, but are not limited to, device management software, resource provisioning and deployment software, administrative software, third party integration software, and the like. In one particular example, the other software <b>318</b> can include code for selecting a media channel from a set of options for a call made using virtual desktop infrastructure in order to enhance the call, and/or merging streams in a virtual channel for call enhancement in virtual desktop infrastructure.</p><p id="p-0071" num="0070">The software <b>312</b> through <b>318</b> may be implemented using one or more servers, for example, of a datacenter such as the datacenter <b>106</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, one or more of the software <b>312</b> through <b>318</b> may be implemented using an application server, a database server, and/or a telephony server, such as the servers <b>108</b> through <b>112</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In another example, one or more of the software <b>312</b> through <b>318</b> may be implemented using servers not shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, for example, a meeting server, a web server, or another server. In yet another example, one or more of the software <b>312</b> through <b>318</b> may be implemented using one or more of the servers <b>108</b> through <b>112</b> and one or more other servers. The software <b>312</b> through <b>318</b> may be implemented by different servers or by the same server.</p><p id="p-0072" num="0071">Features of the software services of the software platform <b>300</b> may be integrated with one another to provide a unified experience for users. For example, the messaging software <b>316</b> may include a user interface element configured to initiate a call with another user of the customer <b>302</b>. In another example, the telephony software <b>312</b> may include functionality for elevating a telephone call to a conference. In yet another example, the conferencing software <b>314</b> may include functionality for sending and receiving instant messages between participants and/or other users of the customer <b>302</b>. In yet another example, the conferencing software <b>314</b> may include functionality for file sharing between participants and/or other users of the customer <b>302</b>. In some implementations, some or all of the software <b>312</b> through <b>318</b> may be combined into a single software application run on clients of the customer, such as one or more of the clients <b>304</b> through <b>310</b>.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram of an example of a virtual desktop infrastructure system <b>400</b> configured to enable calls using a virtual desktop instance. The virtual desktop infrastructure system <b>400</b> includes a virtual desktop infrastructure host <b>410</b>, a virtual desktop infrastructure client <b>420</b> (e.g., a VDI thin client), and a virtual desktop infrastructure client <b>422</b>. A virtual desktop image <b>412</b>, which includes an application virtual desktop infrastructure client <b>414</b>, is provided by the virtual desktop infrastructure host <b>410</b>. The virtual desktop infrastructure client <b>420</b> includes an application virtual desktop infrastructure plugin <b>430</b>, which includes a phone agent <b>440</b> and a meeting agent <b>450</b>. The virtual desktop infrastructure client <b>422</b> includes an application virtual desktop infrastructure plugin <b>432</b>, which includes a phone agent <b>442</b> and a meeting agent <b>452</b>. Note that in practice the virtual desktop infrastructure host <b>410</b> may support many more virtual desktop infrastructure clients than the two depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In some implementations, the virtual desktop infrastructure system <b>400</b> may be used to implement the technique <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. For example, the technique <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref> may be implemented by the virtual desktop infrastructure client <b>420</b> or the virtual desktop infrastructure client <b>422</b>.</p><p id="p-0074" num="0073">Calls may be supported in the virtual desktop infrastructure system <b>400</b> by the cooperation of the application virtual desktop infrastructure client <b>414</b> with a virtual desktop infrastructure plugin (<b>430</b> or <b>432</b>). For example, a call may include streaming of audio from two or more participants, including a user of the virtual desktop infrastructure client <b>420</b> being used to place or answer the call using the phone agent <b>440</b>. In another example, a call may include streaming of audio and video from two or more participants, including a user of the virtual desktop infrastructure client <b>420</b> being used to host or attend the call using the meeting agent <b>450</b>, which may facilitate video calls/conferencing.</p><p id="p-0075" num="0074">The application virtual desktop infrastructure client <b>414</b> is installed in the virtual desktop image <b>412</b> that is instantiated on the virtual desktop infrastructure host <b>410</b>. The virtual desktop infrastructure plugin <b>430</b> is installed in the virtual desktop infrastructure client <b>420</b>. In an implementation, the virtual desktop infrastructure client <b>420</b> may run on a personal computing device (e.g., a laptop, smartphone, or a tablet). The virtual desktop infrastructure client <b>420</b> may run on a different operating system (e.g., Windows, OS X, Linux, or Android) than the virtual desktop image <b>412</b> and the virtual desktop infrastructure client <b>420</b> may run on a different operating system than other virtual desktop infrastructure clients. For example, the virtual desktop infrastructure client <b>420</b> may run on Windows and the virtual desktop infrastructure client <b>422</b> may run on Linux. As a result, the virtual desktop infrastructure plugin <b>430</b>, the phone agent <b>440</b>, and the meeting agent <b>450</b> are Windows versions of these software; while the virtual desktop infrastructure plugin <b>432</b>, the phone agent <b>442</b>, and the meeting agent <b>452</b> are a Linux version of these software. In some implementations, phone agents <b>440</b> and <b>442</b> are just different instances of the same software components. In some implementations, meeting agents <b>450</b> and <b>452</b> are just different instances of the same software components. The virtual desktop infrastructure system <b>400</b> may enable a wide variety of devices to access the call functionality provided by the application virtual desktop infrastructure client <b>414</b>.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an example of a system <b>500</b> configured to enable calls using a virtual desktop instance that illustrates the flow of media data to support a call. The system <b>500</b> includes a media server <b>510</b>, a virtual desktop infrastructure server <b>520</b>, and a personal computing device <b>530</b>. In an implementation, the system <b>500</b> may be used to implement the technique <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. The technique <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref> may implemented by the personal computing device <b>530</b>.</p><p id="p-0077" num="0076">The media server <b>510</b> may be the telephone server <b>112</b>. In some implementations, the media server <b>510</b> is a PBX server. In some implementations, the media server <b>510</b> is an MMR server.</p><p id="p-0078" num="0077">As an example, the virtual desktop infrastructure server <b>520</b> may run the virtual desktop infrastructure host <b>410</b>, including one or more virtual desktop images that have the application virtual desktop infrastructure client <b>414</b> installed. In an implementation, the virtual desktop infrastructure server <b>520</b> may include a computing device, such as the computing device <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0079" num="0078">The personal computing device <b>530</b> may be a laptop, a smartphone, a tablet, or another type of device. In an implementation, the personal computing device <b>530</b> may be one of the clients <b>304</b> through <b>310</b>. The personal computing device <b>530</b> may run a virtual desktop infrastructure client (e.g., the virtual desktop infrastructure client <b>420</b>) that includes an application virtual desktop infrastructure plugin with a phone agent and/or a meeting agent for participating in calls. In some implementations, a virtual desktop infrastructure client (e.g., a VDI thin client) running on the personal computing device <b>530</b> acts as a slave and a virtual desktop infrastructure host running on the virtual desktop infrastructure server <b>520</b> acts as a master in a master/slave interaction to facilitate a call. The personal computing device <b>530</b> may include a computing device, such as the computing device <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0080" num="0079">A call may be initiated by the virtual desktop infrastructure server <b>520</b> in response to a request from the personal computing device <b>530</b> (e.g., caused by input from a user such as dialing) or in response to an inbound call message from the media server <b>510</b> or an associated server that supports calls using the media server <b>510</b>. As part of the setup for the call, commands or other control data may be exchanged between the media sever <b>510</b> and the virtual desktop infrastructure server <b>520</b> via a control channel <b>540</b> through a communications network. In an implementation, the control channel <b>540</b> may utilize a cryptographic protocol such as Transport Layer Security (TLS) 1.2 or Secure Sockets Layer (SSL). The virtual desktop infrastructure server <b>520</b> may be configured to relay some or all of the control data received, including call parameters, to the personal computing device <b>530</b> via a control channel <b>542</b>. In an implementation, the control channel <b>542</b> may be encapsulated in a protocol (e.g., the ICA protocol or the RDP protocol) for exchanging data for virtual desktop applications. In particular, the virtual desktop infrastructure server <b>520</b> may pass an identifier for the media server <b>510</b> to the personal computing device <b>530</b> to facilitate the establishment of a more direct connection between the media server <b>510</b> and the personal computing device <b>530</b> that bypasses the virtual desktop infrastructure server <b>520</b> to enable media offloading.</p><p id="p-0081" num="0080">The personal computing device <b>530</b> may be configured to implement the technique <b>600</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref> to test the communications network conditions and select a media channel for bearing media data for the call from a set of supported media channels. The set of supported media channels may include a first media channel <b>550</b> using a network socket pair connection between the personal computing device <b>530</b> and the media server <b>510</b>. The set of supported media channels may include a second media channel <b>552</b> that is routed through the virtual desktop infrastructure server <b>520</b> and encapsulated in a protocol (e.g., ICA or RDP) for exchanging data for virtual desktop applications. The set of supported media channels may include a third media channel <b>554</b> using a second network socket pair connection between the personal computing device <b>530</b> and the virtual desktop infrastructure server <b>520</b>. If an indirect connection that routes media data through the virtual desktop infrastructure server <b>520</b> is used, then a media channel <b>556</b> between the virtual desktop infrastructure server <b>520</b> and the media server <b>510</b> will also be established. In an implementation, the media channels <b>550</b>, <b>554</b>, and/or <b>556</b> may utilize a network socket pair for their respective endpoints according to a transport protocol, such as, for example, UDP or Secure Real-time Transport Protocol (SRTP). In some implementations, a media channel (e.g., <b>550</b> or <b>554</b>) may use a customized port range (e.g., UDP ports 9,000-10,000). Once a media channel has been selected for the call, the selected media channel (e.g., the media channel <b>550</b>, the media channel <b>552</b>, or the media channel <b>554</b>) may be used for transfers between the media server <b>510</b> and the personal computing device <b>530</b> to enable the call. Selecting a media channel for the call dynamically based on tests of communications network conditions may enhance calls in the virtual desktop infrastructure system by improving resource utilization while maintaining call quality.</p><p id="p-0082" num="0081">To further describe implementations in greater detail, reference is next made to examples of techniques which may be performed to provide call enhancements in a virtual desktop infrastructure. <figref idref="DRAWINGS">FIG. <b>6</b></figref> is a flowchart of an example of a technique <b>600</b> for selecting a media channel to support a call initiated using a virtual desktop infrastructure server. <figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart of an example of a technique <b>700</b> for testing communications network conditions for network socket pair connections in a system configured to enable calls using a virtual desktop instance. <figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart of an example of a technique <b>800</b> for testing communications network conditions for network socket pair connections in a system configured to enable calls using a virtual desktop instance. <figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart of an example of a technique <b>900</b> for selecting a media channel to support a call initiated using a virtual desktop infrastructure server. <figref idref="DRAWINGS">FIG. <b>12</b>A</figref> is a flowchart of an example of a technique for storing packets for a call in a packet queue with a congest threshold to await transmission via a shared virtual channel. <figref idref="DRAWINGS">FIG. <b>12</b>B</figref> is a flowchart of an example of a technique for reading packets for a call in a packet queue with a congest threshold for transmission via a shared virtual channel. <figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart of an example of a technique <b>1300</b> for transmitting packets for call from multiple streams using packet queues with a congest threshold. <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flowchart of an example of a technique <b>1400</b> for invoking congestion mitigation measures.</p><p id="p-0083" num="0082">The techniques <b>600</b>, <b>700</b>, <b>800</b>, <b>900</b>, <b>1200</b>, <b>1300</b>, and/or <b>1400</b> can be executed using computing devices, such as the systems, hardware, and software described with respect to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>5</b></figref>. The techniques <b>600</b>, <b>700</b>, <b>800</b>, <b>900</b>, <b>1200</b>, <b>1300</b>, and/or <b>1400</b> can be performed, for example, by executing a machine-readable program or other computer-executable instructions, such as routines, instructions, programs, or other code. The steps, or operations, of the techniques <b>600</b>, <b>700</b>, <b>800</b>, <b>900</b>, <b>1200</b>, <b>1300</b>, and/or <b>1400</b> or another technique, method, process, or algorithm described in connection with the implementations disclosed herein can be implemented directly in hardware, firmware, software executed by hardware, circuitry, or a combination thereof.</p><p id="p-0084" num="0083">For simplicity of explanation, each of the techniques <b>600</b>, <b>700</b>, <b>800</b>, <b>900</b>, <b>1200</b>, <b>1300</b>, and <b>1400</b> are depicted and described herein as a series of steps or operations. However, the steps or operations in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, other steps or operations not presented and described herein may be used. Furthermore, not all illustrated steps or operations may be required to implement a technique in accordance with the disclosed subject matter.</p><p id="p-0085" num="0084">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the technique <b>600</b> for selecting a media channel to support a call initiated using a virtual desktop infrastructure server is shown. At <b>602</b>, the technique <b>600</b> includes transmitting, using a personal computing device (e.g., the personal computing device <b>530</b>), a request for a call to a virtual desktop infrastructure server (e.g., the virtual desktop infrastructure server <b>520</b>). In an implementation, the request may be sent using application software (e.g., the phone agent <b>440</b> or the meeting agent <b>450</b>) running over an application virtual desktop infrastructure plugin (e.g., the application VDI plugin <b>430</b>) that runs on the personal computing device. The request may be received by an application virtual desktop infrastructure client (e.g., the application VDI client <b>414</b>) running in a virtual desktop instance running on the virtual desktop infrastructure server. In an implementation, the request may be encapsulated in a protocol (e.g., the ICA protocol or the RDP protocol) for exchanging data for virtual desktop applications. The virtual desktop infrastructure server may in turn, responsive to the request, initiate a call via control communications with a media server (e.g., the media server <b>510</b>). In an implementation, the media server may be a PBX server. As another example, the media server may be a multimedia router server. The request may be transmitted using a network interface (e.g., the network interface <b>214</b>) of the personal computing device.</p><p id="p-0086" num="0085">At <b>604</b>, the technique <b>600</b> includes receiving, using the personal computing device, call parameters from the virtual desktop infrastructure server, wherein the call parameters include an identifier for the media server. The identifier for the media server may include an IP address for the media server. As another example, the identifier for the media server may include an internet domain name used by the media server. The call parameters may include other data that may be used to facilitate the setup and maintenance of the call, such as a port number to be used for transferring data of the call. In an implementation, the call parameters may be relayed via an application virtual desktop infrastructure client (e.g., the application VDI client <b>414</b>) running in a virtual desktop instance running on the virtual desktop infrastructure server. The call parameters may be encapsulated in a protocol (e.g., the ICA protocol or the RDP protocol) for exchanging data for virtual desktop applications. In one example, the call parameters may be received using a network interface (e.g., the network interface <b>214</b>) of the personal computing device.</p><p id="p-0087" num="0086">At <b>606</b>, the technique <b>600</b> includes testing communications network conditions for one or more network socket pair connections, such as between the personal computing device and the media server that bypasses the virtual desktop infrastructure server to obtain direct connection test results. In an implementation, the network socket pair may include sockets of a transport layer protocol (e.g., UDP, TCP, Stream Control Transmission Protocol (SCTP), or Datagram Congestion Control Protocol (DCCP)). The network socket pair may include a socket at the media server and a socket at the personal computing device that may be used to send media data between the two devices using the applicable communications network protocol. In some implementations, a socket pair is selected from designated ranges of UDP ports for the two devices being connected. In an implementation, testing communications network conditions for the network socket pair connection between the personal computing device and the media server that bypasses the virtual desktop infrastructure server may include performing a handshake test using the network socket pair connection. In an implementation, a handshake test may include an exchange of RTP Control Protocol (RTCP) packets back and forth between the personal computing device and the media server. In some implementations, the direct connection test results include a network latency metric. In some implementations, the direct connection test results include a network data throughput metric.</p><p id="p-0088" num="0087">At <b>606</b>, the technique <b>600</b> may also include testing communications network conditions for a second network socket pair connection between the personal computing device and the virtual desktop infrastructure server to obtain indirect connection test results. In an implementation, testing communications network conditions for the second network socket pair connection between the personal computing device and the virtual desktop infrastructure server may include performing a handshake test using the second network socket pair connection. In some implementations, the indirect connection test results include a network latency metric. In some implementations, the indirect connection test results include a network data throughput metric. In an implementation, at <b>606</b>, testing communications network conditions for one or more network socket pair connections may include implementing the technique <b>700</b> of <figref idref="DRAWINGS">FIG. <b>7</b></figref>. In an implementation, at <b>606</b>, testing communications network conditions for one or more network socket pair connections may include implementing the technique <b>800</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0089" num="0088">At <b>608</b>, the technique <b>600</b> includes, based on the direct connection test results, selecting a media channel from among a set of media channels for a call initiated using the virtual desktop infrastructure server. The set of media channels includes a first media channel (e.g., the first media channel <b>550</b>) using the network socket pair connection between the personal computing device and the media server and a second media channel (e.g., the second media channel <b>552</b>) that is routed through the virtual desktop infrastructure server and encapsulated in a protocol (e.g., the ICA protocol or the RDP protocol) for exchanging data for virtual desktop applications. In some implementations, the set of media channels also includes a media channel (e.g., the third media channel <b>554</b>) using the second network socket pair connection between the personal computing device and the virtual desktop infrastructure server. Selecting the media channel may also be based on the indirect connection test results. In an implementation, if the direct connection test results satisfy a criterion (e.g., a connection is established with acceptable throughput and/or latency), then the first media channel may be selected for use in the call. In an implementation, if the direct connection test results fail to satisfy a criterion and the indirect connection test results satisfy a criterion (e.g., a connection is established with acceptable throughput and/or latency), then the third media channel may be selected for use in the call. In an implementation, if both the direct connection test results and the indirect connection test results fail to satisfy a criterion, then the second media channel may be selected for use in the call. In some implementations, the direct connection test results are compared to the indirect connection test results and the media channel with the better connection test results is selected for use in the call. In some implementations, the set of media channels includes more media channels (e.g., direct and/or indirect media channels using different protocols for transport across a communications network) for which connection test results are determined and a media channel is selected based on these additional connection test results.</p><p id="p-0090" num="0089">At <b>610</b>, the technique <b>600</b> includes transferring media data between the media server and the personal computing device using the selected media channel to enable the call. In an implementation, the media data transferred using the selected media channel includes packets of audio data. In some implementations, the media data transferred using the selected media channel includes packets of video data. When the selected media channel is the second media channel that is routed through the virtual desktop infrastructure server and encapsulated in the protocol (e.g., ICA or RDP) for exchanging data for virtual desktop applications, the technique <b>600</b> may include merging multiple streams of media data in a single virtual channel of the protocol. In an implementation, audio streams for multiple participants in the call may be merged in a single ICA virtual channel. In some implementations, data for the call, including the media data and call control data, is transferred in a single virtual channel of the protocol (e.g., ICA or RDP). In an implementation, a single virtual channel may be used to transfer all data for the call. Merging call data of different types (e.g., media data, control data, share data) and/or from different sources (e.g., different call participants) may provide one or more benefits, such as conserving the number of virtual channels used for the call and enabling custom prioritization of call data within the call to enhance call quality. Using a media channel selected based on dynamic communications network conditions may enable a system for supporting calls with virtual desktop infrastructure to more efficiently scale while preserving or enhancing call quality.</p><p id="p-0091" num="0090">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the technique <b>700</b> for testing communications network conditions for network socket pair connections in a system configured to enable calls using a virtual desktop instance is shown. At <b>702</b>, the technique <b>700</b> includes testing communications network conditions for a network socket pair connection between a personal computing device (e.g., the personal computing device <b>530</b>) and a media server (e.g., the media server <b>510</b>) that bypasses a virtual desktop infrastructure server (e.g., the virtual desktop infrastructure server <b>520</b>) to obtain direct connection test results. In an example, testing communications network conditions for the network socket pair connection between the personal computing device and the media server that bypasses the virtual desktop infrastructure server may include performing a handshake test using the network socket pair connection. In an example, a handshake test may include an exchange of RTCP packets back and forth between the personal computing device and the media server. In some implementations, the direct connection test results include a network latency metric. In some implementations, the direct connection test results include a network data throughput metric.</p><p id="p-0092" num="0091">At <b>704</b>, if the direct connection test results satisfy a criterion, then the technique <b>700</b> includes, at <b>706</b>, continuing to selection of the media channel. In an example, using the first media channel <b>550</b> may be preferred, so it may be sufficient to check the direct connection test results and select, at <b>608</b>, the first media channel based on the direct connection test results.</p><p id="p-0093" num="0092">At <b>704</b>, if the direct connection test results do not satisfy a criterion, then the technique <b>700</b> includes, at <b>708</b>, testing communications network conditions for a second network socket pair connection between the personal computing device and the virtual desktop infrastructure server to obtain indirect connection test results. In an example, testing communications network conditions for the second network socket pair connection between the personal computing device and the virtual desktop infrastructure server may include performing a handshake test using the second network socket pair connection. In some implementations, the indirect connection test results include a network latency metric. In some implementations, the indirect connection test results include a network data throughput metric.</p><p id="p-0094" num="0093">At <b>710</b>, the technique <b>700</b> includes continuing to selection of the media channel. In an example, where the direct connection test results fail to satisfy the criterion, the indirect connection test results are also determined and checked to prepare for selecting, at <b>608</b>, a media channel based on both the direct connection test results and the indirect connection test results. In an example, the indirect connection test results may be considered to select between the second media channel <b>552</b> and the third media channel <b>544</b> after the first media channel <b>550</b> has been ruled out based on the direct connection test results.</p><p id="p-0095" num="0094">Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the technique <b>800</b> for testing communications network conditions for network socket pair connections in a system configured to enable calls using a virtual desktop instance is shown. At <b>802</b>, the technique <b>800</b> includes testing communications network conditions for a network socket pair connection between a personal computing device (e.g., the personal computing device <b>530</b>) and a media server (e.g., the media server <b>510</b>) that bypasses a virtual desktop infrastructure server (e.g., the virtual desktop infrastructure server <b>520</b>) to obtain direct connection test results. In an example, testing communications network conditions for the network socket pair connection between the personal computing device and the media server that bypasses the virtual desktop infrastructure server may include performing a handshake test using the network socket pair connection. In an example, a handshake test may include an exchange of RTCP packets back and forth between the personal computing device and the media server. In some implementations, the direct connection test results include a network latency metric. In some implementations, the direct connection test results include a network data throughput metric.</p><p id="p-0096" num="0095">At <b>804</b>, the technique <b>800</b> includes testing communications network conditions for a second network socket pair connection between the personal computing device and the virtual desktop infrastructure server to obtain indirect connection test results. In an example, testing communications network conditions for the second network socket pair connection between the personal computing device and the virtual desktop infrastructure server may include performing a handshake test using the second network socket pair connection. In some implementations, the indirect connection test results include a network latency metric. In some implementations, the indirect connection test results include a network data throughput metric.</p><p id="p-0097" num="0096">At <b>806</b>, the technique <b>800</b> includes comparing the direct connection test results to the indirect connection test results. In an example, throughputs and/or latencies measured for the respective network socket pair connections may be compared. In some implementations, the comparison may be handicapped to favor a preferred media channel (e.g., the direct connection tests results may be enhanced for comparison where the first media channel <b>550</b> is preferred for system utilization purposes).</p><p id="p-0098" num="0097">At <b>808</b>, the technique <b>800</b> includes continuing to selection, at <b>608</b>, of the media channel. In an example, at <b>608</b>, the media channel may be selected based on the comparison of the direct connection test results to the indirect connection test results.</p><p id="p-0099" num="0098">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the technique <b>900</b> for selecting a media channel to support a call initiated using a virtual desktop infrastructure server is shown. The technique <b>600</b> incorporates the use of timers as part of a scheme to test communications network conditions and select a media mode for a call. At <b>902</b>, the technique <b>900</b> includes performing a VDI plugin detection operation. At <b>904</b>, if a VDI plugin was not successfully detected, then the technique <b>900</b> includes, at <b>906</b>, selecting the use of a fallback mode for media streaming for the call. In an example, a fallback mode may include running media codecs for the call on the VDI server. In this example, the VDI server may transfer media data to and/or from a personal computing device that is the user interface to the call at a full uncompressed data rate via a standard channel of a VDI protocol being used. At <b>904</b>, if a VDI plugin was successfully detected, then the technique <b>900</b> includes, at <b>908</b>, starting a media mode detection operation. In an example, step <b>908</b> may be a starting point for testing to determine the media mode to be used for a call. At <b>910</b>, a timer (such as a 15 second timer) is started. If a complete test result is not achieved when the timer expires, then the technique <b>900</b> includes, at <b>906</b>, selecting the use of the fallback mode for media streaming for the call. While the timer is still running, the technique <b>900</b> includes, at <b>912</b> trying to detect the status of a media channel that uses a UDP socket pair connection between the VDI server and the personal computing device. In an example, the techniques described in relation to step <b>708</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be used to test a media channel that uses a UDP socket pair connection between the VDI server and the personal computing device. When the UDP socket pair connection between the VDI server and the personal computing device is tested, a timer (such as a 1 second timer) is started and, at <b>914</b>, a detection result for the media channel that uses a UDP socket pair connection between the VDI server and the personal computing device is set or stored for later use. Once the timer expires (e.g., the 1 second timer), at <b>916</b>, the technique includes trying to detect the status of a direct mode media channel, which uses a more direct connection between the personal computing device and a media server supporting the call. The direct mode media channel may bypass the VDI server. In an example, the direct mode media channel may use a UDP socket pair connection between the media server and the personal computing device. In an example, the techniques described in relation to step <b>702</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref> may be used to test the direct mode media channel.</p><p id="p-0100" num="0099">At <b>918</b>, if the direct mode detection test succeeded, then the technique <b>900</b> includes, at <b>920</b> selecting the use of the direct mode for media streaming for the call. In an example, the direct mode may use a UDP socket pair connection between the media server and the personal computing device to transfer media data for the call. At <b>918</b>, the technique <b>900</b> includes setting a timer (such as a 1 second timer) and waiting until the timer expires to get a result. Otherwise, if the timer expires, the detection result has failed, the technique <b>900</b> proceeds to check the next option.</p><p id="p-0101" num="0100">At <b>922</b>, if the UDP mode detection test succeeded, then the technique <b>900</b> includes, at <b>924</b> selecting the use of the UDP mode for media streaming for the call. In an example, the UDP mode may use a UDP socket pair connection between the VDI server and the personal computing device to transfer media data for the call.</p><p id="p-0102" num="0101">At <b>922</b>, if the UDP mode detection test failed, then the technique <b>900</b> includes, at <b>926</b> selecting the use of an ICA mode for media streaming for the call. In an example, the ICA mode may use a virtual channel of the ICA protocol between the VDI server and the personal computing device to transfer media data for the call. The media data transferred using ICA mode, like UDP mode, and Direct mode, may be compressed to conserve network bandwidth resources. A plugin running on the personal computing device may use one or more media codecs to process media data locally, instead of relying on an application running on VDI server to perform these functions.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram of an example of a set of packet queues <b>1000</b> for storing packets for a call to await transmission via a single, shared virtual channel of a virtual desktop infrastructure protocol. The set of packet queues <b>1000</b> includes a command packet queue <b>1010</b>, an audio packet queue <b>1012</b>, a share packet queue <b>1014</b>, and a video packet queue <b>1016</b>. In an example, the command packet queue <b>1010</b>, the audio packet queue <b>1012</b>, the share packet queue <b>1014</b>, and the video packet queue <b>1016</b> may be thread safe data queues that each hold different data types. The command packet queue <b>1010</b> may store command and control signal data for a conference call. The audio packet queue <b>1012</b> may store audio data from an audio stream for a conference call. The share packet queue <b>1014</b> may store share data (e.g., data conveying a shared screen in a conference call) from a share stream for a conference call. The video packet queue <b>1016</b> may store video data from a video stream for a conference call.</p><p id="p-0104" num="0103">The data for transmission may be stored in the cache (<b>1020</b>, <b>1022</b>, <b>1024</b>, and <b>1026</b>) allocated for each packet queue (<b>1010</b>, <b>1012</b>, <b>1014</b>, and <b>1016</b>) while it awaits transmission via a shared virtual channel. The data stored in caches (<b>1020</b>, <b>1022</b>, <b>1024</b>, and <b>1026</b>) may be organized into portions that will be transmitted together across the virtual channel. In some implementations, a packet of data (e.g., audio data) may be stored in the cache (e.g., the cache <b>1022</b>) as a complete packet with all layers of headers and that will be encoded in the virtual channel. In some implementations, protocol headers are added to packets when they are pulled from the packet buffers for transmission after being stored. In an example, a packet of data (e.g., video data) may be stored in the cache (e.g., the cache <b>1026</b>) as a packet with less than all layers of headers and that will be encoded in the virtual channel. In an example, a packet of data (e.g., share data) may be stored in the cache (e.g., the cache <b>1024</b>) as a packet payload of data without all the headers that will be encoded in the virtual channel.</p><p id="p-0105" num="0104">Each of the packet queues (<b>1010</b>, <b>1012</b>, <b>1014</b>, and <b>1016</b>) is associated with respective parameters (<b>1030</b>, <b>1032</b>, <b>3034</b>, and <b>3036</b>). In an example, the parameters (<b>1030</b>, <b>1032</b>, <b>3034</b>, and <b>3036</b>) may be stored as part of the respective packet queues (<b>1010</b>, <b>1012</b>, <b>1014</b>, and <b>1016</b>) or in a data structure that is linked to the respective packet queues (<b>1010</b>, <b>1012</b>, <b>1014</b>, and <b>1016</b>). In this example, the packet queues (<b>1010</b>, <b>1012</b>, <b>1014</b>, and <b>1016</b>) are associated with respective congest thresholds (<b>1050</b>, <b>1052</b>, <b>1054</b>, and <b>1056</b>) and with respective refuse thresholds (<b>1040</b>, <b>1042</b>, <b>1044</b>, and <b>1046</b>). The congest thresholds (<b>1050</b>, <b>1052</b>, <b>1054</b>, and <b>1056</b>) and the respective refuse thresholds (<b>1040</b>, <b>1042</b>, <b>1044</b>, and <b>1046</b>) may be compared to fill levels for their respective packet queues (<b>1010</b>, <b>1012</b>, <b>1014</b>, and <b>1016</b>) to determine when to take certain actions related to quality service. In an example, when a fill level of a packet queue (e.g., the packet queue <b>1016</b>) exceeds its respective congest thresholds (e.g., the congest threshold <b>1056</b>), one or more congestion mitigation measures may be invoked. In an example, the congest thresholds (<b>1050</b>, <b>1052</b>, <b>1054</b>, and <b>1056</b>) and the refuse thresholds (<b>1040</b>, <b>1042</b>, <b>1044</b>, and <b>1046</b>) may be used as described in relation to <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0106" num="0105">In some implementations, each data queue may be independently configured with its own congest threshold and refuse threshold. Table 1 below lists examples of refuse thresholds and congest thresholds for four data queues for respective data streams for a conference call that share a virtual channel (e.g., an ICA virtual channel) to transfer data between a thin client running a conference call plugin and a VDI server running the conference client software.</p><p id="p-0107" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="63pt" align="left"/><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="49pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="4" rowsep="1">TABLE 1</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>command</entry><entry>audio</entry><entry>share</entry><entry>video</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="28pt" align="right"/><colspec colname="4" colwidth="21pt" align="left"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>refuse threshold</entry><entry>300 bytes</entry><entry>100</entry><entry>bytes</entry><entry>200 bytes</entry><entry>200 bytes</entry></row><row><entry>congest threshold</entry><entry>150 bytes</entry><entry>50</entry><entry>bytes</entry><entry>100 bytes</entry><entry>100 bytes</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0108" num="0106">In some implementations (not shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>), additional packet queues may be used to merge additional types and/or streams of data for a call into the shared virtual channel. In an example, a packet queue may be used for chat data or other types of data supporting a conference call. In an example, a device may separately buffer data from media streams for additional channels of audio (e.g., for stereo audio). In an example, a device may forward and separately buffer data from media streams for other remote participants in the conference call.</p><p id="p-0109" num="0107">A prioritization scheme may be used to select which of the packet queues using the shared virtual channel will have a packet transmitted next. For example, transmitting a packet in the shared virtual channel may include selecting amongst a set of packet queues, including the first packet queue and the second packet queue, based on priorities of packet queues in the set of packet queues. A packet from the selected packet queue may then be transmitted in the single virtual channel. In an example, the packet queue with the highest priority level that has a packet available may be selected for the next packet transmission.</p><p id="p-0110" num="0108"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is an illustration of an example of a packet queue <b>1100</b> with a refuse threshold <b>1120</b> and a congestion threshold <b>1130</b>. The packet queue <b>1100</b> includes a cache <b>1110</b> that stores the data of the packets as they await transmission via a virtual channel (e.g., an ICA virtual channel). The packet queue <b>1100</b> is associated with a refuse threshold <b>1120</b> that indicates a fill level above which packets of this stream passing through the packet queue <b>1100</b> should be dropped. The packet queue <b>1100</b> is associated with a congest threshold <b>1130</b> that indicates a fill level above which one or more congestion mitigation measures should be invoked. The refuse threshold <b>1120</b> and the congestion threshold <b>1130</b> may be compared to the fill level <b>1140</b>, which reflects a current amount of data that is stored in the cache <b>1110</b> to await transmission. The fill level <b>1140</b>, the refuse threshold <b>1120</b>, and the congestion threshold <b>1130</b> may be encoded in various units. For example, the fill level <b>1140</b>, the refuse threshold <b>1120</b>, and the congestion threshold <b>1130</b> may be encoded in the units of a number of packets. For example, the fill level <b>1140</b>, the refuse threshold <b>1120</b>, and the congestion threshold <b>1130</b> may be encoded in the units of a number of bytes of data. In an example, the fill level <b>1140</b> may be compared to the refuse threshold <b>1120</b> and/or the congestion threshold <b>1130</b> when a packet is to be added into the packet queue <b>1100</b>. In an example, the fill level <b>1140</b> may be compared to the congestion threshold <b>1130</b> when a packet is to be removed or pulled/popped from the packet queue <b>1100</b> for transmission to determine if a previously invoked congestion mitigation measure should be ended.</p><p id="p-0111" num="0109">In an example, if the fill level <b>1140</b> is above the refuse threshold <b>1120</b>, an incoming data packet may be rejected. In some implementations, if the fill level <b>1140</b> is above the refuse threshold, one or more of the oldest packets may be dropped/deleted before transmission and the new packet may be stored in the cache <b>1110</b>. In an example, if the fill level <b>1140</b> is above the congest threshold <b>1130</b>, congestion handling will be triggered.</p><p id="p-0112" num="0110"><figref idref="DRAWINGS">FIGS. <b>12</b>A and <b>12</b>B</figref> show techniques that may be used to manage packet queues in a thread safe manner for merging streams in a virtual channel for call enhancement in a virtual desktop infrastructure. The technique <b>1200</b> of <figref idref="DRAWINGS">FIG. <b>12</b>A</figref> may be used store packets from a stream of media data for a call that will be transmitted via a virtual channel shared with other streams for the call. The technique <b>1250</b> of <figref idref="DRAWINGS">FIG. <b>12</b>B</figref> may be used to read packets from the queue for transmission via the shared virtual channel when communication capacity for the stream becomes available in the shared virtual channel. In some implementations, the technique <b>1200</b> and the technique <b>1250</b> may performed by different threads that share access to a channel state <b>1220</b>.</p><p id="p-0113" num="0111">Referring to <figref idref="DRAWINGS">FIG. <b>12</b>A</figref>, the technique <b>1200</b> for storing packets for a call in a packet queue with a congest threshold to await transmission via a shared virtual channel is shown. At <b>1210</b>, a send data routine is called by a conference call process (e.g., a process running on the personal computing device <b>530</b>). A packet of data (e.g., with or without various protocol headers) is passed in with this send data routine call. In an example, the packet of data may include command data, audio data, share data, or video data.</p><p id="p-0114" num="0112">At <b>1212</b>, a comparison is made between the cache size (e.g., the fill level <b>1140</b>) of a packet queue (e.g., the packet queue <b>1000</b>) that the data packet must pass through and an associated refuse threshold. Where that comparison indicates that the cache size is greater than the refuse threshold, the technique <b>1200</b> proceeds to <b>1214</b> at which the send data routine fails and the packet of data is dropped. However, where the comparison indicates that the cache size is not greater than the refuse threshold, the technique <b>1200</b> proceeds to <b>1216</b>.</p><p id="p-0115" num="0113">At <b>1216</b>, a comparison is made between the cache size of the packet queue and an associated congest threshold. Where that comparison indicates that the cache size is not greater than an associated congest threshold, the technique <b>1200</b> proceeds to <b>1226</b> at which the data packet is added to the cache of the packet queue. However, where the comparison indicates that the cache size is greater than an associated congest threshold, the technique <b>1200</b> proceeds to <b>1218</b>.</p><p id="p-0116" num="0114">At <b>1218</b>, the channel state <b>1220</b> is checked to determine whether the channel state <b>1220</b> indicates the media channel for the call was already in a congest state. Where the channel state <b>1220</b> indicates the media channel for the call was already in a congest state, the technique <b>1200</b> proceeds to <b>1226</b> at which the data packet is added to the cache of the packet queue. However, where the channel state <b>1220</b> indicates the media channel for the call was not already in a congest state, the technique <b>1200</b> proceeds to <b>1222</b>, at which a congest notification is issued which may serve to invoke one or more congestion mitigation measures (e.g., decreasing a media encoder data rate or sending a congestion message to a remote device in the call, such as a media server). In an example, the technique <b>1400</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be implemented in response to the notification of congestion at <b>1222</b>.</p><p id="p-0117" num="0115">After a congest notification is issued at <b>1222</b>, the technique <b>1200</b> proceeds to <b>1224</b>, at which a congest flag is set in the channel state <b>1220</b> to indicate an ongoing congest state. The technique <b>1200</b> also proceeds to <b>1226</b>, at which the data packet is added to the cache of the packet queue. At <b>1228</b>, the data send routine returns with success.</p><p id="p-0118" num="0116">Referring to <figref idref="DRAWINGS">FIG. <b>12</b>B</figref>, the technique <b>1250</b> for reading packets for a call in a packet queue with a congest threshold for transmission via a shared virtual channel is shown. At <b>1230</b>, a cache handle routine is called by a conference call process (e.g., a process of the application VDI plugin <b>432</b> running on the personal computing device <b>530</b>).</p><p id="p-0119" num="0117">At <b>1232</b>, the cache is checked to determine whether there are packets of data available for transmission. Where there are no packets of data available in the cache, the technique <b>1250</b> proceeds to <b>1234</b>. Where a packet of data is available in the cache, the technique <b>1250</b> proceeds to <b>1240</b>, at which the oldest message in the cache is transmitted via a shared virtual channel (e.g., an ICA channel) to a VDI server (e.g., the VDI server <b>520</b>) for forwarding to a media server (e.g., the media server <b>510</b>).</p><p id="p-0120" num="0118">At <b>1234</b>, the channel state <b>1220</b> is checked to determine whether the channel state <b>1220</b> indicates the media channel for the call was in a congest state. Where the channel state <b>1220</b> indicates the media channel for the call was in a congest state, the technique <b>1250</b> proceeds to <b>1236</b>, at which a notification that the media channel is free of congestion is issued.</p><p id="p-0121" num="0119">After a notification is issued at <b>1236</b>, the technique <b>1250</b> proceeds to <b>1238</b>, at which the congest flag of the channel state <b>1220</b> is cleared to indicate a lack of congestion. The technique <b>1250</b> also proceeds to <b>1244</b>, at which the cache handle routine ends.</p><p id="p-0122" num="0120">At <b>1242</b>, a check is performed to determine whether the packet of data was successfully sent. Where the packet of data was successfully sent, the technique <b>1250</b> returns to <b>1232</b> to check for any additional packets of data in the cache. However, where the packet of data was not sent successfully (e.g., error message returned or timeout), the technique <b>1250</b> proceeds to <b>1244</b>, at which the cache handle routine ends.</p><p id="p-0123" num="0121">Referring to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the technique <b>1300</b> for transmitting packets for a call from multiple streams using packet queues (e.g., the set of packet queues <b>1000</b>) with a congest threshold is shown. At <b>1302</b>, the technique <b>1300</b> includes opening a media channel (e.g., the second media channel <b>552</b>) between a personal computing device (e.g., the personal computing device <b>530</b>) and a media server (e.g., the media server <b>510</b>) for a call initiated using a virtual desktop infrastructure server (e.g., the virtual desktop infrastructure server <b>520</b>). The media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol (e.g., ICA or RDP) for exchanging data for virtual desktop applications. Opening the media channel may include starting one or more transport layer sessions (e.g., a UDP session or a TCP session) between the virtual desktop infrastructure server and the media server to transfer packets of media data (e.g., audio data, share data, or video data). Opening the media channel may also include starting one or more virtual channels (e.g., an ICA virtual channel) between the virtual desktop infrastructure server and the personal computing device to transfer packets of media data. In an example, the media server may be a PBX server.</p><p id="p-0124" num="0122">At <b>1304</b>, the technique <b>1300</b> includes merging packet streams of media data for the call in a single virtual channel (e.g., an ICA virtual channel) of the protocol using respective packet queues to store packets of the respective streams to await transmission via the single virtual channel. In an example, the technique <b>1300</b> may include merging a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue (e.g., the audio packet queue <b>1012</b>) to store packets of the first stream and a second packet queue (e.g., the share packet queue) to store packets of the second stream (e.g., as the packets await transmission via the single virtual channel). The first packet queue is associated with a first congest threshold. In some implementations, the second packet queue is associated with a second congest threshold. Data for the call of many types may be transferred in the single virtual channel by implementing the technique <b>1300</b> using one or more packet queues for each data type. In an example, the technique <b>1300</b> may include transferring data for the call, including the media data and call control data, in the single virtual channel of the protocol. In some implementations, the single virtual channel is used to transfer all data for the call.</p><p id="p-0125" num="0123">At <b>1306</b>, the technique <b>1300</b> includes pushing a packet of media data of a stream into the respective packet queue for the stream. In an example, the technique <b>1300</b> may include pushing a first packet of media data of the first stream into the first packet queue.</p><p id="p-0126" num="0124">At <b>1308</b>, the technique <b>1300</b> includes comparing a fill level of the respective packet queue to a congest threshold associated with the respective packet queue. In an example, the technique <b>1300</b> may include comparing a fill level of the first packet queue to the first congest threshold. In an example, the fill level and the congest threshold may be encoded in various units (e.g., number of packets or number of bytes).</p><p id="p-0127" num="0125">Where, at <b>1310</b>, the fill level exceeds the congest threshold, the technique <b>1300</b> proceeds to <b>1312</b>, at which a congestion mitigation measure is invoked responsive to the fill level exceeding the first congest threshold. In an example, the congestion mitigation measure may include reducing an encoder data rate for the first stream of media data. In some implementations, the congestion mitigation measure may include reducing an encoder data rate for the second stream of media data, which is a different stream of media data than the stream of the first packet (e.g., a lower priority media stream). In an example, the congestion mitigation measure may include transmitting a congestion indication message to the media server (e.g., the media server <b>510</b>). In an example, the congestion indication message may cause the media server to adjust an encode data rate of one or more streams of the call and/or disable services of the call. In some implementations, more than one congestion mitigation measure is invoked. In an example, the technique <b>1400</b> of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be implemented to invoke multiple congestion mitigation measures.</p><p id="p-0128" num="0126">Where, at <b>1310</b>, the fill level does not exceed the congest threshold or after invoking the congestion mitigation measure at <b>1312</b>, the technique <b>1300</b> continues at <b>1306</b> by pushing a next packet of data of the call for transmission into its respective packet queue. In an example, the technique <b>1300</b> may include, at <b>1306</b>, pushing a second packet of media data of the second stream into the second packet queue, at <b>1308</b>, comparing a fill level of the second packet queue to the second congest threshold, and, at <b>1312</b>, invoking a congestion mitigation measure responsive to the fill level exceeding the second congest threshold.</p><p id="p-0129" num="0127">Referring to <figref idref="DRAWINGS">FIG. <b>14</b></figref> the technique <b>1400</b> for invoking congestion mitigation measures is shown. At <b>1402</b>, the technique <b>1400</b> includes reducing an encoder data rate for a first stream of media data from which the packet that triggered the congestion event is drawn. At <b>1404</b>, the technique <b>1400</b> includes reducing an encoder data rate for one or more streams of media data that are different from the stream that from which the packet that triggered the congestion event is drawn. In an example, a stream with a lower priority than the first stream may have its encoder data rate reduced at <b>1404</b>. In some implementations, all streams with a lower priority than the first stream have their encoder data rates reduced. In some implementations, all media streams of the call have their encoder data rates reduced.</p><p id="p-0130" num="0128">At <b>1406</b>, a congestion indication message is transmitted to the media server (e.g., the media server <b>510</b>). In an example, the congestion indication message may cause the media server to adjust an encode data rate of one or more streams of the call and/or disable services of the call. The technique <b>1400</b> may be modified to include additional congestion mitigation measures, such as sending a congestion message to the virtual desktop infrastructure server (e.g., the virtual desktop infrastructure server <b>520</b>).</p><p id="p-0131" num="0129">The implementations of this disclosure can be described in terms of functional block components and various processing operations. Such functional block components can be realized by a number of hardware or software components that perform the specified functions. For example, the disclosed implementations can employ various integrated circuit components (e.g., memory elements, processing elements, logic elements, look-up tables, and the like), which can carry out a variety of functions under the control of one or more microprocessors or other control devices. Similarly, where the elements of the disclosed implementations are implemented using software programming or software elements, the systems and techniques can be implemented with a programming or scripting language, such as C, C++, Java, JavaScript, assembler, or the like, with the various algorithms being implemented with a combination of data structures, objects, processes, routines, or other programming elements.</p><p id="p-0132" num="0130">Functional aspects can be implemented in algorithms that execute on one or more processors. Furthermore, the implementations of the systems and techniques disclosed herein could employ a number of conventional techniques for electronics configuration, signal processing or control, data processing, and the like. The words &#x201c;mechanism&#x201d; and &#x201c;component&#x201d; are used broadly and are not limited to mechanical or physical implementations, but can include software routines in conjunction with processors, etc. Likewise, the terms &#x201c;system&#x201d; or &#x201c;tool&#x201d; as used herein and in the figures, but in any event based on their context, may be understood as corresponding to a functional unit implemented using software, hardware (e.g., an integrated circuit, such as an ASIC), or a combination of software and hardware. In certain contexts, such systems or mechanisms may be understood to be a processor-implemented software system or processor-implemented software mechanism that is part of or callable by an executable program, which may itself be wholly or partly composed of such linked systems or mechanisms.</p><p id="p-0133" num="0131">Implementations or portions of implementations of the above disclosure can take the form of a computer program product accessible from, for example, a computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be a device that can, for example, tangibly contain, store, communicate, or transport a program or data structure for use by or in connection with a processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device.</p><p id="p-0134" num="0132">Other suitable mediums are also available. Such computer-usable or computer-readable media can be referred to as non-transitory memory or media, and can include volatile memory or non-volatile memory that can change over time. The quality of memory or media being non-transitory refers to such memory or media storing data for some period of time or otherwise based on device power or a device power cycle. A memory of an apparatus described herein, unless otherwise specified, does not have to be physically contained by the apparatus, but is one that can be accessed remotely by the apparatus, and does not have to be contiguous with other memory that might be physically contained by the apparatus.</p><p id="p-0135" num="0133">While the disclosure has been described in connection with certain implementations, it is to be understood that the disclosure is not to be limited to the disclosed implementations but, on the contrary, is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures as is permitted under the law.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>opening a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server, wherein the media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol for exchanging data for virtual desktop applications;</claim-text><claim-text>merging a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream, wherein the first packet queue is associated with a first congest threshold;</claim-text><claim-text>pushing a first packet of media data of the first stream into the first packet queue;</claim-text><claim-text>comparing a fill level of the first packet queue to the first congest threshold; and</claim-text><claim-text>responsive to the fill level exceeding the first congest threshold, invoking a congestion mitigation measure.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the congestion mitigation measure comprises<claim-text>reducing an encoder data rate for the first stream of media data.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the congestion mitigation measure comprises<claim-text>reducing an encoder data rate for the second stream of media data.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the congestion mitigation measure comprises<claim-text>transmitting a congestion indication message to the media server.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>transferring data for the call, including the media data and call control data, in the single virtual channel of the protocol.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the single virtual channel is used to transfer all data for the call.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second packet queue is associated with a second congest threshold, comprising:<claim-text>pushing a second packet of media data of the second stream into the second packet queue;</claim-text><claim-text>comparing a fill level of the second packet queue to the second congest threshold; and</claim-text><claim-text>responsive to the fill level exceeding the second congest threshold, invoking a congestion mitigation measure.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising:<claim-text>selecting amongst a set of packet queues, including the first packet queue and the second packet queue, based on priorities of packet queues in the set of packet queues; and</claim-text><claim-text>transmitting a packet from the selected packet queue in the single virtual channel.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A personal computing device, comprising:<claim-text>a network interface,</claim-text><claim-text>a processor, and</claim-text><claim-text>a memory, wherein the memory stores instructions executable by the processor to:</claim-text><claim-text>open a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server, wherein the media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol for exchanging data for virtual desktop applications;</claim-text><claim-text>merge a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream, wherein the first packet queue is associated with a first congest threshold;</claim-text><claim-text>push a first packet of media data of the first stream into the first packet queue;</claim-text><claim-text>compare a fill level of the first packet queue to the first congest threshold; and</claim-text><claim-text>responsive to the fill level exceeding the first congest threshold, invoke a congestion mitigation measure.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the congestion mitigation measure comprises reducing an encoder data rate for the first stream of media data.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the congestion mitigation measure comprises reducing an encoder data rate for the second stream of media data.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the congestion mitigation measure comprises transmitting a congestion indication message to the media server.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the memory stores instructions executable by the processor to:<claim-text>transfer data for the call, including the media data and call control data, in the single virtual channel of the protocol.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the single virtual channel is used to transfer all data for the call.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the second packet queue is associated with a second congest threshold, and wherein the memory stores instructions executable by the processor to:<claim-text>push a second packet of media data of the second stream into the second packet queue;</claim-text><claim-text>compare a fill level of the second packet queue to the second congest threshold; and</claim-text><claim-text>responsive to the fill level exceeding the second congest threshold, invoke a congestion mitigation measure.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The personal computing device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the memory stores instructions executable by the processor to:<claim-text>select amongst a set of packet queues, including the first packet queue and the second packet queue, based on priorities of packet queues in the set of packet queues; and</claim-text><claim-text>transmit a packet from the selected packet queue in the single virtual channel.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A non-transitory computer-readable storage medium, comprising executable instructions that, when executed by a processor, facilitate performance of operations, comprising:<claim-text>opening a media channel between a personal computing device and a media server for a call initiated using a virtual desktop infrastructure server, wherein the media channel is routed through the virtual desktop infrastructure server and encapsulated in a protocol for exchanging data for virtual desktop applications;</claim-text><claim-text>merging a first stream of media data for the call with a second stream of media data for the call in a single virtual channel of the protocol using a first packet queue to store packets of the first stream and a second packet queue to store packets of the second stream, wherein the first packet queue is associated with a first congest threshold;</claim-text><claim-text>pushing a first packet of media data of the first stream into the first packet queue;</claim-text><claim-text>comparing a fill level of the first packet queue to the first congest threshold; and</claim-text><claim-text>responsive to the fill level exceeding the first congest threshold, invoking a congestion mitigation measure.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, comprising<claim-text>transferring data for the call, including the media data and call control data, in the single virtual channel of the protocol.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the single virtual channel is used to transfer all data for the call.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the second packet queue is associated with a second congest threshold, comprising executable instructions that, when executed by a processor, facilitate performance of operations, comprising:<claim-text>pushing a second packet of media data of the second stream into the second packet queue;</claim-text><claim-text>comparing a fill level of the second packet queue to the second congest threshold; and</claim-text><claim-text>responsive to the fill level exceeding the second congest threshold, invoking a congestion mitigation measure.</claim-text></claim-text></claim></claims></us-patent-application>