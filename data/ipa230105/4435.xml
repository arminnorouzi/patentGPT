<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004436A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004436</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779871</doc-number><date>20200923</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>201911175494.6</doc-number><date>20191126</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3228</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5033</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>1</main-group><subgroup>3228</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">CONTAINER SCHEDULING METHOD AND APPARATUS, AND NON-VOLATILE COMPUTER-READABLE STORAGE MEDIUM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>BEIJING JINGDONG SHANGKE INFORMATION TECHNOLOGY CO., LTD.</orgname><address><city>BEIJING</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant><us-applicant sequence="01" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>BEIJING JINGDONG CENTURY TRADING CO., LTD.</orgname><address><city>BEIJING</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>BAI</last-name><first-name>Shi</first-name><address><city>BEIJING</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CONG</last-name><first-name>Zhanlong</first-name><address><city>BEIJING</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>YANG</last-name><first-name>Guoqiang</first-name><address><city>BEIJING</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/CN2020/117244</doc-number><date>20200923</date></document-id><us-371c12-date><date>20220525</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A container scheduling method and apparatus, and a computer-readable storage medium, which relate to the technical field of computers. The method includes: according to a resource usage amount of a container set copy which has run, determining a predicted resource usage amount of a container set copy to be scheduled, wherein the type of container set copy which has run is the same as the type of container set copy to be scheduled; according to the predicted resource usage amount and a resource supply amount supported by each candidate node, determining a candidate node matching the container set copy which has run; and scheduling the container set copy which has run to the matched candidate node for running.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="67.82mm" wi="148.67mm" file="US20230004436A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="186.44mm" wi="83.48mm" file="US20230004436A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="229.11mm" wi="164.76mm" file="US20230004436A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="168.91mm" wi="166.20mm" file="US20230004436A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="197.19mm" wi="158.92mm" file="US20230004436A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is based on and claims the priority to the Chinese patent application No. 201911175494.6 filed on Nov. 26, 2019, the disclosure of which is hereby incorporated as a whole into the present application.</p><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This disclosure relates to the field of computer technologies, and particularly, to a scheduling method and apparatus of containers, and a non-transitory computer-readable storage medium.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A container cloud is an important type of a current cloud computing platform, and is mainly applied in a private cloud scene to meet demands of customers for privatization and customization. When the container cloud is established by the customers, a container cloud cluster will be deployed in a self-built machine room, where hundreds of physical servers will be often deployed to carry business on the container cloud.</p><p id="p-0005" num="0004">For example, a plurality of nodes can be configured as hosts for the running of containers. The nodes can be physical machines or virtual machines depending on the physical machines. Therefore, it is necessary to generate a suitable scheduling strategy for scheduling the containers to run on corresponding nodes.</p><p id="p-0006" num="0005">In the related art, the scheduling strategy is generated mainly according to how resources are distributed evenly on each node.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">According to some embodiments of the present disclosure, there is provided a scheduling method of containers, comprising: determining predicted resource usage of a to-be-scheduled Pod replica according to resource usage of an already run Pod replica, wherein types of the already run Pod replica and the to-be-scheduled Pod replica are the same; determining at least one candidate node matched with the already run Pod replica according to the predicted resource usage and resource provision supported by candidate nodes; and scheduling the already run Pod replica to be run on the at least one candidate node.</p><p id="p-0008" num="0007">In some embodiments, the determining at least one candidate node matched with the already run Pod replica comprises: determining the at least one candidate node matched with the already run Pod replica according to whether predicted resource usage of each type of resource in the predicted resource usage is matched with provision of each type of resource in the resource provision.</p><p id="p-0009" num="0008">In some embodiments, the determining at least one candidate node matched the already run Pod replica comprises: judging whether the predicted resource usage of each type of resource in the predicted resource usage is greater than a usage threshold corresponding to each type of resource; determining a resource with predicted resource usage greater than a corresponding usage threshold as a demand resource; judging whether a current utilization rate, in each of the at least one candidate node, of each type of resource in the resource provision is less than a utilization rate threshold corresponding to each type of resource; determining a resource with a current utilization rate less than a corresponding utilization rate threshold as an available resource of each of the at least one candidate node; and determining the at least one candidate node matched with the already run Pod replica according to the matching of the demand resource and the available resource.</p><p id="p-0010" num="0009">In some embodiments, the scheduling the already run Pod replica to be run on the at least one candidate node comprises: determining a number of physical machines that need to be awakened by the at least one candidate node according to the predicted resource usage and the resource provision of the at least one candidate node, wherein the number of the physical machines is a minimum number capable of meeting the predicted resource usage.</p><p id="p-0011" num="0010">In some embodiments, the method further comprises: acquiring a historical change of the resource usage of the already run Pod replica; judging whether the to-be-scheduled Pod replica is currently in a peak or valley time period of a usage according to the historical change; and determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment.</p><p id="p-0012" num="0011">In some embodiments, the acquiring a historical change of the resource usage of the already run Pod replica comprises: calculating average usage of each type of resource within a specified time period according to the resource usage of the already run Pod replica at each time moment within the specified time period; and determining the peak and valley time periods of the usage of each type of resource within the specified time period as the historical change according to the average usage.</p><p id="p-0013" num="0012">In some embodiments, the method further comprises: estimating resource usage of the to-be-scheduled Pod replica at a target time moment according to the historical change; and under the condition that the currently awakened physical machine is incapable of meeting the resource usage at the target time moment, awakening a number of physical machines which are capable of meeting the resource usage at the target time moment to provide resources before the target time moment comes.</p><p id="p-0014" num="0013">In some embodiments, the determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment comprises: under the condition that it is in the peak time period and a resource load of a certain to-be-scheduled Pod replica exceeds a load threshold, increasing the number of the to-be-scheduled Pod replica.</p><p id="p-0015" num="0014">In some embodiments, the determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment comprises: under the condition that it is in the valley time period, decreasing the number of the to-be-scheduled Pod replica, and controlling an cleared physical machine to enter a sleep state.</p><p id="p-0016" num="0015">In some embodiments, the method further comprises: according to the number of Pod replicas running on a corresponding physical machine of the at least one candidate node, controlling the corresponding physical machine to be in a high or non-high performance mode.</p><p id="p-0017" num="0016">In some embodiments, the controlling the corresponding physical machine to be in a high or non-high performance mode comprises: under the condition that there is no Pod replica running on the corresponding physical machine, controlling the corresponding physical machine to be in a sleep mode; and under the condition that the number of Pod replicas running on the corresponding physical machine is less than a replica threshold, controlling the corresponding physical machine to be in a low performance mode.</p><p id="p-0018" num="0017">In some embodiments, each of the at least one candidate node is determined according to at least one of the number of the to-be-scheduled Pod replica, a high availability demand, an affinity demand, or an exclusivity demand.</p><p id="p-0019" num="0018">According to other embodiments of the present disclosure, there is provided a scheduling apparatus of containers, comprising: a usage determination unit configured to determine predicted resource usage of a to-be-scheduled Pod replica according to resource usage of an already run Pod replica, wherein types of the already run Pod replica and the to-be-scheduled Pod replica are the same; a node matching unit configured to determine at least one candidate node matched with the already run Pod replica according to the predicted resource usage and resource provision supported by candidate nodes; and a scheduling unit configured to schedule the already run Pod replica to be run on the at least one candidate node.</p><p id="p-0020" num="0019">In some embodiments, the node matching unit determines the at least one candidate node matched with the already run Pod replica according to whether predicted resource usage of each type of resource in the predicted resource usage is matched with provision of each type of resource in the resource provision.</p><p id="p-0021" num="0020">In some embodiments, the node matching unit judges whether the predicted resource usage of each type of resource in the predicted resource usages is greater than a usage threshold corresponding to each type of resource; determines a resource greater than the corresponding usage threshold as a demand resource; judges whether a current utilization rate, in each of the at least one candidate node, of each type of resource in the resource provision is less than a corresponding utilization rate threshold; determines a resource with a current utilization rate less than a corresponding utilization rate threshold as an available resource of each of the at least one candidate node; and determines the candidate nodes matched with the already run Pod replica according to the matching of the demand resource and the available resource.</p><p id="p-0022" num="0021">In some embodiments, the scheduling unit determines the number of physical machines that need to be awakened by the at least one candidate node according to the predicted resource usage and the resource provision of the at least one candidate node, wherein the number of physical machines is a minimum number capable of meeting the predicted resource usage.</p><p id="p-0023" num="0022">In some embodiments, the apparatus further comprises a judgment unit configured to judge whether the to-be-scheduled Pod replica is currently in a peak or valley time period of a usage according to an acquired historical change of the resource usage of the already run Pod replica, so as to determine whether to increase the number of the to-be-scheduled Pod replica according to the judgment result.</p><p id="p-0024" num="0023">In some embodiments, the judgment unit calculates average usage of each type of resource within a specified time period according to the resource usage of the already run Pod replica at each time moment within the specified time period; and according to the average usage, determines the peak and valley time periods of the usage of each type of resource within the specified time period as the historical change.</p><p id="p-0025" num="0024">In some embodiments, the apparatus further comprises a control unit configured to estimate resource usage of the to-be-scheduled Pod replica at a target time moment according to the historical change; and under the condition that the currently awakened physical machine is incapable of meeting the resource usage at the target time moment, awaken a number of physical machines which are capable of meeting the resource usage at the target time moment to provide resources before the target time moment comes.</p><p id="p-0026" num="0025">In some embodiments, the control unit, under the condition that it is in the peak time period and a resource load of a certain to-be-scheduled Pod replica exceeds a load threshold, increases the number of the to-be-scheduled Pod replica.</p><p id="p-0027" num="0026">In some embodiments, the control unit, under the condition that it is in the valley time period, reduces the number of to-be-scheduled Pod replica and controls an cleared physical machine to enter a sleep state.</p><p id="p-0028" num="0027">In some embodiments, the control unit is configured to control, according to the number of Pod replicas running on a corresponding physical machine of the at least one candidate node, the corresponding physical machine to be in a high or non-high performance mode.</p><p id="p-0029" num="0028">In some embodiments, the control unit controlling the corresponding physical machine to be in a high or non-high performance mode comprises: under the condition that there is no Pod replica running on the corresponding physical machine, controlling the corresponding physical machine to be in a sleep mode; and under the condition that the number of Pod replicas running on the corresponding physical machine is less than a replica threshold, controlling the corresponding physical machine to be in a low performance mode.</p><p id="p-0030" num="0029">In some embodiments, each of the at least one candidate node is determined according to at least one of the number of the to-be-scheduled Pod replica, a high availability demand, an affinity demand, or an exclusivity demand.</p><p id="p-0031" num="0030">According to still other embodiments of the present disclosure, there is provided a scheduling apparatus of containers, comprising: a memory; and a processor coupled to the memory, the processor being configured to perform, based on instructions stored in the memory, the scheduling method of the containers in any of the above embodiments.</p><p id="p-0032" num="0031">According to further embodiments of the present disclosure, there is provided a non-transitory computer-readable storage medium having thereon stored a computer program which, when executed by a processor, implements the scheduling method of containers in any of the above embodiments.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0033" num="0032">The accompanying drawings described herein are used for providing a further understanding of the present disclosure and constitute a part of this application, and illustrative embodiments of the present disclosure and their description are used for explaining the present disclosure and do not constitute an improper limitation on the present disclosure. In the drawings:</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a flow diagram of some embodiments of a scheduling method of containers according to the present disclosure;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a flow diagram of other embodiments of a scheduling method of containers according to the present disclosure;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a schematic diagram of some embodiments of a scheduling apparatus of containers according to the present disclosure;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>4</b><i>a </i></figref>illustrates a schematic diagram of some embodiments of node resource distribution according to the present disclosure;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>4</b><i>b </i></figref>illustrates a schematic diagram of some embodiments of resource usage of a Pod replica according to the present disclosure;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>4</b><i>c </i></figref>illustrates a schematic diagram of some embodiments of resource usage of two Pod replicas according to the present disclosure;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>4</b><i>d </i></figref>illustrates a schematic diagram of some embodiments of a scheduling method of containers according to the present disclosure;</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a schematic diagram of other embodiments of a scheduling method of containers according to the present disclosure;</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a block diagram of some embodiments of a scheduling apparatus of containers according to the present disclosure;</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a block diagram of other embodiments of a scheduling apparatus of containers according to the present disclosure;</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a block diagram of still other embodiments of a scheduling apparatus of containers according to the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0045" num="0044">The technical solutions in the embodiments of the present disclosure will be clearly and completely described below in conjunction with the accompanying drawings in the embodiments of the present disclosure, and it is obvious that the embodiments described are only some of the embodiments of the present disclosure, rather than all of them. The following description of at least one exemplary embodiment is merely illustrative in nature and in no way serves as any limitation on this disclosure and its application or use. All other embodiments, which can be derived by one of ordinary skill in the art from the embodiments in the present disclosure without making creative efforts, fall within the protection scope of the present disclosure.</p><p id="p-0046" num="0045">The relative arrangements, numerical expressions and numerical values of components and steps set forth in these embodiments do not limit the scope of the present disclosure unless otherwise specified. Meanwhile, it should be understood that sizes of various portions shown in the drawings are not drawn to actual scales for ease of description. A technique, method, and device known to one of ordinary skill in the related art may not be discussed in detail but should be regarded as part of the granted specification where appropriate. In all examples shown and discussed herein, any specific value should be construed as exemplary only and not as limiting. Therefore, other examples of the exemplary embodiments can have different values. It should be noted that: similar reference numbers and letters refer to similar items in the following drawings, and therefore, once a certain item is defined in one drawing, it need not be discussed further in subsequent drawings.</p><p id="p-0047" num="0046">Inventors of the present disclosure have found that, the related art described above have the following problem: since a scheduling strategy is not generated from the perspective of cluster management and maintenance, a mismatch between resource usage and resource provision is caused, resulting in a waste of system resources.</p><p id="p-0048" num="0047">In view of this, in the present disclosure, there is provided a container scheduling technical solution, capable of reducing the waste of system resources.</p><p id="p-0049" num="0048">As described above, when a customer establishes a container cloud, a container cloud cluster will be deployed in a self-built machine room, where hundreds of physical servers will often be deployed to carry business on the container cloud. A large number of physical servers running for a long time will result in huge energy consumption, and the more physical servers run, the greater the scale required for matched cooling and dust removal facilities is, which brings very huge continuous cost expenses such as electricity and management bills to the customer.</p><p id="p-0050" num="0049">In view of the above technical problem, the present disclosure is based on container cloud technologies, uses a mechanism that Kubernetes in a container cloud is capable of strategically scheduling a Pod(set of containers), and focuses on clearing loads of part of physical machines through the Pod scheduling, to enter a sleep state without energy consumption. In this way, the resource usage can be matched with the resource demand as much as possible, which achieves the target of not only meeting the business demand, but also saving energy and reducing cost. This can be achieved, for example, by the following embodiments.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a flow diagram of some embodiments of a scheduling method of containers according to the present disclosure.</p><p id="p-0052" num="0051">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the method comprises: step <b>110</b>, determining predicted resource usage; step <b>120</b>, determining a matched candidate node; and step <b>130</b>, scheduling an already run Pod replica.</p><p id="p-0053" num="0052">In the step <b>110</b>, the predicted resource usage of a to-be-scheduled Pod replica is determined according to resource usage of the already run Pod replica. Types of the already run Pod replica and the to-be-scheduled Pod replica are the same.</p><p id="p-0054" num="0053">For example, Pod is a set of closely related containers and is a basic unit of Kubernetes scheduling. The plurality of containers in the Pod share a network and file system, so that they can complete a service in such a simple and efficient manner of inter-process communication and file sharing. A Pod replica is a set of Pods created by using one same Pod mode, and is controlled by RC (Replication Controller) or RS (Replica Set).</p><p id="p-0055" num="0054">In some embodiments, the type of the Pod replica is determined depending on a corresponding Pod mode, and Pod replicas with the same Pod mode are of the same type. For example, the Pod mode can comprise at least one of a mirror image of a container comprised in the Pod, a corresponding specification of the mirror image, a corresponding service name, or the number of replicas. The specification can comprise hardware resource configuration information required for the mirror image, such as the number of CPU (Central Processing Unit) cores, memory capacity, network bandwidth, and storage capacity.</p><p id="p-0056" num="0055">In some embodiments, one type of Pod mode can be determined by using one Pod template file, for example, a structure of one type of Pod mode is:</p><p id="p-0057" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="56pt" align="left"/><colspec colname="1" colwidth="161pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>{</entry></row><row><entry/><entry>Mirror image 1, specification 1;</entry></row><row><entry/><entry>Mirror image 2, specification 2;</entry></row><row><entry/><entry>...</entry></row><row><entry/><entry>Mirror image n, specification n;</entry></row><row><entry/><entry>Service name;</entry></row><row><entry/><entry>The number of replicas;</entry></row><row><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0058" num="0056">The specification can comprise the hardware configuration information such as the number of CPU cores, memory capacity, network bandwidth, and storage capacity. For example, a Pod with a label of X is created in the above manner, then the above structure is referred to as a Pod mode of Pod X.</p><p id="p-0059" num="0057">In the step <b>120</b>, the at least one candidate node matched with the already run Pod replica is determined according to the predicted resource usage and resource provision supported by candidate nodes.</p><p id="p-0060" num="0058">In some embodiments, each of the at least one candidate node is determined according to at least one of the number of the to-be-scheduled Pod replicas, a HA (High Availability) demand, an affinity demand, or an exclusivity demand.</p><p id="p-0061" num="0059">For example, affinity is a scheduling strategy when a Pod runs, and comprises: node Affinity, pod Affinity, and pod Anti-Affinity. The node Affinity is used for specifying on which node a Pod can or cannot be deployed. The pod Affinity is used for specifying along with which Pods the Pod can be deployed under one same topology. The pod Anti-Affinity is used for specifying along with which Pods the Pod cannot be deployed under the same topology, and together with the pod Affinity, settles relations between the pods.</p><p id="p-0062" num="0060">In some embodiments, the at least one candidate node matched with the already run Pod replica is determined according to whether predicted resource usage of each type of resource in the predicted resource usage is matched with provision of each type of resource in the resource provision.</p><p id="p-0063" num="0061">In some embodiments, it is judged whether the predicted resource usage of each type of resource in the predicted resource usage is greater than a corresponding usage threshold; a type of resource greater than the corresponding usage threshold is determined as a demand resource; it is judged whether a current utilization rate, in each of the at least one candidate node, of each type of resource in the resource provision is less than a corresponding utilization rate threshold; a type of resource with a current utilization rate less than the corresponding utilization rate threshold is determined as an available resource of each of the at least one candidate node; and the at least one candidate node matched with the already run Pod replica is determined according to the matching of the demand resource and the available resource.</p><p id="p-0064" num="0062">In the step <b>130</b>, the already run Pod replica is scheduled to run on the at least one candidate node.</p><p id="p-0065" num="0063">In some embodiments, the number of physical machines that need to be awakened by the at least one candidate node is determined according to the predicted resource usage and the resource provision of the at least one candidate node, wherein the number of physical machines is a minimum number capable of meeting the predicted resource usage.</p><p id="p-0066" num="0064">In some embodiments, current resource usage can also be predicted according to a historical change of the resource usage. This can be achieved, for example, by the embodiments in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0067" num="0065"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a flow diagram of other embodiments of a scheduling method of containers according to the present disclosure.</p><p id="p-0068" num="0066">As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the method can further comprise: step <b>210</b>, acquiring a historical change; step <b>220</b>, judging a current time period; and step <b>230</b>, determining whether to increase a replica.</p><p id="p-0069" num="0067">In the step <b>210</b>, the historical change of the resource usage of the already run Pod replica is acquired.</p><p id="p-0070" num="0068">In some embodiments, average usage of each type of resource within a specified time period is calculated according to the resource usage of the already run Pod replica at each time moment within the specified time period; and according to the average usage, peak and valley time periods of the usage of each type of resource within the specified time period are judged as the historical change.</p><p id="p-0071" num="0069">For example, under the condition that a difference between the usage of each type of resource and the average usage of each type of resource is greater than a peak threshold, the specified time period is determined as a peak time period; and under the condition that a difference between the average usage of each type of resource and the usage of each type of resource is greater than a valley threshold, the specified time period is determined as a valley time period.</p><p id="p-0072" num="0070">In the step <b>220</b>, according to the historical change, it is judged whether the to-be-scheduled Pod replica is currently in the peak or valley time period of a usage.</p><p id="p-0073" num="0071">In the step <b>230</b>, it is determined whether to increase the number of the to-be-scheduled Pod replicas according to a result of the judgment.</p><p id="p-0074" num="0072">In some embodiments, under the condition that it is in the peak time period and a resource load of a single to-be-scheduled Pod replica exceeds a load threshold, the number of the to-be-scheduled Pod replicas is increased.</p><p id="p-0075" num="0073">In some embodiments, under the condition that it is in the valley time period, the number of the to-be-scheduled Pod replicas is reduced, and an cleared physical machine is controlled to enter a sleep state.</p><p id="p-0076" num="0074">In some embodiments, according to the historical change, resource usage of the to-be-scheduled Pod replica at a target time moment is predicted; and under the condition that the currently awakened physical machine is incapable of meeting the resource usage at the target time moment, a number of physical machines which are capable of meeting the resource usage at the target time moment are awakened to provide resources before the target time moment comes.</p><p id="p-0077" num="0075">In some embodiments, according to the number of Pod replicas running on a corresponding physical machine of the at least one candidate node, the corresponding physical machine is controlled to be in a high or non-high performance mode.</p><p id="p-0078" num="0076">For example, under the condition that there is no Pod replica running on a corresponding physical machine, the corresponding physical machine is controlled to be in a sleep mode; and under the condition that the number of Pod replicas running on corresponding physical machines is less than a replica threshold, the corresponding physical machine is controlled to be in a low performance mode.</p><p id="p-0079" num="0077"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a schematic diagram of some embodiments of a scheduling apparatus of containers according to the present disclosure.</p><p id="p-0080" num="0078">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the scheduling apparatus can comprise a resource usage evaluation module, historical change analysis module, a scheduling system, and a physical machine state control module.</p><p id="p-0081" num="0079">In some embodiments, the resource usage evaluation module (which can comprise a usage determination unit) is configured to evaluate statistical data of usage of resources in a Pod. The statistical data can provide a data basis for the historical change analysis module and the scheduling system.</p><p id="p-0082" num="0080">In some embodiments, the resource usage evaluation module can record and evaluate resource usage of Pods with a same Pod mode. The resource usage can be represented by a 6-tuple. For example, the 6-tuple can comprise a CPU work instruction cycle count, memory usage, network IO (Input Output) count, network IO traffic, storage IO count, and storage IO total.</p><p id="p-0083" num="0081">In some embodiments, the resource usage can be a numerical value counted within a unit time t. For example, t can be 1 second, 1 minute, 1 hour, or the like.</p><p id="p-0084" num="0082">In some embodiments, an actual work instruction cycle count of a CPU can be used to accurately measure actual usage of the CPU by the Pod; the memory usage can be an accumulation value of memory usage per second within the time period t; and the network IO and the storage IO can be represented by count and total, for distinguishing cases of frequent IO and a large data amount of IO.</p><p id="p-0085" num="0083">In some embodiments, the resource usage evaluation module, for the Pods with the same Pod mode, counts their resource usage, and calculates an average value thereof. The average value can also be divided by a maximum value that can be achieved by one physical machine to normalize the average value, so that numerical values corresponding to the 6-tuple are unified into 6 numerical values between 0 and 1.</p><p id="p-0086" num="0084">For example, a maximum value of a CPU that can be achieved by a physical machine is all cycle counts of all cores of the physical machine within t; and a maximum value of a memory that can be achieved by the physical machine is a total of all memories of the physical machine minus memory usage of management and system programs.</p><p id="p-0087" num="0085">A maximum value of the network IO count that can be achieved by the physical machine is the most network IO count (updated when there is a new maximum value) that are historically performed by a system within t; a maximum value of the network IO traffic that can be achieved by the physical machine is a maximum network transmission data amount that can be achieved within t, which is calculated according to network bandwidth; a maximum value of the storage IO count that can be achieved by the physical machine is the most storage IO count (updated when there is a new maximum value) that are historically performed by the system within t; and a maximum value of the storage IO total that can be achieved by the physical machine is a maximum transmission data amount that can be achieved within t, which is calculated according to storage bandwidth.</p><p id="p-0088" num="0086">A normalized numerical value can be obtained by dividing the actual resource usage of the Pods with the same Pod mode by the maximum value. Except for the IO count, a sum of the resource usage of the plurality of Pods on one same physical machine cannot be greater than a capability value of the physical machine.</p><p id="p-0089" num="0087">In some embodiments, when specifications of a plurality of physical machines are not the same or processing capabilities thereof are not consistent, the processing capabilities of the physical machines are also normalized. For example, corresponding indexes of all physical machines must be divided by a value of a corresponding index of a physical machine with a maximum processing capability, that is, normalized physical machine capability index=physical machine index value/maximum physical machine index value.</p><p id="p-0090" num="0088">In some embodiments, resource provision of a node is a normalized 6-tuple, for measuring how many resources can be provided for the Pod by the node.</p><p id="p-0091" num="0089">In some embodiments, the historical change analysis module (which can comprise a judgment unit) is configured to analyze a historical change (for example, a periodicity law) of usage of the Pod for resources such as a CPU, memory, network, and IO, thereby providing a decision basis for the scheduling system and the physical machine state control module.</p><p id="p-0092" num="0090">In some embodiments, the usage of the Pod for the system resources changes in a wavy curve, which also generally shows a periodical change law. The change law of the system resource usage is generally caused by periodicity of human social activities. For example, most people work during the day and rest at night, causing systems interacting with people to be mostly busy during the day and idle at night. Therefore, better allocation of the resources can be realized by using the obtained change law.</p><p id="p-0093" num="0091">In some embodiments, according to work, rest and activity laws of people, a cycle of the change law can be divided into time periods of day, week, month, year and the like.</p><p id="p-0094" num="0092">In some embodiments, a law of resource usage of one day can be counted. For example, one time interval (for example, 1 minute) is taken as a unit time, and resource usage of Pods (Pod samples) with one same Pod mode is counted within each unit time.</p><p id="p-0095" num="0093">For example, abnormal data points can be removed within a time range (for example, 20 days) to obtain an average value of resource usage of each time period within one day; and time ranges of peak and valley time periods of the average value of the resource usage are determined. Resource usage in the peak time period is obviously higher than average usage of each type of resource within one day; and resource usage in the valley time period is obviously lower than the average usage of each type of resource within one day.</p><p id="p-0096" num="0094">In some embodiments, a law of resource usage of one week can be counted. For example, a time period of a certain day is taken as a unit time to count resource usage of Pods with one same Pod mode within each unit time. Within a time range (for example, 60 days), abnormal data points are removed to obtain an average value of resource usage of each day within one week. Time ranges of peak and valley time periods of the average value of the resource usage are determined.</p><p id="p-0097" num="0095">In some embodiments, a law of resource usage of one month can be counted. For example, a time period of a certain day is taken as a unit time to count resource usage of Pods with one same Pod mode within each unit time. Within a time range (for example, 90 days), abnormal data points are removed to obtain an average value of resource usage of each day within one month. Time ranges of peak and valley time periods of the average value of the resource usage are determined.</p><p id="p-0098" num="0096">In some embodiments, a law of resource usage of one year can be counted. For example, a time period of a certain day is taken as a unit time to count resource usage of Pods with one same Pod mode within each unit time. Within a time range of one year, abnormal data points are removed to obtain an average value of resource usage of each day within one year. Time ranges of peak and valley time periods of the average value of the resource usage are determined.</p><p id="p-0099" num="0097">In some embodiments, through the four time spans of day, week, month and year, the peak and valley time periods of the resource usage can be clearly analyzed, for guiding resource allocation.</p><p id="p-0100" num="0098">In some embodiments, the scheduling system (which can comprise a node matching unit and a scheduling unit) is responsible for dynamic scheduling of the system for Pod replicas when there is a Pod change such as increase, modification, and deletion. For example, dynamic scheduling mainly comprises scheduling when a Pod is created and scheduling when the Pod is modified and deleted. The scheduling system can comprise a scheduling strategy creation module and a dynamic change scheduling system.</p><p id="p-0101" num="0099">In some embodiments, the scheduling strategy creation module can divide a scheduling strategy into three levels: a predicate strategy, a peculiarity strategy, and a set optimize strategy (or flex-grow strategy).</p><p id="p-0102" num="0100">In some embodiments, the predicate strategy is used for filtering anode that does not meet a set condition. The set condition can comprise mutually exclusive setting between a Pod replica and a node, for example, a specified Pod replica cannot be deployed on a specified Node 1.</p><p id="p-0103" num="0101">In some embodiments, the peculiarity strategy is used for determining a candidate node set meeting conditions according to technical characteristics demanded by the Pod replica after the filtering by the predicate strategy. The technical characteristics can comprise the number of the Pod replicas, a high availability demand, an affinity demand, an exclusivity demand, and the like.</p><p id="p-0104" num="0102">In this way, performance and resource usage are not the only considerations for determining the at least one matched candidate node, and elements such as high availability, and high concurrency are also introduced, so that the scheduling effect is improved.</p><p id="p-0105" num="0103">In some embodiments, the set optimize strategy is used for set optimization and is a first way of third-level scheduling. For example, all to-be-scheduled Pod replicas can be taken as one Pod set for consideration, and a strategy capable of forming optimal efficiency after the Pod set is scheduled to a candidate node set is selected for scheduling.</p><p id="p-0106" num="0104">In some embodiments, optimal efficiency is that on the premise of meeting the set condition and the characteristic demand and under the condition that part of emergency traffic processing space is reserved, a load is capable of meeting a business demand and minimizing the energy consumption of the whole cluster.</p><p id="p-0107" num="0105">For example, a workload can be allocated as far as possible to a small number of physical machines, and the small number of physical machines are capable of meeting resource and traffic demands, such that more physical machines can sleep. When a physical machine to which the workload has been already allocated has a less load, the physical machine enters an energy-saving mode, so as to have lowest energy consumption while the business traffic demand can be met.</p><p id="p-0108" num="0106">In some embodiments, the set optimization can comprise the case where operations for two Pods are considered at the same time, for example, it is needed to delete one Pod replica and then create one new Pod replica. If one of a plurality of Pod replicas needs to be deleted, a scheduling program is capable of selecting an optimal delectable Pod replica, such that a newly created Pod replica can achieve the optimal efficiency.</p><p id="p-0109" num="0107">In some embodiments, when a Pod replica is created, a main flow of the set optimize method is as follows.</p><p id="p-0110" num="0108">Step 1, according to a template file for creating the Pod replica, determining a mode of the Pod replica, a set condition for creating the Pod replica, the number of the replicas and the like.</p><p id="p-0111" num="0109">Step 2, excluding a node that does not meet the set condition. For example, a label is a label for identifying a Kubernetes object, and is attached to the object in a key-value manner. The label does not provide uniqueness and in fact, a same label is often used by many objects (for example, Pods) to label a specific application. Some nodes can be excluded by the label.</p><p id="p-0112" num="0110">Step 3, dividing an allocatable candidate node set and distribution relations between a plurality of replicas of the Pod according to the technical characteristics such as the number of the Pod replicas, the high availability demand, the affinity demand, and the exclusivity demand.</p><p id="p-0113" num="0111">For example, Pod replicas are allocated to at least two physical host nodes to ensure high availability across the physical machines; or, the Pod replicas are allocated to at least two racks of physical machines to ensure high availability across the racks; or, the Pod replicas are all allocated onto physical hosts with high bandwidth networks to ensure high concurrent access to the networks.</p><p id="p-0114" num="0112">Step 4, if a Pod replica which has run for a period of time and has a same Pod mode as the to-be-scheduled Pod replica exists, acquiring a 6-tuple of actually used resource usage of recent resources of the Pod mode according to the resource usage evaluation module.</p><p id="p-0115" num="0113">Step 5, matching the resource usage 6-tuple of the Pod replica set with a remaining resource usage 6-tuple of candidate nodes in the candidate node set, and calculating a matching strategy that enables the nodes to achieve 6 indexes balanced.</p><p id="p-0116" num="0114">In some embodiments, if remaining resource usage in nodes on all physical hosts in a non-sleep state can support the creation of a new Pod replica, the Pod replica is scheduled to a corresponding node according to the balanced matching strategy. All to-be-scheduled Pod replicas are taken as one set for overall scheduling.</p><p id="p-0117" num="0115">In some embodiments, several items with significantly higher indexes in the resource usage of the Pod replica can be determined as high demand resources; and resources with maximum availability in the node are selected as valley resources (provision resources) to be matched with the high demand resources. That is to say, indexes with large resource idleness are filled as fully as possible, so that all 6 indexes realize basically balanced allocation on the node.</p><p id="p-0118" num="0116">In some embodiments, if some Pod replicas need to be scheduled to one same Node, resource usage of the Pod replicas that need to be allocated to the same Node is combined. For example, node resources are allocated if they can meet the demand.</p><p id="p-0119" num="0117">For example, <figref idref="DRAWINGS">FIGS. <b>4</b><i>a </i>to <b>4</b><i>d </i></figref>are resource evaluation embodiments in which two Pod replicas are scheduled to one same Node.</p><p id="p-0120" num="0118"><figref idref="DRAWINGS">FIG. <b>4</b><i>a </i></figref>illustrates a schematic diagram of some embodiments of node resource distribution according to the present disclosure.</p><p id="p-0121" num="0119"><figref idref="DRAWINGS">FIG. <b>4</b><i>a </i></figref>shows a normalized resource actual utilization rate and remaining allocable resource space of one schedulable node. In order to guarantee that the system is capable of carry business traffic under the conditions of traffic jitter, burst and the like, a reserved emergency resource space is provided in the system. For example, proportions of reserved emergency resource spaces of related indexes such as CPU and memory can be different.</p><p id="p-0122" num="0120">In some embodiments, a normalized average utilization rate of each type of resource can be calculated, and according to the normalized average utilization rate, valley resources with a lower utilization rate can be determined: memory, network IO traffic, and storage IO total.</p><p id="p-0123" num="0121"><figref idref="DRAWINGS">FIG. <b>4</b><i>b </i></figref>illustrates a schematic diagram of some embodiments of Pod replica resource usage according to the present disclosure.</p><p id="p-0124" num="0122"><figref idref="DRAWINGS">FIG. <b>4</b><i>b </i></figref>shows predicted resource usage that is predicted according to historical resource usage of already run Pod replicas with the same Pod mode as the to-be-scheduled Pod replica. Normalized average usage of each type of resource can be calculated, and according to the normalized average usage, high demand resources of the usage are determined: memory, network IO traffic, and storage IO total.</p><p id="p-0125" num="0123"><figref idref="DRAWINGS">FIG. <b>4</b><i>c </i></figref>illustrates a schematic diagram of some embodiments of resource usage of two Pod replicas according to the present disclosure.</p><p id="p-0126" num="0124"><figref idref="DRAWINGS">FIG. <b>4</b><i>c </i></figref>shows predicted resource usage of the two Pod replicas, each index being twice that of a single Pod. High demand resources are: memory, network IO traffic, and storage IO total. In this case, the high demand resource type and the valley resource type are just matched and the number of the valley resources can meet the high demand resources, then the two Pod replicas can be scheduled onto the node.</p><p id="p-0127" num="0125"><figref idref="DRAWINGS">FIG. <b>4</b><i>d </i></figref>illustrates a schematic diagram of some embodiments of a scheduling method of containers according to the present disclosure.</p><p id="p-0128" num="0126"><figref idref="DRAWINGS">FIG. <b>4</b><i>d </i></figref>shows resource usage when two Pod replicas are allocated to a schedulable node. The case of a plurality of nodes is similar to that of the single node, and both need to ensure that the predicted resource usage of the Pod can be met.</p><p id="p-0129" num="0127">In some embodiments, if remaining resource usage in nodes on all physical hosts in a non-sleep state is not enough to support the creation of a new Pod replica, several sleeping physical hosts are awakened. Moreover, allocable resource usage of nodes on the awakened physical hosts and the original nodes is enabled to meet the resource usage total demand of the mode for creating the Pod replica.</p><p id="p-0130" num="0128">In some embodiments, if there is no already run Pod replicas with the same Pod mode, the resource usage 6-tuple is predicted according to the resource demand (specification corresponding to each mirror image) in the template document. For example, the more cores are demanded, the greater the predicted CPU usage is. Then, according to the predicted resource usage, processing is performed according to the above embodiment.</p><p id="p-0131" num="0129">In some embodiments, after all the Pod replicas are scheduled onto the nodes or all physical machines are awakened, no node capable of meeting the resource demand exists, then the scheduling is finished.</p><p id="p-0132" num="0130">In some embodiments, a set optimization model of the set optimize strategy comprises: a target being that physical machines in the non-sleep state are minimized; a constraint condition being that the creation of all the Pod replicas meets the condition set in the template; the creation of all the Pod replicas meeting the technical characteristic demand; the created Pod replica being capable of meeting a business load; and resource usage of the Pod replica on each Node not exceeding a limit.</p><p id="p-0133" num="0131">In some embodiments, the flex-grow strategy is used for flexible allocation of the Pod replicas, which is a second alternative of the third-level scheduling. For example, on the premise that constraint conditions of first two levels of scheduling are met, a part of Pod replicas are created first, and then the number of the Pod replicas is adjusted with reference to workloads of the Pod replicas.</p><p id="p-0134" num="0132">In some embodiments, when a Pod is created, a main flow of the flex-grow flexible scheduling method is as follows:</p><p id="p-0135" num="0133">step 1, according to a template file for creating a Pod replica, determining a mode of the Pod replica, and determining a set condition for creating the Pod, and the number of the replicas.</p><p id="p-0136" num="0134">Step 2, excluding a node that does not meet the set condition for the creation. For example, certain nodes are excluded by a label.</p><p id="p-0137" num="0135">Step 3, dividing an allocatable candidate node set and distribution relations between a plurality of replicas of the Pod according to the technical characteristics such as the number of the Pod replicas, the high availability demand, the affinity demand, and the exclusivity demand.</p><p id="p-0138" num="0136">For example, Pod replicas are allocated onto at least two physical host nodes to ensure high availability across the physical machines. Or the Pod replicas are allocated onto at least two racks of physical machines to ensure high availability across the racks. Or the Pod replicas are allocated onto physical hosts with high bandwidth networks to ensure high concurrent access to the networks.</p><p id="p-0139" num="0137">Step 4, selecting a maximum number of replicas in two cases as the number of the Pod replicas to be created. For example, the two cases comprise half of the number in Pod replicas created demand, a minimum number of replicas meeting the technical characteristics.</p><p id="p-0140" num="0138">Step 5, performing Pod scheduling according to the number of Pod replicas determined in the step 4, and minimizing the number of physical machines in the non-sleep state under the condition that the set condition is met.</p><p id="p-0141" num="0139">Step 6, increasing the number of Pod replicas when the resource usage of the Pod replicas is greater than an upper threshold. There are two options of a stride for the increase, in which one is that a unit increase is performed according to a set number and the other is that a unit increase is performed according to a set proportion, for example, stride can be the half after the total number minus the existing number. When increasing the number, the target that physical machines in the non-sleep state are minimized should also be met.</p><p id="p-0142" num="0140">Step 7, decreasing the number of the Pod replicas when the resource usage of the Pod replicas is less than a lower threshold. There are two options of a stride for the decrease, in which one is that a unit decrease is performed according to a set number and the other is that a unit decrease is performed according to a set proportion, for example, the stride can be half of the existing number.</p><p id="p-0143" num="0141">Step 8, repeating the steps 6 and 7, until the resource usage of the Pod replicas is between the upper and lower thresholds.</p><p id="p-0144" num="0142">Step 9, if resources of the physical machines in the steps 6, 7 and 8 are cleared, recycling the physical machines and enabling the physical machines to enter the sleep state, and if the resources of the physical machines are insufficient, awakening sleeping physical machines to increase the resource provision.</p><p id="p-0145" num="0143">In some embodiments, the dynamical change scheduling system performs scheduling using a flexible replica set that depends on the load state of each current Pod replica. For example, the number of Pod replicas, 3, which is set by the user, can be taken as a standard value; when an overall load of the Pod replicas is lower, the number of the Pod replicas is decreased under the condition that the constraint condition such as high availability is met; and when the overall load of the Pod replicas is higher, the number of the Pod replicas is dynamically increased to adapt to the demand.</p><p id="p-0146" num="0144">In this way, the flexible replica set operation makes it possible to reduce the demand for a large number of computation resources in the cluster. Moreover, it can also enable part of physical machines in the cluster to enter the sleep state, to reduce the energy consumption of the cloud computing cluster. Since the electricity bill is one of main continuous expenses of the cloud computing platform, the running cost can be reduced.</p><p id="p-0147" num="0145">A scheduling flow of the dynamic change scheduling system comprises:</p><p id="p-0148" num="0146">step 1, analyzing a periodical law of resource usage of one Pod replica set for providing a service. As mentioned above, a peak time period, a valley time period and an average value of the resource usage can be analyzed according to four time spans of day, week, month and year.</p><p id="p-0149" num="0147">For example, resource usage of one service is a sum of resource usage of all Pod replicas it contains. The system needs to ensure that a service resource demand total can be supported regardless of how many Pod replicas there are in total.</p><p id="p-0150" num="0148">Step 2, through a maximum value of resource usage of a single Pod replica, calculating the number of Pod replicas required by a maximum resource demand (traffic peak) in each time period; and calculating the number of Pod replicas required by a minimum resource demand (traffic valley) in each time period.</p><p id="p-0151" num="0149">Step 3, when the system is in the traffic peak, reserving enough resources to support the scheduling of the Pod replicas.</p><p id="p-0152" num="0150">Step 4, during the normal running of the system, allocating several Pod replicas capable of meeting task load processing according to an average resource demand of the service.</p><p id="p-0153" num="0151">Step 5, when the traffic peak comes, a resource demand increases, and a resource load of a single Pod replica exceeds a set threshold, starting the flow of increasing the number of the Pod replicas.</p><p id="p-0154" num="0152">Step 6, increasing the number of the Pod replicas. For example, if there are not enough resources for allocation in the cluster, awakening the sleeping physical machines to increase the resource provision.</p><p id="p-0155" num="0153">In some embodiments, a time TO taken for awakening and initializing a physical machine is recorded; it is predicted that available physical host resources in the cluster at a time T will not meet the demand according to the periodical change of the resource usage; and an action of awakening a physical host is started at a time T-T<b>0</b>.</p><p id="p-0156" num="0154">Step 7, after the physical resource is in place, scheduling the Pod replicas and associating the Pod replicas with the corresponding service.</p><p id="p-0157" num="0155">Step 8, if the resource demand continues increasing, repeating the flow from the step 5 to the step 7, until the demand does not increase any more.</p><p id="p-0158" num="0156">Step 9, when the traffic demand decreases and it is analyzed according to the resource demand law that the resource demand will restore to the normal state, gradually decreasing the number of Pod replicas; and controlling remaining Pod replicas to run with a high load and be capable of meeting the traffic demand. The Pod replicas can be scheduled as far as possible to a small number of physical hosts, to enable an cleared physical host to enter the sleep state.</p><p id="p-0159" num="0157">Step 10, repeating the step 9 until the number of the Pod replicas is restored to the number required during the normal running of the system.</p><p id="p-0160" num="0158">Step 11, when the traffic valley comes, decreasing the number of the Pod replicas first, which is contrary to the flow of processing the traffic peak; scheduling the Pod replicas as far as possible to a small number of physical hosts; enabling an cleared physical host to enter the sleep state. When the traffic increases, the number of the Pod replicas is increased to a normal value.</p><p id="p-0161" num="0159">In some embodiments, the physical machine state control module (which can comprise a control unit) controls different states of the physical machine, such as a sleep mode, an energy-saving mode, and a high performance mode, according to a resource demand. For example, the physical machine mode can be controlled by the running of a Pod samples. This can be achieved, for example, by the embodiments of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0162" num="0160"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a schematic diagram of other embodiments of a scheduling method of containers according to the present disclosure.</p><p id="p-0163" num="0161">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, when a physical machine is cleared, that is, there is no running Pod sample on it, it is judged whether recent business traffic will rebound. Under the condition that it will not rebound, the physical host is enabled to enter the sleep mode to minimize the energy consumption.</p><p id="p-0164" num="0162">When only a small number of Pod samples (the number of which is less than the number threshold) are running on the physical machine and the actual resource usage is below the capability that can be provided by the physical machine, the physical machine is enabled to enter the energy-saving mode (low performance mode). In this way, the energy consumption can be reduced while the resource usage is guaranteed.</p><p id="p-0165" num="0163">When the physical machine is in the sleep mode and the system evaluates that more physical machine resources will be needed, a sleeping physical machine is awakened to enter the energy-saving mode, such that the awakened physical machine prepares for the resources and system running environment.</p><p id="p-0166" num="0164">When the physical machine is in the energy-saving mode and the actual resource usage increases, the physical machine in the energy-saving mode cannot meet the performance demand, then the physical machine is enabled to enter the high performance mode.</p><p id="p-0167" num="0165">When the physical machine is in the high performance mode and the actual resource usage decreases, the actual usage is far lower than the capability of the physical machine, then the physical machine is enabled to enter the energy-saving mode.</p><p id="p-0168" num="0166">In the above embodiments, through the scheduling of the Pod samples, part of the physical machines in the container cloud enter the sleep state, thereby greatly reducing the energy consumption of the container cloud platform cluster and reducing the electricity cost.</p><p id="p-0169" num="0167">In the above embodiments, by adopting the resource usage evaluation method based on the 6-tuple and the Pod mode, the possible resource usage of the Pod replica is evaluated more accurately, thereby providing a more accurate basis for the scheduling of the Pod replica.</p><p id="p-0170" num="0168">In the above embodiments, the periodical law analysis method for the resource usage provided on the container cloud, by adopting a higher perspective, can better judge the time for allocation and recovery of the Pod replicas and resources.</p><p id="p-0171" num="0169">In the above embodiments, a three-level Pod creation scheduling mechanism is provided, such that the Pod scheduling is performed for the goal of fewest physical machines, on the premise that various constraint conditions are met.</p><p id="p-0172" num="0170">In the above embodiments, there is provided a Pod dynamic change scheduling mechanism. On the premise that the system load demand is met, the Pod is dynamically scheduled, for the goal of recycling resources and saving energy when the business traffic is in valley. When the business traffic increases, the business demand can also be met by allocating the resources.</p><p id="p-0173" num="0171">In the above embodiments, the resource usage of the to-be-scheduled Pod replica is predicted according to the priori data of the resource usage of the Pod replica of the same type as the to-be-scheduled Pod replica; on the basis, the scheduling strategy is generated in conjunction with the number of resources which can be provided by each node. In this way, the resource usage of the system can be matched with the resource provision, to reduce the waste of the system resources.</p><p id="p-0174" num="0172"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a block diagram of some embodiments of a scheduling apparatus of containers according to the present disclosure.</p><p id="p-0175" num="0173">As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the scheduling apparatus <b>6</b> of containers comprises a usage determination unit <b>61</b>, a node matching unit <b>62</b>, and a scheduling unit <b>63</b>.</p><p id="p-0176" num="0174">The usage determination unit <b>61</b> determines predicted resource usage of a to-be-scheduled Pod replica according to resource usage of an already run Pod replica, wherein types of the already run Pod replica and the to-be-scheduled Pod replica are the same.</p><p id="p-0177" num="0175">The node matching unit <b>62</b> determines at least one candidate node matched with the already run Pod replica according to the predicted resource usage and resource provision supported by candidate nodes.</p><p id="p-0178" num="0176">In some embodiments, the node matching unit <b>62</b> determines the at least one candidate node matched with the already run Pod replica according to whether the predicted resource usage of each type of resource in the predicted resource usage is matched with provision of each type of resource in the resource provision.</p><p id="p-0179" num="0177">In some embodiments, the node matching unit <b>62</b> judges whether the predicted resource usage of each type of resource in the predicted resource usages is greater than a corresponding usage threshold; determines a type of resource greater than the corresponding usage threshold as a demand resource; judges whether a current utilization rate, in each of the at least one candidate node, of each type of resource in the resource provision is less than a corresponding utilization rate threshold; determines a type of resource with a current utilization rate less than the corresponding utilization rate threshold as an available resource of each of the at least one candidate node; and determines the at least one candidate node matched with the already run Pod replica according to the matching of the demand resource and the available resource.</p><p id="p-0180" num="0178">The scheduling unit <b>63</b> schedules the already run Pod replica to be run on the at least one candidate node.</p><p id="p-0181" num="0179">In some embodiments, the scheduling unit <b>63</b> determines the number of physical machines that need to be awakened by the at least one candidate node according to the predicted resource usage and the resource provision of the at least one candidate node, wherein the number of physical machines is a minimum number capable of meeting the predicted resource usage.</p><p id="p-0182" num="0180">In some embodiments, the scheduling apparatus <b>6</b> further comprises a judgment unit <b>64</b> configured to judge whether the to-be-scheduled Pod replica is currently in a peak or valley time period of a usage according to an acquired historical change of the resource usage of the already run Pod replica, so as to determine whether to increase the number of the to-be-scheduled Pod replica according to a result of the judgment.</p><p id="p-0183" num="0181">In some embodiments, the judgment unit <b>64</b> calculates average usage of each type of resource in a specified time period according to the resource usage of the already run Pod replica at each time moment within the specified time period; and according to the average usage, judges the peak and valley time periods of the usage of each type of resource within the specified time period as the historical change.</p><p id="p-0184" num="0182">In some embodiments, the scheduling apparatus <b>6</b> further comprises a control unit <b>65</b> configured to estimate resource usage of the to-be-scheduled Pod replica at a target time moment according to the historical change; and under the condition that the currently awakened physical machine is incapable of meeting the resource usage at the target time moment, awaken a number of physical machines which are capable of meeting the resource usage at the target time moment to provide resources before the target time moment comes.</p><p id="p-0185" num="0183">In some embodiments, the control unit <b>65</b>, under the condition that it is in the peak time period and a resource load of a single to-be-scheduled Pod replica exceeds a load threshold, increases the number of the to-be-scheduled Pod replica.</p><p id="p-0186" num="0184">In some embodiments, the control unit <b>65</b>, under the condition that it is in the valley time period, decreases the number of the to-be-scheduled Pod replica and controls an cleared physical machine to enter a sleep state.</p><p id="p-0187" num="0185">In some embodiments, the control unit <b>65</b> is configured to control, according to the number of Pod replicas running on a corresponding physical machine of the at least one candidate node, the corresponding physical machine to be in a high or non-high performance mode.</p><p id="p-0188" num="0186">In some embodiments, the control unit <b>65</b> controlling the corresponding physical machine to be in a high or non-high performance mode comprises: under the condition that there is no Pod replica running on the corresponding physical machine, controlling the corresponding physical machine to be in a sleep mode; and under the condition that the number of Pod replicas running on the corresponding physical machine is less than a replica threshold, controlling the corresponding physical machine to be in a low performance mode.</p><p id="p-0189" num="0187">In some embodiments, each of the at least one candidate node is determined according to at least one of the number of the to-be-scheduled Pod replica, a high availability demand, an affinity demand, or an exclusivity demand.</p><p id="p-0190" num="0188">In the above embodiments, the resource usage of the to-be-scheduled Pod replica is predicted according to the priori data of the resource usage of the Pod replica of the same type as the to-be-scheduled Pod replica; on the basis, the scheduling strategy is generated in conjunction with the number of resources which can be provided by each node. In this way, the resource usage of the system can be matched with the resource provision, to reduce the waste of system resources.</p><p id="p-0191" num="0189"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a block diagram of other embodiments of a scheduling apparatus of containers according to the present disclosure.</p><p id="p-0192" num="0190">As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the scheduling apparatus <b>7</b> of containers of this embodiment comprises: a memory <b>71</b> and a processor <b>72</b> coupled to the memory <b>71</b>, the processor <b>72</b> being configured to perform, based on instructions stored in the memory <b>71</b>, the scheduling method of containers according to any of the embodiments of the present disclosure.</p><p id="p-0193" num="0191">The memory <b>71</b> can comprise, for example, a system memory, a fixed non-transitory storage medium, and the like. The system memory has thereon stored, for example, an operating system, an application, a boot loader, a database, other programs, and the like.</p><p id="p-0194" num="0192"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a block diagram of still other embodiments of a scheduling apparatus of containers according to the present disclosure.</p><p id="p-0195" num="0193">As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the scheduling apparatus <b>8</b> of containers of this embodiment comprises: a memory <b>810</b> and a processor <b>820</b> coupled to the memory <b>810</b>, the processor <b>820</b> being configured to perform, based on instructions stored in the memory <b>810</b>, the scheduling method of containers in any of the embodiments described above.</p><p id="p-0196" num="0194">The memory <b>810</b> can comprise, for example, a system memory, a fixed non-transitory storage medium, and the like. The system memory has thereon stored, for example, an operating system, an application, a boot loader, other programs, and the like.</p><p id="p-0197" num="0195">The scheduling apparatus <b>8</b> of containers can further comprise an input/output interface <b>830</b>, a network interface <b>840</b>, a storage interface <b>850</b>, and the like. These interfaces <b>830</b>, <b>840</b>, <b>850</b>, and the memory <b>810</b> and the processor <b>820</b> can be connected, for example, through a bus <b>860</b>. The input/output interface <b>830</b> provides a connection interface for input/output devices such as a display, a mouse, a keyboard, and a touch screen. The network interface <b>840</b> provides a connection interface for a variety of networking devices. The storage interface <b>850</b> provides a connection interface for external storage devices such as an SD card and a USB flash disk.</p><p id="p-0198" num="0196">It should be appreciated by those skilled in the art that the embodiments of the present disclosure can be provided as a method, system, or computer program product. Accordingly, the present disclosure can take a form of an entire hardware embodiment, an entire software embodiment or an embodiment combining software and hardware aspects. Furthermore, the present disclosure can take a form of a computer program product implemented on one or more computer-available non-transitory storage media (comprising, but not limited to, a disk memory, CD-ROM, optical memory, and the like) having computer-usable program code embodied therein.</p><p id="p-0199" num="0197">So far, the detailed description has been made according to the present disclosure. Some details well known in the art have not been described in order to avoid obscuring the concepts of the present disclosure. Those skilled in the art can now fully appreciate how to implement the technical solutions disclosed herein, in view of the foregoing description.</p><p id="p-0200" num="0198">The method and system of the present disclosure may be implemented in a number of ways. The method and system of the present disclosure can be implemented, for example, in software, hardware, firmware, or any combination of software, hardware, and firmware. The above order for the steps of the method is for illustration only, and the steps of the method of the present disclosure are not limited to the order specifically described above unless specifically stated otherwise. Furthermore, in some embodiments, the present disclosure can also be implemented as programs recorded in a recording medium, the programs comprising machine-readable instructions for implementing the method according to the present disclosure. Therefore, the present disclosure also covers the recording medium having thereon stored the programs for executing the method according to the present disclosure.</p><p id="p-0201" num="0199">Although some specific embodiments of the present disclosure have been described in detail by way of examples, it should be understood by those skilled in the art that the above examples are for illustration only and are not intended to limit the scope of the present disclosure. It should be appreciated by those skilled in the art that modifications can be made to the above embodiments without departing from the scope and spirit of the present disclosure. The scope of the present disclosure is defined by the attached claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A scheduling method of containers, comprising:<claim-text>determining predicted resource usage of a to-be-scheduled Pod replica according to resource usage of an already run Pod replica, wherein types of the already run Pod replica and the to-be-scheduled Pod replica are the same;</claim-text><claim-text>determining at least one candidate node matched with the already run Pod replica according to the predicted resource usage and resource provision supported by candidate nodes; and</claim-text><claim-text>scheduling the already run Pod replica to be run on the at least one candidate node.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The scheduling method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determining at least one candidate node matched with the already run Pod replica comprises:<claim-text>determining the at least one candidate node matched with the already run Pod replica according to whether predicted resource usage of each type in the predicted resource usage is matched with provision of each type of resource in the resource provision.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The scheduling method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the determining at least one candidate node matched the already run Pod replica comprises:<claim-text>judging whether the predicted resource usage of each type of resource in the predicted resource usage is greater than a usage threshold corresponding to each type of resource;</claim-text><claim-text>determining a resource with predicted resource usage greater than a corresponding usage threshold as a demand resource;</claim-text><claim-text>judging whether a current utilization rate, in each of the at least one candidate node, of each type of resource in the resource provision is less than a utilization rate threshold corresponding to each type of resource;</claim-text><claim-text>determining a resource with a current utilization rate less than a corresponding utilization rate threshold as an available resource of each of the at least one candidate node; and</claim-text><claim-text>determining the at least one candidate node matched with the already run Pod replica according to the matching of the demand resource and the available resource.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The scheduling method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the scheduling the already run Pod replica to be run on the at least one candidate node comprises:<claim-text>determining a number of physical machines that need to be awakened by the at least one candidate node according to the predicted resource usage and the resource provision of the at least one candidate node, wherein the number of the physical machines is a minimum number meeting the predicted resource usage.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The scheduling method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>acquiring a historical change of the resource usage of the already run Pod replica;</claim-text><claim-text>judging whether the to-be-scheduled Pod replica is currently in a peak or valley time period of a usage according to the historical change; and</claim-text><claim-text>determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The scheduling method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the acquiring a historical change of the resource usage of the already run Pod replica comprises:<claim-text>calculating average usage of each type of resource within a specified time period according to the resource usage of the already run Pod replica at each time moment within the specified time period; and</claim-text><claim-text>determining the peak and valley time periods of the usage of each type of resource within the specified time period as the historical change according to the average usage.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The scheduling method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, further comprising:<claim-text>estimating resource usage of the to-be-scheduled Pod replica at a target time moment according to the historical change; and</claim-text><claim-text>awakening, under the condition that the currently awakened physical machine does not meet the resource usage at the target time moment, a number of physical machines which meeting the resource usage at the target time moment to provide resources before the target time moment comes.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The scheduling method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment comprises:<claim-text>increasing the number of the to-be-scheduled Pod replica, under the condition that it is in the peak time period and a resource load of a certain to-be-scheduled Pod replica exceeds a load threshold.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The scheduling method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment comprises:<claim-text>decreasing the number of the to-be-scheduled Pod replica, and controlling an cleared physical machine to enter a sleep state, under the condition that it is in the valley time period.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The scheduling method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>controlling a physical machine corresponding to the at least one candidate node to be in a high or non-high performance mode, according to a number of Pod replicas running on the physical machine corresponding to the at least one candidate node.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The scheduling method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the controlling a corresponding physical machine of the at least one candidate node to be in a high or non-high performance mode comprises:<claim-text>controlling the corresponding physical machine to be in a sleep mode, under the condition that there is no Pod replica running on the corresponding physical machine; and</claim-text><claim-text>controlling the corresponding physical machine to be in a low performance mode, under the condition that the number of Pod replicas running on the corresponding physical machine is less than a replica threshold.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The scheduling method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein<claim-text>each of the at least one candidate node is determined according to at least one of a number of the to-be-scheduled Pod replica, a high availability demand, an affinity demand, or an exclusivity demand.</claim-text></claim-text></claim><claim id="CLM-13-15" num="13-15"><claim-text><b>13</b>.-<b>15</b>. (canceled)</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A scheduling apparatus of containers, comprising:<claim-text>a memory; and</claim-text><claim-text>a processor coupled to the memory, the processor being configured to perform, based on instructions stored in the memory, the following steps:</claim-text><claim-text>determining predicted resource usage of a to-be-scheduled Pod replica according to resource usage of an already run Pod replica, wherein types of the already run Pod replica and the to-be-scheduled Pod replica are the same;</claim-text><claim-text>determining at least one candidate node matched with the already run Pod replica according to the predicted resource usage and resource provision supported by candidate nodes; and</claim-text><claim-text>scheduling the already run Pod replica to be run on the at least one candidate node.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A non-transitory computer-readable storage medium having thereon stored a computer program which, when executed by a processor, implements the following steps:<claim-text>determining predicted resource usage of a to-be-scheduled Pod replica according to resource usage of an already run Pod replica, wherein types of the already run Pod replica and the to-be-scheduled Pod replica are the same;</claim-text><claim-text>determining at least one candidate node matched with the already run Pod replica according to the predicted resource usage and resource provision supported by candidate nodes; and</claim-text><claim-text>scheduling the already run Pod replica to be run on the at least one candidate node.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the computer program, when executed by the processor, implements the following steps:<claim-text>determining the at least one candidate node matched with the already run Pod replica according to whether predicted resource usage of each type of resource in the predicted resource usage is matched with provision of each type of resource in the resource provision.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the computer program, when executed by the processor, implements the following steps:<claim-text>judging whether the predicted resource usage of each type of resource in the predicted resource usage is greater than a usage threshold corresponding to each type of resource;</claim-text><claim-text>determining a resource with predicted resource usage greater than a corresponding usage threshold as a demand resource;</claim-text><claim-text>judging whether a current utilization rate, in each of the at least one candidate node, of each type of resource in the resource provision is less than a utilization rate threshold corresponding to each type of resource;</claim-text><claim-text>determining a resource with a current utilization rate less than a corresponding utilization rate threshold as an available resource of each of the at least one candidate node; and</claim-text><claim-text>determining the at least one candidate node matched with the already run Pod replica according to the matching of the demand resource and the available resource.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the computer program, when executed by the processor, implements the following steps:<claim-text>determining a number of physical machines that need to be awakened by the at least one candidate node according to the predicted resource usage and the resource provision of the at least one candidate node, wherein the number of the physical machines is a minimum number meeting the predicted resource usage.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the computer program, when executed by the processor, implements the following steps:<claim-text>acquiring a historical change of the resource usage of the already run Pod replica;</claim-text><claim-text>judging whether the to-be-scheduled Pod replica is currently in a peak or valley time period of a usage according to the historical change; and</claim-text><claim-text>determining whether to increase a number of the to-be-scheduled Pod replica according to a result of the judgment.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the computer program, when executed by the processor, implements the following steps:<claim-text>calculating average usage of each type of resource within a specified time period according to the resource usage of the already run Pod replica at each time moment within the specified time period; and</claim-text><claim-text>determining the peak and valley time periods of the usage of each type of resource within the specified time period as the historical change according to the average usage.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The non-transitory computer-readable storage medium according to <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the computer program, when executed by the processor, implements the following steps:<claim-text>estimating resource usage of the to-be-scheduled Pod replica at a target time moment according to the historical change; and</claim-text><claim-text>awakening, under the condition that the currently awakened physical machine does not meet the resource usage at the target time moment, a number of physical machines meeting the resource usage at the target time moment to provide resources before the target time moment comes.</claim-text></claim-text></claim></claims></us-patent-application>