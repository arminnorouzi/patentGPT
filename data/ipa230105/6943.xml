<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006944A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006944</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17941979</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>70</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>80</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>5003</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>51</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>827</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>65</main-group><subgroup>80</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>5003</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>67</main-group><subgroup>51</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">INTEROPERABLE CLOUD BASED MEDIA PROCESSING USING DYNAMIC NETWORK INTERFACE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16821015</doc-number><date>20200317</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11496414</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17941979</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62820192</doc-number><date>20190318</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>TENCENT AMERICA LLC</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SODAGAR</last-name><first-name>Iraj</first-name><address><city>Los Angeles</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>ZHAO</last-name><first-name>Shuai</first-name><address><city>Pleasanton</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>TENCENT AMERICA LLC</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of processing media content in Moving Picture Experts Group (MPEG) Network Based Media Processing (NBMP) includes obtaining a plurality of tasks for processing the media content, providing an interface between an NBMP workflow manager and a cloud manager by providing an NBMP Link application program interface (API), which links the plurality of tasks together, identifying an amount of network resources to be used for processing the media content, by using the NBMP Link API, and processing the media content in accordance with the identified amount of network resources.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="124.29mm" wi="158.75mm" file="US20230006944A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="207.18mm" wi="162.73mm" orientation="landscape" file="US20230006944A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="181.86mm" wi="103.12mm" orientation="landscape" file="US20230006944A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.92mm" wi="134.03mm" orientation="landscape" file="US20230006944A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="217.25mm" wi="168.32mm" orientation="landscape" file="US20230006944A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="188.89mm" wi="120.48mm" orientation="landscape" file="US20230006944A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="198.46mm" wi="139.53mm" orientation="landscape" file="US20230006944A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 16/821,015, filed Mar. 17, 2020, which claims priority from U.S. Provisional Patent Application No. 62/820,192, filed on Mar. 18, 2019, in the U.S. Patent and Trademark Office, the disclosures of which are incorporated herein by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">The Moving Picture Experts Group (MPEG) Network Based Media Processing (NBMP) project has developed a concept of processing media on cloud. However, current NBMP design does not provide an application program interface (API) abstraction for network management. Current NBMP design only provides APIs for cloud resources such as a hardware platform. Further, the current NBMP workflow manager works like a job distributor only, such as a Hadoop master node, which takes the job and distributes the job to all worker nodes based on the pre-defined the computing configurations. The workflow manager can obtain workers computing resources information such as using SNMP (Simple Network management protocol). However, there is a problem in that it is difficult to obtain the networking resources among the links, such as network topology, bandwidth, latency, and QoS and others.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">According to embodiments, a method of processing media content in Moving Picture Experts Group (MPEG) Network Based Media Processing (NBMP) is performed by at least one processor, and includes obtaining a plurality of tasks for processing the media content, providing an interface between an NBMP workflow manager and a cloud manager by providing an NBMP Link application program interface (API), which links the plurality of tasks together, identifying an amount of network resources to be used for processing the media content, by using the NBMP Link API, and processing the media content in accordance with the identified amount of network resources.</p><p id="p-0005" num="0004">According to embodiments, an apparatus for processing media content in Moving Picture Experts Group (MPEG) Network Based Media Processing (NBMP) includes at least one memory configured to store program code, and at least one processor configured to read the program code and operate as instructed by the program code, the program code including obtaining code configured to cause the at least one processor to obtain a plurality of tasks for processing the media content, providing code configured to cause the at least one processor to provide an interface between an NBMP workflow manager and a cloud manager by providing an NBMP Link application program interface (API), which links the plurality of tasks together, identifying code configured to cause the at least one processor to identify an amount of network resources to be used for processing the media content, by using the NBMP Link API, and processing code configured to cause the at least one processor to process the media content in accordance with the identified amount of network resources.</p><p id="p-0006" num="0005">According to embodiments, a non-transitory computer-readable medium stores instructions that, when executed by at least one processor of an apparatus for processing media content in Moving Picture Experts Group (MPEG) Network Based Media Processing (NBMP), cause the at least one processor to obtaining code configured to cause the at least one processor to obtain a plurality of tasks for processing the media content, providing code configured to cause the at least one processor to provide an interface between an NBMP workflow manager and a cloud manager by providing an NBMP Link application program interface (API), which links the plurality of tasks together, identifying code configured to cause the at least one processor to identify an amount of network resources to be used for processing the media content, by using the NBMP Link API, and processing code configured to cause the at least one processor to process the media content in accordance with the identified amount of network resources.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram of an environment in which methods, apparatuses and systems described herein may be implemented, according to embodiments;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of example components of one or more devices of <figref idref="DRAWINGS">FIG. <b>1</b></figref>;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a block diagram of an NBMP system, according to embodiments;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a block diagram of an NBMP system, according to embodiments;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method of processing media content in MPEG NBMP, according to embodiments; and</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram of an apparatus for processing media content in MPEG NBMP, according to embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0013" num="0012">Embodiments described herein provide functional improvements to the MPEG NBMP standard. Such improvements increase media processing efficiency, increase speed and lower cost of deployment of media services, and allow large scale deployment of media services by leveraging public, private or hybrid cloud services.</p><p id="p-0014" num="0013">In examples, the functional improvements to the MPEG NBMP standard include allowing the NBMP source be a user local input, cloud-local input, or a cloud remote input. This adds flexibility in terms of deploying services for local applications, cloud based application or application that are run remotely on clouds. Also, a single interface may be defined between NBMP workflow manager and cloud manager. Therefore, it makes operations of the media session through the cloud manager and network controller. Since the cloud manager has the ultimate knowledge about the cloud, it may simplify the operations and make them more feasible for NBMP workflow manager.</p><p id="p-0015" num="0014">Further, functional improvements to the MPEG NBMP standard include allowing the workflow manager to have adequate information regarding networking and physical computing resources. The NBMP has an API to the cloud resource and network manager. This API allows NBMP workflow manager to communicate with the cloud service for configuring the media services, for setting up the session, for allocation of computing and network resources, without having any knowledge of the cloud platform. The cloud manager translates the requests and information provided from and to the NBMP workflow manager to the internal cloud platform interfaces. Furthermore, the NBMP workflow manager can manage, monitor and analyze the performance of the media session, through this standard API and without knowing the internal cloud platform logics. Network management requirement is also included.</p><p id="p-0016" num="0015">Further, functional improvements to the MPEG NBMP standard include adding a Function discovery API to the API between the NBMP workflow manager and the cloud manager. This makes it possible for the workflow manager to discover preferred optimized implementation of functions on cloud and use them rather than loading the generic implementation of them on the cloud.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram of an environment <b>100</b> in which methods, apparatuses and systems described herein may be implemented, according to embodiments. As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the environment <b>100</b> may include a user device <b>110</b>, a platform <b>120</b>, and a network <b>130</b>. Devices of the environment <b>100</b> may interconnect via wired connections, wireless connections, or a combination of wired and wireless connections.</p><p id="p-0018" num="0017">The user device <b>110</b> includes one or more devices capable of receiving, generating, storing, processing, and/or providing information associated with platform <b>120</b>. For example, the user device <b>110</b> may include a computing device (e.g., a desktop computer, a laptop computer, a tablet computer, a handheld computer, a smart speaker, a server, etc.), a mobile phone (e.g., a smart phone, a radiotelephone, etc.), a wearable device (e.g., a pair of smart glasses or a smart watch), or a similar device. In some implementations, the user device <b>110</b> may receive information from and/or transmit information to the platform <b>120</b>.</p><p id="p-0019" num="0018">The platform <b>120</b> includes one or more devices as described elsewhere herein. In some implementations, the platform <b>120</b> may include a cloud server or a group of cloud servers. In some implementations, the platform <b>120</b> may be designed to be modular such that software components may be swapped in or out depending on a particular need. As such, the platform <b>120</b> may be easily and/or quickly reconfigured for different uses.</p><p id="p-0020" num="0019">In some implementations, as shown, the platform <b>120</b> may be hosted in a cloud computing environment <b>122</b>. Notably, while implementations described herein describe the platform <b>120</b> as being hosted in the cloud computing environment <b>122</b>, in some implementations, the platform <b>120</b> may not be cloud-based (i.e., may be implemented outside of a cloud computing environment) or may be partially cloud-based.</p><p id="p-0021" num="0020">The cloud computing environment <b>122</b> includes an environment that hosts the platform <b>120</b>. The cloud computing environment <b>122</b> may provide computation, software, data access, storage, etc. services that do not require end-user (e.g., the user device <b>110</b>) knowledge of a physical location and configuration of system(s) and/or device(s) that hosts the platform <b>120</b>. As shown, the cloud computing environment <b>122</b> may include a group of computing resources <b>124</b> (referred to collectively as &#x201c;computing resources <b>124</b>&#x201d; and individually as &#x201c;computing resource <b>124</b>&#x201d;).</p><p id="p-0022" num="0021">The computing resource <b>124</b> includes one or more personal computers, workstation computers, server devices, or other types of computation and/or communication devices. In some implementations, the computing resource <b>124</b> may host the platform <b>120</b>. The cloud resources may include compute instances executing in the computing resource <b>124</b>, storage devices provided in the computing resource <b>124</b>, data transfer devices provided by the computing resource <b>124</b>, etc. In some implementations, the computing resource <b>124</b> may communicate with other computing resources <b>124</b> via wired connections, wireless connections, or a combination of wired and wireless connections.</p><p id="p-0023" num="0022">As further shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the computing resource <b>124</b> includes a group of cloud resources, such as one or more applications (&#x201c;APPs&#x201d;) <b>124</b>-<b>1</b>, one or more virtual machines (&#x201c;VMs&#x201d;) <b>124</b>-<b>2</b>, virtualized storage (&#x201c;VSs&#x201d;) <b>124</b>-<b>3</b>, one or more hypervisors (&#x201c;HYPs&#x201d;) <b>124</b>-<b>4</b>, or the like.</p><p id="p-0024" num="0023">The application <b>124</b>-<b>1</b> includes one or more software applications that may be provided to or accessed by the user device <b>110</b> and/or the platform <b>120</b>. The application <b>124</b>-<b>1</b> may eliminate a need to install and execute the software applications on the user device <b>110</b>. For example, the application <b>124</b>-<b>1</b> may include software associated with the platform <b>120</b> and/or any other software capable of being provided via the cloud computing environment <b>122</b>. In some implementations, one application <b>124</b>-<b>1</b> may send/receive information to/from one or more other applications <b>124</b>-<b>1</b>, via the virtual machine <b>124</b>-<b>2</b>.</p><p id="p-0025" num="0024">The virtual machine <b>124</b>-<b>2</b> includes a software implementation of a machine (e.g., a computer) that executes programs like a physical machine. The virtual machine <b>124</b>-<b>2</b> may be either a system virtual machine or a process virtual machine, depending upon use and degree of correspondence to any real machine by the virtual machine <b>124</b>-<b>2</b>. A system virtual machine may provide a complete system platform that supports execution of a complete operating system (&#x201c;OS&#x201d;). A process virtual machine may execute a single program, and may support a single process. In some implementations, the virtual machine <b>124</b>-<b>2</b> may execute on behalf of a user (e.g., the user device <b>110</b>), and may manage infrastructure of the cloud computing environment <b>122</b>, such as data management, synchronization, or long-duration data transfers.</p><p id="p-0026" num="0025">The virtualized storage <b>124</b>-<b>3</b> includes one or more storage systems and/or one or more devices that use virtualization techniques within the storage systems or devices of the computing resource <b>124</b>. In some implementations, within the context of a storage system, types of virtualizations may include block virtualization and file virtualization. Block virtualization may refer to abstraction (or separation) of logical storage from physical storage so that the storage system may be accessed without regard to physical storage or heterogeneous structure. The separation may permit administrators of the storage system flexibility in how the administrators manage storage for end users. File virtualization may eliminate dependencies between data accessed at a file level and a location where files are physically stored. This may enable optimization of storage use, server consolidation, and/or performance of non-disruptive file migrations.</p><p id="p-0027" num="0026">The hypervisor <b>124</b>-<b>4</b> may provide hardware virtualization techniques that allow multiple operating systems (e.g., &#x201c;guest operating systems&#x201d;) to execute concurrently on a host computer, such as the computing resource <b>124</b>. The hypervisor <b>124</b>-<b>4</b> may present a virtual operating platform to the guest operating systems, and may manage the execution of the guest operating systems. Multiple instances of a variety of operating systems may share virtualized hardware resources.</p><p id="p-0028" num="0027">The network <b>130</b> includes one or more wired and/or wireless networks. For example, the network <b>130</b> may include a cellular network (e.g., a fifth generation (5G) network, a long-term evolution (LTE) network, a third generation (3G) network, a code division multiple access (CDMA) network, etc.), a public land mobile network (PLMN), a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), a telephone network (e.g., the Public Switched Telephone Network (PSTN)), a private network, an ad hoc network, an intranet, the Internet, a fiber optic-based network, or the like, and/or a combination of these or other types of networks.</p><p id="p-0029" num="0028">The number and arrangement of devices and networks shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> are provided as an example. In practice, there may be additional devices and/or networks, fewer devices and/or networks, different devices and/or networks, or differently arranged devices and/or networks than those shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Furthermore, two or more devices shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be implemented within a single device, or a single device shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be implemented as multiple, distributed devices. Additionally, or alternatively, a set of devices (e.g., one or more devices) of the environment <b>100</b> may perform one or more functions described as being performed by another set of devices of the environment <b>100</b>.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram of example components of one or more devices of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The device <b>200</b> may correspond to the user device <b>110</b> and/or the platform <b>120</b>. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, device <b>200</b> may include a bus <b>210</b>, a processor <b>220</b>, a memory <b>230</b>, a storage component <b>240</b>, an input component <b>250</b>, an output component <b>260</b>, and a communication interface <b>270</b>.</p><p id="p-0031" num="0030">The bus <b>210</b> includes a component that permits communication among the components of the device <b>200</b>. The processor <b>220</b> is implemented in hardware, firmware, or a combination of hardware and software. The processor <b>220</b> is a central processing unit (CPU), a graphics processing unit (GPU), an accelerated processing unit (APU), a microprocessor, a microcontroller, a digital signal processor (DSP), a field-programmable gate array (FPGA), an application-specific integrated circuit (ASIC), or another type of processing component. In some implementations, the processor <b>220</b> includes one or more processors capable of being programmed to perform a function. The memory <b>230</b> includes a random access memory (RAM), a read only memory (ROM), and/or another type of dynamic or static storage device (e.g., a flash memory, a magnetic memory, and/or an optical memory) that stores information and/or instructions for use by the processor <b>220</b>.</p><p id="p-0032" num="0031">The storage component <b>240</b> stores information and/or software related to the operation and use of the device <b>200</b>. For example, the storage component <b>240</b> may include a hard disk (e.g., a magnetic disk, an optical disk, a magneto-optic disk, and/or a solid state disk), a compact disc (CD), a digital versatile disc (DVD), a floppy disk, a cartridge, a magnetic tape, and/or another type of non-transitory computer-readable medium, along with a corresponding drive.</p><p id="p-0033" num="0032">The input component <b>250</b> includes a component that permits the device <b>200</b> to receive information, such as via user input (e.g., a touch screen display, a keyboard, a keypad, a mouse, a button, a switch, and/or a microphone). Additionally, or alternatively, the input component <b>250</b> may include a sensor for sensing information (e.g., a global positioning system (GPS) component, an accelerometer, a gyroscope, and/or an actuator). The output component <b>260</b> includes a component that provides output information from the device <b>200</b> (e.g., a display, a speaker, and/or one or more light-emitting diodes (LEDs)).</p><p id="p-0034" num="0033">The communication interface <b>270</b> includes a transceiver-like component (e.g., a transceiver and/or a separate receiver and transmitter) that enables the device <b>200</b> to communicate with other devices, such as via a wired connection, a wireless connection, or a combination of wired and wireless connections. The communication interface <b>270</b> may permit the device <b>200</b> to receive information from another device and/or provide information to another device. For example, the communication interface <b>270</b> may include an Ethernet interface, an optical interface, a coaxial interface, an infrared interface, a radio frequency (RF) interface, a universal serial bus (USB) interface, a Wi-Fi interface, a cellular network interface, or the like.</p><p id="p-0035" num="0034">The device <b>200</b> may perform one or more processes described herein. The device <b>200</b> may perform these processes in response to the processor <b>220</b> executing software instructions stored by a non-transitory computer-readable medium, such as the memory <b>230</b> and/or the storage component <b>240</b>. A computer-readable medium is defined herein as a non-transitory memory device. A memory device includes memory space within a single physical storage device or memory space spread across multiple physical storage devices.</p><p id="p-0036" num="0035">Software instructions may be read into the memory <b>230</b> and/or the storage component <b>240</b> from another computer-readable medium or from another device via the communication interface <b>270</b>. When executed, software instructions stored in the memory <b>230</b> and/or the storage component <b>240</b> may cause the processor <b>220</b> to perform one or more processes described herein. Additionally, or alternatively, hardwired circuitry may be used in place of or in combination with software instructions to perform one or more processes described herein. Thus, implementations described herein are not limited to any specific combination of hardware circuitry and software.</p><p id="p-0037" num="0036">The number and arrangement of components shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref> are provided as an example. In practice, the device <b>200</b> may include additional components, fewer components, different components, or differently arranged components than those shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Additionally, or alternatively, a set of components (e.g., one or more components) of the device <b>200</b> may perform one or more functions described as being performed by another set of components of the device <b>200</b>.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a block diagram of an NBMP system, according to embodiments.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates an interface between NBMP workflow manager and Cloud manager. The cloud manager can translate a request to internal API, and communicate them to different hardware modules.</p><p id="p-0040" num="0039">According to embodiments, an abstracted architecture is defined that puts the Cloud Resource and Network Manager in the middle of NBMP reference architecture and extends NBMP APIs to be the interface between NBMP Workflow Manager and Cloud Resource and Network Manager.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> is a block diagram of an NBMP system <b>301</b>, according to embodiments.</p><p id="p-0042" num="0041">Referring to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the NBMP system <b>301</b> includes an NBMP source <b>310</b>, an NBMP workflow manager <b>320</b>, a function repository <b>330</b>, a network controller <b>340</b>, one or more media processing entities <b>350</b>, a media source <b>360</b>, and a media sink <b>370</b>.</p><p id="p-0043" num="0042">The NBMP source <b>310</b> may receive instructions from a third party entity <b>380</b>, may communicate with the NBMP workflow manager <b>320</b> via an NBMP workflow API, and may communicate with the function repository <b>330</b> via a function discovery API. For example, the NBMP source <b>310</b> may send a workflow description document to the NBMP workflow manager <b>320</b>, and may read a function description of functions that are stored in a memory of the function repository <b>330</b>. The functions may include media processing functions such as, for example, functions of media decoding, feature point extraction, camera parameter extraction, projection method, seam information extraction, blending, post-processing, and encoding. The NBMP source <b>310</b> may include at least one processor and a memory that stores code configured to cause the at least processor to perform functions of the NBMP source <b>310</b>.</p><p id="p-0044" num="0043">The NBMP source <b>310</b> may request the NBMP workflow manager <b>320</b> to create workflow including tasks <b>351</b> and <b>352</b> to be performed by the one or more media processing entities <b>350</b>, by sending the workflow description document to the NBMP workflow manager <b>320</b>. The workflow description document may include descriptors, each of which may include parameters.</p><p id="p-0045" num="0044">For example, the NBMP source <b>310</b> may select one or more of the functions stored in the function repository <b>330</b>, and send, to the NBMP workflow manager <b>320</b>, the workflow description document including the descriptors for describing details such as input and output data, the selected one or more of the functions, and requirements for a workflow. The workflow description document may further include a set of task descriptions and a connection map of inputs and outputs of the tasks <b>351</b> and <b>352</b> to be performed by the one or more of the media processing entities <b>350</b>. When the NBMP workflow manager <b>320</b> receives such information from the NBMP source <b>310</b>, the NBMP workflow manager <b>320</b> may create the workflow by instantiating the tasks <b>351</b> and <b>352</b> based on function names and connecting the tasks <b>351</b> and <b>352</b> in accordance with the connection map.</p><p id="p-0046" num="0045">Alternatively or additionally, the NBMP source <b>310</b> may request the NBMP workflow manager <b>320</b> to create a workflow by using a set of keywords. For example, the NBMP source <b>310</b> may send, to the NBMP workflow manager <b>320</b>, the workflow description document including the set of the keywords that the NBMP workflow manager <b>320</b> may use to find appropriate one or more of the functions stored in the function repository <b>330</b>. When the NBMP workflow manager <b>320</b> receives such information from the NBMP source <b>310</b>, the NBMP workflow manager <b>320</b> may create the workflow by searching for the appropriate one or more of the functions, using the keywords that may be specified in a Processing Descriptor of the workflow description document, and by using other descriptors in the workflow description document to provision and connect the tasks <b>351</b> and <b>352</b>.</p><p id="p-0047" num="0046">The NBMP workflow manager <b>320</b> may communicate with the function repository <b>330</b> via a function discovery API, and may communicate with one or more of the media processing entities <b>350</b>, through the network controller <b>340</b>, via an NBMP task API, an NBMP link API, and a function discovery API. The NBMP workflow manager <b>320</b> may include at least one processor and a memory that stores code configured to cause the at least processor to perform functions of the NBMP workflow manager <b>320</b>.</p><p id="p-0048" num="0047">The NBMP Link API is added to the NBMP original architecture. As illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, any link between two tasks also has an API similar to the Task's API. Using this Link's API, the NBMP workflow manager can set up the required network resources, as well as monitor the status of the link during the media session or receive reports from the link. This API should be implemented by Cloud platform. For every link, this API is set up and the Cloud platform instantiates one instance of it using its network controllers, cloud manager or virtual networking managers.</p><p id="p-0049" num="0048">The NBMP function discovery API is also added to the NBMP original architecture. This API enables NBMP to discover the pre-loaded functions on cloud and use them rather than loading them again.</p><p id="p-0050" num="0049">The NBMP workflow manager <b>320</b> may use the NBMP task API to setup, configure, manage, and monitor one or more of the tasks <b>351</b> and <b>352</b> of the workflow that is performable by the one or more media processing entities <b>350</b>. In embodiments, the NBMP workflow manager <b>320</b> may use the NBMP task API to update and destroy the tasks <b>351</b> and <b>352</b>. To configure, manage, and monitor the tasks <b>351</b> and <b>352</b> of the workflow, the NBMP workflow manager <b>320</b> may send messages, such as requests, to one or more of the media processing entities <b>350</b>, wherein each message may have descriptors, each of which may include parameters. The tasks <b>351</b> and <b>352</b> may each include one or more media processing functions <b>354</b> and one or more configurations <b>353</b> for the one or more media processing functions <b>354</b>.</p><p id="p-0051" num="0050">In embodiments, after receiving the workflow description document from the NBMP source <b>310</b> that does not include a list of tasks (e.g., includes a list of keywords instead of a list of tasks), the NBMP workflow manager <b>320</b> may select the tasks based on descriptions of the tasks in the workflow description document, to search the function repository <b>330</b>, via the function discovery API, to find appropriate one or more of the functions to run as the tasks <b>351</b> and <b>352</b> for the current workflow. For example, the NBMP workflow manager <b>320</b> may select the tasks based on keywords that are provided in the workflow description document. After the appropriate one or more of the functions are identified using the keywords or the set of task descriptions that is provided by the NBMP source <b>310</b>, the NBMP workflow manager <b>320</b> may configure the selected tasks in the workflow by using the NBMP task API. For example, the NBMP workflow manager <b>320</b> may extract configuration data from information that is received from the NBMP source, and configure the tasks <b>351</b> and <b>352</b> based on the extracted configuration data.</p><p id="p-0052" num="0051">The one or more media processing entities <b>350</b> may be configured to receive media content from the media source <b>360</b>, process the received media content in accordance with the workflow that includes the tasks <b>351</b> and <b>352</b> and is created by the NBMP workflow manager <b>320</b>, and output the processed media content to the media sink <b>370</b>. The one or more media processing entities <b>350</b> may each include at least one processor and a memory that stores code configured to cause the at least processor to perform functions of the one or more media processing entities <b>350</b>.</p><p id="p-0053" num="0052">The network controller <b>340</b> may include at least one processor and a memory that stores code configured to cause the at least processor to perform functions of the network controller <b>340</b>.</p><p id="p-0054" num="0053">The media source <b>360</b> may include memory that stores media and may be integrated with or separate from the NBMP source <b>310</b>. In embodiments, the NBMP workflow manager <b>320</b> may notify the NBMP source <b>310</b> and/or the media source <b>360</b> when a workflow is prepared, and the media source <b>360</b> may transmit media content to the one or more of the media processing entities <b>350</b> based on a notification that the workflow is prepared.</p><p id="p-0055" num="0054">The media sink <b>370</b> may include at least one processor and at least one display that is configured to display media content that is processed by the one or more media processing entities <b>350</b>.</p><p id="p-0056" num="0055">The third party entity <b>380</b> may include at least one processor and a memory that stores code configured to cause the at least processor to perform functions of the third party entity <b>380</b>.</p><p id="p-0057" num="0056">As discussed above, messages from the NBMP source <b>310</b> (e.g., a workflow description document for requesting creation of a workflow) to the NBMP workflow manager <b>320</b>, and messages (e.g., for causing the workflow to be performed) from the NBMP workflow manager <b>320</b> to the one or more media processing entities <b>350</b> may include descriptors, each of which including parameters. In embodiments, communication between any of components of the NBMP system <b>301</b> using an API may include descriptors, each of which including parameters.</p><p id="p-0058" num="0057">Extending the Requirement Descriptor</p><p id="p-0059" num="0058">According to embodiments, in order to setup and monitor the networking between two tasks, NBMP QoS Requirements objects are extended with the parameters shown in Table 1 below.</p><p id="p-0060" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="280pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>QoS Requirements extension</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="70pt" align="center"/><colspec colname="2" colwidth="147pt" align="center"/><colspec colname="3" colwidth="63pt" align="center"/><tbody valign="top"><row><entry>Parameter Name</entry><entry>Description</entry><entry>Data Type</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>min Delay</entry><entry>The minimum delay of this networking </entry><entry>Unsigned Integer</entry></row><row><entry/><entry>element in microseconds.</entry><entry/></row><row><entry>Max Delay</entry><entry>The maximum delay of this networking </entry><entry>Unsigned Integer</entry></row><row><entry/><entry>element in microseconds.</entry><entry/></row><row><entry>min Throughput</entry><entry>The minimum bandwidth of this networking </entry><entry>Unsigned Integer</entry></row><row><entry/><entry>element in bits.</entry><entry/></row><row><entry>Max Throughput</entry><entry>The maximum bandwidth of this networking</entry><entry>Unsigned Integer</entry></row><row><entry/><entry>element in bits.</entry><entry/></row><row><entry>Averaging Window</entry><entry>The averaging window used to calculate the</entry><entry>Unsigned Integer</entry></row><row><entry/><entry>bandwidth in milliseconds. The default is</entry><entry/></row><row><entry/><entry>one second.</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0061" num="0059">Link Resource API</p><p id="p-0062" num="0060">According to embodiments, the link is similar to Task and can use the simplified Task Resource API. A link resource API may be added or Task Resource API may be extended to support the networking. Link API operations.</p><p id="p-0063" num="0061">According to embodiments, the link API operation would be similar to Task API operation and same configuration API can be used.</p><p id="p-0064" num="0062">Discovery of Preloaded Functions in Cloud</p><p id="p-0065" num="0063">According to embodiments, NBMP functions may have been preloaded in a cloud service. Some of the functions may be implemented by the cloud platform or a 3<sup>rd </sup>party vendor may have an optimized implementation of its function for a specific cloud solution.</p><p id="p-0066" num="0064">According to embodiments, the location of a function's implementation may be identified with a uniform resource locator (URL) in the function's processing descriptor. Before NBMP workflow manager loads that implementation to the cloud, it may make an inquiry if a preferred implementation of this function exists in the cloud platform; and if this is the case, the NBMP workflow manager can use that specific implementation of the function. This may require that a function from same vendor has a unique ID, and that each implementation of the function has a unique ID.</p><p id="p-0067" num="0065">According to embodiments, a workflow creation of an NBMP process includes:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0066">1. An NBMP Source uses the Workflow API to create a workflow. It sends the workflow description document as part of the request. The workflow manager checks the workflow description document and starts building the workflow.</li>        <li id="ul0002-0002" num="0067">2. The workflow manager sends a query or set of queries to the Function Registry to find the Functions that it will deploy to create the workflow.</li>        <li id="ul0002-0003" num="0068">3. For each query, the Function Registry replies with a short list of potential Functions, their descriptions and their configuration information.</li>        <li id="ul0002-0004" num="0069">4. The workflow manager selects the set of Functions it wants to deploy and based on their requirements it contacts the cloud platform to create the required Media Processing Entities and load the Functions on them.        <ul id="ul0003" list-style="none">            <li id="ul0003-0001" num="0070">a. For each Function, the workflow manager makes an inquiry to find out if a preferred implementation of that Function is already supported by the platform. If such implementation exists, the cloud platform returns a new ID for the Function.            <ul id="ul0004" list-style="none">                <li id="ul0004-0001" num="0071">i. For existing preferred Functions, the workflow manager uses their ID for creating the tasks.</li>                <li id="ul0004-0002" num="0072">ii. For non-existing functions, the workflow manager provides an authorized URL to the cloud manager to download the function's implementation.</li>            </ul>            </li>        </ul>        </li>        <li id="ul0002-0005" num="0073">5. The cloud platform confirms the creation of each Media Processing Entity, including the network access information.</li>        <li id="ul0002-0006" num="0074">6. The workflow manager creates a configuration for each Task and uses the Task API to send the configuration to that Task.</li>        <li id="ul0002-0007" num="0075">7. The Task confirms the successful configuration and returns access information so the workflow manager can connect the next Task.</li>        <li id="ul0002-0008" num="0076">8. The workflow manager confirms the creation of the workflow to the NBMP Source and informs it that media processing can start.</li>    </ul>    </li></ul></p><p id="p-0068" num="0077">Thus, according to embodiments, a function discovery API may be used between workflow manager and cloud manager. This API may use the existing function's general and processing descriptors to make inquiry and get a response on the existence of a function on the cloud platform.</p><p id="p-0069" num="0078"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a method <b>400</b> of processing media content in MPEG NBMP, according to embodiments. In some implementations, one or more process blocks of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be performed by the platform <b>120</b> implementing the NBMP system <b>301</b>. In some implementations, one or more process blocks of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be performed by another device or a group of devices separate from or including the platform <b>120</b> implementing the NBMP system <b>301</b>, such as the user device <b>110</b>.</p><p id="p-0070" num="0079">As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, in operation <b>410</b>, the method <b>400</b> includes obtaining a plurality of tasks for processing the media content.</p><p id="p-0071" num="0080">In operation <b>420</b>, the method <b>400</b> includes providing an interface between an NBMP workflow manager and a cloud manager by providing an NBMP Link application program interface (API), which links the plurality of tasks together.</p><p id="p-0072" num="0081">In operation <b>430</b>, the method <b>400</b> includes identifying an amount of network resources to be used for processing the media content, by using the NBMP Link API.</p><p id="p-0073" num="0082">In operation <b>440</b>, the method <b>400</b> includes processing the media content in accordance with the identified amount of network resources.</p><p id="p-0074" num="0083">The method may further include monitoring a communication between the linked plurality of tasks by extending NBMP Quality of Service (QoS) requirements according to at least one parameter. The at least one parameter comprises at least one from among minDelay, maxDelay, minThroughput, maxThroughput, and averagingWindow.</p><p id="p-0075" num="0084">The identifying the amount of network resources may include monitoring a status of the NBMP Link API during a media session.</p><p id="p-0076" num="0085">The identifying the amount of network resources may include receiving a report from the NBMP Link API. The function discovery API may include discovering pre-loaded functions to use for processing the media content.</p><p id="p-0077" num="0086">Although <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows example blocks of the method <b>400</b>, in some implementations, the method <b>400</b> may include additional blocks, fewer blocks, different blocks, or differently arranged blocks than those depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Additionally, or alternatively, two or more of the blocks of the method <b>400</b> may be performed in parallel.</p><p id="p-0078" num="0087"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram of an apparatus <b>500</b> for processing media content in MPEG NBMP, according to embodiments. As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the apparatus <b>500</b> includes first obtaining code <b>510</b>, second obtaining code <b>520</b>, processing code <b>530</b> and third obtaining code <b>540</b>.</p><p id="p-0079" num="0088">The obtaining code <b>510</b> is configured to cause the at least one processor to obtain a plurality of tasks for processing the media content.</p><p id="p-0080" num="0089">The providing code <b>520</b> is configured to cause the at least one processor to provide an interface between an NBMP workflow manager and a cloud manager by providing an NBMP Link application program interface (API), which links the plurality of tasks together.</p><p id="p-0081" num="0090">The identifying code <b>530</b> is configured to cause the at least one processor to identify an amount of network resources to be used for processing the media content, by using the NBMP Link API.</p><p id="p-0082" num="0091">The processing code <b>540</b> is configured to cause the at least one processor to process the media content in accordance with the identified amount of network resources.</p><p id="p-0083" num="0092">The foregoing disclosure provides illustration and description, but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.</p><p id="p-0084" num="0093">As used herein, the term component is intended to be broadly construed as hardware, firmware, or a combination of hardware and software.</p><p id="p-0085" num="0094">It will be apparent that systems and/or methods, described herein, may be implemented in different forms of hardware, firmware, or a combination of hardware and software. The actual specialized control hardware or software code used to implement these systems and/or methods is not limiting of the implementations. Thus, the operation and behavior of the systems and/or methods were described herein without reference to specific software code&#x2014;it being understood that software and hardware may be designed to implement the systems and/or methods based on the description herein.</p><p id="p-0086" num="0095">Even though combinations of features are recited in the claims and/or disclosed in the specification, these combinations are not intended to limit the disclosure of possible implementations. In fact, many of these features may be combined in ways not specifically recited in the claims and/or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim, the disclosure of possible implementations includes each dependent claim in combination with every other claim in the claim set.</p><p id="p-0087" num="0096">No element, act, or instruction used herein should be construed as critical or essential unless explicitly described as such. Also, as used herein, the articles &#x201c;a&#x201d; and &#x201c;an&#x201d; are intended to include one or more items, and may be used interchangeably with &#x201c;one or more.&#x201d; Furthermore, as used herein, the term &#x201c;set&#x201d; is intended to include one or more items (e.g., related items, unrelated items, a combination of related and unrelated items, etc.), and may be used interchangeably with &#x201c;one or more.&#x201d; Where only one item is intended, the term &#x201c;one&#x201d; or similar language is used. Also, as used herein, the terms &#x201c;has,&#x201d; &#x201c;have,&#x201d; &#x201c;having,&#x201d; or the like are intended to be open-ended terms. Further, the phrase &#x201c;based on&#x201d; is intended to mean &#x201c;based, at least in part, on&#x201d; unless explicitly stated otherwise.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of processing media content, the method being performed by at least one processor, and the method comprising:<claim-text>determining tasks for processing the media content;</claim-text><claim-text>providing an interface between a plurality of managers to link the tasks together;</claim-text><claim-text>identifying an amount of network resources by using the interface by monitoring the interface during a media session; and</claim-text><claim-text>processing the media content in accordance with the identified amount of network resources,</claim-text><claim-text>wherein at least one of the managers is configured to identify whether a function is supported and provide information to another of the managers to download an implementation of the function based on identifying that the function is not supported.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identifying the amount of network resources comprises monitoring a communication between the linked tasks by extending Quality of Service (QoS) requirements according to at least one parameter.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the at least one parameter comprises at least one from among minDelay, maxDelay, minThroughput, maxThroughput, and averagingWindow.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>,<claim-text>wherein the interface comprises a Moving Picture Experts Group (MPEG) Network Based Media Programming (NBMP) Link API,</claim-text><claim-text>wherein the managers comprise at least an NBMP workflow manager and a cloud manager, and</claim-text><claim-text>wherein the information comprises an authorized uniform resource locator.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the identifying the amount of network resources comprises receiving a report from the interface.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the managers comprise at least one other interface therebetween.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the at least one other interface comprises discovering pre-loaded functions to use for processing the media content.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. An apparatus for processing media content, the apparatus comprising:<claim-text>at least one memory configured to store program code; and</claim-text><claim-text>at least one processor configured to read the program code and operate as instructed by the program code, the program code comprising:<claim-text>determining code configured to cause the at least one processor to determine tasks for processing the media content;</claim-text><claim-text>providing code configured to cause the at least one processor to provide an interface between a plurality of managers to line the tasks together;</claim-text><claim-text>identifying code configured to cause the at least one processor to identify an amount of network resources, by using the interface by monitoring the interface during a media session; and</claim-text><claim-text>processing code configured to cause the at least one processor to process the media content in accordance with the identified amount of network resources,</claim-text><claim-text>wherein at least one of the managers is configured to identify whether a function is supported and provide information to another of the managers to download an implementation of the function based on identifying that the function is not supported.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the identifying code is further configured to cause the at least one processor to monitor a communication between the linked tasks by extending Quality of Service (QoS) requirements according to at least one parameter.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the at least one parameter comprises at least one from among minDelay, maxDelay, minThroughput, maxThroughput, and averagingWindow.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>,<claim-text>wherein the interface comprises a Moving Picture Experts Group (MPEG) Network Based Media Programming (NBMP) Link API,</claim-text><claim-text>wherein the managers comprise at least an NBMP workflow manager and a cloud manager, and</claim-text><claim-text>wherein the information comprises an authorized uniform resource locator.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the identifying code is further configured to cause the at least one processor to receive a report from the interface.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the managers comprise at least one other interface therebetween.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the at least one other interface comprises discovering pre-loaded functions to use for processing the media content.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer-readable medium storing instructions that, when executed by at least one processor of an apparatus for processing media content, cause the at least one processor to:<claim-text>determine tasks for processing the media content;</claim-text><claim-text>provide an interface between managers by providing an to link the tasks together;</claim-text><claim-text>identify an amount of network resources to be used for processing the media content, by using the interface by monitoring the interface during a media session; and</claim-text><claim-text>process the media content in accordance with the identified amount of network resources,</claim-text><claim-text>wherein at least one of the managers is configured to identify whether a function is supported and provide information to another of the managers to download an implementation of the function when the function is not supported.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the identifying the amount of network resources comprises monitoring a communication between the linked tasks by extending Quality of Service (QoS) requirements according to at least one parameter.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the at least one parameter comprises at least one from among minDelay, maxDelay, minThroughput, maxThroughput, and averagingWindow.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>,<claim-text>wherein the API comprises a Moving Picture Experts Group (MPEG) Network Based Media Programming (NBMP) Link API,</claim-text><claim-text>wherein the managers comprise at least an NBMP workflow manager and a cloud manager, and</claim-text><claim-text>wherein the information comprises an authorized uniform resource locator.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the identifying the amount of network resources comprises receiving a report from the interface.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable medium of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the managers comprise at least one other interface therebetween.</claim-text></claim></claims></us-patent-application>