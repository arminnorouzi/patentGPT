<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007287A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007287</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17897772</doc-number><date>20220829</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>44</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>139</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>132</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>33</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>105</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>44</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>139</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>132</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>33</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>105</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SIGNALING OF FLAG INDICATING ZERO MOTION VECTOR DIFFERENCE FOR A CONTROL POINT</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17221297</doc-number><date>20210402</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11470338</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17897772</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16503451</doc-number><date>20190703</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10999589</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17221297</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62741532</doc-number><date>20181004</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Tencent America LLC</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>LI</last-name><first-name>Guichun</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>XU</last-name><first-name>Xiaozhong</first-name><address><city>State College</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>LI</last-name><first-name>Xiang</first-name><address><city>Saratoga</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>LIU</last-name><first-name>Shan</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Tencent America LLC</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for video encoding includes determining a corresponding motion vector for each of multiple control points of a base predictor. The method further includes determining a corresponding motion vector difference for each of the multiple control points of the base predictor based on the determined motion vector for each respective control point. The method further includes generating prediction information of the current block to be included in a coded video bitstream. The prediction information includes (i) a usage flag indicative of the affine merge mode with offset, (ii) offset parameters defining the determined corresponding motion vector difference for each of the one or more of the control points, and (iii) a zero motion vector difference flag for the multiple control points of the base predictor. The zero motion vector difference flag indicates whether offset parameters for the respective control point are provided in the prediction information.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="129.88mm" wi="158.75mm" file="US20230007287A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="81.45mm" wi="140.63mm" orientation="landscape" file="US20230007287A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="210.23mm" wi="161.37mm" orientation="landscape" file="US20230007287A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="202.18mm" wi="165.27mm" orientation="landscape" file="US20230007287A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="219.96mm" wi="177.63mm" orientation="landscape" file="US20230007287A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="242.40mm" wi="178.39mm" orientation="landscape" file="US20230007287A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="244.26mm" wi="179.07mm" orientation="landscape" file="US20230007287A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="238.93mm" wi="178.39mm" orientation="landscape" file="US20230007287A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="119.46mm" wi="125.98mm" orientation="landscape" file="US20230007287A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="220.47mm" wi="144.95mm" orientation="landscape" file="US20230007287A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="168.15mm" wi="112.18mm" orientation="landscape" file="US20230007287A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="124.12mm" wi="129.12mm" orientation="landscape" file="US20230007287A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="204.98mm" wi="135.38mm" orientation="landscape" file="US20230007287A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="95.08mm" wi="105.24mm" orientation="landscape" file="US20230007287A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="160.44mm" wi="163.49mm" orientation="landscape" file="US20230007287A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="231.31mm" wi="178.99mm" orientation="landscape" file="US20230007287A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">INCORPORATION BY REFERENCE</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. Ser. No. 17/221,297 filed Apr. 2, 2021, which is a continuation of U.S. Ser. No. 16/503,451 filed Jul. 3, 2019, now U.S. Pat. No. 10,999,589, which claims the benefit of priority to U.S. Provisional Application No. 62/741,532, &#x201c;METHODS OF AFFINE MOTION MODEL CODING WITH PREDICTION OFFSETS&#x201d; filed on Oct. 4, 2018. The disclosures of the prior applications are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure describes embodiments generally related to video coding.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent the work is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.</p><p id="p-0005" num="0004">Video coding and decoding can be performed using inter-picture prediction with motion compensation. Uncompressed digital video can include a series of pictures, each picture having a spatial dimension of, for example, 1920&#xd7;1080 luminance samples and associated chrominance samples. The series of pictures can have a fixed or variable picture rate (informally also known as frame rate), of, for example 60 pictures per second or 60 Hz. Uncompressed video has significant bitrate requirements. For example, 1080p60 4:2:0 video at 8 bit per sample (1920&#xd7;1080 luminance sample resolution at 60 Hz frame rate) requires close to 1.5 Gbit/s bandwidth. An hour of such video requires more than 600 GBytes of storage space.</p><p id="p-0006" num="0005">One purpose of video coding and decoding can be the reduction of redundancy in the input video signal, through compression. Compression can help reduce the aforementioned bandwidth or storage space requirements, in some cases by two orders of magnitude or more. Both lossless and lossy compression, as well as a combination thereof can be employed. Lossless compression refers to techniques where an exact copy of the original signal can be reconstructed from the compressed original signal. When using lossy compression, the reconstructed signal may not be identical to the original signal, but the distortion between original and reconstructed signals is small enough to make the reconstructed signal useful for the intended application. In the case of video, lossy compression is widely employed. The amount of distortion tolerated depends on the application; for example, users of certain consumer streaming applications may tolerate higher distortion than users of television distribution applications. The compression ratio achievable can reflect that: higher allowable/tolerable distortion can yield higher compression ratios.</p><p id="p-0007" num="0006">Motion compensation can be a lossy compression technique and can relate to techniques where a block of sample data from a previously reconstructed picture or part thereof (reference picture), after being spatially shifted in a direction indicated by a motion vector (MV henceforth), is used for the prediction of a newly reconstructed picture or picture part. In some cases, the reference picture can be the same as the picture currently under reconstruction. MVs can have two dimensions X and Y, or three dimensions, the third being an indication of the reference picture in use (the latter, indirectly, can be a time dimension).</p><p id="p-0008" num="0007">In some video compression techniques, an MV applicable to a certain area of sample data can be predicted from other MVs, for example from those related to another area of sample data spatially adjacent to the area under reconstruction, and preceding that MV in decoding order. Doing so can substantially reduce the amount of data required for coding the MV, thereby removing redundancy and increasing compression. MV prediction can work effectively, for example, because when coding an input video signal derived from a camera (known as natural video) there is a statistical likelihood that areas larger than the area to which a single MV is applicable move in a similar direction and, therefore, can in some cases be predicted using a similar motion vector derived from MVs of neighboring area. That results in the MV found for a given area to be similar or the same as the MV predicted from the surrounding MVs, and that in turn can be represented, after entropy coding, in a smaller number of bits than what would be used if coding the MV directly. In some cases, MV prediction can be an example of lossless compression of a signal (namely: the MVs) derived from the original signal (namely: the sample stream). In other cases, MV prediction itself can be lossy, for example because of rounding errors when calculating a predictor from several surrounding MVs.</p><p id="p-0009" num="0008">Various MV prediction mechanisms are described in H.265/HEVC (ITU-T Rec. H.265, &#x201c;High Efficiency Video Coding&#x201d;, December 2016). Out of the many MV prediction mechanisms that H.265 offers, described here is a technique henceforth referred to as &#x201c;spatial merge&#x201d;.</p><p id="p-0010" num="0009">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a current block (<b>101</b>) comprises samples that have been found by the encoder during the motion search process to be predictable from a previous block of the same size that has been spatially shifted. Instead of coding that MV directly, the MV can be derived from metadata associated with one or more reference pictures, for example from the most recent (in decoding order) reference picture, using the MV associated with either one of five surrounding samples, denoted A<b>0</b>, A<b>1</b>, and B<b>0</b>, B<b>1</b>, B<b>2</b> (<b>102</b> through <b>106</b>, respectively). In H.265, the MV prediction can use predictors from the same reference picture that the neighboring block is using.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0011" num="0010">Aspects of the disclosure provide methods and apparatuses for video encoding/decoding. In some examples, an apparatus for video decoding includes receiving circuitry and processing circuitry. For example, the processing circuitry decodes prediction information of a current block in a current picture from a coded video bitstream. The prediction information is indicative of an affine merge mode with offset. Then, the processing circuitry decodes, from the coded video bitstream, a set of offset parameters that is used to determine a motion vector difference, and applies the motion vector difference to first motion vectors of multiple control points of a base predictor of the current block to determine second motion vectors at corresponding multiple control points of the current block. Further, the processing circuitry determines parameters of an affine model based on the second motion vectors at the corresponding multiple control points of the current block, and reconstructs at least a sample of the current block according to the affine model.</p><p id="p-0012" num="0011">In some embodiments, the processing circuitry decodes, from the coded video bitstream, an offset distance index and an offset direction index that are used to determine the motion vector difference, and determine an offset distance according to the offset distance index and a pre-defined mapping of offset distance indices and offset distances. Then, the processing circuitry determines an offset direction according to the offset direction index and a pre-defined mapping of offset direction indices and offset directions.</p><p id="p-0013" num="0012">In an example, the processing circuitry applies the motion vector difference to two control points of the base predictor when a four-parameter affine model is used. In another example, the processing circuitry applies the motion vector difference to three control points of the base predictor when a six-parameter affine model is used.</p><p id="p-0014" num="0013">In an embodiment, the processing circuitry applies the motion vector difference to the first motion vectors that refer to a first reference picture to determine the second motion vectors for the first reference picture, and applies a mirror of the motion vector difference to third motion vectors of the control points of the base predictor that refer to a second reference picture to determine fourth motion vectors at the corresponding multiple control points of the current block that refer to the second reference picture.</p><p id="p-0015" num="0014">In another embodiment, the processing circuitry applies the motion vector difference to the first motion vectors that refer to a first reference picture to determine the second motion vectors that refer to the first reference picture, and applies a mirror of the motion vector difference to third motion vectors of the control points of the base predictor that refer to a second reference picture to determine fourth motion vectors at the corresponding multiple control points of the current block that refer to the second reference picture when the second reference picture is on an opposite side of the current picture from the first reference picture.</p><p id="p-0016" num="0015">In some examples, the processing circuitry applies the motion vector difference to the first motion vectors that refer to a first reference picture to determine the second motion vectors that refer to the first reference picture, and calculates a scaling factor based on a first picture number difference of the first reference picture and the current picture and a second picture number difference of a second reference picture and the current picture. Further, the processing circuitry applies the motion vector difference that is scaled according to the scaling factor to third motion vectors of the control points of the base predictor that refer to the second reference picture to determine fourth motion vectors at the corresponding multiple control points of the current block that refer to the second reference picture.</p><p id="p-0017" num="0016">Aspects of the disclosure also provide a non-transitory computer-readable medium storing instructions which when executed by a computer for video decoding cause the computer to perform the method for video decoding.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0018" num="0017">Further features, the nature, and various advantages of the disclosed subject matter will be more apparent from the following detailed description and the accompanying drawings in which:</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic illustration of a current block and its surrounding spatial merge candidates in one example.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic illustration of a simplified block diagram of a communication system (<b>200</b>) in accordance with an embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic illustration of a simplified block diagram of a communication system (<b>300</b>) in accordance with an embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic illustration of a simplified block diagram of a decoder in accordance with an embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic illustration of a simplified block diagram of an encoder in accordance with an embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a block diagram of an encoder in accordance with another embodiment.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a block diagram of a decoder in accordance with another embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of spatial and temporal candidates in some examples.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows examples for UMVE according to an embodiment of the disclosure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows examples for UMVE according to an embodiment of the disclosure.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example of a block with an affine motion model.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows examples of affine transformation according to some embodiments of the disclosure.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a plot that illustrates control points CP<b>0</b> and CP<b>1</b> for a current block.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a flow chart outlining a process example according to some embodiments of the disclosure.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a schematic illustration of a computer system in accordance with an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a simplified block diagram of a communication system (<b>200</b>) according to an embodiment of the present disclosure. The communication system (<b>200</b>) includes a plurality of terminal devices that can communicate with each other, via, for example, a network (<b>250</b>). For example, the communication system (<b>200</b>) includes a first pair of terminal devices (<b>210</b>) and (<b>220</b>) interconnected via the network (<b>250</b>). In the <figref idref="DRAWINGS">FIG. <b>2</b></figref> example, the first pair of terminal devices (<b>210</b>) and (<b>220</b>) performs unidirectional transmission of data. For example, the terminal device (<b>210</b>) may code video data (e.g., a stream of video pictures that are captured by the terminal device (<b>210</b>)) for transmission to the other terminal device (<b>220</b>) via the network (<b>250</b>). The encoded video data can be transmitted in the form of one or more coded video bitstreams. The terminal device (<b>220</b>) may receive the coded video data from the network (<b>250</b>), decode the coded video data to recover the video pictures and display video pictures according to the recovered video data. Unidirectional data transmission may be common in media serving applications and the like.</p><p id="p-0035" num="0034">In another example, the communication system (<b>200</b>) includes a second pair of terminal devices (<b>230</b>) and (<b>240</b>) that performs bidirectional transmission of coded video data that may occur, for example, during videoconferencing. For bidirectional transmission of data, in an example, each terminal device of the terminal devices (<b>230</b>) and (<b>240</b>) may code video data (e.g., a stream of video pictures that are captured by the terminal device) for transmission to the other terminal device of the terminal devices (<b>230</b>) and (<b>240</b>) via the network (<b>250</b>). Each terminal device of the terminal devices (<b>230</b>) and (<b>240</b>) also may receive the coded video data transmitted by the other terminal device of the terminal devices (<b>230</b>) and (<b>240</b>), and may decode the coded video data to recover the video pictures and may display video pictures at an accessible display device according to the recovered video data.</p><p id="p-0036" num="0035">In the <figref idref="DRAWINGS">FIG. <b>2</b></figref> example, the terminal devices (<b>210</b>), (<b>220</b>), (<b>230</b>) and (<b>240</b>) may be illustrated as servers, personal computers and smart phones but the principles of the present disclosure may be not so limited. Embodiments of the present disclosure find application with laptop computers, tablet computers, media players and/or dedicated video conferencing equipment. The network (<b>250</b>) represents any number of networks that convey coded video data among the terminal devices (<b>210</b>), (<b>220</b>), (<b>230</b>) and (<b>240</b>), including for example wireline (wired) and/or wireless communication networks. The communication network (<b>250</b>) may exchange data in circuit-switched and/or packet-switched channels. Representative networks include telecommunications networks, local area networks, wide area networks and/or the Internet. For the purposes of the present discussion, the architecture and topology of the network (<b>250</b>) may be immaterial to the operation of the present disclosure unless explained herein below.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates, as an example for an application for the disclosed subject matter, the placement of a video encoder and a video decoder in a streaming environment. The disclosed subject matter can be equally applicable to other video enabled applications, including, for example, video conferencing, digital TV, storing of compressed video on digital media including CD, DVD, memory stick and the like, and so on.</p><p id="p-0038" num="0037">A streaming system may include a capture subsystem (<b>313</b>), that can include a video source (<b>301</b>), for example a digital camera, creating for example a stream of video pictures (<b>302</b>) that are uncompressed. In an example, the stream of video pictures (<b>302</b>) includes samples that are taken by the digital camera. The stream of video pictures (<b>302</b>), depicted as a bold line to emphasize a high data volume when compared to encoded video data (<b>304</b>) (or coded video bitstreams), can be processed by an electronic device (<b>320</b>) that includes a video encoder (<b>303</b>) coupled to the video source (<b>301</b>). The video encoder (<b>303</b>) can include hardware, software, or a combination thereof to enable or implement aspects of the disclosed subject matter as described in more detail below. The encoded video data (<b>304</b>) (or encoded video bitstream (<b>304</b>)), depicted as a thin line to emphasize the lower data volume when compared to the stream of video pictures (<b>302</b>), can be stored on a streaming server (<b>305</b>) for future use. One or more streaming client subsystems, such as client subsystems (<b>306</b>) and (<b>308</b>) in <figref idref="DRAWINGS">FIG. <b>3</b></figref> can access the streaming server (<b>305</b>) to retrieve copies (<b>307</b>) and (<b>309</b>) of the encoded video data (<b>304</b>). A client subsystem (<b>306</b>) can include a video decoder (<b>310</b>), for example, in an electronic device (<b>330</b>). The video decoder (<b>310</b>) decodes the incoming copy (<b>307</b>) of the encoded video data and creates an outgoing stream of video pictures (<b>311</b>) that can be rendered on a display (<b>312</b>) (e.g., display screen) or other rendering device (not depicted). In some streaming systems, the encoded video data (<b>304</b>), (<b>307</b>), and (<b>309</b>) (e.g., video bitstreams) can be encoded according to certain video coding/compression standards. Examples of those standards include ITU-T Recommendation H.265. In an example, a video coding standard under development is informally known as Versatile Video Coding (VVC). The disclosed subject matter may be used in the context of VVC.</p><p id="p-0039" num="0038">It is noted that the electronic devices (<b>320</b>) and (<b>330</b>) can include other components (not shown). For example, the electronic device (<b>320</b>) can include a video decoder (not shown) and the electronic device (<b>330</b>) can include a video encoder (not shown) as well.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a block diagram of a video decoder (<b>410</b>) according to an embodiment of the present disclosure. The video decoder (<b>410</b>) can be included in an electronic device (<b>430</b>). The electronic device (<b>430</b>) can include a receiver (<b>431</b>) (e.g., receiving circuitry). The video decoder (<b>410</b>) can be used in the place of the video decoder (<b>310</b>) in the <figref idref="DRAWINGS">FIG. <b>3</b></figref> example.</p><p id="p-0041" num="0040">The receiver (<b>431</b>) may receive one or more coded video sequences to be decoded by the video decoder (<b>410</b>); in the same or another embodiment, one coded video sequence at a time, where the decoding of each coded video sequence is independent from other coded video sequences. The coded video sequence may be received from a channel (<b>401</b>), which may be a hardware/software link to a storage device which stores the encoded video data. The receiver (<b>431</b>) may receive the encoded video data with other data, for example, coded audio data and/or ancillary data streams, that may be forwarded to their respective using entities (not depicted). The receiver (<b>431</b>) may separate the coded video sequence from the other data. To combat network jitter, a buffer memory (<b>415</b>) may be coupled in between the receiver (<b>431</b>) and an entropy decoder/parser (<b>420</b>) (&#x201c;parser (<b>420</b>)&#x201d; henceforth). In certain applications, the buffer memory (<b>415</b>) is part of the video decoder (<b>410</b>). In others, it can be outside of the video decoder (<b>410</b>) (not depicted). In still others, there can be a buffer memory (not depicted) outside of the video decoder (<b>410</b>), for example to combat network jitter, and in addition another buffer memory (<b>415</b>) inside the video decoder (<b>410</b>), for example to handle playout timing. When the receiver (<b>431</b>) is receiving data from a store/forward device of sufficient bandwidth and controllability, or from an isosynchronous network, the buffer memory (<b>415</b>) may not be needed, or can be small. For use on best effort packet networks such as the Internet, the buffer memory (<b>415</b>) may be required, can be comparatively large and can be advantageously of adaptive size, and may at least partially be implemented in an operating system or similar elements (not depicted) outside of the video decoder (<b>410</b>).</p><p id="p-0042" num="0041">The video decoder (<b>410</b>) may include the parser (<b>420</b>) to reconstruct symbols (<b>421</b>) from the coded video sequence. Categories of those symbols include information used to manage operation of the video decoder (<b>410</b>), and potentially information to control a rendering device such as a render device (<b>412</b>) (e.g., a display screen) that is not an integral part of the electronic device (<b>430</b>) but can be coupled to the electronic device (<b>430</b>), as was shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The control information for the rendering device(s) may be in the form of Supplemental Enhancement Information (SEI messages) or Video Usability Information (VUI) parameter set fragments (not depicted). The parser (<b>420</b>) may parse/entropy-decode the coded video sequence that is received. The coding of the coded video sequence can be in accordance with a video coding technology or standard, and can follow various principles, including variable length coding, Huffman coding, arithmetic coding with or without context sensitivity, and so forth. The parser (<b>420</b>) may extract from the coded video sequence, a set of subgroup parameters for at least one of the subgroups of pixels in the video decoder, based upon at least one parameter corresponding to the group. Subgroups can include Groups of Pictures (GOPs), pictures, tiles, slices, macroblocks, Coding Units (CUs), blocks, Transform Units (TUs), Prediction Units (PUs) and so forth. The parser (<b>420</b>) may also extract from the coded video sequence information such as transform coefficients, quantizer parameter values, motion vectors, and so forth.</p><p id="p-0043" num="0042">The parser (<b>420</b>) may perform an entropy decoding/parsing operation on the video sequence received from the buffer memory (<b>415</b>), so as to create symbols (<b>421</b>).</p><p id="p-0044" num="0043">Reconstruction of the symbols (<b>421</b>) can involve multiple different units depending on the type of the coded video picture or parts thereof (such as: inter and intra picture, inter and intra block), and other factors. Which units are involved, and how, can be controlled by the subgroup control information that was parsed from the coded video sequence by the parser (<b>420</b>). The flow of such subgroup control information between the parser (<b>420</b>) and the multiple units below is not depicted for clarity.</p><p id="p-0045" num="0044">Beyond the functional blocks already mentioned, the video decoder (<b>410</b>) can be conceptually subdivided into a number of functional units as described below. In a practical implementation operating under commercial constraints, many of these units interact closely with each other and can, at least partly, be integrated into each other. However, for the purpose of describing the disclosed subject matter, the conceptual subdivision into the functional units below is appropriate.</p><p id="p-0046" num="0045">A first unit is the scaler/inverse transform unit (<b>451</b>). The scaler/inverse transform unit (<b>451</b>) receives a quantized transform coefficient as well as control information, including which transform to use, block size, quantization factor, quantization scaling matrices, etc. as symbol(s) (<b>421</b>) from the parser (<b>420</b>). The scaler/inverse transform unit (<b>451</b>) can output blocks comprising sample values, that can be input into aggregator (<b>455</b>).</p><p id="p-0047" num="0046">In some cases, the output samples of the scaler/inverse transform (<b>451</b>) can pertain to an intra coded block; that is: a block that is not using predictive information from previously reconstructed pictures, but can use predictive information from previously reconstructed parts of the current picture. Such predictive information can be provided by an intra picture prediction unit (<b>452</b>). In some cases, the intra picture prediction unit (<b>452</b>) generates a block of the same size and shape of the block under reconstruction, using surrounding already reconstructed information fetched from the current picture buffer (<b>458</b>). The current picture buffer (<b>458</b>) buffers, for example, partly reconstructed current picture and/or fully reconstructed current picture. The aggregator (<b>455</b>), in some cases, adds, on a per sample basis, the prediction information the intra prediction unit (<b>452</b>) has generated to the output sample information as provided by the scaler/inverse transform unit (<b>451</b>).</p><p id="p-0048" num="0047">In other cases, the output samples of the scaler/inverse transform unit (<b>451</b>) can pertain to an inter coded, and potentially motion compensated block. In such a case, a motion compensation prediction unit (<b>453</b>) can access reference picture memory (<b>457</b>) to fetch samples used for prediction. After motion compensating the fetched samples in accordance with the symbols (<b>421</b>) pertaining to the block, these samples can be added by the aggregator (<b>455</b>) to the output of the scaler/inverse transform unit (<b>451</b>) (in this case called the residual samples or residual signal) so as to generate output sample information. The addresses within the reference picture memory (<b>457</b>) from where the motion compensation prediction unit (<b>453</b>) fetches prediction samples can be controlled by motion vectors, available to the motion compensation prediction unit (<b>453</b>) in the form of symbols (<b>421</b>) that can have, for example X, Y, and reference picture components. Motion compensation also can include interpolation of sample values as fetched from the reference picture memory (<b>457</b>) when sub-sample exact motion vectors are in use, motion vector prediction mechanisms, and so forth.</p><p id="p-0049" num="0048">The output samples of the aggregator (<b>455</b>) can be subject to various loop filtering techniques in the loop filter unit (<b>456</b>). Video compression technologies can include in-loop filter technologies that are controlled by parameters included in the coded video sequence (also referred to as coded video bitstream) and made available to the loop filter unit (<b>456</b>) as symbols (<b>421</b>) from the parser (<b>420</b>), but can also be responsive to meta-information obtained during the decoding of previous (in decoding order) parts of the coded picture or coded video sequence, as well as responsive to previously reconstructed and loop-filtered sample values.</p><p id="p-0050" num="0049">The output of the loop filter unit (<b>456</b>) can be a sample stream that can be output to the render device (<b>412</b>) as well as stored in the reference picture memory (<b>457</b>) for use in future inter-picture prediction.</p><p id="p-0051" num="0050">Certain coded pictures, once fully reconstructed, can be used as reference pictures for future prediction. For example, once a coded picture corresponding to a current picture is fully reconstructed and the coded picture has been identified as a reference picture (by, for example, the parser (<b>420</b>)), the current picture buffer (<b>458</b>) can become a part of the reference picture memory (<b>457</b>), and a fresh current picture buffer can be reallocated before commencing the reconstruction of the following coded picture.</p><p id="p-0052" num="0051">The video decoder (<b>410</b>) may perform decoding operations according to a predetermined video compression technology in a standard, such as ITU-T Rec. H.265. The coded video sequence may conform to a syntax specified by the video compression technology or standard being used, in the sense that the coded video sequence adheres to both the syntax of the video compression technology or standard and the profiles as documented in the video compression technology or standard. Specifically, a profile can select certain tools as the only tools available for use under that profile from all the tools available in the video compression technology or standard. Also necessary for compliance can be that the complexity of the coded video sequence is within bounds as defined by the level of the video compression technology or standard. In some cases, levels restrict the maximum picture size, maximum frame rate, maximum reconstruction sample rate (measured in, for example megasamples per second), maximum reference picture size, and so on. Limits set by levels can, in some cases, be further restricted through Hypothetical Reference Decoder (HRD) specifications and metadata for HRD buffer management signaled in the coded video sequence.</p><p id="p-0053" num="0052">In an embodiment, the receiver (<b>431</b>) may receive additional (redundant) data with the encoded video. The additional data may be included as part of the coded video sequence(s). The additional data may be used by the video decoder (<b>410</b>) to properly decode the data and/or to more accurately reconstruct the original video data. Additional data can be in the form of, for example, temporal, spatial, or signal noise ratio (SNR) enhancement layers, redundant slices, redundant pictures, forward error correction codes, and so on.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a block diagram of a video encoder (<b>503</b>) according to an embodiment of the present disclosure. The video encoder (<b>503</b>) is included in an electronic device (<b>520</b>). The electronic device (<b>520</b>) includes a transmitter (<b>540</b>) (e.g., transmitting circuitry). The video encoder (<b>503</b>) can be used in the place of the video encoder (<b>303</b>) in the <figref idref="DRAWINGS">FIG. <b>3</b></figref> example.</p><p id="p-0055" num="0054">The video encoder (<b>503</b>) may receive video samples from a video source (<b>501</b>) (that is not part of the electronic device (<b>520</b>) in the <figref idref="DRAWINGS">FIG. <b>5</b></figref> example) that may capture video image(s) to be coded by the video encoder (<b>503</b>). In another example, the video source (<b>501</b>) is a part of the electronic device (<b>520</b>).</p><p id="p-0056" num="0055">The video source (<b>501</b>) may provide the source video sequence to be coded by the video encoder (<b>503</b>) in the form of a digital video sample stream that can be of any suitable bit depth (for example: 8 bit, 10 bit, 12 bit, . . . ), any colorspace (for example, BT.601 Y CrCB, RGB, . . . ), and any suitable sampling structure (for example Y CrCb 4:2:0, Y CrCb 4:4:4). In a media serving system, the video source (<b>501</b>) may be a storage device storing previously prepared video. In a videoconferencing system, the video source (<b>501</b>) may be a camera that captures local image information as a video sequence. Video data may be provided as a plurality of individual pictures that impart motion when viewed in sequence. The pictures themselves may be organized as a spatial array of pixels, wherein each pixel can comprise one or more samples depending on the sampling structure, color space, etc. in use. A person skilled in the art can readily understand the relationship between pixels and samples. The description below focuses on samples.</p><p id="p-0057" num="0056">According to an embodiment, the video encoder (<b>503</b>) may code and compress the pictures of the source video sequence into a coded video sequence (<b>543</b>) in real time or under any other time constraints as required by the application. Enforcing appropriate coding speed is one function of a controller (<b>550</b>). In some embodiments, the controller (<b>550</b>) controls other functional units as described below and is functionally coupled to the other functional units. The coupling is not depicted for clarity. Parameters set by the controller (<b>550</b>) can include rate control related parameters (picture skip, quantizer, lambda value of rate-distortion optimization techniques, . . . ), picture size, group of pictures (GOP) layout, maximum motion vector search range, and so forth. The controller (<b>550</b>) can be configured to have other suitable functions that pertain to the video encoder (<b>503</b>) optimized for a certain system design.</p><p id="p-0058" num="0057">In some embodiments, the video encoder (<b>503</b>) is configured to operate in a coding loop. As an oversimplified description, in an example, the coding loop can include a source coder (<b>530</b>) (e.g., responsible for creating symbols, such as a symbol stream, based on an input picture to be coded, and a reference picture(s)), and a (local) decoder (<b>533</b>) embedded in the video encoder (<b>503</b>). The decoder (<b>533</b>) reconstructs the symbols to create the sample data in a similar manner as a (remote) decoder also would create (as any compression between symbols and coded video bitstream is lossless in the video compression technologies considered in the disclosed subject matter). The reconstructed sample stream (sample data) is input to the reference picture memory (<b>534</b>). As the decoding of a symbol stream leads to bit-exact results independent of decoder location (local or remote), the content in the reference picture memory (<b>534</b>) is also bit exact between the local encoder and remote encoder. In other words, the prediction part of an encoder &#x201c;sees&#x201d; as reference picture samples exactly the same sample values as a decoder would &#x201c;see&#x201d; when using prediction during decoding. This fundamental principle of reference picture synchronicity (and resulting drift, if synchronicity cannot be maintained, for example because of channel errors) is used in some related arts as well.</p><p id="p-0059" num="0058">The operation of the &#x201c;local&#x201d; decoder (<b>533</b>) can be the same as of a &#x201c;remote&#x201d; decoder, such as the video decoder (<b>410</b>), which has already been described in detail above in conjunction with <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Briefly referring also to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, however, as symbols are available and encoding/decoding of symbols to a coded video sequence by an entropy coder (<b>545</b>) and the parser (<b>420</b>) can be lossless, the entropy decoding parts of the video decoder (<b>410</b>), including the buffer memory (<b>415</b>), and parser (<b>420</b>) may not be fully implemented in the local decoder (<b>533</b>).</p><p id="p-0060" num="0059">An observation that can be made at this point is that any decoder technology except the parsing/entropy decoding that is present in a decoder also necessarily needs to be present, in substantially identical functional form, in a corresponding encoder. For this reason, the disclosed subject matter focuses on decoder operation. The description of encoder technologies can be abbreviated as they are the inverse of the comprehensively described decoder technologies. Only in certain areas a more detail description is required and provided below.</p><p id="p-0061" num="0060">During operation, in some examples, the source coder (<b>530</b>) may perform motion compensated predictive coding, which codes an input picture predictively with reference to one or more previously-coded picture from the video sequence that were designated as &#x201c;reference pictures&#x201d;. In this manner, the coding engine (<b>532</b>) codes differences between pixel blocks of an input picture and pixel blocks of reference picture(s) that may be selected as prediction reference(s) to the input picture.</p><p id="p-0062" num="0061">The local video decoder (<b>533</b>) may decode coded video data of pictures that may be designated as reference pictures, based on symbols created by the source coder (<b>530</b>). Operations of the coding engine (<b>532</b>) may advantageously be lossy processes. When the coded video data may be decoded at a video decoder (not shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>), the reconstructed video sequence typically may be a replica of the source video sequence with some errors. The local video decoder (<b>533</b>) replicates decoding processes that may be performed by the video decoder on reference pictures and may cause reconstructed reference pictures to be stored in the reference picture cache (<b>534</b>). In this manner, the video encoder (<b>503</b>) may store copies of reconstructed reference pictures locally that have common content as the reconstructed reference pictures that will be obtained by a far-end video decoder (absent transmission errors).</p><p id="p-0063" num="0062">The predictor (<b>535</b>) may perform prediction searches for the coding engine (<b>532</b>). That is, for a new picture to be coded, the predictor (<b>535</b>) may search the reference picture memory (<b>534</b>) for sample data (as candidate reference pixel blocks) or certain metadata such as reference picture motion vectors, block shapes, and so on, that may serve as an appropriate prediction reference for the new pictures. The predictor (<b>535</b>) may operate on a sample block-by-pixel block basis to find appropriate prediction references. In some cases, as determined by search results obtained by the predictor (<b>535</b>), an input picture may have prediction references drawn from multiple reference pictures stored in the reference picture memory (<b>534</b>).</p><p id="p-0064" num="0063">The controller (<b>550</b>) may manage coding operations of the source coder (<b>530</b>), including, for example, setting of parameters and subgroup parameters used for encoding the video data.</p><p id="p-0065" num="0064">Output of all aforementioned functional units may be subjected to entropy coding in the entropy coder (<b>545</b>). The entropy coder (<b>545</b>) translates the symbols as generated by the various functional units into a coded video sequence, by lossless compressing the symbols according to technologies such as Huffman coding, variable length coding, arithmetic coding, and so forth.</p><p id="p-0066" num="0065">The transmitter (<b>540</b>) may buffer the coded video sequence(s) as created by the entropy coder (<b>545</b>) to prepare for transmission via a communication channel (<b>560</b>), which may be a hardware/software link to a storage device which would store the encoded video data. The transmitter (<b>540</b>) may merge coded video data from the video coder (<b>503</b>) with other data to be transmitted, for example, coded audio data and/or ancillary data streams (sources not shown).</p><p id="p-0067" num="0066">The controller (<b>550</b>) may manage operation of the video encoder (<b>503</b>). During coding, the controller (<b>550</b>) may assign to each coded picture a certain coded picture type, which may affect the coding techniques that may be applied to the respective picture. For example, pictures often may be assigned as one of the following picture types:</p><p id="p-0068" num="0067">An Intra Picture (I picture) may be one that may be coded and decoded without using any other picture in the sequence as a source of prediction. Some video codecs allow for different types of intra pictures, including, for example Independent Decoder Refresh (&#x201c;IDR&#x201d;) Pictures. A person skilled in the art is aware of those variants of I pictures and their respective applications and features.</p><p id="p-0069" num="0068">A predictive picture (P picture) may be one that may be coded and decoded using intra prediction or inter prediction using at most one motion vector and reference index to predict the sample values of each block.</p><p id="p-0070" num="0069">A bi-directionally predictive picture (B Picture) may be one that may be coded and decoded using intra prediction or inter prediction using at most two motion vectors and reference indices to predict the sample values of each block. Similarly, multiple-predictive pictures can use more than two reference pictures and associated metadata for the reconstruction of a single block.</p><p id="p-0071" num="0070">Source pictures commonly may be subdivided spatially into a plurality of sample blocks (for example, blocks of 4&#xd7;4, 8&#xd7;8, 4&#xd7;8, or 16&#xd7;16 samples each) and coded on a block-by-block basis. Blocks may be coded predictively with reference to other (already coded) blocks as determined by the coding assignment applied to the blocks' respective pictures. For example, blocks of I pictures may be coded non-predictively or they may be coded predictively with reference to already coded blocks of the same picture (spatial prediction or intra prediction). Pixel blocks of P pictures may be coded predictively, via spatial prediction or via temporal prediction with reference to one previously coded reference picture. Blocks of B pictures may be coded predictively, via spatial prediction or via temporal prediction with reference to one or two previously coded reference pictures.</p><p id="p-0072" num="0071">The video encoder (<b>503</b>) may perform coding operations according to a predetermined video coding technology or standard, such as ITU-T Rec. H.265. In its operation, the video encoder (<b>503</b>) may perform various compression operations, including predictive coding operations that exploit temporal and spatial redundancies in the input video sequence. The coded video data, therefore, may conform to a syntax specified by the video coding technology or standard being used.</p><p id="p-0073" num="0072">In an embodiment, the transmitter (<b>540</b>) may transmit additional data with the encoded video. The source coder (<b>530</b>) may include such data as part of the coded video sequence. Additional data may comprise temporal/spatial/SNR enhancement layers, other forms of redundant data such as redundant pictures and slices, SEI messages, VUI parameter set fragments, and so on.</p><p id="p-0074" num="0073">A video may be captured as a plurality of source pictures (video pictures) in a temporal sequence. Intra-picture prediction (often abbreviated to intra prediction) makes use of spatial correlation in a given picture, and inter-picture prediction makes uses of the (temporal or other) correlation between the pictures. In an example, a specific picture under encoding/decoding, which is referred to as a current picture, is partitioned into blocks. When a block in the current picture is similar to a reference block in a previously coded and still buffered reference picture in the video, the block in the current picture can be coded by a vector that is referred to as a motion vector. The motion vector points to the reference block in the reference picture, and can have a third dimension identifying the reference picture, in case multiple reference pictures are in use.</p><p id="p-0075" num="0074">In some embodiments, a bi-prediction technique can be used in the inter-picture prediction. According to the bi-prediction technique, two reference pictures, such as a first reference picture and a second reference picture that are both prior in decoding order to the current picture in the video (but may be in the past and future, respectively, in display order) are used. A block in the current picture can be coded by a first motion vector that points to a first reference block in the first reference picture, and a second motion vector that points to a second reference block in the second reference picture. The block can be predicted by a combination of the first reference block and the second reference block.</p><p id="p-0076" num="0075">Further, a merge mode technique can be used in the inter-picture prediction to improve coding efficiency.</p><p id="p-0077" num="0076">According to some embodiments of the disclosure, predictions, such as inter-picture predictions and intra-picture predictions are performed in the unit of blocks. For example, according to the HEVC standard, a picture in a sequence of video pictures is partitioned into coding tree units (CTU) for compression, the CTUs in a picture have the same size, such as 64&#xd7;64 pixels, 32&#xd7;32 pixels, or 16&#xd7;16 pixels. In general, a CTU includes three coding tree blocks (CTBs), which are one luma CTB and two chroma CTBs. Each CTU can be recursively quadtree split into one or multiple coding units (CUs). For example, a CTU of 64&#xd7;64 pixels can be split into one CU of 64&#xd7;64 pixels, or 4 CUs of 32&#xd7;32 pixels, or 16 CUs of 16&#xd7;16 pixels. In an example, each CU is analyzed to determine a prediction type for the CU, such as an inter prediction type or an intra prediction type. The CU is split into one or more prediction units (PUs) depending on the temporal and/or spatial predictability. Generally, each PU includes a luma prediction block (PB), and two chroma PBs. In an embodiment, a prediction operation in coding (encoding/decoding) is performed in the unit of a prediction block. Using a luma prediction block as an example of a prediction block, the prediction block includes a matrix of values (e.g., luma values) for pixels, such as 8&#xd7;8 pixels, 16&#xd7;16 pixels, 8&#xd7;16 pixels, 16&#xd7;8 pixels, and the like.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a diagram of a video encoder (<b>603</b>) according to another embodiment of the disclosure. The video encoder (<b>603</b>) is configured to receive a processing block (e.g., a prediction block) of sample values within a current video picture in a sequence of video pictures, and encode the processing block into a coded picture that is part of a coded video sequence. In an example, the video encoder (<b>603</b>) is used in the place of the video encoder (<b>303</b>) in the <figref idref="DRAWINGS">FIG. <b>3</b></figref> example.</p><p id="p-0079" num="0078">In an HEVC example, the video encoder (<b>603</b>) receives a matrix of sample values for a processing block, such as a prediction block of 8&#xd7;8 samples, and the like. The video encoder (<b>603</b>) determines whether the processing block is best coded using intra mode, inter mode, or bi-prediction mode using, for example, rate-distortion optimization. When the processing block is to be coded in intra mode, the video encoder (<b>603</b>) may use an intra prediction technique to encode the processing block into the coded picture; and when the processing block is to be coded in inter mode or bi-prediction mode, the video encoder (<b>603</b>) may use an inter prediction or bi-prediction technique, respectively, to encode the processing block into the coded picture. In certain video coding technologies, merge mode can be an inter picture prediction submode where the motion vector is derived from one or more motion vector predictors without the benefit of a coded motion vector component outside the predictors. In certain other video coding technologies, a motion vector component applicable to the subject block may be present. In an example, the video encoder (<b>603</b>) includes other components, such as a mode decision module (not shown) to determine the mode of the processing blocks.</p><p id="p-0080" num="0079">In the <figref idref="DRAWINGS">FIG. <b>6</b></figref> example, the video encoder (<b>603</b>) includes the inter encoder (<b>630</b>), an intra encoder (<b>622</b>), a residue calculator (<b>623</b>), a switch (<b>626</b>), a residue encoder (<b>624</b>), a general controller (<b>621</b>), and an entropy encoder (<b>625</b>) coupled together as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0081" num="0080">The inter encoder (<b>630</b>) is configured to receive the samples of the current block (e.g., a processing block), compare the block to one or more reference blocks in reference pictures (e.g., blocks in previous pictures and later pictures), generate inter prediction information (e.g., description of redundant information according to inter encoding technique, motion vectors, merge mode information), and calculate inter prediction results (e.g., predicted block) based on the inter prediction information using any suitable technique. In some examples, the reference pictures are decoded reference pictures that are decoded based on the encoded video information.</p><p id="p-0082" num="0081">The intra encoder (<b>622</b>) is configured to receive the samples of the current block (e.g., a processing block), in some cases compare the block to blocks already coded in the same picture, generate quantized coefficients after transform, and in some cases also intra prediction information (e.g., an intra prediction direction information according to one or more intra encoding techniques). In an example, the intra encoder (<b>622</b>) also calculates intra prediction results (e.g., predicted block) based on the intra prediction information and reference blocks in the same picture.</p><p id="p-0083" num="0082">The general controller (<b>621</b>) is configured to determine general control data and control other components of the video encoder (<b>603</b>) based on the general control data. In an example, the general controller (<b>621</b>) determines the mode of the block, and provides a control signal to the switch (<b>626</b>) based on the mode. For example, when the mode is the intra mode, the general controller (<b>621</b>) controls the switch (<b>626</b>) to select the intra mode result for use by the residue calculator (<b>623</b>), and controls the entropy encoder (<b>625</b>) to select the intra prediction information and include the intra prediction information in the bitstream; and when the mode is the inter mode, the general controller (<b>621</b>) controls the switch (<b>626</b>) to select the inter prediction result for use by the residue calculator (<b>623</b>), and controls the entropy encoder (<b>625</b>) to select the inter prediction information and include the inter prediction information in the bitstream.</p><p id="p-0084" num="0083">The residue calculator (<b>623</b>) is configured to calculate a difference (residue data) between the received block and prediction results selected from the intra encoder (<b>622</b>) or the inter encoder (<b>630</b>). The residue encoder (<b>624</b>) is configured to operate based on the residue data to encode the residue data to generate the transform coefficients. In an example, the residue encoder (<b>624</b>) is configured to convert the residue data from a spatial domain to a frequency domain, and generate the transform coefficients. The transform coefficients are then subject to quantization processing to obtain quantized transform coefficients. In various embodiments, the video encoder (<b>603</b>) also includes a residue decoder (<b>628</b>). The residue decoder (<b>628</b>) is configured to perform inverse-transform, and generate the decoded residue data. The decoded residue data can be suitably used by the intra encoder (<b>622</b>) and the inter encoder (<b>630</b>). For example, the inter encoder (<b>630</b>) can generate decoded blocks based on the decoded residue data and inter prediction information, and the intra encoder (<b>622</b>) can generate decoded blocks based on the decoded residue data and the intra prediction information. The decoded blocks are suitably processed to generate decoded pictures and the decoded pictures can be buffered in a memory circuit (not shown) and used as reference pictures in some examples.</p><p id="p-0085" num="0084">The entropy encoder (<b>625</b>) is configured to format the bitstream to include the encoded block. The entropy encoder (<b>625</b>) is configured to include various information according to a suitable standard, such as the HEVC standard. In an example, the entropy encoder (<b>625</b>) is configured to include the general control data, the selected prediction information (e.g., intra prediction information or inter prediction information), the residue information, and other suitable information in the bitstream. Note that, according to the disclosed subject matter, when coding a block in the merge submode of either inter mode or bi-prediction mode, there is no residue information.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a diagram of a video decoder (<b>710</b>) according to another embodiment of the disclosure. The video decoder (<b>710</b>) is configured to receive coded pictures that are part of a coded video sequence, and decode the coded pictures to generate reconstructed pictures. In an example, the video decoder (<b>710</b>) is used in the place of the video decoder (<b>310</b>) in the <figref idref="DRAWINGS">FIG. <b>3</b></figref> example.</p><p id="p-0087" num="0086">In the <figref idref="DRAWINGS">FIG. <b>7</b></figref> example, the video decoder (<b>710</b>) includes an entropy decoder (<b>771</b>), an inter decoder (<b>780</b>), a residue decoder (<b>773</b>), a reconstruction module (<b>774</b>), and an intra decoder (<b>772</b>) coupled together as shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0088" num="0087">The entropy decoder (<b>771</b>) can be configured to reconstruct, from the coded picture, certain symbols that represent the syntax elements of which the coded picture is made up. Such symbols can include, for example, the mode in which a block is coded (such as, for example, intra mode, inter mode, bi-predicted mode, the latter two in merge submode or another submode), prediction information (such as, for example, intra prediction information or inter prediction information) that can identify certain sample or metadata that is used for prediction by the intra decoder (<b>772</b>) or the inter decoder (<b>780</b>), respectively, residual information in the form of, for example, quantized transform coefficients, and the like. In an example, when the prediction mode is inter or bi-predicted mode, the inter prediction information is provided to the inter decoder (<b>780</b>); and when the prediction type is the intra prediction type, the intra prediction information is provided to the intra decoder (<b>772</b>). The residual information can be subject to inverse quantization and is provided to the residue decoder (<b>773</b>).</p><p id="p-0089" num="0088">The inter decoder (<b>780</b>) is configured to receive the inter prediction information, and generate inter prediction results based on the inter prediction information.</p><p id="p-0090" num="0089">The intra decoder (<b>772</b>) is configured to receive the intra prediction information, and generate prediction results based on the intra prediction information.</p><p id="p-0091" num="0090">The residue decoder (<b>773</b>) is configured to perform inverse quantization to extract de-quantized transform coefficients, and process the de-quantized transform coefficients to convert the residual from the frequency domain to the spatial domain. The residue decoder (<b>773</b>) may also require certain control information (to include the Quantizer Parameter (QP)), and that information may be provided by the entropy decoder (<b>771</b>) (data path not depicted as this may be low volume control information only).</p><p id="p-0092" num="0091">The reconstruction module (<b>774</b>) is configured to combine, in the spatial domain, the residual as output by the residue decoder (<b>773</b>) and the prediction results (as output by the inter or intra prediction modules as the case may be) to form a reconstructed block, that may be part of the reconstructed picture, which in turn may be part of the reconstructed video. It is noted that other suitable operations, such as a deblocking operation and the like, can be performed to improve the visual quality.</p><p id="p-0093" num="0092">It is noted that the video encoders (<b>303</b>), (<b>503</b>), and (<b>603</b>), and the video decoders (<b>310</b>), (<b>410</b>), and (<b>710</b>) can be implemented using any suitable technique. In an embodiment, the video encoders (<b>303</b>), (<b>503</b>), and (<b>603</b>), and the video decoders (<b>310</b>), (<b>410</b>), and (<b>710</b>) can be implemented using one or more integrated circuits. In another embodiment, the video encoders (<b>303</b>), (<b>503</b>), and (<b>503</b>), and the video decoders (<b>310</b>), (<b>410</b>), and (<b>710</b>) can be implemented using one or more processors that execute software instructions.</p><p id="p-0094" num="0093">Aspects of the disclosure provide techniques to simplify affine motion compensation with prediction offsets.</p><p id="p-0095" num="0094">Generally, a motion vector for a block can be coded either in an explicit way, to signal the difference to a motion vector predictor (e.g., advanced motion vector prediction or AMVP mode); or in an implicit way, to be indicated completely from one previously coded or generated motion vector. The later one is referred to as merge mode, meaning the current block is merged into a previously coded block by using its motion information.</p><p id="p-0096" num="0095">Both merge mode and the AMVP mode construct candidate list during decoding.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of spatial and temporal candidates in some examples.</p><p id="p-0098" num="0097">For the merge mode in the inter prediction, merge candidates in a candidate list are primarily formed by checking motion information from either spatial or temporal neighboring blocks of the current block. In the <figref idref="DRAWINGS">FIG. <b>8</b></figref> example, candidate blocks A<b>1</b>, B<b>1</b>, B<b>0</b>, A<b>0</b> and B<b>2</b> are sequentially checked. When any of the candidate blocks are valid candidates, for example, are coded with motion vectors, then, the motion information of the valid candidate blocks can be added into the merge candidate list. Some pruning operation is performed to make sure duplicated candidates will not be put into the list again. The candidate blocks A<b>1</b>, B<b>1</b>, B<b>0</b>, A<b>0</b> and B<b>2</b> are adjacent to corners of the current block, and are referred to as corner candidates.</p><p id="p-0099" num="0098">After spatial candidates, temporal candidates are also checked into the merge candidate list. In some examples, the current block's co-located block in a specified reference picture is found. The motion information at C<b>0</b> position (bottom right corner of the current block) of the co-located block will be used as temporal merge candidate. If the block at this position is not coded in inter mode or not available, C<b>1</b> position (at the outer bottom right corner of the center of the co-located block) will be used instead. The present disclosure provides techniques to further improve merge mode.</p><p id="p-0100" num="0099">The advanced motion vector prediction (AMVP) mode in HEVC refers to using spatial and temporal neighboring blocks' motion information to predict the motion information of the current block, while the prediction residue is further coded. Examples of spatial and temporal neighboring candidates are shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> as well.</p><p id="p-0101" num="0100">In some embodiments, in AMVP mode, a two-candidate motion vector predictor list is formed. For example, the list includes a first candidate predictor and a second candidate predictor. The first candidate predictor is from the first available motion vector from the left edge, in the order of spatial A<b>0</b>, A<b>1</b> positions. The second candidate predictor is from the first available motion vector from the top edge, in the order of spatial B<b>0</b>, B<b>1</b> and B<b>2</b> positions. If no valid motion vector can be found from the checked locations for either the left edge or the top edge, no candidate will be filled in the list. If the two available candidates are the same, only one will be kept in the list. If the list is not full (with two different candidates), the temporal co-located motion vector (after scaling) from C<b>0</b> location will be used as another candidate. If motion information at C<b>0</b> location is not available, location C<b>1</b> will be used instead.</p><p id="p-0102" num="0101">In some examples, if there are still no enough motion vector predictor candidates, zero motion vector will be used to fill up the list.</p><p id="p-0103" num="0102">In some embodiments, prediction offsets can be signaled on top of existing merge candidates. For example, a technique that is referred to as ultimate motion vector expression (UMVE) uses a special merge mode in which an offset (both magnitude and direction) on top of the existing merge candidates is signaled. In this technique, a few syntax elements, such as a prediction direction IDX, a base candidate IDX, a distance IDX, a search direction IDX, and the like, are signaled to describe such an offset. For example, the prediction direction IDX is used to indicate which of the prediction directions (temporal prediction direction, e.g., L0 reference direction, L1 reference direction or L0 and L1 reference directions) is used for UMVE mode. The base candidate IDX is used to indicate which of the existing merge candidates is used as the start point (base candidate) to apply the offset. The distance IDX is used to indicate how large the offset is from the starting point (along x or y direction, but not both). The offset magnitude is chosen from a fix number of selections. The search direction IDX is used to indicate the direction (x or y, + or &#x2212;direction) to apply the offset.</p><p id="p-0104" num="0103">In an example, assuming the starting point MV is MV_S, the offset is MV_offset. Then the final MV predictor will be MV_final=MV_S+MV_offset.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows examples for UMVE according to an embodiment of the disclosure. In an example, the starting point MV is shown by (<b>911</b>) (for example according to the prediction direction IDX and base candidate IDX), the offset is shown by (<b>912</b>) (for example according to the distance IDX and the search direction IDX), and the final MV predictor is shown by (<b>913</b>) in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. In another example, the starting point MV is shown by (<b>921</b>) (for example according to the prediction direction IDX and base candidate IDX), the offset is shown by (<b>922</b>) (for example according to the distance IDX and the search direction IDX), and the final MV predictor is shown by <b>923</b> in <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows examples for UMVE according to an embodiment of the disclosure. For example, the starting point MV is shown by (<b>1011</b>) (for example according to the prediction direction IDX and base candidate IDX). In the <figref idref="DRAWINGS">FIG. <b>10</b></figref> example, 4 search directions, such as +Y, &#x2212;Y, +X and &#x2212;X, are used, and the four search directions can be indexed by 0, 1, 2, 3. The distance can be indexed by 0 (0 distance to the starting point MV), 1 (1s to the starting point MV), 2 (2s to the starting point MV), 3 (3s to the starting point), and the like. Thus, when the search direction IDX is 3, and the distance IDX is 2, the final MV predictor is shown as <b>1015</b>.</p><p id="p-0107" num="0106">In another example, the search direction and the distance can be combined for indexing. For example, the starting point MV is shown by (<b>1021</b>) (for example according to the prediction direction IDX and base candidate IDX). The search direction and the distance are combined to be indexed by 0-12 as shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0108" num="0107">According to an aspect of the disclosure, affine motion compensation, by describing a 6-parameter (or a simplified 4-parameter) affine model for a coding block, can efficiently predict the motion information for samples within the current block. More specifically, in an affine coded or described coding block, different part of the samples can have different motion vectors. The basic unit to have a motion vector in an affine coded or described block is referred to as a sub-block. The size of a sub-block can be as small as 1 sample only; and can be as large as the size of current block.</p><p id="p-0109" num="0108">When an affine mode is determined, for each sample in the current block, its motion vector (relative to the targeted reference picture) can be derived using such a model (e.g., 6 parameter affine motion model or 4 parameter affine motion model). In order to reduce implementation complexity, affine motion compensation is performed on a sub-block basis, instead of on a sample basis. That means, each sub-block will derive its motion vector and for samples in each sub-block, the motion vector is the same. A specific location of each sub-block is assumed, such as the top-left or the center point of the sub-block, to be the representative location. In one example, such a sub-block size contains 4&#xd7;4 samples.</p><p id="p-0110" num="0109">In general, an affine motion model has 6 parameters to describe the motion information of a block. After the affine transformation, a rectangular block will become a parallelogram. In an example, the 6 parameters of an affine coded block can be represented by 3 motion vectors at three different locations of the block.</p><p id="p-0111" num="0110"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example of a block (<b>1100</b>) with an affine motion model. The block (<b>1100</b>) uses motion vectors {right arrow over (v<sub>0</sub>)}, {right arrow over (v<sub>1</sub>)}, and {right arrow over (v<sub>2</sub>)} at three corner locations A, B and C to describe the motion information of the affine motion model used for the block (<b>1100</b>). These locations A, B and C are referred to as control points.</p><p id="p-0112" num="0111">In a simplified example, an affine motion model uses <b>4</b> parameters to describe the motion information of a block based on an assumption that after the affine transformation, the shape of the block does not change. Therefore, a rectangular block will remain a rectangular and same aspect ratio (e.g., height/width) after the transformation. The affine motion model of such a block can be represented by two motion vectors at two different locations, such as at corner locations A and B.</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. <b>12</b></figref> shows examples of affine transformation for a 6-parameter affine mode (using 6-parameter affine model) and a 4-parameter affine mode (using 4-parameter affine model).</p><p id="p-0114" num="0113">In an example, when assumptions are made such that the object only has zooming and translational motions, or the object only has rotation and translation models, then the affine motion model can be further simplified to a 3-parameter affine motion model with 2 parameters to indicate the translational part and 1 parameter to indicate either a scaling factor for zooming or an angular factor for rotation.</p><p id="p-0115" num="0114">According to an aspect of the disclosure, when affine motion compensation is used, two signaling techniques can be used. The two signaling techniques are referred to as a merge mode based signaling technique and a residue (AMVP) mode based signaling technique.</p><p id="p-0116" num="0115">For the merge mode based signaling technique, the affine information of the current block is predicted from previously affine coded blocks. In one method, the current block is assumed to be in the same affine object as the reference block, so that the MVs at the control points of the current block can be derived from the reference block's model. The MVs at the current block' other locations are just linearly modified in the same way as from one control point to another in the reference block. This method is referred to as model based affine prediction. In another method, neighboring blocks' motion vectors are used directly as the motion vectors at current block's control points. Then motion vectors at the rest of the block are generated using the information from the control points. This method is referred as control point based affine prediction. In either method, no residue components of the MVs at current block are to be signaled. In other words, the residue components of the MVs are assumed to be zero.</p><p id="p-0117" num="0116">For the residue (AMVP) mode based signaling technique, affine parameters, or the MVs at the control points of the current block, are to be predicted. Because there are more than one motion vectors to be predicted, the candidate list for motion vectors at all control points is organized in grouped way such that each candidate in the list includes a set of motion vector predictors for all control points. For example, candidate 1={predictor for control point A, predictor for control point B, predictor for control point C}; candidate 2={predictor for control point A, predictor for control point B, predictor for control point C}, etc. The predictor for the same control point in different candidates can be the same or different. The motion vector predictor flag (mvp_10_flag for List 0 or mvp_11_flag for List 1) will be used to indicate which candidate from the list is chosen. After prediction, the residue part of the parameter, or the differences of the actual MVs to the MV predictors at the control points, are to be signaled. The MV predictor at each control point can also come from model based affine prediction from one of its neighbors, and the method described from the above description for affine merge mode can be used.</p><p id="p-0118" num="0117">In some related methods, affine parameters for a block can be either purely derived from neighboring block's affine model or control points' MV predictor, or from explicitly signal the MV differences at the control points. However, in many cases the non-translational part of the affine parameters is very close to zero. Using unrestricted MV difference coding to signal the affine parameters has redundancy.</p><p id="p-0119" num="0118">Aspects of the disclosure provide new techniques to better represent the affine motion parameters therefore improve coding efficiency of affine motion compensation. More specifically, to predict affine model parameters in a more efficient way, the translational parameters of a block are represented using a motion vector prediction, in the same way or similar way as that is for a regular inter prediction coded block. For example, the translational parameters can be indicated from a merge candidate. For the non-translational part, a few typically used parameters such as rotation parameter and zooming parameter are pre-determined with a set of fixed offset values. These values are considered as some refinements or offset around the default value. The encoder can evaluate the best option from these values and signal the index of the choice to the decoder. The decoder then restores the affine model parameters using 1) the decoded translational motion vector and 2) the index of the chosen non-translational parameters.</p><p id="p-0120" num="0119">In the following description, 4-parameter affine model is used as an example, the methods described in the following description can be extended to other motion models, or affine models with different numbers of parameters as well, such as 6-parameter affine model, and the like. In some of the following description, the model used may not be always affine model, but possibly other types of motion model.</p><p id="p-0121" num="0120">In an example, a 4-parameter affine model is described, such as shown by Eq. 1</p><p id="p-0122" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <msup>          <mi>x</mi>          <mo>&#x2032;</mo>         </msup>         <mo>=</mo>         <mrow>          <mrow>           <mi>&#x3c1;</mi>           <mo>&#x2062;</mo>           <mi>cos</mi>           <mo>&#x2062;</mo>           <mrow>            <mi>&#x3b8;</mi>            <mo>&#xb7;</mo>            <mi>x</mi>           </mrow>          </mrow>          <mo>+</mo>          <mrow>           <mi>&#x3c1;</mi>           <mo>&#x2062;</mo>           <mi>sin</mi>           <mo>&#x2062;</mo>           <mrow>            <mi>&#x3b8;</mi>            <mo>&#xb7;</mo>            <mi>y</mi>           </mrow>          </mrow>          <mo>+</mo>          <mi>c</mi>         </mrow>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <msup>          <mi>y</mi>          <mo>&#x2032;</mo>         </msup>         <mo>=</mo>         <mrow>          <mrow>           <mrow>            <mo>-</mo>            <mi>&#x3c1;</mi>           </mrow>           <mo>&#x2062;</mo>           <mi>sin</mi>           <mo>&#x2062;</mo>           <mrow>            <mi>&#x3b8;</mi>            <mo>&#xb7;</mo>            <mi>x</mi>           </mrow>          </mrow>          <mo>+</mo>          <mrow>           <mi>&#x3c1;</mi>           <mo>&#x2062;</mo>           <mi>cos</mi>           <mo>&#x2062;</mo>           <mrow>            <mi>&#x3b8;</mi>            <mo>&#xb7;</mo>            <mi>y</mi>           </mrow>          </mrow>          <mo>+</mo>          <mi>f</mi>         </mrow>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mrow>      <mi>Eq</mi>      <mo>.</mo>      <mtext>   </mtext>      <mn>1</mn>     </mrow>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0123" num="0000">where &#x3c1; is the scaling factor for zooming, &#x3b8; is the angular factor for rotation, and (c, f) is the motion vector to describe the translational motion. (x, y) is a pixel location in the current picture, (x&#x2032;, y&#x2032;) is a corresponding pixel location in the reference picture.</p><p id="p-0124" num="0121">Let a=&#x3c1; cos &#x3b8;, and b=&#x3c1; sin &#x3b8;, Eq. 1 may become the following form as in Eq. 2</p><p id="p-0125" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <msup>          <mi>x</mi>          <mo>&#x2032;</mo>         </msup>         <mo>=</mo>         <mrow>          <mrow>           <mi>a</mi>           <mo>&#xb7;</mo>           <mi>x</mi>          </mrow>          <mo>+</mo>          <mrow>           <mi>b</mi>           <mo>&#xb7;</mo>           <mi>y</mi>          </mrow>          <mo>+</mo>          <mi>c</mi>         </mrow>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <msup>          <mi>y</mi>          <mo>&#x2032;</mo>         </msup>         <mo>=</mo>         <mrow>          <mrow>           <mrow>            <mo>-</mo>            <mi>b</mi>           </mrow>           <mo>&#xb7;</mo>           <mi>x</mi>          </mrow>          <mo>+</mo>          <mrow>           <mi>a</mi>           <mo>&#xb7;</mo>           <mi>y</mi>          </mrow>          <mo>+</mo>          <mi>f</mi>         </mrow>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mrow>      <mi>Eq</mi>      <mo>.</mo>      <mtext>   </mtext>      <mn>2</mn>     </mrow>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0126" num="0000">Thus, a 4-parameter affine model can be represented by a set of model-based parameters {&#x3c1;, &#x3b8;, c, f}, or {a, b, c, f}.</p><p id="p-0127" num="0122">From Eq. 2, the motion vector (MV<sub>x</sub>, MV<sub>y</sub>) at pixel position (x, y) may be described as in Eq. 3,</p><p id="p-0128" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <msub>          <mi>MV</mi>          <mi>x</mi>         </msub>         <mo>=</mo>         <mrow>          <mrow>           <msup>            <mi>x</mi>            <mo>&#x2032;</mo>           </msup>           <mo>-</mo>           <mi>x</mi>          </mrow>          <mo>=</mo>          <mrow>           <mrow>            <msup>             <mi>a</mi>             <mo>&#x2032;</mo>            </msup>            <mo>&#x2062;</mo>            <mi>x</mi>           </mrow>           <mo>+</mo>           <mi>by</mi>           <mo>+</mo>           <mi>c</mi>          </mrow>         </mrow>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <msub>          <mi>MV</mi>          <mi>y</mi>         </msub>         <mo>=</mo>         <mrow>          <mrow>           <msup>            <mi>y</mi>            <mo>&#x2032;</mo>           </msup>           <mo>-</mo>           <mi>y</mi>          </mrow>          <mo>=</mo>          <mrow>           <mrow>            <mo>-</mo>            <mi>bx</mi>           </mrow>           <mo>+</mo>           <mrow>            <msup>             <mi>a</mi>             <mo>&#x2032;</mo>            </msup>            <mo>&#x2062;</mo>            <mi>y</mi>           </mrow>           <mo>+</mo>           <mi>f</mi>          </mrow>         </mrow>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mrow>      <mi>Eq</mi>      <mo>.</mo>      <mtext>   </mtext>      <mn>3</mn>     </mrow>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0129" num="0000">Where a&#x2032; is equal to (a-1), MV<sub>x </sub>is the horizontal motion vector value, and MV<sub>y </sub>is the vertical motion vector value.</p><p id="p-0130" num="0123">In some examples, the 4-parameter affine model can also be represented by the motion vectors of two control points, CP<b>0</b> and CP<b>1</b>, of the block. Similarly, three control points may be required to represent a 6-parameter affine model.</p><p id="p-0131" num="0124"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a plot that illustrates control points CP<b>0</b> and CP<b>1</b> for a current block.</p><p id="p-0132" num="0125">Using two control points CP<b>0</b> and CP<b>1</b>, the motion vector at position (x, y) in the current block can be derived using Eq. 4:</p><p id="p-0133" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mo>{</mo>     <mtable>      <mtr>       <mtd>        <mrow>         <msub>          <mi>v</mi>          <mi>x</mi>         </msub>         <mo>=</mo>         <mrow>          <mrow>           <mfrac>            <mrow>             <mo>(</mo>             <mrow>              <msub>               <mi>v</mi>               <mrow>                <mn>1</mn>                <mo>&#x2062;</mo>                <mi>x</mi>               </mrow>              </msub>              <mo>-</mo>              <msub>               <mi>v</mi>               <mrow>                <mn>0</mn>                <mo>&#x2062;</mo>                <mi>x</mi>               </mrow>              </msub>             </mrow>             <mo>)</mo>            </mrow>            <mi>w</mi>           </mfrac>           <mo>&#x2062;</mo>           <mi>x</mi>          </mrow>          <mo>-</mo>          <mrow>           <mfrac>            <mrow>             <mo>(</mo>             <mrow>              <msub>               <mi>v</mi>               <mrow>                <mn>1</mn>                <mo>&#x2062;</mo>                <mi>y</mi>               </mrow>              </msub>              <mo>-</mo>              <msub>               <mi>v</mi>               <mrow>                <mn>0</mn>                <mo>&#x2062;</mo>                <mi>y</mi>               </mrow>              </msub>             </mrow>             <mo>)</mo>            </mrow>            <mi>w</mi>           </mfrac>           <mo>&#x2062;</mo>           <mi>y</mi>          </mrow>          <mo>+</mo>          <msub>           <mi>v</mi>           <mrow>            <mn>0</mn>            <mo>&#x2062;</mo>            <mi>x</mi>           </mrow>          </msub>         </mrow>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <msub>          <mi>v</mi>          <mi>y</mi>         </msub>         <mo>=</mo>         <mrow>          <mrow>           <mfrac>            <mrow>             <mo>(</mo>             <mrow>              <msub>               <mi>v</mi>               <mrow>                <mn>1</mn>                <mo>&#x2062;</mo>                <mi>y</mi>               </mrow>              </msub>              <mo>-</mo>              <msub>               <mi>v</mi>               <mrow>                <mn>0</mn>                <mo>&#x2062;</mo>                <mi>y</mi>               </mrow>              </msub>             </mrow>             <mo>)</mo>            </mrow>            <mi>w</mi>           </mfrac>           <mo>&#x2062;</mo>           <mi>x</mi>          </mrow>          <mo>+</mo>          <mrow>           <mfrac>            <mrow>             <mo>(</mo>             <mrow>              <msub>               <mi>v</mi>               <mrow>                <mn>1</mn>                <mo>&#x2062;</mo>                <mi>x</mi>               </mrow>              </msub>              <mo>-</mo>              <msub>               <mi>v</mi>               <mrow>                <mn>0</mn>                <mo>&#x2062;</mo>                <mi>x</mi>               </mrow>              </msub>             </mrow>             <mo>)</mo>            </mrow>            <mi>w</mi>           </mfrac>           <mo>&#x2062;</mo>           <mi>y</mi>          </mrow>          <mo>+</mo>          <msub>           <mi>v</mi>           <mrow>            <mn>0</mn>            <mo>&#x2062;</mo>            <mi>y</mi>           </mrow>          </msub>         </mrow>        </mrow>       </mtd>      </mtr>     </mtable>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mrow>      <mi>Eq</mi>      <mo>.</mo>      <mtext>   </mtext>      <mn>4</mn>     </mrow>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0134" num="0000">where (v<sub>0x</sub>, v<sub>0y</sub>) is motion vector of the top-left corner control point CP<b>0</b> as depicted in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, and (v<sub>1x</sub>, v<sub>1y</sub>) is motion vector of the top-right corner control point CP<b>1</b> as depicted in <figref idref="DRAWINGS">FIG. <b>13</b></figref>. In the example of control-point based model, the affine model of the block may be represented by {v<sub>0x</sub>, v<sub>0y</sub>, v<sub>1x</sub>, v<sub>1y</sub>,}.</p><p id="p-0135" num="0126">In some related examples, affine parameters for a block can be either purely derived from neighboring block's affine model or control points' MV predictor, or from explicitly signaling of the MV differences at the control points. However, in many cases the non-translational part of the affine parameters is very close to zero. Using unrestricted MV difference coding to signal the affine parameters has redundancy. New techniques to better represent the affine motion parameters are developed to improve coding efficiency.</p><p id="p-0136" num="0127">Aspects of the disclosure provide techniques for improving coding efficiency of affine merge and affine motion vector coding. The techniques may be used in advanced video codec to improve the coding performance of affine inter prediction. The motion vector here may refer to block mode (conventional motion vector where one whole block uses a set of motion information), such as the merge candidates in HEVC standard. The motion vector here may also refer to sub-block mode (for different parts of the block, different sets of motion information may apply), such as affine mode and advanced temporal MV prediction (ATMVP) in VVC.</p><p id="p-0137" num="0128">It is noted that the proposed methods may be used separately or combined in any order. In the following description, the term block may be interpreted as a prediction block, a coding block, or a coding unit, i.e. CU. It is proposed to predict current block's affine model based on control point motion vectors (CPMVs) at 2 or 3 corners. After the CPMVs are predicted using model-based affine merge prediction or constructed control-point based affine merge prediction, an available affine merge candidate may be selected as the base predictor.</p><p id="p-0138" num="0129">In some embodiments, a flag, such as an affine_merge_with_offset usage flag, is signaled to indicate whether the proposed method is used. When the affine_merge_with_offset usage flag is indicative of using the proposed method, the number of base predictor candidates (e.g., the number of affine merge candidates) to be selected from may be determined based on a pre-defined value or a signaled value. In an example, the number of base predictor candidates is a predefined default value that is known and then used by both encoder and decoder. In another example, the encoder side determines the number of base predictor candidates and signals the number of base predictor candidates in the coded video bitstream, such as, but not limited to, in sequence parameter set (SPS), picture parameter set (PPS), or slice header.</p><p id="p-0139" num="0130">In an example, when the number of base predictor candidate is 1, the base predictor index is not signaled in the coded video bitstream, and the first available affine merge candidate is used as the base predictor. When the number of base predictor candidates is greater than <b>1</b>, the base predictor index is signaled in the coded video bitstream to indicate which affine merge candidate to be used as the base predictor.</p><p id="p-0140" num="0131">After the base predictor is determined, CPMV values of the base predictor may be used as starting point, and distance offset values may be added on top of CPMV values to generate current block's CPMV values.</p><p id="p-0141" num="0132">The offset values may be determined by the offset parameters. In some examples, an offset parameter is provided in a form of offset direction index and offset distance index. For example, the offset direction index is signaled to indicate on which component(s) the offset may be applied to a CPMV. It may be on CPMV's horizontal and/or vertical direction. In an embodiment, there may be 4 offset directions for each control point as shown below in Table 1, where only x or y direction has MV difference, but not on both directions:</p><p id="p-0142" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Mapping of Offset Direction IDXs to Offset Directions</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="84pt" align="left"/><colspec colname="3" colwidth="21pt" align="center"/><colspec colname="4" colwidth="42pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><tbody valign="top"><row><entry/><entry>Offset Direction</entry><entry/><entry/><entry/><entry/></row><row><entry/><entry>IDX</entry><entry>00</entry><entry>01</entry><entry>10</entry><entry>11</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="84pt" align="left"/><colspec colname="3" colwidth="21pt" align="char" char="."/><colspec colname="4" colwidth="42pt" align="char" char="."/><colspec colname="5" colwidth="21pt" align="char" char="."/><colspec colname="6" colwidth="35pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>x-axis</entry><entry>+1</entry><entry>&#x2212;1</entry><entry>0</entry><entry>0</entry></row><row><entry/><entry>y-axis</entry><entry>0</entry><entry>0</entry><entry>+1</entry><entry>&#x2212;1</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0143" num="0133">In another embodiment, there's no limitation of only x or y has MV difference, then the table for offset direction IDX may become as shown in Table 2, one of the eight offset directions may be used:</p><p id="p-0144" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Mapping of Offset Direction IDXs to Offset Directions</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="28pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><colspec colname="8" colwidth="21pt" align="center"/><colspec colname="9" colwidth="21pt" align="center"/><tbody valign="top"><row><entry>Offset</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Direction</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>IDX</entry><entry>000</entry><entry>001</entry><entry>010</entry><entry>011</entry><entry>100</entry><entry>101</entry><entry>110</entry><entry>111</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="21pt" align="char" char="."/><colspec colname="3" colwidth="28pt" align="char" char="."/><colspec colname="4" colwidth="21pt" align="char" char="."/><colspec colname="5" colwidth="21pt" align="char" char="."/><colspec colname="6" colwidth="21pt" align="char" char="."/><colspec colname="7" colwidth="21pt" align="char" char="."/><colspec colname="8" colwidth="21pt" align="char" char="."/><colspec colname="9" colwidth="21pt" align="char" char="."/><tbody valign="top"><row><entry>x-axis</entry><entry>+1</entry><entry>&#x2212;1</entry><entry>0</entry><entry>0</entry><entry>+1</entry><entry>&#x2212;1</entry><entry>+1</entry><entry>&#x2212;1</entry></row><row><entry>y-axis</entry><entry>0</entry><entry>0</entry><entry>+1</entry><entry>&#x2212;1</entry><entry>+1</entry><entry>&#x2212;1</entry><entry>&#x2212;1</entry><entry>+1</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0145" num="0134">The offset distance index is signaled to indicate the magnitude of offset distance to be applied on the CPMV. In an example, the offset distance index is signaled in the form of pixel distance. In some embodiments, an offset distance table is used, and each offset distance index is mapped to offset distance in number of pixels according to the offset distance table. The offset distance value may be integer or fractional values. The offset distance value indicates that the offset to be applied to the base predictor's motion vector value.</p><p id="p-0146" num="0135">In one example, a offset distance table with size of 4 is as shown in Table 3. The offset distance values in the table are {&#xbd;, 1, 2, 4}, in terms of pixels.</p><p id="p-0147" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Mapping of Offset Distance IDXs to Offset Distances</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="14pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="49pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="49pt" align="center"/><tbody valign="top"><row><entry/><entry>Offset </entry><entry/><entry/><entry/><entry/></row><row><entry/><entry>Distance</entry><entry/><entry/><entry/><entry/></row><row><entry/><entry>IDX</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row><row><entry/><entry>Offset </entry><entry>&#xbd;-sample</entry><entry>1-sample</entry><entry>2-sample</entry><entry>4-sample</entry></row><row><entry/><entry>Distance</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0148" num="0136">In another example, an offset distance table with size of 5 is as shown in the Table 4. The offset distance values in the table are {&#xbd;, 1, 2, 4, 8}, in terms of pixels.</p><p id="p-0149" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Mapping of Offset Distance IDXs to Offset Distances</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>Offset </entry><entry/><entry/><entry/><entry/><entry/></row><row><entry>Distance</entry><entry/><entry/><entry/><entry/><entry/></row><row><entry>IDX</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry><entry>4</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row><row><entry>Offset </entry><entry>&#xbd;-sample</entry><entry>1-sample</entry><entry>2-sample</entry><entry>4-sample</entry><entry>8-sample</entry></row><row><entry>Distance</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0150" num="0137">In another example, the mapping of offset distance values with 8 indices is shown in Table 5. The offset distance values are in range of &#xbc; pixels to 32 pixels.</p><p id="p-0151" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Mapping of Offset Distance IDXs to Offset Distances</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="28pt" align="center"/><colspec colname="4" colwidth="28pt" align="center"/><colspec colname="5" colwidth="28pt" align="center"/><colspec colname="6" colwidth="28pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><colspec colname="8" colwidth="35pt" align="center"/><colspec colname="9" colwidth="28pt" align="center"/><tbody valign="top"><row><entry>Offset</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Distance</entry><entry/><entry/><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>IDX</entry><entry>0</entry><entry>1</entry><entry>2</entry><entry>3</entry><entry>4</entry><entry>5</entry><entry>6</entry><entry>7</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row><row><entry>Offset</entry><entry>&#xbc;-</entry><entry>&#xbd;-</entry><entry>1-</entry><entry>2-</entry><entry>4-</entry><entry>8-</entry><entry>16-</entry><entry>32-</entry></row><row><entry>Distance</entry><entry>sample</entry><entry>sample</entry><entry>sample</entry><entry>sample</entry><entry>sample</entry><entry>sample</entry><entry>sample</entry><entry>sample</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0152" num="0138">The number of distance indices and/or the value of pixel distance corresponding to each distance index may have different values in different ranges, they are not limited by the aforementioned examples.</p><p id="p-0153" num="0139">In an embodiment, the offset direction index and the offset distance index may be signaled only once for all control points, and the same offset distance may be applied to all CPMVs on the same offset direction.</p><p id="p-0154" num="0140">In another embodiment, the offset direction index and the offset distance index parameters may be signaled for each control point separately. Each CPMV has a corresponding offset magnitude applied on a corresponding offset direction.</p><p id="p-0155" num="0141">In some embodiments, when offset parameters are signaled for each control point, a zero_MVD flag may be signaled before offset parameters to indicate whether the motion vector difference is zero for the corresponding CPMV. When the zero_MVD flag is true, in an example, offset parameters are not signaled for the corresponding CPMV. In an embodiment, when N control points are available (N is a positive integer), and the first N-1 control points have zero_MVD flags that are true, the last control point's zero_MVD may be inferred to be false, so that its zero_MVD flag for the last control point is not signaled.</p><p id="p-0156" num="0142">In another embodiment, when one set of offset parameters is signaled for all control points, zero_MVD flag may not be signaled.</p><p id="p-0157" num="0143">Aspects of the disclosure provide techniques to signal offset parameters.</p><p id="p-0158" num="0144">In an embodiment, each control point has its offset parameters signaled separately. In an example, the current block's merge flag and affine_merge_with_offset usage flag are both true. When more than one predictor candidates are existed to be potentially used for base predictor, base predictor index is signaled from the encoder side to the decoder side in an example. In another example, no base predictor index is signaled, and predefined base predictor index can be used on the encoder side and the decoder side.</p><p id="p-0159" num="0145">Further, for each control point (CP) of current block, Zero_MVD flag is signaled for the CP. When the CP is the last CP of the block, and all other CPs have Zero_MVD equal to 1 (true), Zero_MVD flag for the last CP is inferred to 0 (false) without signaling.</p><p id="p-0160" num="0146">For each CP, when the Zero_MVD flag is true, CPMV is set to be the same as base predictor's corresponding CPMV value. However, when the Zero_MVD flag is false, offset distance index and offset direction index for the CP are signaled in an example. Based on the offset distance index and offset direction index, the offset distance and the offset direction can be determined for example based on Tables 1-5. Then, CPMV value is generated from the base predictor's corresponding CPMV predictor value with the offset distance applied on the offset direction.</p><p id="p-0161" num="0147">In some examples, the number of control points for the current block is determined by the affine model type of the base predictor. When the base predictor uses 4-parameter affine model, the current block uses 2 control points. When the base predictor uses 6-parameter affine model, the current block uses 3 control points.</p><p id="p-0162" num="0148">In an example, the base predictor uses four-parameter affine model, and the parameters that are signaled include a usage flag (e.g., affine_merge_with_offset usage flag is equal to true), the base predictor index, zero_MVD flag (false) for a first CP (also referred to as CP<b>0</b>), offset distance index for the first CP, offset direction index for the first CP, zero_MVD flag (false) for a second CP (also referred to as CP<b>1</b>), offset distance index for the second CP, and offset direction index for the second CP.</p><p id="p-0163" num="0149">In another example, the base predictor uses six-parameter affine model, and the parameters that are signaled include a usage flag (e.g., affine_merge_with_offset usage flag is equal to true), the base predictor index, zero_MVD flag (false) for a first CP (also referred to as CP<b>0</b>), offset distance index for the first CP, offset direction index for the first CP, zero_MVD flag (false) for a second CP (also referred to as CP<b>1</b>), offset distance index for the second CP, offset direction index for the second CP, zero_MVD flag (false) for a third CP (also referred to as CP<b>2</b>), offset distance index for the third CP, offset direction index for the third CP.</p><p id="p-0164" num="0150">In other embodiment, one set of offset parameters is signaled for all control points. In some examples, the current block's merge flag and affine_merge_with_offset usage flag are both true. When more than one predictor candidates are existed to be potentially used for base predictor, base predictor index is signaled from the encoder side to the decoder side in an example. In another example, no base predictor index is signaled, and predefined base predictor index can be used on the encoder side and the decoder side. For the current block, one set of offset distance index and offset direction index is signaled. Based on the offset distance index and the offset direction index, the offset distance and the offset direction are determined. Then, the current block's CPMV values are generated from the base predictor's corresponding CPMV predictor values with the offset distance applied on the offset direction.</p><p id="p-0165" num="0151">In an example, the parameters that are signaled include a usage flag (e.g., affine_merge_with_offset usage flag is equal to true), the base predictor index, offset distance index for the current block, and offset direction index for the current block.</p><p id="p-0166" num="0152">Aspects of the disclosure provide techniques for calculate CPMV values.</p><p id="p-0167" num="0153">In some embodiments, when the inter prediction is uni-prediction, the motion vector difference in the form of applying the offset distance (determined based on the offset distance index decoded from the coded video bitstream) on the offset direction (determined based on the offset direction index decoded from the coded video bitstream) is used for each control point predictor. The motion vector difference is then used to determine the MV value of each control point.</p><p id="p-0168" num="0154">For example, when base predictor is uni-prediction, and the motion vector values of a control point of the base predictor is denoted as MVP (vpx, vpy). When offset distance index and offset direction index are signaled, the motion vectors of current block's corresponding control points will be calculated using Eq. 5. The distance_offset denotes to the offset distance value that is determined based on the offset distance index. The x_dir_factor and y_dir_factor denotes the offset direction factor (e.g, 1 or &#x2212;1) on x-axis and y-axis respectively, which are determined based on the offset direction index.</p><p id="p-0169" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MV(<i>vx, vy</i>)=MVP (<i>vpx, vpy</i>)+MV(<i>x</i>_dir_factor&#xd7;distance_offset, <i>y</i>_dir_factor&#xd7;distance_offset) &#x2003;&#x2003;(Eq. 5)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0170" num="0155">In an embodiment, offset mirroring is used for bi-prediction CPMVs. The motion vector difference (in the form of offset distance and offset direction) can be applied, in opposite directions, to motion vectors of the control points that refer to a reference picture from the L0 list and to motion vectors of the control points that refer to a reference picture from the L1 list. When the inter prediction is bi-prediction, the motion vector difference (in the form offset distance and offset direction) is applied to the L0 motion vectors (motion vectors that refer to a reference picture from the L0 list) of the control point predictor to calculate the L0 motion vectors (motion vectors that refer to a reference picture from the L0 list) of the control points for the current block; and the motion vector difference is also applied to the L1 motion vectors (motion vectors that refer to a reference picture from the L1 list) of the control point predictor but in an opposite direction to calculate the L1 motion vectors (motion vectors that refer to a reference picture from the L1 list) of the control points for the current block. The calculation results will be the MV values of each control point, on each inter prediction direction.</p><p id="p-0171" num="0156">For example, when base predictor is bi-prediction, and the motion vector values of a control point on L0 (motion vectors that refer to a reference picture from the L0 list) is denoted as MVPL0 (v0px, v0py), and the motion vector values of that control point on L1 (motion vectors that refer to a reference picture from the L1 list) is denoted as MVPL1 (v1px, v1py). When offset distance index and offset direction index are signaled, the motion vectors of current block's corresponding control points can be calculated using Eq. 6 and Eq. 7:</p><p id="p-0172" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MVL0(<i>v</i>0<i>x, v</i>0<i>y</i>)=MVPL0(<i>v</i>0<i>px, v</i>0<i>py</i>)+MV(<i>x</i>_dir_factor&#xd7;distance_offset, <i>y</i>_dir_factor&#xd7;distance_offset) &#x2003;&#x2003;Eq. 6<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0173" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MVL1(<i>v</i>0<i>x, v</i>0<i>y</i>)=MVPL1(<i>v</i>0<i>px, v</i>0<i>py</i>)+MV(<i>&#x2212;x</i>_dir_factor&#xd7;distance_offset, &#x2212;<i>y</i>_dir_factor&#xd7;distance_offset) &#x2003;&#x2003;Eq. 7<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0174" num="0157">According to another aspect of the disclosure, the CPMV calculation using offset mirroring is conditionally performed for bi-prediction CPMV calculation, for example based on the reference picture's location with regard to the current picture.</p><p id="p-0175" num="0158">In an example, when the inter prediction is bi-prediction, the motion vector values of the control points from the L0 list (motion vectors that refer to a reference picture from the L0 list) is calculated in the same way as above, the signaled offset distance is applied on the signaled offset direction for control point predictor's L0 motion vector (motion vectors that refer to a reference picture from the L0 list).</p><p id="p-0176" num="0159">When the reference pictures from L0 and L1 are on the opposite sides of the current picture, to calculate the motion vectors for the control points from L1 list (motion vectors that refer to a reference picture from the L1 list), the same offset distance with opposite offset direction (from the signaled offset direction) is applied for control point predictor's L1 motion vector (motion vectors that refer to a reference picture from the L1 list).</p><p id="p-0177" num="0160">When the reference pictures from L0 and L1 are on the same side of the current picture, to calculate the motion vectors for the control points from L1 list, the same offset distance with same offset direction (as the signaled offset direction) is applied for control point predictor's L1 motion vector (motion vectors that refer to a reference picture from the L1 list).</p><p id="p-0178" num="0161">It is noted that in some embodiments, the offset distance applied on the reference picture from L1 list is the same as the offset distance applied on the reference picture from L0 list; and in some other embodiments, the offset distance applied on the reference picture from L1 list is scaled according to the ratio of distance of reference picture from L0 list to the current picture and distance of reference picture from L1 list to the current picture.</p><p id="p-0179" num="0162">In an embodiment, the distance offset applied on the reference picture from the L1 list is the same as the distance offset applied on the reference picture from the L0 list.</p><p id="p-0180" num="0163">In an example, when base predictor is bi-prediction, and the motion vector values of a control point (of the base predictor) on a reference picture from the L0 list is denoted as MVPL0 (v0px, v0py), and the motion vector values of that control point (of the base predictor) on a reference picture from the L1 list is denoted as MVPL1 (v1px, v1py). The reference pictures from the L0 list and the L1 list are on the opposite side of the current picture. When offset distance index and offset direction index are signaled, the motion vectors of current block's corresponding control points can be calculated using Eq. 6 and Eq. 7 shown above.</p><p id="p-0181" num="0164">In another embodiment, the offset distance applied on the reference picture from L1 list is scaled according to the ratio of distance of reference picture from L0 list to the current picture and distance of reference picture from L1 list to the current picture.</p><p id="p-0182" num="0165">In an example, when the base predictor is bi-prediction, and the motion vector values of a control point (of the base predictor) on the reference picture from the L0 list is denoted as MVPL0 (v0px, v0py), and the motion vector values of that control point (of the base predictor) on the reference picture from the L1 list is denoted as MVPL1 (v1px, v1py). When offset distance index and offset direction index are signaled, the motion vectors of current block's corresponding control points can be calculated using Eq. 8 and Eq. 9.</p><p id="p-0183" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MVL0(<i>v</i>0<i>x, v</i>0<i>y</i>)=MVPL0(<i>v</i>0<i>px, v</i>0<i>py</i>)+MV(<i>x</i>_dir_factor&#xd7;distance_offset, <i>y</i>_dir_factor&#xd7;distance_offset) &#x2003;&#x2003;(Eq. 8)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0184" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MVL1(<i>v</i>0<i>x, v</i>0<i>y</i>)=MVPL1 (<i>v</i>0<i>px, v</i>0<i>py</i>)+MV(<i>x</i>_dir_factor&#xd7;distance_offset&#xd7;scaling_factor, <i>y</i>_dir_factor&#xd7;distance_offset&#xd7;scaling_factor) &#x2003;&#x2003;(Eq. 9)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0185" num="0166">The scaling_factor is calculated based on the POC number of current picture (denoted as current_POC), the POC number of the reference picture on the L0 list (denoted as POC_L0), and the POC number of the reference picture on the L1 list (denoted as POC_L1) according to (Eq. 10):</p><p id="p-0186" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>scaling_factor=(<i>POC</i>_<i>L</i>1&#x2212;current_<i>POC</i>)/(<i>POC</i>_<i>L</i>0&#x2212;current_<i>POC</i>) &#x2003;&#x2003;(Eq. 10)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0187" num="0167"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a flow chart outlining a process (<b>1400</b>) according to an embodiment of the disclosure. The process (<b>1400</b>) can be used in the reconstruction of a block coded in intra mode, so to generate a prediction block for the block under reconstruction. In various embodiments, the process (<b>1400</b>) are executed by processing circuitry, such as the processing circuitry in the terminal devices (<b>210</b>), (<b>220</b>), (<b>230</b>) and (<b>240</b>), the processing circuitry that performs functions of the video encoder (<b>303</b>), the processing circuitry that performs functions of the video decoder (<b>310</b>), the processing circuitry that performs functions of the video decoder (<b>410</b>), the processing circuitry that performs functions of the video encoder (<b>503</b>), and the like. In some embodiments, the process (<b>1400</b>) is implemented in software instructions, thus when the processing circuitry executes the software instructions, the processing circuitry performs the process (<b>1400</b>). The process starts at (S<b>1401</b>) and proceeds to (S<b>1410</b>).</p><p id="p-0188" num="0168">At (S<b>1410</b>), prediction information of a current block in a current picture is decoded from a coded video bitstream. The prediction information is indicative of an affine merge mode with offset.</p><p id="p-0189" num="0169">At (S<b>1420</b>), in response to the affine merge mode with offset, a set of offset parameters is decoded from the coded video bitstream. Based on the set of offset parameters, a motion vector difference is determined. In some examples, the motion vector different is used in the form of applying an offset distance to an offset direction.</p><p id="p-0190" num="0170">At (S<b>1430</b>), the motion vector difference is applied to first motion vectors of multiple control points from a base predictor of the current block to calculate second motion vectors at corresponding multiple control points of the current block.</p><p id="p-0191" num="0171">At (S<b>1440</b>), parameters of an affine model are determined based on the second motion vectors at the corresponding multiple control points of the current block.</p><p id="p-0192" num="0172">At (S<b>1450</b>), samples of the current block are reconstructed based on the affine model. For example, for a sample of the current block, a motion vector at the sample is calculated according to the affine model. Thus, in an example, the sample is constructed based on a reference sample in a reference picture that is pointed by the motion vector. Then, the process proceeds to (S<b>1499</b>) and terminates.</p><p id="p-0193" num="0173">The techniques described above, can be implemented as computer software using computer-readable instructions and physically stored in one or more computer-readable media. For example, <figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a computer system (<b>1500</b>) suitable for implementing certain embodiments of the disclosed subject matter.</p><p id="p-0194" num="0174">The computer software can be coded using any suitable machine code or computer language, that may be subject to assembly, compilation, linking, or like mechanisms to create code comprising instructions that can be executed directly, or through interpretation, micro-code execution, and the like, by one or more computer central processing units (CPUs), Graphics Processing Units (GPUs), and the like.</p><p id="p-0195" num="0175">The instructions can be executed on various types of computers or components thereof, including, for example, personal computers, tablet computers, servers, smartphones, gaming devices, internet of things devices, and the like.</p><p id="p-0196" num="0176">The components shown in <figref idref="DRAWINGS">FIG. <b>15</b></figref> for computer system (<b>1500</b>) are exemplary in nature and are not intended to suggest any limitation as to the scope of use or functionality of the computer software implementing embodiments of the present disclosure. Neither should the configuration of components be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary embodiment of a computer system (<b>1500</b>).</p><p id="p-0197" num="0177">Computer system (<b>1500</b>) may include certain human interface input devices. Such a human interface input device may be responsive to input by one or more human users through, for example, tactile input (such as: keystrokes, swipes, data glove movements), audio input (such as: voice, clapping), visual input (such as: gestures), olfactory input (not depicted). The human interface devices can also be used to capture certain media not necessarily directly related to conscious input by a human, such as audio (such as: speech, music, ambient sound), images (such as: scanned images, photographic images obtain from a still image camera), video (such as two-dimensional video, three-dimensional video including stereoscopic video).</p><p id="p-0198" num="0178">Input human interface devices may include one or more of (only one of each depicted): keyboard (<b>1501</b>), mouse (<b>1502</b>), trackpad (<b>1503</b>), touch screen (<b>1510</b>), data-glove (not shown), joystick (<b>1505</b>), microphone (<b>1506</b>), scanner (<b>1507</b>), camera (<b>1508</b>).</p><p id="p-0199" num="0179">Computer system (<b>1500</b>) may also include certain human interface output devices. Such human interface output devices may be stimulating the senses of one or more human users through, for example, tactile output, sound, light, and smell/taste. Such human interface output devices may include tactile output devices (for example tactile feedback by the touch-screen (<b>1510</b>), data-glove (not shown), or joystick (<b>1505</b>), but there can also be tactile feedback devices that do not serve as input devices), audio output devices (such as: speakers (<b>1509</b>), headphones (not depicted)), visual output devices (such as screens (<b>1510</b>) to include CRT screens, LCD screens, plasma screens, OLED screens, each with or without touch-screen input capability, each with or without tactile feedback capability&#x2014;some of which may be capable to output two dimensional visual output or more than three dimensional output through means such as stereographic output; virtual-reality glasses (not depicted), holographic displays and smoke tanks (not depicted)), and printers (not depicted).</p><p id="p-0200" num="0180">Computer system (<b>1500</b>) can also include human accessible storage devices and their associated media such as optical media including CD/DVD ROM/RW (<b>1520</b>) with CD/DVD or the like media (<b>1521</b>), thumb-drive (<b>1522</b>), removable hard drive or solid state drive (<b>1523</b>), legacy magnetic media such as tape and floppy disc (not depicted), specialized ROM/ASIC/PLD based devices such as security dongles (not depicted), and the like.</p><p id="p-0201" num="0181">Those skilled in the art should also understand that term &#x201c;computer readable media&#x201d; as used in connection with the presently disclosed subject matter does not encompass transmission media, carrier waves, or other transitory signals.</p><p id="p-0202" num="0182">Computer system (<b>1500</b>) can also include an interface to one or more communication networks. Networks can for example be wireless, wireline, optical. Networks can further be local, wide-area, metropolitan, vehicular and industrial, real-time, delay-tolerant, and so on. Examples of networks include local area networks such as Ethernet, wireless LANs, cellular networks to include GSM, 3G, 4G, 5G, LTE and the like, TV wireline or wireless wide area digital networks to include cable TV, satellite TV, and terrestrial broadcast TV, vehicular and industrial to include CANBus, and so forth. Certain networks commonly require external network interface adapters that attached to certain general purpose data ports or peripheral buses (<b>1549</b>) (such as, for example USB ports of the computer system (<b>1500</b>)); others are commonly integrated into the core of the computer system (<b>1500</b>) by attachment to a system bus as described below (for example Ethernet interface into a PC computer system or cellular network interface into a smartphone computer system). Using any of these networks, computer system (<b>1500</b>) can communicate with other entities. Such communication can be uni-directional, receive only (for example, broadcast TV), uni-directional send-only (for example CANbus to certain CANbus devices), or bi-directional, for example to other computer systems using local or wide area digital networks. Certain protocols and protocol stacks can be used on each of those networks and network interfaces as described above.</p><p id="p-0203" num="0183">Aforementioned human interface devices, human-accessible storage devices, and network interfaces can be attached to a core (<b>1540</b>) of the computer system (<b>1500</b>).</p><p id="p-0204" num="0184">The core (<b>1540</b>) can include one or more Central Processing Units (CPU) (<b>1541</b>), Graphics Processing Units (GPU) (<b>1542</b>), specialized programmable processing units in the form of Field Programmable Gate Areas (FPGA) (<b>1543</b>), hardware accelerators for certain tasks (<b>1544</b>), and so forth. These devices, along with Read-only memory (ROM) (<b>1545</b>), Random-access memory (<b>1546</b>), internal mass storage such as internal non-user accessible hard drives, SSDs, and the like (<b>1547</b>), may be connected through a system bus (<b>1548</b>). In some computer systems, the system bus (<b>1548</b>) can be accessible in the form of one or more physical plugs to enable extensions by additional CPUs, GPU, and the like. The peripheral devices can be attached either directly to the core's system bus (<b>1548</b>), or through a peripheral bus (<b>1549</b>). Architectures for a peripheral bus include PCI, USB, and the like.</p><p id="p-0205" num="0185">CPUs (<b>1541</b>), GPUs (<b>1542</b>), FPGAs (<b>1543</b>), and accelerators (<b>1544</b>) can execute certain instructions that, in combination, can make up the aforementioned computer code. That computer code can be stored in ROM (<b>1545</b>) or RAM (<b>1546</b>). Transitional data can be also be stored in RAM (<b>1546</b>), whereas permanent data can be stored for example, in the internal mass storage (<b>1547</b>). Fast storage and retrieve to any of the memory devices can be enabled through the use of cache memory, that can be closely associated with one or more CPU (<b>1541</b>), GPU (<b>1542</b>), mass storage (<b>1547</b>), ROM (<b>1545</b>), RAM (<b>1546</b>), and the like.</p><p id="p-0206" num="0186">The computer readable media can have computer code thereon for performing various computer-implemented operations. The media and computer code can be those specially designed and constructed for the purposes of the present disclosure, or they can be of the kind well known and available to those having skill in the computer software arts.</p><p id="p-0207" num="0187">As an example and not by way of limitation, the computer system having architecture (<b>1500</b>), and specifically the core (<b>1540</b>) can provide functionality as a result of processor(s) (including CPUs, GPUs, FPGA, accelerators, and the like) executing software embodied in one or more tangible, computer-readable media. Such computer-readable media can be media associated with user-accessible mass storage as introduced above, as well as certain storage of the core (<b>1540</b>) that are of non-transitory nature, such as core-internal mass storage (<b>1547</b>) or ROM (<b>1545</b>). The software implementing various embodiments of the present disclosure can be stored in such devices and executed by core (<b>1540</b>). A computer-readable medium can include one or more memory devices or chips, according to particular needs. The software can cause the core (<b>1540</b>) and specifically the processors therein (including CPU, GPU, FPGA, and the like) to execute particular processes or particular parts of particular processes described herein, including defining data structures stored in RAM (<b>1546</b>) and modifying such data structures according to the processes defined by the software. In addition or as an alternative, the computer system can provide functionality as a result of logic hardwired or otherwise embodied in a circuit (for example: accelerator (<b>1544</b>)), which can operate in place of or together with software to execute particular processes or particular parts of particular processes described herein. Reference to software can encompass logic, and vice versa, where appropriate. Reference to a computer-readable media can encompass a circuit (such as an integrated circuit (IC)) storing software for execution, a circuit embodying logic for execution, or both, where appropriate. The present disclosure encompasses any suitable combination of hardware and software.</p><p id="p-0208" num="0188">Appendix A: Acronyms<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0189">JEM: joint exploration model</li>    <li id="ul0001-0002" num="0190">VVC: versatile video coding</li>    <li id="ul0001-0003" num="0191">BMS: benchmark set</li>    <li id="ul0001-0004" num="0192">MV: Motion Vector</li>    <li id="ul0001-0005" num="0193">HEVC: High Efficiency Video Coding</li>    <li id="ul0001-0006" num="0194">SEI: Supplementary Enhancement Information</li>    <li id="ul0001-0007" num="0195">VUI: Video Usability Information</li>    <li id="ul0001-0008" num="0196">GOPs: Groups of Pictures</li>    <li id="ul0001-0009" num="0197">TUs: Transform Units,</li>    <li id="ul0001-0010" num="0198">PUs: Prediction Units</li>    <li id="ul0001-0011" num="0199">CTUs: Coding Tree Units</li>    <li id="ul0001-0012" num="0200">CTBs: Coding Tree Blocks</li>    <li id="ul0001-0013" num="0201">PBs: Prediction Blocks</li>    <li id="ul0001-0014" num="0202">HRD: Hypothetical Reference Decoder</li>    <li id="ul0001-0015" num="0203">SNR: Signal Noise Ratio</li>    <li id="ul0001-0016" num="0204">CPUs: Central Processing Units</li>    <li id="ul0001-0017" num="0205">GPUs: Graphics Processing Units</li>    <li id="ul0001-0018" num="0206">CRT: Cathode Ray Tube</li>    <li id="ul0001-0019" num="0207">LCD: Liquid-Crystal Display</li>    <li id="ul0001-0020" num="0208">OLED: Organic Light-Emitting Diode</li>    <li id="ul0001-0021" num="0209">CD: Compact Disc</li>    <li id="ul0001-0022" num="0210">DVD: Digital Video Disc</li>    <li id="ul0001-0023" num="0211">ROM: Read-Only Memory</li>    <li id="ul0001-0024" num="0212">RAM: Random Access Memory</li>    <li id="ul0001-0025" num="0213">ASIC: Application-Specific Integrated Circuit</li>    <li id="ul0001-0026" num="0214">PLD: Programmable Logic Device</li>    <li id="ul0001-0027" num="0215">LAN: Local Area Network</li>    <li id="ul0001-0028" num="0216">GSM: Global System for Mobile communications</li>    <li id="ul0001-0029" num="0217">LTE: Long-Term Evolution</li>    <li id="ul0001-0030" num="0218">CANBus: Controller Area Network Bus</li>    <li id="ul0001-0031" num="0219">USB: Universal Serial Bus</li>    <li id="ul0001-0032" num="0220">PCI: Peripheral Component Interconnect</li>    <li id="ul0001-0033" num="0221">FPGA: Field Programmable Gate Areas</li>    <li id="ul0001-0034" num="0222">SSD: solid-state drive</li>    <li id="ul0001-0035" num="0223">IC: Integrated Circuit</li>    <li id="ul0001-0036" num="0224">CU: Coding Unit</li></ul></p><p id="p-0209" num="0225">While this disclosure has described several exemplary embodiments, there are alterations, permutations, and various substitute equivalents, which fall within the scope of the disclosure. It will thus be appreciated that those skilled in the art will be able to devise numerous systems and methods which, although not explicitly shown or described herein, embody the principles of the disclosure and are thus within the spirit and scope thereof.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230007287A1-20230105-M00001.NB"><img id="EMI-M00001" he="6.01mm" wi="76.20mm" file="US20230007287A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230007287A1-20230105-M00002.NB"><img id="EMI-M00002" he="6.01mm" wi="76.20mm" file="US20230007287A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230007287A1-20230105-M00003.NB"><img id="EMI-M00003" he="6.35mm" wi="76.20mm" file="US20230007287A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230007287A1-20230105-M00004.NB"><img id="EMI-M00004" he="11.60mm" wi="76.20mm" file="US20230007287A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for video encoding in an encoder, comprising:<claim-text>determining a corresponding motion vector for each of multiple control points of a base predictor, based on coding a current block in a current picture using an affine merge mode with offset;</claim-text><claim-text>determining a corresponding motion vector difference for each of one or more of the multiple control points of the base predictor based on the determined motion vector for each respective control point, each motion vector difference having a distance and a direction;</claim-text><claim-text>generating prediction information of the current block in the current picture to be included in a coded video bitstream, the prediction information including (i) a usage flag indicative of the affine merge mode with offset, (ii) offset parameters defining the determined corresponding motion vector difference for each of the one or more of the control points, and (iii) a zero motion vector difference flag for each of one or more control points of the multiple control points of the base predictor, the zero motion vector difference flag indicating whether offset parameters for the respective control point are provided in the prediction information; and</claim-text><claim-text>generating the coded video bitstream including the generated prediction information.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>indicating a number of base predictor candidates in the generated prediction information; and</claim-text><claim-text>in response to a determination that the number of base predictor candidates is greater than one, indicating, in the coded video bitstream, a base predictor index indicating the base predictor.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining a number of base predictor candidates based on a predefined value; and</claim-text><claim-text>in response to a determination that the number of base predictor candidates is greater than one, indicating, in the coded video bitstream, a base predictor index indicating the base predictor.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the offset parameters include one or more offset direction indexes and one or more offset distance indexes, one of the one or more offset direction indexes and one of the one or more offset distance indexes defining one of the one or more motion vector differences.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein each of the one or more offset direction indexes refers to a predefined mapping table defining a correspondence between each of the one or more offset direction indexes and a direction along at least one of an x axis and a y axis.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein each of the one or more offset distance indexes refers to a predefined mapping table defining a correspondence between each of the one or more offset distance indexes and a distance measured in pixels.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising determining a number of the multiple control points based on an affine model type of the base predictor.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the determining the corresponding motion vector difference for each of the one or more of the multiple control points comprises<claim-text>for a first control point of the one or more control points that refers to a first reference picture, determining a motion vector difference corresponding to the first control point based on the corresponding motion vector for the first control point; and</claim-text><claim-text>for a second control point of the one or more control points that refers to a second reference picture, determining a motion vector difference corresponding to the second control point as a mirror of the determined motion vector difference corresponding to the first control point.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the zero motion vector difference flag for each of the one or more control points is signaled before the offset parameter for the respective control point in the prediction information.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. An apparatus for video decoding, comprising:<claim-text>processing circuitry configured to:<claim-text>determine a corresponding motion vector for each of multiple control points of a base predictor, based on coding a current block in a current picture using an affine merge mode with offset;</claim-text><claim-text>determine a corresponding motion vector difference for each of one or more of the multiple control points of the base predictor based on the determined motion vector for each respective control point, each motion vector difference having a distance and a direction;</claim-text><claim-text>generate prediction information of the current block in the current picture to be included in a coded video bitstream, the prediction information including (i) a usage flag indicative of the affine merge mode with offset, (ii) offset parameters defining the determined corresponding motion vector difference for each of the one or more of the control points, and (iii) a zero motion vector difference flag for each of one or more control points of the multiple control points of the base predictor, the zero motion vector difference flag indicating whether offset parameters for the respective control point are provided in the prediction information; and</claim-text><claim-text>generating the coded video bitstream including the generated prediction information.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processing circuitry is further configured to:<claim-text>indicate a number of base predictor candidates in the generated prediction information; and</claim-text><claim-text>in response to a determination that the number of base predictor candidates is greater than one, indicate, in the coded video bitstream, a base predictor index indicating the base predictor.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processing circuitry is further configured to:<claim-text>determine a number of base predictor candidates based on a predefined value; and</claim-text><claim-text>in response to a determination that the number of base predictor candidates is greater than one, indicating, in the coded video bitstream, a base predictor index indicating the base predictor.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the offset parameters include one or more offset direction indexes and one or more offset distance indexes, one of the one or more offset direction indexes and one of the one or more offset distance indexes defining one of the one or more motion vector differences.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein each of the one or more offset direction indexes refers to a predefined mapping table defining a correspondence between each of the one or more offset direction indexes and a direction along at least one of an x axis and a y axis.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein each of the one or more offset distance indexes refers to a predefined mapping table defining a correspondence between each of the one or more offset distance indexes and a distance measured in pixels.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising determining a number of the multiple control points based on an affine model type of the base predictor.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processing circuitry determines the corresponding motion vector difference for each of the one or more of the multiple control points by,<claim-text>for a first control point of the one or more control points that refers to a first reference picture, determining a motion vector difference corresponding to the first control point based on the corresponding motion vector for the first control point; and</claim-text><claim-text>for a second control point of the one or more control points that refers to a second reference picture, determining a motion vector difference corresponding to the second control point as a mirror of the determined motion vector difference corresponding to the first control point.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the zero motion vector difference flag for each of the one or more control points is signaled before the offset parameter for the respective control point in the prediction information.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A non-transitory computer-readable medium storing instructions which, when executed by a computer for video decoding, cause the computer to perform:<claim-text>determining a corresponding motion vector for each of multiple control points of a base predictor, based on coding a current block in a current picture using an affine merge mode with offset;</claim-text><claim-text>determining a corresponding motion vector difference for each of one or more of the multiple control points of the base predictor based on the determined motion vector for each respective control point, each motion vector difference having a distance and a direction;</claim-text><claim-text>generating prediction information of the current block in the current picture to be included in a coded video bitstream, the prediction information including (i) a usage flag indicative of the affine merge mode with offset, (ii) offset parameters defining the determined corresponding motion vector difference for each of the one or more of the control points, and (iii) a zero motion vector difference flag for each of the one or more control points of the multiple control points of the base predictor, the zero motion vector difference flag indicating whether offset parameters for the respective control point are provided in the prediction information; and</claim-text><claim-text>generating the coded video bitstream including the generated prediction information.</claim-text></claim-text></claim></claims></us-patent-application>