<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007283A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007283</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17779212</doc-number><date>20201124</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>124</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>52</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>593</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>96</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>139</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>159</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>124</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>52</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>593</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>96</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>139</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>159</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND APPARATUS FOR PERFORMING REAL-TIME VVC DECODING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>62939858</doc-number><date>20191125</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>VID SCALE, INC.</orgname><address><city>Wilmington</city><state>DE</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>GUDUMASU</last-name><first-name>Srinivas</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>BANDYOPADHYAY</last-name><first-name>Saurav</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>HE</last-name><first-name>Yuwen</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>HE</last-name><first-name>Yong</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>SRIVASTAVA</last-name><first-name>Asit</first-name><address><city>Uttar Pradesh</city><country>IN</country></address></addressbook></inventor></inventors></us-parties><pct-or-regional-filing-data><document-id><country>WO</country><doc-number>PCT/US2020/061909</doc-number><date>20201124</date></document-id><us-371c12-date><date>20220524</date></us-371c12-date></pct-or-regional-filing-data></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Apparatus and methods for implementing a real-time Versatile Video Coding (VVC) decoder use multiple threads to address the limitation with existing parallelization techniques and fully utilizes the available CPU computation resource without compromising on the coding efficiency. The proposed Multi-threaded (MT) framework uses CTU level parallel processing techniques without compromising on the memory bandwidth. Picture level parallel processing separates the sequence into temporal levels by considering the picture's referencing hierarchy. Embodiments are provided using various optimization techniques to achieve real-time VVC decoding on heterogenous platforms with multi-core CPUs, for those bitstreams generated using a VVC reference encoder with a default configuration.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="98.04mm" wi="158.75mm" file="US20230007283A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="251.29mm" wi="167.64mm" orientation="landscape" file="US20230007283A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="239.61mm" wi="83.99mm" orientation="landscape" file="US20230007283A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="243.50mm" wi="159.26mm" orientation="landscape" file="US20230007283A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="211.75mm" wi="169.08mm" orientation="landscape" file="US20230007283A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="190.92mm" wi="167.89mm" orientation="landscape" file="US20230007283A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="222.84mm" wi="171.70mm" orientation="landscape" file="US20230007283A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="252.90mm" wi="146.64mm" orientation="landscape" file="US20230007283A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="256.79mm" wi="172.55mm" orientation="landscape" file="US20230007283A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="245.70mm" wi="172.64mm" orientation="landscape" file="US20230007283A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="254.08mm" wi="171.53mm" orientation="landscape" file="US20230007283A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="258.66mm" wi="172.30mm" orientation="landscape" file="US20230007283A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="257.81mm" wi="172.21mm" orientation="landscape" file="US20230007283A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="254.76mm" wi="160.78mm" orientation="landscape" file="US20230007283A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="253.49mm" wi="161.71mm" orientation="landscape" file="US20230007283A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="255.69mm" wi="143.68mm" orientation="landscape" file="US20230007283A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="231.31mm" wi="168.23mm" orientation="landscape" file="US20230007283A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="196.26mm" wi="147.66mm" file="US20230007283A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="157.73mm" wi="126.07mm" file="US20230007283A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="197.78mm" wi="128.69mm" file="US20230007283A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="130.05mm" wi="110.32mm" file="US20230007283A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">At least one of the present embodiments generally relates to a method or an apparatus for video decoding or decompression.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">To achieve high compression efficiency, image and video coding schemes usually employ prediction, including motion vector prediction, and transform to leverage spatial and temporal redundancy in the video content. Generally, intra or inter prediction is used to exploit the intra or inter frame correlation, then the differences between the original image and the predicted image, often denoted as prediction errors or prediction residuals, are transformed, quantized, and entropy coded. To reconstruct the video, the compressed data are decoded by inverse processes corresponding to the entropy coding, quantization, transform, and prediction.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">At least one of the present embodiments generally relates to a method or an apparatus for performing real time decoding, as in the VVC (Versatile Video Coding or H.266) standard.</p><p id="p-0005" num="0004">According to a first aspect, there is provided a method. The method comprises steps for assigning threads for CABAC decoding of video frames using parallel processing, wherein a higher number of threads are assigned for decoding of frames with a low quantization parameter compared to a higher quantization parameter, or an intra frame relative to an inter frame, or for P frames, or when the frame is in a lower temporal layer; and, decoding said video frames using said assigned threads.</p><p id="p-0006" num="0005">According to a second aspect, there is provided another method. The method comprises steps for generating motion vectors for a coding unit; performing inter coding unit reconstruction; performing intra coding unit reconstruction; and, performing inverse reshaping and in-loop filter of said video, wherein said generating and performing steps are performed concurrently on distinct portions of the video.</p><p id="p-0007" num="0006">According to another aspect, there is provided an apparatus. The apparatus comprises a device, comprising: memory; and, one or more processors, configured to assign threads for CABAC decoding of video frames using parallel processing, wherein a higher number of threads are assigned for decoding of frames with a low quantization parameter compared to a higher quantization parameter, or an intra frame relative to an inter frame, or for P frames, or when the frame is in a lower temporal layer; and, decode said video frames using said assigned threads.</p><p id="p-0008" num="0007">According to another aspect, there is provided another apparatus. The apparatus comprises a device, comprising: memory; and, one or more processors, configured to generate motion vectors for a coding unit; perform inter coding unit reconstruction; perform intra coding unit reconstruction; and, perform inverse reshaping and in-loop filter of said video, wherein the device is configured to said generate and perform concurrently on distinct portions of the video.</p><p id="p-0009" num="0008">According to another general aspect of at least one embodiment, there is provided a device comprising an apparatus according to any of the decoding embodiments; and at least one of (i) an antenna configured to receive a signal, the signal including the video block and tensors of feature maps, (ii) a band limiter configured to limit the received signal to a band of frequencies that includes the video block, or (iii) a display configured to display an output representative of a video block or any receiving device analyzing features/decoded content.</p><p id="p-0010" num="0009">According to another general aspect of at least one embodiment, there is provided a non-transitory computer readable medium containing data content decoded according to any of the described encoding embodiments or variants.</p><p id="p-0011" num="0010">According to another general aspect of at least one embodiment, there is provided a signal comprising video data decoded according to according to any of the described encoding embodiments or variants.</p><p id="p-0012" num="0011">According to another general aspect of at least one embodiment, a bitstream is formatted to include data content generated according to any of the described encoding embodiments or variants.</p><p id="p-0013" num="0012">According to another general aspect of at least one embodiment, there is provided a computer program product comprising instructions which, when the program is executed by a computer, cause the computer to carry out any of the described decoding embodiments or variants.</p><p id="p-0014" num="0013">These and other aspects, features and advantages of the general aspects will become apparent from the following detailed description of exemplary embodiments, which is to be read in connection with the accompanying drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a general diagram of block-based video encoder for VVC.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates block partitions in the multi-type tree structure: (a) quaternary partition; (b) vertical binary partition; (c) horizontal binary partition; (d) vertical ternary partition; (e) horizontal ternary partition.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a general block diagram of a video decoder for VVC.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example overview of slice/picture decoding stages.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of CABAC decoding with WPP parallelization.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example thread scheduling mechanism for slice/picture reconstruction stages.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates coding unit motion vector generation with WPP parallelization.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an example parallelization within CUMV decoding stage.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates parallelization within inter coding unit reconstruction decoding stage.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example of disjoint intra coding unit reconstruction in parallel.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates joint parallelization of inter coding units and intra coding unit reconstruction decoding stage.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates interleaved processing of horizontal and vertical deblocking filter decoding stages.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates interleaved processing of coding unit motion vector generation and inter coding unit reconstruction decoding stages.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates interleaved processing of inter and intra coding unit reconstruction decoding stages.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates interleaved processing of inter, intra coding unit reconstruction and inverse reshaping decoding stages.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. <b>16</b><i>a </i>and <b>16</b><i>b </i></figref>illustrate a) a diagram illustrating an example communications system <b>100</b> in which one or more disclosed embodiments may be implemented and, b) a system diagram illustrating an example WTRU.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates one embodiment of a method under the general aspects described.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates a second embodiment of a method under the general aspects described.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates an apparatus for performing any of the described methods.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0034" num="0033">Video coding systems are widely used to compress digital video signals to reduce the storage need and/or transmission bandwidth of such signals. Among the various types of video coding systems, such as block-based, wavelet-based, and object-based systems, nowadays block-based hybrid video coding systems are the most widely used and deployed. Examples of block-based video coding systems include international video coding standards such as the MPEG1/2/4 part 2, H.264/MPEG-4 part 10 AVC, VC-1, and the latest video coding standard called High Efficiency Video Coding (HEVC), which was developed by JCT-VC (Joint Collaborative Team on Video Coding) of ITU-T/SG16/Q.6/VCEG and ISO/IEC/MPEG.</p><p id="p-0035" num="0034">The first version of the HEVC standard was finalized in October 2013, which offers approximately 50% bit-rate saving or equivalent perceptual quality compared to the prior generation video coding standard H.264/MPEG AVC. Although the HEVC standard provides significant coding improvements than its predecessor, there is evidence that superior coding efficiency can be achieved with additional coding tools over HEVC. Based on that, both VCEG and MPEG started the exploration work of new coding technologies for future video coding standardization. Joint Video Exploration Team (JVET) was formed in October 2015 by ITU-T VECG and ISO/IEC MPEG to begin significant study of advanced technologies that could enable substantial enhancement of coding efficiency. One reference software called joint exploration model (JEM) was maintained by the JVET by integrating several additional coding tools on top of the HEVC test model (HM).</p><p id="p-0036" num="0035">In October 2017, the joint call for proposals (CfP) on video compression with capability beyond HEVC was issued by ITU-T and ISO/IEC. In April 2018, 23 CfP responses were received and evaluated at the 10-th JVET meeting, which demonstrated compression efficiency gain over the HEVC around 40%. Based on such evaluation results, the JVET launched a new project to develop the new generation video coding standard that is named as Versatile Video Coding (VVC). In the same month, one reference software codebase, called VVC test model (VTM), was established for demonstrating a reference implementation of the VVC standard. Meanwhile, to facilitate the assessment of new coding tools, another reference software base called benchmark set (BMS) was also generated. In the BMS codebase, a list of additional coding tools which provides higher coding efficiency and moderate implementation complexity, are included on top of the VTM and used as the benchmark when evaluating similar coding technologies during the VVC standardization process. Specifically, besides JEM coding tools, e.g. 4&#xd7;4 non-separable secondary transform (NSST), generalized bi-prediction (GBi), bi-directional optical flow (BIO), decoder-side motion vector refinement (DMVR) and current picture referencing (CPR) integrated in the BMS-2.0, it includes the trellis coded quantization tool.</p><p id="p-0037" num="0036">Like HEVC, the VVC is built upon the block-based hybrid video coding framework. <figref idref="DRAWINGS">FIG. <b>1</b></figref> gives the block diagram of a generic block-based hybrid video encoding system. The input video signal <b>102</b> is processed block by block (called coding units (CUs)). In VTM-1.0, a CU can be up to 128&#xd7;128 pixels. However, different from the HEVC which partitions blocks only based on quad-trees, in the VTM-1.0, one coding tree unit (CTU) is split into CUs to adapt to varying local characteristics based on quad/binary/ternary-tree. Additionally, the concept of multiple partition unit type in the HEVC is removed, i.e., the separation of CU, prediction unit (PU) and transform unit (TU) does not exist in the VVC anymore; instead, each CU is always used as the basic unit for both prediction and transform without further partitions. In the multi-type tree structure, one CTU is firstly partitioned by a quad-tree structure. Then, each quad-tree leaf node can be further partitioned by a binary and ternary tree structure. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, there are five splitting types, quaternary partitioning, horizontal binary partitioning, vertical binary partitioning, horizontal ternary partitioning, and vertical ternary partitioning. In <figref idref="DRAWINGS">FIG. <b>1</b></figref>, spatial prediction (<b>160</b>) and/or temporal prediction (<b>162</b>) may be performed. Spatial prediction (or &#x201c;intra prediction&#x201d;) uses pixels from the samples of already coded neighboring blocks (which are called reference samples) in the same video picture/slice to predict the current video block. Spatial prediction reduces spatial redundancy inherent in the video signal. Temporal prediction (also referred to as &#x201c;inter prediction&#x201d; or &#x201c;motion compensated prediction&#x201d;) uses reconstructed pixels from the already coded video pictures to predict the current video block. Temporal prediction reduces temporal redundancy inherent in the video signal. Temporal prediction signal for a given CU is usually signaled by one or more motion vectors (MVs) which indicate the amount and the direction of motion between the current CU and its temporal reference. Also, if multiple reference pictures are supported, one reference picture index is additionally sent, which is used to identify from which reference picture in the reference picture store (<b>164</b>) the temporal prediction signal comes. After spatial and/or temporal prediction, the mode decision block (<b>180</b>) in the encoder chooses the best prediction mode, for example based on the rate-distortion optimization method. The prediction block is then subtracted from the current video block (<b>116</b>); and the prediction residual is de-correlated using transform (<b>104</b>) and quantized (<b>106</b>). The quantized residual coefficients are inverse quantized (<b>110</b>) and inverse transformed (<b>112</b>) to form the reconstructed residual, which is then added back to the prediction block (<b>126</b>) to form the reconstructed signal of the CU. Further in-loop filtering, such as deblocking filter, sample adaptive offset (SAO) and adaptive in-loop filter (ALF) may be applied (<b>166</b>) on the reconstructed CU before it is put in the reference picture store (<b>164</b>) and used to code future video blocks. To form the output video bit-stream <b>120</b>, coding mode (inter or intra), prediction mode information, motion information, and quantized residual coefficients are all sent to the entropy coding unit (<b>108</b>) to be further compressed and packed to form the bit-stream.</p><p id="p-0038" num="0037">Amongst the inter prediction and in-loop filtering stages in VVC, the following tools are new compared to HEVC.</p><p id="p-0039" num="0038">1) Combined Inter/Intra Prediction (CIIP)</p><p id="p-0040" num="0039">2) Decoder side Motion Vector Refinement (DMVR)</p><p id="p-0041" num="0040">3) Inverse reshaping</p><p id="p-0042" num="0000">CIIP mode combines inter prediction signal with intra prediction signal. The inter and intra prediction signals are combined using weighted averaging. The weights are based on the coding modes of the left and the top blocks.</p><p id="p-0043" num="0041">In VVC, an additional flag is signalled per CU for combined inter/intra prediction (CIIP) mode if following conditions are satisfied.<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0042">When a CU is coded in merge mode</li>        <li id="ul0002-0002" num="0043">CU contains greater than 64 luma samples i.e. CU width times CU height is equal to or greater than 64</li>        <li id="ul0002-0003" num="0044">CU height and CU width are less than 128 luma samples</li>    </ul>    </li></ul></p><p id="p-0044" num="0045">VVC allows to increase MV accuracy using bilateral matching based motion vector refinement at the decoder, also known as decoder side motion vector refinement (DMVR). Template matching is performed at the decoder to refine the MV around the initial MV in the reference picture lists L0 and L1. The SAD is calculated between each refined MV candidate, within search range (25 point full search for integer samples) in raster scan order, around the initial MV. The MV candidate with the lowest SAD is used to generate the bi-predicted signal.</p><p id="p-0045" num="0046">In VVC, DMVR can be applied for each CU that uses the following features.<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0047">CU level merge mode with bi-prediction MV</li>        <li id="ul0004-0002" num="0048">One reference picture is in the past and the other in future w.r.t. current picture</li>        <li id="ul0004-0003" num="0049">The POC (Picture Order Count) distance between both reference to the current picture are same</li>        <li id="ul0004-0004" num="0050">CU contains greater than 64 luma samples</li>        <li id="ul0004-0005" num="0051">Both CU height and CU width are larger than or equal to 8 luma samples</li>        <li id="ul0004-0006" num="0052">Bi-prediction with CU-level weight (BCW) weight index indicates equal weight</li>        <li id="ul0004-0007" num="0053">Weighted Prediction (WP) is not enabled for the current block</li>    </ul>    </li></ul></p><p id="p-0046" num="0054">Luma mapping with chroma scaling (LMCS) is added as a new tool in WC that can be enabled/disabled at the sequence level using a sequence parameter set (SPS) flag. LMCS is applied immediately before the loop filtering stage. For inter coded blocks, motion compensated prediction is applied in the mapped domain i.e. forward mapping function is applied to luma predicted blocks in the original domain to convert to mapped domain. For intra coded blocks, forward mapping is not applied.</p><p id="p-0047" num="0055">LMCS consists of two parts i.e. 1. Luma mapping with piecewise linear models, 2. Luma dependent chroma scaling.</p><p id="p-0048" num="0056">1. Luma mapping with piecewise linear models<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0057">The luma mapping model is signalled at the tile group level. If the luma mapping model present flag is detected for current tile group, the corresponding piecewise linear model parameters are signalled. The signalled codewords are used to calculate the scaling factors and adjust the mapping function for each of the 16 equal pieces.</li>    </ul>    </li></ul></p><p id="p-0049" num="0058">2. Luma dependent chroma residual scaling<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0059">The chroma residual scaling is also signalled at the tile group level. If luma mapping is enabled and if dual tree partition is not applied to current tile group, an additional flag is signalled to indicate usage of luma dependent chroma residual scaling. Luma dependent chroma residual scaling is disabled for chroma blocks whose area is less than or equal to 4. The purpose of using chroma residual scaling is to compensate for the interaction between the luma and the chroma signals.</li>    </ul>    </li></ul></p><p id="p-0050" num="0060"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a general block diagram of a block-based video decoder. The video bit-stream <b>202</b> is first unpacked and entropy decoded at entropy decoding unit <b>208</b>. The coding mode and prediction information are sent to either the spatial prediction unit <b>260</b> (if intra coded) or the temporal prediction unit <b>262</b> (if inter coded) to form the prediction block. The residual transform coefficients are sent to inverse quantization unit <b>210</b> and inverse transform unit <b>212</b> to reconstruct the residual block. The prediction block and the residual block are then added together at <b>226</b>. The reconstructed block may further go through in-loop filtering before it is stored in reference picture store <b>264</b>. The reconstructed video in reference picture store is then sent out to drive a display device, as well as used to predict future video blocks.</p><p id="p-0051" num="0061">Several published articles have exploited the parallelization capability of the video codecs prior to VVC on CPU, GPU or heterogenous platform. Another approach proposed an HEVC de-blocking filter that exploits independent regions of the frame and reduces the overall memory access. In other approaches, a GPU is used to accelerate HEVC decoding stages of de-quantization, inverse transform, intra prediction, deblocking filter and SAO. In another approach, a GPU based parallel algorithm is proposed including parallel computation of sample classification, statistics collection for each coding tree block, parallel computation of best offset values and minimum distortion for each class of edge offset and band offset, SAO merging and SAO filtering.</p><p id="p-0052" num="0062">Frame-level parallelism consist of processing multiple frames at the same time while satisfying the motion compensation dependencies. One of the major limitations of the frame level parallelism is that the level of parallelism is determined by the length of the motion vector. This is a major bottleneck, especially for sequences with large motion. Slice level parallelism allow independently processing the slices from one another. The major drawback of this level of parallelism is that the number of slices is determined by the encoder. Moreover, in most cases, the codec may be limited to use one slice per frame resulting in almost no slice level parallelism. Additionally, slices reduce the coding efficiency.</p><p id="p-0053" num="0063">The above shortcomings of the frame level or slice level parallelism can be overcome by employing Wavefront Parallel Processing (WPP) and Tiles. Both techniques allow subdivision of each picture into multiple partitions that can be processed in parallel. Each partition contains an integer number of coding units that must not have dependencies on other partitions. Usage of tiles reduces the coding efficiency and complicates the raster scan processing. However, the major drawback in tile usage is the rate-distortion loss that would be significant for higher number of tiles due to the lack of dependency between partitions.</p><p id="p-0054" num="0064">Wavefront parallel processing (WPP) allow partitioning the picture without breaking the coding dependency or resetting the CABAC probabilities as in parallelism using Slices or Tiles. WPP method partitions one picture into CTU rows and allows prediction and entropy coding across the CTU row boundaries. For this reason, WPP results in lower loss of compression efficiency compared to Slices and Tiles parallel processing methods. However, the Wavefront dependencies doesn't allow all the CTB rows to simultaneously start decoding. Therefore, the rows don't finish the decoding at the same time either. This introduces parallelization inefficiencies that become more evident when a high number of WPP threads are used for decoding.</p><p id="p-0055" num="0065">Overlapped Wavefront (OWF) Parallelism improves the implementation efficiency of WPP by overlapping the execution of consecutive pictures. The dependency in OWF technique is caused by motion search. In OWF, a CTU is not ready for decoding until all its reference pixels within the motion search area in the reference picture have been decoded. The motion search dependency limits the throughput of frame-level parallel processing threads for encoding multiple frames. This problem worsens when the center of the search window (decided by a motion predictor) is located toward the lower part of the reference pictures. On the other hand, restricting the motion vector leads to noticeable coding loss for videos that exhibit fast vertical motion.</p><p id="p-0056" num="0066">Therefore, none of the parallelization techniques can fully utilizes the CPU processing capabilities available on today's multi-core systems.</p><p id="p-0057" num="0067">The described embodiments address the limitation with existing parallelization techniques and fully utilizes the available CPU computation resource without compromising on the coding efficiency. The proposed Multi-threaded (MT) framework uses CTU level parallel processing techniques without compromising on the memory bandwidth. Picture level parallel processing separates the sequence into temporal levels by considering the picture's referencing hierarchy. This disclosure discusses various optimization techniques used to achieve real-time VVC decoding on heterogenous platforms with multi-core CPUs, for those bitstreams generated using VVC reference encoder with default configuration. Equivalent techniques proposed for the decoder could also be used with the VVC encoder framework.</p><p id="p-0058" num="0068">The current VVC draft includes several aspects to make the coding process parallelizable. This includes Tiles and Wavefront Parallel Processing (WPP). Employing Tiles for parallelism introduces coding losses since there is no dependency among tiles. WPP divides slices into CTU rows and processes rows in parallel while preserving coding dependencies.</p><p id="p-0059" num="0069">The current embodiments propose a finer granularity of parallelism without compromising on the coding efficiency. The section titled &#x201c;Parallelization of CABAC with slice decoding stages&#x201d; presents the finer granularity of the parallelism achieved by processing CABAC decoding and the rest of the slice decoding stages referred as reconstruction decoding stages. The architectural diagram of slice/picture decoding stages is shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Parallelization of each of the reconstruction decoding stages e.g. Inter, Intra, Re-shaper and In-loop filter as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> are described in the section titled &#x201c;Parallelization of slice decoding stages&#x201d;.</p><p id="p-0060" num="0070">In summary, the key contributions to improve the finer granularity parallelism of the pipeline multistage VVC decoder are as follows:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0071">In the intra CU reconstruction stage all the disjoint/independent intra CTUs (CTU with all its intra coded CUs reference pixels coded in inter mode) can be reconstructed in parallel once their referenced pixels inter CU (left, top and top-right blocks) reconstruction process is completed;</li>        <li id="ul0010-0002" num="0072">Inter CU and the inter prediction of Combined Inter and Intra Prediction (CIIP) CU prediction process can be parallelized across all CTUs of a picture.</li>        <li id="ul0010-0003" num="0073">In order to balance the computational complexity, the WPP enabled CABAC decoding can be executed in parallel with the reconstruction decoding stages. The number of initially allocated threads for CABAC decoding of a picture varies dynamically based on the CABAC performance of the previous pictures;</li>        <li id="ul0010-0004" num="0074">Multiple stages of the decoder pipeline can be executed in parallel with in a picture and across temporal layer pictures. For example, CUMV, inter CU reconstruction and intra CU reconstruction decoding stages can be executed in parallel within a picture or across pictures;</li>        <li id="ul0010-0005" num="0075">Pre-analysis to find the location of first dependent CU in each CTU and utilize the information to improve Wavefront Parallel Processing (WPP) parallelization at CUMV and intra CU reconstruction stages;</li>        <li id="ul0010-0006" num="0076">In order to avoid scanning of the picture multiple times, de-blocking filter is parallelized by interleaving horizontal and vertical filtering stages. The number of horizontal and vertical edges within and between CTUs are calculated to evenly distribute the filtering workload among threads;</li>        <li id="ul0010-0007" num="0077">An additional condition is added to switch off DMVR adaptively. DMVR is used for merge candidates only when length of the motion vector is less than a pre-defined threshold. Disabling DMVR based on the length of motion vector leads to availability of reference areas and increases the DMVR parallelism.</li>    </ul>    </li></ul></p><p id="p-0061" num="0078">The parallelization approaches for VVC decoding stages can be categorized into one of the following 3 categories. The category is selected for each decoding stage based on decoding dependency between CTUs. They are:</p><p id="p-0062" num="0079">I. CTU level parallelization (CTUP);</p><p id="p-0063" num="0080">II. Improved Overlapped Wavefront (IOWF) parallelization;</p><p id="p-0064" num="0081">III. Load sharing based parallelization.</p><p id="p-0065" num="0082">Approach I is chosen for VVC decoding stages without CTU level dependency, e.g. Re-shaping, Sample Adaptive Offset (SAO). Approach II is chosen for the VVC decoding stages that have CTU level dependency with intra CU prediction.</p><p id="p-0066" num="0083">Approach I of our pipeline design adds fine granularity parallelism to the existing tile-based approach. It is based on flexible partitioning of the picture into CTUs such that dependencies between multiple CTU partition is prohibited. The number of CUs processed per threads is dynamically varied based on the QTBT partitioning.</p><p id="p-0067" num="0084">Approach II of our pipeline design addresses the inefficiencies of Wavefront Parallel Processing (WPP) by following an Improved Overlapped Wavefront (IOWF) approach. IOWF proposed in these embodiments allow for overlapping the execution of consecutive pictures, regions e.g. CUs within CTUs of a picture and decoding stages within a picture using Wavefronts. The section titled &#x201c;Parallelization of CABAC with slice decoding stages&#x201d; below emphasizes on the pipeline design that is based on Approach II.</p><p id="p-0068" num="0085">Approach III of our pipeline design parallelizes modules that are difficult to parallelize due to high branch divergence and low data parallelism. CABAC decoding falls under this category. Therefore, CABAC decoding is performed in parallel with the reconstruction decoding stages of the slice as explained in the section titled &#x201c;Parallelization of CABAC with slice decoding stages&#x201d;.</p><p id="p-0069" num="0000">Parallelization of CABAC with Slice Decoding Stages</p><p id="p-0070" num="0086">Parallelization of CABAC with the slice decoding stages is based on proposed Approach III. One of the main reasons for VVC decoder latency is the data dependency for context selection of the CABAC engine. This is mainly because, content selection for a bin depends on the value of a previously decoded bin. This dependency is a bottleneck to achieve CABAC parallelism particularly at the decoder. This in turn adds to the decoder latency. This latency can be reduced if CABAC decoding of a picture is done in parallel with the reconstruction decoding stages of other pictures.</p><p id="p-0071" num="0000">Load balancing between CABAC and the reconstruction decoding stages consists of following stages.</p><p id="p-0072" num="0087">I. Thread Priority Scheduling<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0088">The CABAC decoding complexity would dictate the thread execution priority. For example, CABAC decoding complexity of an intra slice is much higher compared to the other slices. So, intra slice CABAC decoding activity can be scheduled earlier than its previous picture in decoding order. Similarly, complexity of temporal layer 0 picture CABAC decoding is higher than temporal layer 1 etc. So next group of pictures (GOP) lower temporal layer picture(s) CABAC decoding can be scheduled in parallel with previous GOP higher temporal layer picture(s) CABAC decoding. This way, the fluctuation in CABAC decoding time can be balanced between temporal layer pictures. Thus, thread scheduling is prioritized based on following.        <ul id="ul0013" list-style="none">            <li id="ul0013-0001" num="0089">Early scheduling of CABAC decoding process for a picture based on the estimated complexity of that frame/slice.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0073" num="0090">II. Thread Allocation for WPP enabled CABAC decoding<ul id="ul0014" list-style="none">    <li id="ul0014-0001" num="0000">    <ul id="ul0015" list-style="none">        <li id="ul0015-0001" num="0091">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the initial number of threads allocated for WPP enabled CABAC decoding of a picture is dependent on frame decoding complexity. More threads are allocated for CABAC decoding if the frame decoding complexity is high e.g. for low QP, intra frame, inter pictures or lower temporal layers. Once number of threads are allocated for CABAC decoding, remaining available threads are allocated to process the reconstruction decoding stages of previous pictures. The total number of available threads is distributed between CABAC and the reconstruction decoding stages in the following manner.        <ul id="ul0016" list-style="none">            <li id="ul0016-0001" num="0092">Higher number of threads are assigned for CABAC decoding of frames with low QP compared to high QP, intra frame in comparison to inter frame, for P pictures or when the picture is in the lower temporal layer.</li>            <li id="ul0016-0002" num="0093">Higher number of threads are allocated for CABAC decoding for pictures with multiple tiles and slices in comparison to pictures with a single tile or single slice.</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0074" num="0094">III. Dynamic Variation of Allocation<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0095">The number of initially allocated threads for WPP enabled CABAC decoding of a picture is varied dynamically based on the performance of the initial allocation. The wait time between CABAC and reconstruction decoding stages based on the initial allocation may be used as a thread allocation criterion. The goal of dynamic variation of number of threads allocated to CABAC and reconstruction decoding stages is to reduce per frame CABAC processing time fluctuation.        <ul id="ul0019" list-style="none">            <li id="ul0019-0001" num="0096">Number of threads allocated for CABAC decoding of the current frame is increased if time taken to process a similar previous frame is higher than the real-time constraints.</li>            <li id="ul0019-0002" num="0097">The number of threads allocated for CABAC decoding of the current frame is reduced if the wait time between CABAC decoding and reconstruction decoding stages is higher.</li>            <li id="ul0019-0003" num="0098">One of multiple previous frames could be used in deciding on dynamic variation of allocation.</li>            <li id="ul0019-0004" num="0099">Weight of the previous frames in deciding the dynamic assignment of threads for the current frame is varied based on POC distance, temporal layer &#x26; frame type</li>        </ul>        </li>    </ul>    </li></ul></p><heading id="h-0006" level="2">Parallelization of Slice Decoding Stages</heading><p id="p-0075" num="0100">The individual decoding stages after CABAC decoding are parallelized using Approaches I and II. The pipeline design follows the principal of overlapped execution of multiple decoding blocks that can be processed in parallel. If a thread has finished execution of a block, it will continue executing the next available block. The parallel processing partitions the picture into CTUs or CTU rows without affecting the dependencies. Such overlapped execution may occur within one decoder module or between modules. The sub-sections elaborate on this.</p><heading id="h-0007" level="2">Thread Scheduling</heading><p id="p-0076" num="0101">This section illustrates the thread scheduling mechanism shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> for CUMV stage elaborated below in the section &#x201c;CUMV generation&#x201d;. A thread pool and a first in first out (FIFO) activity queue is created for processing the reconstruction decoding stages activities. A thread pool is created based on the number of available CPU cores in the heterogeneous multi-core system. Any free thread from the thread pool fetches the first available task from the activity queue and executes the activity utilizing the CPU capabilities. Slice decoding thread pushes the list of tasks to be performed for decoding the slice/picture into activity queue. Slice decoding thread initially pushes CU motion vector generation of 1<sup>st </sup>CTU row task with the dependency flag set to false and 2<sup>nd </sup>CTU row task with dependency flag set to true until the last CTU row. A free worker thread referred as 1<sup>st </sup>worker thread will fetch the first available activity from task queue and performs CU motion vector generation of the 1<sup>st </sup>CTU and continues till the last CTU in the 1<sup>st </sup>row without any dependency. Another free worker thread fetches the next activity from the queue (2<sup>nd </sup>CTU row CU motion vector generation) and process the activity in parallel with 1<sup>st </sup>worker thread with WPP dependency. This process continues for all the slice/picture decoding stages.</p><heading id="h-0008" level="2">GPU Parallel Processing</heading><p id="p-0077" num="0102">The parallelization schemes proposed in the sections titled &#x201c;Parallelization within decoding stages&#x201d; and &#x201c;Parallelization between Decoding Stages&#x201d; are appropriate for GPU parallelization scheme as well. The VVC decoding architecture is modified in order to reduce GPU memory usage e.g. global, cache or constant memory usage and to reduce GPU memory access. Instead of SIMD optimization used for CPU parallelization, GPU vector instruction is exploited to increase parallelization. Moreover, the GPU kernel launch is done immediately following file read operation. This removes the performance limitation due to memory transfers.<br/>Parallelization within Decoding Stages<br/>ZCurrent VVC design sequentially processes the decoding stages for each CTU. This design is not parallelization friendly. To improve the degree of parallelism of the VVC decoder stages, it is proposed to divide the decoding stages for each picture into the following sub-tasks.</p><p id="p-0078" num="0103">1. CU motion vector (CUMV) generation</p><p id="p-0079" num="0104">2. Inter CU reconstruction<ul id="ul0020" list-style="none">    <li id="ul0020-0001" num="0000">    <ul id="ul0021" list-style="none">        <li id="ul0021-0001" num="0105">a. Combined inter intra Prediction (CIIP)</li>        <li id="ul0021-0002" num="0106">b. Decoder Motion Vector Refinement (DMVR)</li>    </ul>    </li></ul></p><p id="p-0080" num="0107">3. Intra CU reconstruction</p><p id="p-0081" num="0108">4. Inverse reshaping</p><p id="p-0082" num="0109">5. In-loop filtering<ul id="ul0022" list-style="none">    <li id="ul0022-0001" num="0000">    <ul id="ul0023" list-style="none">        <li id="ul0023-0001" num="0110">a. De-blocking Filter</li>        <li id="ul0023-0002" num="0111">b. Adaptive Loop Filter</li>        <li id="ul0023-0003" num="0112">c. Sample Adaptive Offset</li>    </ul>    </li></ul></p><heading id="h-0009" level="2">CUMV Generation</heading><p id="p-0083" num="0113">CU motion vector derivation process is completed for the entire inter slice/picture before proceeding to the reconstruction process. CU motion vector derivation can depend on its left, top and/or top right neighbor CU motion vector, which is referred as Wave front parallel processing (WPP) dependency. To achieve better parallel processing capabilities, each CTU row will be pushed to the activity queue in the order of increasing CTU number. As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a free worker thread from the thread pool will fetch the first available CTU row from the activity queue and generates the motion vector of CTUs in sequential order until completion of the entire CTU row. Each worker thread makes sure that always the top right CTU has completed generating the motion vectors before proceeding to the current CTU motion vector generation. This way, a maximum of H (number of CTU rows) worker threads can be used for parallel processing of the entire picture motion vector generation. <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates the CUMV motion vector derivation process. The variables used in <figref idref="DRAWINGS">FIG. <b>8</b></figref> are explained in Table 1.</p><p id="p-0084" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>CUMV Variables definition</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><tbody valign="top"><row><entry/><entry>Variables</entry><entry>Definitions</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Module(i)</entry><entry>i-th block in CUMV motion derivation process</entry></row><row><entry/><entry>NT<sub>max</sub></entry><entry>Maximum number of threads for CUMV module</entry></row><row><entry/><entry>NT</entry><entry>Number of threads allocated for CUMV module</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>The steps used to derive the CUMV motion vectors can be summarized as follows.<ul id="ul0024" list-style="none">    <li id="ul0024-0001" num="0000">    <ul id="ul0025" list-style="none">        <li id="ul0025-0001" num="0114">Pre-analysis to determine location of first CU in each CTU that depends on its top right CTU</li>        <li id="ul0025-0002" num="0115">CUs till the location of the first CU in the current CTU, as in Step <b>1</b>, can be processed in parallel with its top right CTU</li>        <li id="ul0025-0003" num="0116">Remaining CUs of each CTU would require availability of the top right dependent CU but not the entire top right CTU</li>    </ul>    </li></ul></p><heading id="h-0010" level="2">Inter CU Reconstruction</heading><p id="p-0085" num="0117">After CU motion vector derivation for the entire picture, inter CU reconstruction process has been separated from intra &#x26; CIIP mode reconstruction process. The inter CU reconstruction algorithm is elaborated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The variables used in <figref idref="DRAWINGS">FIG. <b>9</b></figref> are explained in Table 2.</p><p id="p-0086" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Inter CU reconstruction Variables definition</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><tbody valign="top"><row><entry/><entry>Variables</entry><entry>Definitions</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>InterCU(i)</entry><entry>i-th interCU reconstruction decoding stage</entry></row><row><entry/><entry>NT<sub>max</sub></entry><entry>Maximum number of threads for the module</entry></row><row><entry/><entry>NT</entry><entry>Number of threads currently working on module</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0087" num="0118">The rest of the decoding thread pushes the inter CU reconstruction process of a CTU or a group of CTUs to the activity queue in the increasing CTU number order. A free worker thread from the thread pool will fetch the first available CTU or CTU group from the activity queue and performs the inter CU reconstruction process of the entire CTU or CTU group (one after the other CTU). All the worker threads perform the inter CU reconstruction process of its CTU group in parallel utilizing multiple CPU/GPU cores available in the system. This way the complexity of the whole slice/picture inter CU reconstruction can be reduced drastically.</p><p id="p-0088" num="0119">I. CIIP</p><p id="p-0089" num="0000">When a CU is coded in merge mode with the number of luma samples greater than 64 and both CU width and CU height is less than or equal to 128 an additional flag signals the usage of combined inter/intra CU prediction (CIIP) mode. Since the combined inter with intra for the current CU, the inter prediction of the CIIP mode CU can be combined with other inter CU prediction process. Inter CU and CIIP inter CU prediction process can be parallelized across all CTUs of a picture. This way the CIIP inter CU reconstruction process time can be reduced significantly by processing them in parallel using multiple worker threads. CIIP intra CU reconstruction process is combined with other intra CUs reconstruction process.</p><p id="p-0090" num="0120">II. DMVR</p><p id="p-0091" num="0121">VVC allows to obtain refined motion vectors without transmission of refined motion vector and thus reduces the computation complexity of the encoder. However, in the process DMVR increases the computational workload and the processing time of the decoder. In DMVR, the computational complexity arises due to the search scheme around the search center, the metric used e.g. Sum of Absolute Difference (SAD) to choose the refinement and the bi-linear interpolation to interpolate fractional pixel positions.</p><p id="p-0092" num="0122">As the size of the motion vectors (MV) are restricted in either the encoder or decoder, lesser number of reference areas would be necessary to calculate DMVR output for the current CU. Therefore, restricting the number of the search points or the size of the MV within a region would increase DMVR parallelism at the cost of describing fast motion.</p><p id="p-0093" num="0123">DMVR can be switched on and off adaptively without signalling overhead. The MV refinement process operates only when the following conditions are satisfied.<ul id="ul0026" list-style="none">    <li id="ul0026-0001" num="0000">    <ul id="ul0027" list-style="none">        <li id="ul0027-0001" num="0124">The coding unit is a merge mode</li>        <li id="ul0027-0002" num="0125">Uni-directional, ATMVP, STMVP, affine and merge candidate using IC mode are excluded</li>        <li id="ul0027-0003" num="0126">Only one of (POC<sub>ref0</sub>&#x2212;POC<sub>cur</sub>) and (POC<sub>ref1</sub>&#x2212;POC<sub>cur</sub>) values is negative</li>    </ul>    </li></ul></p><p id="p-0094" num="0127">In at least one of the described embodiments, an additional condition is added to only use DMVR when length of the motion vector is less than a pre-defined threshold. Disabling DMVR based on the length of motion vector lead to availability of reference areas and increase the DMVR parallelism for merge candidates that is bi predicted.</p><heading id="h-0011" level="2">Intra CU Reconstruction</heading><p id="p-0095" num="0128">A traditional WPP parallelization of the intra CU prediction treat each CTU row as an independent region. On the CTU level, each CTU must wait until its left and top-right neighboring CTUs finish reconstruction. This process makes the current CTU row always two CTU latent than its adjacent upper row. To mitigate this issue, the general aspects described herein propose the following stages for intra CU prediction parallelization.</p><p id="p-0096" num="0129">I. Pre-Analysis<ul id="ul0028" list-style="none">    <li id="ul0028-0001" num="0000">    <ul id="ul0029" list-style="none">        <li id="ul0029-0001" num="0130">Pre-analysis stage determines the location of first dependent CU for each CTU that depends on top right CTU</li>        <li id="ul0029-0002" num="0131">Find the number of disjoint CTUs in a picture. A disjoint CTU is one in which all its intra coded CUs reference pixels are coded in inter mode.</li>    </ul>    </li></ul></p><p id="p-0097" num="0132">II. Parallelization Scheme<ul id="ul0030" list-style="none">    <li id="ul0030-0001" num="0000">    <ul id="ul0031" list-style="none">        <li id="ul0031-0001" num="0133">Based on the above pre-analysis results, CUs till the location of the first dependent CU in current CTU can be processed in parallel with its top right CTU</li>        <li id="ul0031-0002" num="0134">All the disjoint intra CUs can be reconstructed in parallel once their referenced pixels inter CU (left, top and top-right blocks) reconstruction process is completed. A free worker thread can process a constant number of disjoint intra CUs. When more disjoint intra coded CUs are available, each free worker thread can process a constant number of disjoint CUs in parallel with other worker threads.</li>        <li id="ul0031-0003" num="0135">Disjoint intra coded CTUs in the top rows will have higher priority. Each disjoint CTU in the top rows will be processed by a free worker thread. With this thread scheduling method, the top rows' intra CU reconstruction process can be completed faster and can reduce the wait time significantly for the next CTU rows. As shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, each disjoint CTU in the first row is processed by a free worker thread after the inter CU reconstruction process completion of that CTU.</li>        <li id="ul0031-0004" num="0136">A WPP thread executes the 1<sup>st </sup>CTU row intra CU reconstruction process for the remaining CTUs in sequence. This WPP thread runs in parallel with the above disjoint CTUs reconstruction process.</li>    </ul>    </li></ul></p><heading id="h-0012" level="2">De-Blocking Filter</heading><p id="p-0098" num="0137">The de-blocking is a module in the VVC loop-filtering stage immediately following the inverse re-shaper. In VVC, the vertical de-blocking filtering stage is based on the horizontally de-blocking filtered output. Therefore, current design sequentially processes the horizontal and vertical filtering stages. However, there is no data dependency between CTUs for either the horizontal or vertical filtering stages. Thus, all CTUs for the whole frame can be processed in parallel. The section &#x201c;Interleaved grouping&#x201d; below, proposes techniques to interleave the horizontal and the vertical filtering stages and to mitigate increased memory access due to CTU level parallelization.</p><p id="p-0099" num="0138">IV. Edge Based CTU Grouping</p><p id="p-0100" num="0000">In VVC, the maximum allowed CTU size is 128&#xd7;128. Thus, for a de-blocking performed on a 8&#xd7;8 grid the maximum number of permissible vertical edges are: 128/8=16. However, due to QTBTTT partitioning the number of vertical and horizontal edges may vary within and between CTUs. Therefore, in order to evenly distribute the processing load between threads it is processed to distribute the task per thread based on the number of pre-defined edges.</p><p id="p-0101" num="0139">V. Region of Interest (ROI) Based CTU Grouping</p><p id="p-0102" num="0000">Instead of grouping consecutive CTU rows for thread assignment, a region of interest (ROI) may be chosen for per thread processing. Grouping the CTUs for DBF processing based on Region of Interest would lead to better handling of memory.</p><p id="p-0103" num="0140">VI. Interleaved Grouping</p><p id="p-0104" num="0141">Existing VVC design sequentially processes the horizontal and vertical filtering stages. This requires multiple scanning of the picture and increases memory access. Instead of sequentially processing the entire picture, it is proposed here to interleave the horizontal and vertical filtering stages. 2 CTU rows horizontal filtering is processed in the 1<sup>st </sup>pass followed by vertical filtering. This guarantees the availability of horizontally filtered pixels for the current CTU row and the below CTU row before vertical filtering of the current CTU row begins. <figref idref="DRAWINGS">FIG. <b>12</b></figref> shows the joint parallelization of the horizontal and vertical deblocking stages. The variables used are explained in Table 3.</p><p id="p-0105" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Interleaved Horizontal &#x26; Vertical De-</entry></row><row><entry>blocking Filter Variables definition</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="154pt" align="left"/><tbody valign="top"><row><entry/><entry>Variables</entry><entry>Definitions</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>HORDBF(i)</entry><entry>i-th horizontal de-blocking filter decoding stage</entry></row><row><entry/><entry>VERDBF(i)</entry><entry>i-th vertical de-blocking filter decoding stage</entry></row><row><entry/><entry>NT<sub>max</sub></entry><entry>Maximum number of threads for the module</entry></row><row><entry/><entry>NT</entry><entry>Number of threads currently working on module</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0013" level="2">Parallelization Between Decoding Stages</heading><p id="p-0106" num="0142">The parallelization between decoding stages is based on Approach I. The data structures and dependencies between the video coding stages limits the possibility of parallelism within and between stages. For example, decoding modules such as CABAC has high branch divergence and low data parallelism. Likewise, modules such as loop-filtering with low branch divergence and higher data parallelism are good candidates for parallel processing. Proposed parallelization techniques perform such analysis of the VVC decoder based on the criteria of branch divergence and data parallelism to determine the effectiveness of parallelizing one module over another. Below are explained the steps for joint parallelization of the VVC modules that simultaneously allow low branch divergence and yet high data divergence.</p><heading id="h-0014" level="2">Parallel Processing of Temporal Layer Pictures</heading><p id="p-0107" num="0143">The decoding framerate as well as the latency can be simultaneously reduced by parallel decoding of the temporal picture layers. For example, a new reference picture occupies a lower temporal layer in comparison to a non-reference picture and vice versa. To process consecutive frames in parallel, the following stage are performed in succession:<ul id="ul0032" list-style="none">    <li id="ul0032-0001" num="0000">    <ul id="ul0033" list-style="none">        <li id="ul0033-0001" num="0144">Complete the prediction process of the collocated CU, bottom and top right CU in the reference picture.</li>        <li id="ul0033-0002" num="0145">Start the Inverse re-shaping and De-blocking of the collocated CU in reference picture after the bottom and right CU prediction process is completed.</li>        <li id="ul0033-0003" num="0146">Apply inverse re-shaping and loop-filtering on the collocated CU in parallel with other CUs prediction process in the reference picture.</li>        <li id="ul0033-0004" num="0147">Generate the prediction buffer for the current CU.</li>    </ul>    </li></ul></p><heading id="h-0015" level="2">Parallel Processing of Multiple Decoding Modules in a Picture</heading><p id="p-0108" num="0148">To achieve efficient parallelization of multiple decoding modules two factors are considered. They are: High branch divergence and Percentage of total decoding time Based on our profiling analysis, inter CU prediction, loop-filtering stage occupies very high percentage of decoding time. On the other hand, intra CU prediction module had high branch divergence. Sub-stages within and between such modules are decoded in parallel to minimize total decoding time.</p><p id="p-0109" num="0149">I. CUMV Generation and Inter CU Reconstruction</p><p id="p-0110" num="0000">Parallelization between CUMV generation and inter CU reconstruction follows Approach II and uses following steps.<ul id="ul0034" list-style="none">    <li id="ul0034-0001" num="0000">    <ul id="ul0035" list-style="none">        <li id="ul0035-0001" num="0150">CU MV generation of the entire picture in parallel following WPP dependency after CABAC decoding</li>        <li id="ul0035-0002" num="0151">Inter CU reconstruction for the entire picture in parallel</li>        <li id="ul0035-0003" num="0152">Scheduling inter CU reconstruction of top row CTUs in parallel with CUMV generation of other CTUs        <ul id="ul0036" list-style="none">            <li id="ul0036-0001" num="0153">After the completion of top CTU rows CU MV generation process, those free worker threads will be assigned to inter CU reconstruction process instead of other CTU rows CU MV generation process. Early allocation of worker threads to below rows CU MV generation process will lead to resource wastage as they have WPP dependency from their top CTU rows. Allocating those worker threads to inter CU reconstruction process will help in utilizing the resources effectively.</li>        </ul>        </li>        <li id="ul0035-0004" num="0154">As shown in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, inter CU reconstruction process of top CTU rows has been started using a number free worker threads while the CU motion vector generation process is executed by WPP worker threads for the lower CTU rows.</li>    </ul>    </li></ul></p><p id="p-0111" num="0155">II. CUMV Generation, Inter and Intra CU Reconstruction</p><p id="p-0112" num="0156">The joint parallelization of the inter CU and the intra CU reconstruction stage is shown in <figref idref="DRAWINGS">FIG. <b>11</b></figref> and associated parameters explained in Table 4. The intra CU reconstruction follows the inter CU reconstruction process. However, top row CTUs intra CU reconstruction process can be executed in parallel with inter CU reconstruction of other CTUs (e.g. last rows CTUs). This would ensure availability of inter CU reconstruction samples while simultaneously benefiting from joint parallelization of inter CU and intra CU reconstruction.</p><p id="p-0113" num="0157">As shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, motion vector generation, inter and intra CU reconstruction decoding stages can be overlapped. When a WPP thread completed CU MV generation of a particular CTU row, the free worker thread can be used for inter CU reconstruction. Once the inter CU reconstruction of a predefined number of CTUs is completed, a free worker thread can start executing the 1<sup>st </sup>CTU row intra CU reconstruction process. By the time another free worker thread starts executing the 2<sup>nd </sup>CTU row intra CU reconstruction process, many CTUs intra CU reconstruction process in the 1<sup>st </sup>CTU row has been completed. This way, the delay in the 2<sup>nd </sup>CTU row intra CU reconstruction process due to WPP dependency can be minimized significantly.</p><p id="p-0114" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Joint inter and intra CU reconstruction Variables definition</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><tbody valign="top"><row><entry/><entry>Variables</entry><entry>Definitions</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>InterCU(i)</entry><entry>i-th inter CU reconstruction decoding stage</entry></row><row><entry/><entry>IntraCU(i)</entry><entry>i-th intra CU reconstruction decoding stage</entry></row><row><entry/><entry>NT<sub>max</sub></entry><entry>Maximum number of threads for both the modules</entry></row><row><entry/><entry>NT</entry><entry>Number of total threads working on both module</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0115" num="0158">III. Inverse Re-Shaping and Intra CU Reconstruction</p><p id="p-0116" num="0159">CTU level inverse re-shaping process and the inter, intra CU reconstruction of other CTUs are executed in parallel. As shown in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, inverse reshaping process for the top CTU rows can be scheduled using a free worker thread before completion of the inter and intra CU reconstruction of entire picture. This early scheduling enables the top row CTUs entire reconstruction process including the De-blocking, SAO and ALF completion before the inter &#x26; intra CU reconstruction completion of the entire picture. Once the top CTU rows reconstruction is completed, the next dependent pictures decoding can be started in parallel with the current picture decoding.</p><p id="p-0117" num="0160"><figref idref="DRAWINGS">FIG. <b>16</b>A</figref> is a diagram illustrating an example communications system <b>100</b> in which one or more disclosed embodiments may be implemented. The communications system <b>100</b> may be a multiple access system that provides content, such as voice, data, video, messaging, broadcast, etc., to multiple wireless users. The communications system <b>100</b> may enable multiple wireless users to access such content through the sharing of system resources, including wireless bandwidth. For example, the communications systems <b>100</b> may employ one or more channel access methods, such as code division multiple access (CDMA), time division multiple access (TDMA), frequency division multiple access (FDMA), orthogonal FDMA (OFDMA), single-carrier FDMA (SC-FDMA), zero-tail unique-word DFT-Spread OFDM (ZT UW DTS-s OFDM), unique word OFDM (UW-OFDM), resource block-filtered OFDM, filter bank multicarrier (FBMC), and the like.</p><p id="p-0118" num="0161">As shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref>, the communications system <b>100</b> may include wireless transmit/receive units (WTRUs) <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d</i>, a RAN <b>104</b>, a CN <b>106</b>, a public switched telephone network (PSTN) <b>108</b>, the Internet <b>110</b>, and other networks <b>112</b>, though it will be appreciated that the disclosed embodiments contemplate any number of WTRUs, base stations, networks, and/or network elements. Each of the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d </i>may be any type of device configured to operate and/or communicate in a wireless environment. By way of example, the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d</i>, any of which may be referred to as a &#x201c;station&#x201d; and/or a &#x201c;STA&#x201d;, may be configured to transmit and/or receive wireless signals and may include a user equipment (UE), a mobile station, a fixed or mobile subscriber unit, a subscription-based unit, a pager, a cellular telephone, a personal digital assistant (PDA), a smartphone, a laptop, a netbook, a personal computer, a wireless sensor, a hotspot or Mi-Fi device, an Internet of Things (loT) device, a watch or other wearable, a head-mounted display (HMD), a vehicle, a drone, a medical device and applications (e.g., remote surgery), an industrial device and applications (e.g., a robot and/or other wireless devices operating in an industrial and/or an automated processing chain contexts), a consumer electronics device, a device operating on commercial and/or industrial wireless networks, and the like. Any of the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>and <b>102</b><i>d </i>may be interchangeably referred to as a UE.</p><p id="p-0119" num="0162">The communications systems <b>100</b> may also include a base station <b>114</b><i>a </i>and/or a base station <b>114</b><i>b</i>. Each of the base stations <b>114</b><i>a</i>, <b>114</b><i>b </i>may be any type of device configured to wirelessly interface with at least one of the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d </i>to facilitate access to one or more communication networks, such as the CN <b>106</b>, the Internet <b>110</b>, and/or the other networks <b>112</b>. By way of example, the base stations <b>114</b><i>a</i>, <b>114</b><i>b </i>may be a base transceiver station (BTS), a Node-B, an eNode B, a Home Node B, a Home eNode B, a gNB, a NR NodeB, a site controller, an access point (AP), a wireless router, and the like. While the base stations <b>114</b><i>a</i>, <b>114</b><i>b </i>are each depicted as a single element, it will be appreciated that the base stations <b>114</b><i>a</i>, <b>114</b><i>b </i>may include any number of interconnected base stations and/or network elements.</p><p id="p-0120" num="0163">The base station <b>114</b><i>a </i>may be part of the RAN <b>104</b>, which may also include other base stations and/or network elements (not shown), such as a base station controller (BSC), a radio network controller (RNC), relay nodes, etc. The base station <b>114</b><i>a </i>and/or the base station <b>114</b><i>b </i>may be configured to transmit and/or receive wireless signals on one or more carrier frequencies, which may be referred to as a cell (not shown). These frequencies may be in licensed spectrum, unlicensed spectrum, or a combination of licensed and unlicensed spectrum. A cell may provide coverage for a wireless service to a specific geographical area that may be relatively fixed or that may change over time. The cell may further be divided into cell sectors. For example, the cell associated with the base station <b>114</b><i>a </i>may be divided into three sectors. Thus, in one embodiment, the base station <b>114</b><i>a </i>may include three transceivers, i.e., one for each sector of the cell. In an embodiment, the base station <b>114</b><i>a </i>may employ multiple-input multiple output (MIMO) technology and may utilize multiple transceivers for each sector of the cell. For example, beamforming may be used to transmit and/or receive signals in desired spatial directions.</p><p id="p-0121" num="0164">The base stations <b>114</b><i>a</i>, <b>114</b><i>b </i>may communicate with one or more of the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d </i>over an air interface <b>116</b>, which may be any suitable wireless communication link (e.g., radio frequency (RF), microwave, centimeter wave, micrometer wave, infrared (IR), ultraviolet (UV), visible light, etc.). The air interface <b>116</b> may be established using any suitable radio access technology (RAT).</p><p id="p-0122" num="0165">More specifically, as noted above, the communications system <b>100</b> may be a multiple access system and may employ one or more channel access schemes, such as CDMA, TDMA, FDMA, OFDMA, SC-FDMA, and the like. For example, the base station <b>114</b><i>a </i>in the RAN <b>104</b> and the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may implement a radio technology such as Universal Mobile Telecommunications System (UMTS) Terrestrial Radio Access (UTRA), which may establish the air interface <b>116</b> using wideband CDMA (WCDMA). WCDMA may include communication protocols such as High-Speed Packet Access (HSPA) and/or Evolved HSPA (HSPA+). HSPA may include High-Speed Downlink (DL) Packet Access (HSDPA) and/or High-Speed UL Packet Access (HSUPA).</p><p id="p-0123" num="0166">In an embodiment, the base station <b>114</b><i>a </i>and the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may implement a radio technology such as Evolved UMTS Terrestrial Radio Access (E-UTRA), which may establish the air interface <b>116</b> using Long Term Evolution (LTE) and/or LTE-Advanced (LTE-A) and/or LTE-Advanced Pro (LTE-A Pro).</p><p id="p-0124" num="0167">In an embodiment, the base station <b>114</b><i>a </i>and the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may implement a radio technology such as NR Radio Access, which may establish the air interface <b>116</b> using New Radio (NR).</p><p id="p-0125" num="0168">In an embodiment, the base station <b>114</b><i>a </i>and the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may implement multiple radio access technologies. For example, the base station <b>114</b><i>a </i>and the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may implement LTE radio access and NR radio access together, for instance using dual connectivity (DC) principles. Thus, the air interface utilized by WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may be characterized by multiple types of radio access technologies and/or transmissions sent to/from multiple types of base stations (e.g., a eNB and a gNB).</p><p id="p-0126" num="0169">In other embodiments, the base station <b>114</b><i>a </i>and the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c </i>may implement radio technologies such as IEEE 802.11 (i.e., Wireless Fidelity (WiFi), IEEE 802.16 (i.e., Worldwide Interoperability for Microwave Access (WiMAX)), CDMA2000, CDMA2000 1&#xd7;, CDMA2000 EV-DO, Interim Standard 2000 (IS-2000), Interim Standard 95 (IS-95), Interim Standard 856 (IS-856), Global System for Mobile communications (GSM), Enhanced Data rates for GSM Evolution (EDGE), GSM EDGE (GERAN), and the like.</p><p id="p-0127" num="0170">The base station <b>114</b><i>b </i>in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref> may be a wireless router, Home Node B, Home eNode B, or access point, for example, and may utilize any suitable RAT for facilitating wireless connectivity in a localized area, such as a place of business, a home, a vehicle, a campus, an industrial facility, an air corridor (e.g., for use by drones), a roadway, and the like. In one embodiment, the base station <b>114</b><i>b </i>and the WTRUs <b>102</b><i>c</i>, <b>102</b><i>d </i>may implement a radio technology such as IEEE 802.11 to establish a wireless local area network (WLAN). In an embodiment, the base station <b>114</b><i>b </i>and the WTRUs <b>102</b><i>c</i>, <b>102</b><i>d </i>may implement a radio technology such as IEEE 802.15 to establish a wireless personal area network (WPAN). In yet another embodiment, the base station <b>114</b><i>b </i>and the WTRUs <b>102</b><i>c</i>, <b>102</b><i>d </i>may utilize a cellular-based RAT (e.g., WCDMA, CDMA2000, GSM, LTE, LTE-A, LTE-A Pro, NR etc.) to establish a picocell or femtocell. As shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref>, the base station <b>114</b><i>b </i>may have a direct connection to the Internet <b>110</b>. Thus, the base station <b>114</b><i>b </i>may not be required to access the Internet <b>110</b> via the CN <b>106</b>.</p><p id="p-0128" num="0171">The RAN <b>104</b> may be in communication with the CN <b>106</b>, which may be any type of network configured to provide voice, data, applications, and/or voice over internet protocol (VoIP) services to one or more of the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d</i>. The data may have varying quality of service (QoS) requirements, such as differing throughput requirements, latency requirements, error tolerance requirements, reliability requirements, data throughput requirements, mobility requirements, and the like. The CN <b>106</b> may provide call control, billing services, mobile location-based services, pre-paid calling, Internet connectivity, video distribution, etc., and/or perform high-level security functions, such as user authentication. Although not shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref>, it will be appreciated that the RAN <b>104</b> and/or the CN <b>106</b> may be in direct or indirect communication with other RANs that employ the same RAT as the RAN <b>104</b> or a different RAT. For example, in addition to being connected to the RAN <b>104</b>, which may be utilizing a NR radio technology, the CN <b>106</b> may also be in communication with another RAN (not shown) employing a GSM, UMTS, CDMA 2000, WiMAX, E-UTRA, or WiFi radio technology.</p><p id="p-0129" num="0172">The CN <b>106</b> may also serve as a gateway for the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d </i>to access the PSTN <b>108</b>, the Internet <b>110</b>, and/or the other networks <b>112</b>. The PSTN <b>108</b> may include circuit-switched telephone networks that provide plain old telephone service (POTS). The Internet <b>110</b> may include a global system of interconnected computer networks and devices that use common communication protocols, such as the transmission control protocol (TCP), user datagram protocol (UDP) and/or the internet protocol (IP) in the TCP/IP internet protocol suite. The networks <b>112</b> may include wired and/or wireless communications networks owned and/or operated by other service providers. For example, the networks <b>112</b> may include another CN connected to one or more RANs, which may employ the same RAT as the RAN <b>104</b> or a different RAT.</p><p id="p-0130" num="0173">Some or all of the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d </i>in the communications system <b>100</b> may include multi-mode capabilities (e.g., the WTRUs <b>102</b><i>a</i>, <b>102</b><i>b</i>, <b>102</b><i>c</i>, <b>102</b><i>d </i>may include multiple transceivers for communicating with different wireless networks over different wireless links). For example, the WTRU <b>102</b><i>c </i>shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref> may be configured to communicate with the base station <b>114</b><i>a</i>, which may employ a cellular-based radio technology, and with the base station <b>114</b><i>b</i>, which may employ an IEEE 802 radio technology.</p><p id="p-0131" num="0174"><figref idref="DRAWINGS">FIG. <b>16</b>B</figref> is a system diagram illustrating an example WTRU <b>102</b>. As shown in <figref idref="DRAWINGS">FIG. <b>16</b>B</figref>, the WTRU <b>102</b> may include a processor <b>118</b>, a transceiver <b>120</b>, a transmit/receive element <b>122</b>, a speaker/microphone <b>124</b>, a keypad <b>126</b>, a display/touchpad <b>128</b>, non-removable memory <b>130</b>, removable memory <b>132</b>, a power source <b>134</b>, a global positioning system (GPS) chipset <b>136</b>, and/or other peripherals <b>138</b>, among others. It will be appreciated that the WTRU <b>102</b> may include any sub-combination of the foregoing elements while remaining consistent with an embodiment.</p><p id="p-0132" num="0175">The processor <b>118</b> may be a general purpose processor, a special purpose processor, a conventional processor, a digital signal processor (DSP), a plurality of microprocessors, one or more microprocessors in association with a DSP core, a controller, a microcontroller, Application Specific Integrated Circuits (ASICs), Field Programmable Gate Arrays (FPGAs) circuits, any other type of integrated circuit (IC), a state machine, and the like. The processor <b>118</b> may perform signal coding, data processing, power control, input/output processing, and/or any other functionality that enables the WTRU <b>102</b> to operate in a wireless environment. The processor <b>118</b> may be coupled to the transceiver <b>120</b>, which may be coupled to the transmit/receive element <b>122</b>. While <figref idref="DRAWINGS">FIG. <b>16</b>B</figref> depicts the processor <b>118</b> and the transceiver <b>120</b> as separate components, it will be appreciated that the processor <b>118</b> and the transceiver <b>120</b> may be integrated together in an electronic package or chip.</p><p id="p-0133" num="0176">The transmit/receive element <b>122</b> may be configured to transmit signals to, or receive signals from, a base station (e.g., the base station <b>114</b><i>a</i>) over the air interface <b>116</b>. For example, in one embodiment, the transmit/receive element <b>122</b> may be an antenna configured to transmit and/or receive RF signals. In an embodiment, the transmit/receive element <b>122</b> may be an emitter/detector configured to transmit and/or receive IR, UV, or visible light signals, for example. In yet another embodiment, the transmit/receive element <b>122</b> may be configured to transmit and/or receive both RF and light signals. It will be appreciated that the transmit/receive element <b>122</b> may be configured to transmit and/or receive any combination of wireless signals.</p><p id="p-0134" num="0177">Although the transmit/receive element <b>122</b> is depicted in <figref idref="DRAWINGS">FIG. <b>16</b>B</figref> as a single element, the WTRU <b>102</b> may include any number of transmit/receive elements <b>122</b>. More specifically, the WTRU <b>102</b> may employ MIMO technology. Thus, in one embodiment, the WTRU <b>102</b> may include two or more transmit/receive elements <b>122</b> (e.g., multiple antennas) for transmitting and receiving wireless signals over the air interface <b>116</b>.</p><p id="p-0135" num="0178">The transceiver <b>120</b> may be configured to modulate the signals that are to be transmitted by the transmit/receive element <b>122</b> and to demodulate the signals that are received by the transmit/receive element <b>122</b>. As noted above, the WTRU <b>102</b> may have multi-mode capabilities. Thus, the transceiver <b>120</b> may include multiple transceivers for enabling the WTRU <b>102</b> to communicate via multiple RATs, such as NR and IEEE 802.11, for example.</p><p id="p-0136" num="0179">The processor <b>118</b> of the WTRU <b>102</b> may be coupled to, and may receive user input data from, the speaker/microphone <b>124</b>, the keypad <b>126</b>, and/or the display/touchpad <b>128</b> (e.g., a liquid crystal display (LCD) display unit or organic light-emitting diode (OLED) display unit). The processor <b>118</b> may also output user data to the speaker/microphone <b>124</b>, the keypad <b>126</b>, and/or the display/touchpad <b>128</b>. In addition, the processor <b>118</b> may access information from, and store data in, any type of suitable memory, such as the non-removable memory <b>130</b> and/or the removable memory <b>132</b>. The non-removable memory <b>130</b> may include random-access memory (RAM), read-only memory (ROM), a hard disk, or any other type of memory storage device. The removable memory <b>132</b> may include a subscriber identity module (SIM) card, a memory stick, a secure digital (SD) memory card, and the like. In other embodiments, the processor <b>118</b> may access information from, and store data in, memory that is not physically located on the WTRU <b>102</b>, such as on a server or a home computer (not shown).</p><p id="p-0137" num="0180">The processor <b>118</b> may receive power from the power source <b>134</b> and may be configured to distribute and/or control the power to the other components in the WTRU <b>102</b>. The power source <b>134</b> may be any suitable device for powering the WTRU <b>102</b>. For example, the power source <b>134</b> may include one or more dry cell batteries (e.g., nickel-cadmium (NiCd), nickel-zinc (NiZn), nickel metal hydride (NiMH), lithium-ion (Li-ion), etc.), solar cells, fuel cells, and the like.</p><p id="p-0138" num="0181">The processor <b>118</b> may also be coupled to the GPS chipset <b>136</b>, which may be configured to provide location information (e.g., longitude and latitude) regarding the current location of the WTRU <b>102</b>. In addition to, or in lieu of, the information from the GPS chipset <b>136</b>, the WTRU <b>102</b> may receive location information over the air interface <b>116</b> from a base station (e.g., base stations <b>114</b><i>a</i>, <b>114</b><i>b</i>) and/or determine its location based on the timing of the signals being received from two or more nearby base stations. It will be appreciated that the WTRU <b>102</b> may acquire location information by way of any suitable location-determination method while remaining consistent with an embodiment.</p><p id="p-0139" num="0182">The processor <b>118</b> may further be coupled to other peripherals <b>138</b>, which may include one or more software and/or hardware modules that provide additional features, functionality and/or wired or wireless connectivity. For example, the peripherals <b>138</b> may include an accelerometer, an e-compass, a satellite transceiver, a digital camera (for photographs and/or video), a universal serial bus (USB) port, a vibration device, a television transceiver, a hands free headset, a Bluetooth&#xae; module, a frequency modulated (FM) radio unit, a digital music player, a media player, a video game player module, an Internet browser, a Virtual Reality and/or Augmented Reality (VR/AR) device, an activity tracker, and the like. The peripherals <b>138</b> may include one or more sensors, the sensors may be one or more of a gyroscope, an accelerometer, a hall effect sensor, a magnetometer, an orientation sensor, a proximity sensor, a temperature sensor, a time sensor; a geolocation sensor; an altimeter, a light sensor, a touch sensor, a magnetometer, a barometer, a gesture sensor, a biometric sensor, and/or a humidity sensor.</p><p id="p-0140" num="0183">The WTRU <b>102</b> may include a full duplex radio for which transmission and reception of some or all of the signals (e.g., associated with particular subframes for both the UL (e.g., for transmission) and downlink (e.g., for reception) may be concurrent and/or simultaneous. The full duplex radio may include an interference management unit to reduce and or substantially eliminate self-interference via either hardware (e.g., a choke) or signal processing via a processor (e.g., a separate processor (not shown) or via processor <b>118</b>). In an embodiment, the WRTU <b>102</b> may include a half-duplex radio for which transmission and reception of some or all of the signals (e.g., associated with particular subframes for either the UL (e.g., for transmission) or the downlink (e.g., for reception)).</p><p id="p-0141" num="0184">Although the WTRU is described in <figref idref="DRAWINGS">FIGS. <b>16</b>A-<b>16</b>B</figref> as a wireless terminal, it is contemplated that in certain representative embodiments that such a terminal may use (e.g., temporarily, or permanently) wired communication interfaces with the communication network.</p><p id="p-0142" num="0185">In view of <figref idref="DRAWINGS">FIGS. <b>16</b>A-<b>16</b>B</figref>, and the corresponding description of <figref idref="DRAWINGS">FIGS. <b>16</b>A-<b>16</b>B</figref>, one or more, or all, of the functions described herein with regard to one or more of: WTRU <b>102</b><i>a</i>-<i>d</i>, Base Station <b>114</b><i>a</i>-<i>b</i>, eNode-B <b>160</b><i>a</i>-<i>c</i>, MME <b>162</b>, SGW <b>164</b>, PGW <b>166</b>, gNB <b>180</b><i>a</i>-<i>c</i>, AMF <b>182</b><i>a</i>-<i>b</i>, UPF <b>184</b><i>a</i>-<i>b</i>, SMF <b>183</b><i>a</i>-<i>b</i>, DN <b>185</b><i>a</i>-<i>b</i>, and/or any other device(s) described herein, may be performed by one or more emulation devices (not shown). The emulation devices may be one or more devices configured to emulate one or more, or all, of the functions described herein. For example, the emulation devices may be used to test other devices and/or to simulate network and/or WTRU functions.</p><p id="p-0143" num="0186">The emulation devices may be designed to implement one or more tests of other devices in a lab environment and/or in an operator network environment. For example, the one or more emulation devices may perform the one or more, or all, functions while being fully or partially implemented and/or deployed as part of a wired and/or wireless communication network in order to test other devices within the communication network. The one or more emulation devices may perform the one or more, or all, functions while being temporarily implemented/deployed as part of a wired and/or wireless communication network. The emulation device may be directly coupled to another device for purposes of testing and/or may performing testing using over-the-air wireless communications.</p><p id="p-0144" num="0187">The one or more emulation devices may perform the one or more, including all, functions while not being implemented/deployed as part of a wired and/or wireless communication network. For example, the emulation devices may be utilized in a testing scenario in a testing laboratory and/or a non-deployed (e.g., testing) wired and/or wireless communication network in order to implement testing of one or more components. The one or more emulation devices may be test equipment. Direct RF coupling and/or wireless communications via RF circuitry (e.g., which may include one or more antennas) may be used by the emulation devices to transmit and/or receive data.</p><p id="p-0145" num="0188">Like the HEVC Test Model (HM), the Joint Exploration Model (JEM) software is also built upon the block-based hybrid video coding framework (<b>100</b>). <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a block diagram of a block-based hybrid video encoding system. Note that in the present application, the terms &#x201c;reconstructed&#x201d; and &#x201c;decoded&#x201d; may be used interchangeably. Usually, but not necessarily, the term &#x201c;reconstructed&#x201d; is used at the encoder side while &#x201c;decoded&#x201d; is used at the decoder side.</p><p id="p-0146" num="0189">Before being encoded, the video sequence may go through pre-processing, for example, applying a color transform to the input color picture (e.g., conversion from RGB 4:4:4 to YCbCr 4:2:0), or performing a remapping of the input picture components in order to get a signal distribution more resilient to compression (e.g., using a histogram equalization of one of the color components). Metadata may be associated with the pre-processing and attached to the bitstream.</p><p id="p-0147" num="0190">The input video signal <b>102</b> is processed block by block. The HEVC specification distinguishes between &#x201c;blocks&#x201d; and &#x201c;units,&#x201d; where a &#x201c;block&#x201d; addresses a specific area in a sample array (e.g., luma, Y), and the &#x201c;unit&#x201d; includes the collocated blocks of all encoded color components (e.g., Y, Cb, Cr, or monochrome), syntax elements, and prediction data that are associated with the blocks (e.g., motion vectors). In the present application, the term &#x201c;block&#x201d; can be used to refer to an array of data of various sizes, and it may be used to refer to a macroblock and a partition as specified in H.264/AVC, any of a coding tree unit (CTU), a coding unit (CU), a prediction unit (PU), a transform unit (TU), a coding block (CB), a prediction block (PB), and a transform block (TB) as in HEVC, a superblock or sub-partitioning in AV1, a CTU, CU, TU, CB, and TB as in VVC (Versatile Video Coding) or other video coding standards.</p><p id="p-0148" num="0191">In HEVC, extended block sizes are used to efficiently compress high resolution (1080p and beyond) video signals. In HEVC, a CU can be up to 64&#xd7;64 pixels. A CU can be further partitioned into prediction units, for which separate prediction methods are applied. For each input video block (MB or CU), spatial prediction (<b>160</b>) and/or temporal prediction (<b>162</b>) may be performed.</p><p id="p-0149" num="0192">Spatial prediction (or &#x201c;intra prediction&#x201d;) uses pixels from the samples of already-coded neighboring blocks (which are called reference samples) in the same video picture/slice to predict the current video block. Spatial prediction reduces spatial redundancy inherent in the video signal.</p><p id="p-0150" num="0193">Temporal prediction (also referred to as &#x201c;inter prediction&#x201d; or &#x201c;motion compensated prediction&#x201d;) uses reconstructed pixels from the already coded video pictures to predict the current video block. Temporal prediction reduces temporal redundancy inherent in the video signal. A temporal prediction signal for a given video block is usually signaled by one or more motion vectors which indicate the amount and the direction of motion between the current block and its reference block. Also, if multiple reference pictures are supported (as is the case for the recent video coding standards such as H.264/AVC or HEVC), then for each video block, its reference picture index is sent additionally; and the reference index is used to identify from which reference picture in the reference picture store (<b>164</b>) the temporal prediction signal comes.</p><p id="p-0151" num="0194">After spatial and/or temporal prediction, the mode decision block (<b>180</b>) in the encoder chooses the best prediction mode, for example based on the rate-distortion optimization method. The prediction block is then subtracted from the current video block (<b>116</b>); and the prediction residual is de-correlated using transform (<b>104</b>) and quantized (<b>106</b>).</p><p id="p-0152" num="0195">The encoder decodes an encoded block to provide a reference for further prediction. The quantized residual coefficients are inverse quantized (<b>110</b>) and inverse transformed (<b>112</b>) to form the reconstructed residual, which is then added back to the prediction block (<b>126</b>) to form the reconstructed video block.</p><p id="p-0153" num="0196">The encoder may also skip the transform and apply quantization directly to the non-transformed residual signal. The encoder may also bypass both transform and quantization, i.e., the residual is coded directly without the application of the transform or quantization process. In direct pulse code modulation (PCM) coding, no prediction is applied and the coding unit samples are directly coded into the bitstream.</p><p id="p-0154" num="0197">Further in-loop filtering such as de-blocking filter, SAO (Sample Adaptive Offset) filter and Adaptive Loop Filters may be applied (<b>166</b>) to the reconstructed video block before it is put in the reference picture store (<b>164</b>) and used to code future video blocks. To form the output video bitstream <b>120</b>, coding mode (inter or intra), prediction mode information, motion information, and quantized residual coefficients are all sent to the entropy coding unit (<b>108</b>) to be further compressed and packed to form the bitstream.</p><p id="p-0155" num="0198"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a general block diagram of a block-based video decoder (<b>200</b>). A video decoder generally performs a decoding pass reciprocal to the corresponding encoding pass, which performs video decoding as part of encoding video data. The video bitstream <b>202</b> is first unpacked and entropy decoded at entropy decoding unit <b>208</b>. The coding mode and prediction information are sent to either the spatial prediction unit <b>260</b> (if intra coded) or the temporal prediction unit <b>262</b> (if inter coded) to form the prediction block. The residual transform coefficients are sent to inverse quantization unit <b>210</b> and inverse transform unit <b>212</b> to reconstruct the residual block. The prediction block and the residual block are then added together at <b>226</b>. The reconstructed block may further go through in-loop filtering (<b>266</b>) before it is stored in reference picture store <b>264</b>. The reconstructed video (<b>220</b>) in the reference picture store may then be stored, transmitted or used to drive a display device, as well as used to predict future video blocks.</p><p id="p-0156" num="0199">The decoded picture may further go through post-processing, for example, an inverse color transform (e.g., conversion from YCbCr 4:2:0 to RGB 4:4:4) or an inverse remapping performing the inverse of the remapping process performed in the pre-encoding processing. The post-processing may use metadata derived in the pre-encoding processing and signaled in the bitstream.</p><p id="p-0157" num="0200">Both HEVC and the JEM adhere to the block-based motion compensated hybrid video encoding/decoding workflows as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>3</b></figref> and are based on the same functional modules such as spatial prediction (i.e., intra prediction), temporal prediction (i.e., inter prediction), transform, quantization, entropy coding and loop filters. However, several inter coding modules, especially the ones associated with motion compensated prediction, are further extended, and improved.</p><p id="p-0158" num="0201">One embodiment of a method <b>1700</b> under the general aspects described here is shown in <figref idref="DRAWINGS">FIG. <b>17</b></figref>. The method commences at start block <b>1701</b> and control proceeds to block <b>1710</b> assigning threads for CABAC decoding of video frames using parallel processing, wherein a higher number of threads are assigned for decoding of frames with a low quantization parameter compared to a higher quantization parameter, or an intra frame relative to an inter frame, or for P frames, or when the frame is in a lower temporal layer. Control proceeds from block <b>1710</b> to block <b>1720</b> for decoding the video frames using the assigned threads.</p><p id="p-0159" num="0202">A second embodiment of a method <b>1800</b> under the general aspects described here is shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>. The method commences at start block <b>1801</b> and control proceeds to block <b>1810</b> for generating motion vectors for a coding unit. Control proceeds from block <b>1810</b> to block <b>1820</b> for performing inter coding unit reconstruction. Control proceeds from block <b>1820</b> to block <b>1830</b> for performing intra coding unit reconstruction. Control proceeds from block <b>1830</b> to block <b>1840</b> for performing inverse reshaping and in-loop filter of said video, wherein said generating and performing steps are performed concurrently on distinct portions of the video.</p><p id="p-0160" num="0203"><figref idref="DRAWINGS">FIG. <b>19</b></figref> shows one embodiment of an apparatus <b>1900</b> implementing the methods of <figref idref="DRAWINGS">FIG. <b>17</b></figref> or <figref idref="DRAWINGS">FIG. <b>18</b></figref>. The apparatus comprises Processor <b>1910</b> and can be interconnected to a memory <b>1920</b> through at least one port. Both Processor <b>1910</b> and memory <b>1920</b> can also have one or more additional interconnections to external connections.</p><p id="p-0161" num="0204">Processor <b>1910</b> is also configured to either insert or receive information in a bitstream and, either compressing, encoding, or decoding using any of the described aspects.</p><p id="p-0162" num="0205">The embodiments described here include a variety of aspects, including tools, features, embodiments, models, approaches, etc. Many of these aspects are described with specificity and, at least to show the individual characteristics, are often described in a manner that may sound limiting. However, this is for purposes of clarity in description, and does not limit the application or scope of those aspects. Indeed, all of the different aspects can be combined and interchanged to provide further aspects. Moreover, the aspects can be combined and interchanged with aspects described in earlier filings as well.</p><p id="p-0163" num="0206">As will be evident to one of ordinary skill in the art, implementations can produce a variety of signals formatted to carry information that can be, for example, stored or transmitted. The information can include, for example, instructions for performing a method, or data produced by one of the described implementations. For example, a signal can be formatted to carry the bitstream of a described embodiment. Such a signal can be formatted, for example, as an electromagnetic wave (for example, using a radio frequency portion of spectrum) or as a baseband signal. The formatting can include, for example, encoding a data stream and modulating a carrier with the encoded data stream. The information that the signal carries can be, for example, analog or digital information. The signal can be transmitted over a variety of different wired or wireless links, as is known. The signal can be stored on a processor-readable medium.</p><p id="p-0164" num="0207">The preceding sections describe a number of embodiments, across various claim categories and types. Features of these embodiments can be provided alone or in any combination. Further, embodiments can include one or more of the following features, devices, or aspects, alone or in any combination, across various claim categories and types:<ul id="ul0037" list-style="none">    <li id="ul0037-0001" num="0000">    <ul id="ul0038" list-style="none">        <li id="ul0038-0001" num="0208">Generating a decoded video stream wherein assigning threads for CABAC decoding of video frames using parallel processing,</li>        <li id="ul0038-0002" num="0209">The above method wherein a higher number of threads are assigned for decoding of frames with a low quantization parameter compared to a higher quantization parameter, or an intra frame relative to an inter frame, or for P frames, or when the frame is in a lower temporal layer,</li>        <li id="ul0038-0003" num="0210">Decoding the above video frames using said assigned threads</li>    </ul>    </li></ul></p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of decoding video, comprising:<claim-text>assigning threads for CABAC decoding of video frames using parallel processing, wherein a higher number of threads are assigned for decoding of frames with a low quantization parameter compared to a higher quantization parameter, or an intra frame relative to an inter frame, or for P frames, or when the frame is in a lower temporal layer; and,</claim-text><claim-text>decoding said video frames using said assigned threads.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. A method of parallel decoding of video, comprising:<claim-text>generating motion vectors for a coding unit;</claim-text><claim-text>performing inter coding unit reconstruction;</claim-text><claim-text>performing intra coding unit reconstruction; and,</claim-text><claim-text>performing inverse reshaping and in-loop filter of said video,</claim-text><claim-text>wherein said generating and performing steps are performed concurrently on distinct portions of the video.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. A device, comprising:<claim-text>memory; and, one or more processors, configured to</claim-text><claim-text>assign threads for CABAC decoding of video frames using parallel processing, wherein a higher number of threads are assigned for decoding of frames with a low quantization parameter compared to a higher quantization parameter, or an intra frame relative to an inter frame, or for P frames, or when the frame is in a lower temporal layer; and,</claim-text><claim-text>decode said video frames using said assigned threads.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. A device, comprising:<claim-text>memory; and, one or more processors, configured to</claim-text><claim-text>generate motion vectors for a coding unit;</claim-text><claim-text>perform inter coding unit reconstruction;</claim-text><claim-text>perform intra coding unit reconstruction; and,</claim-text><claim-text>perform inverse reshaping and in-loop filter of said video,</claim-text><claim-text>wherein the device is configured to said generate and perform concurrently on distinct portions of the video.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a number of allocated threads is varied dynamically based on performance of an initial allocation.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein a number of threads allocated to a current frame of video is increased if processing time of a similar previous frame is greater than a time period.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein a number of threads allocated to a current frame of video is reduced if a wait time between CABAC decoding and reconstruction decoding is greater than a time period.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein assignment of threads is based on a weight of previous frames based on picture order count distance, temporal layer, and frame type.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein motion vector generation is based on a left, top and/or top right neighboring coding unit.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generation of motion vectors for a top right coding tree unit completes before proceeding to a current coding tree unit motion vector generation.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein inter coded coding unit reconstruction is performed separately from intra mode and combined inter and intra prediction mode reconstruction.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein a coding unit reconstruction is performed over one or more portions of the coding unit in parallel.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein decoder motion vector refinement is used when a length of a motion vector is less than a threshold.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. An apparatus comprising:<claim-text>a device according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, and</claim-text><claim-text>at least one of (i) an antenna configured to receive a signal, the signal including the video block, (ii) a band limiter configured to limit the received signal to a band of frequencies that includes the video block, and (iii) a display configured to display an output representative of a video block.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium containing data content decoded according to the method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, for playback using a processor.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A computer program product comprising instructions which, when the program is executed by a computer, cause the computer to carry out the method of <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A computer program product comprising instructions which, when the program is executed by a computer, cause the computer to carry out the method of <claim-ref idref="CLM-00002">claim 2</claim-ref>.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein a number of allocated threads is varied dynamically based on performance of an initial allocation.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein a number of threads allocated to a current frame of video is increased if processing time of a similar previous frame is greater than a time period.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein a number of threads allocated to a current frame of video is reduced if a wait time between CABAC decoding and reconstruction decoding is greater than a time period.</claim-text></claim></claims></us-patent-application>