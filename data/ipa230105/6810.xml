<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006811A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006811</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17697601</doc-number><date>20220317</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>083</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0866</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3247</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0825</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">LIGHTWEIGHT DISTRIBUTED SIGNATURE PROTOCOL FOR MOBILE COMPUTING AND IOT DEVICES</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16688311</doc-number><date>20191119</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11310039</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17697601</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62769654</doc-number><date>20181120</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Board of Regents, The University of Texas System</orgname><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Choo</last-name><first-name>Kim Kwang</first-name><address><city>San Antonio</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>He</last-name><first-name>Debiao</first-name><address><city>Wuhan</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The techniques described herein may provide an efficient and secure two-party distributed signing protocol, for example, for the IEEE P1363 standard. For example, in an embodiment, method may comprise generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID, transmitting the first partial private cryptographic key to a first other device, transmitting the second partial private cryptographic key to a second other device, and generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="104.14mm" wi="158.75mm" file="US20230006811A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="196.60mm" wi="119.63mm" orientation="landscape" file="US20230006811A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="187.88mm" wi="140.80mm" orientation="landscape" file="US20230006811A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="217.68mm" wi="166.96mm" orientation="landscape" file="US20230006811A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="174.41mm" wi="137.24mm" orientation="landscape" file="US20230006811A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="213.11mm" wi="148.93mm" orientation="landscape" file="US20230006811A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="208.96mm" wi="154.69mm" orientation="landscape" file="US20230006811A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="235.88mm" wi="158.67mm" file="US20230006811A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of non-provisional U.S. Application Serial No. 16/688,311, filed Nov. 19, 2019, which claims the benefit of and priority to U.S. Provisional Application No. 62/769,654 filed Nov. 20, 2018, each of which is hereby incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND OF THE INVENTION</heading><p id="p-0003" num="0002">The present invention relates to an efficient and secure two-party distributed signing protocol.</p><p id="p-0004" num="0003">Mobile device and application (app) security is a topic of ongoing interest, particularly due to the speed of cyberthreat evolution. To ensure the security of communication (e.g. data-in-transit), a number of identity-based signature protocols have been designed to facilitate authorization identification and validation of messages. However, most of these protocols may leak a user's private key when a new signature is generated, since the private keys are stored on the devices.</p><p id="p-0005" num="0004">One of the challenges in designing security solutions, particularly cryptographic solutions, for mobile devices is the diversity in mobile device hardware and software (e.g. operating system and applications&#x2014;apps) and their computing capabilities (e.g. some mobile devices have limited computation and storage capabilities). In a typical network, communications between mobile and other devices are subject to a broad range of attacks, ranging from basic attacks to more sophisticated advanced persistent threat-type attacks. Therefore, it is important to authenticate the identity of the mobile device and confirm the authorization of the message. To authenticate the identity and confirm the authorization, we generally rely on proving that the user has the ownership of the private signature key corresponding to the signature. However, in schemes that rely on the use of such keys, the user's private key is typically stored as a single file on the mobile device (i.e. single point of attack). There is also the risk that the private key can be obtained during the signature generation process, or through the use of mobile forensic techniques.</p><p id="p-0006" num="0005">Threshold cryptography can potentially be used to improve the security of the private key, by splitting and distributing a single key into a number of shares/parts that can then be stored on different devices (or for multiple users). Thus, an adversary must corrupt all the devices in order to reconstruct and obtain the private key. Such an approach can be used in applications where generating a signature requires multiple key owners or the specific message can only be viewed by corresponding key owners.</p><p id="p-0007" num="0006">Threshold cryptography has been intensively studied since the late 1980s. One common approach is the t-out-of-n threshold secret sharing protocol proposed by Shamirand Blakley, where a single (private) key is shared between n parties. This allows the recovery of the private key with t or more shares, rather than all shares in the original threshold cryptography-based approach. In other words, to obtain the private key, an adversary has to compromise at least t parties or devices.</p><p id="p-0008" num="0007">A known limitation in the t-out-of-n threshold secret sharing protocol is that the (entire) private key can be recovered during the signing or encryption phase. As the recovered key is usually stored on the mobile devices (e.g. Android or iOS devices), any party who holds the recovered private key can sign or encrypt message without requiring the participation of other parties.</p><p id="p-0009" num="0008">Accordingly, a need arises for techniques that provide an efficient and secure two-party distributed signing protocol.</p><heading id="h-0003" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0010" num="0009">The techniques described herein may provide an efficient and secure two-party distributed signing protocol, for example, for the IEEE P1363 standard. In embodiments, the protocol may require two devices to separately store each part of the user's private key, and may allow these two devices to generate a valid signature without revealing the entire private key of the user. The security of the protocol may be proven, for example, in the random oracle model. Embodiments may implement the protocol using the MIRACL library and may be evaluated using, for example, Android devices. Embodiments may be advantageous for deployment in the mobile environment.</p><p id="p-0011" num="0010">For example, in an embodiment, a method may comprise generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID, transmitting the first partial private cryptographic key to a first other device, transmitting the second partial private cryptographic key to a second other device, and generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</p><p id="p-0012" num="0011">In embodiments, the method may further comprise generating, at the key generation center, a partial public cryptographic key. Generating the distributed cryptographic signature for the message may comprise transmitting a request for a cryptographic signature from the first other device to the second other device, in response to receiving the request from the first other device, generating, at the second other device, a first plurality of intermediate values using a plurality of random numbers and the partial public cryptographic key, in response to receiving the first plurality of intermediate values from the second other device, generating, at the first other device, a second plurality of intermediate values using a plurality of random numbers and the message, in response to receiving the second plurality of intermediate values from the first other device, generating, at the second other device, a third plurality of intermediate values using the second partial private cryptographic key, and in response to receiving the third plurality of intermediate values from the second other device, generating, at the first other device, the distributed cryptographic signature using the first partial private cryptographic key.</p><p id="p-0013" num="0012">In an embodiment, a system may comprise a processor, memory accessible by the processor, and computer program instructions stored in the memory and executable by the processor to perform generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID, transmitting the first partial private cryptographic key to a first other device, transmitting the second partial private cryptographic key to a second other device, and generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</p><p id="p-0014" num="0013">In an embodiment, a computer program product for drug prescription prediction, the computer program product comprising a non-transitory computer readable storage having program instructions embodied therewith, the program instructions executable by a computer, to cause the computer to perform a method comprising generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID, transmitting the first partial private cryptographic key to a first other device, transmitting the second partial private cryptographic key to a second other device, and generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014">So that the manner in which the above recited features of the present invention can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to embodiments, some of which are illustrated in the appended drawings. It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and the invention may admit to other equally effective embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a typical mobile Internet architecture in which embodiments of the present systems and methods may be implemented.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an exemplary flow diagram of a key generation phase in accordance with embodiments of the present systems and methods.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an exemplary flow diagram of a distributed signature generation phase in accordance with embodiments of the present systems and methods.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an exemplary block diagram of a system in which embodiments of the present systems and methods may be implemented.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of results of an experiment to determine performance of embodiments of the present systems and methods may be implemented.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example of results of an experiment to determine performance of signature phase in accordance with embodiments of the present systems and methods may be implemented.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of a computing device in which embodiments of the present systems and methods may be implemented.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0023" num="0022">Other features of the present embodiments will be apparent from the Detailed Description that follows.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0024" num="0023">In the following detailed description of the preferred embodiments, reference is made to the accompanying drawings, which form a part hereof, and within which are shown by way of illustration specific embodiments by which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the invention. Electrical, mechanical, logical, and structural changes may be made to the embodiments without departing from the spirit and scope of the present teachings. The following detailed description is therefore not to be taken in a limiting sense, and the scope of the present disclosure is defined by the appended claims and their equivalents.</p><p id="p-0025" num="0024">The techniques described herein may provide an efficient and secure two-party distributed signing protocol, for example, for the IEEE P1363 standard. In embodiments, the protocol may require two devices to separately store each part of the user's private key, and may allow these two devices to generate a valid signature without revealing the entire private key of the user. The security of the protocol may be proven, for example, in the random oracle model. Embodiments may implement the protocol using the MIRACL library and may be evaluated using, for example, Android devices. Embodiments may be advantageous for deployment in the mobile environment.</p><p id="p-0026" num="0025">An example of a typical mobile Internet architecture <b>100</b> is shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, where mobile (Internet-connected) devices, such as smart watch <b>102</b> and smart phone <b>104</b> can collect, transmit, process and store a wide range of data (e.g. environmental data, and personally identifiable information such as health data) for a user <b>106</b>. Thus, it is not surprising that mobile security is a topic of ongoing research interest.</p><p id="p-0027" num="0026">A summary of notations used in this document is shown below:</p><p id="p-0028" num="0027">U<sub>i</sub>,S<sub>j</sub>: communication partners, namely: user and server</p><p id="p-0029" num="0028">P<sub>1</sub>,P<sub>2</sub>: two devices for U<sub>j </sub></p><p id="p-0030" num="0029">q: the order of group</p><p id="p-0031" num="0030">s: the master key of KGC</p><p id="p-0032" num="0031">G<sub>1</sub>,G<sub>2</sub>: additive cyclic groups of order q</p><p id="p-0033" num="0032">G<sub>T</sub>: multiplicative cyclic group of order q</p><p id="p-0034" num="0033">Q<sub>1</sub>,Q<sub>2</sub>: the generators of additive cyclic groupsG<sub>1</sub>,G<sub>2 </sub></p><p id="p-0035" num="0034">D<sub>ID</sub>: private key of user U<sub>i </sub></p><p id="p-0036" num="0035">D<sub>ID</sub><sup>1</sup>,D<sub>ID</sub><sup>2</sup>: partial private key of two devices P<sub>1</sub>,P<sub>2 </sub></p><p id="p-0037" num="0036">H<sub>1</sub>,H<sub>2</sub>: hash function of {0,1}*&#x2192;Z*<sub>q </sub></p><p id="p-0038" num="0037">e: bilinear pairing of G<sub>1</sub>&#xd7;G<sub>2</sub>&#x2192;G<sub>T </sub></p><p id="p-0039" num="0038">g: e(Q<sub>1</sub>,Q<sub>2</sub>)</p><p id="p-0040" num="0039">g<sup>u</sup>: exponentiation</p><p id="p-0041" num="0040">[x,y]: number set between x and y</p><p id="p-0042" num="0041">Bilinear pairing: Let G<sub>1 </sub>and G<sub>2 </sub>denote additive cyclic groups, G<sub>T</sub>, and e: G <sub>i</sub>&#xd7; and G<sub>2</sub>&#x2192;G<sub>T </sub>denote a multiplication cyclic group and a bilinear map. Suppose Q<sub>1 </sub>and Q<sub>2 </sub>are the generators of G<sub>1 </sub>and G<sub>2</sub>, g is the element that Q<sub>1</sub>, and Q<sub>2 </sub>maps to G<sub>T</sub>. Thus, the map e is a bilinear pairing on the condition that e satisfies the following properties:</p><p id="p-0043" num="0042">1. Bilinear: Given any two elements a,b&#x2208;Z*<sub>q</sub>, and &#x2200;X&#x2208;G<sub>1</sub>,&#x2200;Y&#x2208;G<sub>2</sub>, there is e(a&#xb7;X,b&#xb7;Y)=e(X,Y)<sup>a.b </sup></p><p id="p-0044" num="0043">2. Non-degenerate: There exists at least one element X satisfies the inequation e(X,X)&#x2260;1.</p><p id="p-0045" num="0044">3. Efficient Computability: Given any two elements &#x2200;X&#x2208;G<sub>1</sub>,&#x2200;Y&#x2208;G<sub>2</sub>, there exists at least one efficient algorithm to compute e(X,Y).</p><p id="p-0046" num="0045">IEEE standard for identity-based signature: The steps of signature generation for the IEEE standard for identity-based signature scheme (BLMQ signature scheme) are as follows:</p><p id="p-0047" num="0046">1. Setup<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0047">Input: a security parameter k</li>    <li id="ul0001-0002" num="0048">Output: a public parameter set P    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0049">(a) Establish the cyclic groups G<sub>1</sub>,G<sub>2</sub>,G<sub>T </sub>and a bilinear map e: G<sub>1</sub>&#xd7;G<sub>2</sub>&#x2192;G<sub>T</sub>.</li>        <li id="ul0002-0002" num="0050">(b) Select two random generators Q<sub>1</sub>&#x2208;G<sub>1 </sub>and Q<sub>2</sub>&#x2208;G<sub>2</sub>.</li>        <li id="ul0002-0003" num="0051">(c) Generate a random server secret s in Z*<sub>q</sub>, then calculate P<sub>pub</sub>=s&#xb7;Q<sub>2 </sub>and g=e(Q<sub>1</sub>,Q<sub>2</sub>).</li>        <li id="ul0002-0004" num="0052">(d) Make the set P={P<sub>pub</sub>,g,Q<sub>1</sub>,Q<sub>2</sub>,G<sub>1</sub>,G<sub>2</sub>,G<sub>3</sub>,e}</li>    </ul>    </li></ul></p><p id="p-0048" num="0053">2. Extract<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0054">Input: a user's identity ID, a public parameter set P and the server secret s</li>    <li id="ul0003-0002" num="0055">Output: user's private key K<sub>ID </sub>    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0056">(a) Compute the identity element h<sub>ID</sub>=H<sub>1</sub>(ID) in Z*<sub>q</sub>.</li>        <li id="ul0004-0002" num="0057">(b) Compute K<sub>ID</sub>=(s+h<sub>0</sub>)<sup>&#x2212;1</sup>Q<sub>1</sub>.</li>    </ul>    </li></ul></p><p id="p-0049" num="0058">3. Signature<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0059">Input: a message m, a public parameter set P and user's private key K<sub>ID</sub>.</li>    <li id="ul0005-0002" num="0060">Output: a signature &#x3c3;.    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0061">(a) Generate a random number r&#x2208;Z*<sub>q</sub>, and compute u=g<sup>r</sup>.</li>        <li id="ul0006-0002" num="0062">(b) Compute h=H<sub>2</sub>(m,u) and S=(r+h)&#xb7;K<sub>ID</sub>.</li>        <li id="ul0006-0003" num="0063">(c) Output signature &#x3c3;=(h,S).</li>    </ul>    </li></ul></p><p id="p-0050" num="0064">4. Verify</p><p id="p-0051" num="0065">Input: a signature G, a message m and user's public key h<sub>ID</sub>.</p><p id="p-0052" num="0066">Output: valid if the signature is accepted, otherwise output invalid.<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0067">(a) Compute</li>    </ul>    </li></ul></p><p id="p-0053" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mi>u</mi>  <mo>=</mo>  <mrow>   <mfrac>    <mrow>     <mi>e</mi>     <mo>&#x2061;</mo>     <mo>(</mo>     <mrow>      <mi>S</mi>      <mo>,</mo>      <mrow>       <mrow>        <msub>         <mi>h</mi>         <mi>ID</mi>        </msub>        <mo>&#xb7;</mo>        <msub>         <mi>Q</mi>         <mn>2</mn>        </msub>       </mrow>       <mo>+</mo>       <msub>        <mi>P</mi>        <mrow>         <mi>p</mi>         <mo>&#x2062;</mo>         <mi>u</mi>         <mo>&#x2062;</mo>         <mi>b</mi>        </mrow>       </msub>      </mrow>     </mrow>     <mo>)</mo>    </mrow>    <msup>     <mi>g</mi>     <mi>h</mi>    </msup>   </mfrac>   <mo>.</mo>  </mrow> </mrow></math></maths><ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0068">(b) If h=H<sub>2</sub>(m,u), then output valid, otherwise output invalid.</li>    </ul>    </li></ul></p><p id="p-0054" num="0069">Mathematical Assumptions: The mathematical assumptions required in the security proof are defined as follows:</p><p id="p-0055" num="0070">Discrete Logarithm (DL) Problem: Given an element X&#x2208;G<sub>1 </sub>and x&#x2208;G<sub>T</sub>, for any probability polynomial time (P.P.T) attacker, it is difficult to calculate &#x3c4;&#x2208;Z*<sub>q </sub>satisfies X=&#x3c4;&#xb7;Q<sub>1 </sub>and x=g<sup>&#x3c4;</sup>.</p><p id="p-0056" num="0071">Computational Diffie-Hellman (CDH) Problem: Given a tuple (g,e,Q<sub>1</sub>,Q<sub>2</sub>,aQ<sub>1</sub>,bQ<sub>2</sub>) where (a,b)&#x2208;Z*<sub>q</sub>, Q<sub>1</sub>, Q<sub>2 </sub>and g are the generators of G<sub>1</sub>, G<sub>2 </sub>and G<sub>T </sub>respectively. We compute &#x3c9;=e(Q<sub>1</sub>,Q<sub>2</sub>)<sup>ab </sup>and define an algorithm A to solve CDH problem within P.P.T. There exists a negligible function &#x3bc;(n) to make Pr[A(a&#xb7;Q<sub>1</sub>,b&#xb7;Q<sub>2</sub>)=&#x3c9;]&#x2264;&#x3bc;(n) when a,b&#x2208;Z*<sub>q </sub>are unknown.</p><p id="p-0057" num="0072">Collusion Attack Algorithm with k traitor(k-CAA) Problem: Given k+1 elements</p><p id="p-0058" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <mrow>   <mi>&#x3c4;</mi>   <mo>&#x2062;</mo>   <msub>    <mi>Q</mi>    <mn>1</mn>   </msub>  </mrow>  <mo>,</mo>  <mrow>   <mfrac>    <mn>1</mn>    <mrow>     <mi>&#x3c4;</mi>     <mo>+</mo>     <msub>      <mi>&#x3b1;</mi>      <mn>1</mn>     </msub>    </mrow>   </mfrac>   <mo>&#x2062;</mo>   <msub>    <mi>Q</mi>    <mn>1</mn>   </msub>  </mrow>  <mo>,</mo>  <mrow>   <mfrac>    <mn>1</mn>    <mrow>     <mi>&#x3c4;</mi>     <mo>+</mo>     <msub>      <mi>&#x3b1;</mi>      <mn>2</mn>     </msub>    </mrow>   </mfrac>   <mo>&#x2062;</mo>   <msub>    <mi>Q</mi>    <mn>1</mn>   </msub>  </mrow>  <mo>,</mo>  <mo>&#x2026;</mo>  <mtext>  </mtext>  <mo>,</mo>  <mrow>   <mfrac>    <mn>1</mn>    <mrow>     <mi>&#x3c4;</mi>     <mo>+</mo>     <msub>      <mi>&#x3b1;</mi>      <mi>k</mi>     </msub>    </mrow>   </mfrac>   <mo>&#x2062;</mo>   <msub>    <mi>Q</mi>    <mn>1</mn>   </msub>  </mrow> </mrow></math></maths></p><p id="p-0059" num="0000">in which a<sub>i</sub>,i&#x2208;[1.k] We compute</p><p id="p-0060" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mi>&#x3c9;</mi>  <mo>=</mo>  <mrow>   <mfrac>    <mn>1</mn>    <mrow>     <mi>&#x3c4;</mi>     <mo>+</mo>     <mi>&#x3b1;</mi>    </mrow>   </mfrac>   <mo>&#x2062;</mo>   <msub>    <mi>Q</mi>    <mn>1</mn>   </msub>  </mrow> </mrow></math></maths></p><p id="p-0061" num="0000">and define an algorithm A to solve k-CAA problem within P.P.T. For any a&#x2209;{a<sub>i</sub>,i&#x2208;[1.k]}, when &#x3c4; is unknown, there exists a negligible function &#x3bc;(n) to make</p><p id="p-0062" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <mrow>   <mi>P</mi>   <mo>&#x2062;</mo>   <mrow>    <mi>r</mi>    <mo>[</mo>    <mrow>     <mrow>      <mi>A</mi>      <mo>&#x2061;</mo>      <mo>(</mo>      <mrow>       <mrow>        <mi>&#x3c4;</mi>        <mo>&#x2062;</mo>        <msub>         <mi>Q</mi>         <mn>1</mn>        </msub>       </mrow>       <mo>,</mo>       <mrow>        <mfrac>         <mn>1</mn>         <mrow>          <mi>&#x3c4;</mi>          <mo>+</mo>          <msub>           <mi>&#x3b1;</mi>           <mn>1</mn>          </msub>         </mrow>        </mfrac>        <mo>&#x2062;</mo>        <msub>         <mi>Q</mi>         <mn>1</mn>        </msub>       </mrow>       <mo>,</mo>       <mrow>        <mfrac>         <mn>1</mn>         <mrow>          <mi>&#x3c4;</mi>          <mo>+</mo>          <msub>           <mi>&#x3b1;</mi>           <mn>2</mn>          </msub>         </mrow>        </mfrac>        <mo>&#x2062;</mo>        <msub>         <mi>Q</mi>         <mn>1</mn>        </msub>       </mrow>       <mo>,</mo>       <mo>&#x2026;</mo>       <mtext>  </mtext>       <mo>,</mo>       <mrow>        <mfrac>         <mn>1</mn>         <mrow>          <mi>&#x3c4;</mi>          <mo>+</mo>          <msub>           <mi>&#x3b1;</mi>           <mi>k</mi>          </msub>         </mrow>        </mfrac>        <mo>&#x2062;</mo>        <msub>         <mi>Q</mi>         <mn>1</mn>        </msub>       </mrow>      </mrow>      <mo>)</mo>     </mrow>     <mo>=</mo>     <mi>&#x3c9;</mi>    </mrow>    <mo>]</mo>   </mrow>  </mrow>  <mo>&#x2264;</mo>  <mrow>   <mrow>    <mi>&#x3bc;</mi>    <mo>&#x2061;</mo>    <mo>(</mo>    <mi>n</mi>    <mo>)</mo>   </mrow>   <mo>.</mo>  </mrow> </mrow></math></maths></p><p id="p-0063" num="0073">Embodiments of two-party signing protocol: Embodiments of a two-party signing protocol may include a key generation phase and a distributed signature generation phase.</p><p id="p-0064" num="0074">Key generation phase: An exemplary illustration of an embodiment <b>200</b> of a key generation phase is shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. As shown in this example, an identifier (ID) <b>202</b> of a user U<sub>i </sub><b>204</b> may be sent to key generation center (KGC) <b>206</b>. KGC <b>206</b> may generate <b>208</b>-<b>212</b> the user's private keys D<sub>ID </sub><sup>1 </sup><b>214</b> and D<sub>ID</sub><sup>2 </sup><b>216</b>, such that D<sub>ID</sub><sup>1 </sup>and D<sub>ID</sub><sup>2 </sup>can be combined to form a valid private key. Then, KGC <b>206</b> may distribute D<sub>ID</sub><sup>1 </sup><b>214</b> and D<sub>ID</sub><sup>2 </sup><b>216</b> to be stored on two devices P<sub>1 </sub><b>218</b> and P<sub>2 </sub><b>220</b> respectively.</p><p id="p-0065" num="0075">For example, U<sub>i </sub><b>204</b> may send a request including user ID ID <b>202</b> to KGC <b>206</b>. Upon receiving the request, KGC <b>206</b> may compute <b>208</b> t<sub>1</sub>=s+H<sub>1</sub>(ID) and t<sub>2</sub>=t<sub>1</sub><sup>&#x2212;1 </sup>(mod q). KGC <b>206</b> may generate <b>210</b> a random number d<sub>1 </sub>&#x2208; [1, q&#x2212;1], and may compute d<sub>2</sub>=t<sub>2</sub>&#xb7;d<sub>1</sub><sup>&#x2212;1 </sup>(mod q). KGC <b>206</b> may compute the first partial private key D<sub>ID</sub><sup>1</sup>=d<sub>1</sub>&#xb7;Q<sub>1 </sub><b>214</b> and send D<sub>ID</sub><sup>1 </sup><b>214</b> to P<sub>1 </sub><b>218</b>. Then, KGC <b>206</b> may compute a partial private key g<sub>1</sub>=g<sup>d</sup><sup><sup2>1</sup2></sup>1, and the second partial private key D<sub>ID</sub><sup>2</sup>=(d<sub>2</sub>, g<sub>1</sub>) <b>216</b>. Finally, KGC <b>206</b> may send D<sub>ID</sub><sup>2 </sup><b>216</b> to P<sub>2 </sub><b>220</b>.</p><p id="p-0066" num="0076">Distributed signature generation phase: An exemplary illustration of an embodiment <b>300</b> of a distributed signature generation phase is shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. As shown in this example, a user may inputs a message m to be signed and may receive a legitimate signature &#x3c3;=(h,S) as the output.</p><p id="p-0067" num="0077">1. P<sub>1</sub>&#x2192;P<sub>2</sub>: {request}</p><p id="p-0068" num="0078">P<sub>1 </sub><b>302</b> sends a signature request <b>304</b> to P<sub>2 </sub><b>306</b>.</p><p id="p-0069" num="0079">2. P<sub>2</sub>&#x2192;P<sub>1</sub>: {&#x3bc;<sub>1</sub>,&#x3bc;<sub>2</sub>}<ul id="ul0011" list-style="none">    <li id="ul0011-0001" num="0000">    <ul id="ul0012" list-style="none">        <li id="ul0012-0001" num="0080">(a) Upon receiving the request <b>304</b> from P<sub>1 </sub><b>302</b>, P<sub>2 </sub><b>306</b> chooses two random numbers k<sub>1</sub>,k<sub>2</sub>&#x2208;[1,q&#x2212;1] <b>308</b>.</li>        <li id="ul0012-0002" num="0081">(b) P<sub>2 </sub><b>306</b> computes &#x3bc;<sub>1</sub>=g<sub>1</sub><sup>k</sup><sup><sub2>1 </sub2></sup><b>310</b> and &#x3bc;<sub>2</sub>=g<sup>k</sup><sup><sub2>2 </sub2></sup><b>312</b>.</li>        <li id="ul0012-0003" num="0082">(c) P<sub>2 </sub><b>306</b> sends {&#x3bc;<sub>1</sub>,&#x3bc;<sub>2</sub>} <b>314</b> to P<sub>1 </sub><b>302</b>.</li>    </ul>    </li></ul></p><p id="p-0070" num="0083">3. P<sub>1</sub>&#x2192;P<sub>2</sub>: {h&#x2032;}.<ul id="ul0013" list-style="none">    <li id="ul0013-0001" num="0000">    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0084">(a) Upon receiving the message <b>314</b>, P<sub>1 </sub><b>302</b> chooses two random numbers k<sub>3</sub>,k<sub>4</sub>&#x2208;[1,q&#x2212;1] <b>316</b>.</li>        <li id="ul0014-0002" num="0085">(b) P<sub>1 </sub><b>302</b> computes &#x3bc;=&#x3bc;<sub>1</sub><sup>k</sup><sup><sub2>3</sub2></sup>&#xb7;&#x3bc;<sub>2</sub>&#xb7;g<sup>k</sup>4 <b>318</b>, h=H<sub>2</sub>(m,&#x3bc;) (the hash value of the message m) <b>320</b> and h&#x2032;=h+k<sub>4 </sub>(mod q) <b>322</b>.</li>        <li id="ul0014-0003" num="0086">(c) P<sub>1 </sub><b>302</b> sends {h&#x2032;} <b>324</b> to P<sub>2 </sub><b>306</b>.</li>    </ul>    </li></ul></p><p id="p-0071" num="0087">4. P<sub>2</sub>&#x2192;P<sub>1</sub>: {s<sub>1</sub>,s<sub>2</sub>}<ul id="ul0015" list-style="none">    <li id="ul0015-0001" num="0000">    <ul id="ul0016" list-style="none">        <li id="ul0016-0001" num="0088">(a)Upon receiving the message <b>324</b>, P<sub>2 </sub><b>306</b> computes s<sub>1</sub>=k<sub>1</sub>&#xb7;d<sub>2 </sub>(mod q) <b>326</b> and s<sub>2</sub>=(h&#x2032;+k<sub>2</sub>)&#xb7;d<sub>2 </sub>(mod q) <b>328</b>.</li>        <li id="ul0016-0002" num="0089">(b) P<sub>2 </sub><b>306</b> sends {s<sub>1</sub>,s<sub>2</sub>} <b>330</b> to P<sub>1 </sub><b>302</b>.</li>    </ul>    </li></ul></p><p id="p-0072" num="0090">5. P<sub>1 </sub><b>302</b> outputs the signature <b>332</b>.<ul id="ul0017" list-style="none">    <li id="ul0017-0001" num="0000">    <ul id="ul0018" list-style="none">        <li id="ul0018-0001" num="0091">(a) P<sub>1 </sub><b>302</b> receives the message <b>330</b>, and computes S=k<sub>3</sub>&#xb7;s<sub>1</sub>&#xb7;Q<sub>1</sub>+s<sub>2</sub>&#xb7;D<sub>ID</sub><sup>1 </sup><b>334</b>.</li>        <li id="ul0018-0002" num="0092">(b) P1 verifies the signature (h,S) <b>332</b>, and if the signature <b>332</b> is valid then the signature will be given as the output.</li>    </ul>    </li></ul></p><p id="p-0073" num="0093">Thus, the process may compute &#x3bc;=g<sup>k</sup>1<sup>&#xb7;k</sup>3<sup>&#xb7;d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>+k</sup>2<sup>+k</sup>4 and S=(k<sub>1</sub>&#xb7;k<sub>3</sub>&#xb7;d<sub>1</sub><sup>&#x2212;1</sup>+k<sub>2</sub>+k<sub>4</sub>+h)D<sub>ID</sub><sup>1</sup>. The validity of the signature may be verified by computing</p><p id="p-0074" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mrow>   <msup>    <mi>&#x3bc;</mi>    <mo>*</mo>   </msup>   <mo>=</mo>   <mrow>    <mrow>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>S</mi>        <mo>,</mo>        <mrow>         <mrow>          <mrow>           <msub>            <mi>H</mi>            <mn>1</mn>           </msub>           <mo>(</mo>           <mi>ID</mi>           <mo>)</mo>          </mrow>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>         <mo>+</mo>         <msub>          <mi>P</mi>          <mrow>           <mi>p</mi>           <mo>&#x2062;</mo>           <mi>u</mi>           <mo>&#x2062;</mo>           <mi>b</mi>          </mrow>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mi>and</mi>     <mo>&#x2062;</mo>     <mrow>      <mtext> </mtext>      <mtext>  </mtext>     </mrow>     <mo>&#x2062;</mo>     <mtext>  </mtext>     <msup>      <mi>h</mi>      <mo>*</mo>     </msup>    </mrow>    <mo>=</mo>    <mrow>     <msub>      <mi>H</mi>      <mn>2</mn>     </msub>     <mo>(</mo>     <mrow>      <mi>m</mi>      <mo>,</mo>      <msup>       <mi>&#x3bc;</mi>       <mo>*</mo>      </msup>     </mrow>     <mo>)</mo>    </mrow>   </mrow>  </mrow>  <mo>,</mo> </mrow></math></maths></p><p id="p-0075" num="0000">comparing whether h* is equal to h.</p><p id="p-0076" num="0094">Security Analysis&#x2014;System Model:</p><p id="p-0077" num="0095">Definition 2. Let A be a P.P.T adversary, and &#x3c0; be a digital signature protocol &#x3c0;={Gen,Sign,Verify}. Sign<sub>A,&#x3c0;</sub>(1<sup>n</sup>) may be defined as follows.<ul id="ul0019" list-style="none">    <li id="ul0019-0001" num="0000">    <ul id="ul0020" list-style="none">        <li id="ul0020-0001" num="0096">1. (pk,sk)&#x2192;Gen(1<sup>n</sup>). A runs the Gen(1<sup>n</sup>) algorithm, and outputs a random key pair (pk,sk).</li>        <li id="ul0020-0002" num="0097">2. (m*,&#x3c3;*)&#x2192;A<sup>Sign</sup><sup><sub2>sk</sub2></sup>(&#xb7;). A runs the Sign(&#xb7;)algorithm, and outputs (m*,&#x3c3;*).</li>        <li id="ul0020-0003" num="0098">3. The set of all m that A queries to its oracle is M. When m*&#x2209;M and Verify<sub>pk</sub>(m*,&#x3c3;*)=1, the experiment outputs 1.</li>    </ul>    </li></ul></p><p id="p-0078" num="0099">Definition 3: Existentially Unforgeable under Choose Message Attacks. For any P.P.T adversary A, if there exists a negligible function &#x3bc; for every n that satisfies Pr[Sign<sub>A,&#x3c0;</sub>(1<sup>n</sup>)=1]&#x2264;&#x3bc;(n), then the signature protocol &#x3c0; is existentially unforgeable under the chosen message attack.</p><p id="p-0079" num="0100">Definition 4. Let A be a P.P.T adversary, and &#x3c0; be a digital signature protocol &#x3c0;={Gen,Sign,Verify}. DistSign<sub>A,&#x3a0;</sub>(1<sup>n</sup>),b&#x2208;{1,2} may be defined as follows.<ul id="ul0021" list-style="none">    <li id="ul0021-0001" num="0000">    <ul id="ul0022" list-style="none">        <li id="ul0022-0001" num="0101">1. (pk,sk)&#x2192;A<sup>&#x3a0;3-b</sup>(1<sup>n</sup>).</li>        <li id="ul0022-0002" num="0102">2. (m*,&#x3c3;*)&#x2192;A<sup>&#x3a0;b</sup>(&#xb7;,&#xb7;).</li>        <li id="ul0022-0003" num="0103">3. The set of all inputs m&#x2208;(sid,m) that A queries to its oracle is M, and the identifier sid should not be previously queried. When m*&#x2209;M, Verify<sub>pk</sub>(m*,&#x3c3;*)=1 and Verify are as specified in &#x3c0;, the experiment outputs 1.</li>    </ul>    </li></ul></p><p id="p-0080" num="0104">Definition 5: Secure Two-Party Distributed Signature Scheme. For any P.P.T adversary A and every b&#x2208;{0,2}, if there exists a negligible function &#x3bc; for every n that satisfies Pr[DistSign<sub>A, &#x3a0;</sub><sup>b</sup>(1<sup>n</sup>)=1]&#x2264;&#x3bc;(n), then &#x3a0; is a secure two-party protocol for distributes signature generation for &#x3c0;.</p><p id="p-0081" num="0105">Definition 6: Blindness. Given two signature records and a signature pair, for any P.P.T adversary A, A is not able to specify which signature record belongs to the signature pair, then &#x3a0; is not blind.</p><p id="p-0082" num="0106">In the above definitions, the distributed key generation phase should be run first and only once, before running the distributed signature phase. An honest device P<sub>3&#x2212;b </sub>operates the protocol &#x3a0; and makes the stateful oracle &#x3a0;<sub>b</sub>(&#xb7;,&#xb7;). In the two-party signature generation phase DistSign<sub>A, &#x3a0;</sub><sup>b</sup>, A can control the device P<sub>b</sub>,b&#x2208;{1,2} , choose the messages to be signed, and interact with multiple instances to generate a forged signature concurrently.</p><p id="p-0083" num="0107">A can win the game if the message m* for the forged signature is not queried. The oracle has two inputs: a session identifier and an input, and it works as follows:</p><p id="p-0084" num="0108">1. On receiving a query (sid,m), if the distributed key generation phase has not completed, then oracle returns &#x22a5;.</p><p id="p-0085" num="0109">2. In the event that a query (sid,m) is received when the distributed key generation phase has commenced, if sid is the first to be queried, then the device P<sub>3&#x2212;b </sub>operates the protocol with session identifier sid and the input message m which is to be signed. What the device P<sub>3&#x2212;b </sub>first sends in the sign phase is the oracle replay.</p><p id="p-0086" num="0110">3. On receiving a query (sid,m) when the distributed key generation phase has computed and identifier sid has been queried, the oracle sends the message m to the device P<sub>3&#x2212;b </sub>and returns the next message output from P<sub>3&#x2212;b</sub>.</p><p id="p-0087" num="0111">Proof of security: The protocol &#x3a0; may be proved to be a secure two-party distributed signature protocol and existentially unforgeable under chosen message attacks, and the protocol is also blind in this section.</p><p id="p-0088" num="0112">Theorem 1: Suppose that IEEE standard for identity-based (BLMQ) signature scheme is existentially unforgeable under choose message attacks, then the protocol is a secure two-party distributed signature and existentially unforgeable under choose message attacks.</p><p id="p-0089" num="0113">Proof: If an adversary A can break the protocol with the probability &#x3b5;, then it can break the protocol with probability &#x3b5;+&#x3bc;(n), where &#x3bc; is a negligible function. In this proof, the security of a corrupted P<sub>1 </sub>and a corrupted P<sub>2 </sub>are proven separately. For any A who can attack the protocol and forge a signature in DistSign<sub>A, &#x3a0;</sub><sup>b</sup>(1<sup>n</sup>), we select another adversary S who can forge a BLMQ signature in Sign<sub>S,&#x3c0;</sub>(1<sup>n</sup>) with a negligibly close probability. Then, for every P.P.T adversary A and b&#x2208;{1,2}, there exists a negligible function &#x3bc; for every n and an adversary S, that satisfies,</p><p id="p-0090" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>|<i>Pr</i>[Sign<sub>S,&#x3c0;</sub>(1<sup>n</sup>)=1<i>]&#x2212;Pr</i>[DistSign<sub>A, &#x3a0;</sub><sup>b</sup>(1<sup>n</sup>)=1]|&#x2264;&#x3bc;(<i>n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0091" num="0114">According to Definition 3, there exists a negligible function &#x3bc;&#x2032; for every n that satisfies Pr[Sign<sub>A,&#x3c0;</sub>(1<sup>n</sup>)=1]&#x2264;&#x3bc;&#x2032;(n). Combining this with the above equation, Pr[DistSign<sub>S, &#x3a0;</sub><sup>b</sup>(1<sup>n</sup>)=1]&#x2264;&#x3bc;(n)+&#x3bc;&#x2032;(n) is obtained. Thus, we prove the equation from two aspects: b=1 and b=2.</p><p id="p-0092" num="0115">Proof of b=1. The adversary corrupts device P<sub>1</sub>. Assume A can forge a signature in DistSign<sub>A, &#x3a0;</sub><sup>b</sup>(1<sup>n</sup>) and S can forge a BLMQ signature in Sign<sub>S,&#x3c0;</sub>(1<sup>n</sup>). Thus, A can use the response of S.<ul id="ul0023" list-style="none">    <li id="ul0023-0001" num="0116">1. S receives (1<sup>n</sup>,H<sub>1</sub>(ID)), in which H<sub>1</sub>(ID) is user's public key.</li>    <li id="ul0023-0002" num="0117">2. S invokes A and simulates the instructions of A in DistSign with the input of (1<sup>n</sup>) and the output as described in the following:    <ul id="ul0024" list-style="none">        <li id="ul0024-0001" num="0118">(a) If the distributed key generation phase has not completed, then S replies &#x22a5; to all queries (sid,m).</li>        <li id="ul0024-0002" num="0119">(b) On receiving a query (sid,m), if sid is the first to be queried, S queries the signature in DistSign and receives (h,S), and S can compute &#x3bc; in then BLMQ signature scheme, then A queries S with identifier sid as below.</li>    </ul>    </li></ul></p><p id="p-0093" num="0120">Case 1:<ul id="ul0025" list-style="none">    <li id="ul0025-0001" num="0121">i. The first message m<sub>1 </sub>in (sid,m<sub>1</sub>) as (prove,1,(&#x3bc;<sub>1</sub>,&#x3bc;<sub>2</sub>),(k<sub>1</sub>,k<sub>2</sub>)) that S sends to F<sub>zk</sub>, if &#x3bc;<sub>1</sub>=g<sub>1</sub><sup>k</sup><sup><sub2>1</sub2></sup>=g<sup>k</sup><sup><sub2>1</sub2></sup><sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1 and &#x3bc;<sub>2</sub>=g<sup>k</sup>2, then A computes {&#x3bc;h&#x2032;}, and replies the message (prove,2,&#x3bc;,k<sub>3</sub>) to S.</li>    <li id="ul0025-0002" num="0122">ii. On receiving the message, if the proof is valid, then S sets s<sub>1</sub>=k<sub>3</sub><sup>&#x2212;1</sup>&#xb7;S and replies the message (prove,3,s<sub>1</sub>,k<sub>3</sub><sup>&#x2212;1</sup>) to A.</li></ul></p><p id="p-0094" num="0123">Case 2:<ul id="ul0026" list-style="none">    <li id="ul0026-0001" num="0124">i. A does not execute the instructions of P<sub>1 </sub>and set &#x3bc;=g<sup>x </sup>and h=H<sub>2</sub>(m,&#x3bc;). Then, A sends the message (prove,1,&#x3bc;,x) to S.</li>    <li id="ul0026-0002" num="0125">ii. On receiving the message, if the proof is valid, then S generates random (s<sub>1</sub>,s<sub>2</sub>) and sends them to A.</li></ul></p><p id="p-0095" num="0126">3. A computes &#x3c3;* and outputs a signature (m*,&#x3c3;*), then S terminals the simulation and outputs (m*,&#x3c3;*).</p><p id="p-0096" num="0127">The view of A in the simulation of key generation phase is different from the real execution of protocol &#x3a0;. The way an honest P<sub>1 </sub>generates &#x3bc; in the real &#x3a0; is that: P<sub>1 </sub>uses the message from P<sub>2 </sub>to generate &#x3bc;, whereas A computes &#x3c1;&#x2192;g<sup>x</sup>, in which x is a random number. Consider that S behaves as P<sub>2 </sub>completely in all messages. Since {x,k<sub>1</sub>,k<sub>2</sub>,k<sub>3</sub>,k<sub>4</sub>} are all chosen randomly, it is determined that there is no distinction between &#x3bc;=g<sup>x </sup>and &#x3bc;=&#x3bc;<sub>1</sub><sup>k</sup><sup><sub2>3</sub2></sup>&#x3bc;<sub>2</sub>g<sup>k</sup>4.</p><p id="p-0097" num="0128">In Case 1 of the distributed signing phase, the simulator P<sub>2 </sub>generates s<sub>1 </sub>and s<sub>2 </sub>using the random numbers {k<sub>1</sub>,k<sub>2</sub>} and its own private key d<sub>2</sub>. The output of A is computationally indistinguishable to the real output signature in a real protocol. In other words, A outputs a valid signature pair (m*,&#x3c3;*) with the same probability in the simulation and in real DistSign. The signatures can be distinguished by verifying whether they match with the public key. When A receives messages from P<sub>2</sub>, it computes the signature S*. The following equation results:</p><p id="p-0098" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>S*=k</i><sub>3</sub><i>&#xb7;k</i><sub>&#x2212;1</sub><sup>3</sup><i>&#xb7;S</i>=(<i>k</i><sub>3</sub><i>k*</i><sub>1</sub><i>d</i><sub>1</sub><sup>&#x2212;1</sup><i>+k</i><sub>2</sub><i>+k</i><sub>4</sub><i>+h</i>)&#xb7;<i>K</i><sub>ID</sub>=(<i>k</i><sub>3</sub><i>k*</i><sub>1</sub><i>d</i><sub>1</sub><sup>&#x2212;1</sup><i>+k</i><sub>2</sub><i>+k</i><sub>4</sub><i>+h</i>)&#xb7;<i>d</i><sub>1</sub><i>d</i><sub>2</sub><i>&#xb7;Q</i><sub>1 </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0099" num="0129">If A knows the valid signature, then A can compute d<sub>2 </sub>with a non-negligible probability &#x3b5;. That means A can solve the DL problem with a non-negligible probability &#x3b5;. According to the DL problem, Pr[d<sub>2</sub>|(k<sub>3</sub>k*<sub>1</sub>d<sub>1</sub><sup>&#x2212;1</sup>+k<sub>2</sub>+k<sub>4</sub>+h)&#xb7;d<sub>1</sub>d<sub>2</sub>&#xb7;Q<sub>1</sub>]&#x2264;&#x3bc;(n), which contradicts</p><p id="p-0100" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b5;&#x2264;<i>Pr[d</i><sub>2</sub><i>|k</i><sub>3</sub><i>k*</i><sub>1</sub><i>d</i><sup>&#x2212;1</sup><i>+k</i><sub>2</sub><i>+k</i><sub>4</sub><i>+h</i>)&#xb7;<i>d</i><sub>1</sub><i>d</i><sub>2</sub><i>Q</i><sub>1</sub>]&#x2264;&#x3bc;(<i>n</i>).<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0101" num="0130">Thus, A cannot obtain the private key of P<sub>2 </sub>even when P<sub>1 </sub>corrupted and knows the correct signature.</p><p id="p-0102" num="0131">In Case 2 of the distributed signing phase, since the simulator's private key d<sub>2 </sub>and the KGC's secret key s are unknown to A, A selects a random number d<sub>2 </sub>to construct signature S*=(x+h)&#xb7;d<sub>1</sub>&#xb7;d*<sub>2</sub>Q<sub>1</sub>. There exists:</p><p id="p-0103" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msup>      <mi>&#x3bc;</mi>      <mo>*</mo>     </msup>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <msup>         <mi>S</mi>         <mo>*</mo>        </msup>        <mo>,</mo>        <mrow>         <mrow>          <mrow>           <msub>            <mi>H</mi>            <mn>1</mn>           </msub>           <mo>(</mo>           <mi>ID</mi>           <mo>)</mo>          </mrow>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>         <mo>+</mo>         <msub>          <mi>P</mi>          <mrow>           <mi>p</mi>           <mo>&#x2062;</mo>           <mi>u</mi>           <mo>&#x2062;</mo>           <mi>b</mi>          </mrow>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <msup>         <mi>S</mi>         <mo>*</mo>        </msup>        <mo>,</mo>        <mrow>         <mrow>          <mrow>           <msub>            <mi>H</mi>            <mn>1</mn>           </msub>           <mo>(</mo>           <mi>ID</mi>           <mo>)</mo>          </mrow>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>         <mo>+</mo>         <mrow>          <mi>s</mi>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <msup>         <mi>S</mi>         <mo>*</mo>        </msup>        <mo>,</mo>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mrow>            <msub>             <mi>H</mi>             <mn>1</mn>            </msub>            <mo>(</mo>            <mi>ID</mi>            <mo>)</mo>           </mrow>           <mo>+</mo>           <mi>S</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>Q</mi>          <mn>2</mn>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mi>x</mi>           <mo>+</mo>           <mi>h</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>d</mi>          <mn>1</mn>         </msub>         <mo>&#x2062;</mo>         <msubsup>          <mi>d</mi>          <mn>2</mn>          <mo>*</mo>         </msubsup>         <mo>&#x2062;</mo>         <msub>          <mi>Q</mi>          <mn>1</mn>         </msub>        </mrow>        <mo>,</mo>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mrow>            <msub>             <mi>H</mi>             <mn>1</mn>            </msub>            <mo>(</mo>            <mi>ID</mi>            <mo>)</mo>           </mrow>           <mo>+</mo>           <mi>s</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>Q</mi>          <mn>2</mn>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mrow>      <mfrac>       <msup>        <mi>g</mi>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mi>x</mi>           <mo>+</mo>           <mi>h</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>d</mi>          <mn>1</mn>         </msub>         <mo>&#x2062;</mo>         <mrow>          <msubsup>           <mi>d</mi>           <mn>2</mn>           <mo>*</mo>          </msubsup>          <mo>&#xb7;</mo>          <mrow>           <mo>(</mo>           <mrow>            <mrow>             <msub>              <mi>H</mi>              <mn>1</mn>             </msub>             <mo>(</mo>             <mi>ID</mi>             <mo>)</mo>            </mrow>            <mo>+</mo>            <mi>s</mi>           </mrow>           <mo>)</mo>          </mrow>         </mrow>        </mrow>       </msup>       <msup>        <mi>g</mi>        <mi>h</mi>       </msup>      </mfrac>      <mo>=</mo>      <msup>       <mi>g</mi>       <mrow>        <mi>x</mi>        <mo>&#x2062;</mo>        <msub>         <mi>d</mi>         <mn>1</mn>        </msub>        <mo>&#x2062;</mo>        <mrow>         <msubsup>          <mi>d</mi>          <mn>2</mn>          <mo>*</mo>         </msubsup>         <mo>&#xb7;</mo>         <mrow>          <mo>(</mo>          <mrow>           <mrow>            <msub>             <mi>H</mi>             <mn>1</mn>            </msub>            <mo>(</mo>            <mi>ID</mi>            <mo>)</mo>           </mrow>           <mo>+</mo>           <mi>s</mi>          </mrow>          <mo>)</mo>         </mrow>        </mrow>       </mrow>      </msup>     </mrow>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00006-2" num="00006.2"><math overflow="scroll"> <mrow>  <mfrac>   <msup>    <mi>&#x3bc;</mi>    <mo>*</mo>   </msup>   <mi>&#x3bc;</mi>  </mfrac>  <mo>=</mo>  <mrow>   <mfrac>    <msup>     <mi>g</mi>     <mrow>      <mi>x</mi>      <mo>&#x2062;</mo>      <msub>       <mi>d</mi>       <mn>1</mn>      </msub>      <mo>&#x2062;</mo>      <mrow>       <msubsup>        <mi>d</mi>        <mn>2</mn>        <mo>*</mo>       </msubsup>       <mo>&#xb7;</mo>       <mrow>        <mo>(</mo>        <mrow>         <mrow>          <msub>           <mi>H</mi>           <mn>1</mn>          </msub>          <mo>(</mo>          <mi>ID</mi>          <mo>)</mo>         </mrow>         <mo>+</mo>         <mi>s</mi>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>    </msup>    <msup>     <mi>g</mi>     <mi>x</mi>    </msup>   </mfrac>   <mo>=</mo>   <msup>    <mi>g</mi>    <mrow>     <msub>      <mi>d</mi>      <mn>1</mn>     </msub>     <mo>&#x2062;</mo>     <mrow>      <msubsup>       <mi>d</mi>       <mn>2</mn>       <mo>*</mo>      </msubsup>      <mo>&#xb7;</mo>      <mrow>       <mo>(</mo>       <mrow>        <mrow>         <msub>          <mi>H</mi>          <mn>1</mn>         </msub>         <mo>(</mo>         <mi>ID</mi>         <mo>)</mo>        </mrow>        <mo>+</mo>        <mi>s</mi>       </mrow>       <mo>)</mo>      </mrow>     </mrow>    </mrow>   </msup>  </mrow> </mrow></math></maths></p><p id="p-0104" num="0132">A obtains g<sup>d</sup><sup><sub2>1</sub2></sup><sup>d*</sup>2<sup>&#xb7;(H</sup><sup><sub2>1</sub2></sup><sup>(ID)+s) </sup>and outputs d*<sub>2 </sub>as the answer to the CDH problem. Suppose that A can select the right d*<sub>2 </sub>to make the above equations hold in a non-negligible probability &#x3b5;. That means A can solve the CDH problem in a non-negligible probability &#x3b5;. According to the CDH problem, Pr[d*<sub>2</sub>|g<sup>d</sup><sup><sub2>1</sub2></sup><sup>d*</sup>2<sup>&#xb7;(H</sup><sup><sub2>1</sub2></sup><sup>(ID)+s)</sup>]&#x2264;&#x3bc;(n) this contradicts</p><p id="p-0105" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b5;&#x2264;<i>Pr[d*</i><sub>2</sub><i>|g</i><sup>d</sup><sup><sub2>1</sub2></sup><sup>d*</sup>2<sup>&#xb7;(H</sup><sup><sub2>1</sub2></sup><sup>(ID)+s)</sup>]&#x2264;&#x3bc;(<i>n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0106" num="0133">Thus, the signature cannot be verified based on the unknown d<sub>2 </sub>and s.</p><p id="p-0107" num="0134">Proof of b=2. The adversary corrupts device P<sub>2</sub>, and we follow the same steps as the case of b=1. Unlike with b=1, in this case, the signature is computed by S and replied to A. In other words, A can forge a signature in DistSign<sub>A, &#x3a0;</sub><sup>b</sup>(1<sup>n</sup>) and S can forge a BLMQ signature in Sign<sub>S,&#x3c0;</sub>(1<sup>n</sup>). Thus, the adversary A cannot forge a legitimate signature under the circumstances that S private key is not known to A.</p><p id="p-0108" num="0135">This simulation is similar to the above with a difference that the last message P<sub>2 </sub>to P<sub>1 </sub>composes of random numbers. P<sub>1 </sub>cannot determine whether the random numbers used in messages from P<sub>2 </sub>is consistent. In this simulation, S computes the signature pair and replies them to A. If A can forge a legitimate signature &#x3c3;*, then A can carry out the attack without knowing the private key of P<sub>1</sub>. This problem may be solved by getting S to abort the simulation at some random points. S chooses a random number i&#x2208;{1, . . . ,p(n)+1}, in which p(n) means the number of queries. If S chooses correctly, then the simulation is successful.</p><p id="p-0109" num="0136">1. S receives (i<sup>n</sup>,H<sub>1</sub>(ID)), in which H<sub>1</sub>(ID) is user's public key.</p><p id="p-0110" num="0137">2. Let p(&#xb7;) denotes the number of queries that A executes protocol &#x3a0;. Thus, S can choose a random number i&#x2208;{1, . . . ,p(&#xb7;)1}.</p><p id="p-0111" num="0138">3. S invokes A and simulates the instructions of A in DistSign with the input of (1<sup>n</sup>). The output is described in the following:<ul id="ul0027" list-style="none">    <li id="ul0027-0001" num="0139">(a) If the distributed key generation phase has not completed, then S replies &#x22a5; to all queries (sid,m).</li>    <li id="ul0027-0002" num="0140">(b) On receiving a query (sid,m), if sid is the first queried, then S computes and sends the corresponding reply (proof,sid) to A.</li>    <li id="ul0027-0003" num="0141">(c) After S queries the signature in DistSign and returns (h,S), S can compute the &#x3bc; in BLMQ signature scheme. Then, A queries S with identifier sid as below:    <ul id="ul0028" list-style="none">        <li id="ul0028-0001" num="0142">i. A sends the first message m<sub>1</sub>=(prove, 1,(&#x3bc;<sub>1</sub>,&#x3bc;<sub>2</sub>),(k<sub>1</sub>,k<sub>2</sub>)) in (sid,m<sub>1</sub>). If &#x3bc;<sub>1</sub>=g<sub>1</sub><sup>k</sup><sup><sub2>1</sub2></sup>=g<sup>k</sup><sup><sub2>1</sub2></sup><sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1 and &#x3bc;<sub>2</sub>=h<sup>k</sup><sup><sub2>2</sub2></sup>, then S sets &#x3bc;=g<sup>k</sup><sup><sub2>1</sub2></sup><sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>k</sup><sup><sub2>3</sub2></sup><sup>+k</sup><sub>2 </sub>and h=H<sub>2</sub>(m,&#x3bc;), and replies the message (proof,2,h) to A. Otherwise, S terminates the simulation.</li>        <li id="ul0028-0002" num="0143">ii. The second message m<sub>2 </sub>in (sid,m<sub>2</sub>) is denoted as (prove,3,(s<sub>1</sub>,s<sub>2</sub>),d<sub>2</sub>). If this is the i-th query of A to &#x3a0;, then S terminates the simulation and returns &#x22a5;. Otherwise, it continues.</li>    </ul>    </li></ul></p><p id="p-0112" num="0144">4. Whenever A stops the query and outputs the (m*,&#x3c3;*), S terminates the simulation and outputs (m*,&#x3c3;*).</p><p id="p-0113" num="0145">A can obtain p(n) correct signatures since i&#x2208;{1, . . . ,p(n)+1}. Thus, the following equation:</p><p id="p-0114" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msup>      <mi>&#x3bc;</mi>      <mo>*</mo>     </msup>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <msup>         <mi>S</mi>         <mo>*</mo>        </msup>        <mo>,</mo>        <mrow>         <mrow>          <mrow>           <msub>            <mi>H</mi>            <mn>1</mn>           </msub>           <mo>(</mo>           <mi>ID</mi>           <mo>)</mo>          </mrow>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>         <mo>+</mo>         <msub>          <mi>P</mi>          <mrow>           <mi>p</mi>           <mo>&#x2062;</mo>           <mi>u</mi>           <mo>&#x2062;</mo>           <mi>b</mi>          </mrow>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <msup>         <mi>S</mi>         <mo>*</mo>        </msup>        <mo>,</mo>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mrow>            <msub>             <mi>H</mi>             <mn>1</mn>            </msub>            <mo>(</mo>            <mi>ID</mi>            <mo>)</mo>           </mrow>           <mo>+</mo>           <mi>s</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>Q</mi>          <mn>2</mn>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mrow>            <msub>             <mi>k</mi>             <mn>1</mn>            </msub>            <mo>&#x2062;</mo>            <msub>             <mi>k</mi>             <mn>3</mn>            </msub>            <mo>&#x2062;</mo>            <msubsup>             <mi>d</mi>             <mn>1</mn>             <mrow>              <mo>-</mo>              <mn>1</mn>             </mrow>            </msubsup>           </mrow>           <mo>+</mo>           <msub>            <mi>k</mi>            <mn>2</mn>           </msub>           <mo>+</mo>           <mi>h</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>d</mi>          <mn>1</mn>         </msub>         <mo>&#x2062;</mo>         <msub>          <mi>d</mi>          <mn>2</mn>         </msub>         <mo>&#x2062;</mo>         <msub>          <mi>Q</mi>          <mn>1</mn>         </msub>        </mrow>        <mo>,</mo>        <mrow>         <mrow>          <mo>(</mo>          <mrow>           <mrow>            <msub>             <mi>H</mi>             <mn>1</mn>            </msub>            <mo>(</mo>            <mi>ID</mi>            <mo>)</mo>           </mrow>           <mo>+</mo>           <mi>s</mi>          </mrow>          <mo>)</mo>         </mrow>         <mo>&#x2062;</mo>         <msub>          <mi>Q</mi>          <mn>2</mn>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <mrow>      <mfrac>       <msup>        <mi>g</mi>        <mrow>         <mo>(</mo>         <mrow>          <mrow>           <msub>            <mi>k</mi>            <mn>1</mn>           </msub>           <mo>&#x2062;</mo>           <msub>            <mi>k</mi>            <mn>3</mn>           </msub>           <mo>&#x2062;</mo>           <msubsup>            <mi>d</mi>            <mn>1</mn>            <mrow>             <mo>-</mo>             <mn>1</mn>            </mrow>           </msubsup>          </mrow>          <mo>+</mo>          <msub>           <mi>k</mi>           <mn>2</mn>          </msub>          <mo>+</mo>          <mi>h</mi>         </mrow>         <mo>)</mo>        </mrow>       </msup>       <msup>        <mi>g</mi>        <mi>h</mi>       </msup>      </mfrac>      <mo>=</mo>      <msup>       <mi>g</mi>       <mrow>        <mrow>         <msub>          <mi>k</mi>          <mn>1</mn>         </msub>         <mo>&#x2062;</mo>         <msub>          <mi>k</mi>          <mn>3</mn>         </msub>         <mo>&#x2062;</mo>         <msubsup>          <mi>d</mi>          <mn>1</mn>          <mrow>           <mo>-</mo>           <mn>1</mn>          </mrow>         </msubsup>        </mrow>        <mo>+</mo>        <msub>         <mi>k</mi>         <mn>2</mn>        </msub>       </mrow>      </msup>     </mrow>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0115" num="0146">In this simulation, A keeps its own random number invariant during all queries, and S generates different randomly in every query. Thus, for p(n) correct signatures, A computes g<sup>k</sup>2 at the beginning of protocol &#x3a0;, and there exists:</p><p id="p-0116" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3bc;*<sub>1</sub><i>=g</i><sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sub2>3</sub2></sup><sup><sup2>1</sup2></sup><sup>d</sup><sup><sub2>1</sub2></sup><sup><sup2>&#x2212;1</sup2></sup><sup>+k</sup><sup><sub2>2 </sub2></sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0117" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3bc;*<sub>2</sub><i>=g</i><sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sub2>3</sub2></sup><sup><sup2>2</sup2></sup><sup>d</sup><sup><sub2>1</sub2></sup><sup><sup2>&#x2212;1</sup2></sup><sup>+k</sup><sup><sub2>2 </sub2></sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0118" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3bc;*<sub>n</sub><i>=g</i><sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sub2>3</sub2></sup><sup><sup2>n</sup2></sup><sup>d</sup><sup><sub2>1</sub2></sup><sup><sup2>&#x2212;1</sup2></sup><sup>+k</sup><sup><sub2>2 </sub2></sup><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0119" num="0147">A obtains g<sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sup2>i</sup2></sup>3<sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>+k</sup><sup><sub2>2</sub2></sup>,i&#x2208;{1, . . . ,p(n)+1} and outputs k<sub>3</sub>d<sub>1</sub><sup>&#x2212;1 </sup>as the answer to k-CAA problem. Suppose that A can compute k<sub>3</sub>d<sub>1</sub><sup>&#x2212;1 </sup>to make the above equations hold in a non-negligible probability &#x3b5;. That means A can solve the k-CAA problem in a non-negligible probability &#x3b5;. According to the Collusion Attack Algorithm with k Traitor, Pr[k<sub>1</sub>k<sub>3</sub>d<sub>1</sub><sup>&#x2212;1</sup>|g<sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sup2>i</sup2></sup>3<sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>+k</sup><sup><sub2>2</sub2></sup>]&#x2264;&#x3bc;(n). This contradicts</p><p id="p-0120" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b5;&#x2264;<i>Pr[k</i><sub>1</sub><i>k</i><sub>3</sub><i>d</i><sub>1</sub><sup>&#x2212;1</sup><i>|g</i><sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sup2>i</sup2></sup>3<sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>+k</sup><sup><sub2>2</sub2></sup>]&#x2264;&#x3bc;(<i>n</i>).<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0121" num="0148">Thus, A cannot know any information about P<sub>1 </sub>in the event that P<sub>2 </sub>is corrupted.</p><p id="p-0122" num="0149">Theorem 2 Suppose a P.P.T adversary A is able to specify which signature record belongs to the signature pair in a negligible function &#x3bc; for every n, then we can say our protocol is blind.</p><p id="p-0123" num="0150">Proof Suppose A can distinguish the signature records with the probability &#x3b5;. In this proof, we separately prove the blindness of device P<sub>2 </sub>and an external adversary.</p><p id="p-0124" num="0151">For device P<sub>2</sub>. For every signature pair (m,&#x3c3;) generated by device P<sub>1</sub>, the signature record for P<sub>2 </sub>includes {&#x3bc;<sub>1</sub>,&#x3bc;<sub>2</sub>,h&#x2032;,s<sub>1</sub>,s<sub>2</sub>,k<sub>1</sub>,k<sub>2</sub>,d<sub>2</sub>}. Given two signature records {&#x3bc;&#x2032;<sub>1</sub>,&#x3bc;&#x2032;<sub>2</sub>,h&#x2033;,s&#x2032;<sub>1</sub>,s&#x2032;<sub>2</sub>,k&#x2032;<sub>1</sub>,k&#x2032;<sub>2</sub>,d<sub>2</sub>} and {&#x3bc;&#x2033;<sub>1</sub>,&#x3bc;&#x2033;<sub>2</sub>,h&#x2032;&#x2033;,s&#x2033;<sub>1</sub>,s&#x2033;<sub>2</sub>,k&#x2033;<sub>1</sub>,k&#x2033;<sub>2</sub>,d<sub>2</sub>}, and a signature pair (m,h,S). From the signature pair (m,h,S), P<sub>2 </sub>can compute:</p><p id="p-0125" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>&#x3bc;</mi>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>S</mi>        <mo>,</mo>        <mrow>         <mrow>          <mrow>           <msub>            <mi>H</mi>            <mn>1</mn>           </msub>           <mo>(</mo>           <mi>ID</mi>           <mo>)</mo>          </mrow>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>         <mo>+</mo>         <msub>          <mi>P</mi>          <mrow>           <mi>p</mi>           <mo>&#x2062;</mo>           <mi>u</mi>           <mo>&#x2062;</mo>           <mi>b</mi>          </mrow>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <msup>      <mi>g</mi>      <mrow>       <mrow>        <msub>         <mi>k</mi>         <mn>1</mn>        </msub>        <mo>&#x2062;</mo>        <msubsup>         <mi>k</mi>         <mn>3</mn>         <mn>1</mn>        </msubsup>        <mo>&#x2062;</mo>        <msubsup>         <mi>d</mi>         <mn>1</mn>         <mrow>          <mo>-</mo>          <mn>1</mn>         </mrow>        </msubsup>       </mrow>       <mo>+</mo>       <msub>        <mi>k</mi>        <mn>2</mn>       </msub>       <mo>+</mo>       <msub>        <mi>k</mi>        <mn>4</mn>       </msub>      </mrow>     </msup>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0126" num="0152">P<sub>2 </sub>can compute k<sub>4 </sub>on the basis of h&#x2032;=h+k<sub>4</sub>. If P<sub>2 </sub>can specify which of {k&#x2032;<sub>1</sub>,k&#x2032;<sub>2</sub>} and {k&#x2033;<sub>1</sub>,k&#x2033;<sub>2</sub>} belongs to &#x3bc;, that means, P<sub>2 </sub>can solve DL problem in a non-negligible probability &#x3b5;. According to Discrete Logarithm Problem, Pr[k<sub>3</sub>d<sub>1</sub>|g<sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sup2>1</sup2></sup>3<sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>+k</sup><sup><sub2>2</sub2></sup>]&#x2264;&#x3bc;(n), it's contradictory</p><p id="p-0127" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>&#x3b5;&#x2264;<i>Pr[k</i><sub>3</sub><i>d</i><sub>1</sub><i>|g</i><sup>k</sup><sup><sub2>1</sub2></sup><sup>k</sup><sup><sup2>1</sup2></sup>3<sup>d</sup><sup><sup2>&#x2212;1</sup2></sup>1<sup>+k</sup><sup><sub2>2</sub2></sup>]&#x2264;&#x3bc;(<i>n</i>)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0128" num="0153">P<sub>2 </sub>cannot specify which record belongs to the signature pair.</p><p id="p-0129" num="0154">For external adversary. For every signature pair (m,&#x3c3;) generated by device P<sub>1</sub>, the signature record for an external adversary includes {&#x3bc;<sub>1</sub>,&#x3bc;<sub>2</sub>,h&#x2032;,s<sub>1</sub>,s<sub>2</sub>}. Given two signature records {&#x3bc;&#x2032;<sub>1</sub>,&#x3bc;&#x2032;<sub>2</sub>,h&#x2033;,s&#x2032;<sub>1</sub>,s&#x2032;<sub>2</sub>} and {&#x3bc;&#x2033;<sub>1</sub>,&#x3bc;&#x2033;<sub>2</sub>,h&#x2032;&#x2033;,s&#x2033;<sub>1</sub>,s&#x2033;<sub>2</sub>}, and a signature pair (m,h,S). From the signature pair (m,h,S), the adversary can compute:</p><p id="p-0130" num="0000"><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>&#x3bc;</mi>     <mo>=</mo>     <malignmark/>     <mfrac>      <mrow>       <mi>e</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>S</mi>        <mo>,</mo>        <mrow>         <mrow>          <mrow>           <msub>            <mi>H</mi>            <mn>1</mn>           </msub>           <mo>(</mo>           <mi>ID</mi>           <mo>)</mo>          </mrow>          <mo>&#x2062;</mo>          <msub>           <mi>Q</mi>           <mn>2</mn>          </msub>         </mrow>         <mo>+</mo>         <msub>          <mi>P</mi>          <mrow>           <mi>p</mi>           <mo>&#x2062;</mo>           <mi>u</mi>           <mo>&#x2062;</mo>           <mi>b</mi>          </mrow>         </msub>        </mrow>       </mrow>       <mo>)</mo>      </mrow>      <msup>       <mi>g</mi>       <mi>h</mi>      </msup>     </mfrac>    </mrow>   </mtd>  </mtr>  <mtr>   <mtd>    <mrow>     <mo>=</mo>     <malignmark/>     <msup>      <mi>g</mi>      <mrow>       <mrow>        <msub>         <mi>k</mi>         <mn>1</mn>        </msub>        <mo>&#x2062;</mo>        <msubsup>         <mi>k</mi>         <mn>3</mn>         <mn>1</mn>        </msubsup>        <mo>&#x2062;</mo>        <msubsup>         <mi>d</mi>         <mn>1</mn>         <mrow>          <mo>-</mo>          <mn>1</mn>         </mrow>        </msubsup>       </mrow>       <mo>+</mo>       <msub>        <mi>k</mi>        <mn>2</mn>       </msub>       <mo>+</mo>       <msub>        <mi>k</mi>        <mn>4</mn>       </msub>      </mrow>     </msup>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0131" num="0155">The adversary can compute k<sub>4 </sub>on the basis of h&#x2032;=h+k<sub>4</sub>. For {&#x3bc;&#x2032;<sub>1</sub>,&#x3bc;&#x2032;<sub>2</sub>}, the adversary cannot compute k&#x2032;<sub>1 </sub>and k&#x2032;<sub>2 </sub>without solving the DL problem in a non-negligible probability &#x3b5;.</p><p id="p-0132" num="0156">Thus, the adversary cannot specify which record belongs to the signature pair.</p><p id="p-0133" num="0157">Performance analysis: Embodiments of the described protocol may be implemented, for example, using the MIRACL library on two Android devices (i.e. Samsung Galaxy S5 with a Quad-core 2.45 G processor, 2 G bytes memory and the Google Android 4.4.2 operating system; and Google Nexus 6 with a Quad-core, 2.7 GHz processor, 3 G bytes memory and the Google Android 7.1.2 operating system) and a personal computer (Dell with an i7-6700 3.40 GHz processor, 8 G bytes memory and the window 10 operating system). Such embodiments may be useful for evaluating performance of the protocol. In such an evaluation, the personal computer is the KGC which generates partial private keys for both devices, which interact with each other via bluetooth, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. The security levels of the different curves are shown in Table 1:</p><p id="p-0134" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Security level</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="154pt" align="center"/><tbody valign="top"><row><entry/><entry>Type</entry><entry>Symmetric cipher key length (AES)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="154pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>MNT k = 6</entry><entry>80</entry></row><row><entry/><entry>BN k = 126</entry><entry>128</entry></row><row><entry/><entry>KSS k = 18</entry><entry>192</entry></row><row><entry/><entry>BLS k = 24</entry><entry>256</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0135" num="0158">It is known that:</p><p id="p-0136" num="0159">1. The security of MNT k=6 curve corresponds to 80 bits cipher length of AES.</p><p id="p-0137" num="0160">2. The security of BN k=12 curve corresponds to 128 bits cipher length of AES.</p><p id="p-0138" num="0161">3. The security of KSS k=18 curve corresponds to 192 bits cipher length of AES.</p><p id="p-0139" num="0162">4. The security of BLS k=24 curve corresponds to 256 bits cipher length of AES.</p><p id="p-0140" num="0163">In embodiments, the implementation may include parts such as setup, extract, signature and verify. The protocol &#x3a0; may generate a public parameter set P and the user's private key in the setup phase and the extract phase, respectively. &#x3a0; may verify the validity of the signature after the signature phase. The runtime of each part is shown in Table 2 and <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0141" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Distributed key generation and verification</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="56pt" align="center"/><colspec colname="3" colwidth="49pt" align="center"/><colspec colname="4" colwidth="56pt" align="center"/><tbody valign="top"><row><entry/><entry>TypeProcess</entry><entry>Setup</entry><entry>Distributed</entry><entry>Verify</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="56pt" align="char" char="."/><colspec colname="3" colwidth="49pt" align="char" char="."/><colspec colname="4" colwidth="56pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>MNT k = 6</entry><entry>149.16</entry><entry>21.55</entry><entry>130.65</entry></row><row><entry/><entry>BN k = 12</entry><entry>137.28</entry><entry>59.46</entry><entry>214.87</entry></row><row><entry/><entry>KSS k = 18</entry><entry>2075.37</entry><entry>666.18</entry><entry>2385.73</entry></row><row><entry/><entry>BLS k = 24</entry><entry>19337.18</entry><entry>17052.52</entry><entry>34181.8</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0142" num="0164">The computation cost of the signature phase may be analyzed. The runtime of the signature phase is shown in Table 3 and <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In the signature phase, step 1 refers to the execution of instructions by P<sub>2 </sub>after receiving a request from P<sub>1</sub>, step 2 refers to the execution of instructions by P<sub>1 </sub>before sending messages to P<sub>2</sub>, step3 refers to the execution of instructions by P<sub>2</sub>, and step 4 refers to the execution of instructions by P<sub>1 </sub>after receiving messages from P<sub>2 </sub></p><p id="p-0143" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Running times of signature phase</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="56pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="42pt" align="center"/><tbody valign="top"><row><entry/><entry>TypeProcess</entry><entry>Step1</entry><entry>Step2</entry><entry>Step3</entry><entry>Step4</entry></row><row><entry/><entry namest="offset" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="56pt" align="char" char="."/><colspec colname="4" colwidth="21pt" align="char" char="."/><colspec colname="5" colwidth="42pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>MNT k = 6</entry><entry>35.84</entry><entry>2.3</entry><entry>0.82</entry><entry>6.18</entry></row><row><entry/><entry>BN k = 12</entry><entry>103.79</entry><entry>16.3</entry><entry>1.11</entry><entry>9.38</entry></row><row><entry/><entry>KSS k = 18</entry><entry>1267.29</entry><entry>554.96</entry><entry>5.19</entry><entry>29.65</entry></row><row><entry/><entry>BLS k = 24</entry><entry>33776.69</entry><entry>25916.68</entry><entry>36.46</entry><entry>93.43</entry></row><row><entry/><entry namest="offset" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0144" num="0165">Embodiments of the present systems and method may provide a secure and efficient two-party distributed signature protocol, which builds on the identity-based signature scheme in the IEEE P1363 standard. For example, a valid signature can be generated without requiring the entire private key to be reconstructed, and the key cannot be generated from one (lost or stolen) device. This can be extremely attractive to mobile device users, as more users own more than one mobile device. In other words, a misplaced or stolen device will not result in the complete compromise of the user's data.</p><p id="p-0145" num="0166">An exemplary block diagram of a computing device <b>700</b>, in which entities and processes involved in the embodiments described herein may be implemented, is shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Computing device <b>700</b> may typically be implemented using one or more programmed general-purpose computer systems, such as embedded processors, systems on a chip, personal computers, workstations, server systems, and minicomputers or mainframe computers, or in distributed, networked computing environments. Computing device <b>700</b> may include one or more processors (CPUs) <b>702</b>A-<b>702</b>N, input/output circuitry <b>704</b>, network adapter <b>706</b>, and memory <b>708</b>. CPUs <b>702</b>A-<b>702</b>N execute program instructions in order to carry out the functions of the present communications systems and methods. Typically, CPUs <b>702</b>A-<b>702</b>N are one or more microprocessors, such as an INTEL CORE&#xae; processor.</p><p id="p-0146" num="0167"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an embodiment in which computing device <b>700</b> is implemented as a single multi-processor computer system, in which multiple processors <b>702</b>A-<b>702</b>N share system resources, such as memory <b>708</b>, input/output circuitry <b>704</b>, and network adapter <b>706</b>. However, the present communications systems and methods also include embodiments in which computing device <b>700</b> is implemented as a plurality of networked computer systems, which ma be single-processor computer systems, multi-processor computer systems, or a mix thereof.</p><p id="p-0147" num="0168">Input/output circuitry <b>704</b> provides the capability to input data to, or output data from, computing device <b>700</b>. For example, input/output circuitry may include input devices, such as keyboards, mice, touchpads, trackballs, scanners, analog to digital converters, etc., output devices, such as video adapters, monitors, printers, etc., and input/output devices, such as, modems, etc. Network adapter <b>706</b> interfaces device <b>700</b> with a network <b>710</b>. Network <b>710</b> may be any public or proprietary LAN or WAN, including, but not limited to the Internet.</p><p id="p-0148" num="0169">Memory <b>708</b> stores program instructions that are executed by, and data that are used and processed by, CPU <b>702</b> to perform the functions of computing device <b>700</b>. Memory <b>708</b> may include, for example, electronic memory devices, such as random-access memory (RAM), read-only memory (ROM), programmable read-only memory (PROM), electrically erasable programmable read-only memory (EEPROM), flash memory, etc., and electro-mechanical memory, such as magnetic disk drives, tape drives, optical disk drives, etc., which may use an integrated drive electronics (IDE) interface, or a variation or enhancement thereof, such as enhanced IDE (EIDE) or ultra-direct memory access (UDMA), or a small computer system interface (SCSI) based interface, or a variation or enhancement thereof, such as fast-SCSI, wide-SCSI, fast and wide-SCSI, etc., or Serial Advanced Technology Attachment (SATA), or a variation or enhancement thereof, or a fiber channel-arbitrated loop (FC-AL) interface.</p><p id="p-0149" num="0170">The contents of memory <b>708</b> may vary depending upon the function that computing device <b>700</b> is programmed to perform. In the example shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, exemplary memory contents are shown representing routines and data for embodiments of the processes described above. However, one of skill in the art would recognize that these routines, along with the memory contents related to those routines, may not be included on one system or device, but rather distributed among a plurality of systems or devices, based on well-known engineering considerations. The present systems and methods may include any and all such arrangements.</p><p id="p-0150" num="0171">In the example shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, memory <b>708</b> is shown as including both key generation center routines <b>710</b> and user device routines <b>712</b>. However, in many embodiments, only one such set of routines may be present in the device. For example, a key generation center (KGC) may be implemented using one or more server computer systems and may include only key generation center routines <b>710</b>, while a user device may be may be implemented using a mobile device, such as a smartphone, and may include only user device routines <b>712</b>.</p><p id="p-0151" num="0172">In the example shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, key generation center routines <b>710</b> may include key generation routines <b>714</b> and signature generation routines <b>716</b>, while user device routines <b>712</b> may include key generation routines <b>718</b> and signature generation routines <b>720</b>. Key generation routines <b>714</b> may include software routines to perform the KGC portion of embodiments of key generation processes, as described above. Signature generation routines <b>716</b> may include software routines to perform the KGC portion of embodiments of signature generation processes, as described above. Key generation routines <b>718</b> may include software routines to perform the user device portion of embodiments of key generation processes, as described above. Signature generation routines <b>720</b> may include software routines to perform the user device portion of embodiments of signature generation processes, as described above. Operating system <b>722</b> may provide overall system functionalities.</p><p id="p-0152" num="0173">As shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the present communications systems and methods may include implementation on a system or systems that provide multi-processor, multi-tasking, multi-process, and/or multi-thread computing, as well as implementation on systems that provide only single processor, single thread computing. Multi-processor computing involves performing computing using more than one processor. Multi-tasking computing involves performing computing using more than one operating system task. A task is an operating system concept that refers to the combination of a program being executed and bookkeeping information used by the operating system. Whenever a program is executed, the operating system creates a new task for it. The task is like an envelope for the program in that it identifies the program with a task number and attaches other bookkeeping information to it.</p><p id="p-0153" num="0174">Many operating systems, including Linux, UNIX&#xae;, OS/2&#xae;, and Windows&#xae;, are capable of running many tasks at the same time and are called multitasking operating systems. Multi-tasking is the ability of an operating system to execute more than one executable at the same time. Each executable is running in its own address space, meaning that the executables have no way to share any of their memory. Thus, it is impossible for any program to damage the execution of any of the other programs running on the system. However, the programs have no way to exchange any information except through the operating system (or by reading files stored on the file system).</p><p id="p-0154" num="0175">Multi-process computing is similar to multi-tasking computing, as the terms task and process are often used interchangeably, although some operating systems make a distinction between the two. The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention. The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device.</p><p id="p-0155" num="0176">The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing.</p><p id="p-0156" num="0177">A computer readable storage medium, as used herein, is not to be construed as being transitory signals per set, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (for example, light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire. Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers, and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0157" num="0178">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).</p><p id="p-0158" num="0179">In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0159" num="0180">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions. These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0160" num="0181">These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks. The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks. The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s).</p><p id="p-0161" num="0182">In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or that carry out combinations of special purpose hardware and computer instructions. Although specific embodiments of the present invention have been described, it will be understood by those of skill in the art that there are other embodiments that are equivalent to the described embodiments. Accordingly, it is to be understood that the invention is not to be limited by the specific illustrated embodiments, but only by the scope of the appended claims.</p><p id="p-0162" num="0183">From the above description, it can be seen that the present invention provides a system, computer program product, and method for the efficient execution of the described techniques. References in the claims to an element in the singular is not intended to mean &#x201c;one and only&#x201d; unless explicitly so stated, but rather &#x201c;one or more.&#x201d; All structural and functional equivalents to the elements of the above-described exemplary embodiment that are currently known or later come to be known to those of ordinary skill in the art are intended to be encompassed by the present claims. No claim element herein is to be construed under the provisions of 35 U.S.C. section 112, sixth paragraph, unless the element is expressly recited using the phrase &#x201c;means for&#x201d; or &#x201c;step for.&#x201d;</p><p id="p-0163" num="0184">While the foregoing written description of the invention enables one of ordinary skill to make and use what is considered presently to be the best mode thereof, those of ordinary skill will understand and appreciate the existence of alternatives, adaptations, variations, combinations, and equivalents of the specific embodiment, method, and examples herein. Those skilled in the art will appreciate that the within disclosures are exemplary only and that various modifications may be made within the scope of the present invention. In addition, while a particular feature of the teachings may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular function. Furthermore, to the extent that the terms &#x201c;including&#x201d;, &#x201c;includes&#x201d;, &#x201c;having&#x201d;, &#x201c;has&#x201d;, &#x201c;with&#x201d;, or variants thereof are used in either the detailed description and the claims, such terms are intended to be inclusive in a manner similar to the term &#x201c;comprising.&#x201d;</p><p id="p-0164" num="0185">Other embodiments of the teachings will be apparent to those skilled in the art from consideration of the specification and practice of the teachings disclosed herein. The invention should therefore not be limited by the described embodiment, method, and examples, but by all embodiments and methods within the scope and spirit of the invention. Accordingly, the present invention is not limited to the specific embodiments as illustrated herein, but is only limited by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230006811A1-20230105-M00001.NB"><img id="EMI-M00001" he="6.35mm" wi="76.20mm" file="US20230006811A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230006811A1-20230105-M00002.NB"><img id="EMI-M00002" he="6.01mm" wi="76.20mm" file="US20230006811A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230006811A1-20230105-M00003.NB"><img id="EMI-M00003" he="5.67mm" wi="76.20mm" file="US20230006811A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230006811A1-20230105-M00004.NB"><img id="EMI-M00004" he="6.01mm" wi="76.20mm" file="US20230006811A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230006811A1-20230105-M00005.NB"><img id="EMI-M00005" he="6.35mm" wi="76.20mm" file="US20230006811A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006 MATH-US-00006-2" nb-file="US20230006811A1-20230105-M00006.NB"><img id="EMI-M00006" he="44.11mm" wi="76.20mm" file="US20230006811A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230006811A1-20230105-M00007.NB"><img id="EMI-M00007" he="30.31mm" wi="76.20mm" file="US20230006811A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230006811A1-20230105-M00008.NB"><img id="EMI-M00008" he="10.92mm" wi="76.20mm" file="US20230006811A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230006811A1-20230105-M00009.NB"><img id="EMI-M00009" he="10.92mm" wi="76.20mm" file="US20230006811A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID;</claim-text><claim-text>transmitting the first partial private cryptographic key to a first other device;</claim-text><claim-text>transmitting the second partial private cryptographic key to a second other device; and</claim-text><claim-text>generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein, when the first partial private cryptographic key and the second partial private cryptographic key are combined, a valid private cryptographic key is formed.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>generating, at the key generation center, a partial public cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein generating the distributed cryptographic signature for the message comprises:<claim-text>transmitting a request for a cryptographic signature from the first other device to the second other device;</claim-text><claim-text>in response to receiving the request from the first other device, generating, at the second other device, a first plurality of intermediate values using a plurality of random numbers and the partial public cryptographic key;</claim-text><claim-text>in response to receiving the first plurality of intermediate values from the second other device, generating, at the first other device, a second plurality of intermediate values using a plurality of random numbers and the message;</claim-text><claim-text>in response to receiving the second plurality of intermediate values from the first other device, generating, at the second other device, a third plurality of intermediate values using the second partial private cryptographic key; and</claim-text><claim-text>in response to receiving the third plurality of intermediate values from the second other device, generating, at the first other device, the distributed cryptographic signature using the first partial private cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. A system comprising a processor, memory accessible by the processor, and computer program instructions stored in the memory and executable by the processor to perform:<claim-text>generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID;</claim-text><claim-text>transmitting the first partial private cryptographic key to a first other device;</claim-text><claim-text>transmitting the second partial private cryptographic key to a second other device; and</claim-text><claim-text>generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein, when the first partial private cryptographic key and the second partial private cryptographic key are combined, a valid private cryptographic key is formed.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>generating, at the key generation center, a partial public cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein generating the distributed cryptographic signature for the message comprises:<claim-text>transmitting a request for a cryptographic signature from the first other device to the second other device;</claim-text><claim-text>in response to receiving the request from the first other device, generating, at the second other device, a first plurality of intermediate values using a plurality of random numbers and the partial public cryptographic key;</claim-text><claim-text>in response to receiving the first plurality of intermediate values from the second other device, generating, at the first other device, a second plurality of intermediate values using a plurality of random numbers and the message;</claim-text><claim-text>in response to receiving the second plurality of intermediate values from the first other device, generating, at the second other device, a third plurality of intermediate values using the second partial private cryptographic key; and</claim-text><claim-text>in response to receiving the third plurality of intermediate values from the second other device, generating, at the first other device, the distributed cryptographic signature using the first partial private cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A computer program product for drug prescription prediction, the computer program product comprising a non-transitory computer readable storage having program instructions embodied therewith, the program instructions executable by a computer, to cause the computer to perform a method comprising:<claim-text>generating, at a key generation center, a first partial private cryptographic key for a user ID and a second partial private cryptographic key for the user ID;</claim-text><claim-text>transmitting the first partial private cryptographic key to a first other device;</claim-text><claim-text>transmitting the second partial private cryptographic key to a second other device; and</claim-text><claim-text>generating a distributed cryptographic signature for a message using the first partial private cryptographic key and the second partial private cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer program product of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein, when the first partial private cryptographic key and the second partial private cryptographic key are combined, a valid private cryptographic key is formed.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer program product of <claim-ref idref="CLM-00010">claim 10</claim-ref>, further comprising:<claim-text>generating, at the key generation center, a partial public cryptographic key.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer program product of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein generating the distributed cryptographic signature for the message comprises:<claim-text>transmitting a request for a cryptographic signature from the first other device to the second other device;</claim-text><claim-text>in response to receiving the request from the first other device, generating, at the second other device, a first plurality of intermediate values using a plurality of random numbers and the partial public cryptographic key;</claim-text><claim-text>in response to receiving the first plurality of intermediate values from the second other device, generating, at the first other device, a second plurality of intermediate values using a plurality of random numbers and the message;</claim-text><claim-text>in response to receiving the second plurality of intermediate values from the first other device, generating, at the second other device, a third plurality of intermediate values using the second partial private cryptographic key; and</claim-text><claim-text>in response to receiving the third plurality of intermediate values from the second other device, generating, at the first other device, the distributed cryptographic signature using the first partial private cryptographic key.</claim-text></claim-text></claim></claims></us-patent-application>