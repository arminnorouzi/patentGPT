<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004546A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004546</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17365790</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>21</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2457</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2358</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>211</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>24573</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>26</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DATA MANAGEMENT</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Cogniflare Limited</orgname><address><city>London</city><country>GB</country></address></addressbook><residence><country>GB</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>MOUNIDEVY</last-name><first-name>Sivakumaran Ayanarappan</first-name><address><city>Chelmsford</city><country>GB</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>AJMALKHAN</last-name><first-name>Ahamed Hussainkhan</first-name><address><city>Morden</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented method is provided for managing data stores. The method comprises performing a discovery process to discover a plurality of data stores. Each data store is identified, metadata associated with each data store is determined, and the metadata associated with each data store is stored in a configuration database. A user interface is operable to select at least one discovered and identified data store and initiate a change request to modify the selected data store. The change request is executed, based on an instruction received via the user interface, to modify the selected data storage set, and, upon execution of the change request, an update of the metadata in the configuration database associated with the selected data storage set is triggered.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="47.84mm" wi="158.75mm" file="US20230004546A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="235.97mm" wi="103.29mm" orientation="landscape" file="US20230004546A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="63.75mm" wi="112.61mm" orientation="landscape" file="US20230004546A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="201.51mm" wi="122.51mm" orientation="landscape" file="US20230004546A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="63.75mm" wi="109.47mm" orientation="landscape" file="US20230004546A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="63.75mm" wi="112.35mm" orientation="landscape" file="US20230004546A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="157.90mm" wi="125.56mm" orientation="landscape" file="US20230004546A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="122.68mm" wi="121.75mm" orientation="landscape" file="US20230004546A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="180.26mm" wi="115.49mm" orientation="landscape" file="US20230004546A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND OF THE INVENTION</heading><heading id="h-0002" level="1">Field of the Invention</heading><p id="p-0002" num="0001">This invention relates generally to the field of data management, and more particularly to data exploration, governance and permission management.</p><heading id="h-0003" level="1">Description of the Related Technology</heading><p id="p-0003" num="0002">Increased use of cloud-based data storage has brought with it numerous challenges for enterprises handling large quantities of data. In particular, enterprises dealing with multiple data storage assets spread across a number of locations in a cloud environment, such as Google Cloud, face challenges relating to finding the relevant data, security and access permissions, and efficiency in providing the data to the relevant users.</p><p id="p-0004" num="0003">As an example, if one entity within an organization requires access to a particular data set, methods currently known in the art would require separate processes be initiated to find the dataset, identify the owner of the dataset, request access to the dataset, and grant access to the dataset. Multiple teams and personnel, including the data owner, security reviewers, privacy reviewers and audit teams would be required to engage in action, even though only one access request needs to be granted. All these separate processes lack integration and rely on personnel manually verifying various permissions and authorization, increasing the lead time on data provisioning requests and decreasing the efficiency of the cloud-based storage services.</p><p id="p-0005" num="0004">A more efficient method for managing data assets is therefore desirable.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">According to a first aspect there is provided a computer-implemented method for managing data stores performed by an information-processing apparatus, the method comprising: performing a discovery process to discover a plurality of data stores; identifying each data store and determining metadata associated with each data store; storing the metadata associated with each data store in an application database; providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store; executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</p><p id="p-0007" num="0006">According to a second aspect there is provided an information processing apparatus comprising: a processor, and a storage that stores instructions that, when executed by the processor, cause the processor to perform a method comprising: performing a discovery process to discover a plurality of data stores; identifying each data store and determining metadata associated with each data store; storing the metadata associated with each data store in an application database; providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store; executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</p><p id="p-0008" num="0007">According to a third aspect there is provided a non-transitory computer-readable storage medium storing instructions that, when executed by a computer, cause it to perform a method comprising: performing a discovery process to discover a plurality of data stores; identifying each data store and determining metadata associated with each data store; storing the metadata associated with each data store in an application database; providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store; executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0009" num="0008">Embodiments will now be described with reference to the accompanying drawings in which:</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of an exemplary cloud storage system;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart showing the steps of a process by which a user requests access to a data storage asset;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of a user interface presented to a user;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow chart showing the steps of a process by which a change request is initiated, approved and executed;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b><i>a </i></figref>is a flow chart showing the steps of a process by which a database is deployed to an environment;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b><i>b </i></figref>is an illustration of a user interface for deploying a data model;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example of a data storage map; and</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of a software architecture.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF CERTAIN INVENTIVE EMBODIMENTS</heading><p id="p-0018" num="0017">Before discussing particular embodiments with respect to the figures, some more general embodiments will be described.</p><p id="p-0019" num="0018">A first embodiment provides a computer-implemented method for managing data assets performed by an information-processing apparatus, the method comprising: performing a discovery process to discover a plurality of data stores; identifying each data store and determining metadata associated with each data store; storing the metadata associated with each data store in an application database; providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store; executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</p><p id="p-0020" num="0019">The user interface may be generated based on metadata stored in the application database, whereby the user interface is operable to select at least one discovered and identified data store and initiate a change request to modify the selected data store.</p><p id="p-0021" num="0020">The metadata associated with each data store may comprise at least one of: permission data, schema data and policy data. In embodiments in which the metadata is permission data, the permission data may be managed by a permissions service that manages access permissions to the data store. In other embodiments, the permission data may be managed as part of the data store. For example, if the information processing apparatus hosts a cloud service, the cloud service may provide a permissions service to manage access to data stores. In other implementations the data store may be a database and the permissions may be stored and managed by database software managing the database.</p><p id="p-0022" num="0021">The change request may comprise an access request to change access permissions for accessing the data store.</p><p id="p-0023" num="0022">The instruction received via the user interface may trigger an approval process prior to execution of the change request.</p><p id="p-0024" num="0023">The approval process may comprise causing one or more review requests to be sent to one or more approvers. The method may comprise tracking receipt of one or more approvals in response to the one more review request. In a case that one or more approval is received to complete the approval process, the change request may be executed.</p><p id="p-0025" num="0024">The change request may be stored in the application database until the approval process is completed.</p><p id="p-0026" num="0025">The method may comprise creating groups of discovered and identified data stores based on users having access to the data store in question.</p><p id="p-0027" num="0026">The method may comprise generating a storage map of the discovered and identified data stores for display on a user interface. Generating the storage map may comprise analysis usage logs associated with each data store and illustrating relative usage of the data stores on the storage map.</p><p id="p-0028" num="0027">The user interface may be operable to receive instructions to cause deployment of a data model to an environment. In such cases, the deployment of the data model to the environment may comprise importing a physical data model. The method may comprise receiving selection of a database to which the physical data model will be applied. The model may further comprise receiving selection of at least one environment to which the database will be deployed. The method may comprise deploying a database to the selected environment in accordance with the selected dataset, the physical data model and the database schema. In some embodiments, the method may further comprise migrating the database schema of a database that has been deployed by applying a new data model to the database.</p><p id="p-0029" num="0028">Performing the discovery process may comprise interrogating a data catalog.</p><p id="p-0030" num="0029">The method may further comprise changing locations in which the data stores are located in response to an instruction from a user. The data store locations may be categorized into storage tiers according to storage duration. The method may comprise moving data stores to data store locations in different storage tiers in response to a user request.</p><p id="p-0031" num="0030">The method may further comprise receiving an instruction defining a rule relating to metadata associated with at least one of the plurality of data stores, and comparing the discovered metadata associated with the at least one of the plurality of data stores with the defined rule.</p><p id="p-0032" num="0031">A second embodiment provides an information processing apparatus comprising: a processor, and a storage that stores instructions that, when executed by the processor, cause the processor to perform a method comprising: performing a discovery process to discover a plurality of data stores; identifying each data store and determining metadata associated with each data store; storing the metadata associated with each data store in an application database; providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store; executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</p><p id="p-0033" num="0032">A third embodiment provides a non-transitory computer-readable storage medium storing instructions that, when executed by a computer, cause it to perform a method comprising: performing a discovery process to discover a plurality of data stores; identifying each data store and determining metadata associated with each data store; storing the metadata associated with each data store in an application database; providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store; executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</p><p id="p-0034" num="0033">Particular embodiments will now be described, with reference to the figures.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram showing an overview of a cloud-based storage system. Data stores in the form of data storage assets <b>11</b> are stored in a cloud environment <b>12</b>. A data storage asset may be a database, structured files such as Excel files, semi-structured files such as CSV (Comma-Separated Value) files, unstructured files such as a blob of data, or any other data storage format. Data within the cloud environment <b>12</b> is accessible by client computers <b>13</b> across a network connection <b>14</b>, by other machines within the cloud environment <b>12</b>, servers <b>18</b> outside of the cloud environment, or from other cloud services <b>17</b>. The network connection <b>14</b> may be the internet. Access to each data storage asset <b>11</b> is controlled in dependence upon access permissions set by the owner of the data storage asset <b>11</b> or by another user with the relevant authority. Data storage assets <b>11</b> may be stored in different groupings <b>15</b> within the cloud environment. The groupings <b>15</b> may depend on ownership or may be based on use within an entity such as a company. A data management software package <b>16</b>, hereinafter referred to as data management software, is shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The data management software runs in the cloud environment <b>12</b>. Functions of the data management software <b>16</b> will now be described.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart showing steps of a method for managing data performed by the data management software <b>16</b>. In Step S<b>21</b>, a discovery process is initiated, to locate specific data storage assets <b>11</b> within the cloud environment <b>12</b>. In this step, each individual data storage asset <b>11</b> belonging to a given entity may be found and located within the wider cloud storage environment <b>12</b>. In some embodiments, this discovery may be performed by a crawler (sometimes referred to as an indexer) of the data management software <b>16</b>, systematically browsing the cloud environment <b>12</b> to locate data storage assets <b>11</b>. Locating these data storage assets <b>11</b> also allows for them to be categorized and identified. In other embodiments, the cloud service may provide a discovery function and discovery by the data management software <b>16</b> may comprise interrogating the cloud service via an API or other interface. A particular example on Google Cloud&#x2122; would be interrogating Google Data Catalog. In such embodiments, the results of the interrogation may be enriched with additional metadata not obtained from the discovery function provided by the cloud service. This additional metadata may be obtained by a crawler of the data management software <b>16</b> as described above.</p><p id="p-0037" num="0036">In this embodiment, discovery of data stores within the cloud environment <b>12</b> will be described. However, in other embodiments, discovery of data stores may take place across multiple cloud environments <b>12</b> and <b>17</b> and/or be performed on one or more servers <b>18</b>.</p><p id="p-0038" num="0037">In Step S<b>22</b>, identification of the data storage assets <b>11</b> occurs. For each data storage asset discovered in S<b>21</b>, the metadata of that asset is obtained by interrogating the data storage asset <b>11</b> in order to accurately identify and categorize the data storage assets <b>11</b>. This metadata may include information such as the asset's name, description, columns definitions, permission data, schema data and policy data. In step S<b>23</b>, the metadata determined for each data storage asset is then stored in an application database that forms part of the data management software <b>16</b>. An index is created based on the metadata of the data storage assets <b>11</b>, with every data storage asset <b>11</b> represented in one unified list or other index representation. This index can be easily searched in response to a query by a user to find a specific data storage asset <b>11</b>, rather than the user being required to manually search through the cloud environment <b>12</b> on their own. The application database is updated on a continuous basis, with the cloud environment <b>12</b> being scanned frequently to ensure an accurate index. As described above, in some embodiments, an external data catalog provided within a cloud environment <b>12</b> may be used to store an index of multiple data storage assets <b>11</b>, some of which may be relevant to the instance of the data management software <b>16</b> and some of which may not. In order to discover data storage assets <b>11</b> relevant to the instance of the data management software <b>16</b>, the discovery process S<b>21</b> may comprise crawling the data catalog and importing the relevant identified data storage assets <b>11</b> to be stored in the application database.</p><p id="p-0039" num="0038">In order to allow the user to search for and select data storage assets <b>11</b>, in step S<b>24</b> a user interface is presented to the user. This user interface allows the user to search for a particular data storage asset <b>11</b>. Once found, a representation of the data storage asset <b>11</b> on the user interface may be selected for an access request. An access request may be triggered by a user &#x201c;checking out&#x201d; the data storage asset <b>11</b> using the user interface, which adds the asset in question to a list of assets that will be subject to a change request. In this embodiment, selecting a representation of the data storage asset <b>11</b> within the user interface and checking the data storage asset out in this manner marks the data storage asset <b>11</b> as being a potential subject for an access request.</p><p id="p-0040" num="0039">Once the user has selected one or more data storage assets <b>11</b> to which they wish to request access, completing the checkout process on the user interface causes an access request to be initiated. This access request is a form of change request, as it requests a modification of the properties of the selected data storage asset&#x2014;specifically, it requests a modification in the access permissions of the selected data storage asset <b>11</b> to allow the user to access the data contained therein. In embodiments wherein the data storage assets are stored in on-premises servers, the access request may directly alter the permissions metadata associated with the data storage asset. In embodiments wherein the data storage assets are cloud-based, the access request may only request access, with the granting of access and alteration of permissions metadata being provided as a service.</p><p id="p-0041" num="0040">In step S<b>25</b>, the access request initiated in response to the user instructions in step S<b>24</b> is executed. The execution of the access request triggers an update of the permissions metadata of the data storage asset <b>11</b> to which access was requested&#x2014;the permissions metadata is updated to reflect the changed access permissions, showing that the user has been granted access to the asset as a result of the execution of the access request.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example of a user interface of the type described in relation to <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Looking at the navigation panel on the left-side of the user interface, the &#x2018;Data Market&#x2019; function <b>301</b> allows the user to access the index of data storage assets created in S<b>23</b>, with the search bar <b>302</b> providing the user with the capacity to search the index for particular data storage assets <b>11</b>. The representations <b>303</b> of the data storage assets corresponding to a particular search are displayed to the user, with the option available to display further details relating to each data storage asset <b>11</b> using the selector <b>304</b>. Data storage assets <b>11</b> may be selected for &#x2018;checkout&#x2019; using the selector <b>305</b> as described previously, this &#x2018;checkout&#x2019; marks the data storage asset <b>11</b> in question as a potential subject for an access request. Doing so additionally causes a representation of a data storage asset thus selected to be displayed in the &#x2018;checkout&#x2019; column <b>306</b> on the right-side of the user interface shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0043" num="0042">Once a user has selected a data storage asset <b>11</b> for &#x2018;checkout&#x2019;, the user may then request access to this data storage asset <b>11</b> through the user interface, using the selector <b>307</b>. Selection of the selector <b>307</b> triggers initiation of an access request.</p><p id="p-0044" num="0043">Further functions may be presented by the user interface, some of which are described below in relation to later figures and further embodiments. &#x2018;Storage Map&#x2019; function <b>308</b>, shown on the left-side navigation panel, allows the viewing of a map of data storage assets <b>11</b> shown in the user interface. The map of the data storage assets <b>11</b> may be generated by the data management software package <b>16</b>. &#x2018;Change Request&#x2019; function <b>309</b> enables visualization, approval, rejection or cancellation of change requests. &#x2018;Storage Asset&#x2019; function <b>310</b> enables an overview of all storage assets and also allows storage assets to be edited, created or deleted, as well as allowing storage assets to be grouped together. &#x2018;Policy Engine&#x2019; function <b>311</b> allows a user to set up rules governing data storage assets. One example of a rule is that a particular asset may only be accessed by users within a certain geographical area. This function further enables the monitoring of activity across data storage assets, reporting on rule violations and suggesting corrections to the rule violations.</p><p id="p-0045" num="0044">The person having ordinary skill in the art will appreciate that the specific labels used in this example are provided by way of example only, and that as they have little bearing on the technical functioning of the system, should not be construed as limitations.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart showing steps for processing a change request. In this example the change request, that was initiated in response to an instruction received via the user interface, is not automatically executed upon initiation by the user, but requires completion of an approval workflow in order to be executed. In step S<b>41</b>, the change request is initiated. This may be performed as described in previous paragraphs&#x2014;the user may search for and locate a data storage asset using the user interface, select the data storage asset as the subject of a change request and, using the selector <b>307</b> present in the user interface provided to the user, request access to one or more data storage assets <b>11</b>.</p><p id="p-0047" num="0046">In Step S<b>42</b>, as the change request is not executed until the approval workflow is completed and the change is approved, the change request is stored in the application database. The request is held in the application database until the approval workflow is completed and may be stored thereafter for auditing purposes. Following this, in Step S<b>43</b>, an approval process is initiated. This approval process may take the form of one or more review requests being sent to users who have been designated to authorize access to the discovered data storage assets <b>11</b>. Depending on the workflow configuration, different approvals may be required. The request may be able to be approved by any user other than the requesting user, provided they have the appropriate permissions in the data management software <b>16</b>. Requests may only be able to be approved by a resource owner assigned to the data storage asset <b>11</b> to which the change request applies. The resource owner may be an explicitly assigned group or user, or&#x2014;where no group or user is assigned&#x2014;may be a default owner. If there is no resource owner or default owner assigned to the data storage asset <b>11</b>, the request cannot be executed without an owner first being assigned. The request may also be subject to hierarchical approval&#x2014;in this case, approval must be granted by a user assigned as the approver or manager of the requesting user. If no approver is assigned to the requesting user, the request cannot be executed.</p><p id="p-0048" num="0047">The review request may be sent by email to the approver, text message to a mobile device of the approver, or by any other suitable communication process. The review request may be approved or rejected by logging in to the data management software <b>16</b> and approving or rejecting the review request respectively. The review request may, for example, include a hyperlink back to the data management software <b>16</b> that, when activated, causes the data management software <b>16</b> to update to indicate that approval has been received.</p><p id="p-0049" num="0048">Once the review request has been sent to the relevant individual, in step S<b>44</b> the system tracks the receipt of the requisite approvals&#x2014;i.e. the approval is monitored to determine whether or not the required approvals have been received in response to the review request sent in Step S<b>43</b>. Once the required approval or all the required approvals have been received, in step S<b>45</b> the change request is executed. As above, this change request may involve a modification to the data storage asset <b>11</b> itself, or may be an access request, meaning that the modification is to the access permissions of the data storage asset <b>11</b>.</p><p id="p-0050" num="0049">The workflow described in connection with <figref idref="DRAWINGS">FIG. <b>4</b></figref> has been described in connection with a change request for access to a data storage asset. However, the workflow process may be used for any change requested through the data management software <b>16</b>, for example workflow approval could be required for deployment of a data model as described further below.</p><p id="p-0051" num="0050">In a further embodiment, the data management software <b>16</b> described herein may additionally provide users with the capability to deploy data models within the data management software <b>16</b> so that they can be viewed on the user interface shown in <figref idref="DRAWINGS">FIG. <b>5</b><i>b</i></figref>. The user can then manage database schemas associated with data storage assets <b>11</b> that have been deployed. <figref idref="DRAWINGS">FIG. <b>5</b><i>a </i></figref>is a flow chart showing steps for deploying a data model to an environment within the data management software. <figref idref="DRAWINGS">FIG. <b>5</b><i>b </i></figref>is an illustration of a user interface showing deployed data models.</p><p id="p-0052" num="0051">In Step S<b>51</b>, a user selects an option <b>51</b> in the user interface shown in <figref idref="DRAWINGS">FIG. <b>5</b><i>b </i></figref>to import a physical data model. This physical data model is a representation of a particular data design and is used to generate the schema for the data model the user intends to deploy. The schema provides a blueprint for the construction of the data model. This schema specifies which data will be stored in the data model in question, as well as how the data will be organized within the data model. The database schema indicates which tables or relations make up a given data model, and the fields included on each table of the database. The database schema provided by a physical data model will lay out how the data is physically stored on a storage system in terms of files and indices. In the course of importing a data model, an appropriate change request is raised via the user interface. The change request may be subject to an approval workflow as described with regard to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0053" num="0052">In Step S<b>52</b>, after the physical data model has been imported, the user selects a database to which the data model will be applied. This database may be a new, empty dataset, or may be an existing dataset. This database will act as the target for the newly-deployed data model. Where no suitable database exists, the user may elect to create a database using the &#x2018;Storage Asset&#x2019; function <b>310</b> of the data management software <b>16</b>.</p><p id="p-0054" num="0053">In Step S<b>53</b>, the user may then select an environment to which the data model will be deployed. As shown in <figref idref="DRAWINGS">FIG. <b>5</b><i>b</i></figref>, three environments are available as default options displayed in the user interface, these environments are Dev (Development), QA (Quality Assurance), and Prod (Production). Users of the data management software <b>16</b> may create, edit or remove environments within the data management software <b>16</b>. Multiple databases may be deployed to a single environment. For instance, there may be multiple instances of a QA database. The environments listed serve as labels only, denoting specific environments&#x2014;the name of a given environment does not impact the location or context of the database deployed. However, the labels are useful for managing and understanding databases within the data management software. For example, databases that exist within a live production environment may be deployed to the Production environment within the data management software <b>16</b> and appear in the production environment in the user interface shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref><i>b. </i></p><p id="p-0055" num="0054">In Step S<b>54</b>, once all the necessary information has been provided, the user may initiate the process of deploying the database to the environment using the user interface. This will raise a change request, similar to the process described in relation to <figref idref="DRAWINGS">FIG. <b>2</b></figref> and, optionally, <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0056" num="0055">Once the change request is executed, the user may use the user interface shown in <figref idref="DRAWINGS">FIG. <b>5</b><i>b </i></figref>to migrate the schema of the database in Step S<b>55</b>. To migrate the database schema related to the database, a new data model is imported. The deployed database to which the imported data model is to be applied is identified using the user interface. In some embodiments, the data management software <b>16</b> may compare the current data model of the database with the new data model to be applied and provide an interface that shows differences in the tables and fields. Following user confirmation, in Step S<b>55</b>, the imported data model is applied to the selected database to migrate the database.</p><p id="p-0057" num="0056">In a further embodiment, the data management software may additionally provide users with the capability to display a map of data storage assets. This allows a user to display a visual representation of data storage assets held in the cloud environment and their location. An example of such a data storage map is shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. This data storage map may be viewed by selecting the appropriate &#x2018;Storage Map&#x2019; function <b>308</b> shown on the navigation panel on the left-side of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0058" num="0057">The data storage map may additionally provide a heat map functionality. This functionality causes the data storage map shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> to display a visual representation of the relative usage of data storage assets held in the cloud environment <b>12</b>. The data management software <b>16</b> may obtain usage logs from the data catalog and analyse the usage logs for each data storage asset <b>11</b>. The usage logs may be analysed to identify which data storage assets <b>11</b> are being used most extensively. The relative usage may be displayed on the data storage map on the user interface by, for example, displaying the data storage assets <b>11</b> in different colors. The colors may be selected based on relative usage so that, for example, the 5% most often used data sets are displayed in a first color, the second 5% most often used data sets are displayed in a second color etc. As will be explained in more detail below, in embodiments where data storage asset locations are organised into tiers, the storage heat map functionality may allow a user to easily identify a more efficient use of the storage tier capability, in order to optimise storage cost.</p><p id="p-0059" num="0058">In a further embodiment, the system described herein may additionally provide users with the capability to group storage assets together. This allows multiple data storage assets <b>11</b> to be combined into a single unified group, to which users can request access. This reduces the need for users to request access to each of a plurality of data storage assets separately, which can be time-consuming and inefficient, especially if a group of users are likely to require access to a similar set of data storage assets. In this embodiment, storage assets may be grouped together, and a single access level specified for all assets within the group. A user may then request access to the group of data storage following the procedure described with regard to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and be granted access to every asset within the group.</p><p id="p-0060" num="0059">In a further embodiment, the data management software <b>16</b> may provide users with the capability to migrate data storage assets <b>11</b> between data storage locations. These data storage asset locations may be organized within the cloud environment <b>12</b> into tiers, wherein data storage assets stored in different tiers will be stored for different minimum durations. For example, standard storage may have no minimum storage duration, nearline storage may have a 30-day minimum duration and lower service levels for uptime availability, and cold-line storage may have a 90-day minimum storage duration and an even lower service level for uptime availability. The choice of storage may affect the cost of storing data and placing data into storage with lower service level requirements and longer minimum storage durations may reduce cloud data running costs. The system may provide the functionality for users to migrate data between storage tiers. When using the heat map functionality described above, the user interface may include an indication of the current storage location of some or each data storage asset on the data storage map. In this way, a user can easily see, for example, when a data storage asset is not often accessed but is stored in a more expensive high uptime storage location.</p><p id="p-0061" num="0060">In a further embodiment, by selecting the &#x2018;Policy engine&#x2019; function, a user may set policies that should apply to data storage assets <b>11</b> managed by the data management software <b>16</b>. For example, the user interface may allow rules to be applied to access particular data storage assets. In one example, a rule may be configured that a particular data storage asset may only be accessed by a &#x2018;service account&#x2019;, where a service account is an account used by an application or virtual machine, but not by a physical user. In other examples, rules may be configured to enforce naming conventions of data assets, enforce labelling of assets, enforce setting of ownership configuration, or enforce setting of a data storage class.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of an example of software architecture suitable for carrying out the various processes described herein. While the example uses branded products, the person having ordinary skill in the art will appreciate that this is provided by way of example and that equivalent functionality may be found in different products.</p><p id="p-0063" num="0062">The data storage assets <b>11</b> that may be viewed, requested, accessed and edited by the end user are not shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, but information about the data storage assets within the Google (Registered Trademark) cloud service <b>12</b> may be stored in data catalog <b>71</b>. This data catalog may be a data discovery and metadata management service operating in the cloud environment <b>12</b> and may index resources held in the cloud environment <b>12</b> as described in relation to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, above. This data catalog <b>71</b> may be interrogated for data using system API <b>72</b>. The data thus discovered may then be stored in application database <b>73</b>.</p><p id="p-0064" num="0063">System API <b>72</b> is configured to communicate with cloud-based services and data storage assets <b>11</b> through product APIs <b>74</b>. It is across this connection that change requests may be executed, in order to modify data storage assets <b>11</b>. Custom entities, such as newly-created data storage assets <b>11</b>, may be pushed to the data catalog <b>71</b> from product API <b>74</b>. Change requests requiring approval, as described above in relation to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, may be stored in application database <b>73</b>.</p><p id="p-0065" num="0064">The application database <b>73</b> may be updated frequently. A job scheduler <b>75</b> may scan the data catalog <b>71</b> to determine whether new data storage assets <b>11</b> have been added or created and may periodically fetch information regarding infrastructure state from product APIs <b>74</b>. Job scheduler <b>75</b> may then update the application database <b>73</b> with information from both sources. In this way, the application database <b>73</b> is kept up to date with the data storage assets <b>11</b> in the cloud service <b>12</b> and the metadata associated with the data storage assets <b>11</b>.</p><p id="p-0066" num="0065">Physical data models used in deploying databases to an environment, as described in relation to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, may be imported from a version control service <b>76</b> by system API <b>72</b>. Data models may subsequently be applied to databases in the cloud environment <b>12</b> by product API <b>74</b>.</p><p id="p-0067" num="0066">The data management software <b>16</b> may be operated by a user using the user interface, as described in relation to previous figures. This user interface is presented to the user through an app <b>77</b>. For any change request to be initiated, system API <b>72</b> must receive an instruction from the user through the user interface. The user interface allows the user to instruct system API <b>72</b> to search the catalog <b>71</b> and enables grouping of storage assets and a visual indication of data storage. An example of a user interface presented by app <b>77</b> is illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0068" num="0067">In order to maintain security, and to allow users, roles and groups within the system to be managed, an identity-aware proxy <b>78</b> is used in order to authenticate each user. This proxy <b>78</b> acts as a gateway to the app <b>77</b>. A user cannot access app <b>77</b> without being authenticated by proxy <b>78</b>. Managing users, roles and groups within the system is enabled by an identity provider <b>79</b> service, which provides identity data. Identity provider <b>79</b>, which is part of the cloud service <b>12</b>, is periodically scanned by job scheduler <b>75</b>, in order to update application database <b>73</b>. For example, if a user's role changes, giving them new access to certain data storage assets <b>11</b>, the change in role listed in identity provider <b>79</b> is noted by job scheduler <b>75</b> during a periodic scan, and the metadata of these assets may be updated in application database <b>73</b>.</p><p id="p-0069" num="0068">Although embodiments have been described above for the purpose of illustration based on what is currently considered to be the most practical and preferred embodiments, it is to be understood that such detail is solely for that purpose and that the invention is not limited to the disclosed embodiments. For example, it is to be understood that the present invention contemplates that, to the extent possible, one or more features of any embodiment may be combined with one or more features of any other embodiment. Further not all features of each embodiment are required for operation of the data management software.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for managing data stores performed by an information-processing apparatus, the method comprising:<claim-text>performing a discovery process to discover a plurality of data stores;</claim-text><claim-text>identifying each data store and determining metadata associated with each data store;</claim-text><claim-text>storing the metadata associated with each data store in an application database;</claim-text><claim-text>providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store;</claim-text><claim-text>executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and</claim-text><claim-text>upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the metadata associated with each data store comprises at least one of: permission data, schema data and policy data.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the change request comprises an access request to change access permissions for accessing the data store.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the instruction received via the user interface triggers an approval process prior to execution of the change request.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. A computer-implemented method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the approval process comprises causing one or more review requests to be sent and tracking receipt of one of more approvals in response to the one more review requests, wherein in a case that one or more approval is received to complete the approval process, the change request is executed.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. A computer-implemented method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the change request is stored in the application database until the approval process is completed.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising creating groups of discovered and identified data stores based on users having access to the data store in question.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising generating a storage map of the discovered and identified data stores.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the user interface is operable to receive instructions to cause migration of a database to a new data model.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein performing a discovery process comprises interrogating a discovery function provided by a cloud service.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A computer-implemented method according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein data store locations at which data stores are located are grouped into storage tiers according to a minimum storage duration and the method further comprises moving data stores to data store locations in different storage tiers.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A computer-implemented method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising receiving an instruction defining a rule relating to metadata associated with at least one of the plurality of data stores, and comparing the discovered metadata associated with the at least one of the plurality of data stores with the defined rule.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An information processing apparatus comprising:<claim-text>a processor, and</claim-text><claim-text>a storage that stores instructions that, when executed by the processor, cause the processor to perform a method comprising:<claim-text>performing a discovery process to discover a plurality of data stores;</claim-text><claim-text>identifying each data store and determining metadata associated with each data store;</claim-text><claim-text>storing the metadata associated with each data store in an application database;</claim-text><claim-text>providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store;</claim-text><claim-text>executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and</claim-text><claim-text>upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A non-transitory computer-readable storage medium storing instructions that, when executed by a computer, cause it to perform a method comprising:<claim-text>performing a discovery process to discover a plurality of data stores;</claim-text><claim-text>identifying each data store and determining metadata associated with each data store;</claim-text><claim-text>storing the metadata associated with each data store in an application database;</claim-text><claim-text>providing a user interface operable to select at least one discovered and identified data store and initiate a change request to modify the metadata associated with the selected data store;</claim-text><claim-text>executing the change request, based on an instruction received via the user interface, to modify the metadata associated with the selected data store; and</claim-text><claim-text>upon execution of the change request, triggering an update of the metadata in the application database associated with the selected data store.</claim-text></claim-text></claim></claims></us-patent-application>