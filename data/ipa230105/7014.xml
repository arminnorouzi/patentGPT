<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007015A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007015</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363705</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1416</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0428</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">COVERT MONITORING OF AN ATTACKER HOST IN A SOFTWARE DEFINED PERIMETER NETWORK</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>LENOVO (UNITED STATES) INC.</orgname><address><city>Morrisville</city><state>NC</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>CHIFOR</last-name><first-name>BOGDAN-COSMIN</first-name><address><city>BUCHAREST</city><country>RO</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>IORGA</last-name><first-name>RADU MIHAI</first-name><address><city>BUCHAREST</city><country>RO</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>CALCIU</last-name><first-name>CORNELIU-ILIE</first-name><address><city>BUCHAREST</city><country>RO</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>PAVEL</last-name><first-name>EDUARD</first-name><address><city>BUCHAREST</city><country>RO</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Covert monitoring of an attacker host in a software defined perimeter network, includes: authenticating, by an SDP controller, a first and second host in the SDP network, where the first and second host, after authentication, establish an end-to-end encryption communication session; detecting, by the SDP controller, that the first host is an attacker host and the second host is a victim host; establishing, by the SDP controller as a copy of the victim host, a mimic host; and redirecting, by the SDP controller, communication from the attacker host to the mimic host including migrating, without disruption detectable by the attacker host, the communication session from the victim host to the mimic host, where the mimic host monitors communications with the attacker host.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="217.17mm" wi="158.75mm" file="US20230007015A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="251.63mm" wi="165.78mm" file="US20230007015A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="219.88mm" wi="160.70mm" file="US20230007015A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="256.20mm" wi="166.37mm" file="US20230007015A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Field of the Disclosure</heading><p id="p-0002" num="0001">The field of the disclosure is data processing, or, more specifically, methods, apparatus, and systems for covert monitoring of an attacker host in an SDP network.</p><heading id="h-0003" level="1">Description of Related Art</heading><p id="p-0003" num="0002">As computer technologies become more interconnected, protecting against malicious software, such as malware, becomes more prevalent. There are various methods to protect against malicious software. In some instances, it is useful to protect a single system that is currently being attacked by isolating the system from an attacker. In some instances, it is useful to develop protection against future attacks similar to those used against the single system by gathering information about the attacker and the attacker's methods. Often, isolating a system from an attacker and gathering information about the attacker cannot be carried out in parallel. For both to be carried out together, communication between the attacker and the compromised system must not be interrupted in a manner in which the attacker is able to detect the interruption.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0004" num="0003">Methods, apparatus, and products for covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network according to various embodiments are disclosed in this specification. Such covert monitoring may include: authenticating, by an SDP controller, a first and second host in the SDP network, wherein the first and second host, after authentication, establish an end-to-end encryption communication session; detecting, by the SDP controller, that the first host is an attacker host and the second host is a victim host; establishing, by the SDP controller as a copy of the victim host, a mimic host; and redirecting, by the SDP controller, communication from the attacker host to the mimic host comprising migrating, without disruption detectable by the attacker host, the communication session from the victim host to the mimic host, wherein the mimic host monitors communications with the attacker host.</p><p id="p-0005" num="0004">The foregoing and other objects, features, and advantages of the disclosure will be apparent from the following more particular descriptions of exemplary embodiments of the disclosure as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a block diagram of an example host for covert monitoring of an attacker host in a SDP network according to some embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart of an example method for covert monitoring of an attacker host in a SDP network according to some embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of an example method for covert monitoring of an attacker host in a SDP network according to some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0009" num="0008">Exemplary methods, apparatus, and products for covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network in accordance with the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. A software defined perimeter is a framework configured to control access to resources based on identity of hosts in the network. The term &#x2018;host&#x2019; as used in this specification generally refers to a computer or other system that is coupled for data communications with one other hosts or networks. A host may be implemented in a variety of manners according to embodiments of the present disclosure including, for example, a virtual machine, a container, or a physical computer system.</p><p id="p-0010" num="0009">Hosts are authorized for data communications in an SDP framework based on identity. That is, connectivity in a software defined perimeter is based on a need-to-know model in which device (host) identity is verified before access to application infrastructure is granted. Application infrastructure is effectively invisible (that is, infrastructure cannot be detected), without visible DNS information or IP addresses. A network based on an SDP mitigates common network-based attacks, including, for example: server scanning, denial of service, SQL (&#x2018;Structured Query Language&#x2019;) injection, operating system and application vulnerability exploits, man-in-the-middle, pass-the-hash, pass-the-ticket, and other attacks by unauthorized users.</p><p id="p-0011" num="0010">For further explanation, therefore, <figref idref="DRAWINGS">FIG. <b>1</b></figref> sets forth a block diagram of a software defined perimeter <b>101</b> that includes an SDP controller <b>102</b>, a first host <b>104</b>, and a second host <b>106</b>. The SDP controller, first, and second host are coupled for communications through a data communications network <b>100</b>. The SDP controller includes a processor <b>116</b> and memory <b>118</b>. The processor <b>116</b> is configured to execute instructions stored in memory <b>118</b> of the SDP controller <b>102</b>. The SDP controller <b>102</b> may also include other computer components, hardware, software, firmware, and the like not shown here.</p><p id="p-0012" num="0011">Stored in memory <b>118</b> of the SDP controller is an operating system (&#x2018;OS&#x2019;) <b>120</b> and an SDP module <b>122</b>. The SDP module <b>122</b> is a module of computer program instructions configured for authenticating hosts within the SDP network and authorizing communication between the hosts based on identity. The SDP network includes accepting hosts that have previously authenticated with the SDP controller. When another host, referred to as an &#x2018;initiating host,&#x2019; attempts to access resources within the SPD network, the SDP controller authenticates the initiating host and determines, based on the identity of the initiating host, which of the accepting hosts the initiating host is authorized to communicate with. The SDP controller then instructs the SDP accepting hosts authorized for communications with the initiating host to accept communication from the initiating host and vice versa. The initiating host may then initiate a communication session with one or more of the determined accepting hosts.</p><p id="p-0013" num="0012">More specifically, in the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the SDP module <b>122</b> authenticates a first <b>104</b> and second <b>106</b> host in the SDP <b>101</b> network <b>100</b>. The SDP controller <b>102</b> may then, based on the identity of the first and second host, authorize communication between the first and second host. Once the first and second host are authenticated and authorized to communicate with one another, the first and second host may establish a secure communication session, such as an end-to-end encryption communication session <b>108</b><i>a</i>. End-to-End encryption is a system of communication where generally only the communicating users can read the messages. Specifically, in the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the first and second host may utilize various cryptographic keys to encrypt and decrypt communications <b>114</b>. Examples of end-to-end encryption protocols include Internet Protocol Security (&#x2018;IPsec&#x2019;), Transport Layer Security (&#x2018;TLS&#x2019;), Secure Shell (&#x2018;SSH&#x2019;), and the like.</p><p id="p-0014" num="0013">Also stored in memory <b>118</b> is an attack detection module <b>124</b>. The attack detection module <b>124</b> is a module of computer program instructions that, when executed by the processor <b>116</b>, causes the SDP controller <b>102</b> to monitor data communications within the SDP network and analyze the data communications to detect malicious network traffic. Such malicious network traffic within the SDP network (that is, originating from an authorized host in the SDP network) may originate in a variety of manners including through malware. Such malware may include viruses, worms, Trojan horses, ransomware, spyware, adware, rogue software, wiper, and scareware among others. In some embodiments, the SDP controller executes the attack detection module <b>124</b> that monitors the data communications within SDP network and analyzes the data communications to detect malicious network traffic. In other embodiments, a third-party system may carry out such monitoring and analysis. In such embodiments, the third-party system may notify the SDP controller upon determining that data communications monitored within the SDP network include malicious network traffic. That is, the SDP controller in some embodiments, is said to &#x2018;detect&#x2019; malicious network traffic or an &#x2018;attack&#x2019; within the SDP network by receiving a notification from a third-party system of such malicious network traffic.</p><p id="p-0015" num="0014">More specifically, in the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the attack detection module <b>124</b> detects that data communications <b>114</b> originating from the first host <b>104</b> and directed to the second host <b>106</b> include malicious network traffic. As such, the SDP controller determines that the first host <b>104</b> is an attacker host and the second host is a victim host.</p><p id="p-0016" num="0015">Also stored in memory <b>118</b> of the SDP controller <b>102</b> is an isolation and migration module <b>126</b>. The isolation and migration module <b>126</b> is a module of computer program instructions that, when executed by the processor <b>116</b>, causes the SDP controller <b>102</b>, to establish, as a copy of the victim host, a mimic host and redirect communication from the attacker host to the mimic host. The isolation and migration module <b>126</b> may establish a mimic host <b>110</b> in a variety of manners depending upon the implementation of the victim host. For example, in embodiments in which the victim host is implemented as a virtual machine (&#x2018;VM&#x2019;), the isolation and migration module <b>126</b> may instantiate a copy of the victim host VM including all data structures and state of the victim host VM.</p><p id="p-0017" num="0016">The isolation and migration module <b>126</b> may also be configured to migrate, without disruption detectable by the attacker host, the communication session <b>108</b><i>a </i>from the victim host to the mimic host (depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as <b>108</b><i>b</i>). Migrating the communication session <b>108</b><i>a </i>refers to instantiating a communication session <b>108</b><i>b </i>that appears, from the perspective of the attacker host, exactly the same as the communication sessions <b>108</b><i>a </i>between the attacker and victim host <b>106</b>. In effect, the end point of the communication session is moved from the victim host <b>106</b> to the mimic host <b>110</b>. Further, the migration is also described as being carried out &#x201c;without disruption detectable by the attacker host&#x201d; in that the attacker host is completely unaware that the migration has occurred. The migration of the communication session <b>108</b> from the victim to the mimic enables the victim host to be isolated from the attacker host <b>104</b>.</p><p id="p-0018" num="0017">Once the communication session <b>108</b><i>b </i>is migrated from the victim host <b>106</b> to the mimic host <b>110</b>, the mimic host <b>110</b> may monitor, by the monitoring module <b>128</b>, communications <b>114</b> with the attacker host. That is, the mimic host <b>110</b>, covertly, without knowledge by the attacker host, gathers information about the attacker host while the attacker host believes it is communicating with the victim host. The mimic host <b>110</b> may report the gathered information to the SDP controller <b>102</b> or another system for further action.</p><p id="p-0019" num="0018">Readers of skill in the art will recognize that the example SDP network of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be implemented within or as part of a cloud computing environment. Such a cloud computing environment may be implemented as a private cloud computing environment, a public cloud computing environment, or a hybrid cloud computing environment. A private cloud is a cloud infrastructure that is operated solely for a single organization, whether managed internally or by a third party, and hosted either internally or externally. A public cloud comprises cloud resources that are owned and operated by a third-party cloud service provider and delivered over the public internet. Architecturally, there are few differences between public cloud and private cloud services, but security concerns increase substantially when cloud services, such as applications, storage, and other resources, are shared by multiple customers. A hybrid cloud is a composition of a public cloud and a private environment, such as a private cloud or on-premises resources, that remain distinct entities but are bound together, offering the benefits of multiple deployment models.</p><p id="p-0020" num="0019">Although not depicted in detail in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, readers of skill in the art will recognize that the first host, second host, and mimic host may all include computer hardware and software components, similar to those of the SDP controller <b>102</b>. That is, any of the hosts may contain computer processors, memory, communication adapters, storage devices, video adapter, operating systems, applications, and so on. As mentioned above, in some embodiments, a host may be implemented as a virtual machine, a container, or other similar abstractions of hardware and software.</p><p id="p-0021" num="0020">For further explanation, <figref idref="DRAWINGS">FIG. <b>2</b></figref> sets forth a flowchart illustrating an example method of covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network according to embodiments of the present disclosure. The method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes authenticating <b>202</b>, by an SDP controller <b>102</b>, a first <b>104</b> and second <b>106</b> host in the SDP network <b>100</b>. Authenticating <b>202</b> the first <b>104</b> and second <b>106</b> host in the SDP network <b>100</b> may be carried out by the SDP controller receiving and verifying identification information, via a token <b>212</b>, from each of the first and second host. Readers of skill in the art will recognize that authenticating by the SDP controller may involve multiple levels of verification, such as user authentication, a device certificate to an active system health check, and others.</p><p id="p-0022" num="0021">In the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the first <b>104</b> and second <b>106</b> host, after authentication, establish an end-to-end encryption communication session <b>108</b>. Establishing an end-to-end encryption communication session <b>108</b> may be carried out by the first and second host establishing a secure communication session where generally only the communicating users can read the messages. Examples of end-to-end encryption protocols include Internet Protocol Security (&#x2018;IPsec&#x2019;), Transport Layer Security (&#x2018;TLS&#x2019;), Secure Shell (&#x2018;SSH&#x2019;), and the like.</p><p id="p-0023" num="0022">The method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes detecting <b>204</b>, by the SDP controller <b>102</b>, that the first host <b>104</b> is an attacker host <b>104</b> and the second host <b>106</b> is a victim host <b>106</b>. Detecting <b>204</b> that the first host <b>104</b> is an attacker host <b>104</b> and the second host <b>106</b> is a victim host <b>106</b> may be carried out in a variety of ways, including, for example by monitoring the data communications <b>114</b> being sent via the end-to-end encryption communication session <b>108</b> and detecting that data communications <b>114</b> originating from the first host <b>104</b> and directed to the second host <b>106</b> include malicious network traffic. That is, in some embodiments, the SDP controller detects that the first host is &#x2018;attacking&#x2019; the second host in that the first host is sending malicious network traffic to the second host.</p><p id="p-0024" num="0023">The method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes establishing <b>206</b>, by the SDP controller <b>102</b> as a copy <b>112</b> of the victim host <b>106</b>, a mimic host <b>110</b>. Establishing <b>206</b> as a copy <b>112</b> of the victim host <b>106</b>, a mimic host <b>110</b> may be carried out in a variety of manners depending upon the implementation of the victim host. For example, in embodiments in which the victim host is implemented as a virtual machine (&#x2018;VM&#x2019;), the SDP controller may instantiate a copy of the victim host VM including all data structures and state of the victim host VM. Similarly, in embodiments in which the victim host is implemented as a container, the SDP controller may instantiate a copy of the victim host container including all data structures and state of the victim host container.</p><p id="p-0025" num="0024">The method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes redirecting <b>208</b>, by the SDP controller <b>102</b>, communication <b>114</b> from the attacker host <b>104</b> to the mimic host <b>110</b>. In the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, redirecting <b>208</b> the communication from the attacker host to the mimic host includes migrating <b>210</b>, without disruption detectable by the attacker host <b>104</b>, the communication session <b>108</b> from the victim host <b>106</b> to the mimic host <b>110</b>. Migrating <b>210</b> the communication session <b>108</b> from the victim host <b>106</b> to the mimic host <b>110</b> may be carried out by migrating session and connection metadata from the victim host to the mimic host. Such session and connection metadata could include network information identifying ports, IP addresses, mac address, communication buffers, and so on as will occur to readers of skill in the art. For example, the network adapter and its associated data structures may be mirrored from victim to mimic host.</p><p id="p-0026" num="0025">The method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> also includes monitoring <b>214</b> by the mimic host <b>110</b> communications with the attacker host <b>104</b>. Monitoring <b>214</b> communications with the attacker host <b>104</b> may be carried out by the mimic host covertly, without knowledge by the attacker host, gathering information about the attacker host while the attacker host believes it is communicating with the victim host. Examples of information gathered by the mimic host may include network traffic metadata, device information of the attacker host, IP and other network addresses of the attacker host, content of messages transmitted from the attacker host, target of requests by the attacker host, and so on. Further, in some embodiments, the mimic host may be configured to attempt to install an agent on the attacker host that tracks actions carried out on the attacker host such as user interaction with web browsers or other applications. The mimic host <b>110</b> may report the gathered information to the SDP controller <b>102</b> or another system for further action.</p><p id="p-0027" num="0026">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b></figref> sets forth a flowchart illustrating another example method of covert monitoring of an attacker host in an SDP network according to embodiments of the present disclosure. The method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is similar to the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> in that the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes: authenticating <b>202</b> a first <b>104</b> and second <b>106</b> host in the SDP network <b>100</b>; detecting <b>204</b> that the first host <b>104</b> is an attacker host <b>104</b> and the second host <b>106</b> is a victim host <b>106</b>; establishing <b>206</b> a mimic host <b>110</b>; and redirecting <b>208</b> communication <b>114</b> from the attacker host <b>104</b> to the mimic host <b>110</b> including migrating <b>210</b>, without disruption, the end-to-end encryption communication session <b>108</b>.</p><p id="p-0028" num="0027">The method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> differs from the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, however, in that the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref> also includes receiving <b>302</b>, by the SDP controller <b>102</b> from the second host <b>106</b>, a key <b>304</b> utilized by the second host <b>106</b> to communicate with the first host <b>104</b> via the end-to-end encryption communication session <b>108</b>. Receiving <b>302</b> the key <b>304</b> utilized by the second host <b>106</b> to communicate with the first host <b>104</b> via the end-to-end encryption communication session <b>108</b> may be carried out by receiving the key from the second host after the first and second host have established the end-to-end encryption communication session <b>108</b>. The &#x2018;key&#x2019; that the victim host shares with the SDP controller is, in some embodiments (such as asymmetric encryption), the victim host's private key. Readers of skill in the art will also recognize that the SDP controller may obtain the victim host's public key in a variety of manners. That is, in some embodiments, the end-to-end encryption communication session originally established between the first and second host (attacker and victim) relies on a pair of public and a pair of private keys. The private key of the victim host would normally not be shared with any other entity. However, in an effort to not disrupt the end-to-end communications session from the perspective of the attacker host, the victim host may share the private key with the SDP controller. The key <b>304</b> may be received by the SDP controller over a secure connection. The key <b>304</b> may be received by the SDP controller as part of or immediately following the establishment of the end-to-end encryption communication session <b>108</b>. The key <b>304</b> may be received by the SDP controller asynchronously upon the detection of suspicious activity from the first host, or upon request by the SDP controller.</p><p id="p-0029" num="0028">Also in the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, establishing <b>206</b> the mimic host <b>110</b> includes provisioning <b>306</b> the mimic host <b>110</b> with the key <b>304</b>. Provisioning <b>306</b> the mimic host <b>110</b> with the key <b>304</b> may be carried out by provisioning the mimic host <b>110</b> with the key <b>304</b> while instantiating a copy of the victim host. For example, in embodiments in which the victim host is implemented as a virtual machine (&#x2018;VM&#x2019;), the SDP controller may instantiate a copy of the victim host VM including all data structures and state of the victim host VM, as well as the key <b>304</b> from the victim host. In some embodiments the SDP controller may provision the mimic host <b>110</b> with both a private and a public key.</p><p id="p-0030" num="0029">Also in the method of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, migrating <b>210</b> the communication session <b>108</b> includes updating <b>308</b> connection information <b>310</b> describing the communication session <b>108</b> to reflect a connection between the attacker host <b>104</b> and the mimic host <b>110</b> rather than the attacker host <b>104</b> and the victim host <b>106</b>. Updating <b>308</b> connection information <b>310</b> may be carried out by reassigning/updating the mappings of connection information associated with the victim host, such as a mac address, IP address, ports, and the like, to instead be associated with the established mimic host. In such embodiments, reassigning such connection information effectively isolates the victim host from the attacker host while also migrating the communication session <b>108</b> from the victim host to the mimic host.</p><p id="p-0031" num="0030">In view of the explanations set forth above, readers will recognize that the benefits of covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network according to embodiments of the present disclosure include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0031">Improving the security of public and private cloud platforms by gathering information about the activity of an attacked host within an SDP network; and</li>        <li id="ul0002-0002" num="0032">Improved methods for gathering information about an attacker host within an SDP network by automatically provisioning a mimic host with the session encryption key of an end-to-end encryption communication session with the attacker host, thus redirecting the traffic from a victim host to the mimic host without disrupting the communication from the perspective of the attacker host. From the security perspective, an important advantage of this solution is that the attacker host cannot detect the corrective action and change its behavior when it is observed.</li>    </ul>    </li></ul></p><p id="p-0032" num="0033">Exemplary embodiments of the present disclosure are described largely in the context of a fully functional computer system for shared memory workloads using existing network fabrics. Readers of skill in the art will recognize, however, that the present disclosure also may be embodied in a computer program product disposed upon computer readable storage media for use with any suitable data processing system. Such computer readable storage media may be any storage medium for machine-readable information, including magnetic media, optical media, or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes, compact disks for optical drives, magnetic tape, and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the disclosure as embodied in a computer program product. Persons skilled in the art will recognize also that, although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware, nevertheless, alternative embodiments implemented as firmware or as hardware are well within the scope of the present disclosure.</p><p id="p-0033" num="0034">The present disclosure may be a system, a method, and/or a computer program product. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present disclosure.</p><p id="p-0034" num="0035">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0035" num="0036">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0036" num="0037">Computer readable program instructions for carrying out operations of the present disclosure may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present disclosure.</p><p id="p-0037" num="0038">Aspects of the present disclosure are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0038" num="0039">These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0039" num="0040">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0040" num="0041">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present disclosure. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0041" num="0042">It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present disclosure without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present disclosure is limited only by the language of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network, the method comprising:<claim-text>authenticating, by an SDP controller, a first and second host in the SDP network, wherein the first and second host, after authentication, establish an end-to-end encryption communication session;</claim-text><claim-text>detecting, by the SDP controller, that the first host is an attacker host and the second host is a victim host;</claim-text><claim-text>establishing, by the SDP controller as a copy of the victim host, a mimic host; and</claim-text><claim-text>redirecting, by the SDP controller, communication from the attacker host to the mimic host comprising migrating, without disruption detectable by the attacker host, the communication session from the victim host to the mimic host, wherein the mimic host monitors communications with the attacker host.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising receiving, by the SDP controller from the second host, a key utilized by the second host to communicate with the first host via the communication session.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein:<claim-text>establishing the mimic host further comprises provisioning the mimic host with the key.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein:<claim-text>migrating the communication session further comprises updating connection information describing the communication session to reflect a connection between the attacker host and the mimic host rather than the attacker host and the victim host.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the hosts comprises a virtual machine.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of the hosts comprises a container.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the SDP network comprises a cloud computing environment.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the cloud computing environment is a private cloud computing environment.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the cloud computing environment is a public cloud computing environment.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the cloud computing environment is a hybrid cloud computing environment.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An apparatus for covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network, the apparatus comprising a computer processor, a computer memory operatively coupled to the computer processor, the computer memory having disposed within it computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>authenticating, by an SDP controller, a first and second host in the SDP network, wherein the first and second host, after authentication, establish an end-to-end encryption communication session;</claim-text><claim-text>detecting, by the SDP controller, that the first host is an attacker host and the second host is a victim host;</claim-text><claim-text>establishing, by the SDP controller as a copy of the victim host, a mimic host; and</claim-text><claim-text>redirecting, by the SDP controller, communication from the attacker host to the mimic host comprising migrating, without disruption detectable by the attacker host, the communication session from the victim host to the mimic host, wherein the mimic host monitors communications with the attacker host.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the step of receiving, by the SDP controller from the second host, a key utilized by the second host to communicate with the first host via the communication session.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein:<claim-text>establishing the mimic host further comprises provisioning the mimic host with the key.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein:<claim-text>migrating the communication session further comprises updating connection information describing the communication session to reflect a connection between the attacker host and the mimic host rather than the attacker host and the victim host.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein each of the hosts consists of one of: a virtual machine and a container.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the SDP network comprises a cloud computing environment.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A computer program product for covert monitoring of an attacker host in a software defined perimeter (&#x2018;SDP&#x2019;) network, the computer program product disposed upon a computer readable medium, the computer program product comprising computer program instructions that, when executed, cause a computer to carry out the steps of:<claim-text>authenticating, by an SDP controller, a first and second host in the SDP network, wherein the first and second host, after authentication, establish an end-to-end encryption communication session;</claim-text><claim-text>detecting, by the SDP controller, that the first host is an attacker host and the second host is a victim host;</claim-text><claim-text>establishing, by the SDP controller as a copy of the victim host, a mimic host; and</claim-text><claim-text>redirecting, by the SDP controller, communication from the attacker host to the mimic host comprising migrating, without disruption detectable by the attacker host, the communication session from the victim host to the mimic host, wherein the mimic host monitors communications with the attacker host.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer program product of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising computer program instructions that, when executed, cause the computer to carry out the step of receiving, by the SDP controller from the second host, a key utilized by the second host to communicate with the first host via the communication session.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer program product of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein:<claim-text>establishing the mimic host further comprises provisioning the mimic host with the key.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer program product of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein:<claim-text>migrating the communication session further comprises updating connection information describing the communication session to reflect a connection between the attacker host and the mimic host rather than the attacker host and the victim host.</claim-text></claim-text></claim></claims></us-patent-application>