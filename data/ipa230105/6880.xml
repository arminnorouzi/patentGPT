<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006881A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006881</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17449601</doc-number><date>20210930</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>IN</country><doc-number>202141028381</doc-number><date>20210624</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>24</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0816</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">IDENTIFYING OUT-OF-BAND CONFIGURATION CHANGES TO VALIDATE INTENT FILES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Juniper Networks, Inc.</orgname><address><city>Sunnyvale</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Krishnamurthy</last-name><first-name>Pradeep H.</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Nadeem</last-name><first-name>Fnu</first-name><address><city>Fremont</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Deshmukh</last-name><first-name>Raviraj Satish</first-name><address><city>Pune</city><country>IN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A controller device manages a plurality of network devices. The controller device includes a memory comprising a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of the set of network devices. Additionally, the controller device includes processing circuitry configured to receive an intent file corresponding to an intended configuration for the set of network devices; receive a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and determine, based on a stored network device configuration corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="150.03mm" wi="151.21mm" file="US20230006881A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="186.10mm" wi="153.25mm" file="US20230006881A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.29mm" wi="172.13mm" file="US20230006881A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="239.10mm" wi="170.69mm" file="US20230006881A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="245.36mm" wi="165.95mm" file="US20230006881A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><p id="p-0002" num="0001">This application claims priority to Indian Provisional Patent Application No. 202141028381, filed on Jun. 24, 2021, the entire contents of which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The disclosure relates to computer networks, and more particularly, to management of network devices.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A computer network is a collection of interconnected computing devices that can exchange data and share resources. A variety of devices operate to facilitate communication between the computing devices. For example, a computer network may include routers, switches, gateways, firewalls, and a variety of other devices to provide and facilitate network communication.</p><p id="p-0005" num="0004">These network devices typically include mechanisms, such as management interfaces, for locally or remotely configuring the devices. By interacting with the management interface, a client can perform configuration tasks as well as perform operational commands to collect and view operational data of the managed devices. For example, the clients may configure interface cards of the device, adjust parameters for supported network protocols, specify physical components within the device, modify routing information maintained by a router, access software modules and other resources residing on the device, and perform other configuration tasks. In addition, the clients may allow a user to view current operating parameters, system logs, information related to network connectivity, network activity or other status information from the devices as well as view and react to event information received from the devices.</p><p id="p-0006" num="0005">Network configuration services may be performed by multiple distinct devices, such as routers with service cards and/or dedicated service devices. Such services include connectivity services such as Layer Three Virtual Private Network (L3VPN), Virtual Private Local Area Network Service (VPLS), and Peer to Peer (P2P) services. Other services include network configuration services, such as Dotlq VLAN Service. Network management systems (NMSs) and NMS devices, also referred to as controllers or controller devices, may support these services such that an administrator can easily create and manage these high-level network configuration services.</p><p id="p-0007" num="0006">In particular, user configuration of devices may be referred to as &#x201c;intents.&#x201d; An intent-based networking system lets administrators describe the intended network/compute/storage state. User intents can be categorized as business policies or stateless intents. Business policies, or stateful intents, may be resolved based on the current state of a network. Stateless intents may be fully declarative ways of describing an intended network/compute/storage state, without concern for a current network state.</p><p id="p-0008" num="0007">Intents may be represented as intent data models, which may be modeled using unified graphs. Intent data models may be represented as connected graphs, so that business policies can be implemented across intent data models. For example, data models may be represented using connected graphs having vertices connected with has-edges and reference (ref) edges. Controller devices may model intent data models as unified graphs, so that the intend models can be represented as connected. In this manner, business policies can be implemented across intent data models. When Intents are modeled using a unified graph model, extending new intent support needs to extend the graph model and compilation logic.</p><p id="p-0009" num="0008">In order to configure devices to perform the intents, a user (such as an administrator) may write translation programs that translate high-level configuration instructions (e.g., instructions according to an intent data model, which may be expressed as a unified graph model) to low-level configuration instructions (e.g., instructions according to a device configuration model). As part of configuration service support, the user/administrator may provide the intent data model and a mapping between the intent data model to a device configuration model.</p><p id="p-0010" num="0009">In order to simplify the mapping definition for the user, controller devices may be designed to provide the capability to define the mappings in a simple way. For example, some controller devices provide the use of Velocity Templates and/or Extensible Stylesheet Language Transformations (XSLT). Such translators contain the translation or mapping logic from the intent data model to the low-level device configuration model. Typically, a relatively small number of changes in the intent data model impact a relatively large number of properties across device configurations. Different translators may be used when services are created, updated, and deleted from the intent data model.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0011" num="0010">In general, this disclosure describes techniques for managing network devices. A network management system (NMS) device, also referred herein as a controller or controller device, may be configured to implement an intended configuration indicated by a high-level intent file. The controller may receive the high-level intent file from an administrator for a plurality of managed network devices. The intended configuration may represent a configuration for the plurality of network devices managed by the administrator, and the controller may process the high-level intent file in order to achieve the intended configuration. For example, the controller may translate the high-level intent to a plurality of low-level configurations, each low-level configuration of the plurality of low-level configurations corresponding to a network device of the plurality of network devices. The controller may push the low-level configurations to the plurality of managed network devices in order to achieve the intended configuration in the high-level intent file. Since controller generates the low-level configurations based on the intended configuration, the controller may store backups of the low-level configurations pushed to the network devices in order to preserve a record of the intended configuration. In some cases, the controller may also store a backup of the high-level intent file.</p><p id="p-0012" num="0011">In some cases, one or more of the managed network devices may implement a configuration change that was not dictated by a low-level configuration pushed by the controller. These configuration changes may be referred to as &#x201c;out-of-band&#x201d; configuration changes, because the controller does not cause the configuration changes. Out-of-band configuration changes sometimes are incompatible with the intended configuration indicated by the high-level intent file. For example, an out-of-band configuration change at a network device may interfere with an ability of the administrator to manage the network device. Consequently, it may be beneficial for the controller to determine whether out-of-band configuration change is compatible with the intended configuration indicated by the high-level intent file. In some cases, the controller may output an instruction to change the configuration of the network device based on determining that the out-of-band configuration change is not compatible with the intended configuration</p><p id="p-0013" num="0012">The techniques of the disclosure may provide specific improvements to the computer-related field of computer networking that have practical applications. For example, the controller may generate one or more flagged XML Path Language (XPath) operations based on the high-level high level intent. These flagged XPath operations may represent XPath operations to &#x201c;watch for&#x201d; in out-of-band configurations. When the controller determines that an out-of-band configuration change is associated with one or more of the flagged XPath operations, then the controller may determine that the out-of-band configuration change is incompatible with the intended configuration. By generating the flagged XPath operations, the controller may increase an ability to detect out-of-band configuration changes that are incompatible with an intended configuration as compared with systems that do not generate flagged XPath operations.</p><p id="p-0014" num="0013">In some examples, a controller device manages a set of network devices, the controller device comprising a memory comprising a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of the set of network devices. Additionally, the controller device comprises processing circuitry configured to: receive an intent file corresponding to an intended configuration for the set of network devices; receive a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and determine, based on a stored network device configuration corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change.</p><p id="p-0015" num="0014">In some examples, a method includes receiving, by processing circuitry of a controller device, an intent file corresponding to an intended configuration for the set of network devices; receiving, by the processing circuitry, a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and determining, by the processing circuitry based on a stored network device configuration corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change, wherein a memory of the controller device comprises a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of the set of network devices.</p><p id="p-0016" num="0015">In some examples, a system includes a set of network devices; and a controller device that manages the set of network devices, the controller device comprising: a memory comprising a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of the set of network devices; and processing circuitry configured to: receive an intent file corresponding to an intended configuration for the set of network devices; receive a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and determine, based on a stored network device configuration corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change.</p><p id="p-0017" num="0016">The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example including elements of an enterprise network that is managed using a controller device, in accordance with one or more techniques of this disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an example set of components for the controller device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with one or more techniques of this disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating an example operation for processing an intent to cause a device to implement a configuration, in accordance with one or more techniques of this disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating an example operation for determining whether an out-of-band configuration change invalidates an intent, in accordance with one or more techniques of this disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example including elements of an enterprise network <b>2</b> that are managed using a controller device <b>10</b>, in accordance with one or more techniques of this disclosure. Managed elements <b>14</b>A-<b>14</b>G (collectively, &#x201c;elements <b>14</b>&#x201d;) of enterprise network <b>2</b> include network devices interconnected via communication links to form a communication topology in order to exchange resources and information. Elements <b>14</b> (also generally referred to as network devices or remote network devices) may include, for example, routers, switches, gateways, bridges, hubs, servers, firewalls or other intrusion detection systems (IDS) or intrusion prevention systems (IDP), computing devices, computing terminals, printers, other network devices, or a combination of such devices. While described in this disclosure as transmitting, conveying, or otherwise supporting packets, enterprise network <b>2</b> may transmit data according to any other discrete data unit defined by any other protocol, such as a cell defined by the Asynchronous Transfer Mode (ATM) protocol, or a datagram defined by the User Datagram Protocol (UDP). Communication links interconnecting elements <b>14</b> may be physical links (e.g., optical, copper, and the like), wireless, or any combination thereof.</p><p id="p-0023" num="0022">Enterprise network <b>2</b> is shown coupled to public network <b>18</b> (e.g., the Internet) via a communication link. Public network <b>18</b> may include, for example, one or more client computing devices. Public network <b>18</b> may provide access to web servers, application servers, public databases, media servers, end-user devices, and other types of network resource devices and content.</p><p id="p-0024" num="0023">Controller device <b>10</b> is communicatively coupled to elements <b>14</b> via enterprise network <b>2</b>. Controller device <b>10</b>, in some examples, forms part of a device management system, although only one device of the device management system is illustrated for purpose of example in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Controller device <b>10</b> may be coupled either directly or indirectly to the various elements <b>14</b>. Once elements <b>14</b> are deployed and activated, administrator <b>12</b> uses controller device <b>10</b> to manage the network devices using a device management protocol. One example device protocol is the Simple Network Management Protocol (SNMP) that allows controller device <b>10</b> to traverse and modify management information bases (MIBs) that store configuration data within each of managed elements <b>14</b>.</p><p id="p-0025" num="0024">In common practice, controller device <b>10</b>, also referred to as a network management system (NMS) or NMS device, and elements <b>14</b> are centrally maintained by an IT group of the enterprise. Administrator <b>12</b> interacts with controller device <b>10</b> to remotely monitor and configure elements <b>14</b>. For example, administrator <b>12</b> may receive alerts from controller device <b>10</b> regarding any of elements <b>14</b>, view configuration data of elements <b>14</b>, modify the configurations data of elements <b>14</b>, add new network devices to enterprise network <b>2</b>, remove existing network devices from enterprise network <b>2</b>, or otherwise manipulate the enterprise network <b>2</b> and network devices therein. Although described with respect to an enterprise network, the techniques of this disclosure are applicable to other network types, public and private, including LANs, VLANs, VPNs, and the like.</p><p id="p-0026" num="0025">In some examples, administrator <b>12</b> uses controller device <b>10</b> or a local workstation to interact directly with elements <b>14</b>, e.g., through telnet, secure shell (SSH), or other such communication sessions. That is, elements <b>14</b> generally provide interfaces for direct interaction, such as command line interfaces (CLIs), web-based interfaces, graphical user interfaces (GUIs), or the like, by which a user can interact with the devices to directly issue text-based commands. For example, these interfaces typically allow a user to interact directly with the device, e.g., through a telnet, secure shell (SSH), hypertext transfer protocol (HTTP), or other network session, to enter text in accordance with a defined syntax to submit commands to the managed element. In some examples, the user initiates an SSH session <b>15</b> with one of elements <b>14</b>, e.g., element <b>14</b>F, using controller device <b>10</b>, to directly configure element <b>14</b>F. In this manner, a user can provide commands in a format for execution directly to elements <b>14</b>.</p><p id="p-0027" num="0026">Further, administrator <b>12</b> can also create scripts that can be submitted by controller device <b>10</b> to any or all of elements <b>14</b>. For example, in addition to a CLI interface, elements <b>14</b> also provide interfaces for receiving scripts that specify the commands in accordance with a scripting language. In a sense, the scripts may be output by controller device <b>10</b> to automatically invoke corresponding remote procedure calls (RPCs) on the managed elements <b>14</b>. The scripts may conform to, e.g., extensible markup language (XML) or another data description language.</p><p id="p-0028" num="0027">Administrator <b>12</b> uses controller device <b>10</b> to configure elements <b>14</b> to specify certain operational characteristics that further the objectives of administrator <b>12</b>. For example, administrator <b>12</b> may specify for an element <b>14</b> a particular operational policy regarding security, device accessibility, traffic engineering, quality of service (QoS), network address translation (NAT), packet filtering, packet forwarding, rate limiting, or other policies. Controller device <b>10</b> uses one or more network management protocols designed for management of configuration data within managed network elements <b>14</b>, such as the SNMP protocol or the Network Configuration Protocol (NETCONF) protocol or a derivative thereof, such as the Juniper Device Management Interface, to perform the configuration. In general, NETCONF provides mechanisms for configuring network devices and uses an Extensible Markup Language (XML)-based data encoding for configuration data, which may include policy data. NETCONF is described in Enns, &#x201c;NETCONF Configuration Protocol,&#x201d; Network Working Group, RFC 4741, December 2006, available at tools.ietf.org/html/rfc4741. Controller device <b>10</b> may establish NETCONF sessions with one or more of elements <b>14</b>.</p><p id="p-0029" num="0028">Controller device <b>10</b> may be configured to accept high-level configuration data, or intents, from administrator <b>12</b> (which may be expressed as structured input parameters, e.g., according to the Yet Another Next Generation (YANG) language, which is described in Bjorklund, &#x201c;YANG&#x2014;A Data Modeling Language for the Network Configuration Protocol (NETCONF),&#x201d; Internet Engineering Task Force, RFC 6020, October 2010, available at tools.ietf.org/html/rfc6020). Controller device <b>10</b> may also be configured to output respective sets of low-level device configuration data, e.g., device configuration additions, modifications, and removals.</p><p id="p-0030" num="0029">In some examples, controller device <b>10</b> may use YANG modeling for an intent data model and low-level device configuration models. This data may contain relations across YANG entities, such as list items and containers. In some examples, controller device <b>10</b> may convert a YANG data model into a database model, and convert YANG validations into data validations.</p><p id="p-0031" num="0030">Controller device <b>10</b> may receive data from administrator <b>12</b> representing any or all of create, update, and/or delete actions with respect to the intent data model. Controller device <b>10</b> may be configured to use the same compilation logic for each of create, update, and delete as applied to the graph model.</p><p id="p-0032" num="0031">In general, controllers like controller device <b>10</b> use a hierarchical data model for intents, low-level data models, and resources. The hierarchical data model can be based on YANG or YAML. The hierarchical data model can be represented as a graph, as discussed above. Modern systems have supported intents to ease the management of networks. Intents are declarative. To realize intents, controller device <b>10</b> attempts to select optimal resources. Customer environments may be configured to allow customers (e.g., administrators <b>12</b>) to control intent realization and assure programmed intents. In some examples, controller device <b>10</b> may construct a graph data model by querying elements <b>14</b> to determine resources provided by elements <b>14</b>. Controller device <b>10</b> may generally be configured with information representing types of resources provided by each of elements <b>14</b>, but may query elements <b>14</b> to determine specific resource information for resources matching each of the types of resources provided by elements <b>14</b>. Types of resources may include, for example, forwarding tables, routing tables, network access policies (e.g., for access by certain users, firewall policies, or the like), or other such resources.</p><p id="p-0033" num="0032">Although controller device <b>10</b> may push low-level configurations to one or more or elements <b>14</b>, elements <b>14</b> may also, in some cases, implement configuration changes without instruction from controller device <b>10</b>. Configuration changes implemented without instruction from controller device <b>10</b> may be referred to as &#x201c;out-of-band&#x201d; configuration changes. In some examples, controller device <b>10</b> may execute applications that use telemetry data for closed loop validation of intents in order to determine whether an intent is invalidated by an out-of-band configuration change. However, in the case of some configuration resources such as firewall policies, such telemetry data may be unavailable. It may be beneficial for controller device <b>10</b> to detect an out-of-band configuration change in a configuration resource where telemetry data is unavailable.</p><p id="p-0034" num="0033">In some examples, a memory of the controller device <b>10</b> may be configured to store one or more low-level configurations, where each low-level configuration of the one or more low-level configurations represents a low-level configuration that the controller device <b>10</b> pushes to one of elements <b>14</b>. By storing low-level configurations pushed to elements <b>14</b>, controller device <b>10</b> may be configured to restore a configuration of elements <b>14</b> if the configuration is altered or otherwise invalidated. Storing low-level configurations also allows controller device <b>10</b> to compare a low-level configuration with the actual configuration of elements <b>14</b> in order to determine whether any changes have been made to the configuration of elements <b>14</b>. Such changes may, in some cases, represent out-of-band configuration changes made at the network device without input from controller device <b>10</b>. Out-of-band configuration changes may, in some cases, invalidate the intended configuration in the high-level intent file received by the controller <b>10</b>. It may be beneficial for controller device <b>10</b> to determine whether an out-of-band configuration change is compatible with the intended configuration. When controller device <b>10</b> determines that an out-of-band configuration change is incompatible with the intended configuration, controller device <b>10</b> may notify an administrator (e.g., administrator <b>12</b>) that the high-level configuration is incompatible with an out-of-band configuration change. Additionally, or alternatively, controller device <b>10</b> may output one or more instructions to restore a configuration of the respective element so that the configuration of the element is compatible with the intended configuration.</p><p id="p-0035" num="0034">In some examples, controller device <b>10</b> may receive a message from an element of elements <b>14</b>(e.g., element <b>14</b>A) indicating an out-of-band configuration change at element <b>14</b>A. Each time that controller device <b>10</b> outputs a low-level configuration to one of elements <b>14</b>, controller device <b>10</b> outputs a message to the respective element including an identification tag indicating that the low-level configuration is pushed from the controller device <b>10</b>. When the element implements the configuration change indicated by the low-level configuration, the element may send a return message to the controller <b>10</b> indicating that the configuration change is implemented. Additionally, or alternatively, the return message may indicate the identification tag. Controller <b>10</b> may receive the message and determine that the configuration change was not an out-of-band configuration change, since the message includes the identification tag.</p><p id="p-0036" num="0035">In some cases, controller <b>10</b> may receive a message from one of elements <b>14</b> indicating a configuration change, and the message does not include an identification tag indicating that the element implemented the configuration change based on a low-level configuration pushed by controller device <b>10</b>. Based on message omitting the identification tag, the controller device <b>10</b> may determine that the configuration change is an out-of-band configuration change.</p><p id="p-0037" num="0036">When controller <b>10</b> identifies an out-of-band configuration change at one of elements <b>14</b> (e.g., at element <b>14</b>A), controller device <b>10</b> may determine whether the out-of-band configuration change invalidates or is incompatible with an intended configuration indicated by a high-level intent file received by controller <b>10</b>. To determine whether the out-of-band configuration change invalidates the high-level configuration, the controller device <b>10</b> may retrieve, from element <b>14</b>A, information indicative of an actual configuration of element <b>14</b>A. In some examples, to retrieve the information indicative of the actual configuration of element <b>14</b>A, the controller device <b>10</b> may output, to element <b>14</b>A, a message requesting the actual configuration of element <b>14</b>A. In response to the message, controller device <b>10</b> may receive, from element <b>14</b>A, information indicative of the actual configuration of element <b>14</b>A. The actual configuration of element <b>14</b>A may represent a configuration of element <b>14</b>A when the out-of-band configuration change is implemented. Controller device <b>10</b> may retrieve, from the memory of controller device <b>10</b>, a low-level configuration that controller device <b>10</b> pushed to element <b>14</b>A before element <b>14</b>A implemented the out-of-band configuration change. Since the low-level configuration pushed to element <b>14</b>A does not include the out-of-band configuration change, it may be possible for controller device <b>10</b> to compare the low-level configuration change with the actual configuration in order to identify the out-of-band configuration change.</p><p id="p-0038" num="0037">Controller device <b>10</b> may execute a difference operation in order to determine a difference between the actual configuration of element <b>14</b>A and the low-level configuration pushed to element <b>14</b>A by controller device <b>10</b>. By determining the difference, controller device <b>10</b> may identify one or more XML Path Language (XPath) operations corresponding to the out-of-band configuration change. XPath is a programming language that is configured to select nodes from an Extensible Markup Language (XML) document. Consequently, the one or more identified XPath operations may indicate one or more nodes of element <b>14</b>A that are involved in the out-of-band configuration change or otherwise affected by the out-of-band configuration change. Controller <b>10</b> may determine whether the out-of-band configuration change to these one or more nodes invalidates the high-level configuration.</p><p id="p-0039" num="0038">As discussed above, controller <b>10</b> is configured to receive an intended high-level configuration in a high-level intent file and translate the high-level configuration to one or more low-level configurations for elements <b>14</b>. When controller <b>10</b> translates the high-level configuration to the one or more low-level configurations, controller <b>10</b> may extract information from the high-level configuration to generate one or more XPath operations. For example, the high-level configuration may include syntax representing a user selection of one or more flagged nodes for an element (e.g., element <b>14</b>A). Controller device <b>10</b> may generate, based on this syntax, one or more flagged XPaths which indicate the one or more flagged nodes. Controller device <b>10</b> may store the one or more flagged XPaths in the memory. When controller device <b>10</b> identifies one or more XPath operations associated with the out-of-band configuration change to the configuration of element <b>14</b>A, controller device <b>10</b> may compare the one or more XPath operations associated with the out-of-band configuration change with the one or more flagged XPath operations corresponding to element <b>14</b>A. When at least one XPath operation of the one or more XPath operations associated with the out-of-band configuration change matches at least one of the flagged XPath operations, controller device <b>10</b> may determine that the high-level configuration is incompatible with the out-of-band configuration change. When none of the one or more XPath operations associated with the out-of-band configuration change match the flagged XPath operations, controller device <b>10</b> may determine that the high-level configuration is compatible with the out-of-band configuration change.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an example set of components for controller device <b>10</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in accordance with one or more techniques of this disclosure. In this example, controller device <b>10</b> includes control unit <b>22</b>, network interface <b>34</b>, user interface <b>36</b>, and memory <b>40</b>. Control unit <b>22</b> includes management module <b>24</b>, network interface module <b>32</b>, and user interface module <b>38</b>. Management module <b>24</b> includes configuration module <b>26</b>, translation module <b>28</b>, and configuration change analysis module <b>30</b>. Memory <b>40</b> includes flagged paths <b>42</b>, translation functions <b>44</b>, and configuration database <b>46</b>.</p><p id="p-0041" num="0040">Control unit <b>22</b> represents any combination of hardware, software, and/or firmware for implementing the functionality attributed to control unit <b>22</b> and its constituent modules and elements. When control unit <b>22</b> includes software or firmware, control unit <b>22</b> further includes any necessary hardware for storing and executing the software or firmware, such as one or more processors or processing units. In general, a processing unit may include one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. Furthermore, a processing unit is generally implemented using fixed and/or programmable logic circuitry.</p><p id="p-0042" num="0041">Network interface <b>34</b> represents an example interface that can communicatively couple controller device <b>10</b> to an external device, e.g., one of elements <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Network interface <b>34</b> may represent a wireless and/or wired interface, e.g., an Ethernet interface or a wireless radio configured to communicate according to a wireless standard, such as one or more of the IEEE 802.11 wireless networking protocols (such as 802.11a/b/g/n or other such wireless protocols). Controller device <b>10</b> may include multiple network interfaces in various examples, although only one network interface is illustrated for purposes of example.</p><p id="p-0043" num="0042">User interface <b>36</b> represents one or more interfaces by which a user, such as administrator <b>12</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) interacts with controller device <b>10</b>, e.g., to provide input and receive output. For example, user interface <b>36</b> may represent one or more of a monitor, keyboard, mouse, touchscreen, touchpad, trackpad, speakers, camera, microphone, or the like. Furthermore, although in this example controller device <b>10</b> includes a user interface, it should be understood that administrator <b>12</b> need not directly interact with controller device <b>10</b>, but instead may access controller device <b>10</b> remotely, e.g., via network interface <b>34</b>.</p><p id="p-0044" num="0043">Memory <b>40</b> may be configured to store information within controller device <b>10</b> during operation. Memory <b>40</b> may include a computer-readable storage medium or computer-readable storage device. In some examples, memory <b>40</b> includes one or more of a short-term memory or a long-term memory. Memory <b>40</b> may include, for example, random access memories (RAM), dynamic random access memories (DRAM), static random access memories (SRAM), magnetic discs, optical discs, flash memories, or forms of electrically programmable memories (EPROM) or electrically erasable and programmable memories (EEPROM). In some examples, memory <b>40</b> is used to store program instructions for execution by controller device <b>10</b>. Memory <b>40</b> may be used by software or applications running on controller device <b>10</b> to temporarily store information during program execution.</p><p id="p-0045" num="0044">In this example, control unit <b>22</b> includes management module <b>24</b>, network interface module <b>32</b>, and user interface module <b>38</b>. Control unit <b>22</b> executes user interface module <b>38</b> to receive input from and/or provide output to user interface <b>36</b>. Control unit <b>22</b> also executes network interface module <b>32</b> to send and receive data (e.g., packets) via network interface <b>34</b>. Management module <b>24</b>, network interface module <b>32</b>, and user interface module <b>38</b> may again be implemented as respective hardware units, or in software or firmware, or a combination thereof.</p><p id="p-0046" num="0045">Control unit <b>22</b> executes management module <b>24</b> to manage various network devices, e.g., elements <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Management includes, for example, configuring the network devices according to instructions received from a user (e.g., administrator <b>12</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and providing the user with the ability to submit instructions to configure the network devices. In this example, management module <b>24</b> further includes configuration module <b>26</b> and translation module <b>28</b>.</p><p id="p-0047" num="0046">Management module <b>24</b> is configured to receive intent files (e.g., high-level configuration instructions) for a set of managed network devices from a user, such as administrator <b>12</b>. Over time, the user may update the configuration instructions, e.g., to add new services, remove existing services, or modify existing services performed by the managed devices. The intents may be structured according to, e.g., YANG. In some examples, management module <b>24</b> also provides the user with the ability to submit translation functions <b>44</b> that translation module <b>28</b> executes to transform intents to device-specific, low-level configuration instructions, as discussed below.</p><p id="p-0048" num="0047">Memory <b>40</b> includes configuration database <b>46</b>. Configuration database <b>46</b> generally includes information describing managed network devices, e.g., elements <b>14</b>. For example, configuration database <b>46</b> may include information indicating device identifiers (such as media access control (MAC) and/or internet protocol (IP) addresses), device type, device vendor, devices species (e.g., router, switch, bridge, hub, etc.), or the like. Configuration database <b>46</b> also stores device-level configuration information based on intents (e.g., high-level configuration information, or in some cases, both high-level configuration and low-level configuration information) for the managed devices (e.g., elements <b>14</b>). Configuration database <b>46</b> may store configuration information corresponding to each element of elements <b>14</b> such that management module <b>24</b> may access configuration for any one or more of elements <b>14</b>. For example, management module <b>24</b> may access configuration information corresponding to a configuration that controller device <b>10</b> pushed to element <b>14</b>C.</p><p id="p-0049" num="0048">Translation module <b>28</b> determines which devices are managed using configuration database <b>46</b>. Translation module <b>28</b> determines which of translation functions <b>44</b> to execute on the high-level configuration instructions based on the information of configuration database <b>46</b>, e.g., which of the devices are to receive the low-level configuration instructions. Translation module <b>28</b> then executes each of the determined translation functions of translation functions <b>44</b>, providing the high-level configuration instructions to the translation functions as input and receiving low-level configuration instructions. Translation module <b>28</b> may then provide the low-level configuration instructions to configuration module <b>26</b>. In some examples, translation module <b>28</b> may receive one intent corresponding to a high-level configuration and translate the high-level configuration to a set of low-level configurations, each low-level configuration corresponding to a respective element of elements <b>14</b>. In some examples, translation module <b>28</b> may receive an intent corresponding to one of elements <b>14</b>, and translate the intent to a low-level configuration corresponding to the respective element.</p><p id="p-0050" num="0049">After receiving the low-level configuration instructions from translation module <b>28</b>, configuration module <b>26</b> sends the low-level configuration instructions to respective managed network devices (e.g., elements <b>14</b>) for which configuration is to be updated via network interface module <b>32</b>. Network interface module <b>32</b> passes the low-level configuration instructions to network interface <b>34</b>. Network interface <b>34</b> forwards the low-level configuration instructions to the respective network devices.</p><p id="p-0051" num="0050">When management module <b>24</b> sends low-level configuration instructions to elements <b>14</b>, these low-level configuration instructions may cause the respective elements to make configuration changes. These configuration changes are not out-of-band configuration changes, because the configuration changes are implemented in response to the elements <b>14</b> receiving low-level configuration instructions from controller device <b>10</b>. When one of elements <b>14</b> implements a configuration change based on instructions received from a source other than controller device <b>10</b>, the configuration change may represent an out-of-band configuration change. Out-of-band configuration changes may, in some cases, be incompatible with the high-level intent received by controller device <b>10</b>. For example, controller device <b>10</b> pushes low-level configuration instructions to elements <b>10</b> in order to implement the high-level intent received by controller device <b>10</b>. Out-of-band configuration changes that depart from the low-level configuration instructions may interfere with the low-level configuration instructions and render the high-level intent invalid. It may be beneficial for controller <b>10</b> to detect out-of-band configuration changes and determine whether these out-of-band configuration changes invalidate the high-level intent.</p><p id="p-0052" num="0051">Although user interface <b>36</b> is described for purposes of example as allowing administrator <b>12</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) to interact with controller device <b>10</b>, it should be understood that other interfaces may be used in other examples. For example, controller device <b>10</b> may include a representational state transfer (REST) client (not shown) that may act as an interface to another device, by which administrator <b>12</b> may configure controller device <b>10</b>. Likewise, administrator <b>12</b> may configure elements <b>14</b> by interacting with controller device <b>10</b> through the REST client.</p><p id="p-0053" num="0052">Controller device <b>10</b> further stores data representing resources provided by elements <b>14</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) in configuration database <b>46</b>. The resources may include, for example, network services, hardware and/or software units, and tables of elements <b>14</b>. Thus, the resources may include, for example, network tunnels (such as label switched paths (LSPs)), virtual private networks (VPNs), virtual routing and forwarding (VRF) tables, hardware interfaces, logical interfaces, or the like. Controller device <b>10</b> may be configured with a playbook, which administrator <b>12</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) can use to program the various resources. The playbook may contain a set of resource definitions, resource discovery rules, and a resource merge strategy.</p><p id="p-0054" num="0053">In some examples, management module <b>24</b> is configured to receive a high-level intent file corresponding to an intended configuration for one or more elements of elements <b>14</b>. The high-level intent file may indicate a high-level intended configuration. As used herein, the terms &#x201c;high-level configuration&#x201d; and &#x201c;intended configuration&#x201d; refer to a configuration which can be programmed and/or altered by a user. A &#x201c;low-level configuration&#x201d; may refer to a configuration that a network device such as one of elements <b>14</b> is configured to process and implement. Translation module may translate, using the translation functions <b>44</b>, the high-level configuration to one or more low-level configurations, wherein each low-level configuration of the one or more low-level configurations corresponds to an element of elements <b>14</b>. Translation module <b>28</b> may send the one or more low-level configurations to configuration module <b>26</b>.</p><p id="p-0055" num="0054">Translation module <b>28</b> may generate, based on the high-level intent file, one or more flagged XPath operations for each low-level configuration of the one or more low-level configurations generated by translation module <b>28</b>. The below YANG extension may represent one or more XPaths flagged from a low-level configuration.</p><p id="p-0056" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="189pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>module example-extensions {</entry></row><row><entry/><entry>&#x2003;yang-version 1.1;</entry></row><row><entry/><entry>&#x2003;prefix &#x201c;csp&#x201d;;</entry></row><row><entry/><entry>&#x2003;...</entry></row><row><entry/><entry>&#x2003;extension watch {</entry></row><row><entry/><entry>&#x2003;&#x2002;description</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x201c;Takes as an argument a comma separate list of .</entry></row><row><entry/><entry>&#x2003;&#x2003;XPATHs to watch for out of band configuration</entry></row><row><entry/><entry>&#x2003;&#x2003;change from low level device model&#x201d;;</entry></row><row><entry/><entry>&#x2003;&#x2002;argument &#x201c;xpaths&#x201d;;</entry></row><row><entry/><entry>&#x2003;}</entry></row><row><entry/><entry>&#x2002;}</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0057" num="0055">This csp:watch extension will be used in the high level intent to represent a flagged XPATH/XPATHs from low level configuration Translation module <b>28</b> may store the one or more flagged XPath operations for each low-level configuration of the one or more low-level configurations in the flagged paths database <b>42</b> in memory <b>40</b>. Management module <b>24</b> may evaluate the flagged paths stored in the flagged paths database <b>42</b> to determine whether an out-of-band configuration change invalidates the high-level intent received by controller device <b>10</b>. XPath is a programming language which is configured to select nodes from an XML document. Consequently, the one or more identified XPath operations may indicate one or more nodes of element <b>14</b>A involved in the out-of-band configuration change. Controller <b>10</b> may determine whether the out-of-band configuration change to these one or more nodes invalidates the high-level configuration.</p><p id="p-0058" num="0056">In some examples, translation module <b>28</b> may extract information from the high-level intent to generate one or more flagged XPath operations for each low-level configuration generated by translation module <b>28</b>. For example, the high-level intent may include syntax representing a user selection of one or more flagged nodes for an element (e.g., element <b>14</b>A). Translation module <b>28</b> may generate, based on this syntax, one or more flagged XPaths which indicate the one or more flagged nodes. Example syntax from a YANG high-level intent is reproduced below.</p><p id="p-0059" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>container configuration {</entry></row><row><entry>&#x2003;list site_vlans {</entry></row><row><entry>&#x2003;&#x2003;description &#x201c;LAN side VLANs at a customer site&#x201d;;</entry></row><row><entry>&#x2003;&#x2003;key vlan_id;</entry></row><row><entry>&#x2003;&#x2003;csp:watch &#x201c;/configuration/vlans/vlan[vlan-id=current( )/vlan_id],</entry></row><row><entry>&#x2003;&#x2003;/configuration/interfaces/interface[name=irb]/unit/[name=current( )/vlan_id]/fa</entry></row><row><entry>&#x2003;mily/address/name&#x201d;</entry></row><row><entry>&#x2003;&#x2003;leaf vlan_id {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;type uintl6 {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;&#x2003;range &#x201c;1..4000&#x201d;;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;{</entry></row><row><entry>&#x2003;&#x2003;&#x2003;mandatory true;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;description &#x201c;VLAN id that uniquely identifies a LAN side VLAN.&#x201d;;</entry></row><row><entry>&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;leaf irb_ip_prefix {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;type inet:ip-prefix;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;mandatory true;</entry></row><row><entry>&#x2003;&#x2003;&#x2003;description &#x201c;IP prefix for the IRB interface assigned to this VLAN&#x201d;;</entry></row><row><entry>&#x2003;&#x2003;}</entry></row><row><entry>&#x2003;&#x2003;leaf-list lan_ports {</entry></row><row><entry>&#x2003;&#x2003;&#x2003;description &#x201c;LAN side interface that belongs to this VLAN&#x201d;;</entry></row><row><entry>&#x2003;&#x2003;}</entry></row><row><entry>}</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0060" num="0057">As seen in the above, the example high-level intent includes a &#x201c;csp:watch&#x201d; YANG extension which defines two paths. These paths include &#x201c;/configuration/vlans/vlan[vlan-id=current( )vlan_id]&#x201d; and &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name=current( )vlan_id]/family/address/name.&#x201d; The paths identified in the high-level intent may represent a user input of paths to watch for in out-of-band configuration changes. That is, when an out-of-band configuration change involves a path identified in the csp:watch extension, then the out-of-band configuration change may invalidate the high-level intent. The syntax &#x201c;current( )&#x201d; may represent an XPath function that selects a context of the node in a high level intent model where the csp:watch extension is defined. For example, the syntax &#x201c;current( )&#x201d; may select each individual element that is present in the list &#x201c;site_vlans.&#x201d; Accordingly, the syntax &#x201c;current( )&#x201d; and &#x201c;vlan_id&#x201d; may evaluate the value of the node &#x201c;vlan_id&#x201d; within each individual element of the list &#x201c;site_vlans.&#x201d; Each XPath defined within &#x201c;csp:watch&#x201d; may expand to multiple XPaths depending on the XPath function used and the context in which &#x201c;csp:watch&#x201d; extension is defined. For example, the context may include a YANG list of containers. XPath functions may include any of the standard XPath functions (e.g., &#x201c;concat( )&#x201d; and &#x201c;contains( )&#x201d;). Translation module <b>28</b> may generate flagged XPaths corresponding to the paths in the high-level intent. Translation module <b>28</b> may store the flagged XPaths in the flagged paths database <b>42</b> in the memory <b>40</b>. The example syntax from the YANG high-level intent may, in some cases, include syntax that is not shown above. For example, the YANG high-level intent may include one or more payloads, wherein each payload of the one or more payloads corresponds to one or more nodes of a configuration of a network device (e.g., one of elements <b>14</b>).</p><p id="p-0061" num="0058">In some examples, the high-level intent may flag paths on a granular basis. In one example, a csp:watch extension of a high-level intent may instruct the controller device <b>10</b> to watch for any change under the path &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name={{evaluated-value}}]&#x201d; in the low-level configuration. That is, translation module <b>28</b> may generate a flagged XPath which will cause controller device <b>10</b> to watch for configuration changes to any node falling within the path identified in the high-level intent. In another example, a csp:watch extension of a high-level intent may instruct the controller device <b>10</b> to watch for changes to the path &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name={{evaluated-value}}]/family/address/name&#x201d; in the low-level configuration. The syntax &#x201c;{{evaluated-value}}&#x201d; may represent a value that the XPath &#x201c;current( )vlan_id&#x201d; evaluates in the context of high-level intent model where csp:watch is defined. In some examples, the function &#x201c;contains( )&#x201d; is used, and the evaluated value may be preceded and followed with an asterisk (*), e.g., &#x201c;{{*evaluated-value*}},&#x201d; to indicate a wild-card match.</p><p id="p-0062" num="0059">Configuration module <b>26</b> may output the one or more low-level configurations to the respective one or more elements via network interface <b>34</b> and network interface module <b>32</b>. For example, translation module <b>28</b> may generate a set of low-level configurations, wherein each low-level configuration of the set-of low-level configurations corresponds to a respective one of element <b>14</b>A, element <b>14</b>B, element <b>14</b>C, element <b>14</b>D, element <b>14</b>E, element <b>14</b>F, and element <b>14</b>G. Configuration module <b>26</b> may output each low-level configuration of the of low-level configurations to the respective one of element <b>14</b>A, element <b>14</b>B, element <b>14</b>C, element <b>14</b>D, element <b>14</b>E, element <b>14</b>F, and element <b>14</b>G. Additionally, in some examples, Configuration module <b>26</b> may save the set of low-level configurations to configuration database <b>46</b>. Configuration module <b>26</b> may, in some examples, save the high-level intent to configuration database <b>46</b>. In some examples, the low-level configurations of elements <b>14</b> saved to the configuration database <b>46</b> may represent XML files. An example XML low-level configuration for a network device is reproduced below.</p><p id="p-0063" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="161pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2002;1</entry><entry>&#x3c;configuration&#x3e;</entry></row><row><entry/><entry>&#x2002;2</entry><entry>&#x2002;&#x3c;vlans&#x3e;</entry></row><row><entry/><entry>&#x2002;3</entry><entry>&#x2002;&#x2002;&#x3c;vlan&#x3e;</entry></row><row><entry/><entry>&#x2002;4</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;Eng&#x3c;/name&#x3e;</entry></row><row><entry/><entry>&#x2002;5</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;vlan-id&#x3e;100&#x3c;/vlan-id&#x3e;</entry></row><row><entry/><entry>&#x2002;6</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;13-interface&#x3e;irb.100&#x3c;/13-interface&#x3e;</entry></row><row><entry/><entry>&#x2002;7</entry><entry>&#x2002;&#x2002;&#x3c;/vlan&#x3e;</entry></row><row><entry/><entry>&#x2002;8</entry><entry>&#x2002;&#x2002;&#x3c;vlan&#x3e;</entry></row><row><entry/><entry>&#x2002;9</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;HR&#x3c;/name&#x3e;</entry></row><row><entry/><entry>10</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;vlan-id&#x3e;101&#x3c;/vlan-id&#x3e;</entry></row><row><entry/><entry>11</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;13-interface&#x3e;irb.101&#x3c;/13-interface&#x3e;</entry></row><row><entry/><entry>12</entry><entry>&#x2002;&#x2002;&#x3c;/vlan&#x3e;</entry></row><row><entry/><entry>13</entry><entry>&#x2002;&#x3c;/vlans&#x3e;</entry></row><row><entry/><entry>14</entry><entry>&#x2002;&#x3c;interfaces&#x3e;</entry></row><row><entry/><entry>15</entry><entry>&#x2002;&#x2002;&#x3c;interface&#x3e;</entry></row><row><entry/><entry>16</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;ge-0/0/10&#x3c;/name&#x3e;</entry></row><row><entry/><entry>17</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;unit&#x3e;</entry></row><row><entry/><entry>18</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;0&#x3c;/name&#x3e;</entry></row><row><entry/><entry>19</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;family&#x3e;</entry></row><row><entry/><entry>20</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;ethernet-switching&#x3e;</entry></row><row><entry/><entry>21</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;vlan&#x3e;</entry></row><row><entry/><entry>22</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;members&#x3e;100&#x3c;/members&#x3e;</entry></row><row><entry/><entry>23</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/vlan&#x3e;</entry></row><row><entry/><entry>24</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/ethernet-switching&#x3e;</entry></row><row><entry/><entry>25</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/family&#x3e;</entry></row><row><entry/><entry>26</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;/unit&#x3e;</entry></row><row><entry/><entry>27</entry><entry>&#x2002;&#x2002;&#x3c;/interface&#x3e;</entry></row><row><entry/><entry>28</entry><entry>&#x2002;&#x2002;&#x3c;interface&#x3e;</entry></row><row><entry/><entry>29</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;ge-0/0/11&#x3c;/name&#x3e;</entry></row><row><entry/><entry>30</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;unit&#x3e;</entry></row><row><entry/><entry>31</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;0&#x3c;/name&#x3e;</entry></row><row><entry/><entry>32</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;family&#x3e;</entry></row><row><entry/><entry>33</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;ethernet-switching&#x3e;</entry></row><row><entry/><entry>34</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;vlan&#x3e;</entry></row><row><entry/><entry>35</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;members&#x3e;101&#x3c;/members&#x3e;</entry></row><row><entry/><entry>36</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/vlan&#x3e;</entry></row><row><entry/><entry>37</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/ethernet-switching&#x3e;</entry></row><row><entry/><entry>38</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/family&#x3e;</entry></row><row><entry/><entry>39</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;/unit&#x3e;</entry></row><row><entry/><entry>40</entry><entry>&#x2002;&#x2002;&#x3c;/interface&#x3e;</entry></row><row><entry/><entry>41</entry><entry>&#x2002;&#x2002;&#x3c;interface&#x3e;</entry></row><row><entry/><entry>42</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;irb&#x3c;/name&#x3e;</entry></row><row><entry/><entry>43</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;unit&#x3e;</entry></row><row><entry/><entry>44</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;101&#x3c;/name&#x3e;</entry></row><row><entry/><entry>45</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;family&#x3e;</entry></row><row><entry/><entry>46</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;inet&#x3e;</entry></row><row><entry/><entry>47</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;address&#x3e;</entry></row><row><entry/><entry>48</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;name&#x3e;192.168.101.254/24&#x3c;/name&#x3e;</entry></row><row><entry/><entry>49</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/address&#x3e;</entry></row><row><entry/><entry>50</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/inet&#x3e;</entry></row><row><entry/><entry>51</entry><entry>&#x2002;&#x2002;&#x2002;&#x2002;&#x3c;/family&#x3e;</entry></row><row><entry/><entry>52</entry><entry>&#x2002;&#x2002;&#x2002;&#x3c;/unit&#x3e;</entry></row><row><entry/><entry>53</entry><entry>&#x2002;&#x2002;&#x3c;/interface&#x3e;</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0064" num="0060">The example XML low-level configuration defines a hierarchy of nodes. For example, the &#x201c;interface&#x201d; node in the example XML low-level configuration depends from the &#x201c;interfaces&#x201d; node, because the interface node is indented from the interfaces node in the example XML low-level configuration. One or more paths exist in the XML low-level configuration. For example, the path &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name=current( )/vlan_id]/family/address/name&#x201d; corresponds to the following path in the example XML low-level configuration.</p><p id="p-0065" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2002;1</entry><entry>&#x3c;configuration&#x3e;</entry></row><row><entry/><entry>14</entry><entry>&#x2003;&#x3c;interfaces&#x3e;</entry></row><row><entry/><entry>41</entry><entry>&#x2003;&#x2003;&#x3c;interface&#x3e;</entry></row><row><entry/><entry>42</entry><entry>&#x2003;&#x2003;&#x2003;&#x3c;name&#x3e;irb&#x3c;/name&#x3e;</entry></row><row><entry/><entry>43</entry><entry>&#x2003;&#x2003;&#x2003;&#x3c;unit&#x3e;</entry></row><row><entry/><entry>44</entry><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;name&#x3e;101&#x3c;/name&#x3e;</entry></row><row><entry/><entry>45</entry><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;family&#x3e;</entry></row><row><entry/><entry>47</entry><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;address&#x3e;</entry></row><row><entry/><entry>48</entry><entry>&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x2003;&#x3c;name&#x3e;192.168.101.254/24&#x3c;/name&#x3e;</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0066" num="0061">When the high-level intent instructs the controller device <b>10</b> to monitor the path &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name=current( )/vlan_id]/family/address/name&#x201d; in the configuration of element <b>14</b>A, the controller device <b>10</b> may generate an XPath operation in order to monitor the corresponding path in the XML file corresponding to the configuration of element <b>14</b>A.</p><p id="p-0067" num="0062">To generate one or more XPaths, the translation module <b>28</b> may process the high-level intent to identify one or more paths identified in the &#x201c;csp:watch&#x201d; extension. For example, translation module <b>28</b> may identify the &#x201c;/configuration/vlans/vlan[vlan-id=current( )/vlan_id]&#x201d; and &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name=current( )/vlan_id]/family/address/name&#x201d; paths identified in the csp:watch extension of the example YANG high-level intent. Translation module <b>28</b> may process the high-level intent and identify one or more payloads corresponding to the paths identified in the csp:watch extension. For example, the following example payload may correspond to the &#x201c;/configuration/vlans/vlan[vlan-id=current( )vlan_id]&#x201d; path.</p><p id="p-0068" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="182pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>{</entry></row><row><entry/><entry>&#x2003;&#x201c;site_vlans&#x201d; : [</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;vlan_id&#x201d; : 100,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;irb_ip_prefix : &#x201c;192.168.100.254/24&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;lan_ports&#x201d; : [&#x201c;ge-0/0/10&#x201d;, &#x201c;ge-0/0/11&#x201d;]</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;]</entry></row><row><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0069" num="0063">Translation module <b>28</b> may generate an XPath based on the identified path from the csp:watch extension and based on information in the identified payload from the high-level intent. For example, the identified path from the csp:watch extension includes the square bracket [vlan-id=current( )vlan_id], and the identified payload includes the value &#x201c;vlan_id&#x201d;: 100. Translation module <b>28</b> may generate the XPath &#x201c;/configuration/vlans/vlan[vlan-id=100]&#x201d; based on the identified path and the vlan id value from the payload. The XPaths within square brackets may be evaluated within the context of the node in high level intent model where the csp:watch extension is defined. Transaction module <b>28</b> may evaluate XPaths within square bracket, and generate the XPaths to watch for in the low-level configuration. In other words, translation module <b>28</b> may process a payload to extract information within square brackets of a path identified in the csp:watch extension. The current( )vlan_id request in the identified path corresponds to the value &#x201c;100&#x201d; for vlan_id in the payload. This may allow a developer to enter a path into the high-level intent even when the developer does not know an exact ID number of a node that the developer wishes to include in the path. Consequently, by automatically generating XPaths based the payloads of the high-level intent and the paths identified in the csp:watch extension, translation module <b>28</b> may monitor a validity of the high-level intent more effectively than controller devices that do not extract data from payloads to generate XPaths based on user selected paths.</p><p id="p-0070" num="0064">The translation module <b>28</b> is not limited to translating the high-level intent to low-level configuration instructions. In some examples, the translation module <b>28</b> may translate the high-level intent directly to command line interfaces (CLIs) for elements <b>14</b>. The translation module <b>28</b> may execute one or more translation templates (e.g., Jinja templates) to generate CLIs directly from the high-level intent. The translation module <b>28</b> may generate one or more flagged XPaths when the translation module <b>28</b> generates the CLIs from the high-level intent. In some examples, a translation template may represent a user-created Jinja file. The following example represents a translation template that translation module <b>28</b> is configured to execute in order to generate CLIs based on the high-level intent.</p><p id="p-0071" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>1 {% - for vlan in site_vlans %}</entry></row><row><entry>2 set interfaces irb unit {{vlan.vlan_id}} family inet address {{vtan.irb_ip_prefix}}</entry></row><row><entry>3 set vlans LAN - {{vlan.vlan_id}} vlan-id {{vlan.vtan_id}} 13-interface</entry></row><row><entry>irb.{{vlan.vlan_id}}</entry></row><row><entry>4</entry></row><row><entry>5&#x2003;{% - for lan_port in vlan.lan_ports %}</entry></row><row><entry>6&#x2003;set interfaces {{tan_port}} unit 0 family ethernet-switching interface-mode</entry></row><row><entry>7&#x2003;trunk vlan members LAN - {{vlan.vlan_id}}</entry></row><row><entry>8&#x2003;{% - endfor %}</entry></row><row><entry>9 {% - endfor %}</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0072" num="0065">In some examples, translation module <b>28</b> processes the high-level intent to identify one or more paths in a csp:watch extension of the high-level intent, but this is not required. In some examples translation module <b>28</b> receives a Jinja file defining one or more paths, and translation module <b>28</b> may generate one or more flagged XPaths based on the paths defined by the Jinja file. An example Jinja file defining one or more paths is reproduced below.</p><p id="p-0073" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="273pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>&#x2002;1 {%- for vlan in site_vlans %}</entry></row><row><entry>&#x2002;2 /configuration/vlans/vlan[vlan-id={{vlan.vlan_id}}]</entry></row><row><entry>&#x2002;3 /configuration/interfaces/interface[name=irb]/unit/[name={{vlan.vlan_id}}]</entry></row><row><entry>&#x2002;4 /configuration/interfaces/interface[name=irb]/unit/[name={{vlan.vlan_id}}]/family/address</entry></row><row><entry>/name</entry></row><row><entry>&#x2002;5</entry></row><row><entry>&#x2002;6&#x2003;{%- for lan_port in vlan.lan_ports %}</entry></row><row><entry>&#x2002;7&#x2003;/configuration/interfaces/interface[name={{lan_port}}]</entry></row><row><entry>&#x2002;8</entry></row><row><entry>&#x2003;/configuration/interfaces/interface[name={{lan_port}}]/unit[name=0]/family/ethernet</entry></row><row><entry>-switching/vlan/members</entry></row><row><entry>&#x2002;9&#x2003;{%- endfor %}</entry></row><row><entry>10&#x2003;{%- endfor %}</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0074" num="0066">As seen in the example Jinja file, the file identifies the paths &#x201c;/configuration/vlans/vlan[vlan-id={{vlan.vlan_id}}],&#x201d; &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name={{vlan.vlan_id}}],&#x201d; &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name={{vlan.vlan_id}}]/family/address/name,&#x201d; &#x201c;/configuration/interfaces/interface[name={{lan_port}}],&#x201d; and &#x201c;/configuration/interfaces/interface[name={{lan_port}}]/unit[name=0]/family/ethernet-switching/vlan/members.&#x201d; The paths include several square brackets such as &#x201c;[vlan-id={{vlan.vlan_id}}],&#x201d; &#x201c;[name={{vlan.vlan id}}],&#x201d; and &#x201c;[name={{lan_port}}].&#x201d; To generate XPaths based on the paths identified in the Jinja file, the translation module <b>28</b> is configured to identify one or more payloads in the high-level intent which include information requested in the square brackets of the paths identified in the Jinja file. For example, the translation module <b>28</b> may process the high-level intent to identify the following example payload.</p><p id="p-0075" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="182pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>{</entry></row><row><entry/><entry>&#x2003;&#x201c;site_vlans&#x201d; : [</entry></row><row><entry/><entry>&#x2003;&#x2003;{</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;vlan_id&#x201d; : 100,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;irb_ip_prefix&#x201d; : &#x201c;192.168.100.254/24&#x201d;,</entry></row><row><entry/><entry>&#x2003;&#x2003;&#x2003;&#x201c;lan_ports&#x201d; : [&#x201c;ge-0/0/10&#x201d;, &#x201c;ge-0/0/11&#x201d;]</entry></row><row><entry/><entry>&#x2003;&#x2003;}</entry></row><row><entry/><entry>&#x2003;]</entry></row><row><entry/><entry>}</entry></row><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0076" num="0067">Translation module <b>28</b> may generate, based on the one or more paths identified in the example Jinja file and based on the example payload from the high-level intent, one or more flagged XPaths. For example, translation module <b>28</b> may generate the XPath &#x201c;/configuration/interfaces/interface [name=irb]/unit/[name=100]/family/address/name&#x201d; corresponding to the path &#x201c;/configuration/interfaces/interface[name=irb]/unit/[name={{vlan.vlan_id}}]/family/address/name&#x201d; identified in the example Jinja file. Translation module <b>28</b> may replace the square bracket [name={{vlan.vlan_id}}] from the path identified in the example Jinja file with the square bracket [name=100] to generate the XPath, since the example payload includes the value &#x201c;vlan_id&#x201d;:100. Additionally, or alternatively, Translation module <b>28</b> may generate the XPaths &#x201c;/configuration/interfaces/interface[name=ge-0/0/10]/unit[name=0]/family/ethernet-switching/vlan/members&#x201d; and &#x201c;/configuration/interfaces/interface[name=ge-0/0/11]/unit[name=0]/family/ethernet-switching/vlan/members&#x201d; based on the path &#x201c;/configuration/interfaces/interface[name={{lan_port}}]/unit[name=0]/family/ethernet-switching/vlan/members&#x201d; identified by the example Jinja file. Since the example payload references two LAN ports (e.g., &#x201c;lan_ports&#x201d;:[&#x201c;ge-0/0/10&#x201d;, &#x201c;ge-0/0/11&#x201d;]), Translation module <b>28</b> may generate a flagged XPath corresponding to the LAN port &#x201c;ge-0/0/10&#x201d; and generate a flagged XPath corresponding to the LAN port &#x201c;ge-0/0/11&#x201d;. Translation module <b>28</b> may save the flagged XPaths to the flagged paths database <b>42</b> in the memory <b>42</b>.</p><p id="p-0077" num="0068">When configuration module <b>26</b> outputs a low-level configuration to one of elements <b>14</b>, configuration <b>26</b> may output the low-level configuration with a message including an identification tag. The identification tag may indicate that the low-level configuration is pushed from the controller device <b>10</b>. When the respective element of elements <b>14</b> receives the low-level configuration and the message, the element may output a return message to controller device <b>10</b>, where the return message includes the identification tag. The return message may indicate that the low-level configuration is implemented at the respective element of elements <b>14</b>, and the identification tag in the return message may confirm that the implemented configuration is pushed from the controller device <b>10</b>. In other words, the presence of the identification tag in the return message indicates that the low-level configuration implemented at the respective element of elements <b>14</b> does not represent an out-of-band configuration change, because the controller device <b>10</b> pushed the low-level configuration to the element.</p><p id="p-0078" num="0069">In some cases, configuration module <b>26</b> may receive, via network interface <b>34</b> and network interface module <b>32</b>, a message from one of elements <b>14</b> (e.g., element <b>14</b>A). The message may indicate a configuration change implemented at element <b>14</b>A, and the message may omit the identification tag that marks configuration changes pushed from the controller device <b>10</b>. When management module <b>24</b> receives the message from element <b>14</b>A omitting the identification tag, management module <b>24</b> may determine that the message indicates an out-of-band configuration change at element <b>14</b>A. That is, element <b>14</b>A might have implemented the configuration change based on a user input to element <b>14</b>A rather than implementing the configuration change based on receiving a low-level configuration from controller device <b>10</b>. Out-of-band configuration changes may, in some cases, invalidate a high-level intent received by controller device <b>10</b>. Consequently, it may be beneficial for controller device <b>10</b> to identify out-of-band configuration changes occurring at elements <b>14</b> and determine whether these out-of-band configuration changes invalidate the high-level configuration received by controller device <b>10</b>.</p><p id="p-0079" num="0070">When controller device <b>10</b> receives a message from element <b>14</b>A indicating an out-of-band configuration change at element <b>14</b>A, management module <b>24</b> may determine, based on a configuration of element <b>14</b>A stored in configuration database <b>46</b> and based on an actual configuration of the element <b>14</b>A whether the out-of-band configuration change invalidates the high-level intent received by controller device <b>10</b>. In some examples, to determine whether the out-of-band configuration change invalidates the high-level model, the management module <b>24</b> is configured to retrieve, from the configuration database <b>46</b>, information indicative of a stored network device configuration corresponding to element <b>14</b>A. In some examples, the information indicative of the stored network device configuration corresponding to element <b>14</b>A includes an XML, file representing a low-level configuration of element <b>14</b>A generated by translation module <b>28</b> based on a high-level intent file. In some examples, the information indicative of the stored network device configuration corresponding to element <b>14</b>A represents one or more CLIs generated by translation module <b>28</b> based on a high-level intent file. Additionally, the management module <b>24</b> is configured to retrieve, from the element <b>14</b>A, information indicative of an actual configuration of the element <b>14</b>A. In some examples, the information indicative of an actual configuration of the element <b>14</b>A represents an XML file.</p><p id="p-0080" num="0071">Configuration change analysis module <b>30</b> may determine a difference between the actual configuration of element <b>14</b>A and the stored network device configuration corresponding to element <b>14</b>A. The stored network device configuration corresponding to element <b>14</b>A may represent a low-level configuration that controller device <b>10</b> pushes to element <b>14</b>A prior to an out-of-band configuration change at element <b>14</b>A. The actual configuration of element <b>14</b>A may represent the configuration of element <b>14</b>A after element <b>14</b>A implements the out-of-band configuration change. Consequently, by determining the difference between the actual configuration of element <b>14</b>A and the stored network device configuration corresponding to element <b>14</b>A, the configuration change analysis module <b>30</b> may determine information corresponding to the out-of-band configuration change. In some examples, the information corresponding to the out-of-band configuration change may include one or more XPaths corresponding to the out-of-band configuration change. The one or more XPaths corresponding to the out-of-band configuration change may identify one or more nodes in the XML file corresponding to the configuration of element <b>14</b>A, wherein the nodes identified by the XPaths represent nodes that were updated in the out-of-band configuration change.</p><p id="p-0081" num="0072">Configuration change analysis module <b>30</b> may compare the one or more XPaths corresponding to the out-of-band configuration change with one or more flagged XPaths stored in the flagged paths database <b>42</b> corresponding to element <b>14</b>A. As described above, when translation module <b>28</b> translates the high-level intent, translation module <b>28</b> may generate one or more XPaths to check in the event that element <b>14</b>A implements an out-of-band configuration change. If at least one of the one or more XPaths corresponding to the out-of-band configuration change matches a flagged XPath corresponding to element <b>14</b>A, configuration change analysis module <b>30</b> may determine that the out-of-band configuration change invalidates the high-level intent. If none of the one or more XPaths corresponding to the out-of-band configuration change matches a flagged XPath corresponding to element <b>14</b>A, configuration change analysis module <b>30</b> may determine that the out-of-band configuration change does not invalidate the high-level intent.</p><p id="p-0082" num="0073">By generating one or more flagged XPaths for one or more managed elements <b>14</b>, controller device <b>10</b> may more effectively manage elements <b>14</b> as compared with controller devices that do not generate flagged XPaths. For example, the flagged XPaths allow controller device to evaluate a detected out-of-band configuration change to determine whether the out-of-band configuration change invalidates the high-level intent.</p><p id="p-0083" num="0074"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating an example operation for processing an intent to cause a device to implement a configuration, in accordance with one or more techniques of this disclosure. For convenience, <figref idref="DRAWINGS">FIG. <b>3</b></figref> is described with respect to controller device <b>10</b> and elements <b>14</b> of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>2</b></figref>. However, the techniques of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be performed by different components of controller device <b>10</b> and elements <b>14</b> or by additional or alternative devices.</p><p id="p-0084" num="0075">Translation module <b>28</b> may receive an intent (<b>302</b>). In some examples, translation module <b>28</b> may receive the intent via user interface <b>36</b> and user interface module <b>38</b>. The intent may represent a text file such as a YANG file. In some examples, configuration module <b>26</b> receives the intent and forwards the intent to translation module <b>28</b> with an instruction to process the intent. Translation module <b>28</b> may process the intent (<b>304</b>). In some examples, the intent represents a high-level intent. Translation module <b>28</b> may generate configuration information (<b>306</b>) for element <b>14</b>A. In some examples, translation module <b>28</b> may generate configuration information for any one or combination of elements <b>14</b> based on the intent. When the intent represents a high-level intent, translation module <b>28</b> may generate the configuration information by translating, based on translation functions <b>44</b>, the high-level intent to a low-level configuration corresponding to element <b>14</b>A. In some examples, translation module <b>28</b> may process the intent to generate one or more CLIs for configuring element <b>14</b>A without translating a high-level intent to low-level configurations.</p><p id="p-0085" num="0076">Translation module <b>28</b> may save the configuration information (<b>310</b>) to configuration database <b>46</b>. In some examples, translation module <b>28</b> may save configuration information corresponding to each of elements <b>14</b> that controller device <b>10</b> manages. That is, configuration database <b>46</b> may include the configuration information pushed to the elements <b>14</b> managed by controller device <b>10</b> so that controller device <b>10</b> may access the configuration information when analyzing out-of-band configurations.</p><p id="p-0086" num="0077">Additionally, translation module <b>28</b> may generate one or more flagged paths (<b>312</b>) based on generating the configuration information for entity <b>14</b>A. In some examples, the intent may include text indicating one or more paths representing user input of one or more paths for controller device <b>10</b> to check in response to detecting an out-of-band configuration. When the intent includes text indicating one or more paths, translation module <b>28</b> may generate one or more flagged XPaths based on the text and based on one or more payloads in the intent. In some examples, translation module <b>28</b> may receive a path template which indicates one or more paths representing user input of one or more paths for controller device <b>10</b> to check in response to detecting an out-of-band configuration. Translation module <b>28</b> may process the intent and the path template to generate the one or more flagged paths. Translation module <b>28</b> may store the flagged paths (<b>314</b>) to the flagged paths database <b>42</b>. That is, translation module <b>28</b> may store the flagged paths so that controller device <b>10</b> may access the flagged paths when analyzing out-of-band configurations.</p><p id="p-0087" num="0078">Configuration module <b>26</b> may receive the configuration info (<b>316</b>) from translation module <b>28</b>. Configuration module <b>26</b> may push the configuration info to element <b>14</b>A (<b>318</b>). In some examples, configuration module <b>26</b> may push the configuration information to element <b>14</b>A with a message including an identification tag that indicates the configuration information is pushed from controller device <b>10</b>. Element <b>14</b>A may receive the configuration info (<b>320</b>) and implement the configuration info (<b>322</b>). That is, element <b>14</b>A may perform a configuration change based on the configuration info. Element <b>14</b>A may send a message confirming the configuration change at element <b>14</b>A (<b>324</b>). In some examples, element <b>14</b>A may include the identification tag with the message. Configuration module <b>26</b> may receive the message (<b>326</b>). Configuration module <b>26</b> may determine that the configuration change is implemented (<b>328</b>) at element <b>14</b>A. In some examples, configuration module <b>26</b> may determine that the configuration change is not an out-of-band configuration change because the message from element <b>14</b>A to configuration module <b>26</b> includes the identification tag.</p><p id="p-0088" num="0079"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating an example operation for determining whether an out-of-band configuration change invalidates an intent, in accordance with one or more techniques of this disclosure. For convenience, <figref idref="DRAWINGS">FIG. <b>4</b></figref> is described with respect to controller device <b>10</b> and elements <b>14</b> of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>2</b></figref>. However, the techniques of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be performed by different components of controller device <b>10</b> and elements <b>14</b> or by additional or alternative devices.</p><p id="p-0089" num="0080">Element <b>14</b>A may receive an instruction to implement a configuration change (<b>402</b>). Element <b>14</b>A may implement the configuration change (<b>404</b>) based on receiving the instructions. In some examples, the configuration change represents an out-of-band configuration change because the configuration change is based on instructions element <b>14</b>A receives from a device other than controller device <b>10</b> or receives via a user input to element <b>14</b>A. That is, the configuration change is not based on an intent received by controller device <b>10</b>. Element <b>14</b>A may send a message indicating the configuration change (<b>406</b>). In some examples, element <b>14</b> a may omit an identification tag from the message, where the identification tag indicates configuration changes that element <b>14</b>A implements based on instructions from controller device <b>10</b>. Since the configuration change is an out-of-band configuration change, element <b>14</b>A may omit the identification tag from the message.</p><p id="p-0090" num="0081">Configuration module <b>26</b> may receive the message (<b>408</b>). Configuration module <b>26</b> may identify the configuration change as an out-of-band configuration change (<b>410</b>) based on the message omitting the identification tag. Based on configuration module <b>26</b> identifying an out-of-band configuration change at element <b>14</b>A, configuration change analysis module <b>30</b> may retrieve a saved configuration from configuration database <b>46</b>. The saved configuration may represent configuration information implemented by entity <b>14</b>A prior to the out-of-band configuration change. Additionally, configuration change analysis module <b>30</b> may output a message requesting an actual configuration (<b>414</b>) of element <b>14</b>A. element <b>14</b>A may receive the message (<b>416</b>) and output the actual configuration (<b>418</b>) of element <b>14</b>A. In some examples, both of the stored configuration and the actual configuration of element <b>14</b>A represent XML files. Configuration change analysis module <b>30</b> may receive the actual configuration (<b>420</b>). Configuration change analysis module <b>30</b> may determine a difference between the stored configuration and the actual configuration in order to identify one or more paths associated with the out-of-band configuration change (<b>422</b>). When the stored configuration and the actual configuration of element <b>14</b>A represent XML files, configuration change analysis module <b>30</b> may generate one or more XPaths associated with the out-of-band configuration change, where each XPath of the one or more XPaths identifies one or more nodes of the configuration of element <b>14</b>A involved in the configuration change.</p><p id="p-0091" num="0082">Configuration change analysis module <b>30</b> may compare the one or more paths associated with the out-of-band configuration change with one or more flagged paths stored in the flagged paths database <b>42</b>. In some examples, the controller device <b>10</b> generates the one or more flagged paths when generating configuration information for element <b>14</b>A. Configuration change analysis module <b>30</b> may determine whether the out-of-band configuration change invalidates the intent based on whether one or more of the paths associated with the out-of-band configuration change matches a flagged path corresponding to element <b>14</b>A.</p><p id="p-0092" num="0083">The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combination of such components. The term &#x201c;processor&#x201d; or &#x201c;processing circuitry&#x201d; may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.</p><p id="p-0093" num="0084">Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.</p><p id="p-0094" num="0085">The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer-readable media may include non-transitory computer-readable storage media and transient communication media. Computer readable storage media, which is tangible and non-transitory, may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer-readable storage media. The term &#x201c;computer-readable storage media&#x201d; refers to physical storage media, and not signals, carrier waves, or other transient media.</p><p id="p-0095" num="0086">Various examples have been described. These and other examples are within the scope of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A controller device that manages a set of network devices, the controller device comprising:<claim-text>a memory comprising data for a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of the set of network devices; and</claim-text><claim-text>processing circuitry configured to:<claim-text>receive an intent file corresponding to an intended configuration for the set of network devices;</claim-text><claim-text>receive a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and</claim-text><claim-text>determine, based on one of the stored network device configurations corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The controller device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein to determine whether the high-level intent is compatible with the out-of-band configuration change, the processing circuitry is configured to:<claim-text>output, to the network device of the set of network devices, a message requesting the actual configuration of the network device;</claim-text><claim-text>receive, from the network device, information indicative of the actual configuration of the network device;</claim-text><claim-text>retrieve, from the memory, the stored network device configuration corresponding to the network device;</claim-text><claim-text>determine a difference between the actual configuration of the network device and the stored network device configuration; and</claim-text><claim-text>determine, based on the difference, whether the intent file is compatible with the out-of-band configuration change.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The controller device of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the processing circuitry is further configured to:<claim-text>generate, based on the intent file, one or more flagged XML Path Language (XPath) operations representing XPath operations to check for in out-of-band configuration changes; and</claim-text><claim-text>store the one or more flagged XPath operations in the memory; and</claim-text><claim-text>determine whether the intent file is compatible with the out-of-band configuration change based on the one or more flagged XPath operations and based on the difference between the actual configuration of the network device and the stored network device configuration.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The controller device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the processing circuitry is further configured to:<claim-text>receive the intent file via a user interface, wherein the intent file includes user input defining the one or more flagged XPath operations; and</claim-text><claim-text>generate the one or more flagged XPath operations based on the user input.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The controller device of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein to generate the one or more flagged XPath operations based on the user input, the processing circuitry is configured to extract, from a schema of the intent file, the one or more flagged XPath operations, wherein the processing circuitry is configured to determine one or more paths identified in the schema.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The controller device of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein to determine whether the intent file is compatible with the out-of-band configuration change, the processing circuitry is configured to:<claim-text>identify, based on the difference between the actual configuration of the network device and the stored network device configuration, one or more XPath operations associated with the out-of-band configuration change; and</claim-text><claim-text>determine whether any of the one or more flagged XPath operations match any of the one or more XPath operations associated with the out-of-band configuration change.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The controller device of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the processing circuitry is configured to determine that the intent file is not compatible with the out-of-band configuration change based on at least one of the one or more flagged XPath operations matching at least one of the one or more XPath operations are associated with the out-of-band configuration change.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The controller device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the intent file represents a high-level intent, and wherein the processing circuitry is further configured to:<claim-text>translate the high-level intent to a low-level configuration for the network device of the set of network devices;</claim-text><claim-text>output the low-level configuration to the network device with a first message including an identification tag indicating that the low-level configuration is pushed from the controller device; and</claim-text><claim-text>receive, from the network device, a second message indicating that the configuration is implemented on the network device, wherein the second message includes the identification tag.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The controller device of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the processing circuitry is further configured to:<claim-text>receive a third message from the network device, wherein the third message omits an identification tag indicating that the configuration change is pushed from the controller device; and</claim-text><claim-text>determine, based on the third message omitting the identification tag indicating that the configuration change is pushed from the controller device, that the third message indicates the out-of-band configuration change at the network device.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The controller device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the intent file represents a Yet Another Next Generation (YANG) file.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method comprising:<claim-text>maintaining, by processing circuitry of a controller device and in a memory of the controller device, data for a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of a set of network devices managed by the controller device;</claim-text><claim-text>receiving, by the processing circuitry, an intent file corresponding to an intended configuration for the set of network devices;</claim-text><claim-text>receiving, by the processing circuitry, a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and</claim-text><claim-text>determining, by the processing circuitry based on one of the stored network device configurations corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change.</claim-text><claim-text>wherein a memory of the controller device comprises.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein determining whether the high-level intent is compatible with the out-of-band configuration change comprises:<claim-text>outputting, to the network device of the set of network devices, a message requesting the actual configuration of the network device;</claim-text><claim-text>receiving, from the network device, information indicative of the actual configuration of the network device;</claim-text><claim-text>retrieving, from the memory, the stored network device configuration corresponding to the network device;</claim-text><claim-text>determining a difference between the actual configuration of the network device and the stored network device configuration; and</claim-text><claim-text>determining, based on the difference, whether the intent file is compatible with the out-of-band configuration change.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, further comprising:<claim-text>generating, by the processing circuitry based on the intent file, one or more flagged XML Path Language (XPath) operations representing XPath operations to check for in out-of-band configuration changes; and</claim-text><claim-text>storing, by the processing circuitry, the one or more flagged XPath operations in the memory; and</claim-text><claim-text>determining, by the processing circuitry, whether the intent file is compatible with the out-of-band configuration change based on the one or more flagged XPath operations and based on the difference between the actual configuration of the network device and the stored network device configuration.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>receiving, by the processing circuitry, the intent file via a user interface, wherein the intent file includes user input defining the one or more flagged XPath operations; and</claim-text><claim-text>generating, by the processing circuitry, the one or more flagged XPath operations based on the user input.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein generating the one or more flagged XPath operations based on the user input comprises:<claim-text>extracting, by the processing circuitry from a schema of the intent file, the one or more flagged XPath operations; and</claim-text><claim-text>determining, by the processing circuitry, one or more paths identified in the schema.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein determining whether the intent file is compatible with the out-of-band configuration change, the processing circuitry is configured to:<claim-text>identify, based on the difference between the actual configuration of the network device and the stored network device configuration, one or more XPath operations associated with the out-of-band configuration change; and</claim-text><claim-text>determine whether any of the one or more flagged XPath operations match any of the one or more XPath operations associated with the out-of-band configuration change.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising determining, by the processing circuitry, that the intent file is not compatible with the out-of-band configuration change based on at least one of the one or more flagged XPath operations matching at least one of the one or more XPath operations are associated with the out-of-band configuration change.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the intent file represents a high-level intent, and wherein the method further comprises:<claim-text>translating, by the processing circuitry, the high-level intent to a low-level configuration for the network device of the set of network devices;</claim-text><claim-text>outputting, by the processing circuitry, the low-level configuration to the network device with a first message including an identification tag indicating that the low-level configuration is pushed from the controller device; and</claim-text><claim-text>receiving, by the processing circuitry from the network device, a second message indicating that the configuration is implemented on the network device, wherein the second message includes the identification tag.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, further comprising:<claim-text>receiving, by the processing circuitry, a third message from the network device, wherein the third message omits an identification tag indicating that the configuration change is pushed from the controller device; and</claim-text><claim-text>determining, by the processing circuitry based on the third message omitting the identification tag indicating that the configuration change is pushed from the controller device, that the third message indicates the out-of-band configuration change at the network device.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A system comprising:<claim-text>a set of network devices; and</claim-text><claim-text>a controller device that manages the set of network devices, the controller device comprising:<claim-text>a memory comprising data for a configuration database including a set of stored network device configurations, wherein each stored network device configuration of the set of stored network device configurations corresponds to a network device of the set of network devices; and</claim-text><claim-text>processing circuitry configured to:<claim-text>receive an intent file corresponding to an intended configuration for the set of network devices;</claim-text><claim-text>receive a message from a network device of the set of network devices indicating an out-of-band configuration change at the network device; and</claim-text><claim-text>determine, based on one of the stored network device configurations corresponding to the network device and an actual configuration of the network device, whether the intent file is compatible with the out-of-band configuration change.</claim-text></claim-text></claim-text></claim-text></claim></claims></us-patent-application>