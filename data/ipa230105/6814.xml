<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006815A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006815</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17676678</doc-number><date>20220221</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>088</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHOD AND APPARATUS FOR SECURE PRIVATE KEY STORAGE ON IOT DEVICE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16917583</doc-number><date>20200630</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11258602</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17676678</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16888815</doc-number><date>20200531</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10817590</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16917583</doc-number></document-id></child-doc></relation></continuation-in-part><us-provisional-application><document-id><country>US</country><doc-number>62981996</doc-number><date>20200226</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Amera IoT Inc.</orgname><address><city>Addison</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Daly</last-name><first-name>Christopher J.</first-name><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An apparatus is disclosed for storing a private key on an IoT device for encrypted communication with an external user device and includes a proximity-based communication interface, encryption circuitry and IoT functional circuitry. The encryption circuitry includes a memory having a dedicated memory location allocated for storage of encryption keys utilized in the encrypting/decrypting operations, an encryption engine for performing the encryption/decryption operation with at least one of the stored encryption keys in association with the operation of the IoT functional circuitry, an input/output interface for interfacing with the proximity-based communication interface to allow information to be exchanged with a user device in a dedicated private key transfer operation, an internal system interface for interfacing with the IoT functional circuitry for transfer of information therebetween, memory control circuitry for controlling storage of a received private key from the input/output interface for storage in the dedicated memory location in the memory, in a Write-only memory storage operation relative to the private key received from the input/output interface over the proximity-based communication interface, the memory control circuitry inhibiting any Read operation of the dedicated memory location in the memory through the input/output interface. The IoT functional circuitry includes a controller for controlling the operation of the input/output interface and the memory control circuitry in a private key transfer operation to interface with the external user device to control the encryption circuitry for transfer of a private key from the user device through the proximity-based communication interface for storage in the dedicated memory location in the memory, the controller interfacing with the encryption circuitry via the internal system interface, and operational circuitry for interfacing with the user device over a peer to peer communication link and encrypting/decrypting information therebetween with the encryption engine in the encryption circuitry.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="78.40mm" wi="97.28mm" file="US20230006815A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="230.21mm" wi="152.74mm" file="US20230006815A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="225.72mm" wi="141.48mm" orientation="landscape" file="US20230006815A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="179.15mm" wi="95.17mm" file="US20230006815A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="236.22mm" wi="150.62mm" file="US20230006815A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="131.66mm" wi="111.59mm" file="US20230006815A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.86mm" wi="154.60mm" file="US20230006815A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="223.27mm" wi="156.21mm" file="US20230006815A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="218.19mm" wi="154.52mm" file="US20230006815A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="190.42mm" wi="154.18mm" file="US20230006815A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="239.61mm" wi="155.45mm" file="US20230006815A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="239.61mm" wi="157.65mm" orientation="landscape" file="US20230006815A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="237.57mm" wi="156.04mm" orientation="landscape" file="US20230006815A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="233.93mm" wi="155.70mm" orientation="landscape" file="US20230006815A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="237.66mm" wi="156.38mm" orientation="landscape" file="US20230006815A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="194.56mm" wi="151.89mm" file="US20230006815A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="230.12mm" wi="153.08mm" file="US20230006815A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="171.45mm" wi="149.94mm" orientation="landscape" file="US20230006815A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="232.24mm" wi="158.50mm" file="US20230006815A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="229.28mm" wi="152.57mm" file="US20230006815A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="238.59mm" wi="157.73mm" file="US20230006815A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="223.69mm" wi="154.52mm" file="US20230006815A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="133.86mm" wi="138.60mm" file="US20230006815A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="198.12mm" wi="113.79mm" orientation="landscape" file="US20230006815A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="236.14mm" wi="153.08mm" file="US20230006815A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="229.36mm" wi="152.48mm" file="US20230006815A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="164.93mm" wi="93.30mm" file="US20230006815A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="194.06mm" wi="105.24mm" file="US20230006815A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="233.09mm" wi="140.72mm" orientation="landscape" file="US20230006815A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="108.88mm" wi="91.36mm" file="US20230006815A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="232.07mm" wi="97.11mm" file="US20230006815A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="230.89mm" wi="132.76mm" orientation="landscape" file="US20230006815A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="231.99mm" wi="132.08mm" orientation="landscape" file="US20230006815A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="238.84mm" wi="156.29mm" orientation="landscape" file="US20230006815A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="225.13mm" wi="74.93mm" file="US20230006815A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 16/917,583, filed on Jun. 30, 2020, entitled METHOD AND APPARATUS FOR SECURE PRIVATE KEY STORE ON IOT DEVICE, issued as U.S. Pat. No. 11,258,602 on Feb. 22, 2022 (Atty. Dkt. No. AMRT60-34952), which is a continuation-in-part of U.S. patent application Ser. No. 16/888,815, filed on May 31, 2020, entitled METHOD AND APPARATUS FOR CREATING AND USING QUANTUM RESISTANT KEYS, issued as U.S. Pat. No. 10,817,590 on Oct. 27, 2020, (Atty. Dkt. No. AMRT60-34906), which claims benefit to U.S. Provisional Application No. 62/981,996, filed on Feb. 26, 2020, entitled TECHNIQUES FOR GENERATING QUANTUM RESISTANT KEYS (Atty. Dkt. No. AMRT60-34905), the specifications of which are incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This disclosure relates to the field of cryptography. In particular, this disclosure relates to techniques for providing end-to-end cryptographic security including key generation, sharing, and use.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">It has long been desirable to secure confidential communications so as to prevent unintended interception of information contained in those communications. One method of providing such confidentiality is the use of end-to-end encryption. End-to-end encryption can be achieved using ciphers, or keys. Ciphers are generally categorized as symmetric or asymmetric. Symmetric ciphers use a single key possessed by both parties to a communication. The same key is used both to encrypt and decrypt the communication. In order to ensure confidentiality, the parties must use a secure channel to share the key, as anyone who has access to the key is able to freely decrypt or encrypt communications using that key. Asymmetric ciphers use a pair of related keys. Each party to a secure communication possesses one of the pair of keys. One party uses their key, known as a private key, to generate a second key, known as a public key. This party provides their public key to the second party to the communication. The second party is able to encrypt data with the public key, and, ideally, only the owner of the private key is able to decrypt those communications. Accordingly, the owner of the private key does not need to be concerned about who has access to the public key, and it can be provided to the second party &#x201c;in the clear,&#x201d; that is, over public channels where it may be overheard or intercepted.</p><p id="p-0005" num="0004">Asymmetric cipher encryption and decryption is computationally more complex than symmetric cipher encryption and decryption. This is a tradeoff for the ability to easily and conveniently set up a confidential communication channel using an asymmetric cipher without needing to worry about unintended third parties ever obtaining the private key, and without needing an initial secure channel to communicate the key to intended second parties. This computational overhead makes asymmetric ciphers undesirable for communication of large amounts of data. Furthermore, a major concern with any given cipher is its robustness against attack, and in particular against brute force attacks. Some current asymmetric ciphers, such as Rivest-Shamir-Adleman (RSA) or Diffie-Hellman (DH) ciphers, are potentially unsafe in a post-quantum computing world.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">The present invention disclosed and claimed herein, in one aspect thereof, an apparatus for storing a private key on an Internet of Things (IoT) device for encrypted communication with an external user device having the same private key and includes a proximity-based communication interface, encryption circuitry and IoT functional circuitry. The encryption circuitry includes a memory having a dedicated memory location allocated for storage of encryption keys, an encryption engine, an input/output interface for interfacing with the proximity-based communication interface to allow information to be exchanged with the external user device in a dedicated private key transfer operation, an internal system interface for interfacing with the IoT functional circuitry, memory control circuitry controlling storage of a received private key from the input/output interface for storage in the dedicated memory location in the memory, in a Write-only memory storage operation, the memory control circuitry inhibiting any Read operation of the dedicated memory location through the input/output interface. The IoT functional circuitry includes a controller for controlling the input/output interface and the memory control circuitry in a private key transfer operation to interface with the external user device to control the encryption circuitry for transfer of a private key from the user device through the proximity-based communication interface, the controller interfacing with the encryption circuitry via the internal system interface, and operational circuitry for interfacing with the user device over a peer to peer communication link and encrypting/decrypting information therebetween with the encryption engine in the encryption circuitry.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006">For a more complete understanding, reference is now made to the following description taken in conjunction with the accompanying drawings in which:</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a system for generating a private key and storing on an Internet of Things (IoT) device;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> illustrates a flowchart for a method of distilling entropy from a photograph and generating a private key;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> illustrates a flowchart for processing of the harvesting operation;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> illustrates a diagram of a pixel access plan;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a flowchart for the harvesting operation;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a flowchart for the selection of a harvest process;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a flowchart for generating host factors for multiple members of a common group;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a flowchart for generating multiple host factors for a single user such that a user can distill multiple keys from a single photograph or image; and</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a sequence diagram for communication between the user device, an IoT device and a host.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>8</b>A, <b>8</b>B and <b>8</b>C</figref> illustrate a sequence diagram for a user registration sequence;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a sequence diagram for a group creation sequence;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a sequence diagram for an invite group members sequence;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates a diagrammatic view for the operations of <figref idref="DRAWINGS">FIGS. <b>8</b>A</figref>, B and C-<b>10</b>;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a sequence diagram for the device bonding;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a diagrammatic view for the operation of <figref idref="DRAWINGS">FIG. <b>12</b></figref>;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. <b>14</b>A and <b>14</b>B</figref> illustrate a sequence diagram for managing user entitlements on a device;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a diagrammatic view of the operation of <figref idref="DRAWINGS">FIGS. <b>14</b>A-B</figref>;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIGS. <b>16</b>A and <b>16</b>B</figref> illustrate a sequence diagram for authenticating a user on a device;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates a diagrammatic view of the operation of <figref idref="DRAWINGS">FIGS. <b>16</b>A-B</figref>;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. <b>18</b>A and <b>18</b>B</figref> illustrate a sequence diagram for authenticating a user via direct access the device the:</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates a diagrammatic view of the operation of <figref idref="DRAWINGS">FIGS. <b>18</b>A-B</figref>;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates a block diagram of the user device and of the IoT;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. <b>21</b>A and <b>21</b>B</figref> illustrate a block diagram of encryption engine chip;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>22</b></figref> illustrates a flowchart for the user initiated bonding operation via depressing a button;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates a flowchart from the perspective of the user for logging into the application and retrieving configuration information for the IoT;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates a diagrammatic view of displaying panel configuration information to the user;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>25</b></figref> illustrates a flowchart continuing from the operation from <figref idref="DRAWINGS">FIG. <b>23</b></figref>;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>26</b></figref> illustrates a flowchart from the perspective of the device for processing the bonding operation;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>27</b>A</figref> illustrates a sequence diagram for the device bonding for a specific user similar to the sequence diagram of <figref idref="DRAWINGS">FIG. <b>12</b></figref>;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>27</b>B</figref> illustrates a sequence diagram for the device bonding for a specific user similar to the sequence diagram of <figref idref="DRAWINGS">FIG. <b>12</b></figref>;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>28</b></figref> illustrates a diagrammatic view for the operation of <figref idref="DRAWINGS">FIG. <b>27</b></figref> for a specific user similar to the diagrammatic view of <figref idref="DRAWINGS">FIG. <b>13</b></figref>;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates a flowchart for the overall configuration operation of the IoT device for encrypted and non-encrypted interface with a user;</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0040" num="0039">Referring now to the drawings, wherein like reference numbers are used herein to designate like elements throughout, the various views and embodiments of techniques for generating quantum resistant keys are illustrated and described, and other possible embodiments are described. The figures are not necessarily drawn to scale, and in some instances the drawings have been exaggerated and/or simplified in places for illustrative purposes only. One of ordinary skill in the art will appreciate the many possible applications and variations based on the following examples of possible embodiments.</p><p id="p-0041" num="0040">Embodiments of the present disclosure contemplate that both parties to a confidential communication using symmetric ciphers must possess the same cryptographic quality key, while preventing any third parties from obtaining that key. For &#x201c;offline&#x201d; threats, such as securing data at rest or recorded traffic (i.e., securing information that is static rather than real time, which allows a malicious third party as much time as they need to decrypt the cipher), use of a true random number generator (TRNG) for key generation is the most secure option. With a truly random key, a human or algorithm can gain no significant advantage over brute force guessing of the key, as there are no discernable patterns that can be exploited to gain such an advantage.</p><p id="p-0042" num="0041">A TRNG leverages physical events such as atmospheric noise, atomic decay, or shot noise to seed the random number generator (RNG). Some computing devices that are unable to leverage physical events instead leverage operating system entropy from interrupts, mouse movements, or the like to seed the RNG. Although this approach is weaker than one using physical events, in some cases it can be strong enough to provide an acceptable quality cryptographic key. However, smaller computing devices such as IoT devices do not have enough operating system entropy to make even this approach viable. Accordingly, the present disclosure contemplates the generation of cryptographic quality keys for communications with IoT devices.</p><p id="p-0043" num="0042">Embodiments of the present disclosure further contemplate the need for securely and confidentially distributing a symmetric cipher key between parties. One secure method is quasi-physical distribution. A more flexible method is use of an asymmetric cipher to encrypt a symmetric cipher key for transmission to a second party. Many asymmetric ciphers, however, are not quantum safe (i.e., safe from brute force attacks by a quantum computer). Moreover, the use of an asymmetric cipher to establish a secure channel is predicated on the ability of both parties to produce a high quality asymmetric cipher key. As discussed above, some devices, such as IoT devices, lack access to enough entropy to generate a high quality key for use with an initial asymmetric cipher exchange. Accordingly, there is a need for a system for secure key exchange with an IoT device. Existing practice for an IoT device is to embed a cryptographic key, which is provisioned during manufacture to both a chip and a server. By definition, such keys are known by the manufacturer and are not private to the using parties.</p><p id="p-0044" num="0043">Embodiments of the present disclosure additionally contemplate that IoT devices are often placed in an environment where they are not physically secure. As a result, it should be assumed that malicious actors will be able to gain physical access to the devices, and will be able to obtain copies of any static data storage, desolder and probe chips, and conduct various other attacks on the devices. Furthermore, user devices often communicate with the IoT devices through a cloud host (or cloud server), and device vendors or the cloud host may be able to access data stored on the cloud host. Accordingly, there is a need for &#x201c;zero knowledge&#x201d; encryption of stored data on the device (i.e., encryption that does not allow service providers or others with physical access to the device to access data).</p><p id="p-0045" num="0044">To meet the above needs, embodiments of the present disclosure include harvesting high quality entropy data from, in a disclosed embodiment, an image using a user chosen numerical sequence (e.g., a personal identification number (PIN)) and an external factor to parameterize the harvesting of the entropy. It should be understood that the disclosed embodiment utilizing an &#x201c;image&#x201d; refers to a photograph that is digitized to provide a dataset that can be considered &#x201c;ordered&#x201d; by the fact that it is not completely random as it has a bias that is imparted thereto by the external environment from which the image or photograph was derived. For example, if the image was created with purely random pixels with random RGB values, it would not be considered ordered. Typical photographs, on the other hand, will have certain portions that are associated with a sky, for example, and have relatively similar pixel values adjacent to each other in that particular area of the image. Thus, they have a certain level of order inherent in the associated pixel dataset.</p><p id="p-0046" num="0045">It should also be understood that this &#x201c;dataset&#x201d; can be represented by any fixed dataset that can be stored and retrieved at a later time. Thus, the dataset is not limited to an image and it can be any &#x201c;fixed&#x201d; dataset. Fixed datasets can be such datasets that are used, for example, in machine learning. There are various datasets that are implemented for such. For example, image data in the form of facial recognition, action recognition, object detection and recognition, handwriting and character recognition, and aerial images could be utilized. Text data in the form of reviews, news articles, messages, Twitter and tweets, dialogue and other text can be utilized as a database. Sound data in the form of speech, music, etc. can also be used. Signal data in the form of electrical signals, motion-tracking signals, etc. can be used. Datasets can be extracted from physical data such as, high energy physics, various physical systems, astronomy, or sciences and other physical environments. Biological data could be utilized to create datasets, such as datasets relating to humans, animals, plants, microbes and drug discovery. Additionally, multivariate data forms of financial data, weather data, census data, transit data, Internet data and games could be used to create datasets. These various datasets are stored and made available to various companies for machine learning. All of these datasets have entropy associated there with and any of these datasets when used in conjunction with the user PIN can yield a resulting entropy that can be harvested as harvested entropy, i.e., a subset of the resulting user PIN/dataset entropy.</p><p id="p-0047" num="0046">Embodiments associated with the disclosed embodiment also include imprinting the harvested entropy into IoT devices as keys for use as a long-term secret. Embodiments additionally include leveraging the imprinted keys as a shared secret for end-to-end encryption with zero knowledge at the host for both commands and data. Embodiments further include creation of keys at a host for use as a shared secret for communications between the host, applications, and devices.</p><p id="p-0048" num="0047">Referring now to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, there is illustrated a system <b>100</b> according to embodiments of the present disclosure. The system <b>100</b> includes a user device <b>102</b>, which can be any suitable device, such as a mobile phone, a laptop computer, a tablet, a wearable device, or the like. The system further includes an IoT device <b>104</b>, which can be any suitable device, such as a smart surveillance camera, a smart speaker, a doorbell camera, a smart door lock, a smart thermostat, or the like. In some embodiments, the user device <b>102</b> and the IoT device <b>104</b> are capable of connecting to each other using a proximity based protocol such as near-field communication (NFC), BLUETOOTH&#xae; Low Energy (BLE), or the like. The system additionally includes a cloud host server <b>106</b>, which connects to the user device <b>102</b> and the IoT device <b>104</b> through a network <b>108</b>, such as the Internet. In some embodiments, the cloud host server <b>106</b> connects to the user device <b>102</b> and the IoT device <b>104</b> using a protocol such as HTTPS. It is understood that the system <b>100</b> can include any number of each of the user device <b>102</b>, the IoT device <b>104</b> and the cloud host server <b>106</b>.</p><p id="p-0049" num="0048">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, there is illustrated a method <b>200</b> for generating keys based on entropy according to embodiments of the present disclosure, which entropy is derived from a photograph, as will be described hereinbelow. In some embodiments, the method <b>200</b> is performed by a user device <b>102</b>. For example, the method <b>200</b> could be performed by a mobile phone that is connected to a cloud host server <b>106</b> via a mobile data connection using the Hypertext Transfer Protocol Secure (HTTPS) protocol and having a resident application for such operation. The mobile phone can be able to connect to an IoT device <b>104</b> using NFC when the mobile phone is within close enough proximity to the IoT device <b>104</b> for NFC to function. In some embodiments, the method <b>200</b> is implemented as an application that runs on a processor of the user device <b>102</b>&#x2014;a device resident application. This application could be downloaded onto the user device <b>102</b>, for example from the cloud host <b>106</b>. Although the method <b>200</b> is described with respect to a mobile phone as the user device <b>102</b>, it is understood that any suitable device could perform the method <b>200</b>.</p><p id="p-0050" num="0049">In this method, as will be described more fully hereinbelow, the disclosed embodiment harvests a random key from user PIN/picture entropy. This is compared to two scenarios where the random key is harvested from a local TRNG or it is a service provider key which is used. The scenarios are as follows:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0050">Scenario 1: As an individual user, in accordance with a disclosed embodiment, the individual user is able to harvest a random key from PIN/picture entropy.    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0051">Can it be cryptographical high quality? Yes</li>        <li id="ul0002-0002" num="0052">Is the individual user's data secret from vendors? Yes</li>        <li id="ul0002-0003" num="0053">Is individual user's data secret from attackers? Yes</li>        <li id="ul0002-0004" num="0054">Does the individual user have a way to remember it? Yes, picture and user PIN is not hard to remember</li>        <li id="ul0002-0005" num="0055">Can the individual user recreate it? Yes</li>        <li id="ul0002-0006" num="0056">Does the individual user have a secure way to distribute it to others, besides physical?</li>    </ul>    </li></ul></p><p id="p-0051" num="0057">Yes. Sharing pictures does not reveal the key. The user PIN can be arbitrarily long distributed through voice, SMS, other. It is as secure as it needs to be.<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0058">Scenario 2: As an individual user, the individual user can harvest a random key from a local TRNG random physical phenomenon, such as heat source, processor entropy and so on.    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0059">Can it be cryptographical high quality? Yes</li>        <li id="ul0004-0002" num="0060">Is the individual user's data secret from vendors? Yes</li>        <li id="ul0004-0003" num="0061">Is the individual user's data secret from attackers? Yes</li>        <li id="ul0004-0004" num="0062">Does the individual user have a way to remember the key? No</li>        <li id="ul0004-0005" num="0063">Can the individual user recreate the key? No</li>        <li id="ul0004-0006" num="0064">Does the individual user have a secure way to distribute the key to others, besides physical? No. Physical delivery via USB drive is the only option.</li>    </ul>    </li>    <li id="ul0003-0002" num="0065">Scenario 3: As an individual user, the individual user relies on a service provider harvested random key.    <ul id="ul0005" list-style="none">        <li id="ul0005-0001" num="0066">Can it be cryptographical high quality? Yes</li>        <li id="ul0005-0002" num="0067">Is the individual user's data secret from vendors? No. By definition the vendor can access the individual user's data</li>        <li id="ul0005-0003" num="0068">Is the individual user's data secret from attackers? Limited by vendor security</li>        <li id="ul0005-0004" num="0069">Does the individual user have a way to remember it? Yes, if it is in a vendor's key vault</li>        <li id="ul0005-0005" num="0070">Can the individual user recreate it? No</li>        <li id="ul0005-0006" num="0071">Does the individual user have a secure way to distribute it to others, besides physical? Limited. The distribution is done from vendor's store to individual parties through HTTP/TLS, which has opportunities for discovery.</li>    </ul>    </li></ul></p><p id="p-0052" num="0072">Beginning at step <b>202</b>, the user device <b>102</b> receives host data and a user PIN (Personal Information Number). This user PIN is a PIN that is created by the user and is personal to the user. The host data can also be referred to as a host factor or second factor and is generated by the host and provided to the user for the purpose of generating a private key using the inherent entropy of a known photograph, which will be described in more detail hereinbelow. Further, for each user PIN, the host can generate multiple different host factors to allow for generation of different private keys for the user using the same photograph and PIN, the operation of which will be described hereinbelow. In some embodiments, the host data is received from the host cloud server <b>106</b> through the network <b>108</b>, for example using the HTTPS protocol to provide standard security. HTTPS is not perfectly secure, however, and it can be assumed that it is possible for the host data to be intercepted.</p><p id="p-0053" num="0073">The user PIN is entered by the owner of the user device <b>102</b> that is performing the method. Accordingly, the PIN is not received through any communications channel, and is not prone to interception. In order for the PIN to be compromised, a physical attack must be made on the phone. For example, an attacker must physically observe the user entering the PIN, or physically access the PIN if it is stored on the device. In preferred embodiments, the PIN is 6-12 digits long and is comprised of alphanumeric characters.</p><p id="p-0054" num="0074">In some embodiments, the user device <b>102</b> also receives a desired key size for the output key at step <b>202</b> during the key creation operation. For example, the key size can be 256 bits. This key size can also be a predetermined default that is set in an application that implements the method. The key size is a subset of the entropy source, i.e., the photograph, such that, for example, if the photograph has 4,000 pixels, each pixel comprised of 3 bytes (e.g., color&#x2014;red-green-blue or &#x201c;RGB&#x201d;), that computes to 4,000&#xd7;8 bits/byte&#xd7;3=96000 bits. In some embodiments, the application contains a default key size of 256 bits but a user may specify a larger key size, or the cloud host <b>106</b> can specify a larger key size (for example in the host data), to obtain a stronger key.</p><p id="p-0055" num="0075">At step <b>204</b>, the user device <b>102</b> receives an image. The image can be received in any suitable fashion. For example, when the user device <b>102</b> is a mobile phone, the image may be captured using a camera that is part of the mobile phone. Alternatively, the user may choose an existing image from another source, for example by downloading the image from the internet. This image or photograph is then kept by the user so that the user can later recreate the private pey(s) with this image, user PIN and host data/factor. It is not that multiple users cannot have the same image or photograph; rather, it is the combination of the three factors of image/photograph, user PIN and unique host data/factor that imparts security to the generated private key. In addition, as will be described hereinbelow, the host does not possess the photograph, so the private key cannot be created or discovered via information lying solely on the host servers.</p><p id="p-0056" num="0076">Any given image embodies a certain amount of entropy based on the amount of variation in color between individual pixels of the image. In general, when dealing with images, it is understood that an image inherently has associated entropy. This entropy, from one viewpoint, is a way to relate the amount of uncertainty about an event associated with the given probability distribution, wherein entropy can serve as a measure of &#x201c;disorder.&#x201d; As a level of disorder rises, the entropy rises and events become less predictable. With respect to a photograph or image, this can be represented by a dataset of digitized pixel values and the entropy can be considered to be the randomness of the dataset associated with the image, which corresponds to a measure of the amount of information within an image. That is to say, a very complex image has more information contained therein than a very simple image. Just the image itself on a document for, by way of example, a color image with a resolution of 1920&#xd7;1080 with 10,000 colorful dots and an image with only five gray dots would vary differently in the amount of information within the image and, consequently, the amount of randomness or entropy.</p><p id="p-0057" num="0077">It is possible to calculate the entropy H(x) with, by way of one example, use of the following equation based on Claude Shannon's work commonly known as Shannon entropy:</p><p id="p-0058" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mi>H</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <mi>x</mi>   <mo>)</mo>  </mrow>  <mo>=</mo>  <mrow>   <mo>-</mo>   <mrow>    <munderover>     <mo>&#x2211;</mo>     <mrow>      <mi>i</mi>      <mo>=</mo>      <mn>1</mn>     </mrow>     <mi>n</mi>    </munderover>    <mrow>     <mrow>      <msub>       <mi>p</mi>       <mi>i</mi>      </msub>      <mo>(</mo>      <msub>       <mi>s</mi>       <mi>m</mi>      </msub>      <mo>)</mo>     </mrow>     <mo>&#x2062;</mo>     <mrow>      <mrow>       <msub>        <mi>log</mi>        <mn>2</mn>       </msub>       <mo>(</mo>       <mrow>        <msub>         <mi>p</mi>         <mi>i</mi>        </msub>        <mo>(</mo>        <msub>         <mi>s</mi>         <mi>m</mi>        </msub>        <mo>)</mo>       </mrow>       <mo>)</mo>      </mrow>      <mo>.</mo>     </mrow>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0059" num="0078">The p<sub>i </sub>value is the occurrence probability of a given symbol. Here the symbols are pixels. For example, consider a single-channel 8-bit image (256 intensity levels per pixel), one can compute p<sub>i </sub>as follows:</p><p id="p-0060" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mrow>  <msub>   <mi>p</mi>   <mi>i</mi>  </msub>  <mo>=</mo>  <mfrac>   <mrow>    <mi>Number</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>of</mi>    <mo>&#x2062;</mo>    <mtext>  </mtext>    <mi>occurrances</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>of</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>the</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>intensity</mi>    <mo>&#x2062;</mo>    <mtext>    </mtext>    <mi>level</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>i</mi>    <mtext>  </mtext>   </mrow>   <mrow>    <mi>Number</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>of</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>intensity</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>levels</mi>   </mrow>  </mfrac> </mrow></math></maths></p><p id="p-0061" num="0079">This is basically the probability that the outcome x happens. M are all the possible outcomes. The probability density p<sub>i </sub>is calculated based on, in one example, the value of i being the potential values of the pixel, wherein each pixel can have 256 values for each color. This is just one example to determine the randomness of the particular image or photograph. The reason to consider the entropy for the entire image is to determine if any particular photograph or image has a sufficient level of uncertainty or randomness inherent thereto in order to provide the basis for harvesting the private key therefrom, as will be described in more detail hereinbelow. It should also be appreciated that certain images have very low entropy, such as a completely white image&#x2014;which basically has no entropy&#x2014;and a relatively complex image&#x2014;which has a higher entropy. Within any particular image, it should also be appreciated that there are certain areas that have higher entropy than others. Each of these photographs or images has certain order associated therewith as compared to an image of completely random pixels. Thus, the dataset associated with a photograph or image will be an ordered dataset, with the order defined by the ordered information contained within the photograph. There are certain biases that are naturally associated with the photograph, such as a scene having a sky in the upper portion thereof and the scenery in the lower portion thereof.</p><p id="p-0062" num="0080">At step <b>206</b>, entropy is distilled from the image using the host data and the PIN received at step <b>202</b>. In this process, one or more harvesting processes is applied to the ordered dataset in order to extract therefrom the information that is who comprise the private key, i.e., 256 bits in one example. This process is described in further detail with respect to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>.</p><p id="p-0063" num="0081">Referring now to <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, there is illustrated a sub-method <b>201</b> for distilling, or harvesting, entropy from a received image using host data or factor and a user PIN. Distillation of entropy from the image involves selecting a number of pixels from the image (i.e., sampling pixels from the image), from which bits of information are selected for use as a key. In this way, high quality cryptographic keys can be generated without the use of a RNG, which require substantially more processing capability. The process of selecting or sampling pixels is referred to herein as pixel harvesting. Modern digital images obtained from a smartphone camera often contain 10 megapixels or more. Assuming a standard RGB camera using 24 bit color, each RGB pixel contains 24 bits of information&#x2014;8 bits for each of the red (R), blue (B), and green (G) color channels of the pixel. A 10 megapixel image thus contains 24 million bits of information. The pixel sample size required to generate a key will be substantially less than the number of pixels in an image, and accordingly a large number of unique keys may be generated from a single image's entropy using the same user PIN and an associated host factor. As will be described in more detail hereinbelow, the multiple harvesting processes can be individually selected by the user PIN, and the host factor can be different for a particular user and their associated user PIN in order to allow different private keys to be generated from the same photograph and same user PIN. For example, the user may have multiple applications, each requiring a private key. Since the host generates the host factor, a relational database can be maintained at the host server, wherein the generation of the host factor thereat results in a separate and unique host factor being generated for a particular user, a particular user PIN of that user, and a particular image or photograph (noting that the host does not have access to the particular image or photograph). Thus, with the particular image or photograph, the user PIN and any one of the unique host factors associated with that user, a unique and individual private key can be generated. Further, all that is required to re-create the private key is the same particular image or photograph, the same user PIN and the associated unique host factor.</p><p id="p-0064" num="0082">At step <b>208</b>, the image file is converted into a manipulatable format. This can include, for example, determining a set of &#x201c;orientation pixels&#x201d; comprising pixels at the corners of the image and at points between the corners of the image. These pixels can be stored and used as reference points to determine whether the image is in its original orientation in the future. This is useful when reestablishing keys based on the same image or photograph. The orientation pixels can, in some embodiments, be used in a scatter hash, which is discussed further below.</p><p id="p-0065" num="0083">In some embodiments, step <b>208</b> also includes eliminating duplicate pixels in the image (e.g., compressing the image). This process involves scanning the pixels of the image in sequence and removing duplicate pixels (having the same value) adjacent to each other. The selection of duplicate pixels for use in generation of the key may reduce the entropy of the selected pixels used to generate the key, and elimination of duplicate pixels as a preliminary step in this method can result in higher entropy of data harvested from the image.</p><p id="p-0066" num="0084">The sub-method <b>201</b> can also include initial checks at this point to disqualify the image from being used based on various benchmarks. In some embodiments, after compression, a threshold amount of 1000 pixels of remaining image data per bit of the key may be required. This may be done to ensure that there is an adequate sample size of pixels to ensure high quality cryptographic keys are generated as an output. In this case, if the desired output comprises 256 bit keys, then for each desired key, 256,000 pixels of image must remain after step <b>208</b>. Under these constraints, a 10 megapixel image could produce up to 39 keys if very few pixels were eliminated. In other embodiments, a benchmark of a predetermined number of unique colors may be required per data bit of the key. If the image has too few unique colors, the lack of variation could translate to a lack of entropy. Accordingly, this requirement may be imposed to ensure that there is an adequate amount of entropy to ensure high quality cryptographic keys are generated as an output. It should be understood that any method for evaluating a particular photograph or image for its level of uncertainty or entropy could be utilized to determine that there is a sufficient amount of uncertainty or entropy in the resulting &#x201c;ordered dataset&#x201d; of remaining pixels. It may be that certain areas of the image are analyzed and, if determined to have a very low level of uncertainty or entropy, they are just eliminated from the ordered dataset.</p><p id="p-0067" num="0085">At step <b>210</b>, the image is manipulated based on the host data or factor and the user PIN. In some embodiments, the first 6 digits of the PIN each correspond to a direct transformation of the image that affects the pixels harvested, or selected, in the harvesting operation and the order in which they are harvested. This transformation of the image serves to make it difficult to recreate the user's keys based on possession of the image. Furthermore, this transformation eliminates local bias to a particular area of the image, and correlation between the pixels of the image that may be introduced by predictable order within the image. For example, pictures taken outdoors tend to have a large portion of sky and a large portion of ground, and attackers may be able to take advantage of such assumed order, however if the image is transformed before pixels are harvested, then this sort of order cannot be taken advantage of.</p><p id="p-0068" num="0086">This harvesting operation for obtaining the 256 bits, as defined by the predetermined number of bits that are set for the private key, is basically a method to extract or distill these bits from the image. As described hereinabove, the first step is to ensure that the image or subset thereof has a requisite level of uncertainty or entropy. As will be described in more detail hereinbelow, the application that resides on the user device <b>102</b> has a plurality of preset applications or operations associated therewith. They can be operations that require the user PIN and host data or factor or they can be operated independently. If just the inherent entropy in the photograph or image is to be utilized for the harvesting operation, the operation could be first, to define the length of the private key and then, second, to process the photograph or image via the associated ordered dataset to extract the number of bits required by the private key from a defined location within the ordered dataset. This, of course, is a very simplistic use of the photograph or image and its associated ordered dataset and will result in only a single private key for a given ordered dataset. Therefore, anybody possessing the image or photograph can potentially discover the process for extracting the key therefrom.</p><p id="p-0069" num="0087">By employing a plurality of subsequent harvesting processes that are dependent upon the user PIN and the host data or factor, a much higher level of security can be imparted to the private key. As such, the plurality of harvesting processes is disposed on the user device <b>102</b> as a part of the application and the processes are selected/manipulated via the user PIN and the host data or factor. Since the user PIN is a fixed user PIN that is personal and unique to the user that owns this user PIN, with the use of this user PIN in the absence of the host data or factor, a single private key can be distilled from the photograph. As such, all that would be required to re-create the private key is the user PIN and the original dataset associated with the original photograph or image. The use of this second host data or factor that is generated by the host and associated with the user PIN imparts another level of difficulty to any individual discovering the private key, even if they have the photograph in their possession. In a fairly straightforward operation, the user PIN can just be utilized to select among the plurality of harvesting processes and then the host data or factor is utilized to manipulate the operation of that process. This will be described in more detail hereinbelow.</p><p id="p-0070" num="0088">In one example of use of harvesting processes, a plurality of harvesting processes is provided, which are made to transform the image and its associated ordered dataset. Each alphanumeric digit of the user PIN can be used to parameterize an associated process, such that each process can function in different ways depending upon the value of an associated digit of the user PIN.</p><p id="p-0071" num="0089">In some embodiments, one digit of the PIN in an associated harvesting process may determine rotation or inversion of the image for that particular harvesting process. Based on the alphanumeric character chosen to be the first digit of the PIN, one of a set of predefined rotation values may be applied to pixels of the image. For example, a lookup table or relational database maintained by the application within the user device <b>102</b> could be consulted to determine the value that is related to the chosen PIN digit. This harvesting process and its associated transformation disrupt statistical tendencies of the image due to, for example, the presence of sky or ground in the picture.</p><p id="p-0072" num="0090">A second digit of the PIN may start a scramble pattern in an associated harvesting process. That is, the pixels that are ultimately harvested from the image may be chosen in a scrambled order, rather than in a left-to-right, top-to-bottom order, or any other monotonic order. The scrambling algorithm can use pixel data as a randomizing input, and the PIN digit can determine where the input starts. This harvesting process performs a transformation that disrupts correlation that might exist between pixels in adjacent areas of the image if they were accessed in a monotonic order. For example, adjacent areas of an image often share similar lighting and colors, and attackers may be able to exploit this tendency for correlation without the scrambling of harvested pixels.</p><p id="p-0073" num="0091">A third digit of the PIN can be used in association with a separate harvesting process to determine an increment between harvested pixels. That is, after the pixels are rotated and scrambled, this digit of the PIN is used to determine that only one pixel out of a given number of pixels (e.g., out of every 100 pixels) is harvested. In some embodiments, the method associated with this harvesting process begins from a default increment and the PIN digit adjusts that increment by a percentage. This yields a uniform distribution of pixels to sample, which further eliminates bias towards a local area of the image, and serves to disrupt calculations from attackers.</p><p id="p-0074" num="0092">A fourth digit of the PIN can be used in association with a separate harvesting process to determine a column of pixels to begin pixel harvesting at. For example, rather than beginning harvesting at the left-most or right-most column of the image, the fourth digit of the PIN can be used to parameterize a function that shifts the starting column away from the edge of the image. This disrupts assumptions by attackers that pixel harvesting will begin predictably at the first column and first row of the image.</p><p id="p-0075" num="0093">In a similar manner, a fifth digit of the PIN can be used in association with a separate harvesting process to determine a row of pixels to begin pixel harvesting at. For example, rather than beginning harvesting at the top-most or bottom-most row of the image, the value of the fifth digit of the PIN can be used to parameterize a function that shifts the starting row away from the edge of the image. This similarly disrupts assumptions by attackers that pixel harvesting will begin predictably at the first row of the image</p><p id="p-0076" num="0094">A sixth digit of the PIN can be used in association with a separate harvesting process to generate a scatter pattern based on a hash. For example, the method can begin from a default assumption of harvesting pixels equidistant from each other in the image. This default can be modified such that each accessed pixel location is offset by successive bytes in a hash multiplied by the sixth digit of the PIN, and this is the scatter pattern. The hash can be, for example, a Secure Hash Algorithm&#x2014;256 bit (SHA256) hash that is calculated from the user PIN, the host factor, and the orientation pixels. Multiplication of each byte of the hash by the sixth digit of the PIN further modifies the harvesting, and the number of possible unique pixel harvesting sequences is such that the probability of brute force guessing the used harvesting sequence is the same as the probability of brute force guessing the SHA256 hash. It is noted that, in this particular example, the host factor is actually utilized as part of the harvesting process. Thus, it can be appreciated that each unique host factor associated with each unique user PIN associated with each unique ordered dataset associated with the original image or photograph results in a unique private key. Since the photograph and its associated ordered dataset are fixed, changing of the host factor can result in the ability to create multiple private keys from a given photograph or image and a user PIN.</p><p id="p-0077" num="0095">It is understood that the purpose of the transformations performed in step <b>210</b> is to increase the difficulty of brute force attacks used to recreate a key based on partial information. Even if the attacker obtains the image used to generate the keys, these transformations greatly increase the difficulty in determining the key from the image. As the transformations are done using both the user's PIN and the externally provided host factor, an attacker must also acquire these pieces in addition to the image to have access to all of the data used to generate the keys. Of course, an attacker would also have to have knowledge of the harvesting processes that were utilized.</p><p id="p-0078" num="0096">At step <b>212</b>, pixels to be harvested are selected, and the order in which they are to be harvested is selected, based on the manipulation done in step <b>210</b>. This can also be referred to as generating a pixel access plan. First, a nominal pixel access distribution is determined. This can include calculating a sample size of pixels. This sample size is calculated based on a number of bits to be harvested per pixel for use in generating a key. Determining the nominal pixel access distribution can further include calculating an increment between pixels to be accessed. This refers to a number of pixels to skip over between pixels selected to be harvested. For example, it may be desirable to achieve a uniform distribution of accessed pixels, and based on the number of pixels in the image and the determined pixel sample size, an increment between pixels is chosen such that the uniform distribution of accessed pixels is achieved. A uniform distribution of accessed pixels can further reduce local bias to any particular area of the image.</p><p id="p-0079" num="0097">As discussed above, the increment between accessed pixels can be modified based on a digit of the user PIN in an associated harvesting process. In some embodiments, the size of the increment between accessed pixels can be varied from 0-15% based on the value of a predetermined one of the digits of the user PIN. For example, the default increment amount could be determined to be 500 pixels, and this amount could be increased by 10% based on the digit of the user PIN to 550 pixels. This increases the difficulty of an attacker determining the distribution of the harvested pixels while maintaining the uniformity of the pixel distribution in order to reduce local bias.</p><p id="p-0080" num="0098">Based on the modified increment, a list of pixels to be accessed can be generated. For example, as discussed above, a starting row and column of the image can be determined based on digits of the user PIN in an associated harvesting process. The pixel located at the intersection of the starting row and column is selected as the first pixel in the access list, and the increment is applied to select the next pixel. For example, if the modified increment is 550 pixels, then the pixel 550 pixels in sequence along the row is selected as the next pixel in the access list.</p><p id="p-0081" num="0099">In some embodiments, the pixel access list is additionally modified based on a scatter pattern and associated harvesting process. As discussed above, a hash (such as a SHA-256 hash) can be calculated based on the user PIN, the host factor, and the orientation pixels. This results in a pixel access list that is uniquely determined for each image, user PIN and host factor. For each pixel to be harvested (i.e., each pixel in the access list), the location of the pixel can additionally be offset based on the hash. For example, each successive byte of the hash can be multiplied by a predetermined digit of the user PIN plus 1, and the result can be added to the location of the pixel in the access list to further modify the location of the accessed pixels. Due to the underlying uniform distribution of the locations of the pixels in the access list, the distribution of the pixels remains uniform after this further modification, and the modification makes it more difficult for attackers to determine the harvested pixels. In some embodiments, if the locations of the accessed pixels exceed the locations available in the image after this modification, the list can wrap back to the beginning of the image (i.e., back to the first row and column of the image).</p><p id="p-0082" num="0100">Although the pixel access list at this point has been modified to increase the difficulty of attackers discerning the accessed pixels, the list is still in monotonically increasing order (i.e., each pixel in the access list is located at a later position in row, column, or both than the previous pixel in the access list). In order to remove this predictable pattern to avoid potential determination by attackers of correlation between the accessed pixels, the access list can be shuffled. For example, a Fischer-Yates shuffle (or Knuth shuffle) can be used. This shuffle exchanges successive entries in the pixel access list with another entry chosen based on a random integer between 0 and an index number of the entry being swapped (e.g., for the n<sup>th </sup>entry in the list, the random integer would be chosen between 0 and n).</p><p id="p-0083" num="0101">An example of the pixel access plan is illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>. In this example, an image <b>220</b> is processed with sample pixels distilled therefrom in accordance with the process described hereinabove.</p><p id="p-0084" num="0102">At step <b>214</b>, after the pixel access list has been determined, modified, and scrambled, bits are harvested based on the pixel access list. Again, this pixel access list is created in accordance with the execution of the various harvesting processes. A random string of bits can be assembled by simply concatenating the RGB values of each pixel in the pixel access list, and this random string of bits can be used as a cryptographic key. This can be referred to as a raw mode of harvesting pixels. Statistically, however, the high order bits of each color byte in an image tend to have more zeroes than ones. This pattern could make keys generated with the raw mode vulnerable to attack. Different modes of harvesting the pixels from the pixel access list can be used to remove this statistical correlation, and thereby generate keys with reduced vulnerability to attack. Again, the more harvesting processes that are used and the more complex these harvesting processes are, the less vulnerable the private key is to attack.</p><p id="p-0085" num="0103">One alternative approach to pixel harvesting modes involves combining the R, G, and B bytes of each pixel in various fashions to create a single byte of information from each pixel. An example of such a combination pixel harvesting mode is a low bit merge mode. In this mode, the 3 lowest order bits of two colors of a pixel are concatenated with the 2 lowest order bits of the third color of the pixel to form a single byte of information. Additionally, the color bytes from which 3 bits are chosen can be rotated with each harvested pixel (e.g., 3 bits can be chosen from each of the R and G bytes in one pixel, while 3 bits are chosen from the G and B bytes of the next pixel, and so on). Bytes generated in this fashion can then be concatenated together to form a full key. Compared to the raw mode, this reduces the statistical correlation between bits in a resultant key created by concatenating bytes of information generated from the pixel access list.</p><p id="p-0086" num="0104">An alternative combination pixel harvesting mode is a pixel product mode. In this mode, the R, G, and B bytes of a pixel are multiplied into a product, which is masked to a single byte of information. This reduces high order zero bias; however, some statistical correlation from the original pixel may remain. Bytes generated in this fashion can then be concatenated together to form a full key. Compared to the raw mode, this reduces the statistical correlation of a resultant key to the original pixels. This pixel harvesting mode has similar strength to the low bit merge mode.</p><p id="p-0087" num="0105">Another alternative combination pixel harvesting mode is a pixel exclusive or (XOR) mode. In this mode, the R, G, and B bytes of each harvested pixel are bitwise XORd into a single byte of information. For a single sampled pixel, this mode shows high order zero bias; however; sampling multiple pixels using this mode will cancel this bias. For example, when more than 8 pixels are sampled, the statistical correlation to the original pixels is very low and the strength of the resulting key is higher than that created by the low bit merge mode or the pixel product mode.</p><p id="p-0088" num="0106">As discussed above, the higher order bits of each color byte tend to have more zeroes than ones. As compared to the raw pixel harvesting mode or the combination pixel harvesting modes, another alternative approach to pixel harvesting is low bit pixel harvesting modes. The lower order bits contain information that is affected by environmental light flicker, movement of the image subject or of the camera, artifacts of quantization of the pixels, power supply levels of the camera, environmental air movement, and such other environmental noise factors. Such information has low correlation to the subject of the image itself, and is accordingly where the entropy of the image is concentrated.</p><p id="p-0089" num="0107">An example low bit pixel harvesting mode selects the lowest order bit of each color byte in each pixel. This approach could reflect color bias in the original image. Use of the above-discussed scattering factor should reduce the tendency, however, to over or under sample any particular color in the original image.</p><p id="p-0090" num="0108">An alternative low bit pixel harvesting mode is a low bit XOR mode. In this mode, the R, G, and B bytes of each pixel in the pixel access list are XORd together to form a single byte of information for each pixel. The lowest order bit of each XORd byte is then selected and concatenated to generate a key. In some embodiments, multiple pixels can be XORd together before the lowest order bit is selected. Due to the scrambling of the pixel access list described above, the content of several pixels from different areas of the image is thus compressed together into a single bit. Of the discussed pixel access modes, this mode distills the highest amount of entropy from the source image, thereby having the least statistical correlation with the original image.</p><p id="p-0091" num="0109">Returning now to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, after the entropy is distilled from the image, keys are provisionally generated by concatenating bits of the harvested pixels as discussed above, at decision block <b>216</b> the provisional keys are compared to a threshold amount of entropy to determine if the key contains a large enough amount of entropy. For example, the Shannon entropy of the key can be calculated and compared to a predetermined threshold Shannon entropy that is considered to be a minimum acceptable entropy for a secure key. If the key does not meet or surpass the threshold for the predetermined entropy threshold, then the method returns to step <b>204</b>, and a new image is obtained. In some embodiments, this includes prompting a user of the user device <b>102</b> to take a new image with a camera, or choose a new image from another external source. In some embodiments, other tests such as one-zero bias, number and lengths of directional runs, Chi-square, covariance and the like commonly used to self-test sources of entropy are employed to ensure the key meets acceptable standards.</p><p id="p-0092" num="0110">If the provisionally generated key does meet the threshold amount of entropy, then the key is output for use at step <b>218</b>. This can include, for example, storing the key in a register or database within a memory of the user device <b>102</b>. In some embodiments, the keys, once stored, can only be accessed by a security application that uses the keys to encrypt or decrypt data, to sign data, or the like. This is discussed further below.</p><p id="p-0093" num="0111">Referring now to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, there is illustrated a flowchart for the overall general harvesting process, in one disclosed embodiment. The flow is initiated at a Start block <b>302</b> for a harvesting operation. The first step in this particular exemplary harvesting operation is to access a photograph, as noted by a function block <b>304</b>. This photograph or image in a digitized form and it can be taken by a camera that is associated with the user, it could be provided to a group of individuals, such that a predefined group would have a single photograph associated with their respective private key(s) or could be provided by the host from some library. In any event, this particular photograph, once accessed, then provides the entropy source. This is opposed to utilizing a Random Number Generator (RNG) for the entropy source.</p><p id="p-0094" num="0112">The program then flows to a decision block <b>306</b> in order to determine if this particular photograph meets some entropy threshold. As described hereinabove, the photograph has associated therewith an ordered dataset as compared to a truly random image having nothing but random pixels associated therewith, since an ordered photograph having associated therewith an ordered dataset arguably has some bias associated therewith. As such, depending upon the complexity of the image, the entropy of the image or photograph can vary. It is also noted that, in this example, this entropy threshold is determined after access of the photo but, could also be determined after all of the harvesting processes are performed. It is possible to actually evaluate the final generated key to determine if sufficient entropy exists. If the photograph does not pass the entropy threshold, the program flows along an N path to function block <b>308</b> in order to select a new photograph and then proceeds back to the input of function block <b>304</b>.</p><p id="p-0095" num="0113">Once an acceptable photograph is accessed, the program flows along a Y path to a function block <b>310</b>. Function block <b>310</b> is where the user PIN and the host factor or data is accessed for the harvesting process. The program then flows to a function block <b>312</b> to select the key size which in one example is 256 bits. However, the key size can be selected to be any size. The program then flows to a function block <b>314</b> in order to select a harvesting process from among a plurality of harvesting processes that are stored in association with the application resident on the user device <b>102</b>. The overall harvesting process uses a plurality of individual harvesting processes in order to make the resulting key less vulnerable to attack. As noted hereinabove, a simple harvesting process could be just initiating a count from the first row and first column of the photograph by a predetermined count value and then selecting the next 256 bits. This would be the same for every key generated in the system, such that only one key could be generated for each image or photograph. This, of course, is somewhat undesirable. This particular step would not require any user PIN or any external input to determine the count value, i.e., it would be fixed by the resident application on the user device <b>102</b>. A further step could be to utilize the user PIN to determine where the count is initiated. It should be understood that a user only has one user PIN and, as such, whatever digit of the user PIN is used to define the initial composition would still only allow a single key to be generated from a single photograph.</p><p id="p-0096" num="0114">In the disclosed embodiment, multiple harvesting processes are utilized to harvest the entropy from the photograph. The function block <b>314</b> selects the harvesting process and then the program proceeds to a function block <b>316</b> to run the selected harvesting process. As noted hereinabove, this harvesting process may require the user PIN alone with no other input, the user PIN in association with the host data or factor, the user PIN in association with the results of a previous harvesting process or the user PIN in association with both the host data or factor and the results of a previous harvesting process.</p><p id="p-0097" num="0115">After completion of the selected harvesting process, the program flows to a decision block <b>318</b> to determine if all of the harvesting processes have been run. If not, the program selects the next harvesting process in a function block <b>320</b> and, after the last harvesting process has been run, the program flows to a function block <b>322</b> in order to output the private key value. This is a 256 bit value, in one example, which has been distilled or harvested from the image, as described hereinabove.</p><p id="p-0098" num="0116">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, there is illustrated a flowchart for selecting the harvest process, which is initiated at a block <b>402</b>. The program flows to a function block <b>404</b> wherein a single digit of the user PIN is selected. As noted hereinabove, this is an alphanumeric value. The program then flows to a function block <b>406</b> wherein the associated harvest process is accessed and the program then flows to a decision block <b>408</b> to determine if there is any host data or factor associated with this particular process, i.e., is there a host data or factor required to parameterize this particular process. As described hereinabove, the host generates this particular host data or factor to change or parameterize the operation performed by the selected harvest process. For example it could be that the alphanumeric digit associated with the harvest process from the user PIN would select some type of scramble operation or offset operation with a predetermined value of how much offset is provided, this predetermined value defined by the alphanumeric digit from the user PIN. The host data or factor could then be utilized to actually modify this value as an additional operation. Thus, by changing the host data or factor, a different private key can be provided for each value of the host data or factor for the same alphanumeric value of the digit from the user PIN associated with that harvest process. This will be described in more detail hereinbelow. If the host data or factor is required to parameterize this particular selected harvest process, the program flows along a Y path to a function block <b>410</b> to parameterize the selected harvest process in accordance with the particular host data or factor. If not, the program flows along the N path from the decision block <b>408</b> to bypass the function block <b>410</b>, the outputs of both flowing to a return block <b>412</b>.</p><p id="p-0099" num="0117">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, there is illustrated a flowchart depicting the operation of generating a plurality of private keys for different members of the group. It may be desirable to have a group of users that all possess the same photograph or image from which to distill entropy. In this example, each member of the group not only possesses that same photograph or image but also there is a group PIN generated provided to each member of the group. As these individuals are invited to the group, they are provided both the image and the group PIN. Additionally, the way that members are distinguished from each other is by their &#x201c;position&#x201d; within the group. When a member enters the group via some type of invitation, the host will log their position at the time they enter the group. This makes them unique within the group such that only their position and the group PIN is required. The concept for this group is that with the shared photograph and group PIN, all that is required to generate a unique private key among each individual in the group is a unique host factor for each key generated. By utilizing position in the group, the host factor can be varied between each group member.</p><p id="p-0100" num="0118">The process flow is initiated at a block <b>502</b> and then proceeds to a block <b>504</b> to select the members of the group. This is by invitation or some other process. The program then flows to a function block <b>506</b> wherein a common image or photograph is selected for this particular group. The program then flows to a function block <b>508</b> to select a common group PIN for all members of the group. Since each group member is in possession of the group image or photograph and the group PIN, they basically own the private key or keys generated therefrom and can re-create these private keys if necessary. It is important to note that all of the private keys are unique due to the fact that the host factor is unique. Even for a single member of the group who desires to generate multiple private keys, each of those private keys is unique even to that individual member. The program then flows to a function block <b>510</b> to assess the position in the group of that particular member or members and then to function block <b>512</b> to generate the host factor for that particular member. After all the host factors are generated, they are stored in a relational database indexed by the member position. Thus, all that is necessary for the host to identify a particular member is the group PIN and the position of that member in the group. The actual member could identify themselves to the host by some type of unique ID that is established at the time the particular member logged into the host initially. It is in just a lookup operation to look up the member's position from the relational database. The program then flows to a function block <b>516</b> to send the respective host factor generated to each member and then to a termination block <b>518</b>.</p><p id="p-0101" num="0119">For a particular user, the possession of multiple private keys can be useful. In some situations, there may be an IoT device that requires different levels of access to data. One private key can be utilized to access certain data store as considered to be highly sensitive and can only be decoded by a personal entity with which the user has shared this particular private key. In another operation, there may be an operation wherein a data store is to be shared with a less secure group of individuals and this particular private key can be shared with a group of individuals for access to only that particular data store. There can also be private keys that have different functionality associated therewith, such that the user can associate certain functionality with a particular data store and the recipient must have a shared relationship with the user in order to access this particular data.</p><p id="p-0102" num="0120">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, there is illustrated a flowchart depicting a method for allowing a user with a single user PIN to generate multiple keys from the same photograph. As described hereinabove, at least the user PIN and the image dataset are required to generate a user PIN/image dataset entropy from which random data can be harvested to generate the private key. In addition, as described hereinabove, a host factor can be utilized to generate a host data/user PIN/image dataset entropy from which random data can be harvested to generate the private key. Since the user PIN and the image dataset are fixed and can be retrieved by the user at any time in order to re-create private key, One factor that can be changed is the host factor.</p><p id="p-0103" num="0121">The process is initiated at a block <b>602</b> to generate multiple private keys, in accordance with and in association with the single and unique user PIN and the selected image dataset that is to be associated with generation of private keys by that user utilizing that user PIN. The program then flows to a decision block <b>604</b> to determine if multiple private keys are to be generated. If not, the program flows along the &#x201c;N&#x201d; path to a block <b>606</b> for normal private key generation in accordance with the above disclosed embodiment. If multiple private keys are to be generated, the program flows along the &#x201c;Y&#x201d; path to a function block <b>608</b> in order to define, in one embodiment, a key classification to discriminate between private keys for that user and user PIN. In one example of why a user would want multiple private keys, consider a situation wherein a user wants to create private keys to protect various functions at different levels in a single system. For example, an IoT could have various operations wherein data is collected for either encrypted stay at rest data that is to be stored in a local data store, or for transmission of encrypted data to various entities for different purposes. Additionally, the user may want to have private keys that are classified for use on different devices such as a gaming system, a smart refrigerator, etc. In order to facilitate such, the host or server can maintain a relational database or table in which various host factors can be generated, one for each different private key to be generated, and each of the host factors associated with same user PIN. Thus, when the user generates the private key in accordance with the above disclosed embodiment, in association with the same image dataset, the only difference between private keys for that user and that user PIN/image dataset combination is the host factor.</p><p id="p-0104" num="0122">After defining the key classification for the particular user, the program flows to a function block <b>610</b> to generate a unique host factor classification and associated that with that user. The program then flows to function block <b>612</b> in order to store the unique host factor in association with the user PIN. In general, is not necessary for the host to have the actual user PIN stored at the server; rather, all that is necessary is to have some type of identification to securely identify the user such that the user can interface with the host/server in a secure manner in order to access the host factor necessary to generate the private key for any particular classification. The program then flows to a decision block <b>614</b> to determine if all of the private keys have been generated and, if not, the program flows back to the input of the block <b>608</b> to process another host factor to enable the user to generate another private key for that same user PIN/image dataset combination.</p><p id="p-0105" num="0123">By way of additional detail, the following exemplary technical details of the distilling process are set forth:</p><p id="p-0106" num="0000">Details of Exemplary Entropy Distillation from an Image<ul id="ul0006" list-style="none">    <li id="ul0006-0001" num="0124">Processing options    <ul id="ul0007" list-style="none">        <li id="ul0007-0001" num="0125">Inputs        <ul id="ul0008" list-style="none">            <li id="ul0008-0001" num="0126">Key size in bits, default is 256, multiples of 8</li>            <li id="ul0008-0002" num="0127">Digital image file&#x2014;for example, Joint Photographic Experts Group (JPEG, file extension &#x201c;jpg) or Portable Network Graphics (PNG, file extension &#x201c;png&#x201d;)</li>            <li id="ul0008-0003" num="0128">User pin. At least 6 digits, alphabetic characters ok, no upper size</li>            <li id="ul0008-0004" num="0129">Host factor</li>            <li id="ul0008-0005" num="0130">Compress (eliminate duplicate pixels)</li>            <li id="ul0008-0006" num="0131">Mode and count (for exclusive OR modes):            <ul id="ul0009" list-style="none">                <li id="ul0009-0001" num="0132">Low order bit: &#x2018;lowbit&#x2019;, &#x2018;lowxor&#x2019;</li>                <li id="ul0009-0002" num="0133">Combo: &#x2018;lowmerge&#x2019;, &#x2018;pixelxor&#x2019;, &#x2018;product&#x2019;</li>                <li id="ul0009-0003" num="0134">Raw: &#x2018;colorcode&#x2019;, &#x2018;simplepixel&#x2019;, &#x2018;simplecolor&#x2019;</li>            </ul>            </li>        </ul>        </li>        <li id="ul0007-0002" num="0135">Outputs        <ul id="ul0010" list-style="none">            <li id="ul0010-0001" num="0136">Keys</li>            <li id="ul0010-0002" num="0137">Hash and other nonces, . . .</li>            <li id="ul0010-0003" num="0138">Orientation pixels (verify orientation)</li>        </ul>        </li>    </ul>    </li>    <li id="ul0006-0002" num="0139">Notes:    <ul id="ul0011" list-style="none">        <li id="ul0011-0001" num="0140">Image data is accessed by rows and columns. The data is requested in nominally RGB format, wherein there are 3 successive bytes of red, green and blue, known as &#x201c;RGB&#x201d;.</li>        <li id="ul0011-0002" num="0141">Color code refers to creating a 24-bit integer from RGB bytes concatenated in that order.</li>        <li id="ul0011-0003" num="0142">rows and columns are flattened to a 1-dimensional array for linear pixel access.</li>        <li id="ul0011-0004" num="0143">some modes access by color index and pixel index. For those modes, rows, columns and RGB colors are flattened to a 1-dimensional array for linear access.</li>        <li id="ul0011-0005" num="0144">SHA256 hash is currently SHA2 256-bit hash; SHA3 or subsequent hash algorithms may be chosen as the art advances.</li>        <li id="ul0011-0006" num="0145">User pin is accepted as a string with minimum length of 6.        <ul id="ul0012" list-style="none">            <li id="ul0012-0001" num="0146">The least significant 6 are treated digits modify harvesting.</li>            <li id="ul0012-0002" num="0147">The entire user pin is treated as a byte sequence with unbounded length for the purposes of a SHA256 hash.</li>        </ul>        </li>    </ul>    </li>    <li id="ul0006-0003" num="0148">1. Load image file into pixels    <ul id="ul0013" list-style="none">        <li id="ul0013-0001" num="0149">a. Save orientation pixels. Orientation pixels are a small set of pixels chosen at the corners and certain intermediate points saved to identify/verify the image is in the original orientation, useful if a key is reestablished. The orientation pixels are also used in the scatter hash.</li>        <li id="ul0013-0002" num="0150">b. Eliminate duplicate pixels&#x2014;optional. Images may contain a certain number of duplicate pixels. This option scans the image in sequence and removes subsequent duplicates.</li>        <li id="ul0013-0003" num="0151">c. Sanity check key size versus pixel count. A ratio of 1000 pixels for one key bit of information is enforced to ensure an adequate sample size to deliver quality data.</li>    </ul>    </li>    <li id="ul0006-0004" num="0152">2. Process pin digits. The pin provides a simple to use and remember key for the user. More crucial, each of the first 6 digits directs a round of transformations which determines the pixels harvested and the order. This creates a potentially very large set of outcomes controlled by the user. This also eliminates bias and correlation with order present in the digital image.    <ul id="ul0014" list-style="none">        <li id="ul0014-0001" num="0153">a. Rotate and/or invert from pin digit. The user digit selects from a set of predefined values. This transformation disrupts statistical picture tendencies such as sky above, ground below.</li>        <li id="ul0014-0002" num="0154">b. Start of scramble pattern from pin digit. The pixels ultimately selected for harvest will be accessed in a scrambled order. The scrambling algorithm uses pixel data as its randomizing input; the digit determines where the input starts. This transformation disrupts correlation that might exit between pixels in adjacent areas if they were accessed in a monotonic order.</li>        <li id="ul0014-0003" num="0155">c. Increment from uniform distro x factor from pin digit. An increment between pixels is calculated to yield a uniform distribution of pixels to sample. This is considered optimal to eliminate bias towards any area on the image. The user digit modifies that by a percentage to disrupt outside calculations of the same distribution.</li>        <li id="ul0014-0004" num="0156">d. Horizontal start from pin digit. The user digit determines the starting column in the image to harvest. This disrupts an anticipation that harvesting will start on a particular column.</li>        <li id="ul0014-0005" num="0157">e. Vertical start from pin digit. The user digit determines the starting row in the image to harvest. This disrupts an anticipation that harvesting will start on a particular row.</li>        <li id="ul0014-0006" num="0158">f. Scatter pattern from SHA2 hash of pin and factor from pin digit. Pixels to be accessed nominally lie equidistant from each other. Each successive pixel access is offset by successive bytes in a hash multiplied by a factor from a pin digit. Since the user pin is not limited in length, the number of unique access sequences is subject to the same limits as a brute force attack to extract a key is no more likely than breaking SHA256 hash, which is quite large, even if the image is obtained by a breech.</li>    </ul>    </li></ul></p><p id="p-0107" num="0159">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, there is illustrated a sequence diagram <b>700</b> of communications between a user device <b>102</b>, an IoT device <b>104</b>, and a cloud host server <b>106</b>, for setting up secure communications channels based on keys generated according to embodiments of this disclosure. For the purposes of this disclosure, the user device <b>102</b> is a mobile phone that is connected to the cloud host server <b>106</b> via a mobile data connection using the HTTPS protocol. The IoT device <b>104</b> can be any type of IoT device, and it connects to the cloud host server <b>106</b> via the internet using the HTTPS protocol. The mobile phone connects to the IoT device <b>104</b> using NFC when the mobile phone is within close enough proximity to the IoT device <b>104</b> for NFC to function. It is understood that any suitable internet data protocol can be used to connect the user device <b>102</b> to the cloud host server <b>106</b>, and any suitable proximity-based communication protocol can be used to connect the user device <b>102</b> to the IoT device <b>104</b>.</p><p id="p-0108" num="0160">The sequence diagram <b>700</b> includes communications to establish a secure communications channel between the user device <b>102</b>, the IoT device <b>104</b>, and the cloud host server <b>106</b>. For example, IoT device <b>104</b> may typically operate with the cloud host server <b>106</b> as an intermediary between the user device <b>102</b> and the IoT device <b>104</b>. That is, after an initial setup that links the IoT device <b>104</b> to the user device <b>102</b>, the IoT device <b>104</b> and user device <b>102</b> may communicate through the cloud host server <b>106</b> to exchange information, configuration settings, and the like. A goal of the present disclosure is to securely provide high quality cryptographic keys from the user device <b>102</b> to the IoT device <b>104</b> to allow the IoT device <b>104</b> and the user device <b>102</b> to communicate through the cloud host server <b>106</b> with end-to-end encryption that prevents the cloud host server <b>106</b> from reading any of the communications. Additionally, a goal of the present disclosure is to encrypt data at rest on the IoT device <b>104</b> such that the cloud host server <b>106</b> and any malicious third party attackers are unable to access the data at rest on the IoT device <b>104</b>. The communications of the sequence diagram <b>700</b> may be managed at the user device <b>102</b> by a management application for managing the IoT device <b>104</b>.</p><p id="p-0109" num="0161">In some embodiments, in order to facilitate establishing a connection between a user device <b>102</b> and an IoT device <b>104</b>, it is desirable to provision one or more keys to the IoT device <b>104</b> at the time of manufacture. The cloud host server <b>106</b> may belong to a manufacturer of the IoT device <b>104</b>, and accordingly may generate a set of one time programmed (OTP) keys for the IoT device <b>104</b> at step <b>702</b>. The cloud host server <b>106</b> may have access to the systemic entropy needed to produce high quality cryptographic keys for use in this process. Furthermore, the cloud host server <b>106</b> generates an electronic serial identification (ESID) that is unique for the IoT device <b>104</b>.</p><p id="p-0110" num="0162">These keys and the ESID can be programmed into the IoT device <b>104</b> at step <b>704</b>. The OTP keys can include one or more device to server keys, which can be used to encrypt data, a server to device authentication key (SCAK), which can be used to validate payloads transmitted from the cloud host server <b>106</b> to the IoT device <b>104</b>, and a device to server authentication key (DCAK), which can be used to authenticate payloads transmitted from the IoT device <b>104</b> to the cloud host server <b>106</b>. The SCAK and DCAK can be used to create and validate security certificates for communication of the IoT device <b>104</b> and the cloud host server <b>106</b> without the need for an external certificate authority. This can reduce the battery power needed for the IoT device <b>104</b> to verify these communications, as the need for communicating with a certificate authority through the internet is removed.</p><p id="p-0111" num="0163">These OTP keys can be embedded in a memory of the IoT device <b>104</b> such that they cannot be read under any circumstance. The keys can only be used by a secure application for encrypting, decrypting, signing, or the like, the results of which can be read. Even if the physical memory containing the keys is accessed by attackers, the keys cannot be read. Instead, the keys can only be applied to encrypt. In this way, the keys are kept entirely confidential once programmed into the memory.</p><p id="p-0112" num="0164">When a user that owns the user device <b>102</b> purchases the IoT device <b>104</b> and chooses to initiate a setup for the IoT device <b>104</b>, the user connects with the IoT device <b>104</b> using a wireless protocol (such as 802.15.xx) or proximity based protocol, such as NFC, BLE, Zigbee or the like, at step <b>706</b>. A proximity based protocol is inherently more physically secure than longer range wireless connections, and thus the risk of information being intercepted by malicious third parties is very low. The proximity protocol using NFC utilizes inductive coupling between two nearby loop antennas effectively forming an air-core transformer. The interaction between these two loops is described as &#x201c;near field.&#x201d; NFC standards governing this communication link cover communications protocols and data exchange formats, and are based on existing RFID standards including ISO/IEC 14443 and ISO/IEC 18902. In some embodiments, a connection can be established using a wired connection utilizing the 802.15.xx standards protocols, or a USB memory device, which reduces risk of interception to zero.</p><p id="p-0113" num="0165">At step <b>708</b>, the IoT device <b>104</b> transmits its ESID to the user device <b>102</b> in the process of establishing the user's ownership of the IoT device <b>104</b>. This information can be transmitted in the clear, as the ESID of the IoT device <b>104</b> is not secret information. At step <b>710</b>, the user device <b>102</b> may send the ESID of the IoT device <b>104</b> to the cloud host server <b>106</b> (for example, using an internet protocol such as HTTP or HTTPS) in order to validate or establish the user's ownership of the IoT device <b>104</b>.</p><p id="p-0114" num="0166">At step <b>712</b>, this validation is performed by the cloud host server <b>106</b>. For example, the cloud host server <b>106</b> may maintain a database of all IoT devices manufactured by the owner of the cloud host server <b>106</b>, and the ESID of the particular IoT device <b>104</b> in question may be referenced against this database to validate that the particular IoT device <b>104</b> is not already associated with another owner. Association with an owner comprises registration of an account on behalf of the user with the cloud host server <b>106</b>. A user account may include information on any number of different IoT devices <b>104</b> owned by and associated with the same user, and may allow the user to apply a same set of keys to multiple IoT devices <b>104</b>. In some embodiments, the owner of the cloud host server <b>106</b> does not manufacture the IoT device <b>104</b> itself, but manufactures one or more security elements (e.g., a security chip) that are implemented within the IoT device <b>104</b> to facilitate the embodiments of this disclosure.</p><p id="p-0115" num="0167">At step <b>714</b>, the cloud host server <b>106</b> sends a host factor, as described above, to the user device <b>102</b> along with a prompt to input the user PIN (e.g., a 6-12 digit alphanumeric PIN of the user's choosing as described above) into the management application, and a prompt to select an image. The host factor, user PIN, and image are used as described above for generation of keys to be exchanged between the user device <b>102</b> and the IoT device <b>104</b>.</p><p id="p-0116" num="0168">At step <b>716</b>, the user device <b>102</b> selects an image for use in generating keys, as described above. In some embodiments, a camera of the user device <b>102</b> can be used to capture an image for this purpose. In other embodiments, the user can choose an image from the internet, or receive an image from some other external source.</p><p id="p-0117" num="0169">At step <b>718</b>, the user device <b>102</b> generates keys using the image, the host factor, and the user PIN, as described above. In some embodiments, a number of keys are generated from this set of inputs. For example, an encryption key for encrypting data at rest, a user-to-device key for encrypting user device <b>102</b> to IoT device <b>104</b> communications, and a user-to-server key for encrypting user device <b>102</b> to cloud host server <b>106</b> communications may be generated.</p><p id="p-0118" num="0170">At step <b>720</b>, once the keys are generated, the user device <b>102</b> informs the cloud host server <b>106</b> that key generation has been completed. At step <b>722</b>, the cloud host server <b>106</b> generates a bonding certificate for use by the user device <b>102</b> to bond with the IoT device <b>104</b>. The cloud host server <b>106</b> sends the bonding certificate to the user device <b>102</b> at step <b>724</b>.</p><p id="p-0119" num="0171">At step <b>726</b>, the user device <b>102</b> sends a payload including the bonding certificate and the keys generated at step <b>718</b> to the IoT device <b>104</b> via the proximity communication protocol. In some embodiments, this communication can be encrypted, e.g. using Diffie-Hellman exchange techniques, but this is likely not necessary as the proximity interface is inherently secure. In some embodiments, a user must actuate a physical button on the IoT device to confirm the user's presence in proximity to the device. This could be required when a longer range protocol such as BLE is used instead of a very short range protocol like NFC in order to guarantee that only a user with physical access to the device is able to perform the bonding process.</p><p id="p-0120" num="0172">At step <b>728</b>, the IoT device <b>104</b> validates the bonding certificate. For example, the bonding certificate may be generated using the SCAK, which is provisioned to IoT device <b>104</b> as described at step <b>704</b>. The IoT device <b>104</b> can therefore validate any certificate generated by the cloud host server <b>106</b>. At step <b>730</b>, the IoT device <b>104</b> stores the keys in its memory. In some embodiments, the keys may be stored in the same way as the OTP keys are, in a register from which they keys cannot be read but can only be applied.</p><p id="p-0121" num="0173">At step <b>732</b>, the IoT device <b>104</b> generates a bonding done certificate for the cloud host server <b>106</b>. The bonding done certificate is encrypted using the DCAK that was provisioned to IoT device <b>104</b> as described at step <b>704</b>. At steps <b>734</b> and <b>736</b>, the encrypted certificate is relayed through the user device <b>102</b> to the cloud host server <b>106</b>. In this way, the cloud host server <b>106</b> can know that the IoT device <b>104</b> is bonded with the user device <b>102</b>, and can associate the IoT device <b>104</b> with a user account for the user device <b>102</b>, at step <b>738</b>.</p><p id="p-0122" num="0174">At the end of this process, the IoT device <b>104</b> has knowledge of the private keys generated by the user device <b>102</b> according to the above-disclosed embodiments. These private keys are cryptographically strong (preferably quantum resistant) and known only to the IoT device <b>104</b> and the user <b>102</b>. Because the keys are exchanged with the physically secure proximity interface, the keys may be used as a symmetric cipher, as there is no opportunity for the keys to be intercepted during communication. All further communication of data between the IoT device <b>104</b> and the user device <b>102</b> is encrypted with one of these keys. Any sensitive data stored on the IoT device <b>104</b> is encrypted with one of these keys. The cloud host server <b>106</b> is therefore unable to read any data that is relayed through the cloud host <b>106</b> to the user device <b>102</b>, and is unable to access the data at rest on the IoT device <b>104</b>.</p><p id="p-0123" num="0175">In some embodiments, the certificates described above include expiration dates, and the initial user of the user device <b>102</b> no-expiration user. Additional temporary users can be given a certificate with a countdown value that indicates a limited number of users to access the IoT device <b>104</b>. For example, with a countdown value of 0, the user must obtain a new certificate from the cloud host server <b>106</b> before each access of the IoT device <b>104</b>, with a countdown value of 1 the user may access once without obtaining a new certificate, and so on. In this way, the initial bonded user of the IoT device <b>104</b> can grant others temporary permission to access the IoT device <b>104</b>.</p><p id="p-0124" num="0176">Referring now to <figref idref="DRAWINGS">FIGS. <b>8</b>A-C</figref>, <figref idref="DRAWINGS">FIG. <b>9</b></figref> and <figref idref="DRAWINGS">FIG. <b>10</b></figref>, there are illustrated sequence diagrams for initiating a user registration sequence in order to register a normal user and also define a group leader, <figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrating a diagrammatic view of the sequence diagrams of <figref idref="DRAWINGS">FIGS. <b>8</b>A-C</figref>, <figref idref="DRAWINGS">FIG. <b>9</b></figref> and <figref idref="DRAWINGS">FIG. <b>10</b></figref>. In this registration process, the user registration can happen into manners: the user is invited to join a group by a group leader, or the user is interested in joining the system through the system website. Referring specifically to <figref idref="DRAWINGS">FIGS. <b>8</b>A-C</figref>, the first step for the user is to initiate registration by contacting the user device <b>102</b>, which runs applications <b>804</b>. At the application, the user device <b>102</b> then sends identity information for registration begins verification at the server <b>106</b>. This identity information is a user's information for dedication and verification purposes. The system then enters a loop <b>806</b> in order to verify the phone number via an SMS message, where a code that is generated by the server <b>106</b> is sent to the user device <b>102</b>. Once the user inputs the code received at the user device <b>102</b> (or via some other reception method) in the phone verification step, the phone number is then verified. If the SMS message is not verified, the system enters a loop <b>808</b> wearing, because the incorrect code was given, the server returns a &#x201c;verification reject&#x201d; command to the user device <b>102</b> in the application <b>804</b>. The application then notifies the user <b>802</b> that the system has rejected the registration. The user then attempts to provide a correct code until verification has been received, at which time the registration process continues.</p><p id="p-0125" num="0177">Email validation is only necessary if the user was not invited to join a group in the system. The validation of the email address is done through an email message, where a code generated by the server <b>106</b> is sent to the user via some method, such as email, and, once the user inputs the code in the email verification step, the email address is verified. This is facilitated in a loop <b>810</b> wherein the user inputs the email code to the application <b>804</b>, which then forwards this code to the server <b>106</b>. If the incorrect code has been received, system goes to step <b>812</b> in order to allow the server <b>106</b> to provide a &#x201c;verification reject&#x201d; command back to the application, which then informs the user that registration has been rejected. Once the registration is accepted, the process continues.</p><p id="p-0126" num="0178">In the next step, the registration form is completed in order to allow the user, once the user has verified their contact information, to fill out the rest of the information gathered by the system: country, gender, date of birth. The user will be required to provide a password to authenticate with the system. In this process, communication to the server is encrypted with the SMS code, thereby allowing both the system and the user to be able to derive the same key to be able to transmit the user's personal information in a secure manner. This encryption method is temporary. This is facilitated by creating the temporary encryption key the SMS code, encrypting the user's registration data and submitting the final encrypted registration data to the server <b>106</b>. At the server <b>106</b>, the encrypted registration data is decrypted and stored with the temporary identity. Once the information has been processed by the server <b>106</b>, an indication is sent back to the user device <b>102</b> and the application <b>804</b> indicating the registration is complete and then the user is notified of the completion and the necessity to continue to login. The next step, login step, is facilitated at the application level. At this step, the user will be asked to sign in with their email address and password they just provided to the system and create their own encryption key. Once the user credentials are verified, the registration process requires the user to provide a picture for use in generating the encryption keys. If, however, the credentials are not verified, the server indicates this with a &#x201c;credentials rejected&#x201d; reply to the application <b>804</b> which is then relayed to the user <b>802</b> in order to again send the email address and password.</p><p id="p-0127" num="0179">Along with the picture, the user is also prompted to provide a user PIN to be associated with the key generation process. As noted hereinabove, this encryption key, once generated, is unique to the user, this being the private key of the user, sometimes of her to as a user encryption key or the secret key. A hash is then generated from the private key to represent the user based on this key. This process first requires the private encryption key to be generated from the provided picture and user PIN, as described above. After the hash of the private key is created, a separate shared encryption key will be derived for communication with server <b>106</b>, and a hash, generated to represent the application for the user, will be generated based on this shared encryption key. This shared encryption key and application hash are then sent to the server <b>106</b> wherein the server <b>106</b> registers the shared encryption key with the application hash. This shared encryption key allows the user's system application to encrypt all requests to the server <b>106</b> and decrypt all responses from the server <b>106</b>. The server registers this shared encryption key with the application hash, such that all on-going to communications will then be encrypted in this manner. The application then sends the user hash to the server <b>106</b> and the server <b>106</b> then registers the user hash with the application hash. At this point, the registration is complete, and a secure lock is created, which is indicated to the user <b>802</b>.</p><p id="p-0128" num="0180">Capturing now to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, there is illustrated a single diagram for the group creation sequence that defines how groups allow members (users who have registered with the system) to securely possess a collection of devices and provide other users access to those devices via a shared encryption key for the group. The ability to create a group is only available if the user is a paid member and has given the system their payment information. The user must first log into the application <b>804</b> and then the application will verify the user credentials with the server <b>106</b>, unless not verified, which then requires the user to again input their login information. If the user is not a paid member, the application will transmit a membership page to the nonmember user, who will then provide input payment information, which is then sent to the server <b>106</b> by the application <b>804</b> which, once processed, results in the user being registered as a member.</p><p id="p-0129" num="0181">The operation of creating a group by a paid member requires first providing a group name, a picture to be utilized by the group for the encryption key and PIN for use with the group encryption key. These are all sent to the application by the user. The application data for then derives the group encryption key from the picture and the pin and stores it in the system application <b>804</b>. A group hash is then generated from the group encryption key. And this group hash (generated from the group encryption key) is then registered along with a group leader (paid user/member) hash. This group hash and group leader hash are then sent to the server <b>106</b> for registration with the server. Once this registration is complete, the group creation is complete. A secure lock is then created for transmission to the user (group leader) <b>802</b>.</p><p id="p-0130" num="0182">Referring now to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, there is illustrated is sequence diagram for the operation of inviting members to the group. Group leaders can invite as many users as they wish to their groups. When inviting users to groups, group leaders must provide all required information about the user. This includes information like the mobile phone number, the email address and the country. A group leader, represented by a block <b>1002</b>, initiates this operation by logging into the system application <b>804</b> and then the group leader's user credentials are verified. Then the group leader chooses a group to invite users to (group previously created by the group leader). This will cause the system to switch to a group view, wherein the group leader will then input the user's full name, email address, country, phone number and a request to send an invite request to this user. The application <b>804</b> will then send the invited user's information along with the group leader's hash to the server <b>106</b> where such information will be stored. The server <b>106</b> will then generate an invitation key that will be associated with the group leader's hash. This allows the group leader to be notified when the user is registered, and if there were any discrepancies of the data submitted in the invite. An invited user <b>1010</b> will then receive an email with the invitation link for them to register as a new user in the group. The user registration process will then begin for this new invited user.</p><p id="p-0131" num="0183">Referring now to <figref idref="DRAWINGS">FIG. <b>12</b></figref> and <figref idref="DRAWINGS">FIG. <b>13</b></figref>, there is illustrated the process for bonding with the IoT device <b>104</b>, the sequence illustrating that the IoT device <b>104</b> must be registered with the group leader before being able to use it securely. With specific reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the first step is to register an IoT device by connecting it to through either NFC or USB in order to establish a connection from the user device <b>102</b> to the IoT device <b>104</b> and follow through the bonding process. The group leader presses a contact button on the IoT device <b>104</b> and then connects to the IoT device <b>104</b> via USB/NFC. This is operation {circle around (<b>1</b>)} in <figref idref="DRAWINGS">FIG. <b>13</b></figref>. The group leader <b>1002</b> will then add a new device of the group wherein the application will request an ESID from the IoT device <b>104</b>. The IoT device <b>104</b> will respond with its ESID and the application <b>804</b> will then verify the device ESID with the server <b>106</b>. If the ESID is not valid, the device bonding process will terminate. In the illustration in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the IoT device <b>104</b> is illustrated as being an IoT camera that has associated therewith an encryption engine in the form of a separate chip <b>1302</b>. This separate chip <b>1302</b>, as will be described here below, is the device upon which the private key is stored and is also the device that encrypts data on the device <b>104</b>. It is basically the encryption engine of the IoT device that forms a part of the IoT device <b>104</b>. <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates the NFC/USB connection as path {circle around (<b>2</b>)} and the request for the ESID from the IoT device <b>104</b> along path {circle around (<b>3</b>)} with the ESID transmitted to the application <b>804</b> along path {circle around (<b>4</b>)}. The application <b>804</b> will then verify the ESID with the server <b>106</b> along path {circle around (<b>5</b>)}, with the validation operation occurring at {circle around (<b>6</b>)}. If the ESID is not valid, the device bonding process will terminate. If valid, the server <b>106</b> will create a device shared key to establish a trusted relationship between the server and the device. This device shared encryption key will be registered in the IoT device <b>104</b> through the system application's connection to the IoT device <b>104</b>, but not on the actual application <b>804</b> itself. This is illustrated as the path {circle around (<b>7</b>)} which path illustrates the shared key being passed to the application <b>804</b> and then the group key plus the group leader hash plus the shared key plus the user's hash, if available, is then relayed to the chip <b>1302</b> in the device <b>104</b>. This is a registration process of the shared encryption key with the device <b>104</b>. Paths {circle around (<b>8</b>)} and {circle around (<b>9</b>)} illustrate the transmission of the group leader hash+shared key and the user's hash, respectively. This operation comprises the registration of the group key into the IoT device <b>104</b> (and not in the application <b>804</b>), this being the created group private key from the group user PIN/image dataset. It is noted that this diagram relates to registration of the group encryption key with the IoT device <b>104</b>. For this registration of a single user, the private (or secret) key of the user will be registered with the device <b>104</b>. This means that it will be stored in memory on IoT device <b>104</b> for use with encryption/decryption. Thereafter, the user hash for the user will be transferred. Thus, the overall bonding process is a sequence wherein 1) the user presses a contact button on the device, 2) the user disposes the user device <b>102</b> upon which the application <b>804</b> is running proximate to the IoT device <b>104</b> in order to establish a proximity-based communication link, 3) the application <b>804</b>, once a connection is made, requests the ESID from the IoT device <b>104</b>, 4) the IoT device <b>104</b> responds with the ESID to the application <b>804</b>, 5) the application <b>804</b> verifies the device ESID with the server <b>106</b>, 6) the server <b>106</b> performs verification of the ESID and, upon verification, creates a shared encryption key for device-to-server communication, 7) the shared encryption key is returned from the server <b>106</b> to the application <b>804</b>, 8) the application <b>804</b> then registers the shared encryption key with the IoT device <b>104</b>, and 9) the private key of the user (group key for a group) is registered with the IoT device <b>104</b>. As will be described in below, this is a Write Only operation to memory on the IoT device <b>104</b> that cannot be read from the IoT device <b>104</b>.</p><p id="p-0132" num="0184">With respect to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the paths are defined as follows: 1) the user presses button on IoT device <b>104</b>; 2) connects via USB or NFC to the IoT device <b>104</b> through application <b>804</b>; 3) request ESID from IoT device <b>104</b>; 4) receive ESID from IoT device <b>104</b>; 5) validate ESID with server <b>106</b>; 6) create device shared key to define a trusted relationship between the server <b>106</b> and the IoT device <b>104</b>; 7) send shared key from server <b>106</b> to IoT device <b>04</b> through application <b>804</b>; 8) send group key+group leader hash; and 9) send user(s) hash.</p><p id="p-0133" num="0185">Referring now to <figref idref="DRAWINGS">FIGS. <b>14</b>A-B</figref> and <b>15</b>, there are illustrated a sequence diagram for managing user entitlements and a diagrammatic representation thereof, respectively. Managing user entitlements allows the group leader to add, remove users to access devices in the group, but also to update the type of access the users have on those devices. With respect to <figref idref="DRAWINGS">FIGS. <b>14</b>A-B</figref>, the group leader <b>1002</b> decides to add or update entitlements for each user to each group. The group leader accesses the application and creates an updated profile with user entitlement. This involves opening the group entitlements, selecting the device, selecting the user, adding or removing an entitlement for that user and that device and then saving it on the application for the affected user. This is indicated by paths {circle around (<b>1</b>)} to {circle around (<b>5</b>)}. The application <b>804</b> then saves the profile (the group hash, plus a device hash plus the user hash plus the entitlement) to the server/cloud <b>106</b> along the path {circle around (<b>6</b>)}. The server/cloud <b>106</b> will then send back acknowledgments to the application <b>804</b> along the path {circle around (<b>7</b>)}. The server/cloud <b>106</b> will then push these entitlement profiles down to the affected user's applications <b>102</b> in order to ensure that the affected user has the latest entitlements saved. This occurs along path {circle around (<b>8</b>)}. An acknowledgment would be sent back to the server/cloud <b>106</b>. The server/cloud <b>106</b> will then encrypt the profile payload with the device shared encrypted key and attempt to communicate with the device <b>104</b>. If the device <b>104</b> is off-line, the server will wait and retry until the device comes back online. Once the server/cloud <b>106</b> establishes an encrypted connection with the device, the server <b>106</b> will then push to the device <b>104</b> the encrypted entitlement profile changes that the group leader <b>1002</b> requested, decrypt the payload and add or remove users from accessing, or update type of access the user has on the device <b>104</b> in an update process. They can also remove a user from the device. The entitlement profile is then updated and the server/cloud <b>106</b> is notified of such. The profile is then encrypted at the server/cloud <b>106</b> with the affected user shared encrypted key and then the profile payload is sent to the affected user, with an acknowledgment from the affected user to the service/cloud <b>106</b> that the entitlement profile has been received and updated.</p><p id="p-0134" num="0186">With respect to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the different paths are defined as follows: 1) open group entitlements; 2) select device, 3) select user, 4) add/remove entitlement, 5) save, 6) application saves profile (group hash+device hash+user hash+entitlement) to server, 7) server acknowledgment to application, 8) server sends profile to device and affected user applications, 8a) acknowledgment sent back to server, 9) device decrypts and executes-add/remove/ignore command, wherein the add command relates to the user hash not being in the device and is not given any entitlements, the remove command is where the user hash is not in the device and the profile has requested a removal of the user hash and the ignore command is where the user hash is in the device and the profile has updated entitlements, and 10) device sends encrypted acknowledgment to server.</p><p id="p-0135" num="0187">Referring now to <figref idref="DRAWINGS">FIGS. <b>16</b>A-B</figref> and <b>17</b>, there are illustrated the sequence diagram for authenticating a user with the device and a diagrammatic view thereof, respectively. Accessing of the device <b>104</b> requires a user to be validated through the server <b>106</b>. The user will be able to see on their application all the allowed access they have for that device, and the ability to connect to the device with such access. Specifically, with respect to <figref idref="DRAWINGS">FIGS. <b>16</b>A-B</figref>, the user chooses the device via their application by opening the group and selecting a device which displays the available entitlements on the device for that group. They then choose a command to send to the device with respect to the available entitlements and the desired action. These operations are illustrated in <figref idref="DRAWINGS">FIG. <b>17</b></figref> with respect to paths {circle around (<b>1</b>)} to {circle around (<b>3</b>)}. The application then requests access to the device from the server <b>106</b> along the path {circle around (<b>4</b>)}. The server <b>106</b> accesses the entitlement profile to validate the user plus the entitlement and access associated with this command. If the server rejects the request due to lack of permissions, the transaction is terminated. However, once the transaction has been approved/validated by validating the user profile (group hash+device hash+user hash+entitlement) (path {circle around (<b>5</b>)}), the device information is sent back to the application in addition to sending to the target device the application's request for access thereto (path {circle around (<b>6</b>)}). This is required in order to allow the application <b>804</b> to then attempt a device connection. If the device is off-line, an alert will be sent and the transaction is ended. However, if it is online, the device <b>104</b> will encrypt the connection acknowledgment with the group encryption key (private key when not working with the group) and respond to the application with a connection acknowledgment that is encrypted. The application will then decrypt and process this connection acknowledgment wherein a peer-to-peer (path {circle around (<b>7</b>)}) connection is established. The chosen command will then be encrypted for the device at the application <b>804</b> and then a command payload (encrypted) sent to the device <b>104</b>. The device <b>104</b> then encrypts and processes the command payload and then responds to the application with the results of the command.</p><p id="p-0136" num="0188">With respect to <figref idref="DRAWINGS">FIG. <b>17</b></figref>, the paths are as follows: 1) open group, 2) select device, 3) select command (only entitled commands are viewable), 4) application requests access to device, 5) server validates user profile (group hash+device hash+user hash+entitlement), 5a) device available?-GOTO path 6, 5b) denied request, 6) server routes request to device, and 7) peer-to-peer connection is established.</p><p id="p-0137" num="0189">Referring now to <figref idref="DRAWINGS">FIGS. <b>18</b>A-B</figref> and <b>19</b>, there are illustrated a sequence diagram for allowing direct access for validation of the user through the device and the diagrammatic view thereof, respectively. When dealing with a local network, it is required that the user is validated directly to the device via a direct access operation. The user will be able to see on their application all of the allowed access they have for that device, and the ability to connect the device with such access. The application determines how to connect the device (via a LAN, direct IP, network discovery, etc.), and initiates a connection to the device <b>104</b>. The user requests direct access to the device <b>104</b> via the application, wherein the various available entitlements are displayed from the entitlement profile on the device <b>104</b>. The entitlement profile is maintained on the server <b>106</b>, but a local copy can be maintained on the user device <b>102</b> also. Depending on the availability of an Internet connection, the entitlement profile may be accessed from either source, The user, after accessing the entitlement profile from the available source, will open a group, select a device and then the user will choose a command to be sent to the device (paths {circle around (<b>1</b>)}-{circle around (<b>3</b>)} in <figref idref="DRAWINGS">FIG. <b>19</b></figref>). It is noted that if there is no Internet connection for the device <b>104</b> to communicate directly to the server <b>106</b>, then the application will check a local copy of the entitlements for the device <b>104</b> on the user device <b>102</b>. If the entitlements exist in a local stored copy, then the application <b>804</b> at the user device <b>102</b> will attempt the device connection with a target device <b>104</b> in order to request access to the target device <b>104</b>. The device <b>104</b> attempts to request the user profile (group hash+device hash+user hash+entitlements) from server <b>106</b>. If in the off-line mode with no Internet, the device <b>104</b> will look up the local user hash. The device <b>102</b> in the off-line mode will then encrypt a connection acknowledgment with the group encryption key (private key for nongroup operation) and then responds with the encrypted acknowledgment to the application <b>804</b> on the user device <b>102</b>. The application <b>804</b> at the user device <b>102</b> then decrypts and processes the connection acknowledgment and a peer-to-peer connection is established. If, however, there is an Internet connection for the user device <b>102</b> to talk to server <b>106</b>, the user device <b>102</b> will send the request for the user profile (hash+device hash+user hash+entitlements) to the server <b>106</b> to determine if the user has access to that user device <b>102</b>. Since the application <b>804</b> on the user device <b>102</b> has direct contact with the IoT device <b>104</b>, it is the device <b>104</b> that facilitates a connection with the server <b>106</b> for the validation process.</p><p id="p-0138" num="0190">With specific reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, paths described are as follows: 1) open group, 2) select device, 3) select command (only entitled commands are viewable), 4) application requests access to device directly via LAN or direct IP or network discovery, 5) device requests user profile (group hash+device hash+user hash+entitlements) from server, 5a) off-line-GOTO 6, 5b) online-GOTO 7, 6) device looks up local user hash, 6a) if it is local=accepts user GOTO 9, 6b) if it is not local=no response GOTO 10, 7) server validates user profile (group hash+device hash+user hash+entitlements, 7a) user profile sent to Chip <b>1302</b> GOTO 8, 7b) denied user hash request GOTO 10, 8) device decrypts user profile, 8a) device accepts a request-GOTO 9, 8b) device denies request-GOTO 10, 9). Peer to peer connection is established, and 10) DENIED-no response from device.</p><p id="p-0139" num="0191">Referring now to <figref idref="DRAWINGS">FIG. <b>20</b></figref>, there is illustrated a block diagram for the user device <b>102</b> that interfaces with the IoT device <b>104</b>. As disclosed above, user device <b>102</b> is the device that allows the user to create the unique user private key in association with an image dataset and a host factor. Basically, the user device <b>102</b> can be a computer or cell phone that has the ability to execute and run applications via some type of processor <b>2002</b>, store information in a memory <b>2004</b> and be able to communicate with either an external local-area network <b>2008</b>, or wireless service provider, and a near field device communication block <b>2010</b> for communicating with IoT device <b>104</b>. It also has an input/output block <b>2012</b> in order to interface with a display <b>2014</b>, a keyboard <b>2016</b>, or other input device, and possibly a camera <b>2018</b> to obtain an image. As noted hereinabove, the image or other appropriate dataset could be downloaded over the network via the LAN <b>2008</b>.</p><p id="p-0140" num="0192">The IoT device <b>104</b> contains a basic functional IoT block <b>2020</b> which provides all of the IoT device functionality. The basic functional block <b>2020</b> has some type of processing element <b>2024</b> associated therewith, an input/output block <b>2026</b> for interfacing with the external environment to capture data, output data, etc. The basic functional device <b>2020</b> also has a communications block <b>2027</b> for communicating with an external wireless network or a local-area network <b>2028</b> in order to interface with the server <b>106</b>.</p><p id="p-0141" num="0193">In this embodiment, the device <b>104</b> has contained therein an encryption engine, the chip <b>1302</b>. In this embodiment, a separate chip, chip <b>1302</b>, is provided to interface with the basic functional block <b>2020</b>, where basic functional block <b>2020</b> can be realized as a separate chip, in order to provide encryption of the data contained therein, this being encryption of stay at rest data that is to remain in the device or encryption of data that is transmitted to other devices. The encryption engine, chip <b>1302</b>, has an encryption/decryption function <b>2032</b> associated therewith to allow it to use the private key which is imprinted thereon by user via the user device <b>102</b> and the near field communication link. There is provided memory <b>2034</b> for storing the private key, in addition to secured server keys and the such required to interface with the server <b>106</b>. However, the private key that is imprinted upon the chip <b>1302</b> is used to provide quantum resistant security to the device <b>104</b>. As noted hereinabove, a local connection such as the NFC connection, or a USB connection, is provided to allow a user via the user device <b>102</b> to transfer the private key to the device <b>104</b> after creation thereof on the user device <b>102</b>. This imprint operation of the private key is facilitated by a Write Only Bonding Interface on the chip <b>1302</b>. The chip <b>1302</b> can only be imprinted through this Bonding Interface and the private key stored in memory <b>2034</b>, which has predetermined memory slots for different private keys. Once the private key has been stored, it cannot be read out via the Bonding Interface or the proximity-based communication link. It can only be used in the encryption/decryption operation by the encryption engine <b>2032</b>. If another user were to bond with the IoT device <b>104</b>, their private key would be stored likewise in the bonding process. Thus, the Bonding Interface provides a gateway for the storage of a private key in a Write Only operation. This is a One Time Program (OTP) function wherein the private key, once written, cannot be accessed. Typically, the memory <b>2034</b> will be a Flash memory to provide the non-volatile function of the memory <b>2032</b> and it may be possible to provide for erasing of all the private keys stored, but the memory <b>2032</b> is protected from external reading of the key slots. It should be understood that the entire functionality of the chip <b>1302</b> could be incorporated in an application running in software or, alternatively, the hardware functionality of the chip <b>1302</b> could be integrated into a single chip such that the basic functional block <b>2020</b> and the functionality of the chip <b>1302</b> are combined into a single chip.</p><p id="p-0142" num="0194">In operation, as described hereinabove, the user is operable utilize a very unique user PIN and known photograph (which corresponds to a fixed dataset with an associated entropy) to create a unique private key. This is all the information that the user needs to input to the application to generate this private key on the user device <b>102</b>. As also described hereinabove, the application that runs on the user device <b>102</b> can pull down a host factor from the server <b>106</b> that is utilized for the key generation operation. However, the user is only in possession of their user PIN and photograph. The derived private key is then imprinted on the IoT device <b>104</b> via a proximity-based communication link in a one way Write Only operation. As such, both the application and the IoT device possess the private key allowing access to secure data transmission using encrypted data that is encrypted/decrypted with the same private key in a symmetric manner. Thus, the user, with possession of this unique and personal private key can interface with the IoT device <b>104</b> through any communication link via the application running on the user device <b>120</b>, and no involvement of a host is necessary after access is granted to the IoT device <b>104</b>. This provides symmetric end-to-end encryption. If, for some reason, the user needs to re-create the key, all that is required is for the user to know their unique user PIN and have access to the original photograph or image dataset (or any other dataset) in order to re-create the private key in conjunction with the host.</p><p id="p-0143" num="0195">Referring now to <figref idref="DRAWINGS">FIGS. <b>21</b>A-B</figref>, there is illustrated a block diagram of the chip <b>1302</b>. As described above, the chip <b>1302</b> is utilized, in one embodiment, to provide a separate and independent chip that operates within the IoT device <b>104</b> in conjunction with the base IoT functional block/chip <b>2020</b>. This allows a hardware solution to be realized for an encryption engine that can interface with the base IoT functioning block/chip <b>2020</b> having the general functionality of the IoT device, in order to secure data transfer between the IoT device <b>104</b> and the user device <b>102</b>. The chip <b>1302</b> interfaces with the user device <b>102</b> through a proximity-based communication link in order to facilitate receipt and storage of the private key. The private key is then stored, in this embodiment, in hardware via a bonding interface that allows for Write Only access for key transfer (registration). This is to be compared with software storage, which can possibly lead to some level of security concerns. As noted hereinabove, the entire functionality of the chip <b>1302</b> could be implemented in software on the IoT device <b>104</b>.</p><p id="p-0144" num="0196">Once the interface between the chip <b>1302</b> and the user device <b>102</b> results in the storage of the private key in the chip <b>1302</b>, chip <b>1302</b> then operates in conjunction with the general functionality of the base functioning IoT block/chip <b>2020</b> to encrypt data for transmission therefrom and to decrypt received encrypted data in accordance with the private key. This, of course, involves communication with another device that possesses the private key, i.e., the user device <b>102</b>.</p><p id="p-0145" num="0197">At the center of the chip <b>1302</b> is the encryption/decryption engine <b>2032</b>. This incorporates various functioning blocks such as a hash block <b>2108</b>, a key derivation function block <b>2110</b>, a data out buffer <b>2114</b>, a data in buffer <b>2116</b> and an Advanced Encryption Standard (AES) engine <b>2112</b>. The AES engine <b>2112</b> encrypts and decrypts data in a hardware solution. The AES engine <b>2112</b> interfaces with the processor <b>2024</b> of the base IoT functioning block/chip <b>2020</b> via a processor interface <b>2102</b>. Various control registers, receive counters, control registers and index registers are provided in between the AES engine <b>2112</b> and the processor interface <b>2102</b>, noting that data can be transferred between the base IoT functioning block/chip <b>2020</b> and the user device <b>102</b> over the proximity-based communication link fir the bonding operation. Encryption/decryption engine <b>2032</b> interfaces with the memory <b>2034</b>, a nonvolatile memory, for storage of data therein. It has memory slots contained therein for storing derived keys from the user device <b>102</b>, such that multiple private keys can be accommodated. A real-time clock <b>2104</b> is provided in addition to a Hash-based Message Authentication Code (HMAC) block <b>2106</b>, which HMAC is a specific type of message authentication code (MAC) involving a cryptographic hash function in the secret cryptographic key. A cryptographic hash function, such as SHA-256, may be used in the calculation of an HMAC. Basically, HMAC uses two passes of hash computation. The secret key is first used to drive to keys-inner and outer. The first pass of the algorithm produces an internal hash derived from the message and the inner key. The second pass produces the final HMAC code derived from the inner hash result in the outer key. Thus, the algorithm provides better immunity against length extension attacks. The chip <b>1302</b> also includes a user access table block <b>2122</b> containing user profile information, as described hereinabove.</p><p id="p-0146" num="0198">The proximity-based communication is facilitated through a Bonding Interface, which could be any type of proximity-based interface such as an NFC, BLE, Zigbee, etc. interface. This Bonding Interface is designed such that it can only write derived keys to the memory <b>2034</b> with no Read operation permitted. Internally, data can be read and written to the memory, but the memory cannot be read through the Bonding Interface, i.e., Read operations prohibited. However, the base IoT functioning block/chip <b>2020</b> can communicate with the user device <b>102</b> through this interface to communicate such things as its ESID for the bonding process.</p><p id="p-0147" num="0199">In general, the chip <b>1302</b> protects the private keys via a One Time Program (OTP) technique. After manufacture, 1) the device <b>104</b> to server <b>106</b> key can be used with a Hash-based Key Derivation (HKDF) function to create block encryption keys to encrypt (the HKDF is a simple key derivation function KDF) based on a hash-based message authentication code (HMAC)), 2) the SCAK can be used to validate payloads from the server <b>106</b> and 3) the DCAK can be used to certify payloads to the server <b>106</b>. These keys can never be read, even if the chip is unsoldered manually toggle.</p><p id="p-0148" num="0200">The chip <b>1302</b> maintains a set of storage registers that have the configuration of all known registered users. Many of these registers can be read from the chip by the processor <b>2024</b>. The per user application keys can only be written through the Bonding Interface with cooperation of the processor <b>2024</b>. However, these keys also have Write and Use access only; they can never be read and no Read operation from the memory of at least the stored derived private keys is permitted through the proximity-based communication link. A device selector chooses device data and keys based on index.</p><p id="p-0149" num="0201">The chip <b>1302</b> also maintains the last sent and the last received counters from each device in the per user registers. The AES-GCM (Galois/Counter Mode) protocol always increments the counters, so a replay attack can be detected by a reused IV counter. The SSID and Wi-Fi passwords are stored in special registers. If the secure boot verifies the program, only then will the Wi-Fi data be made available in registers to be read by the processor <b>2024</b>. This protects sensitive data from being exposed if the chip <b>1302</b> is unsoldered.</p><p id="p-0150" num="0202">The HKDF creates block encryption keys using the particular encryption key chosen (in unreadable registers) and a &#x201c;salt&#x201d; value. The salt is unique every new session (video feed, power cycle, time period, . . . ); randomness is not required. Since IoT devices do not have much entropy on startup (random number generation is suspect), a unique number is created from several numbers hashed together. The seed (random number from bonding), the epoch time, a free running counter and the send counter are all hashed together to create an always unique number.</p><p id="p-0151" num="0203">The chip <b>1302</b> maintains countdown registers for each user. When this register reaches zero, encryption is locked. A new server certification must be validated before encryption is unlocked.</p><p id="p-0152" num="0204">In the bonding sequence, described hereinabove, once the secure or private key of the user has been created, the user then has to &#x201c;imprint&#x201d; this private key onto the IoT device <b>104</b> for storage in the memory <b>2034</b>, i.e., this is a transfer operation that is part of the bonding process. As noted hereinabove, this is a process that is a one-time Write operation for storage in one of a plurality of key slots <b>2140</b> in the memory <b>2034</b>. It can be appreciated that multiple private keys can be accommodated by the memory <b>2034</b> for different users. Users, once they store their private key in the memory <b>2034</b>, are then registered in the use access table <b>2120</b>. For any given session, after the bonding process is complete, access to the IoT device <b>104</b> is facilitated through the server <b>106</b>. Since the user device <b>102</b> is registered with the server <b>106</b> in a particular communication session, i.e., via a login password and user ID, the server <b>106</b> can identify the user that is in communication therewith such that the appropriate private key for that user can be utilized in the communication session or encryption/decryption between the user and the IoT device.</p><p id="p-0153" num="0205">As described hereinabove, the bonding interface is a proximity-based interface that is utilized for the bonding process. In one disclosed embodiment, this interface is facilitated with a bonding interface <b>2142</b> which is an interface from the chip <b>1302</b> to a physical interface <b>2144</b> which could be NFC, BLE or USB. With such a proximity-based interface, an external hacker would be virtually prohibited from gaining access to the communication of the private key from the user device <b>102</b> through the bonding at interface <b>2142</b> for storage in the memory <b>2034</b>.</p><p id="p-0154" num="0206">In operation, the user device can communicate with the processor <b>2024</b> through the bonding interface <b>2142</b> and the proximity-based physical interface <b>2144</b> to send requests thereto. The request, as described hereinabove, is for the ESID in the initial set up operation. The basic operation is that ESID be requested from the processor <b>2024</b> to identify the IoT device <b>104</b>, which request is and satisfied by transferring through the bonding interface <b>2142</b> and physical interface <b>2144</b> the ESID to the user device <b>102</b>. The next step is to perform a Write operation from the user device <b>102</b> to memory <b>2034</b> of the shared device-to-server key and the user private (or secure) key to the appropriate memory slots. Since this is a nonvolatile memory, each subsequent Write operation cannot write over the previous entry and, as such, each new private key will be written to the next location in memory <b>2034</b>, as well as the shared key. These can be identified by the user hash which can be stored in the user access table, which is then linked to this particular address location in the memory <b>2034</b>. The memory <b>2034</b>, of course, can be erased in a block erase operation, as it is a FLASH memory. It is just that any Read operation through any external interface is prohibited.</p><p id="p-0155" num="0207">During operation, as described hereinabove, the chip <b>1302</b> has no provision for allowing a Read operation to be performed on the memory <b>2034</b> over any external interface. The only Read operation that is allowed is an internal Read by the encryption engine <b>2032</b> for the purpose of encrypting or decrypting data. In order to allow encryption/decryption of data by the IoT functional block/chip <b>2020</b>. Thus, any data that is to be stored, transmitted or internally processed in a secure manner for a particular user, the IoT functional block/chip <b>2020</b> will make a call to the chip <b>1302</b> for encryption/decryption thereof. This encryption/decryption operation requires the chip <b>1302</b> to access the appropriate shared key and/or private key for any encryption or decryption operation. All that is necessary is for the chip <b>1302</b> to identify the particular user in the user access table in order to determine which shared key/private key is to be utilized for a particular session. In a peer-to-peer session, the server <b>106</b> that is communicating with the IoT device <b>104</b> communicates such that the particular user is known for that particular session. There is no communication required during a peer to peer session through the bonding interface <b>2142</b>. The bonding interface <b>2142</b> is utilized, in this disclosed embodiment, exclusively for the bonding process. As such, the Write operation for the shared key/private key can be controlled by the chip <b>1302</b> in order that access to the shared keys and private keys in the memory <b>2034</b> are protected. One aspect is that the private key of the user is generated in a secure manner on the user device <b>102</b>, and it is the transfer (or imprinting) of the private key to the memory <b>2034</b> that must be achieved with a high level of security. The security is provided by the proximity-based Write-only communication link that virtually eliminates any exposure of the transfer operation of the private key to the memory <b>2034</b> for storage therein. Once transferred (or imprinted), the private key is locked to any external access. From a hardware standpoint, even if the IoT device <b>104</b> were accessed, it will be difficult to extract this private key out of the memory.</p><p id="p-0156" num="0208">Referring now to <figref idref="DRAWINGS">FIG. <b>22</b></figref>, there is illustrated a flowchart depicting, from the perspective of the user, the operations for initiating a bonding operation with the device <b>104</b>, the IoT device. As an overview, it is desirable that the interface with any IoT device in order to establish an encrypted relationship for communication therewith be relatively straightforward. In accordance with the processes described hereinabove, a user is required merely to have access to their user PIN and unique photograph or image in the application residing on their device <b>102</b>. All is required is to place their device in proximity to the IoT device <b>104</b>, input their ID pin and associated photograph or image into the application and then depress a button on the IoT device <b>104</b>. This operation will interface between the server <b>106</b> and the device <b>104</b> in order to generate a secure or private key at the user device, connect to the IoT device <b>104</b> and transfer thereto the secure or private key to allow a peer to peer communication thereafter. This is all affected with the mere placement of the user device <b>102</b> adjacent the NFC communication interface of the IoT device <b>104</b> and subsequent depressing of a button to a physical interaction with the IoT device <b>104</b>.</p><p id="p-0157" num="0209">The process is initiated at Start block <b>2202</b> from the perspective of the user and then proceeds to a function block <b>2204</b> wherein the user places their user device <b>102</b> adjacent to the NFC communication coil of the IoT device <b>104</b> to establish a near field communication link therewith. The program proceeds to a decision block <b>2206</b> to determine whether the operation has a predefined physical button or interface on the IoT device <b>104</b> or whether there is an operation wherein some physical interface such as a button has to be repurposed for the bonding operation. If this is not a fixed button, that requires the IoT device <b>104</b> to repurpose one of its buttons. If so, the program flows along the &#x201c;N&#x201d; path from decision block <b>2206</b> to a function block <b>2208</b> to display on the display of the user device <b>102</b> configuration information so that the user is informed as to what button or physical interface has been repurposed. As will be described hereinabove, this information is received from the server as a result of connecting to the IoT device <b>104</b> If it is a fixed button, the program will flow from the decision block <b>2206</b> along the &#x201c;Y&#x201d; path to function block <b>2210</b>, which function block <b>2210</b> is also the destination of the output of the function block <b>2208</b>. Therefore, once the user is apprised of the button or physical interface on the IoT device <b>104</b> that will initiate the bonding operation, the user can proceed.</p><p id="p-0158" num="0210">The program then flows to a decision block <b>2212</b> to determine if a secure or private key for the user has been previously generated and stored at the user device <b>102</b>. It is possible for there to be a previously generated secure or private key of the user stored at their device <b>102</b> or, more preferably, the secure or private key of the user is generated each time a bonding operation is initiated. If the secure or private key is not stored, the program will flow from the decision block <b>2212</b> along the &#x201c;N&#x201d; path to a function block <b>2214</b> wherein the unique user PIN and the associated unique image for the secure or private key generation is loaded. The image may actually be stored in the user device <b>102</b>, wherein the user PIN will be input during the bonding operation. The program then flows to a decision block <b>2216</b>, which is also the destination of the decision block <b>2212</b> flowing therefrom along the &#x201c;Y&#x201d; path, to determine if a peer to peer connection has been effected. If not, the program flows on the &#x201c;N&#x201d; path to a block <b>2218</b> to indicate a fault. If successful, the program flows along the &#x201c;Y&#x201d; path to a Done block <b>2220</b>. This operation therefore illustrates how the user, merely by 1) interfacing with the NFC communication channel of the IoT device <b>104</b>, 2) depressing a physical button or other interface and 3) entering their unique user PIN (assuming image was previously stored) to establish a secure peer to peer communication link with an IOT device. This particular device can be a device that only interfaces with this application, wherein communication cannot be enabled without the bonding operation. Thus, any communication is required to be an encrypted secure communication. And they can only be effective with a user that is verified on the system associated with the application running on the user device <b>102</b>.</p><p id="p-0159" num="0211">Referring now to <figref idref="DRAWINGS">FIG. <b>23</b></figref>, there is illustrated a flowchart depicting, from the perspective of the user, the operation wherein the user launches an application, logs into the system in order to retrieve information in order to determine which physical interface will initiate the bonding operation. The program is initiated at a Start block <b>2302</b> and then proceeds to a function block <b>2304</b> wherein the user launches the application and then goes to a login process, as described hereinabove. Of course, the user has to be a previously registered user of the system. The program then flows to a decision block <b>2306</b> in order to verify that the user is a valid user and, if so, the program flows along the &#x201c;Y&#x201d; path to a function block <b>2310</b>, which indicates an operation wherein the user places the user device <b>102</b> adjacent to the NFC communication coil of the IoT device <b>104</b>. If, of course, the user has not been verified by the server <b>106</b>, the program will flow along the &#x201c;N&#x201d; path from the decision block <b>2306</b> to a block <b>2308</b> to reject the login operation. Of course, it could be that the user had input the wrong user ID and/or user password. In any event, the login operation failed at this point.</p><p id="p-0160" num="0212">The program proceeds from the function block <b>2310</b> to a decision block <b>2312</b> to wait for a connection to be established between the user device <b>102</b> and the IoT device <b>104</b>. Once connected, the program flows along the &#x201c;Y&#x201d; path to a function block <b>2314</b> wherein the user device requests an ESID unique to the IoT device <b>104</b> from the IoT device <b>104</b>. This request could be affected merely by connection and the user device <b>102</b> identifying itself to the IoT device <b>104</b> or there could actually be a request transmitted to the IoT device <b>104</b> from the user device <b>102</b> with a specific request for the ESID, which would require some type of identification. However, it may be that the application itself has the ability to effect this communication regardless of what user device <b>102</b> is interfaced with the IoT device <b>104</b>. In any event, the IoT device <b>104</b> recognizes the connection with the user device <b>102</b> and the need to transmit an ESID thereto in order to initiate a bonding operation. The program then flows along an &#x201c;Y&#x201d; path to decision block <b>2316</b> wherein the user device <b>102</b> waits for receipt of the ESID from the IoT device <b>104</b>. Once received, the program flows along the &#x201c;Y&#x201d; path to a function block <b>2318</b>. At this point, the user device can utilize this ESID for the purpose of identifying the IOT device <b>104</b> with respect to any configuration information needed to effect a peer-to-peer communication therewith on a secure basis.</p><p id="p-0161" num="0213">Once received, the ESID is transmitted to the server at the function block <b>2318</b>. The program flows to a decision block <b>2320</b> in order for the server to verify the ESID as being an IoT device that is registered with the system. If so, the program will flow from the decision block <b>2320</b> along a &#x201c;Y&#x201d; path to a function block <b>2324</b> in order to download configuration information and, if not verified, the program will flow along a &#x201c;N&#x201d; path from the function block <b>2322</b> to a Reject block <b>2322</b>. Configuration information, in one disclosed embodiment, is maintained at the server <b>106</b>, such that it can be downloaded from the server <b>106</b> to any requesting user device <b>102</b>. However, it is possible that the configuration information could actually be stored in and retrieved from the IoT device <b>104</b>, but this would require significantly more storage and processing power in the IoT device <b>104</b> and, as such, storage at the server <b>106</b> is preferable. Once downloaded, this configuration information is displayed on the display of the user device <b>102</b> at a function block <b>2326</b>. The program then flows to a block <b>2328</b>, the operation of which is continued in the flowchart of <figref idref="DRAWINGS">FIG. <b>25</b></figref>, hereinbelow.</p><p id="p-0162" num="0214">Referring now to <figref idref="DRAWINGS">FIG. <b>24</b></figref>, there is illustrated a diagrammatic view of the user device <b>102</b> disposed in close proximity to the IoT device <b>104</b> via a near field communication link <b>2411</b>. The user device <b>102</b> illustrates a display <b>2420</b> that the user can view. The IoT device <b>104</b> has a panel <b>2402</b> illustrated which basically has various controls in the such for operating the IOT device <b>104</b> in its normal function. For example, this could be a smart refrigerator wherein the user can interface with the various controls necessary to operate the smart refrigerator. Thus, there is illustrated a keypad <b>2406</b> and the plurality of functional buttons <b>2408</b>, <b>2409</b>, <b>2410</b> and <b>2412</b> on the panel <b>2402</b>. When the user device <b>102</b> downloads the configuration information from the server <b>106</b>, this configuration information, and one disclosed embodiment, can be a visual display of the control panel <b>2402</b>. This would thus have displayed thereon a representation of the keypad <b>2406</b> as a keypad <b>2406</b>&#x2032;, the buttons <b>2408</b>, <b>2409</b>, <b>2410</b> and <b>2412</b> as representations <b>2408</b>&#x2032;, <b>2409</b>&#x2032;, <b>2410</b>&#x2032; and <b>2412</b>&#x2032;. In this configuration, it is noted that the representation of the button <b>2410</b>, representation <b>2410</b>&#x2032;, has a large &#x201c;X&#x201d; marked therethrough. This indicates that this particular button <b>2410</b> on the panel <b>2402</b> has been repurposed for the bonding operation. Of course, as noted hereinabove, there could be a fixed button or physical interface that is the bonding operation activation button or physical interface, and this would be indicated on the display <b>2420</b> to indicate to the user exactly which physical interface is required for the bonding operation. Even though this physical interface may have a large label &#x201c;Bonding Operation&#x201d; disposed in association therewith, it is helpful for the user to know the location of this particular bonding operation button or physical interface. It may also be that this button or physical interface is hidden on a side surface and the configuration information sent to the user device <b>102</b> from the server <b>106</b> provides information to the user as to the location of this hidden button or physical interface.</p><p id="p-0163" num="0215">Referring now to <figref idref="DRAWINGS">FIG. <b>25</b></figref>, there is illustrated a continuation of the flowchart from <figref idref="DRAWINGS">FIG. <b>23</b></figref>. This is initiated at a Start block <b>2502</b> and this is from the perspective of the user device <b>102</b>. The program flows to a function block <b>2504</b> in order to display the location of the correct button for bonding, this either being location of a fixed button or a repurposed button. The program then flows to a function block <b>2506</b> wherein the user actually physically depresses this particular button via some type of physical interface, i.e., depressing the indicated button for interfacing with the physical interface indicated on the display <b>2420</b> of the user device <b>102</b>. The program then flows to a function block <b>2508</b> wherein the bonding process is then executed on the user device <b>102</b>, which was described hereinabove and which will be described in more detail hereinbelow. The program then flows to the decision block <b>2510</b> in order to determine if the bonding process has been completed to allow for a peer to peer connection. If not complete, the program flows along an &#x201c;N&#x201d; path to a timeout decision block <b>2512</b> to determine if a timeout operation has occurred, at which time the program will flow along a &#x201c;Y&#x201d; path to a Fail block <b>2514</b>. If not timed out, the program will continue to loop back to the input of the decision block <b>2510</b>. Once the peer to peer connection has been established, the program flows along the &#x201c;Y&#x201d; path to a Done block <b>2516</b>. At this point, it can be appreciated that user has done nothing more than physically depress the indicated button in order to effect a bonding process to establish a peer to peer communication link, which is a secure communication link, wherein a secure or private key of the user has been generated and downloaded to the IoT device <b>104</b>, allowing subsequent secure communication along a peer to peer communication link.</p><p id="p-0164" num="0216">Referring now to <figref idref="DRAWINGS">FIG. <b>26</b></figref>, there is illustrated a flowchart operating from the perspective of the IoT device <b>104</b>. The program is initiated at a block <b>2602</b> and then proceeds to a decision block <b>2604</b>. The IoT device <b>104</b> is in an interactive mode merely waiting to be initialized, in one disclosed embodiment. Until there is a connection from the NFC channel with a communication from the application requesting ESID, the IoT device <b>104</b> is in a standby mode waiting for initialization. The decision block <b>2604</b> and ESID request had been received, at which time it flows from the &#x201c;Y&#x201d; path thereof to a function block <b>2606</b> to transmit the ESID of the IoT device for via the NFC communication link to the user device <b>102</b>. The program then flows to a decision block <b>2608</b> to determine if some repurposing of the input/output (I/O) is required. If so, the program flows along the &#x201c;Y&#x201d; path to a function block <b>2610</b> to reconfigure or repurpose any one of the inputs associated with the operation of the IoT device <b>104</b>, such that a received input will be interpreted as a command to initiate the bonding process. This could be a button that, for example, indicates on a smart refrigerator in normal operation a selection of the type of ice but, in a bonding process, initiates the bonding process. If it is a physical interface that is dedicated to the bonding process, the program will flow from the decision block <b>2608</b> along the &#x201c;N&#x201d; path to a decision block <b>2612</b>, the same path followed from the function block <b>2610</b> after configuration or repurposing of an input.</p><p id="p-0165" num="0217">The decision block <b>2612</b> determines whether an external activation has been received. Until an external activation has been received, the program flows along a &#x201c;N&#x201d; path to a timeout decision block <b>2614</b>. If the decision block <b>2614</b> times out, the program flows along a &#x201c;Y&#x201d; path to an exit block <b>2616</b> and, if no timeout has occurred, the program looks back around to the input of the decision block <b>2612</b>. Once the external activation has been received, the program flows along a &#x201c;Y&#x201d; path from the decision block <b>2612</b> to a function block <b>2618</b>. This indicates the initiation of the bonding process. The program then flows to a decision block <b>2622</b> to determine if the shared key from the server has been received. As described above, in the bonding process, the server <b>106</b> will create a shared device to server key that allows the IoT device <b>104</b> to communicate directly with the server <b>106</b>. This is part of the bonding process. The program then flows along a &#x201c;Y&#x201d; path to a function block <b>2622</b>, once the shared key has been received, for storage of the shared key. The program then flows to a decision block <b>2624</b> to wait for receipt of the secure or private key of the user and other associated information, as described hereinabove in accordance with the bonding process. Once received, the program flows from the decision block <b>2624</b> along a &#x201c;Y&#x201d; path to a function block <b>2626</b> for storage of the secure or private key of the user in memory. The program then flows to a function block <b>2628</b> to complete the process and establish a peer to peer link with the user device <b>102</b>. As described here above, this is just a completion of the bonding process, wherein the IoT device <b>104</b> is now able to communicate with the user device <b>102</b> via a communication link other than the NFC communication link. In one embodiment, it may be that the user device <b>102</b> will send a test message to the IoT device <b>104</b> via an external communication link. Typically, there will be some type of 802.15.XX communication channel that can be established by the IoT device <b>104</b>, but which require some type of configuration information to effect a connection between the IOT device <b>104</b> and some router that is disposed thereby. This may be an additional configuration step that is required by the user, i.e., a basic set up of the IoT device <b>104</b>. Once complete, the program flows to a Done block <b>2630</b>.</p><p id="p-0166" num="0218">Referring now to <figref idref="DRAWINGS">FIG. <b>27</b></figref> and <figref idref="DRAWINGS">FIG. <b>28</b></figref>, there is illustrated the process for bonding with the user device <b>102</b>, the sequence illustrating specifically the bonding process for user device <b>102</b> to the IoT device <b>104</b>, which was described similarly with respect to <figref idref="DRAWINGS">FIG. <b>12</b></figref> and <figref idref="DRAWINGS">FIG. <b>13</b></figref> hereinabove, this being different in that <figref idref="DRAWINGS">FIG. <b>12</b></figref> and <figref idref="DRAWINGS">FIG. <b>13</b></figref> required the use thereof by a group. With specific reference to <figref idref="DRAWINGS">FIG. <b>27</b></figref>, the first step is for a user <b>2702</b> to connect user device <b>102</b> to either NFC or USB, in order to establish a connection to the IoT device <b>104</b> and follow through the bonding process. The connection established between the user device <b>102</b> and the IoT device <b>104</b> will result in a request for an ESID to be transmitted from the IoT device <b>104</b> to the user device <b>102</b>. The IoT device <b>104</b> will respond with its ESID and the application on the user device <b>102</b> will then verify the IoT device <b>104</b> ESID with the server <b>106</b>. If the ESID is not valid, the device bonding process will terminate. In the illustration in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, the device <b>104</b> is illustrated as being an IoT camera that has associated therewith an encryption engine in the form of a separate chip <b>1302</b>. This separate chip <b>1302</b>, as described hereinabove, is the device upon which the secure or private key of the user is stored and is also the device that encrypts data on the IoT device <b>104</b>. It is basically the encryption engine of the IoT that forms a part of the IoT device <b>104</b>. <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates the NFC/USB connection as path {circle around (<b>2</b>)} and the request for the ESID from the device <b>104</b> along path {circle around (<b>3</b>)} with the ESID transmitted to the application <b>804</b> along path {circle around (<b>4</b>)}. The application <b>804</b> will then verify the ESID with the server <b>106</b> along path {circle around (<b>5</b>)}, with the validation operation occurring at {circle around (<b>6</b>)}. If the ESID is not valid, the device bonding process will terminate. If valid, the server <b>106</b> will then transmit configuration information along a path &#x201c;{circle around (<b>4</b>)}a&#x201d; to the user device <b>102</b>. As described above, this configuration information provides information regarding the specific IoT device <b>104</b>, as defined at the server through a lookup operation associated with the received ESID of the IoT device <b>104</b>. The user then presses a contact button on the IoT device <b>104</b> while still being connected to the IoT device <b>104</b> via USB/NFC. This is operation {circle around (<b>1</b>)} in <figref idref="DRAWINGS">FIG. <b>28</b></figref>. This differs from the operation in <figref idref="DRAWINGS">FIG. <b>12</b></figref> and <figref idref="DRAWINGS">FIG. <b>13</b></figref>, in that the ESID is not transmitted until after the button is pressed.</p><p id="p-0167" num="0219">After the button is pressed, the application <b>804</b> running on the user device <b>102</b> interfaces with the server <b>106</b> and the server <b>106</b> then creates a device shared key to establish a trusted relationship between the server and the IoT device <b>104</b>, this being a device-to-server key. This device shared encryption key will be registered in the IoT device <b>104</b> through the system application's (<b>804</b>) connection to the IoT device <b>104</b>, but not on the actual application <b>804</b> itself. This is illustrated as the path {circle around (<b>7</b>)} which path illustrates the shared key being passed to the application <b>804</b> and then the user secure or private key plus the user hash plus the shared key is then relayed to the chip <b>1302</b> in the IoT device <b>104</b>. This is a registration process of the shared encryption key with the IoT device <b>104</b>. Paths {circle around (<b>8</b>)} and {circle around (<b>9</b>)} illustrate the transmission of the user hash+shared key, respectively. This operation comprises the registration of the user secure or private key into the IoT device <b>104</b> (and not in the application <b>804</b> on the user device <b>102</b>), this being the created user private key from the user PIN/image dataset. It is noted that this diagram relates to registration of the user secure or private encryption key with the IoT device <b>104</b>. For this registration of a single user, the private (or secure) key of the user will be registered with the IoT device <b>104</b>. This means that it will be stored in memory on IoT device <b>104</b> for use with encryption/decryption. Thereafter, the user hash for the user will be transferred. Thus, the overall bonding process is a sequence wherein 1) the user disposes the user device <b>102</b> upon which the application <b>804</b> is running proximate to the IoT device <b>104</b> in order to establish a proximity-based communication link, 2) the application, once a connection is made, requests the ESID from the device (or just the connection results in interpretation by the IoT device <b>104</b> as being a request), 3) the device responds with ESID to the application <b>804</b>, 4) the application verifies the IoT device <b>104</b> ESID with the server <b>106</b>, 5) the server <b>106</b> verifies the ESID, 6) the user presses a contact button on the IoT device <b>104</b>, 7) the server <b>106</b> creates a shared encryption key for device-to-server communication, 8) the shared encryption key is returned from the server <b>106</b> to the application <b>804</b>, 9) the application <b>804</b> then registers the shared encryption key with the IoT device <b>106</b>, and 10) the secure or private key of the user is registered with the IoT device <b>104</b>. As described in hereinabove, this is a Write Only operation to memory on the IoT device <b>104</b> that cannot be read from the device <b>104</b>.</p><p id="p-0168" num="0220">With respect to <figref idref="DRAWINGS">FIG. <b>27</b></figref>, the paths are defined as follows: 2) connect via USB or NFC to IoT device <b>104</b> through application <b>804</b>; 3) request ESID from IoT device <b>104</b>; 4) receive ESID from IoT device <b>104</b>; 5) validate ESID with server <b>106</b>; 1) press button on IoT device <b>104</b>; 6) create device shared key to define a trusted relationship between the server <b>106</b> and the IoT device <b>104</b>; 7) send shared key from server <b>106</b> to IoT device <b>104</b> through application <b>804</b>; and 8) send user secure or private key+user hash.</p><p id="p-0169" num="0221">Referring now to <figref idref="DRAWINGS">FIG. <b>29</b></figref>, there is illustrated a flowchart depicting the general operation of initially configuring the IoT device <b>104</b> via both an encrypted operation and an unencrypted operation. This should be appreciated that an IoT device will have a normal mode of operation that a manufacture may desire to operate independently of the encrypted mode of operation, i.e., it may be that the manufacturer wants some communication link between its IoT device and its server via a preloaded and proprietary encryption key. As such, any user can interface with the IoT device for the use of operating it in a normal mode. For example, if a user purchases a smart refrigerator, it would be desirable that any user can at least use the IoT device in a normal functioning fashion independent of any user-based encryption requirement. For example, it may be that any user can access the IoT device and configure it to operate as a, for example, smart refrigerator. This may require the user to configure the network connection to a router and register the IoT device with the manufacturer. This, of course, requires some type of manufacturer encryption. Of course, the manufacturer now has access to all of data on the IoT device. There can be two modes of operation. A first mode can be one wherein the manufacturer allows an unencrypted configuration of the IoT device that allows communication to be effected with the manufacturer server in a manufacture-based encryption operation followed by the possibility of a user then going to a bonding process to provide the user's secure or private key for storage by the IoT device and subsequent communication on a user-encrypted basis. In this first mode, it is possible that certain information or manufacturer-encrypted data can be sent to the manufacturer's server via manufacturer-encrypted communication and user-encrypted data can be controlled by the user. It may be that the user wants to store this user-encrypted data, encrypted with the user's private key, for storage on the manufacture process server. In any event, when the user posse is private key is stored on the IOT device, and a communication with the user can only be decrypted by the user and any communication from the user to the IoT device can only be decrypted by the IoT device.</p><p id="p-0170" num="0222">A specific reference to <figref idref="DRAWINGS">FIG. <b>29</b></figref>, the program is initiated at a block <b>2902</b> on the device and then proceeds to a decision block <b>2904</b> to determine if the IoT device is one that can only be interfaced through a bonding process, i.e., it is only accessible by the user on an encrypted user private key basis. If so, the program proceeds along a &#x201c;Y&#x201d; path and if not, the program proceeds along and &#x201c;N&#x201d; path. Along the &#x201c;N&#x201d; path, this indicates that IoT device can communicate in an unencrypted manner. The program flows to a function block <b>2914</b> to interface with a user without encryption. The program then flows to a function block <b>2916</b> where the user is allowed to interface with the IoT device and perform any type of configuration necessary to operate the device independent of a network, interface with a network or interface with a manufacturer's server. The program flows to a decision block <b>2918</b> to determine if the overall configuration operation is complete and, if not, it loops back around to the input of the function block <b>2914</b>. When complete, the program flows along a &#x201c;Y&#x201d; path from decision block <b>2918</b> to a decision block <b>2922</b>. The decision block <b>2922</b> determines whether an additional encryption operation is to be provided in order to allow encrypted communication with the user based on a user private key requiring the above described bonding process with respect to the user's interface with the IoT device. If not, the program flows along an &#x201c;N&#x201d; path to a Done block <b>2920</b> to terminate the configuration operation.</p><p id="p-0171" num="0223">If, after allowing unencrypted interface of the user with the IoT device and then determining at the decision block <b>2922</b> that further encryption of the user is selected based on the above described bonding process or that the initial decision at decision block <b>2904</b> was that the IoT device only interfaces with a user based upon encryption associated with the above described bonding process, the program will flow from either decision block <b>2904</b> or decision block <b>2922</b> along the &#x201c;Y&#x201d; paths therefrom to decision block <b>2906</b> to determine if the user has been bonded with the IoT device in accordance with the bonding process described hereinabove. If so, the program proceeds from the decision block <b>2906</b> to function block <b>2908</b> to interface with the user in an encrypted manner. This allows a user to configure the IoT device through user private key-based encryption, as noted in a function block <b>2910</b>. At this stage, if the IoT device was set up to only interface with the user exclusively with the user private key, all the configuration would be done at this step in an encrypted manner based on the user private key. If, however, some configuration or all configuration had been completed at the function one <b>2916</b> without using the user private key for encryption, thus configuration would be required. The program then flows to a decision block <b>2912</b> to determine when the operation is complete and, when complete, the program flows from decision block <b>2912</b> along a &#x201c;Y&#x201d; path to the Done block <b>2920</b>. In this operation set forth in the flowchart of <figref idref="DRAWINGS">FIG. <b>29</b></figref>, the IoT device can interface exclusively with a user in accordance with the bonding process, requiring the unique private key of the user generated from the unique picture/image and user PIN, or from a combination of an unencrypted initial configuration (user private key encryption) followed by encrypted communication based on the user generated private key operation in accordance with the above described bonding process.</p><p id="p-0172" num="0224">It will be appreciated by those skilled in the art having the benefit of this disclosure that these techniques for generating quantum resistant keys provide increased cryptographic security for communications between IoT devices and devices used by owners of the IoT devices to interface with the IoT devices. It should be understood that the drawings and detailed description herein are to be regarded in an illustrative rather than a restrictive manner, and are not intended to be limiting to the particular forms and examples disclosed. On the contrary, included are any further modifications, changes, rearrangements, substitutions, alternatives, design choices, and embodiments apparent to those of ordinary skill in the art, without departing from the spirit and scope hereof, as defined by the following claims. Thus, it is intended that the following claims be interpreted to embrace all such further modifications, changes, rearrangements, substitutions, alternatives, design choices, and embodiments.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230006815A1-20230105-M00001.NB"><img id="EMI-M00001" he="7.79mm" wi="76.20mm" file="US20230006815A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230006815A1-20230105-M00002.NB"><img id="EMI-M00002" he="6.01mm" wi="76.20mm" file="US20230006815A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. Apparatus for storing a private key on an Internet of Things (IoT) device for encrypted communication with an external user device having the same private key, comprising:<claim-text>a proximity-based communication interface;</claim-text><claim-text>encryption circuitry for facilitating encryption and decryption operations on the IoT device with the private key;</claim-text><claim-text>IoT functional circuitry for facilitating a predetermined IoT functional operation for the IoT device;</claim-text><claim-text>the encryption circuitry including:<claim-text>a memory having a dedicated memory location allocated for storage of encryption keys utilized in the encryption and decryption operations,</claim-text><claim-text>an encryption engine for performing the encryption and decryption operations with at least one of the stored encryption keys in association with the predetermined IoT functional operation of the IoT functional circuitry,</claim-text><claim-text>an input and output interface for interfacing with the proximity-based communication interface to allow information to be exchanged with the external user device in a dedicated private key transfer operation,</claim-text><claim-text>an internal system interface for interfacing with the IoT functional circuitry for transfer of information therebetween, and</claim-text><claim-text>memory control circuitry for controlling storage of a received private key from the input and output interface for storage in the dedicated memory location in the memory, in a Write-only memory storage operation relative to the private key received from the input and output interface over the proximity-based communication interface, the memory control circuitry inhibiting any Read operation of the dedicated memory location in the memory through the input and output interface; and</claim-text></claim-text><claim-text>the IoT functional circuitry including:<claim-text>a controller for controlling the input and output interface and the memory control circuitry in the private key transfer operation to interface with the external user device to control the encryption circuitry for transfer of a private key from the external user device through the proximity-based communication interface for storage in the dedicated memory location in the memory,</claim-text><claim-text>the controller interfacing with the encryption circuitry via the internal system interface, and</claim-text><claim-text>operational circuitry for interfacing with the external user device over a peer to peer communication link and encrypting and decrypting information therebetween with the encryption engine in the encryption circuitry.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the proximity-based communication interface is only accessible with the input and output interface of the encryption circuitry for transfer of the private key and information associated with the transfer.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the encryption circuitry is contained on a first and encryption chip and the IoT functional circuitry is included on a second and IoT functional chip.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the proximity-based communication interface is a Near Field communication (NFC) interface.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the proximity-based communication interface is a Universal Serial Bus (USB) communication interface.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the encryption circuitry is operable in the private key transfer operation to receive a server-to-device encryption key over the proximity-based communication interface under control of the input and output interface for storage in the dedicated memory location in the memory, wherein the server-to-device encryption key allows the IoT functional circuitry to fumigate with a remote server, which remote server associated with the peer to peer communication link with the external user device.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the remote server is associated with the private key transfer operation.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the IoT functional circuitry includes a memory for storing a unique identification code for uniquely identifying the IoT device and wherein the private key transfer operation is initiated upon receiving a request over the proximity-based communication interface through the input and output circuitry for the unique identification code.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the encryption circuitry has an interrupt included as a portion of the internal system interface for notifying the IoT functional circuitry of the receipt of the request for the unique identification code.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. A system for secure encrypted communication, comprising:<claim-text>an Internet of Things (IoT) device;</claim-text><claim-text>a user device comprising a memory, the user device for communicating with the IoT device utilizing a private key unique to a user of the user device;</claim-text><claim-text>a proximity-based communication interface disposed between the IoT device and the user device;</claim-text><claim-text>the IoT device including:<claim-text>encryption circuitry for facilitating encryption and decryption operations on the IoT device with the private key,</claim-text><claim-text>the encryption circuitry including:<claim-text>a memory for storage of the private key,</claim-text><claim-text>an encryption engine for performing the encryption and decryption operations with the stored private key,</claim-text><claim-text>an input and output interface for interfacing with the proximity-based communication interface to allow information to be exchanged with the user device in a dedicated private key transfer operation,</claim-text><claim-text>an internal system interface for interfacing with IoT functional circuitry for transfer of information therebetween, and</claim-text><claim-text>memory control circuitry for controlling storage of a received private key from the input and output interface for storage in a dedicated memory location in the memory of the encryption circuitry, in a Write-only memory storage operation relative to the private key received from the input and output interface over the proximity-based communication interface, the memory control circuitry inhibiting any Read operation of the dedicated memory location in the memory of the encryption circuitry through the input and output interface, and</claim-text></claim-text><claim-text>the IoT functional circuitry for facilitating a predetermined IoT functional operation for the IoT device, and including:<claim-text>a controller for controlling the input and output interface and the memory control circuitry in the private key transfer operation to interface with the user device to control the encryption circuitry for transfer of a private key from the user device through the proximity-based communication interface for storage in the memory of the encryption circuitry,</claim-text><claim-text>the controller interfacing with the encryption circuitry via the internal system interface, and</claim-text><claim-text>operational circuitry for interfacing with the user device over a peer to peer communication link and encrypting and decrypting information therebetween with the encryption engine in the encryption circuitry.</claim-text></claim-text></claim-text></claim-text></claim></claims></us-patent-application>