<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004381A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004381</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17896677</doc-number><date>20220826</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>658</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>658</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>71</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SOFTWARE VERSION ROLLBACK METHOD, APPARATUS, AND SYSTEM</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2020/077294</doc-number><date>20200228</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17896677</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>HUAWEI TECHNOLOGIES CO., LTD.</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>MA</last-name><first-name>Tao</first-name><address><city>Beijing</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A software version rollback method, apparatus, and system are provided, which can be applied to the field of intelligent vehicle. The method includes: obtaining a differential update package of target software; updating a current version of the target software by using the differential update package, where the current version of the target software is updated from a first version to a second version; and when there is a rollback requirement, performing rollback on the target software by using the differential update package, to roll back the current version of the target software to the first version. When software version rollback is performed on the target software, a complete installation file of target software of an old version does not need to be re-downloaded from an update server, and the backed up old version, which timely software rollback can be implemented while occupancy of storage space of a vehicle is reduced.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="53.09mm" wi="158.75mm" file="US20230004381A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="176.02mm" wi="153.84mm" file="US20230004381A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="205.23mm" wi="84.33mm" orientation="landscape" file="US20230004381A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="145.71mm" wi="148.67mm" file="US20230004381A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="144.86mm" wi="153.67mm" file="US20230004381A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="118.11mm" wi="151.30mm" file="US20230004381A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="208.28mm" wi="158.92mm" file="US20230004381A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="146.64mm" wi="124.88mm" file="US20230004381A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="103.80mm" wi="117.35mm" file="US20230004381A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of International Application No. PCT/CN2020/077294, filed on Feb. 28, 2020, the disclosure of which is hereby incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This application relates to the field of computer technologies, and in particular, to a software version rollback method, apparatus, and system.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">With development of intelligent connected vehicles, more vehicles have a network access function, and a new vehicle software update manner, that is, over the air (over the air, OTA) emerges. OTA implements updating vehicle software by using an air communications interface, for example, Wi-Fi, long term evolution (long term evolution, LTE), and a satellite. A vehicle obtains software of a new version through OTA for system update.</p><p id="p-0005" num="0004">During installation of the software of the new version, installation failure or abnormal running of the software of the new version may occur. This results in unavailability of software-related functions, and some functions of the vehicle further become unavailable after the update. In this case, the software needs to be rolled back to the old version used before the update in a timely manner to ensure normal and secure running of vehicle functions.</p><p id="p-0006" num="0005">Currently, before software of a new version is installed, the vehicle backs up a software package of an old version for rollback. When an update exception occurs, the software of the old version is reinstalled on the vehicle to implement rollback. Because storage space in the vehicle is limited, and the software of the old version backed up occupies large storage space, storage space of the vehicle needs to be increased to meet a storage requirement, which increases storage costs of the vehicle.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">This application provides a software version rollback method, apparatus, and system, so that a driving system can be rolled back and run based on software of an old version while occupancy of storage space of a vehicle is reduced, to ensure running security (security) of a terminal.</p><p id="p-0008" num="0007">According to a first aspect, an embodiment of this application provides a software version rollback method. The method may be implemented by a terminal device (for example, a vehicle), or may be implemented by a component of a terminal device, for example, implemented by a component such as a processing apparatus, a circuit, or a chip in the terminal device. The method includes: A terminal device obtains a differential update package of target software, and updates a current version of the target software by using the differential update package, where the current version of the target software is updated from a first version to a second version; and when detecting that there is a rollback requirement for the target software, the terminal device performs rollback on the target software by using the differential update package, to roll back the current version of the target software to the first version.</p><p id="p-0009" num="0008">The differential update package includes at least one differential operation instruction, and the differential operation instruction is used to indicate a difference between the current first version of the target software and the second version to which the target software is to be updated.</p><p id="p-0010" num="0009">In the foregoing method, when the terminal device implements software version rollback on the target software, a complete installation file of target software of an old version does not need to be re-downloaded from an update server, and the complete installation file of the target software of the old version does not need to be backed up. The terminal device may directly use the differential update package used for updating the target software to roll back the target software, so as to roll back to the old version for running. In this way, timely software rollback can be implemented while occupancy of storage space of a vehicle is reduced.</p><p id="p-0011" num="0010">In a possible design, the differential update package includes at least one differential operation instruction, the differential operation instruction includes an instruction type and differential data, and the differential data includes a first address space and/or first data stored in the first address space in the first version, and second data and/or a second address space in the second version.</p><p id="p-0012" num="0011">In a possible design, the method further includes: generating a differential rollback package based on the differential update package. The differential rollback package is obtained in the following manner. First, the at least one differential operation instruction arranged in the differential update package is rearranged according to a preset sequence. For example, when differential operation instructions in the differential update package are arranged according to an execution sequence in chronological order, the preset sequence may be a sequence in reverse chronological order. For another example, the differential operation instructions in the differential update package are arranged according to the execution sequence in reverse chronological order, and the preset sequence may be a sequence in chronological order. Then the differential rollback package is obtained by replacing each rearranged differential operation instruction with a reverse differential operation instruction corresponding to the differential operation instruction. The reverse differential operation instruction corresponding to the differential operation instruction indicates performing a second differential operation according to the reverse differential operation instruction after a first differential operation is performed according to the differential operation instruction, to roll back a version of the target software to a state existing before the first differential operation is performed. The performing rollback on the target software by using the differential update package includes: rolling back the target software by using the differential rollback package.</p><p id="p-0013" num="0012">In the foregoing method, when rolling back the software version of the target software, the terminal device may generate the differential rollback package by using the differential update package of the target software, and may roll back the target software in time by using the differential rollback package, to roll back the target software to the old version for running. This can shorten time spent on rollback and reduce storage space used for software update and software rollback. In addition, in this embodiment of this application, the manner of generating the differential rollback package based on the differential update package is simple and efficient, and computing overheads are low.</p><p id="p-0014" num="0013">In a possible design, the instruction type includes but is not limited to ignoring, shift, insertion, deletion, or replacement.</p><p id="p-0015" num="0014">For example, when the instruction type of the differential operation instruction is shift, the differential operation instruction is used to instruct to shift the first data from the first address space to the second address space. The second address space is an address space other than the first address space in a first system. The reverse differential operation instruction corresponding to the differential operation instruction is to shift the first data in the second address space back to the first address space.</p><p id="p-0016" num="0015">For another example, when the instruction type of the differential operation instruction is insertion, the differential operation instruction is used to instruct to add the second address space in the first system, and add the second data included in the differential operation instruction to the second address space. The reverse differential operation instruction corresponding to the differential operation instruction is to delete the second address space.</p><p id="p-0017" num="0016">For another example, when the instruction type of the differential operation instruction is deletion, the differential operation instruction is used to instruct to delete the first address space and the first data stored in the first address space. The reverse differential operation instruction corresponding to the differential operation instruction is to add the first address space and add the first data to the first address space.</p><p id="p-0018" num="0017">For another example, when the instruction type of the differential operation instruction is replacement, the differential operation instruction is used to instruct to replace the first data in the first address space with the second data. The reverse differential operation instruction corresponding to the differential operation instruction is to replace the second data in the first address space with the first data.</p><p id="p-0019" num="0018">According to a second aspect, an embodiment of this application provides a software version rollback method. The method may be implemented by an update server, or may be implemented by a component of a software update server, for example, implemented by a component such as a processing chip or a circuit in the software update server. The method includes: receiving a download instruction from a software version rollback apparatus, where for example, the download instruction includes information of target software, for example, a name of the target software and a version number of a version to which the target software is to be updated; and sending a differential update package to the software version rollback apparatus.</p><p id="p-0020" num="0019">In a possible design, the update server generates a differential rollback package by using the differential update package; and sends the differential rollback package to the software version rollback apparatus.</p><p id="p-0021" num="0020">According to a third aspect, an embodiment of this application provides a communications apparatus. The apparatus has a function of implementing the method in the first aspect. The function may be implemented by hardware, or may be implemented by software, or may be implemented by hardware that executes corresponding software. The apparatus includes one or more modules corresponding to the foregoing function, for example, includes a transceiver unit and a processing unit.</p><p id="p-0022" num="0021">In a possible design, the apparatus may be a chip or an integrated circuit.</p><p id="p-0023" num="0022">In a possible design, the apparatus includes a memory, a processor, and a transceiver. The transceiver is configured to receive and send data. The memory is configured to store a program or instructions executed by the processor. When the program is executed or the instructions are executed by the processor, the apparatus may perform the method in the first aspect and various possible designs of the first aspect.</p><p id="p-0024" num="0023">In a possible design, the apparatus may be a terminal device.</p><p id="p-0025" num="0024">According to a fourth aspect, an embodiment of this application provides an update server. The apparatus has a function of implementing the method in the first aspect. The function may be implemented by hardware, or may be implemented by software, or may be implemented by hardware that executes corresponding software. The apparatus includes one or more modules corresponding to the foregoing function, for example, includes a transceiver unit and a processing unit.</p><p id="p-0026" num="0025">In a possible design, the apparatus may be a chip or an integrated circuit.</p><p id="p-0027" num="0026">In a possible design, the apparatus includes a memory, a processor, and a transceiver. The transceiver is configured to receive and send data. The memory is configured to store a program or instructions executed by the processor. When the program is executed or the instructions are executed by the processor, the apparatus may perform the method in the first aspect and various possible designs of the first aspect.</p><p id="p-0028" num="0027">In a possible design, the apparatus may be an OTA server.</p><p id="p-0029" num="0028">According to a fifth aspect, an embodiment of this application provides an apparatus. The apparatus includes a processor, a memory, and a communications interface. The communications interface is configured to receive or send a signal. The memory is configured to store a program or instruction code. The processor is configured to invoke the program or the instruction code from the memory to perform the method in the first aspect or perform the method in the second aspect and the possible designs of the second aspect.</p><p id="p-0030" num="0029">According to a sixth aspect, an embodiment of this application provides an apparatus. The communications apparatus includes a processor and an interface circuit, and the interface circuit is configured to: receive a program or instruction code and transmit the program or the instruction code to a processor. The processor runs the program or the instruction code to perform the method in the first aspect and the possible designs of the first aspect, or the method in the second aspect and the possible designs of the second aspect.</p><p id="p-0031" num="0030">According to a seventh aspect, an embodiment of this application provides a computer-readable storage medium. The computer-readable storage medium is configured to store a program or instructions. When the program is executed or the instructions are executed, the method in the first aspect and the possible designs of the first aspect, or the method in the second aspect and the possible designs of the second aspect is implemented.</p><p id="p-0032" num="0031">According to an eighth aspect, an embodiment of this application provides a computer program product including instructions. When the instructions are executed, the method in the first aspect and the possible designs of the first aspect, or the method in the second aspect and the possible designs of the second aspect is implemented.</p><p id="p-0033" num="0032">According to a ninth aspect, an embodiment of this application further provides a software version rollback system, including an update server and a software version rollback apparatus. The software version rollback apparatus may perform a corresponding function in any one of the first aspect or the possible implementations of the first aspect, and the update server may perform a corresponding function in any one of the second aspect or the possible implementations of the second aspect. For details, refer to detailed description in method examples. The details are not described herein again.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of a system architecture according to this application;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic flowchart of software update according to this application;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic flowchart of a software rollback method according to an embodiment of this application;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of differential document generation according to an embodiment of this application;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of a scenario of differential rollback package generation according to an embodiment of this application;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>6</b></figref> and <figref idref="DRAWINGS">FIG. <b>7</b></figref> are schematic diagrams of vehicle system architectures according to this application; and</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>8</b></figref> to <figref idref="DRAWINGS">FIG. <b>10</b></figref> are schematic diagrams of software version rollback apparatuses according to embodiments of this application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0041" num="0040">To make objectives, technical solutions, and advantages of this application clearer, the following further describes this application in detail with reference to accompanying drawings. A specific operation method in a method embodiment may also be applied to a device embodiment or a system embodiment.</p><p id="p-0042" num="0041">As the automobile industry is in continuous development, more software is installed on vehicles. Specifically, the software installed on the automobiles is usually installed on an electronic control unit (electronic control unit, ECU). For example, an anti-lock brake system, an automatic transmission system, a multimedia system, an auxiliary brake system, a cruise control system, an air conditioning system, an actuation system, a suspension system, a safety system, and the like in a vehicle all include ECUs. Various complex control logic and computing functions in each system may be run on the ECUs in the systems in a form of software, so that the vehicle can properly operate.</p><p id="p-0043" num="0042">It should be noted that some or all systems included in a vehicle may be integrated into a same ECU, or may be separately deployed on different ECUs. This is not limited in embodiments of this application.</p><p id="p-0044" num="0043">It should be understood that the method and the apparatus provided in embodiments of this application may be applied to vehicles such as a smart car (smart/intelligent car), a digital car (digital car), an unmanned car/driverless car (unmanned car/driverless car), or a self-driving car (self-driving car).</p><p id="p-0045" num="0044">Currently, there are two manners of updating vehicle software. One manner is to update vehicle software in a wired manner by using a dedicated device. The other manner is OTA (over the air, over the air) update. OTA update refers to update or update vehicle software through interaction with a cloud via a wireless communications interface such as Wi-Fi, LTE, or a satellite. When OTA update is adopted, the vehicle software can be updated anytime and anywhere, which is more flexible and convenient.</p><p id="p-0046" num="0045">It should be understood that the vehicle software may include but is not limited to one or more of the following: software related to advanced driver assistance system (advanced driver assistance system, ADAS), software related to infotainment (infotainment, IVI), software related to telematics (telematics), software related to information security (information security), software related to on-board diagnostic (on-board diagnostic, OBD), an operating system (operating system, OS), map (map) software, and the like.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of a system architecture according to an embodiment of this application. Refer to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The system includes a terminal device, an update server, a software development device, and the like.</p><p id="p-0048" num="0047">Some terms in this application are described below, so that a person skilled in the art has a better understanding.</p><p id="p-0049" num="0048">(1) A software development device may be a device used by a software designer to develop application software of an application and a software update package of the application software. As described above, the software update package may be a complete installation file of a new version of the application software, or may be a differential update package of the application software. Optionally, the software development device may be further configured to generate a differential rollback package of the application software based on the software update package of the application software, where the differential rollback package is used to roll back updated application software, so that the new version of the application software is rolled back to an old version.</p><p id="p-0050" num="0049">To be specific, the software update package and the differential rollback package in this embodiment of this application may further carry version numbers used to indicate versions of the application software. A terminal device may download, based on the version numbers, the corresponding software update package or differential rollback package. For example, the version number may be a character or a character string having a special meaning, for example, a current version number of the application software is v.2.0, and a version number of application software of the new version is v.2.1.</p><p id="p-0051" num="0050">Optionally, the software development device may belong to an application vendor or a vendor of a terminal device on which the application software can be installed. This is not limited in this application. For example, the software development device may be a computer, a server, or the like.</p><p id="p-0052" num="0051">(2) An update server may be a third-party device that can store a software update package and a differential rollback package of application software and provide a file (including the software update package and the differential rollback package) download service for a terminal device. Optionally, the update server may be an OTA server or the like.</p><p id="p-0053" num="0052">The update server may establish a connection with a software development device, to obtain a software update package of a new version and a differential rollback package of application software newly developed by the software development device, and store the software update package and the differential rollback package. It should be noted that the foregoing case is provided merely for ease of description. The update server may not simultaneously obtain the software update package and the differential rollback package. For example, the update server obtains only the software update package. This is not limited in this application. In addition, the update server may further establish a connection with the terminal device, to obtain a requirement of the terminal device for updating the application software; select, based on the update requirement, a software update package of the application software with a corresponding version number; and send the selected software update package to the terminal device, so that the terminal device may update the application software.</p><p id="p-0054" num="0053">Optionally, the software development device and the update server may be integrated into a same device, that is, the device has functions of both the software development device and the update server.</p><p id="p-0055" num="0054">(3) An application can provide a corresponding service function for a user. To be specific, a terminal device on which application software of an application is installed may run the application, to implement a service function of the application.</p><p id="p-0056" num="0055">For example, for map navigation software having a GPS positioning function and map information, the map navigation software may be installed on and run by a terminal device, to provide a service function of positioning and navigation for a user. For ease of description, application software is referred to as software for short in the following description.</p><p id="p-0057" num="0056">Due to a half-baked design of a software designer or an incomplete application function, or due to increasing service requirements of a user for an application, the software designer usually further needs to develop a software update package for updating software after the software is released, so as to fix a vulnerability of the software or extend an application function.</p><p id="p-0058" num="0057">It should be noted that software in embodiments of this application may alternatively be an operating system of the terminal device, for example, an Android system.</p><p id="p-0059" num="0058">(4) A terminal device may be a device that provides a user with various corresponding service functions such as a voice function, a video function, a photographing function, and data connectivity when software is installed on and run by the terminal device. In this embodiment of this application, the terminal device may update the software by using software update package downloaded from an update server, to obtain a new version based on an old version that is currently run; or roll back the software by using a differential rollback package, to roll back from the new version to the old version.</p><p id="p-0060" num="0059">In different application scenarios, forms of the terminal device are different, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, in a conventional mobile communications scenario, the terminal device may be a mobile phone, a tablet computer, or the like. In an internet of things (internet of things, IoT) communications scenario, the terminal device may be a mobile internet device, a wearable device, or various wireless terminals in industry or smart household. In an Internet of Vehicles or vehicle to everything (vehicle to everything, V2X) communications scenario, the terminal device may be a vehicle, or may be an on board unit (on board unit, OBU), a road side unit (road side unit, RSU), road side equipment (road side equipment, RSE), an electronic control unit (electronic control unit, ECU), or the like in the Internet of Vehicles.</p><p id="p-0061" num="0060">It should be noted that, in the system provided in this application, the terminal device may establish a communication connection with the update server through a mobile communications network (including an access network and a core network), to perform communication interaction. For example, after the terminal device establishes the connection with the update server, the terminal device may download a software update package and/or a differential rollback package from the update server. The terminal device may alternatively establish the communication connection with the update server through the mobile communications network by using at least one relay device to perform communication interaction. For example, when the terminal device is the electronic control unit in the V2X communications scenario, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the electronic control unit may be connected to the update server through the following relay devices in sequence: a domain controller (domain controller, DC) and a T-Box.</p><p id="p-0062" num="0061">The update server may establish a communication connection to the software development device through a conventional internet protocol (internet protocol, IP) network, to perform communication interaction.</p><p id="p-0063" num="0062">In addition, the architecture shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be applied to a plurality of communications scenarios, for example, the 5th generation (the 5th generation, 5G) communications system, a future 6th generation communications system and another evolved communications system, the 4th generation (the 4th generation) communications system, vehicle to everything (vehicle to everything, V2X), long term evolution-vehicle (LTE-vehicle, LTE-V), vehicle to vehicle (vehicle to vehicle, V2V), Internet of Vehicles, machine type communications (machine type communications, MTC), internet of things (internet of things, IoT), long term evolution-machine to machine (LTE-machine to machine, LTE-M), and machine to machine (machine to machine, M2M). This is not limited in this application.</p><p id="p-0064" num="0063">The following describes an OTA update method for vehicle software. The method may be implemented by a terminal device, or may be implemented by a component of a terminal device, for example, an ECU. The ECU is used as an example herein to describe the OTA update method for vehicle software. The method may be applied to the system architecture shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Refer to <figref idref="DRAWINGS">FIG. <b>2</b></figref>. <figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic flowchart of an OTA update method for vehicle software. A procedure may include the following steps.</p><p id="p-0065" num="0064">Step 1. Generate a software update package. To be specific, a software designer uses a software development device to develop and generate a software update package of a new version of target software, and sends the software update package of the new version to an OTA cloud server; and the OTA cloud server stores the software update package.</p><p id="p-0066" num="0065">Step 2. An ECU in a vehicle downloads the software update package of the new version of the target software from the OTA cloud server. To be specific, after detecting that the OTA cloud server has the software update package of the new version of the target software, the ECU downloads the software update package from the OTA cloud server. The ECU that performs the download operation may be an ECU on which the target software is installed, or may be an ECU used as an update master node. It should be understood that the ECU used as the update master node may manage software update of another ECU on the vehicle, and the another ECU is a slave node of the ECU used as the update master node. The following describes in detail a relationship between the ECU used as the master node and the ECU used as the slave node.</p><p id="p-0067" num="0066">Step 3. The ECU installs the software update package of the new version and updates the target software from a current version to the new version.</p><p id="p-0068" num="0067">Based on different forms of software update packages, the OTA update manner may be further classified into full OTA and differential OTA. In full OTA, a software update package of a new version may include a complete installation file of the target software of the new version. In differential update, the software update package of the new version may be a differential update package of the target software of the new version relative to target software of a current version (or referred to as an old version) run on the ECU. The differential update package may include a difference between the target software of the new version and the target software of the old version. For example, the difference may be that a part of data is deleted or a part of data is added in the new version when the new version is compared with the old version. The ECU adjusts the target software of the old version based on the difference indicated by the differential update package, to obtain the target software of the new version.</p><p id="p-0069" num="0068">The foregoing describes an update process of target software in a vehicle. After updating the target software, a new version is obtained based on an old version. However, in a possible scenario, there may further be a rollback requirement for the target software after update. For example, a user wants to use software of the old version. For another example, there may be a bug in software of the new version, causing abnormal running of the software of the new version. After detecting that there is a rollback requirement for the target software, the ECU may roll back the target software to obtain the target software of the old version. Currently, a common rollback manner is that the ECU re-downloads a complete installation file of the target software of the old version from an OTA cloud server, or the ECU backs up the complete installation file of the target software of the old version before updating the target software of the old version. When there is a rollback requirement for the target software, the ECU re-installs the complete installation file of the target software of the old version, so that a currently running version of the target software is rolled back to the old version, where the old version refers to a version in which the target software normally runs before being updated by using a software update package of the new version.</p><p id="p-0070" num="0069">It should be understood that the rollback manner of re-downloading the complete installation file of the target software of the old version takes a long time, and may cause untimely rollback, which affects normal operation of the vehicle. In addition, storage space of the vehicle is usually limited, and large storage space is needed for implementing the rollback manner of backing up the complete installation file of the target software of the old version, which may cause a problem of insufficient storage space.</p><p id="p-0071" num="0070">In view of this, this application provides a software rollback method. In embodiments of this application, after a terminal device updates target software by using a differential update package, if there is a rollback requirement for the target software, the target software may be rolled back by using the differential update package. If the terminal device is an ECU, that is, there is a rollback requirement for target software in the ECU, the ECU does not need to download a complete installation file of target software of an old version from an OTA cloud server, and does not need to back up the complete installation file of the target software of the old version. The ECU may directly roll back the target software by using the differential update package used for updating the target software, to roll back to the old version for running. In this way, timely software rollback is performed while storage space occupancy of a vehicle is reduced.</p><p id="p-0072" num="0071">The following describes a technical solution of the software version rollback method provided in this application in detail.</p><p id="p-0073" num="0072">Refer to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. <figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic flowchart of a software version rollback method according to an embodiment of this application. The method is applicable to the system architecture shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The method includes the following steps.</p><p id="p-0074" num="0073">S<b>301</b>. A terminal device downloads a differential update package of target software from an update server.</p><p id="p-0075" num="0074">The differential update package includes at least one differential file, and the differential file records a difference between a current first version of the target software and a second version to which the target software is to be updated.</p><p id="p-0076" num="0075">Optionally, the differential file may further include a file header, where the file header may be used to indicate the target software. Optionally, the file header may further include information such as a version number corresponding to the differential file.</p><p id="p-0077" num="0076">It should be understood that before this step, a software developer develops the differential update package of the target software by using a software development device, and sends the differential update package to the update server for storage.</p><p id="p-0078" num="0077">S<b>302</b>. The terminal device updates a current version of the target software by using the differential update package, to obtain the second version of the target software based on the first version of the target software.</p><p id="p-0079" num="0078">S<b>303</b>. When detecting that there is a rollback requirement for the target software, the terminal device rolls back the target software by using the differential update package, so that the current second version of the target software is rolled back to the first version.</p><p id="p-0080" num="0079">The following describes in detail the solution of the embodiment shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref> with reference to a specific embodiment.</p><p id="p-0081" num="0080">The differential update package is first described in detail. For ease of understanding and differentiation, the first version of the target software is referred to as an old version, and the second version of the target software is referred to as a new version in the following description.</p><p id="p-0082" num="0081">The differential update package in this embodiment of this application includes at least one differential file, and the at least one differential file records a difference between target software of the new version and target software of the old version.</p><p id="p-0083" num="0082">The following describes the differential update package of the new version of the target software with reference to a specific embodiment.</p><p id="p-0084" num="0083">It is assumed that in this embodiment of this application, the differential file in the differential update package of the new version of the target software are generated by using the software development device based on software code of the target software of the old version.</p><p id="p-0085" num="0084">For example, the differential file includes at least one differential operation instruction, and each differential operation instruction may include an instruction type and differential data. The differential data may be understood as a data difference between the new version and the old version, and the instruction type may be understood as an indication of a specific instruction type difference corresponding to the data difference. Specifically, the differential data further includes address space information and data. For example, the instruction type is insertion, and the differential data includes a new address space and to-be-inserted data (that is, new data) aaa, that is, a location at which the new data is inserted is the new address space. In this case, the differential operation instruction is to insert the data aaa into the new address space of the old version.</p><p id="p-0086" num="0085">The address space is an address range for data storage. The address space in this embodiment of this application may be represented in a plurality of forms. For example, the address space may be a code segment identifier or a code line identifier of the software code of the target software. A code segment is used to identify a segment of code. The code segment may include one line of code, or may include a plurality of lines of code. Each line of code includes a line number and code content. Each code segment has a code segment identifier, and each line of code has a code line identifier, for example, a line number. It should be noted that, if the code segment includes one line of code, the code segment identifier is a line number of the line of code.</p><p id="p-0087" num="0086">For ease of understanding, it is assumed that a code segment of the differential file in this embodiment of this application includes one line of code, that is, a line number of the code line is an identifier of the code segment. In this case, it is assumed that a first address space in this embodiment of this application is a line number of the software code of the target software of the old version, and a second address space is a line number of software code of the target software of the new version.</p><p id="p-0088" num="0087"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is used as an example to describe a process of generating a differential file. It is assumed that a file name of target software is APP <b>1</b>.</p><p id="p-0089" num="0088">When a software development device needs to insert (or add, represented by &#x201c;+&#x201d; in <figref idref="DRAWINGS">FIG. <b>4</b></figref>) a line xxxx between a second line and a third line on the basis of target software (corresponding software code) with a version number V1 to generate target software with a version number V2, the software development device may generate a differential file P1 with the version number V2. In this way, a terminal device installed with the target software with the version number V1 may update the target software to V2 by downloading and installing the differential file P1 (as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>).</p><p id="p-0090" num="0089">When the software development device needs to delete (represented by &#x201c;&#x2014;&#x201d; in <figref idref="DRAWINGS">FIG. <b>4</b></figref>) a second line and insert a line yyyy between a fourth line and a fifth line on the basis of the target software with the version number V2 to generate target software with a version number V3, the software development device may generate a differential file P2 with the version number V3. In this way, a terminal device installed with the target software with the version number V2 may update the target software to V3 by downloading and installing the differential file P2 (as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>).</p><p id="p-0091" num="0090">When the software development device needs to delete a second line on the basis of the target software with the version number V3 to generate target software with a version number V4, the software development device may generate a differential file P3 with the version number V4. In this way, a terminal device installed with the target software with the version number V3 may update the target software to V4 by downloading and installing the differential file P3 (as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>).</p><p id="p-0092" num="0091">It should be noted that the foregoing is merely an example, and the address space in this embodiment of this application is not limited to the code segment identifier or the line number of the code line. For example, the address space in this embodiment of this application may also be represented by an addressing space of storage units in a computer. For example, an address space may be a space from a storage unit of the X<sup>th </sup>byte to a storage unit of the Y<sup>th </sup>byte, for example, from an address 0x0000 to an address 0x0009, in other words, the address space is a space from a storage unit of a first byte to a storage unit of a ninth byte, where each storage unit stores data of 1 byte.</p><p id="p-0093" num="0092">The foregoing describes the process of generating the differential file. It can be learned that the differential file includes a series of differential operation instructions, and the differential operation instructions may be arranged according to an execution sequence in chronological order. As described above, the differential operation instructions in this embodiment of this application includes the instruction type and the differential data. The &#x201c;add&#x201d; and &#x201c;delete&#x201d; shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> are instruction types. The following describes the differential data and the instruction type in detail.</p><p id="p-0094" num="0093">The differential data in this embodiment of this application includes but is not limited to one or more of the following:</p><p id="p-0095" num="0094">first address space information, second address space information, first data, or second data.</p><p id="p-0096" num="0095">The first address space information is used to indicate an address space in target software of an old version, the second address space information is used to indicate an address space in target software of a new version, the first data is data in the target software of the old version, and the second data is data in the target software of the new version. For ease of description, in the following description, the address space that is in the target software of the first version and that is indicated by the first address space information is referred to as an old address space for short, the address space that is in the target software of the new version and that is indicated by the second address space information is referred to as a new address space for short, the first data is referred to as old data for short, and the second data is referred to as new data for short.</p><p id="p-0097" num="0096">For ease of understanding and description, in the following, the first address space included in the first version is referred to as an old address space, the second address space included in the second version is referred to as a new address space, data stored in the first address space (that is, the first data in this application) is referred to as old data, and data stored in the second address space (that is, the second data in this application) is referred to as new data.</p><p id="p-0098" num="0097">The instruction type in this embodiment of this application includes but is not limited to one or more of the following:</p><p id="p-0099" num="0098">ignoring instruction, shift instruction, add instruction, deletion instruction, and replacement instruction.</p><p id="p-0100" num="0099">The following describes the foregoing instruction types in detail.</p><p id="p-0101" num="0100">(1) An ignoring instruction is used to indicate a part of data that is of target software of a new version and that is the same as data of target software of an old version, where the same data is indicated by differential data. It may be understood that, for the ignoring instruction, the new version and the old version have a same address space, which is included in corresponding differential data. It should be understood that because the new version and the old version have the same address space, this part of address space may be referred to as an old address space, or may be referred to as a new address space.</p><p id="p-0102" num="0101">(2) A shift instruction is used to instruct to transfer data in an old address space (that is, old data) to a new address space.</p><p id="p-0103" num="0102">(3) An add instruction is used to instruct to insert a new address space in an old version and to new data stored in the new address space. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the add instruction is used to instruct to add or insert a new address space, for example, insert a new code line and new data, on the basis of target software (corresponding software code) of an old version. For example, the new data is program code edited in the newly inserted address space.</p><p id="p-0104" num="0103">(4) A deletion instruction is used to instruct to delete an old address space of an old version. It should be understood that deleting the old address space is deleting old data stored in the old address space. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, when the target software with the version number V3 is generated based on the target software with the version number V2, code in the second line is deleted. It should be understood that, after deletion is completed, a third line of the original old version becomes a second line.</p><p id="p-0105" num="0104">(5) A replacement instruction is used to instruct to replace old data stored in an old address space of an old version with new data.</p><p id="p-0106" num="0105">The foregoing describes the differential operation instructions. When updating target software by using a differential file, a terminal device performs a corresponding differential operation based on differential data and an instruction type included in each differential operation instruction, to obtain target software of a new version.</p><p id="p-0107" num="0106">For example, Table 1 shows specific examples of differential operation instructions included in a differential update package provided in this embodiment of this application. A sequence of rows in Table 1 indicates an execution sequence of the differential operation instructions included in the differential update package.</p><p id="p-0108" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="91pt" align="left"/><colspec colname="1" colwidth="126pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row><row><entry/><entry>Differential data</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="42pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><tbody valign="top"><row><entry>Differential</entry><entry/><entry>Old address</entry><entry/><entry>New address</entry><entry/></row><row><entry>operation</entry><entry>Instruction</entry><entry>space (line</entry><entry>Old</entry><entry>space (line</entry><entry>New</entry></row><row><entry>instruction</entry><entry>type</entry><entry>number)</entry><entry>data</entry><entry>number)</entry><entry>data</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row><row><entry>1</entry><entry>Ignoring</entry><entry>1 to 100</entry><entry/><entry/><entry/></row><row><entry/><entry>instruction</entry></row><row><entry>2</entry><entry>Shift</entry><entry>101 and 102</entry><entry/><entry>201 to 202</entry></row><row><entry/><entry>instruction</entry></row><row><entry>3</entry><entry>Add</entry><entry/><entry/><entry>300</entry><entry>yyyy</entry></row><row><entry/><entry>instruction</entry></row><row><entry>4</entry><entry>Deletion</entry><entry>400</entry></row><row><entry/><entry>instruction</entry></row><row><entry>5</entry><entry>Replacement</entry><entry>500</entry><entry>aaaaa</entry><entry/><entry>bbbb</entry></row><row><entry/><entry>instruction</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0109" num="0107">It should be noted that Table 1 is merely an example. In this embodiment of this application, instruction types included in the differential operation instructions in the differential update package are not limited. For example, only one of an ignoring instruction, a shift instruction, an add instruction, a deletion instruction, and a replacement instruction is included; or some of the foregoing instructions are included, for example, an ignoring instruction and a shift instruction are included, or a deletion instruction and a replacement instruction are included; or all of the foregoing instructions are included, for example, an ignoring instruction, a shift instruction, an add instruction, a deletion instruction, and a replacement instruction are included.</p><p id="p-0110" num="0108">It can be learn from the first row of Table 1 that, in the differential data corresponding to the ignoring instruction in the differential operation instruction 1, the old address space is the code lines 1 to 100, which means that compared with the 1<sup>st </sup>to 100<sup>th </sup>code lines of the target software of the old version, the 1<sup>st </sup>to 100<sup>th </sup>code lines of the target software of the new version do not change, in other words, the 1<sup>st </sup>to 100<sup>th </sup>code lines of software code of the target software of the new version are the same as the 1<sup>st </sup>to 100<sup>th </sup>code lines of the software code of the target software of the old version.</p><p id="p-0111" num="0109">It can be learned from the second row in Table 1 that, in the differential data corresponding to the shift instruction in the differential operation instruction 2, the old address space is the code lines 101 and 102, and the new address space is the code lines 201 and 202. In this case, a differential operation that is performed by the terminal device and that corresponds to the differential operation instruction is transferring the 101<sup>st </sup>and 102<sup>nd </sup>code lines (program code of the 101<sup>st </sup>and 102<sup>nd </sup>code lines) of the software code of the target software of the old version to the 201<sup>st </sup>and 220<sup>th </sup>code lines.</p><p id="p-0112" num="0110">It can be learned from the third row in Table 1 that, in the differential data corresponding to the add instruction in the differential operation instruction 3, the new address space is the code line <b>300</b>. In this case, a differential operation that is performed by the terminal device and that corresponds to the differential operation instruction is inserting a new code line whose data is yyyy into the code line <b>300</b> of the software code of the target software. It may be understood that after the new code line is inserted, the 300<sup>th </sup>line in the old version becomes the 301<sup>th </sup>line in the new version.</p><p id="p-0113" num="0111">It can be learned from the fourth row in Table 1 that, in the differential data corresponding to the deletion instruction in the differential operation instruction 4, the old address space is the code line <b>400</b>. In this case, a differential operation that is performed by the terminal device and that corresponds to the differential operation instruction is deleting the 400<sup>th </sup>code line in the old address space, where specific data for deletion is data stored in the 400<sup>th </sup>code line, which is cccc.</p><p id="p-0114" num="0112">It can be learned from the fifth row in Table 1 that, in the differential data corresponding to the replacement instruction in the differential operation instruction 5, the old address space is the code line <b>500</b>. In this case, a differential operation that is performed by the terminal device and that corresponds to the differential operation instruction is replacing program code aaaaa of the 500<sup>th </sup>code line in the old address space with bbbb.</p><p id="p-0115" num="0113">The terminal device sequentially performs the differential operations corresponding to the differential operation instructions 1 to 5 shown in Table 1, to obtain the target software of the new version, that is, update the target software from the current old version to the new version. In conclusion, a process in which the terminal device updates the target software by using the differential update package shown in Table 1 is as follows.</p><p id="p-0116" num="0114">Step 1. Transfer the 101<sup>st </sup>and 102<sup>nd </sup>code lines (program code) to the 201<sup>st </sup>and 202<sup>nd </sup>code lines.</p><p id="p-0117" num="0115">Step 2. Insert the new code line into the 300<sup>th </sup>code line, where data of the code line is yyyy.</p><p id="p-0118" num="0116">Step 3. Delete the 400<sup>th </sup>code line. It should be understood that deleting the 400<sup>th </sup>code line is deleting the data cccc of the 400<sup>th </sup>code line.</p><p id="p-0119" num="0117">Step 4. Replace the data bbbb in the 500<sup>th </sup>code line of the target software of the current version with the data aaaaa.</p><p id="p-0120" num="0118">Performing the ignoring instruction may be understood as not modifying the target software, and therefore is not described in the foregoing steps.</p><p id="p-0121" num="0119">The foregoing describes the differential update package and the process in which the terminal device updates the target software by using the differential update package. <figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of a scenario in which a differential rollback package is generated based on the differential update package according to an embodiment of this application. With reference to the scenario shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the following describes a process in which a terminal device generates a differential rollback package based on a differential update package.</p><p id="p-0122" num="0120">First, content of the differential update package is parsed to obtain the differential operation instructions that are arranged according to the execution sequence in chronological order shown in Table 1. Then the differential operation instructions are rearranged in reverse chronological order, and each differential operation instruction is replaced with a reverse differential operation instruction corresponding to the differential operation instruction, to generate the differential rollback package. The differential rollback package is used to roll back target software of a new version, so that the target software can be rolled back to an old version of the target software.</p><p id="p-0123" num="0121">The reverse differential operation instruction corresponding to the differential operation instruction indicates performing a second differential operation corresponding to the reverse differential operation instruction after a first differential operation corresponding to the differential operation instruction is performed, so that rollback to a state that the target software (corresponding software code) is in before the first differential operation is performed can be achieved.</p><p id="p-0124" num="0122">For example, it is assumed that a differential operation instruction is to transfer data in a first address space to a second address space, a reverse instruction corresponding to the differential operation instruction is to transfer data in the second address space to the first address space.</p><p id="p-0125" num="0123">It should be noted that, because the ignoring instruction does not affect rollback, and a reverse differential operation instruction corresponding to the ignoring instruction is also an ignoring instruction, execution of the ignoring instruction is scheduled randomly in the differential update package and/or the differential rollback package, or the differential operation instruction may not be included in the differential update package and the differential rollback package. This is not limited in this embodiment of this application.</p><p id="p-0126" num="0124">Table 2 shows a specific example of the differential rollback package corresponding to the differential update package shown in Table 1. The differential rollback package includes five differential operation instructions. Each row in Table 2 indicates a differential operation instruction. Similar to the differential operation instruction in the differential update package, each differential operation instruction may include an instruction type and differential data. It should be noted that a sequence of rows in Table 2 indicates an execution sequence of the differential operation instructions included in the differential rollback package.</p><p id="p-0127" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="126pt" align="center"/><thead><row><entry namest="1" nameend="3" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Reverse</entry><entry/><entry>Differential data</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="49pt" align="center"/><colspec colname="2" colwidth="42pt" align="left"/><colspec colname="3" colwidth="42pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="42pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><tbody valign="top"><row><entry>differential</entry><entry/><entry>Old address</entry><entry/><entry>New address</entry><entry/></row><row><entry>operation</entry><entry>Instruction</entry><entry>space (line</entry><entry>Old</entry><entry>space (line</entry><entry>New</entry></row><row><entry>instruction</entry><entry>type</entry><entry>number)</entry><entry>data</entry><entry>number)</entry><entry>data</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row><row><entry>1</entry><entry>Replacement</entry><entry>500</entry><entry>aaaaa</entry><entry/><entry>bbbb</entry></row><row><entry/><entry>instruction</entry></row><row><entry>2</entry><entry>Add</entry><entry>400</entry><entry>cccc</entry></row><row><entry/><entry>instruction</entry></row><row><entry>3</entry><entry>Deletion</entry><entry>300</entry><entry>yyyy</entry></row><row><entry/><entry>instruction</entry></row><row><entry>4</entry><entry>Shift</entry><entry>201 and 202</entry><entry/><entry>101 and 102</entry></row><row><entry/><entry>(Rollback)</entry></row><row><entry/><entry>instruction</entry></row><row><entry>5</entry><entry>Ignoring</entry><entry>&#x2003;1 and 100</entry></row><row><entry/><entry>instruction</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0128" num="0125">In this embodiment of this application, a process in which the terminal device rolls back the target software by using the differential rollback package shown in Table 2 is as follows.</p><p id="p-0129" num="0126">Step 1. Replace the data (program code) aaaaa in the 500<sup>th </sup>code line of the target software of a current version with the data bbbb.</p><p id="p-0130" num="0127">Step 2. Insert a new code line into the 400<sup>th </sup>code line, where data of the code line is xxxx.</p><p id="p-0131" num="0128">Step 3. Delete the 300<sup>th </sup>code line. It should be understood that deleting the 300<sup>th </sup>code line is deleting the data yyyy of the 300<sup>th </sup>code line.</p><p id="p-0132" num="0129">Step 4. Transfer the 201<sup>st </sup>and 202<sup>nd </sup>code lines to the 101<sup>st </sup>and 102<sup>nd </sup>code lines.</p><p id="p-0133" num="0130">As described above, performing the ignoring instruction may be understood as not modifying the target software, and therefore is not described in the foregoing steps.</p><p id="p-0134" num="0131">As described above, after rolling back the target software by using the differential rollback package, the terminal device may roll back the target software from the new version to the old version.</p><p id="p-0135" num="0132">It should be noted that, in a system in this embodiment of this application, there are a plurality of devices that can generate the differential rollback package, and there are also a plurality of manners of generating the differential rollback package. Examples are used in the following description.</p><p id="p-0136" num="0133">Generation manner 1: Generated by a software development device.</p><p id="p-0137" num="0134">The software development device generates the differential rollback package based on the differential update package in the foregoing manner, and sends the differential rollback package to an update server, so that the update server stores the differential rollback package.</p><p id="p-0138" num="0135">For example, the terminal device may also download the differential rollback package when downloading the differential update package. After the target software is updated by using the differential update package, if there is a rollback requirement, the downloaded differential rollback package is directly used to roll back the target software. In this manner, the rollback requirement of the target software can be promptly and quickly responded to, and time spent on rolling back the target software to the old version can be shortened.</p><p id="p-0139" num="0136">In another example, the terminal device may download the differential rollback package of the target software from the update server when detecting that there is a rollback requirement for the target software. In this manner, the differential rollback package can be prevented from occupying storage space of the terminal device for a long time.</p><p id="p-0140" num="0137">Specifically, there are different types of rollback requirements for the target software in different scenarios. Two types are listed in the following description.</p><p id="p-0141" num="0138">Type 1: The terminal device has a rollback requirement for the target software.</p><p id="p-0142" num="0139">For example, after the target software is updated, if the terminal device detects that there is a rollback requirement for the target software, for example, in cases where the target software runs abnormally, the target software cannot be started, the target software crashes, or there is a bug in the target software, for example, the target software cannot respond to a user operation, the terminal device may trigger rollback of the target software. For example, the target software generates a rollback instruction, where the rollback instruction instructs to perform a rollback operation on the target software, and for example, the rollback instruction carries an identifier of the target software such as an application name, and a version number of a version to which the target software is to be rolled back. The version number may be the same as that of the differential rollback package of the target software, or may be determined based on a preset correspondence.</p><p id="p-0143" num="0140">Type 2: A user has a rollback requirement for the target software.</p><p id="p-0144" num="0141">After the update of the target software is completed, if the user wants the target software to roll back to a previous version (the old version) in a case, for example, where different versions of some software have different functions, and updated target software of a new version does not have a function frequently used by the user, the user may trigger the terminal device to perform rollback. For example, the user controls the terminal device to install a complete installation file of the target software of the old version, or the terminal device has a rollback functional button, where the rollback functional button may be used for selecting software to be rolled back. The user may perform an operation on the functional button, to trigger the terminal device to roll back the target software.</p><p id="p-0145" num="0142">The foregoing rollback requirement is merely an example, and this is not limited in this embodiment of this application.</p><p id="p-0146" num="0143">Generation manner 2: Generated by a terminal device.</p><p id="p-0147" num="0144">The terminal device downloads the differential update package from the update server, and generates the differential rollback package based on the differential update package. A possible implementation is that, before updating the target software by using the differential update package, the terminal device generates the differential rollback package based on the differential update package, and stores the differential rollback package. After update of the target software based on the differential update package is completed, if a rollback requirement for the target software is detected, the terminal device may roll back the target software by using the differential rollback package.</p><p id="p-0148" num="0145">Another possible implementation is as follows. The terminal device backs up the differential update package. After updating the target software by using the differential update package, if a rollback requirement for the target software is detected, the terminal device generates the differential rollback package by using the backup differential update package, and rolls back the target software by using the generated differential rollback package. Optionally, the terminal device may not back up the differential update package, and may download the differential update package from the update server when detecting that there is a rollback requirement for the target software.</p><p id="p-0149" num="0146">It should be noted that a plurality of forms of the differential update package are applicable to this embodiment of this application. For differential update packages in different forms, specific manners of generating the differential rollback package by using the differential update package may also be different. Examples are used in the following description.</p><p id="p-0150" num="0147">Form 1: The differential data includes an old address space, old data, a new address space, and new data.</p><p id="p-0151" num="0148">Refer to Table 1 described above. The differential data of the differential update package includes the address space of the old version, the old data, the address space of the new version, and the new data.</p><p id="p-0152" num="0149">Because the data included in the differential update package is complete, for the differential update package in this form, the terminal device may directly generate the differential rollback package based on the differential update package. For a specific generation manner, refer to the foregoing related description. Details are not described herein again.</p><p id="p-0153" num="0150">Form 2: The differential data does not include the old data.</p><p id="p-0154" num="0151">Table 1 is used as an example. The data included in the differential update package shown in Table 1 is complete. In an example, a differential of the differential update package is that the differential update package may alternatively not include the old data. Table 3 shows a form in which the differential update package shown in Table 1 does not include the old data.</p><p id="p-0155" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="offset" colwidth="63pt" align="left"/><colspec colname="1" colwidth="154pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry/><entry namest="offset" nameend="1" align="center" rowsep="1"/></row><row><entry/><entry>Differential data</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="42pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="42pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><tbody valign="top"><row><entry>Differential</entry><entry>Old address</entry><entry/><entry>New address</entry><entry/></row><row><entry>instruction</entry><entry>space</entry><entry>Old data</entry><entry>space</entry><entry>New data</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row><row><entry>Ignoring instruction</entry><entry>&#x2003;1 and 100</entry><entry/><entry/><entry/></row><row><entry>Shift instruction</entry><entry>101 and 102</entry><entry/><entry>201 and 202</entry></row><row><entry>Add instruction</entry><entry/><entry/><entry>300</entry><entry>yyyy</entry></row><row><entry>Deletion instruction</entry><entry>400</entry></row><row><entry>Replacement</entry><entry>500</entry><entry/><entry/><entry>bbbb</entry></row><row><entry>instruction</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0156" num="0152">Table 3 is merely an example. When the differential update package does not include the old data, the column of old data may be deleted from Table 3.</p><p id="p-0157" num="0153">It can be learned that the differential update package shown in Table 3 does not affect a differential operation of updating the target software. However, because the data included in the differential update package in this form is incomplete, the terminal device cannot directly generate the differential rollback package based on the differential update package. Therefore, to improve the differential update package, the terminal device may obtain differential data that is stored in the old address spaces and that is indicated by the differential data corresponding to the differential instructions except the ignoring instruction, to supplement the differential update package or Table 3 and generate the differential rollback package based on a supplemented differential update package or Table 3.</p><p id="p-0158" num="0154">An example in which the terminal device is an ECU and the update server is an OTA cloud server is used below to describe the technical solutions of this application in specific embodiments.</p><p id="p-0159" num="0155"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of a system architecture used by a vehicle to perform software update and software version rollback according to an embodiment of this application. The system includes a software development device, an OTA cloud server, and an ECU.</p><p id="p-0160" num="0156">A process of implementing software version rollback by an ECU is described below with reference to a scenario shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> and Embodiments 1 to 3.</p><heading id="h-0007" level="1">Embodiment 1</heading><p id="p-0161" num="0157">A procedure in Embodiment 1 may include the following steps.</p><p id="p-0162" num="0158">Step 1. The software development device generates a differential update package of target software.</p><p id="p-0163" num="0159">For example, a process of generating the differential update package by the software development device includes: comparing a new version of the target software with an old version of the target software, and generating the differential update package in a manner described in an embodiment of this application. In addition to a new address space, an old address space, and new data, differential data in the differential update package may further include old data. For example, if the differential update package includes a differential operation instruction whose instruction type is deletion, in addition to the to-be-deleted old address space, the differential operation instruction may further include data stored in the old address space, that is, the old data.</p><p id="p-0164" num="0160">For another example, a process of generating the differential update package by the software development device includes: comparing the new version of the target software with the old version of the target software, and generating the differential update package by using the existing mechanism. It should be noted that, the differential update package generated by using the existing mechanism does not include the old data, that is, a form of the differential update package is Form 2. Therefore, the software development device may further add the old data to the differential update package to obtain a differential update package in Form 1, so that the terminal device can directly generate a differential rollback package based on the differential update package.</p><p id="p-0165" num="0161">Step 2. The software development device sends the differential update package to the OTA server.</p><p id="p-0166" num="0162">Optionally, the software development device may be integrated into the OTA server. If the software development device is integrated into the OTA server, Step 2 is an optional step rather than a mandatory step.</p><p id="p-0167" num="0163">Step 3. The ECU downloads the differential update package of the target software from the OTA server.</p><p id="p-0168" num="0164">Step 4. The ECU generates the differential rollback package based on the differential update package.</p><p id="p-0169" num="0165">Step 5. The ECU updates the target software by using the differential update package, to obtain software of the new version.</p><p id="p-0170" num="0166">Step 6. After detecting that there is a rollback requirement for the target software, the ECU rolls back the target software by using the differential rollback package, to obtain software of the old version.</p><p id="p-0171" num="0167">Step 7. The ECU installs the software of the old version, to replace the software of the new version.</p><p id="p-0172" num="0168">It should be noted that the foregoing Step 4 is merely an example, and the differential rollback package may also be generated by the ECU after the ECU detects that there is a rollback requirement for the target software. The following describes a procedure of this manner in Embodiment 2.</p><heading id="h-0008" level="1">Embodiment 2</heading><p id="p-0173" num="0169">A procedure in Embodiment 2 may include the following steps.</p><p id="p-0174" num="0170">Step 1. The software development device generates a differential update package of target software.</p><p id="p-0175" num="0171">Step 2. The software development device sends the differential update package to the OTA server.</p><p id="p-0176" num="0172">Step 3. The ECU downloads the differential update package of the target software from the OTA server.</p><p id="p-0177" num="0173">Step 4. The ECU determines whether the differential update package includes old data (that is, whether a form of the differential update package is Form 1 described above); and if the differential update package includes the old data, the ECU backs up the differential update package; if the differential update package does not include the old data, the ECU obtains, based on a current version of the target software, old data corresponding to differential operation instructions included in the differential update package, adds the old data to the differential update package, and backs up the differential update package to which the old data is added. For a specific manner of adding the old data, refer to the foregoing related description. Details are not described herein again.</p><p id="p-0178" num="0174">Step 5. The ECU updates the target software by using the differential update package, to obtain software of a new version.</p><p id="p-0179" num="0175">Step 6. After detecting that there is a rollback requirement for the target software, the ECU generates a differential rollback package based on the backup differential update package, and rolls back the target software by using the differential rollback package, to obtain software of an old version.</p><p id="p-0180" num="0176">Step 7. The ECU installs the software of the old version, to replace the software of the new version.</p><p id="p-0181" num="0177">In the foregoing Embodiment 1 and Embodiment 2, the ECU generates the differential rollback package. In this application, the differential rollback package may also be generated by a software development device. Embodiment 3 describes a procedure in which the ECU performs software version rollback of the target software in a case where the software development device generates the differential rollback package.</p><heading id="h-0009" level="1">Embodiment 3</heading><p id="p-0182" num="0178">A procedure in Embodiment 3 may include the following steps.</p><p id="p-0183" num="0179">Step 1. The software development device generates a differential update package and a differential rollback package of target software.</p><p id="p-0184" num="0180">Step 2. The software development device sends the differential update package and the differential rollback package to the OTA server.</p><p id="p-0185" num="0181">Step 3. The ECU downloads the differential update package and the differential rollback package of the target software from the OTA server.</p><p id="p-0186" num="0182">Step 4. The ECU updates the target software by using the differential update package, to obtain software of a new version.</p><p id="p-0187" num="0183">Step 5. After detecting that there is a rollback requirement for the target software, the ECU rolls back the target software by using the differential rollback package, to obtain software of an old version.</p><p id="p-0188" num="0184">The ECU in Embodiment 1 to Embodiment 3 may be an ECU installed with the target software, or may be another ECU. For example, when the ECU installed with the target software can communicate and interact with the OTA update server, the ECU may directly download the differential update package and the differential rollback package of the target software from the OTA server; or the differential update package and the differential rollback package of the target software may be downloaded by another ECU that can communicate and interact with the OTA update server, and then the differential update package and the differential rollback package is sent to the ECU installed with the target software. This is not limited in this embodiment of this application.</p><p id="p-0189" num="0185">Refer to <figref idref="DRAWINGS">FIG. <b>7</b></figref>. <figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic diagram of another system architecture used by a vehicle to perform software update and software version rollback according to an embodiment of this application. The system includes a software development device, an OTA cloud server, an ECU master, and an ECU slave (slave node).</p><p id="p-0190" num="0186">The ECU master is an ECU used as a master node and a node configured to monitor and centrally control update of the ECU slave. The ECU master is mainly used for centrally controlling vehicle update. During vehicle update, the ECU master downloads, from the OTA, a vehicle software update package required for vehicle update. The vehicle software update package includes differential update packages corresponding to the ECU master and each ECU slave. The ECU master may split the vehicle software update package, and send each differential update package obtained through splitting to a corresponding ECU slave.</p><p id="p-0191" num="0187">The ECU slave is a slave node of the ECU master, and may have an ability to communicate and interact with the OTA cloud server. For example, when specific software on the ECU slave needs to be updated, if the ECU slave has the ability to communicate and interact with the OTA cloud server, the ECU slave may download a differential update package of the software from the OTA server and update the software. Alternatively, the ECU master may control and manage software update of the ECU slave. For example, after detecting that the OTA cloud server releases a software update package of a new version of the software that is installed on a specific ECU slave, the ECU master downloads the software update package of the new version of the software from the OTA cloud server, and sends the software update package to the ECU slave.</p><p id="p-0192" num="0188">In this embodiment of this application, both the ECU master and the ECU slave may generate differential rollback packages based on the differential update packages, and both the ECU master and the ECU slave can communicate with the OTA to download files. Alternatively, the ECU master is responsible for updating software on the ECU slave, and the ECU master downloads, from the OTA, a differential update package and/or a differential rollback package of a target software installed on the ECU slave, and sends the differential update package and/or the differential rollback package to the ECU slave.</p><p id="p-0193" num="0189">A process of implementing software version rollback by an ECU is described below with reference to a scenario shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref> and Embodiments 4 to 6.</p><heading id="h-0010" level="1">Embodiment 4</heading><p id="p-0194" num="0190">A procedure in Embodiment 4 may include the following steps.</p><p id="p-0195" num="0191">Step 1. The software development device generates a differential update package of target software.</p><p id="p-0196" num="0192">Step 2. The software development device sends the differential update package to the OTA server.</p><p id="p-0197" num="0193">Step 3. The ECU master downloads a vehicle software update package from the OTA server.</p><p id="p-0198" num="0194">Step 4. The ECU master splits the vehicle software update package, generates differential rollback packages based on differential update packages obtained through splitting, and sends a differential update package and a differential rollback package of same software to a corresponding ECU slave.</p><p id="p-0199" num="0195">Step 5. ECU slaves update respective target software by using respective differential update packages, to obtain software of a new version, and replace software of an old version.</p><p id="p-0200" num="0196">Step 6. After detecting that there is a rollback requirement for the target software, the ECU slave rolls back the target software by using the differential rollback package, to obtain the software of the old version.</p><heading id="h-0011" level="1">Embodiment 5</heading><p id="p-0201" num="0197">A procedure in Embodiment 5 may include the following steps.</p><p id="p-0202" num="0198">Step 1. The software development device generates a differential update package of target software.</p><p id="p-0203" num="0199">Step 2. The software development device sends the differential update package to the OTA server.</p><p id="p-0204" num="0200">Step 3. The ECU master downloads a vehicle software update package from the OTA server.</p><p id="p-0205" num="0201">Step 4. The ECU master splits the vehicle software update package, and sends each differential update package obtained through splitting to a corresponding ECU slave.</p><p id="p-0206" num="0202">Step 5. The ECU slave receives the differential update package from the ECU master, and generates a differential rollback package by using the differential update package.</p><p id="p-0207" num="0203">Step 6. ECU slaves update respective target software by using respective differential update packages, to obtain software of a new version, and replace software of an old version.</p><p id="p-0208" num="0204">Step 7. After detecting that there is a rollback requirement for the target software, the ECU slave rolls back the target software by using the differential rollback package, to obtain the software of the old version.</p><heading id="h-0012" level="1">Embodiment 6</heading><p id="p-0209" num="0205">A procedure in Embodiment 6 may include the following steps.</p><p id="p-0210" num="0206">Step 1. The software development device generates a differential update package of target software.</p><p id="p-0211" num="0207">Step 2. The software development device sends the differential update package to the OTA server.</p><p id="p-0212" num="0208">Step 3. The ECU master downloads a vehicle software update package from the OTA server.</p><p id="p-0213" num="0209">Step 4. The ECU master splits the vehicle software update package, and sends each differential update package obtained through splitting to a corresponding ECU slave.</p><p id="p-0214" num="0210">Step 5. The ECU slave receives the differential update package from the ECU master, and determines whether the differential update package includes old data; and if the differential update package includes the old data, the ECU slave backs up the differential update package; if the differential update package does not include the old data, the ECU slave adds the old data to the backup differential update package after backing up the differential update package.</p><p id="p-0215" num="0211">It should be noted that Step 5 is merely an example. The ECU slave may back up the differential update package before determining whether the differential update package includes the old data. In other words, the ECU slave may respectively perform a determining operation and a backup operation in two processes, to reduce a backup delay. The determining operation and the backup operation are not limited in this embodiment of this application.</p><p id="p-0216" num="0212">Step 6. ECU slaves update respective target software by using respective differential update packages, to obtain software of a new version, and replace software of an old version.</p><p id="p-0217" num="0213">Step 7. After detecting that there is a rollback requirement for the target software, the ECU slave generates a differential rollback package based on the backup differential update package, and rolls back the target software by using the differential rollback package, to obtain the software of the old version.</p><p id="p-0218" num="0214">It should be noted that Embodiment 4 is merely an example, and the methods shown in the foregoing Embodiment 1 to Embodiment 3 may also be applied for vehicle update. For example, in Step 1, the software development device may generate a vehicle software rollback package. For example, the software development device generates a differential rollback package based on a differential update package of each piece of software for vehicle update, packs differential rollback packages of all pieces of software into the vehicle software rollback package, and stores the vehicle software rollback package in the OTA server. The ECU master may also back up the differential update package of each piece of software or the vehicle software update package. After detecting that there is a software version rollback requirement for the ECU slave, the ECU master generates the differential rollback package by using the backup differential update package of the software, and sends the differential rollback package to the ECU slave. For details, refer to the foregoing related description. Details are not described herein again.</p><p id="p-0219" num="0215">In the software version rollback manners described in the foregoing embodiments, a complete installation file of the software of the old version does not need to be backed up in a vehicle, and only the differential update package needs to be stored, where a size of the differential update package is much less than a size of the complete installation file of the software of the old version. In this way, storage space is saved. When a rollback requirement for the target software is detected, the complete installation file of the software of the old version does not need to be re-downloaded from the OTA cloud server side, and the differential rollback package may be generated based on the differential update package according to the methods provided in embodiments of this application, so that rollback can be performed in time and time spent on rollback is shortened. In addition, the manner of generating the differential rollback package is simple and efficient, and computing overheads are low.</p><p id="p-0220" num="0216">Same as the foregoing concept, as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, an embodiment of this application further provides an apparatus <b>800</b>, configured to implement a function of the terminal device in the foregoing methods. For example, the apparatus may be a software module or a chip system. In this embodiment of this application, the chip system may include a chip, or may include a chip and another discrete component. The apparatus <b>800</b> may include a processing module <b>801</b> and a communications module <b>802</b>.</p><p id="p-0221" num="0217">In this embodiment of this application, module division is an example, and is merely logical function division. There may be another division manner in actual implementation. In addition, functional modules in embodiments of this application may be integrated into one processor, or may exist alone physically, or two or more modules are integrated into one module. The integrated module may be implemented in a form of hardware, or may be implemented in a form of a software functional module.</p><p id="p-0222" num="0218">For example, when the apparatus <b>800</b> implements a function of the terminal device in the procedure shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the communications module <b>802</b> is configured to obtain a differential update package of target software, where the differential update package includes at least one differential operation instruction, and the differential operation instruction is used to indicate a difference between a first version of the target software and a second version to which the target software is to be updated.</p><p id="p-0223" num="0219">The processing module <b>801</b> is configured to update a current version of the target software by using the differential update package, where the current version of the target software is updated from a first version to a second version; and when a rollback requirement for the target software is detected, perform rollback on the target software by using the differential update package, to roll back the current version of the target software to the first version.</p><p id="p-0224" num="0220">In a possible design, the differential update package includes at least one differential operation instruction, the differential operation instruction includes an instruction type and differential data, and the differential data includes a first address space and/or first data stored in the first address space in the first version, and second data and/or a second address space in the second version.</p><p id="p-0225" num="0221">In a possible design, the processing module <b>801</b> is further configured to generate a differential rollback package based on the differential update package.</p><p id="p-0226" num="0222">The differential rollback package is obtained by rearranging, according to a preset sequence, the at least one differential operation instruction arranged in the differential update package; and replacing each rearranged differential operation instruction with a reverse differential operation instruction corresponding to the differential operation instruction. The reverse differential operation instruction corresponding to the differential operation instruction indicates performing a second differential operation according to the reverse differential operation instruction after a first differential operation is performed according to the differential operation instruction, to roll back a version of the target software to a state existing before the first differential operation is performed.</p><p id="p-0227" num="0223">The processing module <b>801</b> is specifically configured to roll back the target software by using the differential rollback package.</p><p id="p-0228" num="0224">In a possible design, the instruction type includes but is not limited to one or more of the following types: ignoring, shift, insertion, deletion, or replacement.</p><p id="p-0229" num="0225">In a possible design, when the instruction type of the differential operation instruction is shift, the differential operation instruction is used to instruct to shift the first data from the first address space to the second address space. The second address space is an address space other than the first address space in a first system. The reverse differential operation instruction corresponding to the differential operation instruction is to shift the first data in the second address space back to the first address space.</p><p id="p-0230" num="0226">In a possible design, when the instruction type of the differential operation instruction is insertion, the differential operation instruction is used to instruct to add the second address space in a first system, and add the second data included in the differential operation instruction to the second address space. The reverse differential operation instruction corresponding to the differential operation instruction is to delete the second address space.</p><p id="p-0231" num="0227">In a possible design, when the instruction type of the differential operation instruction is deletion, the differential operation instruction is used to instruct to delete the first address space and the first data stored in the first address space. The reverse differential operation instruction corresponding to the differential operation instruction is to add the first address space and add the first data to the first address space.</p><p id="p-0232" num="0228">In a possible design, when the instruction type of the differential operation instruction is replacement, the differential operation instruction is used to instruct to replace the first data in the first address space with the second data. The reverse differential operation instruction corresponding to the differential operation instruction is to replace the second data in the first address space with the first data.</p><p id="p-0233" num="0229">In a possible design, the terminal device is an in-vehicle terminal device.</p><p id="p-0234" num="0230"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows an apparatus <b>900</b> according to an embodiment of this application. The apparatus shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> may be an implementation of a hardware circuit of the apparatus shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The communications apparatus is applicable to the flowchart shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, and the communications apparatus performs functions of the terminal device in the foregoing method embodiments. For ease of description, <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows only main components of the communications apparatus.</p><p id="p-0235" num="0231">The apparatus <b>900</b> shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref> includes at least one processor <b>920</b>, configured to implement a function of the terminal device in the method provided in embodiments of this application.</p><p id="p-0236" num="0232">The apparatus <b>900</b> may further include at least one memory <b>930</b>, configured to store program instructions and/or data. The memory <b>930</b> is coupled to the processor <b>920</b>. The coupling in this embodiment of this application may be an indirect coupling or a communication connection between apparatuses, units, or modules in an electrical form, a mechanical form, or another form, and is used for information exchange between the apparatuses, the units, or the modules. The processor <b>920</b> may operate in collaboration with the memory <b>930</b>. The processor <b>920</b> may execute the program instructions stored in the memory <b>930</b>. At least one of the at least one memory may be included in the processor.</p><p id="p-0237" num="0233">The apparatus <b>900</b> may further include a communications interface <b>910</b>, configured to communicate with another device through a transmission medium, so that an apparatus in the apparatus <b>900</b> can communicate with the another device. In this embodiment of this application, the communications interface may be a transceiver, a circuit, a bus, a module, or a communications interface of another type. In this embodiment of this application, the transceiver may be an independent receiver, an independent transmitter, a transceiver with an integrated receiving and transmitting function, or an interface circuit. The processor <b>920</b> receives and transmits data through the communications interface <b>910</b>, and is configured to implement the method performed by the terminal device in the embodiment corresponding to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0238" num="0234">For example, when the apparatus <b>900</b> implements a function of the terminal device in the procedure shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the communications interface <b>910</b> is configured to obtain a differential update package of target software, where the differential update package includes at least one differential operation instruction, and the differential operation instruction is used to indicate a difference between a first version of the target software and a second version to which the target software is to be updated. In an example, the communications interface <b>910</b> may directly exchange data with an update server, for example, download the differential update package and/or a differential rollback package. In another example, the apparatus <b>900</b> may obtain data by using another device. For example, the apparatus <b>900</b> is an ECU, the ECU includes the communications interface <b>910</b>, the ECU may obtain data by using a T-BOX, and the T-BOX may exchange data with the update server. For example, the T-BOX downloads the differential update package and/or the differential rollback package from the update server, and the ECU may obtain, through the communications interface <b>910</b>, the differential update package and/or the differential rollback package downloaded in the T-BOX. This is not limited in this embodiment of this application.</p><p id="p-0239" num="0235">In another example, the processor <b>920</b> is configured to update a current version of the target software from a first version to a second version by using the differential update package; and when a rollback requirement for the target software is detected, perform rollback on the target software by using the differential update package, to roll back the current version of the target software to the first version.</p><p id="p-0240" num="0236">For another method performed by the processor <b>920</b> and the communications interface <b>910</b>, refer to description in the method procedure shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Details are not described herein again.</p><p id="p-0241" num="0237">Based on the foregoing embodiments, an embodiment of this application further provides a physical apparatus of a software version rollback apparatus. The apparatus is an in-vehicle terminal device, and the apparatus is configured to implement the software version rollback methods shown in the foregoing figures. Refer to <figref idref="DRAWINGS">FIG. <b>10</b></figref>. The apparatus <b>1000</b> includes a communications unit <b>1001</b>, an ECU <b>1002</b>, and a memory <b>1003</b>. The communications unit <b>1001</b>, the ECU <b>1002</b>, and the memory <b>1003</b> are connected.</p><p id="p-0242" num="0238">Optionally, the communications unit <b>1001</b>, the ECU <b>1002</b>, and the memory <b>1003</b> are connected by a bus <b>1004</b>. The bus <b>1004</b> may be a CAN (controller area network) bus, an Ethernet bus, or the like. The bus may be classified into an address bus, a data bus, a control bus, and the like. For ease of representation, only one thick line is for representing the bus in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, but this does not mean that there is only one bus or only one type of bus.</p><p id="p-0243" num="0239">The communications unit <b>1001</b> is configured to communicate with another device through a transmission medium. For example, the communications unit <b>1001</b> is used by the apparatus ECU <b>1002</b> in the apparatus <b>1000</b> to communicate with another device. For example, the communications unit <b>1001</b> may be a T-BOX (telematics BOX, telematics Box).</p><p id="p-0244" num="0240">The memory <b>1003</b> is configured to store program instructions and the like. Specifically, the program instructions may include program code, and the program code includes computer operation instructions. The data may include a differential update package and/or a differential rollback package of target software. The memory <b>1003</b> may include a random access memory (random access memory, RAM), or may further include a non-volatile memory (non-volatile memory), for example, at least one magnetic disk memory.</p><p id="p-0245" num="0241">The ECU <b>1002</b> may be used in a specific component or system in the in-vehicle terminal device. In different components or systems, the ECU may have different names. For example, a VCU in a motor, a TCU in a gearbox, an EMS in an engine, and a body control module BCM may all be implemented by the ECU. Optionally, different components or systems in the in-vehicle terminal device may be integrated into a same ECU. The ECU <b>1002</b> executes the program instructions and the data stored in the memory <b>1003</b>, to implement the foregoing functions, so as to implement the software version rollback methods provided in the foregoing embodiments. For other methods performed by the communications unit <b>1001</b>, the ECU <b>1002</b>, and the memory <b>1003</b>, refer to the description in the method procedure shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Details are not described herein again.</p><p id="p-0246" num="0242">It should be noted that, in embodiments of this application, the processor may be a general-purpose processor, a digital signal processor, an application-specific integrated circuit, a field programmable gate array or another programmable logic device, a discrete gate or transistor logic device, or a discrete hardware component, and may implement or execute the methods, steps, and logical block diagrams disclosed in embodiments of this application. The general purpose processor may be a microprocessor or any conventional processor or the like. The steps in the methods disclosed with reference to embodiments of this application may be directly performed by a hardware processor, or may be performed by a combination of hardware in the processor and a software module.</p><p id="p-0247" num="0243">In embodiments of this application, the term &#x201c;and/or&#x201d; describes an association relationship between associated objects and may indicate three relationships. For example, A and/or B may indicate the following cases: Only A exists, both A and B exist, and only B exists, where A and B may be singular or plural. The character &#x201c;I&#x201d; usually indicates an &#x201c;or&#x201d; relationship between associated objects. &#x201c;At least one of the following items (pieces)&#x201d; or a similar expression thereof refers to any combination of these items, including any combination of singular items (pieces) or plural items (pieces). For example, at least one of a, b, or c may indicate: a, b, c, a and b, a and c, b and c, or a, b, and c, where a, b, and c may be singular or plural. &#x201c;A plurality of&#x201d; means two or more.</p><p id="p-0248" num="0244">The term &#x201c;for example&#x201d; in embodiments of this application is used to represent giving an example, an illustration, or a description. Any embodiment or design scheme described as an &#x201c;example&#x201d; in this application should not be explained as being more preferred or having more advantages than another embodiment or design scheme. Exactly, the term &#x201c;example&#x201d; is used to present a concept in a specific manner.</p><p id="p-0249" num="0245">Optionally, ordinal numbers such as &#x201c;first&#x201d; and &#x201c;second&#x201d; in embodiments of this application are used to distinguish between a plurality of objects, but are not intended to limit an order, a time sequence, priorities, or importance of the plurality of objects. For example, first information and second information are merely intended to distinguish between different signaling, but do not indicate that the two types of information are different in content, priorities, a sending sequence, importance, or the like.</p><p id="p-0250" num="0246">In embodiments of this application, the memory may be a non-volatile memory, such as a hard disk drive (hard disk drive, HDD) or a solid-state drive (solid-state drive, SSD), or may be a volatile memory (volatile memory), such as a random access memory (random access memory, RAM). The memory is any other medium that can carry or store expected program code in a form of an instruction or a data structure and that can be, accessed by a computer, but is not limited thereto. The memory in embodiments of this application may alternatively be a circuit or any other apparatus that can implement a storage function, and is configured to store the program instructions and/or the data.</p><p id="p-0251" num="0247">All or some of the methods in embodiments of this application may be implemented by using software, hardware, firmware, or any combination thereof. When software is used to implement the embodiments, all or a part of the embodiments may be implemented in a form of a computer program product. The computer program product includes one or more computer instructions. When the computer program instructions are loaded and executed on a computer, the procedures or functions according to embodiments of the present invention are all or partially generated. The computer may be a general-purpose computer, a dedicated computer, a computer network, a network device, user equipment, or another programmable apparatus. The computer instructions may be stored in a computer-readable storage medium or may be transmitted from a computer-readable storage medium to another computer-readable storage medium. For example, the computer instructions may be transmitted from a website, computer, server, or data center to another website, computer, server, or data center in a wired (for example, a coaxial cable, an optical fiber, or a digital subscriber line (digital subscriber line, DSL for short)) or wireless (for example, infrared, radio, or microwave) manner. The computer-readable storage medium may be any usable medium accessible by a computer, or a data storage device, such as a server or a data center, integrating one or more usable media. The usable medium may be a magnetic medium (for example, a floppy disk, a hard disk drive, or a magnetic tape), an optical medium (for example, a digital video disc (digital video disc, DVD for short)), a semiconductor medium (for example, an SSD), or the like.</p><p id="p-0252" num="0248">In embodiments of this application, on the premise that there is no logical conflict, embodiments may be mutually referenced. For example, methods and/or terms in the method embodiments may be mutually referenced, and functions and/or terms in the apparatus embodiments may be mutually referenced. For example, functions and/or terms between the apparatus embodiments and the method embodiments may be mutually referenced.</p><p id="p-0253" num="0249">A person skilled in the art can make various modifications and variations to this application without departing from the scope of this application. This application is intended to cover these modifications and variations of this application provided that they fall within the scope defined by the following claims and their equivalent technologies.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A software version rollback method, comprising:<claim-text>obtaining a differential update package of target software, wherein the differential update package comprises a differential operation instruction, and the differential operation instruction is used to indicate a difference between a first version of the target software and a second version to which the target software is to be updated;</claim-text><claim-text>updating a current version of the target software by using the differential update package, wherein the current version of the target software is updated from the first version to the second version; and</claim-text><claim-text>rolling back, when a rollback requirement for the target software is detected the current version of the target software to the first version.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the differential operation instruction comprises an instruction type and differential data, wherein the instruction type indicates a type of a differential operation, and the differential data comprises a first address space and/or first data stored in the first address space in the first version, and second data and/or a second address space in the second version.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the instruction type comprises one or more of the following types: ignoring, shift, insertion, deletion, or replacement.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, the instruction type comprises replacement, and the differential data comprises the first address space in the first version and the second data in the second version.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, further comprising:<claim-text>generating a differential rollback package based on the differential update package;</claim-text><claim-text>the rolling back comprises:</claim-text><claim-text>rolling back the target software by using the differential rollback package, wherein the differential rollback package comprises a reverse differential operation instruction, the reverse differential operation instruction indicates performing a second differential operation according to the reverse differential operation instruction after a first differential operation is performed according to the differential operation instruction, to roll back the target software to a state existing before the first differential operation is performed.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the differential update package comprises a plurality of differential operation instructions, and the differential rollback package comprises a plurality of reverse differential operation instructions arranged in a preset sequence.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the instruction type of the differential operation instruction is shift, the differential operation instruction is used to instruct to shift the first data from the first address space to the second address space, wherein the second address space is an address space other than the first address space in a first system; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to shift the first data in the second address space back to the first address space.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the instruction type of the differential operation instruction is insertion, the differential operation instruction is used to instruct to add the second address space in the first system, and add the second data comprised in the differential operation instruction to the second address space; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to delete the second address space.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein when the instruction type of the differential operation instruction is deletion, the differential operation instruction is used to instruct to delete the first address space and the first data stored in the first address space; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to add the first address space and add the first data to the first address space.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the instruction type of the differential operation instruction is replacement, the differential operation instruction is used to instruct to replace the first data in the first address space with the second data; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to replace the second data in the first address space with the first data.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A software version rollback apparatus, a processor coupled to a memory, and configured to execute instructions stored in the memory to:<claim-text>obtain a differential update package of target software, wherein the differential update package comprises a differential operation instruction, and the differential operation instruction is used to indicate a difference between a first version of the target software and a second version to which the target software is to be updated;</claim-text><claim-text>update a current version of the target software by using the differential update package, wherein the current version of the target software is updated from the first version to the second version; and</claim-text><claim-text>roll back, when a rollback requirement for the target software is detected the current version of the target software to the first version.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the differential operation instruction comprises an instruction type and differential data, wherein the instruction type indicates a type of a differential operation, and the differential data comprises a first address space and/or first data stored in the first address space in the first version, and second data and/or a second address space in the second version.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the instruction type comprises one or more of the following types: ignoring, shift, insertion, deletion, or replacement.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, the instruction type comprises replacement, and the differential data comprises the first address space in the first version and the second data in the second version.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, the processor is configured to execute instructions stored in the memory to:<claim-text>generate a differential rollback package based on the differential update package;</claim-text><claim-text>wherein the roll back comprises:</claim-text><claim-text>roll back the target software by using the differential rollback package, wherein the differential rollback package comprises a reverse differential operation instruction, the reverse differential operation instruction indicates performing a second differential operation according to the reverse differential operation instruction after a first differential operation is performed according to the differential operation instruction, to roll back the target software to a state existing before the first differential operation is performed.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the differential update package comprises a plurality of differential operation instructions, and the differential rollback package comprises a plurality of reverse differential operation instructions arranged in a preset sequence.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instruction type of the differential operation instruction is shift, the differential operation instruction is used to instruct to shift the first data from the first address space to the second address space, wherein the second address space is an address space other than the first address space in a first system; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to shift the first data in the second address space back to the first address space.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instruction type of the differential operation instruction is insertion, the differential operation instruction is used to instruct to add the second address space in the first system, and add the second data comprised in the differential operation instruction to the second address space; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to delete the second address space.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein when the instruction type of the differential operation instruction is deletion, the differential operation instruction is used to instruct to delete the first address space and the first data stored in the first address space; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to add the first address space and add the first data to the first address space.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The software version rollback apparatus according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the instruction type of the differential operation instruction is replacement, the differential operation instruction is used to instruct to replace the first data in the first address space with the second data; and<claim-text>the reverse differential operation instruction corresponding to the differential operation instruction is to replace the second data in the first address space with the first data.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A computer program product, comprising computer-executable instructions for storage on a non-transitory computer-readable medium that, when executed by a processor, cause a device to: obtain a differential update package of target software, wherein the differential update package comprises a differential operation instruction, and the differential operation instruction is used to indicate a difference between a first version of the target software and a second version to which the target software is to be updated;<claim-text>update a current version of the target software by using the differential update package, wherein the current version of the target software is updated from the first version to the second version; and</claim-text><claim-text>roll back, when a rollback requirement for the target software is detected the current version of the target software to the first version.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A software version rollback system, comprising an update server and a software version rollback apparatus, wherein<claim-text>the update server is configured to send a differential update package to the software version rollback apparatus; and</claim-text><claim-text>the software version rollback apparatus is configured to: obtain the differential update package of target software from the update server; update a current version of the target software by using the differential update package, wherein the current version of the target software is updated from a first version to a second version; and perform rollback on the target software when a rollback requirement for the target software is detected, the current version of the target software to the first version, wherein the differential update package comprises a differential operation instruction, and the differential operation instruction is used to indicate a difference between the first version of the target software and the second version to which the target software is to be updated.</claim-text></claim-text></claim></claims></us-patent-application>