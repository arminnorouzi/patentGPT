<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004388A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004388</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17733398</doc-number><date>20220429</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>51</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>901</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>242</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3017</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>8</main-group><subgroup>51</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9024</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2448</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2282</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Multilayered Generation and Processing of Computer Instructions</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17365679</doc-number><date>20210701</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11321093</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17733398</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>People Center, Inc.</orgname><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Gunda</last-name><first-name>Siddhartha</first-name><address><city>Milpitas</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ketkar</last-name><first-name>Sanket</first-name><address><city>Bangalore</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Boston</last-name><first-name>Kyle Michael</first-name><address><city>San Carlos</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Dong</last-name><first-name>Yu</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Conrad</last-name><first-name>Parker Rouse</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Systems, devices, computer-implemented methods, and tangible non-transitory computer readable media for performing multilayered generation and processing of computer instructions are provided. For example, a computing device may receive a request with instructions in a first computer language, parse the instructions in the first computer language, analyze the instructions in the first computer language in view of information describing structure of a first application, generate instructions in a second computer language different from the first computer language where the instructions in the second computer language are generated based on the instructions in the first computer language and the information describing structure of the first application, obtain a result from a second application where the result comprises information based on the instructions in the second computing language, and provide the result in response to the request comprising the instructions in the first computer language.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="112.10mm" wi="158.75mm" file="US20230004388A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="214.97mm" wi="161.97mm" orientation="landscape" file="US20230004388A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="201.08mm" wi="157.65mm" file="US20230004388A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="252.48mm" wi="186.01mm" orientation="landscape" file="US20230004388A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="265.09mm" wi="120.82mm" file="US20230004388A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="228.60mm" wi="120.82mm" file="US20230004388A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="265.09mm" wi="120.82mm" file="US20230004388A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD</heading><p id="p-0002" num="0001">The present disclosure generally relates to computer systems. More particularly, the present disclosure relates to automated generation and processing of computer source code or other instructions for execution by computer systems, computer applications, or internet services.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A computer program is a collection of instructions that can be executed by a computer device to perform one or more tasks. Computer programs usually are written by a computer programmer (i.e., software developer, programmer, coder, etc.) having specialized knowledge of one or more highly complex computer programming languages (e.g., Java, C, C++). For example, a computer programmer may enter human-readable source code in a source code editor or integrated development environment (IDE). A compiler program then transforms (i.e., &#x201c;compiles&#x201d;) the source code into a lower-level machine-readable language, such as assembly language or machine code, for execution by a computer device. Some compilers generally may compile source code into an intermediate language for execution by an interpreter computer program of a runtime environment.</p><p id="p-0004" num="0003">Most users lack the specialized knowledge, experience, and skills needed to write computer programs in a programming language. This usually prevents most non-programmers from developing and performing their own custom operations associated with organizational data and other types of information stored in computer systems. As such, most users generally are restricted to the applications and interfaces provided by computer programs written by computer programmers. Therefore, a need exists for providing tools that empower users with the ability to access, query, obtain, and/or perform other operations with organizational data and other types of information available in computer systems.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0005" num="0004">Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.</p><p id="p-0006" num="0005">One example aspect of the present disclosure is directed to a computer system that implements an organizational management platform that controls and leverages organizational data to manage organizational applications for an organization. The computer system includes one or more processors. The computer system includes one or more databases that collectively store a set of organizational data associated with the organization, wherein the set of organizational data comprises an object graph data structure comprising a plurality of employee data objects that respectively correspond to a plurality of employees of the organization. The computer system includes one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computer system to perform operations. The operations include receiving a user-defined query expression that is expressed in a first computer language, wherein the first computer language is or includes a custom query language. The operations include incorporating the user-defined query expression into an automated data processing routine, wherein the automated data processing routine is or includes one or more of a report, policy, workflow, trigger, or rule from an application. The operations include implementing the automated data processing routine to modify at least one data object in the object graph data structure. Implementing the automated data processing routine comprises translating the user-defined query expression from the first computer language into a second computer language, wherein the second computer language is or includes a data access language.</p><p id="p-0007" num="0006">Another example aspect of the present disclosure is directed to a computer-implemented method for performing multilayered generation and processing of computer instructions. For example, a computer-implemented method performed by one or more processors may include receiving a request comprising one or more instructions in a first computer language, parsing the one or more instructions in the first computer language in view of one or more rules associated with the first computer language, analyzing the one or more instructions in the first computer language in view of information describing structure of a first application, generating one or more instructions in a second computer language different from the first computer language with the one or more instructions in the second computer language being generated based on the one or more instructions in the first computer language and the information describing structure of the first application, obtaining a result from a second application where the result comprises information based on the one or more instructions in the second computing language, and providing the result in response to the request comprising the one or more instructions in the first computer language.</p><p id="p-0008" num="0007">Another example aspect of the present disclosure is directed to one or more tangible non-transitory computer-readable media storing computer-readable instructions that, when executed by one or more processors, cause the one or more processors of a computing system to perform operations. For example, the operations may include receiving a request comprising one or more instructions in a first computer language, parsing the one or more instructions in the first computer language in view of one or more rules associated with the first computer language, analyzing, the one or more instructions in the first computer language in view of information describing structure of a first application, generating one or more instructions in a second computer language different from the first computer language with the one or more instructions in the second computer language being generated based on the one or more instructions in the first computer language and the information describing structure of the first application, obtaining a result from a second application where the result comprises information based on the one or more instructions in the second computing language, and providing the result in response to the request comprising the one or more instructions in the first computer language.</p><p id="p-0009" num="0008">Another example aspect of the present disclosure is directed to a computing system having one or more processors that are communicatively coupled to one or more non-transitory computer-readable media with instructions that, when executed by the one or more processors, cause the one or more processors to perform operations. For example, the operations may include receiving a request comprising one or more instructions in a first computer language, parsing the one or more instructions in the first computer language in view of one or more rules associated with the first computer language, analyzing the one or more instructions in the first computer language in view of information describing structure of a first application, generating one or more instructions in a second computer language different from the first computer language with the one or more instructions in the second computer language being generated based on the one or more instructions in the first computer language and the information describing structure of the first application, obtaining a result from a second application, the result comprising information based on the one or more instructions in the second computing language, and providing, the result in response to the request comprising the one or more instructions in the first computer language.</p><p id="p-0010" num="0009">Other aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and devices for providing multilayered generation and processing of computer instructions. These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0011" num="0010">Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which:</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a block diagram of an example environment including a computing system that performs operations, according to example embodiments of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a block diagram of an example of a computing device, according to example embodiments of the present disclosure.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram of an example computing environment including multiple computing systems, according to example embodiments of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a flow diagram of an example method for performing multilayered generation and processing of computer instructions, according to example embodiments of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a flow diagram of an example method for performing multilayered generation and processing of computer instructions, according to example embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a flow diagram of an example method for performing multilayered generation and processing of computer instructions, according to example embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0018" num="0017">Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.</p><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0019" num="0018">Reference now will be made in detail to embodiments, one or more examples of which are illustrated in the drawings. Each example is provided by way of explanation of the embodiments, not limitation of the present disclosure. In fact, it will be apparent to those skilled in the art that various modifications and variations can be made to the embodiments without departing from the scope or spirit of the present disclosure. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a further embodiment. Thus, it is intended that aspects of the present disclosure cover such modifications and variations.</p><p id="p-0020" num="0019">Generally, the present disclosure is directed to providing improved computer applications, computer systems, computer-implemented methods, user interfaces, and/or services for multilayered generation and processing of computer instructions. In particular, examples described in the present disclosure enable automated generation and processing of computer instructions based on statements provided in a custom computer language. As one example, a custom computer language may enable users to perform operations involving organizational data. For example, the custom computer language may allow users to query, interact with, and/or perform other various tasks associated with organizational data stored in an organizational data management system. In addition, statements provided in the custom computer language generally may be used to generate and process additional instructions that are executed in association with one or more different applications, computer systems, and/or data stores.</p><p id="p-0021" num="0020">Organizations generally use many applications and systems to sustain operations. Such applications and systems generally rely on organizational data and processing that is tied to organizational data. In addition, such applications and systems usually are written by computer programmers in complex programming languages, utilize sophisticated data models with large numbers of entities and relationships (e.g., 1, 10, dozens, hundreds, thousands, etc.), and involve various types of proprietary technologies. However, most users that work with organizational data lack the specialized knowledge, experience, and skills to build and maintain applications and systems that utilize organizational data. In addition, every organization has resource limitations and many organizations do not have the resources or expertise to perform custom development, which can drain organizational resources, introduce competing priorities, lead to increased expenses, complicate maintenance activities, etc. As such, organizations can benefit from improved application, systems, and tools that empower users with the ability to access, query, obtain, and/or perform various operations with organizational data and/or other types of information available in computer systems.</p><p id="p-0022" num="0021">The present disclosure provides examples of performing multilayered generation and processing of computer instructions based on a custom computer language. In examples of the present disclosure, a computer system may perform multilayered generation and processing of computer instructions, for example, based on receiving a request with instructions in a custom computer language, parsing the instructions in the custom computer language in view of one or more rules associated with the custom computer language, analyzing the instructions in the custom computer language based on information describing structure of an application associated with organizational data, generating one or more instructions in a different computer language other than the custom computer language based on the instructions in the custom computer language and the information describing structure of the application associated with the organizational data, obtaining a result from another application based on the instructions generated in the other computing language, and providing the result from the other application in response to the original request with the instructions in the custom computer language.</p><p id="p-0023" num="0022">Example implementations of the present disclosure can be implemented in the context of or as a portion of an organizational management platform that controls and leverages organizational data to manage organizational applications such as payroll, operations, human resources (e.g., onboarding and offboarding), benefits, information technology and device management, third-party application integration and access, and many others.</p><p id="p-0024" num="0023">The organizational management platform can hold, for each of one or more organizations, a centralized set of organizational data that acts as a single, centralized system of record for all organizational management processes for that organization. Each organization can include a number of users which are able to access and interact with the organizational management platform. Some users may have administrative permissions which define whether the user is able to access and/or modify certain types of organizational data for their organization.</p><p id="p-0025" num="0024">The organizational data for each organization can include data directly entered into the organizational management platform and/or can include data retrieved, pulled, or otherwise obtained from one or more first party and/or third-party applications with which the organizational management platform may have varying levels of integration. This ingestion and storage of data from third-party applications is in contrast to systems which simply sit on top of third-party applications and apply rules at run time. In some implementations, the organizational management platform can provide a user with the ability (e.g., by configuring Simple Mail Transfer Protocol (SMTP) settings) to configure the cadence or periodicity at which the organizational management platform receives or ingests data (e.g., via .csv files) from third-party applications. Data can be transferred between the organizational management platform and third-party applications (e.g., to and/or from) using various techniques such as application programming interfaces, data hooks, flat files, bulk uploads/downloads and/or other data transfer mechanisms.</p><p id="p-0026" num="0025">The organizational data can, in some implementations, be held as one or more object databases. For example, multiple object classes can be defined in the object databases. Example object classes include employees, devices, job candidates, benefits policies, documents, pay instances, timecards, and/or other objects. For each object, values can be provided and maintained for one or more attributes, such as location, role, salary, etc. Links can be made between different objects. For example, one or more device objects can be associated with employee objects.</p><p id="p-0027" num="0026">The object database(s) can be represented as or can store data which can be represented as one or more graphs with nodes that correspond to objects and edges that correspond to links or logical associations between objects and/or object attribute(s). Graph(s) can be traversed to understand or leverage relationships among objects and their attribute(s). In one example, the organizational data can be synthesized into a single graph which includes multiple classes of objects and defines complex relationships among objects and their attribute(s). For example, all workflows, including payroll, IT, etc. can be run through one platform and graph. In some implementations, the employee objects can be referred to and/or treated as sentinel nodes.</p><p id="p-0028" num="0027">In some implementations, the organizational data can include organizational structure data. For example, the organizational structure data can be encoded within links or edges defined between objects of the organizational data or can be stored as a separate data layer. For example, the organizational structure data can define organizational relationships between objects, including employee objects. As one example, the organizational structure data may indicate that a first employee object has the relationship of &#x201c;manager&#x201d; relative to a second employee object. The organizational relationships can be defined between specific objects and/or groups of objects. As another example, the organizational structure data may indicate that a first group of employees (e.g., the &#x201c;IT Administrator&#x201d; group of employees) has a certain set of permissions (e.g., device activation/deactivation) relative to a particular group of devices (e.g. the &#x201c;work laptops&#x201d; group of the devices).</p><p id="p-0029" num="0028">Example implementations of the present disclosure leverage a domain-specific query language that can be used to perform (e.g., in real time) queries against the organizational data. The custom query language can be used to define functions or queries which return data that satisfies or responds to the functions or queries. In some implementations, the custom query language is a declarative language. In some implementations, the custom query language includes organization functions or operators which leverage organizational relationships within the organizational data. For example, the organization function ORG (employee, relationship) returns one or more other employees that have the specified relationship to the specified employee.</p><p id="p-0030" num="0029">Specifically, according to an aspect of the present disclosure, the custom query language can be incorporated into reports, policies, triggering, data management, and/or workflows. For example, a user-constructed query in the custom query language can be used for intelligently facilitating various downstream operations, for example, by reference/query to an employee or organizational chart.</p><p id="p-0031" num="0030">In one example, the custom query language can allow for the creation of &#x201c;calculated fields&#x201d; which can be data fields which are or act as a function of a custom query language script and can be propagated to or referenced by other reports, policies, triggering, data management, and/or workflows.</p><p id="p-0032" num="0031">In other examples, custom query language expressions can underlie or be included in predefined reports, policies, triggering, data management, and/or workflows. These predefined items can be visible and modifiable by the user (e.g., in raw query expression form or via a wizard user interface). For example, in the wizard user interface, objects or functions can be automatically populated and/or suggested.</p><p id="p-0033" num="0032">In some implementations, the custom query language can handle or include functions or expressions which include &#x201c;organization&#x201d; functions or operators which leverage employee or organizational data held by the core system of record. For example, as described elsewhere herein, the function ORG (employee, relationship) can return one or more other employees that have the relationship to the employee given in the function. Other example organization functions or operators may return employees or other data based on any of the employee or organizational data held by the core system of record (e.g., return all employees working in California making over $100,000/year).</p><p id="p-0034" num="0033">The systems, methods, and computer program products described herein provide a number of technical effects and benefits. As one example, the embodiments described in the present disclosure provide automated generation and processing of computer instructions for use across a variety of applications and systems that utilize different underlying technologies and technical designs, for example, more efficiently and with fewer computing resources (e.g., less processing power, less memory usage, less power consumption, etc.), that would otherwise be wasted by maintaining custom, proprietary, and/or manual processes. In particular, examples of the present disclosure automate the generation and processing of computer instructions across different applications and systems using a rigorous computerized process.</p><p id="p-0035" num="0034">With reference to the Figures, example embodiments of the present disclosure will be discussed in further detail.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>1</b></figref> depicts a block diagram of an example environment <b>100</b> including a computing system <b>110</b> that performs operations according to example embodiments of the present disclosure. The environment <b>100</b> includes a network <b>102</b>, a computing system <b>110</b>, one or more computing devices <b>112</b>, one or more processors <b>114</b>, one or more memory devices <b>116</b>, data <b>118</b>, instructions <b>120</b>, a remote computing system <b>130</b>, one or more computing devices <b>132</b>, one or more processors <b>134</b>, one or more memory devices <b>136</b>, data <b>138</b>, instructions <b>140</b>, one or more computing devices <b>152</b>, one or more processors <b>154</b>, one or more memory devices <b>156</b>, data <b>158</b>, and instructions <b>160</b>.</p><p id="p-0037" num="0036">The network <b>102</b> can include any type of communications network. For example, the network <b>102</b> can include a local area network (LAN), a wide area network (WAN), an intranet, an extranet, and/or the internet. Further, the network <b>102</b> can include any number of wired or wireless connections and/or links that can be used to communicate with one or more computing systems (e.g., the computing system <b>110</b> and/or the remote computing system <b>130</b>) and/or one or more devices (e.g., the one or more computing devices <b>152</b>). Communication over the network <b>102</b> can be performed via any type of wired and/or wireless connection and can use a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).</p><p id="p-0038" num="0037">The computing system <b>110</b> can include any combination of systems and/or devices including one or more computing systems (not shown) and/or one or more computing devices <b>112</b>. Further, the computing system <b>110</b> may be connected (e.g., networked) to one or more computing systems (e.g., remote computing system <b>130</b>) and/or one or more computing devices (e.g., one or more computing devices <b>132</b>, <b>152</b>) via the network <b>102</b>. The computing system <b>110</b> may operate in various different configurations including as a server or a client machine in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. Though the computing system <b>110</b> is depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as a single device, the computing system <b>110</b> can include any collection or combination of devices that individually or in combination with other devices, execute a set of one or more instructions to perform any one or more of the operations discussed herein.</p><p id="p-0039" num="0038">In this example, the computing system <b>110</b> includes the one or more computing devices <b>112</b>. The one or more computing devices <b>112</b> can include any type of computing device. For example, the one or more computing devices <b>112</b> can include a personal computing device (e.g., a desktop computing device), a mobile computing device (e.g., a smartphone or tablet device), a wearable computing device (e.g., a smartwatch device), an embedded computing device, a web appliance, a server computing device, a network router, a switch, a bridge, or any device capable of executing a set of instructions (e.g., any combination of instructions which can include sequential instructions and/or parallel instructions) associated with one or more operations and/or one or more actions to be performed by the computing system <b>110</b> or any of the constituent components and/or devices of the computing system <b>110</b>.</p><p id="p-0040" num="0039">Any of the one or more computing devices <b>112</b> can include the one or more processors <b>114</b>. The one or more processors <b>114</b> can include any processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, or a microcontroller) and can include one processor or multiple processors that may be operatively connected. In some embodiments, the one or more processors <b>114</b> may include one or more complex instruction set computing (CISC) microprocessors, one or more reduced instruction set computing (RISC) microprocessors, one or more very long instruction word (VLIW) microprocessors, and/or one or more processors that are configured to implement other instruction sets.</p><p id="p-0041" num="0040">The one or more computing devices <b>112</b> can include the one or more memory devices <b>116</b>. The one or more memory devices <b>116</b> can be used to store data and/or information and can include one or more computer-readable media, one or more non-transitory computer-readable storage media, and/or one or more machine-readable media. Though the one or more memory devices <b>116</b> are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as a single unit (e.g., a single medium), the computer-readable storage media can include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store one or more sets of instructions. Further, the computer-readable storage media can include any medium that is capable of storing, encoding, and/or carrying a set of instructions for execution by a computing device and which may cause the computing device to perform any of the one or more operations described herein. In some embodiments, the computer-readable storage media can include one or more solid-state memories, one or more optical media, and/or one or more magnetic media. By way of example, the one or more memory devices <b>116</b> can include any combination of random-access memory (RAM), read-only memory (ROM), EEPROM, EPROM, one or more flash memory devices, and/or one or more magnetic storage devices (e.g., one or more hard disk drives).</p><p id="p-0042" num="0041">The one or more processors <b>114</b> can be configured to execute one or more instructions to perform the operations described herein including, for example, one or more operations associated with performing multilayered generation and processing of computer instructions in association with a custom query language (e.g., a custom query language for use with organizational data) across various types of applications and/or computer systems. Further, the one or more memory devices <b>116</b> can store the data <b>118</b> and/or the instructions <b>120</b>, which can be executed by the one or more processors <b>114</b> to cause the one or more computing devices <b>112</b> to perform one or more operations. For example, the one or more operations performed by the one or more processors <b>114</b> can include receiving a request comprising one or more instructions in a first computer language, parsing the one or more instructions in the first computer language in view of one or more rules associated with the first computer language, analyzing the one or more instructions in the first computer language in view of information describing structure of a first application, generating one or more instructions in a second computer language different from the first computer language with the one or more instructions in the second computer language being generated based on the one or more instructions in the first computer language and the information describing structure of the first application, obtaining a result from a second application where the result comprises information based on the one or more generated instructions in the second computing language, and providing the result in response to the request comprising the one or more instructions in the first computer language, etc.</p><p id="p-0043" num="0042">The data <b>118</b> can include organizational data (e.g., organizational data that can include one or more organizational records), one or more data structures defining, describing, and/or otherwise associated with the organizational data, rule data (e.g., rule data that includes one or more rules used to configure an application policy, one or more rules maintained by or otherwise associated with an organizational data management system, etc.), application data (e.g., application data associated with a plurality of applications including one or more third-party applications and/or one or more intra-organizational applications), third-party integration data (e.g., data providing configuration and/or other information for performing integration and synchronization with each of one or more different third-party systems and/or applications), organizational policy data (e.g., organizational policy data associated with one or more organizational policies), application policy data (e.g., policy data that includes one or policies associated with the organizational data, the rule data, the application data, one or more applications, one or more devices, etc.), data that includes instructions in a custom computer language (e.g., a custom query language based on organizational data), data that includes rules associated with the custom computer language, and/or other types of data. Further, the instructions <b>120</b> can include one or more instructions to use data including the data <b>118</b> to perform any one or more of the various operations described herein. In some embodiments, the one or more memory devices <b>116</b> can be used to store one or more applications that can be operated by the one or more processors <b>114</b>. The data <b>118</b>, the instructions <b>120</b>, and/or the one or more applications can be associated with an organization. Further, the computing system <b>110</b> may be associated with an organization and may be configured to manage the one or more applications. For example, the computing system <b>110</b> can perform one or more operations associated with authenticating one or more users that attempt to access the one or more applications which can include one or more third-party applications, which may be remote from the computing system <b>110</b>.</p><p id="p-0044" num="0043">Any of the one or more computing devices <b>112</b> can include one or more input devices <b>122</b> and/or one or more output devices <b>124</b>. The one or more input devices <b>122</b> can be configured to receive input (e.g., user input) and can include one or more touch screens, one or more keyboards, one or more pointing devices, (e.g., mouse device), one or more buttons, one or more microphones, and/or one or more cameras. The one or more output devices <b>124</b> can include one or more display devices, one or more loudspeaker devices, one or more haptic output devices. By way of example, the one or more output devices <b>124</b> can be used to display a graphical user interface via a display device that can include a touch screen layer that is configured to detect one or more inputs (e.g., one or more user inputs). The one or more processors <b>114</b> may perform one or more operations (e.g., operations associated with performing multilayered generation and processing of computer instructions) based at least in part on the one or more inputs.</p><p id="p-0045" num="0044">The remote computing system <b>130</b> includes the one or more computing devices <b>132</b>. Each of the one or more computing devices <b>132</b> can include one or more processors <b>134</b>, one or more memory devices <b>136</b>, the data <b>138</b>, and/or the instructions <b>140</b>. The remote computing system <b>130</b> can include any of the attributes and/or capabilities of the computing system <b>110</b>. Further, the remote computing system <b>130</b> can communicate with one or more devices and/or one or more systems via the network <b>102</b>.</p><p id="p-0046" num="0045">In some embodiments, the remote computing system <b>130</b> can include one or more applications (e.g., computer software applications comprising computer instructions) that can be stored and/or executed by the remote computing system <b>130</b>. Further, the one or more applications can include one or more third-party applications that may be accessed from the computing system <b>110</b> and which are at least partly operated from the remote computing system <b>130</b>. The one or more third-party applications generally may be associated with and provided by an organization that is different from the organization that is associated with the computing system <b>110</b>. Further, the data <b>138</b> can include one or more portions of the organizational data (e.g., one or more organizational records), one or more data structures associated with the organizational data, rule data, organizational policy data, application policy data, third-party integration data, and/or other types of data.</p><p id="p-0047" num="0046">One or more computing devices <b>152</b> (e.g., user devices or any other types of devices) can include one or more processors <b>154</b>, one or more memory devices <b>156</b>, the data <b>158</b>, and/or the instructions <b>160</b>. Such one or more computing devices <b>152</b> may include any of the attributes and/or capabilities of the one or more computing devices <b>112</b>, <b>132</b>. Further, such one or more computing devices <b>152</b> can communicate with one or more devices and/or one or more systems via the network <b>102</b>.</p><p id="p-0048" num="0047">In some embodiments, the one or more computing devices <b>152</b> can include one or more applications (e.g., computer software applications comprising computer instructions) that can be stored and/or executed by such one or more computing devices <b>152</b>. Further, the one or more applications can include one or more third-party applications that may be accessed from the one or more computing devices <b>152</b> and which are at least partly operated from such one or more computing devices <b>152</b>. Data <b>138</b> may include, for example, one or more portions of the organizational data (e.g., one or more organizational records), one or more data structures associated with the organizational data, rule data, organizational policy data, application policy data, third-party integration data (e.g., third-party application integration data), and/or other types of data.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a block diagram of an example computing device <b>200</b> according to example embodiments of the present disclosure. The computing device <b>200</b> can include one or more attributes and/or capabilities of the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, and/or the computing device <b>200</b>. Furthermore, the computing device <b>200</b> can be configured to perform one or more operations and/or one or more actions that can be performed by the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, and/or the computing device <b>200</b>.</p><p id="p-0050" num="0049">As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the computing device <b>200</b> can include one or more memory devices <b>202</b>, organizational data <b>203</b>, rule data <b>204</b>, organizational policy data <b>205</b>, application policy data <b>206</b>, integration data <b>207</b>, data structures <b>208</b>, one or more interconnects <b>212</b>, one or more processors <b>220</b>, a network interface <b>222</b>, one or more mass storage devices <b>224</b>, one or more output devices <b>226</b>, one or more sensors <b>228</b>, one or more input devices <b>230</b>, and/or one or more location devices <b>232</b>.</p><p id="p-0051" num="0050">The one or more memory devices <b>202</b> can store information and/or data (e.g., organizational data <b>203</b>, rule data <b>204</b>, organizational policy data <b>205</b>, application policy data <b>206</b>, integration data <b>207</b>, data structures <b>208</b>, and/or any other types of data). Further, the one or more memory devices <b>202</b> can include one or more non-transitory computer-readable storage media, including RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and any combination thereof. The information and/or data stored by the one or more memory devices <b>202</b> can be executed by the one or more processors <b>220</b> to cause the computing device <b>200</b> to perform one or more operations associated with performing multilayered generation and processing of computer instructions (e.g., in association with computer instructions in a custom query language) across various types of applications and/or computer systems, including, for example, receiving a request comprising one or more instructions in a first computer language, parsing the one or more instructions in the first computer language in view of one or more rules associated with the first computer language, analyzing the one or more instructions in the first computer language in view of information describing structure of a first application, generating one or more instructions in a second computer language different from the first computer language with the one or more instructions in the second computer language being generated based on the one or more instructions in the first computer language and the information describing structure of the first application, obtaining a result from a second application where the result comprises information based on the one or more instructions in the second computing language, and providing the result in response to the request comprising the one or more instructions in the first computer language.</p><p id="p-0052" num="0051">The organizational data <b>203</b> can include one or more portions of data (e.g., the data <b>118</b>, the data <b>138</b>, and/or the data <b>158</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or instructions (e.g., the instructions <b>120</b>, the instructions <b>140</b>, and/or the instructions <b>160</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that are stored respectively in any of the one or more memory devices <b>116</b>, <b>136</b>, <b>156</b>. The organizational data <b>203</b> also can include information associated with one or more applications (e.g., one or more third-party applications), one or more organizational records and/or one or more organizational policies. In some embodiments, the organizational data <b>203</b> can be received from one or more computing systems (e.g., the remote computing system <b>130</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) which can include one or more computing systems that are remote (e.g., in another room, building, part of town, city, or nation) from the computing device <b>200</b>.</p><p id="p-0053" num="0052">The rule data <b>204</b> can include one or more portions of data (e.g., the data <b>118</b>, the data <b>138</b>, and/or the data <b>158</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or instructions (e.g., the instructions <b>120</b>, the instructions <b>140</b>, and/or the instructions <b>160</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that are stored in the one or more memory devices <b>116</b>, the one or more memory devices <b>136</b>, and/or the one or more memory devices <b>156</b>, respectively. The rule data <b>204</b> can include information associated with one or more rules that can be used to generate and/or implement an application policy. The rule data <b>204</b> also can include information associated with one or more rules of an organizational data management system (e.g., base or default rules provided or enforced by the system, one or more custom rules configured by an organization, etc.). The rule data <b>204</b> also can include one or more rules associated with implementing and/or utilizing a custom computer language, such as a custom computer language for performing operations associated with organizational data <b>203</b>. In some embodiments, the rule data <b>204</b> can be received from one or more computing systems (e.g., the remote computing system <b>130</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), which can include one or more computing systems that are remote from the computing device <b>200</b>.</p><p id="p-0054" num="0053">The organizational policy data <b>205</b> can include one or more portions of data (e.g., the data <b>118</b>, the data <b>138</b>, and/or the data <b>158</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or instructions (e.g., the instructions <b>120</b>, the instructions <b>140</b>, and/or the instructions <b>160</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that are stored in the one or more memory devices <b>116</b>, the one or more memory devices <b>136</b>, and/or the one or more memory devices <b>156</b>, respectively. Furthermore, the organizational policy data <b>205</b> can include information associated with one or more organizational policies that are used to regulate one or more applications (e.g., one or more third-party applications), one or more computing devices, and/or one or more records which can include one or more organizational records and/or one or more employee records. In some embodiments, the organizational policy data <b>205</b> can be received from one or more computing systems (e.g., the remote computing system <b>130</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) which can include one or more computing systems that are remote from the computing device <b>200</b>.</p><p id="p-0055" num="0054">The application policy data <b>206</b> can include one or more portions of data (e.g., the data <b>118</b>, the data <b>138</b>, and/or the data <b>158</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or instructions (e.g., the instructions <b>120</b>, the instructions <b>140</b>, and/or the instructions <b>160</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that are stored in the one or more memory devices <b>116</b>, the one or more memory devices <b>136</b>, and/or the one or more memory devices <b>156</b>, respectively. Furthermore, the application policy data <b>206</b> can include information associated with one or more policies that are used to implement an application policy associated with one or more applications (e.g., one or more third-party applications), one or more computing devices, and/or one or more records which can include one or more organizational records and/or one or more employee records. In some embodiments, the application policy data <b>206</b> can be received from one or more computing systems (e.g., the remote computing system <b>130</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) which can include one or more computing systems that are remote from the computing device <b>200</b>.</p><p id="p-0056" num="0055">The integration data <b>207</b> can include one or more portions of data (e.g., the data <b>118</b>, the data <b>138</b>, and/or the data <b>158</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or instructions (e.g., the instructions <b>120</b>, the instructions <b>140</b>, and/or the instructions <b>160</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that are stored in the one or more memory devices <b>116</b>, the one or more memory devices <b>136</b>, and/or the one or more memory devices <b>156</b>, respectively. The integration data <b>207</b> can include configuration and/or operational information associated with integrating and synchronizing data (e.g., organizational data <b>203</b>) among one or more applications. For example, the integration data <b>207</b> can include information that enables integration and synchronization between each of one or more applications (e.g., third-party applications and/or other applications). In an embodiment, the integration data <b>207</b> provides integration information that allows an organizational data management system (e.g., a system of record for organizational data and organizational data processing), for example, to obtain information from one or more applications (e.g., third party and/or other applications), to perform operations involving organizational data (e.g., organizational data <b>203</b>) in the organizational data management system, to synchronize organizational data across one or more applications, to perform one or more actions involving the applications based on organizational data in the organizational data management system, and/or to perform one or more other operations associated with managing organizational data as a system of record. In some embodiments, the integration data <b>207</b> can be received from one or more computing systems (e.g., the remote computing system <b>130</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), which can include one or more computing systems that are remote from the computing device <b>200</b>.</p><p id="p-0057" num="0056">The data structures <b>208</b> can include one or more portions of data (e.g., the data <b>118</b>, the data <b>138</b>, and/or the data <b>158</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or instructions (e.g., the instructions <b>120</b>, the instructions <b>140</b>, and/or the instructions <b>160</b>, which are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that are stored in the one or more memory devices <b>116</b>, the one or more memory devices <b>136</b>, and/or the one or more memory devices <b>156</b>, respectively. The data structures <b>208</b> can include one or more logical and/or physical instances of information representing or describing one or more entities (e.g., objects, records, etc.), one or more relationships involving one or more of the entities, one or more data values associated with each of one or more of the entities and/or one or more of the relationships, one or more functions and/or operations that may be applied to each of one or more of the entities and/or one or more of the relationships, any other data or metadata describing or otherwise defining structure and/or rules associated with one or more of the entities and/or one or more of the relationships, etc.</p><p id="p-0058" num="0057">The data structures <b>208</b> can be implemented and utilized with one or more types of computer software, computer hardware, or any combination thereof. In an embodiment, the data structures <b>208</b> are used to represent and perform processing associated with various types of organizational data (e.g., organizational data <b>203</b>). For example, the data structures <b>208</b> may include information about various types of information and entities associated with organizational data including, but not limited to, individuals (e.g., employees, vendors, independent contractors), departments, teams, roles, groups, locations, offices, documents, tasks, reports, accounts, devices, applications, end-user applications, licenses, workflows, alerts, and/or any other types of entities representing or related to managing organizational data (e.g., organizational data <b>203</b>).</p><p id="p-0059" num="0058">The data structures <b>208</b> also can define various relationships among the various entities associated with organizational data. For example, the data structures <b>208</b> may define and be used to enforce relationships such as each employee must be assigned to a department, each employee can be included on one or more teams, each employee must be assigned to a primary location, each employee may be assigned to one or more secondary locations, employees may have one or more computing devices, each vendor must have a current audit, each independent contractor must be associated with a contract, and/or any other relationships provided by an organizational data management system or configured for an organization that utilizes an organizational data management system (e.g., a system for managing organizational data <b>203</b> based on one or more organizational data management applications).</p><p id="p-0060" num="0059">In some embodiments, the data structures <b>208</b> can include one or more object graphs providing information about entities, relationships, and/or any other aspects relating to the definition, structure, and rules associated with organizational data (e.g., organizational data <b>203</b>). The data structures <b>208</b> also can include any one or more other types of data structures (e.g., with or without the use of object graphs) that provide information about entities, relationships, and/or any other aspects of the definition, structure, and/or rules associated with organizational data. In some embodiments, the data structures <b>208</b> can be received from one or more computing systems (e.g., the remote computing system <b>130</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), which can include one or more computing systems that are remote from the computing device <b>200</b>.</p><p id="p-0061" num="0060">The one or more interconnects <b>212</b> can include one or more interconnects or buses that can be used to send and/or receive one or more signals (e.g., electronic signals) and/or data (e.g., organizational data <b>203</b>, rule data <b>204</b>, organizational policy data <b>205</b>, application policy data <b>206</b>, integration data <b>207</b>, data structures <b>208</b>, and/or any other data) between components of the computing device <b>200</b>, including the one or more memory devices <b>202</b>, the one or more processors <b>220</b>, the network interface <b>222</b>, the one or more mass storage devices <b>224</b>, the one or more output devices <b>226</b>, the one or more sensors <b>228</b> (e.g., a sensor array), the one or more input devices <b>230</b>, and/or the one or more location devices <b>232</b>. The one or more interconnects <b>212</b> can be arranged or configured in different ways. For example, the one or more interconnects <b>212</b> can be configured as parallel or serial connections. Further the one or more interconnects <b>212</b> can include one or more internal buses that are used to connect the internal components of the computing device <b>200</b> and one or more external buses used to connect the internal components of the computing device <b>200</b> to one or more external devices. By way of example, the one or more interconnects <b>212</b> can include different interfaces including Industry Standard Architecture (ISA), Extended ISA, Peripheral Components Interconnect (PCI), PCI Express, Serial AT Attachment (SATA), HyperTransport (HT), USB (Universal Serial Bus), Thunderbolt, IEEE 1394 interface (FireWire), and/or other interfaces that can be used to connect components.</p><p id="p-0062" num="0061">The one or more processors <b>220</b> can include one or more computer processors that are configured to execute the one or more instructions stored in the one or more memory devices <b>202</b>. For example, the one or more processors <b>220</b> can, for example, include one or more general purpose central processing units (CPUs), application specific integrated circuits (ASICs), and/or one or more graphics processing units (GPUs). Further, the one or more processors <b>220</b> can perform one or more actions and/or operations including one or more actions and/or operations associated with the organizational data <b>203</b>, the rule data <b>204</b>, the organizational policy data <b>205</b>, the application policy data <b>206</b>, the integration data <b>207</b>, the data structures <b>208</b>, and/or any other data. The one or more processors <b>220</b> can include single or multiple core devices including a microprocessor, microcontroller, integrated circuit, and/or a logic device.</p><p id="p-0063" num="0062">The network interface <b>222</b> can support network communications. The network interface <b>222</b> can support communication via networks including a local area network and/or a wide area network (e.g., the internet). For example, the network interface <b>222</b> can allow the computing device <b>200</b> to communicate with the computing system <b>110</b> via the network <b>102</b>.</p><p id="p-0064" num="0063">The one or more mass storage devices <b>224</b> (e.g., a hard disk drive and/or a solid-state drive) can be used to store data including the organizational data <b>203</b>, the rule data <b>204</b>, the organizational policy data <b>205</b>, the application policy data <b>206</b>, the integration data <b>207</b>, the data structures <b>208</b>, and/or any other data. The one or more output devices <b>226</b> can include one or more display devices (e.g., liquid crystal display (LCD), OLED display, mini-LED display, micro-LED display, plasma display, and/or cathode ray tube (CRT) display), one or more light sources (e.g., LEDs), one or more loudspeakers, and/or one or more haptic output devices (e.g., one or more devices that are configured to generate vibratory output).</p><p id="p-0065" num="0064">The one or more sensors <b>228</b> can be configured to detect various states and can include one or more cameras, one or more light detection and ranging (LiDAR) devices, one or more sonar devices, and/or one or more radar devices. Further, the one or more sensors <b>228</b> can be used to provide input (e.g., an image of a user captured using the one or more cameras) that can be used as part of invoking or performing one or more operations. For example, the one or more sensors <b>228</b> can be used to authenticate the identity of a user and determine an authorization level based on an image of the user's face that is captured using the one or more sensors <b>228</b>.</p><p id="p-0066" num="0065">The one or more input devices <b>230</b> can include one or more touch sensitive devices (e.g., a touch screen display), a mouse, a stylus, one or more keyboards, one or more buttons (e.g., ON/OFF buttons and/or YES/NO buttons), one or more microphones, and/or one or more cameras (e.g., cameras that are used to detect gestures that can trigger one or more operations by the computing device <b>200</b>).</p><p id="p-0067" num="0066">Although the one or more memory devices <b>202</b> and the one or more mass storage devices <b>224</b> are depicted separately in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the one or more memory devices <b>202</b> and the one or more mass storage devices <b>224</b> can be regions within the same memory module. The computing device <b>200</b> can include one or more additional processors, memory devices, and/or network interfaces, which may be provided separately or on the same chip or board. The one or more memory devices <b>202</b> and the one or more mass storage devices <b>224</b> can include one or more computer-readable media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, and/or other memory devices.</p><p id="p-0068" num="0067">The one or more memory devices <b>202</b> can store sets of instructions for applications including an operating system that can be associated with various software applications or data. For example, the one or more memory devices <b>202</b> can store sets of instructions for one or more applications (e.g., one or more organizational applications and/or one or more third-party applications) that are subject to one or more application policies or utilize third-party integration data that can be configured, generated, and/or implemented by the computing device <b>200</b> and/or one or more other computing devices or one or more computing systems. In some embodiments, the one or more memory devices <b>202</b> can be used to operate or execute a general-purpose operating system that operates on mobile computing devices and/or and stationary devices, including for example, smartphones, laptop computing devices, tablet computing devices, and/or desktop computers.</p><p id="p-0069" num="0068">The software applications that can be operated or executed by the computing device <b>200</b> can include applications associated with the computing system <b>110</b>, the remote computing system <b>130</b>, and/or the one or more computing devices <b>152</b> that are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Further, the software applications that can be operated and/or executed by the computing device <b>200</b> can include native applications, web services, and/or web-based applications.</p><p id="p-0070" num="0069">The one or more location devices <b>232</b> can include one or more devices or circuitry for determining the position of the computing device <b>200</b>. For example, the one or more location devices <b>232</b> can determine an actual and/or relative position of the computing device <b>200</b> by using a satellite navigation positioning system (e.g. a GPS system, a Galileo positioning system, the GLObal Navigation satellite system (GLONASS), the BeiDou Satellite Navigation and Positioning system, an inertial navigation system, a dead reckoning system, based on IP address, by using triangulation and/or proximity to cellular towers or Wi-Fi hotspots, and/or beacons.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a block diagram of an example computing environment <b>300</b> including multiple computing systems, according to example embodiments of the present disclosure. Any of computing system <b>302</b>, computing system <b>306</b>, or computing system <b>310</b> can include one or more attributes and/or capabilities of the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, and/or the computing device <b>200</b>. Furthermore, any of the computing system <b>302</b>, the computing system <b>306</b>, or the computing system <b>310</b> can be configured to perform one or more operations and/or one or more actions that can be performed by the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, and/or the computing device <b>200</b>.</p><p id="p-0072" num="0071">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the environment <b>300</b> includes the computing system <b>302</b>, an application <b>304</b>, an application development environment <b>305</b>, the computing system <b>306</b>, an application <b>308</b>, a cloud application development environment <b>309</b>, the computing system <b>310</b>, organizational data <b>311</b> (e.g., organizational data <b>203</b>), one or more application(s) <b>312</b>, application policy data <b>313</b>, integration data <b>314</b>, data structures <b>315</b>, cloud development environment <b>316</b>, custom language processing engine <b>317</b>, computer instruction compiler <b>318</b>, computer instruction generator <b>319</b>, one or more computing systems <b>320</b>, data store <b>330</b>, data store <b>340</b>, and data store <b>350</b>.</p><p id="p-0073" num="0072">In an embodiment, the computing system <b>302</b>, the computing system <b>306</b>, the computing system <b>310</b>, and/or the computing system(s) <b>320</b> can be configured to communicate directly and/or via a communication network (e.g., the network <b>102</b> depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). In one embodiment, the computing system <b>302</b> includes an application <b>304</b> that is stored and/or operates on the computing system <b>302</b> and can communicate (e.g., send and/or receive data and/or information) with one or more other computing systems including the computing system <b>306</b> and/or the computing system <b>310</b>. The application <b>304</b> can, for example, include an email application that performs one or more operations on the computing system <b>302</b> and includes an email account associated with an organizational record (e.g., an employee record including the name of an employee, an email access identifier, and an email passcode) that is stored as part of the organizational data <b>311</b>. In an example, a user associated with any computing system <b>302</b>, <b>306</b>, <b>310</b> can use a portion of the organizational data <b>311</b> associated with their employee record to access a corresponding account associated with one or more of application <b>304</b>, application <b>308</b>, and/or application(s) <b>312</b>.</p><p id="p-0074" num="0073">In an embodiment, one or more application(s) <b>312</b> provide access to, utilize, support, and/or otherwise provide various interfaces or services that enable other applications (e.g., application <b>304</b>, application development environment <b>305</b>, application <b>308</b>, cloud application development environment <b>309</b>, application(s) <b>312</b>) and/or users to perform various operations and activities involving one or more custom computer languages. For example, a custom computer language generally may provide users with a simplified set of computer instructions that align with or match a user's understanding of a functional or business environment, such as an organization, business, industry, sector, etc. In some embodiments, each of one or more custom computer languages is a user language that allows users with a basic understanding of a subject, topic, business area, organization, functional role, industry, sector, etc. to implement custom computer instructions in terms that are familiar to the users, without knowledge of a complex computer programming language, without dependence on computer programmers, without being aware of or needing to know the complexity of underlying data organization and storage, without needing to understand, implement, and/or maintain a complex web of j oin conditions across various sets of underlying data, etc.</p><p id="p-0075" num="0074">In an embodiment, a custom computer language generally enables users of any skill or level with a basic knowledge of a subject area to perform one or more operations or activities associated with an application (e.g., any of applications <b>312</b>). For example, a custom computer language generally may enable a user to create, update, execute, and/or otherwise implement custom queries, reports, policies, workflows, triggering conditions, and/or other functionality and operations associated with an application. In some embodiments, a custom computer language enables a user to utilize and perform various operations involving organizational data <b>311</b>. For example, one or more applications associated with an organizational data management system or any other types of applications (e.g., applications <b>312</b>) generally may provide a custom computer language allowing users to perform operations based on the structure and/or relationships associated with organizational data <b>311</b>.</p><p id="p-0076" num="0075">In an embodiment, a custom computer language may allow a user to use simplified terms to query organizational data <b>311</b>. In one example, a custom computer language may allow a user to obtain the name of an employee's manager with the following example query: &#x201c;ORG (John Smith, Manager)&#x201d;, which may return &#x201c;Jane Jones&#x201d; as the manager of the employee. As such, a custom computer language for an application may allow a user to use simplified and familiar terms without needing to understand complex interrelationships between various types of data stored across one or more different databases and/or other types of data stores. Further, a custom computer language generally may be processed by one or more applications (e.g., application(s) <b>312</b> associated with an organizational data store) so that users do not have to specify data joins when performing various operations involving organizational data <b>311</b>.</p><p id="p-0077" num="0076">In an embodiment, a custom computer language (e.g., a custom query language) includes a function that reports quantile information based on employee information or any other type of organizational data <b>311</b>. For example, such a function generally may be labeled as a &#x201c;quantile&#x201d; function, as a &#x201c;percentile&#x201d; function, or given any other type of label or name. The following examples generally refer to the function name as &#x201c;quantile&#x201d; for illustration purposes only.</p><p id="p-0078" num="0077">In an example, a &#x201c;quantile&#x201d; function of a custom query language generally may return a particular quantile (e.g., decile, percentile, etc.) of organizational data <b>311</b> (e.g., an employee, a department, etc.) in comparison to other corresponding organizational data <b>311</b> (e.g., other employees, other departments, etc.). In one example, a &#x201c;quantile&#x201d; function call in a custom query language may take four arguments. For example, a first example argument of the &#x201c;quantile&#x201d; function may specify a particular instance of organizational data <b>311</b> such as a particular employee, a particular department, a particular contractor, a particular vendor, or any other particular instance of organizational data <b>311</b>. A second example argument of the &#x201c;quantile&#x201d; function may specify a numeric attribute value, a derived value, or a calculated value for comparison. A third example argument of the &#x201c;quantile&#x201d; function may specify a logical condition that evaluates to &#x201c;true&#x201d; or &#x201c;false&#x201d; for corresponding organizational data <b>311</b> (e.g., other employees, other departments, etc.) where the corresponding organizational data <b>311</b> that evaluates to &#x201c;true&#x201d; is included when calculating quantile information. As such, corresponding organizational data <b>311</b> that evaluates to &#x201c;false&#x201d; would not be included when calculating quantile information. A fourth example argument of the &#x201c;quantile&#x201d; function may specify a particular quantile to use for analysis. For example, the example fourth argument may specify a numeric value representing a number of buckets to use for calculating a particular quantile (e.g., the value &#x201c;4&#x201d; for quartiles, the value &#x201c;5&#x201d; for quintiles, the value &#x201c;10&#x201d; for deciles, the value &#x201c;100&#x201d; for percentiles and/or any other value for calculating a particular, specialized quantile associated with organizational data <b>311</b>). The example fourth argument also could take text input indicating a particular type of quantile to utilize (e.g., &#x201c;quartile&#x201d;, &#x201c;quintile&#x201d;, &#x201c;decile&#x201d;, &#x201c;percentile&#x201d;, etc.) and is not limited to numeric values.</p><p id="p-0079" num="0078">In one example, a signature of an example &#x201c;quantile&#x201d; function of a custom computer language (e.g., a custom query language) generally can be defined and/or appear as &#x201c;QUANTILE({employee_information}, {attribute_value_to_compare}, {logical_condition}, {quantile_type})&#x201d;. For example, an example call to the &#x201c;quantile&#x201d; function of the custom query language generally may be invoked based on the following example custom query language statement: &#x201c;QUANTILE(&#x201c;Denise Smith&#x201d;, compensation, level=$level, 10). In the example quantile function call, the first example argument specifies the name of a particular employee or individual. Other values, such as a unique employee identifier, unique contractor identifier, and/or any other type of unique identifier of a particular instance of organizational data <b>311</b> may be utilized (e.g., unique department name, unique department id, etc.).</p><p id="p-0080" num="0079">The second example argument in the example quantile function call indicates compensation as the attribute of the specified employee (i.e., &#x201c;Denise Smith&#x201d;) to be compared. Also, any derived or calculated values, such as &#x201c;TODAY( )&#x2014;employee_start_date&#x201d; (e.g., which calculates an employee's length of employment) may be utilized. The third example argument in the example quantile function call indicates a logical condition where the level of other employees &#x201c;level&#x201d; is equal &#x201c;=&#x201d; to the level of &#x201c;Denise Smith&#x201d; &#x201c;$level&#x201d;. As such, employees at the same level as &#x201c;Denise Smith&#x201d; in an organizational data management system as indicated by the organizational data <b>311</b> will be included in the QUANTILE determination of the current example. The fourth example argument in the example quantile function call &#x201c;10&#x201d; indicates that 10 quantiles (i.e., &#x201c;deciles&#x201d;) are to be used in the calculation of determining how &#x201c;Denise Smith's&#x201d; &#x201c;compensation&#x201d; compares to other employees at the same level (i.e., &#x201c;level=$level&#x201d;). Thus, &#x201c;Denise Smith&#x201d; may fall into any one of 10 buckets depending on how her &#x201c;compensation&#x201d; compares to other employees in an organization based on organizational data <b>311</b>.</p><p id="p-0081" num="0080">The example QUANTILE function generally can return the number of the particular, specified quantile (e.g., the bucket number) based on a determination. Continuing with the current example, if &#x201c;Denise Smith&#x201d; had &#x201c;compensation&#x201d; that ranked in the top ten percent of employees at the same level (i.e., &#x201c;level=$level&#x201d;) then &#x201c;10&#x201d; would be returned as the determined decile bucket of the example quantile function (or, for example if quartiles were specified instead of quintiles, then &#x201c;4&#x201d; would be returned). Similarly, if the &#x201c;compensation&#x201d; of &#x201c;Denise Smith&#x201d; ranked last in the determination, then a &#x201c;1&#x201d; would be returned as the determined decile bucket of the example quantile function (&#x201c;1&#x201d; also would be returned if quartiles were specified instead of quintiles). In an additional example, a custom query language statement: &#x201c;QUANTILE(&#x201c;Denise Smith&#x201d;, equity_grant, start_date&#x3c;$start_date+90 and start_date&#x3e;$start_date&#x2212;90 and equity_grant&#x3e;0, 100) returns &#x201c;Denise Smith's&#x201d; &#x201c;equity grant&#x201d; decile in comparison to other employees with start dates within 90 days of &#x201c;Denise Smith's&#x201d; start date where those employees have equity grants.</p><p id="p-0082" num="0081">In an embodiment, a custom computer language is based on and/or otherwise associated with one or more data structures <b>315</b> associated with an application. For example, a custom computer language may be based on, represent, describe, or otherwise be associated with an object graph data structure <b>315</b> (e.g., a master object graph, any one or more portions of a master object graph, etc.) and/or any other types of data structures <b>315</b> that describe the structure of an application and/or the underlying data associated with an application. In an example, a custom computer language is based on the structure of one or more applications and/or associated organizational data <b>311</b> of an organizational data management system. For example, the structure of the one or more applications and/or the associated organizational data <b>311</b> may be represented and described in one or more data structures <b>315</b> including, but not limited to, one or more independent and/or interrelated object graph data structures <b>315</b>. In various embodiments, an application (e.g., one of application <b>312</b>) and/or another supporting application used in association with the application can utilize object graph data structures <b>315</b> to process and perform various underlying operations associated with custom computer language instructions.</p><p id="p-0083" num="0082">In an embodiment, the computing system <b>302</b> includes an application development environment <b>305</b> that provides users with access to and/or operations associated with one or more computer languages including, but not limited to, a custom computer language. For example, the application development environment <b>305</b> can be associated with one or more applications of an organizational data management system that stores and manages various types of organizational data <b>311</b>. In an example, application development environment <b>305</b> generally may be an application (e.g., application <b>304</b>) or portion of an application that enables a user to perform various operations involving organizational data <b>311</b> of an organizational data management system using a custom computer language. For example, application development environment <b>305</b> generally may enable a user to create, update, execute, and/or otherwise implement custom queries, reports, policies, workflows, triggering conditions, rules, group assignments, and/or other functionality and operations associated with one or more applications of an organizational data management system.</p><p id="p-0084" num="0083">In various embodiments, any one or more parts of the application development environment <b>305</b> may run, for example, on a computing system (e.g., computing system <b>302</b>) and/or in association with information, applications, and/or services on another computing system (e.g., computing system <b>310</b>). For example, application development environment <b>305</b> may utilize organizational data <b>311</b>, application(s) <b>312</b>, application policy data <b>313</b>, integration data <b>314</b>, and/or data structures <b>315</b> available from another computing system (e.g., computing system <b>310</b>, one or more computing systems associated with an organizational data management system, etc.). Application development environment <b>305</b> also may include a query processing engine (not shown), computer instruction compiler (not shown), computer instruction generator (not shown), and/or other specialized computer software for performing multilayered generation and processing of computer instructions. Application development environment <b>305</b> also may utilize or work in conjunction with, in whole or in part, cloud development environment <b>316</b>, custom language processing engine <b>317</b>, computer instruction compiler, <b>318</b>, computer instruction generator <b>319</b>, and/or other features and or operations available from another computing system (e.g., computing system <b>310</b>, one or more computing systems associated with an organizational data management system, etc.)</p><p id="p-0085" num="0084">In an embodiment, application development environment <b>305</b> can include an editor that allows users to enter, define, edit, check, store, schedule, execute, and/or perform any other operations associated with creating, viewing, maintaining, and/or utilizing computer instructions in a custom computer language. In some embodiments, application development environment <b>305</b> includes a textual editor that enables users to enter and manipulate computing instructions in a custom computer language. In some examples, a textual editor of the application development environment <b>305</b> may assist users with constructing various types of statements in a custom computer language. For example, the textual editor may provide syntax highlighting in a custom computer language, intelligent completion of keywords or statements in a custom computer language, automated hints and examples, various types of pop-up information to assist a user in writing or editing instructions in a custom language, visual notification of syntax or other errors, suggested correction of syntax or other errors, automatic suggestion and/or population of objects and/or functions, etc. In some examples, automation and other assistance provided by a textual editor of the application development environment <b>305</b> may be based on and may actively utilize one or more data structures <b>315</b> (e.g., an object graph based on organizational data <b>311</b>) associated with implementation of a custom computer language.</p><p id="p-0086" num="0085">In an embodiment, application development environment <b>305</b> can include a visual editor (e.g., either with or without a textual editor) to, for example, create, view, maintain, and/or utilize computer instructions in a custom computer language. For example, the visual editor may allow users to build, modify, and perform other operations associated with instructions in a custom computer language via drag and drop and/or any other types of graphical user interfaces. Further, a visual editor generally also may provide dropdown lists, enhanced browsing, and other visual access to features and operations of a custom computer language, and/or one or more data structures <b>315</b> associated with a custom computer language or related application to construct, edit, and/or otherwise utilize instructions in a custom computer language. In some examples, the application development environment <b>305</b> may provide a textual editor in combination with the visual editor to allow users to view, utilize, and alternate between both textual and visual editors of a custom query language, for example, as part of the same user interface. In some examples, application development environment <b>305</b> can parse and perform various operations involving instructions in a custom computer language alone or in association with another computing system (e.g., based on various data and/or services provided by computing system <b>310</b>).</p><p id="p-0087" num="0086">In an embodiment, the computing system <b>310</b> includes one or more application(s) <b>312</b> that can perform one or more operations on the computing system <b>310</b> and can communicate data and/or information with any one or more computing systems, including the computing system <b>302</b> and/or the computing system <b>306</b>, or any one or more computing devices. The application(s) <b>312</b> can, for example, include an employee management application that operates on the computing system <b>310</b> and accesses the organizational data <b>311</b>, which can include one or more organizational records associated with the names of organization employees and the respective employment statuses for each of the employees (e.g., an employee's position or role within the organization, an organizational department associated with the employee, etc.). A user (e.g., a privileged user, such as a manager or administrator with the authority to access and/or modify the organizational data <b>311</b>) associated with the computing system <b>306</b> can, for example, access and/or modify the organizational data <b>311</b> to reflect when an employee receives a promotion or a raise, changes to a different department, is added to one or more new teams, is assigned new computer hardware or other equipment, etc.</p><p id="p-0088" num="0087">The one or more application(s) <b>312</b> can perform one or more operations on the computing system <b>310</b> and can communicate data and/or information with one or more computing systems, including the computing system <b>302</b> and/or the computing system <b>306</b>, or any one or more computing devices. The application(s) <b>312</b> can, for example, include an administrative or other type of system application to manage one or more aspects of the application(s) <b>312</b> including, but not limited to, installing, configuring, maintaining, updating, integrating, automating and/or performing one or more other operations associated with the application(s) <b>312</b> on the computing system <b>310</b> and that can manage one or more aspects of one or more other applications on different systems and devices, which may include the application <b>304</b> and/or the application <b>308</b>.</p><p id="p-0089" num="0088">In some embodiments, the application(s) <b>312</b> can include one or more third-party applications that are stored and/or perform operations on the computing system <b>310</b>. Further, the application(s) <b>312</b> can retrieve data and/or information associated with and/or operate in cooperation with applications external to the computing system <b>310</b> (e.g., the computing system <b>302</b> and/or the computing system <b>306</b>). The application(s) <b>312</b> can also use (e.g., access, modify, and/or control) the organizational data <b>311</b>. For example, the application(s) <b>312</b> can use the organizational data <b>311</b> that is associated with the application <b>304</b> to perform one or more operations using the application <b>308</b> that is on the computing system <b>306</b>.</p><p id="p-0090" num="0089">In an embodiment, the computing system <b>306</b> includes a cloud application development environment <b>309</b>. For example, the cloud application development environment <b>309</b> generally may be an instance of an online integrated development environment (e.g., a cloud development environment <b>316</b>) provided by one computing system (e.g., <b>310</b>) that is accessed from a web browser and/or any other type of application <b>308</b> on another computing system (e.g., computing system <b>306</b>). For example, the cloud application development environment <b>309</b> can be associated with one or more applications of an organizational data management system that stores and manages various types of organizational data <b>311</b>. In an example, cloud application development environment <b>309</b> generally may be an application (e.g., application <b>308</b>) or portion of an application that enables a user to perform various operations involving organizational data <b>311</b> of an organizational data management system using a custom computer language. For example, cloud application development environment <b>309</b> generally may enable a user to create, update, execute, and/or otherwise implement custom queries, reports, policies, workflows, triggering conditions, rules, group assignments, and/or other functionality and operations associated with one or more applications of an organizational data management system.</p><p id="p-0091" num="0090">In various embodiments, any one or more parts of the cloud application development environment <b>309</b> may run, for example, on a computing system (e.g., computing system <b>306</b>) and/or in association with information, applications, and/or services on another computing system (e.g., computing system <b>310</b>). For example, cloud application development environment <b>309</b> may utilize organizational data <b>311</b>, application(s) <b>312</b>, application policy data <b>313</b>, integration data <b>314</b>, and/or data structures <b>315</b> available from another computing system (e.g., computing system <b>310</b>, one or more computing systems associated with an organizational data management system, etc.). Cloud application development environment <b>309</b> also may include a query processing engine (not shown), computer instruction compiler (not shown), computer instruction generator (not shown), and/or other specialized computer software for performing multilayered generation and processing of computer instructions. Cloud application development environment <b>309</b> also may utilize or work in conjunction with, in whole or in part, cloud development environment <b>316</b>, custom language processing engine <b>317</b>, computer instruction compiler, <b>318</b>, computer instruction generator <b>319</b>, and/or other features and or operations available from another computing system (e.g., computing system <b>310</b>, one or more computing systems associated with an organizational data management system, etc.)</p><p id="p-0092" num="0091">In an embodiment, cloud application development environment <b>309</b> can include an editor that allows users to enter, define, edit, check, store, schedule, execute, and/or perform any other operations associated with creating, viewing, maintaining, and/or utilizing computer instructions in a custom computer language. In some embodiments, cloud application development environment <b>309</b> includes a textual editor that enables users to enter and manipulate computing instructions in a custom computer language. In some examples, a textual editor of the cloud application development environment <b>309</b> may assist users with constructing various types of statements in a custom computer language. For example, the textual editor may provide syntax highlighting in a custom computer language, intelligent completion of keywords or statements in a custom computer language, automated hints and examples, various types of pop-up information to assist a user in writing or editing instructions in a custom language, visual notification of syntax or other errors, suggested correction of syntax or other errors, automatic suggestion and/or population of objects and/or functions, etc. In some examples, automation and other assistance provided by a textual editor of the cloud application development environment <b>309</b> may be based on and may actively utilize one or more data structures <b>315</b> (e.g., an object graph based on organizational data <b>311</b>) associated with implementation of a custom computer language.</p><p id="p-0093" num="0092">In an embodiment, cloud application development environment <b>309</b> can include a visual editor (e.g., either with or without a textual editor) to, for example, create, view, maintain, and/or utilize computer instructions in a custom computer language. For example, the visual editor may allow users to build, modify, and perform other operations associated with instructions in a custom computer language via a drag and drop and/or any other types of graphical user interfaces. Further, a visual editor generally also may provide dropdown lists, enhanced browsing, and other visual access to features and operations of a custom computer language, and/or one or more data structures <b>315</b> associated with a custom computer language or related application to construct, edit, and/or otherwise utilize instructions in a custom computer language. In some examples, the cloud application development environment <b>309</b> may provide a textual editor in combination with the visual editor to allow users to view, utilize, and alternate between both textual and visual editors of a custom query language, for example, as part of the same user interface.</p><p id="p-0094" num="0093">The computing system <b>310</b> includes the application policy data <b>313</b> which can be implemented on the computing system <b>310</b> and can be used to perform one or more operations associated with implementing an application policy associated with the organizational data <b>311</b> and/or one or more applications including the application <b>304</b>, the application <b>308</b>, and/or application(s) <b>312</b>. The application <b>304</b>, the application <b>308</b>, and/or application(s) <b>312</b> can include one or more third-party applications that are separate from, that are operated separate and apart from, and that are not affiliated with the organization that manages, owns, controls and/or maintains the organizational data <b>311</b> or an associated organizational data management application on the computing system <b>310</b>, and/or that determines or implements an application policy associated with the application policy data <b>313</b>. In one example, third-party applications can be differentiated from organizational applications that, for example, are inherent to, are a part of, or otherwise operate directly or as part of an organizational data management application, system, services, and/or platform.</p><p id="p-0095" num="0094">The application policy data <b>313</b> can include one or more rules that determine how one or more applications including, for example, one or more third-party applications or organizational applications are accessed, modified, and/or controlled. For example, the application policy data <b>313</b> can use the organizational data <b>311</b> that is associated with the application <b>304</b> to perform one or more operations on the application(s) <b>312</b> and/or the application <b>308</b>. Also, the application policy data <b>313</b> can use the organizational data <b>311</b> that is associated with the application(s) <b>312</b> to perform one or more operations on the application <b>304</b> and/or the application <b>308</b>. By way of further example, the application policy data <b>313</b> can use the organizational data <b>311</b> that is associated with the application <b>308</b> to perform one or more operations on the application <b>304</b> and/or the application(s) <b>312</b>. In some embodiments, the application policy data <b>313</b> can determine how a combination of one or more organizational applications (e.g., applications owned and controlled by an organization that owns and controls the organizational data <b>311</b> and/or applications provided with or as part of an organizational data management system used by the organization as a system of record for maintaining the organizational data <b>311</b>, etc.) and/or one or more third-party applications are accessed, modified, configured, and/or controlled.</p><p id="p-0096" num="0095">The computing system <b>310</b> includes the integration data <b>314</b>, which can reside on the computing system <b>310</b> and can be used, for example, to perform one or more operations that integrate the organizational data <b>311</b> and associated activities based on the organizational data <b>311</b> across one or more different computing systems (e.g., such as computing systems <b>302</b>, <b>306</b>, and <b>310</b>) and/or applications (e.g., such as applications <b>304</b>, <b>308</b>, and <b>312</b>). For example, the integration data <b>314</b> can be used to integrate and synchronize organizational data <b>311</b> and/or associated operations across an organizational data management application or system (e.g., a system of record for organization data <b>311</b>) and each of one or more separate third-party applications that utilize organizational data <b>311</b> and/or perform operations based on organizational data <b>311</b>.</p><p id="p-0097" num="0096">In an embodiment, the integration data <b>314</b> can include configuration information associated with integrating and synchronizing data among one or more computing systems and/or applications. For example, the integration data <b>314</b> can include information that enables integration between an organizational application (e.g., an application <b>312</b> associated with an organizational data management system of record for the organizational data <b>311</b>) and each of one or more separate third-party applications (e.g., application <b>304</b>, <b>308</b>) that use or perform operations based on the organizational data <b>311</b>). Such integration data <b>314</b> may include, but is not limited to, information indicating and/or describing various data that enables performance of an integration between applications or systems, such as an integration type information (e.g., flat file, application programming interface (API), webhook, system call, etc.), security information (authentication information, encryption information, etc.) technical information (e.g., file locations, call information, system naming, application naming, IP address information, port information, etc.), integration flow information (e.g., push, pull, bidirectional, etc.), integration activation (e.g., scheduling or timing information, event information, one or more rules, one or more triggering conditions or criteria, etc.), processing information (e.g., data mappings between the source and target, data validation rules, data transformations, error handling, etc.), and/or any other information used in defining, configuring, and/or integrating an application with each of any number of third-party applications and/or systems.</p><p id="p-0098" num="0097">The computing system <b>310</b> includes the data structures <b>315</b>, which can be implemented on the computing system <b>310</b> and used to perform operations involving the organizational data <b>311</b> including, but not limited to, performing integration and synchronization of the organizational data <b>311</b> with one or more different third-party applications and/or systems, generating and processing computer instructions across one or more different systems based on the organizational data <b>311</b>, etc. In an embodiment, the data structures <b>315</b> generally can include information about the properties or attributes of each of one or more entities associated with the organizational data <b>311</b>. Data structures <b>315</b> also can include information describing relationships associated with one or more entities associated with the organizational data <b>311</b> (e.g., explicit relationships defined between entities, virtual relationships determined based on various attributes and data associated with entities, etc.). In some embodiments, the data structures <b>315</b> generally can be used in validating and processing the organizational data <b>311</b> and/or other information received from third-party applications and/or systems. The data structures <b>315</b> also can be used in association with performing or otherwise carrying out one or more operations involving the organizational data <b>311</b> including, but not limited to, processing requests, validating queries, generating and processing computer instructions, generating workflows, executing workflows, creating reports, running reports, etc.</p><p id="p-0099" num="0098">In an embodiment, the data structures <b>315</b> can include one or more object graphs and/or any other types of data structures that provide information about entities, relationships, rules, constraints, and/or any other aspects of managing the organizational data <b>311</b>. For example, such object graphs can include one or more nodes representing entities associated with the organizational data <b>311</b> and one or more edges that connect and represent relationships between the nodes (e.g., explicit edges defining relationships between entities and data, virtual edges inferring relationships between entities and data, etc.). The data structures <b>315</b> can also include organizational data and/or associated metadata. In addition, the data structures <b>315</b>, together or alone, generally may represent one or more structural aspects of an application or system (e.g., such as an organizational data management system that is a system of record for organizational data <b>311</b> of an organization). In various examples, the data structures <b>315</b> generally may be used to support multilayered generation and processing of computer instructions. For example, the data structures <b>315</b> may be used to generate new instructions in a computer language that is different from a custom computer language provided to users. Further, such new instructions generally may include one or more operations (e.g., one or more underlying data joins) that are identified and included in the generated instructions based on analyzing instructions received in the custom computer language in view of the data structures <b>315</b>.</p><p id="p-0100" num="0099">The computing system <b>310</b> includes the cloud development environment <b>316</b>, which can be implemented on the computing system <b>310</b>, for example, to provide users with access to an environment for writing, building, testing, executing, and/or performing any other types of operations involving instructions in a custom computer language. In an embodiment, the cloud development environment <b>316</b> may include and/or perform operations associated with any one or more of the custom language processing engine <b>317</b>, the computer instruction compiler <b>318</b>, and/or the computer instruction generator <b>319</b>. In addition, the cloud development environment <b>316</b> may run on one computing system (e.g., computing system <b>310</b>) and provide one or more services to applications running on another computing system (e.g., application development environment <b>305</b> on computing system <b>302</b>, cloud application development environment <b>309</b> on computing system <b>306</b>, etc.). Further, the cloud development environment <b>316</b> may perform any one or more of the operations previously described with respect to application development environment <b>305</b> and/or cloud application development environment <b>309</b>. Similarly, application development environment <b>305</b> and/or cloud application development environment <b>309</b> may perform any one or more of the operations described in association with cloud development environment <b>316</b>.</p><p id="p-0101" num="0100">The computing system <b>310</b> includes the custom language processing engine <b>317</b>, which can be implemented on the computing system <b>310</b> and used to perform operations associated with processing requests based on instructions in a custom computer language. In various embodiments, the custom language processing engine <b>317</b> may receive requests for processing that include one or more instructions in a custom computer language. For example, such requests may be received from one or more different computing systems (e.g., computing system <b>302</b>, computing system <b>306</b>, computing system <b>310</b>, etc.) and/or one or more different applications (e.g., application <b>304</b>, application development environment <b>305</b>, application <b>308</b>, cloud application development environment <b>309</b>, application(s) <b>312</b>, cloud development environment <b>316</b>, etc.).</p><p id="p-0102" num="0101">Custom language processing engine <b>317</b> may be associated with or utilize the computer instruction compiler <b>318</b> and/or the computer instruction generator <b>319</b>, which individually or in combination, may be separate or a part of the custom language processing engine <b>317</b>.</p><p id="p-0103" num="0102">In an embodiment, the computer instruction compiler <b>318</b>, can be implemented on the computing system <b>310</b> and used to perform operations associated with analyzing instructions in a custom computer language including, but not limited to, parsing and analyzing custom computer language instructions based on one or more rules associated with a custom computer language and/or associated data structures <b>315</b>, for example, to determine whether any error exists in the custom computer language instructions, to identify one or more errors in the custom computer language instructions, to return information about one or more of the identified errors, to determine when the custom computer language instructions are free from error, etc. The computer instruction compiler <b>318</b> may include or be associated with a computer instruction generator <b>319</b> that generates one or more new instructions from custom computer language instructions.</p><p id="p-0104" num="0103">In an embodiment, the computer instruction generator <b>319</b>, can be implemented on the computing system <b>310</b> and used to perform operations associated with generating one or more new instructions in the custom computer language or in a different computer language. For example, the computer instruction generator <b>319</b> may generate instructions in a different computer language, for example, for execution with one or more other applications or data stores (e.g., data store <b>330</b>, data store <b>340</b>, data store <b>350</b>, etc.) on or associated with computing system <b>310</b> and/or one or more other computing systems (e.g., computing system(s) <b>320</b>), based on analyzing instructions in the first computer language in combination with other information (e.g., information associated with one or more data structures <b>315</b> describing the structure of an application associated with an organizational data management system that manages organizational data <b>311</b>).</p><p id="p-0105" num="0104">In an embodiment, one or more data stores (e.g., data store <b>330</b>, data store <b>340</b>, data store <b>350</b>) may run individually and/or in any combination on one or more different computing systems (e.g., computing system <b>310</b>, and/or computing system(s) <b>320</b>). Each data store generally may include one or more collections of data, such as organizational data <b>311</b> and/or other data that is associated with and/or accessible from application(s) <b>312</b> and/or other applications running on corresponding computing system(s) <b>320</b>. In one example, each data store may be associated with a particular database application or any other type of data storage software applications that store and provide access to organizational data <b>311</b>. In some examples, each data store may provide access to organizational data <b>311</b> via the same computer language (e.g., a standard computer language for data access). In some examples, any one or more of the data stores each may use different computer languages to provide access to organizational data <b>311</b> (e.g., one or more standard computer languages, one or more proprietary computer languages, and/or specialized data access languages).</p><p id="p-0106" num="0105">In an embodiment, custom language processing engine <b>317</b> uses new instructions generated from one or more instructions in a custom computer language to query one or more data stores (e.g., data store <b>330</b>, data store <b>340</b>, data store <b>350</b>). In various examples, custom language processing engine <b>317</b> then may process, combine, and/or generally perform any other types of operations on information (e.g., organizational data <b>311</b>) obtained from the one or more data stores. In addition, the custom language processing engine <b>317</b> then may return the results obtained from the one or more data stores in response to a request based on one or more instructions in a custom computer language.</p><p id="p-0107" num="0106">In an embodiment, an application store computing system (not shown) provides an organization with access to multiple different integration applications (not shown) for integrating organizational data <b>311</b> and/or associated processes with and across various different applications and/or systems (e.g., such as third-party applications and/or systems). An application store computing system also may provide an organization with one or more other types of applications, including but not limited to, platform utility apps that provide additional functionality to an organizational data management application or system, other apps that may include integration-related applications, and/or any other types of applications. Generally, the application store computing system may provide one or more various applications for a flat fee, based on a subscription purchase, for a fee based on usage, for a fee based on a number of users, computing systems, processors, or any other criteria, as part of a limited trial, for free, and/or generally under any type of arrangement. In an embodiment the application store computing system is managed and provided by the same party that provides an organizational data management system to organizations. For example, the integration applications provided by the application store computing system generally may be specialized for use with the organizational data management system (e.g., and not end-user versions of applications that would be installed for general purpose use by end-users on end-user devices).</p><p id="p-0108" num="0107">In an embodiment, the integration applications generally can be any application that allows an organization to manage any one or more aspects associated with providing one or more corresponding end-user applications to individual members (e.g., employees), teams, roles, departments, and/or any other grouping or categorization of individuals in an organization. For example, each of the integration applications can be used by an organization to control and automate various tasks associated with provisioning, configuring, maintaining, and integrating third-party applications. In some embodiments, one or more of the integration applications can allow an organization to configure automated assignment of a corresponding end-user application to one or more individuals, user account creation, single sign-on setup, provisioning, installation, setup, and/or maintenance of corresponding end-user applications (e.g., third-party applications or other applications provided for use by end users) provided to particular individuals, groups, and/or one or more devices associated with such individuals or groups in the organization.</p><p id="p-0109" num="0108">In an embodiment, one or more of the integration applications can provide integration of organizational data <b>311</b> and associated services across third-party applications or computing systems and one or more applications or computing systems of an organization associated with organizational data <b>311</b>. For example, each of the integration applications can provide one or more of user account creation, single sign-on integration, user account suspension or removal, user management, group management, user privileges, user data access, user data control, template management, data integration, process automation, and/or any other types of integration between applications (e.g., third-party applications or other applications) that are associated with organizational data <b>311</b> of an organization.</p><p id="p-0110" num="0109">In an embodiment, the integration applications and/or other applications provided by the application store computing system may include, but are not limited to, collaboration apps, support apps, design apps, development apps, finance and legal apps, human resources (HR) and benefits apps, information technology (IT), device management, and security apps, office management apps, sales and marketing apps, charitable apps, platform utility apps, and/or other apps. Generally, various different types of applications provided by the application computing system may be organized, categorized, grouped, presented, and/or otherwise offered in any type of arrangement, and thus are not limited to any particular examples discussed herein, which are provided for illustration purposes only.</p><p id="p-0111" num="0110">In an embodiment, collaboration apps may include, for example, any applications that provide scheduling, communications, document sharing and management, electronic signature services, project management, productivity, and/or any other types of applications that facilitate work between individuals, groups, and/or parties.</p><p id="p-0112" num="0111">In an embodiment, support apps may include, for example, any applications that provide services associated with customer support, technical support, issue reporting, issue management and escalation, tracking and managing help desk tickets, and/or any other types of applications that facilitate customer, business, and/or technology support.</p><p id="p-0113" num="0112">In an embodiment, design apps may include, for example, any applications that provide services associated with creating graphic designs, product designs, prototypes, drawings, graphical user interfaces, user experiences, and/or any other types of applications that facilitate the creation of designs, interfaces, and/or artistic works.</p><p id="p-0114" num="0113">In an embodiment, development apps may include, for example, any applications that provide services associated with software development, software testing, source code control and management, source code scanning, application testing, process automation, cloud hosting and services, system monitoring, error reporting and alerts, machine learning, and/or any other types of applications that facilitate activities associated with building, maintaining, or deploying software applications.</p><p id="p-0115" num="0114">In an embodiment, finance, operational, and legal apps may include, for example, any applications that provide services associated with accounting systems, budgeting systems, vendor management systems, payment systems, travel systems, expense management systems, supply chain systems, manufacturing systems, compliance and governance systems, vendor management systems, contract management systems, and/or any other types of applications and/or systems used to manage various aspects of an organization.</p><p id="p-0116" num="0115">In an embodiment, human resources (HR) and benefits apps may include, for example, any applications that provide services associated with recruiting and hiring, temporary staffing, background checks, payroll and benefits, training and onboarding, retirement planning and contributions, reward and bonus programs, employee training, learning management systems, performance management, time and attendance, and/or systems any other types of applications or systems associated with employee-related activities.</p><p id="p-0117" num="0116">In an embodiment, information technology (IT), device management, and security apps may include, for example, any applications that provide services associated with device management, technology, information security, password management, and/or any activities associated with managing applications, systems, devices, or associated technology.</p><p id="p-0118" num="0117">In an embodiment, office management apps may include, for example, any applications that provide services associated with facilities management, receptionist services, physical access, visitor access, catering services, office layout, office assignments, and or any other types of applications or systems associated with performing office management.</p><p id="p-0119" num="0118">In an embodiment, sales and marketing apps may include, for example, any applications that provide services associated with social media, analytics, advertising, event management, customer relationship management, content creation and distribution, public relations, business generation, campaign management, and/or any other types of similar or related activities.</p><p id="p-0120" num="0119">In an embodiment, charitable apps may include, for example, any applications that provide services associated with donations, charitable giving, crowdfunding, etc.</p><p id="p-0121" num="0120">In an embodiment, platform utility apps may include, for example, any applications from a provider that allow an organization to utilize software applications, systems, or services that have been purchased or that are otherwise available from the provider. For example, a provider of an organizational data management system can allow an organization to access and utilize standard services and/or enhanced services via one or more of the platform utility apps. In some embodiments, the platform utility apps operate from and/or are directly integrated with applications, systems, and/or services obtained from a provider. For example, such platform utility apps can allow one or more users of an organization to customize a particular implementation or instance of provider software that is associated with the organization. In one example, one of the platform utility apps can allow the creation and/or modification of one or more custom fields in association with one or more entities, the creation and/or modification of one or more relationships among the entities, the creation and/or modification of one or more default system rules or custom rules, the addition and/or use of custom fields, custom relationships and/or custom rules in various workflow tasks, reports, integrations, etc. In some embodiments, users may create and modify custom fields, relationships, rules, tables, entities, and any other various aspects of an organizational data management system in a utility application or otherwise using a custom computer language provided by the organizational data management system.</p><p id="p-0122" num="0121">In an embodiment, other apps may include, for example, any types of applications that may be used by individuals and/or organizations. The other apps may include, for example, any other category of integration applications and/or any other types of applications that can be executed by a computing system or device.</p><p id="p-0123" num="0122">In an embodiment, authorized users of an organization with the appropriate privileges may access one or more services of the application store computing system directly, for example, via a website, web page, desktop application, mobile application, and/or any other type of application to browse, view, search, compare, evaluate, download, install, configure, upgrade, uninstall, and/or perform any other types of activities associated with the integration applications or any other types of applications provided via the application store computing system. In some embodiments, authorized users of an organization with the appropriate privileges may access one or more services of the application store computing system indirectly, for example, through another application (e.g., application <b>312</b>) and/or another computing system (e.g., computing system <b>310</b>). In some embodiments, the application store computing system can be provided on the same computing system with other applications and services (e.g., running on computing system <b>310</b>).</p><p id="p-0124" num="0123">In an embodiment, any one or more users of an organization, such as an administrator, manager, or one or more other users associated with a particular role and/or one or more particular privileges each may install and/or configure each of one or more different integration applications for use by the organization. For example, any such user with the appropriate privileges may install one or more of the integration applications for the organization on the computing system <b>310</b> or any other computing systems or devices. Also, any such user with the appropriate privileges may configure integration data <b>314</b> associated with each of one or more integration applications. In some embodiments, one user with the appropriate privileges may delegate authority to one or more other users to perform installation and/or configuration of one or more of the integration applications for an organization.</p><p id="p-0125" num="0124">In an embodiment, an organizational data management system is provided via at least one computing system to allow each of one or more different organizations to centrally manage their own organizational data <b>311</b>. For example, the organizational data management system can be provided as a centralized system of record for storing and managing various types of organizational data <b>311</b> of an organization. The organizational data management system also can provide various types of integration across different third-party applications that utilize, that perform processing involving or based on, and/or that are otherwise associated with organizational data <b>311</b>. The organizational data management system also can automate various processing based on the organizational data <b>311</b> including, but not limited to the automation of processing performed across various third-party applications based on the organizational data <b>311</b>. In various embodiments, the organizational data management system can be provided via one or more different computing systems, one or more different applications, and/or via one or more different services, for example, to one or more different organizations over a computer network.</p><p id="p-0126" num="0125">In an embodiment, a separate instance of an organizational data management system generally can be provided to each of one or more different organizations, for example, to allow each organization to independently configure, manage, and integrate their own instance of an organizational data management system, and to secure and insulate organizational data <b>311</b> from outside parties. For example, separate instances of an organizational data management system generally may be provided to different organizations using different computer hardware devices, different software applications, different instances of software applications running in an isolated space, different databases, physically partitioned databases, and/or in various other ways.</p><p id="p-0127" num="0126">In an embodiment, an organizational data management system generally enables organizations to efficiently manage organizational data <b>311</b> and associated processing that occurs based on the organizational data <b>311</b>. For example, an organizational data management system may be used as a centralized system of record that is integrated with other computing systems and applications (e.g., third-party applications) that generate, utilize, process, or perform activities based on organizational data <b>311</b>. Such integration generally allows an organizational data management system to orchestrate and automate processing of organizational data <b>311</b> and associated activities across numerous different applications that are not in communication with one another. In some embodiments, an organizational data management system can allow appropriate users (e.g., authenticated, authorized, privileged, etc.) of an organization to, for example, manage organization information, settings of an organizational data management system, onboarding of employees, offboarding of employees, employee information, organizational structure and locations, employee placement in departments and teams, workflows and tasks, reports, documents, and/or any other information associated with organizational data <b>311</b>.</p><p id="p-0128" num="0127">In an embodiment, an organization uses an organizational data management system that allows the organization to manage organizational data <b>311</b> and activities performed based on the organizational data <b>311</b>. In some embodiments, an organization can install and use an organizational data management system on a computing system (e.g., computing system <b>310</b> or any other computing system) that is dedicated to the organization. Also, an organizational data management system can comprise any one or more of organizational data <b>311</b>, application(s) <b>312</b>, application policy data <b>313</b>, integration data <b>314</b>, data structures <b>315</b>, cloud development environment <b>316</b>, custom language processing engine <b>317</b>, computer instruction compiler <b>318</b>, computer instruction generator <b>319</b>, and/or any other information associated with managing, processing, and performing activities associated with organizational data <b>311</b>. In addition, an organizational data management system may provide and utilize its own custom computer language that allows business users to access and perform various operations using simplified computer instructions based on structure of organizational data <b>311</b>. Further, an organizational data management system may perform multilayered generation and processing of computer instructions to perform various activities based on the custom computer language.</p><p id="p-0129" num="0128">In an embodiment, an organizational data management system may be provided by another party for use by an organization. For example, another party such as a software application provider may host or otherwise provide a separate instance of an organizational data management system to each of one or more different organizations allowing each organization to independently manage their own organizational data <b>311</b>. In such embodiments, each separate instance of an organizational data management system provided to an organization can respectively comprise any one or more organizational data <b>311</b>, application(s) <b>312</b>, application policy data <b>313</b>, integration data <b>314</b>, data structures <b>315</b>, and/or any other information associated with managing, processing, and performing activities associated with organizational data <b>311</b> for the particular organization. As such, an organizational data management system may be a cloud-based platform that maintains organizational data <b>311</b> and other information associated with each of one or more different organizations and that allows each of the different organizations to independently manage their own respective organizational data <b>311</b> and related processes independently from any other organization.</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a flow diagram of an example method <b>400</b> for performing multilayered generation and processing of computer instructions, according to example embodiments of the present disclosure. One or more portions of the method <b>400</b> can be executed and/or implemented on one or more computing devices or computing systems including, for example, the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, the computing device <b>200</b>, the computing system <b>302</b>, the computing system <b>306</b>, and/or the computing system <b>310</b>. In addition, one or more portions of the method <b>400</b> can be executed or implemented as an algorithm on the hardware devices or systems disclosed herein. <figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts steps performed in a particular order for purposes of illustration and discussion. As such, those of ordinary skill in the art, using the disclosures provided herein, will understand that various steps of any of the methods disclosed herein can be adapted, modified, rearranged, omitted, and/or expanded without deviating from the scope of the present disclosure.</p><p id="p-0131" num="0130">At <b>402</b>, a computer system receives a request with instructions in a first computer language. In an embodiment, a custom language processing engine <b>317</b> of a computing system (e.g., computing system <b>310</b>) receives a request having one or more instructions in a custom computer language. For example, the request may be received from an application (e.g., application <b>304</b>, application <b>308</b>, application <b>312</b>), application development environment <b>305</b>, cloud application development environment <b>309</b>, cloud development environment <b>316</b>, etc. In various examples, the instructions can be associated with a custom computer language that generally may represent or otherwise be associated with a simplified set of computer instructions that align with or match a functional or business environment, such as an organization, business, industry, sector, etc. For example, the instructions in the custom computer language may be associated with or based on one or more of structure of organizational data <b>311</b>, structure of one or more applications providing organizational data <b>311</b>, and/or structure of an organizational data management system that stores and manages organizational data <b>311</b> as a system of record for an organization. Further, the custom computer language generally can allow users to use custom computer instructions based on natural structure and relationships of organizational data <b>311</b> in terms that are familiar to the users without needing knowledge of a complex computer programming language, without being dependent on computer programmers, without being aware of or needing to know the complexity of underlying data organization or storage, without needing to understand, implement, and/or maintain a complex web of join conditions across various sets of underlying data, etc.</p><p id="p-0132" num="0131">In an embodiment, instructions in a custom computer language are associated with one or more applications associated with an organizational data management system. For example, one or more applications may support or provide a custom computer language for use by users. In one example, an organizational data management system and associated applications generally provide and support a custom computer language associated with organizational data <b>311</b>. For example, a custom computer language based on organizational data generally may allow users to provide instructions in the custom computer language, for example, to define, modify, execute, and/or otherwise implement custom queries, reports, policies, workflows, rules, triggering conditions, and/or other functionality and operations using the custom computer language. As such, instructions in a custom computer language associated with organizational data <b>311</b> of an organizational data management system generally may be received in association with any one or more of ad hoc custom user queries, user generated reports, stored reports, user generated actions, activated policies, stored policies, activated workflows, stored workflows, rules associated with activated triggering conditions, and/or any other processes or procedures defined and/or otherwise specified based on instructions in a custom computer language associated with an organizational data management system.</p><p id="p-0133" num="0132">At <b>404</b>, a computer system parses the instruction in the first computer language. In an embodiment, the computer instruction compiler <b>318</b> of a computing system (e.g., computing system <b>310</b>) receives and processes one or more instructions in a custom computer language. For example, the computer instruction compiler <b>318</b> can be configured to process instructions in a custom computer language based on the structure of organizational data <b>311</b> and/or applications and systems that provide organizational data <b>311</b>. In an embodiment, the computer instruction compiler <b>318</b> utilizes one or more data structures <b>315</b> associated with organizational data <b>311</b> of an organizational data management system when analyzing and/or processing one or more instructions in a custom computer language (e.g., a custom computer language based on the organizational data <b>311</b>).</p><p id="p-0134" num="0133">In an embodiment, the computer instruction compiler <b>318</b>, can perform operations associated with analyzing instructions in a custom computer language which may include, but are not limited to, analyzing and parsing custom computer language instructions based on one or more rules associated with the custom computer language (e.g., which may include one or more rules based on data structures <b>315</b> associated with organizational data <b>311</b>). For example, the computer instruction compiler <b>318</b> may use rules associated with the custom computer language and/or associated data structures <b>315</b> to check syntax, logic, and/or other aspects of instructions in a custom computer language to determine whether errors exist in the instructions, to identify errors in the instructions, to return information about any errors in the instructions, to determine when the instructions are error free, etc.</p><p id="p-0135" num="0134">At <b>406</b>, a computer system analyzes the instructions in the first computer language in view of information that describes structure of a first application. In an embodiment, the computer instruction generator <b>319</b> of a computing system (e.g., computing system <b>310</b>) receives and processes one or more instructions in a custom computer language. For example, the computer instruction generator <b>319</b> may analyze instructions in the custom computer language based on one or more data structures <b>315</b> associated with organizational data <b>311</b> and/or any application or system associated with organizational data <b>311</b>. In some embodiments, the computer instruction generator <b>319</b> analyzes custom computer language instructions and determines one or more operations to include in additional instructions that are to perform or otherwise carry out tasks specified by the custom computer language instructions.</p><p id="p-0136" num="0135">In an embodiment the computer instruction generator <b>319</b> can identify one or more unspecified data joins and/or other operations in custom computer language instructions associated with organizational data <b>311</b> based on analyzing data structures <b>315</b> associated with the organizational data <b>311</b>. For example, the computer instruction generator <b>319</b> can analyze data (e.g., organizational data <b>311</b>) and operations (e.g., operations involving organizational data <b>311</b> specified by custom computer language instructions and evaluate such data and operations against data structures <b>315</b> (e.g., one or more object graph data structures <b>315</b> associated with organizational data <b>311</b>). Based on the evaluation, the computer instruction generator <b>319</b> can determine one or more operations for performing the actions specified by the custom computer language instructions on one or more other applications and/or systems. For example, the computer instruction generator <b>319</b> generally may take high-level business user instructions in a custom computer language based on organizational data <b>311</b>, analyze those instructions against one or more data structures <b>315</b> that describe the organizational data <b>311</b>, determine from the one or more data structures <b>315</b> one or more operations (e.g., explicit joins, implicit joins, virtual joins, and/or any other operations that may or may not be specified in the high-level instructions) that are needed to perform one or more actions specified by the high-level instructions against other applications, systems, and/or data stores. In addition, the computer instruction generator <b>319</b> then may use the determined operations to generate instructions in another computer language to carry out the actions specified in the high-level instructions against one or more other applications, systems, and/or data stores.</p><p id="p-0137" num="0136">At <b>408</b>, a computer system generates instructions in a second computer language based on the instructions in the first computer language and the information describing structure of the first application. In an embodiment, the computer instruction generator <b>319</b> of a computing system (e.g., computing system <b>310</b>) generates instructions in a different computer language based on instructions received in a custom computer language. For example, the computer instruction generator <b>319</b> can generate new instructions in a different computer language for execution in association with another application, system, and/or data store based on analyzing custom computer language instructions in view of one or more data structures <b>315</b>. In some embodiments, the computer instruction generator <b>319</b> identifies one or more operations that are specified and/or unspecified in the custom computer language instructions based on examining such instructions in view of the data structures <b>315</b>. For example, the computer instruction generator <b>319</b> may identify one or more explicit and/or implicit data join conditions to include in generated instructions based on analyzing examining data structures <b>315</b> in view of instructions in an associated custom computer language. As such, the computer instruction generator <b>319</b> generally may provide one or more operations and/or join conditions that otherwise were unspecified in custom computer language instructions. In some examples, the computer instruction generator <b>319</b> translates instructions from a custom computer language to a programming language or other type of computer language (e.g., a standard or proprietary data access language) to perform actions specified by instructions in a custom computer language.</p><p id="p-0138" num="0137">At <b>410</b>, a computer system obtains a result from a second application based on the generated instructions in the second computer language. In an embodiment, the custom language processing engine <b>317</b> of a computing system (e.g., computing system <b>310</b>) provides one or more new instructions generated from instructions in a custom computer language to one or more other applications (e.g., applications <b>312</b>), systems (e.g., computing systems <b>320</b>), and/or data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>) for execution. For example, the one or more generated instructions may be provided to obtain information and/or to perform one or more actions specified in the original instructions in the custom computer language. In some embodiments, new instructions in a programming language and/or data access language (e.g., structured query language (SQL)) generated from instructions in a custom computer language are provided to a database application to obtain information from one or more data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>). For example, the generated instructions may be used to obtain information associated with and to respond to a request based on the original instructions in the custom computer language.</p><p id="p-0139" num="0138">At <b>412</b>, a computer system provides a result in response to the request. In an embodiment, the custom language processing engine <b>317</b> of a computing system obtains a result from each of one or more applications (e.g., applications <b>312</b>), systems (e.g., computing systems <b>320</b>), and/or data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>). For example, the custom language processing engine <b>317</b> generally may receive, analyze, and process organizational data <b>311</b> received from any one or more applications, systems, and/or data stores. In some embodiments, such organizational data <b>311</b> may be returned in response to an associated request that included instructions in a custom computer language. In some examples, the organizational data <b>311</b> may be further processed in association with one or more applications of an organizational data management system before a result is returned in response to a request. For example, organizational data <b>311</b> may be returned from another application, system, and/or data store and then further processed based on one or more queries, reports, policies, workflows, triggering conditions, rules, custom field definitions, and/or any other functionality and operations provided by an organizational data management system before returning a result in response to a request.</p><p id="p-0140" num="0139"><figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts a flow diagram of an example method <b>500</b> for performing multilayered generation and processing of computer instructions, according to example embodiments of the present disclosure. One or more portions of the method <b>500</b> can be executed and/or implemented on one or more computing devices or computing systems including, for example, the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, the computing device <b>200</b>, the computing system <b>302</b>, the computing system <b>306</b>, and/or the computing system <b>310</b>. In addition, one or more portions of the method <b>500</b> can be executed or implemented as an algorithm on the hardware devices or systems disclosed herein. <figref idref="DRAWINGS">FIG. <b>5</b></figref> depicts steps performed in a particular order for purposes of illustration and discussion. As such, those of ordinary skill in the art, using the disclosures provided herein, will understand that various steps of any of the methods disclosed herein can be adapted, modified, rearranged, omitted, and/or expanded without deviating from the scope of the present disclosure.</p><p id="p-0141" num="0140">At <b>502</b>, a computer system analyzes one or more instructions from a request in view of information describing structure of an application. In an embodiment, a computer instruction generator <b>319</b> of a computing system (e.g., computing system <b>310</b>) analyzes instructions in a custom computer language based on a request. For example, such instructions may be received in association with a request as described at <b>402</b> and elsewhere in the present disclosure. Such instructions also may be parsed as described at <b>404</b> and elsewhere in the present disclosure.</p><p id="p-0142" num="0141">In some embodiments, the instructions in the custom computer language are associated with organizational data <b>311</b> or an organizational data management system. In some embodiments, the instructions in the custom computer language generally may specify a simplified function (e.g., employee.devices.lastPing, employee.devices.lastUpdate) to obtain data associated based on multiple different entities and relationships present in organizational data <b>311</b> without specifying data joins and/or other underlying operations. In some embodiments, the instructions in the custom computer language generally may specify a list of one or more data fields of a report (e.g., employee.name, manager.name, department.name, devices.type, devices.age, etc.) without specifying data joins and/or other underlying operations needed to access and/or retrieve the associated underlying data.</p><p id="p-0143" num="0142">In an embodiment, a computer instruction generator <b>319</b> analyzes one or more instructions in a custom computer language that is based on organizational data <b>311</b> in view of information that describes structure and relationships associated with the organizational data <b>311</b>. For example, the computer instruction generator <b>319</b> may analyze such instructions based on one or more data structures <b>315</b> associated with one or more applications used in providing an organizational data management system for managing organizational data <b>311</b>. In some embodiments, one or more of the data structures are object graph data structures <b>315</b> that may include various information describing entities, relationships, metadata, explicit joins, virtual joins, and/or any other information used to describe structure of organizational data <b>311</b> associated with an application.</p><p id="p-0144" num="0143">In some embodiments, the computer instruction generator <b>319</b> analyzes one or more instructions in a custom computer language and determines one or more portions of an object graph data structure to access in association with the instructions. For example, the computer instruction generator <b>319</b> may analyze a master object graph data structure associated with organizational data <b>311</b> and determine one or more portions of the object graph data structure that are relevant for processing instructions in the custom computer language. The computer instruction generator <b>319</b> then can access the relevant portions of the object graph data structure to process the instructions in the custom computer language. As such, the computer instruction generator <b>319</b> is able to optimize processing associated with object graph data structures, which generally can include any number of entries (e.g., 1, 10, 100, 1000, 10000, etc.)</p><p id="p-0145" num="0144">In an embodiment, the computer instruction generator <b>319</b> analyzes instructions in a custom computer language based on one or more object graph data structures <b>315</b>. For example, the computer instruction generator <b>319</b> may analyze instructions in a custom computer language that are based on one or more data structures <b>315</b> associated with organizational data <b>311</b> and/or any application or system associated with organizational data <b>311</b>. In some embodiments, the computer instruction generator <b>319</b> analyzes custom computer language instructions and determines one or more operations to include when generating additional instructions that are to perform or otherwise carry out underlying tasks specified by higher-level, custom computer language instructions.</p><p id="p-0146" num="0145">At <b>504</b>, a computer system identifies one or more data joins from the information describing the structure of the application for processing the request. In an embodiment, the computer instruction generator <b>319</b> of a computing system (e.g., computing system <b>310</b>) identifies one or more data joins and/or other operations based on analyzing the data structures <b>315</b>, where such data joins and/or other operations are unspecified and absent from instructions in a custom computer language. In addition, the computer instruction generator <b>319</b> then may use the identified data joins and/or operations when generating instructions in another computer language to carry out one or more actions specified by custom computer language instructions. For example, a custom computer language may provide a high-level interface that allows users with functional business knowledge to utilize a simplified set of instructions for performing various operations associated with organizational data <b>311</b>. Such high-level interfaces may allow users simply to request data that is needed and/or to perform various operations without including specific details about complex, underlying data structures and distributed systems and third-party applications associated with organizational data. As such, the computer instruction generator <b>319</b> generally can determine the underlying data joins (e.g., any number of explicit joins, any number of virtual joins, etc.) and/or any other operations that are needed to carry out instructions specified in a custom computer language against one or more unrelated application, systems, and/or data stores based on analyzing the associated data structures <b>315</b> describing the structure and relationships of various organizational data <b>311</b>. For example, data joins may be determined based on explicit relationships defined in an object graph and/or virtual or implicit relationships defined in an object graph (e.g., between entities and/or data fields). In various examples, analyzing the data structures <b>315</b> greatly simplifies the task of determining the appropriate data sources and data objects that are to be used to obtain the organizational data <b>311</b> and/or to perform actions involving organizational data <b>311</b>. For example, accessing the data structures <b>315</b> generally optimizes the determination of relevant data objects (e.g., tables) and relationships, which generally can become quite large in various types of computer systems (e.g., 100's, 1000's, 10,000's, and/or generally any number of data objects and corresponding to organizational data and/or any other type of data.</p><p id="p-0147" num="0146">At <b>506</b>, a computer system generates one or more additional instructions that include the data joins based on the instructions from the request and the information describing the structure of the application. In an embodiment, the computer instruction generator <b>319</b> of a computing system (e.g., computing system <b>310</b>) generates instructions (e.g., in the custom computer language) that include one or more data joins or other operations that were identified based on analyzing instructions in a custom computer language in view of in one or more data structures <b>315</b> that describe structure and relationships associated with the organizational data <b>311</b> and/or associated applications and systems. In some embodiments, the computer instruction generator <b>319</b> may generate new instructions in the custom computer language or a variant thereof (e.g., an intermediate language that is executable in a runtime environment), which may be executed by one or more applications, computing systems, and/or data stores to perform operations. In some embodiments, the computer instruction generator <b>319</b> generates new instructions in the custom computer language and/or modifies or enhances instructions received in the custom computer language to specify one or more new or additional data joins and/or other operations that were not present in an original version of custom computer language instructions. For example, the computer instruction generator <b>319</b> may generate or update instructions in a custom computer language based on instructions received in the custom computer language to allow processing by one or more applications and/or an organizational data management system, which support and execute instructions in the custom computer language. Further, such instructions generated in the custom computer language then may be executed to perform one or more operations associated with organizational data <b>311</b>. In some examples, the instructions generated in the custom computer language may then be used to further generate instructions in one or more other computer languages for execution to perform various operations.</p><p id="p-0148" num="0147">In an embodiment, the computer instruction generator <b>319</b> generates instructions in a different computer language, other than the custom computer language, based on instructions in the custom computer language. For example, the computer instruction generator <b>319</b> can generate instructions in a different computer language that include one or more data joins or other operations that were unspecified by instructions in a custom computer language and were otherwise identified based on analyzing such instructions in view of in one or more data structures <b>315</b> describing structure and relationships of organizational data <b>311</b> and/or associated applications and systems. The instructions generated in the different computer language then may be executed in association with another application, system, and/or data store to perform one or more downstream operations in association with processing a request based on instructions in the custom computer language.</p><p id="p-0149" num="0148">At <b>508</b>, a computer system obtains a result for the request based on the generated instructions. In an embodiment, a custom language processing engine <b>317</b> of a computing system (e.g., computing system <b>310</b>) provides one or more generated instructions (based on one or more instructions in a custom computer language) to one or more other applications (e.g., applications <b>312</b>), systems (e.g., computing systems <b>320</b>), and/or data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>) for execution. For example, the generated instructions may be used to obtain information and/or to perform one or more procedures or actions with other applications, systems, and/or data stores that do not support the custom computer language. In some embodiments, instructions generated in a different computer language may be generated based on instructions in a custom computer language and supplemental information obtained from one or more data structures <b>315</b> associated with organizational data <b>311</b>. In addition, generated instructions may be generated, for example, in any one or more different computer languages (e.g., any programming language, any data access language, and/or any other type of computer language) other than a custom computer language provided for use by users with functional business knowledge. In various embodiments, generated instructions can be used to obtain information from other applications, systems, and/or data stores in association with the processing of a request with instructions in a custom computer language.</p><p id="p-0150" num="0149">At <b>510</b>, a computer system provides the result in response to the request. In an embodiment, the custom language processing engine <b>317</b> of a computing system obtains a result from each of one or more applications (e.g., applications <b>312</b>), systems (e.g., computing systems <b>320</b>), and/or data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>) based on the generated instructions. In various examples, the custom language processing engine <b>317</b> generally may receive, analyze, and process organizational data <b>311</b> and/or other information received from any one or more applications, systems, and/or data stores. In an embodiment, a result comprising organizational data <b>311</b>, other information, acknowledgement that one or more operations were performed, and/or any other type of result may be returned in response to a request with instructions in a custom computer language. In some examples, organizational data <b>311</b> may be further processed in association with one or more applications of an organizational data management system before a result is returned in response to a request. For example, organizational data <b>311</b> may be returned from one or more applications, systems, and/or data stores and then further processed based on one or more queries, reports, policies, workflows, triggering conditions, rules, and/or any other functionality and/or operations provided by an organizational data management system before providing a result in response to a request that includes instructions in a custom computer language.</p><p id="p-0151" num="0150"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a flow diagram of an example method <b>600</b> for performing multilayered generation and processing of computer instructions, according to example embodiments of the present disclosure. One or more portions of the method <b>600</b> can be executed and/or implemented on one or more computing devices or computing systems including, for example, the computing system <b>110</b>, the remote computing system <b>130</b>, the one or more computing devices <b>152</b>, the computing device <b>200</b>, the computing system <b>302</b>, the computing system <b>306</b>, and/or the computing system <b>310</b>. In addition, one or more portions of the method <b>600</b> can be executed or implemented as an algorithm on the hardware devices or systems disclosed herein. <figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts steps performed in a particular order for purposes of illustration and discussion. As such, those of ordinary skill in the art, using the disclosures provided herein, will understand that various steps of any of the methods disclosed herein can be adapted, modified, rearranged, omitted, and/or expanded without deviating from the scope of the present disclosure.</p><p id="p-0152" num="0151">At <b>602</b>, a computer system analyzes instructions in a first computing language in view of information that describes structure of a first application. In an embodiment, a computer instruction generator <b>319</b> of a computing system (e.g., computing system <b>310</b>) analyzes instructions in a custom computer language that are associated with a request. For example, such instructions may be received in association with a request as described at <b>402</b> and elsewhere in the present disclosure. Such instructions also may be parsed as described at <b>404</b> and elsewhere in the present disclosure. In an embodiment, a computer instruction generator <b>319</b> analyzes one or more instructions in a custom computer language based on organizational data <b>311</b> in view of information that describes structure and relationships associated with the organizational data <b>311</b>.</p><p id="p-0153" num="0152">In an embodiment, the computer instruction generator <b>319</b> analyzes instructions in a custom computer language based on one or more data structures <b>315</b> associated with organizational data <b>311</b> and/or any application or system associated with organizational data <b>311</b>. In various embodiments, the computer instruction generator <b>319</b> determines, based on the analyzing, one or more data joins and/or other operations to include when generating additional instructions that are to perform or otherwise carry out tasks specified by custom computer language instructions with other applications, computing systems, and/or data stores. In various embodiments, the computer instruction generator <b>319</b> generates instructions in each of one or more computer languages based on analyzing instructions received in a custom computing language associated with organizational data <b>311</b> in view of one or more object graph data structures <b>315</b> describing structure of the organizational data <b>311</b>.</p><p id="p-0154" num="0153">At <b>604</b>, a computer system generates instructions in a second computer language based on the instructions in the first computer language and the information that describes the structure of the first application. In an embodiment, the computer instruction generator <b>319</b> of a computer system (e.g., computer system <b>310</b>) generates instructions in a second computer language based on instructions received in the custom computer language. For example, the computer instruction generator <b>319</b> can generate instructions in a different computer language for execution with another application, system, and/or data store based on analyzing instructions of a custom computer language in view of one or more data structures <b>315</b>. In various embodiments, the instructions generated in the second computing language by computer instruction generator <b>319</b> include one or more data joins and/or one or more other types of operations identified based on analyzing instructions of a custom computer language in view of one or more data structures <b>315</b>.</p><p id="p-0155" num="0154">In an embodiment, the computer instruction generator <b>319</b> determines one or more data joins and/or other operations to include when generating instructions in the second computing language based on analyzing instructions in a custom computer language (e.g., a custom computer language based on organizational data <b>311</b>) in view of one or more data structures <b>315</b> (e.g., one or more object graph data structures describing the organizational data <b>311</b>). For example, the computer instruction generator <b>319</b> generally may identify one or more explicit data joins, one or more virtual data joins, and/or one or more other types of operations present in or otherwise ascertainable from the one or more object graph data structures <b>315</b>. For example, such data joins and/or other types of operations generally may be unspecified or absent in high-level custom computer language instructions, but otherwise may be included in associated instructions being generated to perform associated lower-level operations across one or more different applications, computing systems, and/or data stores.</p><p id="p-0156" num="0155">At <b>606</b>, a computer system generates instructions in a third computer language based on the instructions in the first computer language and the information that describes the structure of the first application. In an embodiment, the computer instruction generator <b>319</b> of a computer system (e.g., computer system <b>310</b>) generates instructions in a third computer language based on instructions received in the custom computer language. For example, the computer instruction generator <b>319</b> can generate instructions in a third computer language for execution with another application, system, and/or data store based on analyzing instructions of a custom computer language in view of one or more data structures <b>315</b>. In various embodiments, the instructions generated in the third computing language by computer instruction generator <b>319</b> include one or more data joins and/or one or more other types of operations identified based on analyzing instructions of a custom computer language in view of one or more data structures <b>315</b>.</p><p id="p-0157" num="0156">In an embodiment, the computer instruction generator <b>319</b> determines one or more data joins and/or other operations to include when generating instructions in the third computing language based on analyzing instructions in a custom computer language (e.g., a custom computer language based on organizational data <b>311</b>) in view of one or more data structures <b>315</b> (e.g., one or more object graph data structures describing the organizational data <b>311</b>). For example, the computer instruction generator <b>319</b> generally may identify one or more explicit data joins, one or more virtual data joins, and/or one or more other types of operations present in or otherwise ascertainable from the one or more object graph data structures <b>315</b>. For example, such data joins and/or other types of operations generally may be unspecified or absent in high-level custom computer language instructions, but otherwise may be included in associated instructions being generated to perform associated lower-level operations across one or more different applications, computing systems, and/or data stores. In various examples, the instructions generated in the third computer language include one or more data joins and/or one or more other types of operations that are different from one or more data joins and/or one or more other types of operations included in the instructions generated in the second computer language.</p><p id="p-0158" num="0157">At <b>608</b>, a computer system obtains a result from the second application based on the generated instructions in the second computer language. In an embodiment, a custom language processing engine <b>317</b> of a computing system (e.g., computing system <b>310</b>) obtains one or more results based on the instructions generated in the second language. For example, the custom language processing engine <b>317</b> may execute the instructions generated in the second computer language or provide such instructions to one or more other applications (e.g., applications <b>312</b>), systems (e.g., computing systems <b>320</b>), and/or data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>) for execution. As such, the custom language processing engine <b>317</b> can receive or otherwise obtain one or more results based on execution of the instructions generated in the second computer language.</p><p id="p-0159" num="0158">At <b>610</b>, a computer system obtains a result from the third application based on the generated instructions in the third computer language. In an embodiment, a custom language processing engine <b>317</b> of a computing system (e.g., computing system <b>310</b>) obtains one or more results based on the instructions generated in the language. For example, the custom language processing engine <b>317</b> may execute the instructions generated in the computer language or provide such instructions to one or more other applications (e.g., applications <b>312</b>), systems (e.g., computing systems <b>320</b>), and/or data stores (e.g., data store <b>330</b>, <b>340</b>, <b>350</b>) for execution. As such, the custom language processing engine <b>317</b> can receive or otherwise obtain one or more results based on execution of the instructions generated in the second computer language.</p><p id="p-0160" num="0159">At <b>612</b>, a computer system performs one or more operations based on the obtained results. In an embodiment, the custom language processing engine <b>317</b> of a computing system (e.g., computing system <b>310</b>) performs one or more operations based on one or more results obtained at <b>608</b>, <b>610</b>, and/or as otherwise provided in the present disclosure. In an example, the custom language processing engine <b>317</b> provides one or more results obtained from execution of the computer instructions generated in the second computer language and/or one or more results obtained from execution of the computer instructions generated in the third computer language in response to a request comprising instructions in a custom computer language. In various examples, the custom language processing engine <b>317</b> generally may receive, analyze, and process organizational data <b>311</b> and/or other information received from any one or more applications, systems, and/or data stores. In an embodiment, a result comprising organizational data <b>311</b>, other information, acknowledgement that one or more operations were performed, and/or any other type of result may be returned in response to a request with instructions in a custom computer language.</p><p id="p-0161" num="0160">In an embodiment, the custom language processing engine <b>317</b> processes organizational data <b>311</b> obtained based on the instructions generated in the second computer language and/or organizational data <b>311</b> obtained based on the instructions generated in the third computer language (e.g., individually or in combination). For example, organizational data <b>311</b> may be further processed in association with one or more applications of an organizational data management system before a result is returned in response to a request. In some embodiments, organizational data <b>311</b> may be processed based on one or more queries, reports, policies, workflows, triggering conditions, rules, and/or any other functionality and/or operations provided by an organizational data management system, for example, based on instructions in a custom computer language.</p><p id="p-0162" num="0161">Numerous details are set forth in the foregoing description. However, it will be apparent to one of ordinary skill in the art having the benefit of this disclosure that the present disclosure may be practiced without these specific details. In some instances, structures and devices are shown in block diagram form, rather than in detail, to avoid obscuring the present disclosure.</p><p id="p-0163" num="0162">Some portions of the detailed description have been presented in terms of processes and symbolic representations of operations on data bits within a computer memory. Here, a process can include a self-consistent sequence of steps leading to a result. The steps can include those requiring physical manipulations of physical quantities. These quantities can take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. These signals can be referred to as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0164" num="0163">These terms and similar terms can be associated with physical quantities and can represent labels applied to these quantities. The terms including &#x201c;obtaining,&#x201d; &#x201c;parsing,&#x201d; &#x201c;analyzing,&#x201d; &#x201c;accessing,&#x201d; &#x201c;determining,&#x201d; &#x201c;identifying,&#x201d; &#x201c;adjusting,&#x201d; &#x201c;modifying,&#x201d; &#x201c;transmitting,&#x201d; &#x201c;receiving,&#x201d; &#x201c;processing&#x201d; &#x201c;generating,&#x201d; or the like, can refer to the actions and processes of a computer system, a computing device, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data that can be similarly represented as physical quantities within the computer system's memories, registers, or other information storage device, data transmission device, or data processing device.</p><p id="p-0165" num="0164">Certain examples of the present disclosure can relate to an apparatus for performing the operations described herein. This apparatus may include a computing device that is activated or reconfigured by a computer program comprising electronic instructions stored in the computing device. Such a computer program may be stored in a computer readable storage medium, which can include any type of storage. For example, the storage can include hard disk drives, solid state drives, floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.</p><p id="p-0166" num="0165">The above description is intended to be illustrative, and not restrictive. The scope of the disclosure can therefore be determined with reference to the claims.</p><p id="p-0167" num="0166">The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.</p><p id="p-0168" num="0167">While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>.-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A computer system that implements an organizational management platform that controls and leverages organizational data to manage organizational applications for an organization, the computer system comprising:<claim-text>one or more processors;</claim-text><claim-text>one or more databases that collectively store a set of organizational data associated with the organization,<claim-text>wherein the set of organizational data comprises an object graph data structure comprising a plurality of data objects,</claim-text><claim-text>wherein at least a portion of the plurality of data objects comprise employee data objects that respectively correspond to a plurality of employees of the organization, and</claim-text><claim-text>wherein the set of organizational data specifies relationships between the employee data objects and other data objects of the plurality of data objects; and</claim-text></claim-text><claim-text>one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computer system to perform operations, the operations comprising:<claim-text>receiving a user-defined query expression that is expressed in a query language, and wherein the user-defined query expression contains one or more operators that return one or more of the data objects that have a specified relationship with a specified employee data object within the set of organizational data;</claim-text><claim-text>incorporating the user-defined query expression into an automated data processing routine, wherein the automated data processing routine comprises one or more of a report, policy, workflow, trigger, or rule; and</claim-text><claim-text>implementing the automated data processing routine to modify at least one data object in the object graph data structure;</claim-text><claim-text>wherein implementing the automated data processing routine comprises evaluating the user-defined query expression against the set of organizational data to identify one or more of the other data objects that have the specified relationship with the specified employee data object.</claim-text></claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the data objects comprise nodes in the object graph data structure and wherein edges between the nodes correspond to defined relationships between the data objects.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein evaluating the user-defined query expression against the set of organizational data comprises traversing the object graph data structure from the specified employee to the one or more of the other data objects.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more of the other data objects comprise one or more devices objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more of the other data objects comprise one or more document objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more of the other data objects comprise one or more timecard objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more of the other data objects comprise one or more benefit policy objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more of the other data objects comprise one or more pay instance objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more of the other data objects comprise one or more job candidate objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. A computer-implemented method, comprising:<claim-text>accessing, by a computing system comprising one or more computing devices, one or more databases that collectively store a set of organizational data associated with the organization,<claim-text>wherein the set of organizational data comprises an object graph data structure comprising a plurality of data objects,</claim-text><claim-text>wherein at least a portion of the plurality of data objects comprise employee data objects that respectively correspond to a plurality of employees of the organization, and</claim-text><claim-text>wherein the set of organizational data specifies relationships between the employee data objects and other data objects of the plurality of data objects;</claim-text></claim-text><claim-text>receiving, by the computing system, a user-defined query expression that is expressed in a query language, and wherein the user-defined query expression contains one or more operators that return one or more of the data objects that have a specified relationship with a specified employee data object within the set of organizational data;</claim-text><claim-text>incorporating, by the computing system, the user-defined query expression into an automated data processing routine, wherein the automated data processing routine comprises one or more of a report, policy, workflow, trigger, or rule; and</claim-text><claim-text>implementing, by the computing system, the automated data processing routine to modify at least one data object in the object graph data structure;</claim-text><claim-text>wherein implementing, by the computing system, the automated data processing routine comprises evaluating, by the computing system, the user-defined query expression against the set of organizational data to identify one or more of the other data objects that have the specified relationship with the specified employee data object.</claim-text></claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the data objects comprise nodes in the object graph data structure and wherein edges between the nodes correspond to defined relationships between the data objects.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein evaluating the user-defined query expression against the set of organizational data comprises traversing the object graph data structure from the specified employee to the one or more of the other data objects.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the one or more of the other data objects comprise one or more devices objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the one or more of the other data objects comprise one or more document objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the one or more of the other data objects comprise one or more timecard objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the one or more of the other data objects comprise one or more benefit policy objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the one or more of the other data objects comprise one or more pay instance objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The computer-implemented method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, wherein the one or more of the other data objects comprise one or more job candidate objects associated with the specified employee in the object graph data.</claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. A computer-implemented method, the method comprising:<claim-text>maintaining, by a computing system comprising one or more computing devices, a set of organizational data associated with the organization,<claim-text>wherein the set of organizational data comprises an object graph data structure comprising a plurality of data objects,</claim-text><claim-text>wherein at least a portion of the plurality of data objects comprise employee data objects that respectively correspond to a plurality of employees of the organization, and</claim-text><claim-text>wherein the set of organizational data specifies relationships between the employee data objects and other data objects of the plurality of data objects; and</claim-text></claim-text><claim-text>receiving, by the computing system, a user-defined query expression that is expressed in a query language, and wherein the user-defined query expression contains one or more operators that return one or more of the other data objects that have a specified relationship with a specified employee data object within a set of organizational data;</claim-text><claim-text>incorporating, by the computing system, the user-defined query expression into an automated data processing routine, wherein the automated data processing routine comprises one or more of a report, policy, workflow, trigger, or rule; and</claim-text><claim-text>evaluating, by the computing system, the user-defined query expression against the set of organizational data to identify one or more of the other data objects that have the specified organizational relationship with the specified employee data object.</claim-text></claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The computer-implemented method of <claim-ref idref="CLM-00039">claim 39</claim-ref>, wherein the automated data processing routine comprises a trigger and the method further comprises modifying the one or more of the other data objects that have the specified organizational relationship with the specified employee data object when the trigger is satisfied.</claim-text></claim></claims></us-patent-application>