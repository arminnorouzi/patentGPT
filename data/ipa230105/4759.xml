<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004760A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004760</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17361202</doc-number><date>20210628</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6267</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc></classifications-cpc><invention-title id="d2e43">TRAINING OBJECT DETECTION SYSTEMS WITH GENERATED IMAGES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>NVIDIA Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Mustikovela</last-name><first-name>Siva Karthik</first-name><address><city>Heidelberg</city><country>DE</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>De Mello</last-name><first-name>Shalini</first-name><address><city>San Francisco</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Prakash</last-name><first-name>Aayush</first-name><address><city>Toronto</city><country>CA</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Iqbal</last-name><first-name>Umar</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Liu</last-name><first-name>Sifei</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Kautz</last-name><first-name>Jan</first-name><address><city>Lexington</city><state>MA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Apparatuses, systems, and techniques to identify objects within an image using self-supervised machine learning. In at least one embodiment, a machine learning system is trained to recognize objects by training a first network to recognize objects within images that are generated by a second network. In at least one embodiment, the second network is a controllable network.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="197.44mm" wi="158.16mm" file="US20230004760A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="236.73mm" wi="166.96mm" orientation="landscape" file="US20230004760A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="237.66mm" wi="169.76mm" orientation="landscape" file="US20230004760A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="239.95mm" wi="131.91mm" orientation="landscape" file="US20230004760A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="238.84mm" wi="127.93mm" orientation="landscape" file="US20230004760A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="224.45mm" wi="139.45mm" orientation="landscape" file="US20230004760A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="202.61mm" wi="166.29mm" orientation="landscape" file="US20230004760A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="204.55mm" wi="107.87mm" file="US20230004760A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="225.81mm" wi="160.19mm" file="US20230004760A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="225.13mm" wi="140.89mm" orientation="landscape" file="US20230004760A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="239.44mm" wi="148.42mm" file="US20230004760A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="244.26mm" wi="168.32mm" orientation="landscape" file="US20230004760A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="240.88mm" wi="149.61mm" orientation="landscape" file="US20230004760A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="237.41mm" wi="170.52mm" file="US20230004760A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="211.75mm" wi="170.01mm" orientation="landscape" file="US20230004760A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="236.05mm" wi="166.20mm" file="US20230004760A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="243.16mm" wi="169.76mm" orientation="landscape" file="US20230004760A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="231.22mm" wi="168.99mm" file="US20230004760A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="224.54mm" wi="152.40mm" orientation="landscape" file="US20230004760A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="229.02mm" wi="158.24mm" orientation="landscape" file="US20230004760A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="239.61mm" wi="167.72mm" orientation="landscape" file="US20230004760A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="239.95mm" wi="165.44mm" orientation="landscape" file="US20230004760A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="230.55mm" wi="167.13mm" file="US20230004760A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="238.76mm" wi="168.74mm" orientation="landscape" file="US20230004760A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="237.15mm" wi="154.01mm" orientation="landscape" file="US20230004760A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="209.97mm" wi="149.94mm" file="US20230004760A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="221.49mm" wi="159.60mm" file="US20230004760A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="213.78mm" wi="141.99mm" file="US20230004760A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="236.22mm" wi="172.97mm" file="US20230004760A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="238.34mm" wi="158.24mm" orientation="landscape" file="US20230004760A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="232.07mm" wi="168.83mm" file="US20230004760A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="223.35mm" wi="170.86mm" file="US20230004760A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="207.94mm" wi="128.86mm" file="US20230004760A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="215.82mm" wi="159.34mm" file="US20230004760A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="231.39mm" wi="153.92mm" file="US20230004760A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="230.89mm" wi="120.82mm" file="US20230004760A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="237.32mm" wi="166.62mm" orientation="landscape" file="US20230004760A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="232.49mm" wi="169.33mm" orientation="landscape" file="US20230004760A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="240.96mm" wi="165.44mm" orientation="landscape" file="US20230004760A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="238.84mm" wi="167.81mm" orientation="landscape" file="US20230004760A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="236.73mm" wi="173.99mm" file="US20230004760A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="227.50mm" wi="156.04mm" orientation="landscape" file="US20230004760A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00042" num="00042"><img id="EMI-D00042" he="219.79mm" wi="166.20mm" orientation="landscape" file="US20230004760A1-20230105-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00043" num="00043"><img id="EMI-D00043" he="237.41mm" wi="162.98mm" orientation="landscape" file="US20230004760A1-20230105-D00043.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00044" num="00044"><img id="EMI-D00044" he="241.38mm" wi="171.62mm" orientation="landscape" file="US20230004760A1-20230105-D00044.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00045" num="00045"><img id="EMI-D00045" he="219.79mm" wi="162.14mm" orientation="landscape" file="US20230004760A1-20230105-D00045.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00046" num="00046"><img id="EMI-D00046" he="232.92mm" wi="172.13mm" orientation="landscape" file="US20230004760A1-20230105-D00046.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00047" num="00047"><img id="EMI-D00047" he="238.34mm" wi="171.11mm" file="US20230004760A1-20230105-D00047.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00048" num="00048"><img id="EMI-D00048" he="225.38mm" wi="163.07mm" file="US20230004760A1-20230105-D00048.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00049" num="00049"><img id="EMI-D00049" he="214.04mm" wi="157.06mm" file="US20230004760A1-20230105-D00049.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00050" num="00050"><img id="EMI-D00050" he="238.59mm" wi="156.63mm" file="US20230004760A1-20230105-D00050.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00051" num="00051"><img id="EMI-D00051" he="207.69mm" wi="161.54mm" orientation="landscape" file="US20230004760A1-20230105-D00051.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00052" num="00052"><img id="EMI-D00052" he="241.98mm" wi="168.57mm" orientation="landscape" file="US20230004760A1-20230105-D00052.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00053" num="00053"><img id="EMI-D00053" he="243.76mm" wi="159.60mm" orientation="landscape" file="US20230004760A1-20230105-D00053.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00054" num="00054"><img id="EMI-D00054" he="216.49mm" wi="161.54mm" orientation="landscape" file="US20230004760A1-20230105-D00054.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00055" num="00055"><img id="EMI-D00055" he="232.16mm" wi="150.79mm" orientation="landscape" file="US20230004760A1-20230105-D00055.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00056" num="00056"><img id="EMI-D00056" he="172.64mm" wi="157.73mm" orientation="landscape" file="US20230004760A1-20230105-D00056.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00057" num="00057"><img id="EMI-D00057" he="160.44mm" wi="147.57mm" orientation="landscape" file="US20230004760A1-20230105-D00057.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">At least one embodiment pertains to processing resources used to perform and facilitate artificial intelligence. For example, at least one embodiment, pertains to processors or computing systems used to train neural networks according to various novel techniques described herein.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Object detection is an important field of research. It is an important part of many solutions including robotic control, self-driving vehicles, and video surveillance systems. Training such systems can be challenging because, in various examples, there can be a wide variety of object types in an image. Therefore, obtaining and labeling a sufficient amount of training data needed for training an object detection system is costly and time consuming.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a network for performing self-supervised object detection (&#x201c;SSOD&#x201d;), in at least one embodiment;</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example of a network that generates images with objects in pre-defined poses, in at least one embodiment;</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of an object detection network, in at least one embodiment;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of a target data adaption module, in at least one embodiment;</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of a pose-aware synthesis network, in at least one embodiment;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example of precision-recall curves for SSOD, in at least one embodiment;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of a process that, as a result of being performed by a computer system trains a system to recognize an object in an image, in at least one embodiment;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref> illustrates inference and/or training logic, according to at least one embodiment;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>8</b>B</figref> illustrates inference and/or training logic, according to at least one embodiment;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates training and deployment of a neural network, according to at least one embodiment;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example data center system, according to at least one embodiment;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>11</b>A</figref> illustrates an example of an autonomous vehicle, according to at least one embodiment;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>11</b>B</figref> illustrates an example of camera locations and fields of view for autonomous vehicle of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, according to at least one embodiment;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>11</b>C</figref> is a block diagram illustrating an example system architecture for autonomous vehicle of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, according to at least one embodiment;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>11</b>D</figref> is a diagram illustrating a system for communication between cloud-based server(s) and autonomous vehicle of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, according to at least one embodiment;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram illustrating a computer system, according to at least one embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram illustrating a computer system, according to at least one embodiment;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>16</b>A</figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>16</b>B</figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>16</b>C</figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>16</b>D</figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. <b>16</b>E and <b>16</b>F</figref> illustrate a shared programming model, according to at least one embodiment;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates exemplary integrated circuits and associated graphics processors, according to at least one embodiment;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIGS. <b>18</b>A and <b>18</b>B</figref> illustrate exemplary integrated circuits and associated graphics processors, according to at least one embodiment;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. <b>19</b>A and <b>19</b>B</figref> illustrate additional exemplary graphics processor logic according to at least one embodiment;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates a computer system, according to at least one embodiment;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>21</b>A</figref> illustrates a parallel processor, according to at least one embodiment;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>21</b>B</figref> illustrates a partition unit, according to at least one embodiment;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>21</b>C</figref> illustrates a processing cluster, according to at least one embodiment;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>21</b>D</figref> illustrates a graphics multiprocessor, according to at least one embodiment;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>22</b></figref> illustrates a multi-graphics processing unit (GPU) system, according to at least one embodiment;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates a graphics processor, according to at least one embodiment;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a block diagram illustrating a processor micro-architecture for a processor, according to at least one embodiment;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>25</b></figref> illustrates a deep learning application processor, according to at least one embodiment;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>26</b></figref> is a block diagram illustrating an example neuromorphic processor, according to at least one embodiment;</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates at least portions of a graphics processor, according to one or more embodiments;</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>28</b></figref> illustrates at least portions of a graphics processor, according to one or more embodiments;</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates at least portions of a graphics processor, according to one or more embodiments;</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a block diagram of a graphics processing engine of a graphics processor in accordance with at least one embodiment;</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>31</b></figref> is a block diagram of at least portions of a graphics processor core, according to at least one embodiment;</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIGS. <b>32</b>A and <b>32</b>B</figref> illustrate thread execution logic including an array of processing elements of a graphics processor core according to at least one embodiment;</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>33</b></figref> illustrates a parallel processing unit (&#x201c;PPU&#x201d;), according to at least one embodiment;</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>34</b></figref> illustrates a general processing cluster (&#x201c;GPC&#x201d;), according to at least one embodiment;</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>35</b></figref> illustrates a memory partition unit of a parallel processing unit (&#x201c;PPU&#x201d;), according to at least one embodiment;</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>36</b></figref> illustrates a streaming multi-processor, according to at least one embodiment.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is an example data flow diagram for an advanced computing pipeline, in accordance with at least one embodiment;</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>38</b></figref> is a system diagram for an example system for training, adapting, instantiating and deploying machine learning models in an advanced computing pipeline, in accordance with at least one embodiment;</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>39</b></figref> includes an example illustration of an advanced computing pipeline <b>3810</b>A for processing imaging data, in accordance with at least one embodiment;</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>40</b>A</figref> includes an example data flow diagram of a virtual instrument supporting an ultrasound device, in accordance with at least one embodiment;</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>40</b>B</figref> includes an example data flow diagram of a virtual instrument supporting an CT scanner, in accordance with at least one embodiment;</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>41</b>A</figref> illustrates a data flow diagram for a process to train a machine learning model, in accordance with at least one embodiment; and</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>41</b>B</figref> is an example illustration of a client-server architecture to enhance annotation tools with pre-trained annotation models, in accordance with at least one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0058" num="0057">Object detection is a long-standing fundamental problem in computer vision. It plays an important role in various autonomous vision pipelines such as in robotics, self-driving vehicles, and other vision-based applications. In at least one embodiment, convolutional neural networks are used to achieve impressive object detection performance. However, in at least one embodiment, they are fully-supervised and require large amounts of human annotated data, which is time-consuming and expensive to acquire for all object types and operating environments. In at least one embodiment, supervised approaches do not scale well when application domains change, for example from one city to another in case of self-driving. In at least one embodiment, to reduce this annotation cost, an improved algorithm for self-supervised object detection is used to train object detectors with just image collections of object of interest gathered from common sources, such as the Internet, without requiring explicit bounding box annotations for them during training. In at least one embodiment, no 3D CAD assets or rendering pipelines are necessary.</p><p id="p-0059" num="0058">In at least one embodiment, Generative Adversarial Networks (&#x201c;GANs&#x201d;) are used which provide control using input parameters like shape, viewpoint, position and key points opening up a possibility of synthesizing images with desired attributes. In at least one embodiment, other types of networks may be used to generate images such as synthesis networks, controllable synthesis networks, implicit function networks, or neural radiance fields (&#x201c;NERFs&#x201d;). At least one embodiment provides an end-to-end analysis-by-synthesis framework for purely self-supervised object detection using controllable GANs, called SSOD. At least one embodiment learns to both synthesize and detect object images purely using unlabeled image collections, for example, without requiring bounding box-labels and without using 3D CAD asset.</p><p id="p-0060" num="0059">At least one embodiment learns a generator for controllable object image synthesis using real-world single-object image collections without bounding box labels. In at least one embodiment, by leveraging a controllable GAN or controllable synthesis network, which provides control over a 3D location and orientation of an object, at least one embodiment also produces a foreground object's corresponding bounding box annotation. In at least one embodiment, a controllable GAN further learns to disentangle an appearance representation of foreground and background objects, such that both can be controlled separately. At least one embodiment uses a synthesized images along with their bounding box annotations to train object detectors. To optimally train SSOD, at least one embodiment tightly couples image synthesis and object detection networks in an end-to-end fashion and train them jointly along with additional losses to synthesize high-quality images for a wide range of scales/z-depth values. At least one embodiment learns to also optimally adapt SSOD to a multi-object target dataset from real-world (such as KITTI or Cityscapes), also without requiring labels for it and improve object detection accuracy further.</p><p id="p-0061" num="0060">At least one embodiment of SSOD is evaluated below on challenging datasets for task of car object detection. In at least one embodiment, SSOD outperforms purely image-based self-supervised object detection methods that do not use GANs by a huge margin, with nearly 2&#xd7; better detection accuracy. In at least one embodiment, even without using any expensive 3D CAD assets or scene layout priors it also surpasses performance of alternative rendering-based methods.</p><p id="p-0062" num="0061">In at least one embodiment, compared to existing methods for self-supervised object detection, SSOD is an important work to explore using GANs. At least one embodiment learns a GAN to synthesize scenes with objects placed in desired locations and orientations, and to control appearance of foreground and background object, such that object detectors can then be successfully trained using images synthesized by a GAN. At least one embodiment opens up a new paradigm for further research in self-supervised object detection learning of using controllable GANs, which is significantly better (a) in terms of accuracy than alternative purely image-based methods that don't use GANS, and (b) significantly more cost-effective and adaptable compared to other methods that use 3D CAD assets to render scenes to train object detectors on.</p><p id="p-0063" num="0062">At least one embodiment provides much more fine-grained control in a GAN framework at a scene and object level to be able to place objects at desired locations and with desired orientations in scenes, versus what has been explored in GANs used for previous self-supervised vision learning tasks. In at least one embodiment, a GAN includes one or more generative networks that provide candidates to one or more discriminative networks. A discriminative network generates a loss value that indicates whether the candidate produced by the generative network is accurate. In at least one embodiment, a discriminative network distinguishes decision boundaries through observed data, such as pass/fail, win/lose, alive/dead or healthy/sick.</p><p id="p-0064" num="0063">At least one embodiment provides an end-to-end analysis-by-synthesis framework with controllable GANs for task of self-supervised object detection. At least one embodiment uses collections of real-world images without bounding box annotations to learn to synthesize and detect objects. At least one embodiment uses controllable GANs to synthesize images with pre-defined object properties and use them to train object detectors. At least one embodiment uses a tight end-to-end coupling of synthesis and detection networks to optimally train system. At least one embodiment is adapted to an intended target data without requiring labels for it. In at least one embodiment, for task of car detection, on challenging KTTTI and Cityscapes datasets, SSOD improves upon alternative image-based self-supervised object detection methods. In at least one embodiment, without requiring any 3D CAD assets, it also surpasses performance of rendering-based methods. At least one embodiment, advances field of self-supervised object detection by introducing a successful new paradigm of using controllable GAN-based image synthesis for it and by improving baseline accuracy of task.</p><p id="p-0065" num="0064">In at least one embodiment, object detection is a long-standing fundamental problem in computer vision. In at least one embodiment, object detection plays an important role in various autonomous vision pipelines, such as robotics and self-driving. Some alternative solutions are fully-supervised and require large amounts of human annotated data, which is time-consuming to acquire for all object types and operating environments. They also do not scale well when application domains change, such as changing from one city to another in case of self-driving vehicles.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a network for performing self-supervised object detection (&#x201c;SSOD&#x201d;), in at least one embodiment. At least one embodiment learns object detection purely using natural image collections without bounding box labels. At least one embodiment leverages controllable GANs to learn to synthesize images <b>106</b> and to detect objects <b>108</b> together in a tightly coupled framework. At least one embodiment learns image synthesis from unlabeled singe-object source images <b>102</b>. At least one embodiment learns image synthesis from unlabeled multi-object source images where a number of objects in each image is identified. At least one embodiment is adapted to a multi-object unlabeled target dataset <b>110</b>.</p><p id="p-0067" num="0066">At least one embodiment trains a Generative Adversarial Networks (&#x201c;GAN&#x201d;) or other synthesis network that is controllable using input parameters <b>112</b> like shape, viewpoint, position and keypoints, opening up a possibility of synthesizing images with desired attributes. In at least one embodiment, controllable GAN <b>104</b> is applied to create a system capable of self-supervised object detection.</p><p id="p-0068" num="0067">At least one embodiment provides an end-to-end analysis-by-synthesis framework for self-supervised object detection using controllable GANs, called SSOD (<figref idref="DRAWINGS">FIG. <b>1</b></figref>). At least one embodiment learns to both synthesize and detect object images purely using unlabeled image collections, without requiring bounding box-labels and without using 3D CAD assets. At least one embodiment learns a generator for object image synthesis <b>104</b> using real-world single-object image collections without bounding box labels. At least one embodiment leverages controllable GANs, which provide control over 3D location and orientation of an object, and also obtains its corresponding bounding box annotation <b>114</b>. To optimally train SSOD, at least one embodiment tightly couples synthesis and detection networks <b>116</b> in an end-to-end fashion and trains them jointly. At least one embodiment learns to optimally adapt SSOD to a multi-object target dataset, also without requiring labels for it and improves accuracy further.</p><p id="p-0069" num="0068">At least one embodiment validates SSOD on challenging KITTI and Cityscapes datasets for task of car object detection. In at least one embodiment, SSOD outperforms best prior purely image-based self-supervised object detection method Wetectron by a substantial margin, with nearly 2&#xd7; better detection accuracy. In at least one embodiment, even without using any 3D CAD assets or scene layout priors it also surpasses best rendering-based method Meta-Sim2. By outperforming previous purely image-based methods, at least one embodiment hugely advances field and serves as a strong new baseline for future work.</p><p id="p-0070" num="0069">At least one embodiment has one or more following advantages. At least one embodiment provides a self-supervised object detection framework via controllable generative synthesis, which uses only image collections without any kind of bounding box annotations. At least one embodiment provides an end-to-end analysis-by-synthesis framework, which can optimally adapt a synthesizer to both downstream task of object detection and to a target data in a purely self-supervised manner. At least one embodiment shows a &#x2dc;2&#xd7; performance improvement over an alternative SOTA purely image-based self-supervised object detection methods. Furthermore, even without using any 3D CAD assets, at least one embodiment outperforms a strong rendering-based baseline of Meta-Sim2.</p><p id="p-0071" num="0070">The goal of at least one embodiment is to learn both data generation and object detection from a set of real-world images without bounding box annotations and without requiring any 3D CAD models or rendering setups. In at least one embodiment, a GAN-based framework allows us to adapt to distribution of target data and also to synthesize data that is optimal for a final downstream task.</p><p id="p-0072" num="0071">In at least one embodiment, a goal is to learn a detection network <img id="CUSTOM-CHARACTER-00001" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>, which best detects objects (such as cars) in a target domain (such as out-door driving scenes from a city). At least one embodiment further assumes availability of an unlabeled image collection {I<sub>t</sub>} from target domain each containing an unknown number of objects per image (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). To train <img id="CUSTOM-CHARACTER-00002" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>, at least one embodiment leverages object images and their bounding box annotations synthesized by a controllable generative network S <b>202</b>, which, in turn, is also learnt using unlabeled object collections. Specifically, to learn S, at least one embodiment uses an additional sufficiently large unlabeled (bounding box annotation free) single-object (or multiple-object with a known number of objects) source collection {I<sub>s</sub>}, containing images with only one or more object per image, but not necessarily from target domain where detector must operate (see examples in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). At least one embodiment is trained with both {I<sub>t</sub>} and {I<sub>s</sub>}, and evaluated on a held-out labeled validation set from target domain, which is disjoint from {I<sub>t</sub>} and is never used for training.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example of a network that generates images with objects in pre-defined poses, in at least one embodiment. At least one embodiment includes a pose-aware synthesis module that generates images with objects in pre-defined poses using a controllable GAN for training object detectors. In at least one embodiment, S is modeled by a pose-aware generator <b>202</b>, which synthesizes images {I<sub>g</sub>} <b>204</b> of objects conditioned on pose parameters <b>206</b> (viewpoint (v), location (l), and appearance (z)) and obtain 2D bounding box annotations {A<sub>g</sub>} <b>208</b> for them.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of an object detection network, in at least one embodiment. At least one embodiment includes an object detection adaptation module that guides synthesis process to be optimal for downstream task of object detection. Using synthesized image-annotation pairs <img id="CUSTOM-CHARACTER-00003" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>I<sub>g</sub>, A<sub>9</sub><img id="CUSTOM-CHARACTER-00004" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/>, along with images from {I<sub>t</sub>}, at least one embodiment trains object detector <img id="CUSTOM-CHARACTER-00005" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> <b>302</b> to produce high-confidence detections <b>304</b>. In at least one embodiment, object detection adaptation module is designed to provide feedback to synthesis network S <b>202</b> to optimally adapt it to downstream task of object detection. In at least one embodiment, it tightly couples object detector <img id="CUSTOM-CHARACTER-00006" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> <b>302</b> and synthesizer S <b>202</b> for joint end-to-end training and also introduces specific losses <b>306</b> and <b>308</b> to guide synthesis process towards better object detection learning. In at least one embodiment, a multi-scale discriminator network is used to train the system. In at least one embodiment, multi-scale discriminator adjusts the size of objects in a generated image. In at least one embodiment, a loss generated to train detection network is also used to train a generator network.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of a target data adaption module, in at least one embodiment. At least one embodiment includes a target data adaption module that helps SSOD to adapt optimally to a target data distribution. At least one embodiment trains a plurality of modules in a tightly-coupled end-to-end manner. In at least one embodiment, target data adaptation module helps reduce domain gap between images synthesized by S and those in target domain {I<sub>t</sub>}. In at least one embodiment, it does so by introducing a set of spatially localized discriminative networks <b>402</b> and <b>404</b>, which adapt synthesis network S towards generating images closer to target data distribution in terms of overall image appearance and scale of objects.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of a pose-aware synthesis network, in at least one embodiment. In at least one embodiment, S takes as input separate style codes (z) and poses (v, l) for background and one/more foreground objects, transforms their respective learned 3D codes with provided poses, and synthesizes images after passing them through several 3D convolutional, 2D projection and 2D convolutional layers. At least one embodiment uses provided poses to compute 2D bounding box labels for synthesized objects.</p><p id="p-0077" num="0076">At least one embodiment trains SSOD's modules in two stages&#x2014;uncoupled and coupled. During uncoupled training, at least one embodiment pre-trains synthesis network S on {I<sub>s</sub>} without feedback from other modules. At least one embodiment synthesizes image-annotation pairs with S and uses them along with background only image {I<sub>t</sub>} to pre-train <img id="CUSTOM-CHARACTER-00007" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>. In at least one embodiment, during next coupled training phase, SSOD's various modules are jointly fine-tuned with both source {I<sub>s</sub>} and target {I<sub>t</sub>} images, and data synthesized by S. At least one embodiment alternatively trains S in one iteration and other networks in a next one.</p><p id="p-0078" num="0077">At least one embodiment allows control of style, pose and number of objects in a scene by disentangling background and foreground representations. Architecture of at least one embodiment is illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. In at least one embodiment, input to a network <b>502</b>, <b>506</b> consists of a style vector z<sub>f </sub>and an object pose in camera coordinates (v<sub>f</sub>, l<sub>f</sub>) for one or more foreground objects. In at least one embodiment, value of v<sub>f </sub>represents azimuth of an object and l<sub>f </sub>represents horizontal and depth translation. In at least one embodiment, a style vector z<sub>b </sub>and pose (v<sub>b</sub>, l<sub>f</sub>) is input to a second network <b>504</b> for background. In at least one embodiment, to make BlockGAN amenable to target data adaptation, it is augmented with Multi-Layer Perception (&#x201c;MLP&#x201d;) blocks <b>508</b>, <b>510</b>, <b>512</b> which learn to modify style vectors for both foreground and background before they are input to generator, such that synthesized images are closer to target dataset (<figref idref="DRAWINGS">FIG. <b>5</b></figref>).</p><p id="p-0079" num="0078">In at least one embodiment, synthesis network S generates a scene I<sub>g</sub>, which contains foreground object in a pre-specified location and orientation. To achieve this, at least one embodiment passes a learned 3D latent code of an object through a set of 3D convolutions where style of object is controlled by input style codes z<sub>f </sub>for foreground and z<sub>b </sub>for background (<figref idref="DRAWINGS">FIG. <b>5</b></figref>). In at least one embodiment, these 3D features are further transformed using their input poses. In at least one embodiment, all objects are processed similarly in separate branches. In at least one embodiment, resulting 3D features of objects are collated using an element-wise maximum operation and then projected <b>514</b> onto 2D using a perspective camera transformation followed by a set of 2D convolutions <b>516</b> to yield I<sub>g </sub><b>518</b>. In at least one embodiment, original BlockGAN generates images at a resolution of 64&#xd7;64. For S, at least one embodiment modifies it and adopts strategy of progressive growing of GANs to increase its synthesis resolution to 256&#xd7;256. At least one embodiment trains S using a GAN framework with an adversarial loss <img id="CUSTOM-CHARACTER-00008" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>csn </sub>computed using a scene discriminator <img id="CUSTOM-CHARACTER-00009" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>csn</sub>, as:</p><p id="p-0080" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00010" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>csn</sub>=&#x2212;<img id="CUSTOM-CHARACTER-00011" he="2.46mm" wi="7.79mm" file="US20230004760A1-20230105-P00006.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<img id="CUSTOM-CHARACTER-00012" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn</sub>(<i>I</i><sub>g</sub>)],&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0081" num="0079">where <img id="CUSTOM-CHARACTER-00013" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn</sub>(I<sub>g</sub>) is class membership score predicted by <img id="CUSTOM-CHARACTER-00014" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn </sub>for a synthesized image. In at least one embodiment, this is one among other losses, which are used to train S. In at least one embodiment, real images input to <img id="CUSTOM-CHARACTER-00015" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn </sub>are sampled from {I<sub>s</sub>}.</p><p id="p-0082" num="0080">In at least one embodiment, to train S, a fixed and known (n) number of objects in each real image {I<sub>s</sub>} is assumed during training. In at least one embodiment, since n is known (one object per image), while training S images can also be synthesized with a same number of objects to pass to discriminator, which makes it easier to train generator. In at least one embodiment, having a large single-object image collection {I<sub>s</sub>} is used for training S, but multi-object image collections may be used if the number of objects is known.</p><p id="p-0083" num="0081">In at least one embodiment, synthesis network S can generate a foreground object using a pose (v<sub>f</sub>, l<sub>f</sub>). In at least one embodiment, this property allows localization of an object in a synthesized image and creation of a 2D bounding box (BBox) annotation for it. In at least one embodiment, a mean 3D bounding box (in real-world dimensions) of an object class is used and projected forward onto a 2D image plane using S's known camera matrix and object's pre-defined pose (v<sub>f</sub>, l<sub>f</sub>) via perspective projection. In at least one embodiment, a camera matrix is fixed for all synthesized images. At least one embodiment obtains a 2D bounding box A<sub>g </sub>for synthesized image I<sub>g </sub>by computing maximum and minimum coordinates of projected 3D bounding box in image plane. In at least one embodiment, this procedure is illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Paired data <img id="CUSTOM-CHARACTER-00016" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>I<sub>g</sub>, A<sub>g</sub><img id="CUSTOM-CHARACTER-00017" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/> can then be used to train object detection network <img id="CUSTOM-CHARACTER-00018" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><p id="p-0084" num="0082">At least one embodiment introduces a set of objectives, which supervise S to synthesize images that are optimal for learning object detectors. In at least one embodiment, these include an (a) object detection loss <b>308</b> and (b) a multi-scale object synthesis loss <b>306</b>.</p><p id="p-0085" num="0083">At least one embodiment tightly couples object detection network <img id="CUSTOM-CHARACTER-00019" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> to S such that it provides feedback to S. In at least one embodiment, object detection network <img id="CUSTOM-CHARACTER-00020" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> is a standard FasterRCNN with Feature Pyramid Network, which takes 2D images as input and predicts bounding boxes for an object. In at least one embodiment, it is trained using standard object detection losses (L<sub>det</sub>). In at least one embodiment, while training SSOD, object detection loss L<sub>det </sub>is computed for image-annotation pairs <img id="CUSTOM-CHARACTER-00021" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>I<sub>g</sub>, A<sub>g</sub><img id="CUSTOM-CHARACTER-00022" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/> synthesized by S and used as an additional loss term for updating weights of S.</p><p id="p-0086" num="0084">In at least one embodiment, it is important for S to be able to synthesize high quality images at varied object depths/scales, such that <img id="CUSTOM-CHARACTER-00023" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> can be optimally trained with diverse data. In at least one embodiment, to extend range of depths for which S generates high-quality objects, a multi-scale object synthesis loss is introduced, <img id="CUSTOM-CHARACTER-00024" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso </sub>(<figref idref="DRAWINGS">FIG. <b>3</b></figref>). To compute it, at least one embodiment uses a synthesized image I<sub>g</sub>'s bounding box A<sub>g </sub>and crop (in a differentiable manner) an image l<sub>c</sub>, using an expanded/dilated version of A<sub>g </sub>with a unit aspect ratio such that context around object is considered. At least one embodiment resizes l<sub>c </sub>to 256&#xd7;256. In at least one embodiment, this creates effect of magnifying/zooming into smaller regions of synthesized images. In at least one embodiment, to ensure that a high-quality car is indeed synthesized faithfully in smaller l<sub>c </sub>window, <img id="CUSTOM-CHARACTER-00025" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>c </sub>is passed, to a multi-scale object discriminator <img id="CUSTOM-CHARACTER-00026" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>. In at least one embodiment, real images input to <img id="CUSTOM-CHARACTER-00027" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso </sub>are images from source collection {I<sub>s</sub>}, also of size 256&#xd7;256. In at least one embodiment, multi-scale object synthesis loss, <img id="CUSTOM-CHARACTER-00028" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso </sub>is then given by:</p><p id="p-0087" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00029" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>=&#x2212;<img id="CUSTOM-CHARACTER-00030" he="2.46mm" wi="7.03mm" file="US20230004760A1-20230105-P00007.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<img id="CUSTOM-CHARACTER-00031" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>(<i>I</i><sub>c</sub>)],&#x2003;&#x2003;(2)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0088" num="0000">where <img id="CUSTOM-CHARACTER-00032" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>(I<sub>c</sub>) is realism score predicted by <img id="CUSTOM-CHARACTER-00033" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso </sub>for image crop I<sub>c</sub>.</p><p id="p-0089" num="0085">At least one embodiment trains S with single-object images {I<sub>s</sub>} acquired from the Internet, which do not necessarily come from final target domain. In at least one embodiment, there may be a domain gap between images synthesized by S and those from target domain. In at least one embodiment, this makes <img id="CUSTOM-CHARACTER-00034" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>, trained on images synthesized by S, perform sub-optimally on target domain. To address this, at least one embodiment introduces a target data adaptation module (<figref idref="DRAWINGS">FIG. <b>4</b></figref>), whose focus is to adapt S such that it can synthesize images closer to target data distribution. In at least one embodiment, it uses foreground and background appearance losses to supervise training of S, which make synthesized images look more like target domain. In at least one embodiment, it contains an object scale adaption block to match scale of synthesized objects to ones in target domain. At least one embodiment aligns synthesized data to distribution of target dataset without using any bounding box annotations.</p><p id="p-0090" num="0086">At least one embodiment computes foreground appearance loss <img id="CUSTOM-CHARACTER-00035" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>fg </sub><b>406</b> via a patch-based discriminator D<sub>fg </sub><b>402</b>. In at least one embodiment, it takes synthesized image-annotation pair <img id="CUSTOM-CHARACTER-00036" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>I<sub>g</sub>, A<sub>g</sub><img id="CUSTOM-CHARACTER-00037" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/> as input and predicts a 2D class probability map, a &#x109;<sub>fg</sub>=D<sub>fg</sub>(I<sub>g</sub>), where &#x109;<sub>fg </sub>is patch-wise realism score for synthesized image I<sub>g</sub>. In at least one embodiment, foreground appearance loss (<img id="CUSTOM-CHARACTER-00038" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>fg</sub>) <b>406</b> for synthesis network S is given by:</p><p id="p-0091" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00039" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>fg</sub>=&#x2212;<img id="CUSTOM-CHARACTER-00040" he="2.79mm" wi="7.03mm" file="US20230004760A1-20230105-P00008.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<i>&#x109;</i><sub>fg</sub>]*<i>M</i><sub>g</sub>,&#x2003;&#x2003;(3)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0092" num="0000">where * indicates element-wise multiplication. In at least one embodiment, M<sub>g </sub>masks a loss to be computed only for foreground region of synthesized image. In at least one embodiment, real images used to train this discriminator come from target collection {I<sub>t</sub>}. At least one embodiment acquires them by using pre-trained object detection network <img id="CUSTOM-CHARACTER-00041" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> created during first phase of uncoupled training. Specifically, at least one embodiment infers bounding boxes for images in target dataset {I<sub>t</sub>} using pre-trained <img id="CUSTOM-CHARACTER-00042" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> and selects a subset of images {P<sub>t</sub>} with detection confidence &#x3e;0.9. In at least one embodiment, this forms an image-annotation pair <img id="CUSTOM-CHARACTER-00043" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>P<sub>t</sub>, M<sub>t</sub><img id="CUSTOM-CHARACTER-00044" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/>, where M<sub>t </sub>is corresponding binary mask for detected foreground objects in image P<sub>t</sub>. In at least one embodiment, loss for training discriminator D<sub>fg </sub>is computed as:</p><p id="p-0093" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00045" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>d</sub><sub><sub2>fg</sub2></sub>=&#x2212;<img id="CUSTOM-CHARACTER-00046" he="2.46mm" wi="6.69mm" file="US20230004760A1-20230105-P00009.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<i>c</i><sub>t</sub>]*<i>M</i><sub>t</sub>+<img id="CUSTOM-CHARACTER-00047" he="2.46mm" wi="7.03mm" file="US20230004760A1-20230105-P00010.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<i>&#x109;</i><sub>fg</sub>]*<i>M</i><sub>g</sub>,&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0094" num="0000">where c<sub>t </sub>is patch-wise classification score predicted by D<sub>fg </sub>for a real image.</p><p id="p-0095" num="0087">In at least one embodiment, background discriminator D<sub>bg </sub><b>404</b> is also a patch-based discriminator, which predicts realism of background region in I<sub>g </sub>with respect to target data {I<sub>t</sub>}. At least one embodiment computes background mask by inverting binary foreground mask M<sub>g </sub>of synthesized image I<sub>g</sub>. In at least one embodiment, background appearance loss <b>408</b> for training synthesis network, S is given by</p><p id="p-0096" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00048" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>bg</sub>=&#x2212;<img id="CUSTOM-CHARACTER-00049" he="2.46mm" wi="7.03mm" file="US20230004760A1-20230105-P00011.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<i>&#x109;</i><sub>bg</sub>]*(1&#x2212;<i>M</i><sub>g</sub>),&#x2003;&#x2003;(5)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0097" num="0000">where &#x109;<sub>bg</sub>=D<sub>bg </sub>(I<sub>g</sub>) predicts patch-wise realism score for background region of generated image.</p><p id="p-0098" num="0088">In at least one embodiment, real images used to train D<sub>bg </sub>are obtained by identifying patches in target collection {I<sub>t</sub>} where no foreground objects are present. To this end, at least one embodiment leverages pre-trained image classification networks and class-specific gradient based localization maps using Grad-CAM [47]. At least one embodiment identifies patches {I<sub>t</sub><sup>b</sup>} in target collection {I<sub>t</sub>} that do not contain object of interest. In at least one embodiment, they serve as real samples of background images used to train D<sub>bg</sub>. In at least one embodiment, loss for training D<sub>bg </sub>is computed as:</p><p id="p-0099" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00050" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>d</sub><sub><sub2>bg</sub2></sub>=&#x2212;<img id="CUSTOM-CHARACTER-00051" he="2.12mm" wi="5.67mm" file="US20230004760A1-20230105-P00012.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<i>c</i><sub>t</sub><sup>b</sup>]+<img id="CUSTOM-CHARACTER-00052" he="2.46mm" wi="7.03mm" file="US20230004760A1-20230105-P00013.TIF" alt="custom-character" img-content="character" img-format="tif"/>[<i>&#x109;</i><sub>bg</sub>]*(1&#x2212;<i>M</i><sub>g</sub>),&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0100" num="0000">where c<sub>t</sub><sup>b </sup>is patch-wise classification score predicted by D<sub>bg </sub>for a real image.</p><p id="p-0101" num="0089">In at least one embodiment, with <img id="CUSTOM-CHARACTER-00053" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>fg </sub>and <img id="CUSTOM-CHARACTER-00054" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>bg </sub>only components of S that affect its overall style and appearance are updated. In at least one embodiment, these include (a) parameters of MLP blocks (<figref idref="DRAWINGS">FIG. <b>5</b></figref>), which modify foreground and background style codes and (b) weights of its 2D convolution layers.</p><p id="p-0102" num="0090">In at least one embodiment, optimal set of object depth parameters that should be input into S to achieve best performance on target domain via a module. To this end, at least one embodiment uses S to synthesize image-annotation pairs <img id="CUSTOM-CHARACTER-00055" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>I<sub>g</sub><sup>d</sup><sup><sub2>r</sub2></sup>, A<sub>g</sub><sup>d</sup><sup><sub2>r</sub2></sup><img id="CUSTOM-CHARACTER-00056" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/> for multiple different object depth ranges &#x3b8;={d<sub>r</sub>} and also obtain {&#x3b1;<sup>d</sup><sup><sub2>r</sub2></sup>}, which is collection of cropped synthesized objects <b>410</b>. In at least one embodiment, depth d is one of components of location parameter l used to specify synthesized object's pose. At least one embodiment samples depth values uniformly within each depth range d<sub>r</sub>. For each depth range d<sub>r</sub>, at least one embodiment trains a detector F<sup>d</sup><sup><sub2>r </sub2></sup>with its corresponding synthetic data <img id="CUSTOM-CHARACTER-00057" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00002.TIF" alt="custom-character" img-content="character" img-format="tif"/>I<sub>g</sub><sup>d</sup><sup><sub2>r</sub2></sup>, A<sub>g</sub><sup>d</sup><sup><sub2>r</sub2></sup><img id="CUSTOM-CHARACTER-00058" he="3.22mm" wi="0.68mm" file="US20230004760A1-20230105-P00003.TIF" alt="custom-character" img-content="character" img-format="tif"/>. At least one embodiment uses F<sup>d</sup>r to detect all object bounding boxes {B<sup>d</sup><sup><sub2>r</sub2></sup>} in target collection {I<sub>t</sub>}, which have confidence &#x3e;0.85. At least one embodiment computes optimal input depth interval for synthesis as:</p><p id="p-0103" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msub>       <mi>d</mi>       <mi>o</mi>      </msub>      <mo>=</mo>      <mrow>       <mi>arg</mi>       <munder>        <mi>min</mi>        <msub>         <mi>d</mi>         <mi>i</mi>        </msub>       </munder>              <mrow>        <mo>(</mo>        <mrow>         <mrow>          <mi>&#x3a6;</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <msup>           <mi>&#x3b1;</mi>           <msub>            <mi>d</mi>            <mi>i</mi>           </msub>          </msup>          <mo>)</mo>         </mrow>         <mo>,</mo>         <mtext>&#x205f;</mtext>         <mrow>          <mi>&#x3a6;</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <msup>           <mi>&#x3b2;</mi>           <msub>            <mi>d</mi>            <mi>i</mi>           </msub>          </msup>          <mo>)</mo>         </mrow>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>     <mo>,</mo>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>7</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0104" num="0000">where &#x3a6; computes conv5 features of a pre-trained image classification VGG) network and <img id="CUSTOM-CHARACTER-00059" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00014.TIF" alt="custom-character" img-content="character" img-format="tif"/> <b>412</b> is a Sinkhorn distance between two feature distributions.</p><p id="p-0105" num="0091">At least one embodiment adopts a stage-wise training strategy to learn modules of SSOD.</p><p id="p-0106" num="0092">Uncoupled Training. At least one embodiment first pre-trains S and <img id="CUSTOM-CHARACTER-00060" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> separately. At least one embodiment trains generator S, supervised by discriminators <img id="CUSTOM-CHARACTER-00061" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn </sub>and <img id="CUSTOM-CHARACTER-00062" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>, using source collection {I<sub>s</sub>} only. At least one embodiment synthesizes images with S containing 1 or 2 objects and compute their labels. At least one embodiment uses them, along with real background regions extracted from target data [I<sub>t</sub><sup>b</sup>] using Grad-CAM to pre-train <img id="CUSTOM-CHARACTER-00063" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>.</p><p id="p-0107" num="0093">Coupled Training. In at least one embodiment, during this stage all networks are tightly coupled together in an end-to-end manner and fine-tuned together with source {I<sub>s</sub>} and target {I<sub>t</sub>} collections, and data synthesized by S. At least one embodiment adapts SSOD to target data in this stage. At least one embodiment uses a GAN-like training strategy and alternatively trains S in one iteration and all other networks <img id="CUSTOM-CHARACTER-00064" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn</sub>, <img id="CUSTOM-CHARACTER-00065" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>, <img id="CUSTOM-CHARACTER-00066" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>, <img id="CUSTOM-CHARACTER-00067" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>fg </sub>and <img id="CUSTOM-CHARACTER-00068" he="2.79mm" wi="2.46mm" file="US20230004760A1-20230105-P00005.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>bg </sub>in next one. In at least one embodiment, S is supervised by all other modules and total loss for training it is:</p><p id="p-0108" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><img id="CUSTOM-CHARACTER-00069" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>syn</sub>=&#x3bb;<sub>scn</sub><img id="CUSTOM-CHARACTER-00070" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>scn</sub>+&#x3bb;<sub>mso</sub><img id="CUSTOM-CHARACTER-00071" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>+<img id="CUSTOM-CHARACTER-00072" he="2.46mm" wi="3.89mm" file="US20230004760A1-20230105-P00015.TIF" alt="custom-character" img-content="character" img-format="tif"/><img id="CUSTOM-CHARACTER-00073" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>det</sub>+&#x3bb;<sub>fg</sub><img id="CUSTOM-CHARACTER-00074" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>fg</sub>+&#x3bb;<sub>bg</sub><img id="CUSTOM-CHARACTER-00075" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>bg</sub>,<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0109" num="0000">where {&#x3bb;<sub>i</sub>} are relative weights of various losses. At least one embodiment finds optimal set of input object depth parameters for S that align synthesized data further to target distribution.</p><p id="p-0110" num="0094">At least one embodiment validates SSOD for task of detecting &#x201c;car&#x201d; objects in outdoor driving scenes. At least one embodiment assesses quantitative performance using standard mean Average Precision (mAP) metric at an Intersection-Over-Union (IOU) of 0.5.</p><p id="p-0111" num="0095">At least one embodiment uses three datasets containing images of car objects to train and evaluate SSOD: (a) Compcars dataset as single-car source dataset and (b) two multi-car KITTI and Cityscapes target datasets containing outdoor driving scenes. During training, At least one embodiment does not use bounding box annotations for any of these datasets.</p><p id="p-0112" num="0096">Compcars. In at least one embodiment, Compcars dataset is an in-the-wild collection of 137,000 images with one car per image. At least one embodiment provides good diversity in car appearances, orientations and moderate diversity in scales. At least one embodiment uses it as source image collection {I<sub>s</sub>} to train a controllable viewpoint-aware synthesis network S.</p><p id="p-0113" num="0097">KITTI. In at least one embodiment, KITTI dataset contains 375&#xd7;1242 sized outdoor driving scenes with zero or multiple cars per image with heavy occlusions, reflections and extreme lighting. At least one embodiment uses it as one of target datasets {I<sub>t</sub>}. At least one embodiment splits it into disjoint training (6000 unlabeled images) and validation (1000 labeled images) sets. mAP for Easy, Medium and Hard and all cases of its validation set are reported.</p><p id="p-0114" num="0098">Cityscapes. Similarly to KITTI, at least one embodiment evaluates SSOD on challenging Cityscapes outdoor driving target dataset with images of size 512&#xd7;1024. At least one embodiment uses a version containing bounding box annotations. At least one embodiment splits it into disjoint training (3000 unlabeled images) and validation (1000 labeled images) sets.</p><p id="p-0115" num="0099">At least one embodiment conducts ablation studies on KITTI dataset to evaluate contribution of each individual component of SSOD (Table 1). At least one embodiment evaluates object detection performance using mAP, and computes SinkHorn, KID and FID scores to compare appearance of synthesized foreground objects to objects in KITTI.</p><p id="p-0116" num="0100">Uncoupled Training. At least one embodiment evaluates efficacy of simply training object detector <img id="CUSTOM-CHARACTER-00076" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/> with images synthesized by S, when each of these networks is trained separately without being coupled together. At least one embodiment compares original BlockGAN with an image resolution of 64&#xd7;64 to two of its variants with image resolutions 128&#xd7;128 and 256&#xd7;256 that are trained. In at least one embodiment, results are shown in top three rows of Table 1. In at least one embodiment, they indicate that synthesized foreground objects at higher resolutions improve Sinkhorn, KID and FID metrics, which, in turn, translate to corresponding gains in object detector's performance as well. In at least one embodiment, significant improvements in visual quality achieved by higher resolution synthesis are also evident.</p><p id="p-0117" num="0101">Coupled Training. In at least one embodiment, for at least one embodiment, performance of variants of SSOD trained with tightly coupled synthesis (S) and object detection (<img id="CUSTOM-CHARACTER-00077" he="3.22mm" wi="2.79mm" file="US20230004760A1-20230105-P00001.TIF" alt="custom-character" img-content="character" img-format="tif"/>) networks is evaluated. At least one embodiment evaluates four such variants of SSOD: (a) without target data appearance adaption losses (SSOD w/o L<sub>fg</sub>+L<sub>bg</sub>); (b) without multi-scale object synthesis loss <img id="CUSTOM-CHARACTER-00078" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso </sub>(SSOD w/o <img id="CUSTOM-CHARACTER-00079" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>); (c) without adaptation to target dataset's object scales (SSOD w/o OSA); and (d) full SSOD model (SSOD-full). At least one embodiment of SSOD trained with a coupled detector (bottom four rows of Table 1) performs significantly better than those without (top three rows of Table 1). This result quantitatively verifies usefulness of at least one embodiment of a proposed end-to-end framework, which adapts synthesis network S to both downstream task of object detection as well as to target dataset's distribution. Good performance is achieved by an embodiment of a full SSOD model with highest mAP score of 68.4 on the KITTI dataset. In at least one embodiment, removing each of an individual proposed modules for target data appearance adaptation (SSOD w/o L<sub>fg</sub>+L<sub>bg</sub>), target object scale adaptation (SSOD w/o OSA) and multi-object scale synthesis (SSOD w/o <img id="CUSTOM-CHARACTER-00080" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso</sub>) from SSOD-Full result in a reduction in its performance, with target data appearance adaption model affecting SSOD's detection accuracy most.</p><p id="p-0118" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="28pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="28pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="35pt" align="center"/><colspec colname="8" colwidth="21pt" align="center"/><colspec colname="9" colwidth="28pt" align="center"/><thead><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row><row><entry/><entry/><entry/><entry/><entry/><entry/><entry>Sinkhorn</entry><entry>KID</entry><entry>FID</entry></row><row><entry>Method</entry><entry>Coupled</entry><entry>Easy &#x2191;</entry><entry>Medium &#x2191;</entry><entry>Hard &#x2191;</entry><entry>All &#x2191;</entry><entry>[8] &#x2193;</entry><entry>[4] &#x2193;</entry><entry>[18] &#x2193;</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="9"><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="28pt" align="char" char="."/><colspec colname="4" colwidth="35pt" align="char" char="."/><colspec colname="5" colwidth="28pt" align="char" char="."/><colspec colname="6" colwidth="21pt" align="char" char="."/><colspec colname="7" colwidth="35pt" align="char" char="."/><colspec colname="8" colwidth="21pt" align="char" char="."/><colspec colname="9" colwidth="28pt" align="char" char="."/><tbody valign="top"><row><entry>BlockGAN [38] 64</entry><entry>X</entry><entry>65.1</entry><entry>48.3</entry><entry>40.5</entry><entry>51.3</entry><entry>0.486</entry><entry>0.048</entry><entry>8.3</entry></row><row><entry>BlockGAN [38] 128</entry><entry>X</entry><entry>69.4</entry><entry>49.9</entry><entry>44.2</entry><entry>54.5</entry><entry>0.483</entry><entry>0.046</entry><entry>7.8</entry></row><row><entry>BlockGAN [38] 256</entry><entry>X</entry><entry>72.7</entry><entry>52.1</entry><entry>44.8</entry><entry>56.5</entry><entry>0.481</entry><entry>0.045</entry><entry>7.61</entry></row><row><entry>SSOD w/o&#x2009;<img id="CUSTOM-CHARACTER-00081" he="2.46mm" wi="1.78mm" file="US20230004760A1-20230105-P00016.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009;<sub>fg </sub>+&#x2009;<img id="CUSTOM-CHARACTER-00082" he="2.46mm" wi="1.78mm" file="US20230004760A1-20230105-P00016.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009;<sub>bg</sub></entry><entry>&#x2713;</entry><entry>74.7</entry><entry>59.3</entry><entry>52.7</entry><entry>62.2</entry><entry>0.475</entry><entry>0.042</entry><entry>7.22</entry></row><row><entry>SSOD w/o&#x2009;<img id="CUSTOM-CHARACTER-00083" he="2.46mm" wi="1.78mm" file="US20230004760A1-20230105-P00016.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009;<sub>mso</sub></entry><entry>&#x2713;</entry><entry>78.3</entry><entry>65.6</entry><entry>53.5</entry><entry>65.8</entry><entry>0.471</entry><entry>0.040</entry><entry>6.86</entry></row><row><entry>SSOD w/o OSA</entry><entry>&#x2713;</entry><entry>76.1</entry><entry>61.3</entry><entry>50.9</entry><entry>62.7</entry><entry>0.475</entry><entry>0.042</entry><entry>7.23</entry></row><row><entry>SSOD-Full</entry><entry>&#x2713;</entry><entry>80.8</entry><entry>68.1</entry><entry>56.6</entry><entry>68.4</entry><entry>0.465</entry><entry>0.037</entry><entry>6.37</entry></row><row><entry namest="1" nameend="9" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0119" num="0102">Table 1 shows an ablation study on KITTI, in at least one embodiment. Rows 1-3: BlockGAN in S trained without coupling to detector at different image resolutions; rows 4-6: different ablated versions of SSOD each with one component removed; and row 7: full SSOD model. Columns 1-3: mAP value at IOU 0.5 for KITTI's Easy, Medium, Hard and All cases; and columns 4-6: Sinkhorn, KID, and FID scores to compare object regions in synthesized and real-world KITTI images.</p><p id="p-0120" num="0103">Qualitative Analysis. In at least one embodiment, an effect of proposed losses are qualitatively evaluated on images synthesized by S. In at least one embodiment, by adding target data appearance adaptation losses (L<sub>fg</sub>+L<sub>bg</sub>), images match appearance of target distribution. In at least one embodiment, adding multi-scale object synthesis loss <img id="CUSTOM-CHARACTER-00084" he="2.46mm" wi="2.12mm" file="US20230004760A1-20230105-P00004.TIF" alt="custom-character" img-content="character" img-format="tif"/><sub>mso </sub>leads to an improved result (high visual quality and appearance alignment to target distribution). In at least one embodiment, these qualitative results corroborate with quantitative counterparts: Sinkhorn, KID and FID metrics in Table 2.</p><p id="p-0121" num="0104">On KITTI dataset, at least one embodiment is compared to several alternative methods capable of training object detectors without requiring bounding box annotations on real-world datasets. Primary among them is Wetectron&#x2014;a high-performing alternative method, which trains object detectors with unlabeled image collections. It also does not use 3D CAD models. Wetectron is trained with a combination of Compcars and KITTI's training set; use image-level labels for presence/absence of object; get object proposals from Edgeboxes; and evaluate it on KITTI's validation set. Results are shown in Table 2. In at least one embodiment, compared to Wetectron (mAP of 38.1 for All), SSOD (mAP of 68.4 for All) has &#x2dc;2&#xd7; better detection accuracy. In at least one embodiment, SSOD's superior performance versus Wetectron's results from its use of a pose-aware synthesizer to generate data for training object detectors. In at least one embodiment, GAN not only improves training data's diversity, but also optimally adapts to task of object detection on target data.</p><p id="p-0122" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><thead><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row><row><entry/><entry>3D </entry><entry/><entry/><entry/><entry/></row><row><entry>Method</entry><entry>Assets</entry><entry>Easy&#x2191; </entry><entry>Medium&#x2191;</entry><entry>Hard&#x2191;</entry><entry>All&#x2191;</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>Wetectron [43]</entry><entry>x</entry><entry>51.3 </entry><entry>37.9</entry><entry>25.1</entry><entry>38.1</entry></row><row><entry>SSOD-Full (ours)</entry><entry>x</entry><entry>80.8 </entry><entry>68.1</entry><entry>56.6</entry><entry>68.4</entry></row><row><entry>Meta-Sim* [25]</entry><entry>&#x2713;</entry><entry>65.9 </entry><entry>66.3</entry><entry>66.0</entry><entry>66.0</entry></row><row><entry>Meta-Sim2 [9]</entry><entry>&#x2713;</entry><entry>67.0 </entry><entry>67.0</entry><entry>66.2</entry><entry>66.7</entry></row><row><entry namest="1" nameend="6" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0123" num="0105">Table 2 illustrates object detection performance (mAP at IOU 0.5) on KITTI of SSOD and various SOTA methods.</p><p id="p-0124" num="0106">At least one embodiment is compared to SOTA rendering-based methods Meta-Sim and Meta-Sim2. At least one embodiment trains object detectors purely using synthetically rendered data and evaluate on unlabeled real-world datasets. At least one embodiment requires large libraries of 3D CAD models and hence use strong geometric priors. In contrast, at least one embodiment of SSOD does not use any 3D CAD assets. At least one embodiment's synthesis network can be viewed as a controllable renderer learnt purely from object image collections without geometric priors. In at least one embodiment, without using any strong geometric priors, SSOD surpasses both Meta-Sim and Meta-Sim2 for Easy, Medium and All cases in KITTI (Table 2). In at least one embodiment, even without using strong 3D assets and by merely learning from image collections, SSOD can compete with significantly more strongly supervised rendering-based methods.</p><p id="p-0125" num="0107">An advantage of at least one embodiment is that it can adapt to different target datasets. Performance of at least one embodiment is evaluated on Cityscapes. At least one embodiment is trained on Compcars and Cityscapes; its ablated versions with specific individual components removed; BlockGAN in S not coupled with detector and trained with Compcars only; and competing Wetectron method trained on Compcars and Cityscapes (Table 3). In at least one embodiment, similarly to KITTI, for Cityscapes too, SSOD-Full achieves best performance (mAP of 31.3). In at least one embodiment, removing L<sub>fg</sub>+L<sub>bg</sub>, which help adapt SSOD to Cityscapes, affects its performance significantly. At least one embodiment of SSOD jointly trained with detector performs better than uncoupled BlockGAN in S. In at least one embodiment, SSOD-Full performs nearly 2&#xd7; better than Wetectron (mAP of 18.2).</p><p id="p-0126" num="0108"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows at least one embodiment of SSOD's precision-recall curves on KITTI for IOU thresholds: 0.5 (solid curves) and 0.45 (dashed curves). In at least one embodiment, with a lower IOU threshold of 0.45 SSOD's mAP improves for all cases: 80.8 to 83.5 (Easy), 68.1 to 73.2 (Medium) and 56.6 and 63.6 (Hard). In at least one embodiment, this indicates that improving precision of synthesized objects' bounding boxes labels can lead to further improvements in SSOD's performance.</p><p id="p-0127" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="98pt" align="left"/><colspec colname="2" colwidth="21pt" align="center"/><colspec colname="3" colwidth="77pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry>Method</entry><entry>mAP&#x2191;</entry><entry>Sinkhorn&#x2193;</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Wetectron [33]</entry><entry>18.2</entry><entry>0.549</entry></row><row><entry/><entry>BlockGAN [38] 256</entry><entry>22.7</entry><entry>0.531</entry></row><row><entry/><entry>SSOD w/o &#x2009;<img id="CUSTOM-CHARACTER-00085" he="2.46mm" wi="1.78mm" file="US20230004760A1-20230105-P00017.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009;<sub>fg </sub>+ &#x2009;<img id="CUSTOM-CHARACTER-00086" he="2.46mm" wi="1.78mm" file="US20230004760A1-20230105-P00017.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009;<sub>bg</sub></entry><entry>27.2</entry><entry>0.520</entry></row><row><entry/><entry>SSOD w/o &#x2009;<img id="CUSTOM-CHARACTER-00087" he="2.46mm" wi="1.78mm" file="US20230004760A1-20230105-P00017.TIF" alt="custom-character" img-content="character" img-format="tif"/> &#x2009;<sub>mso</sub></entry><entry>28.5</entry><entry>0.515</entry></row><row><entry/><entry>SSOD w/o OSA</entry><entry>29.1</entry><entry>0.514</entry></row><row><entry/><entry>SSOD-Full</entry><entry>31.3</entry><entry>0.506</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0128" num="0109">Table 3 illustrates Performance on Cityscapes, in at least one embodiment. In at least one embodiment, object detection performance (mAP at IOU 0.5) and synthetic data quality analysis (Sinkorn) on Cityscapes is shown.</p><p id="p-0129" num="0110">At least one embodiment leverages image synthesis via controllable GANs for learning object detectors in a self-supervised manner with unlabelled image collections. At least one embodiment shows that huge gains in detection accuracy can be achieved by using generative image synthesis for this task. In at least one embodiment, controllable GANs offer ability to synthesize data with great diversity and realism to better train object detectors and also flexibility to adapt them optimally via end-to-end training to different downstream detection tasks and target operating domains. In at least one embodiment, GANs can be trained with cheaply and abundantly available image collections on the Internet, hence, offer a very attractive solution.</p><p id="p-0130" num="0111"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example of a process that, as a result of being performed by a computer system trains an object detection neural network to locate an object in an image, in at least one embodiment. In at least one embodiment, an object detection neural network includes a controllable GAN, an object detection network, and one or more discriminative networks that produce one or more losses. In at least one embodiment, object detection neural network includes one or more neural networks configured as described above. In at least one embodiment, object detection neural network can be implemented with one or more computer systems having one or more processors such as those described below. In at least one embodiment, as a result of executing instructions stored on computer-readable memory, on one or more processors cause a computer system to perform operations described below.</p><p id="p-0131" num="0112">In at least one embodiment, at block <b>702</b>, computer system trains a first neural network to generate images of an object using unlabeled source images. In at least one embodiment, first neural network is a controllable GAN. In at least one embodiment, unlabeled source images are images that lack a bounding box or other designation of position of object. In at least one embodiment, source images are images of automobiles. In at least one embodiment, first neural network takes a pose of an object as input. In at least one embodiment, a pose of an object is a three dimensional position in space and an orientation of an object. In at least one embodiment, orientation can be expressed as a set of angles representing rotation, elevation, and heading (or pitch, roll, and yaw).</p><p id="p-0132" num="0113">In at least one embodiment, said generated image is provided <b>704</b> to a second neural network that attempts to identify and locate a generated object. In at least one embodiment, at block <b>706</b> second neural network detects and locates an object with a bounding box.</p><p id="p-0133" num="0114">In at least one embodiment, at block <b>708</b>, computer system determines a loss based on a difference between location identified by second neural network and pose specified to first neural network. In at least one embodiment, at block <b>710</b>, losses used to train second neural network. In at least one embodiment, computer system uses a set of discriminative networks, which train first neural network towards generating images closer to a desired target data distribution in terms of overall image appearance and scale of objects.</p><p id="p-0134" num="0115">In at least one embodiment, at block <b>7012</b>, a computer system trains a first neural network to learn a target distribution of objects using unlabeled target data. In at least one embodiment, a target data adaptation module produces a set of losses as described above that are used to train first network to match a target data distribution. In at least one embodiment, a target data distribution is defined by example of above unlabeled target data. In at least one embodiment, target data includes background images (that may include cars, pedestrians and other common objects) in a given environment.</p><p id="p-0135" num="0116">In at least one embodiment, at block <b>7014</b> computer system trains first network to synthesize an image of an object in a target environment in a specified pose. In at least one embodiment, an image is created by combining a generated image of an object and a generated target environment, and then projecting said combination to 2 dimensions.</p><heading id="h-0005" level="2">Inference and Training Logic</heading><p id="p-0136" num="0117"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref> illustrates inference and/or training logic <b>815</b> used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided below in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>.</p><p id="p-0137" num="0118">In at least one embodiment, inference and/or training logic <b>815</b> may include, without limitation, code and/or data storage <b>801</b> to store forward and/or output weight and/or input/output data, and/or other parameters to configure neurons or layers of a neural network trained and/or used for inferencing in aspects of one or more embodiments. In at least one embodiment, training logic <b>815</b> may include, or be coupled to code and/or data storage <b>801</b> to store graph code or other software to control timing and/or order, in which weight and/or other parameter information is to be loaded to configure, logic, including integer and/or floating point units (collectively, arithmetic logic units (ALUs)). In at least one embodiment, code, such as graph code, loads weight or other parameter information into processor ALUs based on an architecture of a neural network to which such code corresponds. In at least one embodiment, code and/or data storage <b>801</b> stores weight parameters and/or input/output data of each layer of a neural network trained or used in conjunction with one or more embodiments during forward propagation of input/output data and/or weight parameters during training and/or inferencing using aspects of one or more embodiments. In at least one embodiment, any portion of code and/or data storage <b>801</b> may be included with other on-chip or off-chip data storage, including a processor's L1, L2, or L3 cache or system memory.</p><p id="p-0138" num="0119">In at least one embodiment, any portion of code and/or data storage <b>801</b> may be internal or external to one or more processors or other hardware logic devices or circuits. In at least one embodiment, code and/or code and/or data storage <b>801</b> may be cache memory, dynamic randomly addressable memory (&#x201c;DRAM&#x201d;), static randomly addressable memory (&#x201c;SRAM&#x201d;), non-volatile memory (e.g., flash memory), or other storage. In at least one embodiment, a choice of whether code and/or code and/or data storage <b>801</b> is internal or external to a processor, for example, or comprising DRAM, SRAM, flash or some other storage type may depend on available storage on-chip versus off-chip, latency requirements of training and/or inferencing functions being performed, batch size of data used in inferencing and/or training of a neural network, or some combination of these factors.</p><p id="p-0139" num="0120">In at least one embodiment, inference and/or training logic <b>815</b> may include, without limitation, a code and/or data storage <b>805</b> to store backward and/or output weight and/or input/output data corresponding to neurons or layers of a neural network trained and/or used for inferencing in aspects of one or more embodiments. In at least one embodiment, code and/or data storage <b>805</b> stores weight parameters and/or input/output data of each layer of a neural network trained or used in conjunction with one or more embodiments during backward propagation of input/output data and/or weight parameters during training and/or inferencing using aspects of one or more embodiments. In at least one embodiment, training logic <b>815</b> may include, or be coupled to code and/or data storage <b>805</b> to store graph code or other software to control timing and/or order, in which weight and/or other parameter information is to be loaded to configure, logic, including integer and/or floating point units (collectively, arithmetic logic units (ALUs)).</p><p id="p-0140" num="0121">In at least one embodiment, code, such as graph code, causes the loading of weight or other parameter information into processor ALUs based on an architecture of a neural network to which such code corresponds. In at least one embodiment, any portion of code and/or data storage <b>805</b> may be included with other on-chip or off-chip data storage, including a processor's L1, L2, or L3 cache or system memory. In at least one embodiment, any portion of code and/or data storage <b>805</b> may be internal or external to one or more processors or other hardware logic devices or circuits. In at least one embodiment, code and/or data storage <b>805</b> may be cache memory, DRAM, SRAM, non-volatile memory (e.g., flash memory), or other storage. In at least one embodiment, a choice of whether code and/or data storage <b>805</b> is internal or external to a processor, for example, or comprising DRAM, SRAM, flash memory or some other storage type may depend on available storage on-chip versus off-chip, latency requirements of training and/or inferencing functions being performed, batch size of data used in inferencing and/or training of a neural network, or some combination of these factors.</p><p id="p-0141" num="0122">In at least one embodiment, code and/or data storage <b>801</b> and code and/or data storage <b>805</b> may be separate storage structures. In at least one embodiment, code and/or data storage <b>801</b> and code and/or data storage <b>805</b> may be a combined storage structure. In at least one embodiment, code and/or data storage <b>801</b> and code and/or data storage <b>805</b> may be partially combined and partially separate. In at least one embodiment, any portion of code and/or data storage <b>801</b> and code and/or data storage <b>805</b> may be included with other on-chip or off-chip data storage, including a processor's L1, L2, or L3 cache or system memory.</p><p id="p-0142" num="0123">In at least one embodiment, inference and/or training logic <b>815</b> may include, without limitation, one or more arithmetic logic unit(s) (&#x201c;ALU(s)&#x201d;) <b>810</b>, including integer and/or floating point units, to perform logical and/or mathematical operations based, at least in part on, or indicated by, training and/or inference code (e.g., graph code), a result of which may produce activations (e.g., output values from layers or neurons within a neural network) stored in an activation storage <b>820</b> that are functions of input/output and/or weight parameter data stored in code and/or data storage <b>801</b> and/or code and/or data storage <b>805</b>. In at least one embodiment, activations stored in activation storage <b>820</b> are generated according to linear algebraic and or matrix-based mathematics performed by ALU(s) <b>810</b> in response to performing instructions or other code, wherein weight values stored in code and/or data storage <b>805</b> and/or data storage <b>801</b> are used as operands along with other values, such as bias values, gradient information, momentum values, or other parameters or hyperparameters, any or all of which may be stored in code and/or data storage <b>805</b> or code and/or data storage <b>801</b> or another storage on or off-chip.</p><p id="p-0143" num="0124">In at least one embodiment, ALU(s) <b>810</b> are included within one or more processors or other hardware logic devices or circuits, whereas in another embodiment, ALU(s) <b>810</b> may be external to a processor or other hardware logic device or circuit that uses them (e.g., a co-processor). In at least one embodiment, ALUs <b>810</b> may be included within a processor's execution units or otherwise within a bank of ALUs accessible by a processor's execution units either within same processor or distributed between different processors of different types (e.g., central processing units, graphics processing units, fixed function units, etc.). In at least one embodiment, code and/or data storage <b>801</b>, code and/or data storage <b>805</b>, and activation storage <b>820</b> may share a processor or other hardware logic device or circuit, whereas in another embodiment, they may be in different processors or other hardware logic devices or circuits, or some combination of same and different processors or other hardware logic devices or circuits. In at least one embodiment, any portion of activation storage <b>820</b> may be included with other on-chip or off-chip data storage, including a processor's L1, L2, or L3 cache or system memory. Furthermore, inferencing and/or training code may be stored with other code accessible to a processor or other hardware logic or circuit and fetched and/or processed using a processor's fetch, decode, scheduling, execution, retirement and/or other logical circuits.</p><p id="p-0144" num="0125">In at least one embodiment, activation storage <b>820</b> may be cache memory, DRAM, SRAM, non-volatile memory (e.g., flash memory), or other storage. In at least one embodiment, activation storage <b>820</b> may be completely or partially within or external to one or more processors or other logical circuits. In at least one embodiment, a choice of whether activation storage <b>820</b> is internal or external to a processor, for example, or comprising DRAM, SRAM, flash memory or some other storage type may depend on available storage on-chip versus off-chip, latency requirements of training and/or inferencing functions being performed, batch size of data used in inferencing and/or training of a neural network, or some combination of these factors.</p><p id="p-0145" num="0126">In at least one embodiment, inference and/or training logic <b>815</b> illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> may be used in conjunction with an application-specific integrated circuit (&#x201c;ASIC&#x201d;), such as a TensorFlow&#xae; Processing Unit from Google, an inference processing unit (IPU) from Graphcore&#x2122;, or a Nervana&#xae; (e.g., &#x201c;Lake Crest&#x201d;) processor from Intel Corp. In at least one embodiment, inference and/or training logic <b>815</b> illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> may be used in conjunction with central processing unit (&#x201c;CPU&#x201d;) hardware, graphics processing unit (&#x201c;GPU&#x201d;) hardware or other hardware, such as field programmable gate arrays (&#x201c;FPGAs&#x201d;).</p><p id="p-0146" num="0127"><figref idref="DRAWINGS">FIG. <b>8</b>B</figref> illustrates inference and/or training logic <b>815</b>, according to at least one embodiment. In at least one embodiment, inference and/or training logic <b>815</b> may include, without limitation, hardware logic in which computational resources are dedicated or otherwise exclusively used in conjunction with weight values or other information corresponding to one or more layers of neurons within a neural network. In at least one embodiment, inference and/or training logic <b>815</b> illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> may be used in conjunction with an application-specific integrated circuit (ASIC), such as TensorFlow&#xae; Processing Unit from Google, an inference processing unit (IPU) from Graphcore&#x2122;, or a Nervana&#xae; (e.g., &#x201c;Lake Crest&#x201d;) processor from Intel Corp. In at least one embodiment, inference and/or training logic <b>815</b> illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> may be used in conjunction with central processing unit (CPU) hardware, graphics processing unit (GPU) hardware or other hardware, such as field programmable gate arrays (FPGAs). In at least one embodiment, inference and/or training logic <b>815</b> includes, without limitation, code and/or data storage <b>801</b> and code and/or data storage <b>805</b>, which may be used to store code (e.g., graph code), weight values and/or other information, including bias values, gradient information, momentum values, and/or other parameter or hyperparameter information. In at least one embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, each of code and/or data storage <b>801</b> and code and/or data storage <b>805</b> is associated with a dedicated computational resource, such as computational hardware <b>802</b> and computational hardware <b>806</b>, respectively. In at least one embodiment, each of computational hardware <b>802</b> and computational hardware <b>806</b> comprises one or more ALUs that perform mathematical functions, such as linear algebraic functions, only on information stored in code and/or data storage <b>801</b> and code and/or data storage <b>805</b>, respectively, result of which is stored in activation storage <b>820</b>.</p><p id="p-0147" num="0128">In at least one embodiment, each of code and/or data storage <b>801</b> and <b>805</b> and corresponding computational hardware <b>802</b> and <b>806</b>, respectively, correspond to different layers of a neural network, such that resulting activation from one storage/computational pair <b>801</b>/<b>802</b> of code and/or data storage <b>801</b> and computational hardware <b>802</b> is provided as an input to a next storage/computational pair <b>805</b>/<b>806</b> of code and/or data storage <b>805</b> and computational hardware <b>806</b>, in order to mirror a conceptual organization of a neural network. In at least one embodiment, each of storage/computational pairs <b>801</b>/<b>802</b> and <b>805</b>/<b>806</b> may correspond to more than one neural network layer. In at least one embodiment, additional storage/computation pairs (not shown) subsequent to or in parallel with storage/computation pairs <b>801</b>/<b>802</b> and <b>805</b>/<b>806</b> may be included in inference and/or training logic <b>815</b>.</p><heading id="h-0006" level="2">Neural Network Training and Deployment</heading><p id="p-0148" num="0129"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates training and deployment of a deep neural network, according to at least one embodiment. In at least one embodiment, untrained neural network <b>906</b> is trained using a training dataset <b>902</b>. In at least one embodiment, training framework <b>904</b> is a PyTorch framework, whereas in other embodiments, training framework <b>904</b> is a TensorFlow, Boost, Caffe, Microsoft Cognitive Toolkit/CNTK, MXNet, Chainer, Keras, Deeplearning4j, or other training framework. In at least one embodiment, training framework <b>904</b> trains an untrained neural network <b>906</b> and enables it to be trained using processing resources described herein to generate a trained neural network <b>908</b>. In at least one embodiment, weights may be chosen randomly or by pre-training using a deep belief network. In at least one embodiment, training may be performed in either a supervised, partially supervised, or unsupervised manner.</p><p id="p-0149" num="0130">In at least one embodiment, untrained neural network <b>906</b> is trained using supervised learning, wherein training dataset <b>902</b> includes an input paired with a desired output for an input, or where training dataset <b>902</b> includes input having a known output and an output of neural network <b>906</b> is manually graded. In at least one embodiment, untrained neural network <b>906</b> is trained in a supervised manner and processes inputs from training dataset <b>902</b> and compares resulting outputs against a set of expected or desired outputs. In at least one embodiment, errors are then propagated back through untrained neural network <b>906</b>. In at least one embodiment, training framework <b>904</b> adjusts weights that control untrained neural network <b>906</b>. In at least one embodiment, training framework <b>904</b> includes tools to monitor how well untrained neural network <b>906</b> is converging towards a model, such as trained neural network <b>908</b>, suitable to generating correct answers, such as in result <b>914</b>, based on input data such as a new dataset <b>912</b>. In at least one embodiment, training framework <b>904</b> trains untrained neural network <b>906</b> repeatedly while adjust weights to refine an output of untrained neural network <b>906</b> using a loss function and adjustment algorithm, such as stochastic gradient descent. In at least one embodiment, training framework <b>904</b> trains untrained neural network <b>906</b> until untrained neural network <b>906</b> achieves a desired accuracy. In at least one embodiment, trained neural network <b>908</b> can then be deployed to implement any number of machine learning operations.</p><p id="p-0150" num="0131">In at least one embodiment, untrained neural network <b>906</b> is trained using unsupervised learning, wherein untrained neural network <b>906</b> attempts to train itself using unlabeled data. In at least one embodiment, unsupervised learning training dataset <b>902</b> will include input data without any associated output data or &#x201c;ground truth&#x201d; data. In at least one embodiment, untrained neural network <b>906</b> can learn groupings within training dataset <b>902</b> and can determine how individual inputs are related to untrained dataset <b>902</b>. In at least one embodiment, unsupervised training can be used to generate a self-organizing map in trained neural network <b>908</b> capable of performing operations useful in reducing dimensionality of new dataset <b>912</b>. In at least one embodiment, unsupervised training can also be used to perform anomaly detection, which allows identification of data points in new dataset <b>912</b> that deviate from normal patterns of new dataset <b>912</b>.</p><p id="p-0151" num="0132">In at least one embodiment, semi-supervised learning may be used, which is a technique in which in training dataset <b>902</b> includes a mix of labeled and unlabeled data. In at least one embodiment, training framework <b>904</b> may be used to perform incremental learning, such as through transferred learning techniques. In at least one embodiment, incremental learning enables trained neural network <b>908</b> to adapt to new dataset <b>912</b> without forgetting knowledge instilled within trained neural network <b>908</b> during initial training.</p><p id="p-0152" num="0133">In at least one embodiment, training framework <b>904</b> is a framework processed in connection with a software development toolkit such as an OpenVINO (Open Visual Inference and Neural network Optimization) toolkit. In at least one embodiment, an OpenVINO toolkit is a toolkit such as those developed by Intel Corporation of Santa Clara, Calif.</p><p id="p-0153" num="0134">In at least one embodiment, OpenVINO is a toolkit for facilitating development of applications, specifically neural network applications, for various tasks and operations, such as human vision emulation, speech recognition, natural language processing, recommendation systems, and/or variations thereof. In at least one embodiment, OpenVINO supports neural networks such as convolutional neural networks (CNNs), recurrent and/or attention-based nueral networks, and/or various other neural network models. In at least one embodiment, OpenVINO supports various software libraries such as OpenCV, OpenCL, and/or variations thereof.</p><p id="p-0154" num="0135">In at least one embodiment, OpenVINO supports neural network models for various tasks and operations, such as classification, segmentation, object detection, face recognition, speech recognition, pose estimation (e.g., humans and/or objects), monocular depth estimation, image inpainting, style transfer, action recognition, colorization, and/or variations thereof.</p><p id="p-0155" num="0136">In at least one embodiment, OpenVINO comprises one or more software tools and/or modules for model optimization, also referred to as a model optimizer. In at least one embodiment, a model optimizer is a command line tool that facilitates transitions between training and deployment of neural network models. In at least one embodiment, a model optimizer optimizes neural network models for execution on various devices and/or processing units, such as a GPU, CPU, PPU, GPGPU, and/or variations thereof. In at least one embodiment, a model optimizer generates an internal representation of a model, and optimizes said model to generate an intermediate representation. In at least one embodiment, a model optimizer reduces a number of layers of a model. In at least one embodiment, a model optimizer removes layers of a model that are utilized for training. In at least one embodiment, a model optimizer performs various neural network operations, such as modifying inputs to a model (e.g., resizing inputs to a model), modifying a size of inputs of a model (e.g., modifying a batch size of a model), modifying a model structure (e.g., modifying layers of a model), normalization, standardization, quantization (e.g., converting weights of a model from a first representation, such as floating point, to a second representation, such as integer), and/or variations thereof.</p><p id="p-0156" num="0137">In at least one embodiment, OpenVINO comprises one or more software libraries for inferencing, also referred to as an inference engine. In at least one embodiment, an inference engine is a C++ library, or any suitable programming language library. In at least one embodiment, an inference engine is utilized to infer input data. In at least one embodiment, an inference engine implements various classes to infer input data and generate one or more results. In at least one embodiment, an inference engine implements one or more API functions to process an intermediate representation, set input and/or output formats, and/or execute a model on one or more devices.</p><p id="p-0157" num="0138">In at least one embodiment, OpenVINO provides various abilities for heterogeneous execution of one or more neural network models. In at least one embodiment, heterogeneous execution, or heterogeneous computing, refers to one or more computing processes and/or systems that utilize one or more types of processors and/or cores. In at least one embodiment, OpenVINO provides various software functions to execute a program on one or more devices. In at least one embodiment, OpenVINO provides various software functions to execute a program and/or portions of a program on different devices. In at least one embodiment, OpenVINO provides various software functions to, for example, run a first portion of code on a CPU and a second portion of code on a GPU and/or FPGA. In at least one embodiment, OpenVINO provides various software functions to execute one or more layers of a neural network on one or more devices (e.g., a first set of layers on a first device, such as a GPU, and a second set of layers on a second device, such as a CPU).</p><p id="p-0158" num="0139">In at least one embodiment, OpenVINO includes various functionality similar to functionalities associated with a CUDA programming model, such as various neural network model operations associated with frameworks such as TensorFlow, PyTorch, and/or variations thereof. In at least one embodiment, one or more CUDA programming model operations are performed using OpenVINO. In at least one embodiment, various systems, methods, and/or techniques described herein are implemented using OpenVINO.</p><heading id="h-0007" level="2">Data Center</heading><p id="p-0159" num="0140"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates an example data center <b>1000</b>, in which at least one embodiment may be used. In at least one embodiment, data center <b>1000</b> includes a data center infrastructure layer <b>1010</b>, a framework layer <b>1020</b>, a software layer <b>1030</b> and an application layer <b>1040</b>.</p><p id="p-0160" num="0141">In at least one embodiment, as shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, data center infrastructure layer <b>1010</b> may include a resource orchestrator <b>1012</b>, grouped computing resources <b>1014</b>, and node computing resources (&#x201c;node C.R.s&#x201d;) <b>1016</b>(<b>1</b>)-<b>1016</b>(N), where &#x201c;N&#x201d; represents a positive integer (which may be a different integer &#x201c;N&#x201d; than used in other figures). In at least one embodiment, node C.R.s <b>1016</b>(<b>1</b>)-<b>1016</b>(N) may include, but are not limited to, any number of central processing units (&#x201c;CPUs&#x201d;) or other processors (including accelerators, field programmable gate arrays (FPGAs), graphics processors, etc.), memory storage devices <b>1018</b>(<b>1</b>)-<b>1018</b>(N) (e.g., dynamic read-only memory, solid state storage or disk drives), network input/output (&#x201c;NW I/O&#x201d;) devices, network switches, virtual machines (&#x201c;VMs&#x201d;), power modules, and cooling modules, etc. In at least one embodiment, one or more node C.R.s from among node C.R.s <b>1016</b>(<b>1</b>)-<b>1016</b>(N) may be a server having one or more of above-mentioned computing resources.</p><p id="p-0161" num="0142">In at least one embodiment, grouped computing resources <b>1014</b> may include separate groupings of node C.R.s housed within one or more racks (not shown), or many racks housed in data centers at various geographical locations (also not shown). In at least one embodiment, separate groupings of node C.R.s within grouped computing resources <b>1014</b> may include grouped compute, network, memory or storage resources that may be configured or allocated to support one or more workloads. In at least one embodiment, several node C.R.s including CPUs or processors may grouped within one or more racks to provide compute resources to support one or more workloads. In at least one embodiment, one or more racks may also include any number of power modules, cooling modules, and network switches, in any combination.</p><p id="p-0162" num="0143">In at least one embodiment, resource orchestrator <b>1012</b> may configure or otherwise control one or more node C.R.s <b>1016</b>(<b>1</b>)-<b>1016</b>(N) and/or grouped computing resources <b>1014</b>. In at least one embodiment, resource orchestrator <b>1012</b> may include a software design infrastructure (&#x201c;SDI&#x201d;) management entity for data center <b>1000</b>. In at least one embodiment, resource orchestrator <b>812</b> may include hardware, software or some combination thereof.</p><p id="p-0163" num="0144">In at least one embodiment, as shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, framework layer <b>1020</b> includes a job scheduler <b>1022</b>, a configuration manager <b>1024</b>, a resource manager <b>1026</b> and a distributed file system <b>1028</b>. In at least one embodiment, framework layer <b>1020</b> may include a framework to support software <b>1032</b> of software layer <b>1030</b> and/or one or more application(s) <b>1042</b> of application layer <b>1040</b>. In at least one embodiment, software <b>1032</b> or application(s) <b>1042</b> may respectively include web-based service software or applications, such as those provided by Amazon Web Services, Google Cloud and Microsoft Azure. In at least one embodiment, framework layer <b>1020</b> may be, but is not limited to, a type of free and open-source software web application framework such as Apache Spark&#x2122; (hereinafter &#x201c;Spark&#x201d;) that may utilize distributed file system <b>1028</b> for large-scale data processing (e.g., &#x201c;big data&#x201d;). In at least one embodiment, job scheduler <b>1022</b> may include a Spark driver to facilitate scheduling of workloads supported by various layers of data center <b>1000</b>. In at least one embodiment, configuration manager <b>1024</b> may be capable of configuring different layers such as software layer <b>1030</b> and framework layer <b>1020</b> including Spark and distributed file system <b>1028</b> for supporting large-scale data processing. In at least one embodiment, resource manager <b>1026</b> may be capable of managing clustered or grouped computing resources mapped to or allocated for support of distributed file system <b>1028</b> and job scheduler <b>1022</b>. In at least one embodiment, clustered or grouped computing resources may include grouped computing resources <b>1014</b> at data center infrastructure layer <b>1010</b>. In at least one embodiment, resource manager <b>1026</b> may coordinate with resource orchestrator <b>1012</b> to manage these mapped or allocated computing resources.</p><p id="p-0164" num="0145">In at least one embodiment, software <b>1032</b> included in software layer <b>1030</b> may include software used by at least portions of node C.R.s <b>1016</b>(<b>1</b>)-<b>1016</b>(N), grouped computing resources <b>1014</b>, and/or distributed file system <b>1028</b> of framework layer <b>1020</b>. In at least one embodiment, one or more types of software may include, but are not limited to, Internet web page search software, e-mail virus scan software, database software, and streaming video content software.</p><p id="p-0165" num="0146">In at least one embodiment, application(s) <b>1042</b> included in application layer <b>1040</b> may include one or more types of applications used by at least portions of node C.R.s <b>1016</b>(<b>1</b>)-<b>1016</b>(N), grouped computing resources <b>1014</b>, and/or distributed file system <b>1028</b> of framework layer <b>1020</b>. In at least one embodiment, one or more types of applications may include, but are not limited to, any number of a genomics application, a cognitive compute, application and a machine learning application, including training or inferencing software, machine learning framework software (e.g., PyTorch, TensorFlow, Caffe, etc.) or other machine learning applications used in conjunction with one or more embodiments.</p><p id="p-0166" num="0147">In at least one embodiment, any of configuration manager <b>1024</b>, resource manager <b>1026</b>, and resource orchestrator <b>1012</b> may implement any number and type of self-modifying actions based on any amount and type of data acquired in any technically feasible fashion. In at least one embodiment, self-modifying actions may relieve a data center operator of data center <b>1000</b> from making possibly bad configuration decisions and possibly avoiding underutilized and/or poor performing portions of a data center.</p><p id="p-0167" num="0148">In at least one embodiment, data center <b>1000</b> may include tools, services, software or other resources to train one or more machine learning models or predict or infer information using one or more machine learning models according to one or more embodiments described herein. For example, in at least one embodiment, a machine learning model may be trained by calculating weight parameters according to a neural network architecture using software and computing resources described above with respect to data center <b>1000</b>. In at least one embodiment, trained machine learning models corresponding to one or more neural networks may be used to infer or predict information using resources described above with respect to data center <b>1000</b> by using weight parameters calculated through one or more training techniques described herein.</p><p id="p-0168" num="0149">In at least one embodiment, data center may use CPUs, application-specific integrated circuits (ASICs), GPUs, FPGAs, or other hardware to perform training and/or inferencing using above-described resources. Moreover, one or more software and/or hardware resources described above may be configured as a service to allow users to train or performing inferencing of information, such as image recognition, speech recognition, or other artificial intelligence services.</p><p id="p-0169" num="0150">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>10</b></figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0170" num="0151">In at least one embodiment, data center <b>1000</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, data center <b>1000</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><heading id="h-0008" level="2">Autonomous Vehicle</heading><p id="p-0171" num="0152"><figref idref="DRAWINGS">FIG. <b>11</b>A</figref> illustrates an example of an autonomous vehicle <b>1100</b>, according to at least one embodiment. In at least one embodiment, autonomous vehicle <b>1100</b> (alternatively referred to herein as &#x201c;vehicle <b>1100</b>&#x201d;) may be, without limitation, a passenger vehicle, such as a car, a truck, a bus, and/or another type of vehicle that accommodates one or more passengers. In at least one embodiment, vehicle <b>1100</b> may be a semi-tractor-trailer truck used for hauling cargo. In at least one embodiment, vehicle <b>1100</b> may be an airplane, robotic vehicle, or other kind of vehicle.</p><p id="p-0172" num="0153">Autonomous vehicles may be described in terms of automation levels, defined by National Highway Traffic Safety Administration (&#x201c;NHTSA&#x201d;), a division of US Department of Transportation, and Society of Automotive Engineers (&#x201c;SAE&#x201d;) &#x201c;Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles&#x201d; (e.g., Standard No. J3016-201806, published on Jun. 15, 2018, Standard No. J3016-201609, published on Sep. 30, 2016, and previous and future versions of this standard). In at least one embodiment, vehicle <b>1100</b> may be capable of functionality in accordance with one or more of Level 1 through Level 5 of autonomous driving levels. For example, in at least one embodiment, vehicle <b>1100</b> may be capable of conditional automation (Level 3), high automation (Level 4), and/or full automation (Level 5), depending on embodiment.</p><p id="p-0173" num="0154">In at least one embodiment, vehicle <b>1100</b> may include, without limitation, components such as a chassis, a vehicle body, wheels (e.g., 2, 4, 6, 8, 18, etc.), tires, axles, and other components of a vehicle. In at least one embodiment, vehicle <b>1100</b> may include, without limitation, a propulsion system <b>1150</b>, such as an internal combustion engine, hybrid electric power plant, an all-electric engine, and/or another propulsion system type. In at least one embodiment, propulsion system <b>1150</b> may be connected to a drive train of vehicle <b>1100</b>, which may include, without limitation, a transmission, to enable propulsion of vehicle <b>1100</b>. In at least one embodiment, propulsion system <b>1150</b> may be controlled in response to receiving signals from a throttle/accelerator(s) <b>1152</b>.</p><p id="p-0174" num="0155">In at least one embodiment, a steering system <b>1154</b>, which may include, without limitation, a steering wheel, is used to steer vehicle <b>1100</b> (e.g., along a desired path or route) when propulsion system <b>1150</b> is operating (e.g., when vehicle <b>1100</b> is in motion). In at least one embodiment, steering system <b>1154</b> may receive signals from steering actuator(s) <b>1156</b>. In at least one embodiment, a steering wheel may be optional for full automation (Level 5) functionality. In at least one embodiment, a brake sensor system <b>1146</b> may be used to operate vehicle brakes in response to receiving signals from brake actuator(s) <b>1148</b> and/or brake sensors.</p><p id="p-0175" num="0156">In at least one embodiment, controller(s) <b>1136</b>, which may include, without limitation, one or more system on chips (&#x201c;SoCs&#x201d;) (not shown in <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>) and/or graphics processing unit(s) (&#x201c;GPU(s)&#x201d;), provide signals (e.g., representative of commands) to one or more components and/or systems of vehicle <b>1100</b>. For instance, in at least one embodiment, controller(s) <b>1136</b> may send signals to operate vehicle brakes via brake actuator(s) <b>1148</b>, to operate steering system <b>1154</b> via steering actuator(s) <b>1156</b>, to operate propulsion system <b>1150</b> via throttle/accelerator(s) <b>1152</b>. In at least one embodiment, controller(s) <b>1136</b> may include one or more onboard (e.g., integrated) computing devices that process sensor signals, and output operation commands (e.g., signals representing commands) to enable autonomous driving and/or to assist a human driver in driving vehicle <b>1100</b>. In at least one embodiment, controller(s) <b>1136</b> may include a first controller for autonomous driving functions, a second controller for functional safety functions, a third controller for artificial intelligence functionality (e.g., computer vision), a fourth controller for infotainment functionality, a fifth controller for redundancy in emergency conditions, and/or other controllers. In at least one embodiment, a single controller may handle two or more of above functionalities, two or more controllers may handle a single functionality, and/or any combination thereof.</p><p id="p-0176" num="0157">In at least one embodiment, controller(s) <b>1136</b> provide signals for controlling one or more components and/or systems of vehicle <b>1100</b> in response to sensor data received from one or more sensors (e.g., sensor inputs). In at least one embodiment, sensor data may be received from, for example and without limitation, global navigation satellite systems (&#x201c;GNSS&#x201d;) sensor(s) <b>1158</b> (e.g., Global Positioning System sensor(s)), RADAR sensor(s) <b>1160</b>, ultrasonic sensor(s) <b>1162</b>, LIDAR sensor(s) <b>1164</b>, inertial measurement unit (&#x201c;IMU&#x201d;) sensor(s) <b>1166</b> (e.g., accelerometer(s), gyroscope(s), a magnetic compass or magnetic compasses, magnetometer(s), etc.), microphone(s) <b>1196</b>, stereo camera(s) <b>1168</b>, wide-view camera(s) <b>1170</b> (e.g., fisheye cameras), infrared camera(s) <b>1172</b>, surround camera(s) <b>1174</b> (e.g., 360 degree cameras), long-range cameras (not shown in <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>), mid-range camera(s) (not shown in <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>), speed sensor(s) <b>1144</b> (e.g., for measuring speed of vehicle <b>1100</b>), vibration sensor(s) <b>1142</b>, steering sensor(s) <b>1140</b>, brake sensor(s) (e.g., as part of brake sensor system <b>1146</b>), and/or other sensor types.</p><p id="p-0177" num="0158">In at least one embodiment, one or more of controller(s) <b>1136</b> may receive inputs (e.g., represented by input data) from an instrument cluster <b>1132</b> of vehicle <b>1100</b> and provide outputs (e.g., represented by output data, display data, etc.) via a human-machine interface (&#x201c;HMI&#x201d;) display <b>1134</b>, an audible annunciator, a loudspeaker, and/or via other components of vehicle <b>1100</b>. In at least one embodiment, outputs may include information such as vehicle velocity, speed, time, map data (e.g., a High Definition map (not shown in <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>)), location data (e.g., vehicle's <b>1100</b> location, such as on a map), direction, location of other vehicles (e.g., an occupancy grid), information about objects and status of objects as perceived by controller(s) <b>1136</b>, etc. For example, in at least one embodiment, HMI display <b>1134</b> may display information about presence of one or more objects (e.g., a street sign, caution sign, traffic light changing, etc.), and/or information about driving maneuvers vehicle has made, is making, or will make (e.g., changing lanes now, taking exit <b>34</b>B in two miles, etc.).</p><p id="p-0178" num="0159">In at least one embodiment, vehicle <b>1100</b> further includes a network interface <b>1124</b> which may use wireless antenna(s) <b>1126</b> and/or modem(s) to communicate over one or more networks. For example, in at least one embodiment, network interface <b>1124</b> may be capable of communication over Long-Term Evolution (&#x201c;LTE&#x201d;), Wideband Code Division Multiple Access (&#x201c;WCDMA&#x201d;), Universal Mobile Telecommunications System (&#x201c;UMTS&#x201d;), Global System for Mobile communication (&#x201c;GSM&#x201d;), IMT-CDMA Multi-Carrier (&#x201c;CDMA2000&#x201d;) networks, etc. In at least one embodiment, wireless antenna(s) <b>1126</b> may also enable communication between objects in environment (e.g., vehicles, mobile devices, etc.), using local area network(s), such as Bluetooth, Bluetooth Low Energy (&#x201c;LE&#x201d;), Z-Wave, ZigBee, etc., and/or low power wide-area network(s) (&#x201c;LPWANs&#x201d;), such as LoRaWAN, SigFox, etc. protocols.</p><p id="p-0179" num="0160">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>11</b>A</figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0180" num="0161">In at least one embodiment, vehicle <b>1100</b> may include one or more systems that perform object detections. In at least one embodiment, these systems may include an object detection neural network that is trained using one or more generative adversarial networks. In at least one embodiment, a computer system in vehicle <b>1100</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0181" num="0162"><figref idref="DRAWINGS">FIG. <b>11</b>B</figref> illustrates an example of camera locations and fields of view for autonomous vehicle <b>1100</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, according to at least one embodiment. In at least one embodiment, cameras and respective fields of view are one example embodiment and are not intended to be limiting. For instance, in at least one embodiment, additional and/or alternative cameras may be included and/or cameras may be located at different locations on vehicle <b>1100</b>.</p><p id="p-0182" num="0163">In at least one embodiment, camera types for cameras may include, but are not limited to, digital cameras that may be adapted for use with components and/or systems of vehicle <b>1100</b>. In at least one embodiment, camera(s) may operate at automotive safety integrity level (&#x201c;ASIL&#x201d;) B and/or at another ASIL. In at least one embodiment, camera types may be capable of any image capture rate, such as 60 frames per second (fps), 1220 fps, 240 fps, etc., depending on embodiment. In at least one embodiment, cameras may be capable of using rolling shutters, global shutters, another type of shutter, or a combination thereof. In at least one embodiment, color filter array may include a red clear clear clear (&#x201c;RCCC&#x201d;) color filter array, a red clear clear blue (&#x201c;RCCB&#x201d;) color filter array, a red blue green clear (&#x201c;RBGC&#x201d;) color filter array, a Foveon X3 color filter array, a Bayer sensors (&#x201c;RGGB&#x201d;) color filter array, a monochrome sensor color filter array, and/or another type of color filter array. In at least one embodiment, clear pixel cameras, such as cameras with an RCCC, an RCCB, and/or an RBGC color filter array, may be used in an effort to increase light sensitivity.</p><p id="p-0183" num="0164">In at least one embodiment, one or more of camera(s) may be used to perform advanced driver assistance systems (&#x201c;ADAS&#x201d;) functions (e.g., as part of a redundant or fail-safe design). For example, in at least one embodiment, a Multi-Function Mono Camera may be installed to provide functions including lane departure warning, traffic sign assist and intelligent headlamp control. In at least one embodiment, one or more of camera(s) (e.g., all cameras) may record and provide image data (e.g., video) simultaneously.</p><p id="p-0184" num="0165">In at least one embodiment, one or more camera may be mounted in a mounting assembly, such as a custom designed (three-dimensional (&#x201c;3D&#x201d;) printed) assembly, in order to cut out stray light and reflections from within vehicle <b>1100</b> (e.g., reflections from dashboard reflected in windshield mirrors) which may interfere with camera image data capture abilities. With reference to wing-mirror mounting assemblies, in at least one embodiment, wing-mirror assemblies may be custom 3D printed so that a camera mounting plate matches a shape of a wing-mirror. In at least one embodiment, camera(s) may be integrated into wing-mirrors. In at least one embodiment, for side-view cameras, camera(s) may also be integrated within four pillars at each corner of a cabin.</p><p id="p-0185" num="0166">In at least one embodiment, cameras with a field of view that include portions of an environment in front of vehicle <b>1100</b> (e.g., front-facing cameras) may be used for surround view, to help identify forward facing paths and obstacles, as well as aid in, with help of one or more of controller(s) <b>1136</b> and/or control SoCs, providing information critical to generating an occupancy grid and/or determining preferred vehicle paths. In at least one embodiment, front-facing cameras may be used to perform many similar ADAS functions as LIDAR, including, without limitation, emergency braking, pedestrian detection, and collision avoidance. In at least one embodiment, front-facing cameras may also be used for ADAS functions and systems including, without limitation, Lane Departure Warnings (&#x201c;LDW&#x201d;), Autonomous Cruise Control (&#x201c;ACC&#x201d;), and/or other functions such as traffic sign recognition.</p><p id="p-0186" num="0167">In at least one embodiment, a variety of cameras may be used in a front-facing configuration, including, for example, a monocular camera platform that includes a CMOS (&#x201c;complementary metal oxide semiconductor&#x201d;) color imager. In at least one embodiment, a wide-view camera <b>1170</b> may be used to perceive objects coming into view from a periphery (e.g., pedestrians, crossing traffic or bicycles). Although only one wide-view camera <b>1170</b> is illustrated in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>, in other embodiments, there may be any number (including zero) wide-view cameras on vehicle <b>1100</b>. In at least one embodiment, any number of long-range camera(s) <b>1198</b> (e.g., a long-view stereo camera pair) may be used for depth-based object detection, especially for objects for which a neural network has not yet been trained. In at least one embodiment, long-range camera(s) <b>1198</b> may also be used for object detection and classification, as well as basic object tracking.</p><p id="p-0187" num="0168">In at least one embodiment, any number of stereo camera(s) <b>1168</b> may also be included in a front-facing configuration. In at least one embodiment, one or more of stereo camera(s) <b>1168</b> may include an integrated control unit comprising a scalable processing unit, which may provide a programmable logic (&#x201c;FPGA&#x201d;) and a multi-core micro-processor with an integrated Controller Area Network (&#x201c;CAN&#x201d;) or Ethernet interface on a single chip. In at least one embodiment, such a unit may be used to generate a 3D map of an environment of vehicle <b>1100</b>, including a distance estimate for all points in an image. In at least one embodiment, one or more of stereo camera(s) <b>1168</b> may include, without limitation, compact stereo vision sensor(s) that may include, without limitation, two camera lenses (one each on left and right) and an image processing chip that may measure distance from vehicle <b>1100</b> to target object and use generated information (e.g., metadata) to activate autonomous emergency braking and lane departure warning functions. In at least one embodiment, other types of stereo camera(s) <b>1168</b> may be used in addition to, or alternatively from, those described herein.</p><p id="p-0188" num="0169">In at least one embodiment, cameras with a field of view that include portions of environment to sides of vehicle <b>1100</b> (e.g., side-view cameras) may be used for surround view, providing information used to create and update an occupancy grid, as well as to generate side impact collision warnings. For example, in at least one embodiment, surround camera(s) <b>1174</b> (e.g., four surround cameras as illustrated in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>) could be positioned on vehicle <b>1100</b>. In at least one embodiment, surround camera(s) <b>1174</b> may include, without limitation, any number and combination of wide-view cameras, fisheye camera(s), 360 degree camera(s), and/or similar cameras. For instance, in at least one embodiment, four fisheye cameras may be positioned on a front, a rear, and sides of vehicle <b>1100</b>. In at least one embodiment, vehicle <b>1100</b> may use three surround camera(s) <b>1174</b> (e.g., left, right, and rear), and may leverage one or more other camera(s) (e.g., a forward-facing camera) as a fourth surround-view camera.</p><p id="p-0189" num="0170">In at least one embodiment, cameras with a field of view that include portions of an environment behind vehicle <b>1100</b> (e.g., rear-view cameras) may be used for parking assistance, surround view, rear collision warnings, and creating and updating an occupancy grid. In at least one embodiment, a wide variety of cameras may be used including, but not limited to, cameras that are also suitable as a front-facing camera(s) (e.g., long-range cameras <b>1198</b> and/or mid-range camera(s) <b>1176</b>, stereo camera(s) <b>1168</b>, infrared camera(s) <b>1172</b>, etc.,) as described herein.</p><p id="p-0190" num="0171">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>11</b>B</figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0191" num="0172">In at least one embodiment, vehicle <b>1100</b> may include one or more systems that perform object detections. In at least one embodiment, these systems may include an object detection neural network that is trained using one or more generative adversarial networks. In at least one embodiment, a computer system in vehicle <b>1100</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0192" num="0173"><figref idref="DRAWINGS">FIG. <b>11</b>C</figref> is a block diagram illustrating an example system architecture for autonomous vehicle <b>1100</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, according to at least one embodiment. In at least one embodiment, each of components, features, and systems of vehicle <b>1100</b> in <figref idref="DRAWINGS">FIG. <b>11</b>C</figref> is illustrated as being connected via a bus <b>1102</b>. In at least one embodiment, bus <b>1102</b> may include, without limitation, a CAN data interface (alternatively referred to herein as a &#x201c;CAN bus&#x201d;). In at least one embodiment, a CAN may be a network inside vehicle <b>1100</b> used to aid in control of various features and functionality of vehicle <b>1100</b>, such as actuation of brakes, acceleration, braking, steering, windshield wipers, etc. In at least one embodiment, bus <b>1102</b> may be configured to have dozens or even hundreds of nodes, each with its own unique identifier (e.g., a CAN ID). In at least one embodiment, bus <b>1102</b> may be read to find steering wheel angle, ground speed, engine revolutions per minute (&#x201c;RPMs&#x201d;), button positions, and/or other vehicle status indicators. In at least one embodiment, bus <b>1102</b> may be a CAN bus that is ASIL B compliant.</p><p id="p-0193" num="0174">In at least one embodiment, in addition to, or alternatively from CAN, FlexRay and/or Ethernet protocols may be used. In at least one embodiment, there may be any number of busses forming bus <b>1102</b>, which may include, without limitation, zero or more CAN busses, zero or more FlexRay busses, zero or more Ethernet busses, and/or zero or more other types of busses using different protocols. In at least one embodiment, two or more busses may be used to perform different functions, and/or may be used for redundancy. For example, a first bus may be used for collision avoidance functionality and a second bus may be used for actuation control. In at least one embodiment, each bus of bus <b>1102</b> may communicate with any of components of vehicle <b>1100</b>, and two or more busses of bus <b>1102</b> may communicate with corresponding components. In at least one embodiment, each of any number of system(s) on chip(s) (&#x201c;SoC(s)&#x201d;) <b>1104</b> (such as SoC <b>1104</b>(A) and SoC <b>1104</b>(B)), each of controller(s) <b>1136</b>, and/or each computer within vehicle may have access to same input data (e.g., inputs from sensors of vehicle <b>1100</b>), and may be connected to a common bus, such CAN bus.</p><p id="p-0194" num="0175">In at least one embodiment, vehicle <b>1100</b> may include one or more controller(s) <b>1136</b>, such as those described herein with respect to <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>. In at least one embodiment, controller(s) <b>1136</b> may be used for a variety of functions. In at least one embodiment, controller(s) <b>1136</b> may be coupled to any of various other components and systems of vehicle <b>1100</b>, and may be used for control of vehicle <b>1100</b>, artificial intelligence of vehicle <b>1100</b>, infotainment for vehicle <b>1100</b>, and/or other functions.</p><p id="p-0195" num="0176">In at least one embodiment, vehicle <b>1100</b> may include any number of SoCs <b>1104</b>. In at least one embodiment, each of SoCs <b>1104</b> may include, without limitation, central processing units (&#x201c;CPU(s)&#x201d;) <b>1106</b>, graphics processing units (&#x201c;GPU(s)&#x201d;) <b>1108</b>, processor(s) <b>1110</b>, cache(s) <b>1112</b>, accelerator(s) <b>1114</b>, data store(s) <b>1116</b>, and/or other components and features not illustrated. In at least one embodiment, SoC(s) <b>1104</b> may be used to control vehicle <b>1100</b> in a variety of platforms and systems. For example, in at least one embodiment, SoC(s) <b>1104</b> may be combined in a system (e.g., system of vehicle <b>1100</b>) with a High Definition (&#x201c;HD&#x201d;) map <b>1122</b> which may obtain map refreshes and/or updates via network interface <b>1124</b> from one or more servers (not shown in <figref idref="DRAWINGS">FIG. <b>11</b>C</figref>).</p><p id="p-0196" num="0177">In at least one embodiment, CPU(s) <b>1106</b> may include a CPU cluster or CPU complex (alternatively referred to herein as a &#x201c;CCPLEX&#x201d;). In at least one embodiment, CPU(s) <b>1106</b> may include multiple cores and/or level two (&#x201c;L2&#x201d;) caches. For instance, in at least one embodiment, CPU(s) <b>1106</b> may include eight cores in a coherent multi-processor configuration. In at least one embodiment, CPU(s) <b>1106</b> may include four dual-core clusters where each cluster has a dedicated L2 cache (e.g., a 2 megabyte (MB) L2 cache). In at least one embodiment, CPU(s) <b>1106</b> (e.g., CCPLEX) may be configured to support simultaneous cluster operations enabling any combination of clusters of CPU(s) <b>1106</b> to be active at any given time.</p><p id="p-0197" num="0178">In at least one embodiment, one or more of CPU(s) <b>1106</b> may implement power management capabilities that include, without limitation, one or more of following features: individual hardware blocks may be clock-gated automatically when idle to save dynamic power; each core clock may be gated when such core is not actively executing instructions due to execution of Wait for Interrupt (&#x201c;WFI&#x201d;)/Wait for Event (&#x201c;WFE&#x201d;) instructions; each core may be independently power-gated; each core cluster may be independently clock-gated when all cores are clock-gated or power-gated; and/or each core cluster may be independently power-gated when all cores are power-gated. In at least one embodiment, CPU(s) <b>1106</b> may further implement an enhanced algorithm for managing power states, where allowed power states and expected wakeup times are specified, and hardware/microcode determines which best power state to enter for core, cluster, and CCPLEX. In at least one embodiment, processing cores may support simplified power state entry sequences in software with work offloaded to microcode.</p><p id="p-0198" num="0179">In at least one embodiment, GPU(s) <b>1108</b> may include an integrated GPU (alternatively referred to herein as an &#x201c;iGPU&#x201d;). In at least one embodiment, GPU(s) <b>1108</b> may be programmable and may be efficient for parallel workloads. In at least one embodiment, GPU(s) <b>1108</b> may use an enhanced tensor instruction set. In at least one embodiment, GPU(s) <b>1108</b> may include one or more streaming microprocessors, where each streaming microprocessor may include a level one (&#x201c;L1&#x201d;) cache (e.g., an L1 cache with at least 96 KB storage capacity), and two or more streaming microprocessors may share an L2 cache (e.g., an L2 cache with a 512 KB storage capacity). In at least one embodiment, GPU(s) <b>1108</b> may include at least eight streaming microprocessors. In at least one embodiment, GPU(s) <b>1108</b> may use compute application programming interface(s) (API(s)). In at least one embodiment, GPU(s) <b>1108</b> may use one or more parallel computing platforms and/or programming models (e.g., NVIDIA's CUDA model).</p><p id="p-0199" num="0180">In at least one embodiment, one or more of GPU(s) <b>1108</b> may be power-optimized for best performance in automotive and embedded use cases. For example, in at least one embodiment, GPU(s) <b>1108</b> could be fabricated on Fin field-effect transistor (&#x201c;FinFET&#x201d;) circuitry. In at least one embodiment, each streaming microprocessor may incorporate a number of mixed-precision processing cores partitioned into multiple blocks. For example, and without limitation, 64 PF32 cores and 32 PF64 cores could be partitioned into four processing blocks. In at least one embodiment, each processing block could be allocated 16 FP32 cores, 8 FP64 cores, 16 INT32 cores, two mixed-precision NVIDIA Tensor cores for deep learning matrix arithmetic, a level zero (&#x201c;L0&#x201d;) instruction cache, a warp scheduler, a dispatch unit, and/or a 64 KB register file. In at least one embodiment, streaming microprocessors may include independent parallel integer and floating-point data paths to provide for efficient execution of workloads with a mix of computation and addressing calculations. In at least one embodiment, streaming microprocessors may include independent thread scheduling capability to enable finer-grain synchronization and cooperation between parallel threads. In at least one embodiment, streaming microprocessors may include a combined L1 data cache and shared memory unit in order to improve performance while simplifying programming.</p><p id="p-0200" num="0181">In at least one embodiment, one or more of GPU(s) <b>1108</b> may include a high bandwidth memory (&#x201c;HBM&#x201d;) and/or a 16 GB HBM2 memory subsystem to provide, in some examples, about 900 GB/second peak memory bandwidth. In at least one embodiment, in addition to, or alternatively from, HBM memory, a synchronous graphics random-access memory (&#x201c;SGRAM&#x201d;) may be used, such as a graphics double data rate type five synchronous random-access memory (&#x201c;GDDR5&#x201d;).</p><p id="p-0201" num="0182">In at least one embodiment, GPU(s) <b>1108</b> may include unified memory technology. In at least one embodiment, address translation services (&#x201c;ATS&#x201d;) support may be used to allow GPU(s) <b>1108</b> to access CPU(s) <b>1106</b> page tables directly. In at least one embodiment, embodiment, when a GPU of GPU(s) <b>1108</b> memory management unit (&#x201c;MMU&#x201d;) experiences a miss, an address translation request may be transmitted to CPU(s) <b>1106</b>. In response, 2 CPU of CPU(s) <b>1106</b> may look in its page tables for a virtual-to-physical mapping for an address and transmit translation back to GPU(s) <b>1108</b>, in at least one embodiment. In at least one embodiment, unified memory technology may allow a single unified virtual address space for memory of both CPU(s) <b>1106</b> and GPU(s) <b>1108</b>, thereby simplifying GPU(s) <b>1108</b> programming and porting of applications to GPU(s) <b>1108</b>.</p><p id="p-0202" num="0183">In at least one embodiment, GPU(s) <b>1108</b> may include any number of access counters that may keep track of frequency of access of GPU(s) <b>1108</b> to memory of other processors. In at least one embodiment, access counter(s) may help ensure that memory pages are moved to physical memory of a processor that is accessing pages most frequently, thereby improving efficiency for memory ranges shared between processors.</p><p id="p-0203" num="0184">In at least one embodiment, one or more of SoC(s) <b>1104</b> may include any number of cache(s) <b>1112</b>, including those described herein. For example, in at least one embodiment, cache(s) <b>1112</b> could include a level three (&#x201c;L3&#x201d;) cache that is available to both CPU(s) <b>1106</b> and GPU(s) <b>1108</b> (e.g., that is connected to CPU(s) <b>1106</b> and GPU(s) <b>1108</b>). In at least one embodiment, cache(s) <b>1112</b> may include a write-back cache that may keep track of states of lines, such as by using a cache coherence protocol (e.g., MEI, MESI, MSI, etc.). In at least one embodiment, a L3 cache may include 4 MB of memory or more, depending on embodiment, although smaller cache sizes may be used.</p><p id="p-0204" num="0185">In at least one embodiment, one or more of SoC(s) <b>1104</b> may include one or more accelerator(s) <b>1114</b> (e.g., hardware accelerators, software accelerators, or a combination thereof). In at least one embodiment, SoC(s) <b>1104</b> may include a hardware acceleration cluster that may include optimized hardware accelerators and/or large on-chip memory. In at least one embodiment, large on-chip memory (e.g., 4 MB of SRAM), may enable a hardware acceleration cluster to accelerate neural networks and other calculations. In at least one embodiment, a hardware acceleration cluster may be used to complement GPU(s) <b>1108</b> and to off-load some of tasks of GPU(s) <b>1108</b> (e.g., to free up more cycles of GPU(s) <b>1108</b> for performing other tasks). In at least one embodiment, accelerator(s) <b>1114</b> could be used for targeted workloads (e.g., perception, convolutional neural networks (&#x201c;CNNs&#x201d;), recurrent neural networks (&#x201c;RNNs&#x201d;), etc.) that are stable enough to be amenable to acceleration. In at least one embodiment, a CNN may include a region-based or regional convolutional neural networks (&#x201c;RCNNs&#x201d;) and Fast RCNNs (e.g., as used for object detection) or other type of CNN.</p><p id="p-0205" num="0186">In at least one embodiment, accelerator(s) <b>1114</b> (e.g., hardware acceleration cluster) may include one or more deep learning accelerator (&#x201c;DLA&#x201d;). In at least one embodiment, DLA(s) may include, without limitation, one or more Tensor processing units (&#x201c;TPUs&#x201d;) that may be configured to provide an additional ten trillion operations per second for deep learning applications and inferencing. In at least one embodiment, TPUs may be accelerators configured to, and optimized for, performing image processing functions (e.g., for CNNs, RCNNs, etc.). In at least one embodiment, DLA(s) may further be optimized for a specific set of neural network types and floating point operations, as well as inferencing. In at least one embodiment, design of DLA(s) may provide more performance per millimeter than a typical general-purpose GPU, and typically vastly exceeds performance of a CPU. In at least one embodiment, TPU(s) may perform several functions, including a single-instance convolution function, supporting, for example, INT8, INT16, and FP16 data types for both features and weights, as well as post-processor functions. In at least one embodiment, DLA(s) may quickly and efficiently execute neural networks, especially CNNs, on processed or unprocessed data for any of a variety of functions, including, for example and without limitation: a CNN for object identification and detection using data from camera sensors; a CNN for distance estimation using data from camera sensors; a CNN for emergency vehicle detection and identification and detection using data from microphones; a CNN for facial recognition and vehicle owner identification using data from camera sensors; and/or a CNN for security and/or safety related events.</p><p id="p-0206" num="0187">In at least one embodiment, DLA(s) may perform any function of GPU(s) <b>1108</b>, and by using an inference accelerator, for example, a designer may target either DLA(s) or GPU(s) <b>1108</b> for any function. For example, in at least one embodiment, a designer may focus processing of CNNs and floating point operations on DLA(s) and leave other functions to GPU(s) <b>1108</b> and/or accelerator(s) <b>1114</b>.</p><p id="p-0207" num="0188">In at least one embodiment, accelerator(s) <b>1114</b> may include programmable vision accelerator (&#x201c;PVA&#x201d;), which may alternatively be referred to herein as a computer vision accelerator. In at least one embodiment, PVA may be designed and configured to accelerate computer vision algorithms for advanced driver assistance system (&#x201c;ADAS&#x201d;) <b>1138</b>, autonomous driving, augmented reality (&#x201c;AR&#x201d;) applications, and/or virtual reality (&#x201c;VR&#x201d;) applications. In at least one embodiment, PVA may provide a balance between performance and flexibility. For example, in at least one embodiment, each PVA may include, for example and without limitation, any number of reduced instruction set computer (&#x201c;RISC&#x201d;) cores, direct memory access (&#x201c;DMA&#x201d;), and/or any number of vector processors.</p><p id="p-0208" num="0189">In at least one embodiment, RISC cores may interact with image sensors (e.g., image sensors of any cameras described herein), image signal processor(s), etc. In at least one embodiment, each RISC core may include any amount of memory. In at least one embodiment, RISC cores may use any of a number of protocols, depending on embodiment. In at least one embodiment, RISC cores may execute a real-time operating system (&#x201c;RTOS&#x201d;). In at least one embodiment, RISC cores may be implemented using one or more integrated circuit devices, application specific integrated circuits (&#x201c;ASICs&#x201d;), and/or memory devices. For example, in at least one embodiment, RISC cores could include an instruction cache and/or a tightly coupled RAM.</p><p id="p-0209" num="0190">In at least one embodiment, DMA may enable components of PVA to access system memory independently of CPU(s) <b>1106</b>. In at least one embodiment, DMA may support any number of features used to provide optimization to a PVA including, but not limited to, supporting multi-dimensional addressing and/or circular addressing. In at least one embodiment, DMA may support up to six or more dimensions of addressing, which may include, without limitation, block width, block height, block depth, horizontal block stepping, vertical block stepping, and/or depth stepping.</p><p id="p-0210" num="0191">In at least one embodiment, vector processors may be programmable processors that may be designed to efficiently and flexibly execute programming for computer vision algorithms and provide signal processing capabilities. In at least one embodiment, a PVA may include a PVA core and two vector processing subsystem partitions. In at least one embodiment, a PVA core may include a processor subsystem, DMA engine(s) (e.g., two DMA engines), and/or other peripherals. In at least one embodiment, a vector processing subsystem may operate as a primary processing engine of a PVA, and may include a vector processing unit (&#x201c;VPU&#x201d;), an instruction cache, and/or vector memory (e.g., &#x201c;VMEM&#x201d;). In at least one embodiment, VPU core may include a digital signal processor such as, for example, a single instruction, multiple data (&#x201c;SIMD&#x201d;), very long instruction word (&#x201c;VLIW&#x201d;) digital signal processor. In at least one embodiment, a combination of SIMD and VLIW may enhance throughput and speed.</p><p id="p-0211" num="0192">In at least one embodiment, each of vector processors may include an instruction cache and may be coupled to dedicated memory. As a result, in at least one embodiment, each of vector processors may be configured to execute independently of other vector processors. In at least one embodiment, vector processors that are included in a particular PVA may be configured to employ data parallelism. For instance, in at least one embodiment, plurality of vector processors included in a single PVA may execute a common computer vision algorithm, but on different regions of an image. In at least one embodiment, vector processors included in a particular PVA may simultaneously execute different computer vision algorithms, on one image, or even execute different algorithms on sequential images or portions of an image. In at least one embodiment, among other things, any number of PVAs may be included in hardware acceleration cluster and any number of vector processors may be included in each PVA. In at least one embodiment, PVA may include additional error correcting code (&#x201c;ECC&#x201d;) memory, to enhance overall system safety.</p><p id="p-0212" num="0193">In at least one embodiment, accelerator(s) <b>1114</b> may include a computer vision network on-chip and static random-access memory (&#x201c;SRAM&#x201d;), for providing a high-bandwidth, low latency SRAM for accelerator(s) <b>1114</b>. In at least one embodiment, on-chip memory may include at least 4 MB SRAM, comprising, for example and without limitation, eight field-configurable memory blocks, that may be accessible by both a PVA and a DLA. In at least one embodiment, each pair of memory blocks may include an advanced peripheral bus (&#x201c;APB&#x201d;) interface, configuration circuitry, a controller, and a multiplexer. In at least one embodiment, any type of memory may be used. In at least one embodiment, a PVA and a DLA may access memory via a backbone that provides a PVA and a DLA with high-speed access to memory. In at least one embodiment, a backbone may include a computer vision network on-chip that interconnects a PVA and a DLA to memory (e.g., using APB).</p><p id="p-0213" num="0194">In at least one embodiment, a computer vision network on-chip may include an interface that determines, before transmission of any control signal/address/data, that both a PVA and a DLA provide ready and valid signals. In at least one embodiment, an interface may provide for separate phases and separate channels for transmitting control signals/addresses/data, as well as burst-type communications for continuous data transfer. In at least one embodiment, an interface may comply with International Organization for Standardization (&#x201c;ISO&#x201d;) 26262 or International Electrotechnical Commission (&#x201c;IEC&#x201d;) 61508 standards, although other standards and protocols may be used.</p><p id="p-0214" num="0195">In at least one embodiment, one or more of SoC(s) <b>1104</b> may include a real-time ray-tracing hardware accelerator. In at least one embodiment, real-time ray-tracing hardware accelerator may be used to quickly and efficiently determine positions and extents of objects (e.g., within a world model), to generate real-time visualization simulations, for RADAR signal interpretation, for sound propagation synthesis and/or analysis, for simulation of SONAR systems, for general wave propagation simulation, for comparison to LIDAR data for purposes of localization and/or other functions, and/or for other uses.</p><p id="p-0215" num="0196">In at least one embodiment, accelerator(s) <b>1114</b> can have a wide array of uses for autonomous driving. In at least one embodiment, a PVA may be used for key processing stages in ADAS and autonomous vehicles. In at least one embodiment, a PVA's capabilities are a good match for algorithmic domains needing predictable processing, at low power and low latency. In other words, a PVA performs well on semi-dense or dense regular computation, even on small data sets, which might require predictable run-times with low latency and low power. In at least one embodiment, such as in vehicle <b>1100</b>, PVAs might be designed to run classic computer vision algorithms, as they can be efficient at object detection and operating on integer math.</p><p id="p-0216" num="0197">For example, according to at least one embodiment of technology, a PVA is used to perform computer stereo vision. In at least one embodiment, a semi-global matching-based algorithm may be used in some examples, although this is not intended to be limiting. In at least one embodiment, applications for Level 3-5 autonomous driving use motion estimation/stereo matching on-the-fly (e.g., structure from motion, pedestrian recognition, lane detection, etc.). In at least one embodiment, a PVA may perform computer stereo vision functions on inputs from two monocular cameras.</p><p id="p-0217" num="0198">In at least one embodiment, a PVA may be used to perform dense optical flow. For example, in at least one embodiment, a PVA could process raw RADAR data (e.g., using a 4D Fast Fourier Transform) to provide processed RADAR data. In at least one embodiment, a PVA is used for time of flight depth processing, by processing raw time of flight data to provide processed time of flight data, for example.</p><p id="p-0218" num="0199">In at least one embodiment, a DLA may be used to run any type of network to enhance control and driving safety, including for example and without limitation, a neural network that outputs a measure of confidence for each object detection. In at least one embodiment, confidence may be represented or interpreted as a probability, or as providing a relative &#x201c;weight&#x201d; of each detection compared to other detections. In at least one embodiment, a confidence measure enables a system to make further decisions regarding which detections should be considered as true positive detections rather than false positive detections. In at least one embodiment, a system may set a threshold value for confidence and consider only detections exceeding threshold value as true positive detections. In an embodiment in which an automatic emergency braking (&#x201c;AEB&#x201d;) system is used, false positive detections would cause vehicle to automatically perform emergency braking, which is obviously undesirable. In at least one embodiment, highly confident detections may be considered as triggers for AEB. In at least one embodiment, a DLA may run a neural network for regressing confidence value. In at least one embodiment, neural network may take as its input at least some subset of parameters, such as bounding box dimensions, ground plane estimate obtained (e.g., from another subsystem), output from IMU sensor(s) <b>1166</b> that correlates with vehicle <b>1100</b> orientation, distance, 3D location estimates of object obtained from neural network and/or other sensors (e.g., LIDAR sensor(s) <b>1164</b> or RADAR sensor(s) <b>1160</b>), among others.</p><p id="p-0219" num="0200">In at least one embodiment, one or more of SoC(s) <b>1104</b> may include data store(s) <b>1116</b> (e.g., memory). In at least one embodiment, data store(s) <b>1116</b> may be on-chip memory of SoC(s) <b>1104</b>, which may store neural networks to be executed on GPU(s) <b>1108</b> and/or a DLA. In at least one embodiment, data store(s) <b>1116</b> may be large enough in capacity to store multiple instances of neural networks for redundancy and safety. In at least one embodiment, data store(s) <b>1116</b> may comprise L2 or L3 cache(s).</p><p id="p-0220" num="0201">In at least one embodiment, one or more of SoC(s) <b>1104</b> may include any number of processor(s) <b>1110</b> (e.g., embedded processors). In at least one embodiment, processor(s) <b>1110</b> may include a boot and power management processor that may be a dedicated processor and subsystem to handle boot power and management functions and related security enforcement. In at least one embodiment, a boot and power management processor may be a part of a boot sequence of SoC(s) <b>1104</b> and may provide runtime power management services. In at least one embodiment, a boot power and management processor may provide clock and voltage programming, assistance in system low power state transitions, management of SoC(s) <b>1104</b> thermals and temperature sensors, and/or management of SoC(s) <b>1104</b> power states. In at least one embodiment, each temperature sensor may be implemented as a ring-oscillator whose output frequency is proportional to temperature, and SoC(s) <b>1104</b> may use ring-oscillators to detect temperatures of CPU(s) <b>1106</b>, GPU(s) <b>1108</b>, and/or accelerator(s) <b>1114</b>. In at least one embodiment, if temperatures are determined to exceed a threshold, then a boot and power management processor may enter a temperature fault routine and put SoC(s) <b>1104</b> into a lower power state and/or put vehicle <b>1100</b> into a chauffeur to safe stop mode (e.g., bring vehicle <b>1100</b> to a safe stop).</p><p id="p-0221" num="0202">In at least one embodiment, processor(s) <b>1110</b> may further include a set of embedded processors that may serve as an audio processing engine which may be an audio subsystem that enables full hardware support for multi-channel audio over multiple interfaces, and a broad and flexible range of audio I/O interfaces. In at least one embodiment, an audio processing engine is a dedicated processor core with a digital signal processor with dedicated RAM.</p><p id="p-0222" num="0203">In at least one embodiment, processor(s) <b>1110</b> may further include an always-on processor engine that may provide necessary hardware features to support low power sensor management and wake use cases. In at least one embodiment, an always-on processor engine may include, without limitation, a processor core, a tightly coupled RAM, supporting peripherals (e.g., timers and interrupt controllers), various I/O controller peripherals, and routing logic.</p><p id="p-0223" num="0204">In at least one embodiment, processor(s) <b>1110</b> may further include a safety cluster engine that includes, without limitation, a dedicated processor subsystem to handle safety management for automotive applications. In at least one embodiment, a safety cluster engine may include, without limitation, two or more processor cores, a tightly coupled RAM, support peripherals (e.g., timers, an interrupt controller, etc.), and/or routing logic. In a safety mode, two or more cores may operate, in at least one embodiment, in a lockstep mode and function as a single core with comparison logic to detect any differences between operations. In at least one embodiment, processor(s) <b>1110</b> may further include a real-time camera engine that may include, without limitation, a dedicated processor subsystem for handling real-time camera management. In at least one embodiment, processor(s) <b>1110</b> may further include a high-dynamic range signal processor that may include, without limitation, an image signal processor that is a hardware engine that is part of a camera processing pipeline.</p><p id="p-0224" num="0205">In at least one embodiment, processor(s) <b>1110</b> may include a video image compositor that may be a processing block (e.g., implemented on a microprocessor) that implements video post-processing functions needed by a video playback application to produce a final image for a player window. In at least one embodiment, a video image compositor may perform lens distortion correction on wide-view camera(s) <b>1170</b>, surround camera(s) <b>1174</b>, and/or on in-cabin monitoring camera sensor(s). In at least one embodiment, in-cabin monitoring camera sensor(s) are preferably monitored by a neural network running on another instance of SoC <b>1104</b>, configured to identify in cabin events and respond accordingly. In at least one embodiment, an in-cabin system may perform, without limitation, lip reading to activate cellular service and place a phone call, dictate emails, change a vehicle's destination, activate or change a vehicle's infotainment system and settings, or provide voice-activated web surfing. In at least one embodiment, certain functions are available to a driver when a vehicle is operating in an autonomous mode and are disabled otherwise.</p><p id="p-0225" num="0206">In at least one embodiment, a video image compositor may include enhanced temporal noise reduction for both spatial and temporal noise reduction. For example, in at least one embodiment, where motion occurs in a video, noise reduction weights spatial information appropriately, decreasing weights of information provided by adjacent frames. In at least one embodiment, where an image or portion of an image does not include motion, temporal noise reduction performed by video image compositor may use information from a previous image to reduce noise in a current image.</p><p id="p-0226" num="0207">In at least one embodiment, a video image compositor may also be configured to perform stereo rectification on input stereo lens frames. In at least one embodiment, a video image compositor may further be used for user interface composition when an operating system desktop is in use, and GPU(s) <b>1108</b> are not required to continuously render new surfaces. In at least one embodiment, when GPU(s) <b>1108</b> are powered on and active doing 3D rendering, a video image compositor may be used to offload GPU(s) <b>1108</b> to improve performance and responsiveness.</p><p id="p-0227" num="0208">In at least one embodiment, one or more SoC of SoC(s) <b>1104</b> may further include a mobile industry processor interface (&#x201c;MIPI&#x201d;) camera serial interface for receiving video and input from cameras, a high-speed interface, and/or a video input block that may be used for a camera and related pixel input functions. In at least one embodiment, one or more of SoC(s) <b>1104</b> may further include an input/output controller(s) that may be controlled by software and may be used for receiving I/O signals that are uncommitted to a specific role.</p><p id="p-0228" num="0209">In at least one embodiment, one or more Soc of SoC(s) <b>1104</b> may further include a broad range of peripheral interfaces to enable communication with peripherals, audio encoders/decoders (&#x201c;codecs&#x201d;), power management, and/or other devices. In at least one embodiment, SoC(s) <b>1104</b> may be used to process data from cameras (e.g., connected over Gigabit Multimedia Serial Link and Ethernet channels), sensors (e.g., LIDAR sensor(s) <b>1164</b>, RADAR sensor(s) <b>1160</b>, etc. that may be connected over Ethernet channels), data from bus <b>1102</b> (e.g., speed of vehicle <b>1100</b>, steering wheel position, etc.), data from GNSS sensor(s) <b>1158</b> (e.g., connected over a Ethernet bus or a CAN bus), etc. In at least one embodiment, one or more SoC of SoC(s) <b>1104</b> may further include dedicated high-performance mass storage controllers that may include own DMA engines, and that may be used to free CPU(s) <b>1106</b> from routine data management tasks.</p><p id="p-0229" num="0210">In at least one embodiment, SoC(s) <b>1104</b> may be an end-to-end platform with a flexible architecture that spans automation Levels 3-5, thereby providing a comprehensive functional safety architecture that leverages and makes efficient use of computer vision and ADAS techniques for diversity and redundancy, and provides a platform for a flexible, reliable driving software stack, along with deep learning tools. In at least one embodiment, SoC(s) <b>1104</b> may be faster, more reliable, and even more energy-efficient and space-efficient than conventional systems. For example, in at least one embodiment, accelerator(s) <b>1114</b>, when combined with CPU(s) <b>1106</b>, GPU(s) <b>1108</b>, and data store(s) <b>1116</b>, may provide for a fast, efficient platform for Level 3-5 autonomous vehicles.</p><p id="p-0230" num="0211">In at least one embodiment, computer vision algorithms may be executed on CPUs, which may be configured using a high-level programming language, such as C, to execute a wide variety of processing algorithms across a wide variety of visual data. However, in at least one embodiment, CPUs are oftentimes unable to meet performance requirements of many computer vision applications, such as those related to execution time and power consumption, for example. In at least one embodiment, many CPUs are unable to execute complex object detection algorithms in real-time, which is used in in-vehicle ADAS applications and in practical Level 3-5 autonomous vehicles.</p><p id="p-0231" num="0212">Embodiments described herein allow for multiple neural networks to be performed simultaneously and/or sequentially, and for results to be combined together to enable Level 3-5 autonomous driving functionality. For example, in at least one embodiment, a CNN executing on a DLA or a discrete GPU (e.g., GPU(s) <b>1120</b>) may include text and word recognition, allowing reading and understanding of traffic signs, including signs for which a neural network has not been specifically trained. In at least one embodiment, a DLA may further include a neural network that is able to identify, interpret, and provide semantic understanding of a sign, and to pass that semantic understanding to path planning modules running on a CPU Complex.</p><p id="p-0232" num="0213">In at least one embodiment, multiple neural networks may be run simultaneously, as for Level 3, 4, or 5 driving. For example, in at least one embodiment, a warning sign stating &#x201c;Caution: flashing lights indicate icy conditions,&#x201d; along with an electric light, may be independently or collectively interpreted by several neural networks. In at least one embodiment, such warning sign itself may be identified as a traffic sign by a first deployed neural network (e.g., a neural network that has been trained), text &#x201c;flashing lights indicate icy conditions&#x201d; may be interpreted by a second deployed neural network, which informs a vehicle's path planning software (preferably executing on a CPU Complex) that when flashing lights are detected, icy conditions exist. In at least one embodiment, a flashing light may be identified by operating a third deployed neural network over multiple frames, informing a vehicle's path-planning software of a presence (or an absence) of flashing lights. In at least one embodiment, all three neural networks may run simultaneously, such as within a DLA and/or on GPU(s) <b>1108</b>.</p><p id="p-0233" num="0214">In at least one embodiment, a CNN for facial recognition and vehicle owner identification may use data from camera sensors to identify presence of an authorized driver and/or owner of vehicle <b>1100</b>. In at least one embodiment, an always-on sensor processing engine may be used to unlock a vehicle when an owner approaches a driver door and turns on lights, and, in a security mode, to disable such vehicle when an owner leaves such vehicle. In this way, SoC(s) <b>1104</b> provide for security against theft and/or carjacking.</p><p id="p-0234" num="0215">In at least one embodiment, a CNN for emergency vehicle detection and identification may use data from microphones <b>1196</b> to detect and identify emergency vehicle sirens. In at least one embodiment, SoC(s) <b>1104</b> use a CNN for classifying environmental and urban sounds, as well as classifying visual data. In at least one embodiment, a CNN running on a DLA is trained to identify a relative closing speed of an emergency vehicle (e.g., by using a Doppler effect). In at least one embodiment, a CNN may also be trained to identify emergency vehicles specific to a local area in which a vehicle is operating, as identified by GNSS sensor(s) <b>1158</b>. In at least one embodiment, when operating in Europe, a CNN will seek to detect European sirens, and when in North America, a CNN will seek to identify only North American sirens. In at least one embodiment, once an emergency vehicle is detected, a control program may be used to execute an emergency vehicle safety routine, slowing a vehicle, pulling over to a side of a road, parking a vehicle, and/or idling a vehicle, with assistance of ultrasonic sensor(s) <b>1162</b>, until emergency vehicles pass.</p><p id="p-0235" num="0216">In at least one embodiment, vehicle <b>1100</b> may include CPU(s) <b>1118</b> (e.g., discrete CPU(s), or dCPU(s)), that may be coupled to SoC(s) <b>1104</b> via a high-speed interconnect (e.g., PCIe). In at least one embodiment, CPU(s) <b>1118</b> may include an &#xd7;86 processor, for example. CPU(s) <b>1118</b> may be used to perform any of a variety of functions, including arbitrating potentially inconsistent results between ADAS sensors and SoC(s) <b>1104</b>, and/or monitoring status and health of controller(s) <b>1136</b> and/or an infotainment system on a chip (&#x201c;infotainment SoC&#x201d;) <b>1130</b>, for example.</p><p id="p-0236" num="0217">In at least one embodiment, vehicle <b>1100</b> may include GPU(s) <b>1120</b> (e.g., discrete GPU(s), or dGPU(s)), that may be coupled to SoC(s) <b>1104</b> via a high-speed interconnect (e.g., NVIDIA's NVLINK channel). In at least one embodiment, GPU(s) <b>1120</b> may provide additional artificial intelligence functionality, such as by executing redundant and/or different neural networks, and may be used to train and/or update neural networks based at least in part on input (e.g., sensor data) from sensors of a vehicle <b>1100</b>.</p><p id="p-0237" num="0218">In at least one embodiment, vehicle <b>1100</b> may further include network interface <b>1124</b> which may include, without limitation, wireless antenna(s) <b>1126</b> (e.g., one or more wireless antennas for different communication protocols, such as a cellular antenna, a Bluetooth antenna, etc.). In at least one embodiment, network interface <b>1124</b> may be used to enable wireless connectivity to Internet cloud services (e.g., with server(s) and/or other network devices), with other vehicles, and/or with computing devices (e.g., client devices of passengers). In at least one embodiment, to communicate with other vehicles, a direct link may be established between vehicle <b>110</b> and another vehicle and/or an indirect link may be established (e.g., across networks and over the Internet). In at least one embodiment, direct links may be provided using a vehicle-to-vehicle communication link. In at least one embodiment, a vehicle-to-vehicle communication link may provide vehicle <b>1100</b> information about vehicles in proximity to vehicle <b>1100</b> (e.g., vehicles in front of, on a side of, and/or behind vehicle <b>1100</b>). In at least one embodiment, such aforementioned functionality may be part of a cooperative adaptive cruise control functionality of vehicle <b>1100</b>.</p><p id="p-0238" num="0219">In at least one embodiment, network interface <b>1124</b> may include an SoC that provides modulation and demodulation functionality and enables controller(s) <b>1136</b> to communicate over wireless networks. In at least one embodiment, network interface <b>1124</b> may include a radio frequency front-end for up-conversion from baseband to radio frequency, and down conversion from radio frequency to baseband. In at least one embodiment, frequency conversions may be performed in any technically feasible fashion. For example, frequency conversions could be performed through well-known processes, and/or using super-heterodyne processes. In at least one embodiment, radio frequency front end functionality may be provided by a separate chip. In at least one embodiment, network interfaces may include wireless functionality for communicating over LTE, WCDMA, UMTS, GSM, CDMA2000, Bluetooth, Bluetooth LE, Wi-Fi, Z-Wave, ZigBee, LoRaWAN, and/or other wireless protocols.</p><p id="p-0239" num="0220">In at least one embodiment, vehicle <b>1100</b> may further include data store(s) <b>1128</b> which may include, without limitation, off-chip (e.g., off SoC(s) <b>1104</b>) storage. In at least one embodiment, data store(s) <b>1128</b> may include, without limitation, one or more storage elements including RAM, SRAM, dynamic random-access memory (&#x201c;DRAM&#x201d;), video random-access memory (&#x201c;VRAM&#x201d;), flash memory, hard disks, and/or other components and/or devices that may store at least one bit of data.</p><p id="p-0240" num="0221">In at least one embodiment, vehicle <b>1100</b> may further include GNSS sensor(s) <b>1158</b> (e.g., GPS and/or assisted GPS sensors), to assist in mapping, perception, occupancy grid generation, and/or path planning functions. In at least one embodiment, any number of GNSS sensor(s) <b>1158</b> may be used, including, for example and without limitation, a GPS using a USB connector with an Ethernet-to-Serial (e.g., RS-232) bridge.</p><p id="p-0241" num="0222">In at least one embodiment, vehicle <b>1100</b> may further include RADAR sensor(s) <b>1160</b>. In at least one embodiment, RADAR sensor(s) <b>1160</b> may be used by vehicle <b>1100</b> for long-range vehicle detection, even in darkness and/or severe weather conditions. In at least one embodiment, RADAR functional safety levels may be ASIL B. In at least one embodiment, RADAR sensor(s) <b>1160</b> may use a CAN bus and/or bus <b>1102</b> (e.g., to transmit data generated by RADAR sensor(s) <b>1160</b>) for control and to access object tracking data, with access to Ethernet channels to access raw data in some examples. In at least one embodiment, a wide variety of RADAR sensor types may be used. For example, and without limitation, RADAR sensor(s) <b>1160</b> may be suitable for front, rear, and side RADAR use. In at least one embodiment, one or more sensor of RADAR sensors(s) <b>1160</b> is a Pulse Doppler RADAR sensor.</p><p id="p-0242" num="0223">In at least one embodiment, RADAR sensor(s) <b>1160</b> may include different configurations, such as long-range with narrow field of view, short-range with wide field of view, short-range side coverage, etc. In at least one embodiment, long-range RADAR may be used for adaptive cruise control functionality. In at least one embodiment, long-range RADAR systems may provide a broad field of view realized by two or more independent scans, such as within a 250 m (meter) range. In at least one embodiment, RADAR sensor(s) <b>1160</b> may help in distinguishing between static and moving objects, and may be used by ADAS system <b>1138</b> for emergency brake assist and forward collision warning. In at least one embodiment, sensors <b>1160</b>(<i>s</i>) included in a long-range RADAR system may include, without limitation, monostatic multimodal RADAR with multiple (e.g., six or more) fixed RADAR antennae and a high-speed CAN and FlexRay interface. In at least one embodiment, with six antennae, a central four antennae may create a focused beam pattern, designed to record vehicle's <b>1100</b> surroundings at higher speeds with minimal interference from traffic in adjacent lanes. In at least one embodiment, another two antennae may expand field of view, making it possible to quickly detect vehicles entering or leaving a lane of vehicle <b>1100</b>.</p><p id="p-0243" num="0224">In at least one embodiment, mid-range RADAR systems may include, as an example, a range of up to 160 m (front) or 80 m (rear), and a field of view of up to 42 degrees (front) or 150 degrees (rear). In at least one embodiment, short-range RADAR systems may include, without limitation, any number of RADAR sensor(s) <b>1160</b> designed to be installed at both ends of a rear bumper. When installed at both ends of a rear bumper, in at least one embodiment, a RADAR sensor system may create two beams that constantly monitor blind spots in a rear direction and next to a vehicle. In at least one embodiment, short-range RADAR systems may be used in ADAS system <b>1138</b> for blind spot detection and/or lane change assist.</p><p id="p-0244" num="0225">In at least one embodiment, vehicle <b>1100</b> may further include ultrasonic sensor(s) <b>1162</b>. In at least one embodiment, ultrasonic sensor(s) <b>1162</b>, which may be positioned at a front, a back, and/or side location of vehicle <b>1100</b>, may be used for parking assist and/or to create and update an occupancy grid. In at least one embodiment, a wide variety of ultrasonic sensor(s) <b>1162</b> may be used, and different ultrasonic sensor(s) <b>1162</b> may be used for different ranges of detection (e.g., 2.5 m, 4 m). In at least one embodiment, ultrasonic sensor(s) <b>1162</b> may operate at functional safety levels of ASIL B.</p><p id="p-0245" num="0226">In at least one embodiment, vehicle <b>1100</b> may include LIDAR sensor(s) <b>1164</b>. In at least one embodiment, LIDAR sensor(s) <b>1164</b> may be used for object and pedestrian detection, emergency braking, collision avoidance, and/or other functions. In at least one embodiment, LIDAR sensor(s) <b>1164</b> may operate at functional safety level ASIL B. In at least one embodiment, vehicle <b>1100</b> may include multiple LIDAR sensors <b>1164</b> (e.g., two, four, six, etc.) that may use an Ethernet channel (e.g., to provide data to a Gigabit Ethernet switch).</p><p id="p-0246" num="0227">In at least one embodiment, LIDAR sensor(s) <b>1164</b> may be capable of providing a list of objects and distances for a 360-degree field of view. In at least one embodiment, commercially available LIDAR sensor(s) <b>1164</b> may have an advertised range of approximately 100 m, with an accuracy of 2 cm to 3 cm, and with support for a 100 Mbps Ethernet connection, for example. In at least one embodiment, one or more non-protruding LIDAR sensors may be used. In such an embodiment, LIDAR sensor(s) <b>1164</b> may include a small device that may be embedded into a front, a rear, a side, and/or a corner location of vehicle <b>1100</b>. In at least one embodiment, LIDAR sensor(s) <b>1164</b>, in such an embodiment, may provide up to a 120-degree horizontal and 35-degree vertical field-of-view, with a 200 m range even for low-reflectivity objects. In at least one embodiment, front-mounted LIDAR sensor(s) <b>1164</b> may be configured for a horizontal field of view between 45 degrees and 135 degrees.</p><p id="p-0247" num="0228">In at least one embodiment, LIDAR technologies, such as 3D flash LIDAR, may also be used. In at least one embodiment, 3D flash LIDAR uses a flash of a laser as a transmission source, to illuminate surroundings of vehicle <b>1100</b> up to approximately 200 m. In at least one embodiment, a flash LIDAR unit includes, without limitation, a receptor, which records laser pulse transit time and reflected light on each pixel, which in turn corresponds to a range from vehicle <b>1100</b> to objects. In at least one embodiment, flash LIDAR may allow for highly accurate and distortion-free images of surroundings to be generated with every laser flash. In at least one embodiment, four flash LIDAR sensors may be deployed, one at each side of vehicle <b>1100</b>. In at least one embodiment, 3D flash LIDAR systems include, without limitation, a solid-state 3D staring array LIDAR camera with no moving parts other than a fan (e.g., a non-scanning LIDAR device). In at least one embodiment, flash LIDAR device may use a 5 nanosecond class I (eye-safe) laser pulse per frame and may capture reflected laser light as a 3D range point cloud and co-registered intensity data.</p><p id="p-0248" num="0229">In at least one embodiment, vehicle <b>1100</b> may further include IMU sensor(s) <b>1166</b>. In at least one embodiment, IMU sensor(s) <b>1166</b> may be located at a center of a rear axle of vehicle <b>1100</b>. In at least one embodiment, IMU sensor(s) <b>1166</b> may include, for example and without limitation, accelerometer(s), magnetometer(s), gyroscope(s), a magnetic compass, magnetic compasses, and/or other sensor types. In at least one embodiment, such as in six-axis applications, IMU sensor(s) <b>1166</b> may include, without limitation, accelerometers and gyroscopes. In at least one embodiment, such as in nine-axis applications, IMU sensor(s) <b>1166</b> may include, without limitation, accelerometers, gyroscopes, and magnetometers.</p><p id="p-0249" num="0230">In at least one embodiment, IMU sensor(s) <b>1166</b> may be implemented as a miniature, high performance GPS-Aided Inertial Navigation System (&#x201c;GPS/INS&#x201d;) that combines micro-electro-mechanical systems (&#x201c;MEMS&#x201d;) inertial sensors, a high-sensitivity GPS receiver, and advanced Kalman filtering algorithms to provide estimates of position, velocity, and attitude. In at least one embodiment, IMU sensor(s) <b>1166</b> may enable vehicle <b>1100</b> to estimate its heading without requiring input from a magnetic sensor by directly observing and correlating changes in velocity from a GPS to IMU sensor(s) <b>1166</b>. In at least one embodiment, IMU sensor(s) <b>1166</b> and GNSS sensor(s) <b>1158</b> may be combined in a single integrated unit.</p><p id="p-0250" num="0231">In at least one embodiment, vehicle <b>1100</b> may include microphone(s) <b>1196</b> placed in and/or around vehicle <b>1100</b>. In at least one embodiment, microphone(s) <b>1196</b> may be used for emergency vehicle detection and identification, among other things.</p><p id="p-0251" num="0232">In at least one embodiment, vehicle <b>1100</b> may further include any number of camera types, including stereo camera(s) <b>1168</b>, wide-view camera(s) <b>1170</b>, infrared camera(s) <b>1172</b>, surround camera(s) <b>1174</b>, long-range camera(s) <b>1198</b>, mid-range camera(s) <b>1176</b>, and/or other camera types. In at least one embodiment, cameras may be used to capture image data around an entire periphery of vehicle <b>1100</b>. In at least one embodiment, which types of cameras used depends on vehicle <b>1100</b>. In at least one embodiment, any combination of camera types may be used to provide necessary coverage around vehicle <b>1100</b>. In at least one embodiment, a number of cameras deployed may differ depending on embodiment. For example, in at least one embodiment, vehicle <b>1100</b> could include six cameras, seven cameras, ten cameras, twelve cameras, or another number of cameras. In at least one embodiment, cameras may support, as an example and without limitation, Gigabit Multimedia Serial Link (&#x201c;GMSL&#x201d;) and/or Gigabit Ethernet communications. In at least one embodiment, each camera might be as described with more detail previously herein with respect to <figref idref="DRAWINGS">FIG. <b>11</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>.</p><p id="p-0252" num="0233">In at least one embodiment, vehicle <b>1100</b> may further include vibration sensor(s) <b>1142</b>. In at least one embodiment, vibration sensor(s) <b>1142</b> may measure vibrations of components of vehicle <b>1100</b>, such as axle(s). For example, in at least one embodiment, changes in vibrations may indicate a change in road surfaces. In at least one embodiment, when two or more vibration sensors <b>1142</b> are used, differences between vibrations may be used to determine friction or slippage of road surface (e.g., when a difference in vibration is between a power-driven axle and a freely rotating axle).</p><p id="p-0253" num="0234">In at least one embodiment, vehicle <b>1100</b> may include ADAS system <b>1138</b>. In at least one embodiment, ADAS system <b>1138</b> may include, without limitation, an SoC, in some examples. In at least one embodiment, ADAS system <b>1138</b> may include, without limitation, any number and combination of an autonomous/adaptive/automatic cruise control (&#x201c;ACC&#x201d;) system, a cooperative adaptive cruise control (&#x201c;CACC&#x201d;) system, a forward crash warning (&#x201c;FCW&#x201d;) system, an automatic emergency braking (&#x201c;AEB&#x201d;) system, a lane departure warning (&#x201c;LDW)&#x201d; system, a lane keep assist (&#x201c;LKA&#x201d;) system, a blind spot warning (&#x201c;BSW&#x201d;) system, a rear cross-traffic warning (&#x201c;RCTW&#x201d;) system, a collision warning (&#x201c;CW&#x201d;) system, a lane centering (&#x201c;LC&#x201d;) system, and/or other systems, features, and/or functionality.</p><p id="p-0254" num="0235">In at least one embodiment, ACC system may use RADAR sensor(s) <b>1160</b>, LIDAR sensor(s) <b>1164</b>, and/or any number of camera(s). In at least one embodiment, ACC system may include a longitudinal ACC system and/or a lateral ACC system. In at least one embodiment, a longitudinal ACC system monitors and controls distance to another vehicle immediately ahead of vehicle <b>1100</b> and automatically adjusts speed of vehicle <b>1100</b> to maintain a safe distance from vehicles ahead. In at least one embodiment, a lateral ACC system performs distance keeping, and advises vehicle <b>1100</b> to change lanes when necessary. In at least one embodiment, a lateral ACC is related to other ADAS applications, such as LC and CW.</p><p id="p-0255" num="0236">In at least one embodiment, a CACC system uses information from other vehicles that may be received via network interface <b>1124</b> and/or wireless antenna(s) <b>1126</b> from other vehicles via a wireless link, or indirectly, over a network connection (e.g., over the Internet). In at least one embodiment, direct links may be provided by a vehicle-to-vehicle (&#x201c;V2V&#x201d;) communication link, while indirect links may be provided by an infrastructure-to-vehicle (&#x201c;I2V&#x201d;) communication link. In general, V2V communication provides information about immediately preceding vehicles (e.g., vehicles immediately ahead of and in same lane as vehicle <b>1100</b>), while I2V communication provides information about traffic further ahead. In at least one embodiment, a CACC system may include either or both I2V and V2V information sources. In at least one embodiment, given information of vehicles ahead of vehicle <b>1100</b>, a CACC system may be more reliable and it has potential to improve traffic flow smoothness and reduce congestion on road.</p><p id="p-0256" num="0237">In at least one embodiment, an FCW system is designed to alert a driver to a hazard, so that such driver may take corrective action. In at least one embodiment, an FCW system uses a front-facing camera and/or RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to provide driver feedback, such as a display, speaker, and/or vibrating component. In at least one embodiment, an FCW system may provide a warning, such as in form of a sound, visual warning, vibration and/or a quick brake pulse.</p><p id="p-0257" num="0238">In at least one embodiment, an AEB system detects an impending forward collision with another vehicle or other object, and may automatically apply brakes if a driver does not take corrective action within a specified time or distance parameter. In at least one embodiment, AEB system may use front-facing camera(s) and/or RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC. In at least one embodiment, when an AEB system detects a hazard, it will typically first alert a driver to take corrective action to avoid collision and, if that driver does not take corrective action, that AEB system may automatically apply brakes in an effort to prevent, or at least mitigate, an impact of a predicted collision. In at least one embodiment, an AEB system may include techniques such as dynamic brake support and/or crash imminent braking.</p><p id="p-0258" num="0239">In at least one embodiment, an LDW system provides visual, audible, and/or tactile warnings, such as steering wheel or seat vibrations, to alert driver when vehicle <b>1100</b> crosses lane markings. In at least one embodiment, an LDW system does not activate when a driver indicates an intentional lane departure, such as by activating a turn signal. In at least one embodiment, an LDW system may use front-side facing cameras, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to provide driver feedback, such as a display, speaker, and/or vibrating component. In at least one embodiment, an LKA system is a variation of an LDW system. In at least one embodiment, an LKA system provides steering input or braking to correct vehicle <b>1100</b> if vehicle <b>1100</b> starts to exit its lane.</p><p id="p-0259" num="0240">In at least one embodiment, a BSW system detects and warns a driver of vehicles in an automobile's blind spot. In at least one embodiment, a BSW system may provide a visual, audible, and/or tactile alert to indicate that merging or changing lanes is unsafe. In at least one embodiment, a BSW system may provide an additional warning when a driver uses a turn signal. In at least one embodiment, a BSW system may use rear-side facing camera(s) and/or RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to driver feedback, such as a display, speaker, and/or vibrating component.</p><p id="p-0260" num="0241">In at least one embodiment, an RCTW system may provide visual, audible, and/or tactile notification when an object is detected outside a rear-camera range when vehicle <b>1100</b> is backing up. In at least one embodiment, an RCTW system includes an AEB system to ensure that vehicle brakes are applied to avoid a crash. In at least one embodiment, an RCTW system may use one or more rear-facing RADAR sensor(s) <b>1160</b>, coupled to a dedicated processor, DSP, FPGA, and/or ASIC, that is electrically coupled to provide driver feedback, such as a display, speaker, and/or vibrating component.</p><p id="p-0261" num="0242">In at least one embodiment, conventional ADAS systems may be prone to false positive results which may be annoying and distracting to a driver, but typically are not catastrophic, because conventional ADAS systems alert a driver and allow that driver to decide whether a safety condition truly exists and act accordingly. In at least one embodiment, vehicle <b>1100</b> itself decides, in case of conflicting results, whether to heed result from a primary computer or a secondary computer (e.g., a first controller or a second controller of controllers <b>1136</b>). For example, in at least one embodiment, ADAS system <b>1138</b> may be a backup and/or secondary computer for providing perception information to a backup computer rationality module. In at least one embodiment, a backup computer rationality monitor may run redundant diverse software on hardware components to detect faults in perception and dynamic driving tasks. In at least one embodiment, outputs from ADAS system <b>1138</b> may be provided to a supervisory MCU. In at least one embodiment, if outputs from a primary computer and outputs from a secondary computer conflict, a supervisory MCU determines how to reconcile conflict to ensure safe operation.</p><p id="p-0262" num="0243">In at least one embodiment, a primary computer may be configured to provide a supervisory MCU with a confidence score, indicating that primary computer's confidence in a chosen result. In at least one embodiment, if that confidence score exceeds a threshold, that supervisory MCU may follow that primary computer's direction, regardless of whether that secondary computer provides a conflicting or inconsistent result. In at least one embodiment, where a confidence score does not meet a threshold, and where primary and secondary computers indicate different results (e.g., a conflict), a supervisory MCU may arbitrate between computers to determine an appropriate outcome.</p><p id="p-0263" num="0244">In at least one embodiment, a supervisory MCU may be configured to run a neural network(s) that is trained and configured to determine, based at least in part on outputs from a primary computer and outputs from a secondary computer, conditions under which that secondary computer provides false alarms. In at least one embodiment, neural network(s) in a supervisory MCU may learn when a secondary computer's output may be trusted, and when it cannot. For example, in at least one embodiment, when that secondary computer is a RADAR-based FCW system, a neural network(s) in that supervisory MCU may learn when an FCW system is identifying metallic objects that are not, in fact, hazards, such as a drainage grate or manhole cover that triggers an alarm. In at least one embodiment, when a secondary computer is a camera-based LDW system, a neural network in a supervisory MCU may learn to override LDW when bicyclists or pedestrians are present and a lane departure is, in fact, a safest maneuver. In at least one embodiment, a supervisory MCU may include at least one of a DLA or a GPU suitable for running neural network(s) with associated memory. In at least one embodiment, a supervisory MCU may comprise and/or be included as a component of SoC(s) <b>1104</b>.</p><p id="p-0264" num="0245">In at least one embodiment, ADAS system <b>1138</b> may include a secondary computer that performs ADAS functionality using traditional rules of computer vision. In at least one embodiment, that secondary computer may use classic computer vision rules (if-then), and presence of a neural network(s) in a supervisory MCU may improve reliability, safety and performance. For example, in at least one embodiment, diverse implementation and intentional non-identity makes an overall system more fault-tolerant, especially to faults caused by software (or software-hardware interface) functionality. For example, in at least one embodiment, if there is a software bug or error in software running on a primary computer, and non-identical software code running on a secondary computer provides a consistent overall result, then a supervisory MCU may have greater confidence that an overall result is correct, and a bug in software or hardware on that primary computer is not causing a material error.</p><p id="p-0265" num="0246">In at least one embodiment, an output of ADAS system <b>1138</b> may be fed into a primary computer's perception block and/or a primary computer's dynamic driving task block. For example, in at least one embodiment, if ADAS system <b>1138</b> indicates a forward crash warning due to an object immediately ahead, a perception block may use this information when identifying objects. In at least one embodiment, a secondary computer may have its own neural network that is trained and thus reduces a risk of false positives, as described herein.</p><p id="p-0266" num="0247">In at least one embodiment, vehicle <b>1100</b> may further include infotainment SoC <b>1130</b> (e.g., an in-vehicle infotainment system (IVI)). Although illustrated and described as an SoC, infotainment system SoC <b>1130</b>, in at least one embodiment, may not be an SoC, and may include, without limitation, two or more discrete components. In at least one embodiment, infotainment SoC <b>1130</b> may include, without limitation, a combination of hardware and software that may be used to provide audio (e.g., music, a personal digital assistant, navigational instructions, news, radio, etc.), video (e.g., TV, movies, streaming, etc.), phone (e.g., hands-free calling), network connectivity (e.g., LTE, WiFi, etc.), and/or information services (e.g., navigation systems, rear-parking assistance, a radio data system, vehicle related information such as fuel level, total distance covered, brake fuel level, oil level, door open/close, air filter information, etc.) to vehicle <b>1100</b>. For example, infotainment SoC <b>1130</b> could include radios, disk players, navigation systems, video players, USB and Bluetooth connectivity, carputers, in-car entertainment, WiFi, steering wheel audio controls, hands free voice control, a heads-up display (&#x201c;HUD&#x201d;), HMI display <b>1134</b>, a telematics device, a control panel (e.g., for controlling and/or interacting with various components, features, and/or systems), and/or other components. In at least one embodiment, infotainment SoC <b>1130</b> may further be used to provide information (e.g., visual and/or audible) to user(s) of vehicle <b>1100</b>, such as information from ADAS system <b>1138</b>, autonomous driving information such as planned vehicle maneuvers, trajectories, surrounding environment information (e.g., intersection information, vehicle information, road information, etc.), and/or other information.</p><p id="p-0267" num="0248">In at least one embodiment, infotainment SoC <b>1130</b> may include any amount and type of GPU functionality. In at least one embodiment, infotainment SoC <b>1130</b> may communicate over bus <b>1102</b> with other devices, systems, and/or components of vehicle <b>1100</b>. In at least one embodiment, infotainment SoC <b>1130</b> may be coupled to a supervisory MCU such that a GPU of an infotainment system may perform some self-driving functions in event that primary controller(s) <b>1136</b> (e.g., primary and/or backup computers of vehicle <b>1100</b>) fail. In at least one embodiment, infotainment SoC <b>1130</b> may put vehicle <b>1100</b> into a chauffeur to safe stop mode, as described herein.</p><p id="p-0268" num="0249">In at least one embodiment, vehicle <b>1100</b> may further include instrument cluster <b>1132</b> (e.g., a digital dash, an electronic instrument cluster, a digital instrument panel, etc.). In at least one embodiment, instrument cluster <b>1132</b> may include, without limitation, a controller and/or supercomputer (e.g., a discrete controller or supercomputer). In at least one embodiment, instrument cluster <b>1132</b> may include, without limitation, any number and combination of a set of instrumentation such as a speedometer, fuel level, oil pressure, tachometer, odometer, turn indicators, gearshift position indicator, seat belt warning light(s), parking-brake warning light(s), engine-malfunction light(s), supplemental restraint system (e.g., airbag) information, lighting controls, safety system controls, navigation information, etc. In some examples, information may be displayed and/or shared among infotainment SoC <b>1130</b> and instrument cluster <b>1132</b>. In at least one embodiment, instrument cluster <b>1132</b> may be included as part of infotainment SoC <b>1130</b>, or vice versa.</p><p id="p-0269" num="0250">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>11</b>C</figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0270" num="0251">In at least one embodiment, vehicle <b>1100</b> may include one or more systems that perform object detections. In at least one embodiment, these systems may include an object detection neural network that is trained using one or more generative adversarial networks. In at least one embodiment, a computer system in vehicle <b>1100</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0271" num="0252"><figref idref="DRAWINGS">FIG. <b>11</b>D</figref> is a diagram of a system for communication between cloud-based server(s) and autonomous vehicle <b>1100</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, according to at least one embodiment. In at least one embodiment, system may include, without limitation, server(s) <b>1178</b>, network(s) <b>1190</b>, and any number and type of vehicles, including vehicle <b>1100</b>. In at least one embodiment, server(s) <b>1178</b> may include, without limitation, a plurality of GPUs <b>1184</b>(A)-<b>1184</b>(H) (collectively referred to herein as GPUs <b>1184</b>), PCIe switches <b>1182</b>(A)-<b>1182</b>(D) (collectively referred to herein as PCIe switches <b>1182</b>), and/or CPUs <b>1180</b>(A)-<b>1180</b>(B) (collectively referred to herein as CPUs <b>1180</b>). In at least one embodiment, GPUs <b>1184</b>, CPUs <b>1180</b>, and PCIe switches <b>1182</b> may be interconnected with high-speed interconnects such as, for example and without limitation, NVLink interfaces <b>1188</b> developed by NVIDIA and/or PCIe connections <b>1186</b>. In at least one embodiment, GPUs <b>1184</b> are connected via an NVLink and/or NVSwitch SoC and GPUs <b>1184</b> and PCIe switches <b>1182</b> are connected via PCIe interconnects. Although eight GPUs <b>1184</b>, two CPUs <b>1180</b>, and four PCIe switches <b>1182</b> are illustrated, this is not intended to be limiting. In at least one embodiment, each of server(s) <b>1178</b> may include, without limitation, any number of GPUs <b>1184</b>, CPUs <b>1180</b>, and/or PCIe switches <b>1182</b>, in any combination. For example, in at least one embodiment, server(s) <b>1178</b> could each include eight, sixteen, thirty-two, and/or more GPUs <b>1184</b>.</p><p id="p-0272" num="0253">In at least one embodiment, server(s) <b>1178</b> may receive, over network(s) <b>1190</b> and from vehicles, image data representative of images showing unexpected or changed road conditions, such as recently commenced road-work. In at least one embodiment, server(s) <b>1178</b> may transmit, over network(s) <b>1190</b> and to vehicles, neural networks <b>1192</b>, updated or otherwise, and/or map information <b>1194</b>, including, without limitation, information regarding traffic and road conditions. In at least one embodiment, updates to map information <b>1194</b> may include, without limitation, updates for HD map <b>1122</b>, such as information regarding construction sites, potholes, detours, flooding, and/or other obstructions. In at least one embodiment, neural networks <b>1192</b>, and/or map information <b>1194</b> may have resulted from new training and/or experiences represented in data received from any number of vehicles in an environment, and/or based at least in part on training performed at a data center (e.g., using server(s) <b>1178</b> and/or other servers).</p><p id="p-0273" num="0254">In at least one embodiment, server(s) <b>1178</b> may be used to train machine learning models (e.g., neural networks) based at least in part on training data. In at least one embodiment, training data may be generated by vehicles, and/or may be generated in a simulation (e.g., using a game engine). In at least one embodiment, any amount of training data is tagged (e.g., where associated neural network benefits from supervised learning) and/or undergoes other pre-processing. In at least one embodiment, any amount of training data is not tagged and/or pre-processed (e.g., where associated neural network does not require supervised learning). In at least one embodiment, once machine learning models are trained, machine learning models may be used by vehicles (e.g., transmitted to vehicles over network(s) <b>1190</b>), and/or machine learning models may be used by server(s) <b>1178</b> to remotely monitor vehicles.</p><p id="p-0274" num="0255">In at least one embodiment, server(s) <b>1178</b> may receive data from vehicles and apply data to up-to-date real-time neural networks for real-time intelligent inferencing. In at least one embodiment, server(s) <b>1178</b> may include deep-learning supercomputers and/or dedicated AI computers powered by GPU(s) <b>1184</b>, such as a DGX and DGX Station machines developed by NVIDIA. However, in at least one embodiment, server(s) <b>1178</b> may include deep learning infrastructure that uses CPU-powered data centers.</p><p id="p-0275" num="0256">In at least one embodiment, deep-learning infrastructure of server(s) <b>1178</b> may be capable of fast, real-time inferencing, and may use that capability to evaluate and verify health of processors, software, and/or associated hardware in vehicle <b>1100</b>. For example, in at least one embodiment, deep-learning infrastructure may receive periodic updates from vehicle <b>1100</b>, such as a sequence of images and/or objects that vehicle <b>1100</b> has located in that sequence of images (e.g., via computer vision and/or other machine learning object classification techniques). In at least one embodiment, deep-learning infrastructure may run its own neural network to identify objects and compare them with objects identified by vehicle <b>1100</b> and, if results do not match and deep-learning infrastructure concludes that AI in vehicle <b>1100</b> is malfunctioning, then server(s) <b>1178</b> may transmit a signal to vehicle <b>1100</b> instructing a fail-safe computer of vehicle <b>1100</b> to assume control, notify passengers, and complete a safe parking maneuver.</p><p id="p-0276" num="0257">In at least one embodiment, server(s) <b>1178</b> may include GPU(s) <b>1184</b> and one or more programmable inference accelerators (e.g., NVIDIA's TensorRT 3 devices). In at least one embodiment, a combination of GPU-powered servers and inference acceleration may make real-time responsiveness possible. In at least one embodiment, such as where performance is less critical, servers powered by CPUs, FPGAs, and other processors may be used for inferencing. In at least one embodiment, hardware structure(s) <b>815</b> are used to perform one or more embodiments. Details regarding hardware structure(x) <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>.</p><heading id="h-0009" level="2">Computer Systems</heading><p id="p-0277" num="0258"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a block diagram illustrating an exemplary computer system, which may be a system with interconnected devices and components, a system-on-a-chip (SOC) or some combination thereof formed with a processor that may include execution units to execute an instruction, according to at least one embodiment. In at least one embodiment, a computer system <b>1200</b> may include, without limitation, a component, such as a processor <b>1202</b> to employ execution units including logic to perform algorithms for process data, in accordance with present disclosure, such as in embodiment described herein. In at least one embodiment, computer system <b>1200</b> may include processors, such as PENTIUM&#xae; Processor family, Xeon&#x2122; Itanium&#xae;, XScale&#x2122; and/or StrongARM&#x2122;, Intel&#xae; Core&#x2122;, or Intel&#xae; Nervana&#x2122; microprocessors available from Intel Corporation of Santa Clara, Calif., although other systems (including PCs having other microprocessors, engineering workstations, set-top boxes and like) may also be used. In at least one embodiment, computer system <b>1200</b> may execute a version of WINDOWS operating system available from Microsoft Corporation of Redmond, Wash., although other operating systems (UNIX and Linux, for example), embedded software, and/or graphical user interfaces, may also be used.</p><p id="p-0278" num="0259">Embodiments may be used in other devices such as handheld devices and embedded applications. Some examples of handheld devices include cellular phones, Internet Protocol devices, digital cameras, personal digital assistants (&#x201c;PDAs&#x201d;), and handheld PCs. In at least one embodiment, embedded applications may include a microcontroller, a digital signal processor (&#x201c;DSP&#x201d;), system on a chip, network computers (&#x201c;NetPCs&#x201d;), set-top boxes, network hubs, wide area network (&#x201c;WAN&#x201d;) switches, or any other system that may perform one or more instructions in accordance with at least one embodiment.</p><p id="p-0279" num="0260">In at least one embodiment, computer system <b>1200</b> may include, without limitation, processor <b>1202</b> that may include, without limitation, one or more execution units <b>1208</b> to perform machine learning model training and/or inferencing according to techniques described herein. In at least one embodiment, computer system <b>1200</b> is a single processor desktop or server system, but in another embodiment, computer system <b>1200</b> may be a multiprocessor system. In at least one embodiment, processor <b>1202</b> may include, without limitation, a complex instruction set computer (&#x201c;CISC&#x201d;) microprocessor, a reduced instruction set computing (&#x201c;RISC&#x201d;) microprocessor, a very long instruction word (&#x201c;VLIW&#x201d;) microprocessor, a processor implementing a combination of instruction sets, or any other processor device, such as a digital signal processor, for example. In at least one embodiment, processor <b>1202</b> may be coupled to a processor bus <b>1210</b> that may transmit data signals between processor <b>1202</b> and other components in computer system <b>1200</b>.</p><p id="p-0280" num="0261">In at least one embodiment, processor <b>1202</b> may include, without limitation, a Level 1 (&#x201c;L1&#x201d;) internal cache memory (&#x201c;cache&#x201d;) <b>1204</b>. In at least one embodiment, processor <b>1202</b> may have a single internal cache or multiple levels of internal cache. In at least one embodiment, cache memory may reside external to processor <b>1202</b>. Other embodiments may also include a combination of both internal and external caches depending on particular implementation and needs. In at least one embodiment, a register file <b>1206</b> may store different types of data in various registers including, without limitation, integer registers, floating point registers, status registers, and an instruction pointer register.</p><p id="p-0281" num="0262">In at least one embodiment, execution unit <b>1208</b>, including, without limitation, logic to perform integer and floating point operations, also resides in processor <b>1202</b>. In at least one embodiment, processor <b>1202</b> may also include a microcode (&#x201c;ucode&#x201d;) read only memory (&#x201c;ROM&#x201d;) that stores microcode for certain macro instructions. In at least one embodiment, execution unit <b>1208</b> may include logic to handle a packed instruction set <b>1209</b>. In at least one embodiment, by including packed instruction set <b>1209</b> in an instruction set of a general-purpose processor, along with associated circuitry to execute instructions, operations used by many multimedia applications may be performed using packed data in processor <b>1202</b>. In at least one embodiment, many multimedia applications may be accelerated and executed more efficiently by using a full width of a processor's data bus for performing operations on packed data, which may eliminate a need to transfer smaller units of data across that processor's data bus to perform one or more operations one data element at a time.</p><p id="p-0282" num="0263">In at least one embodiment, execution unit <b>1208</b> may also be used in microcontrollers, embedded processors, graphics devices, DSPs, and other types of logic circuits. In at least one embodiment, computer system <b>1200</b> may include, without limitation, a memory <b>1220</b>. In at least one embodiment, memory <b>1220</b> may be a Dynamic Random Access Memory (&#x201c;DRAM&#x201d;) device, a Static Random Access Memory (&#x201c;SRAM&#x201d;) device, a flash memory device, or another memory device. In at least one embodiment, memory <b>1220</b> may store instruction(s) <b>1219</b> and/or data <b>1221</b> represented by data signals that may be executed by processor <b>1202</b>.</p><p id="p-0283" num="0264">In at least one embodiment, a system logic chip may be coupled to processor bus <b>1210</b> and memory <b>1220</b>. In at least one embodiment, a system logic chip may include, without limitation, a memory controller hub (&#x201c;MCH&#x201d;) <b>1216</b>, and processor <b>1202</b> may communicate with MCH <b>1216</b> via processor bus <b>1210</b>. In at least one embodiment, MCH <b>1216</b> may provide a high bandwidth memory path <b>1218</b> to memory <b>1220</b> for instruction and data storage and for storage of graphics commands, data and textures. In at least one embodiment, MCH <b>1216</b> may direct data signals between processor <b>1202</b>, memory <b>1220</b>, and other components in computer system <b>1200</b> and to bridge data signals between processor bus <b>1210</b>, memory <b>1220</b>, and a system I/O interface <b>1222</b>. In at least one embodiment, a system logic chip may provide a graphics port for coupling to a graphics controller. In at least one embodiment, MCH <b>1216</b> may be coupled to memory <b>1220</b> through high bandwidth memory path <b>1218</b> and a graphics/video card <b>1212</b> may be coupled to MCH <b>1216</b> through an Accelerated Graphics Port (&#x201c;AGP&#x201d;) interconnect <b>1214</b>.</p><p id="p-0284" num="0265">In at least one embodiment, computer system <b>1200</b> may use system I/O interface <b>1222</b> as a proprietary hub interface bus to couple MCH <b>1216</b> to an I/O controller hub (&#x201c;ICH&#x201d;) <b>1230</b>. In at least one embodiment, ICH <b>1230</b> may provide direct connections to some I/O devices via a local I/O bus. In at least one embodiment, a local I/O bus may include, without limitation, a high-speed I/O bus for connecting peripherals to memory <b>1220</b>, a chipset, and processor <b>1202</b>. Examples may include, without limitation, an audio controller <b>1229</b>, a firmware hub (&#x201c;flash BIOS&#x201d;) <b>1228</b>, a wireless transceiver <b>1226</b>, a data storage <b>1224</b>, a legacy I/O controller <b>1223</b> containing user input and keyboard interfaces <b>1225</b>, a serial expansion port <b>1227</b>, such as a Universal Serial Bus (&#x201c;USB&#x201d;) port, and a network controller <b>1234</b>. In at least one embodiment, data storage <b>1224</b> may comprise a hard disk drive, a floppy disk drive, a CD-ROM device, a flash memory device, or other mass storage device.</p><p id="p-0285" num="0266">In at least one embodiment, <figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a system, which includes interconnected hardware devices or &#x201c;chips&#x201d;, whereas in other embodiments, <figref idref="DRAWINGS">FIG. <b>12</b></figref> may illustrate an exemplary SoC. In at least one embodiment, devices illustrated in <figref idref="DRAWINGS">FIG. <b>12</b></figref> may be interconnected with proprietary interconnects, standardized interconnects (e.g., PCIe) or some combination thereof. In at least one embodiment, one or more components of computer system <b>1200</b> are interconnected using compute express link (CXL) interconnects.</p><p id="p-0286" num="0267">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>12</b></figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0287" num="0268">In at least one embodiment, computer system <b>1200</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, computer system <b>1200</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0288" num="0269"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a block diagram illustrating an electronic device <b>1300</b> for utilizing a processor <b>1310</b>, according to at least one embodiment. In at least one embodiment, electronic device <b>1300</b> may be, for example and without limitation, a notebook, a tower server, a rack server, a blade server, a laptop, a desktop, a tablet, a mobile device, a phone, an embedded computer, or any other suitable electronic device.</p><p id="p-0289" num="0270">In at least one embodiment, electronic device <b>1300</b> may include, without limitation, processor <b>1310</b> communicatively coupled to any suitable number or kind of components, peripherals, modules, or devices. In at least one embodiment, processor <b>1310</b> is coupled using a bus or interface, such as a I<sup>2</sup>C bus, a System Management Bus (&#x201c;SMBus&#x201d;), a Low Pin Count (LPC) bus, a Serial Peripheral Interface (&#x201c;SPI&#x201d;), a High Definition Audio (&#x201c;HDA&#x201d;) bus, a Serial Advance Technology Attachment (&#x201c;SATA&#x201d;) bus, a Universal Serial Bus (&#x201c;USB&#x201d;) (versions 1, 2, 3, etc.), or a Universal Asynchronous Receiver/Transmitter (&#x201c;UART&#x201d;) bus. In at least one embodiment, <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a system, which includes interconnected hardware devices or &#x201c;chips&#x201d;, whereas in other embodiments, <figref idref="DRAWINGS">FIG. <b>13</b></figref> may illustrate an exemplary SoC. In at least one embodiment, devices illustrated in <figref idref="DRAWINGS">FIG. <b>13</b></figref> may be interconnected with proprietary interconnects, standardized interconnects (e.g., PCIe) or some combination thereof. In at least one embodiment, one or more components of <figref idref="DRAWINGS">FIG. <b>13</b></figref> are interconnected using compute express link (CXL) interconnects.</p><p id="p-0290" num="0271">In at least one embodiment, <figref idref="DRAWINGS">FIG. <b>13</b></figref> may include a display <b>1324</b>, a touch screen <b>1325</b>, a touch pad <b>1330</b>, a Near Field Communications unit (&#x201c;NFC&#x201d;) <b>1345</b>, a sensor hub <b>1340</b>, a thermal sensor <b>1346</b>, an Express Chipset (&#x201c;EC&#x201d;) <b>1335</b>, a Trusted Platform Module (&#x201c;TPM&#x201d;) <b>1338</b>, BIOS/firmware/flash memory (&#x201c;BIOS, FW Flash&#x201d;) <b>1322</b>, a DSP <b>1360</b>, a drive <b>1320</b> such as a Solid State Disk (&#x201c;SSD&#x201d;) or a Hard Disk Drive (&#x201c;HDD&#x201d;), a wireless local area network unit (&#x201c;WLAN&#x201d;) <b>1350</b>, a Bluetooth unit <b>1352</b>, a Wireless Wide Area Network unit (&#x201c;WWAN&#x201d;) <b>1356</b>, a Global Positioning System (GPS) unit <b>1355</b>, a camera (&#x201c;USB 3.0 camera&#x201d;) <b>1354</b> such as a USB 3.0 camera, and/or a Low Power Double Data Rate (&#x201c;LPDDR&#x201d;) memory unit (&#x201c;LPDDR3&#x201d;) <b>1315</b> implemented in, for example, an LPDDR3 standard. These components may each be implemented in any suitable manner.</p><p id="p-0291" num="0272">In at least one embodiment, other components may be communicatively coupled to processor <b>1310</b> through components described herein. In at least one embodiment, an accelerometer <b>1341</b>, an ambient light sensor (&#x201c;ALS&#x201d;) <b>1342</b>, a compass <b>1343</b>, and a gyroscope <b>1344</b> may be communicatively coupled to sensor hub <b>1340</b>. In at least one embodiment, a thermal sensor <b>1339</b>, a fan <b>1337</b>, a keyboard <b>1336</b>, and touch pad <b>1330</b> may be communicatively coupled to EC <b>1335</b>. In at least one embodiment, speakers <b>1363</b>, headphones <b>1364</b>, and a microphone (&#x201c;mic&#x201d;) <b>1365</b> may be communicatively coupled to an audio unit (&#x201c;audio codec and class D amp&#x201d;) <b>1362</b>, which may in turn be communicatively coupled to DSP <b>1360</b>. In at least one embodiment, audio unit <b>1362</b> may include, for example and without limitation, an audio coder/decoder (&#x201c;codec&#x201d;) and a class D amplifier. In at least one embodiment, a SIM card (&#x201c;SIM&#x201d;) <b>1357</b> may be communicatively coupled to WWAN unit <b>1356</b>. In at least one embodiment, components such as WLAN unit <b>1350</b> and Bluetooth unit <b>1352</b>, as well as WWAN unit <b>1356</b> may be implemented in a Next Generation Form Factor (&#x201c;NGFF&#x201d;).</p><p id="p-0292" num="0273">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>13</b></figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0293" num="0274">In at least one embodiment, electronic device <b>1300</b> may include one or more systems that perform object detections. In at least one embodiment, these systems may include an object detection neural network that is trained using one or more generative adversarial networks. In at least one embodiment, a computer system in electronic device <b>1300</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0294" num="0275"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates a computer system <b>1400</b>, according to at least one embodiment. In at least one embodiment, computer system <b>1400</b> is configured to implement various processes and methods described throughout this disclosure.</p><p id="p-0295" num="0276">In at least one embodiment, computer system <b>1400</b> comprises, without limitation, at least one central processing unit (&#x201c;CPU&#x201d;) <b>1402</b> that is connected to a communication bus <b>1410</b> implemented using any suitable protocol, such as PCI (&#x201c;Peripheral Component Interconnect&#x201d;), peripheral component interconnect express (&#x201c;PCI-Express&#x201d;), AGP (&#x201c;Accelerated Graphics Port&#x201d;), HyperTransport, or any other bus or point-to-point communication protocol(s). In at least one embodiment, computer system <b>1400</b> includes, without limitation, a main memory <b>1404</b> and control logic (e.g., implemented as hardware, software, or a combination thereof) and data are stored in main memory <b>1404</b>, which may take form of random access memory (&#x201c;RAM&#x201d;). In at least one embodiment, a network interface subsystem (&#x201c;network interface&#x201d;) <b>1422</b> provides an interface to other computing devices and networks for receiving data from and transmitting data to other systems with computer system <b>1400</b>.</p><p id="p-0296" num="0277">In at least one embodiment, computer system <b>1400</b>, in at least one embodiment, includes, without limitation, input devices <b>1408</b>, a parallel processing system <b>1412</b>, and display devices <b>1406</b> that can be implemented using a conventional cathode ray tube (&#x201c;CRT&#x201d;), a liquid crystal display (&#x201c;LCD&#x201d;), a light emitting diode (&#x201c;LED&#x201d;) display, a plasma display, or other suitable display technologies. In at least one embodiment, user input is received from input devices <b>1408</b> such as keyboard, mouse, touchpad, microphone, etc. In at least one embodiment, each module described herein can be situated on a single semiconductor platform to form a processing system.</p><p id="p-0297" num="0278">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>14</b></figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0298" num="0279">In at least one embodiment, computer system <b>1400</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, computer system <b>1400</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0299" num="0280"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates a computer system <b>1500</b>, according to at least one embodiment. In at least one embodiment, computer system <b>1500</b> includes, without limitation, a computer <b>1510</b> and a USB stick <b>1520</b>. In at least one embodiment, computer <b>1510</b> may include, without limitation, any number and type of processor(s) (not shown) and a memory (not shown). In at least one embodiment, computer <b>1510</b> includes, without limitation, a server, a cloud instance, a laptop, and a desktop computer.</p><p id="p-0300" num="0281">In at least one embodiment, USB stick <b>1520</b> includes, without limitation, a processing unit <b>1530</b>, a USB interface <b>1540</b>, and USB interface logic <b>1550</b>. In at least one embodiment, processing unit <b>1530</b> may be any instruction execution system, apparatus, or device capable of executing instructions. In at least one embodiment, processing unit <b>1530</b> may include, without limitation, any number and type of processing cores (not shown). In at least one embodiment, processing unit <b>1530</b> comprises an application specific integrated circuit (&#x201c;ASIC&#x201d;) that is optimized to perform any amount and type of operations associated with machine learning. For instance, in at least one embodiment, processing unit <b>1530</b> is a tensor processing unit (&#x201c;TPC&#x201d;) that is optimized to perform machine learning inference operations. In at least one embodiment, processing unit <b>1530</b> is a vision processing unit (&#x201c;VPU&#x201d;) that is optimized to perform machine vision and machine learning inference operations.</p><p id="p-0301" num="0282">In at least one embodiment, USB interface <b>1540</b> may be any type of USB connector or USB socket. For instance, in at least one embodiment, USB interface <b>1540</b> is a USB 3.0 Type-C socket for data and power. In at least one embodiment, USB interface <b>1540</b> is a USB 3.0 Type-A connector. In at least one embodiment, USB interface logic <b>1550</b> may include any amount and type of logic that enables processing unit <b>1530</b> to interface with devices (e.g., computer <b>1510</b>) via USB connector <b>1540</b>.</p><p id="p-0302" num="0283">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>15</b></figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0303" num="0284">In at least one embodiment, computer system <b>1500</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, computer system <b>1500</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0304" num="0285"><figref idref="DRAWINGS">FIG. <b>16</b>A</figref> illustrates an exemplary architecture in which a plurality of GPUs <b>1610</b>(<b>1</b>)-<b>1610</b>(N) is communicatively coupled to a plurality of multi-core processors <b>1605</b>(<b>1</b>)-<b>1605</b>(M) over high-speed links <b>1640</b>(<b>1</b>)-<b>1640</b>(N) (e.g., buses, point-to-point interconnects, etc.). In at least one embodiment, high-speed links <b>1640</b>(<b>1</b>)-<b>1640</b>(N) support a communication throughput of 4 GB/s, 30 GB/s, 80 GB/s or higher. In at least one embodiment, various interconnect protocols may be used including, but not limited to, PCIe 4.0 or 5.0 and NVLink 2.0. In various figures, &#x201c;N&#x201d; and &#x201c;M&#x201d; represent positive integers, values of which may be different from figure to figure.</p><p id="p-0305" num="0286">In addition, and in at least one embodiment, two or more of GPUs <b>1610</b> are interconnected over high-speed links <b>1629</b>(<b>1</b>)-<b>1629</b>(<b>2</b>), which may be implemented using similar or different protocols/links than those used for high-speed links <b>1640</b>(<b>1</b>)-<b>1640</b>(N). Similarly, two or more of multi-core processors <b>1605</b> may be connected over a high-speed link <b>1628</b> which may be symmetric multi-processor (SMP) buses operating at 20 GB/s, 30 GB/s, 120 GB/s or higher. Alternatively, all communication between various system components shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref> may be accomplished using similar protocols/links (e.g., over a common interconnection fabric).</p><p id="p-0306" num="0287">In at least one embodiment, each multi-core processor <b>1605</b> is communicatively coupled to a processor memory <b>1601</b>(<b>1</b>)-<b>1601</b>(M), via memory interconnects <b>1626</b>(<b>1</b>)-<b>1626</b>(M), respectively, and each GPU <b>1610</b>(<b>1</b>)-<b>1610</b>(N) is communicatively coupled to GPU memory <b>1620</b>(<b>1</b>)-<b>1620</b>(N) over GPU memory interconnects <b>1650</b>(<b>1</b>)-<b>1650</b>(N), respectively. In at least one embodiment, memory interconnects <b>1626</b> and <b>1650</b> may utilize similar or different memory access technologies. By way of example, and not limitation, processor memories <b>1601</b>(<b>1</b>)-<b>1601</b>(M) and GPU memories <b>1620</b> may be volatile memories such as dynamic random access memories (DRAMs) (including stacked DRAMs), Graphics DDR SDRAM (GDDR) (e.g., GDDR5, GDDR6), or High Bandwidth Memory (HBM) and/or may be non-volatile memories such as 3D)(Point or Nano-Ram. In at least one embodiment, some portion of processor memories <b>1601</b> may be volatile memory and another portion may be non-volatile memory (e.g., using a two-level memory (2LM) hierarchy).</p><p id="p-0307" num="0288">As described herein, although various multi-core processors <b>1605</b> and GPUs <b>1610</b> may be physically coupled to a particular memory <b>1601</b>, <b>1620</b>, respectively, and/or a unified memory architecture may be implemented in which a virtual system address space (also referred to as &#x201c;effective address&#x201d; space) is distributed among various physical memories. For example, processor memories <b>1601</b>(<b>1</b>)-<b>1601</b>(M) may each comprise 64 GB of system memory address space and GPU memories <b>1620</b>(<b>1</b>)-<b>1620</b>(N) may each comprise 32 GB of system memory address space resulting in a total of 256 GB addressable memory when M=2 and N=4. Other values for N and M are possible.</p><p id="p-0308" num="0289"><figref idref="DRAWINGS">FIG. <b>16</b>B</figref> illustrates additional details for an interconnection between a multi-core processor <b>1607</b> and a graphics acceleration module <b>1646</b> in accordance with one exemplary embodiment. In at least one embodiment, graphics acceleration module <b>1646</b> may include one or more GPU chips integrated on a line card which is coupled to processor <b>1607</b> via high-speed link <b>1640</b> (e.g., a PCIe bus, NVLink, etc.). In at least one embodiment, graphics acceleration module <b>1646</b> may alternatively be integrated on a package or chip with processor <b>1607</b>.</p><p id="p-0309" num="0290">In at least one embodiment, processor <b>1607</b> includes a plurality of cores <b>1660</b>A-<b>1660</b>D, each with a translation lookaside buffer (&#x201c;TLB&#x201d;) <b>1661</b>A-<b>1661</b>D and one or more caches <b>1662</b>A-<b>1662</b>D. In at least one embodiment, cores <b>1660</b>A-<b>1660</b>D may include various other components for executing instructions and processing data that are not illustrated. In at least one embodiment, caches <b>1662</b>A-<b>1662</b>D may comprise Level 1 (L1) and Level 2 (L2) caches. In addition, one or more shared caches <b>1656</b> may be included in caches <b>1662</b>A-<b>1662</b>D and shared by sets of cores <b>1660</b>A-<b>1660</b>D. For example, one embodiment of processor <b>1607</b> includes 24 cores, each with its own L1 cache, twelve shared L2 caches, and twelve shared L3 caches. In this embodiment, one or more L2 and L3 caches are shared by two adjacent cores. In at least one embodiment, processor <b>1607</b> and graphics acceleration module <b>1646</b> connect with system memory <b>1614</b>, which may include processor memories <b>1601</b>(<b>1</b>)-<b>1601</b>(M) of <figref idref="DRAWINGS">FIG. <b>16</b>A</figref>.</p><p id="p-0310" num="0291">In at least one embodiment, coherency is maintained for data and instructions stored in various caches <b>1662</b>A-<b>1662</b>D, <b>1656</b> and system memory <b>1614</b> via inter-core communication over a coherence bus <b>1664</b>. In at least one embodiment, for example, each cache may have cache coherency logic/circuitry associated therewith to communicate to over coherence bus <b>1664</b> in response to detected reads or writes to particular cache lines. In at least one embodiment, a cache snooping protocol is implemented over coherence bus <b>1664</b> to snoop cache accesses.</p><p id="p-0311" num="0292">In at least one embodiment, a proxy circuit <b>1625</b> communicatively couples graphics acceleration module <b>1646</b> to coherence bus <b>1664</b>, allowing graphics acceleration module <b>1646</b> to participate in a cache coherence protocol as a peer of cores <b>1660</b>A-<b>1660</b>D. In particular, in at least one embodiment, an interface <b>1635</b> provides connectivity to proxy circuit <b>1625</b> over high-speed link <b>1640</b> and an interface <b>1637</b> connects graphics acceleration module <b>1646</b> to high-speed link <b>1640</b>.</p><p id="p-0312" num="0293">In at least one embodiment, an accelerator integration circuit <b>1636</b> provides cache management, memory access, context management, and interrupt management services on behalf of a plurality of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) of graphics acceleration module <b>1646</b>. In at least one embodiment, graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) may each comprise a separate graphics processing unit (GPU). In at least one embodiment, graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) alternatively may comprise different types of graphics processing engines within a GPU, such as graphics execution units, media processing engines (e.g., video encoders/decoders), samplers, and blit engines. In at least one embodiment, graphics acceleration module <b>1646</b> may be a GPU with a plurality of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) or graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) may be individual GPUs integrated on a common package, line card, or chip.</p><p id="p-0313" num="0294">In at least one embodiment, accelerator integration circuit <b>1636</b> includes a memory management unit (MMU) <b>1639</b> for performing various memory management functions such as virtual-to-physical memory translations (also referred to as effective-to-real memory translations) and memory access protocols for accessing system memory <b>1614</b>. In at least one embodiment, MMU <b>1639</b> may also include a translation lookaside buffer (TLB) (not shown) for caching virtual/effective to physical/real address translations. In at least one embodiment, a cache <b>1638</b> can store commands and data for efficient access by graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N). In at least one embodiment, data stored in cache <b>1638</b> and graphics memories <b>1633</b>(<b>1</b>)-<b>1633</b>(M) is kept coherent with core caches <b>1662</b>A-<b>1662</b>D, <b>1656</b> and system memory <b>1614</b>, possibly using a fetch unit <b>1644</b>. As mentioned, this may be accomplished via proxy circuit <b>1625</b> on behalf of cache <b>1638</b> and memories <b>1633</b>(<b>1</b>)-<b>1633</b>(M) (e.g., sending updates to cache <b>1638</b> related to modifications/accesses of cache lines on processor caches <b>1662</b>A-<b>1662</b>D, <b>1656</b> and receiving updates from cache <b>1638</b>).</p><p id="p-0314" num="0295">In at least one embodiment, a set of registers <b>1645</b> store context data for threads executed by graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) and a context management circuit <b>1648</b> manages thread contexts. For example, context management circuit <b>1648</b> may perform save and restore operations to save and restore contexts of various threads during contexts switches (e.g., where a first thread is saved and a second thread is stored so that a second thread can be execute by a graphics processing engine). For example, on a context switch, context management circuit <b>1648</b> may store current register values to a designated region in memory (e.g., identified by a context pointer). It may then restore register values when returning to a context. In at least one embodiment, an interrupt management circuit <b>1647</b> receives and processes interrupts received from system devices.</p><p id="p-0315" num="0296">In at least one embodiment, virtual/effective addresses from a graphics processing engine <b>1631</b> are translated to real/physical addresses in system memory <b>1614</b> by MMU <b>1639</b>. In at least one embodiment, accelerator integration circuit <b>1636</b> supports multiple (e.g., 4, 8, 16) graphics accelerator modules <b>1646</b> and/or other accelerator devices. In at least one embodiment, graphics accelerator module <b>1646</b> may be dedicated to a single application executed on processor <b>1607</b> or may be shared between multiple applications. In at least one embodiment, a virtualized graphics execution environment is presented in which resources of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) are shared with multiple applications or virtual machines (VMs). In at least one embodiment, resources may be subdivided into &#x201c;slices&#x201d; which are allocated to different VMs and/or applications based on processing requirements and priorities associated with VMs and/or applications.</p><p id="p-0316" num="0297">In at least one embodiment, accelerator integration circuit <b>1636</b> performs as a bridge to a system for graphics acceleration module <b>1646</b> and provides address translation and system memory cache services. In addition, in at least one embodiment, accelerator integration circuit <b>1636</b> may provide virtualization facilities for a host processor to manage virtualization of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N), interrupts, and memory management.</p><p id="p-0317" num="0298">In at least one embodiment, because hardware resources of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) are mapped explicitly to a real address space seen by host processor <b>1607</b>, any host processor can address these resources directly using an effective address value. In at least one embodiment, one function of accelerator integration circuit <b>1636</b> is physical separation of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) so that they appear to a system as independent units.</p><p id="p-0318" num="0299">In at least one embodiment, one or more graphics memories <b>1633</b>(<b>1</b>)-<b>1633</b>(M) are coupled to each of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N), respectively and N=M. In at least one embodiment, graphics memories <b>1633</b>(<b>1</b>)-<b>1633</b>(M) store instructions and data being processed by each of graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N). In at least one embodiment, graphics memories <b>1633</b>(<b>1</b>)-<b>1633</b>(M) may be volatile memories such as DRAMs (including stacked DRAMs), GDDR memory (e.g., GDDR5, GDDR6), or HBM, and/or may be non-volatile memories such as 3D XPoint or Nano-Ram.</p><p id="p-0319" num="0300">In at least one embodiment, to reduce data traffic over high-speed link <b>1640</b>, biasing techniques can be used to ensure that data stored in graphics memories <b>1633</b>(<b>1</b>)-<b>1633</b>(M) is data that will be used most frequently by graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) and preferably not used by cores <b>1660</b>A-<b>1660</b>D (at least not frequently). Similarly, in at least one embodiment, a biasing mechanism attempts to keep data needed by cores (and preferably not graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N)) within caches <b>1662</b>A-<b>1662</b>D, <b>1656</b> and system memory <b>1614</b>.</p><p id="p-0320" num="0301"><figref idref="DRAWINGS">FIG. <b>16</b>C</figref> illustrates another exemplary embodiment in which accelerator integration circuit <b>1636</b> is integrated within processor <b>1607</b>. In this embodiment, graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) communicate directly over high-speed link <b>1640</b> to accelerator integration circuit <b>1636</b> via interface <b>1637</b> and interface <b>1635</b> (which, again, may be any form of bus or interface protocol). In at least one embodiment, accelerator integration circuit <b>1636</b> may perform similar operations as those described with respect to <figref idref="DRAWINGS">FIG. <b>16</b>B</figref>, but potentially at a higher throughput given its close proximity to coherence bus <b>1664</b> and caches <b>1662</b>A-<b>1662</b>D, <b>1656</b>. In at least one embodiment, an accelerator integration circuit supports different programming models including a dedicated-process programming model (no graphics acceleration module virtualization) and shared programming models (with virtualization), which may include programming models which are controlled by accelerator integration circuit <b>1636</b> and programming models which are controlled by graphics acceleration module <b>1646</b>.</p><p id="p-0321" num="0302">In at least one embodiment, graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) are dedicated to a single application or process under a single operating system. In at least one embodiment, a single application can funnel other application requests to graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N), providing virtualization within a VM/partition.</p><p id="p-0322" num="0303">In at least one embodiment, graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N), may be shared by multiple VM/application partitions. In at least one embodiment, shared models may use a system hypervisor to virtualize graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) to allow access by each operating system. In at least one embodiment, for single-partition systems without a hypervisor, graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) are owned by an operating system. In at least one embodiment, an operating system can virtualize graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) to provide access to each process or application.</p><p id="p-0323" num="0304">In at least one embodiment, graphics acceleration module <b>1646</b> or an individual graphics processing engine <b>1631</b>(<b>1</b>)-<b>1631</b>(N) selects a process element using a process handle. In at least one embodiment, process elements are stored in system memory <b>1614</b> and are addressable using an effective address to real address translation technique described herein. In at least one embodiment, a process handle may be an implementation-specific value provided to a host process when registering its context with graphics processing engine <b>1631</b>(<b>1</b>)-<b>1631</b>(N) (that is, calling system software to add a process element to a process element linked list). In at least one embodiment, a lower 16-bits of a process handle may be an offset of a process element within a process element linked list.</p><p id="p-0324" num="0305"><figref idref="DRAWINGS">FIG. <b>16</b>D</figref> illustrates an exemplary accelerator integration slice <b>1690</b>. In at least one embodiment, a &#x201c;slice&#x201d; comprises a specified portion of processing resources of accelerator integration circuit <b>1636</b>. In at least one embodiment, an application is effective address space <b>1682</b> within system memory <b>1614</b> stores process elements <b>1683</b>. In at least one embodiment, process elements <b>1683</b> are stored in response to GPU invocations <b>1681</b> from applications <b>1680</b> executed on processor <b>1607</b>. In at least one embodiment, a process element <b>1683</b> contains process state for corresponding application <b>1680</b>. In at least one embodiment, a work descriptor (WD) <b>1684</b> contained in process element <b>1683</b> can be a single job requested by an application or may contain a pointer to a queue of jobs. In at least one embodiment, WD <b>1684</b> is a pointer to a job request queue in an application's effective address space <b>1682</b>.</p><p id="p-0325" num="0306">In at least one embodiment, graphics acceleration module <b>1646</b> and/or individual graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N) can be shared by all or a subset of processes in a system. In at least one embodiment, an infrastructure for setting up process states and sending a WD <b>1684</b> to a graphics acceleration module <b>1646</b> to start a job in a virtualized environment may be included.</p><p id="p-0326" num="0307">In at least one embodiment, a dedicated-process programming model is implementation-specific. In at least one embodiment, in this model, a single process owns graphics acceleration module <b>1646</b> or an individual graphics processing engine <b>1631</b>. In at least one embodiment, when graphics acceleration module <b>1646</b> is owned by a single process, a hypervisor initializes accelerator integration circuit <b>1636</b> for an owning partition and an operating system initializes accelerator integration circuit <b>1636</b> for an owning process when graphics acceleration module <b>1646</b> is assigned.</p><p id="p-0327" num="0308">In at least one embodiment, in operation, a WD fetch unit <b>1691</b> in accelerator integration slice <b>1690</b> fetches next WD <b>1684</b>, which includes an indication of work to be done by one or more graphics processing engines of graphics acceleration module <b>1646</b>. In at least one embodiment, data from WD <b>1684</b> may be stored in registers <b>1645</b> and used by MMU <b>1639</b>, interrupt management circuit <b>1647</b> and/or context management circuit <b>1648</b> as illustrated. For example, one embodiment of MMU <b>1639</b> includes segment/page walk circuitry for accessing segment/page tables <b>1686</b> within an OS virtual address space <b>1685</b>. In at least one embodiment, interrupt management circuit <b>1647</b> may process interrupt events <b>1692</b> received from graphics acceleration module <b>1646</b>. In at least one embodiment, when performing graphics operations, an effective address <b>1693</b> generated by a graphics processing engine <b>1631</b>(<b>1</b>)-<b>1631</b>(N) is translated to a real address by MMU <b>1639</b>.</p><p id="p-0328" num="0309">In at least one embodiment, registers <b>1645</b> are duplicated for each graphics processing engine <b>1631</b>(<b>1</b>)-<b>1631</b>(N) and/or graphics acceleration module <b>1646</b> and may be initialized by a hypervisor or an operating system. In at least one embodiment, each of these duplicated registers may be included in an accelerator integration slice <b>1690</b>. Exemplary registers that may be initialized by a hypervisor are shown in Table 1.</p><p id="p-0329" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Hypervisor Initialized Registers</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Register</entry><entry/></row><row><entry>#</entry><entry>Description</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>1</entry><entry>Slice Control Register</entry></row><row><entry>2</entry><entry>Real Address (RA) Scheduled Processes Area Pointer</entry></row><row><entry>3</entry><entry>Authority Mask Override Register</entry></row><row><entry>4</entry><entry>Interrupt Vector Table Entry Offset</entry></row><row><entry>5</entry><entry>Interrupt Vector Table Entry Limit</entry></row><row><entry>6</entry><entry>State Register</entry></row><row><entry>7</entry><entry>Logical Partition ID</entry></row><row><entry>8</entry><entry>Real address (RA) Hypervisor Accelerator Utilization </entry></row><row><entry/><entry>Record Pointer</entry></row><row><entry>9</entry><entry>Storage Description Register</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0330" num="0310">Exemplary registers that may be initialized by an operating system are shown in Table 2.</p><p id="p-0331" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Operating System Initialized Registers</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="182pt" align="left"/><tbody valign="top"><row><entry>Register</entry><entry/></row><row><entry>#</entry><entry>Description</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>1</entry><entry>Process and Thread Identification</entry></row><row><entry>2</entry><entry>Effective Address (EA) Context Save/Restore Pointer</entry></row><row><entry>3</entry><entry>Virtual Address (VA) Accelerator Utilization Record Pointer</entry></row><row><entry>4</entry><entry>Virtual Address (VA) Storage Segment Table Pointer</entry></row><row><entry>5</entry><entry>Authority Mask</entry></row><row><entry>6</entry><entry>Work descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0332" num="0311">In at least one embodiment, each WD <b>1684</b> is specific to a particular graphics acceleration module <b>1646</b> and/or graphics processing engines <b>1631</b>(<b>1</b>)-<b>1631</b>(N). In at least one embodiment, it contains all information required by a graphics processing engine <b>1631</b>(<b>1</b>)-<b>1631</b>(N) to do work, or it can be a pointer to a memory location where an application has set up a command queue of work to be completed.</p><p id="p-0333" num="0312"><figref idref="DRAWINGS">FIG. <b>16</b>E</figref> illustrates additional details for one exemplary embodiment of a shared model. This embodiment includes a hypervisor real address space <b>1698</b> in which a process element list <b>1699</b> is stored. In at least one embodiment, hypervisor real address space <b>1698</b> is accessible via a hypervisor <b>1696</b> which virtualizes graphics acceleration module engines for operating system <b>1695</b>.</p><p id="p-0334" num="0313">In at least one embodiment, shared programming models allow for all or a subset of processes from all or a subset of partitions in a system to use a graphics acceleration module <b>1646</b>. In at least one embodiment, there are two programming models where graphics acceleration module <b>1646</b> is shared by multiple processes and partitions, namely time-sliced shared and graphics directed shared.</p><p id="p-0335" num="0314">In at least one embodiment, in this model, system hypervisor <b>1696</b> owns graphics acceleration module <b>1646</b> and makes its function available to all operating systems <b>1695</b>. In at least one embodiment, for a graphics acceleration module <b>1646</b> to support virtualization by system hypervisor <b>1696</b>, graphics acceleration module <b>1646</b> may adhere to certain requirements, such as (<b>1</b>) an application's job request must be autonomous (that is, state does not need to be maintained between jobs), or graphics acceleration module <b>1646</b> must provide a context save and restore mechanism, (2) an application's job request is guaranteed by graphics acceleration module <b>1646</b> to complete in a specified amount of time, including any translation faults, or graphics acceleration module <b>1646</b> provides an ability to preempt processing of a job, and (3) graphics acceleration module <b>1646</b> must be guaranteed fairness between processes when operating in a directed shared programming model.</p><p id="p-0336" num="0315">In at least one embodiment, application <b>1680</b> is required to make an operating system <b>1695</b> system call with a graphics acceleration module type, a work descriptor (WD), an authority mask register (AMR) value, and a context save/restore area pointer (CSRP). In at least one embodiment, graphics acceleration module type describes a targeted acceleration function for a system call. In at least one embodiment, graphics acceleration module type may be a system-specific value. In at least one embodiment, WD is formatted specifically for graphics acceleration module <b>1646</b> and can be in a form of a graphics acceleration module <b>1646</b> command, an effective address pointer to a user-defined structure, an effective address pointer to a queue of commands, or any other data structure to describe work to be done by graphics acceleration module <b>1646</b>.</p><p id="p-0337" num="0316">In at least one embodiment, an AMR value is an AMR state to use for a current process. In at least one embodiment, a value passed to an operating system is similar to an application setting an AMR. In at least one embodiment, if accelerator integration circuit <b>1636</b> (not shown) and graphics acceleration module <b>1646</b> implementations do not support a User Authority Mask Override Register (UAMOR), an operating system may apply a current UAMOR value to an AMR value before passing an AMR in a hypervisor call. In at least one embodiment, hypervisor <b>1696</b> may optionally apply a current Authority Mask Override Register (AMOR) value before placing an AMR into process element <b>1683</b>. In at least one embodiment, CSRP is one of registers <b>1645</b> containing an effective address of an area in an application's effective address space <b>1682</b> for graphics acceleration module <b>1646</b> to save and restore context state. In at least one embodiment, this pointer is optional if no state is required to be saved between jobs or when a job is preempted. In at least one embodiment, context save/restore area may be pinned system memory.</p><p id="p-0338" num="0317">Upon receiving a system call, operating system <b>1695</b> may verify that application <b>1680</b> has registered and been given authority to use graphics acceleration module <b>1646</b>. In at least one embodiment, operating system <b>1695</b> then calls hypervisor <b>1696</b> with information shown in Table 3.</p><p id="p-0339" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>OS to Hypervisor Call Parameters</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="49pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><tbody valign="top"><row><entry>Parameter</entry><entry/></row><row><entry>#</entry><entry>Description</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>1</entry><entry>A work descriptor (WD)</entry></row><row><entry>2</entry><entry>An Authority Mask Register (AMR) value </entry></row><row><entry/><entry>(potentially masked)</entry></row><row><entry>3</entry><entry>An effective address (EA) Context Save/Restore Area </entry></row><row><entry/><entry>Pointer (CSRP)</entry></row><row><entry>4</entry><entry>A process ID (PID) and optional thread ID (TID)</entry></row><row><entry>5</entry><entry>A virtual address (VA) accelerator utilization record </entry></row><row><entry/><entry>pointer (AURP)</entry></row><row><entry>6</entry><entry>Virtual address of storage segment table pointer (SSTP)</entry></row><row><entry>7</entry><entry>A logical interrupt service number (LISN)</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0340" num="0318">In at least one embodiment, upon receiving a hypervisor call, hypervisor <b>1696</b> verifies that operating system <b>1695</b> has registered and been given authority to use graphics acceleration module <b>1646</b>. In at least one embodiment, hypervisor <b>1696</b> then puts process element <b>1683</b> into a process element linked list for a corresponding graphics acceleration module <b>1646</b> type. In at least one embodiment, a process element may include information shown in Table 4.</p><p id="p-0341" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Process Element Information</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="175pt" align="left"/><tbody valign="top"><row><entry>Element</entry><entry/></row><row><entry>#</entry><entry>Description</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>&#x2002;1</entry><entry>A work descriptor (WD)</entry></row><row><entry>&#x2002;2</entry><entry>An Authority Mask Register (AMR) value </entry></row><row><entry/><entry>(potentially masked).</entry></row><row><entry>&#x2002;3</entry><entry>An effective address (EA) Context Save/Restore Area </entry></row><row><entry/><entry>Pointer (CSRP)</entry></row><row><entry>&#x2002;4</entry><entry>A process ID (PID) and optional thread ID (TID)</entry></row><row><entry>&#x2002;5</entry><entry>A virtual address (VA) accelerator utilization record </entry></row><row><entry/><entry>pointer (AURP)</entry></row><row><entry>&#x2002;6</entry><entry>Virtual address of storage segment table pointer (SSTP)</entry></row><row><entry>&#x2002;7</entry><entry>A logical interrupt service number (LISN)</entry></row><row><entry>&#x2002;8</entry><entry>Interrupt vector table, derived from hypervisor call </entry></row><row><entry/><entry>parameters</entry></row><row><entry>&#x2002;9</entry><entry>A state register (SR) value</entry></row><row><entry>10</entry><entry>A logical partition ID (LPID)</entry></row><row><entry>11</entry><entry>A real address (RA) hypervisor accelerator utilization </entry></row><row><entry/><entry>record pointer</entry></row><row><entry>12</entry><entry>Storage Descriptor Register (SDR)</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0342" num="0319">In at least one embodiment, hypervisor initializes a plurality of accelerator integration slice <b>1690</b> registers <b>1645</b>.</p><p id="p-0343" num="0320">As illustrated in <figref idref="DRAWINGS">FIG. <b>16</b>F</figref>, in at least one embodiment, a unified memory is used, addressable via a common virtual memory address space used to access physical processor memories <b>1601</b>(<b>1</b>)-<b>1601</b>(N) and GPU memories <b>1620</b>(<b>1</b>)-<b>1620</b>(N). In this implementation, operations executed on GPUs <b>1610</b>(<b>1</b>)-<b>1610</b>(N) utilize a same virtual/effective memory address space to access processor memories <b>1601</b>(<b>1</b>)-<b>1601</b>(M) and vice versa, thereby simplifying programmability. In at least one embodiment, a first portion of a virtual/effective address space is allocated to processor memory <b>1601</b>(<b>1</b>), a second portion to second processor memory <b>1601</b>(N), a third portion to GPU memory <b>1620</b>(<b>1</b>), and so on. In at least one embodiment, an entire virtual/effective memory space (sometimes referred to as an effective address space) is thereby distributed across each of processor memories <b>1601</b> and GPU memories <b>1620</b>, allowing any processor or GPU to access any physical memory with a virtual address mapped to that memory.</p><p id="p-0344" num="0321">In at least one embodiment, bias/coherence management circuitry <b>1694</b>A-<b>1694</b>E within one or more of MMUs <b>1639</b>A-<b>1639</b>E ensures cache coherence between caches of one or more host processors (e.g., <b>1605</b>) and GPUs <b>1610</b> and implements biasing techniques indicating physical memories in which certain types of data should be stored. In at least one embodiment, while multiple instances of bias/coherence management circuitry <b>1694</b>A-<b>1694</b>E are illustrated in <figref idref="DRAWINGS">FIG. <b>16</b>F</figref>, bias/coherence circuitry may be implemented within an MMU of one or more host processors <b>1605</b> and/or within accelerator integration circuit <b>1636</b>.</p><p id="p-0345" num="0322">One embodiment allows GPU memories <b>1620</b> to be mapped as part of system memory, and accessed using shared virtual memory (SVM) technology, but without suffering performance drawbacks associated with full system cache coherence. In at least one embodiment, an ability for GPU memories <b>1620</b> to be accessed as system memory without onerous cache coherence overhead provides a beneficial operating environment for GPU offload. In at least one embodiment, this arrangement allows software of host processor <b>1605</b> to setup operands and access computation results, without overhead of tradition I/O DMA data copies. In at least one embodiment, such traditional copies involve driver calls, interrupts and memory mapped I/O (MMIO) accesses that are all inefficient relative to simple memory accesses. In at least one embodiment, an ability to access GPU memories <b>1620</b> without cache coherence overheads can be critical to execution time of an offloaded computation. In at least one embodiment, in cases with substantial streaming write memory traffic, for example, cache coherence overhead can significantly reduce an effective write bandwidth seen by a GPU <b>1610</b>. In at least one embodiment, efficiency of operand setup, efficiency of results access, and efficiency of GPU computation may play a role in determining effectiveness of a GPU offload.</p><p id="p-0346" num="0323">In at least one embodiment, selection of GPU bias and host processor bias is driven by a bias tracker data structure. In at least one embodiment, a bias table may be used, for example, which may be a page-granular structure (e.g., controlled at a granularity of a memory page) that includes 1 or 2 bits per GPU-attached memory page. In at least one embodiment, a bias table may be implemented in a stolen memory range of one or more GPU memories <b>1620</b>, with or without a bias cache in a GPU <b>1610</b> (e.g., to cache frequently/recently used entries of a bias table). Alternatively, in at least one embodiment, an entire bias table may be maintained within a GPU.</p><p id="p-0347" num="0324">In at least one embodiment, a bias table entry associated with each access to a GPU attached memory <b>1620</b> is accessed prior to actual access to a GPU memory, causing following operations. In at least one embodiment, local requests from a GPU <b>1610</b> that find their page in GPU bias are forwarded directly to a corresponding GPU memory <b>1620</b>. In at least one embodiment, local requests from a GPU that find their page in host bias are forwarded to processor <b>1605</b> (e.g., over a high-speed link as described herein). In at least one embodiment, requests from processor <b>1605</b> that find a requested page in host processor bias complete a request like a normal memory read. Alternatively, requests directed to a GPU-biased page may be forwarded to a GPU <b>1610</b>. In at least one embodiment, a GPU may then transition a page to a host processor bias if it is not currently using a page. In at least one embodiment, a bias state of a page can be changed either by a software-based mechanism, a hardware-assisted software-based mechanism, or, for a limited set of cases, a purely hardware-based mechanism.</p><p id="p-0348" num="0325">In at least one embodiment, one mechanism for changing bias state employs an API call (e.g., OpenCL), which, in turn, calls a GPU's device driver which, in turn, sends a message (or enqueues a command descriptor) to a GPU directing it to change a bias state and, for some transitions, perform a cache flushing operation in a host. In at least one embodiment, a cache flushing operation is used for a transition from host processor <b>1605</b> bias to GPU bias, but is not for an opposite transition.</p><p id="p-0349" num="0326">In at least one embodiment, cache coherency is maintained by temporarily rendering GPU-biased pages uncacheable by host processor <b>1605</b>. In at least one embodiment, to access these pages, processor <b>1605</b> may request access from GPU <b>1610</b>, which may or may not grant access right away. In at least one embodiment, thus, to reduce communication between processor <b>1605</b> and GPU <b>1610</b> it is beneficial to ensure that GPU-biased pages are those which are required by a GPU but not host processor <b>1605</b> and vice versa.</p><p id="p-0350" num="0327">Hardware structure(s) <b>815</b> are used to perform one or more embodiments. Details regarding a hardware structure(s) <b>815</b> may be provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>.</p><p id="p-0351" num="0328"><figref idref="DRAWINGS">FIG. <b>17</b></figref> illustrates exemplary integrated circuits and associated graphics processors that may be fabricated using one or more IP cores, according to various embodiments described herein. In addition to what is illustrated, other logic and circuits may be included in at least one embodiment, including additional graphics processors/cores, peripheral interface controllers, or general-purpose processor cores.</p><p id="p-0352" num="0329"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram illustrating an exemplary system on a chip integrated circuit <b>1700</b> that may be fabricated using one or more IP cores, according to at least one embodiment. In at least one embodiment, integrated circuit <b>1700</b> includes one or more application processor(s) <b>1705</b> (e.g., CPUs), at least one graphics processor <b>1710</b>, and may additionally include an image processor <b>1715</b> and/or a video processor <b>1720</b>, any of which may be a modular IP core. In at least one embodiment, integrated circuit <b>1700</b> includes peripheral or bus logic including a USB controller <b>1725</b>, a UART controller <b>1730</b>, an SPI/SDIO controller <b>1735</b>, and an I<sup>2</sup>2S/I<sup>2</sup>2C controller <b>1740</b>. In at least one embodiment, integrated circuit <b>1700</b> can include a display device <b>1745</b> coupled to one or more of a high-definition multimedia interface (HDMI) controller <b>1750</b> and a mobile industry processor interface (MIPI) display interface <b>1755</b>. In at least one embodiment, storage may be provided by a flash memory subsystem <b>1760</b> including flash memory and a flash memory controller. In at least one embodiment, a memory interface may be provided via a memory controller <b>1765</b> for access to SDRAM or SRAM memory devices. In at least one embodiment, some integrated circuits additionally include an embedded security engine <b>1770</b>.</p><p id="p-0353" num="0330">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in integrated circuit <b>1700</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0354" num="0331">In at least one embodiment, exemplary system on a chip integrated circuit <b>1700</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, exemplary system on a chip integrated circuit <b>1700</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0355" num="0332"><figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>B</figref> illustrate exemplary integrated circuits and associated graphics processors that may be fabricated using one or more IP cores, according to various embodiments described herein. In addition to what is illustrated, other logic and circuits may be included in at least one embodiment, including additional graphics processors/cores, peripheral interface controllers, or general-purpose processor cores.</p><p id="p-0356" num="0333"><figref idref="DRAWINGS">FIGS. <b>18</b>A-<b>18</b>B</figref> are block diagrams illustrating exemplary graphics processors for use within an SoC, according to embodiments described herein. <figref idref="DRAWINGS">FIG. <b>18</b>A</figref> illustrates an exemplary graphics processor <b>1810</b> of a system on a chip integrated circuit that may be fabricated using one or more IP cores, according to at least one embodiment. <figref idref="DRAWINGS">FIG. <b>18</b>B</figref> illustrates an additional exemplary graphics processor <b>1840</b> of a system on a chip integrated circuit that may be fabricated using one or more IP cores, according to at least one embodiment. In at least one embodiment, graphics processor <b>1810</b> of <figref idref="DRAWINGS">FIG. <b>18</b>A</figref> is a low power graphics processor core. In at least one embodiment, graphics processor <b>1840</b> of <figref idref="DRAWINGS">FIG. <b>18</b>B</figref> is a higher performance graphics processor core. In at least one embodiment, each of graphics processors <b>1810</b>, <b>1840</b> can be variants of graphics processor <b>1710</b> of <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0357" num="0334">In at least one embodiment, graphics processor <b>1810</b> includes a vertex processor <b>1805</b> and one or more fragment processor(s) <b>1815</b>A-<b>1815</b>N (e.g., <b>1815</b>A, <b>1815</b>B, <b>1815</b>C, <b>1815</b>D, through <b>1815</b>N-<b>1</b>, and <b>1815</b>N). In at least one embodiment, graphics processor <b>1810</b> can execute different shader programs via separate logic, such that vertex processor <b>1805</b> is optimized to execute operations for vertex shader programs, while one or more fragment processor(s) <b>1815</b>A-<b>1815</b>N execute fragment (e.g., pixel) shading operations for fragment or pixel shader programs. In at least one embodiment, vertex processor <b>1805</b> performs a vertex processing stage of a 3D graphics pipeline and generates primitives and vertex data. In at least one embodiment, fragment processor(s) <b>1815</b>A-<b>1815</b>N use primitive and vertex data generated by vertex processor <b>1805</b> to produce a framebuffer that is displayed on a display device. In at least one embodiment, fragment processor(s) <b>1815</b>A-<b>1815</b>N are optimized to execute fragment shader programs as provided for in an OpenGL API, which may be used to perform similar operations as a pixel shader program as provided for in a Direct 3D API.</p><p id="p-0358" num="0335">In at least one embodiment, graphics processor <b>1810</b> additionally includes one or more memory management units (MMUs) <b>1820</b>A-<b>1820</b>B, cache(s) <b>1825</b>A-<b>1825</b>B, and circuit interconnect(s) <b>1830</b>A-<b>1830</b>B. In at least one embodiment, one or more MMU(s) <b>1820</b>A-<b>1820</b>B provide for virtual to physical address mapping for graphics processor <b>1810</b>, including for vertex processor <b>1805</b> and/or fragment processor(s) <b>1815</b>A-<b>1815</b>N, which may reference vertex or image/texture data stored in memory, in addition to vertex or image/texture data stored in one or more cache(s) <b>1825</b>A-<b>1825</b>B. In at least one embodiment, one or more MMU(s) <b>1820</b>A-<b>1820</b>B may be synchronized with other MMUs within a system, including one or more MMUs associated with one or more application processor(s) <b>1705</b>, image processors <b>1715</b>, and/or video processors <b>1720</b> of <figref idref="DRAWINGS">FIG. <b>17</b></figref>, such that each processor <b>1705</b>-<b>1720</b> can participate in a shared or unified virtual memory system. In at least one embodiment, one or more circuit interconnect(s) <b>1830</b>A-<b>1830</b>B enable graphics processor <b>1810</b> to interface with other IP cores within SoC, either via an internal bus of SoC or via a direct connection.</p><p id="p-0359" num="0336">In at least one embodiment, graphics processor <b>1840</b> includes one or more shader core(s) <b>1855</b>A-<b>1855</b>N (e.g., <b>1855</b>A, <b>1855</b>B, <b>1855</b>C, <b>1855</b>D, <b>1855</b>E, <b>1855</b>F, through <b>1855</b>N-<b>1</b>, and <b>1855</b>N) as shown in <figref idref="DRAWINGS">FIG. <b>18</b>B</figref>, which provides for a unified shader core architecture in which a single core or type or core can execute all types of programmable shader code, including shader program code to implement vertex shaders, fragment shaders, and/or compute shaders. In at least one embodiment, a number of shader cores can vary. In at least one embodiment, graphics processor <b>1840</b> includes an inter-core task manager <b>1845</b>, which acts as a thread dispatcher to dispatch execution threads to one or more shader cores <b>1855</b>A-<b>1855</b>N and a tiling unit <b>1858</b> to accelerate tiling operations for tile-based rendering, in which rendering operations for a scene are subdivided in image space, for example to exploit local spatial coherence within a scene or to optimize use of internal caches.</p><p id="p-0360" num="0337">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in integrated circuit <b>18</b>A and/or <b>18</b>B for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0361" num="0338">In at least one embodiment, graphics processor <b>1840</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, graphics processor <b>1840</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0362" num="0339"><figref idref="DRAWINGS">FIGS. <b>19</b>A-<b>19</b>B</figref> illustrate additional exemplary graphics processor logic according to embodiments described herein. <figref idref="DRAWINGS">FIG. <b>19</b>A</figref> illustrates a graphics core <b>1900</b> that may be included within graphics processor <b>1710</b> of <figref idref="DRAWINGS">FIG. <b>17</b></figref>, in at least one embodiment, and may be a unified shader core <b>1855</b>A-<b>1855</b>N as in <figref idref="DRAWINGS">FIG. <b>18</b>B</figref> in at least one embodiment. <figref idref="DRAWINGS">FIG. <b>19</b>B</figref> illustrates a highly-parallel general-purpose graphics processing unit (&#x201c;GPGPU&#x201d;) <b>1930</b> suitable for deployment on a multi-chip module in at least one embodiment.</p><p id="p-0363" num="0340">In at least one embodiment, graphics core <b>1900</b> includes a shared instruction cache <b>1902</b>, a texture unit <b>1918</b>, and a cache/shared memory <b>1920</b> that are common to execution resources within graphics core <b>1900</b>. In at least one embodiment, graphics core <b>1900</b> can include multiple slices <b>1901</b>A-<b>1901</b>N or a partition for each core, and a graphics processor can include multiple instances of graphics core <b>1900</b>. In at least one embodiment, slices <b>1901</b>A-<b>1901</b>N can include support logic including a local instruction cache <b>1904</b>A-<b>1904</b>N, a thread scheduler <b>1906</b>A-<b>1906</b>N, a thread dispatcher <b>1908</b>A-<b>1908</b>N, and a set of registers <b>1910</b>A-<b>1910</b>N. In at least one embodiment, slices <b>1901</b>A-<b>1901</b>N can include a set of additional function units (AFUs <b>1912</b>A-<b>1912</b>N), floating-point units (FPUs <b>1914</b>A-<b>1914</b>N), integer arithmetic logic units (ALUs <b>1916</b>A-<b>1916</b>N), address computational units (ACUs <b>1913</b>A-<b>1913</b>N), double-precision floating-point units (DPFPUs <b>1915</b>A-<b>1915</b>N), and matrix processing units (MPUs <b>1917</b>A-<b>1917</b>N).</p><p id="p-0364" num="0341">In at least one embodiment, FPUs <b>1914</b>A-<b>1914</b>N can perform single-precision (32-bit) and half-precision (16-bit) floating point operations, while DPFPUs <b>1915</b>A-<b>1915</b>N perform double precision (64-bit) floating point operations. In at least one embodiment, ALUs <b>1916</b>A-<b>1916</b>N can perform variable precision integer operations at 8-bit, 16-bit, and 32-bit precision, and can be configured for mixed precision operations. In at least one embodiment, MPUs <b>1917</b>A-<b>1917</b>N can also be configured for mixed precision matrix operations, including half-precision floating point and 8-bit integer operations. In at least one embodiment, MPUs <b>1917</b>-<b>1917</b>N can perform a variety of matrix operations to accelerate machine learning application frameworks, including enabling support for accelerated general matrix to matrix multiplication (GEMM). In at least one embodiment, AFUs <b>1912</b>A-<b>1912</b>N can perform additional logic operations not supported by floating-point or integer units, including trigonometric operations (e.g., sine, cosine, etc.).</p><p id="p-0365" num="0342">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in graphics core <b>1900</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0366" num="0343">In at least one embodiment, graphics core <b>1900</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, graphics core <b>1900</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0367" num="0344"><figref idref="DRAWINGS">FIG. <b>19</b>B</figref> illustrates a general-purpose processing unit (GPGPU) <b>1930</b> that can be configured to enable highly-parallel compute operations to be performed by an array of graphics processing units, in at least one embodiment. In at least one embodiment, GPGPU <b>1930</b> can be linked directly to other instances of GPGPU <b>1930</b> to create a multi-GPU cluster to improve training speed for deep neural networks. In at least one embodiment, GPGPU <b>1930</b> includes a host interface <b>1932</b> to enable a connection with a host processor. In at least one embodiment, host interface <b>1932</b> is a PCI Express interface. In at least one embodiment, host interface <b>1932</b> can be a vendor-specific communications interface or communications fabric. In at least one embodiment, GPGPU <b>1930</b> receives commands from a host processor and uses a global scheduler <b>1934</b> to distribute execution threads associated with those commands to a set of compute clusters <b>1936</b>A-<b>1936</b>H. In at least one embodiment, compute clusters <b>1936</b>A-<b>1936</b>H share a cache memory <b>1938</b>. In at least one embodiment, cache memory <b>1938</b> can serve as a higher-level cache for cache memories within compute clusters <b>1936</b>A-<b>1936</b>H.</p><p id="p-0368" num="0345">In at least one embodiment, GPGPU <b>1930</b> includes memory <b>1944</b>A-<b>1944</b>B coupled with compute clusters <b>1936</b>A-<b>1936</b>H via a set of memory controllers <b>1942</b>A-<b>1942</b>B. In at least one embodiment, memory <b>1944</b>A-<b>1944</b>B can include various types of memory devices including dynamic random access memory (DRAM) or graphics random access memory, such as synchronous graphics random access memory (SGRAM), including graphics double data rate (GDDR) memory.</p><p id="p-0369" num="0346">In at least one embodiment, compute clusters <b>1936</b>A-<b>1936</b>H each include a set of graphics cores, such as graphics core <b>1900</b> of <figref idref="DRAWINGS">FIG. <b>19</b>A</figref>, which can include multiple types of integer and floating point logic units that can perform computational operations at a range of precisions including suited for machine learning computations. For example, in at least one embodiment, at least a subset of floating point units in each of compute clusters <b>1936</b>A-<b>1936</b>H can be configured to perform 16-bit or 32-bit floating point operations, while a different subset of floating point units can be configured to perform 64-bit floating point operations.</p><p id="p-0370" num="0347">In at least one embodiment, multiple instances of GPGPU <b>1930</b> can be configured to operate as a compute cluster. In at least one embodiment, communication used by compute clusters <b>1936</b>A-<b>1936</b>H for synchronization and data exchange varies across embodiments. In at least one embodiment, multiple instances of GPGPU <b>1930</b> communicate over host interface <b>1932</b>. In at least one embodiment, GPGPU <b>1930</b> includes an I/O hub <b>1939</b> that couples GPGPU <b>1930</b> with a GPU link <b>1940</b> that enables a direct connection to other instances of GPGPU <b>1930</b>. In at least one embodiment, GPU link <b>1940</b> is coupled to a dedicated GPU-to-GPU bridge that enables communication and synchronization between multiple instances of GPGPU <b>1930</b>. In at least one embodiment, GPU link <b>1940</b> couples with a high-speed interconnect to transmit and receive data to other GPGPUs or parallel processors. In at least one embodiment, multiple instances of GPGPU <b>1930</b> are located in separate data processing systems and communicate via a network device that is accessible via host interface <b>1932</b>. In at least one embodiment GPU link <b>1940</b> can be configured to enable a connection to a host processor in addition to or as an alternative to host interface <b>1932</b>.</p><p id="p-0371" num="0348">In at least one embodiment, GPGPU <b>1930</b> can be configured to train neural networks. In at least one embodiment, GPGPU <b>1930</b> can be used within an inferencing platform. In at least one embodiment, in which GPGPU <b>1930</b> is used for inferencing, GPGPU <b>1930</b> may include fewer compute clusters <b>1936</b>A-<b>1936</b>H relative to when GPGPU <b>1930</b> is used for training a neural network. In at least one embodiment, memory technology associated with memory <b>1944</b>A-<b>1944</b>B may differ between inferencing and training configurations, with higher bandwidth memory technologies devoted to training configurations. In at least one embodiment, an inferencing configuration of GPGPU <b>1930</b> can support inferencing specific instructions. For example, in at least one embodiment, an inferencing configuration can provide support for one or more 8-bit integer dot product instructions, which may be used during inferencing operations for deployed neural networks.</p><p id="p-0372" num="0349">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in GPGPU <b>1930</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0373" num="0350">In at least one embodiment, GPGPU <b>1930</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, GPGPU <b>1930</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0374" num="0351"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram illustrating a computing system <b>2000</b> according to at least one embodiment. In at least one embodiment, computing system <b>2000</b> includes a processing subsystem <b>2001</b> having one or more processor(s) <b>2002</b> and a system memory <b>2004</b> communicating via an interconnection path that may include a memory hub <b>2005</b>. In at least one embodiment, memory hub <b>2005</b> may be a separate component within a chipset component or may be integrated within one or more processor(s) <b>2002</b>. In at least one embodiment, memory hub <b>2005</b> couples with an I/O subsystem <b>2011</b> via a communication link <b>2006</b>. In at least one embodiment, I/O subsystem <b>2011</b> includes an I/O hub <b>2007</b> that can enable computing system <b>2000</b> to receive input from one or more input device(s) <b>2008</b>. In at least one embodiment, I/O hub <b>2007</b> can enable a display controller, which may be included in one or more processor(s) <b>2002</b>, to provide outputs to one or more display device(s) <b>2010</b>A. In at least one embodiment, one or more display device(s) <b>2010</b>A coupled with I/O hub <b>2007</b> can include a local, internal, or embedded display device.</p><p id="p-0375" num="0352">In at least one embodiment, processing subsystem <b>2001</b> includes one or more parallel processor(s) <b>2012</b> coupled to memory hub <b>2005</b> via a bus or other communication link <b>2013</b>. In at least one embodiment, communication link <b>2013</b> may use one of any number of standards based communication link technologies or protocols, such as, but not limited to PCI Express, or may be a vendor-specific communications interface or communications fabric. In at least one embodiment, one or more parallel processor(s) <b>2012</b> form a computationally focused parallel or vector processing system that can include a large number of processing cores and/or processing clusters, such as a many-integrated core (MIC) processor. In at least one embodiment, some or all of parallel processor(s) <b>2012</b> form a graphics processing subsystem that can output pixels to one of one or more display device(s) <b>2010</b>A coupled via I/O Hub <b>2007</b>. In at least one embodiment, parallel processor(s) <b>2012</b> can also include a display controller and display interface (not shown) to enable a direct connection to one or more display device(s) <b>2010</b>B.</p><p id="p-0376" num="0353">In at least one embodiment, a system storage unit <b>2014</b> can connect to I/O hub <b>2007</b> to provide a storage mechanism for computing system <b>2000</b>. In at least one embodiment, an I/O switch <b>2016</b> can be used to provide an interface mechanism to enable connections between I/O hub <b>2007</b> and other components, such as a network adapter <b>2018</b> and/or a wireless network adapter <b>2019</b> that may be integrated into platform, and various other devices that can be added via one or more add-in device(s) <b>2020</b>. In at least one embodiment, network adapter <b>2018</b> can be an Ethernet adapter or another wired network adapter. In at least one embodiment, wireless network adapter <b>2019</b> can include one or more of a Wi-Fi, Bluetooth, near field communication (NFC), or other network device that includes one or more wireless radios.</p><p id="p-0377" num="0354">In at least one embodiment, computing system <b>2000</b> can include other components not explicitly shown, including USB or other port connections, optical storage drives, video capture devices, and like, may also be connected to I/O hub <b>2007</b>. In at least one embodiment, communication paths interconnecting various components in <figref idref="DRAWINGS">FIG. <b>20</b></figref> may be implemented using any suitable protocols, such as PCI (Peripheral Component Interconnect) based protocols (e.g., PCI-Express), or other bus or point-to-point communication interfaces and/or protocol(s), such as NV-Link high-speed interconnect, or interconnect protocols.</p><p id="p-0378" num="0355">In at least one embodiment, parallel processor(s) <b>2012</b> incorporate circuitry optimized for graphics and video processing, including, for example, video output circuitry, and constitutes a graphics processing unit (GPU). In at least one embodiment, parallel processor(s) <b>2012</b> incorporate circuitry optimized for general purpose processing. In at least embodiment, components of computing system <b>2000</b> may be integrated with one or more other system elements on a single integrated circuit. For example, in at least one embodiment, parallel processor(s) <b>2012</b>, memory hub <b>2005</b>, processor(s) <b>2002</b>, and I/O hub <b>2007</b> can be integrated into a system on chip (SoC) integrated circuit. In at least one embodiment, components of computing system <b>2000</b> can be integrated into a single package to form a system in package (SIP) configuration. In at least one embodiment, at least a portion of components of computing system <b>2000</b> can be integrated into a multi-chip module (MCM), which can be interconnected with other multi-chip modules into a modular computing system.</p><p id="p-0379" num="0356">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in system <figref idref="DRAWINGS">FIG. <b>2000</b></figref> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0380" num="0357">In at least one embodiment, computing system <b>2000</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, computing system <b>2000</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><heading id="h-0010" level="2">Processors</heading><p id="p-0381" num="0358"><figref idref="DRAWINGS">FIG. <b>21</b>A</figref> illustrates a parallel processor <b>2100</b> according to at least one embodiment. In at least one embodiment, various components of parallel processor <b>2100</b> may be implemented using one or more integrated circuit devices, such as programmable processors, application specific integrated circuits (ASICs), or field programmable gate arrays (FPGA). In at least one embodiment, illustrated parallel processor <b>2100</b> is a variant of one or more parallel processor(s) <b>2012</b> shown in <figref idref="DRAWINGS">FIG. <b>20</b></figref> according to an exemplary embodiment.</p><p id="p-0382" num="0359">In at least one embodiment, parallel processor <b>2100</b> includes a parallel processing unit <b>2102</b>. In at least one embodiment, parallel processing unit <b>2102</b> includes an I/O unit <b>2104</b> that enables communication with other devices, including other instances of parallel processing unit <b>2102</b>. In at least one embodiment, I/O unit <b>2104</b> may be directly connected to other devices. In at least one embodiment, I/O unit <b>2104</b> connects with other devices via use of a hub or switch interface, such as a memory hub <b>2105</b>. In at least one embodiment, connections between memory hub <b>2105</b> and I/O unit <b>2104</b> form a communication link <b>2113</b>. In at least one embodiment, I/O unit <b>2104</b> connects with a host interface <b>2106</b> and a memory crossbar <b>2116</b>, where host interface <b>2106</b> receives commands directed to performing processing operations and memory crossbar <b>2116</b> receives commands directed to performing memory operations.</p><p id="p-0383" num="0360">In at least one embodiment, when host interface <b>2106</b> receives a command buffer via I/O unit <b>2104</b>, host interface <b>2106</b> can direct work operations to perform those commands to a front end <b>2108</b>. In at least one embodiment, front end <b>2108</b> couples with a scheduler <b>2110</b>, which is configured to distribute commands or other work items to a processing cluster array <b>2112</b>. In at least one embodiment, scheduler <b>2110</b> ensures that processing cluster array <b>2112</b> is properly configured and in a valid state before tasks are distributed to a cluster of processing cluster array <b>2112</b>. In at least one embodiment, scheduler <b>2110</b> is implemented via firmware logic executing on a microcontroller. In at least one embodiment, microcontroller implemented scheduler <b>2110</b> is configurable to perform complex scheduling and work distribution operations at coarse and fine granularity, enabling rapid preemption and context switching of threads executing on processing array <b>2112</b>. In at least one embodiment, host software can prove workloads for scheduling on processing cluster array <b>2112</b> via one of multiple graphics processing paths. In at least one embodiment, workloads can then be automatically distributed across processing array cluster <b>2112</b> by scheduler <b>2110</b> logic within a microcontroller including scheduler <b>2110</b>.</p><p id="p-0384" num="0361">In at least one embodiment, processing cluster array <b>2112</b> can include up to &#x201c;N&#x201d; processing clusters (e.g., cluster <b>2114</b>A, cluster <b>2114</b>B, through cluster <b>2114</b>N), where &#x201c;N&#x201d; represents a positive integer (which may be a different integer &#x201c;N&#x201d; than used in other figures). In at least one embodiment, each cluster <b>2114</b>A-<b>2114</b>N of processing cluster array <b>2112</b> can execute a large number of concurrent threads. In at least one embodiment, scheduler <b>2110</b> can allocate work to clusters <b>2114</b>A-<b>2114</b>N of processing cluster array <b>2112</b> using various scheduling and/or work distribution algorithms, which may vary depending on workload arising for each type of program or computation. In at least one embodiment, scheduling can be handled dynamically by scheduler <b>2110</b>, or can be assisted in part by compiler logic during compilation of program logic configured for execution by processing cluster array <b>2112</b>. In at least one embodiment, different clusters <b>2114</b>A-<b>2114</b>N of processing cluster array <b>2112</b> can be allocated for processing different types of programs or for performing different types of computations.</p><p id="p-0385" num="0362">In at least one embodiment, processing cluster array <b>2112</b> can be configured to perform various types of parallel processing operations. In at least one embodiment, processing cluster array <b>2112</b> is configured to perform general-purpose parallel compute operations. For example, in at least one embodiment, processing cluster array <b>2112</b> can include logic to execute processing tasks including filtering of video and/or audio data, performing modeling operations, including physics operations, and performing data transformations.</p><p id="p-0386" num="0363">In at least one embodiment, processing cluster array <b>2112</b> is configured to perform parallel graphics processing operations. In at least one embodiment, processing cluster array <b>2112</b> can include additional logic to support execution of such graphics processing operations, including but not limited to, texture sampling logic to perform texture operations, as well as tessellation logic and other vertex processing logic. In at least one embodiment, processing cluster array <b>2112</b> can be configured to execute graphics processing related shader programs such as, but not limited to, vertex shaders, tessellation shaders, geometry shaders, and pixel shaders. In at least one embodiment, parallel processing unit <b>2102</b> can transfer data from system memory via I/O unit <b>2104</b> for processing. In at least one embodiment, during processing, transferred data can be stored to on-chip memory (e.g., parallel processor memory <b>2122</b>) during processing, then written back to system memory.</p><p id="p-0387" num="0364">In at least one embodiment, when parallel processing unit <b>2102</b> is used to perform graphics processing, scheduler <b>2110</b> can be configured to divide a processing workload into approximately equal sized tasks, to better enable distribution of graphics processing operations to multiple clusters <b>2114</b>A-<b>2114</b>N of processing cluster array <b>2112</b>. In at least one embodiment, portions of processing cluster array <b>2112</b> can be configured to perform different types of processing. For example, in at least one embodiment, a first portion may be configured to perform vertex shading and topology generation, a second portion may be configured to perform tessellation and geometry shading, and a third portion may be configured to perform pixel shading or other screen space operations, to produce a rendered image for display. In at least one embodiment, intermediate data produced by one or more of clusters <b>2114</b>A-<b>2114</b>N may be stored in buffers to allow intermediate data to be transmitted between clusters <b>2114</b>A-<b>2114</b>N for further processing.</p><p id="p-0388" num="0365">In at least one embodiment, processing cluster array <b>2112</b> can receive processing tasks to be executed via scheduler <b>2110</b>, which receives commands defining processing tasks from front end <b>2108</b>. In at least one embodiment, processing tasks can include indices of data to be processed, e.g., surface (patch) data, primitive data, vertex data, and/or pixel data, as well as state parameters and commands defining how data is to be processed (e.g., what program is to be executed). In at least one embodiment, scheduler <b>2110</b> may be configured to fetch indices corresponding to tasks or may receive indices from front end <b>2108</b>. In at least one embodiment, front end <b>2108</b> can be configured to ensure processing cluster array <b>2112</b> is configured to a valid state before a workload specified by incoming command buffers (e.g., batch-buffers, push buffers, etc.) is initiated.</p><p id="p-0389" num="0366">In at least one embodiment, each of one or more instances of parallel processing unit <b>2102</b> can couple with a parallel processor memory <b>2122</b>. In at least one embodiment, parallel processor memory <b>2122</b> can be accessed via memory crossbar <b>2116</b>, which can receive memory requests from processing cluster array <b>2112</b> as well as I/O unit <b>2104</b>. In at least one embodiment, memory crossbar <b>2116</b> can access parallel processor memory <b>2122</b> via a memory interface <b>2118</b>. In at least one embodiment, memory interface <b>2118</b> can include multiple partition units (e.g., partition unit <b>2120</b>A, partition unit <b>2120</b>B, through partition unit <b>2120</b>N) that can each couple to a portion (e.g., memory unit) of parallel processor memory <b>2122</b>. In at least one embodiment, a number of partition units <b>2120</b>A-<b>2120</b>N is configured to be equal to a number of memory units, such that a first partition unit <b>2120</b>A has a corresponding first memory unit <b>2124</b>A, a second partition unit <b>2120</b>B has a corresponding memory unit <b>2124</b>B, and an N-th partition unit <b>2120</b>N has a corresponding N-th memory unit <b>2124</b>N. In at least one embodiment, a number of partition units <b>2120</b>A-<b>2120</b>N may not be equal to a number of memory units.</p><p id="p-0390" num="0367">In at least one embodiment, memory units <b>2124</b>A-<b>2124</b>N can include various types of memory devices, including dynamic random access memory (DRAM) or graphics random access memory, such as synchronous graphics random access memory (SGRAM), including graphics double data rate (GDDR) memory. In at least one embodiment, memory units <b>2124</b>A-<b>2124</b>N may also include 3D stacked memory, including but not limited to high bandwidth memory (HBM). In at least one embodiment, render targets, such as frame buffers or texture maps may be stored across memory units <b>2124</b>A-<b>2124</b>N, allowing partition units <b>2120</b>A-<b>2120</b>N to write portions of each render target in parallel to efficiently use available bandwidth of parallel processor memory <b>2122</b>. In at least one embodiment, a local instance of parallel processor memory <b>2122</b> may be excluded in favor of a unified memory design that utilizes system memory in conjunction with local cache memory.</p><p id="p-0391" num="0368">In at least one embodiment, any one of clusters <b>2114</b>A-<b>2114</b>N of processing cluster array <b>2112</b> can process data that will be written to any of memory units <b>2124</b>A-<b>2124</b>N within parallel processor memory <b>2122</b>. In at least one embodiment, memory crossbar <b>2116</b> can be configured to transfer an output of each cluster <b>2114</b>A-<b>2114</b>N to any partition unit <b>2120</b>A-<b>2120</b>N or to another cluster <b>2114</b>A-<b>2114</b>N, which can perform additional processing operations on an output. In at least one embodiment, each cluster <b>2114</b>A-<b>2114</b>N can communicate with memory interface <b>2118</b> through memory crossbar <b>2116</b> to read from or write to various external memory devices. In at least one embodiment, memory crossbar <b>2116</b> has a connection to memory interface <b>2118</b> to communicate with I/O unit <b>2104</b>, as well as a connection to a local instance of parallel processor memory <b>2122</b>, enabling processing units within different processing clusters <b>2114</b>A-<b>2114</b>N to communicate with system memory or other memory that is not local to parallel processing unit <b>2102</b>. In at least one embodiment, memory crossbar <b>2116</b> can use virtual channels to separate traffic streams between clusters <b>2114</b>A-<b>2114</b>N and partition units <b>2120</b>A-<b>2120</b>N.</p><p id="p-0392" num="0369">In at least one embodiment, multiple instances of parallel processing unit <b>2102</b> can be provided on a single add-in card, or multiple add-in cards can be interconnected. In at least one embodiment, different instances of parallel processing unit <b>2102</b> can be configured to interoperate even if different instances have different numbers of processing cores, different amounts of local parallel processor memory, and/or other configuration differences. For example, in at least one embodiment, some instances of parallel processing unit <b>2102</b> can include higher precision floating point units relative to other instances. In at least one embodiment, systems incorporating one or more instances of parallel processing unit <b>2102</b> or parallel processor <b>2100</b> can be implemented in a variety of configurations and form factors, including but not limited to desktop, laptop, or handheld personal computers, servers, workstations, game consoles, and/or embedded systems.</p><p id="p-0393" num="0370"><figref idref="DRAWINGS">FIG. <b>21</b>B</figref> is a block diagram of a partition unit <b>2120</b> according to at least one embodiment. In at least one embodiment, partition unit <b>2120</b> is an instance of one of partition units <b>2120</b>A-<b>2120</b>N of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>. In at least one embodiment, partition unit <b>2120</b> includes an L2 cache <b>2121</b>, a frame buffer interface <b>2125</b>, and a ROP <b>2126</b> (raster operations unit). In at least one embodiment, L2 cache <b>2121</b> is a read/write cache that is configured to perform load and store operations received from memory crossbar <b>2116</b> and ROP <b>2126</b>. In at least one embodiment, read misses and urgent write-back requests are output by L2 cache <b>2121</b> to frame buffer interface <b>2125</b> for processing. In at least one embodiment, updates can also be sent to a frame buffer via frame buffer interface <b>2125</b> for processing. In at least one embodiment, frame buffer interface <b>2125</b> interfaces with one of memory units in parallel processor memory, such as memory units <b>2124</b>A-<b>2124</b>N of <figref idref="DRAWINGS">FIG. <b>21</b></figref> (e.g., within parallel processor memory <b>2122</b>).</p><p id="p-0394" num="0371">In at least one embodiment, ROP <b>2126</b> is a processing unit that performs raster operations such as stencil, z test, blending, etc. In at least one embodiment, ROP <b>2126</b> then outputs processed graphics data that is stored in graphics memory. In at least one embodiment, ROP <b>2126</b> includes compression logic to compress depth or color data that is written to memory and decompress depth or color data that is read from memory. In at least one embodiment, compression logic can be lossless compression logic that makes use of one or more of multiple compression algorithms. In at least one embodiment, a type of compression that is performed by ROP <b>2126</b> can vary based on statistical characteristics of data to be compressed. For example, in at least one embodiment, delta color compression is performed on depth and color data on a per-tile basis.</p><p id="p-0395" num="0372">In at least one embodiment, ROP <b>2126</b> is included within each processing cluster (e.g., cluster <b>2114</b>A-<b>2114</b>N of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>) instead of within partition unit <b>2120</b>. In at least one embodiment, read and write requests for pixel data are transmitted over memory crossbar <b>2116</b> instead of pixel fragment data. In at least one embodiment, processed graphics data may be displayed on a display device, such as one of one or more display device(s) <b>2010</b> of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, routed for further processing by processor(s) <b>2002</b>, or routed for further processing by one of processing entities within parallel processor <b>2100</b> of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>.</p><p id="p-0396" num="0373"><figref idref="DRAWINGS">FIG. <b>21</b>C</figref> is a block diagram of a processing cluster <b>2114</b> within a parallel processing unit according to at least one embodiment. In at least one embodiment, a processing cluster is an instance of one of processing clusters <b>2114</b>A-<b>2114</b>N of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>. In at least one embodiment, processing cluster <b>2114</b> can be configured to execute many threads in parallel, where &#x201c;thread&#x201d; refers to an instance of a particular program executing on a particular set of input data. In at least one embodiment, single-instruction, multiple-data (SIMD) instruction issue techniques are used to support parallel execution of a large number of threads without providing multiple independent instruction units. In at least one embodiment, single-instruction, multiple-thread (SIMT) techniques are used to support parallel execution of a large number of generally synchronized threads, using a common instruction unit configured to issue instructions to a set of processing engines within each one of processing clusters.</p><p id="p-0397" num="0374">In at least one embodiment, operation of processing cluster <b>2114</b> can be controlled via a pipeline manager <b>2132</b> that distributes processing tasks to SIMT parallel processors. In at least one embodiment, pipeline manager <b>2132</b> receives instructions from scheduler <b>2110</b> of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref> and manages execution of those instructions via a graphics multiprocessor <b>2134</b> and/or a texture unit <b>2136</b>. In at least one embodiment, graphics multiprocessor <b>2134</b> is an exemplary instance of a SIMT parallel processor. However, in at least one embodiment, various types of SIMT parallel processors of differing architectures may be included within processing cluster <b>2114</b>. In at least one embodiment, one or more instances of graphics multiprocessor <b>2134</b> can be included within a processing cluster <b>2114</b>. In at least one embodiment, graphics multiprocessor <b>2134</b> can process data and a data crossbar <b>2140</b> can be used to distribute processed data to one of multiple possible destinations, including other shader units. In at least one embodiment, pipeline manager <b>2132</b> can facilitate distribution of processed data by specifying destinations for processed data to be distributed via data crossbar <b>2140</b>.</p><p id="p-0398" num="0375">In at least one embodiment, each graphics multiprocessor <b>2134</b> within processing cluster <b>2114</b> can include an identical set of functional execution logic (e.g., arithmetic logic units, load-store units, etc.). In at least one embodiment, functional execution logic can be configured in a pipelined manner in which new instructions can be issued before previous instructions are complete. In at least one embodiment, functional execution logic supports a variety of operations including integer and floating point arithmetic, comparison operations, Boolean operations, bit-shifting, and computation of various algebraic functions. In at least one embodiment, same functional-unit hardware can be leveraged to perform different operations and any combination of functional units may be present.</p><p id="p-0399" num="0376">In at least one embodiment, instructions transmitted to processing cluster <b>2114</b> constitute a thread. In at least one embodiment, a set of threads executing across a set of parallel processing engines is a thread group. In at least one embodiment, a thread group executes a common program on different input data. In at least one embodiment, each thread within a thread group can be assigned to a different processing engine within a graphics multiprocessor <b>2134</b>. In at least one embodiment, a thread group may include fewer threads than a number of processing engines within graphics multiprocessor <b>2134</b>. In at least one embodiment, when a thread group includes fewer threads than a number of processing engines, one or more of processing engines may be idle during cycles in which that thread group is being processed. In at least one embodiment, a thread group may also include more threads than a number of processing engines within graphics multiprocessor <b>2134</b>. In at least one embodiment, when a thread group includes more threads than number of processing engines within graphics multiprocessor <b>2134</b>, processing can be performed over consecutive clock cycles. In at least one embodiment, multiple thread groups can be executed concurrently on a graphics multiprocessor <b>2134</b>.</p><p id="p-0400" num="0377">In at least one embodiment, graphics multiprocessor <b>2134</b> includes an internal cache memory to perform load and store operations. In at least one embodiment, graphics multiprocessor <b>2134</b> can forego an internal cache and use a cache memory (e.g., L1 cache <b>2148</b>) within processing cluster <b>2114</b>. In at least one embodiment, each graphics multiprocessor <b>2134</b> also has access to L2 caches within partition units (e.g., partition units <b>2120</b>A-<b>2120</b>N of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>) that are shared among all processing clusters <b>2114</b> and may be used to transfer data between threads. In at least one embodiment, graphics multiprocessor <b>2134</b> may also access off-chip global memory, which can include one or more of local parallel processor memory and/or system memory. In at least one embodiment, any memory external to parallel processing unit <b>2102</b> may be used as global memory. In at least one embodiment, processing cluster <b>2114</b> includes multiple instances of graphics multiprocessor <b>2134</b> and can share common instructions and data, which may be stored in L1 cache <b>2148</b>.</p><p id="p-0401" num="0378">In at least one embodiment, each processing cluster <b>2114</b> may include an MMU <b>2145</b> (memory management unit) that is configured to map virtual addresses into physical addresses. In at least one embodiment, one or more instances of MMU <b>2145</b> may reside within memory interface <b>2118</b> of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>. In at least one embodiment, MMU <b>2145</b> includes a set of page table entries (PTEs) used to map a virtual address to a physical address of a tile and optionally a cache line index. In at least one embodiment, MMU <b>2145</b> may include address translation lookaside buffers (TLB) or caches that may reside within graphics multiprocessor <b>2134</b> or L1 <b>2148</b> cache or processing cluster <b>2114</b>. In at least one embodiment, a physical address is processed to distribute surface data access locally to allow for efficient request interleaving among partition units. In at least one embodiment, a cache line index may be used to determine whether a request for a cache line is a hit or miss.</p><p id="p-0402" num="0379">In at least one embodiment, a processing cluster <b>2114</b> may be configured such that each graphics multiprocessor <b>2134</b> is coupled to a texture unit <b>2136</b> for performing texture mapping operations, e.g., determining texture sample positions, reading texture data, and filtering texture data. In at least one embodiment, texture data is read from an internal texture L1 cache (not shown) or from an L1 cache within graphics multiprocessor <b>2134</b> and is fetched from an L2 cache, local parallel processor memory, or system memory, as needed. In at least one embodiment, each graphics multiprocessor <b>2134</b> outputs processed tasks to data crossbar <b>2140</b> to provide processed task to another processing cluster <b>2114</b> for further processing or to store processed task in an L2 cache, local parallel processor memory, or system memory via memory crossbar <b>2116</b>. In at least one embodiment, a preROP <b>2142</b> (pre-raster operations unit) is configured to receive data from graphics multiprocessor <b>2134</b>, and direct data to ROP units, which may be located with partition units as described herein (e.g., partition units <b>2120</b>A-<b>2120</b>N of <figref idref="DRAWINGS">FIG. <b>21</b>A</figref>). In at least one embodiment, preROP <b>2142</b> unit can perform optimizations for color blending, organizing pixel color data, and performing address translations.</p><p id="p-0403" num="0380">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in graphics processing cluster <b>2114</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0404" num="0381">In at least one embodiment, processing cluster <b>2114</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, processing cluster <b>2114</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0405" num="0382"><figref idref="DRAWINGS">FIG. <b>21</b>D</figref> shows a graphics multiprocessor <b>2134</b> according to at least one embodiment. In at least one embodiment, graphics multiprocessor <b>2134</b> couples with pipeline manager <b>2132</b> of processing cluster <b>2114</b>. In at least one embodiment, graphics multiprocessor <b>2134</b> has an execution pipeline including but not limited to an instruction cache <b>2152</b>, an instruction unit <b>2154</b>, an address mapping unit <b>2156</b>, a register file <b>2158</b>, one or more general purpose graphics processing unit (GPGPU) cores <b>2162</b>, and one or more load/store units <b>2166</b>. In at least one embodiment, GPGPU cores <b>2162</b> and load/store units <b>2166</b> are coupled with cache memory <b>2172</b> and shared memory <b>2170</b> via a memory and cache interconnect <b>2168</b>.</p><p id="p-0406" num="0383">In at least one embodiment, instruction cache <b>2152</b> receives a stream of instructions to execute from pipeline manager <b>2132</b>. In at least one embodiment, instructions are cached in instruction cache <b>2152</b> and dispatched for execution by an instruction unit <b>2154</b>. In at least one embodiment, instruction unit <b>2154</b> can dispatch instructions as thread groups (e.g., warps), with each thread of thread group assigned to a different execution unit within GPGPU cores <b>2162</b>. In at least one embodiment, an instruction can access any of a local, shared, or global address space by specifying an address within a unified address space. In at least one embodiment, address mapping unit <b>2156</b> can be used to translate addresses in a unified address space into a distinct memory address that can be accessed by load/store units <b>2166</b>.</p><p id="p-0407" num="0384">In at least one embodiment, register file <b>2158</b> provides a set of registers for functional units of graphics multiprocessor <b>2134</b>. In at least one embodiment, register file <b>2158</b> provides temporary storage for operands connected to data paths of functional units (e.g., GPGPU cores <b>2162</b>, load/store units <b>2166</b>) of graphics multiprocessor <b>2134</b>. In at least one embodiment, register file <b>2158</b> is divided between each of functional units such that each functional unit is allocated a dedicated portion of register file <b>2158</b>. In at least one embodiment, register file <b>2158</b> is divided between different warps being executed by graphics multiprocessor <b>2134</b>.</p><p id="p-0408" num="0385">In at least one embodiment, GPGPU cores <b>2162</b> can each include floating point units (FPUs) and/or integer arithmetic logic units (ALUs) that are used to execute instructions of graphics multiprocessor <b>2134</b>. In at least one embodiment, GPGPU cores <b>2162</b> can be similar in architecture or can differ in architecture. In at least one embodiment, a first portion of GPGPU cores <b>2162</b> include a single precision FPU and an integer ALU while a second portion of GPGPU cores include a double precision FPU. In at least one embodiment, FPUs can implement IEEE 754-2008 standard floating point arithmetic or enable variable precision floating point arithmetic. In at least one embodiment, graphics multiprocessor <b>2134</b> can additionally include one or more fixed function or special function units to perform specific functions such as copy rectangle or pixel blending operations. In at least one embodiment, one or more of GPGPU cores <b>2162</b> can also include fixed or special function logic.</p><p id="p-0409" num="0386">In at least one embodiment, GPGPU cores <b>2162</b> include SIMD logic capable of performing a single instruction on multiple sets of data. In at least one embodiment, GPGPU cores <b>2162</b> can physically execute SIMD4, SIMD8, and SIMD16 instructions and logically execute SIMD1, SIMD2, and SIMD32 instructions. In at least one embodiment, SIMD instructions for GPGPU cores can be generated at compile time by a shader compiler or automatically generated when executing programs written and compiled for single program multiple data (SPMD) or SIMT architectures. In at least one embodiment, multiple threads of a program configured for an SIMT execution model can executed via a single SIMD instruction. For example, in at least one embodiment, eight SIMT threads that perform same or similar operations can be executed in parallel via a single SIMD8 logic unit.</p><p id="p-0410" num="0387">In at least one embodiment, memory and cache interconnect <b>2168</b> is an interconnect network that connects each functional unit of graphics multiprocessor <b>2134</b> to register file <b>2158</b> and to shared memory <b>2170</b>. In at least one embodiment, memory and cache interconnect <b>2168</b> is a crossbar interconnect that allows load/store unit <b>2166</b> to implement load and store operations between shared memory <b>2170</b> and register file <b>2158</b>. In at least one embodiment, register file <b>2158</b> can operate at a same frequency as GPGPU cores <b>2162</b>, thus data transfer between GPGPU cores <b>2162</b> and register file <b>2158</b> can have very low latency. In at least one embodiment, shared memory <b>2170</b> can be used to enable communication between threads that execute on functional units within graphics multiprocessor <b>2134</b>. In at least one embodiment, cache memory <b>2172</b> can be used as a data cache for example, to cache texture data communicated between functional units and texture unit <b>2136</b>. In at least one embodiment, shared memory <b>2170</b> can also be used as a program managed cache. In at least one embodiment, threads executing on GPGPU cores <b>2162</b> can programmatically store data within shared memory in addition to automatically cached data that is stored within cache memory <b>2172</b>.</p><p id="p-0411" num="0388">In at least one embodiment, a parallel processor or GPGPU as described herein is communicatively coupled to host/processor cores to accelerate graphics operations, machine-learning operations, pattern analysis operations, and various general purpose GPU (GPGPU) functions. In at least one embodiment, a GPU may be communicatively coupled to host processor/cores over a bus or other interconnect (e.g., a high-speed interconnect such as PCIe or NVLink). In at least one embodiment, a GPU may be integrated on a package or chip as cores and communicatively coupled to cores over an internal processor bus/interconnect internal to a package or chip. In at least one embodiment, regardless a manner in which a GPU is connected, processor cores may allocate work to such GPU in a form of sequences of commands/instructions contained in a work descriptor. In at least one embodiment, that GPU then uses dedicated circuitry/logic for efficiently processing these commands/instructions.</p><p id="p-0412" num="0389">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in graphics multiprocessor <b>2134</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0413" num="0390">In at least one embodiment, GPGPU cores <b>2162</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, GPGPU cores <b>2162</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0414" num="0391"><figref idref="DRAWINGS">FIG. <b>22</b></figref> illustrates a multi-GPU computing system <b>2200</b>, according to at least one embodiment. In at least one embodiment, multi-GPU computing system <b>2200</b> can include a processor <b>2202</b> coupled to multiple general purpose graphics processing units (GPGPUs) <b>2206</b>A-D via a host interface switch <b>2204</b>. In at least one embodiment, host interface switch <b>2204</b> is a PCI express switch device that couples processor <b>2202</b> to a PCI express bus over which processor <b>2202</b> can communicate with GPGPUs <b>2206</b>A-D. In at least one embodiment, GPGPUs <b>2206</b>A-D can interconnect via a set of high-speed point-to-point GPU-to-GPU links <b>2216</b>. In at least one embodiment, GPU-to-GPU links <b>2216</b> connect to each of GPGPUs <b>2206</b>A-D via a dedicated GPU link. In at least one embodiment, P2P GPU links <b>2216</b> enable direct communication between each of GPGPUs <b>2206</b>A-D without requiring communication over host interface bus <b>2204</b> to which processor <b>2202</b> is connected. In at least one embodiment, with GPU-to-GPU traffic directed to P2P GPU links <b>2216</b>, host interface bus <b>2204</b> remains available for system memory access or to communicate with other instances of multi-GPU computing system <b>2200</b>, for example, via one or more network devices. While in at least one embodiment GPGPUs <b>2206</b>A-D connect to processor <b>2202</b> via host interface switch <b>2204</b>, in at least one embodiment processor <b>2202</b> includes direct support for P2P GPU links <b>2216</b> and can connect directly to GPGPUs <b>2206</b>A-D.</p><p id="p-0415" num="0392">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in multi-GPU computing system <b>2200</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0416" num="0393">In at least one embodiment, multi-GPU computing system <b>2200</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, multi-GPU computing system <b>2200</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0417" num="0394"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a block diagram of a graphics processor <b>2300</b>, according to at least one embodiment. In at least one embodiment, graphics processor <b>2300</b> includes a ring interconnect <b>2302</b>, a pipeline front-end <b>2304</b>, a media engine <b>2337</b>, and graphics cores <b>2380</b>A-<b>2380</b>N. In at least one embodiment, ring interconnect <b>2302</b> couples graphics processor <b>2300</b> to other processing units, including other graphics processors or one or more general-purpose processor cores. In at least one embodiment, graphics processor <b>2300</b> is one of many processors integrated within a multi-core processing system.</p><p id="p-0418" num="0395">In at least one embodiment, graphics processor <b>2300</b> receives batches of commands via ring interconnect <b>2302</b>. In at least one embodiment, incoming commands are interpreted by a command streamer <b>2303</b> in pipeline front-end <b>2304</b>. In at least one embodiment, graphics processor <b>2300</b> includes scalable execution logic to perform 3D geometry processing and media processing via graphics core(s) <b>2380</b>A-<b>2380</b>N. In at least one embodiment, for 3D geometry processing commands, command streamer <b>2303</b> supplies commands to geometry pipeline <b>2336</b>. In at least one embodiment, for at least some media processing commands, command streamer <b>2303</b> supplies commands to a video front end <b>2334</b>, which couples with media engine <b>2337</b>. In at least one embodiment, media engine <b>2337</b> includes a Video Quality Engine (VQE) <b>2330</b> for video and image post-processing and a multi-format encode/decode (MFX) <b>2333</b> engine to provide hardware-accelerated media data encoding and decoding. In at least one embodiment, geometry pipeline <b>2336</b> and media engine <b>2337</b> each generate execution threads for thread execution resources provided by at least one graphics core <b>2380</b>.</p><p id="p-0419" num="0396">In at least one embodiment, graphics processor <b>2300</b> includes scalable thread execution resources featuring graphics cores <b>2380</b>A-<b>2380</b>N (which can be modular and are sometimes referred to as core slices), each having multiple sub-cores <b>2350</b>A-<b>50</b>N, <b>2360</b>A-<b>2360</b>N (sometimes referred to as core sub-slices). In at least one embodiment, graphics processor <b>2300</b> can have any number of graphics cores <b>2380</b>A. In at least one embodiment, graphics processor <b>2300</b> includes a graphics core <b>2380</b>A having at least a first sub-core <b>2350</b>A and a second sub-core <b>2360</b>A. In at least one embodiment, graphics processor <b>2300</b> is a low power processor with a single sub-core (e.g., <b>2350</b>A). In at least one embodiment, graphics processor <b>2300</b> includes multiple graphics cores <b>2380</b>A-<b>2380</b>N, each including a set of first sub-cores <b>2350</b>A-<b>2350</b>N and a set of second sub-cores <b>2360</b>A-<b>2360</b>N. In at least one embodiment, each sub-core in first sub-cores <b>2350</b>A-<b>2350</b>N includes at least a first set of execution units <b>2352</b>A-<b>2352</b>N and media/texture samplers <b>2354</b>A-<b>2354</b>N. In at least one embodiment, each sub-core in second sub-cores <b>2360</b>A-<b>2360</b>N includes at least a second set of execution units <b>2362</b>A-<b>2362</b>N and samplers <b>2364</b>A-<b>2364</b>N. In at least one embodiment, each sub-core <b>2350</b>A-<b>2350</b>N, <b>2360</b>A-<b>2360</b>N shares a set of shared resources <b>2370</b>A-<b>2370</b>N. In at least one embodiment, shared resources include shared cache memory and pixel operation logic.</p><p id="p-0420" num="0397">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, inference and/or training logic <b>815</b> may be used in graphics processor <b>2300</b> for inferencing or predicting operations based, at least in part, on weight parameters calculated using neural network training operations, neural network functions and/or architectures, or neural network use cases described herein.</p><p id="p-0421" num="0398">In at least one embodiment, graphics processor <b>2300</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, graphics processor <b>2300</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0422" num="0399"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a block diagram illustrating micro-architecture for a processor <b>2400</b> that may include logic circuits to perform instructions, according to at least one embodiment. In at least one embodiment, processor <b>2400</b> may perform instructions, including &#xd7;86 instructions, ARM instructions, specialized instructions for application-specific integrated circuits (ASICs), etc. In at least one embodiment, processor <b>2400</b> may include registers to store packed data, such as 64-bit wide MMX&#x2122; registers in microprocessors enabled with MMX technology from Intel Corporation of Santa Clara, Calif. In at least one embodiment, MMX registers, available in both integer and floating point forms, may operate with packed data elements that accompany single instruction, multiple data (&#x201c;SIMD&#x201d;) and streaming SIMD extensions (&#x201c;SSE&#x201d;) instructions. In at least one embodiment, 128-bit wide XMM registers relating to SSE2, SSE3, SSE4, AVX, or beyond (referred to generically as &#x201c;SSEx&#x201d;) technology may hold such packed data operands. In at least one embodiment, processor <b>2400</b> may perform instructions to accelerate machine learning or deep learning algorithms, training, or inferencing.</p><p id="p-0423" num="0400">In at least one embodiment, processor <b>2400</b> includes an in-order front end (&#x201c;front end&#x201d;) <b>2401</b> to fetch instructions to be executed and prepare instructions to be used later in a processor pipeline. In at least one embodiment, front end <b>2401</b> may include several units. In at least one embodiment, an instruction prefetcher <b>2426</b> fetches instructions from memory and feeds instructions to an instruction decoder <b>2428</b> which in turn decodes or interprets instructions. For example, in at least one embodiment, instruction decoder <b>2428</b> decodes a received instruction into one or more operations called &#x201c;micro-instructions&#x201d; or &#x201c;micro-operations&#x201d; (also called &#x201c;micro ops&#x201d; or &#x201c;uops&#x201d;) that a machine may execute. In at least one embodiment, instruction decoder <b>2428</b> parses an instruction into an opcode and corresponding data and control fields that may be used by micro-architecture to perform operations in accordance with at least one embodiment. In at least one embodiment, a trace cache <b>2430</b> may assemble decoded uops into program ordered sequences or traces in a uop queue <b>2434</b> for execution. In at least one embodiment, when trace cache <b>2430</b> encounters a complex instruction, a microcode ROM <b>2432</b> provides uops needed to complete an operation.</p><p id="p-0424" num="0401">In at least one embodiment, some instructions may be converted into a single micro-op, whereas others need several micro-ops to complete full operation. In at least one embodiment, if more than four micro-ops are needed to complete an instruction, instruction decoder <b>2428</b> may access microcode ROM <b>2432</b> to perform that instruction. In at least one embodiment, an instruction may be decoded into a small number of micro-ops for processing at instruction decoder <b>2428</b>. In at least one embodiment, an instruction may be stored within microcode ROM <b>2432</b> should a number of micro-ops be needed to accomplish such operation. In at least one embodiment, trace cache <b>2430</b> refers to an entry point programmable logic array (&#x201c;PLA&#x201d;) to determine a correct micro-instruction pointer for reading microcode sequences to complete one or more instructions from microcode ROM <b>2432</b> in accordance with at least one embodiment. In at least one embodiment, after microcode ROM <b>2432</b> finishes sequencing micro-ops for an instruction, front end <b>2401</b> of a machine may resume fetching micro-ops from trace cache <b>2430</b>.</p><p id="p-0425" num="0402">In at least one embodiment, out-of-order execution engine (&#x201c;out of order engine&#x201d;) <b>2403</b> may prepare instructions for execution. In at least one embodiment, out-of-order execution logic has a number of buffers to smooth out and re-order flow of instructions to optimize performance as they go down a pipeline and get scheduled for execution. In at least one embodiment, out-of-order execution engine <b>2403</b> includes, without limitation, an allocator/register renamer <b>2440</b>, a memory uop queue <b>2442</b>, an integer/floating point uop queue <b>2444</b>, a memory scheduler <b>2446</b>, a fast scheduler <b>2402</b>, a slow/general floating point scheduler (&#x201c;slow/general FP scheduler&#x201d;) <b>2404</b>, and a simple floating point scheduler (&#x201c;simple FP scheduler&#x201d;) <b>2406</b>. In at least one embodiment, fast schedule <b>2402</b>, slow/general floating point scheduler <b>2404</b>, and simple floating point scheduler <b>2406</b> are also collectively referred to herein as &#x201c;uop schedulers <b>2402</b>, <b>2404</b>, <b>2406</b>.&#x201d; In at least one embodiment, allocator/register renamer <b>2440</b> allocates machine buffers and resources that each uop needs in order to execute. In at least one embodiment, allocator/register renamer <b>2440</b> renames logic registers onto entries in a register file. In at least one embodiment, allocator/register renamer <b>2440</b> also allocates an entry for each uop in one of two uop queues, memory uop queue <b>2442</b> for memory operations and integer/floating point uop queue <b>2444</b> for non-memory operations, in front of memory scheduler <b>2446</b> and uop schedulers <b>2402</b>, <b>2404</b>, <b>2406</b>. In at least one embodiment, uop schedulers <b>2402</b>, <b>2404</b>, <b>2406</b>, determine when a uop is ready to execute based on readiness of their dependent input register operand sources and availability of execution resources uops need to complete their operation. In at least one embodiment, fast scheduler <b>2402</b> may schedule on each half of a main clock cycle while slow/general floating point scheduler <b>2404</b> and simple floating point scheduler <b>2406</b> may schedule once per main processor clock cycle. In at least one embodiment, uop schedulers <b>2402</b>, <b>2404</b>, <b>2406</b> arbitrate for dispatch ports to schedule uops for execution.</p><p id="p-0426" num="0403">In at least one embodiment, execution block <b>2411</b> includes, without limitation, an integer register file/bypass network <b>2408</b>, a floating point register file/bypass network (&#x201c;FP register file/bypass network&#x201d;) <b>2410</b>, address generation units (&#x201c;AGUs&#x201d;) <b>2412</b> and <b>2414</b>, fast Arithmetic Logic Units (ALUs) (&#x201c;fast ALUs&#x201d;) <b>2416</b> and <b>2418</b>, a slow Arithmetic Logic Unit (&#x201c;slow ALU&#x201d;) <b>2420</b>, a floating point ALU (&#x201c;FP&#x201d;) <b>2422</b>, and a floating point move unit (&#x201c;FP move&#x201d;) <b>2424</b>. In at least one embodiment, integer register file/bypass network <b>2408</b> and floating point register file/bypass network <b>2410</b> are also referred to herein as &#x201c;register files <b>2408</b>, <b>2410</b>.&#x201d; In at least one embodiment, AGUSs <b>2412</b> and <b>2414</b>, fast ALUs <b>2416</b> and <b>2418</b>, slow ALU <b>2420</b>, floating point ALU <b>2422</b>, and floating point move unit <b>2424</b> are also referred to herein as &#x201c;execution units <b>2412</b>, <b>2414</b>, <b>2416</b>, <b>2418</b>, <b>2420</b>, <b>2422</b>, and <b>2424</b>.&#x201d; In at least one embodiment, execution block <b>2411</b> may include, without limitation, any number (including zero) and type of register files, bypass networks, address generation units, and execution units, in any combination.</p><p id="p-0427" num="0404">In at least one embodiment, register networks <b>2408</b>, <b>2410</b> may be arranged between uop schedulers <b>2402</b>, <b>2404</b>, <b>2406</b>, and execution units <b>2412</b>, <b>2414</b>, <b>2416</b>, <b>2418</b>, <b>2420</b>, <b>2422</b>, and <b>2424</b>. In at least one embodiment, integer register file/bypass network <b>2408</b> performs integer operations. In at least one embodiment, floating point register file/bypass network <b>2410</b> performs floating point operations. In at least one embodiment, each of register networks <b>2408</b>, <b>2410</b> may include, without limitation, a bypass network that may bypass or forward just completed results that have not yet been written into a register file to new dependent uops. In at least one embodiment, register networks <b>2408</b>, <b>2410</b> may communicate data with each other. In at least one embodiment, integer register file/bypass network <b>2408</b> may include, without limitation, two separate register files, one register file for a low-order thirty-two bits of data and a second register file for a high order thirty-two bits of data. In at least one embodiment, floating point register file/bypass network <b>2410</b> may include, without limitation, 128-bit wide entries because floating point instructions typically have operands from 64 to 128 bits in width.</p><p id="p-0428" num="0405">In at least one embodiment, execution units <b>2412</b>, <b>2414</b>, <b>2416</b>, <b>2418</b>, <b>2420</b>, <b>2422</b>, <b>2424</b> may execute instructions. In at least one embodiment, register networks <b>2408</b>, <b>2410</b> store integer and floating point data operand values that micro-instructions need to execute. In at least one embodiment, processor <b>2400</b> may include, without limitation, any number and combination of execution units <b>2412</b>, <b>2414</b>, <b>2416</b>, <b>2418</b>, <b>2420</b>, <b>2422</b>, <b>2424</b>. In at least one embodiment, floating point ALU <b>2422</b> and floating point move unit <b>2424</b>, may execute floating point, MMX, SIMD, AVX and SSE, or other operations, including specialized machine learning instructions. In at least one embodiment, floating point ALU <b>2422</b> may include, without limitation, a 64-bit by 64-bit floating point divider to execute divide, square root, and remainder micro ops. In at least one embodiment, instructions involving a floating point value may be handled with floating point hardware. In at least one embodiment, ALU operations may be passed to fast ALUs <b>2416</b>, <b>2418</b>. In at least one embodiment, fast ALUS <b>2416</b>, <b>2418</b> may execute fast operations with an effective latency of half a clock cycle. In at least one embodiment, most complex integer operations go to slow ALU <b>2420</b> as slow ALU <b>2420</b> may include, without limitation, integer execution hardware for long-latency type of operations, such as a multiplier, shifts, flag logic, and branch processing. In at least one embodiment, memory load/store operations may be executed by AGUs <b>2412</b>, <b>2414</b>. In at least one embodiment, fast ALU <b>2416</b>, fast ALU <b>2418</b>, and slow ALU <b>2420</b> may perform integer operations on 64-bit data operands. In at least one embodiment, fast ALU <b>2416</b>, fast ALU <b>2418</b>, and slow ALU <b>2420</b> may be implemented to support a variety of data bit sizes including sixteen, thirty-two, 128, 256, etc. In at least one embodiment, floating point ALU <b>2422</b> and floating point move unit <b>2424</b> may be implemented to support a range of operands having bits of various widths, such as 128-bit wide packed data operands in conjunction with SIMD and multimedia instructions.</p><p id="p-0429" num="0406">In at least one embodiment, uop schedulers <b>2402</b>, <b>2404</b>, <b>2406</b> dispatch dependent operations before a parent load has finished executing. In at least one embodiment, as uops may be speculatively scheduled and executed in processor <b>2400</b>, processor <b>2400</b> may also include logic to handle memory misses. In at least one embodiment, if a data load misses in a data cache, there may be dependent operations in flight in a pipeline that have left a scheduler with temporarily incorrect data. In at least one embodiment, a replay mechanism tracks and re-executes instructions that use incorrect data. In at least one embodiment, dependent operations might need to be replayed and independent ones may be allowed to complete. In at least one embodiment, schedulers and a replay mechanism of at least one embodiment of a processor may also be designed to catch instruction sequences for text string comparison operations.</p><p id="p-0430" num="0407">In at least one embodiment, &#x201c;registers&#x201d; may refer to on-board processor storage locations that may be used as part of instructions to identify operands. In at least one embodiment, registers may be those that may be usable from outside of a processor (from a programmer's perspective). In at least one embodiment, registers might not be limited to a particular type of circuit. Rather, in at least one embodiment, a register may store data, provide data, and perform functions described herein. In at least one embodiment, registers described herein may be implemented by circuitry within a processor using any number of different techniques, such as dedicated physical registers, dynamically allocated physical registers using register renaming, combinations of dedicated and dynamically allocated physical registers, etc. In at least one embodiment, integer registers store 32-bit integer data. A register file of at least one embodiment also contains eight multimedia SIMD registers for packed data.</p><p id="p-0431" num="0408">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment portions or all of inference and/or training logic <b>815</b> may be incorporated into execution block <b>2411</b> and other memory or registers shown or not shown. For example, in at least one embodiment, training and/or inferencing techniques described herein may use one or more of ALUs illustrated in execution block <b>2411</b>. Moreover, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs of execution block <b>2411</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0432" num="0409">In at least one embodiment, processor <b>2400</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, processor <b>2400</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0433" num="0410"><figref idref="DRAWINGS">FIG. <b>25</b></figref> illustrates a deep learning application processor <b>2500</b>, according to at least one embodiment. In at least one embodiment, deep learning application processor <b>2500</b> uses instructions that, if executed by deep learning application processor <b>2500</b>, cause deep learning application processor <b>2500</b> to perform some or all of processes and techniques described throughout this disclosure. In at least one embodiment, deep learning application processor <b>2500</b> is an application-specific integrated circuit (ASIC). In at least one embodiment, application processor <b>2500</b> performs matrix multiply operations either &#x201c;hard-wired&#x201d; into hardware as a result of performing one or more instructions or both. In at least one embodiment, deep learning application processor <b>2500</b> includes, without limitation, processing clusters <b>2510</b>(<b>1</b>)-<b>2510</b>(<b>12</b>), Inter-Chip Links (&#x201c;ICLs&#x201d;) <b>2520</b>(<b>1</b>)-<b>2520</b>(<b>12</b>), Inter-Chip Controllers (&#x201c;ICCs&#x201d;) <b>2530</b>(<b>1</b>)-<b>2530</b>(<b>2</b>), high-bandwidth memory second generation (&#x201c;HBM2&#x201d;) <b>2540</b>(<b>1</b>)-<b>2540</b>(<b>4</b>), memory controllers (&#x201c;Mem Ctrlrs&#x201d;) <b>2542</b>(<b>1</b>)-<b>2542</b>(<b>4</b>), high bandwidth memory physical layer (&#x201c;HBM PHY&#x201d;) <b>2544</b>(<b>1</b>)-<b>2544</b>(<b>4</b>), a management-controller central processing unit (&#x201c;management-controller CPU&#x201d;) <b>2550</b>, a Serial Peripheral Interface, Inter-Integrated Circuit, and General Purpose Input/Output block (&#x201c;SPI, I<sup>2</sup>C, GPIO&#x201d;) <b>2560</b>, a peripheral component interconnect express controller and direct memory access block (&#x201c;PCIe Controller and DMA&#x201d;) <b>2570</b>, and a sixteen-lane peripheral component interconnect express port (&#x201c;PCI Express&#xd7;16&#x201d;) <b>2580</b>.</p><p id="p-0434" num="0411">In at least one embodiment, processing clusters <b>2510</b> may perform deep learning operations, including inference or prediction operations based on weight parameters calculated one or more training techniques, including those described herein. In at least one embodiment, each processing cluster <b>2510</b> may include, without limitation, any number and type of processors. In at least one embodiment, deep learning application processor <b>2500</b> may include any number and type of processing clusters <b>2500</b>. In at least one embodiment, Inter-Chip Links <b>2520</b> are bi-directional. In at least one embodiment, Inter-Chip Links <b>2520</b> and Inter-Chip Controllers <b>2530</b> enable multiple deep learning application processors <b>2500</b> to exchange information, including activation information resulting from performing one or more machine learning algorithms embodied in one or more neural networks. In at least one embodiment, deep learning application processor <b>2500</b> may include any number (including zero) and type of ICLs <b>2520</b> and ICCs <b>2530</b>.</p><p id="p-0435" num="0412">In at least one embodiment, HBM2s <b>2540</b> provide a total of 32 Gigabytes (GB) of memory. In at least one embodiment, HBM2 <b>2540</b>(<i>i</i>) is associated with both memory controller <b>2542</b>(<i>i</i>) and HBM PHY <b>2544</b>(<i>i</i>) where &#x201c;i&#x201d; is an arbitrary integer. In at least one embodiment, any number of HBM2s <b>2540</b> may provide any type and total amount of high bandwidth memory and may be associated with any number (including zero) and type of memory controllers <b>2542</b> and HBM PHYs <b>2544</b>. In at least one embodiment, SPI, I<sup>2</sup>C, GPIO <b>2560</b>, PCIe Controller and DMA <b>2570</b>, and/or PCIe <b>2580</b> may be replaced with any number and type of blocks that enable any number and type of communication standards in any technically feasible fashion.</p><p id="p-0436" num="0413">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, deep learning application processor is used to train a machine learning model, such as a neural network, to predict or infer information provided to deep learning application processor <b>2500</b>. In at least one embodiment, deep learning application processor <b>2500</b> is used to infer or predict information based on a trained machine learning model (e.g., neural network) that has been trained by another processor or system or by deep learning application processor <b>2500</b>. In at least one embodiment, processor <b>2500</b> may be used to perform one or more neural network use cases described herein.</p><p id="p-0437" num="0414">In at least one embodiment, deep learning application processor <b>2500</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, deep learning application processor <b>2500</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0438" num="0415"><figref idref="DRAWINGS">FIG. <b>26</b></figref> is a block diagram of a neuromorphic processor <b>2600</b>, according to at least one embodiment. In at least one embodiment, neuromorphic processor <b>2600</b> may receive one or more inputs from sources external to neuromorphic processor <b>2600</b>. In at least one embodiment, these inputs may be transmitted to one or more neurons <b>2602</b> within neuromorphic processor <b>2600</b>. In at least one embodiment, neurons <b>2602</b> and components thereof may be implemented using circuitry or logic, including one or more arithmetic logic units (ALUs). In at least one embodiment, neuromorphic processor <b>2600</b> may include, without limitation, thousands or millions of instances of neurons <b>2602</b>, but any suitable number of neurons <b>2602</b> may be used. In at least one embodiment, each instance of neuron <b>2602</b> may include a neuron input <b>2604</b> and a neuron output <b>2606</b>. In at least one embodiment, neurons <b>2602</b> may generate outputs that may be transmitted to inputs of other instances of neurons <b>2602</b>. For example, in at least one embodiment, neuron inputs <b>2604</b> and neuron outputs <b>2606</b> may be interconnected via synapses <b>2608</b>.</p><p id="p-0439" num="0416">In at least one embodiment, neurons <b>2602</b> and synapses <b>2608</b> may be interconnected such that neuromorphic processor <b>2600</b> operates to process or analyze information received by neuromorphic processor <b>2600</b>. In at least one embodiment, neurons <b>2602</b> may transmit an output pulse (or &#x201c;fire&#x201d; or &#x201c;spike&#x201d;) when inputs received through neuron input <b>2604</b> exceed a threshold. In at least one embodiment, neurons <b>2602</b> may sum or integrate signals received at neuron inputs <b>2604</b>. For example, in at least one embodiment, neurons <b>2602</b> may be implemented as leaky integrate-and-fire neurons, wherein if a sum (referred to as a &#x201c;membrane potential&#x201d;) exceeds a threshold value, neuron <b>2602</b> may generate an output (or &#x201c;fire&#x201d;) using a transfer function such as a sigmoid or threshold function. In at least one embodiment, a leaky integrate-and-fire neuron may sum signals received at neuron inputs <b>2604</b> into a membrane potential and may also apply a decay factor (or leak) to reduce a membrane potential. In at least one embodiment, a leaky integrate-and-fire neuron may fire if multiple input signals are received at neuron inputs <b>2604</b> rapidly enough to exceed a threshold value (i.e., before a membrane potential decays too low to fire). In at least one embodiment, neurons <b>2602</b> may be implemented using circuits or logic that receive inputs, integrate inputs into a membrane potential, and decay a membrane potential. In at least one embodiment, inputs may be averaged, or any other suitable transfer function may be used. Furthermore, in at least one embodiment, neurons <b>2602</b> may include, without limitation, comparator circuits or logic that generate an output spike at neuron output <b>2606</b> when result of applying a transfer function to neuron input <b>2604</b> exceeds a threshold. In at least one embodiment, once neuron <b>2602</b> fires, it may disregard previously received input information by, for example, resetting a membrane potential to 0 or another suitable default value. In at least one embodiment, once membrane potential is reset to 0, neuron <b>2602</b> may resume normal operation after a suitable period of time (or refractory period).</p><p id="p-0440" num="0417">In at least one embodiment, neurons <b>2602</b> may be interconnected through synapses <b>2608</b>. In at least one embodiment, synapses <b>2608</b> may operate to transmit signals from an output of a first neuron <b>2602</b> to an input of a second neuron <b>2602</b>. In at least one embodiment, neurons <b>2602</b> may transmit information over more than one instance of synapse <b>2608</b>. In at least one embodiment, one or more instances of neuron output <b>2606</b> may be connected, via an instance of synapse <b>2608</b>, to an instance of neuron input <b>2604</b> in same neuron <b>2602</b>. In at least one embodiment, an instance of neuron <b>2602</b> generating an output to be transmitted over an instance of synapse <b>2608</b> may be referred to as a &#x201c;pre-synaptic neuron&#x201d; with respect to that instance of synapse <b>2608</b>. In at least one embodiment, an instance of neuron <b>2602</b> receiving an input transmitted over an instance of synapse <b>2608</b> may be referred to as a &#x201c;post-synaptic neuron&#x201d; with respect to that instance of synapse <b>2608</b>. Because an instance of neuron <b>2602</b> may receive inputs from one or more instances of synapse <b>2608</b>, and may also transmit outputs over one or more instances of synapse <b>2608</b>, a single instance of neuron <b>2602</b> may therefore be both a &#x201c;pre-synaptic neuron&#x201d; and &#x201c;post-synaptic neuron,&#x201d; with respect to various instances of synapses <b>2608</b>, in at least one embodiment.</p><p id="p-0441" num="0418">In at least one embodiment, neurons <b>2602</b> may be organized into one or more layers. In at least one embodiment, each instance of neuron <b>2602</b> may have one neuron output <b>2606</b> that may fan out through one or more synapses <b>2608</b> to one or more neuron inputs <b>2604</b>. In at least one embodiment, neuron outputs <b>2606</b> of neurons <b>2602</b> in a first layer <b>2610</b> may be connected to neuron inputs <b>2604</b> of neurons <b>2602</b> in a second layer <b>2612</b>. In at least one embodiment, layer <b>2610</b> may be referred to as a &#x201c;feed-forward layer.&#x201d; In at least one embodiment, each instance of neuron <b>2602</b> in an instance of first layer <b>2610</b> may fan out to each instance of neuron <b>2602</b> in second layer <b>2612</b>. In at least one embodiment, first layer <b>2610</b> may be referred to as a &#x201c;fully connected feed-forward layer.&#x201d; In at least one embodiment, each instance of neuron <b>2602</b> in an instance of second layer <b>2612</b> may fan out to fewer than all instances of neuron <b>2602</b> in a third layer <b>2614</b>. In at least one embodiment, second layer <b>2612</b> may be referred to as a &#x201c;sparsely connected feed-forward layer.&#x201d; In at least one embodiment, neurons <b>2602</b> in second layer <b>2612</b> may fan out to neurons <b>2602</b> in multiple other layers, including to neurons <b>2602</b> also in second layer <b>2612</b>. In at least one embodiment, second layer <b>2612</b> may be referred to as a &#x201c;recurrent layer.&#x201d; In at least one embodiment, neuromorphic processor <b>2600</b> may include, without limitation, any suitable combination of recurrent layers and feed-forward layers, including, without limitation, both sparsely connected feed-forward layers and fully connected feed-forward layers.</p><p id="p-0442" num="0419">In at least one embodiment, neuromorphic processor <b>2600</b> may include, without limitation, a reconfigurable interconnect architecture or dedicated hard-wired interconnects to connect synapse <b>2608</b> to neurons <b>2602</b>. In at least one embodiment, neuromorphic processor <b>2600</b> may include, without limitation, circuitry or logic that allows synapses to be allocated to different neurons <b>2602</b> as needed based on neural network topology and neuron fan-in/out. For example, in at least one embodiment, synapses <b>2608</b> may be connected to neurons <b>2602</b> using an interconnect fabric, such as network-on-chip, or with dedicated connections. In at least one embodiment, synapse interconnections and components thereof may be implemented using circuitry or logic.</p><p id="p-0443" num="0420">In at least one embodiment, neuromorphic processor <b>2600</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, neuromorphic processor <b>2600</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0444" num="0421"><figref idref="DRAWINGS">FIG. <b>27</b></figref> is a block diagram of a processing system, according to at least one embodiment. In at least one embodiment, system <b>2700</b> includes one or more processors <b>2702</b> and one or more graphics processors <b>2708</b>, and may be a single processor desktop system, a multiprocessor workstation system, or a server system having a large number of processors <b>2702</b> or processor cores <b>2707</b>. In at least one embodiment, system <b>2700</b> is a processing platform incorporated within a system-on-a-chip (SoC) integrated circuit for use in mobile, handheld, or embedded devices.</p><p id="p-0445" num="0422">In at least one embodiment, system <b>2700</b> can include, or be incorporated within a server-based gaming platform, a game console, including a game and media console, a mobile gaming console, a handheld game console, or an online game console. In at least one embodiment, system <b>2700</b> is a mobile phone, a smart phone, a tablet computing device or a mobile Internet device. In at least one embodiment, processing system <b>2700</b> can also include, couple with, or be integrated within a wearable device, such as a smart watch wearable device, a smart eyewear device, an augmented reality device, or a virtual reality device. In at least one embodiment, processing system <b>2700</b> is a television or set top box device having one or more processors <b>2702</b> and a graphical interface generated by one or more graphics processors <b>2708</b>.</p><p id="p-0446" num="0423">In at least one embodiment, one or more processors <b>2702</b> each include one or more processor cores <b>2707</b> to process instructions which, when executed, perform operations for system and user software. In at least one embodiment, each of one or more processor cores <b>2707</b> is configured to process a specific instruction sequence <b>2709</b>. In at least one embodiment, instruction sequence <b>2709</b> may facilitate Complex Instruction Set Computing (CISC), Reduced Instruction Set Computing (RISC), or computing via a Very Long Instruction Word (VLIW). In at least one embodiment, processor cores <b>2707</b> may each process a different instruction sequence <b>2709</b>, which may include instructions to facilitate emulation of other instruction sequences. In at least one embodiment, processor core <b>2707</b> may also include other processing devices, such a Digital Signal Processor (DSP).</p><p id="p-0447" num="0424">In at least one embodiment, processor <b>2702</b> includes a cache memory <b>2704</b>. In at least one embodiment, processor <b>2702</b> can have a single internal cache or multiple levels of internal cache. In at least one embodiment, cache memory is shared among various components of processor <b>2702</b>. In at least one embodiment, processor <b>2702</b> also uses an external cache (e.g., a Level-3 (L3) cache or Last Level Cache (LLC)) (not shown), which may be shared among processor cores <b>2707</b> using known cache coherency techniques. In at least one embodiment, a register file <b>2706</b> is additionally included in processor <b>2702</b>, which may include different types of registers for storing different types of data (e.g., integer registers, floating point registers, status registers, and an instruction pointer register). In at least one embodiment, register file <b>2706</b> may include general-purpose registers or other registers.</p><p id="p-0448" num="0425">In at least one embodiment, one or more processor(s) <b>2702</b> are coupled with one or more interface bus(es) <b>2710</b> to transmit communication signals such as address, data, or control signals between processor <b>2702</b> and other components in system <b>2700</b>. In at least one embodiment, interface bus <b>2710</b> can be a processor bus, such as a version of a Direct Media Interface (DMI) bus. In at least one embodiment, interface bus <b>2710</b> is not limited to a DMI bus, and may include one or more Peripheral Component Interconnect buses (e.g., PCI, PCI Express), memory busses, or other types of interface busses. In at least one embodiment processor(s) <b>2702</b> include an integrated memory controller <b>2716</b> and a platform controller hub <b>2730</b>. In at least one embodiment, memory controller <b>2716</b> facilitates communication between a memory device and other components of system <b>2700</b>, while platform controller hub (PCH) <b>2730</b> provides connections to I/O devices via a local I/O bus.</p><p id="p-0449" num="0426">In at least one embodiment, a memory device <b>2720</b> can be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory device, phase-change memory device, or some other memory device having suitable performance to serve as process memory. In at least one embodiment, memory device <b>2720</b> can operate as system memory for system <b>2700</b>, to store data <b>2722</b> and instructions <b>2721</b> for use when one or more processors <b>2702</b> executes an application or process. In at least one embodiment, memory controller <b>2716</b> also couples with an optional external graphics processor <b>2712</b>, which may communicate with one or more graphics processors <b>2708</b> in processors <b>2702</b> to perform graphics and media operations. In at least one embodiment, a display device <b>2711</b> can connect to processor(s) <b>2702</b>. In at least one embodiment, display device <b>2711</b> can include one or more of an internal display device, as in a mobile electronic device or a laptop device, or an external display device attached via a display interface (e.g., DisplayPort, etc.). In at least one embodiment, display device <b>2711</b> can include a head mounted display (HMD) such as a stereoscopic display device for use in virtual reality (VR) applications or augmented reality (AR) applications.</p><p id="p-0450" num="0427">In at least one embodiment, platform controller hub <b>2730</b> enables peripherals to connect to memory device <b>2720</b> and processor <b>2702</b> via a high-speed I/O bus. In at least one embodiment, I/O peripherals include, but are not limited to, an audio controller <b>2746</b>, a network controller <b>2734</b>, a firmware interface <b>2728</b>, a wireless transceiver <b>2726</b>, touch sensors <b>2725</b>, a data storage device <b>2724</b> (e.g., hard disk drive, flash memory, etc.). In at least one embodiment, data storage device <b>2724</b> can connect via a storage interface (e.g., SATA) or via a peripheral bus, such as a Peripheral Component Interconnect bus (e.g., PCI, PCI Express). In at least one embodiment, touch sensors <b>2725</b> can include touch screen sensors, pressure sensors, or fingerprint sensors. In at least one embodiment, wireless transceiver <b>2726</b> can be a Wi-Fi transceiver, a Bluetooth transceiver, or a mobile network transceiver such as a 3G, 4G, or Long Term Evolution (LTE) transceiver. In at least one embodiment, firmware interface <b>2728</b> enables communication with system firmware, and can be, for example, a unified extensible firmware interface (UEFI). In at least one embodiment, network controller <b>2734</b> can enable a network connection to a wired network. In at least one embodiment, a high-performance network controller (not shown) couples with interface bus <b>2710</b>. In at least one embodiment, audio controller <b>2746</b> is a multi-channel high definition audio controller. In at least one embodiment, system <b>2700</b> includes an optional legacy I/O controller <b>2740</b> for coupling legacy (e.g., Personal System 2 (PS/2)) devices to system <b>2700</b>. In at least one embodiment, platform controller hub <b>2730</b> can also connect to one or more Universal Serial Bus (USB) controllers <b>2742</b> connect input devices, such as keyboard and mouse <b>2743</b> combinations, a camera <b>2744</b>, or other USB input devices.</p><p id="p-0451" num="0428">In at least one embodiment, an instance of memory controller <b>2716</b> and platform controller hub <b>2730</b> may be integrated into a discreet external graphics processor, such as external graphics processor <b>2712</b>. In at least one embodiment, platform controller hub <b>2730</b> and/or memory controller <b>2716</b> may be external to one or more processor(s) <b>2702</b>. For example, in at least one embodiment, system <b>2700</b> can include an external memory controller <b>2716</b> and platform controller hub <b>2730</b>, which may be configured as a memory controller hub and peripheral controller hub within a system chipset that is in communication with processor(s) <b>2702</b>.</p><p id="p-0452" num="0429">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment portions or all of inference and/or training logic <b>815</b> may be incorporated into graphics processor <b>2708</b>. For example, in at least one embodiment, training and/or inferencing techniques described herein may use one or more of ALUs embodied in a 3D pipeline. Moreover, in at least one embodiment, inferencing and/or training operations described herein may be done using logic other than logic illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A or <b>8</b>B</figref>. In at least one embodiment, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs of graphics processor <b>2708</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0453" num="0430">In at least one embodiment, system <b>2700</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, system <b>2700</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0454" num="0431"><figref idref="DRAWINGS">FIG. <b>28</b></figref> is a block diagram of a processor <b>2800</b> having one or more processor cores <b>2802</b>A-<b>2802</b>N, an integrated memory controller <b>2814</b>, and an integrated graphics processor <b>2808</b>, according to at least one embodiment. In at least one embodiment, processor <b>2800</b> can include additional cores up to and including additional core <b>2802</b>N represented by dashed lined boxes. In at least one embodiment, each of processor cores <b>2802</b>A-<b>2802</b>N includes one or more internal cache units <b>2804</b>A-<b>2804</b>N. In at least one embodiment, each processor core also has access to one or more shared cached units <b>2806</b>.</p><p id="p-0455" num="0432">In at least one embodiment, internal cache units <b>2804</b>A-<b>2804</b>N and shared cache units <b>2806</b> represent a cache memory hierarchy within processor <b>2800</b>. In at least one embodiment, cache memory units <b>2804</b>A-<b>2804</b>N may include at least one level of instruction and data cache within each processor core and one or more levels of shared mid-level cache, such as a Level 2 (L2), Level 3 (L3), Level 4 (L4), or other levels of cache, where a highest level of cache before external memory is classified as an LLC. In at least one embodiment, cache coherency logic maintains coherency between various cache units <b>2806</b> and <b>2804</b>A-<b>2804</b>N.</p><p id="p-0456" num="0433">In at least one embodiment, processor <b>2800</b> may also include a set of one or more bus controller units <b>2816</b> and a system agent core <b>2810</b>. In at least one embodiment, bus controller units <b>2816</b> manage a set of peripheral buses, such as one or more PCI or PCI express busses. In at least one embodiment, system agent core <b>2810</b> provides management functionality for various processor components. In at least one embodiment, system agent core <b>2810</b> includes one or more integrated memory controllers <b>2814</b> to manage access to various external memory devices (not shown).</p><p id="p-0457" num="0434">In at least one embodiment, one or more of processor cores <b>2802</b>A-<b>2802</b>N include support for simultaneous multi-threading. In at least one embodiment, system agent core <b>2810</b> includes components for coordinating and operating cores <b>2802</b>A-<b>2802</b>N during multi-threaded processing. In at least one embodiment, system agent core <b>2810</b> may additionally include a power control unit (PCU), which includes logic and components to regulate one or more power states of processor cores <b>2802</b>A-<b>2802</b>N and graphics processor <b>2808</b>.</p><p id="p-0458" num="0435">In at least one embodiment, processor <b>2800</b> additionally includes graphics processor <b>2808</b> to execute graphics processing operations. In at least one embodiment, graphics processor <b>2808</b> couples with shared cache units <b>2806</b>, and system agent core <b>2810</b>, including one or more integrated memory controllers <b>2814</b>. In at least one embodiment, system agent core <b>2810</b> also includes a display controller <b>2811</b> to drive graphics processor output to one or more coupled displays. In at least one embodiment, display controller <b>2811</b> may also be a separate module coupled with graphics processor <b>2808</b> via at least one interconnect, or may be integrated within graphics processor <b>2808</b>.</p><p id="p-0459" num="0436">In at least one embodiment, a ring-based interconnect unit <b>2812</b> is used to couple internal components of processor <b>2800</b>. In at least one embodiment, an alternative interconnect unit may be used, such as a point-to-point interconnect, a switched interconnect, or other techniques. In at least one embodiment, graphics processor <b>2808</b> couples with ring interconnect <b>2812</b> via an I/O link <b>2813</b>.</p><p id="p-0460" num="0437">In at least one embodiment, I/O link <b>2813</b> represents at least one of multiple varieties of I/O interconnects, including an on package I/O interconnect which facilitates communication between various processor components and a high-performance embedded memory module <b>2818</b>, such as an eDRAM module. In at least one embodiment, each of processor cores <b>2802</b>A-<b>2802</b>N and graphics processor <b>2808</b> use embedded memory module <b>2818</b> as a shared Last Level Cache.</p><p id="p-0461" num="0438">In at least one embodiment, processor cores <b>2802</b>A-<b>2802</b>N are homogeneous cores executing a common instruction set architecture. In at least one embodiment, processor cores <b>2802</b>A-<b>2802</b>N are heterogeneous in terms of instruction set architecture (ISA), where one or more of processor cores <b>2802</b>A-<b>2802</b>N execute a common instruction set, while one or more other cores of processor cores <b>2802</b>A-<b>2802</b>N executes a subset of a common instruction set or a different instruction set. In at least one embodiment, processor cores <b>2802</b>A-<b>2802</b>N are heterogeneous in terms of microarchitecture, where one or more cores having a relatively higher power consumption couple with one or more power cores having a lower power consumption. In at least one embodiment, processor <b>2800</b> can be implemented on one or more chips or as an SoC integrated circuit.</p><p id="p-0462" num="0439">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment portions or all of inference and/or training logic <b>815</b> may be incorporated into graphics processor <b>2808</b>. For example, in at least one embodiment, training and/or inferencing techniques described herein may use one or more of ALUs embodied in a 3D pipeline, graphics core(s) <b>2802</b>, shared function logic, or other logic in <figref idref="DRAWINGS">FIG. <b>28</b></figref>. Moreover, in at least one embodiment, inferencing and/or training operations described herein may be done using logic other than logic illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A or <b>8</b>B</figref>. In at least one embodiment, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs of processor <b>2800</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0463" num="0440">In at least one embodiment, processor <b>2800</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, processor <b>2800</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0464" num="0441"><figref idref="DRAWINGS">FIG. <b>29</b></figref> is a block diagram of a graphics processor <b>2900</b>, which may be a discrete graphics processing unit, or may be a graphics processor integrated with a plurality of processing cores. In at least one embodiment, graphics processor <b>2900</b> communicates via a memory mapped I/O interface to registers on graphics processor <b>2900</b> and with commands placed into memory. In at least one embodiment, graphics processor <b>2900</b> includes a memory interface <b>2914</b> to access memory. In at least one embodiment, memory interface <b>2914</b> is an interface to local memory, one or more internal caches, one or more shared external caches, and/or to system memory.</p><p id="p-0465" num="0442">In at least one embodiment, graphics processor <b>2900</b> also includes a display controller <b>2902</b> to drive display output data to a display device <b>2920</b>. In at least one embodiment, display controller <b>2902</b> includes hardware for one or more overlay planes for display device <b>2920</b> and composition of multiple layers of video or user interface elements. In at least one embodiment, display device <b>2920</b> can be an internal or external display device. In at least one embodiment, display device <b>2920</b> is a head mounted display device, such as a virtual reality (VR) display device or an augmented reality (AR) display device. In at least one embodiment, graphics processor <b>2900</b> includes a video codec engine <b>2906</b> to encode, decode, or transcode media to, from, or between one or more media encoding formats, including, but not limited to Moving Picture Experts Group (MPEG) formats such as MPEG-2, Advanced Video Coding (AVC) formats such as H.264/MPEG-4 AVC, as well as the Society of Motion Picture &#x26; Television Engineers (SMPTE) 421M/VC-1, and Joint Photographic Experts Group (JPEG) formats such as JPEG, and Motion JPEG (MJPEG) formats.</p><p id="p-0466" num="0443">In at least one embodiment, graphics processor <b>2900</b> includes a block image transfer (BLIT) engine <b>2904</b> to perform two-dimensional (2D) rasterizer operations including, for example, bit-boundary block transfers. However, in at least one embodiment, 2D graphics operations are performed using one or more components of a graphics processing engine (GPE) <b>2910</b>. In at least one embodiment, GPE <b>2910</b> is a compute engine for performing graphics operations, including three-dimensional (3D) graphics operations and media operations.</p><p id="p-0467" num="0444">In at least one embodiment, GPE <b>2910</b> includes a 3D pipeline <b>2912</b> for performing 3D operations, such as rendering three-dimensional images and scenes using processing functions that act upon 3D primitive shapes (e.g., rectangle, triangle, etc.). In at least one embodiment, 3D pipeline <b>2912</b> includes programmable and fixed function elements that perform various tasks and/or spawn execution threads to a 3D/Media sub-system <b>2915</b>. While 3D pipeline <b>2912</b> can be used to perform media operations, in at least one embodiment, GPE <b>2910</b> also includes a media pipeline <b>2916</b> that is used to perform media operations, such as video post-processing and image enhancement.</p><p id="p-0468" num="0445">In at least one embodiment, media pipeline <b>2916</b> includes fixed function or programmable logic units to perform one or more specialized media operations, such as video decode acceleration, video de-interlacing, and video encode acceleration in place of, or on behalf of, video codec engine <b>2906</b>. In at least one embodiment, media pipeline <b>2916</b> additionally includes a thread spawning unit to spawn threads for execution on 3D/Media sub-system <b>2915</b>. In at least one embodiment, spawned threads perform computations for media operations on one or more graphics execution units included in 3D/Media sub-system <b>2915</b>.</p><p id="p-0469" num="0446">In at least one embodiment, 3D/Media subsystem <b>2915</b> includes logic for executing threads spawned by 3D pipeline <b>2912</b> and media pipeline <b>2916</b>. In at least one embodiment, 3D pipeline <b>2912</b> and media pipeline <b>2916</b> send thread execution requests to 3D/Media subsystem <b>2915</b>, which includes thread dispatch logic for arbitrating and dispatching various requests to available thread execution resources. In at least one embodiment, execution resources include an array of graphics execution units to process 3D and media threads. In at least one embodiment, 3D/Media subsystem <b>2915</b> includes one or more internal caches for thread instructions and data. In at least one embodiment, subsystem <b>2915</b> also includes shared memory, including registers and addressable memory, to share data between threads and to store output data.</p><p id="p-0470" num="0447">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment portions or all of inference and/or training logic <b>815</b> may be incorporated into graphics processor <b>2900</b>. For example, in at least one embodiment, training and/or inferencing techniques described herein may use one or more of ALUs embodied in 3D pipeline <b>2912</b>. Moreover, in at least one embodiment, inferencing and/or training operations described herein may be done using logic other than logic illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A or <b>8</b>B</figref>. In at least one embodiment, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs of graphics processor <b>2900</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0471" num="0448">In at least one embodiment, graphics processor <b>2900</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, graphics processor <b>2900</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0472" num="0449"><figref idref="DRAWINGS">FIG. <b>30</b></figref> is a block diagram of a graphics processing engine <b>3010</b> of a graphics processor in accordance with at least one embodiment. In at least one embodiment, graphics processing engine (GPE) <b>3010</b> is a version of GPE <b>2910</b> shown in <figref idref="DRAWINGS">FIG. <b>29</b></figref>. In at least one embodiment, a media pipeline <b>3016</b> is optional and may not be explicitly included within GPE <b>3010</b>. In at least one embodiment, a separate media and/or image processor is coupled to GPE <b>3010</b>.</p><p id="p-0473" num="0450">In at least one embodiment, GPE <b>3010</b> is coupled to or includes a command streamer <b>3003</b>, which provides a command stream to a 3D pipeline <b>3012</b> and/or media pipeline <b>3016</b>. In at least one embodiment, command streamer <b>3003</b> is coupled to memory, which can be system memory, or one or more of internal cache memory and shared cache memory. In at least one embodiment, command streamer <b>3003</b> receives commands from memory and sends commands to 3D pipeline <b>3012</b> and/or media pipeline <b>3016</b>. In at least one embodiment, commands are instructions, primitives, or micro-operations fetched from a ring buffer, which stores commands for 3D pipeline <b>3012</b> and media pipeline <b>3016</b>. In at least one embodiment, a ring buffer can additionally include batch command buffers storing batches of multiple commands. In at least one embodiment, commands for 3D pipeline <b>3012</b> can also include references to data stored in memory, such as, but not limited to, vertex and geometry data for 3D pipeline <b>3012</b> and/or image data and memory objects for media pipeline <b>3016</b>. In at least one embodiment, 3D pipeline <b>3012</b> and media pipeline <b>3016</b> process commands and data by performing operations or by dispatching one or more execution threads to a graphics core array <b>3014</b>. In at least one embodiment, graphics core array <b>3014</b> includes one or more blocks of graphics cores (e.g., graphics core(s) <b>3015</b>A, graphics core(s) <b>3015</b>B), each block including one or more graphics cores. In at least one embodiment, each graphics core includes a set of graphics execution resources that includes general-purpose and graphics specific execution logic to perform graphics and compute operations, as well as fixed function texture processing and/or machine learning and artificial intelligence acceleration logic, including inference and/or training logic <b>815</b> in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> and <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>.</p><p id="p-0474" num="0451">In at least one embodiment, 3D pipeline <b>3012</b> includes fixed function and programmable logic to process one or more shader programs, such as vertex shaders, geometry shaders, pixel shaders, fragment shaders, compute shaders, or other shader programs, by processing instructions and dispatching execution threads to graphics core array <b>3014</b>. In at least one embodiment, graphics core array <b>3014</b> provides a unified block of execution resources for use in processing shader programs. In at least one embodiment, a multi-purpose execution logic (e.g., execution units) within graphics core(s) <b>3015</b>A-<b>3015</b>B of graphic core array <b>3014</b> includes support for various 3D API shader languages and can execute multiple simultaneous execution threads associated with multiple shaders.</p><p id="p-0475" num="0452">In at least one embodiment, graphics core array <b>3014</b> also includes execution logic to perform media functions, such as video and/or image processing. In at least one embodiment, execution units additionally include general-purpose logic that is programmable to perform parallel general-purpose computational operations, in addition to graphics processing operations.</p><p id="p-0476" num="0453">In at least one embodiment, output data generated by threads executing on graphics core array <b>3014</b> can output data to memory in a unified return buffer (URB) <b>3018</b>. In at least one embodiment, URB <b>3018</b> can store data for multiple threads. In at least one embodiment, URB <b>3018</b> may be used to send data between different threads executing on graphics core array <b>3014</b>. In at least one embodiment, URB <b>3018</b> may additionally be used for synchronization between threads on graphics core array <b>3014</b> and fixed function logic within shared function logic <b>3020</b>.</p><p id="p-0477" num="0454">In at least one embodiment, graphics core array <b>3014</b> is scalable, such that graphics core array <b>3014</b> includes a variable number of graphics cores, each having a variable number of execution units based on a target power and performance level of GPE <b>3010</b>. In at least one embodiment, execution resources are dynamically scalable, such that execution resources may be enabled or disabled as needed.</p><p id="p-0478" num="0455">In at least one embodiment, graphics core array <b>3014</b> is coupled to shared function logic <b>3020</b> that includes multiple resources that are shared between graphics cores in graphics core array <b>3014</b>. In at least one embodiment, shared functions performed by shared function logic <b>3020</b> are embodied in hardware logic units that provide specialized supplemental functionality to graphics core array <b>3014</b>. In at least one embodiment, shared function logic <b>3020</b> includes but is not limited to a sampler unit <b>3021</b>, a math unit <b>3022</b>, and inter-thread communication (ITC) logic <b>3023</b>. In at least one embodiment, one or more cache(s) <b>3025</b> are included in, or coupled to, shared function logic <b>3020</b>.</p><p id="p-0479" num="0456">In at least one embodiment, a shared function is used if demand for a specialized function is insufficient for inclusion within graphics core array <b>3014</b>. In at least one embodiment, a single instantiation of a specialized function is used in shared function logic <b>3020</b> and shared among other execution resources within graphics core array <b>3014</b>. In at least one embodiment, specific shared functions within shared function logic <b>3020</b> that are used extensively by graphics core array <b>3014</b> may be included within shared function logic <b>3026</b> within graphics core array <b>3014</b>. In at least one embodiment, shared function logic <b>3026</b> within graphics core array <b>3014</b> can include some or all logic within shared function logic <b>3020</b>. In at least one embodiment, all logic elements within shared function logic <b>3020</b> may be duplicated within shared function logic <b>3026</b> of graphics core array <b>3014</b>. In at least one embodiment, shared function logic <b>3020</b> is excluded in favor of shared function logic <b>3026</b> within graphics core array <b>3014</b>.</p><p id="p-0480" num="0457">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment portions or all of inference and/or training logic <b>815</b> may be incorporated into graphics processor <b>3010</b>. For example, in at least one embodiment, training and/or inferencing techniques described herein may use one or more of ALUs embodied in 3D pipeline <b>3012</b>, graphics core(s) <b>3015</b>, shared function logic <b>3026</b>, shared function logic <b>3020</b>, or other logic in <figref idref="DRAWINGS">FIG. <b>30</b></figref>. Moreover, in at least one embodiment, inferencing and/or training operations described herein may be done using logic other than logic illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A or <b>8</b>B</figref>. In at least one embodiment, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs of graphics processor <b>3010</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0481" num="0458">In at least one embodiment, graphics processing engine <b>3010</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, graphics processing engine <b>3010</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0482" num="0459"><figref idref="DRAWINGS">FIG. <b>31</b></figref> is a block diagram of hardware logic of a graphics processor core <b>3100</b>, according to at least one embodiment described herein. In at least one embodiment, graphics processor core <b>3100</b> is included within a graphics core array. In at least one embodiment, graphics processor core <b>3100</b>, sometimes referred to as a core slice, can be one or multiple graphics cores within a modular graphics processor. In at least one embodiment, graphics processor core <b>3100</b> is exemplary of one graphics core slice, and a graphics processor as described herein may include multiple graphics core slices based on target power and performance envelopes. In at least one embodiment, each graphics core <b>3100</b> can include a fixed function block <b>3130</b> coupled with multiple sub-cores <b>3101</b>A-<b>3101</b>F, also referred to as sub-slices, that include modular blocks of general-purpose and fixed function logic.</p><p id="p-0483" num="0460">In at least one embodiment, fixed function block <b>3130</b> includes a geometry and fixed function pipeline <b>3136</b> that can be shared by all sub-cores in graphics processor <b>3100</b>, for example, in lower performance and/or lower power graphics processor implementations. In at least one embodiment, geometry and fixed function pipeline <b>3136</b> includes a 3D fixed function pipeline, a video front-end unit, a thread spawner and thread dispatcher, and a unified return buffer manager, which manages unified return buffers.</p><p id="p-0484" num="0461">In at least one embodiment, fixed function block <b>3130</b> also includes a graphics SoC interface <b>3137</b>, a graphics microcontroller <b>3138</b>, and a media pipeline <b>3139</b>. In at least one embodiment, graphics SoC interface <b>3137</b> provides an interface between graphics core <b>3100</b> and other processor cores within a system on a chip integrated circuit. In at least one embodiment, graphics microcontroller <b>3138</b> is a programmable sub-processor that is configurable to manage various functions of graphics processor <b>3100</b>, including thread dispatch, scheduling, and pre-emption. In at least one embodiment, media pipeline <b>3139</b> includes logic to facilitate decoding, encoding, pre-processing, and/or post-processing of multimedia data, including image and video data. In at least one embodiment, media pipeline <b>3139</b> implements media operations via requests to compute or sampling logic within sub-cores <b>3101</b>A-<b>3101</b>F.</p><p id="p-0485" num="0462">In at least one embodiment, SoC interface <b>3137</b> enables graphics core <b>3100</b> to communicate with general-purpose application processor cores (e.g., CPUs) and/or other components within an SoC, including memory hierarchy elements such as a shared last level cache memory, system RAM, and/or embedded on-chip or on-package DRAM. In at least one embodiment, SoC interface <b>3137</b> can also enable communication with fixed function devices within an SoC, such as camera imaging pipelines, and enables use of and/or implements global memory atomics that may be shared between graphics core <b>3100</b> and CPUs within an SoC. In at least one embodiment, graphics SoC interface <b>3137</b> can also implement power management controls for graphics processor core <b>3100</b> and enable an interface between a clock domain of graphics processor core <b>3100</b> and other clock domains within an SoC. In at least one embodiment, SoC interface <b>3137</b> enables receipt of command buffers from a command streamer and global thread dispatcher that are configured to provide commands and instructions to each of one or more graphics cores within a graphics processor. In at least one embodiment, commands and instructions can be dispatched to media pipeline <b>3139</b>, when media operations are to be performed, or a geometry and fixed function pipeline (e.g., geometry and fixed function pipeline <b>3136</b>, and/or a geometry and fixed function pipeline <b>3114</b>) when graphics processing operations are to be performed.</p><p id="p-0486" num="0463">In at least one embodiment, graphics microcontroller <b>3138</b> can be configured to perform various scheduling and management tasks for graphics core <b>3100</b>. In at least one embodiment, graphics microcontroller <b>3138</b> can perform graphics and/or compute workload scheduling on various graphics parallel engines within execution unit (EU) arrays <b>3102</b>A-<b>3102</b>F, <b>3104</b>A-<b>3104</b>F within sub-cores <b>3101</b>A-<b>3101</b>F. In at least one embodiment, host software executing on a CPU core of an SoC including graphics core <b>3100</b> can submit workloads to one of multiple graphic processor paths, which invokes a scheduling operation on an appropriate graphics engine. In at least one embodiment, scheduling operations include determining which workload to run next, submitting a workload to a command streamer, pre-empting existing workloads running on an engine, monitoring progress of a workload, and notifying host software when a workload is complete. In at least one embodiment, graphics microcontroller <b>3138</b> can also facilitate low-power or idle states for graphics core <b>3100</b>, providing graphics core <b>3100</b> with an ability to save and restore registers within graphics core <b>3100</b> across low-power state transitions independently from an operating system and/or graphics driver software on a system.</p><p id="p-0487" num="0464">In at least one embodiment, graphics core <b>3100</b> may have greater than or fewer than illustrated sub-cores <b>3101</b>A-<b>3101</b>F, up to N modular sub-cores. For each set of N sub-cores, in at least one embodiment, graphics core <b>3100</b> can also include shared function logic <b>3110</b>, shared and/or cache memory <b>3112</b>, geometry/fixed function pipeline <b>3114</b>, as well as additional fixed function logic <b>3116</b> to accelerate various graphics and compute processing operations. In at least one embodiment, shared function logic <b>3110</b> can include logic units (e.g., sampler, math, and/or inter-thread communication logic) that can be shared by each N sub-cores within graphics core <b>3100</b>. In at least one embodiment, shared and/or cache memory <b>3112</b> can be a last-level cache for N sub-cores <b>3101</b>A-<b>3101</b>F within graphics core <b>3100</b> and can also serve as shared memory that is accessible by multiple sub-cores. In at least one embodiment, geometry/fixed function pipeline <b>3114</b> can be included instead of geometry/fixed function pipeline <b>3136</b> within fixed function block <b>3130</b> and can include similar logic units.</p><p id="p-0488" num="0465">In at least one embodiment, graphics core <b>3100</b> includes additional fixed function logic <b>3116</b> that can include various fixed function acceleration logic for use by graphics core <b>3100</b>. In at least one embodiment, additional fixed function logic <b>3116</b> includes an additional geometry pipeline for use in position-only shading. In position-only shading, at least two geometry pipelines exist, whereas in a full geometry pipeline within geometry and fixed function pipelines <b>3114</b>, <b>3136</b>, and a cull pipeline, which is an additional geometry pipeline that may be included within additional fixed function logic <b>3116</b>. In at least one embodiment, a cull pipeline is a trimmed down version of a full geometry pipeline. In at least one embodiment, a full pipeline and a cull pipeline can execute different instances of an application, each instance having a separate context. In at least one embodiment, position only shading can hide long cull runs of discarded triangles, enabling shading to be completed earlier in some instances. For example, in at least one embodiment, cull pipeline logic within additional fixed function logic <b>3116</b> can execute position shaders in parallel with a main application and generally generates critical results faster than a full pipeline, as a cull pipeline fetches and shades position attributes of vertices, without performing rasterization and rendering of pixels to a frame buffer. In at least one embodiment, a cull pipeline can use generated critical results to compute visibility information for all triangles without regard to whether those triangles are culled. In at least one embodiment, a full pipeline (which in this instance may be referred to as a replay pipeline) can consume visibility information to skip culled triangles to shade only visible triangles that are finally passed to a rasterization phase.</p><p id="p-0489" num="0466">In at least one embodiment, additional fixed function logic <b>3116</b> can also include machine-learning acceleration logic, such as fixed function matrix multiplication logic, for implementations including optimizations for machine learning training or inferencing.</p><p id="p-0490" num="0467">In at least one embodiment, within each graphics sub-core <b>3101</b>A-<b>3101</b>F includes a set of execution resources that may be used to perform graphics, media, and compute operations in response to requests by graphics pipeline, media pipeline, or shader programs. In at least one embodiment, graphics sub-cores <b>3101</b>A-<b>3101</b>F include multiple EU arrays <b>3102</b>A-<b>3102</b>F, <b>3104</b>A-<b>3104</b>F, thread dispatch and inter-thread communication (TD/IC) logic <b>3103</b>A-<b>3103</b>F, a 3D (e.g., texture) sampler <b>3105</b>A-<b>3105</b>F, a media sampler <b>3106</b>A-<b>3106</b>F, a shader processor <b>3107</b>A-<b>3107</b>F, and shared local memory (SLM) <b>3108</b>A-<b>3108</b>F. In at least one embodiment, EU arrays <b>3102</b>A-<b>3102</b>F, <b>3104</b>A-<b>3104</b>F each include multiple execution units, which are general-purpose graphics processing units capable of performing floating-point and integer/fixed-point logic operations in service of a graphics, media, or compute operation, including graphics, media, or compute shader programs. In at least one embodiment, TD/IC logic <b>3103</b>A-<b>3103</b>F performs local thread dispatch and thread control operations for execution units within a sub-core and facilitates communication between threads executing on execution units of a sub-core. In at least one embodiment, 3D samplers <b>3105</b>A-<b>3105</b>F can read texture or other 3D graphics related data into memory. In at least one embodiment, 3D samplers can read texture data differently based on a configured sample state and texture format associated with a given texture. In at least one embodiment, media samplers <b>3106</b>A-<b>3106</b>F can perform similar read operations based on a type and format associated with media data. In at least one embodiment, each graphics sub-core <b>3101</b>A-<b>3101</b>F can alternately include a unified 3D and media sampler. In at least one embodiment, threads executing on execution units within each of sub-cores <b>3101</b>A-<b>3101</b>F can make use of shared local memory <b>3108</b>A-<b>3108</b>F within each sub-core, to enable threads executing within a thread group to execute using a common pool of on-chip memory.</p><p id="p-0491" num="0468">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, portions or all of inference and/or training logic <b>815</b> may be incorporated into graphics processor <b>3100</b>. For example, in at least one embodiment, training and/or inferencing techniques described herein may use one or more of ALUs embodied in a 3D pipeline, graphics microcontroller <b>3138</b>, geometry and fixed function pipeline <b>3114</b> and <b>3136</b>, or other logic in <figref idref="DRAWINGS">FIG. <b>31</b></figref>. Moreover, in at least one embodiment, inferencing and/or training operations described herein may be done using logic other than logic illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A or <b>8</b>B</figref>. In at least one embodiment, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs of graphics processor <b>3100</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0492" num="0469">In at least one embodiment, graphics core <b>3100</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, graphics core <b>3100</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0493" num="0470"><figref idref="DRAWINGS">FIGS. <b>32</b>A-<b>32</b>B</figref> illustrate thread execution logic <b>3200</b> including an array of processing elements of a graphics processor core according to at least one embodiment. <figref idref="DRAWINGS">FIG. <b>32</b>A</figref> illustrates at least one embodiment, in which thread execution logic <b>3200</b> is used. <figref idref="DRAWINGS">FIG. <b>32</b>B</figref> illustrates exemplary internal details of a graphics execution unit <b>3208</b>, according to at least one embodiment.</p><p id="p-0494" num="0471">As illustrated in <figref idref="DRAWINGS">FIG. <b>32</b>A</figref>, in at least one embodiment, thread execution logic <b>3200</b> includes a shader processor <b>3202</b>, a thread dispatcher <b>3204</b>, an instruction cache <b>3206</b>, a scalable execution unit array including a plurality of execution units <b>3207</b>A-<b>3207</b>N and <b>3208</b>A-<b>3208</b>N, a sampler <b>3210</b>, a data cache <b>3212</b>, and a data port <b>3214</b>. In at least one embodiment, a scalable execution unit array can dynamically scale by enabling or disabling one or more execution units (e.g., any of execution unit <b>3208</b>A-N or <b>3207</b>A-N) based on computational requirements of a workload, for example. In at least one embodiment, scalable execution units are interconnected via an interconnect fabric that links to each execution unit. In at least one embodiment, thread execution logic <b>3200</b> includes one or more connections to memory, such as system memory or cache memory, through one or more of instruction cache <b>3206</b>, data port <b>3214</b>, sampler <b>3210</b>, and execution units <b>3207</b> or <b>3208</b>. In at least one embodiment, each execution unit (e.g., <b>3207</b>A) is a stand-alone programmable general-purpose computational unit that is capable of executing multiple simultaneous hardware threads while processing multiple data elements in parallel for each thread. In at least one embodiment, array of execution units <b>3207</b> and/or <b>3208</b> is scalable to include any number individual execution units.</p><p id="p-0495" num="0472">In at least one embodiment, execution units <b>3207</b> and/or <b>3208</b> are primarily used to execute shader programs. In at least one embodiment, shader processor <b>3202</b> can process various shader programs and dispatch execution threads associated with shader programs via a thread dispatcher <b>3204</b>. In at least one embodiment, thread dispatcher <b>3204</b> includes logic to arbitrate thread initiation requests from graphics and media pipelines and instantiate requested threads on one or more execution units in execution units <b>3207</b> and/or <b>3208</b>. For example, in at least one embodiment, a geometry pipeline can dispatch vertex, tessellation, or geometry shaders to thread execution logic for processing. In at least one embodiment, thread dispatcher <b>3204</b> can also process runtime thread spawning requests from executing shader programs.</p><p id="p-0496" num="0473">In at least one embodiment, execution units <b>3207</b> and/or <b>3208</b> support an instruction set that includes native support for many standard 3D graphics shader instructions, such that shader programs from graphics libraries (e.g., Direct 3D and OpenGL) are executed with a minimal translation. In at least one embodiment, execution units support vertex and geometry processing (e.g., vertex programs, geometry programs, and/or vertex shaders), pixel processing (e.g., pixel shaders, fragment shaders) and general-purpose processing (e.g., compute and media shaders). In at least one embodiment, each of execution units <b>3207</b> and/or <b>3208</b>, which include one or more arithmetic logic units (ALUs), is capable of multi-issue single instruction multiple data (SIMD) execution and multi-threaded operation enables an efficient execution environment despite higher latency memory accesses. In at least one embodiment, each hardware thread within each execution unit has a dedicated high-bandwidth register file and associated independent thread-state. In at least one embodiment, execution is multi-issue per clock to pipelines capable of integer, single and double precision floating point operations, SIMD branch capability, logical operations, transcendental operations, and other miscellaneous operations. In at least one embodiment, while waiting for data from memory or one of shared functions, dependency logic within execution units <b>3207</b> and/or <b>3208</b> causes a waiting thread to sleep until requested data has been returned. In at least one embodiment, while an awaiting thread is sleeping, hardware resources may be devoted to processing other threads. For example, in at least one embodiment, during a delay associated with a vertex shader operation, an execution unit can perform operations for a pixel shader, fragment shader, or another type of shader program, including a different vertex shader.</p><p id="p-0497" num="0474">In at least one embodiment, each execution unit in execution units <b>3207</b> and/or <b>3208</b> operates on arrays of data elements. In at least one embodiment, a number of data elements is an &#x201c;execution size,&#x201d; or number of channels for an instruction. In at least one embodiment, an execution channel is a logical unit of execution for data element access, masking, and flow control within instructions. In at least one embodiment, a number of channels may be independent of a number of physical arithmetic logic units (ALUs) or floating point units (FPUs) for a particular graphics processor. In at least one embodiment, execution units <b>3207</b> and/or <b>3208</b> support integer and floating-point data types.</p><p id="p-0498" num="0475">In at least one embodiment, an execution unit instruction set includes SIMD instructions. In at least one embodiment, various data elements can be stored as a packed data type in a register and execution unit will process various elements based on data size of elements. For example, in at least one embodiment, when operating on a 256-bit wide vector, 256 bits of a vector are stored in a register and an execution unit operates on a vector as four separate 64-bit packed data elements (Quad-Word (QW) size data elements), eight separate 32-bit packed data elements (Double Word (DW) size data elements), sixteen separate 16-bit packed data elements (Word (W) size data elements), or thirty-two separate 8-bit data elements (byte (B) size data elements). However, in at least one embodiment, different vector widths and register sizes are possible.</p><p id="p-0499" num="0476">In at least one embodiment, one or more execution units can be combined into a fused execution unit <b>3209</b>A-<b>3209</b>N having thread control logic (<b>3211</b>A-<b>3211</b>N) that is common to fused EUs such as execution unit <b>3207</b>A fused with execution unit <b>3208</b>A into fused execution unit <b>3209</b>A. In at least one embodiment, multiple EUs can be fused into an EU group. In at least one embodiment, each EU in a fused EU group can be configured to execute a separate SIMD hardware thread, with a number of EUs in a fused EU group possibly varying according to various embodiments. In at least one embodiment, various SIMD widths can be performed per-EU, including but not limited to SIMD8, SIMD16, and SIMD32. In at least one embodiment, each fused graphics execution unit <b>3209</b>A-<b>3209</b>N includes at least two execution units. For example, in at least one embodiment, fused execution unit <b>3209</b>A includes a first EU <b>3207</b>A, second EU <b>3208</b>A, and thread control logic <b>3211</b>A that is common to first EU <b>3207</b>A and second EU <b>3208</b>A. In at least one embodiment, thread control logic <b>3211</b>A controls threads executed on fused graphics execution unit <b>3209</b>A, allowing each EU within fused execution units <b>3209</b>A-<b>3209</b>N to execute using a common instruction pointer register.</p><p id="p-0500" num="0477">In at least one embodiment, one or more internal instruction caches (e.g., <b>3206</b>) are included in thread execution logic <b>3200</b> to cache thread instructions for execution units. In at least one embodiment, one or more data caches (e.g., <b>3212</b>) are included to cache thread data during thread execution. In at least one embodiment, sampler <b>3210</b> is included to provide texture sampling for 3D operations and media sampling for media operations. In at least one embodiment, sampler <b>3210</b> includes specialized texture or media sampling functionality to process texture or media data during sampling process before providing sampled data to an execution unit.</p><p id="p-0501" num="0478">During execution, in at least one embodiment, graphics and media pipelines send thread initiation requests to thread execution logic <b>3200</b> via thread spawning and dispatch logic. In at least one embodiment, once a group of geometric objects has been processed and rasterized into pixel data, pixel processor logic (e.g., pixel shader logic, fragment shader logic, etc.) within shader processor <b>3202</b> is invoked to further compute output information and cause results to be written to output surfaces (e.g., color buffers, depth buffers, stencil buffers, etc.). In at least one embodiment, a pixel shader or a fragment shader calculates values of various vertex attributes that are to be interpolated across a rasterized object. In at least one embodiment, pixel processor logic within shader processor <b>3202</b> then executes an application programming interface (API)-supplied pixel or fragment shader program. In at least one embodiment, to execute a shader program, shader processor <b>3202</b> dispatches threads to an execution unit (e.g., <b>3208</b>A) via thread dispatcher <b>3204</b>. In at least one embodiment, shader processor <b>3202</b> uses texture sampling logic in sampler <b>3210</b> to access texture data in texture maps stored in memory. In at least one embodiment, arithmetic operations on texture data and input geometry data compute pixel color data for each geometric fragment, or discards one or more pixels from further processing.</p><p id="p-0502" num="0479">In at least one embodiment, data port <b>3214</b> provides a memory access mechanism for thread execution logic <b>3200</b> to output processed data to memory for further processing on a graphics processor output pipeline. In at least one embodiment, data port <b>3214</b> includes or couples to one or more cache memories (e.g., data cache <b>3212</b>) to cache data for memory access via a data port.</p><p id="p-0503" num="0480">As illustrated in <figref idref="DRAWINGS">FIG. <b>32</b>B</figref>, in at least one embodiment, a graphics execution unit <b>3208</b> can include an instruction fetch unit <b>3237</b>, a general register file array (GRF) <b>3224</b>, an architectural register file array (ARF) <b>3226</b>, a thread arbiter <b>3222</b>, a send unit <b>3230</b>, a branch unit <b>3232</b>, a set of SIMD floating point units (FPUs) <b>3234</b>, and a set of dedicated integer SIMD ALUs <b>3235</b>. In at least one embodiment, GRF <b>3224</b> and ARF <b>3226</b> includes a set of general register files and architecture register files associated with each simultaneous hardware thread that may be active in graphics execution unit <b>3208</b>. In at least one embodiment, per thread architectural state is maintained in ARF <b>3226</b>, while data used during thread execution is stored in GRF <b>3224</b>. In at least one embodiment, execution state of each thread, including instruction pointers for each thread, can be held in thread-specific registers in ARF <b>3226</b>.</p><p id="p-0504" num="0481">In at least one embodiment, graphics execution unit <b>3208</b> has an architecture that is a combination of Simultaneous Multi-Threading (SMT) and fine-grained Interleaved Multi-Threading (IMT). In at least one embodiment, architecture has a modular configuration that can be fine-tuned at design time based on a target number of simultaneous threads and number of registers per execution unit, where execution unit resources are divided across logic used to execute multiple simultaneous threads.</p><p id="p-0505" num="0482">In at least one embodiment, graphics execution unit <b>3208</b> can co-issue multiple instructions, which may each be different instructions. In at least one embodiment, thread arbiter <b>3222</b> of graphics execution unit thread <b>3208</b> can dispatch instructions to one of send unit <b>3230</b>, branch unit <b>3232</b>, or SIMD FPU(s) <b>3234</b> for execution. In at least one embodiment, each execution thread can access <b>128</b> general-purpose registers within GRF <b>3224</b>, where each register can store 32 bytes, accessible as a SIMD 8-element vector of 32-bit data elements. In at least one embodiment, each execution unit thread has access to 4 kilobytes within GRF <b>3224</b>, although embodiments are not so limited, and greater or fewer register resources may be provided in other embodiments. In at least one embodiment, up to seven threads can execute simultaneously, although a number of threads per execution unit can also vary according to embodiments. In at least one embodiment, in which seven threads may access 4 kilobytes, GRF <b>3224</b> can store a total of 28 kilobytes. In at least one embodiment, flexible addressing modes can permit registers to be addressed together to build effectively wider registers or to represent strided rectangular block data structures.</p><p id="p-0506" num="0483">In at least one embodiment, memory operations, sampler operations, and other longer-latency system communications are dispatched via &#x201c;send&#x201d; instructions that are executed by message passing to send unit <b>3230</b>. In at least one embodiment, branch instructions are dispatched to branch unit <b>3232</b> to facilitate SIMD divergence and eventual convergence.</p><p id="p-0507" num="0484">In at least one embodiment, graphics execution unit <b>3208</b> includes one or more SIMD floating point units (FPU(s)) <b>3234</b> to perform floating-point operations. In at least one embodiment, FPU(s) <b>3234</b> also support integer computation. In at least one embodiment, FPU(s) <b>3234</b> can SIMD execute up to M number of 32-bit floating-point (or integer) operations, or SIMD execute up to 2M 16-bit integer or 16-bit floating-point operations. In at least one embodiment, at least one FPU provides extended math capability to support high-throughput transcendental math functions and double precision 64-bit floating-point. In at least one embodiment, a set of 8-bit integer SIMD ALUs <b>3235</b> are also present, and may be specifically optimized to perform operations associated with machine learning computations.</p><p id="p-0508" num="0485">In at least one embodiment, arrays of multiple instances of graphics execution unit <b>3208</b> can be instantiated in a graphics sub-core grouping (e.g., a sub-slice). In at least one embodiment, execution unit <b>3208</b> can execute instructions across a plurality of execution channels. In at least one embodiment, each thread executed on graphics execution unit <b>3208</b> is executed on a different channel.</p><p id="p-0509" num="0486">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, portions or all of inference and/or training logic <b>815</b> may be incorporated into thread execution logic <b>3200</b>. Moreover, in at least one embodiment, inferencing and/or training operations described herein may be done using logic other than logic illustrated in <figref idref="DRAWINGS">FIG. <b>8</b>A or <b>8</b>B</figref>. In at least one embodiment, weight parameters may be stored in on-chip or off-chip memory and/or registers (shown or not shown) that configure ALUs thread of execution logic <b>3200</b> to perform one or more machine learning algorithms, neural network architectures, use cases, or training techniques described herein.</p><p id="p-0510" num="0487">In at least one embodiment, thread execution logic <b>3200</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, thread execution logic <b>3200</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0511" num="0488"><figref idref="DRAWINGS">FIG. <b>33</b></figref> illustrates a parallel processing unit (&#x201c;PPU&#x201d;) <b>3300</b>, according to at least one embodiment. In at least one embodiment, PPU <b>3300</b> is configured with machine-readable code that, if executed by PPU <b>3300</b>, causes PPU <b>3300</b> to perform some or all of processes and techniques described throughout this disclosure. In at least one embodiment, PPU <b>3300</b> is a multi-threaded processor that is implemented on one or more integrated circuit devices and that utilizes multithreading as a latency-hiding technique designed to process computer-readable instructions (also referred to as machine-readable instructions or simply instructions) on multiple threads in parallel. In at least one embodiment, a thread refers to a thread of execution and is an instantiation of a set of instructions configured to be executed by PPU <b>3300</b>. In at least one embodiment, PPU <b>3300</b> is a graphics processing unit (&#x201c;GPU&#x201d;) configured to implement a graphics rendering pipeline for processing three-dimensional (&#x201c;3D&#x201d;) graphics data in order to generate two-dimensional (&#x201c;2D&#x201d;) image data for display on a display device such as a liquid crystal display (&#x201c;LCD&#x201d;) device. In at least one embodiment, PPU <b>3300</b> is utilized to perform computations such as linear algebra operations and machine-learning operations. <figref idref="DRAWINGS">FIG. <b>33</b></figref> illustrates an example parallel processor for illustrative purposes only and should be construed as a non-limiting example of processor architectures contemplated within scope of this disclosure and that any suitable processor may be employed to supplement and/or substitute for same.</p><p id="p-0512" num="0489">In at least one embodiment, one or more PPUs <b>3300</b> are configured to accelerate High Performance Computing (&#x201c;HPC&#x201d;), data center, and machine learning applications. In at least one embodiment, PPU <b>3300</b> is configured to accelerate deep learning systems and applications including following non-limiting examples: autonomous vehicle platforms, deep learning, high-accuracy speech, image, text recognition systems, intelligent video analytics, molecular simulations, drug discovery, disease diagnosis, weather forecasting, big data analytics, astronomy, molecular dynamics simulation, financial modeling, robotics, factory automation, real-time language translation, online search optimizations, and personalized user recommendations, and more.</p><p id="p-0513" num="0490">In at least one embodiment, PPU <b>3300</b> includes, without limitation, an Input/Output (&#x201c;I/O&#x201d;) unit <b>3306</b>, a front-end unit <b>3310</b>, a scheduler unit <b>3312</b>, a work distribution unit <b>3314</b>, a hub <b>3316</b>, a crossbar (&#x201c;XBar&#x201d;) <b>3320</b>, one or more general processing clusters (&#x201c;GPCs&#x201d;) <b>3318</b>, and one or more partition units (&#x201c;memory partition units&#x201d;) <b>3322</b>. In at least one embodiment, PPU <b>3300</b> is connected to a host processor or other PPUs <b>3300</b> via one or more high-speed GPU interconnects (&#x201c;GPU interconnects&#x201d;) <b>3308</b>. In at least one embodiment, PPU <b>3300</b> is connected to a host processor or other peripheral devices via a system bus <b>3302</b>. In at least one embodiment, PPU <b>3300</b> is connected to a local memory comprising one or more memory devices (&#x201c;memory&#x201d;) <b>3304</b>. In at least one embodiment, memory devices <b>3304</b> include, without limitation, one or more dynamic random access memory (&#x201c;DRAM&#x201d;) devices. In at least one embodiment, one or more DRAM devices are configured and/or configurable as high-bandwidth memory (&#x201c;HBM&#x201d;) subsystems, with multiple DRAM dies stacked within each device.</p><p id="p-0514" num="0491">In at least one embodiment, high-speed GPU interconnect <b>3308</b> may refer to a wire-based multi-lane communications link that is used by systems to scale and include one or more PPUs <b>3300</b> combined with one or more central processing units (&#x201c;CPUs&#x201d;), supports cache coherence between PPUs <b>3300</b> and CPUs, and CPU mastering. In at least one embodiment, data and/or commands are transmitted by high-speed GPU interconnect <b>3308</b> through hub <b>3316</b> to/from other units of PPU <b>3300</b> such as one or more copy engines, video encoders, video decoders, power management units, and other components which may not be explicitly illustrated in <figref idref="DRAWINGS">FIG. <b>33</b></figref>.</p><p id="p-0515" num="0492">In at least one embodiment, I/O unit <b>3306</b> is configured to transmit and receive communications (e.g., commands, data) from a host processor (not illustrated in <figref idref="DRAWINGS">FIG. <b>33</b></figref>) over system bus <b>3302</b>. In at least one embodiment, I/O unit <b>3306</b> communicates with host processor directly via system bus <b>3302</b> or through one or more intermediate devices such as a memory bridge. In at least one embodiment, I/O unit <b>3306</b> may communicate with one or more other processors, such as one or more of PPUs <b>3300</b> via system bus <b>3302</b>. In at least one embodiment, I/O unit <b>3306</b> implements a Peripheral Component Interconnect Express (&#x201c;PCIe&#x201d;) interface for communications over a PCIe bus. In at least one embodiment, I/O unit <b>3306</b> implements interfaces for communicating with external devices.</p><p id="p-0516" num="0493">In at least one embodiment, I/O unit <b>3306</b> decodes packets received via system bus <b>3302</b>. In at least one embodiment, at least some packets represent commands configured to cause PPU <b>3300</b> to perform various operations. In at least one embodiment, I/O unit <b>3306</b> transmits decoded commands to various other units of PPU <b>3300</b> as specified by commands. In at least one embodiment, commands are transmitted to front-end unit <b>3310</b> and/or transmitted to hub <b>3316</b> or other units of PPU <b>3300</b> such as one or more copy engines, a video encoder, a video decoder, a power management unit, etc. (not explicitly illustrated in <figref idref="DRAWINGS">FIG. <b>33</b></figref>). In at least one embodiment, I/O unit <b>3306</b> is configured to route communications between and among various logical units of PPU <b>3300</b>.</p><p id="p-0517" num="0494">In at least one embodiment, a program executed by host processor encodes a command stream in a buffer that provides workloads to PPU <b>3300</b> for processing. In at least one embodiment, a workload comprises instructions and data to be processed by those instructions. In at least one embodiment, a buffer is a region in a memory that is accessible (e.g., read/write) by both a host processor and PPU <b>3300</b>&#x2014;a host interface unit may be configured to access that buffer in a system memory connected to system bus <b>3302</b> via memory requests transmitted over system bus <b>3302</b> by I/O unit <b>3306</b>. In at least one embodiment, a host processor writes a command stream to a buffer and then transmits a pointer to a start of a command stream to PPU <b>3300</b> such that front-end unit <b>3310</b> receives pointers to one or more command streams and manages one or more command streams, reading commands from command streams and forwarding commands to various units of PPU <b>3300</b>.</p><p id="p-0518" num="0495">In at least one embodiment, front-end unit <b>3310</b> is coupled to scheduler unit <b>3312</b> that configures various GPCs <b>3318</b> to process tasks defined by one or more command streams. In at least one embodiment, scheduler unit <b>3312</b> is configured to track state information related to various tasks managed by scheduler unit <b>3312</b> where state information may indicate which of GPCs <b>3318</b> a task is assigned to, whether task is active or inactive, a priority level associated with task, and so forth. In at least one embodiment, scheduler unit <b>3312</b> manages execution of a plurality of tasks on one or more of GPCs <b>3318</b>.</p><p id="p-0519" num="0496">In at least one embodiment, scheduler unit <b>3312</b> is coupled to work distribution unit <b>3314</b> that is configured to dispatch tasks for execution on GPCs <b>3318</b>. In at least one embodiment, work distribution unit <b>3314</b> tracks a number of scheduled tasks received from scheduler unit <b>3312</b> and work distribution unit <b>3314</b> manages a pending task pool and an active task pool for each of GPCs <b>3318</b>. In at least one embodiment, pending task pool comprises a number of slots (e.g., 32 slots) that contain tasks assigned to be processed by a particular GPC <b>3318</b>; an active task pool may comprise a number of slots (e.g., 4 slots) for tasks that are actively being processed by GPCs <b>3318</b> such that as one of GPCs <b>3318</b> completes execution of a task, that task is evicted from that active task pool for GPC <b>3318</b> and another task from a pending task pool is selected and scheduled for execution on GPC <b>3318</b>. In at least one embodiment, if an active task is idle on GPC <b>3318</b>, such as while waiting for a data dependency to be resolved, then that active task is evicted from GPC <b>3318</b> and returned to that pending task pool while another task in that pending task pool is selected and scheduled for execution on GPC <b>3318</b>.</p><p id="p-0520" num="0497">In at least one embodiment, work distribution unit <b>3314</b> communicates with one or more GPCs <b>3318</b> via XBar <b>3320</b>. In at least one embodiment, XBar <b>3320</b> is an interconnect network that couples many of units of PPU <b>3300</b> to other units of PPU <b>3300</b> and can be configured to couple work distribution unit <b>3314</b> to a particular GPC <b>3318</b>. In at least one embodiment, one or more other units of PPU <b>3300</b> may also be connected to XBar <b>3320</b> via hub <b>3316</b>.</p><p id="p-0521" num="0498">In at least one embodiment, tasks are managed by scheduler unit <b>3312</b> and dispatched to one of GPCs <b>3318</b> by work distribution unit <b>3314</b>. In at least one embodiment, GPC <b>3318</b> is configured to process task and generate results. In at least one embodiment, results may be consumed by other tasks within GPC <b>3318</b>, routed to a different GPC <b>3318</b> via XBar <b>3320</b>, or stored in memory <b>3304</b>. In at least one embodiment, results can be written to memory <b>3304</b> via partition units <b>3322</b>, which implement a memory interface for reading and writing data to/from memory <b>3304</b>. In at least one embodiment, results can be transmitted to another PPU or CPU via high-speed GPU interconnect <b>3308</b>. In at least one embodiment, PPU <b>3300</b> includes, without limitation, a number U of partition units <b>3322</b> that is equal to a number of separate and distinct memory devices <b>3304</b> coupled to PPU <b>3300</b>, as described in more detail herein in conjunction with <figref idref="DRAWINGS">FIG. <b>35</b></figref>.</p><p id="p-0522" num="0499">In at least one embodiment, a host processor executes a driver kernel that implements an application programming interface (&#x201c;API&#x201d;) that enables one or more applications executing on a host processor to schedule operations for execution on PPU <b>3300</b>. In at least one embodiment, multiple compute applications are simultaneously executed by PPU <b>3300</b> and PPU <b>3300</b> provides isolation, quality of service (&#x201c;QoS&#x201d;), and independent address spaces for multiple compute applications. In at least one embodiment, an application generates instructions (e.g., in form of API calls) that cause a driver kernel to generate one or more tasks for execution by PPU <b>3300</b> and that driver kernel outputs tasks to one or more streams being processed by PPU <b>3300</b>. In at least one embodiment, each task comprises one or more groups of related threads, which may be referred to as a warp. In at least one embodiment, a warp comprises a plurality of related threads (e.g., 32 threads) that can be executed in parallel. In at least one embodiment, cooperating threads can refer to a plurality of threads including instructions to perform task and that exchange data through shared memory. In at least one embodiment, threads and cooperating threads are described in more detail in conjunction with <figref idref="DRAWINGS">FIG. <b>35</b></figref>.</p><p id="p-0523" num="0500">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, deep learning application processor is used to train a machine learning model, such as a neural network, to predict or infer information provided to PPU <b>3300</b>. In at least one embodiment, deep learning application processor is used to infer or predict information based on a trained machine learning model (e.g., neural network) that has been trained by another processor or system or by PPU <b>3300</b>. In at least one embodiment, PPU <b>3300</b> may be used to perform one or more neural network use cases described herein.</p><p id="p-0524" num="0501">In at least one embodiment, PPU <b>3300</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, PPU <b>3300</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0525" num="0502"><figref idref="DRAWINGS">FIG. <b>34</b></figref> illustrates a general processing cluster (&#x201c;GPC&#x201d;) <b>3400</b>, according to at least one embodiment. In at least one embodiment, GPC <b>3400</b> is GPC <b>3318</b> of <figref idref="DRAWINGS">FIG. <b>33</b></figref>. In at least one embodiment, each GPC <b>3400</b> includes, without limitation, a number of hardware units for processing tasks and each GPC <b>3400</b> includes, without limitation, a pipeline manager <b>3402</b>, a pre-raster operations unit (&#x201c;preROP&#x201d;) <b>3404</b>, a raster engine <b>3408</b>, a work distribution crossbar (&#x201c;WDX&#x201d;) <b>3416</b>, a memory management unit (&#x201c;MMU&#x201d;) <b>3418</b>, one or more Data Processing Clusters (&#x201c;DPCs&#x201d;) <b>3406</b>, and any suitable combination of parts.</p><p id="p-0526" num="0503">In at least one embodiment, operation of GPC <b>3400</b> is controlled by pipeline manager <b>3402</b>. In at least one embodiment, pipeline manager <b>3402</b> manages configuration of one or more DPCs <b>3406</b> for processing tasks allocated to GPC <b>3400</b>. In at least one embodiment, pipeline manager <b>3402</b> configures at least one of one or more DPCs <b>3406</b> to implement at least a portion of a graphics rendering pipeline. In at least one embodiment, DPC <b>3406</b> is configured to execute a vertex shader program on a programmable streaming multi-processor (&#x201c;SM&#x201d;) <b>3414</b>. In at least one embodiment, pipeline manager <b>3402</b> is configured to route packets received from a work distribution unit to appropriate logical units within GPC <b>3400</b>, in at least one embodiment, and some packets may be routed to fixed function hardware units in preROP <b>3404</b> and/or raster engine <b>3408</b> while other packets may be routed to DPCs <b>3406</b> for processing by a primitive engine <b>3412</b> or SM <b>3414</b>. In at least one embodiment, pipeline manager <b>3402</b> configures at least one of DPCs <b>3406</b> to implement a neural network model and/or a computing pipeline.</p><p id="p-0527" num="0504">In at least one embodiment, preROP unit <b>3404</b> is configured, in at least one embodiment, to route data generated by raster engine <b>3408</b> and DPCs <b>3406</b> to a Raster Operations (&#x201c;ROP&#x201d;) unit in partition unit <b>3322</b>, described in more detail above in conjunction with <figref idref="DRAWINGS">FIG. <b>33</b></figref>. In at least one embodiment, preROP unit <b>3404</b> is configured to perform optimizations for color blending, organize pixel data, perform address translations, and more. In at least one embodiment, raster engine <b>3408</b> includes, without limitation, a number of fixed function hardware units configured to perform various raster operations, in at least one embodiment, and raster engine <b>3408</b> includes, without limitation, a setup engine, a coarse raster engine, a culling engine, a clipping engine, a fine raster engine, a tile coalescing engine, and any suitable combination thereof. In at least one embodiment, setup engine receives transformed vertices and generates plane equations associated with geometric primitive defined by vertices; plane equations are transmitted to a coarse raster engine to generate coverage information (e.g., an x, y coverage mask for a tile) for primitive; output of a coarse raster engine is transmitted to a culling engine where fragments associated with a primitive that fail a z-test are culled, and transmitted to a clipping engine where fragments lying outside a viewing frustum are clipped. In at least one embodiment, fragments that survive clipping and culling are passed to a fine raster engine to generate attributes for pixel fragments based on plane equations generated by a setup engine. In at least one embodiment, an output of raster engine <b>3408</b> comprises fragments to be processed by any suitable entity, such as by a fragment shader implemented within DPC <b>3406</b>.</p><p id="p-0528" num="0505">In at least one embodiment, each DPC <b>3406</b> included in GPC <b>3400</b> comprises, without limitation, an M-Pipe Controller (&#x201c;MPC&#x201d;) <b>3410</b>; primitive engine <b>3412</b>; one or more SMs <b>3414</b>; and any suitable combination thereof. In at least one embodiment, MPC <b>3410</b> controls operation of DPC <b>3406</b>, routing packets received from pipeline manager <b>3402</b> to appropriate units in DPC <b>3406</b>. In at least one embodiment, packets associated with a vertex are routed to primitive engine <b>3412</b>, which is configured to fetch vertex attributes associated with a vertex from memory; in contrast, packets associated with a shader program may be transmitted to SM <b>3414</b>.</p><p id="p-0529" num="0506">In at least one embodiment, SM <b>3414</b> comprises, without limitation, a programmable streaming processor that is configured to process tasks represented by a number of threads. In at least one embodiment, SM <b>3414</b> is multi-threaded and configured to execute a plurality of threads (e.g., 32 threads) from a particular group of threads concurrently and implements a Single-Instruction, Multiple-Data (&#x201c;SIMD&#x201d;) architecture where each thread in a group of threads (e.g., a warp) is configured to process a different set of data based on same set of instructions. In at least one embodiment, all threads in group of threads execute a common set of instructions. In at least one embodiment, SM <b>3414</b> implements a Single-Instruction, Multiple Thread (&#x201c;SIMT&#x201d;) architecture wherein each thread in a group of threads is configured to process a different set of data based on that common set of instructions, but where individual threads in a group of threads are allowed to diverge during execution. In at least one embodiment, a program counter, call stack, and execution state is maintained for each warp, enabling concurrency between warps and serial execution within warps when threads within a warp diverge. In another embodiment, a program counter, call stack, and execution state is maintained for each individual thread, enabling equal concurrency between all threads, within and between warps. In at least one embodiment, execution state is maintained for each individual thread and threads executing common instructions may be converged and executed in parallel for better efficiency. At least one embodiment of SM <b>3414</b> is described in more detail herein.</p><p id="p-0530" num="0507">In at least one embodiment, MMU <b>3418</b> provides an interface between GPC <b>3400</b> and a memory partition unit (e.g., partition unit <b>3322</b> of <figref idref="DRAWINGS">FIG. <b>33</b></figref>) and MMU <b>3418</b> provides translation of virtual addresses into physical addresses, memory protection, and arbitration of memory requests. In at least one embodiment, MMU <b>3418</b> provides one or more translation lookaside buffers (&#x201c;TLBs&#x201d;) for performing translation of virtual addresses into physical addresses in memory.</p><p id="p-0531" num="0508">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, deep learning application processor is used to train a machine learning model, such as a neural network, to predict or infer information provided to GPC <b>3400</b>. In at least one embodiment, GPC <b>3400</b> is used to infer or predict information based on a trained machine learning model (e.g., neural network) that has been trained by another processor or system or by GPC <b>3400</b>. In at least one embodiment, GPC <b>3400</b> may be used to perform one or more neural network use cases described herein.</p><p id="p-0532" num="0509">In at least one embodiment, GPC <b>3400</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, GPC <b>3400</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0533" num="0510"><figref idref="DRAWINGS">FIG. <b>35</b></figref> illustrates a memory partition unit <b>3500</b> of a parallel processing unit (&#x201c;PPU&#x201d;), in accordance with at least one embodiment. In at least one embodiment, memory partition unit <b>3500</b> includes, without limitation, a Raster Operations (&#x201c;ROP&#x201d;) unit <b>3502</b>, a level two (&#x201c;L2&#x201d;) cache <b>3504</b>, a memory interface <b>3506</b>, and any suitable combination thereof. In at least one embodiment, memory interface <b>3506</b> is coupled to memory. In at least one embodiment, memory interface <b>3506</b> may implement 32, 64, 128, 1024-bit data buses, or like, for high-speed data transfer. In at least one embodiment, PPU incorporates U memory interfaces <b>3506</b> where U is a positive integer, with one memory interface <b>3506</b> per pair of partition units <b>3500</b>, where each pair of partition units <b>3500</b> is connected to a corresponding memory device. For example, in at least one embodiment, PPU may be connected to up to Y memory devices, such as high bandwidth memory stacks or graphics double-data-rate, version 5, synchronous dynamic random access memory (&#x201c;GDDR5 SDRAM&#x201d;).</p><p id="p-0534" num="0511">In at least one embodiment, memory interface <b>3506</b> implements a high bandwidth memory second generation (&#x201c;HBM2&#x201d;) memory interface and Y equals half of U. In at least one embodiment, HBM2 memory stacks are located on a physical package with a PPU, providing substantial power and area savings compared with conventional GDDR5 SDRAM systems. In at least one embodiment, each HBM2 stack includes, without limitation, four memory dies with Y=4, with each HBM2 stack including two 128-bit channels per die for a total of 8 channels and a data bus width of 1024 bits. In at least one embodiment, that memory supports Single-Error Correcting Double-Error Detecting (&#x201c;SECDED&#x201d;) Error Correction Code (&#x201c;ECC&#x201d;) to protect data. In at least one embodiment, ECC can provide higher reliability for compute applications that are sensitive to data corruption.</p><p id="p-0535" num="0512">In at least one embodiment, PPU implements a multi-level memory hierarchy. In at least one embodiment, memory partition unit <b>3500</b> supports a unified memory to provide a single unified virtual address space for central processing unit (&#x201c;CPU&#x201d;) and PPU memory, enabling data sharing between virtual memory systems. In at least one embodiment frequency of accesses by a PPU to a memory located on other processors is traced to ensure that memory pages are moved to physical memory of PPU that is accessing pages more frequently. In at least one embodiment, high-speed GPU interconnect <b>3308</b> supports address translation services allowing PPU to directly access a CPU's page tables and providing full access to CPU memory by a PPU.</p><p id="p-0536" num="0513">In at least one embodiment, copy engines transfer data between multiple PPUs or between PPUs and CPUs. In at least one embodiment, copy engines can generate page faults for addresses that are not mapped into page tables and memory partition unit <b>3500</b> then services page faults, mapping addresses into page table, after which copy engine performs a transfer. In at least one embodiment, memory is pinned (i.e., non-pageable) for multiple copy engine operations between multiple processors, substantially reducing available memory. In at least one embodiment, with hardware page faulting, addresses can be passed to copy engines without regard as to whether memory pages are resident, and a copy process is transparent.</p><p id="p-0537" num="0514">Data from memory <b>3304</b> of <figref idref="DRAWINGS">FIG. <b>33</b></figref> or other system memory is fetched by memory partition unit <b>3500</b> and stored in L2 cache <b>3504</b>, which is located on-chip and is shared between various GPCs, in accordance with at least one embodiment. Each memory partition unit <b>3500</b>, in at least one embodiment, includes, without limitation, at least a portion of L2 cache associated with a corresponding memory device. In at least one embodiment, lower level caches are implemented in various units within GPCs. In at least one embodiment, each of SMs <b>3414</b> in <figref idref="DRAWINGS">FIG. <b>34</b></figref> may implement a Level 1 (&#x201c;L1&#x201d;) cache wherein that L1 cache is private memory that is dedicated to a particular SM <b>3414</b> and data from L2 cache <b>3504</b> is fetched and stored in each L1 cache for processing in functional units of SMs <b>3414</b>. In at least one embodiment, L2 cache <b>3504</b> is coupled to memory interface <b>3506</b> and XBar <b>3320</b> shown in <figref idref="DRAWINGS">FIG. <b>33</b></figref>.</p><p id="p-0538" num="0515">ROP unit <b>3502</b> performs graphics raster operations related to pixel color, such as color compression, pixel blending, and more, in at least one embodiment. ROP unit <b>3502</b>, in at least one embodiment, implements depth testing in conjunction with raster engine <b>3408</b>, receiving a depth for a sample location associated with a pixel fragment from a culling engine of raster engine <b>3408</b>. In at least one embodiment, depth is tested against a corresponding depth in a depth buffer for a sample location associated with a fragment. In at least one embodiment, if that fragment passes that depth test for that sample location, then ROP unit <b>3502</b> updates depth buffer and transmits a result of that depth test to raster engine <b>3408</b>. It will be appreciated that a number of partition units <b>3500</b> may be different than a number of GPCs and, therefore, each ROP unit <b>3502</b> can, in at least one embodiment, be coupled to each GPC. In at least one embodiment, ROP unit <b>3502</b> tracks packets received from different GPCs and determines whether a result generated by ROP unit <b>3502</b> is to be routed to through XBar <b>3320</b>.</p><p id="p-0539" num="0516"><figref idref="DRAWINGS">FIG. <b>36</b></figref> illustrates a streaming multi-processor (&#x201c;SM&#x201d;) <b>3600</b>, according to at least one embodiment. In at least one embodiment, SM <b>3600</b> is SM of <figref idref="DRAWINGS">FIG. <b>34</b></figref>. In at least one embodiment, SM <b>3600</b> includes, without limitation, an instruction cache <b>3602</b>, one or more scheduler units <b>3604</b>, a register file <b>3608</b>, one or more processing cores (&#x201c;cores&#x201d;) <b>3610</b>, one or more special function units (&#x201c;SFUs&#x201d;) <b>3612</b>, one or more load/store units (&#x201c;LSUs&#x201d;) <b>3614</b>, an interconnect network <b>3616</b>, a shared memory/level one (&#x201c;L1&#x201d;) cache <b>3618</b>, and/or any suitable combination thereof.</p><p id="p-0540" num="0517">In at least one embodiment, a work distribution unit dispatches tasks for execution on general processing clusters (&#x201c;GPCs&#x201d;) of parallel processing units (&#x201c;PPUs&#x201d;) and each task is allocated to a particular Data Processing Cluster (&#x201c;DPC&#x201d;) within a GPC and, if a task is associated with a shader program, that task is allocated to one of SMs <b>3600</b>. In at least one embodiment, scheduler unit <b>3604</b> receives tasks from a work distribution unit and manages instruction scheduling for one or more thread blocks assigned to SM <b>3600</b>. In at least one embodiment, scheduler unit <b>3604</b> schedules thread blocks for execution as warps of parallel threads, wherein each thread block is allocated at least one warp. In at least one embodiment, each warp executes threads. In at least one embodiment, scheduler unit <b>3604</b> manages a plurality of different thread blocks, allocating warps to different thread blocks and then dispatching instructions from plurality of different cooperative groups to various functional units (e.g., processing cores <b>3610</b>, SFUs <b>3612</b>, and LSUs <b>3614</b>) during each clock cycle.</p><p id="p-0541" num="0518">In at least one embodiment, Cooperative Groups may refer to a programming model for organizing groups of communicating threads that allows developers to express granularity at which threads are communicating, enabling expression of richer, more efficient parallel decompositions. In at least one embodiment, cooperative launch APIs support synchronization amongst thread blocks for execution of parallel algorithms. In at least one embodiment, applications of conventional programming models provide a single, simple construct for synchronizing cooperating threads: a barrier across all threads of a thread block (e.g., syncthreads( ) function). However, in at least one embodiment, programmers may define groups of threads at smaller than thread block granularities and synchronize within defined groups to enable greater performance, design flexibility, and software reuse in form of collective group-wide function interfaces. In at least one embodiment, Cooperative Groups enables programmers to define groups of threads explicitly at sub-block (i.e., as small as a single thread) and multi-block granularities, and to perform collective operations such as synchronization on threads in a cooperative group. In at least one embodiment, that programming model supports clean composition across software boundaries, so that libraries and utility functions can synchronize safely within their local context without having to make assumptions about convergence. In at least one embodiment, Cooperative Groups primitives enable new patterns of cooperative parallelism, including, without limitation, producer-consumer parallelism, opportunistic parallelism, and global synchronization across an entire grid of thread blocks.</p><p id="p-0542" num="0519">In at least one embodiment, a dispatch unit <b>3606</b> is configured to transmit instructions to one or more functional units and scheduler unit <b>3604</b> and includes, without limitation, two dispatch units <b>3606</b> that enable two different instructions from a common warp to be dispatched during each clock cycle. In at least one embodiment, each scheduler unit <b>3604</b> includes a single dispatch unit <b>3606</b> or additional dispatch units <b>3606</b>.</p><p id="p-0543" num="0520">In at least one embodiment, each SM <b>3600</b>, in at least one embodiment, includes, without limitation, register file <b>3608</b> that provides a set of registers for functional units of SM <b>3600</b>. In at least one embodiment, register file <b>3608</b> is divided between each functional unit such that each functional unit is allocated a dedicated portion of register file <b>3608</b>. In at least one embodiment, register file <b>3608</b> is divided between different warps being executed by SM <b>3600</b> and register file <b>3608</b> provides temporary storage for operands connected to data paths of functional units. In at least one embodiment, each SM <b>3600</b> comprises, without limitation, a plurality of L processing cores <b>3610</b>, where L is a positive integer. In at least one embodiment, SM <b>3600</b> includes, without limitation, a large number (e.g., 128 or more) of distinct processing cores <b>3610</b>. In at least one embodiment, each processing core <b>3610</b> includes, without limitation, a fully-pipelined, single-precision, double-precision, and/or mixed precision processing unit that includes, without limitation, a floating point arithmetic logic unit and an integer arithmetic logic unit. In at least one embodiment, floating point arithmetic logic units implement IEEE 754-2008 standard for floating point arithmetic. In at least one embodiment, processing cores <b>3610</b> include, without limitation, 64 single-precision (32-bit) floating point cores, 64 integer cores, 32 double-precision (64-bit) floating point cores, and 8 tensor cores.</p><p id="p-0544" num="0521">Tensor cores are configured to perform matrix operations in accordance with at least one embodiment. In at least one embodiment, one or more tensor cores are included in processing cores <b>3610</b>. In at least one embodiment, tensor cores are configured to perform deep learning matrix arithmetic, such as convolution operations for neural network training and inferencing. In at least one embodiment, each tensor core operates on a 4&#xd7;4 matrix and performs a matrix multiply and accumulate operation, D=A&#xd7;B+C, where A, B, C, and D are 4&#xd7;4 matrices.</p><p id="p-0545" num="0522">In at least one embodiment, matrix multiply inputs A and B are 16-bit floating point matrices and accumulation matrices C and D are 16-bit floating point or 32-bit floating point matrices. In at least one embodiment, tensor cores operate on 16-bit floating point input data with 32-bit floating point accumulation. In at least one embodiment, 16-bit floating point multiply uses 64 operations and results in a full precision product that is then accumulated using 32-bit floating point addition with other intermediate products for a 4&#xd7;4&#xd7;4 matrix multiply. Tensor cores are used to perform much larger two-dimensional or higher dimensional matrix operations, built up from these smaller elements, in at least one embodiment. In at least one embodiment, an API, such as a CUDA 9 C++ API, exposes specialized matrix load, matrix multiply and accumulate, and matrix store operations to efficiently use tensor cores from a CUDA-C++ program. In at least one embodiment, at a CUDA level, a warp-level interface assumes 16&#xd7;16 size matrices spanning all 32 threads of warp.</p><p id="p-0546" num="0523">In at least one embodiment, each SM <b>3600</b> comprises, without limitation, M SFUs <b>3612</b> that perform special functions (e.g., attribute evaluation, reciprocal square root, and like). In at least one embodiment, SFUs <b>3612</b> include, without limitation, a tree traversal unit configured to traverse a hierarchical tree data structure. In at least one embodiment, SFUs <b>3612</b> include, without limitation, a texture unit configured to perform texture map filtering operations. In at least one embodiment, texture units are configured to load texture maps (e.g., a 2D array of texels) from memory and sample texture maps to produce sampled texture values for use in shader programs executed by SM <b>3600</b>. In at least one embodiment, texture maps are stored in shared memory/L1 cache <b>3618</b>. In at least one embodiment, texture units implement texture operations such as filtering operations using mip-maps (e.g., texture maps of varying levels of detail), in accordance with at least one embodiment. In at least one embodiment, each SM <b>3600</b> includes, without limitation, two texture units.</p><p id="p-0547" num="0524">Each SM <b>3600</b> comprises, without limitation, N LSUs <b>3614</b> that implement load and store operations between shared memory/L1 cache <b>3618</b> and register file <b>3608</b>, in at least one embodiment. Interconnect network <b>3616</b> connects each functional unit to register file <b>3608</b> and LSU <b>3614</b> to register file <b>3608</b> and shared memory/L1 cache <b>3618</b> in at least one embodiment. In at least one embodiment, interconnect network <b>3616</b> is a crossbar that can be configured to connect any functional units to any registers in register file <b>3608</b> and connect LSUs <b>3614</b> to register file <b>3608</b> and memory locations in shared memory/L1 cache <b>3618</b>.</p><p id="p-0548" num="0525">In at least one embodiment, shared memory/L1 cache <b>3618</b> is an array of on-chip memory that allows for data storage and communication between SM <b>3600</b> and primitive engine and between threads in SM <b>3600</b>, in at least one embodiment. In at least one embodiment, shared memory/L1 cache <b>3618</b> comprises, without limitation, 128 KB of storage capacity and is in a path from SM <b>3600</b> to a partition unit. In at least one embodiment, shared memory/L1 cache <b>3618</b>, in at least one embodiment, is used to cache reads and writes. In at least one embodiment, one or more of shared memory/L1 cache <b>3618</b>, L2 cache, and memory are backing stores.</p><p id="p-0549" num="0526">Combining data cache and shared memory functionality into a single memory block provides improved performance for both types of memory accesses, in at least one embodiment. In at least one embodiment, capacity is used or is usable as a cache by programs that do not use shared memory, such as if shared memory is configured to use half of a capacity, and texture and load/store operations can use remaining capacity. Integration within shared memory/L1 cache <b>3618</b> enables shared memory/L1 cache <b>3618</b> to function as a high-throughput conduit for streaming data while simultaneously providing high-bandwidth and low-latency access to frequently reused data, in accordance with at least one embodiment. In at least one embodiment, when configured for general purpose parallel computation, a simpler configuration can be used compared with graphics processing. In at least one embodiment, fixed function graphics processing units are bypassed, creating a much simpler programming model. In a general purpose parallel computation configuration, a work distribution unit assigns and distributes blocks of threads directly to DPCs, in at least one embodiment. In at least one embodiment, threads in a block execute a common program, using a unique thread ID in calculation to ensure each thread generates unique results, using SM <b>3600</b> to execute program and perform calculations, shared memory/L1 cache <b>3618</b> to communicate between threads, and LSU <b>3614</b> to read and write global memory through shared memory/L1 cache <b>3618</b> and memory partition unit. In at least one embodiment, when configured for general purpose parallel computation, SM <b>3600</b> writes commands that scheduler unit <b>3604</b> can use to launch new work on DPCs.</p><p id="p-0550" num="0527">In at least one embodiment, a PPU is included in or coupled to a desktop computer, a laptop computer, a tablet computer, servers, supercomputers, a smart-phone (e.g., a wireless, hand-held device), personal digital assistant (&#x201c;PDA&#x201d;), a digital camera, a vehicle, a head mounted display, a hand-held electronic device, and more. In at least one embodiment, a PPU is embodied on a single semiconductor substrate. In at least one embodiment, a PPU is included in a system-on-a-chip (&#x201c;SoC&#x201d;) along with one or more other devices such as additional PPUs, memory, a reduced instruction set computer (&#x201c;RISC&#x201d;) CPU, a memory management unit (&#x201c;MMU&#x201d;), a digital-to-analog converter (&#x201c;DAC&#x201d;), and like.</p><p id="p-0551" num="0528">In at least one embodiment, a PPU may be included on a graphics card that includes one or more memory devices. In at least one embodiment, that graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer. In at least one embodiment, that PPU may be an integrated graphics processing unit (&#x201c;iGPU&#x201d;) included in chipset of a motherboard.</p><p id="p-0552" num="0529">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>. In at least one embodiment, deep learning application processor is used to train a machine learning model, such as a neural network, to predict or infer information provided to SM <b>3600</b>. In at least one embodiment, SM <b>3600</b> is used to infer or predict information based on a trained machine learning model (e.g., neural network) that has been trained by another processor or system or by SM <b>3600</b>. In at least one embodiment, SM <b>3600</b> may be used to perform one or more neural network use cases described herein.</p><p id="p-0553" num="0530">In at least one embodiment, PPU can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, PPU can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0554" num="0531">Embodiments are disclosed related a virtualized computing platform for advanced computing, such as image inferencing and image processing in medical applications. Without limitation, embodiments may include radiography, magnetic resonance imaging (MM), nuclear medicine, ultrasound, sonography, elastography, photoacoustic imaging, tomography, echocardiography, functional near-infrared spectroscopy, and magnetic particle imaging, or a combination thereof. In at least one embodiment, a virtualized computing platform and associated processes described herein may additionally or alternatively be used, without limitation, in forensic science analysis, sub-surface detection and imaging (e.g., oil exploration, archaeology, paleontology, etc.), topography, oceanography, geology, osteology, meteorology, intelligent area or object tracking and monitoring, sensor data processing (e.g., RADAR, SONAR, LIDAR, etc.), and/or genomics and gene sequencing.</p><p id="p-0555" num="0532">With reference to <figref idref="DRAWINGS">FIG. <b>37</b></figref>, <figref idref="DRAWINGS">FIG. <b>37</b></figref> is an example data flow diagram for a process <b>3700</b> of generating and deploying an image processing and inferencing pipeline, in accordance with at least one embodiment. In at least one embodiment, process <b>3700</b> may be deployed for use with imaging devices, processing devices, genomics devices, gene sequencing devices, radiology devices, and/or other device types at one or more facilities <b>3702</b>, such as medical facilities, hospitals, healthcare institutes, clinics, research or diagnostic labs, etc. In at least one embodiment, process <b>3700</b> may be deployed to perform genomics analysis and inferencing on sequencing data. Examples of genomic analyses that may be performed using systems and processes described herein include, without limitation, variant calling, mutation detection, and gene expression quantification.</p><p id="p-0556" num="0533">In at least one embodiment, process <b>3700</b> may be executed within a training system <b>3704</b> and/or a deployment system <b>3706</b>. In at least one embodiment, training system <b>3704</b> may be used to perform training, deployment, and implementation of machine learning models (e.g., neural networks, object detection algorithms, computer vision algorithms, etc.) for use in deployment system <b>3706</b>. In at least one embodiment, deployment system <b>3706</b> may be configured to offload processing and compute resources among a distributed computing environment to reduce infrastructure requirements at facility <b>3702</b>. In at least one embodiment, deployment system <b>3706</b> may provide a streamlined platform for selecting, customizing, and implementing virtual instruments for use with imaging devices (e.g., Mill, CT Scan, X-Ray, Ultrasound, etc.) or sequencing devices at facility <b>3702</b>. In at least one embodiment, virtual instruments may include software-defined applications for performing one or more processing operations with respect to imaging data generated by imaging devices, sequencing devices, radiology devices, and/or other device types. In at least one embodiment, one or more applications in a pipeline may use or call upon services (e.g., inference, visualization, compute, AI, etc.) of deployment system <b>3706</b> during execution of applications.</p><p id="p-0557" num="0534">In at least one embodiment, some of applications used in advanced processing and inferencing pipelines may use machine learning models or other AI to perform one or more processing steps. In at least one embodiment, machine learning models may be trained at facility <b>3702</b> using data <b>3708</b> (such as imaging data) generated at facility <b>3702</b> (and stored on one or more picture archiving and communication system (PACS) servers at facility <b>3702</b>), may be trained using imaging or sequencing data <b>3708</b> from another facility or facilities (e.g., a different hospital, lab, clinic, etc.), or a combination thereof. In at least one embodiment, training system <b>3704</b> may be used to provide applications, services, and/or other resources for generating working, deployable machine learning models for deployment system <b>3706</b>.</p><p id="p-0558" num="0535">In at least one embodiment, a model registry <b>3724</b> may be backed by object storage that may support versioning and object metadata. In at least one embodiment, object storage may be accessible through, for example, a cloud storage (e.g., a cloud <b>3826</b> of <figref idref="DRAWINGS">FIG. <b>38</b></figref>) compatible application programming interface (API) from within a cloud platform. In at least one embodiment, machine learning models within model registry <b>3724</b> may uploaded, listed, modified, or deleted by developers or partners of a system interacting with an API. In at least one embodiment, an API may provide access to methods that allow users with appropriate credentials to associate models with applications, such that models may be executed as part of execution of containerized instantiations of applications.</p><p id="p-0559" num="0536">In at least one embodiment, a training pipeline <b>3804</b> (<figref idref="DRAWINGS">FIG. <b>38</b></figref>) may include a scenario where facility <b>3702</b> is training their own machine learning model, or has an existing machine learning model that needs to be optimized or updated. In at least one embodiment, imaging data <b>3708</b> generated by imaging device(s), sequencing devices, and/or other device types may be received. In at least one embodiment, once imaging data <b>3708</b> is received, AI-assisted annotation <b>3710</b> may be used to aid in generating annotations corresponding to imaging data <b>3708</b> to be used as ground truth data for a machine learning model. In at least one embodiment, AI-assisted annotation <b>3710</b> may include one or more machine learning models (e.g., convolutional neural networks (CNNs)) that may be trained to generate annotations corresponding to certain types of imaging data <b>3708</b> (e.g., from certain devices) and/or certain types of anomalies in imaging data <b>3708</b>. In at least one embodiment, AI-assisted annotations <b>3710</b> may then be used directly, or may be adjusted or fine-tuned using an annotation tool (e.g., by a researcher, a clinician, a doctor, a scientist, etc.), to generate ground truth data. In at least one embodiment, in some examples, labeled clinic data <b>3712</b> (e.g., annotations provided by a clinician, doctor, scientist, technician, etc.) may be used as ground truth data for training a machine learning model. In at least one embodiment, AI-assisted annotations <b>3710</b>, labeled clinic data <b>3712</b>, or a combination thereof may be used as ground truth data for training a machine learning model. In at least one embodiment, a trained machine learning model may be referred to as an output model <b>3716</b>, and may be used by deployment system <b>3706</b>, as described herein.</p><p id="p-0560" num="0537">In at least one embodiment, training pipeline <b>3804</b> (<figref idref="DRAWINGS">FIG. <b>38</b></figref>) may include a scenario where facility <b>3702</b> needs a machine learning model for use in performing one or more processing tasks for one or more applications in deployment system <b>3706</b>, but facility <b>3702</b> may not currently have such a machine learning model (or may not have a model that is optimized, efficient, or effective for such purposes). In at least one embodiment, an existing machine learning model may be selected from model registry <b>3724</b>. In at least one embodiment, model registry <b>3724</b> may include machine learning models trained to perform a variety of different inference tasks on imaging data. In at least one embodiment, machine learning models in model registry <b>3724</b> may have been trained on imaging data from different facilities than facility <b>3702</b> (e.g., facilities remotely located). In at least one embodiment, machine learning models may have been trained on imaging data from one location, two locations, or any number of locations. In at least one embodiment, when being trained on imaging data from a specific location, training may take place at that location, or at least in a manner that protects confidentiality of imaging data or restricts imaging data from being transferred off-premises (e.g., to comply with HIPAA regulations, privacy regulations, etc.). In at least one embodiment, once a model is trained&#x2014;or partially trained&#x2014;at one location, a machine learning model may be added to model registry <b>3724</b>. In at least one embodiment, a machine learning model may then be retrained, or updated, at any number of other facilities, and a retrained or updated model may be made available in model registry <b>3724</b>. In at least one embodiment, a machine learning model may then be selected from model registry <b>3724</b>&#x2014;and referred to as output model <b>3716</b>&#x2014;and may be used in deployment system <b>3706</b> to perform one or more processing tasks for one or more applications of a deployment system.</p><p id="p-0561" num="0538">In at least one embodiment, training pipeline <b>3804</b> (<figref idref="DRAWINGS">FIG. <b>38</b></figref>) may be used in a scenario that includes facility <b>3702</b> requiring a machine learning model for use in performing one or more processing tasks for one or more applications in deployment system <b>3706</b>, but facility <b>3702</b> may not currently have such a machine learning model (or may not have a model that is optimized, efficient, or effective for such purposes). In at least one embodiment, a machine learning model selected from model registry <b>3724</b> might not be fine-tuned or optimized for imaging data <b>3708</b> generated at facility <b>3702</b> because of differences in populations, genetic variations, robustness of training data used to train a machine learning model, diversity in anomalies of training data, and/or other issues with training data. In at least one embodiment, AI-assisted annotation <b>3710</b> may be used to aid in generating annotations corresponding to imaging data <b>3708</b> to be used as ground truth data for retraining or updating a machine learning model. In at least one embodiment, labeled clinic data <b>3712</b> (e.g., annotations provided by a clinician, doctor, scientist, etc.) may be used as ground truth data for training a machine learning model. In at least one embodiment, retraining or updating a machine learning model may be referred to as model training <b>3714</b>. In at least one embodiment, model training <b>3714</b>&#x2014;e.g., AI-assisted annotations <b>3710</b>, labeled clinic data <b>3712</b>, or a combination thereof&#x2014;may be used as ground truth data for retraining or updating a machine learning model.</p><p id="p-0562" num="0539">In at least one embodiment, deployment system <b>3706</b> may include software <b>3718</b>, services <b>3720</b>, hardware <b>3722</b>, and/or other components, features, and functionality. In at least one embodiment, deployment system <b>3706</b> may include a software &#x201c;stack,&#x201d; such that software <b>3718</b> may be built on top of services <b>3720</b> and may use services <b>3720</b> to perform some or all of processing tasks, and services <b>3720</b> and software <b>3718</b> may be built on top of hardware <b>3722</b> and use hardware <b>3722</b> to execute processing, storage, and/or other compute tasks of deployment system <b>3706</b>.</p><p id="p-0563" num="0540">In at least one embodiment, software <b>3718</b> may include any number of different containers, where each container may execute an instantiation of an application. In at least one embodiment, each application may perform one or more processing tasks in an advanced processing and inferencing pipeline (e.g., inferencing, object detection, feature detection, segmentation, image enhancement, calibration, etc.). In at least one embodiment, for each type of imaging device (e.g., CT, MM, X-Ray, ultrasound, sonography, echocardiography, etc.), sequencing device, radiology device, genomics device, etc., there may be any number of containers that may perform a data processing task with respect to imaging data <b>3708</b> (or other data types, such as those described herein) generated by a device. In at least one embodiment, an advanced processing and inferencing pipeline may be defined based on selections of different containers that are desired or required for processing imaging data <b>3708</b>, in addition to containers that receive and configure imaging data for use by each container and/or for use by facility <b>3702</b> after processing through a pipeline (e.g., to convert outputs back to a usable data type, such as digital imaging and communications in medicine (DICOM) data, radiology information system (RIS) data, clinical information system (CIS) data, remote procedure call (RPC) data, data substantially compliant with a representation state transfer (REST) interface, data substantially compliant with a file-based interface, and/or raw data, for storage and display at facility <b>3702</b>). In at least one embodiment, a combination of containers within software <b>3718</b> (e.g., that make up a pipeline) may be referred to as a virtual instrument (as described in more detail herein), and a virtual instrument may leverage services <b>3720</b> and hardware <b>3722</b> to execute some or all processing tasks of applications instantiated in containers.</p><p id="p-0564" num="0541">In at least one embodiment, a data processing pipeline may receive input data (e.g., imaging data <b>3708</b>) in a DICOM, RIS, CIS, REST compliant, RPC, raw, and/or other format in response to an inference request (e.g., a request from a user of deployment system <b>3706</b>, such as a clinician, a doctor, a radiologist, etc.). In at least one embodiment, input data may be representative of one or more images, video, and/or other data representations generated by one or more imaging devices, sequencing devices, radiology devices, genomics devices, and/or other device types. In at least one embodiment, data may undergo pre-processing as part of data processing pipeline to prepare data for processing by one or more applications. In at least one embodiment, post-processing may be performed on an output of one or more inferencing tasks or other processing tasks of a pipeline to prepare an output data for a next application and/or to prepare output data for transmission and/or use by a user (e.g., as a response to an inference request). In at least one embodiment, inferencing tasks may be performed by one or more machine learning models, such as trained or deployed neural networks, which may include output models <b>3716</b> of training system <b>3704</b>.</p><p id="p-0565" num="0542">In at least one embodiment, tasks of data processing pipeline may be encapsulated in a container(s) that each represent a discrete, fully functional instantiation of an application and virtualized computing environment that is able to reference machine learning models. In at least one embodiment, containers or applications may be published into a private (e.g., limited access) area of a container registry (described in more detail herein), and trained or deployed models may be stored in model registry <b>3724</b> and associated with one or more applications. In at least one embodiment, images of applications (e.g., container images) may be available in a container registry, and once selected by a user from a container registry for deployment in a pipeline, an image may be used to generate a container for an instantiation of an application for use by a user's system.</p><p id="p-0566" num="0543">In at least one embodiment, developers (e.g., software developers, clinicians, doctors, etc.) may develop, publish, and store applications (e.g., as containers) for performing image processing and/or inferencing on supplied data. In at least one embodiment, development, publishing, and/or storing may be performed using a software development kit (SDK) associated with a system (e.g., to ensure that an application and/or container developed is compliant with or compatible with a system). In at least one embodiment, an application that is developed may be tested locally (e.g., at a first facility, on data from a first facility) with an SDK which may support at least some of services <b>3720</b> as a system (e.g., system <b>3800</b> of <figref idref="DRAWINGS">FIG. <b>38</b></figref>). In at least one embodiment, because DICOM objects may contain anywhere from one to hundreds of images or other data types, and due to a variation in data, a developer may be responsible for managing (e.g., setting constructs for, building pre-processing into an application, etc.) extraction and preparation of incoming DICOM data. In at least one embodiment, once validated by system <b>3800</b> (e.g., for accuracy, safety, patient privacy, etc.), an application may be available in a container registry for selection and/or implementation by a user (e.g., a hospital, clinic, lab, healthcare provider, etc.) to perform one or more processing tasks with respect to data at a facility (e.g., a second facility) of a user.</p><p id="p-0567" num="0544">In at least one embodiment, developers may then share applications or containers through a network for access and use by users of a system (e.g., system <b>3800</b> of <figref idref="DRAWINGS">FIG. <b>38</b></figref>). In at least one embodiment, completed and validated applications or containers may be stored in a container registry and associated machine learning models may be stored in model registry <b>3724</b>. In at least one embodiment, a requesting entity (e.g., a user at a medical facility)&#x2014;who provides an inference or image processing request&#x2014;may browse a container registry and/or model registry <b>3724</b> for an application, container, dataset, machine learning model, etc., select a desired combination of elements for inclusion in data processing pipeline, and submit an imaging processing request. In at least one embodiment, a request may include input data (and associated patient data, in some examples) that is necessary to perform a request, and/or may include a selection of application(s) and/or machine learning models to be executed in processing a request. In at least one embodiment, a request may then be passed to one or more components of deployment system <b>3706</b> (e.g., a cloud) to perform processing of data processing pipeline. In at least one embodiment, processing by deployment system <b>3706</b> may include referencing selected elements (e.g., applications, containers, models, etc.) from a container registry and/or model registry <b>3724</b>. In at least one embodiment, once results are generated by a pipeline, results may be returned to a user for reference (e.g., for viewing in a viewing application suite executing on a local, on-premises workstation or terminal). In at least one embodiment, a radiologist may receive results from an data processing pipeline including any number of application and/or containers, where results may include anomaly detection in X-rays, CT scans, MRIs, etc.</p><p id="p-0568" num="0545">In at least one embodiment, to aid in processing or execution of applications or containers in pipelines, services <b>3720</b> may be leveraged. In at least one embodiment, services <b>3720</b> may include compute services, artificial intelligence (AI) services, visualization services, and/or other service types. In at least one embodiment, services <b>3720</b> may provide functionality that is common to one or more applications in software <b>3718</b>, so functionality may be abstracted to a service that may be called upon or leveraged by applications. In at least one embodiment, functionality provided by services <b>3720</b> may run dynamically and more efficiently, while also scaling well by allowing applications to process data in parallel (e.g., using a parallel computing platform <b>3830</b> (<figref idref="DRAWINGS">FIG. <b>38</b></figref>)). In at least one embodiment, rather than each application that shares a same functionality offered by a service <b>3720</b> being required to have a respective instance of service <b>3720</b>, service <b>3720</b> may be shared between and among various applications. In at least one embodiment, services may include an inference server or engine that may be used for executing detection or segmentation tasks, as non-limiting examples. In at least one embodiment, a model training service may be included that may provide machine learning model training and/or retraining capabilities. In at least one embodiment, a data augmentation service may further be included that may provide GPU accelerated data (e.g., DICOM, RIS, CIS, REST compliant, RPC, raw, etc.) extraction, resizing, scaling, and/or other augmentation. In at least one embodiment, a visualization service may be used that may add image rendering effects&#x2014;such as ray-tracing, rasterization, denoising, sharpening, etc.&#x2014;to add realism to two-dimensional (2D) and/or three-dimensional (3D) models. In at least one embodiment, virtual instrument services may be included that provide for beam-forming, segmentation, inferencing, imaging, and/or support for other applications within pipelines of virtual instruments.</p><p id="p-0569" num="0546">In at least one embodiment, where a service <b>3720</b> includes an AI service (e.g., an inference service), one or more machine learning models associated with an application for anomaly detection (e.g., tumors, growth abnormalities, scarring, etc.) may be executed by calling upon (e.g., as an API call) an inference service (e.g., an inference server) to execute machine learning model(s), or processing thereof, as part of application execution. In at least one embodiment, where another application includes one or more machine learning models for segmentation tasks, an application may call upon an inference service to execute machine learning models for performing one or more of processing operations associated with segmentation tasks. In at least one embodiment, software <b>3718</b> implementing advanced processing and inferencing pipeline that includes segmentation application and anomaly detection application may be streamlined because each application may call upon a same inference service to perform one or more inferencing tasks.</p><p id="p-0570" num="0547">In at least one embodiment, hardware <b>3722</b> may include GPUs, CPUs, graphics cards, an AI/deep learning system (e.g., an AI supercomputer, such as NVIDIA's DGX supercomputer system), a cloud platform, or a combination thereof. In at least one embodiment, different types of hardware <b>3722</b> may be used to provide efficient, purpose-built support for software <b>3718</b> and services <b>3720</b> in deployment system <b>3706</b>. In at least one embodiment, use of GPU processing may be implemented for processing locally (e.g., at facility <b>3702</b>), within an AI/deep learning system, in a cloud system, and/or in other processing components of deployment system <b>3706</b> to improve efficiency, accuracy, and efficacy of image processing, image reconstruction, segmentation, MM exams, stroke or heart attack detection (e.g., in real-time), image quality in rendering, etc. In at least one embodiment, a facility may include imaging devices, genomics devices, sequencing devices, and/or other device types on-premises that may leverage GPUs to generate imaging data representative of a subject's anatomy.</p><p id="p-0571" num="0548">In at least one embodiment, software <b>3718</b> and/or services <b>3720</b> may be optimized for GPU processing with respect to deep learning, machine learning, and/or high-performance computing, as non-limiting examples. In at least one embodiment, at least some of computing environment of deployment system <b>3706</b> and/or training system <b>3704</b> may be executed in a datacenter one or more supercomputers or high performance computing systems, with GPU optimized software (e.g., hardware and software combination of NVIDIA's DGX system). In at least one embodiment, datacenters may be compliant with provisions of HIPAA, such that receipt, processing, and transmission of imaging data and/or other patient data is securely handled with respect to privacy of patient data. In at least one embodiment, hardware <b>3722</b> may include any number of GPUs that may be called upon to perform processing of data in parallel, as described herein. In at least one embodiment, cloud platform may further include GPU processing for GPU-optimized execution of deep learning tasks, machine learning tasks, or other computing tasks. In at least one embodiment, cloud platform (e.g., NVIDIA's NGC) may be executed using an AI/deep learning supercomputer(s) and/or GPU-optimized software (e.g., as provided on NVIDIA's DGX systems) as a hardware abstraction and scaling platform. In at least one embodiment, cloud platform may integrate an application container clustering system or orchestration system (e.g., KUBERNETES) on multiple GPUs to enable seamless scaling and load balancing.</p><p id="p-0572" num="0549">In at least one embodiment, hardware <b>3722</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, hardware <b>3722</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0573" num="0550"><figref idref="DRAWINGS">FIG. <b>38</b></figref> is a system diagram for an example system <b>3800</b> for generating and deploying an imaging deployment pipeline, in accordance with at least one embodiment. In at least one embodiment, system <b>3800</b> may be used to implement process <b>3700</b> of <figref idref="DRAWINGS">FIG. <b>37</b></figref> and/or other processes including advanced processing and inferencing pipelines. In at least one embodiment, system <b>3800</b> may include training system <b>3704</b> and deployment system <b>3706</b>. In at least one embodiment, training system <b>3704</b> and deployment system <b>3706</b> may be implemented using software <b>3718</b>, services <b>3720</b>, and/or hardware <b>3722</b>, as described herein.</p><p id="p-0574" num="0551">In at least one embodiment, system <b>3800</b> (e.g., training system <b>3704</b> and/or deployment system <b>3706</b>) may implemented in a cloud computing environment (e.g., using cloud <b>3826</b>). In at least one embodiment, system <b>3800</b> may be implemented locally with respect to a healthcare services facility, or as a combination of both cloud and local computing resources. In at least one embodiment, in embodiments where cloud computing is implemented, patient data may be separated from, or unprocessed by, by one or more components of system <b>3800</b> that would render processing non-compliant with HIPAA and/or other data handling and privacy regulations or laws. In at least one embodiment, access to APIs in cloud <b>3826</b> may be restricted to authorized users through enacted security measures or protocols. In at least one embodiment, a security protocol may include web tokens that may be signed by an authentication (e.g., AuthN, AuthZ, Gluecon, etc.) service and may carry appropriate authorization. In at least one embodiment, APIs of virtual instruments (described herein), or other instantiations of system <b>3800</b>, may be restricted to a set of public IPs that have been vetted or authorized for interaction.</p><p id="p-0575" num="0552">In at least one embodiment, various components of system <b>3800</b> may communicate between and among one another using any of a variety of different network types, including but not limited to local area networks (LANs) and/or wide area networks (WANs) via wired and/or wireless communication protocols. In at least one embodiment, communication between facilities and components of system <b>3800</b> (e.g., for transmitting inference requests, for receiving results of inference requests, etc.) may be communicated over a data bus or data busses, wireless data protocols (Wi-Fi), wired data protocols (e.g., Ethernet), etc.</p><p id="p-0576" num="0553">In at least one embodiment, training system <b>3704</b> may execute training pipelines <b>3804</b>, similar to those described herein with respect to <figref idref="DRAWINGS">FIG. <b>37</b></figref>. In at least one embodiment, where one or more machine learning models are to be used in deployment pipelines <b>3810</b> by deployment system <b>3706</b>, training pipelines <b>3804</b> may be used to train or retrain one or more (e.g., pre-trained) models, and/or implement one or more of pre-trained models <b>3806</b> (e.g., without a need for retraining or updating). In at least one embodiment, as a result of training pipelines <b>3804</b>, output model(s) <b>3716</b> may be generated. In at least one embodiment, training pipelines <b>3804</b> may include any number of processing steps, such as but not limited to imaging data (or other input data) conversion or adaption (e.g., using DICOM adapter <b>3802</b>A to convert DICOM images to another format suitable for processing by respective machine learning models, such as Neuroimaging Informatics Technology Initiative (NIfTI) format), AI-assisted annotation <b>3710</b>, labeling or annotating of imaging data <b>3708</b> to generate labeled clinic data <b>3712</b>, model selection from a model registry, model training <b>3714</b>, training, retraining, or updating models, and/or other processing steps. In at least one embodiment, for different machine learning models used by deployment system <b>3706</b>, different training pipelines <b>3804</b> may be used. In at least one embodiment, training pipeline <b>3804</b> similar to a first example described with respect to <figref idref="DRAWINGS">FIG. <b>37</b></figref> may be used for a first machine learning model, training pipeline <b>3804</b> similar to a second example described with respect to <figref idref="DRAWINGS">FIG. <b>37</b></figref> may be used for a second machine learning model, and training pipeline <b>3804</b> similar to a third example described with respect to <figref idref="DRAWINGS">FIG. <b>37</b></figref> may be used for a third machine learning model. In at least one embodiment, any combination of tasks within training system <b>3704</b> may be used depending on what is required for each respective machine learning model. In at least one embodiment, one or more of machine learning models may already be trained and ready for deployment so machine learning models may not undergo any processing by training system <b>3704</b>, and may be implemented by deployment system <b>3706</b>.</p><p id="p-0577" num="0554">In at least one embodiment, output model(s) <b>3716</b> and/or pre-trained model(s) <b>3806</b> may include any types of machine learning models depending on implementation or embodiment. In at least one embodiment, and without limitation, machine learning models used by system <b>3800</b> may include machine learning model(s) using linear regression, logistic regression, decision trees, support vector machines (SVM), Na&#xef;ve Bayes, k-nearest neighbor (Knn), K means clustering, random forest, dimensionality reduction algorithms, gradient boosting algorithms, neural networks (e.g., auto-encoders, convolutional, recurrent, perceptrons, Long/Short Term Memory (LSTM), Hopfield, Boltzmann, deep belief, deconvolutional, generative adversarial, liquid state machine, etc.), and/or other types of machine learning models.</p><p id="p-0578" num="0555">In at least one embodiment, training pipelines <b>3804</b> may include AI-assisted annotation, as described in more detail herein with respect to at least <figref idref="DRAWINGS">FIG. <b>41</b>B</figref>. In at least one embodiment, labeled clinic data <b>3712</b> (e.g., traditional annotation) may be generated by any number of techniques. In at least one embodiment, labels or other annotations may be generated within a drawing program (e.g., an annotation program), a computer aided design (CAD) program, a labeling program, another type of program suitable for generating annotations or labels for ground truth, and/or may be hand drawn, in some examples. In at least one embodiment, ground truth data may be synthetically produced (e.g., generated from computer models or renderings), real produced (e.g., designed and produced from real-world data), machine-automated (e.g., using feature analysis and learning to extract features from data and then generate labels), human annotated (e.g., labeler, or annotation expert, defines location of labels), and/or a combination thereof. In at least one embodiment, for each instance of imaging data <b>3708</b> (or other data type used by machine learning models), there may be corresponding ground truth data generated by training system <b>3704</b>. In at least one embodiment, AI-assisted annotation may be performed as part of deployment pipelines <b>3810</b>; either in addition to, or in lieu of AI-assisted annotation included in training pipelines <b>3804</b>. In at least one embodiment, system <b>3800</b> may include a multi-layer platform that may include a software layer (e.g., software <b>3718</b>) of diagnostic applications (or other application types) that may perform one or more medical imaging and diagnostic functions. In at least one embodiment, system <b>3800</b> may be communicatively coupled to (e.g., via encrypted links) PACS server networks of one or more facilities. In at least one embodiment, system <b>3800</b> may be configured to access and referenced data (e.g., DICOM data, RIS data, raw data, CIS data, REST compliant data, RPC data, raw data, etc.) from PACS servers (e.g., via a DICOM adapter <b>3802</b>, or another data type adapter such as RIS, CIS, REST compliant, RPC, raw, etc.) to perform operations, such as training machine learning models, deploying machine learning models, image processing, inferencing, and/or other operations.</p><p id="p-0579" num="0556">In at least one embodiment, a software layer may be implemented as a secure, encrypted, and/or authenticated API through which applications or containers may be invoked (e.g., called) from an external environment(s) (e.g., facility <b>3702</b>). In at least one embodiment, applications may then call or execute one or more services <b>3720</b> for performing compute, AI, or visualization tasks associated with respective applications, and software <b>3718</b> and/or services <b>3720</b> may leverage hardware <b>3722</b> to perform processing tasks in an effective and efficient manner.</p><p id="p-0580" num="0557">In at least one embodiment, deployment system <b>3706</b> may execute deployment pipelines <b>3810</b>. In at least one embodiment, deployment pipelines <b>3810</b> may include any number of applications that may be sequentially, non-sequentially, or otherwise applied to imaging data (and/or other data types) generated by imaging devices, sequencing devices, genomics devices, etc.&#x2014;including AI-assisted annotation, as described above. In at least one embodiment, as described herein, a deployment pipeline <b>3810</b> for an individual device may be referred to as a virtual instrument for a device (e.g., a virtual ultrasound instrument, a virtual CT scan instrument, a virtual sequencing instrument, etc.). In at least one embodiment, for a single device, there may be more than one deployment pipeline <b>3810</b> depending on information desired from data generated by a device. In at least one embodiment, where detections of anomalies are desired from an MM machine, there may be a first deployment pipeline <b>3810</b>, and where image enhancement is desired from output of an MRI machine, there may be a second deployment pipeline <b>3810</b>.</p><p id="p-0581" num="0558">In at least one embodiment, applications available for deployment pipelines <b>3810</b> may include any application that may be used for performing processing tasks on imaging data or other data from devices. In at least one embodiment, different applications may be responsible for image enhancement, segmentation, reconstruction, anomaly detection, object detection, feature detection, treatment planning, dosimetry, beam planning (or other radiation treatment procedures), and/or other analysis, image processing, or inferencing tasks. In at least one embodiment, deployment system <b>3706</b> may define constructs for each of applications, such that users of deployment system <b>3706</b> (e.g., medical facilities, labs, clinics, etc.) may understand constructs and adapt applications for implementation within their respective facility. In at least one embodiment, an application for image reconstruction may be selected for inclusion in deployment pipeline <b>3810</b>, but data type generated by an imaging device may be different from a data type used within an application. In at least one embodiment, DICOM adapter <b>3802</b>B (and/or a DICOM reader) or another data type adapter or reader (e.g., RIS, CIS, REST compliant, RPC, raw, etc.) may be used within deployment pipeline <b>3810</b> to convert data to a form useable by an application within deployment system <b>3706</b>. In at least one embodiment, access to DICOM, RIS, CIS, REST compliant, RPC, raw, and/or other data type libraries may be accumulated and pre-processed, including decoding, extracting, and/or performing any convolutions, color corrections, sharpness, gamma, and/or other augmentations to data. In at least one embodiment, DICOM, RIS, CIS, REST compliant, RPC, and/or raw data may be unordered and a pre-pass may be executed to organize or sort collected data. In at least one embodiment, because various applications may share common image operations, in some embodiments, a data augmentation library (e.g., as one of services <b>3720</b>) may be used to accelerate these operations. In at least one embodiment, to avoid bottlenecks of conventional processing approaches that rely on CPU processing, parallel computing platform <b>3830</b> may be used for GPU acceleration of these processing tasks.</p><p id="p-0582" num="0559">In at least one embodiment, an image reconstruction application may include a processing task that includes use of a machine learning model. In at least one embodiment, a user may desire to use their own machine learning model, or to select a machine learning model from model registry <b>3724</b>. In at least one embodiment, a user may implement their own machine learning model or select a machine learning model for inclusion in an application for performing a processing task. In at least one embodiment, applications may be selectable and customizable, and by defining constructs of applications, deployment and implementation of applications for a particular user are presented as a more seamless user experience. In at least one embodiment, by leveraging other features of system <b>3800</b>&#x2014;such as services <b>3720</b> and hardware <b>3722</b>&#x2014;deployment pipelines <b>3810</b> may be even more user friendly, provide for easier integration, and produce more accurate, efficient, and timely results.</p><p id="p-0583" num="0560">In at least one embodiment, deployment system <b>3706</b> may include a user interface <b>3814</b> (e.g., a graphical user interface, a web interface, etc.) that may be used to select applications for inclusion in deployment pipeline(s) <b>3810</b>, arrange applications, modify or change applications or parameters or constructs thereof, use and interact with deployment pipeline(s) <b>3810</b> during set-up and/or deployment, and/or to otherwise interact with deployment system <b>3706</b>. In at least one embodiment, although not illustrated with respect to training system <b>3704</b>, user interface <b>3814</b> (or a different user interface) may be used for selecting models for use in deployment system <b>3706</b>, for selecting models for training, or retraining, in training system <b>3704</b>, and/or for otherwise interacting with training system <b>3704</b>.</p><p id="p-0584" num="0561">In at least one embodiment, pipeline manager <b>3812</b> may be used, in addition to an application orchestration system <b>3828</b>, to manage interaction between applications or containers of deployment pipeline(s) <b>3810</b> and services <b>3720</b> and/or hardware <b>3722</b>. In at least one embodiment, pipeline manager <b>3812</b> may be configured to facilitate interactions from application to application, from application to service <b>3720</b>, and/or from application or service to hardware <b>3722</b>. In at least one embodiment, although illustrated as included in software <b>3718</b>, this is not intended to be limiting, and in some examples (e.g., as illustrated in <figref idref="DRAWINGS">FIG. <b>39</b></figref>) pipeline manager <b>3812</b> may be included in services <b>3720</b>. In at least one embodiment, application orchestration system <b>3828</b> (e.g., Kubernetes, DOCKER, etc.) may include a container orchestration system that may group applications into containers as logical units for coordination, management, scaling, and deployment. In at least one embodiment, by associating applications from deployment pipeline(s) <b>3810</b> (e.g., a reconstruction application, a segmentation application, etc.) with individual containers, each application may execute in a self-contained environment (e.g., at a kernel level) to increase speed and efficiency.</p><p id="p-0585" num="0562">In at least one embodiment, each application and/or container (or image thereof) may be individually developed, modified, and deployed (e.g., a first user or developer may develop, modify, and deploy a first application and a second user or developer may develop, modify, and deploy a second application separate from a first user or developer), which may allow for focus on, and attention to, a task of a single application and/or container(s) without being hindered by tasks of another application(s) or container(s). In at least one embodiment, communication, and cooperation between different containers or applications may be aided by pipeline manager <b>3812</b> and application orchestration system <b>3828</b>. In at least one embodiment, so long as an expected input and/or output of each container or application is known by a system (e.g., based on constructs of applications or containers), application orchestration system <b>3828</b> and/or pipeline manager <b>3812</b> may facilitate communication among and between, and sharing of resources among and between, each of applications or containers. In at least one embodiment, because one or more of applications or containers in deployment pipeline(s) <b>3810</b> may share same services and resources, application orchestration system <b>3828</b> may orchestrate, load balance, and determine sharing of services or resources between and among various applications or containers. In at least one embodiment, a scheduler may be used to track resource requirements of applications or containers, current usage or planned usage of these resources, and resource availability. In at least one embodiment, a scheduler may thus allocate resources to different applications and distribute resources between and among applications in view of requirements and availability of a system. In some examples, a scheduler (and/or other component of application orchestration system <b>3828</b>) may determine resource availability and distribution based on constraints imposed on a system (e.g., user constraints), such as quality of service (QoS), urgency of need for data outputs (e.g., to determine whether to execute real-time processing or delayed processing), etc.</p><p id="p-0586" num="0563">In at least one embodiment, services <b>3720</b> leveraged by and shared by applications or containers in deployment system <b>3706</b> may include compute services <b>3816</b>, AI services <b>3818</b>, visualization services <b>3820</b>, and/or other service types. In at least one embodiment, applications may call (e.g., execute) one or more of services <b>3720</b> to perform processing operations for an application. In at least one embodiment, compute services <b>3816</b> may be leveraged by applications to perform super-computing or other high-performance computing (HPC) tasks. In at least one embodiment, compute service(s) <b>3816</b> may be leveraged to perform parallel processing (e.g., using a parallel computing platform <b>3830</b>) for processing data through one or more of applications and/or one or more tasks of a single application, substantially simultaneously. In at least one embodiment, parallel computing platform <b>3830</b> (e.g., NVIDIA's CUDA) may enable general purpose computing on GPUs (GPGPU) (e.g., GPUs <b>3822</b>). In at least one embodiment, a software layer of parallel computing platform <b>3830</b> may provide access to virtual instruction sets and parallel computational elements of GPUs, for execution of compute kernels. In at least one embodiment, parallel computing platform <b>3830</b> may include memory and, in some embodiments, a memory may be shared between and among multiple containers, and/or between and among different processing tasks within a single container. In at least one embodiment, inter-process communication (IPC) calls may be generated for multiple containers and/or for multiple processes within a container to use same data from a shared segment of memory of parallel computing platform <b>3830</b> (e.g., where multiple different stages of an application or multiple applications are processing same information). In at least one embodiment, rather than making a copy of data and moving data to different locations in memory (e.g., a read/write operation), same data in same location of a memory may be used for any number of processing tasks (e.g., at a same time, at different times, etc.). In at least one embodiment, as data is used to generate new data as a result of processing, this information of a new location of data may be stored and shared between various applications. In at least one embodiment, location of data and a location of updated or modified data may be part of a definition of how a payload is understood within containers.</p><p id="p-0587" num="0564">In at least one embodiment, AI services <b>3818</b> may be leveraged to perform inferencing services for executing machine learning model(s) associated with applications (e.g., tasked with performing one or more processing tasks of an application). In at least one embodiment, AI services <b>3818</b> may leverage AI system <b>3824</b> to execute machine learning model(s) (e.g., neural networks, such as CNNs) for segmentation, reconstruction, object detection, feature detection, classification, and/or other inferencing tasks. In at least one embodiment, applications of deployment pipeline(s) <b>3810</b> may use one or more of output models <b>3716</b> from training system <b>3704</b> and/or other models of applications to perform inference on imaging data (e.g., DICOM data, RIS data, CIS data, REST compliant data, RPC data, raw data, etc.). In at least one embodiment, two or more examples of inferencing using application orchestration system <b>3828</b> (e.g., a scheduler) may be available. In at least one embodiment, a first category may include a high priority/low latency path that may achieve higher service level agreements, such as for performing inference on urgent requests during an emergency, or for a radiologist during diagnosis. In at least one embodiment, a second category may include a standard priority path that may be used for requests that may be non-urgent or where analysis may be performed at a later time. In at least one embodiment, application orchestration system <b>3828</b> may distribute resources (e.g., services <b>3720</b> and/or hardware <b>3722</b>) based on priority paths for different inferencing tasks of AI services <b>3818</b>.</p><p id="p-0588" num="0565">In at least one embodiment, shared storage may be mounted to AI services <b>3818</b> within system <b>3800</b>. In at least one embodiment, shared storage may operate as a cache (or other storage device type) and may be used to process inference requests from applications. In at least one embodiment, when an inference request is submitted, a request may be received by a set of API instances of deployment system <b>3706</b>, and one or more instances may be selected (e.g., for best fit, for load balancing, etc.) to process a request. In at least one embodiment, to process a request, a request may be entered into a database, a machine learning model may be located from model registry <b>3724</b> if not already in a cache, a validation step may ensure appropriate machine learning model is loaded into a cache (e.g., shared storage), and/or a copy of a model may be saved to a cache. In at least one embodiment, a scheduler (e.g., of pipeline manager <b>3812</b>) may be used to launch an application that is referenced in a request if an application is not already running or if there are not enough instances of an application. In at least one embodiment, if an inference server is not already launched to execute a model, an inference server may be launched. In at least one embodiment, any number of inference servers may be launched per model. In at least one embodiment, in a pull model, in which inference servers are clustered, models may be cached whenever load balancing is advantageous. In at least one embodiment, inference servers may be statically loaded in corresponding, distributed servers.</p><p id="p-0589" num="0566">In at least one embodiment, inferencing may be performed using an inference server that runs in a container. In at least one embodiment, an instance of an inference server may be associated with a model (and optionally a plurality of versions of a model). In at least one embodiment, if an instance of an inference server does not exist when a request to perform inference on a model is received, a new instance may be loaded. In at least one embodiment, when starting an inference server, a model may be passed to an inference server such that a same container may be used to serve different models so long as inference server is running as a different instance.</p><p id="p-0590" num="0567">In at least one embodiment, during application execution, an inference request for a given application may be received, and a container (e.g., hosting an instance of an inference server) may be loaded (if not already), and a start procedure may be called. In at least one embodiment, pre-processing logic in a container may load, decode, and/or perform any additional pre-processing on incoming data (e.g., using a CPU(s) and/or GPU(s)). In at least one embodiment, once data is prepared for inference, a container may perform inference as necessary on data. In at least one embodiment, this may include a single inference call on one image (e.g., a hand X-ray), or may require inference on hundreds of images (e.g., a chest CT). In at least one embodiment, an application may summarize results before completing, which may include, without limitation, a single confidence score, pixel level-segmentation, voxel-level segmentation, generating a visualization, or generating text to summarize findings. In at least one embodiment, different models or applications may be assigned different priorities. For example, some models may have a real-time (TAT less than one minute) priority while others may have lower priority (e.g., TAT less than 10 minutes). In at least one embodiment, model execution times may be measured from requesting institution or entity and may include partner network traversal time, as well as execution on an inference service.</p><p id="p-0591" num="0568">In at least one embodiment, transfer of requests between services <b>3720</b> and inference applications may be hidden behind a software development kit (SDK), and robust transport may be provide through a queue. In at least one embodiment, a request will be placed in a queue via an API for an individual application/tenant ID combination and an SDK will pull a request from a queue and give a request to an application. In at least one embodiment, a name of a queue may be provided in an environment from where an SDK will pick it up. In at least one embodiment, asynchronous communication through a queue may be useful as it may allow any instance of an application to pick up work as it becomes available. In at least one embodiment, results may be transferred back through a queue, to ensure no data is lost. In at least one embodiment, queues may also provide an ability to segment work, as highest priority work may go to a queue with most instances of an application connected to it, while lowest priority work may go to a queue with a single instance connected to it that processes tasks in an order received. In at least one embodiment, an application may run on a GPU-accelerated instance generated in cloud <b>3826</b>, and an inference service may perform inferencing on a GPU.</p><p id="p-0592" num="0569">In at least one embodiment, visualization services <b>3820</b> may be leveraged to generate visualizations for viewing outputs of applications and/or deployment pipeline(s) <b>3810</b>. In at least one embodiment, GPUs <b>3822</b> may be leveraged by visualization services <b>3820</b> to generate visualizations. In at least one embodiment, rendering effects, such as ray-tracing, may be implemented by visualization services <b>3820</b> to generate higher quality visualizations. In at least one embodiment, visualizations may include, without limitation, 2D image renderings, 3D volume renderings, 3D volume reconstruction, 2D tomographic slices, virtual reality displays, augmented reality displays, etc. In at least one embodiment, virtualized environments may be used to generate a virtual interactive display or environment (e.g., a virtual environment) for interaction by users of a system (e.g., doctors, nurses, radiologists, etc.). In at least one embodiment, visualization services <b>3820</b> may include an internal visualizer, cinematics, and/or other rendering or image processing capabilities or functionality (e.g., ray tracing, rasterization, internal optics, etc.).</p><p id="p-0593" num="0570">In at least one embodiment, hardware <b>3722</b> may include GPUs <b>3822</b>, AI system <b>3824</b>, cloud <b>3826</b>, and/or any other hardware used for executing training system <b>3704</b> and/or deployment system <b>3706</b>. In at least one embodiment, GPUs <b>3822</b> (e.g., NVIDIA's TESLA and/or QUADRO GPUs) may include any number of GPUs that may be used for executing processing tasks of compute services <b>3816</b>, AI services <b>3818</b>, visualization services <b>3820</b>, other services, and/or any of features or functionality of software <b>3718</b>. For example, with respect to AI services <b>3818</b>, GPUs <b>3822</b> may be used to perform pre-processing on imaging data (or other data types used by machine learning models), post-processing on outputs of machine learning models, and/or to perform inferencing (e.g., to execute machine learning models). In at least one embodiment, cloud <b>3826</b>, AI system <b>3824</b>, and/or other components of system <b>3800</b> may use GPUs <b>3822</b>. In at least one embodiment, cloud <b>3826</b> may include a GPU-optimized platform for deep learning tasks. In at least one embodiment, AI system <b>3824</b> may use GPUs, and cloud <b>3826</b>&#x2014;or at least a portion tasked with deep learning or inferencing&#x2014;may be executed using one or more AI systems <b>3824</b>. As such, although hardware <b>3722</b> is illustrated as discrete components, this is not intended to be limiting, and any components of hardware <b>3722</b> may be combined with, or leveraged by, any other components of hardware <b>3722</b>.</p><p id="p-0594" num="0571">In at least one embodiment, AI system <b>3824</b> may include a purpose-built computing system (e.g., a super-computer or an HPC) configured for inferencing, deep learning, machine learning, and/or other artificial intelligence tasks. In at least one embodiment, AI system <b>3824</b> (e.g., NVIDIA's DGX) may include GPU-optimized software (e.g., a software stack) that may be executed using a plurality of GPUs <b>3822</b>, in addition to CPUs, RAM, storage, and/or other components, features, or functionality. In at least one embodiment, one or more AI systems <b>3824</b> may be implemented in cloud <b>3826</b> (e.g., in a data center) for performing some or all of AI-based processing tasks of system <b>3800</b>.</p><p id="p-0595" num="0572">In at least one embodiment, cloud <b>3826</b> may include a GPU-accelerated infrastructure (e.g., NVIDIA's NGC) that may provide a GPU-optimized platform for executing processing tasks of system <b>3800</b>. In at least one embodiment, cloud <b>3826</b> may include an AI system(s) <b>3824</b> for performing one or more of AI-based tasks of system <b>3800</b> (e.g., as a hardware abstraction and scaling platform). In at least one embodiment, cloud <b>3826</b> may integrate with application orchestration system <b>3828</b> leveraging multiple GPUs to enable seamless scaling and load balancing between and among applications and services <b>3720</b>. In at least one embodiment, cloud <b>3826</b> may tasked with executing at least some of services <b>3720</b> of system <b>3800</b>, including compute services <b>3816</b>, AI services <b>3818</b>, and/or visualization services <b>3820</b>, as described herein. In at least one embodiment, cloud <b>3826</b> may perform small and large batch inference (e.g., executing NVIDIA's TENSOR RT), provide an accelerated parallel computing API and platform <b>3830</b> (e.g., NVIDIA's CUDA), execute application orchestration system <b>3828</b> (e.g., KUBERNETES), provide a graphics rendering API and platform (e.g., for ray-tracing, 2D graphics, 3D graphics, and/or other rendering techniques to produce higher quality cinematics), and/or may provide other functionality for system <b>3800</b>.</p><p id="p-0596" num="0573">In at least one embodiment, in an effort to preserve patient confidentiality (e.g., where patient data or records are to be used off-premises), cloud <b>3826</b> may include a registry&#x2014;such as a deep learning container registry. In at least one embodiment, a registry may store containers for instantiations of applications that may perform pre-processing, post-processing, or other processing tasks on patient data. In at least one embodiment, cloud <b>3826</b> may receive data that includes patient data as well as sensor data in containers, perform requested processing for just sensor data in those containers, and then forward a resultant output and/or visualizations to appropriate parties and/or devices (e.g., on-premises medical devices used for visualization or diagnoses), all without having to extract, store, or otherwise access patient data. In at least one embodiment, confidentiality of patient data is preserved in compliance with HIPAA and/or other data regulations.</p><p id="p-0597" num="0574">In at least one embodiment, system <b>3800</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, system <b>3800</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0598" num="0575"><figref idref="DRAWINGS">FIG. <b>39</b></figref> includes an example illustration of a deployment pipeline <b>3810</b>A for processing imaging data, in accordance with at least one embodiment. In at least one embodiment, system <b>3800</b>&#x2014;and specifically deployment system <b>3706</b>&#x2014;may be used to customize, update, and/or integrate deployment pipeline(s) <b>3810</b>A into one or more production environments. In at least one embodiment, deployment pipeline <b>3810</b>A of <figref idref="DRAWINGS">FIG. <b>39</b></figref> includes a non-limiting example of a deployment pipeline <b>3810</b>A that may be custom defined by a particular user (or team of users) at a facility (e.g., at a hospital, clinic, lab, research environment, etc.). In at least one embodiment, to define deployment pipelines <b>3810</b>A for a CT scanner <b>3902</b>, a user may select&#x2014;from a container registry, for example&#x2014;one or more applications that perform specific functions or tasks with respect to imaging data generated by CT scanner <b>3902</b>. In at least one embodiment, applications may be applied to deployment pipeline <b>3810</b>A as containers that may leverage services <b>3720</b> and/or hardware <b>3722</b> of system <b>3800</b>. In addition, deployment pipeline <b>3810</b>A may include additional processing tasks or applications that may be implemented to prepare data for use by applications (e.g., DICOM adapter <b>3802</b>B and DICOM reader <b>3906</b> may be used in deployment pipeline <b>3810</b>A to prepare data for use by CT reconstruction <b>3908</b>, organ segmentation <b>3910</b>, etc.). In at least one embodiment, deployment pipeline <b>3810</b>A may be customized or selected for consistent deployment, one time use, or for another frequency or interval. In at least one embodiment, a user may desire to have CT reconstruction <b>3908</b> and organ segmentation <b>3910</b> for several subjects over a specific interval, and thus may deploy pipeline <b>3810</b>A for that period of time. In at least one embodiment, a user may select, for each request from system <b>3800</b>, applications that a user wants to perform processing on that data for that request. In at least one embodiment, deployment pipeline <b>3810</b>A may be adjusted at any interval and, because of adaptability and scalability of a container structure within system <b>3800</b>, this may be a seamless process.</p><p id="p-0599" num="0576">In at least one embodiment, deployment pipeline <b>3810</b>A of <figref idref="DRAWINGS">FIG. <b>39</b></figref> may include CT scanner <b>3902</b> generating imaging data of a patient or subject. In at least one embodiment, imaging data from CT scanner <b>3902</b> may be stored on a PACS server(s) <b>3904</b> associated with a facility housing CT scanner <b>3902</b>. In at least one embodiment, PACS server(s) <b>3904</b> may include software and/or hardware components that may directly interface with imaging modalities (e.g., CT scanner <b>3902</b>) at a facility. In at least one embodiment, DICOM adapter <b>3802</b>B may enable sending and receipt of DICOM objects using DICOM protocols. In at least one embodiment, DICOM adapter <b>3802</b>B may aid in preparation or configuration of DICOM data from PACS server(s) <b>3904</b> for use by deployment pipeline <b>3810</b>A. In at least one embodiment, once DICOM data is processed through DICOM adapter <b>3802</b>B, pipeline manager <b>3812</b> may route data through to deployment pipeline <b>3810</b>A. In at least one embodiment, DICOM reader <b>3906</b> may extract image files and any associated metadata from DICOM data (e.g., raw sinogram data, as illustrated in visualization <b>3916</b>A). In at least one embodiment, working files that are extracted may be stored in a cache for faster processing by other applications in deployment pipeline <b>3810</b>A. In at least one embodiment, once DICOM reader <b>3906</b> has finished extracting and/or storing data, a signal of completion may be communicated to pipeline manager <b>3812</b>. In at least one embodiment, pipeline manager <b>3812</b> may then initiate or call upon one or more other applications or containers in deployment pipeline <b>3810</b>A.</p><p id="p-0600" num="0577">In at least one embodiment, CT reconstruction <b>3908</b> application and/or container may be executed once data (e.g., raw sinogram data) is available for processing by CT reconstruction <b>3908</b> application. In at least one embodiment, CT reconstruction <b>3908</b> may read raw sinogram data from a cache, reconstruct an image file out of raw sinogram data (e.g., as illustrated in visualization <b>3916</b>B), and store resulting image file in a cache. In at least one embodiment, at completion of reconstruction, pipeline manager <b>3812</b> may be signaled that reconstruction task is complete. In at least one embodiment, once reconstruction is complete, and a reconstructed image file may be stored in a cache (or other storage device), organ segmentation <b>3910</b> application and/or container may be triggered by pipeline manager <b>3812</b>. In at least one embodiment, organ segmentation <b>3910</b> application and/or container may read an image file from a cache, normalize or convert an image file to format suitable for inference (e.g., convert an image file to an input resolution of a machine learning model), and run inference against a normalized image. In at least one embodiment, to run inference on a normalized image, organ segmentation <b>3910</b> application and/or container may rely on services <b>3720</b>, and pipeline manager <b>3812</b> and/or application orchestration system <b>3828</b> may facilitate use of services <b>3720</b> by organ segmentation <b>3910</b> application and/or container. In at least one embodiment, for example, organ segmentation <b>3910</b> application and/or container may leverage AI services <b>3818</b> to perform inference on a normalized image, and AI services <b>3818</b> may leverage hardware <b>3722</b> (e.g., AI system <b>3824</b>) to execute AI services <b>3818</b>. In at least one embodiment, a result of an inference may be a mask file (e.g., as illustrated in visualization <b>3916</b>C) that may be stored in a cache (or other storage device).</p><p id="p-0601" num="0578">In at least one embodiment, once applications that process DICOM data and/or data extracted from DICOM data have completed processing, a signal may be generated for pipeline manager <b>3812</b>. In at least one embodiment, pipeline manager <b>3812</b> may then execute DICOM writer <b>3912</b> to read results from a cache (or other storage device), package results into a DICOM format (e.g., as DICOM output <b>3914</b>) for use by users at a facility who generated a request. In at least one embodiment, DICOM output <b>3914</b> may then be transmitted to DICOM adapter <b>3802</b>B to prepare DICOM output <b>3914</b> for storage on PACS server(s) <b>3904</b> (e.g., for viewing by a DICOM viewer at a facility). In at least one embodiment, in response to a request for reconstruction and segmentation, visualizations <b>3916</b>B and <b>3916</b>C may be generated and available to a user for diagnoses, research, and/or for other purposes.</p><p id="p-0602" num="0579">Although illustrated as consecutive application in deployment pipeline <b>3810</b>A, CT reconstruction <b>3908</b> and organ segmentation <b>3910</b> applications may be processed in parallel in at least one embodiment. In at least one embodiment, where applications do not have dependencies on one another, and data is available for each application (e.g., after DICOM reader <b>3906</b> extracts data), applications may be executed at a same time, substantially at a same time, or with some overlap. In at least one embodiment, where two or more applications require similar services <b>3720</b>, a scheduler of system <b>3800</b> may be used to load balance and distribute compute or processing resources between and among various applications. In at least one embodiment, in some embodiments, parallel computing platform <b>3830</b> may be used to perform parallel processing for applications to decrease run-time of deployment pipeline <b>3810</b>A to provide real-time results.</p><p id="p-0603" num="0580">In at least one embodiment, and with reference to <figref idref="DRAWINGS">FIGS. <b>40</b>A-<b>40</b>B</figref>, deployment system <b>3706</b> may be implemented as one or more virtual instruments to perform different functionalities&#x2014;such as image processing, segmentation, enhancement, AI, visualization, and inferencing&#x2014;with imaging devices (e.g., CT scanners, X-ray machines, Mill machines, etc.), sequencing devices, genomics devices, and/or other device types. In at least one embodiment, system <b>3800</b> may allow for creation and provision of virtual instruments that may include a software-defined deployment pipeline <b>3810</b> that may receive raw/unprocessed input data generated by a device(s) and output processed/reconstructed data. In at least one embodiment, deployment pipelines <b>3810</b> (e.g., <b>3810</b>A and <b>3810</b>B) that represent virtual instruments may implement intelligence into a pipeline, such as by leveraging machine learning models, to provide containerized inference support to a system. In at least one embodiment, virtual instruments may execute any number of containers each including instantiations of applications. In at least one embodiment, such as where real-time processing is desired, deployment pipelines <b>3810</b> representing virtual instruments may be static (e.g., containers and/or applications may be set), while in other examples, container and/or applications for virtual instruments may be selected (e.g., on a per-request basis) from a pool of applications or resources (e.g., within a container registry).</p><p id="p-0604" num="0581">In at least one embodiment, system <b>3800</b> may be instantiated or executed as one or more virtual instruments on-premise at a facility in, for example, a computing system deployed next to or otherwise in communication with a radiology machine, an imaging device, and/or another device type at a facility. In at least one embodiment, however, an on-premise installation may be instantiated or executed within a computing system of a device itself (e.g., a computing system integral to an imaging device), in a local datacenter (e.g., a datacenter on-premise), and/or in a cloud-environment (e.g., in cloud <b>3826</b>). In at least one embodiment, deployment system <b>3706</b>, operating as a virtual instrument, may be instantiated by a supercomputer or other HPC system in some examples. In at least one embodiment, on-premise installation may allow for high-bandwidth uses (via, for example, higher throughput local communication interfaces, such as RF over Ethernet) for real-time processing. In at least one embodiment, real-time or near real-time processing may be particularly useful where a virtual instrument supports an ultrasound device or other imaging modality where immediate visualizations are expected or required for accurate diagnoses and analyses. In at least one embodiment, a cloud-computing architecture may be capable of dynamic bursting to a cloud computing service provider, or other compute cluster, when local demand exceeds on-premise capacity or capability. In at least one embodiment, a cloud architecture, when implemented, may be tuned for training neural networks or other machine learning models, as described herein with respect to training system <b>3704</b>. In at least one embodiment, with training pipelines in place, machine learning models may be continuously learn and improve as they process additional data from devices they support. In at least one embodiment, virtual instruments may be continually improved using additional data, new data, existing machine learning models, and/or new or updated machine learning models.</p><p id="p-0605" num="0582">In at least one embodiment, a computing system may include some or all of hardware <b>3722</b> described herein, and hardware <b>3722</b> may be distributed in any of a number of ways including within a device, as part of a computing device coupled to and located proximate a device, in a local datacenter at a facility, and/or in cloud <b>3826</b>. In at least one embodiment, because deployment system <b>3706</b> and associated applications or containers are created in software (e.g., as discrete containerized instantiations of applications), behavior, operation, and configuration of virtual instruments, as well as outputs generated by virtual instruments, may be modified or customized as desired, without having to change or alter raw output of a device that a virtual instrument supports.</p><p id="p-0606" num="0583">In at least one embodiment, system <b>3800</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, system <b>3800</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0607" num="0584"><figref idref="DRAWINGS">FIG. <b>40</b>A</figref> includes an example data flow diagram of a virtual instrument supporting an ultrasound device, in accordance with at least one embodiment. In at least one embodiment, deployment pipeline <b>3810</b>B may leverage one or more of services <b>3720</b> of system <b>3800</b>. In at least one embodiment, deployment pipeline <b>3810</b>B and services <b>3720</b> may leverage hardware <b>3722</b> of a system either locally or in cloud <b>3826</b>. In at least one embodiment, although not illustrated, process <b>4000</b> may be facilitated by pipeline manager <b>3812</b>, application orchestration system <b>3828</b>, and/or parallel computing platform <b>3830</b>.</p><p id="p-0608" num="0585">In at least one embodiment, process <b>4000</b> may include receipt of imaging data from an ultrasound device <b>4002</b>. In at least one embodiment, imaging data may be stored on PACS server(s) in a DICOM format (or other format, such as RIS, CIS, REST compliant, RPC, raw, etc.), and may be received by system <b>3800</b> for processing through deployment pipeline <b>3810</b> selected or customized as a virtual instrument (e.g., a virtual ultrasound) for ultrasound device <b>4002</b>. In at least one embodiment, imaging data may be received directly from an imaging device (e.g., ultrasound device <b>4002</b>) and processed by a virtual instrument. In at least one embodiment, a transducer or other signal converter communicatively coupled between an imaging device and a virtual instrument may convert signal data generated by an imaging device to image data that may be processed by a virtual instrument. In at least one embodiment, raw data and/or image data may be applied to DICOM reader <b>3906</b> to extract data for use by applications or containers of deployment pipeline <b>3810</b>B. In at least one embodiment, DICOM reader <b>3906</b> may leverage data augmentation library <b>4014</b> (e.g., NVIDIA's DALI) as a service <b>3720</b> (e.g., as one of compute service(s) <b>3816</b>) for extracting, resizing, rescaling, and/or otherwise preparing data for use by applications or containers.</p><p id="p-0609" num="0586">In at least one embodiment, once data is prepared, a reconstruction <b>4006</b> application and/or container may be executed to reconstruct data from ultrasound device <b>4002</b> into an image file. In at least one embodiment, after reconstruction <b>4006</b>, or at a same time as reconstruction <b>4006</b>, a detection <b>4008</b> application and/or container may be executed for anomaly detection, object detection, feature detection, and/or other detection tasks related to data. In at least one embodiment, an image file generated during reconstruction <b>4006</b> may be used during detection <b>4008</b> to identify anomalies, objects, features, etc. In at least one embodiment, detection <b>4008</b> application may leverage an inference engine <b>4016</b> (e.g., as one of AI service(s) <b>3818</b>) to perform inference on data to generate detections. In at least one embodiment, one or more machine learning models (e.g., from training system <b>3704</b>) may be executed or called by detection <b>4008</b> application.</p><p id="p-0610" num="0587">In at least one embodiment, once reconstruction <b>4006</b> and/or detection <b>4008</b> is/are complete, data output from these application and/or containers may be used to generate visualizations <b>4010</b>, such as visualization <b>4012</b> (e.g., a grayscale output) displayed on a workstation or display terminal. In at least one embodiment, visualization may allow a technician or other user to visualize results of deployment pipeline <b>3810</b>B with respect to ultrasound device <b>4002</b>. In at least one embodiment, visualization <b>4010</b> may be executed by leveraging a render component <b>4018</b> of system <b>3800</b> (e.g., one of visualization service(s) <b>3820</b>). In at least one embodiment, render component <b>4018</b> may execute a 2D, OpenGL, or ray-tracing service to generate visualization <b>4012</b>.</p><p id="p-0611" num="0588">In at least one embodiment, process <b>4000</b> may include a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, process <b>4000</b> can include one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0612" num="0589"><figref idref="DRAWINGS">FIG. <b>40</b>B</figref> includes an example data flow diagram of a virtual instrument supporting a CT scanner, in accordance with at least one embodiment. In at least one embodiment, deployment pipeline <b>3810</b>C may leverage one or more of services <b>3720</b> of system <b>3800</b>. In at least one embodiment, deployment pipeline <b>3810</b>C and services <b>3720</b> may leverage hardware <b>3722</b> of a system either locally or in cloud <b>3826</b>. In at least one embodiment, although not illustrated, process <b>4020</b> may be facilitated by pipeline manager <b>3812</b>, application orchestration system <b>3828</b>, and/or parallel computing platform <b>3830</b>.</p><p id="p-0613" num="0590">In at least one embodiment, process <b>4020</b> may include CT scanner <b>4022</b> generating raw data that may be received by DICOM reader <b>3906</b> (e.g., directly, via a PACS server <b>3904</b>, after processing, etc.). In at least one embodiment, a Virtual CT (instantiated by deployment pipeline <b>3810</b>C) may include a first, real-time pipeline for monitoring a patient (e.g., patient movement detection AI <b>4026</b>) and/or for adjusting or optimizing exposure of CT scanner <b>4022</b> (e.g., using exposure control AI <b>4024</b>). In at least one embodiment, one or more of applications (e.g., <b>4024</b> and <b>4026</b>) may leverage a service <b>3720</b>, such as AI service(s) <b>3818</b>. In at least one embodiment, outputs of exposure control AI <b>4024</b> application (or container) and/or patient movement detection AI <b>4026</b> application (or container) may be used as feedback to CT scanner <b>4022</b> and/or a technician for adjusting exposure (or other settings of CT scanner <b>4022</b>) and/or informing a patient to move less.</p><p id="p-0614" num="0591">In at least one embodiment, deployment pipeline <b>3810</b>C may include a non-real-time pipeline for analyzing data generated by CT scanner <b>4022</b>. In at least one embodiment, a second pipeline may include CT reconstruction <b>3908</b> application and/or container, a coarse detection AI <b>4028</b> application and/or container, a fine detection AI <b>4032</b> application and/or container (e.g., where certain results are detected by coarse detection AI <b>4028</b>), a visualization <b>4030</b> application and/or container, and a DICOM writer <b>3912</b> (and/or other data type writer, such as RIS, CIS, REST compliant, RPC, raw, etc.) application and/or container. In at least one embodiment, raw data generated by CT scanner <b>4022</b> may be passed through pipelines of deployment pipeline <b>3810</b>C (instantiated as a virtual CT instrument) to generate results. In at least one embodiment, results from DICOM writer <b>3912</b> may be transmitted for display and/or may be stored on PACS server(s) <b>3904</b> for later retrieval, analysis, or display by a technician, practitioner, or other user.</p><p id="p-0615" num="0592"><figref idref="DRAWINGS">FIG. <b>41</b>A</figref> illustrates a data flow diagram for a process <b>4100</b> to train, retrain, or update a machine learning model, in accordance with at least one embodiment. In at least one embodiment, process <b>4100</b> may be executed using, as a non-limiting example, system <b>3800</b> of <figref idref="DRAWINGS">FIG. <b>38</b></figref>. In at least one embodiment, process <b>4100</b> may leverage services <b>3720</b> and/or hardware <b>3722</b> of system <b>3800</b>, as described herein. In at least one embodiment, refined models <b>4112</b> generated by process <b>4100</b> may be executed by deployment system <b>3706</b> for one or more containerized applications in deployment pipelines <b>3810</b>.</p><p id="p-0616" num="0593">In at least one embodiment, model training <b>3714</b> may include retraining or updating an initial model <b>4104</b> (e.g., a pre-trained model) using new training data (e.g., new input data, such as customer dataset <b>4106</b>, and/or new ground truth data associated with input data). In at least one embodiment, to retrain, or update, initial model <b>4104</b>, output or loss layer(s) of initial model <b>4104</b> may be reset, or deleted, and/or replaced with an updated or new output or loss layer(s). In at least one embodiment, initial model <b>4104</b> may have previously fine-tuned parameters (e.g., weights and/or biases) that remain from prior training, so training or retraining <b>3714</b> may not take as long or require as much processing as training a model from scratch. In at least one embodiment, during model training <b>3714</b>, by having reset or replaced output or loss layer(s) of initial model <b>4104</b>, parameters may be updated and re-tuned for a new data set based on loss calculations associated with accuracy of output or loss layer(s) at generating predictions on new, customer dataset <b>4106</b> (e.g., image data <b>3708</b> of <figref idref="DRAWINGS">FIG. <b>37</b></figref>).</p><p id="p-0617" num="0594">In at least one embodiment, pre-trained models <b>3806</b> may be stored in a data store, or registry (e.g., model registry <b>3724</b> of <figref idref="DRAWINGS">FIG. <b>37</b></figref>). In at least one embodiment, pre-trained models <b>3806</b> may have been trained, at least in part, at one or more facilities other than a facility executing process <b>4100</b>. In at least one embodiment, to protect privacy and rights of patients, subjects, or clients of different facilities, pre-trained models <b>3806</b> may have been trained, on-premise, using customer or patient data generated on-premise. In at least one embodiment, pre-trained models <b>3806</b> may be trained using cloud <b>3826</b> and/or other hardware <b>3722</b>, but confidential, privacy protected patient data may not be transferred to, used by, or accessible to any components of cloud <b>3826</b> (or other off premise hardware). In at least one embodiment, where a pre-trained model <b>3806</b> is trained at using patient data from more than one facility, pre-trained model <b>3806</b> may have been individually trained for each facility prior to being trained on patient or customer data from another facility. In at least one embodiment, such as where a customer or patient data has been released of privacy concerns (e.g., by waiver, for experimental use, etc.), or where a customer or patient data is included in a public data set, a customer or patient data from any number of facilities may be used to train pre-trained model <b>3806</b> on-premise and/or off premise, such as in a datacenter or other cloud computing infrastructure.</p><p id="p-0618" num="0595">In at least one embodiment, when selecting applications for use in deployment pipelines <b>3810</b>, a user may also select machine learning models to be used for specific applications. In at least one embodiment, a user may not have a model for use, so a user may select a pre-trained model <b>3806</b> to use with an application. In at least one embodiment, pre-trained model <b>3806</b> may not be optimized for generating accurate results on customer dataset <b>4106</b> of a facility of a user (e.g., based on patient diversity, demographics, types of medical imaging devices used, etc.). In at least one embodiment, prior to deploying pre-trained model <b>3806</b> into deployment pipeline <b>3810</b> for use with an application(s), pre-trained model <b>3806</b> may be updated, retrained, and/or fine-tuned for use at a respective facility.</p><p id="p-0619" num="0596">In at least one embodiment, a user may select pre-trained model <b>3806</b> that is to be updated, retrained, and/or fine-tuned, and pre-trained model <b>3806</b> may be referred to as initial model <b>4104</b> for training system <b>3704</b> within process <b>4100</b>. In at least one embodiment, customer dataset <b>4106</b> (e.g., imaging data, genomics data, sequencing data, or other data types generated by devices at a facility) may be used to perform model training <b>3714</b> (which may include, without limitation, transfer learning) on initial model <b>4104</b> to generate refined model <b>4112</b>. In at least one embodiment, ground truth data corresponding to customer dataset <b>4106</b> may be generated by training system <b>3704</b>. In at least one embodiment, ground truth data may be generated, at least in part, by clinicians, scientists, doctors, practitioners, at a facility (e.g., as labeled clinic data <b>3712</b> of <figref idref="DRAWINGS">FIG. <b>37</b></figref>).</p><p id="p-0620" num="0597">In at least one embodiment, AI-assisted annotation <b>3710</b> may be used in some examples to generate ground truth data. In at least one embodiment, AI-assisted annotation <b>3710</b> (e.g., implemented using an AI-assisted annotation SDK) may leverage machine learning models (e.g., neural networks) to generate suggested or predicted ground truth data for a customer dataset. In at least one embodiment, user <b>4110</b> may use annotation tools within a user interface (a graphical user interface (GUI)) on computing device <b>4108</b>.</p><p id="p-0621" num="0598">In at least one embodiment, user <b>4110</b> may interact with a GUI via computing device <b>4108</b> to edit or fine-tune annotations or auto-annotations. In at least one embodiment, a polygon editing feature may be used to move vertices of a polygon to more accurate or fine-tuned locations.</p><p id="p-0622" num="0599">In at least one embodiment, once customer dataset <b>4106</b> has associated ground truth data, ground truth data (e.g., from AI-assisted annotation, manual labeling, etc.) may be used by during model training <b>3714</b> to generate refined model <b>4112</b>. In at least one embodiment, customer dataset <b>4106</b> may be applied to initial model <b>4104</b> any number of times, and ground truth data may be used to update parameters of initial model <b>4104</b> until an acceptable level of accuracy is attained for refined model <b>4112</b>. In at least one embodiment, once refined model <b>4112</b> is generated, refined model <b>4112</b> may be deployed within one or more deployment pipelines <b>3810</b> at a facility for performing one or more processing tasks with respect to medical imaging data.</p><p id="p-0623" num="0600">In at least one embodiment, refined model <b>4112</b> may be uploaded to pre-trained models <b>3806</b> in model registry <b>3724</b> to be selected by another facility. In at least one embodiment, his process may be completed at any number of facilities such that refined model <b>4112</b> may be further refined on new datasets any number of times to generate a more universal model.</p><p id="p-0624" num="0601">In at least one embodiment, process <b>4100</b> can be used to train an object detection neural network using one or more generative adversarial networks. In at least one embodiment, process <b>4100</b> train one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0625" num="0602"><figref idref="DRAWINGS">FIG. <b>41</b>B</figref> is an example illustration of a client-server architecture <b>4132</b> to enhance annotation tools with pre-trained annotation models, in accordance with at least one embodiment. In at least one embodiment, AI-assisted annotation tools <b>4136</b> may be instantiated based on a client-server architecture <b>4132</b>. In at least one embodiment, annotation tools <b>4136</b> in imaging applications may aid radiologists, for example, identify organs and abnormalities. In at least one embodiment, imaging applications may include software tools that help user <b>4110</b> to identify, as a non-limiting example, a few extreme points on a particular organ of interest in raw images <b>4134</b> (e.g., in a 3D MM or CT scan) and receive auto-annotated results for all 2D slices of a particular organ. In at least one embodiment, results may be stored in a data store as training data <b>4138</b> and used as (for example and without limitation) ground truth data for training. In at least one embodiment, when computing device <b>4108</b> sends extreme points for AI-assisted annotation <b>3710</b>, a deep learning model, for example, may receive this data as input and return inference results of a segmented organ or abnormality. In at least one embodiment, pre-instantiated annotation tools, such as AI-Assisted Annotation Tool <b>4136</b>B in <figref idref="DRAWINGS">FIG. <b>41</b>B</figref>, may be enhanced by making API calls (e.g., API Call <b>4144</b>) to a server, such as an Annotation Assistant Server <b>4140</b> that may include a set of pre-trained models <b>4142</b> stored in an annotation model registry, for example. In at least one embodiment, an annotation model registry may store pre-trained models <b>4142</b> (e.g., machine learning models, such as deep learning models) that are pre-trained to perform AI-assisted annotation on a particular organ or abnormality. In at least one embodiment, these models may be further updated by using training pipelines <b>3804</b>. In at least one embodiment, pre-installed annotation tools may be improved over time as new labeled clinic data <b>3712</b> is added.</p><p id="p-0626" num="0603">Inference and/or training logic <b>815</b> are used to perform inferencing and/or training operations associated with one or more embodiments. Details regarding inference and/or training logic <b>815</b> are provided herein in conjunction with <figref idref="DRAWINGS">FIGS. <b>8</b>A and/or <b>8</b>B</figref>.</p><p id="p-0627" num="0604">In at least one embodiment, computing device <b>4108</b> can be used as part of a system that trains an object detection neural network using one or more generative adversarial networks. In at least one embodiment, computing device <b>4108</b> can be used to implement one or more neural networks that are part of object detection neural network or generative adversarial networks. In at least one embodiment, a generative adversarial network takes an object location and pose as input and generates an image used to train object detection neural network. In at least one embodiment, a loss is determined based at least in part on a difference between output of object detection neural network and an a specified object location and pose.</p><p id="p-0628" num="0605">At least one embodiment of the disclosure can be described in view of the following clauses:</p><p id="p-0629" num="0606">1. A processor comprising: one or more circuits to train an object detection neural network using one or more neural networks.</p><p id="p-0630" num="0607">2. The processor of clause 1, wherein the one or more neural networks is controlled by an input that specifies a location of an object to add to an image, and the image is used to train the object detection neural network.</p><p id="p-0631" num="0608">3. The processor of clause 1 or 2, wherein the one or more neural networks includes a first network that generates a representation of an object, the one or more neural networks includes a second network that generates a background image, and a combination of the background image and the representation of the object is used to train the object detection neural network.</p><p id="p-0632" num="0609">4. The processor of any of clauses 1 to 3, wherein the one or more neural networks are trained using unlabeled two-dimensional images.</p><p id="p-0633" num="0610">5. The processor of any of clauses 1 to 4, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</p><p id="p-0634" num="0611">6. The processor of clause 5, wherein the output is a first location of an object detected by the object detection neural network, the input is a second location identifies where to generate the object in an image, and the image is provided to the object detection neural network.</p><p id="p-0635" num="0612">7. The processor of any of clauses 1 to 6, wherein a pose of an object to be placed in a generated image is provided to the one or more neural networks.</p><p id="p-0636" num="0613">8. The processor of any of clauses 1 to 7, wherein the one or neural networks are trained using a foreground appearance loss, a background appearance loss, and a multi-scale object synthesis loss generated by a set of discriminative networks.</p><p id="p-0637" num="0614">9. The processor of any of clauses 1 to 8, wherein the one or more neural networks are trained using a loss from the object detection network.</p><p id="p-0638" num="0615">10. The processor of any of clauses 1 to 9, wherein the one or more neural networks are adapted to a target domain.</p><p id="p-0639" num="0616">11. A computer-implemented method, comprising training an object detection neural network using one or more neural networks.</p><p id="p-0640" num="0617">12. The computer-implemented method of clause 11, wherein the one or more neural networks is controlled by an input that specifies a location of an object to add to an image, and the image is used to train the object detection neural network.</p><p id="p-0641" num="0618">13. The computer-implemented method of clause 11 or 12, wherein the one or more neural networks includes a first network that generates a representation of an object, the one or more neural networks includes a second network that generates a background image, and the background image and the representation of the object are combined to an image that is used to train the object detection neural network.</p><p id="p-0642" num="0619">14. The computer-implemented method of any of clauses 11 to 13, wherein the one or more neural networks are trained using two-dimensional images.</p><p id="p-0643" num="0620">15. The computer-implemented method of any of clauses 11 to 14, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</p><p id="p-0644" num="0621">16. The computer-implemented method of clause 15, wherein the output is a first location of an object detected by the object detection neural network, the input is a second location identifies where to generate the object in an image, and the image is provided to the object detection neural network.</p><p id="p-0645" num="0622">17. The computer-implemented method of any of clauses 11 to 16, wherein a pose of an object to be placed in a generated image is provided to the one or more neural networks.</p><p id="p-0646" num="0623">18. The computer-implemented method of any of clauses 11 to 17, wherein the one or more neural networks are trained using a foreground appearance loss and a background appearance loss generated by a set of discriminative networks.</p><p id="p-0647" num="0624">19. The computer-implemented method of any of clauses 11 to 18, wherein the one or more neural networks are trained using a loss from the object detection network.</p><p id="p-0648" num="0625">20. The computer-implemented method of any of clauses 11 to 19, wherein the one or more neural networks are adapted to a target domain.</p><p id="p-0649" num="0626">21. A computer system comprising one or more processors and memory storing executable instructions that, as a result of being executed by the one or more processors, train an object detection neural network using one or more neural networks.</p><p id="p-0650" num="0627">22. The computer system of clause 21, wherein the one or more neural networks is controlled by an input that specifies a location of an object to add to an image, and the image is used to train the object detection neural network.</p><p id="p-0651" num="0628">23. The computer system of clause 21 or 22, wherein the one or more neural networks includes a first network that generates a representation of an object, the one or more neural networks includes a second network that generates a background image, and the background image and the representation of the object are combined to an image that is used to train the object detection neural network.</p><p id="p-0652" num="0629">24. The computer system of any of clauses 21 to 23, wherein the one or more neural networks are trained using two-dimensional images.</p><p id="p-0653" num="0630">25. The computer system of any of clauses 21 to 24, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</p><p id="p-0654" num="0631">26. The computer system of clause 25, wherein, the output is a first location of an object detected by the object detection neural network, the input is a second location identifies where to generate the object in an image, and the image is provided to the object detection neural network.</p><p id="p-0655" num="0632">27. The computer system of any of clauses 21 to 26, wherein the one or more neural networks is trained using a scene loss generated by a scene discriminator.</p><p id="p-0656" num="0633">28. The computer system of any of clauses 21 to 27, wherein the one or more neural networks are trained using a foreground appearance loss and a background appearance loss generated by a set of discriminative networks.</p><p id="p-0657" num="0634">29. The computer system of any of clauses 21 to 28, wherein the one or more neural networks are trained using a loss from the object detection network.</p><p id="p-0658" num="0635">30. The computer system of any of clauses 21 to 29, wherein the one or more neural networks are adapted to a target domain.</p><p id="p-0659" num="0636">31. A machine-readable medium having stored thereon a set of instructions, which if performed by one or more processors, cause the one or more processors to at least train an object detection neural network using one or more neural networks.</p><p id="p-0660" num="0637">32. The machine-readable medium of clause 31, wherein the one or more neural networks is controlled by an input that specifies a location of an object to add to an image, and the image is used to train the object detection neural network.</p><p id="p-0661" num="0638">33. The machine-readable medium of claim <b>31</b>, wherein the one or more neural networks includes a first network that generates a representation of an object, the one or more neural networks includes a second network that generates a background image, and the background image and the representation of the object are combined to an image that is used to train the object detection neural network.</p><p id="p-0662" num="0639">34. The machine-readable medium of clause 31 or 32, wherein the one or more neural networks are trained using two-dimensional images.</p><p id="p-0663" num="0640">35. The machine-readable medium of any of clauses 31 to 34, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</p><p id="p-0664" num="0641">36. The machine-readable medium of clause 35, wherein the output is a first location of an object detected by the object detection neural network, the input is a second location identifies where to generate the object in an image, and the image is provided to the object detection neural network.</p><p id="p-0665" num="0642">37. The machine-readable medium of any of clauses 31 to 36, wherein a pose of an object to be placed in a generated image is provided to the one or more neural networks.</p><p id="p-0666" num="0643">38. The machine-readable medium of any of clauses 31 to 37, wherein the one or more neural networks are trained using a foreground appearance loss and a background appearance loss generated by a set of discriminative networks.</p><p id="p-0667" num="0644">39. The machine-readable medium of any of clauses 31 to 38, wherein the one or more neural networks includes a controllable synthesis network.</p><p id="p-0668" num="0645">40. The machine-readable medium of any of clauses 31 to 39, wherein the one or more neural networks are adapted to a target domain.</p><p id="p-0669" num="0646">In at least one embodiment, a single semiconductor platform may refer to a sole unitary semiconductor-based integrated circuit or chip. In at least one embodiment, multi-chip modules may be used with increased connectivity which simulate on-chip operation, and make substantial improvements over utilizing a conventional central processing unit (&#x201c;CPU&#x201d;) and bus implementation. In at least one embodiment, various modules may also be situated separately or in various combinations of semiconductor platforms per desires of user.</p><p id="p-0670" num="0647">In at least one embodiment, referring back to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, computer programs in form of machine-readable executable code or computer control logic algorithms are stored in main memory <b>1404</b> and/or secondary storage. Computer programs, if executed by one or more processors, enable system <b>1400</b> to perform various functions in accordance with at least one embodiment. In at least one embodiment, memory <b>1404</b>, storage, and/or any other storage are possible examples of computer-readable media. In at least one embodiment, secondary storage may refer to any suitable storage device or system such as a hard disk drive and/or a removable storage drive, representing a floppy disk drive, a magnetic tape drive, a compact disk drive, digital versatile disk (&#x201c;DVD&#x201d;) drive, recording device, universal serial bus (&#x201c;USB&#x201d;) flash memory, etc. In at least one embodiment, architecture and/or functionality of various previous figures are implemented in context of CPU <b>1402</b>, parallel processing system <b>1412</b>, an integrated circuit capable of at least a portion of capabilities of both CPU <b>1402</b>, parallel processing system <b>1412</b>, a chipset (e.g., a group of integrated circuits designed to work and sold as a unit for performing related functions, etc.), and/or any suitable combination of integrated circuit(s).</p><p id="p-0671" num="0648">In at least one embodiment, architecture and/or functionality of various previous figures are implemented in context of a general computer system, a circuit board system, a game console system dedicated for entertainment purposes, an application-specific system, and more. In at least one embodiment, computer system <b>1400</b> may take form of a desktop computer, a laptop computer, a tablet computer, servers, supercomputers, a smart-phone (e.g., a wireless, hand-held device), personal digital assistant (&#x201c;PDA&#x201d;), a digital camera, a vehicle, a head mounted display, a hand-held electronic device, a mobile phone device, a television, workstation, game consoles, embedded system, and/or any other type of logic.</p><p id="p-0672" num="0649">In at least one embodiment, parallel processing system <b>1412</b> includes, without limitation, a plurality of parallel processing units (&#x201c;PPUs&#x201d;) <b>1414</b> and associated memories <b>1416</b>. In at least one embodiment, PPUs <b>1414</b> are connected to a host processor or other peripheral devices via an interconnect <b>1418</b> and a switch <b>1420</b> or multiplexer. In at least one embodiment, parallel processing system <b>1412</b> distributes computational tasks across PPUs <b>1414</b> which can be parallelizable&#x2014;for example, as part of distribution of computational tasks across multiple graphics processing unit (&#x201c;GPU&#x201d;) thread blocks. In at least one embodiment, memory is shared and accessible (e.g., for read and/or write access) across some or all of PPUs <b>1414</b>, although such shared memory may incur performance penalties relative to use of local memory and registers resident to a PPU <b>1414</b>. In at least one embodiment, operation of PPUs <b>1414</b> is synchronized through use of a command such as _syncthreads( ), wherein all threads in a block (e.g., executed across multiple PPUs <b>1414</b>) to reach a certain point of execution of code before proceeding.</p><p id="p-0673" num="0650">Other variations are within spirit of present disclosure. Thus, while disclosed techniques are susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in drawings and have been described above in detail. It should be understood, however, that there is no intention to limit disclosure to specific form or forms disclosed, but on contrary, intention is to cover all modifications, alternative constructions, and equivalents falling within spirit and scope of disclosure, as defined in appended claims.</p><p id="p-0674" num="0651">Use of terms &#x201c;a&#x201d; and &#x201c;an&#x201d; and &#x201c;the&#x201d; and similar referents in context of describing disclosed embodiments (especially in context of following claims) are to be construed to cover both singular and plural, unless otherwise indicated herein or clearly contradicted by context, and not as a definition of a term. Terms &#x201c;comprising,&#x201d; &#x201c;having,&#x201d; &#x201c;including,&#x201d; and &#x201c;containing&#x201d; are to be construed as open-ended terms (meaning &#x201c;including, but not limited to,&#x201d;) unless otherwise noted. &#x201c;Connected,&#x201d; when unmodified and referring to physical connections, is to be construed as partly or wholly contained within, attached to, or joined together, even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within range, unless otherwise indicated herein and each separate value is incorporated into specification as if it were individually recited herein. In at least one embodiment, use of term &#x201c;set&#x201d; (e.g., &#x201c;a set of items&#x201d;) or &#x201c;subset&#x201d; unless otherwise noted or contradicted by context, is to be construed as a nonempty collection comprising one or more members. Further, unless otherwise noted or contradicted by context, term &#x201c;subset&#x201d; of a corresponding set does not necessarily denote a proper subset of corresponding set, but subset and corresponding set may be equal.</p><p id="p-0675" num="0652">Conjunctive language, such as phrases of form &#x201c;at least one of A, B, and C,&#x201d; or &#x201c;at least one of A, B and C,&#x201d; unless specifically stated otherwise or otherwise clearly contradicted by context, is otherwise understood with context as used in general to present that an item, term, etc., may be either A or B or C, or any nonempty subset of set of A and B and C. For instance, in illustrative example of a set having three members, conjunctive phrases &#x201c;at least one of A, B, and C&#x201d; and &#x201c;at least one of A, B and C&#x201d; refer to any of following sets: {A}, {B}, {C}, {A, B}, {A, C}, {B, C}, {A, B, C}. Thus, such conjunctive language is not generally intended to imply that certain embodiments require at least one of A, at least one of B and at least one of C each to be present. In addition, unless otherwise noted or contradicted by context, term &#x201c;plurality&#x201d; indicates a state of being plural (e.g., &#x201c;a plurality of items&#x201d; indicates multiple items). In at least one embodiment, number of items in a plurality is at least two, but can be more when so indicated either explicitly or by context. Further, unless stated otherwise or otherwise clear from context, phrase &#x201c;based on&#x201d; means &#x201c;based at least in part on&#x201d; and not &#x201c;based solely on.&#x201d;</p><p id="p-0676" num="0653">Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. In at least one embodiment, a process such as those processes described herein (or variations and/or combinations thereof) is performed under control of one or more computer systems configured with executable instructions and is implemented as code (e.g., executable instructions, one or more computer programs or one or more applications) executing collectively on one or more processors, by hardware or combinations thereof. In at least one embodiment, code is stored on a computer-readable storage medium, for example, in form of a computer program comprising a plurality of instructions executable by one or more processors. In at least one embodiment, a computer-readable storage medium is a non-transitory computer-readable storage medium that excludes transitory signals (e.g., a propagating transient electric or electromagnetic transmission) but includes non-transitory data storage circuitry (e.g., buffers, cache, and queues) within transceivers of transitory signals. In at least one embodiment, code (e.g., executable code or source code) is stored on a set of one or more non-transitory computer-readable storage media having stored thereon executable instructions (or other memory to store executable instructions) that, when executed (i.e., as a result of being executed) by one or more processors of a computer system, cause computer system to perform operations described herein. In at least one embodiment, set of non-transitory computer-readable storage media comprises multiple non-transitory computer-readable storage media and one or more of individual non-transitory storage media of multiple non-transitory computer-readable storage media lack all of code while multiple non-transitory computer-readable storage media collectively store all of code. In at least one embodiment, executable instructions are executed such that different instructions are executed by different processors&#x2014;for example, a non-transitory computer-readable storage medium store instructions and a main central processing unit (&#x201c;CPU&#x201d;) executes some of instructions while a graphics processing unit (&#x201c;GPU&#x201d;) executes other instructions. In at least one embodiment, different components of a computer system have separate processors and different processors execute different subsets of instructions.</p><p id="p-0677" num="0654">In at least one embodiment, an arithmetic logic unit is a set of combinational logic circuitry that takes one or more inputs to produce a result. In at least one embodiment, an arithmetic logic unit is used by a processor to implement mathematical operation such as addition, subtraction, or multiplication. In at least one embodiment, an arithmetic logic unit is used to implement logical operations such as logical AND/OR or XOR. In at least one embodiment, an arithmetic logic unit is stateless, and made from physical switching components such as semiconductor transistors arranged to form logical gates. In at least one embodiment, an arithmetic logic unit may operate internally as a stateful logic circuit with an associated clock. In at least one embodiment, an arithmetic logic unit may be constructed as an asynchronous logic circuit with an internal state not maintained in an associated register set. In at least one embodiment, an arithmetic logic unit is used by a processor to combine operands stored in one or more registers of processor and produce an output that can be stored by processor in another register or a memory location.</p><p id="p-0678" num="0655">In at least one embodiment, as a result of processing an instruction retrieved by processor, processor presents one or more inputs or operands to an arithmetic logic unit, causing arithmetic logic unit to produce a result based at least in part on an instruction code provided to inputs of arithmetic logic unit. In at least one embodiment, instruction codes provided by processor to ALU are based at least in part on instruction executed by processor. In at least one embodiment combinational logic in ALU processes inputs and produces an output which is placed on a bus within processor. In at least one embodiment, processor selects a destination register, memory location, output device, or output storage location on output bus so that clocking processor causes results produced by ALU to be sent to desired location.</p><p id="p-0679" num="0656">In scope of this application, term arithmetic logic unit, or ALU, is used to refer to any computational logic circuit that processes operands to produce a result. For example, in present document, term ALU can refer to a floating point unit, a DSP, a tensor core, a shader core, a coprocessor, or a CPU.</p><p id="p-0680" num="0657">Accordingly, in at least one embodiment, computer systems are configured to implement one or more services that singly or collectively perform operations of processes described herein and such computer systems are configured with applicable hardware and/or software that enable performance of operations. Further, a computer system that implements at least one embodiment of present disclosure is a single device and, in another embodiment, is a distributed computer system comprising multiple devices that operate differently such that distributed computer system performs operations described herein and such that a single device does not perform all operations.</p><p id="p-0681" num="0658">Use of any and all examples, or exemplary language (e.g., &#x201c;such as&#x201d;) provided herein, is intended merely to better illuminate embodiments of disclosure and does not pose a limitation on scope of disclosure unless otherwise claimed. No language in specification should be construed as indicating any non-claimed element as essential to practice of disclosure.</p><p id="p-0682" num="0659">All references, including publications, patent applications, and patents, cited herein are hereby incorporated by reference to same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.</p><p id="p-0683" num="0660">In description and claims, terms &#x201c;coupled&#x201d; and &#x201c;connected,&#x201d; along with their derivatives, may be used. It should be understood that these terms may be not intended as synonyms for each other. Rather, in particular examples, &#x201c;connected&#x201d; or &#x201c;coupled&#x201d; may be used to indicate that two or more elements are in direct or indirect physical or electrical contact with each other. &#x201c;Coupled&#x201d; may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other.</p><p id="p-0684" num="0661">Unless specifically stated otherwise, it may be appreciated that throughout specification terms such as &#x201c;processing,&#x201d; &#x201c;computing,&#x201d; &#x201c;calculating,&#x201d; &#x201c;determining,&#x201d; or like, refer to action and/or processes of a computer or computing system, or similar electronic computing device, that manipulate and/or transform data represented as physical, such as electronic, quantities within computing system's registers and/or memories into other data similarly represented as physical quantities within computing system's memories, registers or other such information storage, transmission or display devices.</p><p id="p-0685" num="0662">In a similar manner, term &#x201c;processor&#x201d; may refer to any device or portion of a device that processes electronic data from registers and/or memory and transform that electronic data into other electronic data that may be stored in registers and/or memory. As non-limiting examples, &#x201c;processor&#x201d; may be a CPU or a GPU. A &#x201c;computing platform&#x201d; may comprise one or more processors. As used herein, &#x201c;software&#x201d; processes may include, for example, software and/or hardware entities that perform work over time, such as tasks, threads, and intelligent agents. Also, each process may refer to multiple processes, for carrying out instructions in sequence or in parallel, continuously or intermittently. In at least one embodiment, terms &#x201c;system&#x201d; and &#x201c;method&#x201d; are used herein interchangeably insofar as system may embody one or more methods and methods may be considered a system.</p><p id="p-0686" num="0663">In present document, references may be made to obtaining, acquiring, receiving, or inputting analog or digital data into a subsystem, computer system, or computer-implemented machine. In at least one embodiment, process of obtaining, acquiring, receiving, or inputting analog and digital data can be accomplished in a variety of ways such as by receiving data as a parameter of a function call or a call to an application programming interface. In at least one embodiment, processes of obtaining, acquiring, receiving, or inputting analog or digital data can be accomplished by transferring data via a serial or parallel interface. In at least one embodiment, processes of obtaining, acquiring, receiving, or inputting analog or digital data can be accomplished by transferring data via a computer network from providing entity to acquiring entity. In at least one embodiment, references may also be made to providing, outputting, transmitting, sending, or presenting analog or digital data. In various examples, processes of providing, outputting, transmitting, sending, or presenting analog or digital data can be accomplished by transferring data as an input or output parameter of a function call, a parameter of an application programming interface or interprocess communication mechanism.</p><p id="p-0687" num="0664">Although descriptions herein set forth example implementations of described techniques, other architectures may be used to implement described functionality, and are intended to be within scope of this disclosure. Furthermore, although specific distributions of responsibilities may be defined above for purposes of description, various functions and responsibilities might be distributed and divided in different ways, depending on circumstances.</p><p id="p-0688" num="0665">Furthermore, although subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that subject matter claimed in appended claims is not necessarily limited to specific features or acts described. Rather, specific features and acts are disclosed as exemplary forms of implementing the claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004760A1-20230105-M00001.NB"><img id="EMI-M00001" he="5.25mm" wi="76.20mm" file="US20230004760A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A processor comprising: one or more circuits to train an object detection neural network using one or more neural networks.</claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the one or more neural networks is controlled by an input that specifies a location of an object to add to an image; and</claim-text><claim-text>the image is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the one or more neural networks includes a first network that generates a representation of an object;</claim-text><claim-text>the one or more neural networks includes a second network that generates a background image; and</claim-text><claim-text>a combination of the background image and the representation of the object is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more neural networks are trained using unlabeled two-dimensional images.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The processor of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein:<claim-text>the output is a first location of an object detected by the object detection neural network;</claim-text><claim-text>the input is a second location identifies where to generate the object in an image; and</claim-text><claim-text>the image is provided to the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a pose of an object to be placed in a generated image is provided to the one or more neural networks.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or neural networks are trained using a foreground appearance loss, a background appearance loss, and a multi-scale object synthesis loss generated by a set of discriminative networks.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more neural networks are trained using a loss from the object detection network.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more neural networks are adapted to a target domain.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A computer-implemented method, comprising training an object detection neural network using one or more neural networks.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the one or more neural networks is controlled by an input that specifies a location of an object to add to an image; and</claim-text><claim-text>the image is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the one or more neural networks includes a first network that generates a representation of an object;</claim-text><claim-text>the one or more neural networks includes a second network that generates a background image; and</claim-text><claim-text>the background image and the representation of the object are combined to an image that is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more neural networks are trained using two-dimensional images.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer-implemented method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein:<claim-text>the output is a first location of an object detected by the object detection neural network;</claim-text><claim-text>the input is a second location identifies where to generate the object in an image; and</claim-text><claim-text>the image is provided to the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a pose of an object to be placed in a generated image is provided to the one or more neural networks.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more neural networks are trained using a foreground appearance loss and a background appearance loss generated by a set of discriminative networks.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more neural networks are trained using a loss from the object detection network.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer-implemented method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more neural networks are adapted to a target domain.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A computer system comprising one or more processors and memory storing executable instructions that, as a result of being executed by the one or more processors, train an object detection neural network using one or more neural networks.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein:<claim-text>the one or more neural networks is controlled by an input that specifies a location of an object to add to an image; and</claim-text><claim-text>the image is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein:<claim-text>the one or more neural networks includes a first network that generates a representation of an object;</claim-text><claim-text>the one or more neural networks includes a second network that generates a background image; and</claim-text><claim-text>the background image and the representation of the object are combined to an image that is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more neural networks are trained using two-dimensional images.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The computer system of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein:<claim-text>the output is a first location of an object detected by the object detection neural network;</claim-text><claim-text>the input is a second location identifies where to generate the object in an image; and</claim-text><claim-text>the image is provided to the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more neural networks is trained using a scene loss generated by a scene discriminator.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more neural networks are trained using a foreground appearance loss and a background appearance loss generated by a set of discriminative networks.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more neural networks are trained using a loss from the object detection network.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The computer system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the one or more neural networks are adapted to a target domain.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. A machine-readable medium having stored thereon a set of instructions, which if performed by one or more processors, cause the one or more processors to at least train an object detection neural network using one or more neural networks.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein:<claim-text>the one or more neural networks is controlled by an input that specifies a location of an object to add to an image; and</claim-text><claim-text>the image is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein:<claim-text>the one or more neural networks includes a first network that generates a representation of an object;</claim-text><claim-text>the one or more neural networks includes a second network that generates a background image; and</claim-text><claim-text>the background image and the representation of the object are combined to an image that is used to train the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the one or more neural networks are trained using two-dimensional images.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the object detection neural network is trained using a loss, the loss based at least in part on a difference between an output of the object detection neural network and an input to the one or more neural networks.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The machine-readable medium of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein:<claim-text>the output is a first location of an object detected by the object detection neural network;</claim-text><claim-text>the input is a second location identifies where to generate the object in an image; and</claim-text><claim-text>the image is provided to the object detection neural network.</claim-text></claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein a pose of an object to be placed in a generated image is provided to the one or more neural networks.</claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the one or more neural networks are trained using a foreground appearance loss and a background appearance loss generated by a set of discriminative networks.</claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the one or more neural networks includes a controllable synthesis network.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The machine-readable medium of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the one or more neural networks are adapted to a target domain.</claim-text></claim></claims></us-patent-application>