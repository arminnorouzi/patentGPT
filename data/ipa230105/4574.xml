<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004575A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004575</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17699444</doc-number><date>20220321</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>RU</country><doc-number>2021119017</doc-number><date>20210630</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>23</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>27</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2343</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">TECHNIQUES  FOR  REPLICATING  MANAGEMENT  DATA</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>EMC IP Holding Company LLC</orgname><address><city>Hopkinton</city><state>MA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Harduf</last-name><first-name>Yuval</first-name><address><city>Yahud</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Stotski</last-name><first-name>Yuri</first-name><address><city>Saint Petersburg</city><country>RU</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Reichbach</last-name><first-name>Chen</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>EMC IP Holding Company LLC</orgname><role>02</role><address><city>Hopkinton</city><state>MA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Techniques for processing commands may include: initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information; while initially synchronizing the target database with the source database, enabling volume reservation and registration command processing on both a first node managing the source database and a second node managing the target database; while initially synchronizing the target database with the source database, performing first processing to service a first command that is any of a reservation command and a registration command for a first volume; and after initially synchronizing the target database with the source database, using the target database of the second node when servicing reservation and registration commands received at both the first node and the second node.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="112.35mm" wi="158.75mm" file="US20230004575A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="235.71mm" wi="185.50mm" orientation="landscape" file="US20230004575A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="204.72mm" wi="189.82mm" orientation="landscape" file="US20230004575A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="205.40mm" wi="189.82mm" orientation="landscape" file="US20230004575A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="267.55mm" wi="198.46mm" orientation="landscape" file="US20230004575A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="255.69mm" wi="200.74mm" orientation="landscape" file="US20230004575A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="249.17mm" wi="198.46mm" orientation="landscape" file="US20230004575A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="257.05mm" wi="195.66mm" orientation="landscape" file="US20230004575A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="249.26mm" wi="198.46mm" orientation="landscape" file="US20230004575A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="248.67mm" wi="199.39mm" orientation="landscape" file="US20230004575A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><heading id="h-0002" level="1">Technical Field</heading><p id="p-0002" num="0001">This application generally relates to data storage.</p><heading id="h-0003" level="1">Description of Related Art</heading><p id="p-0003" num="0002">Systems may include different resources used by one or more host processors. The resources and the host processors in the system may be interconnected by one or more communication connections, such as network connections. These resources may include data storage devices such as those included in data storage systems. The data storage systems may be coupled to one or more host processors and provide storage services to each host processor. Multiple data storage systems from one or more different vendors may be connected and may provide common data storage for the one or more host processors.</p><p id="p-0004" num="0003">A host may perform a variety of data processing tasks and operations using the data storage system. For example, a host may issue I/O operations, such as data read and write operations, received at a data storage system. The host systems may store and retrieve data by issuing the I/O operations to the data storage system containing a plurality of host interface units, disk drives (or more generally storage devices), and disk interface units. The host systems access the storage devices through a plurality of channels provided therewith. The host systems provide data and access control information through the channels to a storage device of the data storage system. Data stored on the storage device may also be provided from the data storage system to the host systems also through the channels. The host systems do not address the storage devices of the data storage system directly, but rather, access what appears to the host systems as a plurality of files, objects, logical units, logical devices or logical volumes. Thus, the I/O operations issued by the host may be directed to a particular storage entity, such as a file or logical device. The logical devices may or may not correspond to the actual physical drives. Allowing multiple host systems to access the single data storage system allows the host systems to share data stored therein.</p><heading id="h-0004" level="1">SUMMARY OF THE INVENTION</heading><p id="p-0005" num="0004">Various embodiments of the techniques herein may include a method, a system and a computer readable medium for processing commands comprising: initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information; while initially synchronizing the target database with the source database, enabling volume reservation and registration command processing on both a first node managing the source database and a second node managing the target database; while initially synchronizing the target database with the source database, performing first processing to service a first command that is any of a reservation command and a registration command for a first volume; and after initially synchronizing the target database with the source database, using the target database of the second node when servicing reservation and registration commands received at both the first node and the second node.</p><p id="p-0006" num="0005">In at least one embodiment, the first command may be received at the second node and forwarded to the first node for servicing. The first processing may include: acquiring a first lock for reservation and registration information for the first volume, wherein the first lock provides a holder of the first lock with exclusive access to reservation and registration information for the first volume as stored in the source database; and responsive to acquiring the first lock for reservation and registration information for the first volume, performing second processing comprising: updating the source database managed by the first node with any of reservation and registration information for the first volume in accordance with the first command. The second processing may include updating an in-memory copy of the source database on the first node with any of reservation and registration information for the first volume in accordance with the first command. The second processing may include: determining whether initial synchronization of the source database and the target database is complete for the first volume; and responsive to determining the initial synchronization of the source database and the target database is not complete for the first volume, performing third processing comprising: determining a first update for the target database, wherein the first update includes first volume reservation and registration information in accordance with the first command and includes existing reservation and registration information for the first volume stored in the source database; sending the first update from the first node to the second node; applying the first update to the target database of the second node and to an in-memory copy of the target database; and marking initial synchronization of the source database and the target database as complete for the first volume.</p><p id="p-0007" num="0006">In at least one embodiment, responsive to determining the initial synchronization of the source database and the target database is complete for the first volume, third processing may be performed comprising: determining a second update for the target database, wherein the second update includes the first volume reservation and registration information in accordance with the first command and does not include the existing reservation and registration information for the first volume stored in the source database; sending the second update from the first node to the second node; and applying the second update to the target database of the second node and to an in-memory copy of the target database.</p><p id="p-0008" num="0007">In at least one embodiment, the first volume may be one of a plurality of volumes, the plurality of volumes may have a plurality of locks, wherein each of the plurality of volumes may have a corresponding one of the plurality of locks that is acquired to obtain exclusive access to volume reservation and registration information in the source database for said each volume, and wherein each of the plurality of locks may be associated with one of a plurality of queues that holds requests for said each lock that are blocked waiting to acquire said each lock.</p><p id="p-0009" num="0008">In at least one embodiment, for each of the plurality of volumes, fourth processing may be performed comprising: acquiring one of the plurality of locks for said each volume; determining whether initial synchronization of the source database and the target database is complete for the said each volume; responsive to determining the initial synchronization of the source database and the target database is not complete for said each volume, performing fifth processing comprising: determining a corresponding update for the target database, wherein the corresponding update includes existing reservation and registration information for said each volume stored in the source database; sending the corresponding update from the first node to the second node; applying the corresponding update to the target database of the second node and to an in-memory copy of the target database; and marking initial synchronization of the source database and the target database as complete for said each volume; and releasing said one lock for said each volume.</p><p id="p-0010" num="0009">In at least one embodiment, the first processing may include determining whether the first lock for reservation and registration information for the first volume is taken; and responsive to determining the first lock is taken, placing a first request for the first lock in a first queue associated with the first lock, wherein the first request is associated with the first command. Responsive to releasing the first lock, processing may include selecting the first request of the first queue for processing and performing said acquiring of the first lock for reservation and registration information for the first volume. Initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information may be performed as part of an upgrade process that upgrades software of the first node and the second node.</p><p id="p-0011" num="0010">In at least one embodiment, the second processing may include: determining whether initial synchronization of the source database and the target database is complete for the first volume; responsive to determining the initial synchronization of the source database and the target database is complete for the first volume, performing third processing comprising: determining a first update for the target database, wherein the first update includes first volume reservation and registration information in accordance with the first command; sending the first update from the first node to the second node; applying the first update to the target database of the second node and to an in-memory copy of the target database; and releasing the first lock.</p><p id="p-0012" num="0011">In at least one embodiment, the first volume may be one of a plurality of volumes, the plurality of volumes may have a plurality of locks, wherein each of the plurality of volumes may have a corresponding one of the plurality of locks that is acquired to obtain exclusive access to volume reservation and registration information in the source database for said each volume, and wherein each of the plurality of locks may be associated with one of a plurality of queues that holds requests for said each lock that are blocked waiting to acquire said each lock. For each of the plurality of volumes, fourth processing may be performed including: acquiring one of the plurality of locks for said each volume; determining a corresponding update for the target database, wherein the corresponding update includes existing reservation and registration information for said each volume stored in the source database; sending the corresponding update from the first node to the second node; applying the corresponding update to the target database of the second node and to an in-memory copy of the target database; and marking initial synchronization of the source database and the target database as complete for said each volume; and releasing said one lock for said each volume.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">Features and advantages of the present invention will become more apparent from the following detailed description of exemplary embodiments thereof taken in conjunction with the accompanying drawings in which:</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example of components that may be included in a system in accordance with the techniques described herein.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example illustrating the I/O path or data path in connection with processing data in an embodiment in accordance with the techniques herein.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref> are examples of components and systems that may be used in performing the techniques herein.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>5</b> and <b>7</b></figref> are examples of sequence diagrams of processing that may be performed in an embodiment in accordance with the techniques herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIGS. <b>6</b>, <b>8</b> and <b>9</b></figref> are flowcharts of processing steps that may be performed in at least one embodiment in accordance with the techniques herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF EMBODIMENT(S)</heading><p id="p-0019" num="0018">Referring to the <figref idref="DRAWINGS">FIG. <b>1</b></figref>, shown is an example of an embodiment of a system <b>10</b> that may be used in connection with performing the techniques described herein. The system <b>10</b> includes a data storage system <b>12</b> connected to the host systems (also sometimes referred to as hosts) <b>14</b><i>a</i>-<b>14</b><i>n </i>through the communication medium <b>18</b>. In this embodiment of the system <b>10</b>, the n hosts <b>14</b><i>a</i>-<b>14</b><i>n </i>may access the data storage system <b>12</b>, for example, in performing input/output (I/O) operations or data requests. The communication medium <b>18</b> may be any one or more of a variety of networks or other type of communication connections as known to those skilled in the art. The communication medium <b>18</b> may be a network connection, bus, and/or other type of data link, such as a hardwire or other connections known in the art. For example, the communication medium <b>18</b> may be the Internet, an intranet, network (including a Storage Area Network (SAN)) or other wireless or other hardwired connection(s) by which the host systems <b>14</b><i>a</i>-<b>14</b><i>n </i>may access and communicate with the data storage system <b>12</b>, and may also communicate with other components included in the system <b>10</b>.</p><p id="p-0020" num="0019">Each of the host systems <b>14</b><i>a</i>-<b>14</b><i>n </i>and the data storage system <b>12</b> included in the system <b>10</b> may be connected to the communication medium <b>18</b> by any one of a variety of connections as may be provided and supported in accordance with the type of communication medium <b>18</b>. The processors included in the host systems <b>14</b><i>a</i>-<b>14</b><i>n </i>and data storage system <b>12</b> may be any one of a variety of proprietary or commercially available single or multi-processor system, such as an Intel-based processor, or other type of commercially available processor able to support traffic in accordance with each particular embodiment and application.</p><p id="p-0021" num="0020">It should be noted that the particular examples of the hardware and software that may be included in the data storage system <b>12</b> are described herein in more detail, and may vary with each particular embodiment. Each of the hosts <b>14</b><i>a</i>-<b>14</b><i>n </i>and the data storage system <b>12</b> may all be located at the same physical site, or, alternatively, may also be located in different physical locations. The communication medium <b>18</b> used for communication between the host systems <b>14</b><i>a</i>-<b>14</b><i>n </i>and the data storage system <b>12</b> of the system <b>10</b> may use a variety of different communication protocols such as block-based protocols (e.g., SCSI (Small Computer System Interface), Fibre Channel (FC), iSCSI), file system-based protocols (e.g., NFS or network file server), and the like. Some or all of the connections by which the hosts <b>14</b><i>a</i>-<b>14</b><i>n </i>and the data storage system <b>12</b> may be connected to the communication medium <b>18</b> may pass through other communication devices, such as switching equipment, a phone line, a repeater, a multiplexer or even a satellite.</p><p id="p-0022" num="0021">Each of the host systems <b>14</b><i>a</i>-<b>14</b><i>n </i>may perform data operations. In the embodiment of the <figref idref="DRAWINGS">FIG. <b>1</b></figref>, any one of the host computers <b>14</b><i>a</i>-<b>14</b><i>n </i>may issue a data request to the data storage system <b>12</b> to perform a data operation. For example, an application executing on one of the host computers <b>14</b><i>a</i>-<b>14</b><i>n </i>may perform a read or write operation resulting in one or more data requests to the data storage system <b>12</b>.</p><p id="p-0023" num="0022">It should be noted that although the element <b>12</b> is illustrated as a single data storage system, such as a single data storage array, the element <b>12</b> may also represent, for example, multiple data storage arrays alone, or in combination with, other data storage devices, systems, appliances, and/or components having suitable connectivity, such as in a SAN (storage area network) or LAN (local area network), in an embodiment using the techniques herein. It should also be noted that an embodiment may include data storage arrays or other components from one or more vendors. In subsequent examples illustrating the techniques herein, reference may be made to a single data storage array by a vendor. However, as will be appreciated by those skilled in the art, the techniques herein are applicable for use with other data storage arrays by other vendors and with other components than as described herein for purposes of example.</p><p id="p-0024" num="0023">The data storage system <b>12</b> may be a data storage appliance or a data storage array including a plurality of data storage devices (PDs) <b>16</b><i>a</i>-<b>16</b><i>n</i>. The data storage devices <b>16</b><i>a</i>-<b>16</b><i>n </i>may include one or more types of data storage devices such as, for example, one or more rotating disk drives and/or one or more solid state drives (SSDs). An SSD is a data storage device that uses solid-state memory to store persistent data. SSDs may refer to solid state electronics devices as distinguished from electromechanical devices, such as hard drives, having moving parts. Flash devices or flash memory-based SSDs are one type of SSD that contains no moving mechanical parts. The flash devices may be constructed using nonvolatile semiconductor NAND flash memory. The flash devices may include, for example, one or more SLC (single level cell) devices and/or MLC (multi level cell) devices.</p><p id="p-0025" num="0024">The data storage array may also include different types of controllers, adapters or directors, such as an HA <b>21</b> (host adapter), RA <b>40</b> (remote adapter), and/or device interface(s) <b>23</b>. Each of the adapters (sometimes also known as controllers, directors or interface components) may be implemented using hardware including a processor with a local memory with code stored thereon for execution in connection with performing different operations. The HAs may be used to manage communications and data operations between one or more host systems and the global memory (GM). In an embodiment, the HA may be a Fibre Channel Adapter (FA) or other adapter which facilitates host communication. The HA <b>21</b> may be characterized as a front end component of the data storage system which receives a request from one of the hosts <b>14</b><i>a</i>-<i>n</i>. The data storage array may include one or more RAs that may be used, for example, to facilitate communications between data storage arrays. The data storage array may also include one or more device interfaces <b>23</b> for facilitating data transfers to/from the data storage devices <b>16</b><i>a</i>-<b>16</b><i>n</i>. The data storage device interfaces <b>23</b> may include device interface modules, for example, one or more disk adapters (DAs) (e.g., disk controllers) for interfacing with the flash drives or other physical storage devices (e.g., PDS <b>16</b><i>a</i>-<i>n</i>). The DAs may also be characterized as back end components of the data storage system which interface with the physical data storage devices.</p><p id="p-0026" num="0025">One or more internal logical communication paths may exist between the device interfaces <b>23</b>, the RAs <b>40</b>, the HAs <b>21</b>, and the memory <b>26</b>. An embodiment, for example, may use one or more internal busses and/or communication modules. For example, the global memory portion <b>25</b><i>b </i>may be used to facilitate data transfers and other communications between the device interfaces, the HAs and/or the RAs in a data storage array. In one embodiment, the device interfaces <b>23</b> may perform data operations using a system cache that may be included in the global memory <b>25</b><i>b</i>, for example, when communicating with other device interfaces and other components of the data storage array. The other portion <b>25</b><i>a </i>is that portion of the memory that may be used in connection with other designations that may vary in accordance with each embodiment.</p><p id="p-0027" num="0026">The particular data storage system as described in this embodiment, or a particular device thereof, such as a disk or particular aspects of a flash device, should not be construed as a limitation. Other types of commercially available data storage systems, as well as processors and hardware controlling access to these particular devices, may also be included in an embodiment.</p><p id="p-0028" num="0027">The host systems <b>14</b><i>a</i>-<b>14</b><i>n </i>provide data and access control information through channels to the storage systems <b>12</b>, and the storage systems <b>12</b> may also provide data to the host systems <b>14</b><i>a</i>-<i>n </i>also through the channels. The host systems <b>14</b><i>a</i>-<i>n </i>do not address the drives or devices <b>16</b><i>a</i>-<b>16</b><i>n </i>of the storage systems directly, but rather access to data may be provided to one or more host systems from what the host systems view as a plurality of logical devices, logical volumes (LVs) which may also referred to herein as logical units (e.g., LUNs). A logical unit (LUN) may be characterized as a disk array or data storage system reference to an amount of storage space that has been formatted and allocated for use to one or more hosts. A logical unit may have a logical unit number that is an I/O address for the logical unit. As used herein, a LUN or LUNs may refer to the different logical units of storage which may be referenced by such logical unit numbers. The LUNs may or may not correspond to the actual or physical disk drives or more generally physical storage devices. For example, one or more LUNs may reside on a single physical disk drive, data of a single LUN may reside on multiple different physical devices, and the like. Data in a single data storage system, such as a single data storage array, may be accessed by multiple hosts allowing the hosts to share the data residing therein. The HAs may be used in connection with communications between a data storage array and a host system. The RAs may be used in facilitating communications between two data storage arrays. The DAs may include one or more type of device interface used in connection with facilitating data transfers to/from the associated disk drive(s) and LUN (s) residing thereon. For example, such device interfaces may include a device interface used in connection with facilitating data transfers to/from the associated flash devices and LUN(s) residing thereon. It should be noted that an embodiment may use the same or a different device interface for one or more different types of devices than as described herein.</p><p id="p-0029" num="0028">In an embodiment in accordance with the techniques herein, the data storage system as described may be characterized as having one or more logical mapping layers in which a logical device of the data storage system is exposed to the host whereby the logical device is mapped by such mapping layers of the data storage system to one or more physical devices. Additionally, the host may also have one or more additional mapping layers so that, for example, a host side logical device or volume is mapped to one or more data storage system logical devices as presented to the host.</p><p id="p-0030" num="0029">It should be noted that although examples of the techniques herein may be made with respect to a physical data storage system and its physical components (e.g., physical hardware for each HA, DA, HA port and the like), the techniques herein may be performed in a physical data storage system including one or more emulated or virtualized components (e.g., emulated or virtualized ports, emulated or virtualized DAs or HAs), and also a virtualized or emulated data storage system including virtualized or emulated components.</p><p id="p-0031" num="0030">Also shown in the <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a management system <b>22</b><i>a </i>that may be used to manage and monitor the data storage system <b>12</b>. In one embodiment, the management system <b>22</b><i>a </i>may be a computer system which includes data storage system management software or application such as may execute in a web browser. A data storage system manager may, for example, view information about a current data storage configuration such as LUNs, storage pools, and the like, on a user interface (UI) in a display device of the management system <b>22</b><i>a</i>. Alternatively, and more generally, the management software may execute on any suitable processor in any suitable system. For example, the data storage system management software may execute on a processor of the data storage system <b>12</b>.</p><p id="p-0032" num="0031">Information regarding the data storage system configuration may be stored in any suitable data container, such as a database. The data storage system configuration information stored in the database may generally describe the various physical and logical entities in the current data storage system configuration. The data storage system configuration information may describe, for example, the LUNs configured in the system, properties and status information of the configured LUNs (e.g., LUN storage capacity, unused or available storage capacity of a LUN, consumed or used capacity of a LUN), configured RAID groups, properties and status information of the configured RAID groups (e.g., the RAID level of a RAID group, the particular PDs that are members of the configured RAID group), the PDs in the system, properties and status information about the PDs in the system, local replication configurations and details of existing local replicas (e.g., a schedule or other trigger conditions of when a snapshot is taken of one or more LUNs, identify information regarding existing snapshots for a particular LUN), remote replication configurations (e.g., for a particular LUN on the local data storage system, identify the LUN's corresponding remote counterpart LUN and the remote data storage system on which the remote LUN is located), data storage system performance information such as regarding various storage objects and other entities in the system, and the like.</p><p id="p-0033" num="0032">Consistent with other discussion herein, management commands issued over the control or data path may include commands that query or read selected portions of the data storage system configuration, such as information regarding the properties or attributes of one or more LUNs. The management commands may also include commands that write, update, or modify the data storage system configuration, such as, for example, to create or provision a new LUN (e.g., which may result in modifying one or more database tables such as to add information for the new LUN), to modify an existing replication schedule or configuration (e.g., which may result in updating existing information in one or more database tables for the current replication schedule or configuration), to delete a LUN (e.g., which may include deleting the LUN from a table of defined LUNs and may also include modifying one or more other database tables to delete any existing snapshots of the LUN being deleted), and the like.</p><p id="p-0034" num="0033">It should be noted that each of the different controllers or adapters, such as each HA, DA, RA, and the like, may be implemented as a hardware component including, for example, one or more processors, one or more forms of memory, and the like. Code may be stored in one or more of the memories of the component for performing processing.</p><p id="p-0035" num="0034">The device interface, such as a DA, performs I/O operations on a physical device or drive <b>16</b><i>a</i>-<b>16</b><i>n</i>. In the following description, data residing on a LUN may be accessed by the device interface following a data request in connection with I/O operations. For example, a host may issue an I/O operation which is received by the HA <b>21</b>. The I/O operation may identify a target location from which data is read from, or written to, depending on whether the I/O operation is, respectively, a read or a write operation request. The target location of the received I/O operation may be expressed in terms of a LUN and logical address or offset location (e.g., LBA or logical block address) on the LUN. Processing may be performed on the data storage system to further map the target location of the received I/O operation, expressed in terms of a LUN and logical address or offset location on the LUN, to its corresponding physical storage device (PD) and location on the PD. The DA which services the particular PD may further perform processing to either read data from, or write data to, the corresponding physical device location for the I/O operation.</p><p id="p-0036" num="0035">It should be noted that an embodiment of a data storage system may include components having different names from that described herein but which perform functions similar to components as described herein. Additionally, components within a single data storage system, and also between data storage systems, may communicate using any suitable technique that may differ from that as described herein for exemplary purposes. For example, element <b>12</b> of the <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be a data storage system, such as a data storage array, that includes multiple storage processors (SPs). Each of the SPs <b>27</b> may be a CPU including one or more &#x201c;cores&#x201d; or processors and each may have their own memory used for communication between the different front end and back end components rather than utilize a global memory accessible to all storage processors. In such embodiments, the memory <b>26</b> may represent memory of each such storage processor.</p><p id="p-0037" num="0036">Generally, the techniques herein may be used in connection with any suitable storage system, appliance, device, and the like, in which data is stored. For example, an embodiment may implement the techniques herein using a midrange data storage system, such as a Dell EMC Unity&#xae; data storage system or a Dell EMC PowerStore&#xae; data storage system, as well as a high end or enterprise data storage system, such as a Dell EMC&#x2122; PowerMAX&#x2122; data storage system.</p><p id="p-0038" num="0037">The data path or I/O path may be characterized as the path or flow of I/O data through a system. For example, the data or I/O path may be the logical flow through hardware and software components or layers in connection with a user, such as an application executing on a host (e.g., more generally, a data storage client) issuing I/O commands (e.g., SCSI-based commands, and/or file-based commands) that read and/or write user data to a data storage system, and also receive a response (possibly including requested data) in connection such I/O commands.</p><p id="p-0039" num="0038">The control path, also sometimes referred to as the management path, may be characterized as the path or flow of data management or control commands through a system. For example, the control or management path may be the logical flow through hardware and software components or layers in connection with issuing data storage management command to and/or from a data storage system, and also receiving responses (possibly including requested data) to such control or management commands. For example, with reference to the <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the control commands may be issued from data storage management software executing on the management system <b>22</b><i>a </i>to the data storage system <b>12</b>. Such commands may be, for example, to establish or modify data services, provision storage, perform user account management, and the like. Consistent with other discussion herein, the management commands may result in processing that includes reading and/or modifying information in the database storing data storage system configuration information. For example, management commands that read and/or modify the data storage system configuration information in the database may be issued over the control path to provision storage for LUNs, create a snapshot, define conditions of when to create another snapshot, define or establish local and/or remote replication services, define or modify a schedule for snapshot or other data replication services, define a RAID group, obtain data storage management and configuration information for display in a graphical user interface (GUI) of a data storage management program or application, generally modify one or more aspects of a data storage system configuration, list properties and status information regarding LUNs or other storage objects (e.g., physical and/or logical entities in the data storage system), and the like.</p><p id="p-0040" num="0039">The data path and control path define two sets of different logical flow paths. In at least some of the data storage system configurations, at least part of the hardware and network connections used for each of the data path and control path may differ. For example, although both control path and data path may generally use a network for communications, some of the hardware and software used may differ. For example, with reference to the <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a data storage system may have a separate physical connection <b>29</b> from a management system <b>22</b><i>a </i>to the data storage system <b>12</b> being managed whereby control commands may be issued over such a physical connection <b>29</b>. However, it may be that user I/O commands are never issued over such a physical connection <b>29</b> provided solely for purposes of connecting the management system to the data storage system. In any case, the data path and control path each define two separate logical flow paths.</p><p id="p-0041" num="0040">With reference to the <figref idref="DRAWINGS">FIG. <b>2</b></figref>, shown is an example <b>100</b> illustrating components that may be included in the data path in at least one existing data storage system in accordance with the techniques herein. The example <b>100</b> includes two processing nodes A <b>102</b><i>a </i>and B <b>102</b><i>b </i>and the associated software stacks <b>104</b>, <b>106</b> of the data path, where I/O requests may be received by either processing node <b>102</b><i>a </i>or <b>102</b><i>b</i>. In the example <b>200</b>, the data path <b>104</b> of processing node A <b>102</b><i>a </i>includes: the frontend (FE) component <b>104</b><i>a </i>(e.g., an FA or front end adapter) that translates the protocol-specific request into a storage system-specific request; a system cache layer <b>104</b><i>b </i>where data is temporarily stored; an inline processing layer <b>105</b><i>a</i>; and a backend (BE) component <b>104</b><i>c </i>that facilitates movement of the data between the system cache and non-volatile physical storage (e.g., back end physical non-volatile storage devices or PDs accessed by BE components such as DAs as described herein). During movement of data in and out of the system cache layer <b>104</b><i>b </i>(e.g., such as in connection with read data from, and writing data to, physical storage <b>110</b><i>a</i>, <b>110</b><i>b</i>), inline processing may be performed by layer <b>105</b><i>a</i>. Such inline processing operations of <b>105</b><i>a </i>may be optionally performed and may include any one of more data processing operations in connection with data that is flushed from system cache layer <b>104</b><i>b </i>to the back-end non-volatile physical storage <b>110</b><i>a</i>, <b>110</b><i>b</i>, as well as when retrieving data from the back-end non-volatile physical storage <b>110</b><i>a</i>, <b>110</b><i>b </i>to be stored in the system cache layer <b>104</b><i>b</i>. In at least one embodiment, the inline processing may include, for example, performing one or more data reduction operations such as data deduplication or data compression. The inline processing may include performing any suitable or desirable data processing operations as part of the I/O or data path.</p><p id="p-0042" num="0041">In a manner similar to that as described for data path <b>104</b>, the data path <b>106</b> for processing node B <b>102</b><i>b </i>has its own FE component <b>106</b><i>a</i>, system cache layer <b>106</b><i>b</i>, inline processing layer <b>105</b><i>b</i>, and BE component <b>106</b><i>c </i>that are respectively similar to the components <b>104</b><i>a</i>, <b>104</b><i>b</i>, <b>105</b><i>a </i>and <b>104</b><i>c</i>. The elements <b>110</b><i>a</i>, <b>110</b><i>b </i>denote the non-volatile BE physical storage provisioned from PDs for the LUNs, whereby an I/O may be directed to a location or logical address of a LUN and where data may be read from, or written to, the logical address. The LUNs <b>110</b><i>a</i>, <b>110</b><i>b </i>are examples of storage objects representing logical storage entities included in an existing data storage system configuration. Since, in this example, writes directed to the LUNs <b>110</b><i>a</i>, <b>110</b><i>b </i>may be received for processing by either of the nodes <b>102</b><i>a </i>and <b>102</b><i>b</i>, the example <b>100</b> illustrates what may also be referred to as an active-active configuration.</p><p id="p-0043" num="0042">In connection with a write operation as may be received from a host and processed by the processing node A <b>102</b><i>a</i>, the write data may be written to the system cache <b>104</b><i>b</i>, marked as write pending (WP) denoting it needs to be written to the physical storage <b>110</b><i>a</i>, <b>110</b><i>b </i>and, at a later point in time, the write data may be destaged or flushed from the system cache to the physical storage <b>110</b><i>a</i>, <b>110</b><i>b </i>by the BE component <b>104</b><i>c</i>. The write request may be considered complete once the write data has been stored in the system cache whereby an acknowledgement regarding the completion may be returned to the host (e.g., by component the <b>104</b><i>a</i>). At various points in time, the WP data stored in the system cache is flushed or written out to the physical storage <b>110</b><i>a</i>, <b>110</b><i>b. </i></p><p id="p-0044" num="0043">In connection with the inline processing layer <b>105</b><i>a</i>, prior to storing the original data on the physical storage <b>110</b><i>a</i>, <b>110</b><i>b</i>, one or more data reduction operations may be performed. For example, the inline processing may include performing data compression processing, data deduplication processing, and the like, that may convert the original data (as stored in the system cache prior to inline processing) to a resulting representation or form which is then written to the physical storage <b>110</b><i>a</i>, <b>110</b><i>b. </i></p><p id="p-0045" num="0044">In connection with a read operation to read a block of data, a determination is made as to whether the requested read data block is stored in its original form (in system cache <b>104</b><i>b </i>or on physical storage <b>110</b><i>a</i>, <b>110</b><i>b</i>), or whether the requested read data block is stored in a different modified form or representation. If the requested read data block (which is stored in its original form) is in the system cache, the read data block is retrieved from the system cache <b>104</b><i>b </i>and returned to the host. Otherwise, if the requested read data block is not in the system cache <b>104</b><i>b </i>but is stored on the physical storage <b>110</b><i>a</i>, <b>110</b><i>b </i>in its original form, the requested data block is read by the BE component <b>104</b><i>c </i>from the backend storage <b>110</b><i>a</i>, <b>110</b><i>b</i>, stored in the system cache and then returned to the host.</p><p id="p-0046" num="0045">If the requested read data block is not stored in its original form, the original form of the read data block is recreated and stored in the system cache in its original form so that it can be returned to the host. Thus, requested read data stored on physical storage <b>110</b><i>a</i>, <b>110</b><i>b </i>may be stored in a modified form where processing is performed by <b>105</b><i>a </i>to restore or convert the modified form of the data to its original data form prior to returning the requested read data to the host.</p><p id="p-0047" num="0046">Also illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> is an internal network interconnect <b>120</b> between the nodes <b>102</b><i>a</i>, <b>102</b><i>b</i>. In at least one embodiment, the interconnect <b>120</b> may be used for internode communication between the nodes <b>102</b><i>a</i>, <b>102</b><i>b. </i></p><p id="p-0048" num="0047">In connection with at least one embodiment in accordance with the techniques herein, each processor or CPU may include its own private dedicated CPU cache (also sometimes referred to as processor cache) that is not shared with other processors. In at least one embodiment, the CPU cache, as in general with cache memory, may be a form of fast memory (relatively faster than main memory which may be a form of RAM). In at least one embodiment, the CPU or processor cache is on the same die or chip as the processor and typically, like cache memory in general, is far more expensive to produce than normal RAM such as may be used as main memory. The processor cache may be substantially faster than the system RAM such as used as main memory and contains information that the processor will be immediately and repeatedly accessing. The faster memory of the CPU cache may, for example, run at a refresh rate that's closer to the CPU's clock speed, which minimizes wasted cycles. In at least one embodiment, there may be two or more levels (e.g., L1, L2 and L3) of cache. The CPU or processor cache may include at least an L1 level cache that is the local or private CPU cache dedicated for use only by that particular processor. The two or more levels of cache in a system may also include at least one other level of cache (LLC or lower level cache) that is shared among the different CPUs. The L1 level cache serving as the dedicated CPU cache of a processor may be the closest of all cache levels (e.g., L1-L3) to the processor which stores copies of the data from frequently used main memory locations. Thus, the system cache as described herein may include the CPU cache (e.g., the L1 level cache or dedicated private CPU/processor cache) as well as other cache levels (e.g., the LLC) as described herein. Portions of the LLC may be used, for example, to initially cache write data which is then flushed to the backend physical storage such as BE PDs providing non-volatile storage. For example, in at least one embodiment, a RAM based memory may be one of the caching layers used as to cache the write data that is then flushed to the backend physical storage. When the processor performs processing, such as in connection with the inline processing <b>105</b><i>a</i>, <b>105</b><i>b </i>as noted above, data may be loaded from the main memory and/or other lower cache levels into its CPU cache.</p><p id="p-0049" num="0048">In at least one embodiment, the data storage system may be configured to include one or more pairs of nodes, where each pair of nodes may be generally as described and represented as the nodes <b>102</b><i>a</i>-<i>b </i>in the <figref idref="DRAWINGS">FIG. <b>2</b></figref>. For example, a data storage system may be configured to include at least one pair of nodes and at most a maximum number of node pairs, such as for example, a maximum of 4 node pairs. The maximum number of node pairs may vary with embodiment. In at least one embodiment, a base enclosure may include the minimum single pair of nodes and up to a specified maximum number of PDs. In some embodiments, a single base enclosure may be scaled up to have additional BE non-volatile storage using one or more expansion enclosures, where each expansion enclosure may include a number of additional PDs. Further, in some embodiments, multiple base enclosures may be grouped together in a load-balancing storage cluster or federation to provide up to the maximum number of node pairs. Consistent with other discussion herein, each node may include one or more processors and memory. In at least one embodiment, each node may include two multi-core processors with each processor of the node having a core count of between 8 and 28 cores. In at least one embodiment, the PDs may all be non-volatile SSDs, such as flash-based storage devices and storage class memory (SCM) devices. It should be noted that the two nodes configured as a pair may also sometimes be referred to as peer nodes. For example, the node A <b>102</b><i>a </i>is the peer node of the node B <b>102</b><i>b</i>, and the node B <b>102</b><i>b </i>is the peer node of the node A <b>102</b><i>a. </i></p><p id="p-0050" num="0049">In at least one embodiment, the data storage system may be configured to provide both block and file storage services with a system software stack that includes an operating system running directly on the processors of the nodes of the system.</p><p id="p-0051" num="0050">In at least one embodiment, the data storage system may be configured to provide block-only storage services (e.g., no file storage services). A hypervisor may be installed on each of the nodes to provide a virtualized environment of virtual machines (VMs). The system software stack may execute in the virtualized environment deployed on the hypervisor. The system software stack (sometimes referred to as the software stack or stack) may include an operating system running in the context of a VM of the virtualized environment. Additional software components may be included in the system software stack and may also execute in the context of a VM of the virtualized environment.</p><p id="p-0052" num="0051">In at least one embodiment, each pair of nodes may be configured in an active-active configuration as described elsewhere herein, such as in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>, where each node of the pair has access to the same PDs providing BE storage for high availability. With the active-active configuration of each pair of nodes, both nodes of the pair process I/O operations or commands and also transfer data to and from the BE PDs attached to the pair. In at least one embodiment, BE PDs attached to one pair of nodes may not be shared with other pairs of nodes. A host may access data stored on a BE PD through the node pair associated with or attached to the PD.</p><p id="p-0053" num="0052">In at least one embodiment, each pair of nodes provides a dual node architecture where both nodes of the pair may be identical in terms of hardware and software for redundancy and high availability. Consistent with other discussion herein, each node of a pair may perform processing of the different components (e.g., FA, DA, and the like) in the data path or I/O path as well as the control or management path. Thus, in such an embodiment, different components, such as the FA, DA and the like of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, may denote logical or functional components implemented by code executing on the one or more processors of each node. Each node of the pair may include its own resources such as its own local (i.e., used only by the node) resources such as local processor(s), local memory, and the like.</p><p id="p-0054" num="0053">In connection with the SCSI standard, a path may be defined between two ports as described above. A command may be sent from the host (as well as a component thereof such as a HBA) and may be characterized as an initiator, originator or source with respect to the foregoing path. The host, as the initiator, sends requests to a data storage system (as well as a particular component thereof such as node having a port with a network address) characterized as a target, destination, receiver, or responder. Each physical connection of a path may be between a first endpoint which is an initiator port (e.g., I<b>1</b>) of the host and a second endpoint (e.g., T<b>1</b>) which is a target port of node in the data storage system. Over each such path, one or more LUNs may be visible or exposed to the host initiator through the target port of the data storage system.</p><p id="p-0055" num="0054">In connection with some protocols such as the SCSI protocol, each path as related to sending and receiving of I/O commands may include 2 endpoints. As discussed herein, the host, or port thereof, may be an initiator with respect to I/Os issued from the host to a target port of the data storage system. In this case, the host and data storage system ports are examples of such endpoints. In the SCSI protocol, communication may be unidirectional in that one of the endpoints, such as the host HBA port, is the initiator and the other endpoint, such as the data storage system target port, is the target receiving the commands from the initiator.</p><p id="p-0056" num="0055">An I/O command or operation, such as a read or write operation, from the host to the data storage system may be directed to a LUN and a logical address or location in the LUN's logical address space. The logical address or location of the LUN may be characterized as the target logical address of the I/O operation. The target logical address or location of the I/O operation may identify a LBA within the defined logical address space of the LUN. The I/O command may include various information such as identify the particular type of I/O command as read or write, identify the target logical address (e.g., LUN and LUN logical address) of the I/O command, and other information. In connection with servicing the I/O operation, the data storage system may map the target logical address to a physical storage location on a PD of the data storage system. The physical storage location may denote the physical storage allocated or provisioned and also mapped to the target logical address.</p><p id="p-0057" num="0056">In at least one existing data storage system or appliance, a non-disruptive upgrade (NDU) may be performed to upgrade the system or appliance. The NDU may be performed, for example, to upgrade software of the system or appliance on both the nodes A and B. With a NDU in a dual node system, the upgrade may be performed while also allowing I/Os to be serviced from the hosts or other external clients sending the I/Os to the system. For example in at least one existing dual node system being upgraded, a first node A may be upgraded and during this upgrade process of node A, node A may be offline and unavailable to service I/Os. However, while node A is offline and being upgraded, the remaining peer node B may handle all I/Os. Once node A upgrade has completed, node A reboots and once again is available online to service I/Os. Subsequent to the upgraded node A rebooting and being available online to service I/Os, the node B may be similarly upgraded. During the upgrade of node B, the node B is offline and unavailable to service I/Os. During the upgrade of node B, the node A may handle all I/Os directed to all volumes or LUNs. Once node B upgrade has completed, node B reboots and once again is available online to service I/Os. At this point, both of the nodes A and B have been upgraded and may be online and available to service I/Os.</p><p id="p-0058" num="0057">During the NDU processing, an old or existing PRR (persistent reservation and registration) DB includes persistently stored registration and reservation information, where the old PRR DB may be initially synchronized or copied to a new PRR DB that may be used subsequent to completion of the NDU. Subsequent to completion of the NDU, the old or existing PRR DB may be removed or discarded and no longer utilized whereby the new PRR DB may remain the single persistent PRR DB used by both nodes of the appliance or data storage system.</p><p id="p-0059" num="0058">As part of this initial synchronization or copying of the old PRR DB to the new PRR DB, all existing registration and reservation information of the existing PRR DB may be copied to the new PRR DB. In at least one embodiment having a dual node appliance or data storage system, the old PRR DB may be on a first of the two nodes of the appliance, and the new PRR DB may be on the remaining second peer node of the appliance. The second node may already be upgraded from an existing software version to use a new version of software in comparison to the first node having the existing older version of software. The old or existing PRR DB may be on the first node with the existing older software, and the new PRR DB may be on the second node with the upgraded new version of the software.</p><p id="p-0060" num="0059">In at least one existing system during this initial synchronization of the old PRR DB and the new PRR DB, the entire PRR DB may be locked whereby no new reservation or registration commands are serviced. During this time while the PRR DB is locked, a host issuing a registration or reservation command receives an error, such as, for example, a busy reply indicating a recoverable error whereby the host may subsequently retry the registration or reservation command. Additionally, during the time while the DB is locked, I/O command processing, such as reads and writes, may be disabled. During this time while the DB is locked, a host issuing an I/O command to a LUN may receive an error, such as, for example, a recoverable error message whereby the host may subsequently retry the I/O command.</p><p id="p-0061" num="0060">The amount of time it takes to complete the initial synchronization of the old PRR DB and the new PRR DB varies, for example, with the size of the old PRR DB. Depending on the size of the old PRR DB, the amount of time it takes to complete the initial synchronization may result in data unavailability for a host and result in the host timing out. For example, the host may repeatedly resend reservation, registration and/or I/O commands and also repeatedly receive error replies, where the host commands are unable to be serviced for a continuous amount of time exceeding a timeout maximum threshold.</p><p id="p-0062" num="0061">Described in the following paragraphs are techniques that may be used to perform the initial synchronization of the old PRR DB and the new PRR DB in an efficient manner. In at least one embodiment, the initial synchronization of the old PRR DB and the new PRR DB may be performed as part of the NDU on a data storage system or appliance. More generally the techniques described herein may be used in connection with other applications or uses and are not limited to the NDU or upgrade processing. Additionally, the techniques herein may be used in connection with other types of information and is not limited to use with the reservation and registration information.</p><p id="p-0063" num="0062">The techniques herein provide for the initial synchronizing or copying the old PRR DB to the new PRR DB, or more generally, a source DB or data source to a target DB or data target. In at least one embodiment, the source DB may include reservation and registration information for LUNs or volumes on the data storage system, where the synchronization includes copying the existing reservation and registration information from the source DB to the target DB. In at least one embodiment, the techniques herein may perform the synchronization without locking the entire source DB, without blocking or disabling all I/Os, and without blocking or disabling all reservation and reservation command servicing.</p><p id="p-0064" num="0063">In at least one embodiment, reservation and registration information may be copied or synchronized from the source DB to the target DB on a per LUN or volume basis. In at least one embodiment, a list of all existing LUNs may be traversed sequentially. In the traversal of all existing LUNs, a lock may be taken on each individual LUN, one at a time, having information to be copied from the source DB to the target DB. In at least one embodiment, processing may be performed to initially synchronize volume registration and reservation information for each single volume or LUN before proceeding with a next volume or LUN. In this manner in at least one embodiment, only a single volume lock may be held at a time for initially synchronizing volume registration and reservation information. While the volume or LUN lock is held and the corresponding LUN's reservation and registration information is being copied from the source DB to the target DB, other reservation and registration commands for other volumes that are not locked may be serviced. While the volume or lock of the corresponding LUN is held during the foregoing initial synchronization for the corresponding LUN, any received reservation or registration command for the corresponding LUN may be queued for subsequent processing when the volume or lock for the corresponding LUN is released or unlocked. In at least one embodiment, the queue may maintain a time order in which the commands are placed on the queue. In response to the lock for the LUN being released, the queued reservation and/or registration commands for the LUN's lock may be processed in accordance with the time order in which they were placed on the queue. When a request (e.g., queued reservation or registration command) for the lock is removed from the queue for processing and acquires the lock, the request processing may resume from the point in executing code which triggered the queuing of the request. In at least one embodiment, the temporarily blocked commands placed on the queue for the LUN's lock may be an alternative used rather than sending an error reply, such as a busy reply noted above, to the requesting host.</p><p id="p-0065" num="0064">In the following paragraphs, the lock for a corresponding LUN X may be referred to as the PRR lock for the LUN X to denote the lock that may be acquired to provide exclusive access to the PRR DB in order to update the PRR DB with reservation and/or registration information for the LUN X. Thus, prior to updating the old and/or new PRR DB with information regarding LUN X, the PRR lock for LUN X is acquired. Subsequent to completing the desired updates for LUN X, the PRR lock for LUN X may be unlocked or released.</p><p id="p-0066" num="0065">In at least one embodiment, the initial synchronization of volume registration and reservation information for a LUN may be performed on demand in response to one or more trigger events. For example, in at least one embodiment, a first process or thread, such as an initial synchronization process or thread, may traverse a list of all LUNs of a data storage system to perform the initial synchronization of volume registration and reservation information for the LUNs. Additionally, the occurrence of one of the defined trigger event(s) may result in initially synchronizing the volume registration and reservation information for a LUN on demand and out of order rather than having the first process or thread complete the initial synchronization of the volume registration and reservation information for the LUN. In at least one embodiment, a trigger event may be receiving a registration or reservation command directed to a particular LUN prior to the first process or thread initially synchronizing the volume registration and reservation information for the particular LUN. In response to receiving the command, both the old and new PRR DBs may be updated in accordance with the received command. Additionally, the initial synchronization of the volume registration and reservation information for the particular LUN may be performed, if such initial synchronization for the particular LUN has not yet been performed. In this manner, the received command results in completing the initial synchronization of the volume registration and reservation information for the particular LUN along with updating the old and new PR DBs based on the received command. In this manner, completing the initial synchronization of the volume registration and reservation information for the particular LUN may be performed responsive to receiving the registration or reservation command directed to the particular LUN.</p><p id="p-0067" num="0066">In at least one embodiment, initial synchronization of the volume registration and reservation information for a LUN may be performed on demand in response to one or more trigger events whereby the initial synchronization is performed prior to when it would have otherwise been performed by the above-noted first process or thread traversing the list of LUNs. As another example, in at least one embodiment, receiving an I/O operation directed to a LUN at a node including the target or new PRR DB may trigger initially synchronizing the volume registration and reservation information for the LUN whereby the initial synchronization is performed prior to when it would have otherwise been performed by the above-noted first process or thread traversing the list of LUNs.</p><p id="p-0068" num="0067">In at least one embodiment, initial synchronization of the volume registration and reservation information for a LUN may not be performed on demand in response to a trigger even such as, for example, in response to receiving a registration or reservation command for the LUN. In such an embodiment, the above-noted first process or thread, such as the initial synchronization process or thread, may traverse a list of all LUNs of a data storage system to perform the initial synchronization of volume registration and reservation information for the LUNs. Upon receipt of a registration or reservation command directed to a LUN for which initial synchronization has not been performed, the command may be applied only to the old or source PRR DB and not applied to the new or target PRR DB. Upon receipt of a registration or reservation command directed to a LUN for which initial synchronization has been performed, the command may be applied to both the old or source PRR DB and the new or target PRR DB.</p><p id="p-0069" num="0068">In at least one embodiment of a dual node appliance or system, one of the nodes including the source or old PRR DB may be designated as the primary node and the other node including the target or old PRR DB may be designated as the secondary node. Registration and reservation commands received prior to completing the initial synchronization of volume registration and reservation for all LUNs in the system may be directed to the primary node including the source or old PRR DB. In this manner, a registration or reservation command received at the secondary node including the new or target PRR DB prior to completing the initial synchronization of all LUNs may be directed to the primary node including the source or old PRR DB. In at least one embodiment, such reservation and registration commands may be directed to a central PRR processing module or component of the primary node including the old PRR DB.</p><p id="p-0070" num="0069">In at least one embodiment, initially synchronizing the volume registration and reservation information for a LUN from an old PRR DB to a new PRR DB may include copying all existing registration and reservation information from the old PRR DB to the new PRR DB. Additionally, the new PRR DB may be initialized so that any existing registration and reservation information in the new PRR DB is removed.</p><p id="p-0071" num="0070">In the following paragraphs, the techniques herein may refer to a SCSI based protocol, such as FC or iSCSI. However, the stretched volume and the techniques described in the following paragraphs may also be used in embodiments using other suitable protocols such as, for example, NVMe.</p><p id="p-0072" num="0071">The foregoing and other aspects of the techniques herein are described in more detail in the following paragraphs.</p><p id="p-0073" num="0072">Before further describing embodiments of the techniques herein, presented is an initial discussion of information that may be included in volume metadata or MD (in some contexts sometimes referred to herein as simply MD) as well as various commands that may be used in connection with querying and modifying the volume MD. Consistent with discussion herein, the volume MD for a LUN or volume may include registration and/or reservation information for the LUN as may be stored in a PRR DB. Examples in the following paragraphs may be in accordance with a particular protocol and standard, such as the SCSI protocol and standard. However, other suitable protocols and standards, such as NVMe, may be used in connection with the techniques herein, wherein such other protocols and standard may have similar concepts, commands and information included in volume MD.</p><p id="p-0074" num="0073">One example of volume MD includes SCSI reservation and registration information. For example, SCSI-2 and SCSI-3 are versions of the SCSI standard that support device registrations and reservations and have various commands that perform operations affecting device registrations and reservations. For example, SCSI-3 has persistent reservation (PR) commands. Commands used in connection with reservation and registration information may include commands that, for example, perform a registration, read information regarding existing registrations, perform a reservation, perform a clear operation to clear a reservation, perform a release to release a reservation, remove a registration, update or modify an existing registration, and perform processing to preempt a reservation.</p><p id="p-0075" num="0074">SCSI PR uses the concepts of registrations and reservations. PRs allow multiple hosts, or more generally multiple initiators, to communicate with a target by tracking multiple initiator-to-target relationships called I_T nexuses. An I_T nexus is a relationship between a specific SCSI initiator port (I) and a specific SCSI target port (T) for a given LUN within the SCSI target. It should be noted that following examples may refer to SCSI PR commands such as in a SCSI-3 based system. However, similar commands and/or operations may be performed in other embodiments based on other versions of the SCSI standard which also affect reservation state information.</p><p id="p-0076" num="0075">As a first step in setting up a PR, registration may be performed using Reservation Key, also more generally referred to herein as simply a &#x201c;key&#x201d;. A key may generally be any suitable value, such as a numeric value. Each host system that participates registers a key with each volume or LUN over each path (e.g., each initiator (I) and target port (T) pairing) over which each particular volume or LUN is accessible to the host. For example, reference is made to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The example <b>200</b> includes the data storage system <b>210</b> which is a dual node appliance including the nodes <b>202</b> and <b>204</b>. The node A <b>202</b> includes the target ports T<b>1</b> and T<b>2</b>; and the node B <b>204</b> includes the target ports T<b>3</b> and T<b>4</b>. The example <b>200</b> also includes the hosts <b>212</b> and <b>214</b>. The host <b>212</b> includes the initiator ports I<b>1</b> and I<b>2</b>; and the host <b>214</b> includes the initiator ports I<b>3</b> and I<b>4</b>.</p><p id="p-0077" num="0076">The LUN A <b>206</b> may be exposed over the target ports T<b>1</b>-T<b>4</b> of the system <b>210</b>. In particular, the LUN A<b>2</b> <b>206</b> may be exposed to the host 1 <b>212</b> over the 2 paths: I<b>1</b>-T<b>1</b> <b>220</b><i>a </i>and I<b>2</b>-T<b>3</b> <b>220</b><i>b</i>, where the host <b>212</b> may register its key, K1, over each of the foregoing 2 paths to access the LUN A <b>206</b>. In a similar manner, the LUN A <b>206</b> may be exposed to the host 2 <b>414</b> over the 2 paths: I<b>3</b>-T<b>2</b> <b>220</b><i>c </i>and I<b>4</b>-T<b>4</b> <b>220</b><i>d</i>, where the host <b>214</b> may register its key, K2, over each of the foregoing 2 paths to access the LUN A <b>206</b>. Although each of the hosts <b>212</b>, <b>214</b> are described for illustration purposes as using different keys, more generally, hosts may use the same or different keys. In such a system where each host registers with a different key over all its own paths to the same LUN, all registrations having the same key may denote all paths from a particular host to the LUN.</p><p id="p-0078" num="0077">As a result of the hosts <b>212</b>, <b>214</b> each registering their respective keys over their respective paths noted above, the data storage system <b>210</b> may include the following set of registration information for the LUN A <b>206</b> in the Table 1:</p><p id="p-0079" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Registration information for LUN A</entry></row><row><entry>206 on the data storage system 210:</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><colspec colname="3" colwidth="42pt" align="left"/><colspec colname="4" colwidth="56pt" align="left"/><tbody valign="top"><row><entry/><entry>Volume/LUN</entry><entry>Key</entry><entry>Init ID</entry><entry>Target ID</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>A</entry><entry>K1</entry><entry>I1</entry><entry>T1</entry></row><row><entry/><entry>A</entry><entry>K1</entry><entry>I2</entry><entry>T3</entry></row><row><entry/><entry>A</entry><entry>K2</entry><entry>I3</entry><entry>T2</entry></row><row><entry/><entry>A</entry><entry>K2</entry><entry>I4</entry><entry>T4</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0080" num="0078">In at least one embodiment, registration of the PR keys as illustrated in the Table 1 may be performed by the hosts <b>210</b>, <b>212</b> as part of discovery processing whereby various volumes or LUNs and connections visible or accessible to the hosts are discovered. As part of host discovery processing, each of the hosts may register a key for each LUN accessible to the host over each path which the LUN is accessible. In an embodiment in which each host uses its own set of one or more keys, a Reservation Key may be registered for each I_T nexus (each I-T over which a LUN is accessible to the initiator I) and includes the necessary information to allow the authentication of the I_T nexus devices in order to control the reservations.</p><p id="p-0081" num="0079">The information in Table 1 may denote the set of registration information included in the volume MD for the LUN A. In at least one embodiment, the MD for the LUN A, where the MD includes reservation and registration information, may be stored in the PRR DB <b>208</b>. In the example <b>200</b>, the information of the Table 1 above may be stored in the PRR DB <b>208</b>.</p><p id="p-0082" num="0080">An embodiment in accordance with techniques herein may provide support for the PR IN command to read or query registration and reservation information included in the volume MD of the PRR DB <b>208</b>. It should be noted that an embodiment may include different command parameters with the PR IN command to request and vary the particular information provided and returned to the requesting initiator. For example, a PR IN command may include one or more parameters identifying the particular information to be returned. For example, the PR IN command may include one or more parameters requesting to return a complete set of all registration and reservation information of the databases, return only reservation information, return only registration (e.g., key information), return only registration and/or reservation information associated with a particular key, and the like. To further illustrate, assume subsequent to issuing 4 PR registration commands to register the keys for the hosts <b>212</b>, <b>214</b> noted above in Table 1 the host <b>212</b> issues a PR IN command over the path I<b>1</b>-T<b>1</b> <b>220</b><i>a </i>to the system <b>210</b> requesting a list of all existing or active registrations and reservations with respect to a particular LUN, such as the volume or LUN A <b>206</b>. Generally, the PR IN command is directed to a particular LUN and issued over one of the paths (from initiator to a target port) for which there is an existing registration for the LUN. In response to receiving the PR IN command over the path <b>220</b><i>a </i>for the volume or LUN A, the system <b>210</b> may query its PRR DB <b>208</b> for the requested reservation and registration information of the volume MD for the volume or LUN A <b>206</b>. In response to the PR IN command, the system <b>210</b> may return the information as described above in Table 1. In a similar manner, issuing the same PR IN command regarding LUN A over any of the 4 paths <b>220</b><i>a</i>-<i>d </i>to the system <b>410</b> also results in returning the same information as described in Table 1. It should be noted that if there were also existing reservations (described elsewhere herein) with respect to LUN A <b>206</b>, then information regarding such existing reservations may also be returned in response to the PR IN command described above.</p><p id="p-0083" num="0081">In this manner, the requesting host <b>212</b> or initiator I<b>11</b> may be presented with a complete view of registration and reservation information with respect to all paths to the volume or LUN A <b>206</b> by issuing the PR IN command directed to LUN A over any of the 4 active paths <b>220</b><i>a</i>-<i>d </i>exposing the LUN A <b>206</b>.</p><p id="p-0084" num="0082">Commands affecting or related to registrations and reservations, such as various ones of the PR commands, affect the ability of initiators and thus hosts to perform I/O with respect to different LUNs. For example, in connection with registrations with the SCSI standard, if there is no registration with respect to a particular I-T nexus (e.g., initiator and target port for a particular LUN), that initiator may at most be able to have read-only access to data of that LUN over the path from the initiator to the target port. As described below in more detail, an initiator may also issue other commands, such as a reservation command, which request a particular type of volume or LUN access and may block or modify access allowed by other initiators and hosts. Such other commands described in more detail in the following paragraphs may result in modifying or updating existing volume MD, such as for the LUN A <b>206</b>.</p><p id="p-0085" num="0083">In at least one embodiment in accordance with the SCSI standard, a PR reserve or reservation command may be issued over a path from a particular initiator to a particular target port and directed to a LUN (e.g. PR reservation may be made with respect to a particular LUN, initiator and target port). Additionally, the PR reserve or reservation command may include parameters such as, for example, a parameter that denotes a key of a previous PR registration, a parameter identifying an associated type of I/O access for the requested reservation, and possibly other parameters. For example, the type of I/O access parameter may be one of variety of different types of I/O access such as exclusive access (whereby no other initiator besides the current reservation holder having the exclusive access is allowed to issue any I/Os to the LUN), write exclusive access (whereby only the initiator holding the current reservation is allowed to issue writes but other initiators may issue read I/Os), and the like. In at least one embodiment in accordance with the SCSI standard, the PR reservation command may be included in the broader category of PR OUT commands that generally change or modify volume MD associated with a particular volume or LUN.</p><p id="p-0086" num="0084">To further illustrate, assume that the initiator I<b>1</b> of the host <b>212</b> issues a PR reservation command for the LUN A <b>206</b> over the path I-T<b>1</b> <b>220</b><i>a</i>, where the PR reservation command requests write exclusive access so that only the initiator I<b>11</b> holding the current reservation is allowed to issue writes but other initiators may issue read I/Os. In response to receiving the foregoing PR reservation command, the system <b>210</b> may update the volume MD for the LUN A <b>206</b> as included in the PRR DB <b>208</b> to also include an existing reservation for I<b>1</b> for write exclusive access.</p><p id="p-0087" num="0085">Once the reservation for exclusive write access for I<b>1</b> to the LUN A <b>208</b> is completed as described above, a subsequent write I/O, such as from the host 2 <b>214</b> over any of the paths <b>220</b><i>c</i>-<i>d </i>may result in an error due to the existing reservation for the LUN A <b>206</b> for the initiator I<b>1</b>.</p><p id="p-0088" num="0086">In at least one embodiment in accordance with the SCSI standard, other commands that may modify volume MD may include a clear command that is a sub-command of the PROUT command and may be issued to a particular LUN to release or clear the persistent reservation (if any) and clear registrations for the particular LUN. Generally, depending on the particular embodiment, other parameters and criteria may be specified in connection with the clear command that affect the particular registrations and/or reservations cleared or removed for the LUN A <b>206</b>.</p><p id="p-0089" num="0087">In at least one embodiment in accordance with the SCSI standard, other commands that may modify volume MD related to registrations and reservations for a particular volume or LUN may include a release command that releases any active persistent reservation but does not remove the registrations for a particular LUN. In connection with the SCSI-3 standard, the release command is a sub-command of the PROUT command and is issued to a particular LUN to release or clear the persistent reservation (if any) from the LUN. Generally, depending on the particular embodiment, other parameters and criteria may be specified in connection with the release command that affect the particular registrations and/or reservations cleared or removed for the LUN A.</p><p id="p-0090" num="0088">The foregoing are examples of some commands in connection with the SCSI protocol and standard that may be used in connection with a volume or LUN such as the LUN A <b>206</b>. More generally, other commands may be supported and the particular examples provided herein are illustrative and not meant to be limiting.</p><p id="p-0091" num="0089">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, shown is an example of components that may be used in an embodiment of a dual node appliance or system in accordance with the techniques herein.</p><p id="p-0092" num="0090">The example <b>300</b> includes the appliance or data storage system <b>210</b> that is a dual node appliance as described elsewhere herein such as in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The system <b>210</b> includes the nodes <b>202</b> and <b>204</b>, where the node <b>202</b> may be designated as the primary node and the node <b>204</b> may be designated as the secondary node. The primary node A <b>202</b> mat include a central PRR processing module <b>312</b>, the old PRR DB <b>316</b>, a local I/O processing module <b>314</b>, and an in-memory copy of the old PRR DB <b>318</b>. The secondary node <b>204</b> may include a central PRR processing module <b>332</b>, the new PRR DB <b>336</b>, a local I/O processing module <b>334</b>, and an in-memory copy of the new PRR DB <b>338</b>. The primary node A <b>202</b> also includes the target ports T<b>1</b> and T<b>2</b>, and the node B <b>204</b> includes the target ports T<b>3</b> and T<b>4</b>. The LUN A <b>206</b> may be exposed over the target ports T<b>1</b>-T<b>4</b>, and in particular, over the paths <b>220</b><i>a</i>-<i>d </i>to the hosts <b>212</b>, <b>214</b>.</p><p id="p-0093" num="0091">The roles of primary node and secondary node as noted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> are with respect to the initial synchronization processing performed in accordance with the techniques herein to initially synchronize the old PRR DB <b>316</b> with the new PRR DB <b>336</b>. The primary node may include the old PRR DB <b>316</b> used to initialize the new PRR DB <b>336</b> where the registration and reservation information included in the old PRR DB <b>316</b> is copied to the new PRR DB <b>336</b>.</p><p id="p-0094" num="0092">The central PRR processing <b>312</b> of the node A, the primary node, may be a software component that receives all reservation and registration commands or requests from all target ports of the system <b>210</b>. In particular, the module <b>312</b> may receive and process all reservation and registration commands received from the hosts <b>212</b>, <b>214</b> at any target ports T<b>1</b>-T<b>4</b> of the nodes <b>202</b>, <b>204</b>. If a registration or reservation command is received at T<b>3</b> or T<b>4</b> of the node B <b>204</b>, the command is redirected to the central PRR processing module <b>312</b> of the node A for processing. If a registration or reservation command is received at T<b>1</b> or T<b>2</b> of the node A <b>202</b>, the command is directed to the central PRR processing module <b>312</b> of the node A for processing. The module <b>312</b> may maintain and update the old PRR DB <b>316</b> denoting a persistently stored DB of reservation and registration information. The module <b>312</b> may maintain consistency of the reservation and registration information of the old PRR DB <b>316</b> and the corresponding in-memory copy of the old PRR DB <b>318</b>. The in-memory copy of the old PRR DB <b>318</b> may denote a local in-memory copy of the old PRR DB <b>316</b> stored in memory local to the node <b>202</b>. In this manner, the node A may use the in-memory copy <b>318</b> of the old PRR DB <b>316</b>, for example, to determine whether to process a received read or write operation directed to a particular LUN in accordance with existing reservation information for the LUN. For example, a write command may be received at the node A <b>202</b> from the host <b>212</b> over the path I<b>1</b>-T<b>1</b> where the write is directed to the LUN A <b>206</b>. The node A, in particular, the local I/O processing module <b>314</b>, may use the in-memory copy <b>318</b> of the PRR DB to determine whether there is an existing reservation, for example, by another initiator other than I<b>1</b> that would result in the node A rejecting (e.g., not servicing) the write and resulting in an error being returned to the host <b>212</b>. In at least one embodiment, the local I/O processing module <b>314</b> may perform processing to service received I/O commands, such as read and/or write commands, directed to LUNs exposed over T<b>1</b> and T<b>2</b>. The module <b>314</b> may use the information in the in-memory copy of the PRR DB <b>318</b> as noted above.</p><p id="p-0095" num="0093">The central PRR processing <b>332</b> of the node B, the secondary node, may be a software component that communicates with the central PRR processing module <b>312</b> of the primary node in performing processing in accordance with the techniques described herein. The module <b>332</b> may maintain and update the new PRR DB <b>336</b> denoting a persistently stored DB of reservation and registration information. The module <b>332</b> may maintain consistency of the reservation and registration information of the new PRR DB <b>336</b> and the corresponding in-memory copy <b>338</b> of the new PRR DB <b>336</b>. The in-memory copy <b>338</b> of the new PRR DB <b>336</b> may denote a local in-memory copy of the new PRR DB <b>336</b> stored in memory local to the node B <b>204</b>. In this manner, the node B may use the in-memory copy <b>338</b> of the new PRR DB <b>336</b>, for example, to determine whether to process a received read or write operation directed to a particular LUN in accordance with existing reservation information for the LUN. For example, a write command may be received at the node B <b>204</b> from the host <b>212</b> over the path I<b>2</b>-T<b>3</b> where the write is directed to the LUN A <b>206</b>. The node B, in particular, the local I/O processing module <b>334</b>, may use the in-memory copy <b>338</b> of the new PRR DB to determine whether there is an existing reservation, for example, by another initiator other than I<b>2</b> that would result in the node A rejecting (e.g., not servicing) the write and resulting in an error being returned to the host <b>212</b>. In at least one embodiment, the local I/O processing module <b>334</b> may perform processing to service received I/O commands, such as read and/or write commands, directed to LUNs exposed over T<b>3</b> and T<b>4</b>. The module <b>334</b> may use the information in the in-memory copy <b>338</b> of the new PRRR DB <b>336</b> as noted above.</p><p id="p-0096" num="0094">In at least one embodiment, during the initial synchronization of the PRR DBs <b>316</b> and <b>336</b>, received reservation and registration commands may be serviced. All such commands received at nodes A and B are sent to the primary node A's central PRR processing module <b>312</b>.</p><p id="p-0097" num="0095">What will now be described are two variations or embodiments of the techniques herein. A first embodiment is described with reference to <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref> which perform an on-demand technique in connection with initially synchronizing the old PRR DB <b>316</b> and the new PRR DB <b>318</b>. A second embodiment is described with reference to <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> which performs the initial synchronization of the old PRR DB <b>316</b> and the new PRR DB <b>318</b> which may be characterized as not on-demand. Both of the foregoing embodiments may have a process or thread that traverses a list of all the LUNs that may possibly have reservation and registration information in the old PRR DB <b>316</b>. The process or thread may perform the initial synchronization of reservation and registration information on a per volume or LUN basis as the list is traversed. Both of the foregoing embodiments may also provide for receiving and servicing registration and reservation commands while the initial synchronization of the old PRR DB <b>316</b> and the new PRR DB <b>318</b> is in progress, or more generally, prior to the process or thread completing the initial synchronization of volume registration and reservation information for all the LUNs in the list.</p><p id="p-0098" num="0096">The first embodiment, sometimes referred to as the on-demand technique, may perform the initial synchronization of volume registration and reservation information for a LUN in response to receiving a reservation or registration command for the LUN if such initial synchronization for the LUN's information has not already been performed by the thread or process traversing the list of LUNs. In particular, responsive to receiving the reservation or registration command for the LUN and determining that initial synchronization for the LUN has not yet been performed, processing may be performed to complete the initial synchronization for the LUN and also update both the old PRR DB <b>316</b> and the new PRR DB <b>336</b> in accordance with the command.</p><p id="p-0099" num="0097">In contrast to the first embodiment, the second embodiment may not perform the initial synchronization of volume registration and reservation information for a LUN in response to receiving a reservation or registration command for the LUN if such initial synchronization for the LUN's information has not already been performed by the thread or process traversing the list of LUNs. Rather, in the second embodiment, the thread or processing traversing the list of LUNs may be relied upon to perform the initial synchronization of all the LUNs in the list. In the second embodiment, responsive to receiving the reservation or registration command for the LUN and determining that initial synchronization for the LUN has not yet been performed, processing may be performed to update the old PRR DB <b>316</b>, but not the new PRR DB <b>336</b>, in accordance with the command. In the second embodiment, responsive to receiving the reservation or registration command for the LUN and determining that initial synchronization for the LUN has been performed, processing may be performed to update both the old PRR DB <b>316</b> and the new PRR DB <b>336</b> in accordance with the command.</p><p id="p-0100" num="0098">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, shown is a sequence diagram <b>400</b> illustrating processing that may be performed in the first embodiment in accordance with techniques herein. The example <b>400</b> includes the host <b>212</b>, node A local I/O processing <b>314</b>, node A (primary) central PRR processing <b>312</b>, node B (secondary) central PRR processing <b>332</b> and node B local I/O processing <b>334</b> corresponding to the modules or components of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Thus the sequence diagram of <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates processing and interactions between such components in the first embodiment in accordance with the techniques herein.</p><p id="p-0101" num="0099">A PRR (persistent reservation or registration) command may be sent (<b>412</b>) from the host <b>212</b> to the node A <b>202</b> which is received by the local I/O processing module <b>314</b>. The PRR command may be a registration or reservation command for a particular LUN, such as LUN X. The module <b>314</b> forwards (<b>414</b>) the PRR request to the central PRR processing module <b>314</b> of the primary node A. The module <b>312</b> may perform processing as denoted by the element <b>416</b> to: acquire the PRR lock for the LUN X; update the persistent old PRR DB <b>316</b> of the node A; and determine an update to be sent to the peer secondary node B where the update is to be applied by the node B to the new PRR DB <b>336</b> and its corresponding in-memory copy <b>338</b>. The update may include the registration and/or reservation information of the received PRR command <b>412</b>. Additionally, if the initial synchronization of volume reservation or registration command for the LUN X has not yet been performed, the update may include the existing information in the old PR DB <b>316</b> for the LUN X. Thus, if the initial synchronization of volume reservation or registration command for the LUN X has not yet been performed, the update may include a combination of first information to be copied from the old PRR DB <b>316</b> to the new PRR DB <b>336</b> for the initial synchronization for the LUN X and second information in accordance with the received PRR command <b>412</b>. If the initial synchronization of volume reservation or registration command for the LUN X has been performed, the update may include only the above-noted second information in accordance with the received PRR command <b>412</b>.</p><p id="p-0102" num="0100">Consistent with other discussion herein, the step <b>416</b> processing may fail to acquire the PRR lock for the LUN X if the PRR lock is currently held in connection with other processing. If PRR lock for LUN X is taken, the request for the PRR lock for LUN X may wait in a queue associated with the PRR lock.</p><p id="p-0103" num="0101">Following the step <b>416</b>, a step <b>418</b> may be performed to send the update to the node B central PRR processing module <b>332</b>. In response to receiving the update <b>418</b>, the module <b>332</b> may perform processing in the step <b>420</b> to apply the received update to the node B's persistent new PRR DB <b>336</b>; and may perform processing to send a command (<b>422</b>) to the local I/O processing module <b>334</b> of node B to also apply the received update to the in-memory copy <b>338</b> of the new PRR DB <b>336</b>. The module <b>334</b> may receive the command <b>422</b> and perform processing in the step <b>424</b> to update the in-memory copy <b>338</b> of the new PRR DB on the node B. After completing the step <b>424</b>, the module <b>334</b> may return a response (<b>426</b>) to the module <b>332</b> indicating the command <b>422</b> has completed. Subsequently, the module <b>332</b> may return a response (<b>428</b>) to the module <b>312</b> indicating the node B has completed processing for the update <b>418</b> (e.g., the update has been applied to the new PRR DB <b>336</b> and its corresponding in-memory copy <b>338</b>). Upon receiving the response <b>428</b>, the module <b>312</b> unlock or release the PRR lock for LUN X in the step <b>430</b>. Additionally, in the step <b>430</b>, the module <b>312</b> may mark the initial synchronization of LUN X has complete if the update sent in the step <b>418</b> included information for the initial synchronization of volume registration and reservation information for the LUN X.</p><p id="p-0104" num="0102">Responsive to releasing or unlocking the PPR lock for the LUN X, a blocked or waiting request on the lock's associated queue may be dequeued and signaled to resume processing at the point in execution which triggered the queueing of the request. In connection with <figref idref="DRAWINGS">FIG. <b>5</b></figref>, if a request is dequeued which previously was blocked and placed on the queue at the step <b>416</b>, the request processing may resume with the step <b>416</b> to attempt to now acquire the PRR lock for the LUN X.</p><p id="p-0105" num="0103">After completing the step <b>430</b>, the module <b>312</b> may return a response (<b>438</b>) to the module <b>314</b> indicating that processing of the command or request <b>414</b> has completed. Subsequently, the module <b>314</b> may return a PRR reply <b>440</b> to the host <b>212</b> indicating completion of the PRR command <b>412</b>.</p><p id="p-0106" num="0104">It should be noted that the sequence diagram of <figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates processing where the PRR command <b>412</b> is send from the host <b>212</b> to the primary node A. More generally, the PRR command may be sent from any host, such as the host <b>212</b> or <b>214</b>. Additionally, PRR commands may also be sent by one or more hosts <b>212</b>, <b>214</b> to the secondary node B. In this latter case where a PRR command is received at the node B, the received PRR command may be received by the node B local I/O processing module <b>334</b> which then forwards the PRR command to the module <b>312</b> for processing as described above. In this latter case, the reply or response denoted by <b>438</b> is sent from the component <b>312</b> to the component <b>334</b>; and the reply or response denoted by <b>440</b> is sent from the component <b>334</b> to sending host.</p><p id="p-0107" num="0105">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, shown is a flowchart of processing steps that may be performed by a thread or processing in the first embodiment in accordance with the techniques herein. The flowchart <b>500</b> processing may be performed, for example, by a thread or process traversing a list of LUNs of volumes in the system that may have volume reservation and registration information in the old PRR DB <b>336</b>. In this case, initial synchronization of such information may be performed for the list of LUNs in order to synchronize the contents of the new PRR DB <b>336</b> to include the same information as the old PRR DB <b>316</b>.</p><p id="p-0108" num="0106">At a step <b>502</b>, a variable J may be assigned <b>1</b> (one) denoting the first LUN in the list. From the step <b>502</b>, control proceeds to the step <b>504</b>. At the step <b>504</b>, a determination is made as to whether the initial synchronization of volume registration and reservation information for LUN J has already been completed. If the step <b>504</b> evaluates to yes, control proceeds to the step <b>514</b>. If the step <b>504</b> evaluates to no, control proceeds to the step <b>506</b>.</p><p id="p-0109" num="0107">At the step <b>506</b>, processing may be performed to acquire the PRR lock for the LUN J. If PRR lock for LUN J is already taken and thus cannot be acquired at the current time, the request to acquire the PRR lock is temporarily blocked and waits in a queue associated with the PRR lock for LUN J. Consistent with discussion elsewhere herein, responsive to the PRR lock for the LUN J being released, a waiting request on the lock's associated queue is dequeued and signaled to resume processing at the point in execution which triggered the queueing of the request. In connection with <figref idref="DRAWINGS">FIG. <b>6</b></figref>, if a request is dequeued which previously was blocked and placed on the queue at the step <b>506</b>, the request processing may resume with the step <b>506</b> to attempt to now acquire the PRR lock for the LUN J. From the step <b>506</b>, control proceeds to the step <b>508</b>.</p><p id="p-0110" num="0108">At the step <b>508</b>, the central PRR processing module <b>312</b> on the primary node A sends an initial synchronization (synch) message including the PRR information for LUN J to the central PRR processing module <b>332</b> of the secondary node B. From the step <b>508</b>, control proceeds to the step <b>510</b>.</p><p id="p-0111" num="0109">At the step <b>510</b>, the central PRR processing module <b>332</b> of node B received the initial sync message and data and accordingly updates the new PRR DB <b>336</b> and its associated in-memory copy <b>338</b>. In at least one embodiment, the step <b>510</b> may include the module <b>332</b> communicating with the module <b>334</b> to apply the PRR information for LUN J for the initial synchronization to the in-memory copy <b>338</b>. From the step <b>510</b>, control proceeds to the step <b>512</b>.</p><p id="p-0112" num="0110">At the step <b>512</b>, processing may be performed to mark initial synchronization of the volume reservation and registration information for the LUN J as complete. Also in the step <b>512</b>, processing may be performed to release the PRR lock for the LUN J. From the step <b>512</b>, control proceeds to the step <b>514</b> where J is incremented by 1. From the step <b>514</b>, control proceeds to the step <b>516</b> where a determination is made as to whether processing for all LUNs on the list is complete. If the step <b>516</b> evaluates yes, control proceeds to the step <b>518</b> where processing stops. At the step <b>518</b>, it may be determined that the initial synchronization of the old PRR DB <b>316</b> and the new PRR DB <b>336</b> is complete. If the step <b>516</b> evaluates to no, control proceeds to the step <b>504</b> to perform initial synchronization of volume reservation and registration information (e.g., PRR information) for the next LUN J in the list.</p><p id="p-0113" num="0111">In the first embodiment, I/Os may be received by the system <b>210</b> while the initial synchronization of the old PRR DB <b>316</b> and the new PR DB <b>336</b> is ongoing such as prior to completing the processing of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. In at least one embodiment, such I/Os received may be processed using information as included in the old PRR DB <b>316</b> and its corresponding in memory copy <b>318</b>. If the I/O is received at the node B <b>210</b> while the initial synchronization of the old PRR DB <b>316</b> and the new PR DB <b>336</b> is ongoing such as prior to completing the processing of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, an embodiment using the on-demand technique as described in connection with <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref> may handle the received I/O in any suitable manner. For example, the I/O may be forwarded to the node A <b>202</b> for processing to utilize the PRR information as included in the DB <b>316</b> and/or its in-memory copy <b>318</b>. As a variation in at least one embodiment, the I/O directed to a particular LUN may be serviced using the PRR information for the LUN as stored in <b>338</b> and <b>336</b> if initial synchronization of the PRR information for the LUN has been completed. If the initial synchronization of the PRR information for the LUN has not yet completed, 1) the I/O may trigger initial synchronization of the volume reservation and registration information for the particular LUN where the PRR information for the particular LUN initial synchronization may be copied from the old PRR DB <b>316</b> or its in-memory copy <b>318</b> to the new PRR DB <b>336</b> and its in memory copy <b>338</b>; and 2) the I/O may then be serviced using the in memory copy <b>338</b> of the new PRR DB <b>336</b>. The initial synchronization for the I/O may include performing processing as described in connection with the steps <b>506</b>, <b>508</b> <b>510</b> and <b>512</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref> for the particular LUN. The foregoing are some examples of how an embodiment may handle processing of a received I/O while the initial synchronization of the old PRR DB <b>316</b> and the new PR DB <b>336</b> is ongoing such as prior to completing the processing of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. More generally, an embodiment may handle the received I/O in any suitable manner.</p><p id="p-0114" num="0112">What will now be described with reference to <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> is the second embodiment noted above which does not use an on-demand technique in connection with performing the initial synchronization of the old PRR DB <b>316</b> and the new PRR DB <b>336</b>. Rather, in the second embodiment, the thread or processing traversing the list of LUNs (e.g., as described in connection with <figref idref="DRAWINGS">FIG. <b>8</b></figref> below) may be relied upon to perform the initial synchronization of all the LUNs in the list. In the second embodiment, responsive to receiving the reservation or registration command for the LUN and determining that initial synchronization for the LUN has not yet been performed, processing may be performed to update the old PRR DB <b>316</b>, but not the new PRR DB <b>336</b>, in accordance with the command. In the second embodiment, responsive to receiving the reservation or registration command for the LUN and determining that initial synchronization for the LUN has been performed, processing may be performed to update both the old PRR DB <b>316</b> and the new PRR DB <b>336</b> in accordance with the command. The foregoing and other aspects of the second embodiment are discussed in more detail below.</p><p id="p-0115" num="0113">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, shown is a sequence a sequence diagram <b>600</b> illustrating processing that may be performed in the second embodiment in accordance with techniques herein. The example <b>600</b> includes the host <b>212</b>, node A local I/O processing <b>314</b>, node A (primary) central PRR processing <b>312</b>, node B (secondary) central PRR processing <b>332</b> and node B local I/O processing <b>334</b> corresponding to the modules or components of <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Thus the sequence diagram of <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates processing and interactions between such components in the first embodiment in accordance with the second embodiment of the techniques herein.</p><p id="p-0116" num="0114">A PRR (persistent reservation or registration) command may be sent (<b>612</b>) from the host <b>212</b> to the node A <b>202</b> which is received by the local I/O processing module <b>314</b>. The PRR command may be a registration or reservation command for a particular LUN, such as LUN X. The module <b>314</b> forwards (<b>614</b>) the PRR request to the central PRR processing module <b>314</b> of the primary node A. The module <b>312</b> may perform processing as denoted by the element <b>616</b> to: acquire the PRR lock for the LUN X; update the persistent old PRR DB <b>316</b> of the node A; and determine an update to be sent to the peer secondary node B where the update is to be applied by the node B to the new PRR DB <b>336</b> and its corresponding in-memory copy <b>338</b>. The update may include the registration and/or reservation information of the received PRR command <b>612</b>.</p><p id="p-0117" num="0115">Consistent with other discussion herein, the step <b>616</b> processing may fail to acquire the PRR lock for the LUN X if the PRR lock is currently held in connection with other processing. If PRR lock for LUN X is taken, the request for the PRR lock for LUN X may wait in a queue associated with the PRR lock.</p><p id="p-0118" num="0116">Following the step <b>616</b>, a step <b>618</b> may be performed where the update determined in accordance with the received PRR command <b>612</b> is conditionally sent to the module <b>332</b> if the initial synchronization of the volume reservation and registration information (e.g., PRR information) for the LUN X has already been performed. Responsive to the step <b>618</b> determining the initial synchronization of the volume reservation and registration information (e.g., PRR information) for the LUN X has already been performed, the step <b>618</b> sends the update to the module <b>332</b>. Generally, the steps <b>620</b>, <b>622</b>, <b>624</b> and <b>626</b> are also performed conditionally responsive to determining the initial synchronization of the volume reservation and registration information (e.g., PRR information) for the LUN X has already been performed. In the step <b>620</b>, the module <b>332</b> receives and applies the update to the new PRR DB <b>336</b> of node B, and then sends a command <b>622</b> to the module <b>334</b> to update the in-memory copy <b>338</b>. In response to receiving the command <b>622</b>, the module <b>334</b> updates (<b>624</b>) the in-memory copy <b>338</b> of the new PRR DB <b>336</b>, and then returns a response (<b>626</b>) to the module <b>332</b>. Subsequent to completing the steps <b>616</b> and <b>618</b> (and, if applicable, also receiving the response <b>626</b> if the update was conditionally sent in the step <b>618</b> to the module <b>332</b>), the module <b>332</b> sends a response (<b>628</b>) to the module <b>312</b>. In response to receiving the reply <b>628</b>, the module <b>312</b> performs the step <b>630</b> to release or unlock the PRR lock for the LUN X and send a response (<b>638</b>) to the module <b>314</b> where the module <b>314</b> then returns the PRR reply <b>640</b> to the host <b>212</b> indicating completion of the PRR command <b>412</b>.</p><p id="p-0119" num="0117">Responsive to releasing or unlocking the PPR lock for the LUN X in the step <b>630</b>, a blocked or waiting request on the lock's associated queue may be dequeued and signaled to resume processing at the point in execution which triggered the queueing of the request. In connection with <figref idref="DRAWINGS">FIG. <b>7</b></figref>, if a request is dequeued which previously was blocked and placed on the queue at the step <b>616</b>, the request processing may resume with the step <b>616</b> to attempt to now acquire the PRR lock for the LUN X.</p><p id="p-0120" num="0118">It should be noted that the sequence diagram of <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates processing where the PRR command <b>612</b> is send from the host <b>212</b> to the primary node A. More generally, the PRR command <b>612</b> may be sent from any host, such as the host <b>212</b> or <b>214</b>. Additionally, PRR commands <b>612</b> may also be sent by one or more hosts <b>212</b>, <b>214</b> to the secondary node B. In this latter case where a PRR command is received at the node B, the received PRR command may be received by the node B local I/O processing module <b>334</b> which then forwards the PRR command to the module <b>312</b> for processing as described above. In this latter case, the reply or response denoted by <b>638</b> may be sent from the component <b>312</b> to the component <b>334</b>; and the reply or response denoted by <b>640</b> may be sent from the component <b>334</b> to sending host.</p><p id="p-0121" num="0119">Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, shown is a flowchart of processing steps that may be performed by a thread or processing in the second embodiment in accordance with the techniques herein. The flowchart <b>700</b> processing may be performed, for example, by a thread or process traversing a list of LUNs of volumes in the system that may have volume reservation and registration information in the old PRR DB <b>336</b>. In this case, initial synchronization of such information may be performed for the list of LUNs in order to synchronize the contents of the new PRR DB <b>336</b> to include the same information as the old PRR DB <b>316</b>.</p><p id="p-0122" num="0120">At a step <b>702</b>, a variable J may be assigned <b>1</b> (one) denoting the first LUN in the list. From the step <b>702</b>, control proceeds to the step <b>706</b>.</p><p id="p-0123" num="0121">At the step <b>706</b>, processing may be performed to acquire the PRR lock for the LUN J. If PRR lock for LUN J is already taken and thus cannot be acquired at the current time, the request to acquire the PRR lock is temporarily blocked and waits in a queue associated with the PRR lock for LUN J. Consistent with discussion elsewhere herein, responsive to the PRR lock for the LUN J being released, a waiting request on the lock's associated queue is dequeued and signaled to resume processing at the point in execution which triggered the queueing of the request. In connection with <figref idref="DRAWINGS">FIG. <b>8</b></figref>, if a request is dequeued which previously was blocked and placed on the queue at the step <b>706</b>, the request processing may resume with the step <b>706</b> to attempt to now acquire the PRR lock for the LUN J. From the step <b>706</b>, control proceeds to the step <b>708</b>.</p><p id="p-0124" num="0122">At the step <b>708</b>, the central PRR processing module <b>312</b> on the primary node A sends an initial synchronization (synch) message including the PRR information for LUN J to the central PRR processing module <b>332</b> of the secondary node B. From the step <b>708</b>, control proceeds to the step <b>710</b>.</p><p id="p-0125" num="0123">At the step <b>710</b>, the central PRR processing module <b>332</b> of node B received the initial sync message and data and accordingly updates the new PRR DB <b>336</b> and its associated in-memory copy <b>338</b>. In at least one embodiment, the step <b>710</b> may include the module <b>332</b> communicating with the module <b>334</b> to apply the PRR information for LUN J for the initial synchronization to the in-memory copy <b>338</b>. From the step <b>710</b>, control proceeds to the step <b>712</b>.</p><p id="p-0126" num="0124">At the step <b>712</b>, processing may be performed to mark initial synchronization of the volume reservation and registration information for the LUN J as complete. Also in the step <b>712</b>, processing may be performed to release the PRR lock for the LUN J. From the step <b>712</b>, control proceeds to the step <b>714</b> where J is incremented by 1. From the step <b>714</b>, control proceeds to the step <b>716</b> where a determination is made as to whether processing for all LUNs on the list is complete. If the step <b>716</b> evaluates yes, control proceeds to the step <b>718</b> where processing stops. At the step <b>718</b>, it may be determined that the initial synchronization of the old PRR DB <b>316</b> and the new PRR DB <b>336</b> is complete. If the step <b>716</b> evaluates to no, control proceeds to the step <b>704</b> to perform initial synchronization of volume reservation and registration information (e.g., PRR information) for the next LUN J in the list.</p><p id="p-0127" num="0125">In the second embodiment, I/Os may be received by the system <b>210</b> while the initial synchronization of the old PRR DB <b>316</b> and the new PR DB <b>336</b> is ongoing such as prior to completing the processing of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. In at least one embodiment, such I/Os received may be processed using PRR information as included in the old PRR DB <b>316</b> and its corresponding in memory copy <b>318</b>. If the I/O is received at the node B <b>210</b> while the initial synchronization of the old PRR DB <b>316</b> and the new PR DB <b>336</b> is ongoing such as prior to completing the processing of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, an embodiment performing processing as described in connection with <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> may handle the received I/O in any suitable manner. For example, the I/O received at the node B <b>204</b> (secondary) may be forwarded to the node A <b>202</b> (primary) for processing to utilize the PRR information as included in the DB <b>316</b> and/or its in-memory copy <b>318</b>. As a variation in at least one embodiment, the I/O directed to a particular LUN received at the node B may be serviced using the PRR information for the LUN as stored in <b>338</b> and <b>336</b> if initial synchronization of the PRR information for the LUN has been completed. If the initial synchronization of the PRR information for the LUN has not yet completed, the I/O may be conditionally forwarded to the primary node A for processing. The foregoing are some examples of how an embodiment may handle processing of a received I/O while the initial synchronization of the old PRR DB <b>316</b> and the new PR DB <b>336</b> is ongoing such as prior to completing the processing of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. More generally, an embodiment may handle the received I/O in any suitable manner.</p><p id="p-0128" num="0126">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, shown is another flowchart of processing steps that may be performed in an embodiment in accordance with the techniques herein. The flowchart <b>800</b> generally summarizes processing as described above in connection with performing a NDU of software in a dual node appliance or system in at least one embodiment in accordance with the techniques herein.</p><p id="p-0129" num="0127">At a step <b>802</b>, the node A and the node B are running an existing old version of software to be upgraded by the NDU to a newer version. From the step <b>802</b>, control proceeds to the step <b>804</b>.</p><p id="p-0130" num="0128">At the step <b>804</b>, the node B is taken offline, upgraded to run a newer version of the software, restarted and then is back online. While node B is offline and restarting, node A may be online servicing I/Os and commands using the old PRR DB. From the step <b>804</b>, control proceeds to the step <b>806</b>.</p><p id="p-0131" num="0129">At the step <b>806</b>, while node A runs the old version of the software and node B runs the new version of the software, processing may be performed to initially synchronize and copy the information from the old PRR DB on node A to the new PRR DB on node B. While this initial synchronization is performed, registration and reservation commands may be received by both the nodes A and B whereby the registration and reservation commands are all directed for servicing to the central PRR processing of the designated primary node, such as node A, including the old PRR DB. The initial synchronization of the old PRR DB and the new PRR DB may be performed, for example, using the first embodiment of the techniques herein as described in connection with <figref idref="DRAWINGS">FIGS. <b>5</b> and <b>6</b></figref>. The initial synchronization of the old PRR DB and the new PRR DB may be performed, for example, using the second embodiment of the techniques herein as described in connection with <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref>. From the step <b>806</b>, control proceeds to the step <b>808</b>.</p><p id="p-0132" num="0130">At the step <b>808</b>, responsive to completing the initial synchronization of the old PRR DB of node A and the new PRR DB of node B, node A may be upgraded and restarted to run the newer version of the software. While node A is restarting and unavailable to service I/Os and commands, node B may be online servicing received I/Os and commands using the new PRR DB. Once node A has restarted and the upgrade has completed, both the nodes A and B are now running the new software version and may use the new PRR DB and discard the old PRR DB. Both nodes A and B may each include a node local in-memory copy of the new PRR DB used when servicing Ms (e.g., reads and writes). After the upgrade completion, the old PRR DB may not be used. After the upgrade completion, any updates to registration and reservation information for received reservation and registration commands may be made to the new PRR DB and also applied to local in-memory copies of the new PRR DB as may be included in the nodes A and B. In this manner, after the upgrade completion, Ms received by the data storage system or appliance may be serviced using the in-memory copies of the new PRR DB as may be included in the node local memories of the nodes A and B.</p><p id="p-0133" num="0131">The techniques herein may be performed by any suitable hardware and/or software. For example, techniques herein may be performed by executing code which is stored on any one or more different forms of computer-readable media, where the code may be executed by one or more processors, for example, such as processors of a computer or other system, an ASIC (application specific integrated circuit), and the like. Computer-readable media may include different forms of volatile (e.g., RAM) and non-volatile (e.g., ROM, flash memory, magnetic or optical disks, or tape) storage which may be removable or non-removable.</p><p id="p-0134" num="0132">While the invention has been disclosed in connection with embodiments shown and described in detail, their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly, the spirit and scope of the present invention should be limited only by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of processing commands comprising:<claim-text>initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information;</claim-text><claim-text>while initially synchronizing the target database with the source database, enabling volume reservation and registration command processing on both a first node managing the source database and a second node managing the target database;</claim-text><claim-text>while initially synchronizing the target database with the source database, performing first processing to service a first command that is any of a reservation command and a registration command for a first volume; and</claim-text><claim-text>after initially synchronizing the target database with the source database, using the target database of the second node when servicing reservation and registration commands received at both the first node and the second node.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first command is received at the second node and forwarded to the first node for servicing.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first processing includes:<claim-text>acquiring a first lock for reservation and registration information for the first volume, wherein the first lock provides a holder of the first lock with exclusive access to reservation and registration information for the first volume as stored in the source database; and</claim-text><claim-text>responsive to acquiring the first lock for reservation and registration information for the first volume, performing second processing comprising:<claim-text>updating the source database managed by the first node with any of reservation and registration information for the first volume in accordance with the first command.</claim-text></claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the second processing includes updating an in-memory copy of the source database on the first node with any of reservation and registration information for the first volume in accordance with the first command.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the second processing includes:<claim-text>determining whether initial synchronization of the source database and the target database is complete for the first volume; and</claim-text><claim-text>responsive to determining the initial synchronization of the source database and the target database is not complete for the first volume, performing third processing comprising:<claim-text>determining a first update for the target database, wherein the first update includes first volume reservation and registration information in accordance with the first command and includes existing reservation and registration information for the first volume stored in the source database;</claim-text><claim-text>sending the first update from the first node to the second node;</claim-text><claim-text>applying the first update to the target database of the second node and to an in-memory copy of the target database; and</claim-text><claim-text>marking initial synchronization of the source database and the target database as complete for the first volume.</claim-text></claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein responsive to determining the initial synchronization of the source database and the target database is complete for the first volume, performing third processing comprising:<claim-text>determining a second update for the target database, wherein the second update includes the first volume reservation and registration information in accordance with the first command and does not include the existing reservation and registration information for the first volume stored in the source database;</claim-text><claim-text>sending the second update from the first node to the second node; and</claim-text><claim-text>applying the second update to the target database of the second node and to an in-memory copy of the target database.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the first volume is one of a plurality of volumes, the plurality of volumes having a plurality of locks, wherein each of the plurality of volumes has a corresponding one of the plurality of locks that is acquired to obtain exclusive access to volume reservation and registration information in the source database for said each volume, and wherein each of the plurality of locks is associated with one of a plurality of queues that holds requests for said each lock that are blocked waiting to acquire said each lock.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein for each of the plurality of volumes, performing fourth processing comprising:<claim-text>acquiring one of the plurality of locks for said each volume;</claim-text><claim-text>determining whether initial synchronization of the source database and the target database is complete for the said each volume;</claim-text><claim-text>responsive to determining the initial synchronization of the source database and the target database is not complete for said each volume, performing fifth processing comprising:<claim-text>determining a corresponding update for the target database, wherein the corresponding update includes existing reservation and registration information for said each volume stored in the source database;</claim-text><claim-text>sending the corresponding update from the first node to the second node;</claim-text><claim-text>applying the corresponding update to the target database of the second node and to an in-memory copy of the target database; and</claim-text><claim-text>marking initial synchronization of the source database and the target database as complete for said each volume; and</claim-text></claim-text><claim-text>releasing said one lock for said each volume.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the first processing includes:<claim-text>determining whether the first lock for reservation and registration information for the first volume is taken; and</claim-text><claim-text>responsive to determining the first lock is taken, placing a first request for the first lock in a first queue associated with the first lock, wherein the first request is associated with the first command.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, further comprising:<claim-text>responsive to releasing the first lock, selecting the first request of the first queue for processing and performing said acquiring of the first lock for reservation and registration information for the first volume.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein said initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information are performed as part of an upgrade process that upgrades software of the first node and the second node.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the second processing includes:<claim-text>determining whether initial synchronization of the source database and the target database is complete for the first volume;</claim-text><claim-text>responsive to determining the initial synchronization of the source database and the target database is complete for the first volume, performing third processing comprising:<claim-text>determining a first update for the target database, wherein the first update includes first volume reservation and registration information in accordance with the first command;</claim-text><claim-text>sending the first update from the first node to the second node;</claim-text><claim-text>applying the first update to the target database of the second node and to an in-memory copy of the target database; and</claim-text></claim-text><claim-text>releasing the first lock.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first volume is one of a plurality of volumes, the plurality of volumes having a plurality of locks, wherein each of the plurality of volumes has a corresponding one of the plurality of locks that is acquired to obtain exclusive access to volume reservation and registration information in the source database for said each volume, and wherein each of the plurality of locks is associated with one of a plurality of queues that holds requests for said each lock that are blocked waiting to acquire said each lock.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein for each of the plurality of volumes, performing fourth processing comprising:<claim-text>acquiring one of the plurality of locks for said each volume;</claim-text><claim-text>determining a corresponding update for the target database, wherein the corresponding update includes existing reservation and registration information for said each volume stored in the source database;</claim-text><claim-text>sending the corresponding update from the first node to the second node;</claim-text><claim-text>applying the corresponding update to the target database of the second node and to an in-memory copy of the target database; and</claim-text><claim-text>marking initial synchronization of the source database and the target database as complete for said each volume; and</claim-text><claim-text>releasing said one lock for said each volume.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A system comprising:<claim-text>one or more processors; and</claim-text><claim-text>one or more memories comprising code stored thereon that, when executed, performs a method of processing commands comprising:<claim-text>initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information;</claim-text><claim-text>while initially synchronizing the target database with the source database, enabling volume reservation and registration command processing on both a first node managing the source database and a second node managing the target database;</claim-text><claim-text>while initially synchronizing the target database with the source database, performing first processing to service a first command that is any of a reservation command and a registration command for a first volume; and</claim-text><claim-text>after initially synchronizing the target database with the source database, using the target database of the second node when servicing reservation and registration commands received at both the first node and the second node.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A computer readable medium comprising code stored thereon that, when executed, performs a method of processing commands comprising:<claim-text>initially synchronizing a target database of volume reservation and registration information with a source database of volume reservation and registration information;</claim-text><claim-text>while initially synchronizing the target database with the source database, enabling volume reservation and registration command processing on both a first node managing the source database and a second node managing the target database;</claim-text><claim-text>while initially synchronizing the target database with the source database, performing first processing to service a first command that is any of a reservation command and a registration command for a first volume; and</claim-text><claim-text>after initially synchronizing the target database with the source database, using the target database of the second node when servicing reservation and registration commands received at both the first node and the second node.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first command is received at the second node and forwarded to the first node for servicing.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer readable medium of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the first processing includes:<claim-text>acquiring a first lock for reservation and registration information for the first volume, wherein the first lock provides a holder of the first lock with exclusive access to reservation and registration information for the first volume as stored in the source database; and</claim-text><claim-text>responsive to acquiring the first lock for reservation and registration information for the first volume, performing second processing comprising:<claim-text>updating the source database managed by the first node with any of reservation and registration information for the first volume in accordance with the first command.</claim-text></claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the second processing includes updating an in-memory copy of the source database on the first node with any of reservation and registration information for the first volume in accordance with the first command.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The computer readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the second processing includes:<claim-text>determining whether initial synchronization of the source database and the target database is complete for the first volume;</claim-text><claim-text>responsive to determining the initial synchronization of the source database and the target database is not complete for the first volume, performing third processing comprising:<claim-text>determining a first update for the target database, wherein the first update includes first volume reservation and registration information in accordance with the first command and includes existing reservation and registration information for the first volume stored in the source database;</claim-text><claim-text>sending the first update from the first node to the second node;</claim-text><claim-text>applying the first update to the target database of the second node and to an in-memory copy of the target database; and</claim-text><claim-text>marking initial synchronization of the source database and the target database as complete for the first volume.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>