<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004330A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004330</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931418</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0664</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0653</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5077</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0619</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0631</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Sizing A Virtual Storage System</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16842427</doc-number><date>20200407</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11442669</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931418</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>16353775</doc-number><date>20190314</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10976962</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16842427</doc-number></document-id></child-doc></relation></continuation-in-part><us-provisional-application><document-id><country>US</country><doc-number>62838738</doc-number><date>20190425</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62769277</doc-number><date>20181119</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62768952</doc-number><date>20181118</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62692602</doc-number><date>20180629</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62643641</doc-number><date>20180315</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>FRANDZEL</last-name><first-name>YUVAL</first-name><address><city>FOSTER CITY</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>NEELAKANTAM</last-name><first-name>NAVEEN</first-name><address><city>MOUNTAIN VIEW</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Sizing a virtual storage system, including: determining a change to one or more resource demands; determining, based on the change to the one or more resource demands, one or more modifications to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system within a cloud computing environment; and initiating, responsive to the change to the one or more resource demands, the one or more modifications to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system, including replacing one or more of the virtual components with a higher performance virtual component.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.64mm" wi="158.75mm" file="US20230004330A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.23mm" wi="169.42mm" orientation="landscape" file="US20230004330A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.27mm" wi="148.00mm" orientation="landscape" file="US20230004330A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.60mm" wi="144.36mm" orientation="landscape" file="US20230004330A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.96mm" wi="163.07mm" orientation="landscape" file="US20230004330A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.82mm" wi="136.06mm" orientation="landscape" file="US20230004330A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.71mm" wi="148.00mm" orientation="landscape" file="US20230004330A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.90mm" wi="168.99mm" file="US20230004330A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="186.10mm" wi="172.30mm" file="US20230004330A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="214.71mm" wi="159.09mm" orientation="landscape" file="US20230004330A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="224.62mm" wi="171.53mm" file="US20230004330A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.79mm" wi="155.36mm" file="US20230004330A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="199.31mm" wi="139.28mm" file="US20230004330A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="242.15mm" wi="169.59mm" file="US20230004330A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="139.87mm" wi="122.09mm" file="US20230004330A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="243.76mm" wi="168.99mm" file="US20230004330A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="196.26mm" wi="168.99mm" file="US20230004330A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="240.54mm" wi="168.99mm" file="US20230004330A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="232.66mm" wi="168.99mm" file="US20230004330A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="234.27mm" wi="168.99mm" file="US20230004330A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="235.88mm" wi="168.99mm" file="US20230004330A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="239.01mm" wi="169.25mm" file="US20230004330A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="242.23mm" wi="168.99mm" file="US20230004330A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="243.59mm" wi="170.77mm" file="US20230004330A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="243.59mm" wi="173.14mm" file="US20230004330A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="256.46mm" wi="172.13mm" file="US20230004330A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="258.66mm" wi="171.28mm" orientation="landscape" file="US20230004330A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="230.29mm" wi="174.07mm" orientation="landscape" file="US20230004330A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="239.18mm" wi="169.25mm" orientation="landscape" file="US20230004330A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="238.68mm" wi="169.25mm" file="US20230004330A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="230.97mm" wi="166.79mm" file="US20230004330A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="246.89mm" wi="168.99mm" file="US20230004330A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This is a continuation application for patent entitled to a filing date and claiming the benefit of earlier-filed U.S. Pat. No. 11,442,669, issued Sep. 13, 2022, herein incorporated by reference in its entirety, which claims priority from U.S. Provisional Patent Application No. 62/838,738, filed Apr. 25, 2019, and is a continuation in-part of U.S. Pat. No. 10,976,962, issued Apr. 13, 2021, which claims priority from U.S. Provisional Patent Application No. 62/769,277, filed Nov. 19, 2018, U.S. Provisional Patent Application No. 62/768,952, filed Nov. 18, 2018, U.S. Provisional Patent Application No. 62/692,602, filed Jun. 29, 2018, and U.S. Provisional Patent Application 62/643,641, filed Mar. 15, 2018.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0003" num="0002"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates a first example system for data storage in accordance with some implementations.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates a second example system for data storage in accordance with some implementations.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system for data storage in accordance with some implementations.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a fourth example system for data storage in accordance with some implementations.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster with multiple storage nodes and internal storage coupled to each storage node to provide network attached storage, in accordance with some embodiments.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing an interconnect switch coupling multiple storage nodes in accordance with some embodiments.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node and contents of one of the non-volatile solid state storage units in accordance with some embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes and storage units of some previous figures in accordance with some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade hardware block diagram, showing a control plane, compute and storage planes, and authorities interacting with underlying physical resources, in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities and storage resources in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system that is coupled for data communications with a cloud services provider in accordance with some embodiments of the present disclosure.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device that may be specifically configured to perform one or more of the processes described herein.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth an example of a cloud-based storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth an example of an additional cloud-based storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an example method of servicing I/O operations in a cloud-based storage system.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an example method of servicing I/O operations in a cloud-based storage system.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>10</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>11</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example virtual storage system architecture in accordance with some embodiments of the present disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an additional example virtual storage system architecture in accordance with some embodiments of the present disclosure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates an additional example virtual storage system architecture in accordance with some embodiments of the present disclosure.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates an additional example virtual storage system architecture in accordance with some embodiments of the present disclosure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates an additional example virtual storage system architecture in accordance with some embodiments of the present disclosure.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>17</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a virtual storage system.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>18</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a virtual storage system.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates an exemplary computing environment that may be specifically configured to implement orchestrating a virtual storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>20</b></figref> sets forth a flowchart illustrating an example method of orchestrating a virtual storage system in accordance with some embodiments of the present disclosure.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0035" num="0034">Example methods, apparatus, and products for orchestrating a virtual storage system in accordance with embodiments of the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates an example system for data storage, in accordance with some implementations. System <b>100</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>100</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0036" num="0035">System <b>100</b> includes a number of computing devices <b>164</b>A-B. Computing devices (also referred to as &#x201c;client devices&#x201d; herein) may be embodied, for example, a server in a data center, a workstation, a personal computer, a notebook, or the like. Computing devices <b>164</b>A-B may be coupled for data communications to one or more storage arrays <b>102</b>A-B through a storage area network (&#x2018;SAN&#x2019;) <b>158</b> or a local area network (&#x2018;LAN&#x2019;) <b>160</b>.</p><p id="p-0037" num="0036">The SAN <b>158</b> may be implemented with a variety of data communications fabrics, devices, and protocols. For example, the fabrics for SAN <b>158</b> may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (&#x2018;SAS&#x2019;), or the like. Data communications protocols for use with SAN <b>158</b> may include Advanced Technology Attachment (&#x2018;ATA&#x2019;), Fibre Channel Protocol, Small Computer System Interface (&#x2018;SCSI&#x2019;), Internet Small Computer System Interface (&#x2018;iSCSI&#x2019;), HyperSCSI, Non-Volatile Memory Express (&#x2018;NVMe&#x2019;) over Fabrics, or the like. It may be noted that SAN <b>158</b> is provided for illustration, rather than limitation. Other data communication couplings may be implemented between computing devices <b>164</b>A-B and storage arrays <b>102</b>A-B.</p><p id="p-0038" num="0037">The LAN <b>160</b> may also be implemented with a variety of fabrics, devices, and protocols. For example, the fabrics for LAN <b>160</b> may include Ethernet (<b>802</b>.<b>3</b>), wireless (<b>802</b>.<b>11</b>), or the like. Data communication protocols for use in LAN <b>160</b> may include Transmission Control Protocol (&#x2018;TCP&#x2019;), User Datagram Protocol (&#x2018;UDP&#x2019;), Internet Protocol (&#x2018;IP&#x2019;), HyperText Transfer Protocol (&#x2018;HTTP&#x2019;), Wireless Access Protocol (&#x2018;WAP&#x2019;), Handheld Device Transport Protocol (&#x2018;HDTP&#x2019;), Session Initiation Protocol (&#x2018;SIP&#x2019;), Real Time Protocol (&#x2018;RTP&#x2019;), or the like.</p><p id="p-0039" num="0038">Storage arrays <b>102</b>A-B may provide persistent data storage for the computing devices <b>164</b>A-B. Storage array <b>102</b>A may be contained in a chassis (not shown), and storage array <b>102</b>B may be contained in another chassis (not shown), in implementations. Storage array <b>102</b>A and <b>102</b>B may include one or more storage array controllers <b>110</b>A-D (also referred to as &#x201c;controller&#x201d; herein). A storage array controller <b>110</b>A-D may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. In some implementations, the storage array controllers <b>110</b>A-D may be configured to carry out various storage tasks. Storage tasks may include writing data received from the computing devices <b>164</b>A-B to storage array <b>102</b>A-B, erasing data from storage array <b>102</b>A-B, retrieving data from storage array <b>102</b>A-B and providing data to computing devices <b>164</b>A-B, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (&#x2018;RAID&#x2019;) or RAID-like data redundancy operations, compressing data, encrypting data, and so forth.</p><p id="p-0040" num="0039">Storage array controller <b>110</b>A-D may be implemented in a variety of ways, including as a Field Programmable Gate Array (&#x2018;FPGA&#x2019;), a Programmable Logic Chip (&#x2018;PLC&#x2019;), an Application Specific Integrated Circuit (&#x2018;ASIC&#x2019;), System-on-Chip (&#x2018;SOC&#x2019;), or any computing device that includes discrete components such as a processing device, central processing unit, computer memory, or various adapters. Storage array controller <b>110</b>A-D may include, for example, a data communications adapter configured to support communications via the SAN <b>158</b> or LAN <b>160</b>. In some implementations, storage array controller <b>110</b>A-D may be independently coupled to the LAN <b>160</b>. In implementations, storage array controller <b>110</b>A-D may include an I/O controller or the like that couples the storage array controller <b>110</b>A-D for data communications, through a midplane (not shown), to a persistent storage resource <b>170</b>A-B (also referred to as a &#x201c;storage resource&#x201d; herein). The persistent storage resource <b>170</b>A-B main include any number of storage drives <b>171</b>A-F (also referred to as &#x201c;storage devices&#x201d; herein) and any number of non-volatile Random Access Memory (&#x2018;NVRAM&#x2019;) devices (not shown).</p><p id="p-0041" num="0040">In some implementations, the NVRAM devices of a persistent storage resource <b>170</b>A-B may be configured to receive, from the storage array controller <b>110</b>A-D, data to be stored in the storage drives <b>171</b>A-F. In some examples, the data may originate from computing devices <b>164</b>A-B. In some examples, writing data to the NVRAM device may be carried out more quickly than directly writing data to the storage drive <b>171</b>A-F. In implementations, the storage array controller <b>110</b>A-D may be configured to utilize the NVRAM devices as a quickly accessible buffer for data destined to be written to the storage drives <b>171</b>A-F. Latency for write requests using NVRAM devices as a buffer may be improved relative to a system in which a storage array controller <b>110</b>A-D writes data directly to the storage drives <b>171</b>A-F. In some implementations, the NVRAM devices may be implemented with computer memory in the form of high bandwidth, low latency RAM. The NVRAM device is referred to as &#x201c;non-volatile&#x201d; because the NVRAM device may receive or include a unique power source that maintains the state of the RAM after main power loss to the NVRAM device. Such a power source may be a battery, one or more capacitors, or the like. In response to a power loss, the NVRAM device may be configured to write the contents of the RAM to a persistent storage, such as the storage drives <b>171</b>A-F.</p><p id="p-0042" num="0041">In implementations, storage drive <b>171</b>A-F may refer to any device configured to record data persistently, where &#x201c;persistently&#x201d; or &#x201c;persistent&#x201d; refers as to a device's ability to maintain recorded data after loss of power. In some implementations, storage drive <b>171</b>A-F may correspond to non-disk storage media. For example, the storage drive <b>171</b>A-F may be one or more solid-state drives (&#x2018;SSDs&#x2019;), flash memory based storage, any type of solid-state non-volatile memory, or any other type of non-mechanical storage device. In other implementations, storage drive <b>171</b>A-F may include mechanical or spinning hard disk, such as hard-disk drives (&#x2018;HDD&#x2019;).</p><p id="p-0043" num="0042">In some implementations, the storage array controllers <b>110</b>A-D may be configured for offloading device management responsibilities from storage drive <b>171</b>A-F in storage array <b>102</b>A-B. For example, storage array controllers <b>110</b>A-D may manage control information that may describe the state of one or more memory blocks in the storage drives <b>171</b>A-F. The control information may indicate, for example, that a particular memory block has failed and should no longer be written to, that a particular memory block contains boot code for a storage array controller <b>110</b>A-D, the number of program-erase (&#x2018;P/E&#x2019;) cycles that have been performed on a particular memory block, the age of data stored in a particular memory block, the type of data that is stored in a particular memory block, and so forth. In some implementations, the control information may be stored with an associated memory block as metadata. In other implementations, the control information for the storage drives <b>171</b>A-F may be stored in one or more particular memory blocks of the storage drives <b>171</b>A-F that are selected by the storage array controller <b>110</b>A-D. The selected memory blocks may be tagged with an identifier indicating that the selected memory block contains control information. The identifier may be utilized by the storage array controllers <b>110</b>A-D in conjunction with storage drives <b>171</b>A-F to quickly identify the memory blocks that contain control information. For example, the storage controllers <b>110</b>A-D may issue a command to locate memory blocks that contain control information. It may be noted that control information may be so large that parts of the control information may be stored in multiple locations, that the control information may be stored in multiple locations for purposes of redundancy, for example, or that the control information may otherwise be distributed across multiple memory blocks in the storage drive <b>171</b>A-F.</p><p id="p-0044" num="0043">In implementations, storage array controllers <b>110</b>A-D may offload device management responsibilities from storage drives <b>171</b>A-F of storage array <b>102</b>A-B by retrieving, from the storage drives <b>171</b>A-F, control information describing the state of one or more memory blocks in the storage drives <b>171</b>A-F. Retrieving the control information from the storage drives <b>171</b>A-F may be carried out, for example, by the storage array controller <b>110</b>A-D querying the storage drives <b>171</b>A-F for the location of control information for a particular storage drive <b>171</b>A-F. The storage drives <b>171</b>A-F may be configured to execute instructions that enable the storage drive <b>171</b>A-F to identify the location of the control information. The instructions may be executed by a controller (not shown) associated with or otherwise located on the storage drive <b>171</b>A-F and may cause the storage drive <b>171</b>A-F to scan a portion of each memory block to identify the memory blocks that store control information for the storage drives <b>171</b>A-F. The storage drives <b>171</b>A-F may respond by sending a response message to the storage array controller <b>110</b>A-D that includes the location of control information for the storage drive <b>171</b>A-F. Responsive to receiving the response message, storage array controllers <b>110</b>A-D may issue a request to read data stored at the address associated with the location of control information for the storage drives <b>171</b>A-F.</p><p id="p-0045" num="0044">In other implementations, the storage array controllers <b>110</b>A-D may further offload device management responsibilities from storage drives <b>171</b>A-F by performing, in response to receiving the control information, a storage drive management operation. A storage drive management operation may include, for example, an operation that is typically performed by the storage drive <b>171</b>A-F (e.g., the controller (not shown) associated with a particular storage drive <b>171</b>A-F). A storage drive management operation may include, for example, ensuring that data is not written to failed memory blocks within the storage drive <b>171</b>A-F, ensuring that data is written to memory blocks within the storage drive <b>171</b>A-F in such a way that adequate wear leveling is achieved, and so forth.</p><p id="p-0046" num="0045">In implementations, storage array <b>102</b>A-B may implement two or more storage array controllers <b>110</b>A-D. For example, storage array <b>102</b>A may include storage array controllers <b>110</b>A and storage array controllers <b>110</b>B. At a given instance, a single storage array controller <b>110</b>A-D (e.g., storage array controller <b>110</b>A) of a storage system <b>100</b> may be designated with primary status (also referred to as &#x201c;primary controller&#x201d; herein), and other storage array controllers <b>110</b>A-D (e.g., storage array controller <b>110</b>A) may be designated with secondary status (also referred to as &#x201c;secondary controller&#x201d; herein). The primary controller may have particular rights, such as permission to alter data in persistent storage resource <b>170</b>A-B (e.g., writing data to persistent storage resource <b>170</b>A-B). At least some of the rights of the primary controller may supersede the rights of the secondary controller. For instance, the secondary controller may not have permission to alter data in persistent storage resource <b>170</b>A-B when the primary controller has the right. The status of storage array controllers <b>110</b>A-D may change. For example, storage array controller <b>110</b>A may be designated with secondary status, and storage array controller <b>110</b>B may be designated with primary status.</p><p id="p-0047" num="0046">In some implementations, a primary controller, such as storage array controller <b>110</b>A, may serve as the primary controller for one or more storage arrays <b>102</b>A-B, and a second controller, such as storage array controller <b>110</b>B, may serve as the secondary controller for the one or more storage arrays <b>102</b>A-B. For example, storage array controller <b>110</b>A may be the primary controller for storage array <b>102</b>A and storage array <b>102</b>B, and storage array controller <b>110</b>B may be the secondary controller for storage array <b>102</b>A and <b>102</b>B. In some implementations, storage array controllers <b>110</b>C and <b>110</b>D (also referred to as &#x201c;storage processing modules&#x201d;) may neither have primary or secondary status. Storage array controllers <b>110</b>C and <b>110</b>D, implemented as storage processing modules, may act as a communication interface between the primary and secondary controllers (e.g., storage array controllers <b>110</b>A and <b>110</b>B, respectively) and storage array <b>102</b>B. For example, storage array controller <b>110</b>A of storage array <b>102</b>A may send a write request, via SAN <b>158</b>, to storage array <b>102</b>B. The write request may be received by both storage array controllers <b>110</b>C and <b>110</b>D of storage array <b>102</b>B. Storage array controllers <b>110</b>C and <b>110</b>D facilitate the communication, e.g., send the write request to the appropriate storage drive <b>171</b>A-F. It may be noted that in some implementations storage processing modules may be used to increase the number of storage drives controlled by the primary and secondary controllers.</p><p id="p-0048" num="0047">In implementations, storage array controllers <b>110</b>A-D are communicatively coupled, via a midplane (not shown), to one or more storage drives <b>171</b>A-F and to one or more NVRAM devices (not shown) that are included as part of a storage array <b>102</b>A-B. The storage array controllers <b>110</b>A-D may be coupled to the midplane via one or more data communication links and the midplane may be coupled to the storage drives <b>171</b>A-F and the NVRAM devices via one or more data communications links. The data communications links described herein are collectively illustrated by data communications links <b>108</b>A-D and may include a Peripheral Component Interconnect Express (&#x2018;PCIe&#x2019;) bus, for example.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example system for data storage, in accordance with some implementations. Storage array controller <b>101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may be similar to the storage array controllers <b>110</b>A-D described with respect to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In one example, storage array controller <b>101</b> may be similar to storage array controller <b>110</b>A or storage array controller <b>110</b>B. Storage array controller <b>101</b> includes numerous elements for purposes of illustration rather than limitation. It may be noted that storage array controller <b>101</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations. It may be noted that elements of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may be included below to help illustrate features of storage array controller <b>101</b>.</p><p id="p-0050" num="0049">Storage array controller <b>101</b> may include one or more processing devices <b>104</b> and random access memory (&#x2018;RAM&#x2019;) <b>111</b>. Processing device <b>104</b> (or controller <b>101</b>) represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>104</b> (or controller <b>101</b>) may be a complex instruction set computing (&#x2018;CISC&#x2019;) microprocessor, reduced instruction set computing (&#x2018;RISC&#x2019;) microprocessor, very long instruction word (&#x2018;VLIW&#x2019;) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device <b>104</b> (or controller <b>101</b>) may also be one or more special-purpose processing devices such as an ASIC, an FPGA, a digital signal processor (&#x2018;DSP&#x2019;), network processor, or the like.</p><p id="p-0051" num="0050">The processing device <b>104</b> may be connected to the RAM <b>111</b> via a data communications link <b>106</b>, which may be embodied as a high speed memory bus such as a Double-Data Rate 4 (&#x2018;DDR4&#x2019;) bus. Stored in RAM <b>111</b> is an operating system <b>112</b>. In some implementations, instructions <b>113</b> are stored in RAM <b>111</b>. Instructions <b>113</b> may include computer program instructions for performing operations in in a direct-mapped flash storage system. In one embodiment, a direct-mapped flash storage system is one that that addresses data blocks within flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0052" num="0051">In implementations, storage array controller <b>101</b> includes one or more host bus adapters <b>103</b>A-C that are coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C. In implementations, host bus adapters <b>103</b>A-C may be computer hardware that connects a host system (e.g., the storage array controller) to other network and storage arrays. In some examples, host bus adapters <b>103</b>A-C may be a Fibre Channel adapter that enables the storage array controller <b>101</b> to connect to a SAN, an Ethernet adapter that enables the storage array controller <b>101</b> to connect to a LAN, or the like. Host bus adapters <b>103</b>A-C may be coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C such as, for example, a PCIe bus.</p><p id="p-0053" num="0052">In implementations, storage array controller <b>101</b> may include a host bus adapter <b>114</b> that is coupled to an expander <b>115</b>. The expander <b>115</b> may be used to attach a host system to a larger number of storage drives. The expander <b>115</b> may, for example, be a SAS expander utilized to enable the host bus adapter <b>114</b> to attach to storage drives in an implementation where the host bus adapter <b>114</b> is embodied as a SAS controller.</p><p id="p-0054" num="0053">In implementations, storage array controller <b>101</b> may include a switch <b>116</b> coupled to the processing device <b>104</b> via a data communications link <b>109</b>. The switch <b>116</b> may be a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share a single endpoint. The switch <b>116</b> may, for example, be a PCIe switch that is coupled to a PCIe bus (e.g., data communications link <b>109</b>) and presents multiple PCIe connection points to the midplane.</p><p id="p-0055" num="0054">In implementations, storage array controller <b>101</b> includes a data communications link <b>107</b> for coupling the storage array controller <b>101</b> to other storage array controllers. In some examples, data communications link <b>107</b> may be a QuickPath Interconnect (QPI) interconnect.</p><p id="p-0056" num="0055">A traditional storage system that uses traditional flash drives may implement a process across the flash drives that are part of the traditional storage system. For example, a higher level process of the storage system may initiate and control a process across the flash drives. However, a flash drive of the traditional storage system may include its own storage controller that also performs the process. Thus, for the traditional storage system, a higher level process (e.g., initiated by the storage system) and a lower level process (e.g., initiated by a storage controller of the storage system) may both be performed.</p><p id="p-0057" num="0056">To resolve various deficiencies of a traditional storage system, operations may be performed by higher level processes and not by the lower level processes. For example, the flash storage system may include flash drives that do not include storage controllers that provide the process. Thus, the operating system of the flash storage system itself may initiate and control the process. This may be accomplished by a direct-mapped flash storage system that addresses data blocks within the flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0058" num="0057">The operating system of the flash storage system may identify and maintain a list of allocation units across multiple flash drives of the flash storage system. The allocation units may be entire erase blocks or multiple erase blocks. The operating system may maintain a map or address range that directly maps addresses to erase blocks of the flash drives of the flash storage system.</p><p id="p-0059" num="0058">Direct mapping to the erase blocks of the flash drives may be used to rewrite data and erase data. For example, the operations may be performed on one or more allocation units that include a first data and a second data where the first data is to be retained and the second data is no longer being used by the flash storage system. The operating system may initiate the process to write the first data to new locations within other allocation units and erasing the second data and marking the allocation units as being available for use for subsequent data. Thus, the process may only be performed by the higher level operating system of the flash storage system without an additional lower level process being performed by controllers of the flash drives.</p><p id="p-0060" num="0059">Advantages of the process being performed only by the operating system of the flash storage system include increased reliability of the flash drives of the flash storage system as unnecessary or redundant write operations are not being performed during the process. One possible point of novelty here is the concept of initiating and controlling the process at the operating system of the flash storage system. In addition, the process can be controlled by the operating system across multiple flash drives. This is contrast to the process being performed by a storage controller of a flash drive.</p><p id="p-0061" num="0060">A storage system can consist of two storage array controllers that share a set of drives for failover purposes, or it could consist of a single storage array controller that provides a storage service that utilizes multiple drives, or it could consist of a distributed network of storage array controllers each with some number of drives or some amount of Flash storage where the storage array controllers in the network collaborate to provide a complete storage service and collaborate on various aspects of a storage service including storage allocation and garbage collection.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system <b>117</b> for data storage in accordance with some implementations. System <b>117</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>117</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0063" num="0062">In one embodiment, system <b>117</b> includes a dual Peripheral Component Interconnect (PCP) flash storage device <b>118</b> with separately addressable fast write storage. System <b>117</b> may include a storage controller <b>119</b>. In one embodiment, storage controller <b>119</b>A-D may be a CPU, ASIC, FPGA, or any other circuitry that may implement control structures necessary according to the present disclosure. In one embodiment, system <b>117</b> includes flash memory devices (e.g., including flash memory devices <b>120</b><i>a</i>-<i>n</i>), operatively coupled to various channels of the storage device controller <b>119</b>. Flash memory devices <b>120</b><i>a</i>-<i>n</i>, may be presented to the controller <b>119</b>A-D as an addressable collection of Flash pages, erase blocks, and/or control elements sufficient to allow the storage device controller <b>119</b>A-D to program and retrieve various aspects of the Flash. In one embodiment, storage device controller <b>119</b>A-D may perform operations on flash memory devices <b>120</b><i>a</i>-<i>n </i>including storing and retrieving data content of pages, arranging and erasing any blocks, tracking statistics related to the use and reuse of Flash memory pages, erase blocks, and cells, tracking and predicting error codes and faults within the Flash memory, controlling voltage levels associated with programming and retrieving contents of Flash cells, etc.</p><p id="p-0064" num="0063">In one embodiment, system <b>117</b> may include RAM <b>121</b> to store separately addressable fast-write data. In one embodiment, RAM <b>121</b> may be one or more separate discrete devices. In another embodiment, RAM <b>121</b> may be integrated into storage device controller <b>119</b>A-D or multiple storage device controllers. The RAM <b>121</b> may be utilized for other purposes as well, such as temporary program memory for a processing device (e.g., a CPU) in the storage device controller <b>119</b>.</p><p id="p-0065" num="0064">In one embodiment, system <b>117</b> may include a stored energy device <b>122</b>, such as a rechargeable battery or a capacitor. Stored energy device <b>122</b> may store energy sufficient to power the storage device controller <b>119</b>, some amount of the RAM (e.g., RAM <b>121</b>), and some amount of Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<b>120</b><i>n</i>) for sufficient time to write the contents of RAM to Flash memory. In one embodiment, storage device controller <b>119</b>A-D may write the contents of RAM to Flash Memory if the storage device controller detects loss of external power.</p><p id="p-0066" num="0065">In one embodiment, system <b>117</b> includes two data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>. In one embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be PCI interfaces. In another embodiment, data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Data communications links <b>123</b><i>a</i>, <b>123</b><i>b </i>may be based on non-volatile memory express (&#x2018;NVMe&#x2019;) or NVMe over fabrics (&#x2018;NVMf&#x2019;) specifications that allow external connection to the storage device controller <b>119</b>A-D from other components in the storage system <b>117</b>. It should be noted that data communications links may be interchangeably referred to herein as PCI buses for convenience.</p><p id="p-0067" num="0066">System <b>117</b> may also include an external power source (not shown), which may be provided over one or both data communications links <b>123</b><i>a</i>, <b>123</b><i>b</i>, or which may be provided separately. An alternative embodiment includes a separate Flash memory (not shown) dedicated for use in storing the content of RAM <b>121</b>. The storage device controller <b>119</b>A-D may present a logical device over a PCI bus which may include an addressable fast-write logical device, or a distinct part of the logical address space of the storage device <b>118</b>, which may be presented as PCI memory or as persistent storage. In one embodiment, operations to store into the device are directed into the RAM <b>121</b>. On power failure, the storage device controller <b>119</b>A-D may write stored content associated with the addressable fast-write logical storage to Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<i>n</i>) for long-term persistent storage.</p><p id="p-0068" num="0067">In one embodiment, the logical device may include some presentation of some or all of the content of the Flash memory devices <b>120</b><i>a</i>-<i>n</i>, where that presentation allows a storage system including a storage device <b>118</b> (e.g., storage system <b>117</b>) to directly address Flash memory pages and directly reprogram erase blocks from storage system components that are external to the storage device through the PCI bus. The presentation may also allow one or more of the external components to control and retrieve other aspects of the Flash memory including some or all of: tracking statistics related to use and reuse of Flash memory pages, erase blocks, and cells across all the Flash memory devices; tracking and predicting error codes and faults within and across the Flash memory devices; controlling voltage levels associated with programming and retrieving contents of Flash cells; etc.</p><p id="p-0069" num="0068">In one embodiment, the stored energy device <b>122</b> may be sufficient to ensure completion of in-progress operations to the Flash memory devices <b>120</b><i>a</i>-<b>120</b><i>n </i>stored energy device <b>122</b> may power storage device controller <b>119</b>A-D and associated Flash memory devices (e.g., <b>120</b><i>a</i>-<i>n</i>) for those operations, as well as for the storing of fast-write RAM to Flash memory. Stored energy device <b>122</b> may be used to store accumulated statistics and other parameters kept and tracked by the Flash memory devices <b>120</b><i>a</i>-<i>n </i>and/or the storage device controller <b>119</b>. Separate capacitors or stored energy devices (such as smaller capacitors near or embedded within the Flash memory devices themselves) may be used for some or all of the operations described herein.</p><p id="p-0070" num="0069">Various schemes may be used to track and optimize the life span of the stored energy component, such as adjusting voltage levels over time, partially discharging the storage energy device <b>122</b> to measure corresponding discharge characteristics, etc. If the available energy decreases over time, the effective available capacity of the addressable fast-write storage may be decreased to ensure that it can be written safely based on the currently available stored energy.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a third example system <b>124</b> for data storage in accordance with some implementations. In one embodiment, system <b>124</b> includes storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>are operatively coupled to Dual PCI storage devices <b>119</b><i>a</i>, <b>119</b><i>b </i>and <b>119</b><i>c</i>, <b>119</b><i>d</i>, respectively. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may be operatively coupled (e.g., via a storage network <b>130</b>) to some number of host computers <b>127</b><i>a</i>-<i>n. </i></p><p id="p-0072" num="0071">In one embodiment, two storage controllers (e.g., <b>125</b><i>a </i>and <b>125</b><i>b</i>) provide storage services, such as a SCS) block storage array, a file server, an object server, a database or data analytics service, etc. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide services through some number of network interfaces (e.g., <b>126</b><i>a</i>-<i>d</i>) to host computers <b>127</b><i>a</i>-<i>n </i>outside of the storage system <b>124</b>. Storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide integrated services or an application entirely within the storage system <b>124</b>, forming a converged storage and compute system. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may utilize the fast write memory within or across storage devices <b>119</b><i>a</i>-<i>d </i>to journal in progress operations to ensure the operations are not lost on a power failure, storage controller removal, storage controller or storage system shutdown, or some fault of one or more software or hardware components within the storage system <b>124</b>.</p><p id="p-0073" num="0072">In one embodiment, controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>operate as PCI masters to one or the other PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. In another embodiment, <b>128</b><i>a </i>and <b>128</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Other storage system embodiments may operate storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>as multi-masters for both PCI buses <b>128</b><i>a</i>, <b>128</b><i>b</i>. Alternately, a PCI/NVMe/NVMf switching infrastructure or fabric may connect multiple storage controllers. Some storage system embodiments may allow storage devices to communicate with each other directly rather than communicating only with storage controllers. In one embodiment, a storage device controller <b>119</b><i>a </i>may be operable under direction from a storage controller <b>125</b><i>a </i>to synthesize and transfer data to be stored into Flash memory devices from data that has been stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>). For example, a recalculated version of RAM content may be transferred after a storage controller has determined that an operation has fully committed across the storage system, or when fast-write memory on the device has reached a certain used capacity, or after a certain amount of time, to ensure improve safety of the data or to release addressable fast-write capacity for reuse. This mechanism may be used, for example, to avoid a second transfer over a bus (e.g., <b>128</b><i>a</i>, <b>128</b><i>b</i>) from the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. In one embodiment, a recalculation may include compressing data, attaching indexing or other metadata, combining multiple data segments together, performing erasure code calculations, etc.</p><p id="p-0074" num="0073">In one embodiment, under direction from a storage controller <b>125</b><i>a</i>, <b>125</b><i>b</i>, a storage device controller <b>119</b><i>a</i>, <b>119</b><i>b </i>may be operable to calculate and transfer data to other storage devices from data stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>) without involvement of the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b</i>. This operation may be used to mirror data stored in one controller <b>125</b><i>a </i>to another controller <b>125</b><i>b</i>, or it could be used to offload compression, data aggregation, and/or erasure coding calculations and transfers to storage devices to reduce load on storage controllers or the storage controller interface <b>129</b><i>a</i>, <b>129</b><i>b </i>to the PCI bus <b>128</b><i>a</i>, <b>128</b><i>b. </i></p><p id="p-0075" num="0074">A storage device controller <b>119</b>A-D may include mechanisms for implementing high availability primitives for use by other parts of a storage system external to the Dual PCI storage device <b>118</b>. For example, reservation or exclusion primitives may be provided so that, in a storage system with two storage controllers providing a highly available storage service, one storage controller may prevent the other storage controller from accessing or continuing to access the storage device. This could be used, for example, in cases where one controller detects that the other controller is not functioning properly or where the interconnect between the two storage controllers may itself not be functioning properly.</p><p id="p-0076" num="0075">In one embodiment, a storage system for use with Dual PCI direct mapped storage devices with separately addressable fast write storage includes systems that manage erase blocks or groups of erase blocks as allocation units for storing data on behalf of the storage service, or for storing metadata (e.g., indexes, logs, etc.) associated with the storage service, or for proper management of the storage system itself. Flash pages, which may be a few kilobytes in size, may be written as data arrives or as the storage system is to persist data for long intervals of time (e.g., above a defined threshold of time). To commit data more quickly, or to reduce the number of writes to the Flash memory devices, the storage controllers may first write data into the separately addressable fast write storage on one more storage devices.</p><p id="p-0077" num="0076">In one embodiment, the storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate the use of erase blocks within and across storage devices (e.g., <b>118</b>) in accordance with an age and expected remaining lifespan of the storage devices, or based on other statistics. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may initiate garbage collection and data migration data between storage devices in accordance with pages that are no longer needed as well as to manage Flash page and erase block lifespans and to manage overall system performance.</p><p id="p-0078" num="0077">In one embodiment, the storage system <b>124</b> may utilize mirroring and/or erasure coding schemes as part of storing data into addressable fast write storage and/or as part of writing data into allocation units associated with erase blocks. Erasure codes may be used across storage devices, as well as within erase blocks or allocation units, or within and across Flash memory devices on a single storage device, to provide redundancy against single or multiple storage device failures or to protect against internal corruptions of Flash memory pages resulting from Flash memory operations or from degradation of Flash memory cells. Mirroring and erasure coding at various levels may be used to recover from multiple types of failures that occur separately or in combination.</p><p id="p-0079" num="0078">The embodiments depicted with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A-G</figref> illustrate a storage cluster that stores user data, such as user data originating from one or more user or client systems or other sources external to the storage cluster. The storage cluster distributes user data across storage nodes housed within a chassis, or across multiple chassis, using erasure coding and redundant copies of metadata. Erasure coding refers to a method of data protection or reconstruction in which data is stored across a set of different locations, such as disks, storage nodes or geographic locations. Flash memory is one type of solid-state memory that may be integrated with the embodiments, although the embodiments may be extended to other types of solid-state memory or other storage medium, including non-solid state memory. Control of storage locations and workloads are distributed across the storage locations in a clustered peer-to-peer system. Tasks such as mediating communications between the various storage nodes, detecting when a storage node has become unavailable, and balancing I/Os (inputs and outputs) across the various storage nodes, are all handled on a distributed basis. Data is laid out or distributed across multiple storage nodes in data fragments or stripes that support data recovery in some embodiments. Ownership of data can be reassigned within a cluster, independent of input and output patterns. This architecture described in more detail below allows a storage node in the cluster to fail, with the system remaining operational, since the data can be reconstructed from other storage nodes and thus remain available for input and output operations. In various embodiments, a storage node may be referred to as a cluster node, a blade, or a server.</p><p id="p-0080" num="0079">The storage cluster may be contained within a chassis, i.e., an enclosure housing one or more storage nodes. A mechanism to provide power to each storage node, such as a power distribution bus, and a communication mechanism, such as a communication bus that enables communication between the storage nodes are included within the chassis. The storage cluster can run as an independent system in one location according to some embodiments. In one embodiment, a chassis contains at least two instances of both the power distribution and the communication bus which may be enabled or disabled independently. The internal communication bus may be an Ethernet bus, however, other technologies such as PCIe, InfiniBand, and others, are equally suitable. The chassis provides a port for an external communication bus for enabling communication between multiple chassis, directly or through a switch, and with client systems. The external communication may use a technology such as Ethernet, InfiniBand, Fibre Channel, etc. In some embodiments, the external communication bus uses different communication bus technologies for inter-chassis and client communication. If a switch is deployed within or between chassis, the switch may act as a translation between multiple protocols or technologies. When multiple chassis are connected to define a storage cluster, the storage cluster may be accessed by a client using either proprietary interfaces or standard interfaces such as network file system (&#x2018;NFS&#x2019;), common internet file system (&#x2018;CIFS&#x2019;), small computer system interface (&#x2018;SCSI&#x2019;) or hypertext transfer protocol (&#x2018;HTTP&#x2019;). Translation from the client protocol may occur at the switch, chassis external communication bus or within each storage node. In some embodiments, multiple chassis may be coupled or connected to each other through an aggregator switch. A portion and/or all of the coupled or connected chassis may be designated as a storage cluster. As discussed above, each chassis can have multiple blades, each blade has a media access control (&#x2018;MAC&#x2019;) address, but the storage cluster is presented to an external network as having a single cluster IP address and a single MAC address in some embodiments.</p><p id="p-0081" num="0080">Each storage node may be one or more storage servers and each storage server is connected to one or more non-volatile solid state memory units, which may be referred to as storage units or storage devices. One embodiment includes a single storage server in each storage node and between one to eight non-volatile solid state memory units, however this one example is not meant to be limiting. The storage server may include a processor, DRAM and interfaces for the internal communication bus and power distribution for each of the power buses. Inside the storage node, the interfaces and storage unit share a communication bus, e.g., PCI Express, in some embodiments. The non-volatile solid state memory units may directly access the internal communication bus interface through a storage node communication bus, or request the storage node to access the bus interface. The non-volatile solid state memory unit contains an embedded CPU, solid state storage controller, and a quantity of solid state mass storage, e.g., between 2-32 terabytes (&#x2018;TB&#x2019;) in some embodiments. An embedded volatile storage medium, such as DRAM, and an energy reserve apparatus are included in the non-volatile solid state memory unit. In some embodiments, the energy reserve apparatus is a capacitor, super-capacitor, or battery that enables transferring a subset of DRAM contents to a stable storage medium in the case of power loss. In some embodiments, the non-volatile solid state memory unit is constructed with a storage class memory, such as phase change or magnetoresistive random access memory (&#x2018;MRAM&#x2019;) that substitutes for DRAM and enables a reduced power hold-up apparatus.</p><p id="p-0082" num="0081">One of many features of the storage nodes and non-volatile solid state storage is the ability to proactively rebuild data in a storage cluster. The storage nodes and non-volatile solid state storage can determine when a storage node or non-volatile solid state storage in the storage cluster is unreachable, independent of whether there is an attempt to read data involving that storage node or non-volatile solid state storage. The storage nodes and non-volatile solid state storage then cooperate to recover and rebuild the data in at least partially new locations. This constitutes a proactive rebuild, in that the system rebuilds data without waiting until the data is needed for a read access initiated from a client system employing the storage cluster. These and further details of the storage memory and operation thereof are discussed below.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster <b>161</b>, with multiple storage nodes <b>150</b> and internal solid-state memory coupled to each storage node to provide network attached storage or storage area network, in accordance with some embodiments. A network attached storage, storage area network, or a storage cluster, or other storage memory, could include one or more storage clusters <b>161</b>, each having one or more storage nodes <b>150</b>, in a flexible and reconfigurable arrangement of both the physical components and the amount of storage memory provided thereby. The storage cluster <b>161</b> is designed to fit in a rack, and one or more racks can be set up and populated as desired for the storage memory. The storage cluster <b>161</b> has a chassis <b>138</b> having multiple slots <b>142</b>. It should be appreciated that chassis <b>138</b> may be referred to as a housing, enclosure, or rack unit. In one embodiment, the chassis <b>138</b> has fourteen slots <b>142</b>, although other numbers of slots are readily devised. For example, some embodiments have four slots, eight slots, sixteen slots, thirty-two slots, or other suitable number of slots. Each slot <b>142</b> can accommodate one storage node <b>150</b> in some embodiments. Chassis <b>138</b> includes flaps <b>148</b> that can be utilized to mount the chassis <b>138</b> on a rack. Fans <b>144</b> provide air circulation for cooling of the storage nodes <b>150</b> and components thereof, although other cooling components could be used, or an embodiment could be devised without cooling components. A switch fabric <b>146</b> couples storage nodes <b>150</b> within chassis <b>138</b> together and to a network for communication to the memory. In an embodiment depicted in herein, the slots <b>142</b> to the left of the switch fabric <b>146</b> and fans <b>144</b> are shown occupied by storage nodes <b>150</b>, while the slots <b>142</b> to the right of the switch fabric <b>146</b> and fans <b>144</b> are empty and available for insertion of storage node <b>150</b> for illustrative purposes. This configuration is one example, and one or more storage nodes <b>150</b> could occupy the slots <b>142</b> in various further arrangements. The storage node arrangements need not be sequential or adjacent in some embodiments. Storage nodes <b>150</b> are hot pluggable, meaning that a storage node <b>150</b> can be inserted into a slot <b>142</b> in the chassis <b>138</b>, or removed from a slot <b>142</b>, without stopping or powering down the system. Upon insertion or removal of storage node <b>150</b> from slot <b>142</b>, the system automatically reconfigures in order to recognize and adapt to the change. Reconfiguration, in some embodiments, includes restoring redundancy and/or rebalancing data or load.</p><p id="p-0084" num="0083">Each storage node <b>150</b> can have multiple components. In the embodiment shown here, the storage node <b>150</b> includes a printed circuit board <b>159</b> populated by a CPU <b>156</b>, i.e., processor, a memory <b>154</b> coupled to the CPU <b>156</b>, and a non-volatile solid state storage <b>152</b> coupled to the CPU <b>156</b>, although other mountings and/or components could be used in further embodiments. The memory <b>154</b> has instructions which are executed by the CPU <b>156</b> and/or data operated on by the CPU <b>156</b>. As further explained below, the non-volatile solid state storage <b>152</b> includes flash or, in further embodiments, other types of solid-state memory.</p><p id="p-0085" num="0084">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, storage cluster <b>161</b> is scalable, meaning that storage capacity with non-uniform storage sizes is readily added, as described above. One or more storage nodes <b>150</b> can be plugged into or removed from each chassis and the storage cluster self-configures in some embodiments. Plug-in storage nodes <b>150</b>, whether installed in a chassis as delivered or later added, can have different sizes. For example, in one embodiment a storage node <b>150</b> can have any multiple of 4 TB, e.g., 8 TB, 12 TB, 16 TB, 32 TB, etc. In further embodiments, a storage node <b>150</b> could have any multiple of other storage amounts or capacities. Storage capacity of each storage node <b>150</b> is broadcast, and influences decisions of how to stripe the data. For maximum storage efficiency, an embodiment can self-configure as wide as possible in the stripe, subject to a predetermined requirement of continued operation with loss of up to one, or up to two, non-volatile solid state storage units <b>152</b> or storage nodes <b>150</b> within the chassis.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing a communications interconnect <b>173</b> and power distribution bus <b>172</b> coupling multiple storage nodes <b>150</b>. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the communications interconnect <b>173</b> can be included in or implemented with the switch fabric <b>146</b> in some embodiments. Where multiple storage clusters <b>161</b> occupy a rack, the communications interconnect <b>173</b> can be included in or implemented with a top of rack switch, in some embodiments. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, storage cluster <b>161</b> is enclosed within a single chassis <b>138</b>. External port <b>176</b> is coupled to storage nodes <b>150</b> through communications interconnect <b>173</b>, while external port <b>174</b> is coupled directly to a storage node. External power port <b>178</b> is coupled to power distribution bus <b>172</b>. Storage nodes <b>150</b> may include varying amounts and differing capacities of non-volatile solid state storage <b>152</b> as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In addition, one or more storage nodes <b>150</b> may be a compute only storage node as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Authorities <b>168</b> are implemented on the non-volatile solid state storages <b>152</b>, for example as lists or other data structures stored in memory. In some embodiments the authorities are stored within the non-volatile solid state storage <b>152</b> and supported by software executing on a controller or other processor of the non-volatile solid state storage <b>152</b>. In a further embodiment, authorities <b>168</b> are implemented on the storage nodes <b>150</b>, for example as lists or other data structures stored in the memory <b>154</b> and supported by software executing on the CPU <b>156</b> of the storage node <b>150</b>. Authorities <b>168</b> control how and where data is stored in the non-volatile solid state storages <b>152</b> in some embodiments. This control assists in determining which type of erasure coding scheme is applied to the data, and which storage nodes <b>150</b> have which portions of the data. Each authority <b>168</b> may be assigned to a non-volatile solid state storage <b>152</b>. Each authority may control a range of inode numbers, segment numbers, or other data identifiers which are assigned to data by a file system, by the storage nodes <b>150</b>, or by the non-volatile solid state storage <b>152</b>, in various embodiments.</p><p id="p-0087" num="0086">Every piece of data, and every piece of metadata, has redundancy in the system in some embodiments. In addition, every piece of data and every piece of metadata has an owner, which may be referred to as an authority. If that authority is unreachable, for example through failure of a storage node, there is a plan of succession for how to find that data or that metadata. In various embodiments, there are redundant copies of authorities <b>168</b>. Authorities <b>168</b> have a relationship to storage nodes <b>150</b> and non-volatile solid state storage <b>152</b> in some embodiments. Each authority <b>168</b>, covering a range of data segment numbers or other identifiers of the data, may be assigned to a specific non-volatile solid state storage <b>152</b>. In some embodiments the authorities <b>168</b> for all of such ranges are distributed over the non-volatile solid state storages <b>152</b> of a storage cluster. Each storage node <b>150</b> has a network port that provides access to the non-volatile solid state storage(s) <b>152</b> of that storage node <b>150</b>. Data can be stored in a segment, which is associated with a segment number and that segment number is an indirection for a configuration of a RAID (redundant array of independent disks) stripe in some embodiments. The assignment and use of the authorities <b>168</b> thus establishes an indirection to data. Indirection may be referred to as the ability to reference data indirectly, in this case via an authority <b>168</b>, in accordance with some embodiments. A segment identifies a set of non-volatile solid state storage <b>152</b> and a local identifier into the set of non-volatile solid state storage <b>152</b> that may contain data. In some embodiments, the local identifier is an offset into the device and may be reused sequentially by multiple segments. In other embodiments the local identifier is unique for a specific segment and never reused. The offsets in the non-volatile solid state storage <b>152</b> are applied to locating data for writing to or reading from the non-volatile solid state storage <b>152</b> (in the form of a RAID stripe). Data is striped across multiple units of non-volatile solid state storage <b>152</b>, which may include or be different from the non-volatile solid state storage <b>152</b> having the authority <b>168</b> for a particular data segment.</p><p id="p-0088" num="0087">If there is a change in where a particular segment of data is located, e.g., during a data move or a data reconstruction, the authority <b>168</b> for that data segment should be consulted, at that non-volatile solid state storage <b>152</b> or storage node <b>150</b> having that authority <b>168</b>. In order to locate a particular piece of data, embodiments calculate a hash value for a data segment or apply an inode number or a data segment number. The output of this operation points to a non-volatile solid state storage <b>152</b> having the authority <b>168</b> for that particular piece of data. In some embodiments there are two stages to this operation. The first stage maps an entity identifier (ID), e.g., a segment number, inode number, or directory number to an authority identifier. This mapping may include a calculation such as a hash or a bit mask. The second stage is mapping the authority identifier to a particular non-volatile solid state storage <b>152</b>, which may be done through an explicit mapping. The operation is repeatable, so that when the calculation is performed, the result of the calculation repeatably and reliably points to a particular non-volatile solid state storage <b>152</b> having that authority <b>168</b>. The operation may include the set of reachable storage nodes as input. If the set of reachable non-volatile solid state storage units changes the optimal set changes. In some embodiments, the persisted value is the current assignment (which is always true) and the calculated value is the target assignment the cluster will attempt to reconfigure towards. This calculation may be used to determine the optimal non-volatile solid state storage <b>152</b> for an authority in the presence of a set of non-volatile solid state storage <b>152</b> that are reachable and constitute the same cluster. The calculation also determines an ordered set of peer non-volatile solid state storage <b>152</b> that will also record the authority to non-volatile solid state storage mapping so that the authority may be determined even if the assigned non-volatile solid state storage is unreachable. A duplicate or substitute authority <b>168</b> may be consulted if a specific authority <b>168</b> is unavailable in some embodiments.</p><p id="p-0089" num="0088">With reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A and <b>2</b>B</figref>, two of the many tasks of the CPU <b>156</b> on a storage node <b>150</b> are to break up write data, and reassemble read data. When the system has determined that data is to be written, the authority <b>168</b> for that data is located as above. When the segment ID for data is already determined the request to write is forwarded to the non-volatile solid state storage <b>152</b> currently determined to be the host of the authority <b>168</b> determined from the segment. The host CPU <b>156</b> of the storage node <b>150</b>, on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside, then breaks up or shards the data and transmits the data out to various non-volatile solid state storage <b>152</b>. The transmitted data is written as a data stripe in accordance with an erasure coding scheme. In some embodiments, data is requested to be pulled, and in other embodiments, data is pushed. In reverse, when data is read, the authority <b>168</b> for the segment ID containing the data is located as described above. The host CPU <b>156</b> of the storage node <b>150</b> on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside requests the data from the non-volatile solid state storage and corresponding storage nodes pointed to by the authority. In some embodiments the data is read from flash storage as a data stripe. The host CPU <b>156</b> of storage node <b>150</b> then reassembles the read data, correcting any errors (if present) according to the appropriate erasure coding scheme, and forwards the reassembled data to the network. In further embodiments, some or all of these tasks can be handled in the non-volatile solid state storage <b>152</b>. In some embodiments, the segment host requests the data be sent to storage node <b>150</b> by requesting pages from storage and then sending the data to the storage node making the original request.</p><p id="p-0090" num="0089">In some systems, for example in UNIX-style file systems, data is handled with an index node or inode, which specifies a data structure that represents an object in a file system. The object could be a file or a directory, for example. Metadata may accompany the object, as attributes such as permission data and a creation timestamp, among other attributes. A segment number could be assigned to all or a portion of such an object in a file system. In other systems, data segments are handled with a segment number assigned elsewhere. For purposes of discussion, the unit of distribution is an entity, and an entity can be a file, a directory or a segment. That is, entities are units of data or metadata stored by a storage system. Entities are grouped into sets called authorities. Each authority has an authority owner, which is a storage node that has the exclusive right to update the entities in the authority. In other words, a storage node contains the authority, and that the authority, in turn, contains entities.</p><p id="p-0091" num="0090">A segment is a logical container of data in accordance with some embodiments. A segment is an address space between medium address space and physical flash locations, i.e., the data segment number, are in this address space. Segments may also contain meta-data, which enable data redundancy to be restored (rewritten to different flash locations or devices) without the involvement of higher level software. In one embodiment, an internal format of a segment contains client data and medium mappings to determine the position of that data. Each data segment is protected, e.g., from memory and other failures, by breaking the segment into a number of data and parity shards, where applicable. The data and parity shards are distributed, i.e., striped, across non-volatile solid state storage <b>152</b> coupled to the host CPUs <b>156</b> (See <figref idref="DRAWINGS">FIGS. <b>2</b>E and <b>2</b>G</figref>) in accordance with an erasure coding scheme. Usage of the term segments refers to the container and its place in the address space of segments in some embodiments. Usage of the term stripe refers to the same set of shards as a segment and includes how the shards are distributed along with redundancy or parity information in accordance with some embodiments.</p><p id="p-0092" num="0091">A series of address-space transformations takes place across an entire storage system. At the top are the directory entries (file names) which link to an inode. Inodes point into medium address space, where data is logically stored. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Segment addresses are then translated into physical flash locations. Physical flash locations have an address range bounded by the amount of flash in the system in accordance with some embodiments. Medium addresses and segment addresses are logical containers, and in some embodiments use a 128 bit or larger identifier so as to be practically infinite, with a likelihood of reuse calculated as longer than the expected life of the system. Addresses from logical containers are allocated in a hierarchical fashion in some embodiments. Initially, each non-volatile solid state storage unit <b>152</b> may be assigned a range of address space. Within this assigned range, the non-volatile solid state storage <b>152</b> is able to allocate addresses without synchronization with other non-volatile solid state storage <b>152</b>.</p><p id="p-0093" num="0092">Data and metadata is stored by a set of underlying storage layouts that are optimized for varying workload patterns and storage devices. These layouts incorporate multiple redundancy schemes, compression formats and index algorithms. Some of these layouts store information about authorities and authority masters, while others store file metadata and file data. The redundancy schemes include error correction codes that tolerate corrupted bits within a single storage device (such as a NAND flash chip), erasure codes that tolerate the failure of multiple storage nodes, and replication schemes that tolerate data center or regional failures. In some embodiments, low density parity check (&#x2018;LDPC&#x2019;) code is used within a single storage unit. Reed-Solomon encoding is used within a storage cluster, and mirroring is used within a storage grid in some embodiments. Metadata may be stored using an ordered log structured index (such as a Log Structured Merge Tree), and large data may not be stored in a log structured layout.</p><p id="p-0094" num="0093">In order to maintain consistency across multiple copies of an entity, the storage nodes agree implicitly on two things through calculations: (1) the authority that contains the entity, and (2) the storage node that contains the authority. The assignment of entities to authorities can be done by pseudo randomly assigning entities to authorities, by splitting entities into ranges based upon an externally produced key, or by placing a single entity into each authority. Examples of pseudorandom schemes are linear hashing and the Replication Under Scalable Hashing (&#x2018;RUSH&#x2019;) family of hashes, including Controlled Replication Under Scalable Hashing (&#x2018;CRUSH&#x2019;). In some embodiments, pseudo-random assignment is utilized only for assigning authorities to nodes because the set of nodes can change. The set of authorities cannot change so any subjective function may be applied in these embodiments. Some placement schemes automatically place authorities on storage nodes, while other placement schemes rely on an explicit mapping of authorities to storage nodes. In some embodiments, a pseudorandom scheme is utilized to map from each authority to a set of candidate authority owners. A pseudorandom data distribution function related to CRUSH may assign authorities to storage nodes and create a list of where the authorities are assigned. Each storage node has a copy of the pseudorandom data distribution function, and can arrive at the same calculation for distributing, and later finding or locating an authority. Each of the pseudorandom schemes requires the reachable set of storage nodes as input in some embodiments in order to conclude the same target nodes. Once an entity has been placed in an authority, the entity may be stored on physical devices so that no expected failure will lead to unexpected data loss. In some embodiments, rebalancing algorithms attempt to store the copies of all entities within an authority in the same layout and on the same set of machines.</p><p id="p-0095" num="0094">Examples of expected failures include device failures, stolen machines, datacenter fires, and regional disasters, such as nuclear or geological events. Different failures lead to different levels of acceptable data loss. In some embodiments, a stolen storage node impacts neither the security nor the reliability of the system, while depending on system configuration, a regional event could lead to no loss of data, a few seconds or minutes of lost updates, or even complete data loss.</p><p id="p-0096" num="0095">In the embodiments, the placement of data for storage redundancy is independent of the placement of authorities for data consistency. In some embodiments, storage nodes that contain authorities do not contain any persistent storage. Instead, the storage nodes are connected to non-volatile solid state storage units that do not contain authorities. The communications interconnect between storage nodes and non-volatile solid state storage units consists of multiple communication technologies and has non-uniform performance and fault tolerance characteristics. In some embodiments, as mentioned above, non-volatile solid state storage units are connected to storage nodes via PCI express, storage nodes are connected together within a single chassis using Ethernet backplane, and chassis are connected together to form a storage cluster. Storage clusters are connected to clients using Ethernet or fiber channel in some embodiments. If multiple storage clusters are configured into a storage grid, the multiple storage clusters are connected using the Internet or other long-distance networking links, such as a &#x201c;metro scale&#x201d; link or private link that does not traverse the internet.</p><p id="p-0097" num="0096">Authority owners have the exclusive right to modify entities, to migrate entities from one non-volatile solid state storage unit to another non-volatile solid state storage unit, and to add and remove copies of entities. This allows for maintaining the redundancy of the underlying data. When an authority owner fails, is going to be decommissioned, or is overloaded, the authority is transferred to a new storage node. Transient failures make it non-trivial to ensure that all non-faulty machines agree upon the new authority location. The ambiguity that arises due to transient failures can be achieved automatically by a consensus protocol such as Paxos, hot-warm failover schemes, via manual intervention by a remote system administrator, or by a local hardware administrator (such as by physically removing the failed machine from the cluster, or pressing a button on the failed machine). In some embodiments, a consensus protocol is used, and failover is automatic. If too many failures or replication events occur in too short a time period, the system goes into a self-preservation mode and halts replication and data movement activities until an administrator intervenes in accordance with some embodiments.</p><p id="p-0098" num="0097">As authorities are transferred between storage nodes and authority owners update entities in their authorities, the system transfers messages between the storage nodes and non-volatile solid state storage units. With regard to persistent messages, messages that have different purposes are of different types. Depending on the type of the message, the system maintains different ordering and durability guarantees. As the persistent messages are being processed, the messages are temporarily stored in multiple durable and non-durable storage hardware technologies. In some embodiments, messages are stored in RAM, NVRAM and on NAND flash devices, and a variety of protocols are used in order to make efficient use of each storage medium. Latency-sensitive client requests may be persisted in replicated NVRAM, and then later NAND, while background rebalancing operations are persisted directly to NAND.</p><p id="p-0099" num="0098">Persistent messages are persistently stored prior to being transmitted. This allows the system to continue to serve client requests despite failures and component replacement. Although many hardware components contain unique identifiers that are visible to system administrators, manufacturer, hardware supply chain and ongoing monitoring quality control infrastructure, applications running on top of the infrastructure address virtualize addresses. These virtualized addresses do not change over the lifetime of the storage system, regardless of component failures and replacements. This allows each component of the storage system to be replaced over time without reconfiguration or disruptions of client request processing, i.e., the system supports non-disruptive upgrades.</p><p id="p-0100" num="0099">In some embodiments, the virtualized addresses are stored with sufficient redundancy. A continuous monitoring system correlates hardware and software status and the hardware identifiers. This allows detection and prediction of failures due to faulty components and manufacturing details. The monitoring system also enables the proactive transfer of authorities and entities away from impacted devices before failure occurs by removing the component from the critical path in some embodiments.</p><p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node <b>150</b> and contents of a non-volatile solid state storage <b>152</b> of the storage node <b>150</b>. Data is communicated to and from the storage node <b>150</b> by a network interface controller (&#x2018;NIC&#x2019;) <b>202</b> in some embodiments. Each storage node <b>150</b> has a CPU <b>156</b>, and one or more non-volatile solid state storage <b>152</b>, as discussed above. Moving down one level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, each non-volatile solid state storage <b>152</b> has a relatively fast non-volatile solid state memory, such as nonvolatile random access memory (&#x2018;NVRAM&#x2019;) <b>204</b>, and flash memory <b>206</b>. In some embodiments, NVRAM <b>204</b> may be a component that does not require program/erase cycles (DRAM, MRAM, PCM), and can be a memory that can support being written vastly more often than the memory is read from. Moving down another level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, the NVRAM <b>204</b> is implemented in one embodiment as high speed volatile memory, such as dynamic random access memory (DRAM) <b>216</b>, backed up by energy reserve <b>218</b>. Energy reserve <b>218</b> provides sufficient electrical power to keep the DRAM <b>216</b> powered long enough for contents to be transferred to the flash memory <b>206</b> in the event of power failure. In some embodiments, energy reserve <b>218</b> is a capacitor, super-capacitor, battery, or other device, that supplies a suitable supply of energy sufficient to enable the transfer of the contents of DRAM <b>216</b> to a stable storage medium in the case of power loss. The flash memory <b>206</b> is implemented as multiple flash dies <b>222</b>, which may be referred to as packages of flash dies <b>222</b> or an array of flash dies <b>222</b>. It should be appreciated that the flash dies <b>222</b> could be packaged in any number of ways, with a single die per package, multiple dies per package (i.e. multichip packages), in hybrid packages, as bare dies on a printed circuit board or other substrate, as encapsulated dies, etc. In the embodiment shown, the non-volatile solid state storage <b>152</b> has a controller <b>212</b> or other processor, and an input output (I/O) port <b>210</b> coupled to the controller <b>212</b>. I/O port <b>210</b> is coupled to the CPU <b>156</b> and/or the network interface controller <b>202</b> of the flash storage node <b>150</b>. Flash input output (I/O) port <b>220</b> is coupled to the flash dies <b>222</b>, and a direct memory access unit (DMA) <b>214</b> is coupled to the controller <b>212</b>, the DRAM <b>216</b> and the flash dies <b>222</b>. In the embodiment shown, the I/O port <b>210</b>, controller <b>212</b>, DMA unit <b>214</b> and flash I/O port <b>220</b> are implemented on a programmable logic device (&#x2018;PLD&#x2019;) <b>208</b>, e.g., an FPGA. In this embodiment, each flash die <b>222</b> has pages, organized as sixteen kB (kilobyte) pages <b>224</b>, and a register <b>226</b> through which data can be written to or read from the flash die <b>222</b>. In further embodiments, other types of solid-state memory are used in place of, or in addition to flash memory illustrated within flash die <b>222</b>.</p><p id="p-0102" num="0101">Storage clusters <b>161</b>, in various embodiments as disclosed herein, can be contrasted with storage arrays in general. The storage nodes <b>150</b> are part of a collection that creates the storage cluster <b>161</b>. Each storage node <b>150</b> owns a slice of data and computing required to provide the data. Multiple storage nodes <b>150</b> cooperate to store and retrieve the data. Storage memory or storage devices, as used in storage arrays in general, are less involved with processing and manipulating the data. Storage memory or storage devices in a storage array receive commands to read, write, or erase data. The storage memory or storage devices in a storage array are not aware of a larger system in which they are embedded, or what the data means. Storage memory or storage devices in storage arrays can include various types of storage memory, such as RAM, solid state drives, hard disk drives, etc. The storage units <b>152</b> described herein have multiple interfaces active simultaneously and serving multiple purposes. In some embodiments, some of the functionality of a storage node <b>150</b> is shifted into a storage unit <b>152</b>, transforming the storage unit <b>152</b> into a combination of storage unit <b>152</b> and storage node <b>150</b>. Placing computing (relative to storage data) into the storage unit <b>152</b> places this computing closer to the data itself. The various system embodiments have a hierarchy of storage node layers with different capabilities. By contrast, in a storage array, a controller owns and knows everything about all of the data that the controller manages in a shelf or storage devices. In a storage cluster <b>161</b>, as described herein, multiple controllers in multiple storage units <b>152</b> and/or storage nodes <b>150</b> cooperate in various ways (e.g., for erasure coding, data sharding, metadata communication and redundancy, storage capacity expansion or contraction, data recovery, and so on).</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref>. In this version, each storage unit <b>152</b> has a processor such as controller <b>212</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), an FPGA, flash memory <b>206</b>, and NVRAM <b>204</b> (which is super-capacitor backed DRAM <b>216</b>, see <figref idref="DRAWINGS">FIGS. <b>2</b>B and <b>2</b>C</figref>) on a PCIe (peripheral component interconnect express) board in a chassis <b>138</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The storage unit <b>152</b> may be implemented as a single board containing storage, and may be the largest tolerable failure domain inside the chassis. In some embodiments, up to two storage units <b>152</b> may fail and the device will continue with no data loss.</p><p id="p-0104" num="0103">The physical storage is divided into named regions based on application usage in some embodiments. The NVRAM <b>204</b> is a contiguous block of reserved memory in the storage unit <b>152</b> DRAM <b>216</b>, and is backed by NAND flash. NVRAM <b>204</b> is logically divided into multiple memory regions written for two as spool (e.g., spool region). Space within the NVRAM <b>204</b> spools is managed by each authority <b>168</b> independently. Each device provides an amount of storage space to each authority <b>168</b>. That authority <b>168</b> further manages lifetimes and allocations within that space. Examples of a spool include distributed transactions or notions. When the primary power to a storage unit <b>152</b> fails, onboard super-capacitors provide a short duration of power hold up. During this holdup interval, the contents of the NVRAM <b>204</b> are flushed to flash memory <b>206</b>. On the next power-on, the contents of the NVRAM <b>204</b> are recovered from the flash memory <b>206</b>.</p><p id="p-0105" num="0104">As for the storage unit controller, the responsibility of the logical &#x201c;controller&#x201d; is distributed across each of the blades containing authorities <b>168</b>. This distribution of logical control is shown in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> as a host controller <b>242</b>, mid-tier controller <b>244</b> and storage unit controller(s) <b>246</b>. Management of the control plane and the storage plane are treated independently, although parts may be physically co-located on the same blade. Each authority <b>168</b> effectively serves as an independent controller. Each authority <b>168</b> provides its own data and metadata structures, its own background workers, and maintains its own lifecycle.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade <b>252</b> hardware block diagram, showing a control plane <b>254</b>, compute and storage planes <b>256</b>, <b>258</b>, and authorities <b>168</b> interacting with underlying physical resources, using embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref> in the storage server environment of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. The control plane <b>254</b> is partitioned into a number of authorities <b>168</b> which can use the compute resources in the compute plane <b>256</b> to run on any of the blades <b>252</b>. The storage plane <b>258</b> is partitioned into a set of devices, each of which provides access to flash <b>206</b> and NVRAM <b>204</b> resources. In one embodiment, the compute plane <b>256</b> may perform the operations of a storage array controller, as described herein, on one or more devices of the storage plane <b>258</b> (e.g., a storage array).</p><p id="p-0107" num="0106">In the compute and storage planes <b>256</b>, <b>258</b> of <figref idref="DRAWINGS">FIG. <b>2</b>E</figref>, the authorities <b>168</b> interact with the underlying physical resources (i.e., devices). From the point of view of an authority <b>168</b>, its resources are striped over all of the physical devices. From the point of view of a device, it provides resources to all authorities <b>168</b>, irrespective of where the authorities happen to run. Each authority <b>168</b> has allocated or has been allocated one or more partitions <b>260</b> of storage memory in the storage units <b>152</b>, e.g. partitions <b>260</b> in flash memory <b>206</b> and NVRAM <b>204</b>. Each authority <b>168</b> uses those allocated partitions <b>260</b> that belong to it, for writing or reading user data. Authorities can be associated with differing amounts of physical storage of the system. For example, one authority <b>168</b> could have a larger number of partitions <b>260</b> or larger sized partitions <b>260</b> in one or more storage units <b>152</b> than one or more other authorities <b>168</b>.</p><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades <b>252</b> of a storage cluster, in accordance with some embodiments. In the elasticity structure, elasticity software is symmetric, i.e., each blade's compute module <b>270</b> runs the three identical layers of processes depicted in <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>. Storage managers <b>274</b> execute read and write requests from other blades <b>252</b> for data and metadata stored in local storage unit <b>152</b> NVRAM <b>204</b> and flash <b>206</b>. Authorities <b>168</b> fulfill client requests by issuing the necessary reads and writes to the blades <b>252</b> on whose storage units <b>152</b> the corresponding data or metadata resides. Endpoints <b>272</b> parse client connection requests received from switch fabric <b>146</b> supervisory software, relay the client connection requests to the authorities <b>168</b> responsible for fulfillment, and relay the authorities' <b>168</b> responses to clients. The symmetric three-layer structure enables the storage system's high degree of concurrency. Elasticity scales out efficiently and reliably in these embodiments. In addition, elasticity implements a unique scale-out technique that balances work evenly across all resources regardless of client access pattern, and maximizes concurrency by eliminating much of the need for inter-blade coordination that typically occurs with conventional distributed locking.</p><p id="p-0109" num="0108">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>, authorities <b>168</b> running in the compute modules <b>270</b> of a blade <b>252</b> perform the internal operations required to fulfill client requests. One feature of elasticity is that authorities <b>168</b> are stateless, i.e., they cache active data and metadata in their own blades' <b>252</b> DRAMs for fast access, but the authorities store every update in their NVRAM <b>204</b> partitions on three separate blades <b>252</b> until the update has been written to flash <b>206</b>. All the storage system writes to NVRAM <b>204</b> are in triplicate to partitions on three separate blades <b>252</b> in some embodiments. With triple-mirrored NVRAM <b>204</b> and persistent storage protected by parity and Reed-Solomon RAID checksums, the storage system can survive concurrent failure of two blades <b>252</b> with no loss of data, metadata, or access to either.</p><p id="p-0110" num="0109">Because authorities <b>168</b> are stateless, they can migrate between blades <b>252</b>. Each authority <b>168</b> has a unique identifier. NVRAM <b>204</b> and flash <b>206</b> partitions are associated with authorities' <b>168</b> identifiers, not with the blades <b>252</b> on which they are running in some. Thus, when an authority <b>168</b> migrates, the authority <b>168</b> continues to manage the same storage partitions from its new location. When a new blade <b>252</b> is installed in an embodiment of the storage cluster, the system automatically rebalances load by: partitioning the new blade's <b>252</b> storage for use by the system's authorities <b>168</b>, migrating selected authorities <b>168</b> to the new blade <b>252</b>, starting endpoints <b>272</b> on the new blade <b>252</b> and including them in the switch fabric's <b>146</b> client connection distribution algorithm.</p><p id="p-0111" num="0110">From their new locations, migrated authorities <b>168</b> persist the contents of their NVRAM <b>204</b> partitions on flash <b>206</b>, process read and write requests from other authorities <b>168</b>, and fulfill the client requests that endpoints <b>272</b> direct to them. Similarly, if a blade <b>252</b> fails or is removed, the system redistributes its authorities <b>168</b> among the system's remaining blades <b>252</b>. The redistributed authorities <b>168</b> continue to perform their original functions from their new locations.</p><p id="p-0112" num="0111"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities <b>168</b> and storage resources in blades <b>252</b> of a storage cluster, in accordance with some embodiments. Each authority <b>168</b> is exclusively responsible for a partition of the flash <b>206</b> and NVRAM <b>204</b> on each blade <b>252</b>. The authority <b>168</b> manages the content and integrity of its partitions independently of other authorities <b>168</b>. Authorities <b>168</b> compress incoming data and preserve it temporarily in their NVRAM <b>204</b> partitions, and then consolidate, RAID-protect, and persist the data in segments of the storage in their flash <b>206</b> partitions. As the authorities <b>168</b> write data to flash <b>206</b>, storage managers <b>274</b> perform the necessary flash translation to optimize write performance and maximize media longevity. In the background, authorities <b>168</b> &#x201c;garbage collect,&#x201d; or reclaim space occupied by data that clients have made obsolete by overwriting the data. It should be appreciated that since authorities' <b>168</b> partitions are disjoint, there is no need for distributed locking to execute client and writes or to perform background functions.</p><p id="p-0113" num="0112">The embodiments described herein may utilize various software, communication and/or networking protocols. In addition, the configuration of the hardware and/or software may be adjusted to accommodate various protocols. For example, the embodiments may utilize Active Directory, which is a database based system that provides authentication, directory, policy, and other services in a WINDOWS&#x2122; environment. In these embodiments, LDAP (Lightweight Directory Access Protocol) is one example application protocol for querying and modifying items in directory service providers such as Active Directory. In some embodiments, a network lock manager (&#x2018;NLM&#x2019;) is utilized as a facility that works in cooperation with the Network File System (&#x2018;NFS&#x2019;) to provide a System V style of advisory file and record locking over a network. The Server Message Block (&#x2018;SMB&#x2019;) protocol, one version of which is also known as Common Internet File System (&#x2018;CIFS&#x2019;), may be integrated with the storage systems discussed herein. SMP operates as an application-layer network protocol typically used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. SMB also provides an authenticated inter-process communication mechanism. AMAZON&#x2122; S3 (Simple Storage Service) is a web service offered by Amazon Web Services, and the systems described herein may interface with Amazon S3 through web services interfaces (REST (representational state transfer), SOAP (simple object access protocol), and BitTorrent). A RESTful API (application programming interface) breaks down a transaction to create a series of small modules. Each module addresses a particular underlying part of the transaction. The control or permissions provided with these embodiments, especially for object data, may include utilization of an access control list (&#x2018;ACL&#x2019;). The ACL is a list of permissions attached to an object and the ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. The systems may utilize Internet Protocol version 6 (&#x2018;IPv6&#x2019;), as well as IPv4, for the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. The routing of packets between networked systems may include Equal-cost multi-path routing (&#x2018;ECMP&#x2019;), which is a routing strategy where next-hop packet forwarding to a single destination can occur over multiple &#x201c;best paths&#x201d; which tie for top place in routing metric calculations. Multi-path routing can be used in conjunction with most routing protocols, because it is a per-hop decision limited to a single router. The software may support Multi-tenancy, which is an architecture in which a single instance of a software application serves multiple customers. Each customer may be referred to as a tenant. Tenants may be given the ability to customize some parts of the application, but may not customize the application's code, in some embodiments. The embodiments may maintain audit logs. An audit log is a document that records an event in a computing system. In addition to documenting what resources were accessed, audit log entries typically include destination and source addresses, a timestamp, and user login information for compliance with various regulations. The embodiments may support various key management policies, such as encryption key rotation. In addition, the system may support dynamic root passwords or some variation dynamically changing passwords.</p><p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system <b>306</b> that is coupled for data communications with a cloud services provider <b>302</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>. In some embodiments, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied as a storage system that includes imbalanced active/active controllers, as a storage system that includes balanced active/active controllers, as a storage system that includes active/active controllers where less than all of each controller's resources are utilized such that each controller has reserve resources that may be used to support failover, as a storage system that includes fully active/active controllers, as a storage system that includes dataset-segregated controllers, as a storage system that includes dual-layer architectures with front-end controllers and back-end integrated storage controllers, as a storage system that includes scale-out clusters of dual-controller arrays, as well as combinations of such embodiments.</p><p id="p-0115" num="0114">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the storage system <b>306</b> is coupled to the cloud services provider <b>302</b> via a data communications link <b>304</b>. The data communications link <b>304</b> may be embodied as a dedicated data communications link, as a data communications pathway that is provided through the use of one or data communications networks such as a wide area network (&#x2018;WAN&#x2019;) or LAN, or as some other mechanism capable of transporting digital information between the storage system <b>306</b> and the cloud services provider <b>302</b>. Such a data communications link <b>304</b> may be fully wired, fully wireless, or some aggregation of wired and wireless data communications pathways. In such an example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using one or more data communications protocols. For example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using the handheld device transfer protocol (&#x2018;HDTP&#x2019;), hypertext transfer protocol (&#x2018;HTTP&#x2019;), internet protocol (&#x2018;IP&#x2019;), real-time transfer protocol (&#x2018;RTP&#x2019;), transmission control protocol (&#x2018;TCP&#x2019;), user datagram protocol (&#x2018;UDP&#x2019;), wireless application protocol (&#x2018;WAP&#x2019;), or other protocol.</p><p id="p-0116" num="0115">The cloud services provider <b>302</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied, for example, as a system and computing environment that provides a vast array of services to users of the cloud services provider <b>302</b> through the sharing of computing resources via the data communications link <b>304</b>. The cloud services provider <b>302</b> may provide on-demand access to a shared pool of configurable computing resources such as computer networks, servers, storage, applications and services, and so on. The shared pool of configurable resources may be rapidly provisioned and released to a user of the cloud services provider <b>302</b> with minimal management effort. Generally, the user of the cloud services provider <b>302</b> is unaware of the exact computing resources utilized by the cloud services provider <b>302</b> to provide the services. Although in many cases such a cloud services provider <b>302</b> may be accessible via the Internet, readers of skill in the art will recognize that any system that abstracts the use of shared resources to provide services to a user through any data communications link may be considered a cloud services provider <b>302</b>.</p><p id="p-0117" num="0116">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be configured to provide a variety of services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of various service models. For example, the cloud services provider <b>302</b> may be configured to provide services through the implementation of an infrastructure as a service (&#x2018;IaaS&#x2019;) service model, through the implementation of a platform as a service (&#x2018;PaaS&#x2019;) service model, through the implementation of a software as a service (&#x2018;SaaS&#x2019;) service model, through the implementation of an authentication as a service (&#x2018;AaaS&#x2019;) service model, through the implementation of a storage as a service model where the cloud services provider <b>302</b> offers access to its storage infrastructure for use by the storage system <b>306</b> and users of the storage system <b>306</b>, and so on. Readers will appreciate that the cloud services provider <b>302</b> may be configured to provide additional services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of additional service models, as the service models described above are included only for explanatory purposes and in no way represent a limitation of the services that may be offered by the cloud services provider <b>302</b> or a limitation as to the service models that may be implemented by the cloud services provider <b>302</b>.</p><p id="p-0118" num="0117">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be embodied, for example, as a private cloud, as a public cloud, or as a combination of a private cloud and public cloud. In an embodiment in which the cloud services provider <b>302</b> is embodied as a private cloud, the cloud services provider <b>302</b> may be dedicated to providing services to a single organization rather than providing services to multiple organizations. In an embodiment where the cloud services provider <b>302</b> is embodied as a public cloud, the cloud services provider <b>302</b> may provide services to multiple organizations. In still alternative embodiments, the cloud services provider <b>302</b> may be embodied as a mix of a private and public cloud services with a hybrid cloud deployment.</p><p id="p-0119" num="0118">Although not explicitly depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, readers will appreciate that a vast amount of additional hardware components and additional software components may be necessary to facilitate the delivery of cloud services to the storage system <b>306</b> and users of the storage system <b>306</b>. For example, the storage system <b>306</b> may be coupled to (or even include) a cloud storage gateway. Such a cloud storage gateway may be embodied, for example, as hardware-based or software-based appliance that is located on premise with the storage system <b>306</b>. Such a cloud storage gateway may operate as a bridge between local applications that are executing on the storage array <b>306</b> and remote, cloud-based storage that is utilized by the storage array <b>306</b>. Through the use of a cloud storage gateway, organizations may move primary iSCSI or NAS to the cloud services provider <b>302</b>, thereby enabling the organization to save space on their on-premises storage systems. Such a cloud storage gateway may be configured to emulate a disk array, a block-based device, a file server, or other storage system that can translate the SCSI commands, file server commands, or other appropriate command into REST-space protocols that facilitate communications with the cloud services provider <b>302</b>.</p><p id="p-0120" num="0119">In order to enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud migration process may take place during which data, applications, or other elements from an organization's local systems (or even from another cloud environment) are moved to the cloud services provider <b>302</b>. In order to successfully migrate data, applications, or other elements to the cloud services provider's <b>302</b> environment, middleware such as a cloud migration tool may be utilized to bridge gaps between the cloud services provider's <b>302</b> environment and an organization's environment. Such cloud migration tools may also be configured to address potentially high network costs and long transfer times associated with migrating large volumes of data to the cloud services provider <b>302</b>, as well as addressing security concerns associated with sensitive data to the cloud services provider <b>302</b> over data communications networks. In order to further enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud orchestrator may also be used to arrange and coordinate automated tasks in pursuit of creating a consolidated process or workflow. Such a cloud orchestrator may perform tasks such as configuring various components, whether those components are cloud components or on-premises components, as well as managing the interconnections between such components. The cloud orchestrator can simplify the inter-component communication and connections to ensure that links are correctly configured and maintained.</p><p id="p-0121" num="0120">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and as described briefly above, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the usage of a SaaS service model, eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. Such applications may take many forms in accordance with various embodiments of the present disclosure. For example, the cloud services provider <b>302</b> may be configured to provide access to data analytics applications to the storage system <b>306</b> and users of the storage system <b>306</b>. Such data analytics applications may be configured, for example, to receive vast amounts of telemetry data phoned home by the storage system <b>306</b>. Such telemetry data may describe various operating characteristics of the storage system <b>306</b> and may be analyzed for a vast array of purposes including, for example, to determine the health of the storage system <b>306</b>, to identify workloads that are executing on the storage system <b>306</b>, to predict when the storage system <b>306</b> will run out of various resources, to recommend configuration changes, hardware or software upgrades, workflow migrations, or other actions that may improve the operation of the storage system <b>306</b>.</p><p id="p-0122" num="0121">The cloud services provider <b>302</b> may also be configured to provide access to virtualized computing environments to the storage system <b>306</b> and users of the storage system <b>306</b>. Such virtualized computing environments may be embodied, for example, as a virtual machine or other virtualized computer hardware platforms, virtual storage devices, virtualized computer network resources, and so on. Examples of such virtualized environments can include virtual machines that are created to emulate an actual computer, virtualized desktop environments that separate a logical desktop from a physical machine, virtualized file systems that allow uniform access to different types of concrete file systems, and many others.</p><p id="p-0123" num="0122">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system <b>306</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref> as the storage system may include many of the components described above.</p><p id="p-0124" num="0123">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include a vast amount of storage resources <b>308</b>, which may be embodied in many forms. For example, the storage resources <b>308</b> can include nano-RAM or another form of nonvolatile random access memory that utilizes carbon nanotubes deposited on a substrate, 3D crosspoint non-volatile memory, flash memory including single-level cell (&#x2018;SLC&#x2019;) NAND flash, multi-level cell (&#x2018;MLC&#x2019;) NAND flash, triple-level cell (&#x2018;TLC&#x2019;) NAND flash, quad-level cell (&#x2018;QLC&#x2019;) NAND flash, or others. Likewise, the storage resources <b>308</b> may include non-volatile magnetoresistive random-access memory (&#x2018;MRAM&#x2019;), including spin transfer torque (STY) MRAM. The example storage resources <b>308</b> may alternatively include non-volatile phase-change memory (&#x2018;PCM&#x2019;), quantum memory that allows for the storage and retrieval of photonic quantum information, resistive random-access memory (&#x2018;ReRAM&#x2019;), storage class memory (&#x2018;SCM&#x2019;), or other form of storage resources, including any combination of resources described herein. Readers will appreciate that other forms of computer memories and storage devices may be utilized by the storage systems described above, including DRAM, SRAM, EEPROM, universal memory, and many others. The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied in a variety of form factors, including but not limited to, dual in-line memory modules (&#x2018;DIMMs&#x2019;), non-volatile dual in-line memory modules (&#x2018;NVDIMMs&#x2019;), M.2, U.2, and others.</p><p id="p-0125" num="0124">The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may include various forms of SCM. SCM may effectively treat fast, non-volatile memory (e.g., NAND flash) as an extension of DRAM such that an entire dataset may be treated as an in-memory dataset that resides entirely in DRAM. SCM may include non-volatile media such as, for example, NAND flash. Such NAND flash may be accessed utilizing NVMe that can use the PCIe bus as its transport, providing for relatively low access latencies compared to older protocols. In fact, the network protocols used for SSDs in all-flash arrays can include NVMe using Ethernet (ROCE, NVME TCP), Fibre Channel (NVMe FC), InfiniBand (iWARP), and others that make it possible to treat fast, non-volatile memory as an extension of DRAM. In view of the fact that DRAM is often byte-addressable and fast, non-volatile memory such as NAND flash is block-addressable, a controller software/hardware stack may be needed to convert the block data to the bytes that are stored in the media. Examples of media and software that may be used as SCM can include, for example, 3D XPoint, Intel Memory Drive Technology, Samsung's Z-SSD, and others.</p><p id="p-0126" num="0125">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may implement a variety of storage architectures. For example, storage systems in accordance with some embodiments of the present disclosure may utilize block storage where data is stored in blocks, and each block essentially acts as an individual hard drive. Storage systems in accordance with some embodiments of the present disclosure may utilize object storage, where data is managed as objects. Each object may include the data itself, a variable amount of metadata, and a globally unique identifier, where object storage can be implemented at multiple levels (e.g., device level, system level, interface level). Storage systems in accordance with some embodiments of the present disclosure utilize file storage in which data is stored in a hierarchical structure. Such data may be saved in files and folders, and presented to both the system storing it and the system retrieving it in the same format.</p><p id="p-0127" num="0126">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be embodied as a storage system in which additional storage resources can be added through the use of a scale-up model, additional storage resources can be added through the use of a scale-out model, or through some combination thereof. In a scale-up model, additional storage may be added by adding additional storage devices. In a scale-out model, however, additional storage nodes may be added to a cluster of storage nodes, where such storage nodes can include additional processing resources, additional networking resources, and so on.</p><p id="p-0128" num="0127">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes communications resources <b>310</b> that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>, including embodiments where those resources are separated by a relatively vast expanse. The communications resources <b>310</b> may be configured to utilize a variety of different protocols and data communication fabrics to facilitate data communications between components within the storage systems as well as computing devices that are outside of the storage system. For example, the communications resources <b>310</b> can include fibre channel (&#x2018;FC&#x2019;) technologies such as FC fabrics and FC protocols that can transport SCSI commands over FC network, FC over ethernet (&#x2018;FCoE&#x2019;) technologies through which FC frames are encapsulated and transmitted over Ethernet networks, InfiniBand (&#x2018;IB&#x2019;) technologies in which a switched fabric topology is utilized to facilitate transmissions between channel adapters, NVM Express (&#x2018;NVMe&#x2019;) technologies and NVMe over fabrics (&#x2018;NVMeoF&#x2019;) technologies through which non-volatile storage media attached via a PCI express (&#x2018;PCIe&#x2019;) bus may be accessed, and others. In fact, the storage systems described above may, directly or indirectly, make use of neutrino communication technologies and devices through which information (including binary information) is transmitted using a beam of neutrinos.</p><p id="p-0129" num="0128">The communications resources <b>310</b> can also include mechanisms for accessing storage resources <b>308</b> within the storage system <b>306</b> utilizing serial attached SCSI (&#x2018;SAS&#x2019;), serial ATA (&#x2018;SATA&#x2019;) bus interfaces for connecting storage resources <b>308</b> within the storage system <b>306</b> to host bus adapters within the storage system <b>306</b>, internet small computer systems interface (&#x2018;iSCSI&#x2019;) technologies to provide block-level access to storage resources <b>308</b> within the storage system <b>306</b>, and other communications resources that that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>.</p><p id="p-0130" num="0129">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes processing resources <b>312</b> that may be useful in useful in executing computer program instructions and performing other computational tasks within the storage system <b>306</b>. The processing resources <b>312</b> may include one or more ASICs that are customized for some particular purpose as well as one or more CPUs. The processing resources <b>312</b> may also include one or more DSPs, one or more FPGAs, one or more systems on a chip (&#x2018;SoCs&#x2019;), or other form of processing resources <b>312</b>. The storage system <b>306</b> may utilize the storage resources <b>312</b> to perform a variety of tasks including, but not limited to, supporting the execution of software resources <b>314</b> that will be described in greater detail below.</p><p id="p-0131" num="0130">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes software resources <b>314</b> that, when executed by processing resources <b>312</b> within the storage system <b>306</b>, may perform a vast array of tasks. The software resources <b>314</b> may include, for example, one or more modules of computer program instructions that when executed by processing resources <b>312</b> within the storage system <b>306</b> are useful in carrying out various data protection techniques to preserve the integrity of data that is stored within the storage systems. Readers will appreciate that such data protection techniques may be carried out, for example, by system software executing on computer hardware within the storage system, by a cloud services provider, or in other ways. Such data protection techniques can include, for example, data archiving techniques that cause data that is no longer actively used to be moved to a separate storage device or separate storage system for long-term retention, data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe with the storage system, data replication techniques through which data stored in the storage system is replicated to another storage system such that the data may be accessible via multiple storage systems, data snapshotting techniques through which the state of data within the storage system is captured at various points in time, data and database cloning techniques through which duplicate copies of data and databases may be created, and other data protection techniques.</p><p id="p-0132" num="0131">The software resources <b>314</b> may also include software that is useful in implementing software-defined storage (&#x2018;SDS&#x2019;). In such an example, the software resources <b>314</b> may include one or more modules of computer program instructions that, when executed, are useful in policy-based provisioning and management of data storage that is independent of the underlying hardware. Such software resources <b>314</b> may be useful in implementing storage virtualization to separate the storage hardware from the software that manages the storage hardware.</p><p id="p-0133" num="0132">The software resources <b>314</b> may also include software that is useful in facilitating and optimizing I/O operations that are directed to the storage resources <b>308</b> in the storage system <b>306</b>. For example, the software resources <b>314</b> may include software modules that perform carry out various data reduction techniques such as, for example, data compression, data deduplication, and others. The software resources <b>314</b> may include software modules that intelligently group together I/O operations to facilitate better usage of the underlying storage resource <b>308</b>, software modules that perform data migration operations to migrate from within a storage system, as well as software modules that perform other functions. Such software resources <b>314</b> may be embodied as one or more software containers or in many other ways.</p><p id="p-0134" num="0133">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> sets forth an example of a cloud-based storage system <b>318</b> in accordance with some embodiments of the present disclosure. In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud-based storage system <b>318</b> is created entirely in a cloud computing environment <b>316</b> such as, for example, Amazon Web Services (&#x2018;AWS&#x2019;), Microsoft Azure, Google Cloud Platform, IBM Cloud, Oracle Cloud, and others. The cloud-based storage system <b>318</b> may be used to provide services similar to the services that may be provided by the storage systems described above. For example, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>, the cloud-based storage system <b>318</b> may be used to provide storage services to users of the cloud-based storage system <b>318</b> through the use of solid-state storage, and so on.</p><p id="p-0135" num="0134">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes two cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>. The cloud computing instances <b>320</b>, <b>322</b> may be embodied, for example, as instances of cloud computing resources (e.g., virtual machines) that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications such as the storage controller application <b>324</b>, <b>326</b>. In one embodiment, the cloud computing instances <b>320</b>, <b>322</b> may be embodied as Amazon Elastic Compute Cloud (&#x2018;EC2&#x2019;) instances. In such an example, an Amazon Machine Image (&#x2018;AMI&#x2019;) that includes the storage controller application <b>324</b>, <b>326</b> may be booted to create and configure a virtual machine that may execute the storage controller application <b>324</b>, <b>326</b>.</p><p id="p-0136" num="0135">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out various storage tasks. For example, the storage controller application <b>324</b>, <b>326</b> may be embodied as a module of computer program instructions that, when executed, carries out the same tasks as the controllers <b>110</b>A, <b>110</b>B in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> described above such as writing data received from the users of the cloud-based storage system <b>318</b> to the cloud-based storage system <b>318</b>, erasing data from the cloud-based storage system <b>318</b>, retrieving data from the cloud-based storage system <b>318</b> and providing such data to users of the cloud-based storage system <b>318</b>, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as RAID or RAID-like data redundancy operations, compressing data, encrypting data, deduplicating data, and so forth. Readers will appreciate that because there are two cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b>, in some embodiments one cloud computing instance <b>320</b> may operate as the primary controller as described above while the other cloud computing instance <b>322</b> may operate as the secondary controller as described above. Readers will appreciate that the storage controller application <b>324</b>, <b>326</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may include identical source code that is executed within different cloud computing instances <b>320</b>, <b>322</b>.</p><p id="p-0137" num="0136">Consider an example in which the cloud computing environment <b>316</b> is embodied as AWS and the cloud computing instances are embodied as EC2 instances. In such an example, the cloud computing instance <b>320</b> that operates as the primary controller may be deployed on one of the instance types that has a relatively large amount of memory and processing power while the cloud computing instance <b>322</b> that operates as the secondary controller may be deployed on one of the instance types that has a relatively small amount of memory and processing power. In such an example, upon the occurrence of a failover event where the roles of primary and secondary are switched, a double failover may actually be carried out such that: 1) a first failover event where the cloud computing instance <b>322</b> that formerly operated as the secondary controller begins to operate as the primary controller, and 2) a third cloud computing instance (not shown) that is of an instance type that has a relatively large amount of memory and processing power is spun up with a copy of the storage controller application, where the third cloud computing instance begins operating as the primary controller while the cloud computing instance <b>322</b> that originally operated as the secondary controller begins operating as the secondary controller again. In such an example, the cloud computing instance <b>320</b> that formerly operated as the primary controller may be terminated. Readers will appreciate that in alternative embodiments, the cloud computing instance <b>320</b> that is operating as the secondary controller after the failover event may continue to operate as the secondary controller and the cloud computing instance <b>322</b> that operated as the primary controller after the occurrence of the failover event may be terminated once the primary role has been assumed by the third cloud computing instance (not shown).</p><p id="p-0138" num="0137">Readers will appreciate that while the embodiments described above relate to embodiments where one cloud computing instance <b>320</b> operates as the primary controller and the second cloud computing instance <b>322</b> operates as the secondary controller, other embodiments are within the scope of the present disclosure. For example, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller for some portion of the address space supported by the cloud-based storage system <b>318</b>, each cloud computing instance <b>320</b>, <b>322</b> may operate as a primary controller where the servicing of I/O operations directed to the cloud-based storage system <b>318</b> are divided in some other way, and so on. In fact, in other embodiments where costs savings may be prioritized over performance demands, only a single cloud computing instance may exist that contains the storage controller application.</p><p id="p-0139" num="0138">The cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> includes cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may be embodied, for example, as instances of cloud computing resources that may be provided by the cloud computing environment <b>316</b> to support the execution of software applications. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> may differ from the cloud computing instances <b>320</b>, <b>322</b> described above as the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>of <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> have local storage <b>330</b>, <b>334</b>, <b>338</b> resources whereas the cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> need not have local storage resources. The cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be embodied, for example, as EC2 M5 instances that include one or more SSDs, as EC2 R5 instances that include one or more SSDs, as EC2 I3 instances that include one or more SSDs, and so on. In some embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> must be embodied as solid-state storage (e.g., SSDs) rather than storage that makes use of hard disk drives.</p><p id="p-0140" num="0139">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> can include a software daemon <b>328</b>, <b>332</b>, <b>336</b> that, when executed by a cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can present itself to the storage controller applications <b>324</b>, <b>326</b> as if the cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>were a physical storage device (e.g., one or more SSDs). In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> may include computer program instructions similar to those that would normally be contained on a storage device such that the storage controller applications <b>324</b>, <b>326</b> can send and receive the same commands that a storage controller would send to storage devices. In such a way, the storage controller applications <b>324</b>, <b>326</b> may include code that is identical to (or substantially identical to) the code that would be executed by the controllers in the storage systems described above. In these and similar embodiments, communications between the storage controller applications <b>324</b>, <b>326</b> and the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may utilize iSCSI, NVMe over TCP, messaging, a custom protocol, or in some other mechanism.</p><p id="p-0141" num="0140">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may also be coupled to block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b>. The block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be embodied, for example, as Amazon Elastic Block Store (&#x2018;EBS&#x2019;) volumes. For example, a first EBS volume may be coupled to a first cloud computing instance <b>340</b><i>a</i>, a second EBS volume may be coupled to a second cloud computing instance <b>340</b><i>b</i>, and a third EBS volume may be coupled to a third cloud computing instance <b>340</b><i>n</i>. In such an example, the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> may be utilized in a manner that is similar to how the NVRAM devices described above are utilized, as the software daemon <b>328</b>, <b>332</b>, <b>336</b> (or some other module) that is executing within a particular cloud comping instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may, upon receiving a request to write data, initiate a write of the data to its attached EBS volume as well as a write of the data to its local storage <b>330</b>, <b>334</b>, <b>338</b> resources. In some alternative embodiments, data may only be written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources within a particular cloud comping instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In an alternative embodiment, rather than using the block-storage <b>342</b>, <b>344</b>, <b>346</b> that is offered by the cloud computing environment <b>316</b> as NVRAM, actual RAM on each of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be used as NVRAM, thereby decreasing network utilization costs that would be associated with using an EBS volume as the NVRAM.</p><p id="p-0142" num="0141">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> may be utilized, by cloud computing instances <b>320</b>, <b>322</b> that support the execution of the storage controller application <b>324</b>, <b>326</b> to service I/O operations that are directed to the cloud-based storage system <b>318</b>. Consider an example in which a first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> is operating as the primary controller. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may receive (directly or indirectly via the secondary controller) requests to write data to the cloud-based storage system <b>318</b> from users of the cloud-based storage system <b>318</b>. In such an example, the first cloud computing instance <b>320</b> that is executing the storage controller application <b>324</b> may perform various tasks such as, for example, deduplicating the data contained in the request, compressing the data contained in the request, determining where to the write the data contained in the request, and so on, before ultimately sending a request to write a deduplicated, encrypted, or otherwise possibly updated version of the data to one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. Either cloud computing instance <b>320</b>, <b>322</b>, in some embodiments, may receive a request to read data from the cloud-based storage system <b>318</b> and may ultimately send a request to read data to one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>.</p><p id="p-0143" num="0142">Readers will appreciate that when a request to write data is received by a particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to not only write the data to its own local storage <b>330</b>, <b>334</b>, <b>338</b> resources and any appropriate block-storage <b>342</b>, <b>344</b>, <b>346</b> that are offered by the cloud computing environment <b>316</b>, but the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may also be configured to write the data to cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. The cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be embodied, for example, as Amazon Simple Storage Service (&#x2018;S3&#x2019;) storage that is accessible by the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In other embodiments, the cloud computing instances <b>320</b>, <b>322</b> that each include the storage controller application <b>324</b>, <b>326</b> may initiate the storage of the data in the local storage <b>330</b>, <b>334</b>, <b>338</b> of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>and the cloud-based object storage <b>348</b>.</p><p id="p-0144" num="0143">Readers will appreciate that, as described above, the cloud-based storage system <b>318</b> may be used to provide block storage services to users of the cloud-based storage system <b>318</b>. While the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may support block-level access, the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>supports only object-based access. In order to address this, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to take blocks of data, package those blocks into objects, and write the objects to the cloud-based object storage <b>348</b> that is attached to the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n. </i></p><p id="p-0145" num="0144">Consider an example in which data is written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>in 1 MB blocks. In such an example, assume that a user of the cloud-based storage system <b>318</b> issues a request to write data that, after being compressed and deduplicated by the storage controller application <b>324</b>, <b>326</b> results in the need to write 5 MB of data. In such an example, writing the data to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>is relatively straightforward as 5 blocks that are 1 MB in size are written to the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such an example, the software daemon <b>328</b>, <b>332</b>, <b>336</b> or some other module of computer program instructions that is executing on the particular cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may be configured to: 1) create a first object that includes the first 1 MB of data and write the first object to the cloud-based object storage <b>348</b>, 2) create a second object that includes the second 1 MB of data and write the second object to the cloud-based object storage <b>348</b>, 3) create a third object that includes the third 1 MB of data and write the third object to the cloud-based object storage <b>348</b>, and so on. As such, in some embodiments, each object that is written to the cloud-based object storage <b>348</b> may be identical (or nearly identical) in size. Readers will appreciate that in such an example, metadata that is associated with the data itself may be included in each object (e.g., the first 1 MB of the object is data and the remaining portion is metadata associated with the data).</p><p id="p-0146" num="0145">Readers will appreciate that the cloud-based object storage <b>348</b> may be incorporated into the cloud-based storage system <b>318</b> to increase the durability of the cloud-based storage system <b>318</b>. Continuing with the example described above where the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>are EC2 instances, readers will understand that EC2 instances are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of the EC2 instance. As such, relying on the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> as the only source of persistent data storage in the cloud-based storage system <b>318</b> may result in a relatively unreliable storage system. Likewise, EBS volumes are designed for 99.999% availability. As such, even relying on EBS as the persistent data store in the cloud-based storage system <b>318</b> may result in a storage system that is not sufficiently durable. Amazon S3, however, is designed to provide 99.999999999% durability, meaning that a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options.</p><p id="p-0147" num="0146">Readers will appreciate that while a cloud-based storage system <b>318</b> that can incorporate S3 into its pool of storage is substantially more durable than various other options, utilizing S3 as the primary pool of storage may result in storage system that has relatively slow response times and relatively long I/O latencies. As such, the cloud-based storage system <b>318</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> not only stores data in S3 but the cloud-based storage system <b>318</b> also stores data in local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, such that read operations can be serviced from local storage <b>330</b>, <b>334</b>, <b>338</b> resources and the block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, thereby reducing read latency when users of the cloud-based storage system <b>318</b> attempt to read data from the cloud-based storage system <b>318</b>.</p><p id="p-0148" num="0147">In some embodiments, all data that is stored by the cloud-based storage system <b>318</b> may be stored in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such embodiments, the local storage <b>330</b>, <b>334</b>, <b>338</b> resources and block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>may effectively operate as cache that generally includes all data that is also stored in S3, such that all reads of data may be serviced by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>without requiring the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>to access the cloud-based object storage <b>348</b>. Readers will appreciate that in other embodiments, however, all data that is stored by the cloud-based storage system <b>318</b> may be stored in the cloud-based object storage <b>348</b>, but less than all data that is stored by the cloud-based storage system <b>318</b> may be stored in at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>. In such an example, various policies may be utilized to determine which subset of the data that is stored by the cloud-based storage system <b>318</b> should reside in both: 1) the cloud-based object storage <b>348</b>, and 2) at least one of the local storage <b>330</b>, <b>334</b>, <b>338</b> resources or block-storage <b>342</b>, <b>344</b>, <b>346</b> resources that are utilized by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n. </i></p><p id="p-0149" num="0148">As described above, when the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are embodied as EC2 instances, the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of each cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. As such, one or more modules of computer program instructions that are executing within the cloud-based storage system <b>318</b> (e.g., a monitoring module that is executing on its own EC2 instance) may be designed to handle the failure of one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b>. In such an example, the monitoring module may handle the failure of one or more of the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> by creating one or more new cloud computing instances with local storage, retrieving data that was stored on the failed cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>from the cloud-based object storage <b>348</b>, and storing the data retrieved from the cloud-based object storage <b>348</b> in local storage on the newly created cloud computing instances. Readers will appreciate that many variants of this process may be implemented.</p><p id="p-0150" num="0149">Consider an example in which all cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>with local storage <b>330</b>, <b>334</b>, <b>338</b> failed. In such an example, the monitoring module may create new cloud computing instances with local storage, where high-bandwidth instances types are selected that allow for the maximum data transfer rates between the newly created high-bandwidth cloud computing instances with local storage and the cloud-based object storage <b>348</b>. Readers will appreciate that instances types are selected that allow for the maximum data transfer rates between the new cloud computing instances and the cloud-based object storage <b>348</b> such that the new high-bandwidth cloud computing instances can be rehydrated with data from the cloud-based object storage <b>348</b> as quickly as possible. Once the new high-bandwidth cloud computing instances are rehydrated with data from the cloud-based object storage <b>348</b>, less expensive lower-bandwidth cloud computing instances may be created, data may be migrated to the less expensive lower-bandwidth cloud computing instances, and the high-bandwidth cloud computing instances may be terminated.</p><p id="p-0151" num="0150">Readers will appreciate that in some embodiments, the number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b>. The number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system <b>318</b> in order to more rapidly pull data from the cloud-based object storage <b>348</b> and into the new cloud computing instances, as each new cloud computing instance can (in parallel) retrieve some portion of the data stored by the cloud-based storage system <b>318</b>. In such embodiments, once the data stored by the cloud-based storage system <b>318</b> has been pulled into the newly created cloud computing instances, the data may be consolidated within a subset of the newly created cloud computing instances and those newly created cloud computing instances that are excessive may be terminated.</p><p id="p-0152" num="0151">Consider an example in which 1000 cloud computing instances are needed in order to locally store all valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b>. In such an example, assume that all 1,000 cloud computing instances fail. In such an example, the monitoring module may cause 100,000 cloud computing instances to be created, where each cloud computing instance is responsible for retrieving, from the cloud-based object storage <b>348</b>, distinct 1/100,000th chunks of the valid data that users of the cloud-based storage system <b>318</b> have written to the cloud-based storage system <b>318</b> and locally storing the distinct chunk of the dataset that it retrieved. In such an example, because each of the 100,000 cloud computing instances can retrieve data from the cloud-based object storage <b>348</b> in parallel, the caching layer may be restored 100 times faster as compared to an embodiment where the monitoring module only create 1000 replacement cloud computing instances. In such an example, over time the data that is stored locally in the 100,000 could be consolidated into 1,000 cloud computing instances and the remaining 99,000 cloud computing instances could be terminated.</p><p id="p-0153" num="0152">Readers will appreciate that various performance aspects of the cloud-based storage system <b>318</b> may be monitored (e.g., by a monitoring module that is executing in an EC2 instance) such that the cloud-based storage system <b>318</b> can be scaled-up or scaled-out as needed. Consider an example in which the monitoring module monitors the performance of the could-based storage system <b>318</b> via communications with one or more of the cloud computing instances <b>320</b>, <b>322</b> that each are used to support the execution of a storage controller application <b>324</b>, <b>326</b>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, via monitoring communications between cloud computing instances <b>320</b>, <b>322</b>, <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>and the cloud-based object storage <b>348</b>, or in some other way. In such an example, assume that the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are undersized and not sufficiently servicing the I/O requests that are issued by users of the cloud-based storage system <b>318</b>. In such an example, the monitoring module may create a new, more powerful cloud computing instance (e.g., a cloud computing instance of a type that includes more processing power, more memory, etc. . . . ) that includes the storage controller application such that the new, more powerful cloud computing instance can begin operating as the primary controller. Likewise, if the monitoring module determines that the cloud computing instances <b>320</b>, <b>322</b> that are used to support the execution of a storage controller application <b>324</b>, <b>326</b> are oversized and that cost savings could be gained by switching to a smaller, less powerful cloud computing instance, the monitoring module may create a new, less powerful (and less expensive) cloud computing instance that includes the storage controller application such that the new, less powerful cloud computing instance can begin operating as the primary controller.</p><p id="p-0154" num="0153">Consider, as an additional example of dynamically sizing the cloud-based storage system <b>318</b>, an example in which the monitoring module determines that the utilization of the local storage that is collectively provided by the cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>has reached a predetermined utilization threshold (e.g., 95%). In such an example, the monitoring module may create additional cloud computing instances with local storage to expand the pool of local storage that is offered by the cloud computing instances. Alternatively, the monitoring module may create one or more new cloud computing instances that have larger amounts of local storage than the already existing cloud computing instances <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n</i>, such that data stored in an already existing cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can be migrated to the one or more new cloud computing instances and the already existing cloud computing instance <b>340</b><i>a</i>, <b>340</b><i>b</i>, <b>340</b><i>n </i>can be terminated, thereby expanding the pool of local storage that is offered by the cloud computing instances. Likewise, if the pool of local storage that is offered by the cloud computing instances is unnecessarily large, data can be consolidated and some cloud computing instances can be terminated.</p><p id="p-0155" num="0154">Readers will appreciate that the cloud-based storage system <b>318</b> may be sized up and down automatically by a monitoring module applying a predetermined set of rules that may be relatively simple of relatively complicated. In fact, the monitoring module may not only take into account the current state of the cloud-based storage system <b>318</b>, but the monitoring module may also apply predictive policies that are based on, for example, observed behavior (e.g., every night from 10 PM until 6 AM usage of the storage system is relatively light), predetermined fingerprints (e.g., every time a virtual desktop infrastructure adds 100 virtual desktops, the number of IOPS directed to the storage system increase by X), and so on. In such an example, the dynamic scaling of the cloud-based storage system <b>318</b> may be based on current performance metrics, predicted workloads, and many other factors, including combinations thereof.</p><p id="p-0156" num="0155">Readers will further appreciate that because the cloud-based storage system <b>318</b> may be dynamically scaled, the cloud-based storage system <b>318</b> may even operate in a way that is more dynamic. Consider the example of garbage collection. In a traditional storage system, the amount of storage is fixed. As such, at some point the storage system may be forced to perform garbage collection as the amount of available storage has become so constrained that the storage system is on the verge of running out of storage. In contrast, the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage (e.g., by adding more cloud computing instances with local storage). Because the cloud-based storage system <b>318</b> described here can always &#x2018;add&#x2019; additional storage, the cloud-based storage system <b>318</b> can make more intelligent decisions regarding when to perform garbage collection. For example, the cloud-based storage system <b>318</b> may implement a policy that garbage collection only be performed when the number of IOPS being serviced by the cloud-based storage system <b>318</b> falls below a certain level. In some embodiments, other system-level functions (e.g., deduplication, compression) may also be turned off and on in response to system load, given that the size of the cloud-based storage system <b>318</b> is not constrained in the same way that traditional storage systems are constrained.</p><p id="p-0157" num="0156">Readers will appreciate that embodiments of the present disclosure resolve an issue with block-storage services offered by some cloud computing environments as some cloud computing environments only allow for one cloud computing instance to connect to a block-storage volume at a single time. For example, in Amazon AWS, only a single EC2 instance may be connected to an EBS volume. Through the use of EC2 instances with local storage, embodiments of the present disclosure can offer multi-connect capabilities where multiple EC2 instances can connect to another EC2 instance with local storage (&#x2018;a drive instance&#x2019;). In such embodiments, the drive instances may include software executing within the drive instance that allows the drive instance to support I/O directed to a particular volume from each connected EC2 instance. As such, some embodiments of the present disclosure may be embodied as multi-connect block storage services that may not include all of the components depicted in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>.</p><p id="p-0158" num="0157">In some embodiments, especially in embodiments where the cloud-based object storage <b>348</b> resources are embodied as Amazon S3, the cloud-based storage system <b>318</b> may include one or more modules (e.g., a module of computer program instructions executing on an EC2 instance) that are configured to ensure that when the local storage of a particular cloud computing instance is rehydrated with data from S3, the appropriate data is actually in S3. This issue arises largely because S3 implements an eventual consistency model where, when overwriting an existing object, reads of the object will eventually (but not necessarily immediately) become consistent and will eventually (but not necessarily immediately) return the overwritten version of the object. To address this issue, in some embodiments of the present disclosure, objects in S3 are never overwritten. Instead, a traditional &#x2018;overwrite&#x2019; would result in the creation of the new object (that includes the updated version of the data) and the eventual deletion of the old object (that includes the previous version of the data).</p><p id="p-0159" num="0158">In some embodiments of the present disclosure, as part of an attempt to never (or almost never) overwrite an object, when data is written to S3 the resultant object may be tagged with a sequence number. In some embodiments, these sequence numbers may be persisted elsewhere (e.g., in a database) such that at any point in time, the sequence number associated with the most up-to-date version of some piece of data can be known. In such a way, a determination can be made as to whether S3 has the most recent version of some piece of data by merely reading the sequence number associated with an object&#x2014;and without actually reading the data from S3. The ability to make this determination may be particularly important when a cloud computing instance with local storage crashes, as it would be undesirable to rehydrate the local storage of a replacement cloud computing instance with out-of-date data. In fact, because the cloud-based storage system <b>318</b> does not need to access the data to verify its validity, the data can stay encrypted and access charges can be avoided.</p><p id="p-0160" num="0159">The storage systems described above may carry out intelligent data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe. For example, the storage systems described above may be configured to examine each backup to avoid restoring the storage system to an undesirable state. Consider an example in which malware infects the storage system. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify backups that were captured before the malware infected the storage system and those backups that were captured after the malware infected the storage system. In such an example, the storage system may restore itself from a backup that does not include the malware&#x2014;or at least not restore the portions of a backup that contained the malware. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify the presences of malware (or a virus, or some other undesirable), for example, by identifying write operations that were serviced by the storage system and originated from a network subnet that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and originated from a user that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and examining the content of the write operation against fingerprints of the malware, and in many other ways.</p><p id="p-0161" num="0160">Readers will further appreciate that the backups (often in the form of one or more snapshots) may also be utilized to perform rapid recovery of the storage system. Consider an example in which the storage system is infected with ransomware that locks users out of the storage system. In such an example, software resources <b>314</b> within the storage system may be configured to detect the presence of ransomware and may be further configured to restore the storage system to a point-in-time, using the retained backups, prior to the point-in-time at which the ransomware infected the storage system. In such an example, the presence of ransomware may be explicitly detected through the use of software tools utilized by the system, through the use of a key (e.g., a USB drive) that is inserted into the storage system, or in a similar way. Likewise, the presence of ransomware may be inferred in response to system activity meeting a predetermined fingerprint such as, for example, no reads or writes coming into the system for a predetermined period of time.</p><p id="p-0162" num="0161">Readers will appreciate that the various components described above may be grouped into one or more optimized computing packages as converged infrastructures. Such converged infrastructures may include pools of computers, storage and networking resources that can be shared by multiple applications and managed in a collective manner using policy-driven processes. Such converged infrastructures may be implemented with a converged infrastructure reference architecture, with standalone appliances, with a software driven hyper-converged approach (e.g., hyper-converged infrastructures), or in other ways.</p><p id="p-0163" num="0162">Readers will appreciate that the storage systems described above may be useful for supporting various types of software applications. For example, the storage system <b>306</b> may be useful in supporting artificial intelligence (&#x2018;AI&#x2019;) applications, database applications, DevOps projects, electronic design automation tools, event-driven software applications, high performance computing applications, simulation applications, high-speed data capture and analysis applications, machine learning applications, media production applications, media serving applications, picture archiving and communication systems (&#x2018;PACS&#x2019;) applications, software development applications, virtual reality applications, augmented reality applications, and many other types of applications by providing storage resources to such applications.</p><p id="p-0164" num="0163">The storage systems described above may operate to support a wide variety of applications. In view of the fact that the storage systems include compute resources, storage resources, and a wide variety of other resources, the storage systems may be well suited to support applications that are resource intensive such as, for example, AI applications. AI applications may be deployed in a variety of fields, including: predictive maintenance in manufacturing and related fields, healthcare applications such as patient data &#x26; risk analytics, retail and marketing deployments (e.g., search advertising, social media advertising), supply chains solutions, fintech solutions such as business analytics &#x26; reporting tools, operational deployments such as real-time analytics tools, application performance management tools, IT infrastructure management tools, and many others.</p><p id="p-0165" num="0164">Such AI applications may enable devices to perceive their environment and take actions that maximize their chance of success at some goal. Examples of such AI applications can include IBM Watson, Microsoft Oxford, Google DeepMind, Baidu Minwa, and others. The storage systems described above may also be well suited to support other types of applications that are resource intensive such as, for example, machine learning applications. Machine learning applications may perform various types of data analysis to automate analytical model building. Using algorithms that iteratively learn from data, machine learning applications can enable computers to learn without being explicitly programmed. One particular area of machine learning is referred to as reinforcement learning, which involves taking suitable actions to maximize reward in a particular situation. Reinforcement learning may be employed to find the best possible behavior or path that a particular software application or machine should take in a specific situation. Reinforcement learning differs from other areas of machine learning (e.g., supervised learning, unsupervised learning) in that correct input/output pairs need not be presented for reinforcement learning and sub-optimal actions need not be explicitly corrected.</p><p id="p-0166" num="0165">In addition to the resources already described, the storage systems described above may also include graphics processing units (&#x2018;GPUs&#x2019;), occasionally referred to as visual processing unit (&#x2018;VPUs&#x2019;). Such GPUs may be embodied as specialized electronic circuits that rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device. Such GPUs may be included within any of the computing devices that are part of the storage systems described above, including as one of many individually scalable components of a storage system, where other examples of individually scalable components of such storage system can include storage components, memory components, compute components (e.g., CPUs, FPGAs, ASICs), networking components, software components, and others. In addition to GPUs, the storage systems described above may also include neural network processors (&#x2018;NNPs&#x2019;) for use in various aspects of neural network processing. Such NNPs may be used in place of (or in addition to) GPUs and may also be independently scalable.</p><p id="p-0167" num="0166">As described above, the storage systems described herein may be configured to support artificial intelligence applications, machine learning applications, big data analytics applications, and many other types of applications. The rapid growth in these sort of applications is being driven by three technologies: deep learning (DL), GPU processors, and Big Data. Deep learning is a computing model that makes use of massively parallel neural networks inspired by the human brain. Instead of experts handcrafting software, a deep learning model writes its own software by learning from lots of examples. Such GPUs may include thousands of cores that are well-suited to run algorithms that loosely represent the parallel nature of the human brain.</p><p id="p-0168" num="0167">Advances in deep neural networks have ignited a new wave of algorithms and tools for data scientists to tap into their data with artificial intelligence (AI). With improved algorithms, larger data sets, and various frameworks (including open-source software libraries for machine learning across a range of tasks), data scientists are tackling new use cases like autonomous driving vehicles, natural language processing and understanding, computer vision, machine reasoning, strong AI, and many others. Applications of such techniques may include: machine and vehicular object detection, identification and avoidance; visual recognition, classification and tagging; algorithmic financial trading strategy performance management; simultaneous localization and mapping; predictive maintenance of high-value machinery; prevention against cyber security threats, expertise automation; image recognition and classification; question answering; robotics; text analytics (extraction, classification) and text generation and translation; and many others. Applications of AI techniques has materialized in a wide array of products include, for example, Amazon Echo's speech recognition technology that allows users to talk to their machines, Google Translate&#x2122; which allows for machine-based language translation, Spotify's Discover Weekly that provides recommendations on new songs and artists that a user may like based on the user's usage and traffic analysis, Quill's text generation offering that takes structured data and turns it into narrative stories, Chatbots that provide real-time, contextually specific answers to questions in a dialog format, and many others.</p><p id="p-0169" num="0168">Data is the heart of modern AI and deep learning algorithms. Before training can begin, one problem that must be addressed revolves around collecting the labeled data that is crucial for training an accurate AI model. A full scale AI deployment may be required to continuously collect, clean, transform, label, and store large amounts of data. Adding additional high quality data points directly translates to more accurate models and better insights. Data samples may undergo a series of processing steps including, but not limited to: 1) ingesting the data from an external source into the training system and storing the data in raw form, 2) cleaning and transforming the data in a format convenient for training, including linking data samples to the appropriate label, 3) exploring parameters and models, quickly testing with a smaller dataset, and iterating to converge on the most promising models to push into the production cluster, 4) executing training phases to select random batches of input data, including both new and older samples, and feeding those into production GPU servers for computation to update model parameters, and 5) evaluating including using a holdback portion of the data not used in training in order to evaluate model accuracy on the holdout data. This lifecycle may apply for any type of parallelized machine learning, not just neural networks or deep learning. For example, standard machine learning frameworks may rely on CPUs instead of GPUs but the data ingest and training workflows may be the same. Readers will appreciate that a single shared storage data hub creates a coordination point throughout the lifecycle without the need for extra data copies among the ingest, preprocessing, and training stages. Rarely is the ingested data used for only one purpose, and shared storage gives the flexibility to train multiple different models or apply traditional analytics to the data.</p><p id="p-0170" num="0169">Readers will appreciate that each stage in the AI data pipeline may have varying requirements from the data hub (e.g., the storage system or collection of storage systems). Scale-out storage systems must deliver uncompromising performance for all manner of access types and patterns&#x2014;from small, metadata-heavy to large files, from random to sequential access patterns, and from low to high concurrency. The storage systems described above may serve as an ideal AI data hub as the systems may service unstructured workloads. In the first stage, data is ideally ingested and stored on to the same data hub that following stages will use, in order to avoid excess data copying. The next two steps can be done on a standard compute server that optionally includes a GPU, and then in the fourth and last stage, full training production jobs are run on powerful GPU-accelerated servers. Often, there is a production pipeline alongside an experimental pipeline operating on the same dataset. Further, the GPU-accelerated servers can be used independently for different models or joined together to train on one larger model, even spanning multiple systems for distributed training. If the shared storage tier is slow, then data must be copied to local storage for each phase, resulting in wasted time staging data onto different servers. The ideal data hub for the AI training pipeline delivers performance similar to data stored locally on the server node while also having the simplicity and performance to enable all pipeline stages to operate concurrently.</p><p id="p-0171" num="0170">Although the preceding paragraphs discuss deep learning applications, readers will appreciate that the storage systems described herein may also be part of a distributed deep learning (&#x2018;DDL&#x2019;) platform to support the execution of DDL algorithms. The storage systems described above may also be paired with other technologies such as TensorFlow, an open-source software library for dataflow programming across a range of tasks that may be used for machine learning applications such as neural networks, to facilitate the development of such machine learning models, applications, and so on.</p><p id="p-0172" num="0171">The storage systems described above may also be used in a neuromorphic computing environment. Neuromorphic computing is a form of computing that mimics brain cells. To support neuromorphic computing, an architecture of interconnected &#x201c;neurons&#x201d; replace traditional computing models with low-powered signals that go directly between neurons for more efficient computation. Neuromorphic computing may make use of very-large-scale integration (VLSI) systems containing electronic analog circuits to mimic neuro-biological architectures present in the nervous system, as well as analog, digital, mixed-mode analog/digital VLSI, and software systems that implement models of neural systems for perception, motor control, or multisensory integration.</p><p id="p-0173" num="0172">Readers will appreciate that the storage systems described above may be configured to support the storage or use of (among other types of data) blockchains. In addition to supporting the storage and use of blockchain technologies, the storage systems described above may also support the storage and use of derivative items such as, for example, open source blockchains and related tools that are part of the IBM&#x2122; Hyperledger project, permissioned blockchains in which a certain number of trusted parties are allowed to access the block chain, blockchain products that enable developers to build their own distributed ledger projects, and others. Blockchains and the storage systems described herein may be leveraged to support on-chain storage of data as well as off-chain storage of data.</p><p id="p-0174" num="0173">Off-chain storage of data can be implemented in a variety of ways and can occur when the data itself is not stored within the blockchain. For example, in one embodiment, a hash function may be utilized and the data itself may be fed into the hash function to generate a hash value. In such an example, the hashes of large pieces of data may be embedded within transactions, instead of the data itself. Readers will appreciate that, in other embodiments, alternatives to blockchains may be used to facilitate the decentralized storage of information. For example, one alternative to a blockchain that may be used is a blockweave. While conventional blockchains store every transaction to achieve validation, a blockweave permits secure decentralization without the usage of the entire chain, thereby enabling low cost on-chain storage of data. Such blockweaves may utilize a consensus mechanism that is based on proof of access (PoA) and proof of work (PoW).</p><p id="p-0175" num="0174">The storage systems described above may, either alone or in combination with other computing devices, be used to support in-memory computing applications. In-memory computing involves the storage of information in RAM that is distributed across a cluster of computers. Readers will appreciate that the storage systems described above, especially those that are configurable with customizable amounts of processing resources, storage resources, and memory resources (e.g., those systems in which blades that contain configurable amounts of each type of resource), may be configured in a way so as to provide an infrastructure that can support in-memory computing. Likewise, the storage systems described above may include component parts (e.g., NVDIMMs, 3D crosspoint storage that provide fast random access memory that is persistent) that can actually provide for an improved in-memory computing environment as compared to in-memory computing environments that rely on RAM distributed across dedicated servers.</p><p id="p-0176" num="0175">In some embodiments, the storage systems described above may be configured to operate as a hybrid in-memory computing environment that includes a universal interface to all storage media (e.g., RAM, flash storage, 3D crosspoint storage). In such embodiments, users may have no knowledge regarding the details of where their data is stored but they can still use the same full, unified API to address data. In such embodiments, the storage system may (in the background) move data to the fastest layer available&#x2014;including intelligently placing the data in dependence upon various characteristics of the data or in dependence upon some other heuristic. In such an example, the storage systems may even make use of existing products such as Apache Ignite and GridGain to move data between the various storage layers, or the storage systems may make use of custom software to move data between the various storage layers. The storage systems described herein may implement various optimizations to improve the performance of in-memory computing such as, for example, having computations occur as close to the data as possible.</p><p id="p-0177" num="0176">Readers will further appreciate that in some embodiments, the storage systems described above may be paired with other resources to support the applications described above. For example, one infrastructure could include primary compute in the form of servers and workstations which specialize in using General-purpose computing on graphics processing units (&#x2018;GPGPU&#x2019;) to accelerate deep learning applications that are interconnected into a computation engine to train parameters for deep neural networks. Each system may have Ethernet external connectivity, InfiniBand external connectivity, some other form of external connectivity, or some combination thereof. In such an example, the GPUs can be grouped for a single large training or used independently to train multiple models. The infrastructure could also include a storage system such as those described above to provide, for example, a scale-out all-flash file or object store through which data can be accessed via high-performance protocols such as NFS, S3, and so on. The infrastructure can also include, for example, redundant top-of-rack Ethernet switches connected to storage and compute via ports in MLAG port channels for redundancy. The infrastructure could also include additional compute in the form of whitebox servers, optionally with GPUs, for data ingestion, pre-processing, and model debugging. Readers will appreciate that additional infrastructures are also be possible.</p><p id="p-0178" num="0177">Readers will appreciate that the storage systems described above, either alone or in coordination with other computing machinery may be configured to support other AI related tools. For example, the storage systems may make use of tools like ONXX or other open neural network exchange formats that make it easier to transfer models written in different AI frameworks. Likewise, the storage systems may be configured to support tools like Amazon's Gluon that allow developers to prototype, build, and train deep learning models. In fact, the storage systems described above may be part of a larger platform, such as IBM&#x2122; Cloud Private for Data, that includes integrated data science, data engineering and application building services.</p><p id="p-0179" num="0178">Readers will further appreciate that the storage systems described above may also be deployed as an edge solution. Such an edge solution may be in place to optimize cloud computing systems by performing data processing at the edge of the network, near the source of the data. Edge computing can push applications, data and computing power (i.e., services) away from centralized points to the logical extremes of a network. Through the use of edge solutions such as the storage systems described above, computational tasks may be performed using the compute resources provided by such storage systems, data may be storage using the storage resources of the storage system, and cloud-based services may be accessed through the use of various resources of the storage system (including networking resources). By performing computational tasks on the edge solution, storing data on the edge solution, and generally making use of the edge solution, the consumption of expensive cloud-based resources may be avoided and, in fact, performance improvements may be experienced relative to a heavier reliance on cloud-based resources.</p><p id="p-0180" num="0179">While many tasks may benefit from the utilization of an edge solution, some particular uses may be especially suited for deployment in such an environment. For example, devices like drones, autonomous cars, robots, and others may require extremely rapid processing&#x2014;so fast, in fact, that sending data up to a cloud environment and back to receive data processing support may simply be too slow. As an additional example, some IoT devices such as connected video cameras may not be well-suited for the utilization of cloud-based resources as it may be impractical (not only from a privacy perspective, security perspective, or a financial perspective) to send the data to the cloud simply because of the pure volume of data that is involved. As such, many tasks that really on data processing, storage, or communications may be better suited by platforms that include edge solutions such as the storage systems described above.</p><p id="p-0181" num="0180">The storage systems described above may alone, or in combination with other computing resources, serves as a network edge platform that combines compute resources, storage resources, networking resources, cloud technologies and network virtualization technologies, and so on. As part of the network, the edge may take on characteristics similar to other network facilities, from the customer premise and backhaul aggregation facilities to Points of Presence (PoPs) and regional data centers. Readers will appreciate that network workloads, such as Virtual Network Functions (VNFs) and others, will reside on the network edge platform. Enabled by a combination of containers and virtual machines, the network edge platform may rely on controllers and schedulers that are no longer geographically co-located with the data processing resources. The functions, as microservices, may split into control planes, user and data planes, or even state machines, allowing for independent optimization and scaling techniques to be applied. Such user and data planes may be enabled through increased accelerators, both those residing in server platforms, such as FPGAs and Smart NICs, and through SDN-enabled merchant silicon and programmable ASICs.</p><p id="p-0182" num="0181">The storage systems described above may also be optimized for use in big data analytics. Big data analytics may be generally described as the process of examining large and varied data sets to uncover hidden patterns, unknown correlations, market trends, customer preferences and other useful information that can help organizations make more-informed business decisions. As part of that process, semi-structured and unstructured data such as, for example, internet clickstream data, web server logs, social media content, text from customer emails and survey responses, mobile-phone call-detail records, IoT sensor data, and other data may be converted to a structured form.</p><p id="p-0183" num="0182">The storage systems described above may also support (including implementing as a system interface) applications that perform tasks in response to human speech. For example, the storage systems may support the execution intelligent personal assistant applications such as, for example, Amazon's Alexa, Apple Siri, Google Voice, Samsung Bixby, Microsoft Cortana, and others. While the examples described in the previous sentence make use of voice as input, the storage systems described above may also support chatbots, talkbots, chatterbots, or artificial conversational entities or other applications that are configured to conduct a conversation via auditory or textual methods. Likewise, the storage system may actually execute such an application to enable a user such as a system administrator to interact with the storage system via speech. Such applications are generally capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, and other real time information, such as news, although in embodiments in accordance with the present disclosure, such applications may be utilized as interfaces to various system management operations.</p><p id="p-0184" num="0183">The storage systems described above may also implement AI platforms for delivering on the vision of self-driving storage. Such AI platforms may be configured to deliver global predictive intelligence by collecting and analyzing large amounts of storage system telemetry data points to enable effortless management, analytics and support. In fact, such storage systems may be capable of predicting both capacity and performance, as well as generating intelligent advice on workload deployment, interaction and optimization. Such AI platforms may be configured to scan all incoming storage system telemetry data against a library of issue fingerprints to predict and resolve incidents in real-time, before they impact customer environments, and captures hundreds of variables related to performance that are used to forecast performance load.</p><p id="p-0185" num="0184">The storage systems described above may support the serialized or simultaneous execution of artificial intelligence applications, machine learning applications, data analytics applications, data transformations, and other tasks that collectively may form an AI ladder. Such an AI ladder may effectively be formed by combining such elements to form a complete data science pipeline, where exist dependencies between elements of the AI ladder. For example, AI may require that some form of machine learning has taken place, machine learning may require that some form of analytics has taken place, analytics may require that some form of data and information architecting has taken place, and so on. As such, each element may be viewed as a rung in an AI ladder that collectively can form a complete and sophisticated AI solution.</p><p id="p-0186" num="0185">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver an AI everywhere experience where AI permeates wide and expansive aspects of business and life. For example, AI may play an important role in the delivery of deep learning solutions, deep reinforcement learning solutions, artificial general intelligence solutions, autonomous vehicles, cognitive computing solutions, commercial UAVs or drones, conversational user interfaces, enterprise taxonomies, ontology management solutions, machine learning solutions, smart dust, smart robots, smart workplaces, and many others.</p><p id="p-0187" num="0186">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver a wide range of transparently immersive experiences (including those that use digital twins of various &#x201c;things&#x201d; such as people, places, processes, systems, and so on) where technology can introduce transparency between people, businesses, and things. Such transparently immersive experiences may be delivered as augmented reality technologies, connected homes, virtual reality technologies, brain&#x2014;computer interfaces, human augmentation technologies, nanotube electronics, volumetric displays, 4D printing technologies, or others.</p><p id="p-0188" num="0187">The storage systems described above may also, either alone or in combination with other computing environments, be used to support a wide variety of digital platforms. Such digital platforms can include, for example, 5G wireless systems and platforms, digital twin platforms, edge computing platforms, IoT platforms, quantum computing platforms, serverless PaaS, software-defined security, neuromorphic computing platforms, and so on.</p><p id="p-0189" num="0188">The storage systems described above may also be part of a multi-cloud environment in which multiple cloud computing and storage services are deployed in a single heterogeneous architecture. In order to facilitate the operation of such a multi-cloud environment, DevOps tools may be deployed to enable orchestration across clouds. Likewise, continuous development and continuous integration tools may be deployed to standardize processes around continuous integration and delivery, new feature rollout and provisioning cloud workloads. By standardizing these processes, a multi-cloud strategy may be implemented that enables the utilization of the best provider for each workload.</p><p id="p-0190" num="0189">The storage systems described above may be used as a part of a platform to enable the use of crypto-anchors that may be used to authenticate a product's origins and contents to ensure that it matches a blockchain record associated with the product. Similarly, as part of a suite of tools to secure data stored on the storage system, the storage systems described above may implement various encryption technologies and schemes, including lattice cryptography. Lattice cryptography can involve constructions of cryptographic primitives that involve lattices, either in the construction itself or in the security proof. Unlike public-key schemes such as the RSA, Diffie-Hellman or Elliptic-Curve cryptosystems, which are easily attacked by a quantum computer, some lattice-based constructions appear to be resistant to attack by both classical and quantum computers.</p><p id="p-0191" num="0190">A quantum computer is a device that performs quantum computing. Quantum computing is computing using quantum-mechanical phenomena, such as superposition and entanglement. Quantum computers differ from traditional computers that are based on transistors, as such traditional computers require that data be encoded into binary digits (bits), each of which is always in one of two definite states (<b>0</b> or <b>1</b>). In contrast to traditional computers, quantum computers use quantum bits, which can be in superpositions of states. A quantum computer maintains a sequence of qubits, where a single qubit can represent a one, a zero, or any quantum superposition of those two qubit states. A pair of qubits can be in any quantum superposition of 4 states, and three qubits in any superposition of 8 states. A quantum computer with n qubits can generally be in an arbitrary superposition of up to 2{circumflex over (&#x2003;)}n different states simultaneously, whereas a traditional computer can only be in one of these states at any one time. A quantum Turing machine is a theoretical model of such a computer.</p><p id="p-0192" num="0191">The storage systems described above may also be paired with FPGA-accelerated servers as part of a larger AI or ML infrastructure. Such FPGA-accelerated servers may reside near (e.g., in the same data center) the storage systems described above or even incorporated into an appliance that includes one or more storage systems, one or more FPGA-accelerated servers, networking infrastructure that supports communications between the one or more storage systems and the one or more FPGA-accelerated servers, as well as other hardware and software components. Alternatively, FPGA-accelerated servers may reside within a cloud computing environment that may be used to perform compute-related tasks for AI and ML jobs. Any of the embodiments described above may be used to collectively serve as a FPGA-based AI or ML platform. Readers will appreciate that, in some embodiments of the FPGA-based AI or ML platform, the FPGAs that are contained within the FPGA-accelerated servers may be reconfigured for different types of ML models (e.g., LSTMs, CNNs, GRUs). The ability to reconfigure the FPGAs that are contained within the FPGA-accelerated servers may enable the acceleration of a ML or AI application based on the most optimal numerical precision and memory model being used. Readers will appreciate that by treating the collection of FPGA-accelerated servers as a pool of FPGAs, any CPU in the data center may utilize the pool of FPGAs as a shared hardware microservice, rather than limiting a server to dedicated accelerators plugged into it.</p><p id="p-0193" num="0192">The FPGA-accelerated servers and the GPU-accelerated servers described above may implement a model of computing where, rather than keeping a small amount of data in a CPU and running a long stream of instructions over it as occurred in more traditional computing models, the machine learning model and parameters are pinned into the high-bandwidth on-chip memory with lots of data streaming though the high-bandwidth on-chip memory. FPGAs may even be more efficient than GPUs for this computing model, as the FPGAs can be programmed with only the instructions needed to run this kind of computing model.</p><p id="p-0194" num="0193">The storage systems described above may be configured to provide parallel storage, for example, through the use of a parallel file system such as BeeGFS. Such parallel files systems may include a distributed metadata architecture. For example, the parallel file system may include a plurality of metadata servers across which metadata is distributed, as well as components that include services for clients and storage servers.</p><p id="p-0195" num="0194">The systems described above can support the execution of a wide array of software applications. Such software applications can be deployed in a variety of ways, including container-based deployment models. Containerized applications may be managed using a variety of tools. For example, containerized applications may be managed using Docker Swarm, Kubernetes, and others. Containerized applications may be used to facilitate a serverless, cloud native computing deployment and management model for software applications. In support of a serverless, cloud native computing deployment and management model for software applications, containers may be used as part of an event handling mechanisms (e.g., AWS Lambdas) such that various events cause a containerized application to be spun up to operate as an event handler.</p><p id="p-0196" num="0195">The systems described above may be deployed in a variety of ways, including being deployed in ways that support fifth generation (&#x2018;5G&#x2019;) networks. 5G networks may support substantially faster data communications than previous generations of mobile communications networks and, as a consequence may lead to the disaggregation of data and computing resources as modern massive data centers may become less prominent and may be replaced, for example, by more-local, micro data centers that are close to the mobile-network towers. The systems described above may be included in such local, micro data centers and may be part of or paired to multi-access edge computing (&#x2018;MEC&#x2019;) systems. Such MEC systems may enable cloud computing capabilities and an IT service environment at the edge of the cellular network. By running applications and performing related processing tasks closer to the cellular customer, network congestion may be reduced and applications may perform better.</p><p id="p-0197" num="0196">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> illustrates an exemplary computing device <b>350</b> that may be specifically configured to perform one or more of the processes described herein. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, computing device <b>350</b> may include a communication interface <b>352</b>, a processor <b>354</b>, a storage device <b>356</b>, and an input/output (&#x201c;I/O&#x201d;) module <b>358</b> communicatively connected one to another via a communication infrastructure <b>360</b>. While an exemplary computing device <b>350</b> is shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, the components illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> are not intended to be limiting. Additional or alternative components may be used in other embodiments. Components of computing device <b>350</b> shown in <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> will now be described in additional detail.</p><p id="p-0198" num="0197">Communication interface <b>352</b> may be configured to communicate with one or more computing devices. Examples of communication interface <b>352</b> include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, an audio/video connection, and any other suitable interface.</p><p id="p-0199" num="0198">Processor <b>354</b> generally represents any type or form of processing unit capable of processing data and/or interpreting, executing, and/or directing execution of one or more of the instructions, processes, and/or operations described herein. Processor <b>354</b> may perform operations by executing computer-executable instructions <b>362</b> (e.g., an application, software, code, and/or other executable data instance) stored in storage device <b>356</b>.</p><p id="p-0200" num="0199">Storage device <b>356</b> may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and/or device. For example, storage device <b>356</b> may include, but is not limited to, any combination of the non-volatile media and/or volatile media described herein. Electronic data, including data described herein, may be temporarily and/or permanently stored in storage device <b>356</b>. For example, data representative of computer-executable instructions <b>362</b> configured to direct processor <b>354</b> to perform any of the operations described herein may be stored within storage device <b>356</b>. In some examples, data may be arranged in one or more databases residing within storage device <b>356</b>.</p><p id="p-0201" num="0200">I/O module <b>358</b> may include one or more I/O modules configured to receive user input and provide user output. I/O module <b>358</b> may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I/O module <b>358</b> may include hardware and/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touchscreen component (e.g., touchscreen display), a receiver (e.g., an RF or infrared receiver), motion sensors, and/or one or more input buttons.</p><p id="p-0202" num="0201">I/O module <b>358</b> may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen), one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I/O module <b>358</b> is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces and/or any other graphical content as may serve a particular implementation. In some examples, any of the systems, computing devices, and/or other components described herein may be implemented by computing device <b>350</b>.</p><p id="p-0203" num="0202">For further explanation, <figref idref="DRAWINGS">FIG. <b>4</b></figref> sets forth an example of a cloud-based storage system (<b>403</b>) in accordance with some embodiments of the present disclosure. In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the cloud-based storage system (<b>403</b>) is created entirely in a cloud computing environment (<b>402</b>) such as, for example, Amazon Web Services (&#x2018;AWS&#x2019;), Microsoft Azure, Google Cloud Platform, IBM Cloud, Oracle Cloud, and others. The cloud-based storage system (<b>403</b>) may be used to provide services similar to the services that may be provided by the storage systems described above. For example, the cloud-based storage system (<b>403</b>) may be used to provide block storage services to users of the cloud-based storage system (<b>403</b>), the cloud-based storage system (<b>403</b>) may be used to provide storage services to users of the cloud-based storage system (<b>403</b>) through the use of solid-state storage, and so on.</p><p id="p-0204" num="0203">The cloud-based storage system (<b>403</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes two cloud computing instances (<b>404</b>, <b>406</b>) that each are used to support the execution of a storage controller application (<b>408</b>, <b>410</b>). The cloud computing instances (<b>404</b>, <b>406</b>) may be embodied, for example, as instances of cloud computing resources (e.g., virtual machines) that may be provided by the cloud computing environment (<b>402</b>) to support the execution of software applications such as the storage controller application (<b>408</b>, <b>410</b>). In one embodiment, the cloud computing instances (<b>404</b>, <b>406</b>) may be embodied as Amazon Elastic Compute Cloud (&#x2018;EC2&#x2019;) instances. In such an example, an Amazon Machine Image (&#x2018;AMI&#x2019;) that includes the storage controller application (<b>408</b>, <b>410</b>) may be booted to create and configure a virtual machine that may execute the storage controller application (<b>408</b>, <b>410</b>).</p><p id="p-0205" num="0204">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the storage controller application (<b>408</b>, <b>410</b>) may be embodied as a module of computer program instructions that, when executed, carries out various storage tasks. For example, the storage controller application (<b>408</b>, <b>410</b>) may be embodied as a module of computer program instructions that, when executed, carries out the same tasks as the controllers (<b>110</b>A, <b>110</b>B in <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>) described above such as writing data received from the users of the cloud-based storage system (<b>403</b>) to the cloud-based storage system (<b>403</b>), erasing data from the cloud-based storage system (<b>403</b>), retrieving data from the cloud-based storage system (<b>403</b>) and providing such data to users of the cloud-based storage system (<b>403</b>), monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (&#x2018;RAID&#x2019;) or RAID-like data redundancy operations, compressing data, encrypting data, deduplicating data, and so forth. Readers will appreciate that because there are two cloud computing instances (<b>404</b>, <b>406</b>) that each include the storage controller application (<b>408</b>, <b>410</b>), in some embodiments one cloud computing instance (<b>404</b>) may operate as the primary controller as described above while the other cloud computing instance (<b>406</b>) may operate as the secondary controller as described above. In such an example, in order to save costs, the cloud computing instance (<b>404</b>) that operates as the primary controller may be deployed on a relatively high-performance and relatively expensive cloud computing instance while the cloud computing instance (<b>406</b>) that operates as the secondary controller may be deployed on a relatively low-performance and relatively inexpensive cloud computing instance. Readers will appreciate that the storage controller application (<b>408</b>, <b>410</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may include identical source code that is executed within different cloud computing instances (<b>404</b>, <b>406</b>).</p><p id="p-0206" num="0205">Consider an example in which the cloud computing environment (<b>402</b>) is embodied as AWS and the cloud computing instances are embodied as EC2 instances. In such an example, AWS offers many types of EC2 instances. For example, AWS offers a suite of general purpose EC2 instances that include varying levels of memory and processing power. In such an example, the cloud computing instance (<b>404</b>) that operates as the primary controller may be deployed on one of the instance types that has a relatively large amount of memory and processing power while the cloud computing instance (<b>406</b>) that operates as the secondary controller may be deployed on one of the instance types that has a relatively small amount of memory and processing power. In such an example, upon the occurrence of a failover event where the roles of primary and secondary are switched, a double failover may actually be carried out such that: 1) a first failover event where the cloud computing instance (<b>406</b>) that formerly operated as the secondary controller begins to operate as the primary controller, and 2) a third cloud computing instance (not shown) that is of an instance type that has a relatively large amount of memory and processing power is spun up with a copy of the storage controller application, where the third cloud computing instance begins operating as the primary controller while the cloud computing instance (<b>406</b>) that originally operated as the secondary controller begins operating as the secondary controller again. In such an example, the cloud computing instance (<b>404</b>) that formerly operated as the primary controller may be terminated. Readers will appreciate that in alternative embodiments, the cloud computing instance (<b>404</b>) that is operating as the secondary controller after the failover event may continue to operate as the secondary controller and the cloud computing instance (<b>406</b>) that operated as the primary controller after the occurrence of the failover event may be terminated once the primary role has been assumed by the third cloud computing instance (not shown).</p><p id="p-0207" num="0206">Readers will appreciate that while the embodiments described above relate to embodiments where one cloud computing instance (<b>404</b>) operates as the primary controller and the second cloud computing instance (<b>406</b>) operates as the secondary controller, other embodiments are within the scope of the present disclosure. For example, each cloud computing instance (<b>404</b>, <b>406</b>) may operate as a primary controller for some portion of the address space supported by the cloud-based storage system (<b>403</b>), each cloud computing instance (<b>404</b>, <b>406</b>) may operate as a primary controller where the servicing of I/O operations directed to the cloud-based storage system (<b>403</b>) are divided in some other way, and so on. In fact, in other embodiments where costs savings may be prioritized over performance demands, only a single cloud computing instance may exist that contains the storage controller application. In such an example, a controller failure may take more time to recover from as a new cloud computing instance that includes the storage controller application would need to be spun up rather than having an already created cloud computing instance take on the role of servicing I/O operations that would have otherwise been handled by the failed cloud computing instance.</p><p id="p-0208" num="0207">The cloud-based storage system (<b>403</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> includes cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>). The cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may be embodied, for example, as instances of cloud computing resources that may be provided by the cloud computing environment (<b>402</b>) to support the execution of software applications. The cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) of <figref idref="DRAWINGS">FIG. <b>4</b></figref> may differ from the cloud computing instances (<b>404</b>, <b>406</b>) described above as the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) of <figref idref="DRAWINGS">FIG. <b>4</b></figref> have local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources whereas the cloud computing instances (<b>404</b>, <b>406</b>) that support the execution of the storage controller application (<b>408</b>, <b>410</b>) need not have local storage resources. The cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) may be embodied, for example, as EC2 M5 instances that include one or more SSDs, as EC2 R5 instances that include one or more SSDs, as EC2 I3 instances that include one or more SSDs, and so on. In some embodiments, the local storage (<b>414</b>, <b>418</b>, <b>422</b>) must be embodied as solid-state storage (e.g., SSDs) rather than storage that makes use of hard disk drives.</p><p id="p-0209" num="0208">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) can include a software daemon (<b>412</b>, <b>416</b>, <b>420</b>) that, when executed by a cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) can present itself to the storage controller applications (<b>408</b>, <b>410</b>) as if the cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) were a physical storage device (e.g., one or more SSDs). In such an example, the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) may include computer program instructions similar to those that would normally be contained on a storage device such that the storage controller applications (<b>408</b>, <b>410</b>) can send and receive the same commands that a storage controller would send to storage devices. In such a way, the storage controller applications (<b>408</b>, <b>410</b>) may include code that is identical to (or substantially identical to) the code that would be executed by the controllers in the storage systems described above. In these and similar embodiments, communications between the storage controller applications (<b>408</b>, <b>410</b>) and the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) may utilize iSCSI, NVMe over TCP, messaging, a custom protocol, or in some other mechanism.</p><p id="p-0210" num="0209">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, each of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) may also be coupled to block-storage (<b>426</b>, <b>428</b>, <b>430</b>) that is offered by the cloud computing environment (<b>402</b>). The block-storage (<b>426</b>, <b>428</b>, <b>430</b>) that is offered by the cloud computing environment (<b>402</b>) may be embodied, for example, as Amazon Elastic Block Store (&#x2018;EBS&#x2019;) volumes. For example, a first EBS volume (<b>426</b>) may be coupled to a first cloud computing instance (<b>424</b><i>a</i>), a second EBS volume (<b>428</b>) may be coupled to a second cloud computing instance (<b>424</b><i>b</i>), and a third EBS volume (<b>430</b>) may be coupled to a third cloud computing instance (<b>424</b><i>n</i>). In such an example, the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) that is offered by the cloud computing environment (<b>402</b>) may be utilized in a manner that is similar to how the NVRAM devices described above are utilized, as the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) (or some other module) that is executing within a particular cloud comping instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may, upon receiving a request to write data, initiate a write of the data to its attached EBS volume as well as a write of the data to its local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources. In some alternative embodiments, data may only be written to the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources within a particular cloud comping instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). In an alternative embodiment, rather than using the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) that is offered by the cloud computing environment (<b>402</b>) as NVRAM, actual RAM on each of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) may be used as NVRAM, thereby decreasing network utilization costs that would be associated with using an EBS volume as the NVRAM.</p><p id="p-0211" num="0210">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) may be utilized, by cloud computing instances (<b>404</b>, <b>406</b>) that support the execution of the storage controller application (<b>408</b>, <b>410</b>) to service I/O operations that are directed to the cloud-based storage system (<b>403</b>). Consider an example in which a first cloud computing instance (<b>404</b>) that is executing the storage controller application (<b>408</b>) is operating as the primary controller. In such an example, the first cloud computing instance (<b>404</b>) that is executing the storage controller application (<b>408</b>) may receive (directly or indirectly via the secondary controller) requests to write data to the cloud-based storage system (<b>403</b>) from users of the cloud-based storage system (<b>403</b>). In such an example, the first cloud computing instance (<b>404</b>) that is executing the storage controller application (<b>408</b>) may perform various tasks such as, for example, deduplicating the data contained in the request, compressing the data contained in the request, determining where to the write the data contained in the request, and so on, before ultimately sending a request to write a deduplicated, encrypted, or otherwise possibly updated version of the data to one or more of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>). Either cloud computing instance (<b>404</b>, <b>406</b>), in some embodiments, may receive a request to read data from the cloud-based storage system (<b>403</b>) and may ultimately send a request to read data to one or more of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>).</p><p id="p-0212" num="0211">Readers will appreciate that when a request to write data is received by a particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>), the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) or some other module of computer program instructions that is executing on the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may be configured to not only write the data to its own local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and any appropriate block storage (<b>426</b>, <b>428</b>, <b>430</b>) that are offered by the cloud computing environment (<b>402</b>), but the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) or some other module of computer program instructions that is executing on the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may also be configured to write the data to cloud-based object storage (<b>432</b>) that is attached to the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). The cloud-based object storage (<b>432</b>) that is attached to the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may be embodied, for example, as Amazon Simple Storage Service (&#x2018;S3&#x2019;) storage that is accessible by the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). In other embodiments, the cloud computing instances (<b>404</b>, <b>406</b>) that each include the storage controller application (<b>408</b>, <b>410</b>) may initiate the storage of the data in the local storage (<b>414</b>, <b>418</b>, <b>422</b>) of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) and the cloud-based object storage (<b>432</b>).</p><p id="p-0213" num="0212">Readers will appreciate that the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) or other module of computer program instructions that writes the data to block storage (e.g., local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources) and also writes the data to cloud-based object storage (<b>432</b>) may be executed on processing units of dissimilar types (e.g., different types of cloud computing instances, cloud computing instances that contain different processing units). In fact, the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) or other module of computer program instructions that writes the data to block storage (e.g., local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources) and also writes the data to cloud-based object storage (<b>432</b>) can be migrated between different types of cloud computing instances based on demand.</p><p id="p-0214" num="0213">Readers will appreciate that, as described above, the cloud-based storage system (<b>403</b>) may be used to provide block storage services to users of the cloud-based storage system (<b>403</b>). While the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may support block-level access, the cloud-based object storage (<b>432</b>) that is attached to the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) supports only object-based access. In order to address this, the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) or some other module of computer program instructions that is executing on the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may be configured to take blocks of data, package those blocks into objects, and write the objects to the cloud-based object storage (<b>432</b>) that is attached to the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>).</p><p id="p-0215" num="0214">Consider an example in which data is written to the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) in 1 MB blocks. In such an example, assume that a user of the cloud-based storage system (<b>403</b>) issues a request to write data that, after being compressed and deduplicated by the storage controller application (<b>408</b>, <b>410</b>) results in the need to write 5 MB of data. In such an example, writing the data to the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) is relatively straightforward as 5 blocks that are 1 MB in size are written to the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). In such an example, the software daemon (<b>412</b>, <b>416</b>, <b>420</b>) or some other module of computer program instructions that is executing on the particular cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may be configured to: 1) create a first object that includes the first 1 MB of data and write the first object to the cloud-based object storage (<b>432</b>), 2) create a second object that includes the second 1 MB of data and write the second object to the cloud-based object storage (<b>432</b>), 3) create a third object that includes the third 1 MB of data and write the third object to the cloud-based object storage (<b>432</b>), and so on. As such, in some embodiments, each object that is written to the cloud-based object storage (<b>432</b>) may be identical (or nearly identical) in size. Readers will appreciate that in such an example, metadata that is associated with the data itself may be included in each object (e.g., the first 1 MB of the object is data and the remaining portion is metadata associated with the data).</p><p id="p-0216" num="0215">Readers will appreciate that the cloud-based object storage (<b>432</b>) may be incorporated into the cloud-based storage system (<b>403</b>) to increase the durability of the cloud-based storage system (<b>403</b>). Continuing with the example described above where the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) are EC2 instances, readers will understand that EC2 instances are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of the EC2 instance. As such, relying on the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) as the only source of persistent data storage in the cloud-based storage system (<b>403</b>) may result in a relatively unreliable storage system. Likewise, EBS volumes are designed for 99.999% availability. As such, even relying on EBS as the persistent data store in the cloud-based storage system (<b>403</b>) may result in a storage system that is not sufficiently durable. Amazon S3, however, is designed to provide 99.999999999% durability, meaning that a cloud-based storage system (<b>403</b>) that can incorporate S3 into its pool of storage is substantially more durable than various other options.</p><p id="p-0217" num="0216">Readers will appreciate that while a cloud-based storage system (<b>403</b>) that can incorporate S3 into its pool of storage is substantially more durable than various other options, utilizing S3 as the primary pool of storage may result in storage system that has relatively slow response times and relatively long I/O latencies. As such, the cloud-based storage system (<b>403</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref> not only stores data in S3 but the cloud-based storage system (<b>403</b>) also stores data in local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>), such that read operations can be serviced from local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and the block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>), thereby reducing read latency when users of the cloud-based storage system (<b>403</b>) attempt to read data from the cloud-based storage system (<b>403</b>).</p><p id="p-0218" num="0217">In some embodiments, all data that is stored by the cloud-based storage system (<b>403</b>) may be stored in both: 1) the cloud-based object storage (<b>432</b>), and 2) at least one of the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources or block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). In such embodiments, the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources and block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) may effectively operate as cache that generally includes all data that is also stored in S3, such that all reads of data may be serviced by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) without requiring the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) to access the cloud-based object storage (<b>432</b>). Readers will appreciate that in other embodiments, however, all data that is stored by the cloud-based storage system (<b>403</b>) may be stored in the cloud-based object storage (<b>432</b>), but less than all data that is stored by the cloud-based storage system (<b>403</b>) may be stored in at least one of the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources or block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). In such an example, various policies may be utilized to determine which subset of the data that is stored by the cloud-based storage system (<b>403</b>) should reside in both: 1) the cloud-based object storage (<b>432</b>), and 2) at least one of the local storage (<b>414</b>, <b>418</b>, <b>422</b>) resources or block-storage (<b>426</b>, <b>428</b>, <b>430</b>) resources that are utilized by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>).</p><p id="p-0219" num="0218">As described above, when the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) are embodied as EC2 instances, the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) are only guaranteed to have a monthly uptime of 99.9% and data stored in the local instance store only persists during the lifetime of each cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>). As such, one or more modules of computer program instructions that are executing within the cloud-based storage system (<b>403</b>) (e.g., a monitoring module that is executing on its own EC2 instance) may be designed to handle the failure of one or more of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>). In such an example, the monitoring module may handle the failure of one or more of the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) by creating one or more new cloud computing instances with local storage, retrieving data that was stored on the failed cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) from the cloud-based object storage (<b>432</b>), and storing the data retrieved from the cloud-based object storage (<b>432</b>) in local storage on the newly created cloud computing instances. Readers will appreciate that many variants of this process may be implemented.</p><p id="p-0220" num="0219">Consider an example in which all cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) with local storage (<b>414</b>, <b>418</b>, <b>422</b>) failed. In such an example, the monitoring module may create new cloud computing instances with local storage, where high-bandwidth instances types are selected that allow for the maximum data transfer rates between the newly created high-bandwidth cloud computing instances with local storage and the cloud-based object storage (<b>432</b>). Readers will appreciate that instances types are selected that allow for the maximum data transfer rates between the new cloud computing instances and the cloud-based object storage (<b>432</b>) such that the new high-bandwidth cloud computing instances can be rehydrated with data from the cloud-based object storage (<b>432</b>) as quickly as possible. Once the new high-bandwidth cloud computing instances are rehydrated with data from the cloud-based object storage (<b>432</b>), less expensive lower-bandwidth cloud computing instances may be created, data may be migrated to the less expensive lower-bandwidth cloud computing instances, and the high-bandwidth cloud computing instances may be terminated.</p><p id="p-0221" num="0220">Readers will appreciate that in some embodiments, the number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system (<b>403</b>). The number of new cloud computing instances that are created may substantially exceed the number of cloud computing instances that are needed to locally store all of the data stored by the cloud-based storage system (<b>403</b>) in order to more rapidly pull data from the cloud-based object storage (<b>432</b>) and into the new cloud computing instances, as each new cloud computing instance can (in parallel) retrieve some portion of the data stored by the cloud-based storage system (<b>403</b>). In such embodiments, once the data stored by the cloud-based storage system (<b>403</b>) has been pulled into the newly created cloud computing instances, the data may be consolidated within a subset of the newly created cloud computing instances and those newly created cloud computing instances that are excessive may be terminated.</p><p id="p-0222" num="0221">Consider an example in which 1000 cloud computing instances are needed in order to locally store all valid data that users of the cloud-based storage system (<b>403</b>) have written to the cloud-based storage system (<b>403</b>). In such an example, assume that all 1,000 cloud computing instances fail. In such an example, the monitoring module may cause 100,000 cloud computing instances to be created, where each cloud computing instance is responsible for retrieving, from the cloud-based object storage (<b>432</b>), distinct 1/100,000<sup>th </sup>chunks of the valid data that users of the cloud-based storage system (<b>403</b>) have written to the cloud-based storage system (<b>403</b>) and locally storing the distinct chunk of the dataset that it retrieved. In such an example, because each of the 100,000 cloud computing instances can retrieve data from the cloud-based object storage (<b>432</b>) in parallel, the caching layer may be restored 100 times faster as compared to an embodiment where the monitoring module only create 1000 replacement cloud computing instances. In such an example, over time the data that is stored locally in the 100,000 could be consolidated into 1,000 cloud computing instances and the remaining 99,000 cloud computing instances could be terminated.</p><p id="p-0223" num="0222">Readers will appreciate that various performance aspects of the cloud-based storage system (<b>403</b>) may be monitored (e.g., by a monitoring module that is executing in an EC2 instance) such that the cloud-based storage system (<b>403</b>) can be scaled-up or scaled-out as needed. Consider an example in which the monitoring module monitors the performance of the cloud-based storage system (<b>403</b>) via communications with one or more of the cloud computing instances (<b>404</b>, <b>406</b>) that each are used to support the execution of a storage controller application (<b>408</b>, <b>410</b>), via monitoring communications between cloud computing instances (<b>404</b>, <b>406</b>, <b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>), via monitoring communications between cloud computing instances (<b>404</b>, <b>406</b>, <b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) and the cloud-based object storage (<b>432</b>), or in some other way. In such an example, assume that the monitoring module determines that the cloud computing instances (<b>404</b>, <b>406</b>) that are used to support the execution of a storage controller application (<b>408</b>, <b>410</b>) are undersized and not sufficiently servicing the I/O requests that are issued by users of the cloud-based storage system (<b>403</b>). In such an example, the monitoring module may create a new, more powerful cloud computing instance (e.g., a cloud computing instance of a type that includes more processing power, more memory, etc. . . . ) that includes the storage controller application such that the new, more powerful cloud computing instance can begin operating as the primary controller. Likewise, if the monitoring module determines that the cloud computing instances (<b>404</b>, <b>406</b>) that are used to support the execution of a storage controller application (<b>408</b>, <b>410</b>) are oversized and that cost savings could be gained by switching to a smaller, less powerful cloud computing instance, the monitoring module may create a new, less powerful (and less expensive) cloud computing instance that includes the storage controller application such that the new, less powerful cloud computing instance can begin operating as the primary controller.</p><p id="p-0224" num="0223">Consider, as an additional example of dynamically sizing the cloud-based storage system (<b>403</b>), an example in which the monitoring module determines that the utilization of the local storage that is collectively provided by the cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) has reached a predetermined utilization threshold (e.g., 95%). In such an example, the monitoring module may create additional cloud computing instances with local storage to expand the pool of local storage that is offered by the cloud computing instances. Alternatively, the monitoring module may create one or more new cloud computing instances that have larger amounts of local storage than the already existing cloud computing instances (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>), such that data stored in an already existing cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) can be migrated to the one or more new cloud computing instances and the already existing cloud computing instance (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>) can be terminated, thereby expanding the pool of local storage that is offered by the cloud computing instances. Likewise, if the pool of local storage that is offered by the cloud computing instances is unnecessarily large, data can be consolidated and some cloud computing instances can be terminated.</p><p id="p-0225" num="0224">Readers will appreciate that the cloud-based storage system (<b>403</b>) may be sized up and down automatically by a monitoring module applying a predetermined set of rules that may be relatively simple of relatively complicated. In fact, the monitoring module may not only take into account the current state of the cloud-based storage system (<b>403</b>), but the monitoring module may also apply predictive policies that are based on, for example, observed behavior (e.g., every night from 10 PM until 6 AM usage of the storage system is relatively light), predetermined fingerprints (e.g., every time a virtual desktop infrastructure adds 100 virtual desktops, the number of IOPS directed to the storage system increase by X), and so on. In such an example, the dynamic scaling of the cloud-based storage system (<b>403</b>) may be based on current performance metrics, predicted workloads, and many other factors, including combinations thereof.</p><p id="p-0226" num="0225">Readers will further appreciate that because the cloud-based storage system (<b>403</b>) may be dynamically scaled, the cloud-based storage system (<b>403</b>) may even operate in a way that is more dynamic. Consider the example of garbage collection. In a traditional storage system, the amount of storage is fixed. As such, at some point the storage system may be forced to perform garbage collection as the amount of available storage has become so constrained that the storage system is on the verge of running out of storage. In contrast, the cloud-based storage system (<b>403</b>) described here can always &#x2018;add&#x2019; additional storage (e.g., by adding more cloud computing instances with local storage). Because the cloud-based storage system (<b>403</b>) described here can always &#x2018;add&#x2019; additional storage, the cloud-based storage system (<b>403</b>) can make more intelligent decisions regarding when to perform garbage collection. For example, the cloud-based storage system (<b>403</b>) may implement a policy that garbage collection only be performed when the number of IOPS being serviced by the cloud-based storage system (<b>403</b>) falls below a certain level. In some embodiments, other system-level functions (e.g., deduplication, compression) may also be turned off and on in response to system load, given that the size of the cloud-based storage system (<b>403</b>) is not constrained in the same way that traditional storage systems are constrained.</p><p id="p-0227" num="0226">Readers will appreciate that embodiments of the present disclosure resolve an issue with block-storage services offered by some cloud computing environments as some cloud computing environments only allow for one cloud computing instance to connect to a block-storage volume at a single time. For example, in Amazon AWS, only a single EC2 instance may be connected to an EBS volume. Through the use of EC2 instances with local storage, embodiments of the present disclosure can offer multi-connect capabilities where multiple EC2 instances can connect to another EC2 instance with local storage (&#x2018;a drive instance&#x2019;). In such embodiments, the drive instances may include software executing within the drive instance that allows the drive instance to support I/O directed to a particular volume from each connected EC2 instance. As such, some embodiments of the present disclosure may be embodied as multi-connect block storage services that may not include all of the components depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0228" num="0227">In some embodiments, especially in embodiments where the cloud-based object storage (<b>432</b>) resources are embodied as Amazon S3, the cloud-based storage system (<b>403</b>) may include one or more modules (e.g., a module of computer program instructions executing on an EC2 instance) that are configured to ensure that when the local storage of a particular cloud computing instance is rehydrated with data from S3, the appropriate data is actually in S3. This issue arises largely because S3 implements an eventual consistency model where, when overwriting an existing object, reads of the object will eventually (but not necessarily immediately) become consistent and will eventually (but not necessarily immediately) return the overwritten version of the object. To address this issue, in some embodiments of the present disclosure, objects in S3 are never overwritten. Instead, a traditional &#x2018;overwrite&#x2019; would result in the creation of the new object (that includes the updated version of the data) and the eventual deletion of the old object (that includes the previous version of the data).</p><p id="p-0229" num="0228">In some embodiments of the present disclosure, as part of an attempt to never (or almost never) overwrite an object, when data is written to S3 the resultant object may be tagged with a sequence number. In some embodiments, these sequence numbers may be persisted elsewhere (e.g., in a database) such that at any point in time, the sequence number associated with the most up-to-date version of some piece of data can be known. In such a way, a determination can be made as to whether S3 has the most recent version of some piece of data by merely reading the sequence number associated with an object&#x2014;and without actually reading the data from S3. The ability to make this determination may be particularly important when a cloud computing instance with local storage crashes, as it would be undesirable to rehydrate the local storage of a replacement cloud computing instance with out-of-date data. In fact, because the cloud-based storage system (<b>403</b>) does not need to access the data to verify its validity, the data can stay encrypted and access charges can be avoided.</p><p id="p-0230" num="0229">In the example depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, and as described above, the cloud computing instances (<b>404</b>, <b>406</b>) that are used to support the execution of the storage controller applications (<b>408</b>, <b>410</b>) may operate in a primary/secondary configuration where one of the cloud computing instances (<b>404</b>, <b>406</b>) that are used to support the execution of the storage controller applications (<b>408</b>, <b>410</b>) is responsible for writing data to the local storage (<b>414</b>, <b>418</b>, <b>422</b>) that is attached to the cloud computing instances with local storage (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>). In such an example, however, because each of the cloud computing instances (<b>404</b>, <b>406</b>) that are used to support the execution of the storage controller applications (<b>408</b>, <b>410</b>) can access the cloud computing instances with local storage (<b>424</b><i>a</i>, <b>424</b><i>b</i>, <b>424</b><i>n</i>), both of the cloud computing instances (<b>404</b>, <b>406</b>) that are used to support the execution of the storage controller applications (<b>408</b>, <b>410</b>) can service requests to read data from the cloud-based storage system (<b>403</b>).</p><p id="p-0231" num="0230">For further explanation, <figref idref="DRAWINGS">FIG. <b>5</b></figref> sets forth an example of an additional cloud-based storage system (<b>502</b>) in accordance with some embodiments of the present disclosure. In the example depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the cloud-based storage system (<b>502</b>) is created entirely in a cloud computing environment (<b>402</b>) such as, for example, AWS, Microsoft Azure, Google Cloud Platform, IBM Cloud, Oracle Cloud, and others. The cloud-based storage system (<b>502</b>) may be used to provide services similar to the services that may be provided by the storage systems described above. For example, the cloud-based storage system (<b>502</b>) may be used to provide block storage services to users of the cloud-based storage system (<b>502</b>), the cloud-based storage system (<b>403</b>) may be used to provide storage services to users of the cloud-based storage system (<b>403</b>) through the use of solid-state storage, and so on.</p><p id="p-0232" num="0231">The cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may operate in a manner that is somewhat similar to the cloud-based storage system (<b>403</b>) depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, as the cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> includes a storage controller application (<b>506</b>) that is being executed in a cloud computing instance (<b>504</b>). In the example depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, however, the cloud computing instance (<b>504</b>) that executes the storage controller application (<b>506</b>) is a cloud computing instance (<b>504</b>) with local storage (<b>508</b>). In such an example, data written to the cloud-based storage system (<b>502</b>) may be stored in both the local storage (<b>508</b>) of the cloud computing instance (<b>504</b>) and also in cloud-based object storage (<b>510</b>) in the same manner that the cloud-based object storage (<b>510</b>) was used above. In some embodiments, for example, the storage controller application (<b>506</b>) may be responsible for writing data to the local storage (<b>508</b>) of the cloud computing instance (<b>504</b>) while a software daemon (<b>512</b>) may be responsible for ensuring that the data is written to the cloud-based object storage (<b>510</b>) in the same manner that the cloud-based object storage (<b>510</b>) was used above. In other embodiments, the same entity (e.g., the storage controller application) may be responsible for writing data to the local storage (<b>508</b>) of the cloud computing instance (<b>504</b>) and also responsible for ensuring that the data is written to the cloud-based object storage (<b>510</b>) in the same manner that the cloud-based object storage (<b>510</b>) was used above</p><p id="p-0233" num="0232">Readers will appreciate that a cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may represent a less expensive, less robust version of a cloud-based storage system than was depicted in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. In yet alternative embodiments, the cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> could include additional cloud computing instances with local storage that supported the execution of the storage controller application (<b>506</b>), such that failover can occur if the cloud computing instance (<b>504</b>) that executes the storage controller application (<b>506</b>) fails. Likewise, in other embodiments, the cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> can include additional cloud computing instances with local storage to expand the amount local storage that is offered by the cloud computing instances in the cloud-based storage system (<b>502</b>).</p><p id="p-0234" num="0233">Readers will appreciate that many of the failure scenarios described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref> would also apply cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Likewise, the cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> may be dynamically scaled up and down in a similar manner as described above. The performance of various system-level tasks may also be executed by the cloud-based storage system (<b>502</b>) depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> in an intelligent way, as described above.</p><p id="p-0235" num="0234">Readers will appreciate that, in an effort to increase the resiliency of the cloud-based storage systems described above, various components may be located within different availability zones. For example, a first cloud computing instance that supports the execution of the storage controller application may be located within a first availability zone while a second cloud computing instance that also supports the execution of the storage controller application may be located within a second availability zone. Likewise, the cloud computing instances with local storage may be distributed across multiple availability zones. In fact, in some embodiments, an entire second cloud-based storage system could be created in a different availability zone, where data in the original cloud-based storage system is replicated (synchronously or asynchronously) to the second cloud-based storage system so that if the entire original cloud-based storage system went down, a replacement cloud-based storage system (the second cloud-based storage system) could be brought up in a trivial amount of time.</p><p id="p-0236" num="0235">Readers will appreciate that the cloud-based storage systems described herein may be used as part of a fleet of storage systems. In fact, the cloud-based storage systems described herein may be paired with on-premises storage systems. In such an example, data stored in the on-premises storage may be replicated (synchronously or asynchronously) to the cloud-based storage system, and vice versa.</p><p id="p-0237" num="0236">For further explanation, <figref idref="DRAWINGS">FIG. <b>6</b></figref> sets forth a flow chart illustrating an example method of servicing I/O operations in a cloud-based storage system (<b>604</b>). Although depicted in less detail, the cloud-based storage system (<b>604</b>) depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> may be similar to the cloud-based storage systems described above and may be supported by a cloud computing environment (<b>602</b>).</p><p id="p-0238" num="0237">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> includes receiving (<b>606</b>), by the cloud-based storage system (<b>604</b>), a request to write data to the cloud-based storage system (<b>604</b>). The request to write data may be received, for example, from an application executing in the cloud computing environment, by a user of the storage system that is communicatively coupled to the cloud computing environment, and in other ways. In such an example, the request can include the data that is to be written to the cloud-based storage system (<b>604</b>). In other embodiments, the request to write data to the cloud-based storage system (<b>604</b>) may occur at boot-time when the cloud-based storage system (<b>604</b>) is being brought up.</p><p id="p-0239" num="0238">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes deduplicating (<b>608</b>) the data. Data deduplication is a data reduction technique for eliminating duplicate copies of repeating data. The cloud-based storage system (<b>604</b>) may deduplicate (<b>608</b>) the data, for example, by comparing one or more portions of the data to data that is already stored in the cloud-based storage system (<b>604</b>), by comparing a fingerprint for one or more portions of the data to fingerprints for data that is already stored in the cloud-based storage system (<b>604</b>), or in other ways. In such an example, duplicate data may be removed and replaced by a reference to an already existing copy of the data that is already stored in the cloud-based storage system (<b>604</b>).</p><p id="p-0240" num="0239">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes compressing (<b>610</b>) the data. Data compression is a data reduction technique whereby information is encoded using fewer bits than the original representation. The cloud-based storage system (<b>604</b>) may compress (<b>610</b>) the data by applying one or more data compression algorithms to the data, which at this point may not include data that data that is already stored in the cloud-based storage system (<b>604</b>).</p><p id="p-0241" num="0240">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes encrypting (<b>612</b>) the data. Data encryption is a technique that involves the conversion of data from a readable format into an encoded format that can only be read or processed after the data has been decrypted. The cloud-based storage system (<b>604</b>) may encrypt (<b>612</b>) the data, which at this point may have already been deduplicated and compressed, using an encryption key. Readers will appreciate that although the embodiment depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> involves deduplicating (<b>608</b>) the data, compressing (<b>610</b>) the data, and encrypting (<b>612</b>) the data, other embodiments exist in which fewer of these steps are performed and embodiment exist in which the same number of steps or fewer are performed in a different order.</p><p id="p-0242" num="0241">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes storing (<b>614</b>), in block storage of the cloud-based storage system (<b>604</b>), the data. Storing (<b>614</b>) the data in block storage of the cloud-based storage system (<b>604</b>) may be carried out, for example, by storing (<b>616</b>) the data solid-state storage such as local storage (e.g., SSDs) of one or more cloud computing instances, as described in more detail above. In such an example, the data may be spread across the local storage of many cloud computing instances, along with parity data, to implement RAID or RAID-like data redundancy.</p><p id="p-0243" num="0242">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes storing (<b>618</b>), in object storage of the cloud-based storage system (<b>604</b>), the data. Storing (<b>618</b>) the data in object storage of the cloud-based storage system can include creating (<b>620</b>) one or more equal sized objects, where each equal sized object includes a distinct chunk of the data. In such an example, because each object includes data and metadata, the data portion of each object may be equal sized. In other embodiments, the data portion of each created object may not be equal sized. For example, each object could include the data from a predetermined number of blocks in the block storage that was used in the preceding paragraph, or in some other way.</p><p id="p-0244" num="0243">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes receiving (<b>622</b>), by the cloud-based storage system, a request to read data from the cloud-based storage system (<b>604</b>). The request to read data from the cloud-based storage system (<b>604</b>) may be received, for example, from an application executing in the cloud computing environment, by a user of the storage system that is communicatively coupled to the cloud computing environment, and in other ways. The request can include, for example, a logical address the data that is to be read from the cloud-based storage system (<b>604</b>).</p><p id="p-0245" num="0244">The example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref> also includes retrieving (<b>624</b>), from block storage of the cloud-based storage system (<b>604</b>), the data. Readers will appreciate that the cloud-based storage system (<b>604</b>) may retrieve (<b>624</b>) the data from block storage of the cloud-based storage system (<b>604</b>), for example, by the storage controller application forwarding the read request to the cloud computing instance that includes the requested data in its local storage. Readers will appreciate that by retrieving (<b>624</b>) the data from block storage of the cloud-based storage system (<b>604</b>), the data may be retrieved more rapidly than if the data were read from cloud-based object storage, even though the cloud-based object storage does include a copy of the data.</p><p id="p-0246" num="0245">Readers will appreciate that in the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the block storage of the cloud-based storage system (<b>604</b>) is characterized by a low read latency relative to the object storage of the cloud-based storage system. As such, by servicing read operations from the block storage rather than the object storage, the cloud-based storage system (<b>604</b>) may be able to service read operations using low latency block storage, while still offering the resiliency that is associated with object storage solutions offered by cloud services providers. Furthermore, the block storage of the cloud-based storage system (<b>604</b>) may offer relatively high bandwidth. The block storage of the cloud-based storage system (<b>604</b>) may be implemented in a variety of ways as will occur to readers of this disclosure.</p><p id="p-0247" num="0246">For further explanation, <figref idref="DRAWINGS">FIG. <b>7</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system (<b>604</b>). The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes receiving (<b>606</b>) a request to write data to the cloud-based storage system (<b>604</b>), storing (<b>614</b>) the data in block storage of the cloud-based storage system (<b>604</b>), and storing (<b>618</b>) the data in object storage of the cloud-based storage system (<b>604</b>).</p><p id="p-0248" num="0247">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes detecting (<b>702</b>) that at least some portion of the block storage of the cloud-based storage system has become unavailable. Detecting (<b>702</b>) that at least some portion of the block storage of the cloud-based storage system has become unavailable may be carried out, for example, by detecting that one or more of the cloud computing instances that includes local storage has become unavailable, as described in greater detail below.</p><p id="p-0249" num="0248">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes identifying (<b>704</b>) data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable. Identifying (<b>704</b>) data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable may be carried out, for example, through the use of metadata that maps some identifier of a piece of data (e.g., a sequence number, an address) to the location where the data is stored. Such metadata, or separate metadata, may also map the piece of data to one or more object identifiers that identify objects stored in the object storage of the cloud-based storage system that contain the piece of data.</p><p id="p-0250" num="0249">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes retrieving (<b>706</b>), from object storage of the cloud-based storage system, the data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable. Retrieving (<b>706</b>) the data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable from object storage of the cloud-based storage system may be carried out, for example, through the use of metadata described above that maps the data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable to one or more objects stored in the object storage of the cloud-based storage system that contain the piece of data. In such an example, retrieving (<b>706</b>) the data may be carried out by reading the objects that map to the data from the object storage of the cloud-based storage system.</p><p id="p-0251" num="0250">The example method depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref> also includes storing (<b>708</b>), in block storage of the cloud-based storage system, the retrieved data. Storing (<b>708</b>) the retrieved data in block storage of the cloud-based storage system may be carried out, for example, by creating replacement cloud computing instances with local storage and storing the data in the local storage of one or more of the replacement cloud computing instances, as described in greater detail above.</p><p id="p-0252" num="0251">Readers will appreciate that although the embodiments described above relate to embodiments in which data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable is essentially brought back into the block storage layer of the cloud-based storage system by retrieving the data from the object storage layer of the cloud-based storage system, other embodiments are within the scope of the present disclosure. For example, because data may be distributed across the local storage of multiple cloud computing instances using data redundancy techniques such as RAID, in some embodiments the lost data may be brought back into the block storage layer of the cloud-based storage system through a RAID rebuild.</p><p id="p-0253" num="0252">For further explanation, <figref idref="DRAWINGS">FIG. <b>8</b></figref> sets forth a flow chart illustrating an example method of servicing I/O operations in a cloud-based storage system (<b>804</b>). Although depicted in less detail, the cloud-based storage system (<b>804</b>) depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be similar to the cloud-based storage systems described above and may be supported by a cloud computing environment (<b>802</b>).</p><p id="p-0254" num="0253">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> includes receiving (<b>806</b>), by the cloud-based storage system (<b>804</b>), a request to write data to the cloud-based storage system (<b>804</b>). The request to write data may be received, for example, from an application executing in the cloud computing environment, by a user of the storage system that is communicatively coupled to the cloud computing environment, and in other ways. In such an example, the request can include the data that is to be written to the cloud-based storage system (<b>804</b>). In other embodiments, the request to write data to the cloud-based storage system (<b>804</b>) may occur at boot-time when the cloud-based storage system (<b>804</b>) is being brought up.</p><p id="p-0255" num="0254">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes deduplicating (<b>808</b>) the data. Data deduplication is a data reduction technique for eliminating duplicate copies of repeating data. The cloud-based storage system (<b>804</b>) may deduplicate (<b>808</b>) the data, for example, by comparing one or more portions of the data to data that is already stored in the cloud-based storage system (<b>804</b>), by comparing a fingerprint for one or more portions of the data to fingerprints for data that is already stored in the cloud-based storage system (<b>804</b>), or in other ways. In such an example, duplicate data may be removed and replaced by a reference to an already existing copy of the data that is already stored in the cloud-based storage system (<b>804</b>).</p><p id="p-0256" num="0255">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes compressing (<b>810</b>) the data. Data compression is a data reduction technique whereby information is encoded using fewer bits than the original representation. The cloud-based storage system (<b>804</b>) may compress (<b>810</b>) the data by applying one or more data compression algorithms to the data, which at this point may not include data that data that is already stored in the cloud-based storage system (<b>804</b>).</p><p id="p-0257" num="0256">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes encrypting (<b>812</b>) the data. Data encryption is a technique that involves the conversion of data from a readable format into an encoded format that can only be read or processed after the data has been decrypted. The cloud-based storage system (<b>804</b>) may encrypt (<b>812</b>) the data, which at this point may have already been deduplicated and compressed, using an encryption key. Readers will appreciate that although the embodiment depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> involves deduplicating (<b>808</b>) the data, compressing (<b>810</b>) the data, and encrypting (<b>812</b>) the data, other embodiments exist in which fewer of these steps are performed and embodiment exist in which the same number of steps or fewer are performed in a different order.</p><p id="p-0258" num="0257">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes storing (<b>814</b>), in block storage of the cloud-based storage system (<b>804</b>), the data. Storing (<b>814</b>) the data in block storage of the cloud-based storage system (<b>804</b>) may be carried out, for example, by storing (<b>816</b>) the data in local storage (e.g., SSDs) of one or more cloud computing instances, as described in more detail above. In such an example, the data spread across local storage of multiple cloud computing instances, along with parity data, to implement RAID or RAID-like data redundancy.</p><p id="p-0259" num="0258">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes storing (<b>818</b>), in object storage of the cloud-based storage system (<b>804</b>), the data. Storing (<b>818</b>) the data in object storage of the cloud-based storage system can include creating (<b>820</b>) one or more equal sized objects, wherein each equal sized object includes a distinct chunk of the data, as described in greater detail above.</p><p id="p-0260" num="0259">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes receiving (<b>822</b>), by the cloud-based storage system, a request to read data from the cloud-based storage system (<b>804</b>). The request to read data from the cloud-based storage system (<b>804</b>) may be received, for example, from an application executing in the cloud computing environment, by a user of the storage system that is communicatively coupled to the cloud computing environment, and in other ways. The request can include, for example, a logical address the data that is to be read from the cloud-based storage system (<b>804</b>).</p><p id="p-0261" num="0260">The example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref> also includes retrieving (<b>824</b>), from block storage of the cloud-based storage system (<b>804</b>), the data. Readers will appreciate that the cloud-based storage system (<b>804</b>) may retrieve (<b>824</b>) the data from block storage of the cloud-based storage system (<b>804</b>), for example, by the storage controller application forwarding the read request to the cloud computing instance that includes the requested data in its local storage. Readers will appreciate that by retrieving (<b>824</b>) the data from block storage of the cloud-based storage system (<b>804</b>), the data may be retrieved more rapidly than if the data were read from cloud-based object storage, even though the cloud-based object storage does include a copy of the data.</p><p id="p-0262" num="0261">For further explanation, <figref idref="DRAWINGS">FIG. <b>9</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system (<b>804</b>). The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> is similar to the example method depicted in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes receiving (<b>806</b>) a request to write data to the cloud-based storage system (<b>804</b>), storing (<b>814</b>) the data in block storage of the cloud-based storage system (<b>804</b>), and storing (<b>818</b>) the data in object storage of the cloud-based storage system (<b>804</b>).</p><p id="p-0263" num="0262">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes detecting (<b>902</b>) that at least some portion of the block storage of the cloud-based storage system has become unavailable. Detecting (<b>902</b>) that at least some portion of the block storage of the cloud-based storage system has become unavailable may be carried out, for example, by detecting that one or more of the cloud computing instances that includes local storage has become unavailable, as described in greater detail below.</p><p id="p-0264" num="0263">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes identifying (<b>904</b>) data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable. Identifying (<b>904</b>) data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable may be carried out, for example, through the use of metadata that maps some identifier of a piece of data (e.g., a sequence number, an address) to the location where the data is stored. Such metadata, or separate metadata, may also map the piece of data to one or more object identifiers that identify objects stored in the object storage of the cloud-based storage system that contain the piece of data.</p><p id="p-0265" num="0264">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes retrieving (<b>906</b>), from object storage of the cloud-based storage system, the data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable. Retrieving (<b>906</b>) the data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable from object storage of the cloud-based storage system may be carried out, for example, through the use of metadata described above that maps the data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable to one or more objects stored in the object storage of the cloud-based storage system that contain the piece of data. In such an example, retrieving (<b>906</b>) the data may be carried out by reading the objects that map to the data from the object storage of the cloud-based storage system.</p><p id="p-0266" num="0265">The example method depicted in <figref idref="DRAWINGS">FIG. <b>9</b></figref> also includes storing (<b>908</b>), in block storage of the cloud-based storage system, the retrieved data. Storing (<b>908</b>) the retrieved data in block storage of the cloud-based storage system may be carried out, for example, by creating replacement cloud computing instances with local storage and storing the data in the local storage of one or more of the replacement cloud computing instances, as described in greater detail above.</p><p id="p-0267" num="0266">For further explanation, <figref idref="DRAWINGS">FIG. <b>10</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system (<b>604</b>). The example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> is similar to the example method depicted in many of the figures above, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes receiving (<b>606</b>) a request to write data to the cloud-based storage system (<b>604</b>), storing (<b>614</b>) the data in block storage of the cloud-based storage system (<b>604</b>), and storing (<b>618</b>) the data in object storage of the cloud-based storage system (<b>604</b>).</p><p id="p-0268" num="0267">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, receiving (<b>606</b>) the request to write data to the cloud-based storage system can include receiving (<b>1002</b>), by a storage controller application executing in a cloud computing instance, the request to write data to the cloud-based storage. The storage controller application that is executing in a cloud computing instance may be similar to the storage controller applications described above and may be executing, for example, in an EC2 instance as described above in greater detail. In fact, the cloud-based storage system (<b>604</b>) may actually include multiple EC2 instances or similar cloud computing instances, where multiple cloud computing instances are each executing the storage controller application.</p><p id="p-0269" num="0268">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, storing (<b>614</b>), in block storage of the cloud-based storage system, the data can include issuing (<b>1004</b>), by the storage controller application executing in the cloud computing instance, an instruction to write the data to local storage within one or more cloud computing instances with local storage. The one or more cloud computing instances with local storage may be similar to the cloud computing instances with local storage that are described above. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the storage controller application executing in the cloud computing instance may be coupled for data communications with a plurality of cloud computing instances with local storage. In such a way, the storage controller application that is executing in the cloud computing instance may treat the plurality of cloud computing instances with local storage as individual storage devices, such that the storage controller application that is executing in the cloud computing instance may issue (<b>1004</b>) an instruction to write the data to local storage within one or more cloud computing instances with local storage by issuing the same set of commands that the storage controller application would issue when writing data to a connected storage device. Readers will appreciate that because the storage controller application that is executing in the cloud computing instance may be coupled for data communications with a plurality of cloud computing instances with local storage, the storage array controller may be connected to multiple sources of block storage, the storage array controller could only be connected to a single EBS volume if the storage array controller were configured to use EBS as its block-storage.</p><p id="p-0270" num="0269">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>, one or more of the plurality of cloud computing instances with local storage may be coupled for data communications with a plurality of cloud computing instances that are each executing the storage controller application. Readers will appreciate that in some embodiments, because there are a plurality of cloud computing instances that are each executing the storage controller application, a storage controller application that is executing on a first cloud computing instance may serve as the primary controller whereas additional storage controller applications that are executing on additional cloud computing instances may serve as the secondary controllers that can take over for the primary controller upon the occurrence of some event (e.g., failure of the primary controller).</p><p id="p-0271" num="0270">For further explanation, <figref idref="DRAWINGS">FIG. <b>11</b></figref> sets forth a flow chart illustrating an additional example method of servicing I/O operations in a cloud-based storage system (<b>604</b>). The example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> is similar to the example method depicted in many of the figures above, as the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref> also includes receiving (<b>606</b>) a request to write data to the cloud-based storage system (<b>604</b>), storing (<b>614</b>) the data in block storage of the cloud-based storage system (<b>604</b>), and storing (<b>618</b>) the data in object storage of the cloud-based storage system (<b>604</b>).</p><p id="p-0272" num="0271">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, storing (<b>614</b>), in block storage of the cloud-based storage system, the data can include writing (<b>1102</b>), into one or more blocks of the block storage, the data using a block-level protocol. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the block storage may be embodied as one or more block storage devices such as NAND flash memory where data is stored in blocks that can each be used to store data of a maximum size (i.e., a block size). Data may be written (<b>1102</b>) to such storage devices using a block-level protocol such as, for example, iSCSI, Fibre Channel and FCoE (Fibre Channel over Ethernet), and so on. Readers will appreciate that by writing (<b>1102</b>) the data into one or more blocks of the block storage using a block-level protocol, the data that is written to the block storage of the cloud-based storage system is therefore stored in blocks.</p><p id="p-0273" num="0272">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, storing (<b>618</b>), in object storage of the cloud-based storage system, the data can include writing (<b>1104</b>), into one or more objects in the object storage, the data using an object-level protocol. In the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the object storage may be configured to manage data as objects, as opposed to other storage architectures like file systems which manage data as a file hierarchy, and block storage which manages data as blocks. Such object storage can be implemented at the device level (object storage device), the system level, the interface level, or in some other way. Data may be written (<b>1104</b>) to the object storage using an object-level protocol such as, for example, the SCSI command set for Object Storage Devices, RESTful/HTTP protocols, AWS S3 APIs, the Cloud Data Management Interface for accessing cloud storage, and others. Readers will appreciate that by writing (<b>1104</b>) one or more objects into the object storage using an object-level protocol, the data that is written to the object storage of the cloud-based storage system is therefore stored in objects&#x2014;rather than blocks as was the case in the preceding paragraph.</p><p id="p-0274" num="0273">In the example method depicted in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, for each block of data, the data contained in a particular block may be written into a unique object. Readers will appreciate that each object that is written (<b>1104</b>) to object storage may include includes the data itself, as well as its associated metadata and each object may be associated with a globally unique identifier&#x2014;rather than a file name and a file path, block number, and so on. As such, the data that is contained in a particular block may be written into a unique object in the sense that the unique object includes the data itself, metadata associated with the data, and a globally unique identifier. In such embodiments, the cloud-based storage system may therefore maintain a mapping from each block of data that is stored in the cloud-based storage system's block storage and each object that is stored in the cloud-based storage system's object storage. In some embodiments, each object may include the data that is contained in multiple blocks, but the data that is contained in multiple blocks need only be stored in a single object.</p><p id="p-0275" num="0274">For further explanation, <figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example virtual storage system architecture <b>1200</b> in accordance with some embodiments. The virtual storage system architecture may include similar cloud-based computing resources as the cloud-based storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>11</b></figref>.</p><p id="p-0276" num="0275">As described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>E</figref>, in some embodiments of a physical storage system, a physical storage system may include one or more controllers providing storage services to one or more hosts, and with the physical storage system including durable storage devices, such as solid state drives or hard disks, and also including some fast durable storage, such as NVRAM. In some examples, the fast durable storage may be used for staging or transactional commits or for speeding up acknowledgement of operation durability to reduce latency for host requests.</p><p id="p-0277" num="0276">Generally, fast durable storage is often used for intent logging, fast completions, or quickly ensuring transactional consistency, where such (and similar) purposes are referred to herein as staging memory. Generally, both physical and virtual storage systems may have one or more controllers, and may have specialized storage components, such as in the case of physical storage devices, specialized storage devices. Further, in some cases, in physical and virtual storage systems, staging memory may be organized and reorganized in a variety of ways, such as in examples described later. In some examples, in whatever way that memory components or memory devices are constructed, generated, or organized, there may be a set of storage system logic that executes to implement a set of advertised storage services and that stores bulk data for indefinite durations, and there may also be some quantity of staging memory.</p><p id="p-0278" num="0277">In some examples, controller logic that operates a physical storage system, such as physical storage systems <b>1</b>A-<b>3</b>E, may be carried out within a virtual storage system by providing suitable virtual components to, individually or in the aggregate, serve as substitutes for hardware components in a physical storage system&#x2014;where the virtual components are configured to operate the controller logic and to interact with other virtual components that are configured to replace physical components other than the controller.</p><p id="p-0279" num="0278">Continuing with this example, virtual components, executing controller logic, may implement and/or adapt high availability models used to keep a virtual storage system operating in case of failures. As another example, virtual components, executing controller logic, may implement protocols to keep the virtual storage system from losing data in the face of transient failures that may exceed what the virtual storage system may tolerate while continuing to operate.</p><p id="p-0280" num="0279">In some implementations, and particularly with regard to the various virtual storage system architectures described with reference to <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>17</b></figref>, a computing environment may include a set of available, advertised constructs that are typical to cloud-based infrastructures as service platforms, such as cloud infrastructures provided by Amazon Web Services&#x2122;, Microsoft Azure&#x2122;, and/or Google Cloud Platform&#x2122;. In some implementations, example constructs, and construct characteristics within such cloud platforms may include:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0280">Compute instances, where a compute instance may execute or run as virtual machines flexibly allocated to physical host servers;</li>        <li id="ul0002-0002" num="0281">Division of computing resources into separate geographic regions, where computing resources may be distributed or divided among separate, geographic regions, such that users within a same region or same zone as a given cloud computing resource may experience faster and/or higher bandwidth access as compared to users in a different region or different zone than computing resources;</li>        <li id="ul0002-0003" num="0282">Division of resources within geographic regions into &#x201c;availability&#x201d; zones with separate availability and survivability in cases of wide-scale data center outages, network failures, power grid failures, administrative mistakes, and so on. Further, in some examples, resources within a particular cloud platform that are in separate availability zones within a same geographic region generally have fairly high bandwidth and reasonably low latency between each other;</li>        <li id="ul0002-0004" num="0283">Local instance storage, such as hard drives, solid-state drives, rack-local storage, that may provide private storage to a compute instance. Other examples of local instance storage are described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>11</b></figref>;</li>        <li id="ul0002-0005" num="0284">Block stores that are relatively high-speed and durable, and which may be connected to a virtual machine, but whose access may be migrated. Some examples include EBS (Elastic Block Store&#x2122;) in AWS, Managed Disks in Microsoft Azure&#x2122;, and Compute Engine persistent disks in Google Cloud Platform&#x2122;. EBS in AWS operates within a single availability zone, but is otherwise reasonably reliable and available, and intended for long-term use by compute instances, even if those compute instances can move between physical systems and racks;</li>        <li id="ul0002-0006" num="0285">Object stores, such as Amazon S3&#x2122; or an object store using a protocol derived from, compatible with S3, or that has some similar characteristics to S3 (for example, Microsoft's Azure Blob Storage&#x2122;). Generally, object stores are very durable, surviving widespread outages through inter-availability zone and cross-geography replication;</li>        <li id="ul0002-0007" num="0286">Cloud platforms, which may support a variety of object stores or other storage types that may vary in their combinations of capacity prices, access prices, expected latency, expected throughput, availability guarantees, or durability guarantees. For example, in AWS&#x2122;, Standard and Infrequent Access S3 storage classes (referenced herein as standard and write-mostly storage classes) differ in availability (but not durability) as well as in capacity and access prices (with the infrequent access storage tier being less expensive on capacity, but more expensive for retrieval, and with 1/10th the expected availability). Infrequent Access S3 also supports an even less expensive variant that is not tolerant to complete loss of an availability zone, which is referred to herein as a single-availability-zone durable store. AWS further supports archive tiers such as Glacier&#x2122; and Deep Glacier&#x2122; that provide their lowest capacity prices, but with very high access latency on the order of minutes to hours for Glacier, and up to 12 hours with limits on retrieval frequency for Deep Glacier. Glacier and Deep Glacier are referred to herein as examples of archive and deep archive storage classes;</li>        <li id="ul0002-0008" num="0287">Databases, and often multiple different types of databases, including high-scale key-value store databases with reasonable durability (similar to high-speed, durable block stores) and convenient sets of atomic update primitives. Some examples of durable key-value databases include AWS DynamoDB&#x2122;, Google Cloud Platform Big Table&#x2122;, and/or Microsoft Azure's CosmoDB&#x2122;; and</li>        <li id="ul0002-0009" num="0288">Dynamic functions, such as code snippets that can be configured to run dynamically within the cloud platform infrastructure in response to events or actions associated with the configuration. For example, in AWS, these dynamic functions are called AWS Lambdas&#x2122;, and Microsoft Azure and Google Cloud Platform refers to such dynamic functions as Azure Functions&#x2122; and Cloud Functions&#x2122;, respectively.</li>    </ul>    </li></ul></p><p id="p-0281" num="0289">In some implementations, local instance storage is not intended to be provisioned for long-term use, and in some examples, local instance storage may not be migrated as virtual machines migrate between host systems. In some cases, local instance storage may also not be shared between virtual machines, and may come with few durability guarantees due to their local nature (likely surviving local power and software faults, but not necessarily more widespread failures). Further, in some examples, local instance storage, as compared to object storage, may be reasonably inexpensive and may not be billed based on I/Os issued against them, which is often the case with the more durable block storage services.</p><p id="p-0282" num="0290">In some implementations, objects within object stores are easy to create (for example, a web service PUT operation to create an object with a name within some bucket associated with an account) and to retrieve (for example, a web service GET operation), and parallel creates and retrievals across a sufficient number of objects may yield enormous bandwidth. However, in some cases, latency is generally very poor, and modifications or replacement of objects may complete in unpredictable amounts of time, or it may be difficult to determine when an object is fully durable and consistently available across the cloud platform infrastructure. Further, generally, availability, as opposed to durability, of object stores is often low, which is often an issue with many services running in cloud environments.</p><p id="p-0283" num="0291">In some implementations, as an example baseline, a virtual storage system may include one or more of the following virtual components and concepts for constructing, provisioning, and/or defining a virtual storage system built on a cloud platform:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0292">Virtual controller, such as a virtual storage system controller running on a compute instance within a cloud platform's infrastructure or cloud computing environment. In some examples, a virtual controller may run on virtual machines, in containers, or on bare metal servers;</li>        <li id="ul0004-0002" num="0293">Virtual drives, where a virtual drive may be a specific storage object that is provided to a virtual storage system controller to represent a dataset; for example, a virtual drive may be a volume or an emulated disk drive that within the virtual storage system may serve analogously to a physical storage system &#x201c;storage device&#x201d;. Further, virtual drives may be provided to virtual storage system controllers by &#x201c;virtual drive servers&#x201d;;</li>        <li id="ul0004-0003" num="0294">Virtual drive servers may be implemented by compute instances, where virtual drive servers may present storage, such as virtual drives, out of available components provided by a cloud platform, such as various types of local storage options, and where virtual drive servers implement logic that provides virtual drives to one or more virtual storage system controllers, or in some cases, provides virtual drives to one or more virtual storage systems.</li>        <li id="ul0004-0004" num="0295">Staging memory, which may be fast and durable, or at least reasonably fast and reasonably durable, where reasonably durable may be specified according to a durability metric, and where reasonably fast may be specified according to a performance metric, such as IOPS;</li>        <li id="ul0004-0005" num="0296">Virtual storage system dataset, which may be a defined collection of data and metadata that represents coherently managed content that represents a collection of file systems, volumes, objects, and other similar addressable portions of memory;</li>        <li id="ul0004-0006" num="0297">Object storage, which may provide back-end, durable object storage to the staging memory. As illustrated in <figref idref="DRAWINGS">FIGS. <b>12</b></figref>, cloud-based object storage <b>432</b> may be managed by the virtual drives <b>1210</b>-<b>1216</b>;</li>        <li id="ul0004-0007" num="0298">Segments, which may be specified as medium-sized chunks of data. For example, a segment may be defined to be within a range of 1 MB-64 MB, where a segment may hold a combination of data and metadata; and</li>        <li id="ul0004-0008" num="0299">Virtual storage system logic, which may be a set of algorithms running at least on the one or more virtual controllers <b>408</b>, <b>410</b>, and in some cases, with some virtual storage system logic also running on one or more virtual drives <b>1210</b>-<b>1216</b>.</li>    </ul>    </li></ul></p><p id="p-0284" num="0300">In some implementations, a virtual controller may take in or receive I/O operations and/or configuration requests from client hosts <b>1260</b>, <b>1262</b> (possibly through intermediary servers, not depicted) or from administrative interfaces or tools, and then ensure that I/O requests and other operations run through to completion.</p><p id="p-0285" num="0301">In some examples, virtual controllers may present file systems, block-based volumes, object stores, and/or certain kinds of bulk storage databases or key/value stores, and may provide data services such as snapshots, replication, migration services, provisioning, host connectivity management, deduplication, compression, encryption, secure sharing, and other such storage system services.</p><p id="p-0286" num="0302">In the example virtual storage system <b>1200</b> architecture illustrated in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, a virtual storage system <b>1200</b> includes two virtual controllers, where one virtual controller is running within one time zone, time zone <b>1251</b>, and another virtual controller is running within another time zone, time zone <b>1252</b>. In this example, the two virtual controllers are depicted as, respectively, storage controller application <b>408</b> running within cloud computing instance <b>404</b> and storage controller application <b>410</b> running within cloud computing instance <b>406</b>.</p><p id="p-0287" num="0303">In some implementations, a virtual drive server, as discussed above, may represent to a host something similar to physical storage device, such as a disk drive or a solid-state drive, where the physical storage device is operating within the context of a physical storage system.</p><p id="p-0288" num="0304">However, while in this example, the virtual drive presents similarly to a host as a physical storage device, the virtual drive is implemented by a virtual storage system architecture&#x2014;where the virtual storage system architecture may be any of those depicted among <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>16</b></figref>. Further, in contrast to virtual drives that have as an analog a physical storage device, as implemented within the example virtual storage system architectures, a virtual drive server, may not have an analog within the context of a physical storage system. Specifically, in some examples, a virtual drive server may implement logic that goes beyond what is typical of storage devices in physical storage systems, and may in some cases rely on atypical storage system protocols between the virtual drive server and virtual storage system controllers that do not have an analog in physical storage systems. However, conceptually, a virtual drive server may share similarities to a scale-out shared-nothing or software-defined storage systems.</p><p id="p-0289" num="0305">In some implementations, with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, the respective virtual drive servers <b>1210</b>-<b>1216</b> may implement respective software applications or daemons <b>1230</b>-<b>1236</b> to provide virtual drives whose functionality is similar or even identical to that of a physical storage device&#x2014;which allows for greater ease in porting storage system software or applications that are designed for physical storage systems. For example, they could implement a standard SAS, SCSI or NVMe protocol, or they could implement these protocols but with minor or significant non-standard extensions.</p><p id="p-0290" num="0306">In some implementations, with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, staging memory may be implemented by one or more virtual drives <b>1210</b>-<b>1216</b>, where the one or more virtual drives <b>1210</b>-<b>1216</b> store data within respective block-store volumes <b>1240</b>-<b>1246</b> and local storage <b>1220</b>-<b>1226</b>. In this example, the block storage volumes may be AWS EBS volumes that may be attached, one after another, as depicted in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, to two or more other virtual drives. As illustrated in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, block storage volume <b>1240</b> is attached to virtual drive <b>1212</b>, block storage volume <b>1242</b> is attached to virtual drive <b>1214</b>, and so on.</p><p id="p-0291" num="0307">In some implementations, a segment may be specified to be part of an erasure coded set, such as based on a RAID-style implementation, where a segment may store calculated parity content based on erasure codes (e.g. RAID-5 P and Q data) computed from content of other segments. In some examples, contents of segments may be created once, and after the segment is created and filled in, not modified until the segment is discarded or garbage collected.</p><p id="p-0292" num="0308">In some implementations, virtual storage system logic may also run from other virtual storage system components, such as dynamic functions. Virtual storage system logic may provide a complete implementation of the capabilities and services advertised by the virtual storage system <b>1200</b>, where the virtual storage system <b>1200</b> uses one or more available cloud platform components, such as those described above, to implement these services reliably and with appropriate durability.</p><p id="p-0293" num="0309">While the example virtual storage system <b>1200</b> illustrated in <figref idref="DRAWINGS">FIG. <b>12</b></figref> includes two virtual controllers, more generally, other virtual storage system architectures may have more or fewer virtual controllers, as illustrated in <figref idref="DRAWINGS">FIGS. <b>13</b>-<b>16</b></figref>. Further, in some implementations, and similar to the physical storage systems described in <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>4</b></figref>, a virtual storage system may include an active virtual controller and one or more passive virtual controllers.</p><p id="p-0294" num="0310">For further explanation, <figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example virtual storage system architecture <b>1300</b> in accordance with some embodiments. The virtual storage system architecture may include similar cloud-based computing resources as the cloud-based storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>12</b></figref>.</p><p id="p-0295" num="0311">In this implementation, a virtual storage system may run virtual storage system logic, as specified above with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, concurrently on multiple virtual controllers, such as by dividing up a dataset or by careful implementation of concurrent distributed algorithms. In this example, the multiple virtual controllers <b>1320</b>, <b>408</b>, <b>410</b>, <b>1322</b> are implemented within respective cloud computing instances <b>1310</b>, <b>404</b>, <b>406</b>, <b>1312</b>.</p><p id="p-0296" num="0312">As described above with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, in some implementations, a particular set of hosts may be directed preferentially or exclusively to a subset of virtual controllers for a dataset, while a particular different set of hosts may be directed preferentially or exclusively to a different subset of controllers for that same dataset. For example, SCSI ALUA (Asymmetric Logical Unit Access), or NVMe ANA (Asymmetric Namespace Access) or some similar mechanism, could be used to establish preferred (sometimes called &#x201c;optimized&#x201d;) path preferences from one host to a subset of controllers where traffic is generally directed to the preferred subset of controllers but where, such as in the case of faulted requests or network failures or virtual storage system controller failures, that traffic could be redirected to a different subset of virtual storage system controllers. Alternately, SCSI/NVMe volume advertisements or network restrictions, or some similar alternative mechanism, could force all traffic from a particular set of hosts exclusively to one subset of controllers, or could force traffic from a different particular set of hosts to a different subset of controllers.</p><p id="p-0297" num="0313">As illustrated in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, a virtual storage system may preferentially or exclusively direct I/O requests from host <b>1260</b> to virtual storage controllers <b>1320</b> and <b>408</b> with storage controllers <b>410</b> and perhaps <b>1322</b> potentially being available to host <b>1260</b> for use in cases of faulted requests, and may preferentially or exclusively direct I/O requests from host <b>1262</b> to virtual storage controllers <b>410</b> and <b>1322</b> with storage controllers <b>408</b> and perhaps <b>1320</b> potentially being available to host <b>12622</b> for use in cases of faulted requests. In some implementations, a host may be directed to issue I/O requests to one or more virtual storage controllers within the same availability zone as the host, with virtual storage controllers in a different availability zone from the host being available for use in cases of faults.</p><p id="p-0298" num="0314">For further explanation, <figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates an example virtual storage system architecture <b>1400</b> in accordance with some embodiments. The virtual storage system architecture may include similar cloud-based computing resources as the cloud-based storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>13</b></figref>.</p><p id="p-0299" num="0315">In some implementations, boundaries between virtual controllers and virtual drive servers that host virtual drives may be flexible. Further, in some examples, the boundaries between virtual components may not be visible to client hosts <b>1450</b><i>a</i>-<b>1450</b><i>p</i>, and client hosts <b>1450</b><i>a</i>-<b>1450</b><i>p </i>may not detect any distinction between two differently architected virtual storage systems that provides a same set of storage system services.</p><p id="p-0300" num="0316">For example, virtual controllers and virtual drives may be merged into a single virtual entity that may provide similar functionality to a traditional, blade-based scale-out storage system. In this example, virtual storage system <b>1400</b> includes n virtual blades, virtual blades <b>1402</b><i>a</i>-<b>1402</b><i>n</i>, where each respective virtual blade <b>1402</b><i>a</i>-<b>1402</b><i>n </i>may include a respective virtual controller <b>1404</b><i>a</i>-<b>1404</b><i>n</i>, and also include respective local storage <b>1220</b>-<b>1226</b>, <b>1240</b>-<b>1246</b>, but where the storage function may make use of a platform provided object store as might be the case with virtual drive implementations described previously.</p><p id="p-0301" num="0317">In some implementations, because virtual drive servers support general purpose compute, this virtual storage system architecture supports functions migrating between virtual storage system controllers and virtual drive servers. Further, in other cases, this virtual storage system architecture supports other kinds of optimizations, such as optimizations described above that may be performed within staging memory. Further, virtual blades may be configured with varying levels of processing power, where the performance specifications of a given one or more virtual blades may be based on expected optimizations to be performed.</p><p id="p-0302" num="0318">For further explanation, <figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates an example virtual storage system architecture <b>1500</b> in accordance with some embodiments. The virtual storage system architecture may include similar cloud-based computing resources as the cloud-based storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>14</b></figref>.</p><p id="p-0303" num="0319">In this implementations, a virtual storage system <b>1500</b> may be adapted to different availability zones, where such a virtual storage system <b>1500</b> may use cross-storage system synchronous replication logic to isolate as many parts of an instance of a virtual storage system as possible within one availability zone. For example, the presented virtual storage system <b>1500</b> may be constructed from a first virtual storage system <b>1502</b> in one availability zone, zone <b>1</b>, that synchronously replicates data to a second virtual storage system <b>1504</b> in another availability zone, zone <b>2</b>, such that the presented virtual storage system can continue running and providing its services even in the event of a loss of data or availability in one availability zone or the other. Such an implementation could be further implemented to share use of durable objects, such that the storing of data into the object store is coordinated so that the two virtual storage systems do not duplicate the stored content. Further, in such an implementation, the two synchronously replicating storage systems may synchronously replicate updates to the staging memories and perhaps local instance stores within each of their availability zones, to greatly reduce the chance of data loss, while coordinating updates to object stores as a later asynchronous activity to greatly reduce the cost of capacity stored in the object store.</p><p id="p-0304" num="0320">In this example, virtual storage system <b>1504</b> is implemented within cloud computing environments <b>1501</b>. Further, in this example, virtual storage system <b>1502</b> may use cloud-based object storage <b>1550</b>, and virtual storage system <b>1504</b> may use cloud-based storage <b>1552</b>, where in some cases, such as AWS S3, the different object storages <b>1550</b>, <b>1552</b> may be a same cloud object storage with different buckets.</p><p id="p-0305" num="0321">Continuing with this example, virtual storage system <b>1502</b> may, in some cases, synchronously replicate data to other virtual storage systems, or physical storage systems, in other availability zones (not depicted).</p><p id="p-0306" num="0322">In some implementations, the virtual storage system architecture of virtual storage systems <b>1502</b> and <b>1504</b> may be distinct, and even incompatible&#x2014;where synchronous replication may depend instead on synchronous replication models being protocol compatible. Synchronous replication is described in greater detail above with reference to <figref idref="DRAWINGS">FIGS. <b>3</b>D and <b>3</b>E</figref>.</p><p id="p-0307" num="0323">In some implementations, virtual storage system <b>1502</b> may be implemented similarly to virtual storage system <b>1400</b>, described above with reference to <figref idref="DRAWINGS">FIG. <b>14</b></figref>, and virtual storage system <b>1504</b> may be implemented similarly to virtual storage system <b>1200</b>, described above with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0308" num="0324">For further explanation, <figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates an example virtual storage system architecture <b>1500</b> in accordance with some embodiments. The virtual storage system architecture may include similar cloud-based computing resources as the cloud-based storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>15</b></figref>.</p><p id="p-0309" num="0325">In some implementations, similar to the example virtual storage system <b>1500</b> described above with reference to <figref idref="DRAWINGS">FIG. <b>15</b></figref>, a virtual storage system <b>1600</b> may include multiple virtual storage systems <b>1502</b>, <b>1504</b> that coordinate to perform synchronous replication from one virtual storage system to another virtual storage system.</p><p id="p-0310" num="0326">However, in contrast to the example virtual storage system <b>1500</b> described above, the virtual storage system <b>1600</b> illustrated in <figref idref="DRAWINGS">FIG. <b>16</b></figref> provides a single cloud-based object storage <b>1650</b> that is shared among the virtual storage systems <b>1502</b>, <b>1504</b>.</p><p id="p-0311" num="0327">In this example, the shared cloud-based object storage <b>1650</b> may be treated as an additional data replica target, with delayed updates using mechanisms and logic associated with consistent, but non-synchronous replication models. In this way, a single cloud-based object storage <b>1650</b> may be shared consistently between multiple, individual virtual storage systems <b>1502</b>, <b>1504</b> of a virtual storage system <b>1600</b>.</p><p id="p-0312" num="0328">In each of these example virtual storage systems, virtual storage system logic may generally incorporate distributed programming concepts to carry out the implementation of the core logic of the virtual storage system. In other words, as applied to the virtual storage systems, the virtual system logic may be distributed between virtual storage system controllers, scale-out implementations that combine virtual system controllers and virtual drive servers, and implementations that split or otherwise optimize processing between the virtual storage system controllers and virtual drive servers.</p><p id="p-0313" num="0329">For further explanation, <figref idref="DRAWINGS">FIG. <b>17</b></figref> sets forth a flow chart illustrating an example method of data flow within in a virtual storage system <b>1700</b>. The example method depicted in <figref idref="DRAWINGS">FIG. <b>17</b></figref> may be implemented on any of the virtual storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>12</b>-<b>16</b></figref>. In other words, virtual storage system <b>1700</b> may be implemented by either virtual storage system <b>1200</b>, <b>1300</b>, <b>1400</b>, <b>1500</b>, or <b>1600</b>.</p><p id="p-0314" num="0330">As depicted in <figref idref="DRAWINGS">FIG. <b>17</b></figref>, the example method includes receiving (<b>1702</b>), by a virtual storage system <b>1700</b>, a request to write data to the virtual storage system <b>1700</b>; storing (<b>1704</b>), within staging memory provided by one or more virtual drives of the virtual storage system <b>1700</b>, the data <b>1754</b>; and migrating (<b>1706</b>), from the staging memory to more durable data storage provided by a cloud service provider, at least a portion of data stored within the staging memory.</p><p id="p-0315" num="0331">Receiving (<b>1702</b>), by the virtual storage system <b>1700</b>, the request to write data to the virtual storage system <b>1700</b> may be carried out as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>16</b></figref>, where the data may be included within one or more received storage operations <b>1752</b>, and the request may be received using one or more communication protocols, or one or more API calls provided by a cloud computing environment <b>402</b> that is hosting the virtual storage system <b>1700</b>.</p><p id="p-0316" num="0332">Storing (<b>1704</b>), within staging memory provided by one or more virtual drives of the virtual storage system <b>1700</b>, the data <b>1754</b> may be carried out as described above with reference to virtual storage systems <b>1200</b>-<b>1600</b>, where a virtual storage system, for example, virtual storage system <b>1200</b>, receives data from a client host <b>1260</b> at a virtual controller <b>408</b>, <b>410</b>, and where the virtual controller <b>408</b>, <b>410</b> stores the data among the local storage of the layer of virtual drives <b>1210</b>-<b>1216</b>. Staging memory provided by virtual drives is described in greater detail above with reference to <figref idref="DRAWINGS">FIG. <b>12</b></figref>.</p><p id="p-0317" num="0333">Migrating (<b>1706</b>), from the staging memory to more durable data storage provided by a cloud service provider, at least a portion of data stored within the staging memory may be carried out as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>16</b></figref>, where data is migrated from staging memory to a cloud-based object storage.</p><p id="p-0318" num="0334">Additional examples of receiving data and storing the data within staging memory, and subsequently migrating data from staging memory to more durable storage are described within co-pending patent application Ser. No. 16/524,861, which is incorporated in its entirely for all purposes herein. Specifically, all of the migration techniques described in co-pending patent application Ser. No. 16/524,861, which describe storing data within staging memory, also referred to as a first tier of storage, and optionally processing, modifying, or optimizing the data within the staging memory before, based on a migration event, the staging memory data is migrated to more durable memory, or cloud-based object storage.</p><p id="p-0319" num="0335">For further explanation, <figref idref="DRAWINGS">FIG. <b>18</b></figref> sets forth a flow chart illustrating an example method of data flow within in a virtual storage system <b>1700</b>. The example method depicted in <figref idref="DRAWINGS">FIG. <b>18</b></figref> may be implemented by one any of the virtual storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>16</b></figref>. In other words, virtual storage system <b>1700</b> may be implemented at least by either virtual storage system <b>1200</b>, <b>1300</b>, <b>1400</b>, <b>1500</b>, <b>1502</b>, <b>1504</b>, or <b>1600</b>, either individually or by a combination of individual features.</p><p id="p-0320" num="0336">The above example with regard to <figref idref="DRAWINGS">FIG. <b>18</b></figref> describes an implementation of data flow through storage tiers of a virtual storage system, and more specifically, data flowing from staging memory to more durable object storage. However, more generally, data flow through a virtual storage system may occur in stages between any pair of multiple, different tiers of storage. Specifically, in this example, different tiers of storage may be: (1) virtual controller storage, (2) staging memory for transactional consistency and fast completions, (3) storage within virtual drives provided by virtual drive servers, (4) virtual drive server local instance store(s), and (5) an object store that is provided by a cloud services provider.</p><p id="p-0321" num="0337">As depicted in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, the example method includes: receiving (<b>1802</b>), by a virtual storage system <b>1700</b>, a request to write data to the virtual storage system <b>1700</b>; storing (<b>1804</b>), within storage provided by a first tier of storage of the virtual storage system <b>1700</b>, the data <b>1854</b>; and migrating (<b>1806</b>), from the first tier of storage to a second tier of storage, at least a portion of data stored within the first tier of storage.</p><p id="p-0322" num="0338">Receiving (<b>1802</b>), by the virtual storage system <b>1700</b>, the request to write data <b>1854</b> to the virtual storage system <b>1700</b> may be carried out as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>17</b></figref>, where the data may be included within one or more received storage operations <b>1852</b> from a host computer or application, and the request may be received using one or more communication protocols, or one or more API calls provided by a cloud computing environment <b>402</b> that is hosting the virtual storage system <b>1700</b>.</p><p id="p-0323" num="0339">Storing (<b>1804</b>), within storage provided by a first tier of storage of the virtual storage system <b>1700</b>, the data <b>1854</b> may be carried out as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>17</b></figref>, where one or more virtual controllers may be configured to receive and handle storage operations <b>1852</b>, including processing write requests and storing corresponding write data into one or more storage tiers of the virtual storage system <b>1700</b>. Five example storage tiers of the virtual storage system are described above, with reference to the beginning description for <figref idref="DRAWINGS">FIG. <b>18</b></figref>.</p><p id="p-0324" num="0340">Migrating (<b>1806</b>), from the first tier of storage to a second tier of storage, at least a portion of data stored within the first tier of storage may be carried as described above with regard to movement of data through various tiers of storage. Further, in some examples, as described above, data may be transformed in various ways at one or of the storage tiers, including deduplication, overwriting, aggregating into segments, among other transformations, generating recovery metadata or continuous-data-protection metadata, as data flows from the one or more virtual controllers through the virtual storage system <b>1700</b> into backend storage, including one or more of object storage and any of the storage class options described below.</p><p id="p-0325" num="0341">A virtual storage system may dynamically adjust cloud platform resource usage in response to changes in cost requirements based upon cloud platform pricing structures, as described in greater detail below.</p><p id="p-0326" num="0342">Under various conditions, budgets, capacities, usage and/or performance needs may change, and a user may be presented with cost projections and a variety of costing scenarios that may include increasing a number of server or storage components, the available types of components, the platforms that may provide suitable components, and/or models for both how alternatives to a current setup might work and cost in the future. In some examples, such cost projections may include costs of migrating between alternatives given that network transfers incur a cost, where migrations tend to include administrative overhead, and for a duration of a transfer of data between types of storage or vendors, additional total capacity may be needed until necessary services are fully operational.</p><p id="p-0327" num="0343">Further, in some implementations, instead of pricing out what is being used and providing options for configurations based on potential costs, a user may, instead, provide a budget, or otherwise specify an expense threshold, and the storage system service may generate a virtual storage system configuration with specified resource usage such that the storage system service operates within the budget or expense threshold.</p><p id="p-0328" num="0344">Continuing with this example of a storage system service operating within a budget or expense threshold&#x2014;with regard to compute resources, while limiting compute resources limits performance, costs may be managed based on modifying configurations of virtual application servers, virtual storage system controllers, and other virtual storage system components by adding, removing, or replacing with faster or slower virtual storage system components. In some examples, if costs or budgets are considered over given lengths of time, such as monthly, quarterly, or yearly billing, then by ratcheting down the cost of virtual compute resources in response to lowered workloads, more compute resources may be available in response to increases in workloads.</p><p id="p-0329" num="0345">Further, in some examples, in response to determining that given workloads may be executed at flexible times, those workloads may be scheduled to execute during periods of time that are less expensive to operate or initiate compute resources within the virtual storage system. In some examples, costs and usage may be monitored over the course of a billing period to determine whether usage earlier in the billing period may affect the ability to run at expected or acceptable performance levels later in the billing period, or whether lower than expected usage during parts of a billing period suggest there is sufficient budget remaining to run optional work or to suggest that renegotiating terms would reduce costs.</p><p id="p-0330" num="0346">Continuing with this example, such a model of dynamic adjustments to a virtual storage system in response to cost or resource constraints may be extend from compute resources to also include storage resources. However, a different consideration for storage resources is that storage resources have less elastic costs than compute resources because stored data continues to occupy storage resources over a given period of time.</p><p id="p-0331" num="0347">Further, in some examples, there may be transfer costs within cloud platforms associated with migrating data between storage services that have different capacity and transfer prices. Each of these costs of maintaining virtual storage system resources must be considered and may serve as a basis for configuring, deploying, and modifying compute and/or storage resources within a virtual storage system.</p><p id="p-0332" num="0348">In some cases, the virtual storage system may adjust in response to storage costs based on cost projections that may include comparing continuing storage costs using existing resources as compared to a combination of transfer costs of the storage content and storage costs of less expensive storage resources (such as storage provided by a different cloud platform, or to or from storage hardware in customer-managed data centers, or to or from customer-managed hardware kept in a collocated shared management data center). In this way, over a given time span that is long enough to support data transfers, and in some cases based on predictable use patterns, a budget limit-based virtual storage system model may adjust in response to different cost or budget constraints or requirements.</p><p id="p-0333" num="0349">In some implementations, as capacity grows in response to an accumulation of stored data, and as workloads, over a period of time, fluctuate around some average or trend line, a dynamically configurable virtual storage system may calculate whether a cost of transferring an amount of data to some less expensive type of storage class or less expensive location of storage may be possible within a given budget or within a given budget change. In some examples, the virtual storage system may determine storage transfers based on costs over a period of time that includes a billing cycle or multiple billing cycles, and in this way, preventing a budget or cost from being exceeded in a subsequent billing cycle.</p><p id="p-0334" num="0350">In some implementations, a cost managed or cost constrained virtual storage system, in other words, a virtual storage system that reconfigures itself in response to cost constraints or other resource constraints, may also make use of write-mostly, archive, or deep archive storage classes that are available from cloud infrastructure providers. Further, in some cases, the virtual storage system may operate in accordance with the models and limitations described elsewhere with regard to implementing a storage system to work with differently behaving storage classes.</p><p id="p-0335" num="0351">For example, a virtual storage system may make automatic use of a write-mostly storage class based on a determination that a cost or budget may be saved and reused for other purposes if data that is determined to have a low likelihood of access is consolidated, such as into segments that consolidate data with similar access patterns or similar access likelihood characteristics.</p><p id="p-0336" num="0352">Further, in some cases, consolidated segments of data may then be migrated to a write-mostly storage class, or other lower cost storage class. In some examples, use of local instance stores on virtual drives may result in cost reductions that allow virtual storage system resource adjustments that result in reducing costs to satisfy cost or budget change constraints. In some cases, the local instance stores may use write-mostly object stores as a backend, and because read load is often taken up entirely by the local instance stores, the local instance stores may operate mostly as a cache rather than storing complete copies of a current dataset.</p><p id="p-0337" num="0353">In some examples, a single-availability, durable store may also be used if a dataset may be identified that is not required or expected to survive loss of an availability zone, and such use may serve as a cost savings basis in dynamically reconfiguring a virtual storage system. In some cases, use of a single-availability zone for a dataset may include an explicit designation of the dataset, or indirect designation through some storage policy.</p><p id="p-0338" num="0354">Further, the designation or storage policy may also include an association with a specific availability zone; however, in some cases, the specific availability zone may be determined by a dataset association with, for example, host systems that are accessing a virtual storage system from within a particular availability zone. In other words, in this example, the specific availability zone may be determined to be a same availability zone that includes a host system.</p><p id="p-0339" num="0355">In some implementations, a virtual storage system may base a dynamic reconfiguration on use of archive or deep archive storage classes, if the virtual storage system is able to provide or satisfy performance requirements while storage operations are limited by the constraints of archive and/or deep archive storage classes. Further, in some cases, transfer of old snapshot or continuous data protection datasets, or other datasets that are no longer active, may be enabled to be transferred to archive storage classes based on a storage policy specifying a data transfer in response to a particular activity level, or based on a storage policy specify a data transfer in response to data not being accessed for a specified period of time. In other examples, the virtual storage system may transfer data to an archive storage class in response to a specific user request.</p><p id="p-0340" num="0356">Further, given that retrieval from an archive storage class may take minutes, hours, or days, users of the particular dataset being stored in an archive or deep archive storage class may be requested by the virtual storage system to provide specific approval of the time required to retrieve the dataset. In some examples, in the case of using deep archive storage classes, there may also be limits on how frequently data access is allowed, which may put further constraints on the circumstances in which the dataset may be stored in archive or deep archive storage classes.</p><p id="p-0341" num="0357">Implementing a virtual storage system to work with differently behaving storage classes may be carried out using a variety of techniques, as described in greater detail below.</p><p id="p-0342" num="0358">In various implementations, some types of storage, such as a write-mostly storage class may have lower prices for storing and keeping data than for accessing and retrieving data. In some examples, if data may be identified or determined to be rarely retrieved, or retrieved below a specified threshold frequency, then costs may be reduced by storing the data within a write-mostly storage class. In some cases, such a write-mostly storage class may become an additional tier of storage that may be used by virtual storage systems with access to one or more cloud infrastructures that provide such storage classes.</p><p id="p-0343" num="0359">For example, a storage policy may specify that a write-mostly storage class, or other archive storage class, may be used for storing segments of data from snapshots, checkpoints, or historical continuous data protection datasets that have been overwritten or deleted from recent instances of the datasets they track. Further, in some cases, these segments may be transferred based on exceeding a time limit without being accessed, where the time limit may be specified in a storage policy, and where the time limit corresponds to a low likelihood of retrieval&#x2014;outside of inadvertent deletion or corruption that may require access to an older historical copy of a dataset, or a fault or larger-scale disaster that may require some forensic investigation, a criminal event, an administrative error such as inadvertently deleting more recent data or the encryption or deletion or a combination of parts or all of a dataset and its more recent snapshots, clones, or continuous data protection tracking images as part of a ransomware attack.</p><p id="p-0344" num="0360">In some implementations, use of a cloud-platform write-mostly storage class may create cost savings that may then be used to provision compute resources to improve performance of the virtual storage system. In some examples, if a virtual storage system tracks and maintains storage access information, such as using an age and snapshot/clone/continuous-data-protection-aware garbage collector or segment consolidation and/or migration algorithm, then the virtual storage system may use a segment model as part of establishing efficient metadata references while minimizing an amount of data transferred to the mostly-write storage class.</p><p id="p-0345" num="0361">Further, in some implementations, a virtual storage system that integrates snapshots, clones, or continuous-data-protection tracking information may also reduce an amount of data that may be read back from a write-mostly storage repository as data already resident in less expensive storage classes, such as local instance stores on virtual drives or objects stored in a cloud platform's standard storage class, may be used for data that is still available from these local storage sources and has not been overwritten or deleted since the time of a snapshot, clone, or continuous-data-protection recovery point having been written to write-mostly storage. Further, in some examples, data retrieved from a write-mostly storage class may be written into some other storage class, such as virtual drive local instance stores, for further use, and in some cases, to avoid being charged again for retrieval.</p><p id="p-0346" num="0362">In some implementations, an additional level of recoverable content may be provided based on the methods and techniques described above with regard to recovering from loss of staging memory content, where the additional level of recoverable content may be used to provide reliability back to some consistent points in the past entirely from data stored in one of these secondary stores including objects stored in these other storage classes.</p><p id="p-0347" num="0363">Further, in this example, recoverability may be based on recording the information necessary to roll back to some consistent point, such as a snapshot or checkpoint, using information that is held entirely within that storage class. In some examples, such an implementation may be based on a storage class including a complete past image of a dataset instead of only data that has been overwritten or deleted, where overwriting or deleting may prevent data from being present in more recent content from the dataset. While this example implementation may increase costs, as a result, the virtual storage system may provide a valuable service such as recovery from a ransomware attack, where protection from a ransomware attack may be based on requiring additional levels of permission or access that restrict objects stored in the given storage class from being deleted or overwritten.</p><p id="p-0348" num="0364">In some implementations, in addition to or instead of using a write-mostly storage class, a virtual storage system may also use archive storage classes and/or deep archive storage classes for content that is&#x2014;relative to write-mostly storage classes&#x2014;even less likely to be accessed or that may only be needed in the event of disasters that are expected to be rare, but for which a high expense is worth the ability to retrieve the content. Examples of such low access content may include historical versions of a dataset, or snapshots, or clones that may, for example, be needed in rare instances, such as a discovery phase in litigation or some other similar disaster, particularly if another party may be expected to pay for retrieval.</p><p id="p-0349" num="0365">However, as noted above, keeping historical versions of a dataset, or snapshots, or clones in the event of a ransomware attack may be another example. In some examples, such as the event of litigation, and to reduce an amount of data stored, a virtual storage system may only store prior versions of data within datasets that have been overwritten or deleted. In other examples, such as in the event of ransomware or disaster recovery, as described above, a virtual storage system may store a complete dataset in archive or deep archive storage class, in addition to storing controls to eliminate the likelihood of unauthorized deletions or overwrites of the objects stored in the given archive or deep archive storage class, including storing any data needed to recover a consistent dataset from at least a few different points in time.</p><p id="p-0350" num="0366">In some implementations, a difference between how a virtual storage system makes use of: (a) objects stored in a write-mostly storage class and (b) objects stored in archive or deep archive storage classes, may include accessing a snapshot, clone, or continuous-data-protection checkpoint that accesses a given storage class. In the example of a write-mostly storage class, objects may be retrieved with a similar, or perhaps identical, latency to objects stored in a standard storage class provided by the virtual storage system cloud platform, where the cost for storage in the write-mostly storage class may be higher than the standard storage class.</p><p id="p-0351" num="0367">In some examples, a virtual storage system may implement use of the write-mostly storage class as a minor variant of a regular model for accessing content that correspond to segments only currently available from objects in the standard storage class. In particular, in this example, data may be retrieved when some operation is reading that data, such as by reading from a logical offset of a snapshot of a tracking volume. In some cases, a virtual storage system may request agreement from a user to pay extra fees for any such retrievals at the time access to the snapshot, or other type of stored image, is requested, and the retrieved data may be stored into local instance stores associated with a virtual drive or copied (or converted) into objects in a standard storage class to avoid continuing to pay higher storage retrieval fees using the other storage class that is not included within the architecture of the virtual storage system.</p><p id="p-0352" num="0368">In some implementations, in contrast to the negligible latencies in write-mostly storage classes discussed above, latencies or procedures associated with retrieving objects from archive or deep archive storage classes may make implementation impractical. In some cases, if it requires hours or days to retrieve objects from an archive or deep archive storage class, then an alternative procedure may be implemented. For example, a user may request access to a snapshot that is known to require at least some segments stored in objects stored in an archive or deep archive storage class, and in response, instead of reading any such segments on demand, the virtual storage system may determine a list of segments that include the requested dataset (or snapshot, clone, or continuous data protection recovery point) and that are stored into objects in the archive or deep archive storage.</p><p id="p-0353" num="0369">In this way, in this example, the virtual storage system may request that the segments in the determined list of segments be retrieved to be copied into, say, objects in a standard storage class or into virtual drives to be stored in local instance stores. In this example, the retrieval of the list of segments may take hours or days, but from a performance and cost basis, it is preferable to request the entire list of segments at once instead of making individual requests on demand. Finishing with this example, after the list of segments has been retrieved from the archive or deep archive storage, then access may be provided to the retrieved snapshot, clone, or continuous data protection recovery point.</p><p id="p-0354" num="0370">Readers will appreciate that although the embodiments described above relate to embodiments in which data that was stored in the portion of the block storage of the cloud-based storage system that has become unavailable is essentially brought back into the block-storage layer of the cloud-based storage system by retrieving the data from the object storage layer of the cloud-based storage system, other embodiments are within the scope of the present disclosure. For example, because data may be distributed across the local storage of multiple cloud computing instances using data redundancy techniques such as RAID, in some embodiments the lost data may be brought back into the block-storage layer of the cloud-based storage system through a RAID rebuild.</p><p id="p-0355" num="0371">Readers will further appreciate that although the preceding paragraphs describe cloud-based storage systems and the operation thereof, the cloud-based storage systems described above may be used to offer block storage as-a-service as the cloud-based storage systems may be spun up and utilized to provide block service in an on-demand, as-needed fashion. In such an example, providing block storage as a service in a cloud computing environment, can include: receiving, from a user, a request for block storage services; creating a volume for use by the user; receiving I/O operations directed to the volume; and forwarding the I/O operations to a storage system that is co-located with hardware resources for the cloud computing environment.</p><p id="p-0356" num="0372">For further explanation, <figref idref="DRAWINGS">FIG. <b>19</b></figref> sets forth an example of a computing environment <b>1900</b> implementing virtual storage system orchestration in accordance with some embodiments of the present disclosure.</p><p id="p-0357" num="0373">With regard to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, a computing device <b>1901</b> may provide virtual computing services to one or more host devices <b>1905</b>, where the virtual computing services may include storage system services and/or general compute services. For example, the computing device <b>1901</b> may be configured to implement a virtual storage system orchestrator <b>1903</b> to provide virtual computing services, where the virtual storage system orchestrator <b>1903</b> may be integrated with a container orchestration service, such as Kubernetes, among others, to provide application deployment, scaling, and management. In some implementations, the computing device <b>1901</b> may be a physical storage system, and the computing device <b>1901</b> may be configured according to any of the implementations described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>3</b>D</figref> for physical storage systems.</p><p id="p-0358" num="0374">Further, in some implementations, the virtual storage system orchestrator <b>1903</b> may provide virtual computing services that are based, at least in part, on virtual computing services provided by a remote cloud services provider&#x2014;where the virtual storage system orchestrator <b>1903</b> may be configured to manage some or all aspects of a virtual storage system <b>1902</b> that provide the virtual computing services, and where the virtual storage system may operate within a cloud computing environment <b>1907</b>. A virtual storage system <b>1902</b> may be implemented by any embodiments described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>18</b></figref> that describe various versions of cloud-based storage systems, virtual storage systems, and virtual storage system architectures, including virtual storage systems that include one or more types of storage classes.</p><p id="p-0359" num="0375">In some implementations, the virtual computing services orchestrator <b>1903</b> may further provide virtual computing services that are based, at least in part, on data storage provided by a cloud services provider, such as Amazon&#x2122; S3, among other cloud storage services described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>18</b></figref>, including one or more types of storage classes. In this example, virtual computing services may be provided by a cloud-based object storage <b>1962</b> implemented within a cloud computing environment <b>1906</b>.</p><p id="p-0360" num="0376">In some implementations, the computing device <b>1901</b> may also operate to support one or more computer applications that use, create, and/or reference data. In some examples, a computing device <b>1901</b> may be a server, a consumer device, a mobile device, a desktop computer, or generally any type of host computing device. In other examples, a computing device <b>1901</b> may be a storage system, such as any implementation of a storage system described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>18</b></figref>.</p><p id="p-0361" num="0377">In some implementations, a virtual storage system orchestrator <b>1903</b> may orchestrate use of a virtual storage system <b>1902</b>&#x2014;where orchestration of the virtual storage system <b>1902</b> may include one or more of: deploying a virtual storage system <b>1902</b>, suspending one or more virtual components of the virtual storage system <b>1902</b>, resuming one or more virtual components of the virtual storage system <b>1902</b>, or manage or modify one or more virtual components that are included in the virtual storage system architecture of the virtual storage system <b>1902</b>.</p><p id="p-0362" num="0378">In some examples, modifying one or more virtual components of the virtual storage system <b>1902</b> may include one or more of: commissioning new virtual components, decommissioning existing virtual components, replacing existing virtual components with lower performance and/or lower storage capacity virtual components, or replacing existing virtual components with higher performance and/or higher storage capacity virtual components.</p><p id="p-0363" num="0379">In some implementations, orchestration of the virtual storage system <b>1902</b> may be responsive to one or more changes in compute and/or storage demands. For example, the virtual storage system orchestrator <b>1903</b> may monitor local resource usage, including available storage capacity or projected available storage capacity, and use this monitored information as a basis for deploying, scaling, or modifying use of virtual storage or virtual compute services provided by a cloud services provider. In some examples, the virtual storage system orchestrator may deploy, scale, or modify virtual services to maintain one or more performance metrics in accordance with a service level agreement.</p><p id="p-0364" num="0380">In some implementations, responsive to a decrease in demand for compute and/or storage, the virtual storage system orchestrator <b>1903</b> may suspend parts of all of the virtual components of a virtual storage system <b>1902</b>, modify a configuration of virtual components of the virtual storage system <b>1902</b> to reduce performance and/or storage capacity or to reduce a quantity of virtual components, such virtual storage controllers or tiers of storage.</p><p id="p-0365" num="0381">Similarly, responsive to an increase in demand for compute and/or storage, the virtual storage system orchestrator <b>1903</b> may resume parts of all of any suspended virtual components of a virtual storage system <b>1902</b>, modify a configuration of virtual components of the virtual storage system <b>1902</b> to increase performance and/or storage capacity or to increase a quantity of virtual components, such virtual storage controllers or tiers of storage.</p><p id="p-0366" num="0382">In other examples, orchestration of the virtual storage system <b>1902</b> may, also or instead of compute and/or storage demand changes, be responsive to one or more changes in financial constraints with respect to costs of existing or prospective virtual components provided by the cloud services provider. For example, responsive to financial constraints, suspending or scaling down virtual components of a virtual storage system may provide cost savings based on reduce usage of virtual components or reduced usage of storage or compute services&#x2014;where the cost savings are calculated to satisfy the change in financial constraints, and where suspending or scaling down may be performed up to the point where the financial constraints are satisfied, but not beyond.</p><p id="p-0367" num="0383">Further, as described above, modifications to the virtual storage system <b>1902</b> may include, responsive to an increase in demand for compute and/or storage performance, upgrading storage classes for existing storage or commissioning new higher storage classes. Similarly, as described above, modifications to the virtual storage system <b>1902</b> may include, responsive to a decrease in demand for compute and/or storage performance, downgrading storage classes for existing storage or commissioning new lower storage classes.</p><p id="p-0368" num="0384">For further explanation, <figref idref="DRAWINGS">FIG. <b>20</b></figref> sets forth an example of orchestrating a virtual storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0369" num="0385">As depicted in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the example method for orchestrating a virtual storage system includes: determining <b>2002</b> a change to one or more resource demands; determining <b>2004</b>, based on the change to the one or more resource demands, one or more modifications <b>2054</b> to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system <b>2052</b> within a cloud computing environment <b>2001</b>; and initiating <b>2006</b>, responsive to the change to the one or more resource demands, the one or more modifications <b>2054</b> to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system <b>2052</b>. In this example, the virtual storage system <b>2052</b> may be implemented in accordance with any of the virtual storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>18</b></figref>.</p><p id="p-0370" num="0386">Determining <b>2002</b> a change to one or more resource demands may be carried out as described above with reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, where a virtual storage system orchestrator <b>1903</b> may monitor current or projected resource consumption, including compute resources and/or storage resources with respect to, for example, metrics satisfying a service level agreement or satisfying some other specified threshold for performance and/or storage metrics.</p><p id="p-0371" num="0387">Determining <b>2004</b>, based on the change to the one or more resource demands, one or more modifications <b>2054</b> to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system <b>2052</b> within a cloud computing environment <b>2001</b> may be carried out as described above with reference to <figref idref="DRAWINGS">FIG. <b>19</b></figref>, where a virtual storage system orchestrator <b>1903</b> may deploy, scale, or modify virtual components in accordance with various techniques. Further, in some examples, in response to decreased demand for storage capacity, in addition to, or instead of, reducing storage capacity within the virtual storage system <b>2052</b>, one or more volumes may be migrated from one storage system, or storage array, to another storage system, or storage array, such that the entire storage system from which the one or more volumes are migrated from may be decommissioned. For example, if a virtual storage system is being scaled down or modified by a given amount of storage capacity, then on the basis of a given storage system storing less than or equal to that given amount of storage capacity, the given storage system may be selected for offloading all storage content onto remaining storage capacity within the virtual storage system.</p><p id="p-0372" num="0388">Initiating <b>2006</b>, responsive to the change to the one or more resource demands, the one or more modifications <b>2054</b> to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system <b>2052</b> may be carried out as described above with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>-<b>19</b></figref> describing various techniques for commissioning new virtual components, decommissioning existing virtual components, replacing existing virtual components with lower performance and/or lower storage capacity virtual components, or replacing existing virtual components with higher performance and/or higher storage capacity virtual components.</p><p id="p-0373" num="0389">Advantages and features of the present disclosure can be further described by the following statements:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0390">1. A method of orchestrating a virtual storage system, the method comprising: determining a change to one or more resource demands; determining, based on the change to the one or more resource demands, one or more modifications to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system within a cloud computing environment; and initiating, responsive to the change to the one or more resource demands, the one or more modifications to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system.</li>        <li id="ul0006-0002" num="0391">2. The method of statement 1, wherein orchestrating the virtual storage system is performed at a local computer system, and wherein the cloud computing environment is implemented within a remote site of a cloud services provider.</li>        <li id="ul0006-0003" num="0392">3. The method of statement 2 or statement 1, wherein the local computer system provides a virtual computing environment.</li>        <li id="ul0006-0004" num="0393">4. The method of statement 3, statement 2, or statement 1, wherein the local computer system is a physical storage system.</li>        <li id="ul0006-0005" num="0394">5. The method of statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the change to the one or more compute resource demands is a decrease in demand for storage resources, computing resources, or both storage and computing resources.</li>        <li id="ul0006-0006" num="0395">6. The method of statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein, based on the decrease in demand, the one or more modifications include one or more of: suspending some of the virtual components of the virtual storage system; suspending all of the virtual components of the virtual storage system; decommissioning one or more of the virtual components of the virtual storage system; or replacing one or more of the virtual components of the virtual storage system with one or more replacement virtual components with one or more lower performance and/or storage capacity characteristics relative to the one or more virtual components being replaced.</li>        <li id="ul0006-0007" num="0396">7. The method of statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the change to the one or more compute resource demands is an increase in demand for storage resources, computing resources, or both storage and computing resources.</li>        <li id="ul0006-0008" num="0397">8. The method of statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein, based on the increase in demand, the one or more modifications includes one or more of: resuming some of the virtual components of the virtual storage system; resuming all of the virtual components of the virtual storage system; commissioning one or more of the virtual components of the virtual storage system; or replacing one or more of the virtual components of the virtual storage system with one or more replacement virtual components with one or more higher performance and/or storage capacity characteristics relative to the one or more virtual components being replaced.</li>        <li id="ul0006-0009" num="0398">9. The method of statement 8, statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the one or more modifications to one or more virtual components included as part of a virtual storage system architecture include a modification to one or more architectural elements of the virtual storage system, and wherein the modification to the one or more architectural elements include adding or removing a tier of storage or adding or removing storage controllers.</li>        <li id="ul0006-0010" num="0399">10. The method of statement 9, statement 8, statement 7, statement 6, statement 5, statement 4, statement 3, statement 2, or statement 1, wherein the one or more modifications to one or more virtual components included as part of a virtual storage system architecture include changing from using a first type of storage class to using a second type of storage class.</li>    </ul>    </li></ul></p><p id="p-0374" num="0400">One or more embodiments may be described herein with the aid of method steps illustrating the performance of specified functions and relationships thereof. The boundaries and sequence of these functional building blocks and method steps have been arbitrarily defined herein for convenience of description. Alternate boundaries and sequences can be defined so long as the specified functions and relationships are appropriately performed. Any such alternate boundaries or sequences are thus within the scope and spirit of the claims. Further, the boundaries of these functional building blocks have been arbitrarily defined for convenience of description. Alternate boundaries could be defined as long as the certain significant functions are appropriately performed. Similarly, flow diagram blocks may also have been arbitrarily defined herein to illustrate certain significant functionality.</p><p id="p-0375" num="0401">To the extent used, the flow diagram block boundaries and sequence could have been defined otherwise and still perform the certain significant functionality. Such alternate definitions of both functional building blocks and flow diagram blocks and sequences are thus within the scope and spirit of the claims. One of average skill in the art will also recognize that the functional building blocks, and other illustrative blocks, modules and components herein, can be implemented as illustrated or by discrete components, application specific integrated circuits, processors executing appropriate software and the like or any combination thereof.</p><p id="p-0376" num="0402">While particular combinations of various functions and features of the one or more embodiments are expressly described herein, other combinations of these features and functions are likewise possible. The present disclosure is not limited by the particular examples disclosed herein and expressly incorporates these other combinations.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of sizing a virtual storage system, the method comprising:<claim-text>determining a change to one or more resource demands;</claim-text><claim-text>determining, based on the change to the one or more resource demands, one or more modifications to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system within a cloud computing environment; and</claim-text><claim-text>initiating, responsive to the change to the one or more resource demands, the one or more modifications to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system, including replacing one or more of the virtual components with a higher performance virtual component.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein orchestrating the virtual storage system is performed at a local computer system, and wherein the cloud computing environment is implemented within a remote site of a cloud services provider.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the local computer system provides a virtual computing environment.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the local computer system is a physical storage system.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the change to the one or more compute resource demands is a decrease in demand for storage resources, computing resources, or both storage and computing resources.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein, based on the decrease in demand, the one or more modifications include one or more of: suspending some of the virtual components of the virtual storage system; suspending all of the virtual components of the virtual storage system; decommissioning one or more of the virtual components of the virtual storage system; or replacing one or more of the virtual components of the virtual storage system with one or more replacement virtual components with one or more lower performance and/or storage capacity characteristics relative to the one or more virtual components being replaced.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the change to the one or more compute resource demands is an increase in demand for storage resources, computing resources, or both storage and computing resources.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein, based on the increase in demand, the one or more modifications includes one or more of: resuming some of the virtual components of the virtual storage system; resuming all of the virtual components of the virtual storage system; commissioning one or more of the virtual components of the virtual storage system; or replacing one or more of the virtual components of the virtual storage system with one or more replacement virtual components with one or more higher performance and/or storage capacity characteristics relative to the one or more virtual components being replaced.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more modifications to one or more virtual components included as part of a virtual storage system architecture include a modification to one or more architectural elements of the virtual storage system, and wherein the modification to the one or more architectural elements include adding or removing a tier of storage or adding or removing storage controllers.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more modifications to one or more virtual components included as part of a virtual storage system architecture include changing from using a first type of storage class to using a second type of storage class.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. An apparatus for sizing a virtual storage system, the apparatus comprising a computer processor, a computer memory operatively coupled to the computer processor, the computer memory having disposed within it computer program instructions that, when executed by the computer processor, cause the apparatus to carry out the steps of:<claim-text>determining a change to one or more resource demands;</claim-text><claim-text>determining, based on the change to the one or more resource demands, one or more modifications to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system within a cloud computing environment; and</claim-text><claim-text>initiating, responsive to the change to the one or more resource demands, the one or more modifications to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system, including replacing one or more of the virtual components with a lower performance virtual component.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein orchestrating the virtual storage system is performed at a local computer system, and wherein the cloud computing environment is implemented within a remote site of a cloud services provider.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the local computer system provides a virtual computing environment.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the local computer system is a physical storage system.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the change to the one or more compute resource demands is a decrease in demand for storage resources, computing resources, or both storage and computing resources.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein, based on the decrease in demand, the one or more modifications include one or more of: suspending some of the virtual components of the virtual storage system; suspending all of the virtual components of the virtual storage system; decommissioning one or more of the virtual components of the virtual storage system; or replacing one or more of the virtual components of the virtual storage system with one or more replacement virtual components with one or more lower performance and/or storage capacity characteristics relative to the one or more virtual components being replaced.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the change to the one or more compute resource demands is an increase in demand for storage resources, computing resources, or both storage and computing resources.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein, based on the increase in demand, the one or more modifications includes one or more of: resuming some of the virtual components of the virtual storage system; resuming all of the virtual components of the virtual storage system; commissioning one or more of the virtual components of the virtual storage system; or replacing one or more of the virtual components of the virtual storage system with one or more replacement virtual components with one or more higher performance and/or storage capacity characteristics relative to the one or more virtual components being replaced.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more modifications to one or more virtual components included as part of a virtual storage system architecture include a modification to one or more architectural elements of the virtual storage system, and wherein the modification to the one or more architectural elements include adding or removing a tier of storage or adding or removing storage controllers.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A computer program product for sizing a virtual storage system, the computer program product disposed upon a computer readable medium, the computer program product comprising computer program instructions that, when executed, cause a computer to carry out the steps of:<claim-text>determining a change to one or more resource demands;</claim-text><claim-text>determining, based on the change to the one or more resource demands, one or more modifications to one or more virtual components included as part of a virtual storage system architecture of a virtual storage system within a cloud computing environment; and</claim-text><claim-text>initiating, responsive to the change to the one or more resource demands, the one or more modifications to the one or more virtual components included as part of the virtual storage system architecture of the virtual storage system, including replacing one or more of the virtual components with a virtual component that has different performance characteristics than the replaced virtual component.</claim-text></claim-text></claim></claims></us-patent-application>