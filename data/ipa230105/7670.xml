<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007671A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007671</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17931140</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>72</main-group><subgroup>12</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>72</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>W</subclass><main-group>74</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>72</main-group><subgroup>1257</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>72</main-group><subgroup>0446</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>W</subclass><main-group>74</main-group><subgroup>0816</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Techniques for Periodic Transmission of Communications Packets</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16951770</doc-number><date>20201118</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11464031</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17931140</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62937001</doc-number><date>20191118</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>The Regents of the University of California</orgname><address><city>Oakland</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Garcia-Luna-Aceves</last-name><first-name>Jose Joaquin</first-name><address><city>Santa Cruz</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>de Alfaro</last-name><first-name>Luca</first-name><address><city>Santa Cruz</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Molly</first-name><address><city>Santa Cruz</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Techniques include retrieving from storage a plurality of policies for sharing a shared channel among nodes in a data communications network. The plurality of polices define a tree of periodic schedules of variable periods, each policy defines a transmit time slot as a unique slot i of a modulus of a power m of a base b of a series of time slots, where m indicates a level of the tree of periodic schedules. The method also includes; observing at a first node the probabilities of empty time slots, successful time slots, and collision time slots on the shared channel; selecting at the first node a first policy among the plurality of policies based on the probabilities observed instead of a message received from a central authority; and transmitting a local data packet from the first node onto the shared channel at a transmit time based on the first policy.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="117.60mm" wi="148.67mm" file="US20230007671A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="147.66mm" wi="150.71mm" file="US20230007671A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="224.45mm" wi="175.68mm" file="US20230007671A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="146.47mm" wi="157.06mm" file="US20230007671A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="208.96mm" wi="151.47mm" file="US20230007671A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="206.93mm" wi="127.51mm" file="US20230007671A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="194.39mm" wi="155.96mm" file="US20230007671A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="228.94mm" wi="157.56mm" file="US20230007671A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="196.85mm" wi="149.44mm" file="US20230007671A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="210.82mm" wi="151.13mm" file="US20230007671A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="107.02mm" wi="147.74mm" file="US20230007671A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="201.59mm" wi="155.96mm" file="US20230007671A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="95.84mm" wi="149.44mm" file="US20230007671A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="99.40mm" wi="151.64mm" file="US20230007671A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="205.32mm" wi="151.64mm" file="US20230007671A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="96.69mm" wi="150.88mm" file="US20230007671A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="212.51mm" wi="147.74mm" file="US20230007671A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="95.17mm" wi="150.03mm" file="US20230007671A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="210.90mm" wi="130.64mm" file="US20230007671A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="157.65mm" wi="120.90mm" file="US20230007671A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="237.66mm" wi="161.46mm" orientation="landscape" file="US20230007671A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims benefit as a Continuation under 35 U.S.C. &#xa7;120 of U.S. patent application Ser. No. 16/951,770, filed Nov. 18, 2020, which claims benefit under 35 U.S.C. &#xa7; 119(e) of U.S. Provisional Application No. 62/937,001 filed Nov. 18, 2019.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Networks of general-purpose computer systems connected by external communication links are well known and widely used in commerce. The networks often include one or more network devices that facilitate the passage of information between the computer systems. A network node is a network device or computer system connected by the communication links. An end node is a node that is configured to originate or terminate communications over the network. An intermediate network node facilitates the passage of data between end nodes.</p><p id="p-0004" num="0003">Communications between nodes are typically affected by exchanging discrete packets of data. Information is exchanged within data packets according to one or more of many well-known, new or still developing protocols. In this context, a protocol consists of a set of rules defining how the nodes interact with each other based on information sent over the communication links. Each packet typically comprises 1] header information associated with a particular protocol, and 2] payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols, the packet includes 3] trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet, its destination, the length of the payload, and other properties used by the protocol. Often, the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different layer of detail for information exchange. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol.</p><p id="p-0005" num="0004">The headers included in a packet traversing multiple heterogeneous networks, such as the Internet, typically include a physical (layer 1) header, a data-link (layer 2) header, an internetwork (layer 3) header and a transport (layer 4) header, as defined by the Open Systems Interconnection (OSI) Reference Model. The OSI Reference Model is generally described in more detail in Section 1.1 of the reference book entitled Interconnections Second Edition, by Radia Perlman, published September 1999, which is hereby incorporated by reference as though fully set forth herein.</p><p id="p-0006" num="0005">In Layer 2 of a network, the Media Access Control (MAC) sublayer provides addressing and channel access control mechanisms that enable several terminals or network nodes to communicate in a network.</p><p id="p-0007" num="0006">Some protocols pass protocol-related information among two or more network nodes in special control packets that are communicated separately; and, which include a payload of information used by the protocol itself rather than a payload of data to be communicated for another application. These control packets and the processes at network nodes that utilize the control packets are said to be in another dimension, a &#x201c;control plane,&#x201d; distinct from the &#x201c;data plane&#x201d; dimension that includes the data packets with payloads for other applications at the end nodes.</p><p id="p-0008" num="0007">In most wireless ad-hoc networks, the nodes compete for access to a shared wireless medium, often resulting in collisions (interference). Many ad-hoc network nodes use half duplex transceivers, which use the same radio channel for transmitting and receiving. Such half duplex nodes cannot receive while transmitting. Thus, it is possible, and even common, due to collisions for such nodes to miss the control plane messages and headers that are designed to control the flow of packets.</p><p id="p-0009" num="0008">Carrier-sense multiple access (CSMA) is arguably the most widely used technique for the sharing of common radio channels in ad-hoc networks today, as it is an integral part of the IEEE 802.11 protocol standard. According to CSMA, a transmitter will not transmit while a channel is active, as determined by sensing the carrier radio frequency. This traditional collision avoidance handshake consists of a request-to-send (RTS) message in one or more data packets, a clear-to-send (CTS) message in one or more data packets, a variable length data message in one or more data packets, and an acknowledgment (ACK) message in one or more data packets. However, CSMA is not always suitable.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0010" num="0009">It is recognized here that, in some circumstances, carrier sensing is either not possible or becomes too onerous. Examples of such circumstances are untethered networks with long propagation delays (e.g., underwater sensor networks, satellite networks and space networks), wireless networks that operate in noisy environments, or terrains in which hidden-terminal interference is prevalent, and Internet of Things (IoT) deployments consisting of very simple nodes, such as wireless sensors. These different circumstances, among others, are grouped under the term reduced radio capacity.</p><p id="p-0011" num="0010">Techniques are provided for increasing utilization of a channel while reducing collisions thus improving performance when sharing common radio channels in ad-hoc networks at nodes by selecting from a tree a periodic schedule of variable period in which to transmit communications packets.</p><p id="p-0012" num="0011">In a first set of embodiments, a method includes retrieving from storage a plurality of policies for sharing a shared channel among nodes in a data communications network using a particular protocol. The plurality of polices define a tree of periodic schedules of variable periods, each policy defines a transmit time slot as a unique slot i of a modulus of a power m of a base b of a series of time slots, where m indicates a level of the tree of periodic schedules. The method also includes observing at a first node the probabilities of empty time slots and successful time slots and collision time slots on the shared channel. The method further includes selecting at the first node in the data communications network a first policy among the plurality of policies based on the probabilities observed instead of a message received from a central authority. The method still further includes transmitting a local data packet from the first node onto the shared channel at a transmit time based on the first policy.</p><p id="p-0013" num="0012">In other sets of embodiments, an apparatus or system or computer-readable medium is configured to perform one or more steps of one or more of the above methods.</p><p id="p-0014" num="0013">Still other aspects, features, and advantages are readily apparent from the following detailed description, simply by illustrating a number of particular embodiments and implementations, including the best mode contemplated for carrying out the invention. Other embodiments are also capable of other and different features and advantages, and its several details can be modified in various obvious respects, all without departing from the spirit and scope of the invention. Accordingly, the drawings and description are to be regarded as illustrative in nature, and not as restrictive.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014">Embodiments are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements and in which:</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram that illustrates example nodes in an ad-hoc network, according to an embodiment;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart that illustrates an example method for selecting a policy for transmitting a data packet on a shared channel, according to an embodiment;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules, according to an embodiment;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIGS. <b>3</b>B and <b>3</b>C</figref> are tree charts that illustrate an example schedule tree along with a policy consisting of two schedules and removal of one schedule, according to an embodiment;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>3</b>D</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules and addition of one schedule, according to an embodiment;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>3</b>E</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules and descendant elimination, according to an embodiment;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>3</b>F</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules and merging of sibling schedules, according to an embodiment;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIGS. <b>3</b>G and <b>3</b>H</figref> are tree charts that illustrate an example schedule tree along with a policy consisting of multiple schedules and removal of schedules, according to an embodiment;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a chart that illustrates an example of an algorithm with a set of instructions for performing one or more steps of the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, according to an embodiment;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b>B</figref> are graphs that illustrate example traces that indicate network utilization and fairness using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> with multiple nodes joining simultaneously, according to an embodiment;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIGS. <b>6</b>A through <b>6</b>C</figref> are graphs that illustrate example traces that indicate network utilization and fairness using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> when the number of active nodes increases, according to an embodiment;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. <b>7</b>A through <b>7</b>C</figref> are graphs that illustrate example traces that indicate network utilization and fairness using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> when the number of active nodes increases, according to an embodiment;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a graph that illustrates an example trace that indicates average network successful utilization using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> as a function of each node changing its active state each time block, according to an embodiment;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIGS. <b>9</b>A through <b>9</b>C</figref> are graphs that illustrate example traces that compare network utilization and fairness of the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> with conventional methods where the number of active nodes ramps up and down, according to an embodiment;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIGS. <b>10</b>A through <b>10</b>C</figref> are graphs that illustrate example traces that compare network utilization and fairness of the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> with conventional methods where the number of active nodes continuously increases, according to an embodiment;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a chip set upon which an embodiment of the invention may be implemented; and</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram of exemplary components of a mobile terminal (e.g., cell phone handset) for communications, which is capable of operating in the system of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, according to one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0034" num="0033">Techniques are described for avoiding packet collisions on a shared communications channel under conditions of reduced radio capacity by using virtual time slotting or shared congestion information or some combination. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.</p><p id="p-0035" num="0034">Notwithstanding that the numerical ranges and parameters setting forth the broad scope are approximations, the numerical values set forth in specific non-limiting examples are reported as precisely as possible. Any numerical value, however, inherently contains certain errors necessarily resulting from the standard deviation found in their respective testing measurements at the time of this writing. Furthermore, unless otherwise clear from the context, a numerical value presented herein has an implied precision given by the least significant digit. Thus, a value 1.1 implies a value from 1.05 to 1.15. The term &#x201c;about&#x201d; is used to indicate a broader range centered on the given value, and unless otherwise clear from the context implies a broader range around the least significant digit, such as &#x201c;about 1.1&#x201d; implies a range from 1.0 to 1.2. If the least significant digit is unclear, then the term &#x201c;about&#x201d; implies a factor of two, e.g., &#x201c;about X&#x201d; implies a value in the range from 0.5X to 2X, for example, about 100 implies a value in a range from 50 to 200. Moreover, all ranges disclosed herein are to be understood to encompass any and all sub-ranges subsumed therein, such as subranges to avoid any prior art. For example, a range of &#x201c;less than 10&#x201d; for a positive only parameter can include any and all sub-ranges between (and including) the minimum value of zero and the maximum value of 10, that is, any and all sub-ranges having a minimum value of equal to or greater than zero and a maximum value of equal to or less than 10, e.g., 1 to 4.</p><p id="p-0036" num="0035">Some embodiments of the invention are described below in the context of enhancing an ALOHA protocol with a plurality of policies defining a tree of periodic schedules of variable periods based on modulus of a power m of a base b where b=2. However, the invention is not limited to this context. In other embodiments, methods disclosed within apply to any protocol for sharing of common radio channels in ad-hoc networks using policies having any base b.</p><heading id="h-0006" level="1">1. Overview</heading><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram that illustrates example nodes <b>110</b><i>a, </i><b>110</b><i>b, </i><b>110</b><i>c, </i><b>110</b><i>d, </i><b>110</b><i>e, </i>(collectively referenced hereinafter as nodes <b>110</b>) in an ad-hoc network <b>100</b>, according to an embodiment. In an ad hoc network the relative positions of nodes are not fixed, and the nodes can move in and out of range freely, e.g., the nodes are untethered. In the illustrated embodiment, each node <b>110</b> is in communication with one or two adjacent nodes that are within a visible range; but non-adjacent nodes are outside the visible range and are thus &#x201c;hidden.&#x201d; The nodes <b>110</b> constitute an ad-hoc network <b>100</b> in which data packets can hop, e.g., from node <b>110</b><i>a </i>to node <b>110</b><i>b </i>to node <b>110</b><i>c </i>to node <b>110</b><i>d </i>to node <b>110</b><i>e </i>and to any node (not shown) sharing a network (not shown) with node <b>110</b><i>e. </i>To avoid collisions with data packets from adjacent and hidden nodes while transferring data packets from one node to the next, each of nodes <b>110</b><i>a </i>through node <b>110</b><i>d </i>includes a module <b>150</b> that selects a policy from a plurality of polices defining a tree of periodic schedules of variable periods. In an embodiment, the module <b>150</b> is hosted by one or more of the computer system of <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the chip set of <figref idref="DRAWINGS">FIG. <b>12</b></figref> and/or the mobile terminal of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. In an embodiment, the module <b>150</b> includes a memory that stores instructions to perform one or more steps of the method <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0038" num="0037">Although processes, equipment, and data structures are depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as integral blocks in a particular arrangement for purposes of illustration, in other embodiments one or more processes or data structures, or portions thereof, are arranged in a different manner, on the same or different hosts, in one or more databases, or are omitted, or one or more different processes or data structures are included on the same or different hosts.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart that illustrates an example method for selecting a policy for transmitting a data packet on a shared channel, according to an embodiment. Although steps are depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref> as integral steps in a particular order for purposes of illustration, in other embodiments, one or more steps, or portions thereof, are performed in a different order, or overlapping in time, in series or in parallel, or are omitted, or one or more additional steps are added, or the method is changed in some combination of ways.</p><p id="p-0040" num="0039">In step <b>211</b>, a plurality of policies are retrieved from storage. The plurality of policies define a tree of periodic schedules. A periodic schedule (i,m) prescribes sending at all times t such that t mod b<sup>m</sup>=i; where T(i,m)=<u style="single">{t|mod b<sup>m</sup>=i}</u> is the set of times associated with schedule (i,m). Let S={(i,m)|m&#x3e;0, 0&#x2264;i &#x3c;b<sup>m</sup>} be the set of all periodic schedules. <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a tree with b schedules at each level m.</p><p id="p-0041" num="0040">For purposes of illustration, it is assumed that the base b=2. In this embodiment, a periodic schedule (i,m) prescribes sending at all times t such that t mod 2<sup>m</sup>=i; where T(i,m)=<u style="single">{t|mod 2<sup>m</sup>=i}</u> is the set of times associated with schedule (i,m). Let S={(i,m)|m&#x3e;0, 0&#x2264;i&#x3c;2<sup>m</sup>} be the set of all periodic schedules. As will be discussed in further detail in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> through <figref idref="DRAWINGS">FIG. <b>3</b>H</figref> are embodiments of a tree where b=2. The schedules in S can be arranged in a tree, where the schedule (i,m) has (i,m+1) and (i+2<sup>m</sup>, m+1) as children. A child schedule transmits in only half the time slots as its parent. Hence, the bandwidth of each schedule decreases by half each level as the tree is traversed from its root.</p><p id="p-0042" num="0041">In step <b>213</b>, the node observes the shared channel for the probabilities of empty time slots, successful time slots, and collision time slots corresponding to time slots where the channel was empty or a transmission (regardless of which node sent the packet) resulted in a successful transmission or a collision. The probabilities of empty time slots, successful time slots, and collision time slots are associated to each policy in the tree.</p><p id="p-0043" num="0042">In step <b>213</b>, based on the observed probabilities, the node also determines a barge-in probability and a kindness probability.</p><p id="p-0044" num="0043">In step <b>215</b>, a first policy is selected based on the observed probabilities associated with empty time slots, successful time slots, and collision time slots. The policy is selected based on the observed probabilities instead of a message received from a central authority as done in prior approaches. In step <b>217</b>, the system waits for a transmit time based on the first policy and, attempts to transmit a local data packet.</p><p id="p-0045" num="0044">In step <b>219</b> it is determined whether the sent packet was successfully transmitted. If the transmission is determined to be unsuccessful then, in step <b>221</b>, a second policy is selected with a higher m value and then in step <b>223</b>, the local data packet is transmitted again at a time based on the second policy. That is, when the local data packet is not successfully transmitted, step <b>221</b> includes selecting at the first node a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules. In a preferred embodiment, a periodic schedule of the second policy is not a descendant and/or a sibling of a periodic schedule of the first policy in the tree of periodic schedule.</p><p id="p-0046" num="0045">In step <b>225</b> it is determined whether the packet sent under the new policy is successful. If not, control passes back to step <b>221</b>. If so, control passes to step <b>227</b>, described next.</p><p id="p-0047" num="0046">When, in step <b>219</b> or in step <b>225</b>, the transmission is determined to be successful then, in step <b>227</b>, a second policy is selected based on the barge-in or kindness probabilities or both. For example, step <b>227</b> includes when the local data packet is successfully transmitted, adding at the first node, with a barge-in probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules. In some of these embodiments, a periodic schedule of the second policy IS NOT a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</p><p id="p-0048" num="0047">In some embodiments, when the local data packet is successfully transmitted, step <b>227</b> includes selecting at the first node, with a kindness probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules. In some of these embodiments, a periodic schedule of the second policy IS a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</p><p id="p-0049" num="0048">In step <b>229</b>, a different local data packet is transmitted based on at least one of the first policy and the second policy.</p><p id="p-0050" num="0049">If an end condition is satisfied in step <b>231</b> then the method ends in step <b>233</b>. In some embodiments, the end condition may be a set number of attempts or a predetermined time. Otherwise, if the end condition is not met then the system returns to step <b>211</b>.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is a tree chart that illustrates an example schedule tree <b>300</b> along with a policy consisting of two schedules, according to an embodiment. In an embodiment, each policy has b children indicated by ellipsis. As it may be appreciated by those skilled in the art, the number of children (i.e. the base b) of each schedule is non-limiting and may be represented by any positive integer. The level of a schedule with respect to its parent may be represented by the power m, where the power m indicates a lower position in the tree than power m&#x2212;1. Example schedule levels are depicted for level <b>310</b> (m=0), level <b>311</b> (m=1), level <b>312</b> (m=2), level <b>313</b> (m=3), level <b>314</b> (m=4) and level <b>315</b> (m=5). Two schedules are selected, indicated by node <b>321</b> on level <b>313</b> (m=3) and node <b>322</b> on level <b>315</b> (m=5). The two schedules constitute one policy in the depicted example. Note that node <b>322</b> is NOT a descendant of node <b>321</b> in tree b <b>300</b>.</p><heading id="h-0007" level="1">2. Example Embodiments</heading><p id="p-0052" num="0051">An example embodiment of the method <b>200</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> has been implemented using base b=2 and called the APT-ALOHA protocol and is described in more detail herein.</p><heading id="h-0008" level="2">2.1 Example Method</heading><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a list of example instructions for performing the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, according to this embodiment. In this embodiment, the set of instructions of the algorithm are provided in the memory of the module <b>150</b>. The algorithm features line numbers which will be referenced herein. In this embodiment, the algorithm is an Adaptive Policy Tree (APT) algorithm.</p><p id="p-0054" num="0053">In this embodiment, the algorithm sets a value for one or more constants used in the method <b>200</b>. Lines <b>1</b>-<b>9</b> of the algorithm define values for a plurality of constants. These constants include kindness inertia a<sub>k</sub>; barge-in inertia a<sub>b</sub>; kindness probability lower bound q<sub>k</sub>; barge-in probability lower bound q<sub>b</sub>; target fraction of empty slots &#x3ba;; base of natural logarithm e; maximum number of schedules in a policy M; maximum schedule level difference &#x394; and schedule insertion delta &#x394;<sub>new</sub>. Although <figref idref="DRAWINGS">FIG. <b>4</b></figref> lists initial values for each of these constants, embodiments are not limited to these specific values. Additionally, embodiments are not limited to these specific constants and may include fewer or more constants than listed in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0055" num="0054">In the illustrated embodiment, the algorithm defines one or more state variables. Lines <b>10</b>-<b>13</b> of the algorithm define example state variables. In this embodiment, line <b>10</b> lists a state variable active. The value of variable active indicates one of two states, e.g., TRUE (active) or FALSE (inactive), depending on whether the nodes has packets that need sending. In this embodiment, line <b>11</b> lists a time slot counter variable t. Every node <b>110</b> has a clock that counts the number of time slots. In this embodiment, the algorithm updates the time-slot counter t, the policy &#x3c0;&#x3f5;P and two probabilities p<sub>b </sub>and p<sub>k</sub>, known as the barge-in and kindness probabilities, respectively. The value of the variables p<sub>b </sub>and p<sub>k </sub>is in a range from 0 to 1. Embodiments are not limited to these specific state variables and may include fewer or more variables than listed in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0056" num="0055">In the illustrated embodiment, the algorithm defines one or more channel variables. Lines <b>14</b>-<b>19</b> of the algorithm define example channel variables. In this embodiment, at each time slot a node <b>110</b> of the ad hoc network <b>100</b> has the choice of either transmitting or waiting. For purposes of this description, this decision is held in variable d with two values denoted by T for transmitting and W for waiting, respectively. An outcome of this decision is held in variable c with three values denoted by S for successful transmission, E for empty time slot and C for collision of data packets. In this embodiment, if all nodes <b>110</b> with packets to send wait, then the variable c is assigned the value E since the time slot is empty. In this embodiment, if exactly one node <b>110</b> transmits in the time slot, then the variable c is assigned the value S since the time slot has a successful transmission. Similarly, if more than one node <b>110</b> transmits in the time slot, the variable c is assigned the value C since then a collision occurs. Embodiments are not limited to these specific channel variables and may include less or more variables than listed in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0057" num="0056">In this embodiment, the algorithm initializes the values of the state variables listed in lines <b>10</b>-<b>13</b>. These initial values are listed in lines <b>20</b>-<b>21</b>. In an example embodiment, the policy &#x3c0; is given an initial set of schedules that may correspond to the schedules <b>321</b>, <b>322</b> of <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. In an example embodiment, the initialization of the policy in line <b>12</b> corresponds to step <b>215</b> of the method <b>200</b>.</p><p id="p-0058" num="0057">In this embodiment, the algorithm performs a loop of lines <b>22</b>-<b>40</b> for each time slot t. Line <b>22</b> involves incrementing the time slot t value for the next iteration of lines <b>22</b>-<b>40</b>. Lines <b>23</b>-<b>25</b> involve transmitting a data packet at the time slot, if the channel is active and otherwise waiting and not transmitting the data packet. The decision variable d is assigned the T or W value, based on this determination. Line <b>25</b> then assigns a value to a channel outcome h variable for that time slot, where the value of h corresponds to the value of the channel state c variable (e.g. E if the time slot is empty, C if a collision occurs and S if the transmission was successful). In an example embodiment, steps <b>215</b> and <b>217</b> of the method <b>200</b> correspond to decision d variable having the value T and step <b>219</b> corresponds to determining whether the channel outcome h variable has the value S.</p><p id="p-0059" num="0058">In this embodiment, the algorithm then performs an update to the policy &#x3c0; in lines <b>26</b>-<b>35</b>, based on the decision d variable value and channel outcome h value from lines <b>24</b>-<b>25</b>. In this embodiment, lines <b>27</b>-<b>30</b> correspond to steps <b>217</b>, <b>219</b> and <b>227</b> of the method <b>200</b>. In this embodiment, if the data packet was transmitted (step <b>217</b>) and the transmission was successful (yes in block <b>219</b>), then the algorithm selects a second policy by modifying the first policy &#x3c0; (step <b>227</b>). In lines <b>29</b>-<b>30</b>, the algorithm modifies the policy &#x3c0; with a demote operation, based on the value of the kindness probability p<sub>k </sub>variable (e.g. if p<sub>k </sub>is 0.05, then the demote operation is performed 5% of the time at line <b>30</b>). The value of the kindness probability p<sub>k </sub>variable is tuned with the goal of leaving a certain fraction &#x3ba; of the time slots empty. As shown in line <b>5</b>, an initial value of &#x3ba; is set at 0.05 or 5%, thus in this embodiment the goal is that about 5% of the time slots are left empty in the evaluation of the protocol.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIGS. <b>3</b>B and <b>3</b>C</figref> are tree charts that illustrate an example schedule tree along with a policy consisting of two schedules and demotion of one schedule, according to this embodiment. <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> depicts the demote operation where the policy includes one schedule with a higher level (smaller m value) than the other schedules. In this embodiment, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> depicts that the policy &#x3c0; included the two schedules <b>331</b>, <b>332</b> prior to the demote operation. In this embodiment, the demote operation removes a higher level (smaller m) schedule (e.g. <b>331</b> in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>) and replaces it with one of the children of the higher level schedule (e.g. either <b>333</b> or <b>335</b> in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>). <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> depicts the demote operation where the policy includes schedules with the same layer (same m value). In this embodiment, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> depicts that the policy &#x3c0; included the two schedules <b>336</b>, <b>338</b> (same m value) prior to the demote operation. In this embodiment, the demote operation removes one of the schedules (e.g. <b>338</b>) and does not replace it.</p><p id="p-0061" num="0060">In this embodiment, lines <b>27</b> and <b>31</b> correspond to steps <b>217</b>, <b>219</b> and <b>221</b> of the method <b>200</b>. In this embodiment, if the data packet was transmitted (step <b>217</b>) and the transmission was not successful based on the channel outcome h variable having the value C (no in block <b>219</b>), then the algorithm selects a second policy by modifying the first policy &#x3c0; (step <b>221</b>). Unlike lines <b>29</b>-<b>30</b>, in line <b>31</b> the algorithm modifies the policy &#x3c0; with the demote operation, irrespective of the value of the kindness probability p<sub>k </sub>variable. The demote operation at line <b>31</b> is performed in a similar manner as discussed with respect to <figref idref="DRAWINGS">FIGS. <b>3</b>B and <b>3</b>C</figref>.</p><p id="p-0062" num="0061">In this embodiment, the demote (&#x3c0;, t) operation is based on (i, m) representing a unique schedule such that t&#x3f5;T(i, m). The procedure demote (&#x3c0;, t) removes from the policy &#x3c0; the schedule (i, m) (e.g. schedule <b>338</b> in <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>). Further, if {(j, k)&#x2208;&#x3c0;|k&#x2264;m}=&#xd8;, then the procedure adds to &#x3c0; one of the two children (i, m+1) or (i+2<sup>m</sup>, m+1) of the removed schedule (e.g. higher level schedule <b>331</b> in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>), chosen uniformly at random.</p><p id="p-0063" num="0062">In this embodiment, lines <b>32</b> through <b>34</b> correspond to the method <b>200</b> where the data packet is not transmitted at step <b>217</b> but instead the node waits (value of d is W) and the time slot is empty (value of h is E). In this embodiment, if the data packet is not transmitted (value of d is W) and the time slot is empty (value of h is E) then the algorithm selects a second policy by modifying the first policy &#x3c0;. In lines <b>33</b>-<b>34</b>, the algorithm modifies the policy &#x3c0; with a barge-in operation, based on the value of the barge-in probability p<sub>b </sub>variable (e.g. if p<sub>b </sub>is 0.1, then the barge-in operation is performed 10% of the time at line <b>34</b>). The barge-in probability p<sub>b </sub>variable regulates how eager the nodes are to jump in and transmit in slots that are empty. The value of the probability p<sub>b </sub>variable is tuned to ensure maximal success of the transmissions in such empty slots. <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules <b>340</b>, <b>342</b> and addition of one schedule, according to this embodiment. In this embodiment, <figref idref="DRAWINGS">FIG. <b>3</b>D</figref> depicts that the policy &#x3c0; included the two schedules <b>340</b>, <b>342</b> prior to the barge-in operation. In this embodiment, the barge-in operation adds a schedule to the policy with a lower level (higher m value), such as one of policies <b>344</b>, <b>346</b>, <b>348</b> since these policies would have transmitted in the empty time slot.</p><p id="p-0064" num="0063">In this embodiment, the barge-in (&#x3c0;, t, &#x394;<sub>new</sub>) operation adds to the policy &#x3c0; a schedule (i, m) such that t&#x3f5;T(i, m). If the bandwidth of the node's policy is defined by</p><p id="p-0065" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>b=&#x3a3;</i><sub>(i,k)&#x3b5;&#x3c0;</sub>2<sup>&#x2212;k </sup>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0066" num="0000">where k represents the order (e.g. m value) of each schedule in the policy. The schedules (i, m) that can be added to the policy based on the barge-in function are provided by equations 2-3:</p><p id="p-0067" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>m</mi>     <mo>=</mo>     <mrow>      <mo>[</mo>      <mrow>       <mrow>        <msub>         <mi>log</mi>         <mn>2</mn>        </msub>        <mo>(</mo>        <mfrac>         <mn>1</mn>         <msub>          <mi>p</mi>          <mi>b</mi>         </msub>        </mfrac>        <mo>)</mo>       </mrow>       <mo>+</mo>       <msubsup>        <mrow>         <mo>[</mo>         <mrow>          <msub>           <mi>log</mi>           <mn>2</mn>          </msub>          <mo>(</mo>          <mfrac>           <mi>b</mi>           <msub>            <mi>p</mi>            <mi>b</mi>           </msub>          </mfrac>          <mo>)</mo>         </mrow>         <mo>]</mo>        </mrow>        <mrow>         <mo>-</mo>         <mn>1</mn>        </mrow>        <mn>1</mn>       </msubsup>       <mo>+</mo>       <msub>        <mi>&#x394;</mi>        <mrow>         <mi>n</mi>         <mo>&#x2062;</mo>         <mi>e</mi>         <mo>&#x2062;</mo>         <mi>w</mi>        </mrow>       </msub>      </mrow>      <mo>]</mo>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>2</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>i</mi>     <mo>=</mo>     <mrow>      <mi>t</mi>      <mo>&#x2062;</mo>      <mi>mod</mi>      <mo>&#x2062;</mo>      <mi>m</mi>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>3</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0068" num="0000">As discussed with respect to <figref idref="DRAWINGS">FIG. <b>3</b>D</figref>, one or more schedules (i, m) are obtained by equations 2-3 that can be selected and added to the policy (e.g. schedule <b>344</b> or m=2, schedule <b>346</b> or m=3, schedule <b>348</b> or m=4, etc.). The barge-in operation advantageously adds a schedule to the policy that transmits data packets at the empty time slot. Additionally, adding a lower level (e.g. higher m value) schedule to the policy reduces the bandwidth of the policy (relative to adding a policy at a higher level), based on equation 1.</p><p id="p-0069" num="0064">After this policy update (e.g. lines <b>27</b>-<b>34</b> of the algorithm), the policy &#x3c0; is pruned and brought back into normal form via a normalize procedure. In this embodiment, the normalize procedure is performed in steps <b>221</b> or <b>227</b>. The normalize operation is based on the parameters policy &#x3c0;, maximum number of schedules M and the maximum schedule level difference &#x394;. To normalize a policy &#x3c0;, it is first put in normal form, removing any schedule that is a descendant of another schedule in the tree and/or merging sibling schedules. To do so, the following steps are repeated until they can no longer be taken.</p><p id="p-0070" num="0065">A first step to put the policy into normal form is descendant elimination. <figref idref="DRAWINGS">FIG. <b>3</b>E</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules <b>350</b>, <b>352</b> and descendant elimination, according to this embodiment. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>E</figref>, the descendant elimination removes schedule <b>352</b> since it is a descendant of schedule <b>350</b>.</p><p id="p-0071" num="0066">A second step to put the policy in normal form is sibling merging. <figref idref="DRAWINGS">FIG. <b>3</b>F</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of two schedules <b>352</b>, <b>354</b> and merging of sibling schedules, according to this embodiment. As shown in <figref idref="DRAWINGS">FIG. <b>3</b>F</figref>, the sibling merging step removes schedules <b>352</b>, <b>354</b> since they are siblings and merges them to schedule <b>350</b> that is added to the policy.</p><p id="p-0072" num="0067">In this embodiment, after the policy is placed in normal form, the policy is pruned in one or more steps. A first step of pruning the policy is based on a maximum depth or layer of schedules in the policy. <figref idref="DRAWINGS">FIG. <b>3</b>G</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of multiple schedules at different layers including schedule <b>361</b> at layer <b>311</b> (m=1), schedule <b>362</b> at layer <b>313</b> (m=3) and schedules <b>364</b>, <b>366</b> at layer <b>314</b> (m=4). In this embodiment, a maximum depth or layer <b>360</b> is provided (e.g. m=3) and all schedules below the maximum depth or layer are eliminated. Pruning based on maximum depth or level is based on a minimum level of a schedule in the policy (e.g. layer <b>311</b> or m=1 of schedule <b>361</b> in <figref idref="DRAWINGS">FIG. <b>3</b>G</figref>) and the maximum schedule level difference &#x394; (lines <b>8</b> of algorithm in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). In an example embodiment, if the maximum schedule level difference &#x394; is 2, then all schedules below layer <b>313</b> are eliminated (e.g. schedules <b>364</b>, <b>366</b> in <figref idref="DRAWINGS">FIG. <b>3</b>G</figref>).</p><p id="p-0073" num="0068">In this embodiment, a second step of pruning the policy is based on a maximum number of schedules in the policy. In this embodiment, the algorithm prunes the policy so that it contains at most M schedules (line <b>7</b> of algorithm). In this embodiment, if the policy &#x3c0; has less than or equal to M schedules, then no action is taken. Otherwise, a parameter n<sub>k </sub>is defined:</p><p id="p-0074" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>n</i><sub>k</sub>=[{(<i>i, m</i>)&#x2208;&#x3c0;|<i>m&#x2264;k}]</i>&#x2003;&#x2003;(4)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0075" num="0000">and k is the largest integer such that n<sub>k</sub>&#x2264;m. In this embodiment, the algorithm removes from the policy &#x3c0; all schedules (i, m) with m&#x3e;k+1 and randomly selects M&#x2212;n<sub>k </sub>amount of policies at level k+1, that is policies of the form (j, k+1) for some j. <figref idref="DRAWINGS">FIG. <b>3</b>H</figref> is a tree chart that illustrates an example schedule tree along with a policy consisting of multiple schedules <b>371</b>, <b>372</b>, <b>374</b>, <b>376</b> that exceeds a maximum number M (e.g. 2) of schedules for the policy. In this embodiment, the variable k corresponds to the layer <b>312</b> of the schedule <b>371</b> and k+1 corresponds to the layer <b>313</b> of schedules <b>372</b>, <b>376</b>. Thus, the policy <b>374</b> at layer <b>314</b> is eliminated since its m value exceeds k+1. In this embodiment, schedule <b>371</b> is selected and randomly one of the schedules <b>372</b> or <b>376</b> at layer <b>313</b>. In this embodiment, <figref idref="DRAWINGS">FIG. <b>3</b>H</figref> depicts that selecting schedule <b>372</b> or <b>376</b> has about equal probability (p=0.5).</p><p id="p-0076" num="0069">In this embodiment, after the policy update in lines <b>26</b>-<b>35</b> of the algorithm, the values of the probability variables (p<sub>k</sub>, p<sub>b</sub>) are updated in lines <b>37</b>-<b>40</b> of the algorithm. The values of the kindness and barge-in probabilities p<sub>k </sub>and p<sub>b</sub>, together, ensure that every active node receives a fair share of the total bandwidth. The kindness probability ensures that a node has a non-zero (bounded from below) probability of relinquishing any transmission slots it holds via a schedule. In particular, nodes that transmit in more slots (and thus use higher bandwidth) relinquish proportionately more bandwidth than nodes using fewer slots. Every free slot has the same probability of being scheduled by any node for future transmissions. Together, this ensures that the bandwidth tends to be uniformly distributed among the nodes participating in the protocol. The values of the probability p<sub>k </sub>and p<sub>b </sub>variables are tuned dynamically as follows.</p><p id="p-0077" num="0070">In this embodiment, the value of the kindness probability p<sub>k </sub>is tuned based on line <b>37</b>. The value of the kindness probability p<sub>k </sub>is tuned so that a prescribed fraction of transmission slots &#x3ba; (e.g. with a value of 0:05 or 5% in line <b>5</b>) are left free. Initially, when a node becomes active, we arbitrarily set the value of p<sub>k </sub>to the value of &#x3ba; (e.g. 0.05). Thereupon, nodes update the value of p<sub>k </sub>according to the value of the channel outcome h variable (E, S, C) as follows:</p><p id="p-0078" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mi>E</mi>      <mo>:</mo>      <msub>       <mi>p</mi>       <mi>k</mi>      </msub>      <mo>:=</mo>      <msub>       <mi>p</mi>       <mi>k</mi>      </msub>      <mo>&#xd7;</mo>     </mrow>     <msubsup>      <mo>&#x221d;</mo>      <mi>k</mi>      <mrow>       <mn>1</mn>       <mo>/</mo>       <mi>k</mi>      </mrow>     </msubsup>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>5</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00002-2" num="00002.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>S</mi>     <mo>,</mo>     <mrow>      <mi>C</mi>      <mo>:</mo>      <msub>       <mi>p</mi>       <mi>k</mi>      </msub>      <mo>:=</mo>      <mfrac>       <msub>        <mi>p</mi>        <mi>k</mi>       </msub>       <msub>        <mo>&#x221d;</mo>        <mi>k</mi>       </msub>      </mfrac>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>6</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0079" num="0000">where a<sub>k </sub>(e.g. value of 0.98) is a coefficient determining the adaptation speed (line <b>1</b> of algorithm). Thus, the value of p<sub>k </sub>decreases whenever there is an empty slot and increases when the slot is utilized (either successfully, or via a collision). The value of p<sub>k </sub>stabilizes when there are n successful slots for each empty slot, with &#x221d;<sub>k</sub><sup>1/k</sup>=&#x221d;<sub>k</sub><sup>n </sup>or when</p><p id="p-0080" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mrow>  <mi>n</mi>  <mo>=</mo>  <mrow>   <mfrac>    <mn>1</mn>    <mi>k</mi>   </mfrac>   <mo>=</mo>   <mrow>    <mn>2</mn>    <mo>&#x2062;</mo>    <mrow>     <mn>0</mn>     <mo>.</mo>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0081" num="0000">The selection of the value of a<sub>k </sub>(e.g. 0.98) leads to an adaptation time of the order of</p><p id="p-0082" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mrow>  <mfrac>   <mn>1</mn>   <msub>    <mo>&#x221d;</mo>    <mi>k</mi>   </msub>  </mfrac>  <mo>=</mo>  <mn>50</mn> </mrow></math></maths></p><p id="p-0083" num="0000">transmission slots. The use of a lower bound value q<sub>k </sub>for the variable p<sub>k </sub>stabilizes the algorithm and facilitates its analysis.</p><p id="p-0084" num="0071">In this embodiment, the value barge-in probability p<sub>b </sub>variable is tuned based on lines <b>38</b>-<b>39</b>. The barge-in probability is used to regulate the number of nodes that try to use empty slots. If too many nodes add schedules when they see an empty slot, many collisions would result; if too few add schedules, too many empty slots are left. The value of the barge-in probability p<sub>b </sub>is tuned by considering the ratio of collision to free slots. The tuning specifically disregards the successful slots, as the bulk of them is due to the existing coordination among nodes, rather than to successful barge-in. To understand how the tuning is performed, consider a simplified model in which a node barging in corresponds directly to a transmission by the node in the next period. This is a simplification: the node schedules that exist or are added via barge-in are not necessarily at the same tree layer, and thus, do not necessarily share the same periodicity. However, as the results show, this simplified model suffices for tuning the barge-in probability.</p><p id="p-0085" num="0072">If there are n active nodes and each of them barges-in with probability q, then a time slot remains empty with probability (1&#x2212;q)<sup>n</sup>, it is used successfully with probability nq(1&#x2212;q)<sup>n&#x2212;1 </sup>and there are collisions of packets in the time slot with probability 1&#x2212;(1&#x2212;q)<sup>n</sup>&#x2212;nq(1&#x2212;q)<sup>n&#x2212;1</sup>. The probability of successful transmission is maximized for</p><p id="p-0086" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mrow>  <mi>q</mi>  <mo>=</mo>  <mfrac>   <mn>1</mn>   <mi>n</mi>  </mfrac> </mrow></math></maths></p><p id="p-0087" num="0000">when n nodes are active. Under this optimal choice of q, as the number of nodes grows, the probability of the slot remaining free is:</p><p id="p-0088" num="0000"><maths id="MATH-US-00006" num="00006"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <munder>       <mi>lim</mi>       <mrow>        <mi>n</mi>        <mo>&#x2192;</mo>        <mi>&#x221e;</mi>       </mrow>      </munder>      <msup>       <mrow>        <mo>(</mo>        <mrow>         <mn>1</mn>         <mo>-</mo>         <mfrac>          <mn>1</mn>          <mi>n</mi>         </mfrac>        </mrow>        <mo>)</mo>       </mrow>       <mi>n</mi>      </msup>     </mrow>     <mo>=</mo>     <mfrac>      <mn>1</mn>      <mi>e</mi>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>7</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0089" num="0000">where e&#x2248;2.718 is the basis of the natural logarithm. For the optimal value of q, the collision probability tends to:</p><p id="p-0090" num="0000"><maths id="MATH-US-00007" num="00007"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <munder>        <mi>lim</mi>        <mrow>         <mi>n</mi>         <mo>&#x2192;</mo>         <mi>&#x221e;</mi>        </mrow>       </munder>       <mn>1</mn>      </mrow>      <mo>-</mo>      <mrow>       <msup>        <mrow>         <mo>(</mo>         <mrow>          <mn>1</mn>          <mo>-</mo>          <mfrac>           <mn>1</mn>           <mi>n</mi>          </mfrac>         </mrow>         <mo>)</mo>        </mrow>        <mrow>         <mi>n</mi>         <mo>-</mo>         <mn>1</mn>        </mrow>       </msup>       <mo>&#x2062;</mo>       <mrow>        <mo>(</mo>        <mrow>         <mn>1</mn>         <mo>+</mo>         <mfrac>          <mrow>           <mi>n</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mi>n</mi>         </mfrac>        </mrow>        <mo>)</mo>       </mrow>      </mrow>     </mrow>     <mo>=</mo>     <mfrac>      <mn>2</mn>      <mi>e</mi>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>8</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0091" num="0000">For the optimal barge-in probability, when the number of nodes is large, the ratio of free to collision slots is:</p><p id="p-0092" num="0000"><maths id="MATH-US-00008" num="00008"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mfrac>      <mrow>       <mn>1</mn>       <mo>/</mo>       <mi>e</mi>      </mrow>      <mrow>       <mn>1</mn>       <mo>-</mo>       <mrow>        <mn>2</mn>        <mo>/</mo>        <mi>e</mi>       </mrow>      </mrow>     </mfrac>     <mo>=</mo>     <mrow>      <mfrac>       <mn>1</mn>       <mrow>        <mi>e</mi>        <mo>-</mo>        <mn>2</mn>       </mrow>      </mfrac>      <mo>&#x2248;</mo>      <mrow>       <mrow>        <mn>1</mn>        <mo>.</mo>        <mn>3</mn>       </mrow>       <mo>&#x2062;</mo>       <mn>9</mn>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>9</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0093" num="0000">Thus, the nodes will tune their barge-in probability so that the ratio of free to collision slots is 1/(e&#x2212;2). This can be accomplished similarly to the steps taken for kindness probability. Nodes initially set the value of p<sub>b </sub>at 0.1, and they update the value of p<sub>b </sub>when empty slots or collisions occur (lines <b>38</b>-<b>39</b> of the algorithm in <figref idref="DRAWINGS">FIG. <b>4</b></figref>):</p><p id="p-0094" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>E:p</i><sub>b</sub><i>:=p</i><sub>b</sub>/&#x221d;<sub>b </sub>&#x2003;&#x2003;(10)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0095" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>C:p</i><sub>b</sub><i>:=p</i><sub>b</sub>&#xd7;&#x221d;<sub>b</sub><sup>1/(e&#x2212;2) </sup>&#x2003;&#x2003;(11)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0096" num="0000">As shown in line <b>2</b> of the algorithm, for the adaptation coefficient a<sub>b</sub>, it is set at an initial value of 0.99.</p><p id="p-0097" num="0073">In this embodiment, the barge-in probability p<sub>b </sub>provides an estimate &#xf1;=1/p<sub>b </sub>of the number of active nodes in the protocol. If there were &#xf1; nodes sending packets in turn, a new schedule would be inserted at a level at least log<sub>2</sub>(&#xf1;) to ensure that the new schedule has sufficiently large periodicity, for all nodes to send during the period. However, choosing m=log<sub>2</sub>(&#xf1;) would be too aggressive, as this corresponds to adding a schedule that, alone, has as much bandwidth as can be allocated to the node. For this reason, to log<sub>2</sub>(&#xf1;) a constant &#x394;<sub>new </sub>and a correction factor</p><p id="p-0098" num="0000"><maths id="MATH-US-00009" num="00009"><math overflow="scroll"> <mrow>  <mo>[</mo>  <msubsup>   <mrow>    <msub>     <mi>log</mi>     <mn>2</mn>    </msub>    <mo>(</mo>    <mfrac>     <mi>b</mi>     <msub>      <mi>p</mi>      <mi>b</mi>     </msub>    </mfrac>    <mo>)</mo>   </mrow>   <mrow>    <mo>-</mo>    <mn>1</mn>   </mrow>   <mn>1</mn>  </msubsup>  <mo>]</mo> </mrow></math></maths></p><p id="p-0099" num="0000">are added before taking the ceiling. The correction factor is controlled by the ratio between the bandwidth b of the node's policy, and the probability p<sub>b</sub>=1/&#xf1; it should be fairly allocated according to the node's estimate. If b&#x3c;p<sub>b</sub>, the node is allocated less bandwidth it deserves, and the correction factor is negative, leading to the insertion of a schedule with higher bandwidth. If b&#x3e;p<sub>b </sub>it is positive, leading to the insertion of a schedule with lower bandwidth. This correction factor thus promotes fairness. In an example embodiment, the value of &#x394;<sub>new </sub>is set to 2 (line <b>9</b> of the algorithm in <figref idref="DRAWINGS">FIG. <b>4</b></figref>). Choosing a small value of &#x394;<sub>new </sub>(e.g. 1) leads to a faster-adapting network, as empty slots in the channel are more quickly exploited by active nodes. Larger values for &#x394;<sub>new </sub>(e.g. 3) makes the nodes less aggressive in appropriating empty slots, and results in a fairer distribution of bandwidth among nodes, at the cost of slower adaptation rates. In an example embodiment, a value for &#x394;<sub>new </sub>is set at 2 as a compromise between these two values.</p><p id="p-0100" num="0074">In this embodiment, lines <b>22</b>-<b>40</b> of the algorithm are repeated for each time slot and/or for each node in the network. In an example embodiment, repeating lines <b>22</b>-<b>40</b> corresponds to step <b>231</b> where the end condition occurs when the last time slot is processed and/or when the algorithm is performed for each node in the network.</p><p id="p-0101" num="0075">2.2 Performance Data</p><p id="p-0102" num="0076">The performance of the algorithm (APT-ALOHA) is compared with the performance of two conventional algorithms, framed slotted ALOHA and ALOHA-Q by means of simulations. In this embodiment, protocols are written as Python classes: by swapping the class used for the nodes in the network simulator, the performance of these protocols can be compared under the same settings. A fully-connected single-channel wireless network is considered for the comparisons. The channel is time slotted, and for the purposes of frames slotted ALOHA-Q the time slots are organized into transmission frames of 64 time slots each. The length of a time slot equals a packet length, which is assumed to be a constant. The number of active nodes is changed for different scenarios. The performance of the three protocols is compared in terms of their bandwidth utilization, and of their fairness.</p><p id="p-0103" num="0077">The network utilization metric is now discussed. Every individual time slot is either empty, or it contains a successful transmission or a collision. To show how the network utilization evolves over time, time slots are aggregated in blocks of 100: for each block the utilization is computed as the fraction of individual slots that contains a successful transmission. Similarly, the fraction of empty and collision time slots in each block is measured. Using blocks of length <b>100</b> offers a compromise between having a fine time resolution, and computing meaningful statistics on each block.</p><p id="p-0104" num="0078">The fairness metric is now discussed. The fairness of a protocol indicates how equitably the bandwidth of the protocol is distributed among the nodes. Two measurements of fairness are provided. The first is the Jain's index. Assume that n nodes are active in a time block and let b<sub>i </sub>be the number of successful transmissions in the slot by node i&#x2208;|1, . . . n|. Let B=&#x3a3;<sub>i=1</sub><sup>n</sup>b<sub>i </sub>be the bandwidth in the slot. Jain's index is computed as:</p><p id="p-0105" num="0000"><maths id="MATH-US-00010" num="00010"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>J</mi>     <mo>=</mo>     <mfrac>      <msup>       <mi>B</mi>       <mn>2</mn>      </msup>      <mrow>       <mi>n</mi>       <mo>&#x2062;</mo>       <mrow>        <msubsup>         <mo>&#x2211;</mo>         <mrow>          <mi>i</mi>          <mo>=</mo>          <mn>1</mn>         </mrow>         <mi>n</mi>        </msubsup>        <msubsup>         <mi>b</mi>         <mi>i</mi>         <mn>2</mn>        </msubsup>       </mrow>      </mrow>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>12</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0106" num="0000">Jain's index variable J is a variable with a value in a range between 0 and 1; the value of J is 1 for a perfectly fair distribution of the channel</p><p id="p-0107" num="0000"><maths id="MATH-US-00011" num="00011"><math overflow="scroll"> <mrow>  <mo>(</mo>  <mrow>   <msub>    <mi>b</mi>    <mi>i</mi>   </msub>   <mo>=</mo>   <mrow>    <mfrac>     <mi>B</mi>     <mi>n</mi>    </mfrac>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>for</mi>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>all</mi>    <mo>&#x2062;</mo>    <mrow>     <mtext> </mtext>     <mtext>  </mtext>    </mrow>    <mo>&#x2062;</mo>    <mi>i</mi>   </mrow>  </mrow>  <mo>)</mo> </mrow></math></maths></p><p id="p-0108" num="0000">and the value of J is 0 if only one node gets to use the channel. The other measure used is the bottom-10% fair share. To compute it, the nodes are sorted in order of bandwidth, so that b<sub>1</sub>&#x2264; . . . &#x2264;b<sub>n</sub>, and let m=[n/10]. Then, B<sub>10</sub>=&#x3a3;<sub>i=1</sub><sup>m</sup>bi is the cumulative bandwidth of the bottom 10% of the nodes, and</p><p id="p-0109" num="0000"><maths id="MATH-US-00012" num="00012"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <msub>      <mi>F</mi>      <mrow>       <mn>1</mn>       <mo>&#x2062;</mo>       <mn>0</mn>       <mo>&#x2062;</mo>       <mi>%</mi>      </mrow>     </msub>     <mo>=</mo>     <mfrac>      <msub>       <mi>nB</mi>       <mrow>        <mn>1</mn>        <mo>&#x2062;</mo>        <mn>0</mn>       </mrow>      </msub>      <mi>mB</mi>     </mfrac>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>13</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0110" num="0000">is the ratio between the actual bandwidth for the bottom 10%, and the bandwidth the bottom 10% would receive under fair allocation. The F<sub>10% </sub>measure variable has a value in a range between 0 and 1, like Jain's index. While Jain's index captures the fairness of the overall allocation, the F<sub>10% </sub>measure variable captures how the most &#x201c;unfortunate&#x201d; nodes fare in the protocol.</p><p id="p-0111" num="0079"><figref idref="DRAWINGS">FIG. <b>5</b>A and <b>5</b>B</figref> are graphs that illustrate example traces that indicate network utilization and fairness using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> with multiple nodes joining simultaneously, according to an embodiment. The horizontal axis <b>502</b> is time blocks, where one time block corresponds to 100 time slots. The vertical axis <b>504</b> is network utilization (unitless). The vertical axis <b>506</b> is fairness (unitless). Curves <b>506</b>, <b>508</b>, <b>510</b> of the graph <b>500</b> of <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> indicate the respective network utilization for success, collision and empty time slots. <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates the performance and fairness of the APT-ALOHA protocol in a network with 10 active nodes that starts with a cold start. The bandwidth utilization surpasses 75% within a couple of time blocks, that is, within 200 time slots: this demonstrates the fast adaptation speed of the protocol. Curve <b>512</b> of <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> indicates Jain's fairness index which has a value close to 1, and curve <b>512</b> indicates the F<sub>10% </sub>measure which has a value generally above 0.5: this indicates that the allocation of bandwidth to the nodes is fair, and in particular, that the node receiving the least bandwidth in each 100-time slots block receives at least half of the average node bandwidth.</p><p id="p-0112" num="0080"><figref idref="DRAWINGS">FIGS. <b>6</b>A through <b>6</b>C</figref> are graphs <b>600</b>, <b>650</b>, <b>660</b> that illustrate example traces that indicate network utilization and fairness using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> when the number of active nodes increases, according to an embodiment. The horizontal axis <b>602</b> is time blocks, where one time block corresponds to 100 time slots. The vertical axis <b>604</b> indicates a number of active nodes. The vertical axis <b>608</b> is network utilization (unitless). The vertical axis <b>616</b> is fairness (unitless). <figref idref="DRAWINGS">FIGS. <b>6</b>B and <b>6</b>C</figref> illustrate the performance and fairness of the APT-ALOHA protocol when the number of active nodes is initially 10, then ramps up to 50, and finally ramps down to 30, as shown in curve <b>606</b> of <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>. Curves <b>610</b>, <b>612</b>, <b>614</b> of <figref idref="DRAWINGS">FIG. <b>6</b>B</figref> indicate the respective utilization of the success, collision and empty time slots. The utilization represented by curve <b>610</b> remains in the 85% to 90% range in the steady-state periods when nodes neither join nor leave (e.g. when the curve <b>606</b> remains at a constant value). During the transients, the utilization is still above 75% when ramping up, and above 60% when ramping down. Curve <b>620</b> of <figref idref="DRAWINGS">FIG. <b>6</b>C</figref> indicates the Jain fairness index which has a value close to 1. Curve <b>622</b> of <figref idref="DRAWINGS">FIG. <b>6</b>C</figref> indicates the F<sub>10% </sub>measure which demonstrates that the bottom 10-percentile of nodes still receives generally half of the average bandwidth, and in any case, more than 20% of the average. In this simulation and the next, time blocks of 1000 time units are used when studying fairness, to ensure that the bandwidth of each node is not unduly affected by statistical fluctuations (if 100-slot blocks were used, each of the 50 nodes would transmit only a couple of times in a block on average, and the statistical fluctuations would mask the true value of fairness).</p><p id="p-0113" num="0081"><figref idref="DRAWINGS">FIGS. <b>7</b>A through <b>7</b>C</figref> are graphs <b>700</b>, <b>750</b>, <b>760</b> that illustrate example traces that indicate network utilization and fairness using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> when the number of active nodes increases, according to an embodiment. The horizontal axis <b>702</b> is time blocks, where one time block corresponds to 100 time slots. The vertical axis <b>704</b> indicates a number of active nodes. The vertical axis <b>708</b> is network utilization (unitless). The vertical axis <b>716</b> is fairness (unitless). <figref idref="DRAWINGS">FIGS. <b>7</b>B and <b>7</b>C</figref> illustrate the performance of the APT-ALOHA protocol when nodes randomly become active or turn inactive. Curves <b>710</b>, <b>712</b>, <b>714</b> of <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> indicate the respective utilization of the success, collision and empty time slots. The network comprises 100 nodes, of which only one is initially active. At each time block, each node has probability 1/100 of switching state, from inactive to active, or vice versa. Thus, on average, in each time block one node changes state. Under these mutable network conditions, the curve <b>710</b> of <figref idref="DRAWINGS">FIG. <b>7</b>B</figref> indicates that the APT-ALOHA protocol maintains utilization around 75%, and the curve <b>720</b> of <figref idref="DRAWINGS">FIG. <b>7</b>C</figref> indicates that the Jain's fairness index has a value above 0.8.</p><p id="p-0114" num="0082">As the nodes become active or inactive at a faster pace, eventually the performance of APT-ALOHA degrades. <figref idref="DRAWINGS">FIG. <b>8</b></figref> is a graph <b>800</b> that illustrates an example trace that indicates average network successful utilization using the method of <figref idref="DRAWINGS">FIG. <b>2</b></figref> as a function of each node changing its active state each time block, according to an embodiment. The horizontal axis <b>802</b> is a probability of a node changing states every time block and the vertical axis <b>804</b> is throughout (unitless). In an embodiment, the curve <b>806</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> indicates the steady-state throughput of a network of 20 nodes, as a function of the probability of a node toggling active-inactive state each 100-time slots block. Even when the toggling probability reaches 0.4, corresponding to 8 nodes on average changing state every 100-slot block, the network still has a successful utilization of about 0.5.</p><p id="p-0115" num="0083">The performance of the APT-ALOHA algorithm is compared with that of two versions of exponential-backoff ALOHA (EB-ALOHA and EB-ALL-ALOHA), and with the performance of the ALOHA-Q protocol. EB-ALOHA is the standard slotted ALOHA with exponential-backoff. In EB-ALOHA, every node, when becoming active, has an initial transmission probability p value of 1/2. Whenever the node transmits, it updates the transmission probability, setting p:=&#x221d;p in case of collision, and</p><p id="p-0116" num="0000"><maths id="MATH-US-00013" num="00013"><math overflow="scroll"> <mrow>  <mi>p</mi>  <mo>:=</mo>  <mrow>   <mi>Min</mi>   <mo>&#x2061;</mo>   <mo>(</mo>   <mrow>    <mn>1</mn>    <mo>,</mo>    <mfrac>     <mi>p</mi>     <mo>&#x221d;</mo>    </mfrac>   </mrow>   <mo>)</mo>  </mrow> </mrow></math></maths></p><p id="p-0117" num="0000">in case of success, where &#x221d; is a constant that determines adaptation speed. For purposes of these simulation, a value of 0.9 is used for &#x221d;. The EB-ALL-ALOHA protocol is similar to EB-ALOHA, except that nodes update their transmission probabilities following all successful transmissions or collisions, rather than only those in which they took active part.</p><p id="p-0118" num="0084">The performance of the APT-ALOHA algorithm is also compared with ALOHA-Q which is the Q-learning version of ALOHA. The ALOHA-Q is based on a periodic frame of fixed length n. Each node stores q-values q<sub>1</sub>; q<sub>2</sub>; . . . q<sub>n</sub>, where q<sub>i </sub>represents the quality of the decision of transmitting in the i-<sup>th </sup>slot of the frame. At every frame, the protocol transmits in a slot i with maximal q<sub>i</sub>; if the transmission is successful, it increases q<sub>i</sub>; if a collision occurs, it decreases q<sub>i </sub>and it follows a randomized backoff before retrying. The bandwidth utilization of ALOHA-Q increases with the number in of active nodes, approaching m/n, as long as , m&#x2264;n; when m&#x3e;&#x3e;n, the protocol behaves in a similar fashion to EB-ALOHA. In the simulations, frames of n=64 time slots are considered that ensures that there are always slightly more frame slots than active nodes, thus ensuring that the protocol works as intended.</p><p id="p-0119" num="0085"><figref idref="DRAWINGS">FIGS. <b>9</b>A through <b>9</b>C</figref> and <figref idref="DRAWINGS">FIGS. <b>10</b>A through <b>10</b>C</figref> compare the performance of APT-ALOHA, EB-ALOHA, EBALL-ALOHA, and ALOHA-Q in the same settings used for <figref idref="DRAWINGS">FIGS. <b>6</b>A through <b>6</b>C</figref> and <figref idref="DRAWINGS">FIGS. <b>7</b>A through <b>7</b>C</figref>, respectively. The horizontal axes <b>902</b> and <b>1002</b> are time blocks, where one time block corresponds to <b>100</b> time slots. The vertical axes <b>904</b> and <b>1004</b> indicate a number of active nodes. The vertical axes <b>908</b>, <b>1008</b> is network utilization (unitless). The vertical axes <b>920</b>, <b>1020</b> is fairness (unitless). In terms of network utilization, Curves <b>910</b> through <b>916</b> of <figref idref="DRAWINGS">FIG. <b>9</b>B</figref> and curves <b>1010</b> through <b>1016</b> of <figref idref="DRAWINGS">FIG. <b>10</b>B</figref> indicate that the only protocol that is competitive with APT-ALOHA is EB-ALOHA. The problem is that EB-ALOHA achieves its high network utilization via an extremely unfair allocation of bandwidth, leading to the Jain index variable J having a value close to 0 as shown in curves <b>924</b> and <b>1024</b> of <figref idref="DRAWINGS">FIGS. <b>9</b>C and <b>10</b>C</figref>. In EB-ALOHA, nodes that are successful in transmitting will increase their transmission probability, while nodes whose transmissions are unsuccessful due to collisions will reduce their transmission probability. This amplifies any initial random difference in transmission success, leading to a winner-takes-all situation in which one node uses most of the bandwidth, transmitting with very high probability, while other nodes are mostly silent.</p><p id="p-0120" num="0086">As shown in curves <b>914</b>, <b>1014</b> of <figref idref="DRAWINGS">FIGS. <b>9</b>B and <b>10</b>B</figref>, the EB-ALL-ALOHA protocol manages to achieve the optimal network utilization of 1/e &#x2248;0.37 that is the maximum attainable under symmetrical transmission probability (and thus fairness) for ALOHA. As shown in curves <b>926</b> and <b>1026</b> of <figref idref="DRAWINGS">FIGS. <b>9</b>C and <b>10</b>C</figref>, the fairness of EB-ALL-ALOHA is uniformly very high, since all nodes transmit with the same probability.</p><p id="p-0121" num="0087">Additionally, curves <b>916</b> and <b>1016</b> of <figref idref="DRAWINGS">FIGS. <b>9</b>B and <b>10</b>B</figref> indicate that the bandwidth utilization of ALOHA-Q is dependent on the number of active nodes, increasing as the number of active nodes approaches the frame length of 64. Even when the number of active nodes is 50, as around time block <b>150</b> of <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>, the utilization indicated by curve <b>916</b> is below 0.6. This is well below the theoretical maximum of 50/64 &#x2248;0.78, likely because the active nodes have not had time to adapt to the network conditions. ALOHA-Q also allocates bandwidth fairly, as each node can transmit at most once per frame.</p><p id="p-0122" num="0088">Based on this comparison, the APT-ALOHA algorithm enables nodes sharing a common channel using the slotted ALOHA protocol to quickly approach collision-free transmissions while maintaining fairness. In contrast to prior approaches that use machine learning to improve the performance of slotted ALOHA, the resulting protocol, APT-ALOHA, only requires nodes to agree on the beginning of time slots, and does not require the definition of transmission frames with a fixed number of time slots per frame or the numbering of time slots. Simulation experiments were used to illustrate that APT-ALOHA attains better throughput and fairness than slotted ALOHA with exponential backoffs. and ALOHA-Q, which is framed slotted ALOHA with Q learning.</p><heading id="h-0009" level="1">3. Computational Hardware Overview</heading><p id="p-0123" num="0089"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram that illustrates a computer system <b>1100</b> upon which an embodiment of the invention may be implemented. Computer system <b>1100</b> includes a communication mechanism such as a bus <b>1110</b> for passing information between other internal and external components of the computer system <b>1100</b>. Information is represented as physical signals of a measurable phenomenon, typically electric voltages, but including, in other embodiments, such phenomena as magnetic, electromagnetic, pressure, chemical, molecular atomic and quantum interactions. For example, north and south magnetic fields, or a zero and non-zero electric voltage, represent two states (0, 1) of a binary digit (bit). Other phenomena can represent digits of a higher base. A superposition of multiple simultaneous quantum states before measurement represents a quantum bit (qubit). A sequence of one or more digits constitutes digital data that is used to represent a number or code for a character. In some embodiments, information called analog data is represented by a near continuum of measurable values within a particular range. Computer system <b>1100</b>, or a portion thereof, constitutes a means for performing one or more steps of one or more methods described herein.</p><p id="p-0124" num="0090">A sequence of binary digits constitutes digital data that is used to represent a number or code for a character. A bus <b>1110</b> includes many parallel conductors of information so that information is transferred quickly among devices coupled to the bus <b>1110</b>. One or more processors <b>1102</b> for processing information are coupled with the bus <b>1110</b>. A processor <b>1102</b> performs a set of operations on information. The set of operations include bringing information in from the bus <b>1110</b> and placing information on the bus <b>1110</b>. The set of operations also typically include comparing two or more units of information, shifting positions of units of information, and combining two or more units of information, such as by addition or multiplication. A sequence of operations to be executed by the processor <b>1102</b> constitutes computer instructions.</p><p id="p-0125" num="0091">Computer system <b>1100</b> also includes a memory <b>1104</b> coupled to bus <b>1110</b>. The memory <b>1104</b>, such as a random-access memory (RAM) or other dynamic storage device, stores information including computer instructions. Dynamic memory allows information stored therein to be changed by the computer system <b>1100</b>. RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory <b>1104</b> is also used by the processor <b>1102</b> to store temporary values during execution of computer instructions. The computer system <b>1100</b> also includes a read only memory (ROM) <b>1106</b> or other static storage device coupled to the bus <b>1110</b> for storing static information, including instructions, that is not changed by the computer system <b>1100</b>. Also coupled to bus <b>1110</b> is a non-volatile (persistent) storage device <b>1108</b>, such as a magnetic disk, optical disk, solid-state storage or FLASH-EPROM, for storing information, including instructions, that persists even when the computer system <b>1100</b> is turned off or otherwise loses power.</p><p id="p-0126" num="0092">Information, including instructions, is provided to the bus <b>1110</b> for use by the processor from an external input device <b>1112</b>, such as a keyboard containing alphanumeric keys operated by a human user, or a sensor. A sensor detects conditions in its vicinity and transforms those detections into signals compatible with the signals used to represent information in computer system <b>1100</b>. Other external devices coupled to bus <b>1110</b>, used primarily for interacting with humans, include a display device <b>1114</b>, such as a cathode ray tube (CRT) or a liquid crystal display (LCD), for presenting images, and a pointing device <b>1116</b>, such as a mouse or a trackball or cursor direction keys, for controlling a position of a small cursor image presented on the display <b>1114</b> and issuing commands associated with graphical elements presented on the display <b>1114</b>.</p><p id="p-0127" num="0093">In the illustrated embodiment, special purpose hardware, such as an application specific integrated circuit (IC) <b>1120</b>, is coupled to bus <b>1110</b>. The special purpose hardware is configured to perform operations not performed by processor <b>1102</b> quickly enough for special purposes. Examples of application specific ICs include graphics accelerator cards for generating images for display <b>1114</b>, cryptographic boards for encrypting and decrypting messages sent over a network, speech recognition, and interfaces to special external devices, such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.</p><p id="p-0128" num="0094">In the illustrated computer used as a router, the computer system <b>1100</b> includes switching system <b>1130</b> as special purpose hardware for switching information flow over a network. Switching system <b>1130</b> typically includes multiple communications interfaces, such as communications interface <b>1170</b>, for coupling to multiple other devices. In general, each coupling is with a network link <b>1132</b> that is connected to another device in or attached to a network, such as local network <b>1180</b> in the illustrated embodiment, to which a variety of external devices with their own processors are connected. In some embodiments an input interface or an output interface or both are linked to each of one or more external network elements. Although three network links <b>1132</b><i>a, </i><b>1132</b><i>b, </i><b>1132</b><i>c </i>are included in network links <b>1132</b> in the illustrated embodiment, in other embodiments, more or fewer links are connected to switching system <b>1130</b>. Network links <b>1132</b> typically provides information communication through one or more networks to other devices that use or process the information. For example, network link <b>1132</b><i>b </i>may provide a connection through local network <b>1180</b> to a host computer <b>1182</b> or to equipment <b>1184</b> operated by an Internet Service Provider (ISP). ISP equipment <b>1184</b> in turn provides data communication services through the public, world-wide packet-switching communication network of networks now commonly referred to as the Internet <b>1190</b>. A computer called a server <b>1192</b> connected to the Internet provides a service in response to information received over the Internet. For example, server <b>1192</b> provides routing information for use with switching system <b>1130</b>.</p><p id="p-0129" num="0095">The switching system <b>1130</b> includes logic and circuitry configured to perform switching functions associated with passing information among elements of network <b>1180</b>, including passing information received along one network link, e.g. <b>1132</b><i>a, </i>as output on the same or different network link, e.g., <b>1132</b><i>c. </i>The switching system <b>1130</b> switches information traffic arriving on an input interface to an output interface according to pre-determined protocols and conventions that are well known. In some embodiments, switching system <b>1130</b> includes its own processor and memory to perform some of the switching functions in software. In some embodiments, switching system <b>1130</b> relies on processor <b>1102</b>, memory <b>1104</b>, ROM <b>1106</b>, storage <b>1108</b>, or some combination, to perform one or more switching functions in software. For example, switching system <b>1130</b>, in cooperation with processor <b>1104</b> implementing a particular protocol, can determine a destination of a packet of data arriving on input interface on link <b>1132</b><i>a </i>and send it to the correct destination using output interface on link <b>1132</b><i>c. </i>The destinations may include host <b>1182</b>, server <b>1192</b>, other terminal devices connected to local network <b>1180</b> or Internet <b>1190</b>, or other routing and switching devices in local network <b>1180</b> or Internet <b>1190</b>.</p><p id="p-0130" num="0096">Computer system <b>1100</b> also includes one or more instances of a communications interface <b>1170</b> coupled to bus <b>1110</b>. Communication interface <b>1170</b> provides a two-way communication coupling to a variety of external devices that operate with their own processors, such as printers, scanners and external disks. In general, the coupling is with a network link <b>1132</b> that is connected to a local network <b>1180</b> to which a variety of external devices with their own processors are connected. For example, communication interface <b>1170</b> may be a parallel port or a serial port or a universal serial bus (USB) port on a personal computer. In some embodiments, communications interface <b>1170</b> is an integrated services digital network (ISDN) card or a digital subscriber line (DSL) card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments, a communication interface <b>1170</b> is a cable modem that converts signals on bus <b>1110</b> into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example, communications interface <b>1170</b> may be a local area network (LAN) card to provide a data communication connection to a compatible LAN, such as Ethernet. As another example, communications interface <b>1170</b> may be a modulator-demodulator (modem) to provide a wireless link to other devices capable of receiving information wirelessly. Carrier waves, such as acoustic waves and electromagnetic waves, including radio, optical and infrared waves travel through space without wires or cables. Signals include man-made variations in amplitude, frequency, phase, polarization or other physical properties of carrier waves. For wireless links, the communications interface <b>1170</b> sends and receives electrical, acoustic or electromagnetic signals, including infrared and optical signals, that carry information streams, such as digital data.</p><p id="p-0131" num="0097">The term computer-readable medium is used herein to refer to any medium that participates in providing information to processor <b>1102</b>, including instructions for execution. Such a medium may take many forms, including, but not limited to, non-volatile media, volatile media and transmission media. Non-volatile media include, for example, optical or magnetic disks, such as storage device <b>1108</b>. Volatile media include, for example, dynamic memory <b>1104</b>. Transmission media include, for example, coaxial cables, copper wire, fiber optic cables, and waves that travel through space without wires or cables, such as acoustic waves and electromagnetic waves, including radio, optical and infrared waves. The term computer-readable storage medium is used herein to refer to any medium that participates in providing information to processor <b>1102</b>, except for transmission media.</p><p id="p-0132" num="0098">Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, a hard disk, a magnetic tape, or any other magnetic medium, a compact disk ROM (CD-ROM), a digital video disk (DVD) or any other optical medium, punch cards, paper tape, or any other physical medium with patterns of holes, a RAM, a programmable ROM (PROM), an erasable PROM (EPROM), a FLASH-EPROM, or any other memory chip or cartridge, a carrier wave, or any other medium from which a computer can read. The term non-transitory computer-readable storage medium is used herein to refer to any medium that participates in providing information to processor <b>1102</b>, except for carrier waves and other signals.</p><p id="p-0133" num="0099">Logic encoded in one or more tangible media includes one or both of processor instructions on a computer-readable storage media and special purpose hardware, such as ASIC <b>1120</b>.</p><p id="p-0134" num="0100">The invention is related to the use of computer system <b>1100</b> for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system <b>1100</b> in response to processor <b>1102</b> executing one or more sequences of one or more instructions contained in memory <b>1104</b>. Such instructions, also called software and program code, may be read into memory <b>1104</b> from another computer-readable medium such as storage device <b>1108</b>. Execution of the sequences of instructions contained in memory <b>1104</b> causes processor <b>1102</b> to perform the method steps described herein. In alternative embodiments, hardware, such as application specific integrated circuit <b>1120</b>, may be used in place of or in combination with software to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware and software.</p><p id="p-0135" num="0101">The signals transmitted over network link <b>1132</b> and other networks through communications interface <b>1170</b>, carry information to and from computer system <b>1100</b>. Computer system <b>1100</b> can send and receive information, including program code, through the networks <b>1180</b>, <b>1190</b> among others, through network link <b>1132</b> and communications interface <b>1170</b>. In an example using the Internet <b>1190</b>, a server <b>1192</b> transmits program code for a particular application, requested by a message sent from computer <b>1100</b>, through Internet <b>1190</b>, ISP equipment <b>1184</b>, local network <b>1180</b> and communications interface <b>1170</b>. The received code may be executed by processor <b>1102</b> as it is received, or may be stored in storage device <b>1108</b> or other non-volatile storage for later execution, or both. In this manner, computer system <b>1100</b> may obtain application program code in the form of a signal on a carrier wave.</p><p id="p-0136" num="0102">Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor <b>1102</b> for execution. For example, instructions and data may initially be carried on a magnetic disk of a remote computer such as host <b>1182</b>. The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system <b>1100</b> receives the instructions and data on a telephone line and uses an infrared transmitter to convert the instructions and data to a signal on an infra-red a carrier wave serving as the network link <b>1132</b>. An infrared detector serving as communications interface <b>1170</b> receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus <b>1110</b>. Bus <b>1110</b> carries the information to memory <b>1104</b> from which processor <b>1102</b> retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory <b>1104</b> may optionally be stored on storage device <b>1108</b>, either before or after execution by the processor <b>1102</b>.</p><p id="p-0137" num="0103"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a chip set <b>1200</b> upon which an embodiment of the invention may be implemented. Chip set <b>1200</b> is programmed to perform one or more steps of a method described herein and includes, for instance, the processor and memory components described with respect to <figref idref="DRAWINGS">FIG. <b>10</b></figref> incorporated in one or more physical packages (e.g., chips). By way of example, a physical package includes an arrangement of one or more materials, components, and/or wires on a structural assembly (e.g., a baseboard) to provide one or more characteristics such as physical strength, conservation of size, and/or limitation of electrical interaction. It is contemplated that in certain embodiments the chip set can be implemented in a single chip. Chip set <b>1200</b>, or a portion thereof, constitutes a means for performing one or more steps of a method described herein.</p><p id="p-0138" num="0104">In one embodiment, the chip set <b>1200</b> includes a communication mechanism such as a bus <b>1201</b> for passing information among the components of the chip set <b>1200</b>. A processor <b>1203</b> has connectivity to the bus <b>1201</b> to execute instructions and process information stored in, for example, a memory <b>1205</b>. The processor <b>1203</b> may include one or more processing cores with each core configured to perform independently. A multi-core processor enables multiprocessing within a single physical package. Examples of a multi-core processor include two, four, eight, or greater numbers of processing cores. Alternatively, or in addition, the processor <b>1203</b> may include one or more microprocessors configured in tandem via the bus <b>1201</b> to enable independent execution of instructions, pipelining, and multithreading. The processor <b>1203</b> may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors (DSP) <b>1207</b>, or one or more application-specific integrated circuits (ASIC) <b>1209</b>. A DSP <b>1207</b> typically is configured to process real-world signals (e.g., sound) in real time independently of the processor <b>1203</b>. Similarly, an ASIC <b>1209</b> can be configured to performed specialized functions not easily performed by a general purposed processor. Other specialized components to aid in performing the inventive functions described herein include one or more field programmable gate arrays (FPGA) (not shown), one or more controllers (not shown), or one or more other special-purpose computer chips.</p><p id="p-0139" num="0105">The processor <b>1203</b> and accompanying components have connectivity to the memory <b>1205</b> via the bus <b>1201</b>. The memory <b>1205</b> includes both dynamic memory (e.g., RAM, magnetic disk, writable optical disk, etc.) and static memory (e.g., ROM, CD-ROM, etc.) for storing executable instructions that when executed perform one or more steps of a method described herein. The memory <b>1205</b> also stores the data associated with or generated by the execution of one or more steps of the methods described herein.</p><p id="p-0140" num="0106"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram of exemplary components of a mobile terminal <b>1300</b> (e.g., cell phone handset) for communications, which is capable of operating in the system of <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, according to one embodiment. In some embodiments, mobile terminal <b>1301</b>, or a portion thereof, constitutes a means for performing one or more steps described herein. Generally, a radio receiver is often defined in terms of front-end and back-end characteristics. The front-end of the receiver encompasses all of the Radio Frequency (RF) circuitry whereas the back-end encompasses all of the base-band processing circuitry. As used in this application, the term &#x201c;circuitry&#x201d; refers to both: (1) hardware-only implementations (such as implementations in only analog and/or digital circuitry), and (2) to combinations of circuitry and software (and/or firmware) (such as, if applicable to the particular context, to a combination of processor(s), including digital signal processor(s), software, and memory(ies) that work together to cause an apparatus, such as a mobile phone or server, to perform various functions). This definition of &#x201c;circuitry&#x201d; applies to all uses of this term in this application, including in any claims. As a further example, as used in this application and if applicable to the particular context, the term &#x201c;circuitry&#x201d; would also cover an implementation of merely a processor (or multiple processors) and its (or their) accompanying software/or firmware. The term &#x201c;circuitry&#x201d; would also cover if applicable to the particular context, for example, a baseband integrated circuit or applications processor integrated circuit in a mobile phone or a similar integrated circuit in a cellular network device or other network devices.</p><p id="p-0141" num="0107">Pertinent internal components of the telephone include a Main Control Unit (MCU) <b>1303</b>, a Digital Signal Processor (DSP) <b>1305</b>, and a receiver/transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit <b>1307</b> provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps as described herein. The display <b>1307</b> includes display circuitry configured to display at least a portion of a user interface of the mobile terminal (e.g., mobile telephone). Additionally, the display <b>1307</b> and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry <b>1309</b> includes a microphone <b>1311</b> and microphone amplifier that amplifies the speech signal output from the microphone <b>1311</b>. The amplified speech signal output from the microphone <b>1311</b> is fed to a coder/decoder (CODEC) <b>1313</b>.</p><p id="p-0142" num="0108">A radio section <b>1315</b> amplifies power and converts frequency in order to communicate with a base station, which is included in a mobile communication system, via antenna <b>1317</b>. The power amplifier (PA) <b>1319</b> and the transmitter/modulation circuitry are operationally responsive to the MCU <b>1303</b>, with an output from the PA <b>1319</b> coupled to the duplexer <b>1321</b> or circulator or antenna switch, as known in the art. The PA <b>1319</b> also couples to a battery interface and power control unit <b>1320</b>.</p><p id="p-0143" num="0109">In use, a user of mobile terminal <b>1301</b> speaks into the microphone <b>1311</b> and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter (ADC) <b>1323</b>. The control unit <b>1303</b> routes the digital signal into the DSP <b>1305</b> for processing therein, such as speech encoding, channel encoding, encrypting, and interleaving. In one embodiment, the processed voice signals are encoded, by units not separately shown, using a cellular transmission protocol such as enhanced data rates for global evolution (EDGE), general packet radio service (GPRS), global system for mobile communications (GSM), Internet protocol multimedia subsystem (IMS), universal mobile telecommunications system (UMTS), etc., as well as any other suitable wireless medium, e.g., microwave access (WiMAX), Long Term Evolution (LTE) networks, code division multiple access (CDMA), wideband code division multiple access (WCDMA), wireless fidelity (WiFi), satellite, and the like, or any combination thereof.</p><p id="p-0144" num="0110">The encoded signals are then routed to an equalizer <b>1325</b> for compensation of any frequency-dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream, the modulator <b>1327</b> combines the signal with a RF signal generated in the RF interface <b>1329</b>. The modulator <b>1327</b> generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission, an up-converter <b>1331</b> combines the sine wave output from the modulator <b>1327</b> with another sine wave generated by a synthesizer <b>1333</b> to achieve the desired frequency of transmission. The signal is then sent through a PA <b>1319</b> to increase the signal to an appropriate power level. In practical systems, the PA <b>1319</b> acts as a variable gain amplifier whose gain is controlled by the DSP <b>1305</b> from information received from a network base station. The signal is then filtered within the duplexer <b>1321</b> and optionally sent to an antenna coupler <b>1335</b> to match impedances to provide maximum power transfer. Finally, the signal is transmitted via antenna <b>1317</b> to a local base station. An automatic gain control (AGC) can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone, any other mobile phone or a land-line connected to a Public Switched Telephone Network (PSTN), or other telephony networks.</p><p id="p-0145" num="0111">Voice signals transmitted to the mobile terminal <b>1301</b> are received via antenna <b>1317</b> and immediately amplified by a low noise amplifier (LNA) <b>1337</b>. A down-converter <b>1339</b> lowers the carrier frequency while the demodulator <b>1341</b> strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer <b>1325</b> and is processed by the DSP <b>1305</b>. A Digital to Analog Converter (DAC) <b>1343</b> converts the signal and the resulting output is transmitted to the user through the speaker <b>1345</b>, all under control of a Main Control Unit (MCU) <b>1303</b> which can be implemented as a Central Processing Unit (CPU) (not shown).</p><p id="p-0146" num="0112">The MCU <b>1303</b> receives various signals including input signals from the keyboard <b>1347</b>. The keyboard <b>1347</b> and/or the MCU <b>1303</b> in combination with other user input components (e.g., the microphone <b>1311</b>) comprise a user interface circuitry for managing user input. The MCU <b>1303</b> runs a user interface software to facilitate user control of at least some functions of the mobile terminal <b>1301</b> as described herein. The MCU <b>1303</b> also delivers a display command and a switch command to the display <b>1307</b> and to the speech output switching controller, respectively. Further, the MCU <b>1303</b> exchanges information with the DSP <b>1305</b> and can access an optionally incorporated SIM card <b>1349</b> and a memory <b>1351</b>. In addition, the MCU <b>1303</b> executes various control functions required of the terminal. The DSP <b>1305</b> may, depending upon the implementation, perform any of a variety of conventional digital processing functions on the voice signals. Additionally, DSP <b>1305</b> determines the background noise level of the local environment from the signals detected by microphone <b>1311</b> and sets the gain of microphone <b>1311</b> to a level selected to compensate for the natural tendency of the user of the mobile terminal <b>1301</b>.</p><p id="p-0147" num="0113">The CODEC <b>1313</b> includes the ADC <b>1323</b> and DAC <b>1343</b>. The memory <b>1351</b> stores various data including call incoming tone data and is capable of storing other data including music data received via, e.g., the global Internet. The software module could reside in RAM memory, flash memory, registers, or any other form of writable storage medium known in the art. The memory device <b>1351</b> may be, but not limited to, a single memory, CD, DVD, ROM, RAM, EEPROM, optical storage, magnetic disk storage, flash memory storage, or any other non-volatile storage medium capable of storing digital data.</p><p id="p-0148" num="0114">An optionally incorporated SIM card <b>1349</b> carries, for instance, important information, such as the cellular phone number, the carrier supplying service, subscription details, and security information. The SIM card <b>1349</b> serves primarily to identify the mobile terminal <b>1301</b> on a radio network. The card <b>1349</b> also contains a memory for storing a personal telephone number registry, text messages, and user specific mobile terminal settings.</p><p id="p-0149" num="0115">In some embodiments, the mobile terminal <b>1301</b> includes a digital camera comprising an array of optical detectors, such as charge coupled device (CCD) array <b>1365</b>. The output of the array is image data that is transferred to the MCU for further processing or storage in the memory <b>1351</b> or both. In the illustrated embodiment, the light impinges on the optical array through a lens <b>1363</b>, such as a pin-hole lens or a material lens made of an optical grade glass or plastic material. In the illustrated embodiment, the mobile terminal <b>1301</b> includes a light source <b>1361</b>, such as a LED to illuminate a subject for capture by the optical array, e.g., CCD <b>1365</b>. The light source is powered by the battery interface and power control module <b>1320</b> and controlled by the MCU <b>1303</b> based on instructions stored or loaded into the MCU <b>1303</b>.</p><heading id="h-0010" level="1">4. Alternatives, Extensions and Modifications</heading><p id="p-0150" num="0116">In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. Throughout this specification and the claims, unless the context requires otherwise, the word &#x201c;comprise&#x201d; and its variations, such as &#x201c;comprises&#x201d; and &#x201c;comprising,&#x201d; will be understood to imply the inclusion of a stated item, element or step or group of items, elements or steps but not the exclusion of any other item, element or step or group of items, elements or steps. Furthermore, the indefinite article &#x201c;a&#x201d; or &#x201c;an&#x201d; is meant to indicate one or more of the item, element or step modified by the article. As used herein, unless otherwise clear from the context, a value is &#x201c;about&#x201d; another value if it is within a factor of two (twice or half) of the other value. While example ranges are given, unless otherwise clear from the context, any contained ranges are also intended in various embodiments. Thus, a range from 0 to 10 includes the range 1 to 4 in some embodiments.</p><heading id="h-0011" level="1">5. References</heading><p id="p-0151" num="0117">Each of the following references is hereby incorporated by reference as if fully set forth herein, except for terminology that is inconsistent with that sued herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2" nb-file="US20230007671A1-20230105-M00001.NB"><img id="EMI-M00001" he="10.58mm" wi="76.20mm" file="US20230007671A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002 MATH-US-00002-2" nb-file="US20230007671A1-20230105-M00002.NB"><img id="EMI-M00002" he="10.24mm" wi="76.20mm" file="US20230007671A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230007671A1-20230105-M00003.NB"><img id="EMI-M00003" he="5.67mm" wi="76.20mm" file="US20230007671A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004" nb-file="US20230007671A1-20230105-M00004.NB"><img id="EMI-M00004" he="6.01mm" wi="76.20mm" file="US20230007671A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005" nb-file="US20230007671A1-20230105-M00005.NB"><img id="EMI-M00005" he="5.67mm" wi="76.20mm" file="US20230007671A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00006" nb-file="US20230007671A1-20230105-M00006.NB"><img id="EMI-M00006" he="5.67mm" wi="76.20mm" file="US20230007671A1-20230105-M00006.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00007" nb-file="US20230007671A1-20230105-M00007.NB"><img id="EMI-M00007" he="6.01mm" wi="76.20mm" file="US20230007671A1-20230105-M00007.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00008" nb-file="US20230007671A1-20230105-M00008.NB"><img id="EMI-M00008" he="7.03mm" wi="76.20mm" file="US20230007671A1-20230105-M00008.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00009" nb-file="US20230007671A1-20230105-M00009.NB"><img id="EMI-M00009" he="6.35mm" wi="76.20mm" file="US20230007671A1-20230105-M00009.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00010" nb-file="US20230007671A1-20230105-M00010.NB"><img id="EMI-M00010" he="8.13mm" wi="76.20mm" file="US20230007671A1-20230105-M00010.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00011" nb-file="US20230007671A1-20230105-M00011.NB"><img id="EMI-M00011" he="5.67mm" wi="76.20mm" file="US20230007671A1-20230105-M00011.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00012" nb-file="US20230007671A1-20230105-M00012.NB"><img id="EMI-M00012" he="5.25mm" wi="76.20mm" file="US20230007671A1-20230105-M00012.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00013" nb-file="US20230007671A1-20230105-M00013.NB"><img id="EMI-M00013" he="4.91mm" wi="76.20mm" file="US20230007671A1-20230105-M00013.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method implemented on a processor for transmitting data packets on a shared channel in a data communications network, the method comprising:<claim-text>retrieving from storage a plurality of policies for sharing a shared channel among nodes in a data communications network using a particular protocol, the plurality of polices defining a tree of periodic schedules of variable periods, each policy defining a transmit time slot as a unique slot i of a modulus of a power m of a base b of a series of time slots, where m indicates a level of the tree of periodic schedules;</claim-text><claim-text>observing at a first node the probability of empty time slots or of successful time slots or of collision time slots on the shared channel, or some combination of two probabilities;</claim-text><claim-text>selecting at the first node in the data communications network a first policy among the plurality of policies based on the probability or probabilities observed instead of a message received from a central authority; and</claim-text><claim-text>transmitting a local data packet from the first node onto the shared channel at a transmit time based on the first policy.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising<claim-text>determining whether the local data packet is not successfully transmitted;</claim-text><claim-text>when the local data packet is not successfully transmitted selecting at the first node a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting the local data packet from the first node onto the shared channel at a transmit time slot based on the second policy.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising<claim-text>determining whether the local data packet is successfully transmitted;</claim-text><claim-text>when the local data packet is successfully transmitted, adding at the first node, with a barge-in probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting a subsequent different local data packet from the first node onto the shared channel at a transmit time slot based on the first policy or the second policy.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method as recited in <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein a periodic schedule of the second policy is not a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising<claim-text>determining whether the local data packet is successfully transmitted;</claim-text><claim-text>when the local data packet is successfully transmitted, selecting at the first node, with a kindness probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting a subsequent different local data packet from the first node onto the shared channel at a transmit time slot based on the second policy.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method as recited in <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein a periodic schedule of the second policy is a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method as recited in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the base b of the modulus is 2.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A non-transitory computer-readable medium carrying one or more sequences of instructions, wherein execution of the one or more sequences of instructions by one or more processors causes the one or more processors to perform the steps of:<claim-text>retrieving from storage a plurality of policies for sharing a shared channel among nodes in a data communications network using a particular protocol, the plurality of polices defining a tree of periodic schedules of variable periods, each policy defining a transmit time slot as a unique slot i of a modulus of a power m of a base b of a series of time slots, where m indicates a level of the tree of periodic schedules;</claim-text><claim-text>observing at a first node the probability of empty time slots or of successful time slots or of collision time slots on the shared channel, or some combination of two probabilities;</claim-text><claim-text>selecting at the first node in the data communications network a first policy among the plurality of policies based on the probability or probabilities observed instead of a message received from a central authority; and</claim-text><claim-text>transmitting a local data packet from the first node onto the shared channel at a transmit time based on the first policy.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The non-transitory computer-readable medium as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein execution of the one or more sequences of instructions by one or more processors further causes the one or more processors to perform the steps of:<claim-text>determining whether the local data packet is not successfully transmitted;</claim-text><claim-text>when the local data packet is not successfully transmitted selecting at the first node a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting the local data packet from the first node onto the shared channel at a transmit time slot based on the second policy.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer-readable medium as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein execution of the one or more sequences of instructions by one or more processors further causes the one or more processors to perform the steps of:<claim-text>determining whether the local data packet is successfully transmitted;</claim-text><claim-text>when the local data packet is successfully transmitted, adding at the first node, with a barge-in probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting a subsequent different local data packet from the first node onto the shared channel at a transmit time slot based on the first policy or the second policy.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer-readable medium as recited in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein a periodic schedule of the second policy is not a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer-readable medium as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein execution of the one or more sequences of instructions by one or more processors further causes the one or more processors to perform the steps of:<claim-text>determining whether the local data packet is successfully transmitted;</claim-text><claim-text>when the local data packet is successfully transmitted, selecting at the first node, with a kindness probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting a subsequent different local data packet from the first node onto the shared channel at a transmit time slot based on the second policy.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer-readable medium as recited in <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein a periodic schedule of the second policy is a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer-readable medium as recited in <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the base b of the modulus is 2.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. An apparatus comprising:<claim-text>at least one processor;</claim-text><claim-text>a network connection; and</claim-text><claim-text>at least one memory including one or more sequences of instructions,</claim-text><claim-text>the at least one memory and the one or more sequences of instructions configured to, with the at least one processor, cause the apparatus to perform at least the following,<claim-text>retrieving from storage a plurality of policies for sharing a shared channel among nodes in a data communications network using a particular protocol, the plurality of polices defining a tree of periodic schedules of variable periods, each policy defining a transmit time slot as a unique slot i of a modulus of a power m of a base b of a series of time slots, where m indicates a level of the tree of periodic schedules;</claim-text><claim-text>observing at a first node the probability of empty time slots or of successful time slots or of collision time slots on the shared channel, or some combination of two probabilities;</claim-text><claim-text>selecting at the first node in the data communications network a first policy among the plurality of policies based on the probability or probabilities observed instead of a message received from a central authority; and</claim-text><claim-text>transmitting a local data packet from the first node onto the shared channel at a transmit time based on the first policy.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory and the one or more sequences of instructions is configured to, with the processor, cause the apparatus to further perform the following,<claim-text>determining whether the local data packet is not successfully transmitted;</claim-text><claim-text>when the local data packet is not successfully transmitted selecting at the first node a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting the local data packet from the first node onto the shared channel at a transmit time slot based on the second policy.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory and the one or more sequences of instructions is configured to, with the processor, cause the apparatus to further perform the following,<claim-text>determining whether the local data packet is successfully transmitted;</claim-text><claim-text>when the local data packet is successfully transmitted, adding at the first node, with a barge-in probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting a subsequent different local data packet from the first node onto the shared channel at a transmit time slot based on the first policy or the second policy.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the memory and the one or more sequences of instructions is configured to, with the processor, cause the apparatus to further perform the following,<claim-text>determining whether the local data packet is successfully transmitted;</claim-text><claim-text>when the local data packet is successfully transmitted, selecting at the first node, with a kindness probability based on at least one of the observed probabilities, a different second policy among the plurality of policies, wherein the second policy has a periodic schedule at higher level m of the tree of periodic schedules; and</claim-text><claim-text>transmitting a subsequent different local data packet from the first node onto the shared channel at a transmit time slot based on the second policy.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus as recited in <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein a periodic schedule of the second policy is a descendant of a periodic schedule of the first policy in the tree of periodic schedules.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus as recited in <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the base b of the modulus is 2.</claim-text></claim></claims></us-patent-application>