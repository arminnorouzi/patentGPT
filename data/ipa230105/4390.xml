<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004391A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004391</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17897405</doc-number><date>20220829</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0875</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0897</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>345</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>38</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30043</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>34</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3016</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0875</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>0897</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30014</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30036</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30098</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30112</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30145</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>345</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3802</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>383</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3867</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>30047</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>13</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3861</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>3004</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2212</main-group><subgroup>452</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2212</main-group><subgroup>60</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>11</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">STREAMING ENGINE WITH STREAM METADATA SAVING FOR CONTEXT SWITCHING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17011808</doc-number><date>20200903</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11429387</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17897405</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16273413</doc-number><date>20190212</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10768933</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17011808</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15635409</doc-number><date>20170628</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10203958</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16273413</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>TEXAS INSTRUMENTS INCORPORATED</orgname><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Zbiciak</last-name><first-name>Joseph</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Anderson</last-name><first-name>Timothy D.</first-name><address><city>University Park</city><country>UC</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A streaming engine employed in a digital data processor specifies a fixed read only data stream defined by plural nested loops. An address generator produces addresses of data elements. A steam head register stores data elements next to be supplied to functional units for use as operands. Stream metadata is stored in response to a stream store instruction. Stored stream metadata is restored to the stream engine in response to a stream restore instruction. An interrupt changes an open stream to a frozen state discarding stored stream data. A return from interrupt changes a frozen stream to an active state.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="197.10mm" wi="157.99mm" file="US20230004391A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="208.87mm" wi="160.02mm" file="US20230004391A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="253.58mm" wi="167.13mm" orientation="landscape" file="US20230004391A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="243.25mm" wi="167.47mm" file="US20230004391A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="254.76mm" wi="169.16mm" orientation="landscape" file="US20230004391A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="227.75mm" wi="131.74mm" file="US20230004391A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="242.99mm" wi="165.69mm" orientation="landscape" file="US20230004391A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="191.60mm" wi="115.40mm" file="US20230004391A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="250.36mm" wi="164.76mm" file="US20230004391A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="197.61mm" wi="119.80mm" orientation="landscape" file="US20230004391A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="252.98mm" wi="162.64mm" orientation="landscape" file="US20230004391A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="247.31mm" wi="136.14mm" orientation="landscape" file="US20230004391A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="251.88mm" wi="167.98mm" orientation="landscape" file="US20230004391A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="227.92mm" wi="139.53mm" orientation="landscape" file="US20230004391A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="227.92mm" wi="137.58mm" orientation="landscape" file="US20230004391A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="250.87mm" wi="169.67mm" orientation="landscape" file="US20230004391A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="251.80mm" wi="85.94mm" orientation="landscape" file="US20230004391A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="251.88mm" wi="170.60mm" orientation="landscape" file="US20230004391A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="251.04mm" wi="165.86mm" orientation="landscape" file="US20230004391A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="251.88mm" wi="167.98mm" orientation="landscape" file="US20230004391A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="234.87mm" wi="170.01mm" file="US20230004391A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="251.88mm" wi="155.79mm" orientation="landscape" file="US20230004391A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="139.78mm" wi="167.98mm" file="US20230004391A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="186.44mm" wi="168.49mm" file="US20230004391A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/011,808, filed on Sep. 3, 2020, which is a continuation of U.S. patent application Ser. No. 16/273,413, filed on Feb. 12, 2019, now U.S. Pat. No. 10,768,933, which is a continuation of U.S. patent application Ser. No. 15/635,409 filed on Jun. 28, 2017, now U.S. Pat. No. 10,203,958, which is a continuation-in-part of U.S. patent application Ser. No. 14/331,986 filed on Jul. 15, 2014, now U.S. Pat. No. 9,606,803, which claims priority from U.S. Provisional Patent Application No. 61/846,148 filed on Jul. 15, 2013, all of which are incorporated by reference herein in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The technical field of this invention is digital data processing and more specifically control of streaming engine used for operand fetching.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Modern digital signal processors (DSP) faces multiple challenges. Workloads continue to increase, requiring increasing bandwidth. Systems on a chip (SOC) continue to grow in size and complexity. Memory system latency severely impacts certain classes of algorithms. As transistors get smaller, memories and registers become less reliable. As software stacks get larger, the number of potential interactions and errors becomes larger.</p><p id="p-0005" num="0004">Memory bandwidth and scheduling are a problem for digital signal processors operating on real-time data. Digital signal processors operating on real-time data typically receive an input data stream, perform a filter function on the data stream (such as encoding or decoding) and output a transformed data stream. The system is called real-time because the application fails if the transformed data stream is not available for output when scheduled. Typical video encoding requires a predictable but non-sequential input data pattern. Often the corresponding memory accesses are difficult to achieve within available address generation and memory access resources. A typical application requires memory access to load data registers in a data register file and then supply to functional units which preform the data processing.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">This invention is a streaming engine employed in a digital signal processor. A fixed data stream sequence is specified by storing parameters in a control register. The data stream includes plural nested loops. Once started the data stream is read only and cannot be written. Streams end by traversing all the elements of the stream or by an explicit stream stop instruction. Such a data stream generally corresponds to the needs of a real-time filtering operation.</p><p id="p-0007" num="0006">The streaming engine includes an address generator which produces addresses of data elements, a stream buffer and a steam head register. The streaming engine fetches stream data ahead of use and stores it in the stream buffer. The stream head register stores data elements next to be supplied to functional units. The stream head register size matches the operand size of the functional units.</p><p id="p-0008" num="0007">A stream save instruction saves state metadata of the stream. A stream restore instruction recalls previously saved state metadata and resumes the stream. This metadata includes a current address and a remaining loop count for each of the plural nested loops.</p><p id="p-0009" num="0008">An active stream is frozen upon receipt of an interrupt. This retains the loop addresses and count data in place and discards data stored in the stream buffer. A return from interrupt restarts the stream from the point it was frozen.</p><p id="p-0010" num="0009">The digital data processor preferably includes separate level one data and instruction caches backed by a combined level two cache. Data requested by the stream engine is serviced from the level two cache bypassing the level one data cache.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0011" num="0010">These and other aspects of this invention are illustrated in the drawings, in which:</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a dual scalar/vector datapath processor according to one embodiment of this invention;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates the registers and functional units in the dual scalar/vector datapath processor illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates a global scalar register file;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a local scalar register file shared by arithmetic functional units;</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a local scalar register file shared by multiply functional units;</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a local scalar register file shared by load/store units;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a global vector register file;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a predicate register file;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a local vector register file shared by arithmetic functional units;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a local vector register file shared by multiply and correlation functional units;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates pipeline phases of a central processing unit according to a preferred embodiment of this invention;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates sixteen instructions of a single fetch packet;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example of the instruction coding of instructions used by this invention;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates the bit coding of a condition code extension slot 0;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates the bit coding of a condition code extension slot 1;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates the bit coding of a constant extension slot 0;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a partial block diagram illustrating constant extension;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates the carry control for SIMD operations according to this invention;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates a conceptual view of the streaming engines of this invention;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates the sequence of the formatting operations of this invention;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates a first example of lane allocation in a vector;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>22</b></figref> illustrates a second example of lane allocation in a vector;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates a basic two dimensional stream;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates the order of elements within the example stream of <figref idref="DRAWINGS">FIG. <b>21</b></figref>;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>25</b></figref> illustrates extracting a smaller rectangle from a larger rectangle;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>26</b></figref> illustrates how the streaming engine would fetch the stream of this example with a transposition granularity of 4 bytes;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates how the streaming engine would fetch the stream of this example with a transposition granularity of 8 bytes;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>28</b></figref> illustrates the details of streaming engine of this invention;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates a stream template register of this invention;</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>30</b></figref> illustrates sub-field definitions of the flags field of the stream template register of this invention;</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>31</b></figref> illustrates the definition of bits of the stream template register for a first alternate coding of the DIMFMT field;</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>32</b></figref> illustrates the definition of bits of the stream template register for a second alternate coding of the DIMFMT field;</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>33</b></figref> illustrates the definition of bits of the stream template register for a third alternate coding of the DIMFMT field;</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>34</b></figref> illustrates the definition of bits of the stream template register for a fourth alternate coding of the DIMFMT field;</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>35</b></figref> illustrates the definition of bits of the stream template register for a fifth alternate coding of the DIMFMT field;</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>36</b></figref> illustrates the permitted states of each stream and the permitted transitions among these three states;</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>37</b></figref> illustrates a portion of a task state register storing stream state data;</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>38</b></figref> illustrates the segment coding storing stream data employed by stream save and stream restore instructions according to the preferred embodiment of this invention;</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>39</b></figref> is a partial schematic diagram of a streaming engine address generator illustrating generation of the loop address and loop count; and</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>40</b></figref> illustrates a partial schematic diagram showing the streaming engine supply of data of this invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a dual scalar/vector datapath processor <b>100</b> according to a preferred embodiment of this invention. Processor <b>100</b> includes separate level one instruction cache (L1I) <b>121</b> and level one data cache (L1D) <b>123</b>. Processor <b>100</b> includes a level two combined instruction/data cache (L2) <b>130</b> that holds both instructions and data. <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates connection between level one instruction cache <b>121</b> and level two combined instruction/data cache <b>130</b> (bus <b>142</b>). <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates connection between level one data cache <b>123</b> and level two combined instruction/data cache <b>130</b> (bus <b>145</b>). In the preferred embodiment of processor <b>100</b> level two combined instruction/data cache <b>130</b> stores both instructions to back up level one instruction cache <b>121</b> and data to back up level one data cache <b>123</b>. In the preferred embodiment level two combined instruction/data cache <b>130</b> is further connected to higher level cache and/or main memory in a manner not illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In the preferred embodiment central processing unit core <b>110</b>, level one instruction cache <b>121</b>, level one data cache <b>123</b> and level two combined instruction/data cache <b>130</b> are formed on a single integrated circuit. This signal integrated circuit optionally includes other circuits.</p><p id="p-0053" num="0052">Central processing unit core <b>110</b> fetches instructions from level one instruction cache <b>121</b> as controlled by instruction fetch unit <b>111</b>. Instruction fetch unit <b>111</b> determines the next instructions to be executed and recalls a fetch packet sized set of such instructions. The nature and size of fetch packets are further detailed below. As known in the art, instructions are directly fetched from level one instruction cache <b>121</b> upon a cache hit (if these instructions are stored in level one instruction cache <b>121</b>). Upon a cache miss (the specified instruction fetch packet is not stored in level one instruction cache <b>121</b>), these instructions are sought in level two combined cache <b>130</b>. In the preferred embodiment the size of a cache line in level one instruction cache <b>121</b> equals the size of a fetch packet. The memory locations of these instructions are either a hit in level two combined cache <b>130</b> or a miss. A hit is serviced from level two combined cache <b>130</b>. A miss is serviced from a higher level of cache (not illustrated) or from main memory (not illustrated). As is known in the art, the requested instruction may be simultaneously supplied to both level one instruction cache <b>121</b> and central processing unit core <b>110</b> to speed use.</p><p id="p-0054" num="0053">In the preferred embodiment of this invention, central processing unit core <b>110</b> includes plural functional units to perform instruction specified data processing tasks. Instruction dispatch unit <b>112</b> determines the target functional unit of each fetched instruction. In the preferred embodiment central processing unit <b>110</b> operates as a very long instruction word (VLIW) processor capable of operating on plural instructions in corresponding functional units simultaneously. Preferably a complier organizes instructions in execute packets that are executed together. Instruction dispatch unit <b>112</b> directs each instruction to its target functional unit. The functional unit assigned to an instruction is completely specified by the instruction produced by a compiler. The hardware of central processing unit core <b>110</b> has no part in this functional unit assignment. In the preferred embodiment instruction dispatch unit <b>112</b> may operate on plural instructions in parallel. The number of such parallel instructions is set by the size of the execute packet. This will be further detailed below.</p><p id="p-0055" num="0054">One part of the dispatch task of instruction dispatch unit <b>112</b> is determining whether the instruction is to execute on a functional unit in scalar datapath side A <b>115</b> or vector datapath side B <b>116</b>. An instruction bit within each instruction called the s bit determines which datapath the instruction controls. This will be further detailed below.</p><p id="p-0056" num="0055">Instruction decode unit <b>113</b> decodes each instruction in a current execute packet. Decoding includes identification of the functional unit performing the instruction, identification of registers used to supply data for the corresponding data processing operation from among possible register files and identification of the register destination of the results of the corresponding data processing operation. As further explained below, instructions may include a constant field in place of one register number operand field. The result of this decoding is signals for control of the target functional unit to perform the data processing operation specified by the corresponding instruction on the specified data.</p><p id="p-0057" num="0056">Central processing unit core <b>110</b> includes control registers <b>114</b>. Control registers <b>114</b> store information for control of the functional units in scalar datapath side A <b>115</b> and vector datapath side B <b>116</b> in a manner not relevant to this invention. This information could be mode information or the like.</p><p id="p-0058" num="0057">The decoded instructions from instruction decode <b>113</b> and information stored in control registers <b>114</b> are supplied to scalar datapath side A <b>115</b> and vector datapath side B <b>116</b>. As a result functional units within scalar datapath side A <b>115</b> and vector datapath side B <b>116</b> perform instruction specified data processing operations upon instruction specified data and store the results in an instruction specified data register or registers. Each of scalar datapath side A <b>115</b> and vector datapath side B <b>116</b> includes plural functional units that preferably operate in parallel. These will be further detailed below in conjunction with <figref idref="DRAWINGS">FIG. <b>2</b></figref>. There is a datapath <b>117</b> between scalar datapath side A <b>115</b> and vector datapath side B <b>116</b> permitting data exchange.</p><p id="p-0059" num="0058">Central processing unit core <b>110</b> includes further non-instruction based modules. Emulation unit <b>118</b> permits determination of the machine state of central processing unit core <b>110</b> in response to instructions. This capability will typically be employed for algorithmic development. Interrupts/exceptions unit <b>119</b> enable central processing unit core <b>110</b> to be responsive to external, asynchronous events (interrupts) and to respond to attempts to perform improper operations (exceptions).</p><p id="p-0060" num="0059">Central processing unit core <b>110</b> includes streaming engine <b>125</b>. Streaming engine <b>125</b> supplies two data streams from predetermined addresses typically cached in level two combined cache <b>130</b> to register files of vector datapath side B. This provides controlled data movement from memory (as cached in level two combined cache <b>130</b>) directly to functional unit operand inputs. This is further detailed below.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates exemplary data widths of busses between various parts. Level one instruction cache <b>121</b> supplies instructions to instruction fetch unit <b>111</b> via bus <b>141</b>. Bus <b>141</b> is preferably a 512-bit bus. Bus <b>141</b> is unidirectional from level one instruction cache <b>121</b> to central processing unit core <b>110</b>. Level two combined cache <b>130</b> supplies instructions to level one instruction cache <b>121</b> via bus <b>142</b>. Bus <b>142</b> is preferably a 512-bit bus. Bus <b>142</b> is unidirectional from level two combined cache <b>130</b> to level one instruction cache <b>121</b>.</p><p id="p-0062" num="0061">Level one data cache <b>123</b> exchanges data with register files in scalar datapath side A <b>115</b> via bus <b>143</b>. Bus <b>143</b> is preferably a 64-bit bus. Level one data cache <b>123</b> exchanges data with register files in vector datapath side B <b>116</b> via bus <b>144</b>. Bus <b>144</b> is preferably a 512-bit bus. Busses <b>143</b> and <b>144</b> are illustrated as bidirectional supporting both central processing unit core <b>110</b> data reads and data writes. Level one data cache <b>123</b> exchanges data with level two combined cache <b>130</b> via bus <b>145</b>. Bus <b>145</b> is preferably a 512-bit bus. Bus <b>145</b> is illustrated as bidirectional supporting cache service for both central processing unit core <b>110</b> data reads and data writes.</p><p id="p-0063" num="0062">Level two combined cache <b>130</b> supplies data of a first data stream to streaming engine <b>125</b> via bus <b>146</b>. Bus <b>146</b> is preferably a 512-bit bus. Streaming engine <b>125</b> supplies data of this first data stream to functional units of vector datapath side B <b>116</b> via bus <b>147</b>. Bus <b>147</b> is preferably a 512-bit bus. Level two combined cache <b>130</b> supplies data of a second data stream to streaming engine <b>125</b> via bus <b>148</b>. Bus <b>148</b> is preferably a 512-bit bus. Streaming engine <b>125</b> supplies data of this second data stream to functional units of vector datapath side B <b>116</b> via bus <b>149</b>. Bus <b>149</b> is preferably a 512-bit bus. Busses <b>146</b>, <b>147</b>, <b>148</b> and <b>149</b> are illustrated as unidirectional from level two combined cache <b>130</b> to streaming engine <b>125</b> and to vector datapath side B <b>116</b> in accordance with the preferred embodiment of this invention.</p><p id="p-0064" num="0063">In the preferred embodiment of this invention, both level one data cache <b>123</b> and level two combined cache <b>130</b> may be configured as selected amounts of cache or directly addressable memory in accordance with U.S. Pat. No. 6,606,686 entitled UNIFIED MEMORY SYSTEM ARCHITECTURE INCLUDING CACHE AND DIRECTLY ADDRESSABLE STATIC RANDOM ACCESS MEMORY.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates further details of functional units and register files within scalar datapath side A <b>115</b> and vector datapath side B <b>116</b>. Scalar datapath side A <b>115</b> includes global scalar register file <b>211</b>, L1/S1 local register file <b>212</b>, M1/N1 local register file <b>213</b> and D1/D2 local register file <b>214</b>. Scalar datapath side A <b>115</b> includes L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>. Vector datapath side B <b>116</b> includes global vector register file <b>231</b>, L2/S2 local register file <b>232</b>, M2/N2/C local register file <b>233</b> and predicate register file <b>234</b>. Vector datapath side B <b>116</b> includes L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>. There are limitations upon which functional units may read from or write to which register files. These will be detailed below.</p><p id="p-0066" num="0065">Scalar datapath side A <b>115</b> includes L1 unit <b>221</b>. L1 unit <b>221</b> generally accepts two 64-bit operands and produces one 64-bit result. The two operands are each recalled from an instruction specified register in either global scalar register file <b>211</b> or L1/S1 local register file <b>212</b>. L1 unit <b>221</b> preferably performs the following instruction selected operations: 64-bit add/subtract operations; 32-bit min/max operations; 8-bit Single Instruction Multiple Data (SIMD) instructions such as sum of absolute value, minimum and maximum determinations; circular min/max operations; and various move operations between register files. The result may be written into an instruction specified register of global scalar register file <b>211</b>, L1/S1 local register file <b>212</b>, M1/N1 local register file <b>213</b> or D1/D2 local register file <b>214</b>.</p><p id="p-0067" num="0066">Scalar datapath side A <b>115</b> includes S1 unit <b>222</b>. S1 unit <b>222</b> generally accepts two 64-bit operands and produces one 64-bit result. The two operands are each recalled from an instruction specified register in either global scalar register file <b>211</b> or L1/S1 local register file <b>212</b>. S1 unit <b>222</b> preferably performs the same type operations as L1 unit <b>221</b>. There optionally may be slight variations between the data processing operations supported by L1 unit <b>221</b> and S1 unit <b>222</b>. The result may be written into an instruction specified register of global scalar register file <b>211</b>, L1/S1 local register file <b>212</b>, M1/N1 local register file <b>213</b> or D1/D2 local register file <b>214</b>.</p><p id="p-0068" num="0067">Scalar datapath side A <b>115</b> includes M1 unit <b>223</b>. M1 unit <b>223</b> generally accepts two 64-bit operands and produces one 64-bit result. The two operands are each recalled from an instruction specified register in either global scalar register file <b>211</b> or M1/N1 local register file <b>213</b>. M1 unit <b>223</b> preferably performs the following instruction selected operations: 8-bit multiply operations; complex dot product operations; 32-bit bit count operations; complex conjugate multiply operations; and bit-wise Logical Operations, moves, adds and subtracts. The result may be written into an instruction specified register of global scalar register file <b>211</b>, L1/S1 local register file <b>212</b>, M1/N1 local register file <b>213</b> or D1/D2 local register file <b>214</b>.</p><p id="p-0069" num="0068">Scalar datapath side A <b>115</b> includes N1 unit <b>224</b>. N1 unit <b>224</b> generally accepts two 64-bit operands and produces one 64-bit result. The two operands are each recalled from an instruction specified register in either global scalar register file <b>211</b> or M1/N1 local register file <b>213</b>. N1 unit <b>224</b> preferably performs the same type operations as M1 unit <b>223</b>. There may be certain double operations (called dual issued instructions) that employ both the M1 unit <b>223</b> and the N1 unit <b>224</b> together. The result may be written into an instruction specified register of global scalar register file <b>211</b>, L1/S1 local register file <b>212</b>, M1/N1 local register file <b>213</b> or D1/D2 local register file <b>214</b>.</p><p id="p-0070" num="0069">Scalar datapath side A <b>115</b> includes D1 unit <b>225</b> and D2 unit <b>226</b>. D1 unit <b>225</b> and D2 unit <b>226</b> generally each accept two 64-bit operands and each produce one 64-bit result. D1 unit <b>225</b> and D2 unit <b>226</b> generally perform address calculations and corresponding load and store operations. D1 unit <b>225</b> is used for scalar loads and stores of 64 bits. D2 unit <b>226</b> is used for vector loads and stores of 512 bits. D1 unit <b>225</b> and D2 unit <b>226</b> preferably also perform: swapping, pack and unpack on the load and store data; 64-bit SIMD arithmetic operations; and 64-bit bit-wise logical operations. D1/D2 local register file <b>214</b> will generally store base and offset addresses used in address calculations for the corresponding loads and stores. The two operands are each recalled from an instruction specified register in either global scalar register file <b>211</b> or D1/D2 local register file <b>214</b>. The calculated result may be written into an instruction specified register of global scalar register file <b>211</b>, L1/S1 local register file <b>212</b>, M1/N1 local register file <b>213</b> or D1/D2 local register file <b>214</b>.</p><p id="p-0071" num="0070">Vector datapath side B <b>116</b> includes L2 unit <b>241</b>. L2 unit <b>241</b> generally accepts two 512-bit operands and produces one 512-bit result. The two operands are each recalled from an instruction specified register in either global vector register file <b>231</b>, L2/S2 local register file <b>232</b> or predicate register file <b>234</b>. L2 unit <b>241</b> preferably performs instructions similar to L1 unit <b>221</b> except on wider 512-bit data. The result may be written into an instruction specified register of global vector register file <b>231</b>, L2/S2 local register file <b>232</b>, M2/N2/C local register file <b>233</b> or predicate register file <b>234</b>.</p><p id="p-0072" num="0071">Vector datapath side B <b>116</b> includes S2 unit <b>242</b>. S2 unit <b>242</b> generally accepts two 512-bit operands and produces one 512-bit result. The two operands are each recalled from an instruction specified register in either global vector register file <b>231</b>, L2/S2 local register file <b>232</b> or predicate register file <b>234</b>. S2 unit <b>242</b> preferably performs instructions similar to S1 unit <b>222</b> except on wider 512-bit data. The result may be written into an instruction specified register of global vector register file <b>231</b>, L2/S2 local register file <b>232</b>, M2/N2/C local register file <b>233</b> or predicate register file <b>234</b>. There may be certain double operations (called dual issued instructions) that employ both L2 unit <b>241</b> and the S2 unit <b>242</b> together. The result may be written into an instruction specified register of global vector register file <b>231</b>, L2/S2 local register file <b>232</b> or M2/N2/C local register file <b>233</b>.</p><p id="p-0073" num="0072">Vector datapath side B <b>116</b> includes M2 unit <b>243</b>. M2 unit <b>243</b> generally accepts two 512-bit operands and produces one 512-bit result. The two operands are each recalled from an instruction specified register in either global vector register file <b>231</b> or M2/N2/C local register file <b>233</b>. M2 unit <b>243</b> preferably performs instructions similar to M1 unit <b>223</b> except on wider 512-bit data. The result may be written into an instruction specified register of global vector register file <b>231</b>, L2/S2 local register file <b>232</b> or M2/N2/C local register file <b>233</b>.</p><p id="p-0074" num="0073">Vector datapath side B <b>116</b> includes N2 unit <b>244</b>. N2 unit <b>244</b> generally accepts two 512-bit operands and produces one 512-bit result. The two operands are each recalled from an instruction specified register in either global vector register file <b>231</b> or M2/N2/C local register file <b>233</b>. N2 unit <b>244</b> preferably performs the same type operations as M2 unit <b>243</b>. There may be certain double operations (called dual issued instructions) that employ both M2 unit <b>243</b> and the N2 unit <b>244</b> together. The result may be written into an instruction specified register of global vector register file <b>231</b>, L2/S2 local register file <b>232</b> or M2/N2/C local register file <b>233</b>.</p><p id="p-0075" num="0074">Vector datapath side B <b>116</b> includes C unit <b>245</b>. C unit <b>245</b> generally accepts two 512-bit operands and produces one 512-bit result. The two operands are each recalled from an instruction specified register in either global vector register file <b>231</b> or M2/N2/C local register file <b>233</b>. C unit <b>245</b> preferably performs: &#x201c;Rake&#x201d; and &#x201c;Search&#x201d; instructions; up to 512 2-bit PN*8-bit multiplies I/Q complex multiplies per clock cycle; 8-bit and 16-bit Sum-of-Absolute-Difference (SAD) calculations, up to 512 SADs per clock cycle; horizontal add and horizontal min/max instructions; and vector permutes instructions. C unit <b>245</b> includes also contains 4 vector control registers (CUCR0 to CUCR3) used to control certain operations of C unit <b>245</b> instructions. Control registers CUCR0 to CUCR3 are used as operands in certain C unit <b>245</b> operations. Control registers CUCR0 to CUCR3 are preferably used: in control of a general permutation instruction (VPERM); and as masks for SIMD multiple DOT product operations (DOTPM) and SIMD multiple Sum-of-Absolute-Difference (SAD) operations. Control register CUCR0 is preferably used to store the polynomials for Galois Field Multiply operations (GFMPY). Control register CUCR1 is preferably used to store the Galois field polynomial generator function.</p><p id="p-0076" num="0075">Vector datapath side B <b>116</b> includes P unit <b>246</b>. P unit <b>246</b> performs basic logic operations on registers of local predicate register file <b>234</b>. P unit <b>246</b> has direct access to read from and write to predication register file <b>234</b>. These operations include AND, ANDN, OR, XOR, NOR, BITR, NEG, SET, BITCNT, RMBD, BIT Decimate and Expand. A commonly expected use of P unit <b>246</b> includes manipulation of the SIMD vector comparison results for use in control of a further SIMD vector operation.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates global scalar register file <b>211</b>. There are 16 independent 64-bit wide scalar registers designated A0 to A15. Each register of global scalar register file <b>211</b> can be read from or written to as 64-bits of scalar data. All scalar datapath side A <b>115</b> functional units (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) can read or write to global scalar register file <b>211</b>. Global scalar register file <b>211</b> may be read as 32-bits or as 64-bits and may only be written to as 64-bits. The instruction executing determines the read data size. Vector datapath side B <b>116</b> functional units (L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>) can read from global scalar register file <b>211</b> via crosspath <b>117</b> under restrictions that will be detailed below.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates D1/D2 local register file <b>214</b>. There are 16 independent 64-bit wide scalar registers designated D0 to D16. Each register of D1/D2 local register file <b>214</b> can be read from or written to as 64-bits of scalar data. All scalar datapath side A <b>115</b> functional units (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) can write to global scalar register file <b>211</b>. Only D1 unit <b>225</b> and D2 unit <b>226</b> can read from D1/D2 local scalar register file <b>214</b>. It is expected that data stored in D1/D2 local scalar register file <b>214</b> will include base addresses and offset addresses used in address calculation.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates L1/S1 local register file <b>212</b>. The embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>5</b></figref> has 8 independent 64-bit wide scalar registers designated AL0 to AL7. The preferred instruction coding (see <figref idref="DRAWINGS">FIG. <b>13</b></figref>) permits L1/S1 local register file <b>212</b> to include up to 16 registers. The embodiment of <figref idref="DRAWINGS">FIG. <b>5</b></figref> implements only 8 registers to reduce circuit size and complexity. Each register of L1/S1 local register file <b>212</b> can be read from or written to as 64-bits of scalar data. All scalar datapath side A <b>115</b> functional units (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) can write to L1/S1 local scalar register file <b>212</b>. Only L1 unit <b>221</b> and S1 unit <b>222</b> can read from L1/S1 local scalar register file <b>212</b>.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates M1/N1 local register file <b>213</b>. The embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref> has 8 independent 64-bit wide scalar registers designated AM0 to AM7. The preferred instruction coding (see <figref idref="DRAWINGS">FIG. <b>13</b></figref>) permits M1/N1 local register file <b>213</b> to include up to 16 registers. The embodiment of <figref idref="DRAWINGS">FIG. <b>6</b></figref> implements only 8 registers to reduce circuit size and complexity. Each register of M1/N1 local register file <b>213</b> can be read from or written to as 64-bits of scalar data. All scalar datapath side A <b>115</b> functional units (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) can write to M1/N1 local scalar register file <b>213</b>. Only M1 unit <b>223</b> and N1 unit <b>224</b> can read from M1/N1 local scalar register file <b>213</b>.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates global vector register file <b>231</b>. There are 16 independent 512-bit wide scalar registers. Each register of global vector register file <b>231</b> can be read from or written to as 64-bits of scalar data designated BC to B15. Each register of global vector register file <b>231</b> can be read from or written to as 512-bits of vector data designated VB0 to VB15. The instruction type determines the data size. All vector datapath side B <b>116</b> functional units (L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>) can read or write to global vector register file <b>231</b>. Scalar datapath side A <b>115</b> functional units (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) can read from global vector register file <b>231</b> via crosspath <b>117</b> under restrictions that will be detailed below.</p><p id="p-0082" num="0081"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates P local register file <b>234</b>. There are 8 independent 64-bit wide registers designated P0 to P15. Each register of P local register file <b>234</b> can be read from or written to as 64-bits of scalar data. Vector datapath side B <b>116</b> functional units L2 unit <b>241</b>, S2 unit <b>242</b>, C unit <b>244</b> and P unit <b>246</b> can write to P local register file <b>234</b>. Only L2 unit <b>241</b>, S2 unit <b>242</b> and P unit <b>246</b> can read from P local scalar register file <b>234</b>. A commonly expected use of P local register file <b>234</b> includes: writing one bit SIMD vector comparison results from L2 unit <b>241</b>, S2 unit <b>242</b> or C unit <b>244</b>; manipulation of the SIMD vector comparison results by P unit <b>246</b>; and use of the manipulated results in control of a further SIMD vector operation.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates L2/S2 local register file <b>232</b>. The embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref> has 8 independent 512-bit wide scalar registers. The preferred instruction coding (see <figref idref="DRAWINGS">FIG. <b>13</b></figref>) permits L2/S2 local register file <b>232</b> to include up to 16 registers. The embodiment of <figref idref="DRAWINGS">FIG. <b>9</b></figref> implements only 8 registers to reduce circuit size and complexity. Each register of L2/S2 local vector register file <b>232</b> can be read from or written to as 64-bits of scalar data designated BL0 to BL7. Each register of L2/S2 local vector register file <b>232</b> can be read from or written to as 512-bits of vector data designated VBL0 to VBL7. The instruction type determines the data size. All vector datapath side B <b>116</b> functional units (L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>) can write to L2/S2 local vector register file <b>232</b>. Only L2 unit <b>241</b> and S2 unit <b>242</b> can read from L2/S2 local vector register file <b>232</b>.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates M2/N2/C local register file <b>233</b>. The embodiment illustrated in <figref idref="DRAWINGS">FIG. <b>10</b></figref> has 8 independent 512-bit wide scalar registers. The preferred instruction coding (see <figref idref="DRAWINGS">FIG. <b>13</b></figref>) permits M2/N2/C local register file <b>233</b> to include up to 16 registers. The embodiment of <figref idref="DRAWINGS">FIG. <b>10</b></figref> implements only 8 registers to reduce circuit size and complexity. Each register of M2/N2/C local vector register file <b>233</b> can be read from or written to as 64-bits of scalar data designated BM0 to BM7. Each register of M2/N2/C local vector register file <b>233</b> can be read from or written to as 512-bits of vector data designated VBM0 to VBM7. All vector datapath side B <b>116</b> functional units (L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>) can write to M2/N2/C local vector register file <b>233</b>. Only M2 unit <b>243</b>, N2 unit <b>244</b> and C unit <b>245</b> can read from M2/N2/C local vector register file <b>233</b>.</p><p id="p-0085" num="0084">The provision of global register files accessible by all functional units of a side and local register files accessible by only some of the functional units of a side is a design choice. This invention could be practiced employing only one type of register file corresponding to the disclosed global register files.</p><p id="p-0086" num="0085">Crosspath <b>117</b> permits limited exchange of data between scalar datapath side A <b>115</b> and vector datapath side B <b>116</b>. During each operational cycle one 64-bit data word can be recalled from global scalar register file A <b>211</b> for use as an operand by one or more functional units of vector datapath side B <b>116</b> and one 64-bit data word can be recalled from global vector register file <b>231</b> for use as an operand by one or more functional units of scalar datapath side A <b>115</b>. Any scalar datapath side A <b>115</b> functional unit (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) may read a 64-bit operand from global vector register file <b>231</b>. This 64-bit operand is the least significant bits of the 512-bit data in the accessed register of global vector register file <b>231</b>. Plural scalar datapath side A <b>115</b> functional units may employ the same 64-bit crosspath data as an operand during the same operational cycle. However, only one 64-bit operand is transferred from vector datapath side B <b>116</b> to scalar datapath side A <b>115</b> in any single operational cycle. Any vector datapath side B <b>116</b> functional unit (L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>) may read a 64-bit operand from global scalar register file <b>211</b>. If the corresponding instruction is a scalar instruction, the crosspath operand data is treated as any other 64-bit operand. If the corresponding instruction is a vector instruction, the upper 448 bits of the operand are zero filled. Plural vector datapath side B <b>116</b> functional units may employ the same 64-bit crosspath data as an operand during the same operational cycle. Only one 64-bit operand is transferred from scalar datapath side A <b>115</b> to vector datapath side B <b>116</b> in any single operational cycle.</p><p id="p-0087" num="0086">Streaming engine <b>125</b> transfers data in certain restricted circumstances. Streaming engine <b>125</b> controls two data streams. A stream consists of a sequence of elements of a particular type. Programs that operate on streams read the data sequentially, operating on each element in turn. Every stream has the following basic properties. The stream data have a well-defined beginning and ending in time. The stream data have fixed element size and type throughout the stream. The stream data have fixed sequence of elements. Thus programs cannot seek randomly within the stream. The stream data is read-only while active. Programs cannot write to a stream while simultaneously reading from it. Once a stream is opened streaming engine <b>125</b>: calculates the address; fetches the defined data type from level two unified cache (which may require cache service from a higher level memory); performs data type manipulation such as zero extension, sign extension, data element sorting/swapping such as matrix transposition; and delivers the data directly to the programmed data register file within central processing unit core <b>110</b>. Streaming engine <b>125</b> is thus useful for real-time digital filtering operations on well-behaved data. Streaming engine <b>125</b> frees these memory fetch tasks from the corresponding central processing unit core <b>110</b> enabling other processing functions.</p><p id="p-0088" num="0087">Streaming engine <b>125</b> provides the following benefits. Streaming engine <b>125</b> permits multi-dimensional memory accesses. Streaming engine <b>125</b> increases the available bandwidth to the functional units. Streaming engine <b>125</b> minimizes the number of cache miss stalls since the stream buffer bypasses level one data cache <b>123</b>. Streaming engine <b>125</b> reduces the number of scalar operations required to maintain a loop. Streaming engine <b>125</b> manages address pointers. Streaming engine <b>125</b> handles address generation automatically freeing up the address generation instruction slots and D1 unit <b>225</b> and D2 unit <b>226</b> for other computations.</p><p id="p-0089" num="0088">Central processing unit core <b>110</b> operates on an instruction pipeline. Instructions are fetched in instruction packets of fixed length further described below. All instructions require the same number of pipeline phases for fetch and decode, but require a varying number of execute phases.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates the following pipeline phases: program fetch phase <b>1110</b>, dispatch and decode phases <b>1120</b> and execution phases <b>1130</b>. Program fetch phase <b>1110</b> includes three stages for all instructions. Dispatch and decode phases <b>1120</b> include three stages for all instructions. Execution phase <b>1130</b> includes one to four stages dependent on the instruction.</p><p id="p-0091" num="0090">Fetch phase <b>1110</b> includes program address generation stage <b>1111</b> (PG), program access stage <b>1112</b> (PA) and program receive stage <b>1113</b> (PR). During program address generation stage <b>1111</b> (PG), the program address is generated in central processing unit core <b>110</b> and the read request is sent to the memory controller for the level one instruction cache L1I. During the program access stage <b>1112</b> (PA) the level one instruction cache L1I processes the request, accesses the data in its memory and sends a fetch packet to the central processing unit core <b>110</b> boundary. During the program receive stage <b>1113</b> (PR) central processing unit core <b>110</b> registers the fetch packet.</p><p id="p-0092" num="0091">Instructions are always fetched sixteen 32-bit wide slots, constituting a fetch packet, at a time. <figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates 16 instructions <b>1201</b> to <b>1216</b> of a single fetch packet. Fetch packets are aligned on 512-bit (16-word) boundaries. The preferred embodiment employs a fixed 32-bit instruction length. Fixed length instructions are advantageous for several reasons. Fixed length instructions enable easy decoder alignment. A properly aligned instruction fetch can load plural instructions into parallel instruction decoders. Such a properly aligned instruction fetch can be achieved by predetermined instruction alignment when stored in memory (fetch packets aligned on 512-bit boundaries) coupled with a fixed instruction packet fetch. An aligned instruction fetch permits operation of parallel decoders on instruction-sized fetched bits. Variable length instructions require an initial step of locating each instruction boundary before they can be decoded. A fixed length instruction set generally permits more regular layout of instruction fields. This simplifies the construction of each decoder which is an advantage for a wide issue VLIW central processor.</p><p id="p-0093" num="0092">The execution of the individual instructions is partially controlled by a p bit in each instruction. This p bit is preferably bit <b>0</b> of the 32-bit wide slot. The p bit determines whether an instruction executes in parallel with a next instruction. Instructions are scanned from lower to higher address. If the p bit of an instruction is 1, then the next following instruction (higher memory address) is executed in parallel with (in the same cycle as) that instruction. If the p bit of an instruction is 0, then the next following instruction is executed in the cycle after the instruction.</p><p id="p-0094" num="0093">Central processing unit core <b>110</b> and level one instruction cache L1I <b>121</b> pipelines are de-coupled from each other. Fetch packet returns from level one instruction cache L1I can take different number of clock cycles, depending on external circumstances such as whether there is a hit in level one instruction cache <b>121</b> or a hit in level two combined cache <b>130</b>. Therefore program access stage <b>1112</b> (PA) can take several clock cycles instead of 1 clock cycle as in the other stages.</p><p id="p-0095" num="0094">The instructions executing in parallel constitute an execute packet. In the preferred embodiment an execute packet can contain up to sixteen instructions. No two instructions in an execute packet may use the same functional unit. A slot is one of five types: 1) a self-contained instruction executed on one of the functional units of central processing unit core <b>110</b> (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b>, D2 unit <b>226</b>, L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>); 2) a unitless instruction such as a NOP (no operation) instruction or multiple NOP instruction; 3) a branch instruction; 4) a constant field extension; and 5) a conditional code extension. Some of these slot types will be further explained below.</p><p id="p-0096" num="0095">Dispatch and decode phases <b>1110</b> include instruction dispatch to appropriate execution unit stage <b>1121</b> (DS), instruction pre-decode stage <b>1122</b> (DC1); and instruction decode, operand reads stage <b>1123</b> (DC2). During instruction dispatch to appropriate execution unit stage <b>1121</b> (DS) the fetch packets are split into execute packets and assigned to the appropriate functional units. During the instruction pre-decode stage <b>1122</b> (DC1), the source registers, destination registers and associated paths are decoded for the execution of the instructions in the functional units. During the instruction decode, operand reads stage <b>1123</b> (DC2), more detail unit decodes are done, as well as reading operands from the register files.</p><p id="p-0097" num="0096">Execution phases <b>1130</b> includes execution stages <b>1131</b> to <b>1135</b> (E1 to E5). Different types of instructions require different numbers of these stages to complete their execution. These stages of the pipeline play an important role in understanding the device state at central processing unit core <b>110</b> cycle boundaries.</p><p id="p-0098" num="0097">During execute 1 stage <b>1131</b> (E1) the conditions for the instructions are evaluated and operands are operated on. As illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, execute 1 stage <b>1131</b> may receive operands from a stream buffer <b>1141</b> and one of the register files shown schematically as <b>1142</b>. For load and store instructions, address generation is performed and address modifications are written to a register file. For branch instructions, branch fetch packet in PG phase <b>1111</b> is affected. As illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, load and store instructions access memory here shown schematically as memory <b>1151</b>. For single-cycle instructions, results are written to a destination register file. This assumes that any conditions for the instructions are evaluated as true. If a condition is evaluated as false, the instruction does not write any results or have any pipeline operation after execute 1 stage <b>1131</b>.</p><p id="p-0099" num="0098">During execute 2 stage <b>1133</b> (E2) load instructions send the address to memory. Store instructions send the address and data to memory. Single-cycle instructions that saturate results set the SAT bit in the control status register (CSR) if saturation occurs. For 2-cycle instructions, results are written to a destination register file.</p><p id="p-0100" num="0099">During execute 3 stage <b>1133</b> (E3) data memory accesses are performed. Any multiply instructions that saturate results set the SAT bit in the control status register (CSR) if saturation occurs. For 3-cycle instructions, results are written to a destination register file.</p><p id="p-0101" num="0100">During execute 4 stage <b>1134</b> (E4) load instructions bring data to the central processing unit core <b>110</b> boundary. For 4-cycle instructions, results are written to a destination register file.</p><p id="p-0102" num="0101">During execute 5 stage <b>1135</b> (E5) load instructions write data into a register. This is illustrated schematically in <figref idref="DRAWINGS">FIG. <b>11</b></figref> with input from memory <b>1151</b> to execute 5 stage <b>1135</b>.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an example of the instruction coding <b>1300</b> of functional unit instructions used by this invention. Those skilled in the art would realize that other instruction codings are feasible and within the scope of this invention. Each instruction consists of 33 bits and controls the operation of one of the individually controllable functional units (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b>, D2 unit <b>226</b>, L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, C unit <b>245</b> and P unit <b>246</b>). The bit fields are defined as follows.</p><p id="p-0104" num="0103">The creg field <b>1301</b> (bits <b>29</b> to <b>31</b>) and the z bit <b>1302</b> (bit <b>28</b>) are optional fields used in conditional instructions. These bits are used for conditional instructions to identify the predicate register and the condition. The z bit <b>1302</b> (bit <b>28</b>) indicates whether the predication is based upon zero or not zero in the predicate register. If z=1, the test is for equality with zero. If z=0, the test is for nonzero. The case of creg=0 and z=0 is treated as always true to allow unconditional instruction execution. The creg field <b>1301</b> and the z field <b>1302</b> are encoded in the instruction as shown in Table 1.</p><p id="p-0105" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="84pt" align="center"/><colspec colname="3" colwidth="49pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="3" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry>Conditional</entry><entry>creg</entry><entry>z</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="6"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="14pt" align="center"/><colspec colname="3" colwidth="56pt" align="center"/><colspec colname="4" colwidth="14pt" align="center"/><colspec colname="5" colwidth="49pt" align="center"/><tbody valign="top"><row><entry/><entry>Register</entry><entry>31</entry><entry>30</entry><entry>29</entry><entry>28</entry></row><row><entry/><entry namest="offset" nameend="5" align="center" rowsep="1"/></row><row><entry/><entry>Unconditional</entry><entry>0</entry><entry>0</entry><entry>0</entry><entry>0</entry></row><row><entry/><entry>Reserved</entry><entry>0</entry><entry>0</entry><entry>0</entry><entry>1</entry></row><row><entry/><entry>A0</entry><entry>0</entry><entry>0</entry><entry>1</entry><entry>z</entry></row><row><entry/><entry>A1</entry><entry>0</entry><entry>1</entry><entry>0</entry><entry>z</entry></row><row><entry/><entry>A2</entry><entry>0</entry><entry>1</entry><entry>1</entry><entry>z</entry></row><row><entry/><entry>A3</entry><entry>1</entry><entry>0</entry><entry>0</entry><entry>z</entry></row><row><entry/><entry>A4</entry><entry>1</entry><entry>0</entry><entry>1</entry><entry>z</entry></row><row><entry/><entry>A5</entry><entry>1</entry><entry>1</entry><entry>0</entry><entry>z</entry></row><row><entry/><entry>Reserved</entry><entry>1</entry><entry>1</entry><entry>x</entry><entry>x</entry></row><row><entry/><entry namest="offset" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0106" num="0104">Execution of a conditional instruction is conditional upon the value stored in the specified data register. This data register is in the global scalar register file <b>211</b> for all functional units. Note that &#x201c;z&#x201d; in the z bit column refers to the zero/not zero comparison selection noted above and &#x201c;x&#x201d; is a don't care state. This coding can only specify a subset of the 16 global registers as predicate registers. This selection was made to preserve bits in the instruction coding. Note that unconditional instructions do not have these optional bits. For unconditional instructions these bits in fields <b>1301</b> and <b>1302</b> (<b>28</b> to <b>31</b>) are preferably used as additional opcode bits.</p><p id="p-0107" num="0105">The dst field <b>1303</b> (bits <b>23</b> to <b>27</b>) specifies a register in a corresponding register file as the destination of the instruction results.</p><p id="p-0108" num="0106">The src2/cst field <b>1304</b> (bits <b>18</b> to <b>22</b>) has several meanings depending on the instruction opcode field (bits <b>3</b> to <b>12</b> for all instructions and additionally bits <b>28</b> to <b>31</b> for unconditional instructions). The first meaning specifies a register of a corresponding register file as the second operand. The second meaning is an immediate constant. Depending on the instruction type, this is treated as an unsigned integer and zero extended to a specified data length or is treated as a signed integer and sign extended to the specified data length.</p><p id="p-0109" num="0107">The src1 field <b>1305</b> (bits <b>13</b> to <b>17</b>) specifies a register in a corresponding register file as the first source operand.</p><p id="p-0110" num="0108">The opcode field <b>1306</b> (bits <b>3</b> to <b>12</b>) for all instructions (and additionally bits <b>28</b> to <b>31</b> for unconditional instructions) specifies the type of instruction and designates appropriate instruction options. This includes unambiguous designation of the functional unit used and operation performed. A detailed explanation of the opcode is beyond the scope of this invention except for the instruction options detailed below.</p><p id="p-0111" num="0109">The e bit <b>1307</b> (bit <b>2</b>) is only used for immediate constant instructions where the constant may be extended. If e=1, then the immediate constant is extended in a manner detailed below. If e=0, then the immediate constant is not extended. In that case the immediate constant is specified by the src2/cst field <b>1304</b> (bits <b>18</b> to <b>22</b>). Note that this e bit <b>1307</b> is used for only some instructions. Accordingly, with proper coding this e bit <b>1307</b> may be omitted from instructions which do not need it and this bit used as an additional opcode bit.</p><p id="p-0112" num="0110">The s bit <b>1308</b> (bit <b>1</b>) designates scalar datapath side A <b>115</b> or vector datapath side B <b>116</b>. If s=0, then scalar datapath side A <b>115</b> is selected. This limits the functional unit to L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b> and the corresponding register files illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Similarly, s=1 selects vector datapath side B <b>116</b> limiting the functional unit to L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b>, P unit <b>246</b> and the corresponding register files illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0113" num="0111">The p bit <b>1309</b> (bit <b>0</b>) marks the execute packets. The p-bit determines whether the instruction executes in parallel with the following instruction. The p-bits are scanned from lower to higher address. If p=1 for the current instruction, then the next instruction executes in parallel with the current instruction. If p=0 for the current instruction, then the next instruction executes in the cycle after the current instruction. All instructions executing in parallel constitute an execute packet. An execute packet can contain up to twelve instructions. Each instruction in an execute packet must use a different functional unit.</p><p id="p-0114" num="0112">There are two different condition code extension slots. Each execute packet can contain one each of these unique 32-bit condition code extension slots which contains the 4-bit creg/z fields for the instructions in the same execute packet. <figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates the coding for condition code extension slot 0 and <figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates the coding for condition code extension slot 1.</p><p id="p-0115" num="0113"><figref idref="DRAWINGS">FIG. <b>14</b></figref> illustrates the coding for condition code extension slot 0 having 33 bits. Field <b>1401</b> (bits <b>28</b> to <b>31</b>) specify 4 creg/z bits assigned to the L1 unit <b>221</b> instruction in the same execute packet. Field <b>1402</b> (bits <b>27</b> to <b>24</b>) specify 4 creg/z bits assigned to the L2 unit <b>241</b> instruction in the same execute packet. Field <b>1403</b> (bits <b>19</b> to <b>23</b>) specify 4 creg/z bits assigned to the S1 unit <b>222</b> instruction in the same execute packet. Field <b>1404</b> (bits <b>16</b> to <b>19</b>) specify 4 creg/z bits assigned to the S2 unit <b>242</b> instruction in the same execute packet. Field <b>1405</b> (bits <b>12</b> to <b>15</b>) specify 4 creg/z bits assigned to the D1 unit <b>225</b> instruction in the same execute packet. Field <b>1406</b> (bits <b>8</b> to <b>11</b>) specify 4 creg/z bits assigned to the D2 unit <b>226</b> instruction in the same execute packet. Field <b>1407</b> (bits <b>6</b> and <b>7</b>) is unused/reserved. Field <b>1408</b> (bits <b>0</b> to <b>5</b>) are coded a set of unique bits (CCEX0) to identify the condition code extension slot 0. Once this unique ID of condition code extension slot 0 is detected, the corresponding creg/z bits are employed to control conditional execution of any L1 unit <b>221</b>, L2 unit <b>241</b>, S1 unit <b>222</b>, S2 unit <b>242</b>, D1 unit <b>225</b> and D2 unit <b>226</b> instruction in the same execution packet. These creg/z bits are interpreted as shown in Table 1. If the corresponding instruction is conditional (includes creg/z bits) the corresponding bits in the condition code extension slot 0 override the condition code bits in the instruction. Note that no execution packet can have more than one instruction directed to a particular execution unit. No execute packet of instructions can contain more than one condition code extension slot 0. Thus the mapping of creg/z bits to functional unit instruction is unambiguous. Setting the creg/z bits equal to &#x201c;0000&#x201d; makes the instruction unconditional. Thus a properly coded condition code extension slot 0 can make some corresponding instructions conditional and some unconditional.</p><p id="p-0116" num="0114"><figref idref="DRAWINGS">FIG. <b>15</b></figref> illustrates the coding for condition code extension slot 1 having 33 bits. Field <b>1501</b> (bits <b>28</b> to <b>31</b>) specify 4 creg/z bits assigned to the M1 unit <b>223</b> instruction in the same execute packet. Field <b>1502</b> (bits <b>27</b> to <b>24</b>) specify 4 creg/z bits assigned to the M2 unit <b>243</b> instruction in the same execute packet. Field <b>1503</b> (bits <b>19</b> to <b>23</b>) specify 4 creg/z bits assigned to the C unit <b>245</b> instruction in the same execute packet. Field <b>1504</b> (bits <b>16</b> to <b>19</b>) specify 4 creg/z bits assigned to the N1 unit <b>224</b> instruction in the same execute packet. Field <b>1505</b> (bits <b>12</b> to <b>15</b>) specify 4 creg/z bits assigned to the N2 unit <b>244</b> instruction in the same execute packet. Field <b>1506</b> (bits <b>6</b> to <b>11</b>) is unused/reserved. Field <b>1507</b> (bits <b>0</b> to <b>5</b>) are coded a set of unique bits (CCEX1) to identify the condition code extension slot 1. Once this unique ID of condition code extension slot 1 is detected, the corresponding creg/z bits are employed to control conditional execution of any M1 unit <b>223</b>, M2 unit <b>243</b>, C unit <b>245</b>, N1 unit <b>224</b> and N2 unit <b>244</b> instruction in the same execution packet. These creg/z bits are interpreted as shown in Table 1. If the corresponding instruction is conditional (includes creg/z bits) the corresponding bits in the condition code extension slot 1 override the condition code bits in the instruction. Note that no execution packet can have more than one instruction directed to a particular execution unit. No execute packet of instructions can contain more than one condition code extension slot 1. Thus the mapping of creg/z bits to functional unit instruction is unambiguous. Setting the creg/z bits equal to &#x201c;0000&#x201d; makes the instruction unconditional. Thus a properly coded condition code extension slot 1 can make some instructions conditional and some unconditional.</p><p id="p-0117" num="0115">It is feasible for both condition code extension slot 0 and condition code extension slot 1 to include a p bit to define an execute packet as described above in conjunction with <figref idref="DRAWINGS">FIG. <b>13</b></figref>. In the preferred embodiment, as illustrated in <figref idref="DRAWINGS">FIGS. <b>14</b> and <b>15</b></figref>, code extension slot 0 and condition code extension slot 1 preferably have bit <b>0</b> (p bit) always encoded as 1. Thus neither condition code extension slot 0 nor condition code extension slot 1 can be in the last instruction slot of an execute packet.</p><p id="p-0118" num="0116">There are two different constant extension slots. Each execute packet can contain one each of these unique 32-bit constant extension slots which contains 27 bits to be concatenated as high order bits with the 5-bit constant field <b>1305</b> to form a 32-bit constant. As noted in the instruction coding description above only some instructions define the src2/cst field <b>1304</b> as a constant rather than a source register identifier. At least some of those instructions may employ a constant extension slot to extend this constant to 33 bits.</p><p id="p-0119" num="0117"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates the fields of constant extension slot 0. Each execute packet may include one instance of constant extension slot 0 and one instance of constant extension slot 1. <figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates that constant extension slot 0 <b>1600</b> includes two fields. Field <b>1601</b> (bits <b>5</b> to <b>31</b>) constitute the most significant 27 bits of an extended 32-bit constant including the target instruction scr2/cst field <b>1304</b> as the five least significant bits. Field <b>1602</b> (bits <b>0</b> to <b>4</b>) are coded a set of unique bits (CSTX0) to identify the constant extension slot 0. In the preferred embodiment constant extension slot 0 <b>1600</b> can only be used to extend the constant of one of an L1 unit <b>221</b> instruction, data in a D1 unit <b>225</b> instruction, an S2 unit <b>242</b> instruction, an offset in a D2 unit <b>226</b> instruction, an M2 unit <b>243</b> instruction, an N2 unit <b>244</b> instruction, a branch instruction, or a C unit <b>245</b> instruction in the same execute packet. Constant extension slot 1 is similar to constant extension slot 0 except that bits <b>0</b> to <b>4</b> are coded a set of unique bits (CSTX1) to identify the constant extension slot 1. In the preferred embodiment constant extension slot 1 can only be used to extend the constant of one of an L2 unit <b>241</b> instruction, data in a D2 unit <b>226</b> instruction, an S1 unit <b>222</b> instruction, an offset in a D1 unit <b>225</b> instruction, an M1 unit <b>223</b> instruction or an N1 unit <b>224</b> instruction in the same execute packet.</p><p id="p-0120" num="0118">Constant extension slot 0 and constant extension slot 1 are used as follows. The target instruction must be of the type permitting constant specification. As known in the art this is implemented by replacing one input operand register specification field with the least significant bits of the constant as described above with respect to scr2/cst field <b>1304</b>. Instruction decoder <b>113</b> determines this case, known as an immediate field, from the instruction opcode bits. The target instruction also includes one constant extension bit (e bit <b>1307</b>) dedicated to signaling whether the specified constant is not extended (preferably constant extension bit=0) or the constant is extended (preferably constant extension bit=1). If instruction decoder <b>113</b> detects a constant extension slot 0 or a constant extension slot 1, it further checks the other instructions within that execute packet for an instruction corresponding to the detected constant extension slot. A constant extension is made only if one corresponding instruction has a constant extension bit (e bit <b>1307</b>) equal to 1.</p><p id="p-0121" num="0119"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a partial block diagram <b>1700</b> illustrating constant extension. <figref idref="DRAWINGS">FIG. <b>17</b></figref> assumes that instruction decoder <b>113</b> detects a constant extension slot and a corresponding instruction in the same execute packet. Instruction decoder <b>113</b> supplies the 27 extension bits from the constant extension slot (bit field <b>1601</b>) and the 5 constant bits (bit field <b>1305</b>) from the corresponding instruction to concatenator <b>1701</b>. Concatenator <b>1701</b> forms a single 32-bit word from these two parts. In the preferred embodiment the 27 extension bits from the constant extension slot (bit field <b>1601</b>) are the most significant bits and the 5 constant bits (bit field <b>1305</b>) are the least significant bits. This combined 32-bit word is supplied to one input of multiplexer <b>1702</b>. The 5 constant bits from the corresponding instruction field <b>1305</b> supply a second input to multiplexer <b>1702</b>. Selection of multiplexer <b>1702</b> is controlled by the status of the constant extension bit. If the constant extension bit (e bit <b>1307</b>) is 1 (extended), multiplexer <b>1702</b> selects the concatenated 32-bit input. If the constant extension bit is 0 (not extended), multiplexer <b>1702</b> selects the 5 constant bits from the corresponding instruction field <b>1305</b>. Multiplexer <b>1702</b> supplies this output to an input of sign extension unit <b>1703</b>.</p><p id="p-0122" num="0120">Sign extension unit <b>1703</b> forms the final operand value from the input from multiplexer <b>1703</b>. Sign extension unit <b>1703</b> receives control inputs Scalar/Vector and Data Size. The Scalar/Vector input indicates whether the corresponding instruction is a scalar instruction or a vector instruction. The functional units of data path side A <b>115</b> (L1 unit <b>221</b>, S1 unit <b>222</b>, M1 unit <b>223</b>, N1 unit <b>224</b>, D1 unit <b>225</b> and D2 unit <b>226</b>) can only perform scalar instructions. Any instruction directed to one of these functional units is a scalar instruction. Data path side B functional units L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b> and C unit <b>245</b> may perform scalar instructions or vector instructions. Instruction decoder <b>113</b> determines whether the instruction is a scalar instruction or a vector instruction from the opcode bits. P unit <b>246</b> may only preform scalar instructions. The Data Size may be 8 bits (byte B), 16 bits (half-word H), 33 bits (word W) or 64 bits (double word D).</p><p id="p-0123" num="0121">Table 2 lists the operation of sign extension unit <b>1703</b> for the various options.</p><p id="p-0124" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="49pt" align="left"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="77pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="4" rowsep="1">TABLE 2</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>Instruction</entry><entry>Operand</entry><entry>Constant</entry><entry/></row><row><entry/><entry>Type</entry><entry>Size</entry><entry>Length</entry><entry>Action</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Scalar</entry><entry>B/H/W/D</entry><entry>&#x2002;5 bits</entry><entry>Sign extend to 64 bits</entry></row><row><entry/><entry>Scalar</entry><entry>B/H/W/D</entry><entry>33 bits</entry><entry>Sign extend to 64 bits</entry></row><row><entry/><entry>Vector</entry><entry>B/H/W/D</entry><entry>&#x2002;5 bits</entry><entry>Sign extend to operand</entry></row><row><entry/><entry/><entry/><entry/><entry>size and replicate</entry></row><row><entry/><entry/><entry/><entry/><entry>across whole vector</entry></row><row><entry/><entry>Vector</entry><entry>B/H/W</entry><entry>33 bits</entry><entry>Replicate 32-bit</entry></row><row><entry/><entry/><entry/><entry/><entry>constant across each </entry></row><row><entry/><entry/><entry/><entry/><entry>32-bit (W) lane</entry></row><row><entry/><entry>Vector</entry><entry>D</entry><entry>33 bits</entry><entry>Sign extend to 64 bits</entry></row><row><entry/><entry/><entry/><entry/><entry>and replicate across</entry></row><row><entry/><entry/><entry/><entry/><entry>each 64-bit (D) lane</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0125" num="0122">It is feasible for both constant extension slot 0 and constant extension slot 1 to include a p bit to define an execute packet as described above in conjunction with <figref idref="DRAWINGS">FIG. <b>13</b></figref>. In the preferred embodiment, as in the case of the condition code extension slots, constant extension slot 0 and constant extension slot 1 preferably have bit <b>0</b> (p bit) always encoded as 1. Thus neither constant extension slot 0 nor constant extension slot 1 can be in the last instruction slot of an execute packet.</p><p id="p-0126" num="0123">It is technically feasible for an execute packet to include a constant extension slot 0 or 1 and more than one corresponding instruction marked constant extended (e bit=1). For constant extension slot 0 this would mean more than one of an L1 unit <b>221</b> instruction, data in a D1 unit <b>225</b> instruction, an S2 unit <b>242</b> instruction, an offset in a D2 unit <b>226</b> instruction, an M2 unit <b>243</b> instruction or an N2 unit <b>244</b> instruction in an execute packet have an e bit of 1. For constant extension slot 1 this would mean more than one of an L2 unit <b>241</b> instruction, data in a D2 unit <b>226</b> instruction, an S1 unit <b>222</b> instruction, an offset in a D1 unit <b>225</b> instruction, an M1 unit <b>223</b> instruction or an N1 unit <b>224</b> instruction in an execute packet have an e bit of 1. Supplying the same constant extension to more than one instruction is not expected to be a useful function. Accordingly, in one embodiment instruction decoder <b>113</b> may determine this case an invalid operation and not supported. Alternately, this combination may be supported with extension bits of the constant extension slot applied to each corresponding functional unit instruction marked constant extended.</p><p id="p-0127" num="0124">Special vector predicate instructions use registers in predicate register file <b>234</b> to control vector operations. In the current embodiment all these SIMD vector predicate instructions operate on selected data sizes. The data sizes may include byte (8 bit) data, half word (16 bit) data, word (33 bit) data, double word (64 bit) data, quad word (128 bit) data and half vector (256 bit) data. Each bit of the predicate register controls whether a SIMD operation is performed upon the corresponding byte of data. The operations of P unit <b>245</b> permit a variety of compound vector SIMD operations based upon more than one vector comparison. For example a range determination can be made using two comparisons. A candidate vector is compared with a first vector reference having the minimum of the range packed within a first data register. A second comparison of the candidate vector is made with a second reference vector having the maximum of the range packed within a second data register. Logical combinations of the two resulting predicate registers would permit a vector conditional operation to determine whether each data part of the candidate vector is within range or out of range.</p><p id="p-0128" num="0125">L1 unit <b>221</b>, S1 unit <b>222</b>, L2 unit <b>241</b>, S2 unit <b>242</b> and C unit <b>245</b> often operate in a single instruction multiple data (SIMD) mode. In this SIMD mode the same instruction is applied to packed data from the two operands. Each operand holds plural data elements disposed in predetermined slots. SIMD operation is enabled by carry control at the data boundaries. Such carry control enables operations on varying data widths.</p><p id="p-0129" num="0126"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates the carry control. AND gate <b>1801</b> receives the carry output of bit N within the operand wide arithmetic logic unit (64 bits for scalar datapath side A <b>115</b> functional units and 512 bits for vector datapath side B <b>116</b> functional units). AND gate <b>1801</b> also receives a carry control signal which will be further explained below. The output of AND gate <b>1801</b> is supplied to the carry input of bit N+1 of the operand wide arithmetic logic unit. AND gates such as AND gate <b>1801</b> are disposed between every pair of bits at a possible data boundary. For example, for 8-bit data such an AND gate will be between bits <b>7</b> and <b>8</b>, bits <b>15</b> and <b>16</b>, bits <b>23</b> and <b>24</b>, etc. Each such AND gate receives a corresponding carry control signal. If the data size is the minimum, then each carry control signal is 0, effectively blocking carry transmission between the adjacent bits. The corresponding carry control signal is 1 if the selected data size requires both arithmetic logic unit sections. Table 3 below shows example carry control signals for the case of a 512 bit wide operand such as used by vector datapath side B <b>116</b> functional units which may be divided into sections of 8 bits, 16 bits, 33 bits, 64 bits, 128 bits or 256 bits. In Table 3 the upper 33 bits control the upper bits (bits <b>128</b> to <b>511</b>) carries and the lower 33 bits control the lower bits (bits <b>0</b> to <b>127</b>) carries. No control of the carry output of the most significant bit is needed, thus only 63 carry control signals are required.</p><p id="p-0130" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="161pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 3</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Data Size</entry><entry>Carry Control signals</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>8 bits (B)</entry><entry>&#x2212;000 0000 0000 0000 0000 0000 0000 0000</entry></row><row><entry/><entry/><entry>0000 0000 0000 0000 0000 0000 0000 0000</entry></row><row><entry/><entry>16 bits (H)</entry><entry>&#x2212;101 0101 0101 0101 0101 0101 0101 0101</entry></row><row><entry/><entry/><entry>0101 0101 0101 0101 0101 0101 0101 0101</entry></row><row><entry/><entry>33 bits (W)</entry><entry>&#x2212;111 0111 0111 0111 0111 0111 0111 0111</entry></row><row><entry/><entry/><entry>0111 0111 0111 0111 0111 0111 0111 0111</entry></row><row><entry/><entry>64 bits (D)</entry><entry>&#x2212;111 1111 0111 1111 0111 1111 0111 1111</entry></row><row><entry/><entry/><entry>0111 1111 0111 1111 0111 1111 0111 1111</entry></row><row><entry/><entry>128 bits</entry><entry>&#x2212;111 1111 1111 1111 0111 1111 1111 1111</entry></row><row><entry/><entry/><entry>0111 1111 1111 1111 0111 1111 1111 1111</entry></row><row><entry/><entry>256 bits</entry><entry>&#x2212;111 1111 1111 1111 1111 1111 1111 1111</entry></row><row><entry/><entry/><entry>0111 1111 1111 1111 1111 1111 1111 1111</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0131" num="0127">It is typical in the art to operate on data sizes that are integral powers of 2 (2<sup>N</sup>). However, this carry control technique is not limited to integral powers of 2. One skilled in the art would understand how to apply this technique to other data sizes and other operand widths.</p><p id="p-0132" num="0128"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates a conceptual view of the streaming engines of this invention. <figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates the process of a single stream. Streaming engine <b>1900</b> includes stream address generator <b>1901</b>. Stream address generator <b>1901</b> sequentially generates addresses of the elements of the stream and supplies these element addresses to system memory <b>1910</b>. Memory <b>1910</b> recalls data stored at the element addresses (data elements) and supplies these data elements to data first-in-first-out (FIFO) memory <b>1902</b>. Data FIFO <b>1902</b> provides buffering between memory <b>1910</b> and CPU <b>1920</b>. Data formatter <b>1903</b> receives the data elements from data FIFO memory <b>1902</b> and provides data formatting according to the stream definition. This process will be described below. Streaming engine <b>1900</b> supplies the formatted data elements from data formatter <b>1903</b> to the CPU <b>1920</b>. The program on CPU <b>1920</b> consumes the data and generates an output.</p><p id="p-0133" num="0129">Stream elements typically reside in normal memory. The memory itself imposes no particular structure upon the stream. Programs define streams and therefore impose structure, by specifying the following stream attributes: address of the first element of the stream; size and type of the elements in the stream; formatting for data in the stream; and the address sequence associated with the stream.</p><p id="p-0134" num="0130">The streaming engine defines an address sequence for elements of the stream in terms of a pointer walking through memory. A multiple-level nested loop controls the path the pointer takes. An iteration count for a loop level indicates the number of times that level repeats. A dimension gives the distance between pointer positions of that loop level.</p><p id="p-0135" num="0131">In a basic forward stream the innermost loop always consumes physically contiguous elements from memory. The implicit dimension of this innermost loop is 1 element. The pointer itself moves from element to element in consecutive, increasing order. In each level outside the inner loop, that loop moves the pointer to a new location based on the size of that loop level's dimension.</p><p id="p-0136" num="0132">This form of addressing allows programs to specify regular paths through memory in a small number of parameters. Table 4 lists the addressing parameters of a basic stream.</p><p id="p-0137" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="70pt" align="left"/><colspec colname="2" colwidth="133pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 4</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Parameter</entry><entry>Definition</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>ELEM_BYTES</entry><entry>Size of each element in bytes</entry></row><row><entry/><entry>ICNT0</entry><entry>Number of iterations for the </entry></row><row><entry/><entry/><entry>innermost loop level 0. At loop </entry></row><row><entry/><entry/><entry>level 0 all elements are physically</entry></row><row><entry/><entry/><entry>contiguous DIM0 is ELEM_BYTES</entry></row><row><entry/><entry>ICNT1</entry><entry>Number of iterations for loop level 1</entry></row><row><entry/><entry>DIM1</entry><entry>Number of bytes between </entry></row><row><entry/><entry/><entry>the starting points for</entry></row><row><entry/><entry/><entry>consecutive iterations of loop level 1</entry></row><row><entry/><entry>ICNT2</entry><entry>Number of iterations for loop level 2</entry></row><row><entry/><entry>DIM2</entry><entry>Number of bytes between </entry></row><row><entry/><entry/><entry>the starting points for</entry></row><row><entry/><entry/><entry>consecutive iterations of loop level 2</entry></row><row><entry/><entry>ICNT3</entry><entry>Number of iterations for loop level 3</entry></row><row><entry/><entry>DIM3</entry><entry>Number of bytes between </entry></row><row><entry/><entry/><entry>the starting points for</entry></row><row><entry/><entry/><entry>consecutive iterations of loop level 3</entry></row><row><entry/><entry>ICNT4</entry><entry>Number of iterations for loop level 4</entry></row><row><entry/><entry>DIM4</entry><entry>Number of bytes between </entry></row><row><entry/><entry/><entry>the starting points for</entry></row><row><entry/><entry/><entry>consecutive iterations of loop level 4</entry></row><row><entry/><entry>ICNT5</entry><entry>Number of iterations for loop level 5</entry></row><row><entry/><entry>DIM5</entry><entry>Number of bytes between </entry></row><row><entry/><entry/><entry>the starting points for</entry></row><row><entry/><entry/><entry>consecutive iterations of loop level 5</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0138" num="0133">The definition above maps consecutive elements of the stream to increasing addresses in memory. This works well for most algorithms but not all. Some algorithms are better served by reading elements in decreasing memory addresses, reverse stream addressing. For example, a discrete convolution computes vector dot-products, as per the formula:</p><p id="p-0139" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mrow>  <mrow>   <mrow>    <mo>(</mo>    <mrow>     <mi>f</mi>     <mo>,</mo>     <mi>g</mi>    </mrow>    <mo>)</mo>   </mrow>   <mo>[</mo>   <mi>t</mi>   <mo>]</mo>  </mrow>  <mo>=</mo>  <mrow>   <munderover>    <mo>&#x2211;</mo>    <mrow>     <mi>x</mi>     <mo>=</mo>     <mrow>      <mo>-</mo>      <mi>&#x221e;</mi>     </mrow>    </mrow>    <mi>&#x221e;</mi>   </munderover>   <mrow>    <mrow>     <mi>f</mi>     <mo>[</mo>     <mi>x</mi>     <mo>]</mo>    </mrow>    <mo>&#x2062;</mo>    <mrow>     <mi>g</mi>     <mo>[</mo>     <mrow>      <mi>t</mi>      <mo>-</mo>      <mi>x</mi>     </mrow>     <mo>]</mo>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0140" num="0000">In most DSP code, f[ ] and g[ ] represent arrays in memory. For each output, the algorithm reads f[ ] in the forward direction, but reads g[ ] in the reverse direction. Practical filters limit the range of indices for [x] and [t&#x2212;x] to a finite number elements. To support this pattern, the streaming engine supports reading elements in decreasing address order.</p><p id="p-0141" num="0134">Matrix multiplication presents a unique problem to the streaming engine. Each element in the matrix product is a vector dot product between a row from the first matrix and a column from the second. Programs typically store matrices all in row-major or column-major order. Row-major order stores all the elements of a single row contiguously in memory. Column-major order stores all elements of a single column contiguously in memory. Matrices typically get stored in the same order as the default array order for the language. As a result, only one of the two matrices in a matrix multiplication map on to the streaming engine's 2-dimensional stream definition. In a typical example a first index steps through columns on array first array but rows on second array. This problem is not unique to the streaming engine. Matrix multiplication's access pattern fits poorly with most general-purpose memory hierarchies. Some software libraries transposed one of the two matrices, so that both get accessed row-wise (or column-wise) during multiplication. The streaming engine supports implicit matrix transposition with transposed streams. Transposed streams avoid the cost of explicitly transforming the data in memory. Instead of accessing data in strictly consecutive-element order, the streaming engine effectively interchanges the inner two loop dimensions in its traversal order, fetching elements along the second dimension into contiguous vector lanes.</p><p id="p-0142" num="0135">This algorithm works, but is impractical to implement for small element sizes. Some algorithms work on matrix tiles which are multiple columns and rows together. Therefore, the streaming engine defines a separate transposition granularity. The hardware imposes a minimum granularity. The transpose granularity must also be at least as large as the element size. Transposition granularity causes the streaming engine to fetch one or more consecutive elements from dimension 0 before moving along dimension 1. When the granularity equals the element size, this results in fetching a single column from a row-major array. Otherwise, the granularity specifies fetching 2, 4 or more columns at a time from a row-major array. This is also applicable for column-major layout by exchanging row and column in the description. A parameter GPANULE indicates the transposition granularity in bytes.</p><p id="p-0143" num="0136">Another common matrix multiplication technique exchanges the innermost two loops of the matrix multiply. The resulting inner loop no longer reads down the column of one matrix while reading across the row of another. For example the algorithm may hoist one term outside the inner loop, replacing it with the scalar value. On a vector machine, the innermost loop can be implements very efficiently with a single scalar-by-vector multiply followed by a vector add. The central processing unit core <b>110</b> of this invention lacks a scalar-by-vector multiply. Programs must instead duplicate the scalar value across the length of the vector and use a vector-by-vector multiply. The streaming engine of this invention directly supports this and related use models with an element duplication mode. In this mode, the streaming engine reads a granule smaller than the full vector size and replicates that granule to fill the next vector output.</p><p id="p-0144" num="0137">The streaming engine treats each complex number as a single element with two sub-elements that give the real and imaginary (rectangular) or magnitude and angle (polar) portions of the complex number. Not all programs or peripherals agree what order these sub-elements should appear in memory. Therefore, the streaming engine offers the ability to swap the two sub-elements of a complex number with no cost. This feature swaps the halves of an element without interpreting the contents of the element and can be used to swap pairs of sub-elements of any type, not just complex numbers.</p><p id="p-0145" num="0138">Algorithms generally prefer to work at high precision, but high precision values require more storage and bandwidth than lower precision values. Commonly, programs will store data in memory at low precision, promote those values to a higher precision for calculation and then demote the values to lower precision for storage. The streaming engine supports this directly by allowing algorithms to specify one level of type promotion. In the preferred embodiment of this invention every sub-element may be promoted to a larger type size with either sign or zero extension for integer types. It is also feasible that the streaming engine may support floating point promotion, promoting 16-bit and 32-bit floating point values to 32-bit and 64-bit formats, respectively.</p><p id="p-0146" num="0139">The streaming engine defines a stream as a discrete sequence of data elements, the central processing unit core <b>110</b> consumes data elements packed contiguously in vectors. Vectors resemble streams in as much as they contain multiple homogeneous elements with some implicit sequence. Because the streaming engine reads streams, but the central processing unit core <b>110</b> consumes vectors, the streaming engine must map streams onto vectors in a consistent way.</p><p id="p-0147" num="0140">Vectors consist of equal-sized lanes, each lane containing a sub-element. The central processing unit core <b>110</b> designates the rightmost lane of the vector as lane 0, regardless of device's current endian mode. Lane numbers increase right-to-left. The actual number of lanes within a vector varies depending on the length of the vector and the data size of the sub-element.</p><p id="p-0148" num="0141"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates the sequence of the formatting operations of formatter <b>1903</b>. Formatter <b>1903</b> includes three sections: input section <b>2010</b>; formatting section <b>2020</b>; and output section <b>2030</b>. Input section <b>2010</b> receives the data recalled from system memory <b>1910</b> as accessed by stream address generator <b>1901</b>. This data could be via linear fetch stream <b>2011</b> or transposed fetch stream <b>2012</b>.</p><p id="p-0149" num="0142">Formatting section <b>2020</b> includes various formatting blocks. The formatting performed by formatter <b>1903</b> by these blocks will be further described below. Complex swap block <b>2021</b> optionally swaps two sub-elements forming a complex number element. Type promotion block <b>2022</b> optionally promotes each data element into a larger data size. Promotion includes zero extension for unsigned integers and sign extension for signed integers. Decimation block <b>2023</b> optionally decimates the data elements. In the preferred embodiment decimation can be 2:1 retaining every other data element of 4:1 retaining every fourth data element. Element duplication block <b>2024</b> optionally duplicates individual data elements. In the preferred embodiment this data element duplication is an integer power of 2 (2<sup>N</sup>, when N is an integer) including 2&#xd7;, 4&#xd7;, 8&#xd7;, 16&#xd7;, 32&#xd7; and 64&#xd7;. In the preferred embodiment data duplication can extend over plural destination vectors. Vector length masking/group duplication block <b>2025</b> has two primary functions. An independently specified vector length VECLEN controls the data elements supplied to each output data vector. When group duplication is off, excess lanes in the output data vector are zero filled. When group duplication is on, input data elements of the specified vector length are duplicated to fill the output data vector.</p><p id="p-0150" num="0143">Output section <b>2030</b> holds the data for output to the corresponding functional units. Register and buffer for CPU <b>2031</b> stores a formatted vector of data to be used as an operand by the functional units of central processing unit core <b>110</b>.</p><p id="p-0151" num="0144"><figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates a first example of lane allocation in a vector. Vector <b>2100</b> is divided into 8 64-bit lanes (8&#xd7;64 bits=512 bits the vector length). Lane 0 includes bits <b>0</b> to <b>63</b>; line 1 includes bits <b>64</b> to <b>125</b>; lane 2 includes bits <b>128</b> to <b>191</b>; lane 3 includes bits <b>192</b> to <b>255</b>, lane 4 includes bits <b>256</b> to <b>319</b>, lane 5 includes bits <b>320</b> to <b>383</b>, lane 6 includes bits <b>384</b> to <b>447</b> and lane 7 includes bits <b>448</b> to <b>511</b>.</p><p id="p-0152" num="0145"><figref idref="DRAWINGS">FIG. <b>22</b></figref> illustrates a second example of lane allocation in a vector. Vector <b>2210</b> is divided into 16 32-bit lanes (16&#xd7;32 bits=512 bits the vector length). Lane 0 includes bits <b>0</b> to <b>31</b>; line 1 includes bits <b>32</b> to <b>63</b>; lane 2 includes bits <b>64</b> to <b>95</b>; lane 3 includes bits <b>96</b> to <b>127</b>; lane 4 includes bits <b>128</b> to <b>159</b>; lane 5 includes bits <b>160</b> to <b>191</b>; lane 6 includes bits <b>192</b> to <b>223</b>; lane 7 includes bits <b>224</b> to <b>255</b>; lane 8 includes bits <b>256</b> to <b>287</b>; line 9 occupied bits <b>288</b> to <b>319</b>; lane 10 includes bits <b>320</b> to <b>351</b>; lane 11 includes bits <b>352</b> to <b>387</b>; lane 12 includes bits <b>388</b> to <b>415</b>; lane 13 includes bits <b>416</b> to <b>447</b>; lane 14 includes bits <b>448</b> to <b>479</b>; and lane 15 includes bits <b>480</b> to <b>511</b>.</p><p id="p-0153" num="0146">The streaming engine maps the innermost stream dimension directly to vector lanes. It maps earlier elements within that dimension to lower lane numbers and later elements to higher lane numbers. This is true regardless of whether this particular stream advances in increasing or decreasing address order. Whatever order the stream defines, the streaming engine deposits elements in vectors in increasing-lane order. For non-complex data, it places the first element in lane 0 of the first vector central processing unit core <b>110</b> fetches, the second in lane 1, and so on. For complex data, the streaming engine places the first element in lanes 0 and 1, second in lanes 2 and 3, and so on. Sub-elements within an element retain the same relative ordering regardless of the stream direction. For non-swapped complex elements, this places the sub-elements with the lower address of each pair in the even numbered lanes, and the sub-elements with the higher address of each pair in the odd numbered lanes. Swapped complex elements reverse this mapping.</p><p id="p-0154" num="0147">The streaming engine fills each vector central processing unit core <b>110</b> fetches with as many elements as it can from the innermost stream dimension. If the innermost dimension is not a multiple of the vector length, the streaming engine pads that dimension out to a multiple of the vector length with zeros. Thus for higher-dimension streams, the first element from each iteration of an outer dimension arrives in lane 0 of a vector. The streaming engine always maps the innermost dimension to consecutive lanes in a vector. For transposed streams, the innermost dimension consists of groups of sub-elements along dimension 1, not dimension 0, as transposition exchanges these two dimensions.</p><p id="p-0155" num="0148">Two dimensional streams exhibit greater variety as compared to one dimensional streams. A basic two dimensional stream extracts a smaller rectangle from a larger rectangle. A transposed 2-D stream reads a rectangle column-wise instead of row-wise. A looping stream, where the second dimension overlaps first executes a finite impulse response (FIR) filter taps which loops repeatedly or FIR filter samples which provide a sliding window of input samples.</p><p id="p-0156" num="0149"><figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates a basic two dimensional stream. The inner two dimensions, represented by ELEM_BYTES, ICNT0, DIM1 and ICNT1 give sufficient flexibility to describe extracting a smaller rectangle <b>2320</b> having dimensions <b>2321</b> and <b>2322</b> from a larger rectangle <b>2310</b> having dimensions <b>2311</b> and <b>2312</b>. In this example rectangle <b>2320</b> is a 9 by 13 rectangle of 64-bit values and rectangle <b>2310</b> is a larger 11 by 19 rectangle. The following stream parameters define this stream:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0150">ICNT0=9</li>        <li id="ul0002-0002" num="0151">ELEM_BYTES=8</li>        <li id="ul0002-0003" num="0152">ICNT1=13</li>        <li id="ul0002-0004" num="0153">DIM1=88 (11 times 8)<br/>Thus the iteration count in the 0 dimension 2321 is 9. The iteration count in the 1 direction <b>2322</b> is 13. Note that the ELEM_BYTES only scales the innermost dimension. The first dimension has ICNT0 elements of size ELEM_BYTES. The stream address generator does not scale the outer dimensions. Therefore, DIM1=88, which is 11 elements scaled by 8 bytes per element.</li>    </ul>    </li></ul></p><p id="p-0157" num="0154"><figref idref="DRAWINGS">FIG. <b>24</b></figref> illustrates the order of elements within this example stream. The streaming engine fetches elements for the stream in the order illustrated in order <b>2400</b>. The first 9 elements come from the first row of rectangle <b>2320</b>, left-to-right in hops <b>1</b> to <b>8</b>. The 10th through 24th elements comes from the second row, and so on. When the stream moves from the 9th element to the 10th element (hop <b>9</b> in <figref idref="DRAWINGS">FIG. <b>24</b></figref>), the streaming engine computes the new location based on the pointer's position at the start of the inner loop, not where the pointer ended up at the end of the first dimension. This makes DIM1 independent of ELEM_BYTES and ICNT0. DIM1 always represents the distance between the first bytes of each consecutive row.</p><p id="p-0158" num="0155">Transposed streams access along dimension 1 before dimension 0. The following examples illustrate a couple transposed streams, varying the transposition granularity. <figref idref="DRAWINGS">FIG. <b>25</b></figref> illustrates extracting a smaller rectangle <b>2520</b> (12&#xd7;8) having dimensions <b>2521</b> and <b>2522</b> from a larger rectangle <b>2510</b> (14&#xd7;13) having dimensions <b>2511</b> and <b>2512</b>. In <figref idref="DRAWINGS">FIG. <b>25</b></figref> ELEM_BYTES equals 2.</p><p id="p-0159" num="0156"><figref idref="DRAWINGS">FIG. <b>26</b></figref> illustrates how the streaming engine would fetch the stream of this example with a transposition granularity of 4 bytes. Fetch pattern <b>2600</b> fetches pairs of elements from each row (because the granularity of 4 is twice the ELEM_BYTES of 2), but otherwise moves down the columns. Once it reaches the bottom of a pair of columns, it repeats this pattern with the next pair of columns.</p><p id="p-0160" num="0157"><figref idref="DRAWINGS">FIG. <b>27</b></figref> illustrates how the streaming engine would fetch the stream of this example with a transposition granularity of 8 bytes. The overall structure remains the same. The streaming engine fetches 4 elements from each row (because the granularity of 8 is four times the ELEM_BYTES of 2) before moving to the next row in the column as shown in fetch pattern <b>2700</b>.</p><p id="p-0161" num="0158">The streams examined so far read each element from memory exactly once. A stream can read a given element from memory multiple times, in effect looping over a piece of memory. FIR filters exhibit two common looping patterns. FIRs re-read the same filter taps for each output. FIRs also read input samples from a sliding window. Two consecutive outputs will need inputs from two overlapping windows.</p><p id="p-0162" num="0159"><figref idref="DRAWINGS">FIG. <b>28</b></figref> illustrates the details of streaming engine <b>2800</b>. Streaming engine <b>2800</b> contains three major sections: Stream 0 <b>2810</b>; Stream 1 <b>2820</b>; and Shared L2 Interfaces <b>2830</b>. Stream 0 <b>2810</b> and Stream 1 <b>2820</b> both contain identical hardware that operates in parallel. Stream 0 <b>2810</b> and Stream 1 <b>2820</b> both share L2 interfaces <b>2830</b>. Each stream <b>2810</b> and <b>2820</b> provides central processing unit core <b>110</b> with up to 512 bits/cycle, every cycle. The streaming engine architecture enables this through its dedicated stream paths and shared dual L2 interfaces.</p><p id="p-0163" num="0160">Each streaming engine <b>2800</b> includes a dedicated 6-dimensional stream address generator <b>2811</b>/<b>2821</b> that can each generate one new non-aligned request per cycle. Address generators <b>2811</b>/<b>2821</b> output 512-bit aligned addresses that overlap the elements in the sequence defined by the stream parameters. This will be further described below.</p><p id="p-0164" num="0161">Each address generator <b>2811</b>/<b>2811</b> connects to a dedicated micro table look-aside buffer (pTLB) <b>2812</b>/<b>2822</b>. The pTLB <b>2812</b>/<b>2822</b> converts a single 48-bit virtual address to a 44-bit physical address each cycle. Each pTLB <b>2812</b>/<b>2822</b> has 8 entries, covering a minimum of 32 kB with 4 kB pages or a maximum of 16 MB with 2 MB pages. Each address generator <b>2811</b>/<b>2821</b> generates 2 addresses per cycle. The pTLB <b>2812</b>/<b>2822</b> only translates 1 address per cycle. To maintain throughput, streaming engine <b>2800</b> takes advantage of the fact that most stream references will be within the same 4 kB page. Thus the address translation does not modify bits <b>0</b> to <b>11</b> of the address. If aout0 and aout1 line in the same 4 kB page (aout0[47:12] are the same aout1[47:12]), then the pTLB <b>2812</b>/<b>2822</b> only translates aout0 and reuses the translation for the upper bits of both addresses.</p><p id="p-0165" num="0162">Translated addresses are queued in command queue <b>2813</b>/<b>2823</b>. These addresses are aligned with information from the corresponding Storage Allocation and Tracking block <b>2814</b>/<b>2824</b>. Streaming engine <b>2800</b> does not explicitly manage pTLB <b>2812</b>/<b>2822</b>. The system memory management unit (MMU) invalidates pTLBs as necessary during context switches.</p><p id="p-0166" num="0163">Storage Allocation and Tracking <b>2814</b>/<b>2824</b> manages the stream's internal storage, discovering data reuse and tracking the lifetime of each piece of data. This will be further described below.</p><p id="p-0167" num="0164">Reference queue <b>2815</b>/<b>2825</b> stores the sequence of references generated by the corresponding address generator <b>2811</b>/<b>2821</b>. This information drives the data formatting network so that it can present data to central processing unit core <b>110</b> in the correct order. Each entry in reference queue <b>2815</b>/<b>2825</b> contains the information necessary to read data out of the data store and align it for central processing unit core <b>110</b>. Reference queue <b>2815</b>/<b>2825</b> maintains the following information listed in Table 5 in each slot:</p><p id="p-0168" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="133pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 5</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Data Slot Low</entry><entry>Slot number for the lower half of data</entry></row><row><entry/><entry/><entry>associated with aout0</entry></row><row><entry/><entry>Data Slot High</entry><entry>Slot number for the upper half of data</entry></row><row><entry/><entry/><entry>associated with aout1</entry></row><row><entry/><entry>Rotation</entry><entry>Number of bytes to rotate data to align</entry></row><row><entry/><entry/><entry>next element with lane 0</entry></row><row><entry/><entry>Length</entry><entry>Number of valid bytes in this reference</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0169" num="0165">Storage allocation and tracking <b>2814</b>/<b>2824</b> inserts references in reference queue <b>2815</b>/<b>2825</b> as address generator <b>2811</b>/<b>2821</b> generates new addresses. Storage allocation and tracking <b>2814</b>/<b>2824</b> removes references from reference queue <b>2815</b>/<b>2825</b> when the data becomes available and there is room in the stream head registers. As storage allocation and tracking <b>2814</b>/<b>2824</b> removes slot references from reference queue <b>2815</b>/<b>2825</b> and formats data, it checks whether the references represent the last reference to the corresponding slots. Storage allocation and tracking <b>2814</b>/<b>2824</b> compares reference queue <b>2815</b>/<b>2825</b> removal pointer against the slot's recorded Last Reference. If they match, then storage allocation and tracking <b>2814</b>/<b>2824</b> marks the slot inactive once it's done with the data.</p><p id="p-0170" num="0166">Streaming engine <b>2800</b> has data storage <b>2816</b>/<b>2826</b> for an arbitrary number of elements. Deep buffering allows the streaming engine to fetch far ahead in the stream, hiding memory system latency. The right amount of buffering might vary from product generation to generation. In the current preferred embodiment streaming engine <b>2800</b> dedicates 32 slots to each stream. Each slot holds 64 bytes of data.</p><p id="p-0171" num="0167">Butterfly network <b>2817</b>/<b>2827</b> consists of a 7 stage butterfly network. Butterfly network <b>2817</b>/<b>2827</b> receives 128 bytes of input and generates 64 bytes of output. The first stage of the butterfly is actually a half-stage. It collects bytes from both slots that match a non-aligned fetch and merges them into a single, rotated 64-byte array. The remaining 6 stages form a standard butterfly network. Butterfly network <b>2817</b>/<b>2827</b> performs the following operations: rotates the next element down to byte lane 0; promotes data types by a power of 2, if requested; swaps real and imaginary components of complex numbers, if requested; converts big endian to little endian if central processing unit core <b>110</b> is presently in big endian mode. The user specifies element size, type promotion and real/imaginary swap as part of the stream's parameters.</p><p id="p-0172" num="0168">Streaming engine <b>2800</b> attempts to fetch and format data ahead of central processing unit core <b>110</b>'s demand for it, so that it can maintain full throughput. Stream head registers <b>2818</b>/<b>2828</b> provide a small amount of buffering so that the process remains fully pipelined. Holding registers <b>2818</b>/<b>2828</b> are not directly architecturally visible, except for the fact that streaming engine <b>2800</b> provides full throughput.</p><p id="p-0173" num="0169">The two streams <b>2810</b>/<b>2820</b> share a pair of independent L2 interfaces <b>2830</b>: L2 Interface A (IFA) <b>2833</b> and L2 Interface B (IFB) <b>2834</b>. Each L2 interface provides 512 bits/cycle throughput direct to the L2 controller for an aggregate bandwidth of 1024 bits/cycle. The L2 interfaces use the credit-based multicore bus architecture (MBA) protocol. The L2 controller assigns each interface its own pool of command credits. The pool should have sufficient credits so that each interface can send sufficient requests to achieve full read-return bandwidth when reading L2 RAM, L2 cache and multicore shared memory controller (MSMC) memory (described below).</p><p id="p-0174" num="0170">To maximize performance, both streams can use both L2 interfaces, allowing a single stream to send a peak command rate of 2 requests/cycle. Each interface prefers one stream over the other, but this preference changes dynamically from request to request. IFA <b>2833</b> and IFB <b>2834</b> always prefer opposite streams, when IFA <b>2833</b> prefers Stream 0, IFB <b>2834</b> prefers Stream 1 and vice versa.</p><p id="p-0175" num="0171">Arbiter <b>2831</b>/<b>2832</b> ahead of each interface <b>2833</b>/<b>2834</b> applies the following basic protocol on every cycle it has credits available. Arbiter <b>2831</b>/<b>2832</b> checks if the preferred stream has a command ready to send. If so, arbiter <b>2831</b>/<b>2832</b> chooses that command. Arbiter <b>2831</b>/<b>2832</b> next checks if an alternate stream has at least two requests ready to send, or one command and no credits. If so, arbiter <b>2831</b>/<b>2832</b> pulls a command from the alternate stream. If either interface issues a command, the notion of preferred and alternate streams swap for the next request. Using this simple algorithm, the two interfaces dispatch requests as quickly as possible while retaining fairness between the two streams. The first rule ensures that each stream can send a request on every cycle that has available credits. The second rule provides a mechanism for one stream to borrow the other's interface when the second interface is idle. The third rule spreads the bandwidth demand for each stream across both interfaces, ensuring neither interface becomes a bottleneck by itself.</p><p id="p-0176" num="0172">Coarse Grain Rotator <b>2835</b>/<b>2836</b> enables streaming engine <b>2800</b> to support a transposed matrix addressing mode. In this mode, streaming engine <b>2800</b> interchanges the two innermost dimensions of its multidimensional loop. This accesses an array column-wise rather than row-wise. Rotator <b>2835</b>/<b>2836</b> is not architecturally visible, except as enabling this transposed access mode.</p><p id="p-0177" num="0173">The stream definition template provides the full structure of a stream that contains data. The iteration counts and dimensions provide most of the structure, while the various flags provide the rest of the details. For all data-containing streams, the streaming engine defines a single stream template. All stream types it supports fit this template. The streaming engine defines a six-level loop nest for addressing elements within the stream. Most of the fields in the stream template map directly to the parameters in that algorithm. <figref idref="DRAWINGS">FIG. <b>29</b></figref> illustrates stream template register <b>2900</b>. The numbers above the fields are bit numbers within a 256-bit vector. Table 6 shows the stream field definitions of a stream template.</p><p id="p-0178" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="56pt" align="center"/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="35pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="4" rowsep="1">TABLE 6</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry/><entry>FIG. 29</entry><entry/><entry/></row><row><entry/><entry>Field</entry><entry>Reference</entry><entry/><entry>Size</entry></row><row><entry/><entry>Name</entry><entry>Number</entry><entry>Description</entry><entry>Bits</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="56pt" align="char" char="."/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="35pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>ICNT0</entry><entry>2901</entry><entry>Iteration count for loop 0</entry><entry>16</entry></row><row><entry/><entry>ICNT1</entry><entry>2902</entry><entry>Iteration count for loop 1</entry><entry>16</entry></row><row><entry/><entry>ICNT2</entry><entry>2903</entry><entry>Iteration count for loop 2</entry><entry>16</entry></row><row><entry/><entry>ICNT3</entry><entry>2904</entry><entry>Iteration count for loop 3</entry><entry>16</entry></row><row><entry/><entry>ICNT4</entry><entry>2905</entry><entry>Iteration count for loop 4</entry><entry>16</entry></row><row><entry/><entry>INCT5</entry><entry>2906</entry><entry>Iteration count for loop 5</entry><entry>16</entry></row><row><entry/><entry>DIM1</entry><entry>2922</entry><entry>Signed dimension for loop 1</entry><entry>16</entry></row><row><entry/><entry>DIM2</entry><entry>2923</entry><entry>Signed dimension for loop 2</entry><entry>16</entry></row><row><entry/><entry>DIM3</entry><entry>2924</entry><entry>Signed dimension for loop 3</entry><entry>16</entry></row><row><entry/><entry>DIM4</entry><entry>2925</entry><entry>Signed dimension for loop 4</entry><entry>32</entry></row><row><entry/><entry>DIM5</entry><entry>2926</entry><entry>Signed dimension for loop 5</entry><entry>32</entry></row><row><entry/><entry>FLAGS</entry><entry>2911</entry><entry>Stream modifier flags</entry><entry>48</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0179" num="0174">Loop 0 is the innermost loop and loop 5 is the outermost loop. In the current example DIM0 is always equal to is ELEM_BYTES defining physically contiguous data. Thus the stream template register <b>2900</b> does not define DIM0. Streaming engine <b>2800</b> interprets all iteration counts as unsigned integers and all dimensions as unscaled signed integers. The template above fully specifies the type of elements, length and dimensions of the stream. The stream instructions separately specify a start address. This would typically be by specification of a scalar register in scalar register file <b>211</b> which stores this start address. This allows a program to open multiple streams using the same template.</p><p id="p-0180" num="0175"><figref idref="DRAWINGS">FIG. <b>30</b></figref> illustrates sub-field definitions of the flags field <b>2911</b>. As shown in <figref idref="DRAWINGS">FIG. <b>30</b></figref> the flags field <b>2911</b> is 6 bytes or 48 bits. <figref idref="DRAWINGS">FIG. <b>30</b></figref> shows bit numbers of the fields. Table 7 shows the definition of these fields.</p><p id="p-0181" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="56pt" align="center"/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="35pt" align="center"/><thead><row><entry namest="1" nameend="4" rowsep="1">TABLE 7</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>FIG. 30</entry><entry/><entry/></row><row><entry/><entry>Reference</entry><entry/><entry>Size</entry></row><row><entry>Field Name</entry><entry>Number</entry><entry>Description</entry><entry>Bits</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="56pt" align="char" char="."/><colspec colname="3" colwidth="84pt" align="left"/><colspec colname="4" colwidth="35pt" align="char" char="."/><tbody valign="top"><row><entry>ELTYPE</entry><entry>3001</entry><entry>Type of data element</entry><entry>4</entry></row><row><entry>TRANS-</entry><entry>3002</entry><entry>Two dimensional </entry><entry>3</entry></row><row><entry>POSE</entry><entry/><entry>transpose mode</entry><entry/></row><row><entry>PROMOTE</entry><entry>3003</entry><entry>Promotion mode</entry><entry>3</entry></row><row><entry>VECLEN</entry><entry>3004</entry><entry>Stream vector length</entry><entry>3</entry></row><row><entry>ELDUP</entry><entry>3005</entry><entry>Element duplication</entry><entry>3</entry></row><row><entry>GRDUP</entry><entry>3006</entry><entry>Group duplication</entry><entry>1</entry></row><row><entry>DECIM</entry><entry>3007</entry><entry>Element decimation</entry><entry>2</entry></row><row><entry>THROTTLE</entry><entry>3008</entry><entry>Fetch ahead throttle mode</entry><entry>2</entry></row><row><entry>DIMFMT</entry><entry>3009</entry><entry>Stream dimensions format</entry><entry>3</entry></row><row><entry>DIR</entry><entry>3010</entry><entry>Stream direction</entry><entry>1</entry></row><row><entry/><entry/><entry>0 forward direction</entry><entry/></row><row><entry/><entry/><entry>1 reverse direction</entry><entry/></row><row><entry>CBK0</entry><entry>3011</entry><entry>First circular block </entry><entry>4</entry></row><row><entry/><entry/><entry>size number</entry><entry/></row><row><entry>CBK1</entry><entry>3012</entry><entry>Second circular </entry><entry>4</entry></row><row><entry/><entry/><entry>block size number</entry><entry/></row><row><entry>AM0</entry><entry>3013</entry><entry>Addressing mode for loop 0</entry><entry>2</entry></row><row><entry>AM1</entry><entry>3014</entry><entry>Addressing mode for loop 1</entry><entry>2</entry></row><row><entry>AM2</entry><entry>3015</entry><entry>Addressing mode for loop 2</entry><entry>2</entry></row><row><entry>AM3</entry><entry>3016</entry><entry>Addressing mode for loop 3</entry><entry>2</entry></row><row><entry>AM4</entry><entry>3017</entry><entry>Addressing mode for loop 4</entry><entry>2</entry></row><row><entry>AM5</entry><entry>3018</entry><entry>Addressing mode for loop 5</entry><entry>2</entry></row><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0182" num="0176">The Element Type (ELTYPE) field <b>3001</b> defines the data type of the elements in the stream. The coding of the four bits of the ELTYPE field <b>3001</b> is defined as shown in Table 8.</p><p id="p-0183" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="28pt" align="center"/><colspec colname="4" colwidth="63pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="4" rowsep="1">TABLE 8</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry/><entry/><entry>Sub-</entry><entry>Total </entry></row><row><entry/><entry/><entry>Real/</entry><entry>element</entry><entry>Element</entry></row><row><entry/><entry>ELTYPE</entry><entry>Complex</entry><entry>Size Bits</entry><entry>Size Bits</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="char" char="."/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="28pt" align="char" char="."/><colspec colname="4" colwidth="63pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>0000</entry><entry>real</entry><entry>8</entry><entry>8</entry></row><row><entry/><entry>0001</entry><entry>real</entry><entry>16</entry><entry>16</entry></row><row><entry/><entry>0010</entry><entry>real</entry><entry>32</entry><entry>32</entry></row><row><entry/><entry>0011</entry><entry>real</entry><entry>64</entry><entry>64</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="char" char="."/><colspec colname="2" colwidth="168pt" align="center"/><tbody valign="top"><row><entry/><entry>0100</entry><entry>reserved</entry></row><row><entry/><entry>0101</entry><entry>reserved</entry></row><row><entry/><entry>0110</entry><entry>reserved</entry></row><row><entry/><entry>0111</entry><entry>reserved</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="char" char="."/><colspec colname="2" colwidth="77pt" align="center"/><colspec colname="3" colwidth="28pt" align="char" char="."/><colspec colname="4" colwidth="63pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>1000</entry><entry>complex</entry><entry>8</entry><entry>16</entry></row><row><entry/><entry/><entry>no swap</entry><entry/><entry/></row><row><entry/><entry>1001</entry><entry>complex</entry><entry>16</entry><entry>32</entry></row><row><entry/><entry/><entry>no swap</entry><entry/><entry/></row><row><entry/><entry>1010</entry><entry>complex</entry><entry>32</entry><entry>64</entry></row><row><entry/><entry/><entry>no swap</entry><entry/><entry/></row><row><entry/><entry>1011</entry><entry>complex</entry><entry>64</entry><entry>128</entry></row><row><entry/><entry/><entry>no swap</entry><entry/><entry/></row><row><entry/><entry>1100</entry><entry>complex</entry><entry>8</entry><entry>16</entry></row><row><entry/><entry/><entry>swapped</entry><entry/><entry/></row><row><entry/><entry>1101</entry><entry>complex</entry><entry>16</entry><entry>32</entry></row><row><entry/><entry/><entry>swapped</entry><entry/><entry/></row><row><entry/><entry>1110</entry><entry>complex</entry><entry>32</entry><entry>64</entry></row><row><entry/><entry/><entry>swapped</entry><entry/><entry/></row><row><entry/><entry>1111</entry><entry>complex</entry><entry>64</entry><entry>128</entry></row><row><entry/><entry/><entry>swapped</entry></row><row><entry/><entry namest="offset" nameend="4" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0184" num="0177">Real/Complex Type determines whether the streaming engine treats each element as a real number or two parts (real/imaginary or magnitude/angle) of a complex number. This field also specifies whether to swap the two parts of complex numbers. Complex types have a total element size that is twice their sub-element size. Otherwise, the sub-element size equals total element size.</p><p id="p-0185" num="0178">Sub-Element Size determines the type for purposes of type promotion and vector lane width. For example, 16-bit sub-elements get promoted to 32-bit sub-elements or 64-bit sub-elements when a stream requests type promotion. The vector lane width matters when central processing unit core <b>110</b> operates in big endian mode, as it always lays out vectors in little endian order.</p><p id="p-0186" num="0179">Total Element Size determines the minimal granularity of the stream. In the stream addressing model, it determines the number of bytes the stream fetches for each iteration of the innermost loop. Streams always read whole elements, either in increasing or decreasing order. Therefore, the innermost dimension of a stream spans ICNT0&#xd7;total-element-size bytes.</p><p id="p-0187" num="0180">The TRANSPOSE field <b>3002</b> determines whether the streaming engine accesses the stream in a transposed order. The transposed order exchanges the inner two addressing levels. The TRANSPOSE field <b>3002</b> also indicated the granularity it transposes the stream. The coding of the three bits of the TRANSPOSE field <b>3002</b> is defined as shown in Table 9 for normal 2D operations.</p><p id="p-0188" num="0000"><tables id="TABLE-US-00009" num="00009"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="91pt" align="center"/><colspec colname="2" colwidth="126pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 9</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>Transpose</entry><entry>Meaning</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="91pt" align="char" char="."/><colspec colname="2" colwidth="126pt" align="left"/><tbody valign="top"><row><entry>000</entry><entry>Transpose disabled</entry></row><row><entry>001</entry><entry>Transpose on 8-bit boundaries</entry></row><row><entry>010</entry><entry>Transpose on 16-bit boundaries</entry></row><row><entry>011</entry><entry>Transpose on 32-bit boundaries</entry></row><row><entry>100</entry><entry>Transpose on 64-bit boundaries</entry></row><row><entry>101</entry><entry>Transpose on 128-bit boundaries</entry></row><row><entry>110</entry><entry>Transpose on 256-bit boundaries</entry></row><row><entry>111</entry><entry>Reserved</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Streaming engine <b>2800</b> may transpose data elements at a different granularity than the element size. This allows programs to fetch multiple columns of elements from each row. The transpose granularity must be no smaller than the element size. The TRANSPOSE field <b>3002</b> interacts with the DIMFMT field <b>3009</b> in a manner further described below.</p><p id="p-0189" num="0181">The PROMOTE field <b>3003</b> controls whether the streaming engine promotes sub-elements in the stream and the type of promotion. When enabled, streaming engine <b>2800</b> promotes types by powers-of-2 sizes. The coding of the three bits of the PROMOTE field <b>3003</b> is defined as shown in Table 10.</p><p id="p-0190" num="0000"><tables id="TABLE-US-00010" num="00010"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="105pt" align="center"/><thead><row><entry namest="1" nameend="4" rowsep="1">TABLE 10</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="4" align="center" rowsep="1"/></row><row><entry/><entry>Promotion</entry><entry>Promotion</entry><entry>Resulting Sub-element Size</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="21pt" align="left"/><colspec colname="5" colwidth="28pt" align="left"/><colspec colname="6" colwidth="28pt" align="left"/><colspec colname="7" colwidth="28pt" align="left"/><tbody valign="top"><row><entry>PROMOTE</entry><entry>Factor</entry><entry>Type</entry><entry>8-bit</entry><entry>16-bit</entry><entry>32-bit</entry><entry>64-bit</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row><row><entry>000</entry><entry>1&#xd7;</entry><entry>N/A</entry><entry>8-bit</entry><entry>16-bit</entry><entry>32-bit</entry><entry>64-bit</entry></row><row><entry>001</entry><entry>2&#xd7;</entry><entry>zero</entry><entry>16-bit</entry><entry>32-bit</entry><entry>64-bit</entry><entry>Invalid</entry></row><row><entry/><entry/><entry>extend</entry><entry/><entry/><entry/><entry/></row><row><entry>010</entry><entry>4&#xd7;</entry><entry>zero</entry><entry>32-bit</entry><entry>64-bit</entry><entry>Invalid</entry><entry>Invalid</entry></row><row><entry/><entry/><entry>extend</entry><entry/><entry/><entry/><entry/></row><row><entry>011</entry><entry>8&#xd7;</entry><entry>zero</entry><entry>64-bit</entry><entry>Invalid</entry><entry>Invalid</entry><entry>Invalid</entry></row><row><entry/><entry/><entry>extend</entry><entry/><entry/><entry/><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="175pt" align="center"/><tbody valign="top"><row><entry>100</entry><entry>reserved</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="42pt" align="center"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="21pt" align="left"/><colspec colname="5" colwidth="28pt" align="left"/><colspec colname="6" colwidth="28pt" align="left"/><colspec colname="7" colwidth="28pt" align="left"/><tbody valign="top"><row><entry>101</entry><entry>2&#xd7;</entry><entry>sign</entry><entry>16-bit</entry><entry>32-bit</entry><entry>64-bit</entry><entry>Invalid</entry></row><row><entry/><entry/><entry>extend</entry><entry/><entry/><entry/><entry/></row><row><entry>110</entry><entry>4&#xd7;</entry><entry>sign</entry><entry>32-bit</entry><entry>64-bit</entry><entry>Invalid</entry><entry>Invalid</entry></row><row><entry/><entry/><entry>extend</entry><entry/><entry/><entry/><entry/></row><row><entry>111</entry><entry>8&#xd7;</entry><entry>sign</entry><entry>64-bit</entry><entry>Invalid</entry><entry>Invalid</entry><entry>Invalid</entry></row><row><entry/><entry/><entry>extend</entry><entry/><entry/><entry/><entry/></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0191" num="0182">When PROMOTE is 000, corresponding to a 1&#xd7; promotion, each sub-element is unchanged and occupies a vector lane equal in width to the size specified by ELTYPE. When PROMOTE is 001, corresponding to a 2&#xd7; promotion and zero extend, each sub-element is treated as an unsigned integer and zero extended to a vector lane twice the width specified by ELTYPE. A 2&#xd7; promotion is invalid for an initial sub-element size of 64 bits. When PROMOTE is 010, corresponding to a 4&#xd7; promotion and zero extend, each sub-element is treated as an unsigned integer and zero extended to a vector lane four times the width specified by ELTYPE. A 4&#xd7; promotion is invalid for an initial sub-element size of 32 or 64 bits. When PROMOTE is 011, corresponding to an 8&#xd7; promotion and zero extend, each sub-element is treated as an unsigned integer and zero extended to a vector lane eight times the width specified by ELTYPE. An 8&#xd7; promotion is invalid for an initial sub-element size of 16, 32 or 64 bits. When PROMOTE is 101, corresponding to a 2&#xd7; promotion and sign extend, each sub-element is treated as a signed integer and sign extended to a vector lane twice the width specified by ELTYPE. A 2&#xd7; promotion is invalid for an initial sub-element size of 64 bits. When PROMOTE is 110, corresponding to a 4&#xd7; promotion and sign extend, each sub-element is treated as a signed integer and sign extended to a vector lane four times the width specified by ELTYPE. A 4&#xd7; promotion is invalid for an initial sub-element size of 32 or 64 bits. When PROMOTE is 111, corresponding to an 8&#xd7; promotion and zero extend, each sub-element is treated as a signed integer and sign extended to a vector lane eight times the width specified by ELTYPE. An 8&#xd7; promotion is invalid for an initial sub-element size of 16, 32 or 64 bits.</p><p id="p-0192" num="0183">The VECLEN field <b>3004</b> defines the stream vector length for the stream in bytes. Streaming engine <b>2800</b> breaks the stream into groups of elements that are VECLEN bytes long. The coding of the three bits of the VECLEN field <b>3004</b> is defined as shown in Table 11.</p><p id="p-0193" num="0000"><tables id="TABLE-US-00011" num="00011"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="center"/><colspec colname="2" colwidth="105pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 11</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>VECLEN</entry><entry>Stream Vector Length</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="112pt" align="char" char="."/><colspec colname="2" colwidth="105pt" align="left"/><tbody valign="top"><row><entry>000</entry><entry>1 byte</entry></row><row><entry>001</entry><entry>2 bytes</entry></row><row><entry>010</entry><entry>4 bytes</entry></row><row><entry>011</entry><entry>8 bytes</entry></row><row><entry>100</entry><entry>16 bytes</entry></row><row><entry>101</entry><entry>32 bytes</entry></row><row><entry>110</entry><entry>64 bytes</entry></row><row><entry>111</entry><entry>Reserved</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0194" num="0184">VECLEN must be greater than or equal to the product of the element size in bytes and the duplication factor. As shown in Table 11, the maximum VECLEN of 64 bytes equals the preferred vector size of vector datapath side B <b>116</b>. When VECLEN is shorter than the native vector width of central processing unit core <b>110</b>, streaming engine <b>2800</b> pads the extra lanes in the vector provided to central processing unit core <b>110</b>. The GRDUP field <b>3006</b> determines the type of padding. The VECLEN field <b>3004</b> interacts with ELDUP field <b>3005</b> and GRDUP field <b>3006</b> in a manner detailed below.</p><p id="p-0195" num="0185">The ELDUP field <b>3005</b> specifies a number of times to duplicate each element. The element size multiplied with the element duplication amount must not exceed the 64 bytes. The coding of the three bits of the ELDUP field <b>3005</b> is defined as shown in Table 12.</p><p id="p-0196" num="0000"><tables id="TABLE-US-00012" num="00012"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="119pt" align="center"/><colspec colname="2" colwidth="98pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 12</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>ELDUP</entry><entry>Duplication Factor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="119pt" align="char" char="."/><colspec colname="2" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>000</entry><entry>No Duplication</entry></row><row><entry>001</entry><entry>2 times</entry></row><row><entry>010</entry><entry>4 times</entry></row><row><entry>011</entry><entry>8 times</entry></row><row><entry>100</entry><entry>16 times</entry></row><row><entry>101</entry><entry>32 times</entry></row><row><entry>110</entry><entry>64 times</entry></row><row><entry>111</entry><entry>Reserved</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>The ELDUP field <b>3005</b> interacts with VECLEN field <b>3004</b> and GRDUP field <b>3006</b> in a manner detailed below.</p><p id="p-0197" num="0186">Element duplication block <b>2024</b> then supplies duplicated elements to another destination vector. The nature of the relationship between the permitted element size, element duplication factor and destination vector length requires that a duplicated element that overflows the first destination register will fill an integer number of destination registers upon completion of duplication. The data of these additional destination registers eventually supplies the corresponding stream head register <b>2818</b>/<b>2828</b>. Upon completion of duplication of a first data element, the next data element is rotated down to the least significant bits of source register <b>3100</b> discarding the first data element. The process then repeats for this new data element.</p><p id="p-0198" num="0187">The GRDUP bit <b>3006</b> determines whether group duplication is enabled. If GRDUP bit <b>3006</b> is 0, then group duplication is disabled. If the GRDUP bit <b>3006</b> is 1, then group duplication is enabled. When enabled by GRDUP bit <b>3006</b>, streaming engine <b>2800</b> duplicates a group of elements to fill the vector width. VECLEN field <b>3004</b> defines the length of the group to replicate. When VECLEN field <b>3004</b> is less than the vector length of central processing unit core <b>110</b> and GRDUP bit <b>3006</b> enables group duplication, streaming engine <b>2800</b> fills the extra lanes (see <figref idref="DRAWINGS">FIGS. <b>20</b> and <b>21</b></figref>) with additional copies of the stream vector. Because stream vector length and vector length of central processing unit core <b>110</b> are always integral powers of two, group duplication always produces an integral power of two number of duplicate copies. Note GRDUP and VECLEN do not specify the number of duplications. The number of duplications performed is based upon the ratio of VECLEN to the native vector length, which is 64 bytes/512 bits in the preferred embodiment.</p><p id="p-0199" num="0188">The GRDUP field <b>3006</b> specifies how stream engine <b>2800</b> pads stream vectors for bits following the VECLEN length out to the vector length of central processing unit core <b>110</b>. When GRDUP bit <b>3006</b> is 0, streaming engine <b>2800</b> fills the extra lanes with zeros and marks these extra vector lanes invalid. When GRDUP bit <b>3006</b> is 1, streaming engine <b>2800</b> fills extra lanes with copies of the group of elements in each stream vector. Setting GRDUP bit <b>3006</b> to <b>1</b> has no effect when VECLEN is set to the native vector width of central processing unit core <b>110</b>. VECLEN must be at least as large as the product of ELEM_BYTES and the element duplication factor ELDUP. That is, an element or the duplication factor number of elements cannot be separated using VECLEN.</p><p id="p-0200" num="0189">Group duplication operates only to the destination vector size. Group duplication does not change the data supplied when the product of the element size ELEM_BYTES and element duplication factor ELDUP equals or exceeds the destination vector width. Under these conditions the state of the GRDUP bit <b>3006</b> and the VECLEN field <b>3004</b> have no effect on the supplied data.</p><p id="p-0201" num="0190">Element duplication (ELDUP) and group duplication (GRUDP) are independent. Note these features include independent specification and parameter setting. Thus element duplication and group duplication may be used together or separately. Because of how these are specified, element duplication permits overflow to the next vector while group duplication does not.</p><p id="p-0202" num="0191">The DECIM field <b>3007</b> controls data element decimation of the corresponding stream. Streaming engine <b>2800</b> deletes data elements from the stream upon storage in stream head registers <b>2818</b>/<b>2828</b> for presentation to the requesting functional unit. Decimation always removes whole data elements, not sub-elements. The DECIM field <b>3007</b> is defined as listed in Table 13.</p><p id="p-0203" num="0000"><tables id="TABLE-US-00013" num="00013"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="119pt" align="center"/><colspec colname="2" colwidth="98pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 13</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>DECIM</entry><entry>Decimation Factor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="119pt" align="char" char="."/><colspec colname="2" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>00</entry><entry>No Decimation</entry></row><row><entry>01</entry><entry>2 times</entry></row><row><entry>10</entry><entry>4 times</entry></row><row><entry>11</entry><entry>Reserved</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0204" num="0192">If DECIM field <b>3007</b> equals 00, then no decimation occurs. The data elements are passed to the corresponding stream head registers <b>2818</b>/<b>2828</b> without change. If DECIM field <b>3007</b> equals 01, then 2:1 decimation occurs. Streaming engine <b>2800</b> removes odd number elements from the data stream upon storage in the stream head registers <b>2818</b>/<b>2828</b>. Limitations in the formatting network require 2:1 decimation to be employed with data promotion by at least 2&#xd7; (PROMOTE cannot be 000), ICNT0 must be multiple of 2 and the total vector length (VECLEN) must be large enough to hold a single promoted, duplicated element. For transposed streams (TRANSPOSE&#x2260;0), the transpose granule must be at least twice the element size in bytes before promotion. If DECIM field <b>3007</b> equals 10, then 4:1 decimation occurs. Streaming engine <b>2800</b> retains every fourth data element removing three elements from the data stream upon storage in the stream head registers <b>2818</b>/<b>2828</b>. Limitations in the formatting network require 4:1 decimation to be employed with data promotion by at least 4&#xd7; (PROMOTE cannot be 000, 001 or 101), ICNT0 must be multiple of 4 and the total vector length (VECLEN) must be large enough to hold a single promoted, duplicated element. For transposed streams (TRANSPOSE&#x2260;0), decimation always removes columns, and never removes rows. Thus the transpose granule must be: at least twice the element size in bytes before promotion for 2:1 decimation (GRANULE&#x2265;2&#xd7;ELEM_BYTES); and at least four times the element size in bytes before promotion for 4:1 decimation (GRANULE&#x2265;4&#xd7;ELEM_BYTES).</p><p id="p-0205" num="0193">The THROTTLE field <b>3008</b> controls how aggressively the streaming engine fetches ahead of central processing unit core <b>110</b>. The coding of the two bits of this field is defined as shown in Table 14.</p><p id="p-0206" num="0000"><tables id="TABLE-US-00014" num="00014"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="70pt" align="center"/><colspec colname="2" colwidth="147pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 14</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>THROTTLE</entry><entry>Description</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="70pt" align="char" char="."/><colspec colname="2" colwidth="147pt" align="left"/><tbody valign="top"><row><entry>00</entry><entry>Minimum throttling, maximum fetch ahead</entry></row><row><entry>01</entry><entry>Less throttling, more fetch ahead</entry></row><row><entry>10</entry><entry>More throttling, less fetch ahead</entry></row><row><entry>11</entry><entry>Maximum throttling, minimum fetch ahead</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0207" num="0194">THROTTLE does not change the meaning of the stream, and serves only as a hint. The streaming engine may ignore this field. Programs should not rely on the specific throttle behavior for program correctness, because the architecture does not specify the precise throttle behavior. THROTTLE allows programmers to provide hints to the hardware about the program's own behavior. By default, the streaming engine attempts to get as far ahead of central processing unit core <b>110</b> as it can to hide as much latency as possible (equivalent THOTTLE=11), while providing full stream throughput to central processing unit core <b>110</b>. While several key applications need this level of throughput, it can lead to bad system level behavior for others. For example, the streaming engine discards all fetched data across context switches. Therefore, aggressive fetch-ahead can lead to wasted bandwidth in a system with large numbers of context switches. Aggressive fetch-ahead only makes sense in those systems if central processing unit core <b>110</b> consumes data very quickly.</p><p id="p-0208" num="0195">The DIMFMT field <b>3009</b> enables redefinition of the loop count fields ICNT0 <b>2801</b>, ICNT1 <b>2802</b>, ICNT2 <b>2803</b>, ICNT3 <b>2804</b>, ICNT4 <b>2805</b> and ICNT5 <b>2806</b>, the loop dimension fields DIM1 <b>2855</b>, DIM2 <b>2823</b>, DIM3 <b>2824</b>, DIM4 <b>2825</b> and DIM5 <b>2826</b> and the addressing mode fields AM0 <b>3013</b>, AM1 <b>3014</b>, AM2 <b>3015</b>, AM3 <b>3016</b>, AM4 <b>3017</b> and AM5 <b>3018</b> (part of FLAGS field <b>2811</b>) of the stream template register <b>2800</b>. This permits some loop dimension fields and loop counts to include more bits at the expense of fewer loops. Table 15 lists the size of the loop dimension fields for various values of the DIMFMT field <b>3009</b>.</p><p id="p-0209" num="0000"><tables id="TABLE-US-00015" num="00015"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="28pt" align="left"/><colspec colname="5" colwidth="28pt" align="left"/><colspec colname="6" colwidth="28pt" align="left"/><colspec colname="7" colwidth="28pt" align="left"/><thead><row><entry namest="1" nameend="7" rowsep="1">TABLE 15</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row><row><entry/><entry>Number</entry><entry/><entry/><entry/><entry/><entry/></row><row><entry/><entry>of</entry><entry/><entry/><entry/><entry/><entry/></row><row><entry>DIMFMT</entry><entry>Loops</entry><entry>DIM5</entry><entry>DIM4</entry><entry>DIM3</entry><entry>DIM2</entry><entry>DIM1</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>000</entry><entry>3</entry><entry>unused</entry><entry>32 bits</entry><entry>unused</entry><entry>32 bits</entry><entry>unused</entry></row><row><entry>001</entry><entry>4</entry><entry>unused</entry><entry>32 bits</entry><entry>unused</entry><entry>16 bits</entry><entry>16 bits</entry></row><row><entry>010</entry><entry>4</entry><entry>unused</entry><entry>32 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>unused</entry></row><row><entry>011</entry><entry>5</entry><entry>unused</entry><entry>32 bits</entry><entry>32 bits</entry><entry>32 bits</entry><entry>16 bits</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="175pt" align="center"/><tbody valign="top"><row><entry>100</entry><entry>reserved</entry></row><row><entry>101</entry><entry>reserved</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="28pt" align="center"/><colspec colname="3" colwidth="35pt" align="left"/><colspec colname="4" colwidth="28pt" align="left"/><colspec colname="5" colwidth="28pt" align="left"/><colspec colname="6" colwidth="28pt" align="left"/><colspec colname="7" colwidth="28pt" align="left"/><tbody valign="top"><row><entry>110</entry><entry>6</entry><entry>16 bits</entry><entry>16 bits</entry><entry>32 bits</entry><entry>32 bits</entry><entry>32 bits</entry></row><row><entry>111</entry><entry>6</entry><entry>32 bits</entry><entry>32 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>32 bits</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>Note that DIM0 always equals ELEM_BYTES the data element size. Table 16 lists the size of the loop count fields for various values of the DIMFMT field <b>3009</b>.</p><p id="p-0210" num="0000"><tables id="TABLE-US-00016" num="00016"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="8"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><colspec colname="5" colwidth="28pt" align="left"/><colspec colname="6" colwidth="35pt" align="left"/><colspec colname="7" colwidth="28pt" align="left"/><colspec colname="8" colwidth="42pt" align="left"/><thead><row><entry namest="1" nameend="8" rowsep="1">TABLE 16</entry></row><row><entry namest="1" nameend="8" align="center" rowsep="1"/></row><row><entry/><entry>Number</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry/><entry>of</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>DIMFMT</entry><entry>Loops</entry><entry>ICNT5</entry><entry>ICNT4</entry><entry>ICNT3</entry><entry>ICNT2</entry><entry>ICNT1</entry><entry>ICNT0</entry></row><row><entry namest="1" nameend="8" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>000</entry><entry>3</entry><entry>unused</entry><entry>32 bits</entry><entry>unused</entry><entry>32 bits</entry><entry>unused</entry><entry>32 bits</entry></row><row><entry>001</entry><entry>4</entry><entry>unused</entry><entry>32 bits</entry><entry>unused</entry><entry>32 bits</entry><entry>16 bits</entry><entry>16 bits</entry></row><row><entry>010</entry><entry>4</entry><entry>unused</entry><entry>32 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>unused</entry><entry>32 bits</entry></row><row><entry>011</entry><entry>5</entry><entry>unused</entry><entry>32 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="231pt" align="center"/><tbody valign="top"><row><entry>100</entry><entry>reserved</entry></row><row><entry>101</entry><entry>reserved</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="8"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="28pt" align="left"/><colspec colname="4" colwidth="35pt" align="left"/><colspec colname="5" colwidth="28pt" align="left"/><colspec colname="6" colwidth="35pt" align="left"/><colspec colname="7" colwidth="28pt" align="left"/><colspec colname="8" colwidth="42pt" align="left"/><tbody valign="top"><row><entry>110</entry><entry>6</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry></row><row><entry>111</entry><entry>6</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry><entry>16 bits</entry></row><row><entry namest="1" nameend="8" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>DIMFMT field <b>3009</b> effectively defines the loop dimension and loop count bits of stream template register <b>2800</b>. <figref idref="DRAWINGS">FIG. <b>28</b></figref> illustrates the default case when DIMFMT is 111.</p><p id="p-0211" num="0196"><figref idref="DRAWINGS">FIGS. <b>31</b> to <b>35</b></figref> illustrate the definition of bits of the stream template register for other values of DIMFMT. Note the location and meaning of the FLAGS field (<b>3111</b>, <b>3211</b>, <b>3311</b>, <b>3411</b> and <b>3511</b>) are the same for all values of DIMFMT</p><p id="p-0212" num="0197"><figref idref="DRAWINGS">FIG. <b>31</b></figref> illustrates the definition of bits of the stream template register <b>3100</b> for a DIMFMT value of 000. For a DIMFMT value of 000, there are three loops: loop0, loop2 and loop4. For loop0 ICNT0 field <b>3101</b> includes bits <b>0</b> to <b>31</b> and DIM0 field equals ELEM_BYTES. For loop2 ICNT2 field <b>3102</b> includes bits <b>32</b> to <b>63</b> and DIM2 field <b>3121</b> includes bits <b>160</b> to <b>191</b>. For loop4 INTC4 field <b>3103</b> includes bits <b>64</b> to <b>95</b> and DIM4 field <b>3122</b> includes bits <b>192</b> to <b>223</b>.</p><p id="p-0213" num="0198"><figref idref="DRAWINGS">FIG. <b>32</b></figref> illustrates the definition of bits of the stream template register <b>3200</b> for a DIMFMT value of 001. For a DIMFMT value of 001, there are four loops: loop0, loop1, loop2 and loop4. For loop0 ICNT0 field <b>3201</b> includes bits <b>0</b> to <b>16</b> and DIM0 field equals ELEM_BYTES. For loop1 ICNT1 field <b>3202</b> includes bits <b>16</b> to <b>31</b> and DIM1 field <b>3223</b> includes bits <b>224</b> to <b>255</b>. For loop2 INTC2 field <b>3203</b> includes bits <b>32</b> to <b>63</b> and DIM2 field <b>3221</b> includes bits <b>160</b> to <b>191</b>. For loop4 INTC4 field <b>3204</b> includes bits <b>64</b> to <b>95</b> and DIM4 field <b>3222</b> includes bits <b>192</b> to <b>223</b>.</p><p id="p-0214" num="0199"><figref idref="DRAWINGS">FIG. <b>33</b></figref> illustrates the definition of bits of the stream template register <b>3300</b> for a DIMFMT value of 010. For a DIMFMT value of 010, there are four loops: loop0, loop2, loop3 and loop4. For loop0 ICNT0 field <b>3301</b> includes bits <b>0</b> to <b>32</b> and DIM0 field equals ELEM_BYTES. For loop2 ICNT2 field <b>3302</b> includes bits <b>32</b> to <b>47</b> and DIM2 field <b>3321</b> includes bits <b>160</b> to <b>191</b>. For loop3 INTC3 field <b>3303</b> includes bits <b>48</b> to <b>63</b> and DIM3 field <b>3323</b> includes bits <b>224</b> to <b>255</b>. For loop4 INTC4 field <b>3304</b> includes bits <b>64</b> to <b>95</b> and DIM4 field <b>3322</b> includes bits <b>192</b> to <b>223</b>.</p><p id="p-0215" num="0200"><figref idref="DRAWINGS">FIG. <b>34</b></figref> illustrates the definition of bits of the stream template register <b>3400</b> for a DIMFMT value of 011. For a DIMFMT value of 011, there are five loops: loop0, loop1, loop2, loop3 and loop4. For loop0 ICNT0 field <b>3401</b> includes bits <b>0</b> to <b>15</b> and DIM0 field equals ELEM_BYTES. For loop1 ICNT1 field <b>3402</b> includes bits <b>16</b> to <b>31</b> and DIM1 field <b>3421</b> includes bits <b>144</b> to <b>159</b>. For loop2 ICNT2 field <b>3403</b> includes bits <b>32</b> to <b>47</b> and DIM2 field <b>3221</b> includes bits <b>160</b> to <b>191</b>. For loop3 INTC3 field <b>3404</b> includes bits <b>48</b> to <b>63</b> and DIM3 field <b>3424</b> includes bits <b>224</b> to <b>255</b>. For loop4 INTC4 field <b>3405</b> includes bits <b>64</b> to <b>95</b> and DIM4 field <b>3423</b> includes bits <b>192</b> to <b>223</b>.</p><p id="p-0216" num="0201"><figref idref="DRAWINGS">FIG. <b>35</b></figref> illustrates the definition of bits of the stream template register <b>3500</b> for a DIMFMT value of 101. For a DIMFMT value of 110, there are six loops: loop0, loop1, loop2, loop3, loop4 and loop5. For loop0 ICNT0 field <b>3501</b> includes bits <b>0</b> to <b>15</b> and DIM0 field equals ELEM_BYTES. For loop1 ICNT1 field <b>3502</b> includes bits <b>16</b> to <b>31</b> and DIM1 field <b>3521</b> includes bits <b>144</b> to <b>159</b>. For loop2 ICNT2 field <b>3503</b> includes bits <b>32</b> to <b>47</b> and DIM2 field <b>3522</b> includes bits <b>160</b> to <b>191</b>. For loop3 INTC3 field <b>3504</b> includes bits <b>48</b> to <b>63</b> and DIM3 field <b>3523</b> includes bits <b>224</b> to <b>255</b>. For loop4 INTC4 field <b>3505</b> includes bits <b>64</b> to <b>79</b> and DIM4 field <b>3523</b> includes bits <b>192</b> to <b>207</b>. For loop5 INTC5 field <b>3506</b> includes bits <b>80</b> to <b>95</b> and DIM5 field <b>3525</b> includes bits <b>208</b> to <b>223</b>.</p><p id="p-0217" num="0202">The DIR bit <b>3010</b> determines the direction of fetch of the inner loop (Loop0). If the DIR bit <b>3010</b> is 0 then Loop0 fetches are in the forward direction toward increasing addresses. If the DIR bit <b>3010</b> is 1 then Loop0 fetches are in the backward direction toward decreasing addresses. The fetch direction of other loops is determined by the sign of the corresponding loop dimension DIM1, DIM2, DIM3, DIM4 and DIM5 which are signed integers.</p><p id="p-0218" num="0203">The CBK0 field <b>3011</b> and the CBK1 field <b>3012</b> control the circular block size upon selection of circular addressing. The manner of determining the circular block size will be more fully described below.</p><p id="p-0219" num="0204">The AM0 field <b>3013</b>, AM1 field <b>3014</b>, AM2 field <b>3015</b>, AM3 field <b>3016</b>, AM4 field <b>3017</b> and AM5 field <b>3018</b> control the addressing mode of a corresponding loop. This permits the addressing mode to be independently specified for each loop. Each of AM0 field <b>3013</b>, AM1 field <b>3014</b>, AM2 field <b>3015</b>, AM3 field <b>3016</b>, AM4 field <b>3017</b> and AM5 field <b>3018</b> are three bits and are decoded as listed in Table 17.</p><p id="p-0220" num="0000"><tables id="TABLE-US-00017" num="00017"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="91pt" align="center"/><colspec colname="2" colwidth="126pt" align="left"/><thead><row><entry namest="1" nameend="2" rowsep="1">TABLE 17</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>AMx field</entry><entry>Meaning</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="91pt" align="char" char="."/><colspec colname="2" colwidth="126pt" align="left"/><tbody valign="top"><row><entry>00</entry><entry>Linear addressing</entry></row><row><entry>01</entry><entry>Circular addressing block </entry></row><row><entry/><entry>size set by CBK0</entry></row><row><entry>10</entry><entry>Circular addressing block </entry></row><row><entry/><entry>size set by CBK0 + CBK1 + 1</entry></row><row><entry>11</entry><entry>reserved</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0221" num="0205">In linear addressing the address advances according to the address arithmetic whether forward or reverse. In circular addressing the address remains within a defined address block. Upon reaching the end of the circular address block the address wraps around to other limit of the block. Circular addressing blocks are typically limited to 2<sup>N </sup>addresses where N is an integer. Circular address arithmetic may operate by cutting the carry chain between bits and not allowing a selected number of most significant bits to change. Thus arithmetic beyond the end of the circular block changes only the least significant bits.</p><p id="p-0222" num="0206">The block size is set as listed in Table 18.</p><p id="p-0223" num="0000"><tables id="TABLE-US-00018" num="00018"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="70pt" align="center"/><colspec colname="2" colwidth="112pt" align="center"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 18</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Encoded Block Size</entry><entry/></row><row><entry/><entry>CBK0 or</entry><entry>Block Size</entry></row><row><entry/><entry>CBK0 + CBK1 + 1</entry><entry>(bytes)</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="70pt" align="char" char="."/><colspec colname="2" colwidth="112pt" align="char" char="."/><tbody valign="top"><row><entry/><entry>0</entry><entry>512</entry></row><row><entry/><entry>1</entry><entry>1 K</entry></row><row><entry/><entry>2</entry><entry>2 K</entry></row><row><entry/><entry>3</entry><entry>4 K</entry></row><row><entry/><entry>4</entry><entry>8 K</entry></row><row><entry/><entry>5</entry><entry>16 K</entry></row><row><entry/><entry>6</entry><entry>32 K</entry></row><row><entry/><entry>7</entry><entry>64 K</entry></row><row><entry/><entry>8</entry><entry>128 K</entry></row><row><entry/><entry>9</entry><entry>256 K</entry></row><row><entry/><entry>10</entry><entry>512 K</entry></row><row><entry/><entry>11</entry><entry>1 M</entry></row><row><entry/><entry>12</entry><entry>2 M</entry></row><row><entry/><entry>13</entry><entry>4 M</entry></row><row><entry/><entry>14</entry><entry>8 M</entry></row><row><entry/><entry>15</entry><entry>16 M</entry></row><row><entry/><entry>16</entry><entry>32 M</entry></row><row><entry/><entry>17</entry><entry>64 M</entry></row><row><entry/><entry>18</entry><entry>128 M</entry></row><row><entry/><entry>19</entry><entry>256 M</entry></row><row><entry/><entry>20</entry><entry>512 M</entry></row><row><entry/><entry>21</entry><entry>1 G</entry></row><row><entry/><entry>22</entry><entry>2 G</entry></row><row><entry/><entry>23</entry><entry>4 G</entry></row><row><entry/><entry>24</entry><entry>8 G</entry></row><row><entry/><entry>25</entry><entry>16 G</entry></row><row><entry/><entry>26</entry><entry>32 G</entry></row><row><entry/><entry>27</entry><entry>64 G</entry></row><row><entry/><entry>28</entry><entry>Reserved</entry></row><row><entry/><entry>29</entry><entry>Reserved</entry></row><row><entry/><entry>30</entry><entry>Reserved</entry></row><row><entry/><entry>31</entry><entry>Reserved</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables><br/>In the preferred embodiment the circular block size is set by the number encoded by CBK0 (first circular address mode 01) or the number encoded by CBK0+CBK1+1 (second circular address mode 10). For example the first circular address mode, the circular address block size can be from 512 bytes to 16 M bytes. For the second circular address mode, the circular address block size can be from 1 K bytes to 64 G bytes. Thus the encoded block size is 2<sup>(B+9) </sup>bytes, where B is the encoded block number which is CBK0 for the first block size (AMx of 01) and CBK0+CBK1+1 for the second block size (AMx of 10).</p><p id="p-0224" num="0207">The central processing unit <b>110</b> exposes the streaming engine to programs through a small number of instructions and specialized registers. A STROPEN instruction opens a stream. The STROPEN command specifies a stream number indicating opening stream 0 or stream 1. The STROPEN command specifies a data register storing the start address of the stream. The STROPEN specifies a stream template register which stores the stream template as described above. The arguments of the STROPEN instruction are listed in Table 19.</p><p id="p-0225" num="0000"><tables id="TABLE-US-00019" num="00019"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="77pt" align="left"/><colspec colname="2" colwidth="119pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" rowsep="1">TABLE 19</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Argument</entry><entry>Description</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>Stream Start</entry><entry>Scalar register storing stream start</entry></row><row><entry/><entry>Address Register</entry><entry>address</entry></row><row><entry/><entry>Steam Number</entry><entry>Stream 0 or Stream 1</entry></row><row><entry/><entry>Stream Template</entry><entry>Vector register storing stream</entry></row><row><entry/><entry>Register</entry><entry>template data</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0226" num="0208">The stream start address register is preferably a register in general scalar register file <b>211</b>. The STROPEN instruction may specify this stream start address register via scr1 field <b>1305</b>. The STROPEN instruction specifies stream 0 or stream 1 by its opcode. The stream template register is preferably a vector register in general vector register file <b>221</b>. The STROPEN instruction may specify this stream template register via scr2/cst field <b>1304</b>. If the specified stream is active the STROPEN instruction closes the prior stream and replaces the stream with the specified stream.</p><p id="p-0227" num="0209">A STRSAVE instruction captures sufficient state information of a specified stream to restart that stream in the future. A STRRSTR instruction restores a previously saved stream. A STRSAVE instruction does not save any of the data of the stream. A STRSAVE instruction saves only metadata. The stream re-fetches stream data in response to a STRRSTR instruction.</p><p id="p-0228" num="0210">Streaming engine <b>2800</b> is in one of three states: Inactive; Active; or Frozen. When inactive the streaming engine does nothing. Any attempt to fetch data from an inactive streaming engine is an error. Until the program opens a stream, the streaming engine is inactive. After the program consumes all the elements in the stream or the program closes the stream, the stream becomes inactive. Programs which use streams explicitly activate and inactivate the streaming engine. The operating environment manages streams across context-switch boundaries via the streaming engine's implicit freeze behavior, coupled with its own explicit save and restore actions.</p><p id="p-0229" num="0211">Active streaming engines have a stream associated with them. Programs can fetch new stream elements from active streaming engines from the corresponding stream head register. A stream remains active until one of the following. When the stream fetches the last element from the stream, it becomes inactive. When program explicitly closes the stream, it becomes inactive. When central processing unit core <b>110</b> responds to an interrupt or exception, the streaming engine freezes. Frozen streaming engines capture all the state necessary to resume the stream where it was when the streaming engine froze. This combined with special instructions to save and restore the frozen stream context, so that operating environments can cleanly switch contexts. Frozen streams reactivate when central processing unit core <b>110</b> returns to the interrupted context.</p><p id="p-0230" num="0212">These stream states are illustrated in <figref idref="DRAWINGS">FIG. <b>36</b></figref>. Each streaming engine is independently in one of three states: inactive state <b>3601</b>; active state <b>3602</b>; or frozen state <b>3603</b>. After reset such as upon initial power on, each stream begins in inactive state <b>3601</b>. Opening an inactive stream changes that stream to active state <b>3602</b>. Closing an active stream returns it to inactive state <b>3601</b>. In the absence of interrupts or exceptions, streams ordinarily do not make other state transitions. To service interrupts or exceptions, the streaming engine may have a third state: frozen state <b>3603</b>. A streaming engine enters frozen state <b>3603</b> from an interrupted active stream.</p><p id="p-0231" num="0213"><figref idref="DRAWINGS">FIG. <b>36</b></figref> illustrates the permitted transitions among the three legal states. When in inactive state <b>3601</b>, a stream open instruction changes that stream to active state <b>3602</b>. When in inactive state <b>3601</b>, receipt of a stream close instruction, receipt of an interrupt or exception, receipt of a return from an interrupt or exception, or receipt of a restore inactive instruction does not change the stream state which remains inactive state <b>3601</b>. When in inactive state <b>3601</b>, receipt of a restore frozen stream instruction, changes that stream to frozen state <b>3603</b>. When in active state <b>3602</b>, receipt of a stream close instruction changes to inactive state <b>3601</b>. When in active state <b>3602</b>, receipt of an interrupt or exception changes the state to frozen state <b>3603</b>. When in frozen state <b>3603</b>, receipt of a stream open instruction or a return from interrupt or exception changes the state to active state <b>3602</b>. If a program opens a new stream over a stream in frozen state <b>3603</b>, the new stream replaces the old stream. Streaming engine <b>2800</b> discards the contents of the previous frozen stream. When in frozen state <b>3603</b>, receipt of a restore inactive instruction changes the state to inactive state <b>3601</b>. When in frozen state <b>3603</b>, receipt of an interrupt or exception or receipt of a return of an interrupt or exception does not change the stream state which remains frozen state <b>3603</b>.</p><p id="p-0232" num="0214">Processor <b>100</b> employs a total of four bits, two bits per stream, defines the state of both streams. One bit per stream resides within the streaming engine <b>2800</b>. The second bit resides within Processor <b>100</b>. <figref idref="DRAWINGS">FIG. <b>37</b></figref> illustrates a portion of task state register <b>3700</b> of processor <b>110</b> storing stream state data. Task state register <b>3700</b> includes TSR.SE0 bit <b>3701</b> and TSR.SE1 bit <b>3702</b>. TSR.SE0 bit <b>3701</b> stores an active/inactive indication for stream 0. TSR.SE1 bit <b>3702</b> stores an active/inactive indication for stream 1. Table 20 shows the coding of these bits.</p><p id="p-0233" num="0000"><tables id="TABLE-US-00020" num="00020"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="28pt" align="center"/><colspec colname="2" colwidth="84pt" align="center"/><colspec colname="3" colwidth="70pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="3" rowsep="1">TABLE 20</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry>TSR bit</entry><entry>SE bit</entry><entry>Stream State</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="28pt" align="char" char="."/><colspec colname="2" colwidth="84pt" align="char" char="."/><colspec colname="3" colwidth="70pt" align="left"/><tbody valign="top"><row><entry/><entry>0</entry><entry>0</entry><entry>inactive</entry></row><row><entry/><entry>0</entry><entry>1</entry><entry>frozen</entry></row><row><entry/><entry>1</entry><entry>0</entry><entry>invalid</entry></row><row><entry/><entry>1</entry><entry>1</entry><entry>active</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0234" num="0215">As shown in Table 20, streaming engine <b>2800</b> internally tracks whether each stream holds a parameter set associated with an active stream. This bit distinguishes an inactive stream from a not-inactive stream. Processor <b>100</b> separately tracks whether it considers each stream active with a dedicated bit per stream in the Task State Register <b>3700</b>. These bits distinguish between active and not-active streams.</p><p id="p-0235" num="0216">A STRCLOSE instruction closes a stream in active state <b>3602</b>. The STRCLOSE command specifies the stream number of the stream to be closed, preferably in the opcode. A STRCLOSE instruction explicitly places the corresponding stream into inactive state <b>3601</b>, flushing any outstanding activity. This includes flushing any buffered contents, and zeroing out stored addresses, counters and tags. Thus a STRCLOSE instruction ends the corresponding stream immediately, allowing a program to prematurely terminate one or both streams. A STRCLOSE instruction does not stall processor <b>100</b>, and does not wait for the stream to finish sending requests.</p><p id="p-0236" num="0217">In the preferred embodiment, processor <b>100</b> and streaming engine <b>2800</b> permit a STRCLOSE instruction referencing a stream in inactive state <b>3601</b> or frozen state <b>3603</b>. This forces streaming engine <b>2800</b> to transition the corresponding into the inactive state <b>3601</b> if the stream is currently frozen. An inactive stream is unchanged. This capability permits cleanup code to blindly issue STRCLOSE instructions to streams to place processor <b>100</b> in a known state.</p><p id="p-0237" num="0218">Multitasking operating environments must be able to context switch the entire state of processor <b>100</b> in order to switch between tasks. This includes the state of both streams. Closing an active stream allows a program to specifically state it no longer needs the stream and the resources associated with it. Closing a frozen stream allows context switching code to clear the state of the frozen stream, so that other tasks do not see it.</p><p id="p-0238" num="0219">In support of multitasking, streaming engine <b>2800</b> allows saving and restoring a stream's state when it is either inactive or frozen. When coupled with the normal behavior of processor <b>100</b> when entering and leaving interrupts, this provides a convenient mechanism for context switching streams in a preemptive multitasking environment. Attempt a save or restore action on a stream in the active state generates an exception. To context switch an active stream, processor <b>100</b> must first take an interrupt or exception. As illustrated in <figref idref="DRAWINGS">FIG. <b>36</b></figref>, this transitions the active stream to frozen state <b>3603</b>.</p><p id="p-0239" num="0220">Processor <b>100</b> and streaming engine <b>2800</b> respond to interrupts (and exceptions) as follows. Processor <b>110</b> copies the TSR <b>3700</b> to ITSR to preserve the state during interrupt/exception handing. Processor <b>100</b> then marks active streams inactive by clearing TSR.SE0 <b>3701</b> and TSR.SE1 <b>3702</b>. Streaming engine <b>2800</b> responds by freezing active streams. To freeze a stream, streaming engine <b>2800</b> takes the following steps. Streaming engine copies the corresponding stream parameters, such as current address and loop counts. Streaming engine <b>2800</b> captures sufficient state to allow restoring the stream later. Streaming engine <b>2800</b> flushes the corresponding internal stream reference queues <b>2815</b> and <b>2825</b>. Streaming engine <b>2800</b> discards any memory requests not yet sent to pTLBs <b>2812</b> and <b>2822</b>. Memory requests which have reached arbiters <b>2831</b> and <b>2832</b> will proceed to level two combined instruction/data cache <b>130</b> but will be marked and the addressed return data will be discarded. Streaming engine <b>2800</b> marks all slots in data storage <b>2816</b> and <b>2826</b> as invalid. This causes all slots to be available for allocation and reuse. If the interrupt handler decides to context switch the stream, it can save the stream state for both streams in the interrupt handler. Interrupts cause the streaming engine to discard the data it currently holds, but preserve sufficient state to restore the stream to the same point in the future.</p><p id="p-0240" num="0221">The interrupt handler can then safely manipulate the state of the streaming engine to perform a context switch if needed. This can be accomplished by a STRSAVE instruction. A STRSAVE instruction copies metadata from the corresponding stream to a set of data registers, preferably global vector registers <b>231</b>. Both the STRSAVE and STRRSTR use these registers in their operation. The STRSAVE and STRRSTR instructions employ the following arguments: the stream number 0 or 1; a segment number; and a base register number. The four segments of saved stream data are preferably stored in a pair of adjacent data registers in global vector register file <b>231</b> starting with the designated base register number. The base register number of the STRSAVE instruction is preferably an even number specifying an even/odd register pair.</p><p id="p-0241" num="0222"><figref idref="DRAWINGS">FIG. <b>38</b></figref> illustrates the segment coding of the STRSAVE and STRRSTR instructions according to the preferred embodiment of this invention. As shown in <figref idref="DRAWINGS">FIG. <b>38</b></figref> the data to be stored is divided into four segments. Segment 0 stores the contents of the stream template <b>3801</b> for this stream. This stream template is encoded as described above in conjunction with <figref idref="DRAWINGS">FIGS. <b>29</b> and <b>30</b></figref>, and Tables 6 and 7, and the alternate embodiments illustrated in <figref idref="DRAWINGS">FIGS. <b>31</b> to <b>35</b></figref>. Segment 1 stores: the remaining iterations of loop0 IC in field <b>3811</b>, loop1 I1 in field <b>3812</b>, loop2 I2 in field <b>3813</b>, loop3 I3 in field <b>3814</b>, loop4 I4 in field <b>3815</b> and loop5 I5 in field <b>3816</b>. Segment 1 field <b>3817</b> is unused. Segment 1 field <b>3818</b> is IFLAGS as described above in conjunction with <figref idref="DRAWINGS">FIG. <b>30</b></figref> and Table 7. Segment 1 field <b>3819</b> is the current address of loop 5 ADDR5. Segment 2 stores: the current address of loop 0 ADDR0 in field <b>3821</b>, loop 1 ADDR1 in field <b>3823</b>, loop 3 ADDR2 in field <b>3824</b>, loop 3 ADDR 3 in field <b>3825</b> and loop 4 ADDR4 in field <b>3825</b>. Segment 2 field <b>3822</b> is unused. Segment 3 field <b>3831</b> is unused in the current embodiment and reserved for future use. In the preferred embodiment ADDR0 field <b>3821</b> is 49 bits and ADDR1 field <b>3823</b>, ADDR2 field <b>3824</b>, ADDR 3 field <b>3825</b>, ADDR4 field <b>3825</b> and ADDR5 field <b>3819</b> are all 48 bits. In the preferred embodiment ADDR1 field <b>3823</b>, ADDR2 field <b>3824</b>, ADDR 3 field <b>3825</b>, ADDR4 field <b>3825</b> and ADDR5 field <b>3819</b> have an implied most significant bit (bit <b>48</b>) the same as the most significant bit of ADDR0 field <b>3821</b>.</p><p id="p-0242" num="0223">The above description of the STRSAVE and STRRSTR register fields assume the six loop embodiment where DIMFMT field <b>3009</b> specifies 6 loops (DIMFMT <b>110</b> or <b>111</b>). Those skilled in the art would understand how to modify the above description to handle other number of loops. The address fields are unchanged based upon the number of loops corresponding to the DIMFMT field <b>3009</b> value. The loop counts I0 field <b>3811</b>, I1 field <b>3812</b>, I2 field <b>3813</b>, I3 field <b>3814</b>, I4 field <b>3815</b> and I5 field <b>3816</b> may be combined in accordance with the value of DIMFMT field <b>3009</b>.</p><p id="p-0243" num="0224">The remaining loop iterations and current loop addresses stored in <figref idref="DRAWINGS">FIG. <b>38</b></figref> are produced by address generators <b>2811</b> and <b>2821</b>. <figref idref="DRAWINGS">FIG. <b>39</b></figref> illustrates a partial schematic view of address generator <b>2811</b>. Address generator <b>2811</b> forms an address for fetching a next element in the defined stream of the corresponding streaming engine. Start address register <b>3901</b> stores a start address of the data stream. As previously described, start address register <b>3901</b> is preferably a scalar register in global scalar register file <b>211</b> designated by the STROPEN instruction that opened the corresponding stream. As known in the art, this start address may be copied from the specified scalar register and stored locally at the corresponding address generator <b>2811</b>/<b>2821</b>. A first loop of the stream employs Loop0 count register <b>3911</b>, adder <b>3912</b>, multiplier <b>3913</b> and comparator <b>3914</b>. Loop0 count register <b>3911</b> stores the working copy of the iteration count of the first loop (Loop0). For each iteration of Loop0 adder <b>3912</b>, as triggered by the Next Address signal, adds 1 to the loop count, which is stored back in Loop0 count register <b>3911</b>. Multiplier <b>3913</b> multiplies the current loop count and the quantity ELEM_BYTES. ELEM_BYTES is the size of each data element in the loop in bytes. Loop0 traverses data elements physically contiguous in memory with an iteration step size of ELEM_BYTES.</p><p id="p-0244" num="0225">Comparator <b>3914</b> compares the count stored in Loop0 count register <b>3911</b> (after incrementing by adder <b>3913</b>) with the value of ICNT0 <b>2901</b> from the corresponding stream template register <b>2900</b>. When the output of adder <b>3912</b> equals the value of ICNT0 <b>2910</b> of the stream template register <b>2900</b>, an iteration of Loop0 is complete. Comparator <b>3914</b> generates an active Loop0 End signal. Loop0 count register <b>3911</b> is reset to 0 and an iteration of the next higher loop, in this case Loop1, is triggered.</p><p id="p-0245" num="0226">Circuits for the higher loops (Loop1, Loop2, Loop3, Loop4 and Loop5) are similar to that illustrated in <figref idref="DRAWINGS">FIG. <b>39</b></figref>. Each loop includes a corresponding working loop count register, adder, multiplier and comparator. The adder of each loop is triggered by the loop end signal of the prior loop. The second input to each multiplier is the corresponding dimension DIM1, DIM2, DIM3, DIM4 and DIM5 of the corresponding stream template. The comparator of each loop compares the working loop register count with the corresponding iteration value ICNT1, ICTN2, ICTN3, ICNT4 and ICTN5 of the corresponding stream template register <b>2900</b>. A loop end signal generates an iteration of the next higher loop. A loop end signal from loop5 ends the stream.</p><p id="p-0246" num="0227"><figref idref="DRAWINGS">FIG. <b>39</b></figref> illustrates the generation of loop0 count. Loop0 count equals the updated data stored in the corresponding working count register <b>3911</b>. Loop0 count is updated on each change of working loop0 count register <b>3911</b>. The loop counts for the higher loops (Loop1, Loop2, Loop3, Loop4 and Loop5) are similarly generated.</p><p id="p-0247" num="0228"><figref idref="DRAWINGS">FIG. <b>39</b></figref> illustrates the generation of loop0 address. Loop0 address equals the data output from multiplier <b>3913</b>. Loop0 address is updated on each change of working loop0 count register <b>3911</b>. Similar circuits for Loop1, Loop2, Loop3, Loop4 and Loop5 produce corresponding loop addresses.</p><p id="p-0248" num="0229">It is known in the art that any count such as illustrated in <figref idref="DRAWINGS">FIG. <b>39</b></figref> may be embodied as count down or count up. <figref idref="DRAWINGS">FIG. <b>39</b></figref> illustrates a count up embodiments. Those skilled in the art would understand how to modify initialization and comparisons to embody this invention in count down circuits. Additionally, those skilled in the art would understand how to modify the comparisons to embody the addressing modes described.</p><p id="p-0249" num="0230">An interrupt handler will generally employ a STRSAVE instruction for each stream active upon the interrupt. If the interrupt handler needs to use the STRSAVE target registers, the interrupt handler should save these registers to memory, perform the interrupt handling, restore the stream data to these registers and exceute a corresponding STRRSTR instruction to return data to the corresponding stream hardware. At this point the stream is in frozen state <b>3603</b>. Upon execution of a return interrupt, this stream transitions from frozen state <b>3603</b> to active state <b>3602</b>. Stream operation in this stream resumes following the last fetched stream data element. Storing the stream state from registers to memory not only permits the interrupt handler to use the registers, it permits the interrupt handler to use the stream engine hardware in the interrupt handler. This process is similar to the process used when an interrupt handler needs to use any other resource of processor <b>100</b>.</p><p id="p-0250" num="0231">To support nested interrupts on processor <b>100</b>, the interrupt handler must save ITSR and the interrupt return pointer before re-enabling interrupts, and must restore ITSR and the interrupt return pointer before returning from interrupts. This action preserves the stream state data in ITSR.SEn, enabling TSR.SEn to restore the stream states correctly when returning to the interrupted code.</p><p id="p-0251" num="0232">Recall that each stream enters the frozen state <b>3603</b> upon an interrupt or exception. As described above this retains the stream state in stream engine <b>2800</b> hardware. Upon return from interrupt the stream can restart from its previous position in the stream before the interrupt by automatic entry into active state <b>3603</b>. This occurs in the absence of explicit STRSAVE and STRRSTR instructions. An interrupt handler needs to further save stream data employing a STRSAVE instruction and restore the stream state employing a STRRSTR instruction only if the interrupt handler uses the stream hardware. For nested interrupts, the interrupt service routine need employ the STRSAVE and STRRSTR instructions only if that level interrupt handler uses the streaming engine hardware.</p><p id="p-0252" num="0233">Streaming engine <b>2800</b> preferably does not support saving a state while the stream is active. Thus the STRSAVE instruction requires the stream to be inactive or frozen. If a program attempts to STRSAVE an active stream, the processor <b>100</b> catches the error before streaming engine <b>2800</b> sees it and signals an exception.</p><p id="p-0253" num="0234"><figref idref="DRAWINGS">FIG. <b>40</b></figref> is a partial schematic diagram <b>4000</b> illustrating the stream input operand coding described above. <figref idref="DRAWINGS">FIG. <b>40</b></figref> illustrates decoding src1 field <b>1305</b> of one instruction of a corresponding src1 input of functional unit <b>4020</b>. These same circuits are duplicated for src2/cst field <b>1304</b> and the src2 input of functional unit <b>4020</b>. In addition, these circuits are duplicated for each instruction within an execute packet that can be dispatched simultaneously.</p><p id="p-0254" num="0235">Instruction decoder <b>113</b> receives bits <b>13</b> to <b>17</b> comprising src1 field <b>1305</b> of an instruction. The opcode field opcode field (bits <b>4</b> to <b>12</b> for all instructions and additionally bits <b>28</b> to <b>31</b> for unconditional instructions) unambiguously specifies a corresponding functional unit <b>4020</b>. In this embodiment functional unit <b>4020</b> could be L2 unit <b>241</b>, S2 unit <b>242</b>, M2 unit <b>243</b>, N2 unit <b>244</b> or C unit <b>245</b>. The relevant part of instruction decoder <b>113</b> illustrated in <figref idref="DRAWINGS">FIG. <b>40</b></figref> decodes src1 bit field <b>1305</b>. Sub-decoder <b>4011</b> determines whether src1 bit field <b>1305</b> is in the range from 00000 to 01111. If this is the case, sub-decoder <b>4011</b> supplies a corresponding register number to global vector register file <b>231</b>. In this example this register field is the four least significant bits of src1 bit field <b>1305</b>. Global vector register file <b>231</b> recalls data stored in the register corresponding to this register number and supplies this data to the src1 input of functional unit <b>4020</b>. This decoding is generally known in the art.</p><p id="p-0255" num="0236">Sub-decoder <b>4012</b> determines whether src1 bit field <b>1305</b> is in the range from 10000 to 10111. If this is the case, sub-decoder <b>4012</b> supplies a corresponding register number to the corresponding local vector register file. If the instruction is directed to L2 unit <b>241</b> or S2 unit <b>242</b>, the corresponding local vector register file is local vector register field <b>232</b>. If the instruction is directed to M2 unit <b>243</b>, N2 unit <b>244</b> or C unit <b>245</b>, the corresponding local vector register file is local vector register field <b>233</b>. In this example this register field is the three least significant bits of src1 bit field <b>1305</b>. Local vector register file <b>231</b> recalls data stored in the register corresponding to this register number and supplies this data to the src1 input of functional unit <b>4020</b>. The corresponding local vector register file <b>232</b>/<b>233</b> recalls data stored in the register corresponding to this register number and supplies this data to the src1 input of functional unit <b>4020</b>. This decoding is generally known in the art.</p><p id="p-0256" num="0237">Sub-decoder <b>4013</b> determines whether src1 bit field <b>1305</b> is 11100. If this is the case, sub-decoder <b>4013</b> supplies a stream 0 read signal to streaming engine <b>2800</b>. Streaming engine <b>2800</b> then supplies stream 0 data stored in holding register <b>2818</b> to the src1 input of functional unit <b>4020</b>.</p><p id="p-0257" num="0238">Sub-decoder <b>4014</b> determines whether src1 bit field <b>1305</b> is 11101. If this is the case, sub-decoder <b>4014</b> supplies a stream 0 read signal to streaming engine <b>2800</b>. Streaming engine <b>2800</b> then supplies stream 0 data stored in holding register <b>2818</b> to the src1 input of functional unit <b>4020</b>. Sub-decoder <b>4014</b> also supplies an advance signal to stream 0. As previously described, streaming engine <b>2800</b> advances to store the next sequential vector of data elements of stream 0 in holding register <b>2818</b>.</p><p id="p-0258" num="0239">Sub-decoder <b>4015</b> determines whether src1 bit field <b>1305</b> is 11110. If this is the case, sub-decoder <b>4015</b> supplies a stream 1 read signal to streaming engine <b>2800</b>. Streaming engine <b>2800</b> then supplies stream 1 data stored in holding register <b>2828</b> to the src1 input of functional unit <b>4020</b>.</p><p id="p-0259" num="0240">Sub-decoder <b>4016</b> determines whether src1 bit field <b>1305</b> is 11111. If this is the case, sub-decoder <b>4016</b> supplies a stream 1 read signal to streaming engine <b>2800</b>. Streaming engine <b>2800</b> then supplies stream 1 data stored in holding register <b>2828</b> to the src1 input of functional unit <b>4020</b>. Sub-decoder <b>4014</b> also supplies an advance signal to stream 1. As previously described, streaming engine <b>2800</b> advances to store the next sequential vector of data elements of stream 1 in holding register <b>2828</b>.</p><p id="p-0260" num="0241">Similar circuits are used to select data supplied to scr2 input of functional unit <b>4002</b> in response to the bit coding of src2/cst field <b>1304</b>. The src2 input of functional unit <b>4020</b> may be supplied with a constant input in a manner described above.</p><p id="p-0261" num="0242">The exact number of instruction bits devoted to operand specification and the number of data registers and streams are design choices. Those skilled in the art would realize that other number selections that described in the application are feasible. In particular, the specification of a single global vector register file and omission of local vector register files is feasible. This invention employs a bit coding of an input operand selection field to designate a stream read and another bit coding to designate a stream read and advancing the stream.</p><p id="p-0262" num="0243">While this specification contains many specifics, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p><p id="p-0263" num="0244">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results unless such order is recited in one or more claims. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230004391A1-20230105-M00001.NB"><img id="EMI-M00001" he="7.79mm" wi="76.20mm" file="US20230004391A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A device comprising:<claim-text>a processing core that includes a register file;</claim-text><claim-text>a data stream retrieval circuit coupled to the processing core that includes a set of loop counter circuits; and</claim-text><claim-text>a cache memory coupled to the data stream retrieval circuit and configured to store a data stream, wherein:<claim-text>the processing core is configured to:<claim-text>provide a stream open command that specifies the data stream using a set of loops;</claim-text><claim-text>detect an interrupt; and</claim-text><claim-text>based on the interrupt, provide a stream save command; and</claim-text></claim-text><claim-text>the data stream retrieval circuit is configured to:<claim-text>based on the stream open command:<claim-text>retrieve a first portion of the data stream from the cache memory using the set of loop counter circuits; and</claim-text><claim-text>provide the first portion of the data stream to the processing core; and</claim-text></claim-text><claim-text>based on the stream save command, store a status of the set of loop counter circuits in the register file.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the processing core is configured to provide a stream resume command; and</claim-text><claim-text>the data stream retrieval circuit is configured to, based on the stream resume command:<claim-text>restore a state of the set of loop counter circuits based on the status stored in the register file;</claim-text><claim-text>retrieve a second portion of the data stream from the cache memory using the set of loop counter circuits; and</claim-text><claim-text>provide the second portion of the data stream to the processing core.</claim-text></claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data stream retrieval circuit is configured to, based on the interrupt:<claim-text>discard a second portion of the data stream that has been retrieved from the cache memory and not provided to the processing core; and</claim-text><claim-text>discard a memory request associated with a third portion of the data stream that has not been retrieved from the cache memory.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the stream open command specifies a stream template for the data stream; and</claim-text><claim-text>the data stream retrieval circuit is configured to, based on the stream save command, store the stream template in the register file.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the cache memory is a level-two (L2) cache memory.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the data stream retrieval circuit is configured to provide a plurality of data streams concurrently; and</claim-text><claim-text>the stream save command specifies the data stream from among the plurality of data streams.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the interrupt is associated with a context switch.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing core is further configured to:<claim-text>detect an exception; and</claim-text><claim-text>based on the exception, provide the stream save command.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The device of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the processing core includes a task state register configured to store a state of the data stream; and</claim-text><claim-text>the processing core is configured to modify the state of the data stream in the task state register from active to frozen based on the interrupt.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the processing core is configured to modify the state of the data stream in the task state register from frozen to active based on completion of handling of the interrupt.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A device comprising:<claim-text>a processing core that includes a register file;</claim-text><claim-text>a data stream retrieval circuit coupled to the processing core that includes a set of loop counter circuits; and</claim-text><claim-text>a cache memory coupled to the data stream retrieval circuit and configured to store a data stream, wherein:<claim-text>the processing core is configured to:<claim-text>provide a stream open command that specifies the data stream using a set of loops;</claim-text><claim-text>detect an exception; and</claim-text><claim-text>based on the exception, provide a stream save command; and</claim-text></claim-text><claim-text>the data stream retrieval circuit is configured to:<claim-text>based on the stream open command:<claim-text>retrieve a first portion of the data stream from the cache memory using the set of loop counter circuits; and</claim-text><claim-text>provide the first portion of the data stream to the processing core; and</claim-text></claim-text><claim-text>based on the stream save command, store a status of the set of loop counter circuits in the register file.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the processing core is configured to provide a stream resume command; and</claim-text><claim-text>the data stream retrieval circuit is configured to, based on the stream resume command:<claim-text>restore a state of the set of loop counter circuits based on the status stored in the register file;</claim-text><claim-text>retrieve a second portion of the data stream from the cache memory using the set of loop counter circuits; and</claim-text><claim-text>provide the second portion of the data stream to the processing core.</claim-text></claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the data stream retrieval circuit is configured to, based on the exception:<claim-text>discard a second portion of the data stream that has been retrieved from the cache memory and not provided to the processing core; and</claim-text><claim-text>discard a memory request associated with a third portion of the data stream that has not been retrieved from the cache memory.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The device of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the cache memory is a level-two (L2) cache memory.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A method comprising:<claim-text>receiving a stream open command that specifies a data stream;</claim-text><claim-text>based on the stream open command, retrieving a first portion the data stream from a cache memory using a set of loop counter circuits to determine a first set of memory addresses associated with the first portion of the data stream;</claim-text><claim-text>providing the first portion of the data stream to a processing core;</claim-text><claim-text>detecting an event;</claim-text><claim-text>receiving a stream save command based on the event; and</claim-text><claim-text>based on the stream save command, storing a status of the set of loop counter circuits in a register file.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref> further comprising:<claim-text>receiving a stream restore command; and</claim-text><claim-text>based on the stream restore command, restore a state of the set of loop counter circuits based on the status stored in the register file.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref> further comprising, based on the event:<claim-text>discarding a second portion of the data stream that has been retrieved from the cache memory and not provided to the processing core; and</claim-text><claim-text>discarding a memory request associated with a third portion of the data stream that has not been retrieved from the cache memory.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein:<claim-text>the stream open command specifies a stream template for the data stream; and</claim-text><claim-text>the method further comprises, based on the stream save command, storing the stream template in the register file.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the cache memory is a level-two (L2) cache memory.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the event includes an interrupt or an exception.</claim-text></claim></claims></us-patent-application>