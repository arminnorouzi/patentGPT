<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007246A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007246</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17848054</doc-number><date>20220623</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>117</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>132</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>117</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>132</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>3</main-group><subgroup>04</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">EXTERNAL ATTENTION IN NEURAL NETWORK-BASED VIDEO CODING</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63216923</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Lemon, Inc.</orgname><address><city>Grand Cayman</city><country>KY</country></address></addressbook><residence><country>KY</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Li</last-name><first-name>Yue</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Kai</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Zhang</last-name><first-name>Li</first-name><address><city>San Diego</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method implemented by a video coding apparatus includes applying a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample. The NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input. The method also includes performing a conversion between a video media file and a bitstream based on the filtered sample that was generated.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="134.87mm" wi="133.86mm" file="US20230007246A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="153.75mm" wi="135.89mm" file="US20230007246A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="171.70mm" wi="152.57mm" file="US20230007246A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="179.15mm" wi="145.88mm" file="US20230007246A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="246.21mm" wi="154.26mm" file="US20230007246A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="167.64mm" wi="152.65mm" file="US20230007246A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="178.56mm" wi="148.17mm" file="US20230007246A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="131.49mm" wi="141.73mm" file="US20230007246A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="237.41mm" wi="149.94mm" file="US20230007246A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="176.36mm" wi="114.89mm" orientation="landscape" file="US20230007246A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="122.68mm" wi="109.64mm" file="US20230007246A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="214.29mm" wi="153.75mm" file="US20230007246A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="97.62mm" wi="101.68mm" file="US20230007246A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="163.41mm" wi="158.50mm" file="US20230007246A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="214.29mm" wi="153.75mm" file="US20230007246A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="166.12mm" wi="94.66mm" orientation="landscape" file="US20230007246A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="98.98mm" wi="121.07mm" file="US20230007246A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="165.44mm" wi="123.02mm" orientation="landscape" file="US20230007246A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="245.36mm" wi="155.79mm" orientation="landscape" file="US20230007246A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="237.66mm" wi="157.14mm" orientation="landscape" file="US20230007246A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="105.33mm" wi="140.55mm" file="US20230007246A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This patent application claims the benefit of U.S. Provisional Patent Application No. 63/216,923 filed Jun. 30, 2021, by Lemon, Inc., and titled &#x201c;External Attenuation In Neural Network-Based Coding Tools For Video Coding,&#x201d; which is hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure is generally related to image and video coding and decoding.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Digital video accounts for the largest bandwidth use on the internet and other digital communication networks. As the number of connected user devices capable of receiving and displaying video increases, it is expected that the bandwidth demand for digital video usage will continue to grow.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">The disclosed aspects/embodiments provide one or more neural network (NN) filter models trained as coding tools to improve the efficiency of video coding. The NN-based coding tools may be used to replace or enhance one or more modules implemented by a video coder/decoder (a.k.a., codec). For example, a NN model can be trained to provide an additional intra prediction mode, an additional inter prediction mode, a transform kernel, and/or a loop filter. Further, a NN model can be generated or designed by using external information, such as prediction, split, a quantization parameter (QP), and the like, as attention mechanism(s).</p><p id="p-0006" num="0005">A first aspect relates to a method implemented by a coding apparatus. The method includes applying a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input. The method also includes performing a conversion between a video media file and a bitstream based on the filtered sample that was generated.</p><p id="p-0007" num="0006">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the coding parameter input comprises one or more selected from a group consisting of: a partitioning scheme for the video unit; a prediction mode of the video unit; a quantization parameter associated with the video unit; and a boundary strength parameter for a boundary of the video unit.</p><p id="p-0008" num="0007">Optionally, in any of the preceding aspects, another implementation of the aspect provides extracting features from the coding parameter input using convolutional layers of the NN filter; and using the extracted features as an attention in the NN filter model.</p><p id="p-0009" num="0008">Optionally, in any of the preceding aspects, another implementation of the aspect provides that an intermediate feature map of the NN filter model is to be recalibrated by the attention, and that the attention is obtained by concatenating the coding parameter input with the intermediate feature map to provide a concatenated result, and feeding the concatenated result into the convolutional layers of the NN filter.</p><p id="p-0010" num="0009">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the attention is obtained using a two-layer convolutional neural network, and that the attention is a single-channel feature map having a spatial resolution that is the same as a spatial resolution of an intermediate feature map of the NN filter model to be recalibrated by the attention.</p><p id="p-0011" num="0010">Optionally, in any of the preceding aspects, another implementation of the aspect provides recalibrating intermediate feature maps of the NN filter model using the attention, where the intermediate feature maps of the NN filter model are given as G, where G&#x3f5;R<sup>N&#xd7;W&#xd7;H</sup>, where N is a channel number, W is a channel width, and H is a channel height, and where the obtained attention is given as A, where A&#x3f5;R<sup>W&#xd7;H</sup>.</p><p id="p-0012" num="0011">Optionally, in any of the preceding aspects, another implementation of the aspect provides that 4 represents the recalibrated intermediate feature maps, and that applying the attention comprises providing the recalibrated intermediate feature maps according to &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;A<sup>j,k</sup>, where 1&#x2264;i&#x2264;N, where 1&#x2264;j&#x2264;W, and where 1&#x2264;k&#x2264;H.</p><p id="p-0013" num="0012">Optionally, in any of the preceding aspects, another implementation of the aspect provides that 4 represents the recalibrated intermediate feature maps, and that applying the attention comprises providing the recalibrated intermediate feature maps according to &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>), where 1&#x2264;i&#x2264;N, where 1&#x2264;j&#x2264;W, where 1&#x2264;k&#x2264;H, and where &#x192; represents a mapping function applied on each element of the attention.</p><p id="p-0014" num="0013">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the mapping function &#x192; comprises a sigmoid function or a hyperbolic tangent function.</p><p id="p-0015" num="0014">Optionally, in any of the preceding aspects, another implementation of the aspect provides that a different A or &#x192; is used for different channels of the intermediate feature maps.</p><p id="p-0016" num="0015">Optionally, in any of the preceding aspects, another implementation of the aspect provides that &#x3d5; represents the recalibrated intermediate feature maps, and that applying the attention comprises providing the recalibrated intermediate feature maps according to &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>)+G<sup>i,j,k</sup>, where 1&#x2264;i&#x2264;N, where 1&#x2264;j&#x2264;W, where 1&#x2264;k&#x2264;H, and where &#x192; represents a mapping function applied on each element of the attention.</p><p id="p-0017" num="0016">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the mapping function &#x192; comprises a sigmoid function or a hyperbolic tangent function.</p><p id="p-0018" num="0017">Optionally, in any of the preceding aspects, another implementation of the aspect provides that a different A or &#x192; is used for different channels of the intermediate feature maps.</p><p id="p-0019" num="0018">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the attention is applied to specified layers inside the NN filter model.</p><p id="p-0020" num="0019">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the NN filter model contains residual blocks, and that the attention is only applied on feature maps from a last layer of each residual block.</p><p id="p-0021" num="0020">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the NN filter is one or more selected from a group consisting of: an adaptive loop filter, a deblocking filter, and a sample adaptive offset filter.</p><p id="p-0022" num="0021">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the conversion comprises generating the bitstream according to the video media file.</p><p id="p-0023" num="0022">Optionally, in any of the preceding aspects, another implementation of the aspect provides that the conversion comprises parsing the bitstream to obtain the video media file.</p><p id="p-0024" num="0023">A second aspect relates to an apparatus for coding video data comprising a processor and a non-transitory memory with instructions thereon, wherein the instructions upon execution by the processor cause the processor to: apply a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input; and convert between a video media file and a bitstream based on the filtered sample that was generated.</p><p id="p-0025" num="0024">A third aspect relates to a non-transitory computer readable medium storing a bitstream of a video that is generated by a method performed by a video processing apparatus. The method performed by the video processing apparatus includes applying a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input; and generating the bitstream based on the filtered sample that was generated.</p><p id="p-0026" num="0025">A fourth aspect relates to a method for storing a bitstream of a video that is performed by a video processing apparatus. The method performed by the video processing apparatus includes applying a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input; and generating the bitstream based on the filtered sample that was generated.</p><p id="p-0027" num="0026">For the purpose of clarity, any one of the foregoing embodiments may be combined with any one or more of the other foregoing embodiments to create a new embodiment within the scope of the present disclosure.</p><p id="p-0028" num="0027">These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0029" num="0028">For a more complete understanding of this disclosure, reference is now made to the following brief description, taken in connection with the accompanying drawings and detailed description, wherein like reference numerals represent like parts.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example of raster-scan slice partitioning of a picture.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example of rectangular slice partitioning of a picture.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of a picture partitioned into tiles, bricks, and rectangular slices.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is an example of coding tree blocks (CTBs) crossing the bottom picture border.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> is an example of CTBs crossing the right picture border.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>4</b>C</figref> is an example of CTBs crossing the right bottom picture border.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example of encoder block diagram.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an illustration of samples within 8&#xd7;8 blocks of samples.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example of pixels involved in filter on/off decision and strong/weak filter selection.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows four one dimensional (1-D) directional patterns for EO sample classification.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows examples of geometry transformation-based adaptive loop filter (GALF) filter shapes.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example of relative coordinates used for the 5&#xd7;5 diamond filter support.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows another example of relative coordinates used for the 5&#xd7;5 diamond filter support.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>12</b>A</figref> is an example architecture of the proposed CNN filter.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>12</b>B</figref> is an example of construction of residual block (ResBlock).</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is an example of a process for generating filtered samples based on a neural network filter model that receives a coding parameter as an input in accordance with various examples.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is an example of applying an attention obtained using external information, such as a coding parameter, on feature maps of a neural network filter model to provide recalibrated feature maps in accordance with various examples.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>15</b>A</figref> is a schematic block diagram of architecture of a neural network filtering method in accordance with various examples, and <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> is a schematic block diagram of an attention residual block used in the architecture of <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> in accordance with various examples.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a block diagram showing an example video processing system.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram of a video processing apparatus.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram that illustrates an example video coding system.</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram illustrating an example of video encoder.</p><p id="p-0052" num="0051"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram illustrating an example of video decoder.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a method for coding video data according to an embodiment of the disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0054" num="0053">It should be understood at the outset that although an illustrative implementation of one or more embodiments are provided below, the disclosed systems and/or methods may be implemented using any number of techniques, whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations, drawings, and techniques illustrated below, including the exemplary designs and implementations illustrated and described herein, but may be modified within the scope of the appended claims along with their full scope of equivalents.</p><p id="p-0055" num="0054">Versatile Video Coding (VVD), also known as H.266, terminology is used in some description only for ease of understanding and not for limiting scope of the disclosed techniques. As such, the techniques described herein are applicable to other video codec protocols and designs also.</p><p id="p-0056" num="0055">This patent document is related to video coding. Specifically, this description is related to a loop filter in image/video coding. The disclosed examples may be applied individually or in various combinations, for video bitstreams coded using existing video coding standards, such as the VVC standard, the High-Efficiency Video Coding (HEVC) standard, or the standards to be finalized (e.g., third-generation Audio Video Coding Standard (AVS3)). The disclosed examples may also be applicable to future video coding standards, future video codecs, or as a post-processing method outside of an encoding/decoding process.</p><p id="p-0057" num="0056">Video coding standards have evolved primarily through the development of the well-known International Telecommunication Union-Telecommunication (ITU-T) and International Organization for Standardization (ISO)/International Electrotechnical Commission (IEC) standards. The ITU-T produced H.261 and H.263, ISO/IEC produced Moving Picture Experts Group (MPEG)-1 and MPEG-4 Visual, and the two organizations jointly produced the H.262/MPEG-2 Video and H.264/MPEG-4 Advanced Video Coding (AVC) and H.265/High Efficiency Video Coding (HEVC) standards.</p><p id="p-0058" num="0057">Since H.262, the video coding standards are based on the hybrid video coding structure wherein temporal prediction plus transform coding are utilized. To explore the future video coding technologies beyond HEVC, Joint Video Exploration Team (JVET) was founded by Video Coding Experts Group (VCEG) and MPEG jointly in 2015. Since then, many new methods have been adopted by JVET and put into the reference software named Joint Exploration Model (JEM).</p><p id="p-0059" num="0058">In April 2018, the Joint Video Expert Team (JVET) between VCEG (Q6/16) and ISO/IEC JTC1 SC29/WG11 (MPEG) was created to work on the VVC standard targeting at fifty percent (50%) bitrate reduction compared to HEVC. VVC version 1 was finalized in July 2020.</p><p id="p-0060" num="0059">Color space and chroma subsampling are discussed. Color space, also known as the color model (or color system), is an abstract mathematical model which simply describes the range of colors as tuples of numbers, typically as 3 or 4 values or color components (e.g., red green blue (RGB)). Basically speaking, color space is an elaboration of the coordinate system and sub-space.</p><p id="p-0061" num="0060">For video compression, the most frequently used color spaces are YCbCr and RGB. YCbCr, Y&#x2032;CbCr, or Y Pb/Cb Pr/Cr, also written as YC<sub>B</sub>C<sub>R </sub>or Y&#x2032;C<sub>B</sub>C<sub>R</sub>, is a family of color spaces used as a part of the color image pipeline in video and digital photography systems. Y&#x2032; is the luma component and CB and CR are the blue-difference and red-difference chroma components. Y&#x2032; (with prime) is distinguished from Y, which is luminance, meaning that light intensity is nonlinearly encoded based on gamma corrected RGB primaries.</p><p id="p-0062" num="0061">Chroma subsampling is the practice of encoding images by implementing less resolution for chroma information than for luma information, taking advantage of the human visual system's lower acuity for color differences than for luminance.</p><p id="p-0063" num="0062">For 4:4:4 chroma subsampling, each of the three Y&#x2032;CbCr components have the same sample rate, thus there is no chroma subsampling. This scheme is sometimes used in high-end film scanners and cinematic post production.</p><p id="p-0064" num="0063">For 4:2:2 chroma subsampling, the two chroma components are sampled at half the sample rate of luma: the horizontal chroma resolution is halved. This reduces the bandwidth of an uncompressed video signal by one-third with little to no visual difference.</p><p id="p-0065" num="0064">For 4:2:0 chroma subsampling, the horizontal sampling is doubled compared to 4:1:1, but as the Cb and Cr channels are only sampled on each alternate line in this scheme, the vertical resolution is halved. The data rate is thus the same. Cb and Cr are each subsampled at a factor of two both horizontally and vertically. There are three variants of 4:2:0 schemes, having different horizontal and vertical siting.</p><p id="p-0066" num="0065">In MPEG-2, Cb and Cr are co-sited horizontally. Cb and Cr are sited between pixels in the vertical direction (sited interstitially). In Joint Photographic Experts Group (JPEG)/JPEG File Interchange Format (JFIF), H.261, and MPEG-1, Cb and Cr are sited interstitially, halfway between alternate luma samples. In 4:2:0 DV, Cb and Cr are co-sited in the horizontal direction. In the vertical direction, they are co-sited on alternating lines.</p><p id="p-0067" num="0066">Definitions of video units are provided. A picture is divided into one or more tile rows and one or more tile columns. A tile is a sequence of coding tree units (CTUs) that covers a rectangular region of a picture. A tile is divided into one or more bricks, each of which consists of a number of CTU rows within the tile. A tile that is not partitioned into multiple bricks is also referred to as a brick. However, a brick that is a true subset of a tile is not referred to as a tile. A slice either contains a number of tiles of a picture or a number of bricks of a tile.</p><p id="p-0068" num="0067">Two modes of slices are supported, namely the raster-scan slice mode and the rectangular slice mode. In the raster-scan slice mode, a slice contains a sequence of tiles in a tile raster scan of a picture. In the rectangular slice mode, a slice contains a number of bricks of a picture that collectively form a rectangular region of the picture. The bricks within a rectangular slice are in the order of brick raster scan of the slice.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example of raster-scan slice partitioning of a picture <b>100</b>, where the picture is divided into twelve tiles <b>102</b> and three raster-scan slices <b>104</b>. As shown, each of the tiles <b>102</b> and slices <b>104</b> contains a number of CTUs <b>106</b>.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example of rectangular slice partitioning of a picture <b>200</b> according to the VVC specification, where the picture is divided into twenty-four tiles <b>202</b> (six tile columns <b>203</b> and four tile rows <b>205</b>) and nine rectangular slices <b>204</b>. As shown, each of the tiles <b>202</b> and slices <b>204</b> contains a number of CTUs <b>206</b>.</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example of a picture <b>300</b> partitioned into tiles, bricks, and rectangular slices according to the VVC specification, where the picture is divided into four tiles <b>302</b> (two tile columns <b>303</b> and two tile rows <b>305</b>), eleven bricks <b>304</b> (the top-left tile contains one brick, the top-right tile contains five bricks, the bottom-left tile contains two bricks, and the bottom-right tile contain three bricks), and four rectangular slices <b>306</b>.</p><p id="p-0072" num="0071">CTU and coding tree block (CTB) sizes are discussed. In VVC, the coding tree unit (CTU) size, which is signaled in a sequence parameter set (SPS) by the syntax element log2_ctu_size_minus2, could be as small as 4&#xd7;4. The sequence parameter set raw byte sequence payload (RBSP) syntax is below.</p><p id="p-0073" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="252pt" align="left"/><colspec colname="2" colwidth="35pt" align="left"/><thead><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>Descriptor</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>seq_parameter_set_rbsp() {</entry><entry/></row><row><entry>&#x2003;sps_decoding_parameter_set_id</entry><entry>u(4)</entry></row><row><entry>&#x2003;sps_video_parameter_set_id</entry><entry>u(4)</entry></row><row><entry>&#x2003;sps_max_sub_layers_minus1</entry><entry>u(3)</entry></row><row><entry>&#x2003;sps_reserved_zero_5bits</entry><entry>u(5)</entry></row><row><entry>&#x2003;profile_tier_level( sps max sub layers minus1)</entry><entry/></row><row><entry>&#x2003;gra_enabled_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;sps_seq_parameter_set_id</entry><entry>ue(v)</entry></row><row><entry>&#x2003;chroma_format_idc</entry><entry>ue(v)</entry></row><row><entry>&#x2003;if( chroma_format_idc = = 3 )</entry><entry/></row><row><entry>&#x2003;&#x2003;separate_colour_plane_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;pic_width_in_luma_samples</entry><entry>ue(v)</entry></row><row><entry>&#x2003;pic_height_in_luma_samples</entry><entry>ue(v)</entry></row><row><entry>&#x2003;conformance_window_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;if( conformance_window_flag) {</entry><entry/></row><row><entry>&#x2003;&#x2003;conf_win_left_offset</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;conf_win_right_offset</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;conf_win_top_offset</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;conf_win_bottom_offset</entry><entry>ue(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;bit_depth_luma_minus8</entry><entry>ue(v)</entry></row><row><entry>&#x2003;bit_depth_chroma_minus8</entry><entry>ue(v)</entry></row><row><entry>&#x2003;log2_max_pic_order_cnt_lsb_minus4</entry><entry>ue(v)</entry></row><row><entry>&#x2003;sps_sub_layer_ordering_info_present flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;for( i = ( sps_sub_layer_ordering_info_present_flag ? 0 : sps max sub layers minus1 );</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;i &#x3c;= sps max sub layers minus1; i++) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_max_dec_pic_buffering_minus1[ i ]</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;sps_max_num_reorder_pics[ i ]</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;sps_max_latency_increase_plus1[ i ]</entry><entry>ue(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;long_term_ref_pics_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;sps_idr_rpl_present_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;rpll_same_as_rplO_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;for( i = 0; i &#x3c; !rpl1_same_as_rpl0_flag ? 2 : 1; i++) {</entry><entry/></row><row><entry>&#x2003;&#x2003;num_ref_pic_lists_in_sps[ i ]</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;for( j = 0; j &#x3c; num_ref_pic_lists_in_sps[ i ]; j++)</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;ref_pic_list_struct( i, j )</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;qtbtt_dual_tree_intra_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;log2_ctu_size_mi nu s2</entry><entry>ue(v)</entry></row><row><entry>&#x2003;log2_min_luma_coding_block_size_minus2</entry><entry>ue(v)</entry></row><row><entry>&#x2003;partition_constraints_override_enabled_flag</entry><entry>u(1)</entry></row><row><entry>&#x2003;sps_log2_diff_min_qt_min_cb_intra_slice_luma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;sps_log2_diff_min_qt_min_cb_inter_slice</entry><entry>ue(v)</entry></row><row><entry>&#x2003;sps_max_mtt_hierarchy_depth_inter_slice</entry><entry>ue(v)</entry></row><row><entry>&#x2003;sps_max_mtt_hierarchy_depth_intra_slice_luma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;if( sps_max_mtt_hierarchy_depth_intra_slice_luma != 0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_bt_min_qt_intra_slice_luma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_tt_min_qt_intra_slice_luma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( sps_max_mtt_hierarchy_depth_inter_slices != 0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_bt_min_qt_inter_slice</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;sps_log2_diff_max_tt_min_qt_inter_slice</entry><entry>ue(v)</entry></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>&#x2003;if( qtbtt_dual_tree_intra_flag) {</entry><entry/></row><row><entry>&#x2003;&#x2003;sps_log2_diff_min_qt_min_cb_intra_slice_chroma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;sps_max_mtt_hierarchy_depth_intra_slice_chroma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;if ( sps_max_mtt_hierarchy_depth_intra_slice_chroma != 0 ) {</entry><entry/></row><row><entry>&#x2003;&#x2003;&#x2003;sps_log2_diff_max_bt_min_qt_intra_slice_chroma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;&#x2003;sps_log2_diff_max_tt_min_qt_intra_slice_chroma</entry><entry>ue(v)</entry></row><row><entry>&#x2003;&#x2003;}</entry><entry/></row><row><entry>&#x2003;}</entry><entry/></row><row><entry>. . . </entry><entry/></row><row><entry>&#x2003;rbsp_trailing_bits( )</entry><entry/></row><row><entry>}</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0074" num="0072">log2_ctu_size_minus2 plus 2 specifies the luma coding tree block size of each CTU.</p><p id="p-0075" num="0073">log2_min_luma_coding_block_size_minus2 plus 2 specifies the minimum luma coding block size.</p><p id="p-0076" num="0074">The variables CtbLog2SizeY, CtbSizeY, MinCbLog2SizeY, MinCbSizeY, MinTbLog2SizeY, MaxTbLog2SizeY, MinTbSizeY, MaxTbSizeY, PicWidthInCtbsY, PicHeightInCtbsY, PicSizeInCtbsY, PicWidthInMinCbsY, PicHeightInMinCbsY, PicSizeInMinCbsY, PicSizeInSamplesY, PicWidthInSamplesC and PicHeightInSamplesC are derived as follows.</p><p id="p-0077" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>CtbLog2Size<i>Y</i>=log2_ctu_size_minus2+2&#x2003;&#x2003;(7-9)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0078" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>CtbSize<i>Y</i>=1&#x3c;&#x3c;CtbLog2Size<i>Y</i>&#x2003;&#x2003;(7-10)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0079" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinCbLog2Size<i>Y</i>=log2_min_luma_coding_block_size_minus2+2&#x2003;&#x2003;(7-11)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0080" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinCbSize<i>Y</i>=1&#x3c;&#x3c;MinCbLog2Size<i>Y</i>&#x2003;&#x2003;(7-12)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0081" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinTbLog2Size<i>Y</i>=2&#x2003;&#x2003;(7-13)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0082" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MaxTbLog2Size<i>Y</i>=6&#x2003;&#x2003;(7-14)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0083" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MinTbSize<i>Y</i>=1&#x3c;&#x3c;MinTbLog2Size<i>Y</i>&#x2003;&#x2003;(7-15)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0084" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>MaxTbSize<i>Y</i>=1&#x3c;&#x3c;MaxTbLog2Size<i>Y</i>&#x2003;&#x2003;(7-16)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0085" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicWidthInCtbs<i>Y</i>=Ceil(pic_width_in_luma_samples&#x2212;CtbSize<i>Y</i>)&#x2003;&#x2003;(7-17)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0086" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicHeightInCtbs<i>Y</i>=Ceil(pic_height_in_luma_samples&#x2212;CtbSize<i>Y</i>)&#x2003;&#x2003;(7-18)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0087" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicSizeInCtbs<i>Y</i>=PicWidthInCtbs<i>Y</i>*PicHeightInCtbs<i>Y</i>&#x2003;&#x2003;(7-19)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0088" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicWidthInMinCbs<i>Y</i>=pic_width_in_luma_samples/MinCbSize<i>Y</i>&#x2003;&#x2003;(7-20)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0089" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicHeightInMinCbs<i>Y</i>=pic_height_in_luma_samples/MinCbSize<i>Y</i>&#x2003;&#x2003;(7-21)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0090" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicSizeInMinCbs<i>Y</i>=PicWidthInMinCbs<i>Y</i>*PicHeightInMinCbs<i>Y</i>&#x2003;&#x2003;(7-22)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0091" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicSizeInSamples<i>Y</i>=pic_width_in_luma_samples*pic_height_in_luma_samples&#x2003;&#x2003; (7-23)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0092" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicWidthInSamples<i>C</i>=pic_width_in_luma_samples/SubWidth<i>C</i>&#x2003;&#x2003;(7-24)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0093" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>PicHeightInSamples<i>C</i>=pic_height_in_luma_samples/SubHeight<i>C</i>&#x2003;&#x2003;(7-25)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0094" num="0075"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is an example of CTBs crossing the bottom picture border. <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> is an example of CTBs crossing the right picture border. <figref idref="DRAWINGS">FIG. <b>4</b>C</figref> is an example of CTBs crossing the right bottom picture border. In <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>C</figref>, K=M, L&#x3c;N; K&#x3c;M, L=N; K&#x3c;M, L&#x3c;N, respectively.</p><p id="p-0095" num="0076">CTUs in a picture <b>400</b> are discussed with reference to <figref idref="DRAWINGS">FIGS. <b>4</b>A-<b>4</b>C</figref>. Suppose the CTB/largest coding unit (LCU) size indicated by M&#xd7;N (typically M is equal to N, as defined in HEVC/VVC), and for a CTB located at picture (or tile or slice or other kinds of types, picture border is taken as an example) border, K&#xd7;L samples are within picture border wherein either K&#x3c;M or L&#x3c;N. For those CTBs <b>402</b> as depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A-<b>4</b>C</figref>, the CTB size is still equal to M&#xd7;N, however, the bottom boundary/right boundary of the CTB is outside the picture <b>400</b>.</p><p id="p-0096" num="0077">The coding flow of a typical video coder/decoder (a.k.a., codec) is discussed. <figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example of encoder block diagram of VVC, which contains three in-loop filtering blocks: deblocking filter (DF), sample adaptive offset (SAO) and adaptive loop filter (ALF). Unlike DF, which uses predefined filters, SAO and ALF utilize the original samples of the current picture to reduce the mean square errors between the original samples and the reconstructed samples by adding an offset and by applying a finite impulse response (FIR) filter, respectively, with coded side information signaling the offsets and filter coefficients. ALF is located at the last processing stage of each picture and can be regarded as a tool trying to catch and fix artifacts created by the previous stages.</p><p id="p-0097" num="0078"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of an encoder <b>500</b>. The encoder <b>500</b> is suitable for implementing the techniques of VVC. The encoder <b>500</b> includes three in-loop filters, namely a deblocking filter (DF) <b>502</b>, a sample adaptive offset (SAO) <b>504</b>, and an ALF <b>506</b>. Unlike the DF <b>502</b>, which uses predefined filters, the SAO <b>504</b> and the ALF <b>506</b> utilize the original samples of the current picture to reduce the mean square errors between the original samples and the reconstructed samples by adding an offset and by applying a FIR filter, respectively, with coded side information signaling the offsets and filter coefficients. The ALF <b>506</b> is located at the last processing stage of each picture and can be regarded as a tool trying to catch and fix artifacts created by the previous stages.</p><p id="p-0098" num="0079">The encoder <b>500</b> further includes an intra prediction component <b>508</b> and a motion estimation/compensation (ME/MC) component <b>510</b> configured to receive input video. The intra prediction component <b>508</b> is configured to perform intra prediction, while the ME/MC component <b>510</b> is configured to utilize reference pictures obtained from a reference picture buffer <b>512</b> to perform inter prediction. Residual blocks from inter prediction or intra prediction are fed into a transform component <b>514</b> and a quantization component <b>516</b> to generate quantized residual transform coefficients, which are fed into an entropy coding component <b>518</b>. The entropy coding component <b>518</b> entropy codes the prediction results and the quantized transform coefficients and transmits the same toward a video decoder (not shown). Quantization components output from the quantization component <b>516</b> may be fed into an inverse quantization component <b>520</b>, an inverse transform component <b>522</b>, and a reconstruction (REC) component <b>524</b>. The REC component <b>524</b> is able to output images to the DF <b>502</b>, the SAO <b>504</b>, and the ALF <b>506</b> for filtering prior to those images being stored in the reference picture buffer <b>512</b>.</p><p id="p-0099" num="0080">The input of the DF <b>502</b> is the reconstructed samples before in-loop filters. The vertical edges in a picture are filtered first. Then the horizontal edges in a picture are filtered with samples modified by the vertical edge filtering process as input. The vertical and horizontal edges in the CTBs of each CTU are processed separately on a coding unit basis. The vertical edges of the coding blocks in a coding unit are filtered starting with the edge on the left-hand side of the coding blocks proceeding through the edges towards the right-hand side of the coding blocks in their geometrical order. The horizontal edges of the coding blocks in a coding unit are filtered starting with the edge on the top of the coding blocks proceeding through the edges towards the bottom of the coding blocks in their geometrical order.</p><p id="p-0100" num="0081"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an illustration <b>600</b> of samples <b>602</b> within 8&#xd7;8 blocks of samples <b>604</b>. As shown, the illustration <b>600</b> includes horizontal and vertical block boundaries on an 8&#xd7;8 grid <b>606</b>, <b>608</b>, respectively. In addition, the illustration <b>600</b> depicts the nonoverlapping blocks of the 8&#xd7;8 samples <b>610</b>, which can be deblocked in parallel.</p><p id="p-0101" num="0082">The boundary decision is discussed. Filtering is applied to 8&#xd7;8 block boundaries. In addition, it must be a transform block boundary or a coding subblock boundary (e.g., due to usage of Affine motion prediction, Alternative temporal motion vector prediction (ATMVP)). For those which are not such boundaries, the filter is disabled.</p><p id="p-0102" num="0083">The boundary strength calculation is discussed. For a transform block boundary/coding subblock boundary, if it is located in the 8&#xd7;8 grid, the transform block boundary/coding subblock boundary may be filtered and the setting of bS[xD<sub>i</sub>][yD<sub>j</sub>] (wherein [xD<sub>i</sub>][yD<sub>j</sub>] denotes the coordinate) for this edge is defined in Table 1 and Table 2, respectively.</p><p id="p-0103" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="287pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Boundary strength (when SPS IBC is disabled)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="203pt" align="left"/><colspec colname="3" colwidth="14pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><tbody valign="top"><row><entry>Priority</entry><entry>Conditions</entry><entry>Y</entry><entry>U</entry><entry>V</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row><row><entry>5</entry><entry>At least one of the adjacent blocks is intra</entry><entry>2</entry><entry>2</entry><entry>2</entry></row><row><entry>4</entry><entry>TU boundary and at least one of the adjacent blocks has non-zero</entry><entry>1</entry><entry>1</entry><entry>1</entry></row><row><entry/><entry>transform coefficients</entry><entry/><entry/><entry/></row><row><entry>3</entry><entry>Reference pictures or number of MVs (1 for uni-prediction, 2 for bi-</entry><entry>1</entry><entry>N/A</entry><entry>N/A</entry></row><row><entry/><entry>prediction) of the adjacent blocks are different</entry><entry/><entry/><entry/></row><row><entry>2</entry><entry>Absolute difference between the motion vectors of same reference</entry><entry>1</entry><entry>N/A</entry><entry>N/A</entry></row><row><entry/><entry>picture that belong to the adjacent blocks is greater than or equal to </entry><entry/><entry/><entry/></row><row><entry/><entry>one integer luma sample</entry><entry/><entry/><entry/></row><row><entry>1</entry><entry>Otherwise</entry><entry>0</entry><entry>0</entry><entry>0</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0104" num="0000"><tables id="TABLE-US-00003" num="00003"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="287pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 2</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Boundary strength (when SPS IBC is enabled)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="5"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="203pt" align="left"/><colspec colname="3" colwidth="14pt" align="center"/><colspec colname="4" colwidth="21pt" align="center"/><colspec colname="5" colwidth="21pt" align="center"/><tbody valign="top"><row><entry>Priority</entry><entry>Conditions</entry><entry>Y</entry><entry>U</entry><entry>V</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row><row><entry>8</entry><entry>At least one of the adjacent blocks is intra</entry><entry>2</entry><entry>2</entry><entry>2</entry></row><row><entry>7</entry><entry>TU boundary and at least one of the adjacent blocks has non-zero</entry><entry>1</entry><entry>1</entry><entry>1</entry></row><row><entry/><entry>transform coefficients</entry><entry/><entry/><entry/></row><row><entry>6</entry><entry>Prediction mode of adjacent blocks is different (e.g., one is IBC, one </entry><entry>1</entry><entry/><entry/></row><row><entry/><entry>is inter)</entry><entry/><entry/><entry/></row><row><entry>5</entry><entry>Both IBC and absolute difference between the motion vectors that</entry><entry>1</entry><entry>N/A</entry><entry>N/A</entry></row><row><entry/><entry>belong to the adjacent blocks is greater than or equal to one integer</entry><entry/><entry/><entry/></row><row><entry/><entry>luma sample</entry><entry/><entry/><entry/></row><row><entry>4</entry><entry>Reference pictures or number of MVs (1 for uni-prediction, 2 for bi-</entry><entry>1</entry><entry>N/A</entry><entry>N/A</entry></row><row><entry/><entry>prediction) of the adjacent blocks are different</entry><entry/><entry/><entry/></row><row><entry>3</entry><entry>Absolute difference between the motion vectors of same reference</entry><entry>1</entry><entry>N/A</entry><entry>N/A</entry></row><row><entry/><entry>picture that belong to the adjacent blocks is greater than or equal to </entry><entry/><entry/><entry/></row><row><entry/><entry>one integer luma sample</entry><entry/><entry/><entry/></row><row><entry>1</entry><entry>Otherwise</entry><entry>0</entry><entry>0</entry><entry>0</entry></row><row><entry namest="1" nameend="5" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0105" num="0084">The deblocking decision for a luma component is discussed.</p><p id="p-0106" num="0085"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example 700 of pixels involved in filter on/off decision and strong/weak filter selection. A wider-stronger luma filter is used only if all of the Condition 1, Condition 2, and Condition 3 are TRUE. The Condition 1 is the &#x201c;large block condition.&#x201d; This condition detects whether the samples at P-side and Q-side belong to large blocks, which are represented by the variable bSidePisLargeBlk and bSideQisLargeBlk, respectively. The bSidePisLargeBlk and bSideQisLargeBlk are defined as follows.</p><p id="p-0107" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>b</i>Side<i>P</i>isLargeBlk=((edge type is vertical and <i>p</i><sub>0 </sub>belongs to CU with width&#x3e;=32)&#x2225;(edge type is horizontal and <i>p</i><sub>0 </sub>belongs to CU with height&#x3e;=32))?TRUE:FALSE<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0108" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>b</i>Side<i>Q</i>isLargeBlk=((edge type is vertical and <i>q</i><sub>0 </sub>belongs to CU with width&#x3e;=32)&#x2225;(edge type is horizontal and <i>q</i><sub>0 </sub>belongs to CU with height&#x3e;=32))?TRUE:FALSE<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0109" num="0086">Based on bSidePisLargeBlk and bSideQisLargeBlk, the Condition 1 is defined as follows.</p><p id="p-0110" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Condition 1=(<i>b</i>Side<i>P</i>isLargeBlk&#x2225;<i>b</i>Side<i>P</i>isLargeBlk)?TRUE:FALSE<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0111" num="0087">Next, if Condition 1 is true, the Condition 2 will be further checked. First, the following variables are derived.</p><p id="p-0112" num="0000"><tables id="TABLE-US-00004" num="00004"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="14pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="168pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>dp0, dp3, dq0, dq3 are first derived as in HEVC</entry></row><row><entry/><entry/><entry>if (p side is greater than or equal to 32)</entry></row><row><entry/><entry/><entry>dp0 = ( dp0 + Abs( p5<sub>0 </sub>&#x2212; 2 * p4<sub>0 </sub>+ p3<sub>0 </sub>) + 1 ) &#x3e;&#x3e; 1</entry></row><row><entry/><entry/><entry>dp3 = ( dp3 + Abs( p5<sub>3 </sub>&#x2212; 2 * p4<sub>3 </sub>+ p3<sub>3 </sub>) + 1 ) &#x3e;&#x3e; 1</entry></row><row><entry/><entry/><entry>if (q side is greater than or equal to 32)</entry></row><row><entry/><entry/><entry>dq0 = ( dq0 + Abs( q5<sub>0 </sub>&#x2212; 2 * q4<sub>0 </sub>+ q3<sub>0 </sub>) + 1 ) &#x3e;&#x3e; 1</entry></row><row><entry/><entry/><entry>dq3 = ( dq3 + Abs( q5<sub>3 </sub>&#x2212; 2 * q4<sub>3 </sub>+ q3<sub>3 </sub>) + 1) &#x3e;&#x3e; 1</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0113" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Condition 2=(<i>d</i>&#x3c;&#x3b2;)?TRUE:FALSE<?in-line-formulae description="In-line Formulae" end="tail"?><ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0088">where d=dp0+dq0+dp3+dq3.</li>    </ul>    </li></ul></p><p id="p-0114" num="0089">If Condition 1 and Condition 2 are valid, whether any of the blocks uses sub-blocks is further checked.</p><p id="p-0115" num="0000"><tables id="TABLE-US-00005" num="00005"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="154pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>If (bSidePisLargeBlk)</entry></row><row><entry/><entry/><entry>If (mode block P == SUBBLOCKMODE)</entry></row><row><entry/><entry/><entry>&#x2003;Sp =5</entry></row><row><entry/><entry/><entry>else</entry></row><row><entry/><entry/><entry>&#x2003;Sp =7</entry></row><row><entry/><entry/><entry>else</entry></row><row><entry/><entry/><entry>&#x2003;Sp = 3</entry></row><row><entry/><entry/><entry>If (bSideQisLargeBlk)</entry></row><row><entry/><entry/><entry>&#x2003;{</entry></row><row><entry/><entry/><entry>If (mode block Q == SUBBLOCKMODE)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;&#x2003;Sq =5</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;else</entry></row><row><entry/><entry/><entry>&#x2003;Sq =7</entry></row><row><entry/><entry/><entry>&#x2003;}</entry></row><row><entry/><entry/><entry>&#x2003;else</entry></row><row><entry/><entry/><entry>&#x2003;Sq = 3</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0116" num="0090">Finally, if both the Condition 1 and Condition 2 are valid, the proposed deblocking method will check the condition 3 (the large block strong filter condition), which is defined as follows.</p><p id="p-0117" num="0091">In the Condition3 StrongFilterCondition, the following variables are derived.</p><p id="p-0118" num="0000"><tables id="TABLE-US-00006" num="00006"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="28pt" align="left"/><colspec colname="1" colwidth="42pt" align="left"/><colspec colname="2" colwidth="147pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>&#x2003;</entry><entry>dpq is derived as in HEVC.</entry></row><row><entry/><entry/><entry>sp<sub>3 </sub>= Abs( p<sub>3 </sub>&#x2212; p<sub>0</sub>), derived as in HEVC</entry></row><row><entry/><entry/><entry>if (p side is greater than or equal to 32)</entry></row><row><entry/><entry/><entry>&#x2003;if(Sp==5)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;sp<sub>3 </sub>= ( sp<sub>3 </sub>+ Abs( p<sub>5 </sub>&#x2212; p<sub>3</sub>) + 1) &#x3e;&#x3e; 1</entry></row><row><entry/><entry/><entry>&#x2003;else</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;sp<sub>3 </sub>= ( sps + Abs( p<sub>7 </sub>&#x2212; p<sub>3</sub>) + 1) &#x3e;&#x3e; 1</entry></row><row><entry/><entry/><entry>sq<sub>3 </sub>= Abs( q<sub>0 </sub>&#x2212; q<sub>3</sub>), derived as in HEVC</entry></row><row><entry/><entry/><entry>if (q side is greater than or equal to 32)</entry></row><row><entry/><entry/><entry>If(Sq==5)</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;sq<sub>3 </sub>= ( sq<sub>3 </sub>+ Abs( q<sub>5 </sub>&#x2212; q<sub>3</sub>) + 1) &#x3e;&#x3e; 1</entry></row><row><entry/><entry/><entry>&#x2003;else</entry></row><row><entry/><entry/><entry>&#x2003;&#x2003;sq<sub>3 </sub>= ( sq<sub>3 </sub>+ Abs( q<sub>7 </sub>&#x2212; q<sub>3</sub>) + 1) &#x3e;&#x3e; 1</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0119" num="0092">As in HEVC, StrongFilterCondition=(dpq is less than ((&#x3b2;&#x3e;&#x3e;2), sp<sub>3</sub>+sq<sub>3 </sub>is less than (3*&#x3b2;&#x3e;&#x3e;5), and Abs(p<sub>0</sub>&#x2212;q<sub>0</sub>) is less than (5*t<sub>C</sub>+1)&#x3e;&#x3e;1)?TRUE:FALSE.</p><p id="p-0120" num="0093">A stronger deblocking filter for luma (designed for larger blocks) is discussed.</p><p id="p-0121" num="0094">Bilinear filter is used when samples at either one side of a boundary belong to a large block. A sample belonging to a large block is defined as when the width&#x3e;=32 for a vertical edge, and when height&#x3e;=32 for a horizontal edge.</p><p id="p-0122" num="0095">The bilinear filter is listed below.</p><p id="p-0123" num="0096">Block boundary samples p<sub>i </sub>for i=0 to Sp&#x2212;1 and q<sub>i </sub>for j=0 to Sq&#x2212;1 (pi and qi are the i-th sample within a row for filtering vertical edge, or the i-th sample within a column for filtering horizontal edge) in HEVC deblocking described above) are then replaced by linear interpolation as follows.</p><p id="p-0124" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i><sub>i</sub>&#x2032;=(&#x192;<sub>i</sub>*Middle<sub>s,t</sub>+(64&#x2212;&#x192;<sub>i</sub>)*<i>P</i><sub>s</sub>+32)&#x3e;&#x3e;6),clipped to <i>p</i><sub>i</sub><i>&#xb1;tcPD</i><sub>i </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0125" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>q</i><sub>j</sub>&#x2032;=(<i>g</i><sub>j</sub>*Middle<sub>s,t</sub>+(64&#x2212;<i>g</i><sub>j</sub>)*<i>Q</i><sub>s</sub>+32)&#x3e;&#x3e;6),clipped to <i>q</i><sub>j</sub><i>&#xb1;tcPD</i><sub>j </sub><?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0126" num="0000">where tcPD<sub>i </sub>and tcPD<sub>j </sub>term is a position dependent clipping described in below and g<sub>j</sub>, &#x192;<sub>i</sub>, Middle<sub>s,t</sub>, P<sub>s </sub>and Q<sub>s </sub>are given below.</p><p id="p-0127" num="0097">A deblocking control for chroma is discussed.</p><p id="p-0128" num="0098">The chroma strong filters are used on both sides of the block boundary. Here, the chroma filter is selected when both sides of the chroma edge are greater than or equal to 8 (chroma position), and the following decision with three conditions are satisfied: the first one is for decision of boundary strength as well as large block. The proposed filter can be applied when the block width or height which orthogonally crosses the block edge is equal to or larger than 8 in chroma sample domain. The second and third one is basically the same as for HEVC luma deblocking decision, which are on/off decision and strong filter decision, respectively.</p><p id="p-0129" num="0099">In the first decision, boundary strength (bS) is modified for chroma filtering and the conditions are checked sequentially. If a condition is satisfied, then the remaining conditions with lower priorities are skipped.</p><p id="p-0130" num="0100">Chroma deblocking is performed when bS is equal to 2, or bS is equal to 1 when a large block boundary is detected.</p><p id="p-0131" num="0101">The second and third condition is basically the same as HEVC luma strong filter decision as follows.</p><p id="p-0132" num="0102">In the second condition: d is then derived as in HEVC luma deblocking. The second condition will be TRUE when d is less than R.</p><p id="p-0133" num="0103">In the third condition StrongFilterCondition is derived as follows.</p><p id="p-0134" num="0104">dpq is derived as in HEVC</p><p id="p-0135" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>sp</i><sub>3</sub>=Abs(<i>p</i><sub>3</sub><i>&#x2212;p</i><sub>0</sub>), derived as in HEVC<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0136" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>sq</i><sub>3</sub>=Abs(<i>q</i><sub>0</sub><i>&#x2212;q</i><sub>3</sub>), derived as in HEVC<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0137" num="0105">As in HEVC design, StrongFilterCondition=(dpq is less than (&#x3b2;&#x3e;&#x3e;2), sp<sub>3</sub>+sq<sub>3 </sub>is less than (&#x3b2;&#x3e;&#x3e;3), and Abs(p<sub>0</sub>&#x2212;q<sub>0</sub>) is less than (5*t<sub>C</sub>+1)&#x3e;&#x3e;1).</p><p id="p-0138" num="0106">A strong deblocking filter for chroma is discussed. The following strong deblocking filter for chroma is defined.</p><p id="p-0139" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i><sub>2</sub>&#x2032;=(3*<i>p</i><sub>3</sub>+2*<i>p</i><sub>2</sub><i>+p</i><sub>1</sub><i>+p</i><sub>0</sub><i>+q</i><sub>0</sub>+4)&#x3e;&#x3e;3<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0140" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i><sub>1</sub>&#x2032;=(2*<i>p</i><sub>3</sub><i>+p</i><sub>2</sub>+2*<i>p</i><sub>1</sub><i>+p</i><sub>0</sub><i>+q</i><sub>0</sub><i>+q</i><sub>1</sub>+4)&#x3e;&#x3e;3<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0141" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p</i><sub>0</sub>&#x2032;=(<i>p</i><sub>3</sub><i>+p</i><sub>2</sub><i>+p</i><sub>1</sub>+2*<i>p</i><sub>0</sub><i>+q</i><sub>0</sub><i>+q</i><sub>1</sub><i>+q</i><sub>2</sub>+4)&#x3e;&#x3e;3<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0142" num="0107">The proposed chroma filter performs deblocking on a 4&#xd7;4 chroma sample grid.</p><p id="p-0143" num="0108">Position dependent clipping (tcPD) is discussed. The position dependent clipping tcPD is applied to the output samples of the luma filtering process involving strong and long filters that are modifying 7, 5, and 3 samples at the boundary. Assuming quantization error distribution, it is proposed to increase clipping value for samples which are expected to have higher quantization noise, thus expected to have higher deviation of the reconstructed sample value from the true sample value.</p><p id="p-0144" num="0109">For each P or Q boundary filtered with asymmetrical filter, depending on the result of decision-making process in the boundary strength calculation, position dependent threshold table is selected from two tables (i.e., Tc7 and Tc3 tabulated below) that are provided to decoder as a side information.</p><p id="p-0145" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Tc</i>7={6,5,4,3,2,1,1};<i>Tc</i>3={6,4,2};<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0146" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>tcPD</i>=(<i>Sp==</i>3)?<i>Tc</i>3:<i>Tc</i>7;<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0147" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>tcQD</i>=(<i>Sq==</i>3)?<i>Tc</i>3: <i>Tc</i>7;<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0148" num="0110">For the P or Q boundaries being filtered with a short symmetrical filter, position dependent threshold of lower magnitude is applied.</p><p id="p-0149" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>Tc</i>3=[3,2,1];<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0150" num="0111">Following defining the threshold, filtered p&#x2032;<sub>i </sub>and q&#x2032;<sub>i </sub>sample values are clipped according to tcP and tcQ clipping values.</p><p id="p-0151" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>p&#x2033;</i><sub>i</sub>=Clip3(<i>p&#x2032;</i><sub>i</sub><i>+tcP</i><sub>i</sub><i>,p&#x2032;</i><sub>i</sub><i>&#x2212;tcP</i><sub>i</sub><i>,p&#x2032;</i><sub>i</sub>);<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0152" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>q&#x2033;</i><sub>j</sub>=Clip3(<i>q&#x2032;</i><sub>j</sub><i>+tcQ</i><sub>j</sub><i>,q&#x2032;</i><sub>j</sub><i>&#x2212;tcQ</i><sub>j</sub><i>,q&#x2032;</i><sub>j</sub>);<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0153" num="0000">where p&#x2032;<sub>i </sub>and q&#x2032;<sub>i </sub>are filtered sample values, p&#x2033;<sub>i </sub>and q&#x2033;<sub>i </sub>are output sample value after the clipping, and tcP<sub>i </sub>tcP<sub>i </sub>are clipping thresholds that are derived from the VVC to parameter and tcPD and tcQD. The function Clip3 is a clipping function as it is specified in VVC.</p><p id="p-0154" num="0112">Sub-block deblocking adjustment is now discussed. To enable parallel friendly deblocking using both long filters and sub-block deblocking the long filters is restricted to modify at most 5 samples on a side that uses sub-block deblocking (AFFINE or ATMVP or decoder side motion vector refinement (DMVR)) as shown in the luma control for long filters. Additionally, the sub-block deblocking is adjusted such that that sub-block boundaries on an 8&#xd7;8 grid that are close to a coding unit (CU) or an implicit TU boundary is restricted to modify at most two samples on each side.</p><p id="p-0155" num="0113">The following applies to sub-block boundaries that not are aligned with the CU boundary.</p><p id="p-0156" num="0000"><tables id="TABLE-US-00007" num="00007"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="left"/><thead><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry>If (mode block Q == SUBBLOCKMODE &#x26;&#x26; edge !=0) {</entry></row><row><entry>&#x2003;if (!(implicitTU &#x26;&#x26; (edge == (64 / 4))))</entry></row><row><entry>&#x2003;&#x2003;if (edge == 2 || edge == (orthogonalLength - 2) || edge == (56 / 4) </entry></row><row><entry>edge == (72 / 4))</entry></row><row><entry>&#x2003;&#x2003;&#x2003;Sp = Sq = 2;</entry></row><row><entry>&#x2003;&#x2003;else</entry></row><row><entry>&#x2003;&#x2003;&#x2003;Sp = Sq = 3;</entry></row><row><entry>&#x2003;else</entry></row><row><entry>&#x2003;&#x2003;Sp = Sq = bSideQisLargeBlk ? 5:3</entry></row><row><entry>}</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0157" num="0114">Where edge equal to 0 corresponds to CU boundary, edge equal to 2 or equal to orthogonalLength-2 corresponds to sub-block boundary 8 samples from a CU boundary, etc. Where implicit TU is true if implicit split of TU is used.</p><p id="p-0158" num="0115">Sample adaptive offset (SAO) is discussed. The input of SAO is the reconstructed samples after deblocking (DB). The concept of SAO is to reduce mean sample distortion of a region by first classifying the region samples into multiple categories with a selected classifier, obtaining an offset for each category, and then adding the offset to each sample of the category, where the classifier index and the offsets of the region are coded in the bitstream. In HEVC and VVC, the region (the unit for SAO parameters signaling) is defined to be a CTU.</p><p id="p-0159" num="0116">Two SAO types that can satisfy the requirements of low complexity are adopted in HEVC. Those two types are edge offset (EO) and band offset (BO), which are discussed in further detail below. An index of an SAO type is coded (which is in the range of [0, 2]). For EO, the sample classification is based on comparison between current samples and neighboring samples according to 1-D directional patterns: horizontal, vertical, 135&#xb0; diagonal, and 450 diagonal.</p><p id="p-0160" num="0117"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows four one dimensional (1-D) directional patterns <b>800</b> for EO sample classification: horizontal (EO class=0), vertical (EO class=1), 135&#xb0; diagonal (EO class=2), and 450 diagonal (EO class=3).</p><p id="p-0161" num="0118">For a given EO class, each sample inside the CTB is classified into one of five categories. The current sample value, labeled as &#x201c;c,&#x201d; is compared with its two neighbors along the selected 1-D pattern. The classification rules for each sample are summarized in Table 3. Categories 1 and 4 are associated with a local valley and a local peak along the selected 1-D pattern, respectively. Categories 2 and 3 are associated with concave and convex corners along the selected 1-D pattern, respectively. If the current sample does not belong to EO categories 1-4, then it is category 0 and SAO is not applied.</p><p id="p-0162" num="0000"><tables id="TABLE-US-00008" num="00008"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Sample Classification Rules for Edge Offset</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="63pt" align="left"/><colspec colname="2" colwidth="133pt" align="left"/><tbody valign="top"><row><entry/><entry>Category</entry><entry>Condition</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>1</entry><entry>c &#x3c; a and c &#x3c; b</entry></row><row><entry/><entry>2</entry><entry>(c &#x3c; a &#x26;&#x26; c == b)&#x2225;(c = a &#x26;&#x26; c &#x3c; b)</entry></row><row><entry/><entry>3</entry><entry>(c &#x3e; a &#x26;&#x26; c == b)&#x2225;(c = a &#x26;&#x26; c &#x3e; b)</entry></row><row><entry/><entry>4</entry><entry>c &#x3e; a &#x26;&#x26; c &#x3e; b</entry></row><row><entry/><entry>5</entry><entry>None of above</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0163" num="0119">Geometry transformation-based adaptive loop filter in Joint Exploration Model (JEM) is discussed. The input of DB is the reconstructed samples after DB and SAO. The sample classification and filtering process are based on the reconstructed samples after DB and SAO.</p><p id="p-0164" num="0120">In the JEM, a geometry transformation-based adaptive loop filter (GALF) with block-based filter adaption is applied. For the luma component, one among twenty-five filters is selected for each 2-2 block, based on the direction and activity of local gradients.</p><p id="p-0165" num="0121">The filter shape is discussed. <figref idref="DRAWINGS">FIG. <b>9</b></figref> shows examples of GALF filter shapes <b>900</b>, including on the left a 5&#xd7;5 diamond, in the middle a 7&#xd7;7 diamond, and one the right a 9&#xd7;9 diamond. In the JEM, up to three diamond filter shapes (as shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>) can be selected for the luma component. An index is signaled at the picture level to indicate the filter shape used for the luma component. Each square represents a sample, and Ci (i being 0-6 (left), 0-12 (middle), 0-20 (right)) denotes the coefficient to be applied to the sample. For chroma components in a picture, the 5&#xd7;5 diamond shape is always used.</p><p id="p-0166" num="0122">Block classification is discussed. Each 2&#xd7;2 block is categorized into one out of twenty-five classes. The classification index C is derived based on its directionality D and a quantized value of activity &#xc2;, as follows.</p><p id="p-0167" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>C=</i>5<i>D+&#xc2;.</i>&#x2003;&#x2003;(1)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0168" num="0123">To calculate D and &#xc2;, gradients of the horizontal, vertical and two diagonal direction are first calculated using 1-D Laplacian.</p><p id="p-0169" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msub>       <mi>g</mi>       <mi>v</mi>      </msub>      <mo>=</mo>      <mrow>       <munderover>        <mo>&#x2211;</mo>        <mrow>         <mi>k</mi>         <mo>=</mo>         <mrow>          <mi>i</mi>          <mo>-</mo>          <mn>2</mn>         </mrow>        </mrow>        <mrow>         <mi>i</mi>         <mo>+</mo>         <mn>3</mn>        </mrow>       </munderover>       <mtext> </mtext>       <mrow>        <munderover>         <mo>&#x2211;</mo>         <mrow>          <mi>l</mi>          <mo>=</mo>          <mrow>           <mi>j</mi>           <mo>-</mo>           <mn>2</mn>          </mrow>         </mrow>         <mrow>          <mi>j</mi>          <mo>+</mo>          <mn>3</mn>         </mrow>        </munderover>        <mtext> </mtext>        <msub>         <mi>V</mi>         <mrow>          <mi>k</mi>          <mo>,</mo>          <mi>l</mi>         </mrow>        </msub>       </mrow>      </mrow>     </mrow>     <mo>,</mo>     <mrow>      <msub>       <mi>V</mi>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>      <mo>=</mo>      <mrow>       <semantics definitionURL="">        <mo>&#x2758;</mo>        <annotation encoding="Mathematica">"\[LeftBracketingBar]"</annotation>       </semantics>       <mrow>        <mrow>         <mn>2</mn>         <mo>&#x2062;</mo>         <mrow>          <mi>R</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mrow>           <mi>k</mi>           <mo>,</mo>           <mi>l</mi>          </mrow>          <mo>)</mo>         </mrow>        </mrow>        <mo>-</mo>        <mrow>         <mi>R</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mi>k</mi>          <mo>,</mo>          <mrow>           <mi>l</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>         </mrow>         <mo>)</mo>        </mrow>        <mo>-</mo>        <mrow>         <mi>R</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mi>k</mi>          <mo>,</mo>          <mrow>           <mi>l</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>         </mrow>         <mo>)</mo>        </mrow>       </mrow>       <semantics definitionURL="">        <mo>&#x2758;</mo>        <annotation encoding="Mathematica">"\[RightBracketingBar]"</annotation>       </semantics>      </mrow>     </mrow>     <mo>,</mo>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>2</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00001-2" num="00001.2"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <msub>       <mi>g</mi>       <mi>h</mi>      </msub>      <mo>=</mo>      <mrow>       <munderover>        <mo>&#x2211;</mo>        <mrow>         <mi>k</mi>         <mo>=</mo>         <mrow>          <mi>i</mi>          <mo>-</mo>          <mn>2</mn>         </mrow>        </mrow>        <mrow>         <mi>i</mi>         <mo>+</mo>         <mn>3</mn>        </mrow>       </munderover>       <mtext> </mtext>       <mrow>        <munderover>         <mo>&#x2211;</mo>         <mrow>          <mi>l</mi>          <mo>=</mo>          <mrow>           <mi>j</mi>           <mo>-</mo>           <mn>2</mn>          </mrow>         </mrow>         <mrow>          <mi>j</mi>          <mo>+</mo>          <mn>3</mn>         </mrow>        </munderover>        <mtext> </mtext>        <msub>         <mi>H</mi>         <mrow>          <mi>k</mi>          <mo>,</mo>          <mi>l</mi>         </mrow>        </msub>       </mrow>      </mrow>     </mrow>     <mo>,</mo>     <mrow>      <msub>       <mi>H</mi>       <mrow>        <mi>k</mi>        <mo>,</mo>        <mi>l</mi>       </mrow>      </msub>      <mo>=</mo>      <mrow>       <semantics definitionURL="">        <mo>&#x2758;</mo>        <annotation encoding="Mathematica">"\[LeftBracketingBar]"</annotation>       </semantics>       <mrow>        <mrow>         <mn>2</mn>         <mo>&#x2062;</mo>         <mrow>          <mi>R</mi>          <mo>&#x2061;</mo>          <mo>(</mo>          <mrow>           <mi>k</mi>           <mo>,</mo>           <mi>l</mi>          </mrow>          <mo>)</mo>         </mrow>        </mrow>        <mo>-</mo>        <mrow>         <mi>R</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mrow>           <mi>k</mi>           <mo>-</mo>           <mn>1</mn>          </mrow>          <mo>,</mo>          <mi>l</mi>         </mrow>         <mo>)</mo>        </mrow>        <mo>-</mo>        <mrow>         <mi>R</mi>         <mo>&#x2061;</mo>         <mo>(</mo>         <mrow>          <mrow>           <mi>k</mi>           <mo>+</mo>           <mn>1</mn>          </mrow>          <mo>,</mo>          <mi>l</mi>         </mrow>         <mo>)</mo>        </mrow>       </mrow>       <semantics definitionURL="">        <mo>&#x2758;</mo>        <annotation encoding="Mathematica">"\[RightBracketingBar]"</annotation>       </semantics>      </mrow>     </mrow>     <mo>,</mo>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>3</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0170" num="0124">Indices i and j refer to the coordinates of the upper left sample in the 2&#xd7;2 block and R(i,j) indicates a reconstructed sample at coordinate (i, j).</p><p id="p-0171" num="0125">Then D maximum and minimum values of the gradients of horizontal and vertical directions are set as:</p><p id="p-0172" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>h,v</sub><sup>max</sup>=max(<i>g</i><sub>h</sub><i>,g</i><sub>v</sub>),<i>g</i><sub>h,v</sub><sup>min</sup>=min(<i>g</i><sub>d0</sub><i>,g</i><sub>d1</sub>)&#x2003;&#x2003;(6)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0173" num="0126">and the maximum and minimum values of the gradient of two diagonal directions are set as:</p><p id="p-0174" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>g</i><sub>d0,d1</sub><sup>max</sup>=max(<i>g</i><sub>d0</sub><i>,g</i><sub>d1</sub>),<i>g</i><sub>d0,d1</sub><sup>min</sup>=min(<i>g</i><sub>d0</sub><i>,g</i><sub>d1</sub>),&#x2003;&#x2003;(7)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0175" num="0127">To derive the value of the directionality D, these values are compared against each other and with two thresholds t<sub>1 </sub>and t<sub>2</sub>:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0128">Step 1. If both g<sub>h,v</sub><sup>max</sup>&#x2264;t<sub>1</sub>&#xb7;g<sub>h,v</sub><sup>min </sup>and g<sub>d0,d1</sub><sup>max</sup>&#x2264;t<sub>1</sub>&#xb7;g<sub>d0,d1</sub><sup>min </sup>are true, D is set to 0.</li>        <li id="ul0004-0002" num="0129">Step 2. If g<sub>h,v</sub><sup>max</sup>/g<sub>h,v</sub><sup>min</sup>&#x3e;g<sub>d0,d1</sub><sup>max</sup>/g<sub>d0,d1</sub><sup>min</sup>, continue from Step 3; otherwise continue from Step 4.</li>        <li id="ul0004-0003" num="0130">Step 3. If g<sub>h,v</sub><sup>max</sup>&#x3e;t<sub>2</sub>&#xb7;g<sub>h,v</sub><sup>min</sup>, D is set to 2; otherwise D is set to 1.</li>        <li id="ul0004-0004" num="0131">Step 4. If g<sub>d0,d1</sub><sup>max</sup>&#x3e;t<sub>2</sub>&#xb7;g<sub>d0,d1</sub><sup>min</sup>, D is set to 4; otherwise D is set to 3.</li>    </ul>    </li></ul></p><p id="p-0176" num="0132">The activity value A is calculated as:</p><p id="p-0177" num="0000"><maths id="MATH-US-00002" num="00002"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mi>A</mi>     <mo>=</mo>     <mrow>      <munderover>       <mo>&#x2211;</mo>       <mrow>        <mi>k</mi>        <mo>=</mo>        <mrow>         <mi>i</mi>         <mo>-</mo>         <mn>2</mn>        </mrow>       </mrow>       <mrow>        <mi>i</mi>        <mo>+</mo>        <mn>3</mn>       </mrow>      </munderover>      <mtext> </mtext>      <mrow>       <munderover>        <mo>&#x2211;</mo>        <mrow>         <mi>l</mi>         <mo>=</mo>         <mrow>          <mi>j</mi>          <mo>-</mo>          <mn>2</mn>         </mrow>        </mrow>        <mrow>         <mi>j</mi>         <mo>+</mo>         <mn>3</mn>        </mrow>       </munderover>       <mtext> </mtext>       <mrow>        <mrow>         <mo>(</mo>         <mrow>          <msub>           <mi>V</mi>           <mrow>            <mi>k</mi>            <mo>,</mo>            <mi>l</mi>           </mrow>          </msub>          <mo>+</mo>          <msub>           <mi>H</mi>           <mrow>            <mi>k</mi>            <mo>,</mo>            <mi>l</mi>           </mrow>          </msub>         </mrow>         <mo>)</mo>        </mrow>        <mo>.</mo>       </mrow>      </mrow>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>8</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0178" num="0133">A is further quantized to the range of 0 to 4, inclusively, and the quantized value is PGP denoted as &#xc2;.</p><p id="p-0179" num="0134">For both chroma components in a picture, no classification method is applied, i.e. a single set of ALF coefficients is applied for each chroma component.</p><p id="p-0180" num="0135">Geometric transformation of filter coefficients is discussed.</p><p id="p-0181" num="0136"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows relative coordinates 1000 for the 5&#xd7;5 diamond filter support&#x2014;diagonal, vertical flip, and rotation, respectively (from left to right).</p><p id="p-0182" num="0137">Before filtering each 2&#xd7;2 block, geometric transformations such as rotation or diagonal and vertical flipping are applied to the filter coefficients &#x192;(k, l), which is associated with the coordinate (k, l), depending on gradient values calculated for that block. This is equivalent to applying these transformations to the samples in the filter support region. The idea is to make different blocks to which ALF is applied more similar by aligning their directionality.</p><p id="p-0183" num="0138">Three geometric transformations, including diagonal, vertical flip, and rotation are introduced:</p><p id="p-0184" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Diagonal: &#x192;<sub>D</sub>(<i>k,l</i>)=&#x192;(<i>l,k</i>),<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0185" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Vertical flip: &#x192;<sub>V</sub>(<i>k,l</i>)=&#x192;(<i>k,K&#x2212;l&#x2212;</i>1),<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0186" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>Rotation: &#x192;<sub>R</sub>(<i>k,l</i>)=&#x192;(<i>K&#x2212;l&#x2212;</i>1,<i>k</i>).&#x2003;&#x2003;(9)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0187" num="0000">where K is the size of the filter and 0&#x2264;k, l&#x2264;K&#x2212;1 are coefficients coordinates, such that location (0,0) is at the upper left corner and location (K&#x2212;1, K&#x2212;1) is at the lower right corner. The transformations are applied to the filter coefficients &#x192;(k, l) depending on gradient values calculated for that block. The relationship between the transformation and the four gradients of the four directions are summarized in Table 4.</p><p id="p-0188" num="0000"><tables id="TABLE-US-00009" num="00009"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Mapping of the gradient calculated for one block and the transformations</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="119pt" align="left"/><colspec colname="2" colwidth="98pt" align="left"/><tbody valign="top"><row><entry>Gradient values</entry><entry>Transformation</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row><row><entry>g<sub>d2 </sub>&#x3c; g<sub>a1 </sub>and g<sub>h </sub>&#x3c; g<sub>v</sub></entry><entry>No transformation</entry></row><row><entry>g<sub>d2 </sub>&#x3c; g<sub>d1 </sub>and g<sub>v </sub>&#x3c; g<sub>h</sub></entry><entry>Diagonal</entry></row><row><entry>g<sub>d1 </sub>&#x3c; g<sub>d2 </sub>and g<sub>h </sub>&#x3c; g<sub>v</sub></entry><entry>Vertical flip</entry></row><row><entry>g<sub>d1 </sub>&#x3c; g<sub>d2 </sub>and g<sub>v </sub>&#x3c; g<sub>h</sub></entry><entry>Rotation</entry></row><row><entry namest="1" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0189" num="0139">Filter parameters signaling is discussed. In the JEM, GALF filter parameters are signalled for the first CTU, i.e., after the slice header and before the SAO parameters of the first CTU. Up to 25 sets of luma filter coefficients could be signalled. To reduce bits overhead, filter coefficients of different classification can be merged. Also, the GALF coefficients of reference pictures are stored and allowed to be reused as GALF coefficients of a current picture. The current picture may choose to use GALF coefficients stored for the reference pictures and bypass the GALF coefficients signalling. In this case, only an index to one of the reference pictures is signalled, and the stored GALF coefficients of the indicated reference picture are inherited for the current picture.</p><p id="p-0190" num="0140">To support GALF temporal prediction, a candidate list of GALF filter sets is maintained. At the beginning of decoding a new sequence, the candidate list is empty. After decoding one picture, the corresponding set of filters may be added to the candidate list. Once the size of the candidate list reaches the maximum allowed value (i.e., 6 in current JEM), a new set of filters overwrites the oldest set in decoding order, and that is, first-in-first-out (FIFO) rule is applied to update the candidate list. To avoid duplications, a set could only be added to the list when the corresponding picture does not use GALF temporal prediction. To support temporal scalability, there are multiple candidate lists of filter sets, and each candidate list is associated with a temporal layer. More specifically, each array assigned by temporal layer index (TempIdx) may compose filter sets of previously decoded pictures with equal to lower TempIdx. For example, the k-th array is assigned to be associated with TempIdx equal to k, and the k-th array only contains filter sets from pictures with TempIdx smaller than or equal to k. After coding a certain picture, the filter sets associated with the picture will be used to update those arrays associated with equal or higher TempIdx.</p><p id="p-0191" num="0141">Temporal prediction of GALF coefficients is used for inter coded frames to minimize signalling overhead. For intra frames, temporal prediction is not available, and a set of 16 fixed filters is assigned to each class. To indicate the usage of the fixed filter, a flag for each class is signalled and if required, the index of the chosen fixed filter. Even when the fixed filter is selected for a given class, the coefficients of the adaptive filter &#x192;(k, l) can still be sent for this class in which case the coefficients of the filter which will be applied to the reconstructed image are sum of both sets of coefficients.</p><p id="p-0192" num="0142">The filtering process of luma component can be controlled at the CU level. A flag is signalled to indicate whether GALF is applied to the luma component of a CU. For chroma component, whether GALF is applied or not is indicated at picture level only.</p><p id="p-0193" num="0143">The filtering process is discussed. At the decoder side, when GALF is enabled for a block, each sample R(i, j) within the block is filtered, resulting in sample value R&#x2032;(i, j) as shown below, where L denotes filter length, &#x192;<sub>m,n </sub>represents filter coefficient, and &#x192;(k, l) denotes the decoded filter coefficients.</p><p id="p-0194" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>R</i>&#x2032;(<i>i,j</i>)=&#x3a3;<sub>k=&#x2212;L/2</sub><sup>L/2</sup>&#x3a3;<sub>l=&#x2212;L/2</sub><sup>L/2</sup>&#x192;(<i>k,l</i>)&#xd7;<i>R</i>(<i>i+k,j+l</i>)&#x2003;&#x2003;(10)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0195" num="0144"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows an example of relative coordinates used for 5&#xd7;5 diamond filter support supposing the current sample's coordinate (i, j) to be (0, 0). Samples in different coordinates filled with the same color are multiplied with the same filter coefficients.</p><p id="p-0196" num="0145">Geometry transformation-based adaptive loop filter (GALF) in VVC is discussed. In VVC test model 4.0 (VTM4.0), the filtering process of the Adaptive Loop Filter, is performed as follows:</p><p id="p-0197" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>O</i>(<i>x,y</i>)=&#x3a3;<sub>(i,j)</sub><i>w</i>(<i>i,j</i>)&#xb7;<i>I</i>(<i>x+i,y+j</i>),&#x2003;&#x2003;(11)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0198" num="0000">where samples I(x+i, y+j) are input samples, O(x, y) is the filtered output sample (i.e., filter result), and w(i, j) denotes the filter coefficients. In practice, in VTM4.0 it is implemented using integer arithmetic for fixed point precision computations</p><p id="p-0199" num="0000"><maths id="MATH-US-00003" num="00003"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <mi>O</mi>       <mo>&#x2061;</mo>       <mo>(</mo>       <mrow>        <mi>x</mi>        <mo>,</mo>        <mi>y</mi>       </mrow>       <mo>)</mo>      </mrow>      <mo>=</mo>      <mrow>       <mrow>        <mo>(</mo>        <mrow>         <mrow>          <msubsup>           <mo>&#x2211;</mo>           <mrow>            <mi>i</mi>            <mo>=</mo>            <mrow>             <mo>-</mo>             <mfrac>              <mi>L</mi>              <mn>2</mn>             </mfrac>            </mrow>           </mrow>           <mfrac>            <mi>L</mi>            <mn>2</mn>           </mfrac>          </msubsup>          <mrow>           <msubsup>            <mo>&#x2211;</mo>            <mrow>             <mi>j</mi>             <mo>=</mo>             <mrow>              <mo>-</mo>              <mfrac>               <mi>L</mi>               <mn>2</mn>              </mfrac>             </mrow>            </mrow>            <mfrac>             <mi>L</mi>             <mn>2</mn>            </mfrac>           </msubsup>           <mrow>            <mrow>             <mi>w</mi>             <mo>&#x2061;</mo>             <mo>(</mo>             <mrow>              <mi>i</mi>              <mo>,</mo>              <mi>j</mi>             </mrow>             <mo>)</mo>            </mrow>            <mo>&#xb7;</mo>            <mrow>             <mi>I</mi>             <mo>&#x2061;</mo>             <mo>(</mo>             <mrow>              <mrow>               <mi>x</mi>               <mo>+</mo>               <mi>i</mi>              </mrow>              <mo>,</mo>              <mrow>               <mi>y</mi>               <mo>+</mo>               <mi>j</mi>              </mrow>             </mrow>             <mo>)</mo>            </mrow>           </mrow>          </mrow>         </mrow>         <mo>+</mo>         <mn>64</mn>        </mrow>        <mo>)</mo>       </mrow>       <mo>&#x226b;</mo>       <mn>7</mn>      </mrow>     </mrow>     <mo>,</mo>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>12</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0200" num="0000">where L denotes the filter length, and where w(i,j) are the filter coefficients in fixed point precision.</p><p id="p-0201" num="0146">The current design of GALF in VVC has the following major changes compared to that in JEM:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0147">1) The adaptive filter shape is removed. Only 7&#xd7;7 filter shape is allowed for luma component and 5&#xd7;5 filter shape is allowed for chroma component.</li>        <li id="ul0006-0002" num="0148">2) Signaling of ALF parameters in removed from slice/picture level to CTU level.</li>        <li id="ul0006-0003" num="0149">3) Calculation of class index is performed in 4&#xd7;4 level instead of 2&#xd7;2. In addition, as proposed in JVET-L0147, sub-sampled Laplacian calculation method for ALF classification is utilized. More specifically, there is no need to calculate the horizontal/vertical/45 diagonal/135 degree gradients for each sample within one block. Instead, 1:2 subsampling is utilized.</li>    </ul>    </li></ul></p><p id="p-0202" num="0150">Non-linear ALF in the current VVC is discussed with regard to filtering reformulation.</p><p id="p-0203" num="0151">Equation (11) can be reformulated, without coding efficiency impact, in the following expression:</p><p id="p-0204" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>O</i>(<i>x,y</i>)=<i>I</i>(<i>x,y</i>)+&#x3a3;<sub>(i,j)&#x2260;(0,0)</sub><i>w</i>(<i>i,j</i>)&#xb7;(<i>I</i>(<i>x+i,y+j</i>)&#x2212;<i>I</i>(<i>x,y</i>)),&#x2003;&#x2003;(13)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0205" num="0000">where w(i, j) are the same filter coefficients as in equation (11) [excepted w(0, 0) which is equal to 1 in equation (13) while it is equal to 1&#x2212;&#x3a3;<sub>(i,j)&#x2260;(0,0)</sub>w(i,j) in equation (11)].</p><p id="p-0206" num="0152">Using the above filter formula of (13), VVC introduces the non-linearity to make ALF more efficient by using a simple clipping function to reduce the impact of neighbor sample values (I(x+i, y+j)) when they are too different with the current sample value (I(x, y)) being filtered.</p><p id="p-0207" num="0153">More specifically, the ALF filter is modified as follows:</p><p id="p-0208" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>O</i>&#x2032;(<i>x,y</i>)=<i>I</i>(<i>x,y</i>)+&#x3a3;<sub>(i,j)&#x2260;(0,0)</sub><i>w</i>(<i>i,j</i>)&#xb7;<i>K</i>(<i>I</i>(<i>x+i,y+j</i>)&#x2212;<i>I</i>(<i>x,y</i>),<i>k</i>(<i>i,j</i>)),&#x2003;&#x2003;(14)<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0209" num="0000">where K(d, b)=min(b, max(&#x2212;b, d)) is the clipping function, and k(i, j) are clipping parameters, which depends on the (i, j) filter coefficient. The encoder performs the optimization to find the best k(i, j).</p><p id="p-0210" num="0154">In the JVET-N0242 implementation, the clipping parameters k(i, j) are specified for each ALF filter, one clipping value is signaled per filter coefficient. It means that up to 12 clipping values can be signalled in the bitstream per Luma filter and up to 6 clipping values for the Chroma filter.</p><p id="p-0211" num="0155">In order to limit the signaling cost and the encoder complexity, only 4 fixed values which are the same for INTER and INTRA slices are used.</p><p id="p-0212" num="0156">Because the variance of the local differences is often higher for Luma than for Chroma, two different sets for the Luma and Chroma filters are applied. The maximum sample value (here 1024 for 10 bits bit-depth) in each set is also introduced, so that clipping can be disabled if it is not necessary.</p><p id="p-0213" num="0157">The sets of clipping values used in the JVET-N0242 tests are provided in the Table 5. The 4 values have been selected by roughly equally splitting, in the logarithmic domain, the full range of the sample values (coded on 10 bits) for Luma, and the range from 4 to 1024 for Chroma.</p><p id="p-0214" num="0158">More precisely, the Luma table of clipping values have been obtained by the following formula:</p><p id="p-0215" num="0000"><maths id="MATH-US-00004" num="00004"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <mrow>        <msub>         <mi>AlfClip</mi>         <mi>L</mi>        </msub>        <mo>=</mo>        <mrow>         <mo>{</mo>         <mrow>          <mrow>           <mi>round</mi>           <mo>&#x2062;</mo>           <mtext>  </mtext>           <mrow>            <mo>(</mo>            <msup>             <mrow>              <mo>(</mo>              <msup>               <mrow>                <mo>(</mo>                <mi>M</mi>                <mo>)</mo>               </mrow>               <mfrac>                <mn>1</mn>                <mi>N</mi>               </mfrac>              </msup>              <mo>)</mo>             </mrow>             <mrow>              <mi>N</mi>              <mo>-</mo>              <mi>n</mi>              <mo>+</mo>              <mn>1</mn>             </mrow>            </msup>            <mo>)</mo>           </mrow>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mi>for</mi>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mi>n</mi>          </mrow>          <mo>&#x2208;</mo>          <mrow>           <mn>1</mn>           <mo>&#x2062;</mo>           <mo>&#x2026;</mo>           <mo>&#x2062;</mo>           <mi>N</mi>          </mrow>         </mrow>        </mrow>       </mrow>       <mo>]</mo>      </mrow>      <mo>}</mo>     </mrow>     <mo>,</mo>     <mtext>   </mtext>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>15</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00004-2" num="00004.2"><math overflow="scroll"> <mrow>  <mrow>   <mi>with</mi>   <mo>&#x2062;</mo>   <mrow>    <mtext> </mtext>    <mtext>  </mtext>   </mrow>   <mo>&#x2062;</mo>   <mi>M</mi>  </mrow>  <mo>=</mo>  <mrow>   <mrow>    <msup>     <mn>2</mn>     <mn>10</mn>    </msup>    <mo>&#x2062;</mo>    <mtext>   </mtext>    <mi>and</mi>    <mo>&#x2062;</mo>    <mtext>  </mtext>    <mi>N</mi>   </mrow>   <mo>=</mo>   <mn>4.</mn>  </mrow> </mrow></math></maths></p><p id="p-0216" num="0159">Similarly, the Chroma tables of clipping values is obtained according to the following formula:</p><p id="p-0217" num="0000"><maths id="MATH-US-00005" num="00005"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mrow>      <mrow>       <mrow>        <msub>         <mi>AlfClip</mi>         <mi>C</mi>        </msub>        <mo>=</mo>        <mrow>         <mo>{</mo>         <mrow>          <mrow>           <mi>round</mi>           <mo>&#x2062;</mo>           <mtext>  </mtext>           <mrow>            <mo>(</mo>            <mrow>             <mi>A</mi>             <mo>.</mo>             <msup>              <mrow>               <mo>(</mo>               <msup>                <mrow>                 <mo>(</mo>                 <mfrac>                  <mi>M</mi>                  <mi>A</mi>                 </mfrac>                 <mo>)</mo>                </mrow>                <mfrac>                 <mn>1</mn>                 <mrow>                  <mi>N</mi>                  <mo>-</mo>                  <mn>1</mn>                 </mrow>                </mfrac>               </msup>               <mo>)</mo>              </mrow>              <mrow>               <mi>N</mi>               <mo>-</mo>               <mi>n</mi>              </mrow>             </msup>            </mrow>            <mo>)</mo>           </mrow>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mi>for</mi>           <mo>&#x2062;</mo>           <mtext>   </mtext>           <mi>n</mi>          </mrow>          <mo>&#x2208;</mo>          <mrow>           <mn>1</mn>           <mo>&#x2062;</mo>           <mo>&#x2026;</mo>           <mo>&#x2062;</mo>           <mi>N</mi>          </mrow>         </mrow>        </mrow>       </mrow>       <mo>]</mo>      </mrow>      <mo>}</mo>     </mrow>     <mo>,</mo>     <mtext>   </mtext>    </mrow>   </mtd>   <mtd>    <mrow>     <mo>(</mo>     <mn>16</mn>     <mo>)</mo>    </mrow>   </mtd>  </mtr> </mtable></math></maths><maths id="MATH-US-00005-2" num="00005.2"><math overflow="scroll"> <mrow>  <mrow>   <mrow>    <mi>with</mi>    <mo>&#x2062;</mo>    <mrow>     <mtext> </mtext>     <mtext>  </mtext>    </mrow>    <mo>&#x2062;</mo>    <mi>M</mi>   </mrow>   <mo>=</mo>   <msup>    <mn>2</mn>    <mn>10</mn>   </msup>  </mrow>  <mtext>  </mtext>  <mo>,</mo>  <mtext> </mtext>  <mrow>   <mi>N</mi>   <mo>=</mo>   <mrow>    <mrow>     <mn>4</mn>     <mo>&#x2062;</mo>     <mtext>    </mtext>     <mi>and</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mi>A</mi>    </mrow>    <mo>=</mo>    <mrow>     <mn>4</mn>     <mo>&#x2062;</mo>     <mrow>      <mtext> </mtext>      <mtext> </mtext>     </mrow>     <mo>.</mo>    </mrow>   </mrow>  </mrow> </mrow></math></maths></p><p id="p-0218" num="0000"><tables id="TABLE-US-00010" num="00010"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Authorized clipping values</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="offset" colwidth="35pt" align="left"/><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="147pt" align="center"/><tbody valign="top"><row><entry/><entry/><entry>INTRA/INTER tile group</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row><row><entry/><entry>LUMA</entry><entry>{1024, 181, 32, 6}</entry></row><row><entry/><entry>CHROMA</entry><entry>{1024, 161, 25, 4}</entry></row><row><entry/><entry namest="offset" nameend="2" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0219" num="0160">The selected clipping values are coded in the &#x201c;alf_data&#x201d; syntax element by using a Golomb encoding scheme corresponding to the index of the clipping value in the above Table 5. This encoding scheme is the same as the encoding scheme for the filter index.</p><p id="p-0220" num="0161">Convolutional Neural network-based loop filters for video coding are discussed.</p><p id="p-0221" num="0162">In deep learning, a convolutional neural network (CNN, or ConvNet) is a class of deep neural networks, most commonly applied to analyzing visual imagery. They have very successful applications in image and video recognition/processing, recommender systems, image classification, medical image analysis, natural language processing.</p><p id="p-0222" num="0163">CNNs are regularized versions of multilayer perceptrons. Multilayer perceptrons usually mean fully connected networks, that is, each neuron in one layer is connected to all neurons in the next layer. The &#x201c;fully-connectedness&#x201d; of these networks makes them prone to overfitting data. Typical ways of regularization include adding some form of magnitude measurement of weights to the loss function. CNNs take a different approach towards regularization: they take advantage of the hierarchical pattern in data and assemble more complex patterns using smaller and simpler patterns. Therefore, on the scale of connectedness and complexity, CNNs are on the lower extreme.</p><p id="p-0223" num="0164">CNNs use relatively little pre-processing compared to other image classification/processing algorithms. This means that the network learns the filters that in traditional algorithms were hand-engineered. This independence from prior knowledge and human effort in feature design is a major advantage.</p><p id="p-0224" num="0165">Deep learning-based image/video compression typically has two implications: end-to-end compression purely based on neural networks, and traditional frameworks enhanced by neural networks. End-to-end compression purely based on neural networks are discussed in Johannes Ball&#xe9;, Valero Laparra, and Eero P. Simoncelli, &#x201c;End-to-end optimization of nonlinear transform codes for perceptual quality,&#x201d; In: 2016 Picture Coding Symposium (PCS), pp. 1-5, Institute of Electrical and Electronics Engineers (IEEE) and Lucas Theis, Wenzhe Shi, Andrew Cunningham, and Ferenc Huszir, &#x201c;Lossy image compression with compressive autoencoders,&#x201d; arXiv preprint arXiv:1703.00395 (2017). Traditional frameworks enhanced by neural networks are discussed in Jiahao Li, Bin Li, Jizheng Xu, Ruiqin Xiong, and Wen Gao, &#x201c;Fully Connected Network-Based Intra Prediction for Image Coding,&#x201d; IEEE Transactions on Image Processing 27, 7 (2018), 3236-3247, Yuanying Dai, Dong Liu, and Feng Wu, &#x201c;A convolutional neural network approach for post-processing in HEVC intra coding,&#x201d; MMM. Springer, 28-39, Rui Song, Dong Liu, Houqiang Li, and Feng Wu, &#x201c;Neural network-based arithmetic coding of intra prediction modes in HEVC,&#x201d; VCIP. IEEE, 1-4, and J. Pfaff, P. Helle, D. Maniry, S. Kaltenstadler, W. Samek, H. Schwarz, D. Marpe, and T. Wiegand, &#x201c;Neural network based intra prediction for video coding,&#x201d; Applications of Digital Image Processing XLI, Vol. 10752. International Society for Optics and Photonics, 1075213.</p><p id="p-0225" num="0166">The first type usually takes an auto-encoder like structure, either achieved by convolutional neural networks or recurrent neural networks. While purely relying on neural networks for image/video compression can avoid any manual optimizations or hand-crafted designs, compression efficiency may be not satisfactory. Therefore, works distributed in the second type take neural networks as an auxiliary, and enhance traditional compression frameworks by replacing or enhancing some modules. In this way, they can inherit the merits of the highly optimized traditional frameworks. For example, a fully connected network for the intra prediction is proposed in HEVC as discussed in Jiahao Li, Bin Li, Jizheng Xu, Ruiqin Xiong, and Wen Gao, &#x201c;Fully Connected Network-Based Intra Prediction for Image Coding,&#x201d; IEEE Transactions on Image Processing 27, 7 (2018), p. 3236-3247.</p><p id="p-0226" num="0167">In addition to intra prediction, deep learning is also exploited to enhance other modules. For example, the in-loop filters of HEVC are replaced with a convolutional neural network and achieve promising results in Yuanying Dai, Dong Liu, and Feng Wu, &#x201c;A convolutional neural network approach for post-processing in HEVC intra coding,&#x201d; MMM. Springer, 28-39. The work in Rui Song, Dong Liu, Houqiang Li, and Feng Wu, &#x201c;Neural network-based arithmetic coding of intra prediction modes in HEVC,&#x201d; VCIP. IEEE, 1-4 applies neural networks to improve the arithmetic coding engine.</p><p id="p-0227" num="0168">Convolutional neural network based in-loop filtering is discussed. In lossy image/video compression, the reconstructed frame is an approximation of the original frame, since the quantization process is not invertible and thus incurs distortion to the reconstructed frame. To alleviate such distortion, a convolutional neural network could be trained to learn the mapping from the distorted frame to the original frame. In practice, training must be performed prior to deploying the CNN-based in-loop filtering.</p><p id="p-0228" num="0169">Training is discussed. The purpose of the training processing is to find the optimal value of parameters including weights and bias.</p><p id="p-0229" num="0170">First, a codec (e.g. HM, JEM, VTM, etc.) is used to compress the training dataset to generate the distorted reconstruction frames. Then, the reconstructed frames are fed into the CNN and the cost is calculated using the output of CNN and the groundtruth frames (original frames). Commonly used cost functions include Sum of Absolution Difference (SAD) and Mean Square Error (MSE). Next, the gradient of the cost with respect to each parameter is derived through the back propagation algorithm. With the gradients, the values of the parameters can be updated. The above process repeats until the convergence criteria is met. After completing the training, the derived optimal parameters are saved for use in the inference stage.</p><p id="p-0230" num="0171">The convolutional process is discussed. During convolution, the filter is moved across the image from left to right, top to bottom, with a one-pixel column change on the horizontal movements, then a one-pixel row change on the vertical movements. The amount of movement between applications of the filter to the input image is referred to as the stride, and it is almost always symmetrical in height and width dimensions. The default stride or strides in two dimensions is (1,1) for the height and the width movement.</p><p id="p-0231" num="0172"><figref idref="DRAWINGS">FIG. <b>12</b>A</figref> is an example architecture <b>1200</b> of the proposed CNN filter, and <figref idref="DRAWINGS">FIG. <b>12</b>B</figref> is an example of construction <b>1250</b> of residual block (ResBlock). In most of deep convolutional neural networks, residual blocks are utilized as the basic module and stacked several times to construct the final network wherein in one example, the residual block is obtained by combining a convolutional layer, a ReLU/PReLU activation function and a convolutional layer as shown in <figref idref="DRAWINGS">FIG. <b>12</b>B</figref>.</p><p id="p-0232" num="0173">Inference is discussed. During the inference stage, the distorted reconstruction frames are fed into CNN and processed by the CNN model whose parameters are already determined in the training stage. The input samples to the CNN can be reconstructed samples before or after DB, or reconstructed samples before or after SAO, or reconstructed samples before or after ALF.</p><p id="p-0233" num="0174">The current CNN-based loop filtering has certain problems. For example, a NN model does not use or otherwise leverage external information (e.g., including information from a video codec, such as coding parameters and/or coding syntax, which is information external to that generated by the NN model itself) as attention, or as an attention mechanism. Accordingly, information including various coding parameters such as prediction (e.g., prediction mode, motion vectors, and the like), split (e.g., partitioning information), and the like may not be fully exploited, such as to recalibrate feature maps.</p><p id="p-0234" num="0175">Disclosed herein are techniques that solve one or more of the foregoing problems. For example, the present disclosure provides one or more neural network (NN) filter models trained as coding tools to improve the efficiency of video coding. The NN-based coding tools can be used to replace or otherwise enhance the modules involved in a video codec. For example, a NN model can serve as an additional intra prediction mode, inter prediction mode, transform kernel, or loop filter. The present disclosure also elaborates on how to design a NN model by using external information such as prediction, split, QP, and the like (and as further described below) as an attention or an attention mechanism, which are described further below. It should be noted that the NN models could be used as any coding tools, such as NN-based intra/inter prediction, NN-based super-resolution, NN-based motion compensation, NN-based reference generation, NN-based fractional pixel interpolation, NN-based in-loop/post filtering, and the like.</p><p id="p-0235" num="0176">The listing of embodiments below should be considered as examples to explain general concepts. These embodiments should not be interpreted in a narrow way. Furthermore, these embodiments can be combined in any manner.</p><p id="p-0236" num="0177">In the disclosure, a NN model can include any kind of NN architecture, such as a convolutional neural network (CNN) or a fully connected NN, or a combination of CNNs and fully connected NNs. In the following discussion, an NN model may also be referred to as a CNN model.</p><p id="p-0237" num="0178">In the following discussion, a video unit may be a sequence, a picture, a slice, a tile, a brick, a subpicture, a CTU/CTB, a CTU/CTB row, one or multiple CUs/coding blocks (CBs), one or multiple CTUs/CTBs, one or multiple Virtual Pipeline Data Unit (VPDU), a sub-region within a picture/slice/tile/brick. A father video unit represents a unit larger than the video unit. Typically, a father unit will contain several video units, for example, when the video unit is CTU, the father unit could be slice, CTU row, multiple CTUs, etc. In some embodiments, the video unit may be a sample/pixel.</p><p id="p-0238" num="0179"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is an example of a process <b>1300</b> for generating filtered samples based on a NN filter model that receives a coding parameter (e.g., external information to the NN filter model) as an input. The NN filter model has an attention mechanism that is based on the coding parameter input. The attention mechanism is configured to generate or obtain an attention, which is useful to mimic cognitive attention and, in effect, enhances some parts of data input to the NN filter while diminishing other parts of data input to the NN filter. For example, an attention may be obtained by processing external information to the NN filter model, such as one or more coding parameters, to extract the attention. The attention is configured to be applied to one or more feature maps, such as by weighting the feature maps according to the attention.</p><p id="p-0239" num="0180">In the process <b>1300</b> shown in <figref idref="DRAWINGS">FIG. <b>13</b></figref>, at least some unfiltered samples are provided as input into an NN filter. In an example, an unfiltered sample is a sample (e.g., a pixel) of a video unit that has not been subjected to any filtering yet, or has not been subjected to a sufficient amount of filtering yet. The output of the NN filter may thus be a filtered sample. The output of the NN filter is also based on an NN filter model generated using a coding parameter input. The coding parameter input may be related to a reconstruction of the video unit, a split or partitioning scheme for the video unit, a prediction mode of the video unit, a quantization parameter (QP) associated with the video unit, and/or a boundary strength parameter for a boundary of the video unit.</p><p id="p-0240" num="0181">For example, convolutional layers may be used to extract features from the coding parameters (e.g., external information), or from both the coding parameters and internal information, such as features extracted inside the NN filter model. At least one of the extracted features is used as an obtained attention in the NN filter model.</p><p id="p-0241" num="0182"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is an example of a process <b>1400</b> applying an attention obtained using external information, such as a coding parameter, on feature maps of a NN filter model to provide recalibrated feature maps in accordance with some examples. The feature maps of a NN filter model are the result of applying the filters to an input image (or a feature map that is provided as output by a prior layer). For example, at each layer of the NN filter model, the feature map is the output of that layer. Accordingly, feature maps produced by layers internal to the NN filter model may be referred to as intermediate feature maps, while a feature map produced by a final layer of the NN filter model may be referred to as a final feature map. For example, a final output of the NN filter model may be the final feature map.</p><p id="p-0242" num="0183">In the example of <figref idref="DRAWINGS">FIG. <b>14</b></figref>, an operation performed by the convolutional layer(s) of the NN filter model is denoted as &#x3b1;, while external information (e.g., coding parameters) are denoted as E, and internal information (e.g., feature maps extracted inside the NN filter model) are denoted as I. The obtained attention is denoted as A. The process <b>1400</b> applies the attention A on feature maps G to generate recalibrated feature maps &#x3d5;.</p><p id="p-0243" num="0184">Accordingly, the operation a is applied to the external information (e.g., coding parameters), or a concatenation of the external information and internal information, to extract or otherwise obtain the attention A. The attention A is applied to feature maps G to generate recalibrated feature maps &#x3d5;. For example, applying the attention A to the feature maps G effectively reweights the feature maps G (e.g., applies different weights to different elements of the feature maps G), and the recalibrated feature maps &#x3d5; are the reweighted feature maps that result from the application of the attention A to the feature maps G. In the process <b>1400</b>, N is a channel number, W is a channel width, and H is a channel height.</p><p id="p-0244" num="0185">In <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the intermediate feature maps of the NN filter model are denoted as G, where G&#x3f5;R<sup>N&#xd7;W&#xd7;H</sup>. The obtained attention is denoted as A, where A&#x3f5;R<sup>W&#xd7;H </sup>represents the obtained attention. In this context, the &#x3f5; symbol indicates that G is an element of a set given by R<sup>N&#xd7;W&#xd7;H</sup>, and that A is an element of a set given by R<sup>W&#xd7;H</sup>.</p><p id="p-0245" num="0186">For example, R is a domain that a specific element in the feature map or attention belongs to. R may be a domain including any real numbers, or a domain including any integer real numbers. In some examples, a feature map is a two-dimensional or three-dimensional array. Accordingly, a feature map G, such as an intermediate feature map G, where G&#x3f5;R<sup>N&#xd7;W&#xd7;H</sup>, indicates that each element of the feature map G belongs to R, and there are N&#xd7;W&#xd7;H elements in the feature map G. In this example, having values for N, W, and H indicates that the feature map G is a three-dimensional array, with the dimensionality of the value of N, W, and H, respectively, along each dimension. In another example, such as an attention A, where A&#x3f5;R<sup>W&#xd7;H</sup>, each element of the attention A belongs to R, and there are W&#xd7;H elements in the attention A. In this example, having values for W and H indicates that the attention A is a two-dimensional array, with the dimensionality of the value of W and H, respectively, along each dimension.</p><p id="p-0246" num="0187">In one example, the recalibrated feature maps are generated according to:</p><p id="p-0247" num="0188">&#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;A<sup>j,k</sup>, 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, and 1&#x2264;k&#x2264;H.</p><p id="p-0248" num="0189">In another example, the recalibrated feature maps are generated according to:</p><p id="p-0249" num="0190">&#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>), 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, and f represents a mapping function applied on each element of the attention.</p><p id="p-0250" num="0191">In yet another example, the recalibrated feature maps are generated according to:</p><p id="p-0251" num="0192">&#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>)+G<sup>i,j,k</sup>, 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, and f represents a mapping function applied on each element of the attention.</p><p id="p-0252" num="0193">As described above, residual blocks are utilized as the basic module of NN models, and multiple residual blocks can be stacked to construct the final network. For example, a residual block can be obtained by combining a convolutional layer, a ReLU/PreLU activation function, and another convolutional layer as shown in <figref idref="DRAWINGS">FIG. <b>12</b>B</figref>. Accordingly, in at least some examples, an attention is only applied to the last layer (e.g., on a feature map output of the last layer) of a residual block, rather than on every layer of the residual block. An example of applying an attention in this way is also shown in <figref idref="DRAWINGS">FIG. <b>15</b>B</figref>, discussed further below.</p><p id="p-0253" num="0194">In another example, an attention is only applied to specified layers (e.g., on feature maps output by the specified layers) of the NN filter model, rather than on every layer of the NN filter model. The specified layers may be specified by a topological structure of the NN filter model.</p><p id="p-0254" num="0195">A discussion of the model selection is provided.</p><heading id="h-0007" level="1">Example 1</heading><p id="p-0255" num="0196">1. A NN filter model may use external information such as a reconstruction parameter, a split or partitioning parameter, a prediction parameter, a boundary strength parameter, a QP, and the like (generally, coding parameters related to a video unit being filtered) as an input to obtain an attention. For example, the NN filter model has an attention mechanism that is based on a coding parameter input.</p><p id="p-0256" num="0197">a. In one example, convolutional layers of the NN filter model are used to extract features from external information or both external and internal information, where the internal information refers to the features extracted inside the network while the external information refers to other information that cannot be obtained from the features inside the network, such as coding parameters related to the video unit being filtered. At least one of those extracted features will be used as attention. As described above, <figref idref="DRAWINGS">FIG. <b>14</b></figref> provides an illustration of an attention mechanism in accordance with some examples, where the operation performed by the convolutional layer(s) is denoted as &#x3b1;, the external information is denoted as E, the internal information is denoted as I, and the obtained attention is denoted as A.</p><p id="p-0257" num="0198">i. In one example, E is one of a reconstruction parameter, a split or partitioning parameter, a prediction parameter, a boundary strength parameter, a QP, and the like.</p><p id="p-0258" num="0199">ii. In one example, E could be any combination of a reconstruction parameter, a split or partitioning parameter, a prediction parameter, a boundary strength parameter, a QP, and the like.</p><p id="p-0259" num="0200">iii. In one example, I is an intermediate feature map(s) of the NN models that will be recalibrated by the obtained attention.</p><p id="p-0260" num="0201">iv. In one example, A=&#x3b1;(E).</p><p id="p-0261" num="0202">v. In one example, A=&#x3b1;(E, I), where E and I are concatenated first and then fed into the convolutional layers.</p><p id="p-0262" num="0203">vi. In one example, A=&#x3b1;(E), where E is a concatenation of the reconstruction image and the split image, &#x3b1; is a two-layer convolutional neural network, A is a single channel feature map whose spatial resolution is the same as the feature maps that A is going to apply on.</p><p id="p-0263" num="0204">b. In one example, the obtained attention is used to recalibrate the intermediate feature maps. The intermediate feature maps of the NN model are denoted as G, where G&#x3f5;R<sup>N&#xd7;W&#xd7;H</sup>, where N, W, and H are the channel numbers, width, and height respectively. The obtained attention is denoted as A, where A&#x3f5;R<sup>W&#xd7;H </sup>represent the obtained attention. In this context, the &#x3f5; symbol indicates that G is an element of a set given by R<sup>N&#xd7;W&#xd7;H</sup>, and that A is an element of a set given by R<sup>W&#xd7;H</sup>.</p><p id="p-0264" num="0205">i. In one example, the process of applying the attention could be written as:</p><p id="p-0265" num="0206">&#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;A<sup>j,k</sup>, 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, where &#x3d5; is the recalibrated feature maps.</p><p id="p-0266" num="0207">ii. In one example, the process of applying the attention could be written as:</p><p id="p-0267" num="0208">&#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>), 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, where &#x3d5; is the recalibrated feature maps, &#x192; stands for a mapping function applied on each element of the attention. The mapping function may be a sigmoid function, a hyperbolic tangent (e.g., tan h) function, and the like. For example, a sigmoid function is a function having a characteristic &#x2018;S&#x2019;-shaped or sigmoid curve. The hyperbolic tangent function is one example of a sigmoid function.</p><p id="p-0268" num="0209">1. In one example, for different channels of feature maps, different A and/or different &#x192; may be used.</p><p id="p-0269" num="0210">iii. In one example, the process of applying the attention could be written as:</p><p id="p-0270" num="0211">&#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>)+G<sup>i,j,k</sup>, 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, where &#x3d5; is the recalibrated feature maps, &#x192; stands for a mapping function applied on each element of the attention. The mapping function may be a sigmoid function, a hyperbolic tangent (e.g., tan h) function, and the like.</p><p id="p-0271" num="0212">1. In one example, for different channels of feature maps, different A and/or different &#x192; may be used.</p><p id="p-0272" num="0213">iv. In one example, the attention operation may be applied to specified layers inside the network.</p><p id="p-0273" num="0214">1. In one example, when the network contains residual blocks, the attention operation is only applied on the feature maps from the last layer of each residual block.</p><heading id="h-0008" level="1">Example 2</heading><p id="p-0274" num="0215">2. In a second embodiment, the external attention mechanism described here may be applied in various ways. For example, the proposed external attention mechanism can be used in any NN models for video coding, such as NN-based intra/inter prediction, NN-based super-resolution, NN-based motion compensation, NN-based reference generation, NN-based fractional pixel interpolation, NN-based in-loop/post filtering, and the like.</p><p id="p-0275" num="0216">a. In one example, the external attention mechanism is used in NN-based in-loop filtering.</p><p id="p-0276" num="0217">A first exemplary embodiment is discussed.</p><p id="p-0277" num="0218">This first exemplary embodiment presents a convolutional neural network-based in-loop filtering method wherein adaptive model selection is introduced. The proposed Deep in-loop filter with Adaptive Model selection (DAM) method is developed from the prior contribution JVET-V0100, introducing a new network structure to the code base of VTM-11.0+NewMCTF. Compared with VTM-11.0+NewMCTF, the proposed method demonstrates BD-rate reductions for {Y, Cb, Cr}, under AI, RA, and LDB configurations.</p><p id="p-0278" num="0219">In this first exemplary embodiment, convolutional neural networks (CNN) are utilized to construct in-loop filters for reducing the distortion incurred during compression. The network structure is revised from the one discussed in Yue Li, Li Zhang, Kai Zhang, &#x201c;Deep in-loop filter with adaptive model selection,&#x201d; JVET-V0100. Similar to JVET-V0100, residual blocks are utilized as the basic module and stacked several times to construct the final network. As a further development from JVET-V0100, external attention mechanism is introduced in this contribution, leading to an increased representation capability with a similar model size. In addition, to deal with different types of content, individual networks are trained for different types of slices and quality levels.</p><p id="p-0279" num="0220">The first exemplary embodiment is related to that shown in <figref idref="DRAWINGS">FIGS. <b>12</b>A and <b>12</b>B</figref>. To improve the architecture, <figref idref="DRAWINGS">FIGS. <b>15</b>A and <b>15</b>B</figref> are now introduced, which include the external attention mechanism. <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> is a schematic block diagram of architecture <b>1500</b> of a NN filtering method in accordance with various examples, and <figref idref="DRAWINGS">FIG. <b>15</b>B</figref> is a schematic block diagram showing the construction of an attention residual block <b>1550</b> used in the architecture <b>1500</b> of <figref idref="DRAWINGS">FIG. <b>15</b>A</figref> in accordance with various examples.</p><p id="p-0280" num="0221">In addition to the attention residual block <b>1550</b>, other parts of the architecture <b>1500</b> are the same as those in JVET-V0100. The calculation process in the attention module <b>1550</b> can be written as:</p><p id="p-0281" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?><i>F</i>_out=<i>F</i>_in &#xd7;&#x192;(Rec,Pred)+<i>F</i>_in<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0282" num="0222">Where F_in and F_out denote the input and the output of the attention module <b>1550</b>, respectively. Rec and Pred stand for the reconstruction and the prediction, respectively. In this example, &#x192; comprises 2 convolutional layers, where an activation function is applied after the first convolutional layer. The objective off is to generate a spatial attention map from external information, which then recalibrates the feature maps F_in.</p><p id="p-0283" num="0223">In the proposed technique of the first exemplary embodiment, each slice or block could determine whether to apply the CNN-based filter or not. When the CNN-based filter is determined to be applied to a slice/block, which model from a candidate model list including three models could be further decided. To this end, individual models are trained with QPs in {17, 22, 27, 32, 37, 42}. Given a test QP for a sequence, denoted as q, the candidate model list includes models trained with QPs equal to {q, q&#x2212;5, q&#x2212;10}. The selection process is based on the rate-distortion cost at the encoder side. Indication of on/off control as well as the model index, if needed, are signalled in the bitstream. Other details regarding the model selection are provided as below.</p><p id="p-0284" num="0224">The granularity of the filter determination and the model selection is dependent on resolution and QP. In the proposed scheme, given a higher resolution and a larger QP, the determination and selection will be performed for a larger region.</p><p id="p-0285" num="0225">The candidate model list is different across different temporal layers. For a low temporal layer, the third candidate is replaced by the intra-slice NN filter model if the ratio of intra-coded samples is no smaller than a threshold. For a high temporal layer, the third candidate, i.e. the model corresponding to q&#x2212;10, is replaced by the model corresponding to q+5.</p><p id="p-0286" num="0226">For all-intra configuration, model selection is disabled while on/off control is still preserved.</p><p id="p-0287" num="0227">An open source machine learning framework, such as PyTorch, is useful for performing the inference of the proposed CNN filters in VTM. The network information in the inference stage is provided in Table 1-1 as suggested by S. Liu, A. Segall, E. Alshina, R.-L. Liao., &#x201c;JVET common test conditions and evaluation procedures for neural network-based video coding technology,&#x201d; JVET-V2016.</p><p id="p-0288" num="0000"><tables id="TABLE-US-00011" num="00011"><table frame="none" colsep="0" rowsep="0" pgwide="1"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="259pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1-1</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Network Information for NN-based Video Coding Tool Testing in Inference Stage</entry></row><row><entry>Network Information in Inference Stage</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="112pt" align="left"/><colspec colname="3" colwidth="112pt" align="left"/><tbody valign="top"><row><entry>Mandatory</entry><entry>HW environment:</entry><entry/></row><row><entry/><entry>GPU Type</entry><entry>N/A</entry></row><row><entry/><entry>Framework:</entry><entry>PyTorch v1.6</entry></row><row><entry/><entry>Number of GPUs per Task</entry><entry>0</entry></row><row><entry/><entry>Total Parameter Number</entry><entry>5.51M/model</entry></row><row><entry/><entry>Parameter Precision (Bits)</entry><entry>32 (F)</entry></row><row><entry/><entry>Memory Parameter (MB)</entry><entry>~22.1M/model, 24 models in total</entry></row><row><entry/><entry>MAC (Giga)</entry><entry>1.43M/pixel</entry></row><row><entry>Optional</entry><entry>Total Conv. Layers</entry><entry>69 + 64</entry></row><row><entry/><entry>Total FC Layers</entry><entry>0</entry></row><row><entry/><entry>Total Memory (MB)</entry><entry/></row><row><entry/><entry>Batch size:</entry><entry>1</entry></row><row><entry/><entry>Patch size</entry><entry>32 &#xd7; 32, 64 &#xd7; 64, 128 &#xd7; 128, 256 &#xd7; 256</entry></row><row><entry/><entry>Changes to network configuration or </entry><entry/></row><row><entry/><entry>weights required to generate rate </entry><entry/></row><row><entry/><entry>points</entry><entry/></row><row><entry/><entry>Peak Memory Usage</entry><entry/></row><row><entry/><entry>Other information:</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0289" num="0228">PyTorch may also be used as the training platform. The DIV2K (from https://data.vision.ee.ethz.ch/cvl/DIV2K/, R. Timofte, E. Agustsson, S. Gu, J. Wu, A. Ignatov, L. V. Gool) and BVI-DVC (from Ma, Di, Fan Zhang, and David R. Bull. &#x201c;BVI-DVC: A Training Database for Deep Video Compression.&#x201d; arXiv preprint arXiv:2003.13552 (2020).) datasets are adopted to train the CNN filters of I slices and B slices, respectively. Different CNN models are trained to adapt to different QP points. The network information in the training stage is provided in Table 1-2 as suggested by S. Liu, A. Segall, E. Alshina, R.-L. Liao., &#x201c;JVET common test conditions and evaluation procedures for neural network-based video coding technology,&#x201d; JVET-V2016.</p><p id="p-0290" num="0000"><tables id="TABLE-US-00012" num="00012"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1-2</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Network Information for NN-based Video Coding Tool </entry></row><row><entry>Testing in Training Stage</entry></row><row><entry>Network Information in Training Stage</entry></row><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="84pt" align="left"/><colspec colname="3" colwidth="98pt" align="center"/><tbody valign="top"><row><entry>Mandatory</entry><entry>GPU Type</entry><entry>GPU: Tesla-V100-SXM2-32 GB</entry></row><row><entry/><entry>Framework:</entry><entry>PyTorch v1.6</entry></row><row><entry/><entry>Number of GPUs per Task</entry><entry>2</entry></row><row><entry/><entry>Epoch:</entry><entry>90</entry></row><row><entry/><entry>Batch size:</entry><entry>64</entry></row><row><entry/><entry>Training time:</entry><entry>60 h/model</entry></row><row><entry/><entry>Training data information:</entry><entry>DIV2K, BVI-DVC</entry></row><row><entry/><entry>Training configurations for </entry><entry>VTM-11.0 + new MCTF, QP </entry></row><row><entry/><entry>generating compressed </entry><entry>{17, 22, 27, 32, 37, 42}</entry></row><row><entry/><entry>training data (if different to </entry><entry/></row><row><entry/><entry>VTM CTC):</entry><entry/></row><row><entry/><entry>Loss function:</entry><entry>L1, L2</entry></row><row><entry>Optional</entry><entry>Number of iterations</entry><entry/></row><row><entry/><entry>Patch size</entry><entry>128 &#xd7; 128</entry></row><row><entry/><entry>Learning rate:</entry><entry>1e&#x2212;4</entry></row><row><entry/><entry>Optimizer:</entry><entry>ADAM</entry></row><row><entry/><entry>Preprocessing:</entry><entry/></row><row><entry/><entry>Other information:</entry><entry/></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0291" num="0229">The proposed CNN-based in-loop filtering method is tested on top of VTM-11.0+new MCTF (from https://vcgit.hhi.fraunhofer.de/jvet/VVCSoftware_VTM/-/tags/VTM-11.0) according to the common test conditions suggested by S. Liu, A. Segall, E. Alshina, R.-L. Liao., &#x201c;JVET common test conditions and evaluation procedures for neural network-based video coding technology,&#x201d; JVET-V2016. The new MCTF patch is from https://vcgit.hhi.fraunhofer.de/jvet-ahg-nnvc/nnvc-ctc/-/tree/master/Software %20Patches.</p><p id="p-0292" num="0230">Deblocking filtering and SAO are disabled while ALF (and CCALF) is placed after the proposed CNN-based filtering. Test results are shown in Table 1-3 through Table 1-5. Under AI configurations, the proposed method can bring 9.12%, 22.39%, and 22.60% BD-rate reductions on average for Y, Cb, and Cr, respectively. Under RA configurations, the proposed method can bring 12.32%, 27.48%, and 27.22% BD-rate reductions on average for Y, Cb, and Cr, respectively. Under LDB configurations, the proposed method can bring %, %, and % BD-rate reductions on average for Y, Cb, and Cr, respectively.</p><p id="p-0293" num="0000"><tables id="TABLE-US-00013" num="00013"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1-3</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Performance of the proposed method on top of </entry></row><row><entry>VTM11.0 + new MCTF (RA)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="189pt" align="center"/><tbody valign="top"><row><entry/><entry>RA</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="28pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="28pt" align="center"/><tbody valign="top"><row><entry/><entry>YUV</entry><entry>Y</entry><entry>U</entry><entry>V</entry><entry>EncT</entry><entry>DecT</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row><row><entry>Class </entry><entry>&#x2212;14.27%</entry><entry>&#x2212;11.23%</entry><entry>&#x2212;21.85%</entry><entry>&#x2212;22.49%</entry><entry>316%</entry><entry>106894%</entry></row><row><entry>A1</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Class </entry><entry>&#x2212;15.97%</entry><entry>&#x2212;12.91%</entry><entry>&#x2212;26.09%</entry><entry>&#x2212;26.30%</entry><entry>300%</entry><entry>100508%</entry></row><row><entry>A2</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Class B</entry><entry>&#x2212;15.87%</entry><entry>&#x2212;11.87%</entry><entry>&#x2212;31.12%</entry><entry>&#x2212;28.84%</entry><entry>308%</entry><entry>100969%</entry></row><row><entry>Class C</entry><entry>&#x2212;16.51%</entry><entry>&#x2212;13.27%</entry><entry>&#x2212;28.19%</entry><entry>&#x2212;29.42%</entry><entry>237%</entry><entry>&#x2002;93822%</entry></row><row><entry>Class E</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Overall</entry><entry>&#x2212;15.74%</entry><entry>&#x2212;12.32%</entry><entry>&#x2212;27.48%</entry><entry>&#x2212;27.22%</entry><entry>287%</entry><entry>100056%</entry></row><row><entry>Class D</entry><entry>&#x2212;18.11%</entry><entry>&#x2212;14.95%</entry><entry>&#x2212;29.89%</entry><entry>&#x2212;30.63%</entry><entry>223%</entry><entry>&#x2002;87872%</entry></row><row><entry>Class F</entry><entry>&#x2002;&#x2212;8.69%</entry><entry>&#x2002;&#x2212;6.31%</entry><entry>&#x2212;17.37%</entry><entry>&#x2212;17.62%</entry><entry>436%</entry><entry>&#x2002;39043%</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0294" num="0000"><tables id="TABLE-US-00014" num="00014"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1-4</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Performance of the proposed method on top of </entry></row><row><entry>VTM11.0 + new MCTF (LDB)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="182pt" align="center"/><tbody valign="top"><row><entry/><entry>LDB</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><tbody valign="top"><row><entry/><entry>YUV</entry><entry>Y</entry><entry>U</entry><entry>V</entry><entry>EncT</entry><entry>DecT</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row><row><entry>Class A1</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Class A2</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Class B</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Class C</entry><entry>&#x2212;15.61%</entry><entry>&#x2212;12.20%</entry><entry>&#x2212;29.61%</entry><entry>&#x2212;30.35%</entry><entry>241%</entry><entry>99462%</entry></row><row><entry>Class E</entry><entry>&#x2212;12.82%</entry><entry>&#x2212;9.96%</entry><entry>&#x2212;24.12%</entry><entry>&#x2212;22.77%</entry><entry>611%</entry><entry>80736%</entry></row><row><entry>Overall</entry><entry/><entry/><entry/><entry/><entry/><entry/></row><row><entry>Class D</entry><entry>&#x2212;17.06%</entry><entry>&#x2212;13.52%</entry><entry>&#x2212;32.93%</entry><entry>&#x2212;33.23%</entry><entry>227%</entry><entry>90645%</entry></row><row><entry>Class F</entry><entry>&#x2002;&#x2212;9.31%</entry><entry>&#x2002;&#x2212;6.87%</entry><entry>&#x2212;19.80%</entry><entry>&#x2212;18.48%</entry><entry>442%</entry><entry>47851%</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0295" num="0000"><tables id="TABLE-US-00015" num="00015"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1-5</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Performance of the proposed method on top of VTM11.0 + new MCTF (AI)</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="2"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="182pt" align="center"/><tbody valign="top"><row><entry/><entry>AI</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="35pt" align="center"/><colspec colname="3" colwidth="35pt" align="center"/><colspec colname="4" colwidth="35pt" align="center"/><colspec colname="5" colwidth="35pt" align="center"/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><tbody valign="top"><row><entry/><entry>YUV</entry><entry>Y</entry><entry>U</entry><entry>V</entry><entry>EncT</entry><entry>DecT</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="7"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="35pt" align="char" char="."/><colspec colname="3" colwidth="35pt" align="char" char="."/><colspec colname="4" colwidth="35pt" align="char" char="."/><colspec colname="5" colwidth="35pt" align="char" char="."/><colspec colname="6" colwidth="21pt" align="center"/><colspec colname="7" colwidth="21pt" align="center"/><tbody valign="top"><row><entry>Class A1</entry><entry>&#x2212;10.74%</entry><entry>&#x2212;7.78%</entry><entry>&#x2212;18.09%</entry><entry>&#x2212;17.37%</entry><entry>253%</entry><entry>71308%</entry></row><row><entry>Class A2</entry><entry>&#x2212;11.27%</entry><entry>&#x2212;8.14%</entry><entry>&#x2212;22.53%</entry><entry>&#x2212;22.32%</entry><entry>182%</entry><entry>58999%</entry></row><row><entry>Class B</entry><entry>&#x2212;10.97%</entry><entry>&#x2212;8.21%</entry><entry>&#x2212;23.36%</entry><entry>&#x2212;22.65%</entry><entry>167%</entry><entry>55609%</entry></row><row><entry>Class C</entry><entry>&#x2212;12.33%</entry><entry>&#x2212;9.71%</entry><entry>&#x2212;21.56%</entry><entry>&#x2212;24.03%</entry><entry>134%</entry><entry>37708%</entry></row><row><entry>Class E</entry><entry>&#x2212;15.15%</entry><entry>&#x2212;12.18%</entry><entry>&#x2212;26.02%</entry><entry>&#x2212;26.11%</entry><entry>179%</entry><entry>60865%</entry></row><row><entry>Overall</entry><entry>&#x2212;11.98%</entry><entry>&#x2212;9.12%</entry><entry>&#x2212;22.39%</entry><entry>&#x2212;22.60%</entry><entry>175%</entry><entry>54509%</entry></row><row><entry>Class D</entry><entry>&#x2212;12.03%</entry><entry>&#x2212;9.36%</entry><entry>&#x2212;22.81%</entry><entry>&#x2212;24.31%</entry><entry>125%</entry><entry>32717%</entry></row><row><entry>Class F</entry><entry>&#x2212;6.35%</entry><entry>&#x2212;4.82%</entry><entry>&#x2212;13.56%</entry><entry>&#x2212;11.69%</entry><entry>132%</entry><entry>21437%</entry></row><row><entry namest="1" nameend="7" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0296" num="0231">The first exemplary embodiment presents a CNN-based in-loop filtering method. The proposed CNN-based filtering method demonstrates useful coding gains.</p><p id="p-0297" num="0232">Turning now to <figref idref="DRAWINGS">FIG. <b>16</b></figref>, a block diagram showing an example video processing system <b>1600</b> in which various techniques disclosed herein may be implemented. Various implementations may include some or all of the components of the video processing system <b>1600</b>. The video processing system <b>1600</b> may include input <b>1602</b> for receiving video content. The video content may be received in a raw or uncompressed format, e.g., 8 or 10 bit multi-component pixel values, or may be in a compressed or encoded format. The input <b>1602</b> may represent a network interface, a peripheral bus interface, or a storage interface. Examples of network interface include wired interfaces such as Ethernet, passive optical network (PON), etc. and wireless interfaces such as Wi-Fi or cellular interfaces.</p><p id="p-0298" num="0233">The video processing system <b>1600</b> may include a coding component <b>1604</b> that may implement the various coding or encoding methods described in the present document. The coding component <b>1604</b> may reduce the average bitrate of video from the input <b>1602</b> to the output of the coding component <b>1604</b> to produce a coded representation of the video. The coding techniques are therefore sometimes called video compression or video transcoding techniques. The output of the coding component <b>1604</b> may be either stored, or transmitted via a communication connected, as represented by the component <b>1606</b>. The stored or communicated bitstream (or coded) representation of the video received at the input <b>1602</b> may be used by the component <b>1608</b> for generating pixel values or displayable video that is sent to a display interface <b>1610</b>. The process of generating user-viewable video from the bitstream representation is sometimes called video decompression. Furthermore, while certain video processing operations are referred to as &#x201c;coding&#x201d; operations or tools, it will be appreciated that the coding tools or operations are used at an encoder and corresponding decoding tools or operations that reverse the results of the coding will be performed by a decoder.</p><p id="p-0299" num="0234">Examples of a peripheral bus interface or a display interface may include universal serial bus (USB) or high definition multimedia interface (HDMI) or Displayport, and so on. Examples of storage interfaces include SATA (serial advanced technology attachment), Peripheral Component Interconnect (PCI), Integrated Drive Electronics (IDE) interface, and the like. The techniques described in the present document may be embodied in various electronic devices such as mobile phones, laptops, smartphones or other devices that are capable of performing digital data processing and/or video display.</p><p id="p-0300" num="0235"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a block diagram of a video processing apparatus <b>1700</b>. The apparatus <b>1700</b> may be used to implement one or more of the methods described herein. The apparatus <b>1700</b> may be embodied in a smartphone, tablet, computer, Internet of Things (IoT) receiver, and so on. The apparatus <b>1700</b> may include one or more processors <b>1702</b>, one or more memories <b>1704</b> and video processing hardware <b>1706</b> (a.k.a., video processing circuitry). The processor(s) <b>1702</b> may be configured to implement one or more methods described in the present document. The memory (memories) <b>1704</b> may be used for storing data and code used for implementing the methods and techniques described herein. The video processing hardware <b>1706</b> may be used to implement, in hardware circuitry, some techniques described in the present document. In some embodiments, the hardware <b>1706</b> may be partly or completely located within the processor <b>1702</b>, e.g., a graphics processor.</p><p id="p-0301" num="0236"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a block diagram that illustrates an example video coding system <b>1800</b> that may utilize the techniques of this disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, the video coding system <b>1800</b> may include a source device <b>1810</b> and a destination device <b>1820</b>. Source device <b>1810</b> generates encoded video data which may be referred to as a video encoding device. Destination device <b>1820</b> may decode the encoded video data generated by source device <b>1810</b> which may be referred to as a video decoding device.</p><p id="p-0302" num="0237">Source device <b>1810</b> may include a video source <b>1812</b>, a video encoder <b>1814</b>, and an input/output (I/O) interface <b>1816</b>.</p><p id="p-0303" num="0238">Video source <b>1812</b> may include a source such as a video capture device, an interface to receive video data from a video content provider, and/or a computer graphics system for generating video data, or a combination of such sources. The video data may comprise one or more pictures. Video encoder <b>1814</b> encodes the video data from video source <b>1812</b> to generate a bitstream. The bitstream may include a sequence of bits that form a coded representation of the video data. The bitstream may include coded pictures and associated data. The coded picture is a coded representation of a picture. The associated data may include sequence parameter sets, picture parameter sets, and other syntax structures. I/O interface <b>1816</b> may include a modulator/demodulator (modem) and/or a transmitter. The encoded video data may be transmitted directly to destination device <b>1820</b> via I/O interface <b>1816</b> through network <b>1830</b>. The encoded video data may also be stored onto a storage medium/server <b>1840</b> for access by destination device <b>1820</b>.</p><p id="p-0304" num="0239">Destination device <b>1820</b> may include an I/O interface <b>1826</b>, a video decoder <b>1824</b>, and a display device <b>1822</b>.</p><p id="p-0305" num="0240">I/O interface <b>1826</b> may include a receiver and/or a modem. I/O interface <b>1826</b> may acquire encoded video data from the source device <b>1810</b> or the storage medium/server <b>1840</b>. Video decoder <b>1824</b> may decode the encoded video data. Display device <b>1822</b> may display the decoded video data to a user. Display device <b>1822</b> may be integrated with the destination device <b>1820</b>, or may be external to destination device <b>1820</b> which may be configured to interface with an external display device.</p><p id="p-0306" num="0241">Video encoder <b>1814</b> and video decoder <b>1824</b> may operate according to a video compression standard, such as the High Efficiency Video Coding (HEVC) standard, Versatile Video Coding (VVC) standard, and other current and/or further standards.</p><p id="p-0307" num="0242"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a block diagram illustrating an example of video encoder <b>1900</b>, which may be video encoder <b>1814</b> in the video coding system <b>1800</b> illustrated in <figref idref="DRAWINGS">FIG. <b>18</b></figref>.</p><p id="p-0308" num="0243">Video encoder <b>1900</b> may be configured to perform any or all of the techniques of this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>19</b></figref>, video encoder <b>1900</b> includes a plurality of functional components. The techniques described in this disclosure may be shared among the various components of video encoder <b>1900</b>. In some examples, a processor may be configured to perform any or all of the techniques described in this disclosure.</p><p id="p-0309" num="0244">The functional components of video encoder <b>1900</b> may include a partition unit <b>1901</b>, a prediction unit <b>1902</b> which may include a mode select unit <b>1903</b>, a motion estimation unit <b>1904</b>, a motion compensation unit <b>1905</b> and an intra prediction unit <b>1906</b>, a residual generation unit <b>1907</b>, a transform unit <b>1908</b>, a quantization unit <b>1909</b>, an inverse quantization unit <b>1910</b>, an inverse transform unit <b>1911</b>, a reconstruction unit <b>1912</b>, a buffer <b>1913</b>, and an entropy encoding unit <b>1914</b>.</p><p id="p-0310" num="0245">In other examples, video encoder <b>1900</b> may include more, fewer, or different functional components. In an example, prediction unit <b>1902</b> may include an intra block copy (IBC) unit. The IBC unit may perform prediction in an IBC mode in which at least one reference picture is a picture where the current video block is located.</p><p id="p-0311" num="0246">Furthermore, some components, such as motion estimation unit <b>1904</b> and motion compensation unit <b>1905</b> may be highly integrated, but are represented in the example of <figref idref="DRAWINGS">FIG. <b>19</b></figref> separately for purposes of explanation.</p><p id="p-0312" num="0247">Partition unit <b>1901</b> may partition a picture into one or more video blocks. Video encoder <b>1814</b> and video decoder <b>1824</b> of <figref idref="DRAWINGS">FIG. <b>18</b></figref> may support various video block sizes.</p><p id="p-0313" num="0248">Mode select unit <b>1903</b> may select one of the coding modes, intra or inter, e.g., based on error results, and provide the resulting intra- or inter-coded block to a residual generation unit <b>1907</b> to generate residual block data and to a reconstruction unit <b>1912</b> to reconstruct the encoded block for use as a reference picture. In some examples, mode select unit <b>1903</b> may select a combination of intra and inter prediction (CIIP) mode in which the prediction is based on an inter prediction signal and an intra prediction signal. Mode select unit <b>1903</b> may also select a resolution for a motion vector (e.g., a sub-pixel or integer pixel precision) for the block in the case of inter-prediction.</p><p id="p-0314" num="0249">To perform inter prediction on a current video block, motion estimation unit <b>1904</b> may generate motion information for the current video block by comparing one or more reference frames from buffer <b>1913</b> to the current video block. Motion compensation unit <b>1905</b> may determine a predicted video block for the current video block based on the motion information and decoded samples of pictures from buffer <b>1913</b> other than the picture associated with the current video block.</p><p id="p-0315" num="0250">Motion estimation unit <b>1904</b> and motion compensation unit <b>1905</b> may perform different operations for a current video block, for example, depending on whether the current video block is in an I slice, a P slice, or a B slice. I-slices (or I-frames) are the least compressible but don't require other video frames to decode. S-slices (or P-frames) can use data from previous frames to decompress and are more compressible than I-frames. B-slices (or B-frames) can use both previous and forward frames for data reference to get the highest amount of data compression.</p><p id="p-0316" num="0251">In some examples, motion estimation unit <b>1904</b> may perform uni-directional prediction for the current video block, and motion estimation unit <b>1904</b> may search reference pictures of list 0 or list 1 for a reference video block for the current video block. Motion estimation unit <b>1904</b> may then generate a reference index that indicates the reference picture in list 0 or list 1 that contains the reference video block and a motion vector that indicates a spatial displacement between the current video block and the reference video block. Motion estimation unit <b>1904</b> may output the reference index, a prediction direction indicator, and the motion vector as the motion information of the current video block. Motion compensation unit <b>1905</b> may generate the predicted video block of the current block based on the reference video block indicated by the motion information of the current video block.</p><p id="p-0317" num="0252">In other examples, motion estimation unit <b>1904</b> may perform bi-directional prediction for the current video block, motion estimation unit <b>1904</b> may search the reference pictures in list 0 for a reference video block for the current video block and may also search the reference pictures in list 1 for another reference video block for the current video block. Motion estimation unit <b>1904</b> may then generate reference indexes that indicate the reference pictures in list 0 and list 1 containing the reference video blocks and motion vectors that indicate spatial displacements between the reference video blocks and the current video block. Motion estimation unit <b>1904</b> may output the reference indexes and the motion vectors of the current video block as the motion information of the current video block. Motion compensation unit <b>1905</b> may generate the predicted video block of the current video block based on the reference video blocks indicated by the motion information of the current video block.</p><p id="p-0318" num="0253">In some examples, motion estimation unit <b>1904</b> may output a full set of motion information for decoding processing of a decoder.</p><p id="p-0319" num="0254">In some examples, motion estimation unit <b>1904</b> may not output a full set of motion information for the current video. Rather, motion estimation unit <b>1904</b> may signal the motion information of the current video block with reference to the motion information of another video block. For example, motion estimation unit <b>1904</b> may determine that the motion information of the current video block is sufficiently similar to the motion information of a neighboring video block.</p><p id="p-0320" num="0255">In one example, motion estimation unit <b>1904</b> may indicate, in a syntax structure associated with the current video block, a value that indicates to the video decoder <b>1824</b> that the current video block has the same motion information as another video block.</p><p id="p-0321" num="0256">In another example, motion estimation unit <b>1904</b> may identify, in a syntax structure associated with the current video block, another video block and a motion vector difference (MVD). The motion vector difference indicates a difference between the motion vector of the current video block and the motion vector of the indicated video block. The video decoder <b>1824</b> may use the motion vector of the indicated video block and the motion vector difference to determine the motion vector of the current video block.</p><p id="p-0322" num="0257">As discussed above, video encoder <b>1814</b> may predictively signal the motion vector. Two examples of predictive signaling techniques that may be implemented by video encoder <b>1814</b> include advanced motion vector prediction (AMVP) and merge mode signaling.</p><p id="p-0323" num="0258">Intra prediction unit <b>1906</b> may perform intra prediction on the current video block. When intra prediction unit <b>1906</b> performs intra prediction on the current video block, intra prediction unit <b>1906</b> may generate prediction data for the current video block based on decoded samples of other video blocks in the same picture. The prediction data for the current video block may include a predicted video block and various syntax elements.</p><p id="p-0324" num="0259">Residual generation unit <b>1907</b> may generate residual data for the current video block by subtracting (e.g., indicated by the minus sign) the predicted video block(s) of the current video block from the current video block. The residual data of the current video block may include residual video blocks that correspond to different sample components of the samples in the current video block.</p><p id="p-0325" num="0260">In other examples, there may be no residual data for the current video block, for example in a skip mode, and residual generation unit <b>1907</b> may not perform the subtracting operation.</p><p id="p-0326" num="0261">Transform unit <b>1908</b> may generate one or more transform coefficient video blocks for the current video block by applying one or more transforms to a residual video block associated with the current video block.</p><p id="p-0327" num="0262">After transform unit <b>1908</b> generates a transform coefficient video block associated with the current video block, quantization unit <b>1909</b> may quantize the transform coefficient video block associated with the current video block based on one or more quantization parameter (QP) values associated with the current video block.</p><p id="p-0328" num="0263">Inverse quantization unit <b>1910</b> and inverse transform unit <b>1911</b> may apply inverse quantization and inverse transforms to the transform coefficient video block, respectively, to reconstruct a residual video block from the transform coefficient video block. Reconstruction unit <b>1912</b> may add the reconstructed residual video block to corresponding samples from one or more predicted video blocks generated by the prediction unit <b>1902</b> to produce a reconstructed video block associated with the current block for storage in the buffer <b>1913</b>.</p><p id="p-0329" num="0264">After reconstruction unit <b>1912</b> reconstructs the video block, loop filtering operation may be performed to reduce video blocking artifacts in the video block.</p><p id="p-0330" num="0265">Entropy encoding unit <b>1914</b> may receive data from other functional components of the video encoder <b>1900</b>. When entropy encoding unit <b>1914</b> receives the data, entropy encoding unit <b>1914</b> may perform one or more entropy encoding operations to generate entropy encoded data and output a bitstream that includes the entropy encoded data.</p><p id="p-0331" num="0266"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a block diagram illustrating an example of video decoder <b>2000</b>, which may be video decoder <b>1824</b> in the video coding system <b>1800</b> illustrated in <figref idref="DRAWINGS">FIG. <b>18</b></figref>.</p><p id="p-0332" num="0267">The video decoder <b>2000</b> may be configured to perform any or all of the techniques of this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the video decoder <b>2000</b> includes a plurality of functional components. The techniques described in this disclosure may be shared among the various components of the video decoder <b>2000</b>. In some examples, a processor may be configured to perform any or all of the techniques described in this disclosure.</p><p id="p-0333" num="0268">In the example of <figref idref="DRAWINGS">FIG. <b>20</b></figref>, video decoder <b>2000</b> includes an entropy decoding unit <b>2001</b>, a motion compensation unit <b>2002</b>, an intra prediction unit <b>2003</b>, an inverse quantization unit <b>2004</b>, an inverse transformation unit <b>2005</b>, and a reconstruction unit <b>2006</b> and a buffer <b>2007</b>. Video decoder <b>2000</b> may, in some examples, perform a decoding pass generally reciprocal to the encoding pass described with respect to video encoder <b>1814</b> (<figref idref="DRAWINGS">FIG. <b>18</b></figref>).</p><p id="p-0334" num="0269">Entropy decoding unit <b>2001</b> may retrieve an encoded bitstream. The encoded bitstream may include entropy coded video data (e.g., encoded blocks of video data). Entropy decoding unit <b>2001</b> may decode the entropy coded video data, and from the entropy decoded video data, motion compensation unit <b>2002</b> may determine motion information including motion vectors, motion vector precision, reference picture list indexes, and other motion information. Motion compensation unit <b>2002</b> may, for example, determine such information by performing the AMVP and merge mode signaling.</p><p id="p-0335" num="0270">Motion compensation unit <b>2002</b> may produce motion compensated blocks, possibly performing interpolation based on interpolation filters. Identifiers for interpolation filters to be used with sub-pixel precision may be included in the syntax elements.</p><p id="p-0336" num="0271">Motion compensation unit <b>2002</b> may use interpolation filters as used by video encoder <b>1814</b> during encoding of the video block to calculate interpolated values for sub-integer pixels of a reference block. Motion compensation unit <b>2002</b> may determine the interpolation filters used by video encoder <b>1814</b> according to received syntax information and use the interpolation filters to produce predictive blocks.</p><p id="p-0337" num="0272">Motion compensation unit <b>2002</b> may use some of the syntax information to determine sizes of blocks used to encode frame(s) and/or slice(s) of the encoded video sequence, partition information that describes how each macroblock of a picture of the encoded video sequence is partitioned, modes indicating how each partition is encoded, one or more reference frames (and reference frame lists) for each inter-encoded block, and other information to decode the encoded video sequence.</p><p id="p-0338" num="0273">Intra prediction unit <b>2003</b> may use intra prediction modes for example received in the bitstream to form a prediction block from spatially adjacent blocks. Inverse quantization unit <b>2004</b> inverse quantizes, i.e., de-quantizes, the quantized video block coefficients provided in the bitstream and decoded by entropy decoding unit <b>2001</b>. Inverse transform unit <b>2005</b> applies an inverse transform.</p><p id="p-0339" num="0274">Reconstruction unit <b>2006</b> may sum the residual blocks with the corresponding prediction blocks generated by motion compensation unit <b>2002</b> or intra-prediction unit <b>2003</b> to form decoded blocks. If desired, a deblocking filter may also be applied to filter the decoded blocks in order to remove blockiness artifacts. The decoded video blocks are then stored in buffer <b>2007</b>, which provides reference blocks for subsequent motion compensation/intra prediction and also produces decoded video for presentation on a display device.</p><p id="p-0340" num="0275"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a method <b>2100</b> for coding video data according to an embodiment of the disclosure. The method <b>2100</b> may be performed by a coding apparatus (e.g., an encoder) having a processor and a memory. The method <b>2100</b> may be implemented to provide a NN filter model that uses external information (e.g., a coding parameter) as an attention mechanism. Such a NN filter model allows such external information to be used to recalibrate one or more feature maps generated by the NN filter.</p><p id="p-0341" num="0276">In block <b>2102</b>, the coding apparatus applies a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample. The NN filter is based on an NN filter model having an attention mechanism that is based on a coding parameter input. For example, the NN filter model is configured to obtain an attention that is based on the coding parameter input. In an embodiment, an unfiltered sample is a sample (or pixel) that has not yet been subjected to any filtering process, or has not yet been sufficiently filtered. For example, the unfiltered sample has not been subjected to any NN filter. As another example, the unfiltered sample has not been subjected to an NN filter, an adaptive loop filter (ALF), a deblocking filter (DF), a sample adaptive offset (SAO) filter, or combinations thereof.</p><p id="p-0342" num="0277">In block <b>2104</b>, the coding apparatus converts between a video media file and a bitstream based on the filtered sample that was generated.</p><p id="p-0343" num="0278">When implemented in an encoder, converting includes receiving a media file (e.g., a video unit) and encoding a filtered sample into a bitstream. When implemented in a decoder, converting includes receiving a bitstream including a filtered sample, and decoding the bitstream to obtain the filtered sample.</p><p id="p-0344" num="0279">In an embodiment, the method <b>2100</b> may utilize or incorporate one or more of the features or processes of the other methods disclosed herein.</p><p id="p-0345" num="0280">In one example, a non-transitory computer readable medium stores a bitstream of a video that is generated by a method, such as all or part of the method <b>2100</b>, performed by a video processing apparatus (e.g., video processing apparatus <b>1700</b>, described above). For example, the bitstream may be generated by applying a NN filter to an unfiltered sample of a video unit to generate a filtered sample. As described above, the NN filter is based on an NN filter model generated using a quality-level indicator (QI) input, and the bitstream is generated based on the filtered sample.</p><p id="p-0346" num="0281">A listing of solutions preferred by some embodiments is provided next.</p><p id="p-0347" num="0282">The following solutions show example embodiments of techniques discussed in the present disclosure (e.g., Example 1).</p><p id="p-0348" num="0283">1. A method of video processing, comprising: performing a conversion between a video comprising a video block and a bitstream of the video based on a rule, wherein the conversion includes filtering at least some samples of the video block using a neural network (NN) filter that uses one or more NN models, and wherein the rule specifies that the one or more NN models are equipped with an attention mechanism based on external information of the video.</p><p id="p-0349" num="0284">2. The method of claim <b>1</b>, wherein the rule specifies that convolutional layers of the NN are used for extracting features from the external information, and using the extracted features E as an attention A in the one or more NN models.</p><p id="p-0350" num="0285">3. The method of claim <b>2</b>, wherein the rule specifies to use internal information I for determining A.</p><p id="p-0351" num="0286">4. The method of claim <b>3</b>, wherein I includes an intermediate feature map of the one or more NN models.</p><p id="p-0352" num="0287">5. The method of any of claims <b>2</b>-<b>4</b>, wherein the rule specifies that A is obtained only from E and without using I.</p><p id="p-0353" num="0288">6. The method of any of claims <b>2</b>-<b>4</b>, wherein the rule specifies that A is obtained by concatenating E with I.</p><p id="p-0354" num="0289">7. The method of any of claims <b>2</b>-<b>6</b>, wherein the rule specifies that A is obtained using a two-layer convolutional neural network.</p><p id="p-0355" num="0290">8. The method of any of claims <b>2</b>-<b>7</b>, wherein the conversion includes: recalibrating intermediate feature maps of the video using the attention A.</p><p id="p-0356" num="0291">9. The method of claim <b>8</b>, wherein the intermediate feature maps of the one or more NN model as represented as G&#x3f5;R<sup>N&#xd7;W&#xd7;H</sup>, where N, W, and H are the channel numbers, width, and height respectively, and wherein the attention A is represented as A&#x3f5;R<sup>W&#xd7;H</sup>.</p><p id="p-0357" num="0292">10. The method of claim <b>9</b>, wherein the applying the attention is: &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;A<sup>j,k</sup>, 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, where &#x3d5; is the recalibrated feature maps.</p><p id="p-0358" num="0293">11. The method of claim <b>10</b>, wherein the process of applying the attention is: &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>), 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, where &#x3d5; is the recalibrated feature maps, &#x192; stands for a mapping function applied on each element of the attention.</p><p id="p-0359" num="0294">12. The method of claim <b>11</b>, wherein the function is a sigmoid function or a tan h function.</p><p id="p-0360" num="0295">13. The method of claims <b>11</b>-<b>12</b>, wherein for different channels of feature maps, different A and/or different &#x192; are used.</p><p id="p-0361" num="0296">14. The method of claim <b>10</b>, wherein the applying the attention is: &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>)+G<sup>i,j,k</sup>, 1&#x2264;i&#x2264;N, 1&#x2264;j&#x2264;W, 1&#x2264;k&#x2264;H, where &#x3d5; is the recalibrated feature maps, &#x192; stands for a mapping function applied on each element of the attention.</p><p id="p-0362" num="0297">15. The method of claim <b>14</b>, wherein for different channels of feature maps, different A and/or different &#x192; may be used.</p><p id="p-0363" num="0298">16. The method of claims <b>10</b>-<b>15</b>, wherein, the attention operation may be applied to specified layers inside the NN.</p><p id="p-0364" num="0299">17. The method of any of claims <b>10</b>-<b>16</b>, wherein the rule specifies that when the NN contains residual blocks, the attention operation is only applied on the feature maps from the last layer of each residual block.</p><p id="p-0365" num="0300">18. The method of claim <b>14</b>, wherein the function is a sigmoid function or a tan h function.</p><p id="p-0366" num="0301">19. The method of any of claims <b>1</b>-<b>18</b>, wherein the external information includes splitting scheme for the video block.</p><p id="p-0367" num="0302">20. The method of claims <b>1</b>-<b>18</b>, wherein the external information includes a prediction mode of the video block.</p><p id="p-0368" num="0303">21. The method of any of claims <b>1</b>-<b>18</b>, wherein the external information includes a quantization parameter associated with the video block.</p><p id="p-0369" num="0304">22. The method of any of claims <b>1</b>-<b>21</b>, wherein the external information includes a boundary strength parameter for a boundary of the video block.</p><p id="p-0370" num="0305">23. The method of any of claims <b>1</b>-<b>22</b>, wherein the conversion comprises generating the bitstream from the video.</p><p id="p-0371" num="0306">24. The method of any of claims <b>1</b>-<b>22</b>, wherein the conversion comprises generating the video from the bitstream.</p><p id="p-0372" num="0307">25. A video decoding apparatus comprising a processor configured to implement a method recited in one or more of claims <b>1</b> to <b>24</b>.</p><p id="p-0373" num="0308">26. A video encoding apparatus comprising a processor configured to implement a method recited in one or more of claims <b>1</b> to <b>24</b>.</p><p id="p-0374" num="0309">27. A computer program product having computer code stored thereon, the code, when executed by a processor, causes the processor to implement a method recited in any of claims <b>1</b> to <b>24</b>.</p><p id="p-0375" num="0310">28. A computer readable medium having a bitstream stored thereupon, the bitstream being generated by a method recited in any of claims <b>1</b> to <b>24</b>.</p><p id="p-0376" num="0311">29. A method of generating a bitstream, comprising generating a bitstream using one or more of claims <b>1</b>-<b>24</b> and writing the bitstream to a computer-readable medium.</p><p id="p-0377" num="0312">30. A method, an apparatus or a system described in the present document.</p><p id="p-0378" num="0313">The following documents are incorporated by reference in their entirety:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0314">[1] Johannes Ball&#xe9;, Valero Laparra, and Eero P Simoncelli, &#x201c;End-to-end optimization of nonlinear transform codes for perceptual quality,&#x201d; PCS IEEE (2016), 1-5.</li>        <li id="ul0008-0002" num="0315">[2] Lucas Theis, Wenzhe Shi, Andrew Cunningham, and Ferenc Huszir, &#x201c;Lossy image compression with compressive autoencoders,&#x201d; arXiv preprint arXiv:1703.00395 (2017).</li>        <li id="ul0008-0003" num="0316">[3] Jiahao Li, Bin Li, Jizheng Xu, Ruiqin Xiong, and Wen Gao, &#x201c;Fully Connected Network-Based Intra Prediction for Image Coding, &#x201c;IEEE Transactions on Image Processing&#x201d; 27, 7 (2018), 3236-3247.</li>        <li id="ul0008-0004" num="0317">[4] Yuanying Dai, Dong Liu, and Feng Wu, &#x201c;A convolutional neural network approach for post-processing in HEVC intra coding,&#x201d; MMM. Springer, 28-39.</li>        <li id="ul0008-0005" num="0318">[5] Rui Song, Dong Liu, Houqiang Li, and Feng Wu, &#x201c;Neural network-based arithmetic coding of intra prediction modes in HEVC,&#x201d; VCIP IEEE (2017), 1-4.</li>        <li id="ul0008-0006" num="0319">[6] J. Pfaff, P. Helle, D. Maniry, S. Kaltenstadler, W. Samek, H. Schwarz, D. Marpe, and T. Wiegand, &#x201c;Neural network based intra prediction for video coding,&#x201d; Applications of Digital Image Processing XLI, Vol. 10752. International Society for Optics and Photonics, 1075213 (2018).</li>    </ul>    </li></ul></p><p id="p-0379" num="0320">The disclosed and other solutions, examples, embodiments, modules and the functional operations described in this document can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this document and their structural equivalents, or in combinations of one or more of them. The disclosed and other embodiments can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more them. The term &#x201c;data processing apparatus&#x201d; encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. A propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.</p><p id="p-0380" num="0321">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p><p id="p-0381" num="0322">The processes and logic flows described in this document can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).</p><p id="p-0382" num="0323">Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random-access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and compact disk read-only memory (CD ROM) and digital versatile disc-read only memory (DVD-ROM) disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p><p id="p-0383" num="0324">While this patent document contains many specifics, these should not be construed as limitations on the scope of any subject matter or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular techniques. Certain features that are described in this patent document in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p><p id="p-0384" num="0325">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. Moreover, the separation of various system components in the embodiments described in this patent document should not be understood as requiring such separation in all embodiments.</p><p id="p-0385" num="0326">Only a few implementations and examples are described and other implementations, enhancements and variations can be made based on what is described and illustrated in this patent document.</p><p id="p-0386" num="0327">While this patent document contains many specifics, these should not be construed as limitations on the scope of any subject matter or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular techniques. Certain features that are described in this patent document in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable sub-combination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a sub-combination or variation of a sub-combination.</p><p id="p-0387" num="0328">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. Moreover, the separation of various system components in the embodiments described in this patent document should not be understood as requiring such separation in all embodiments.</p><p id="p-0388" num="0329">Only a few implementations and examples are described and other implementations, enhancements and variations can be made based on what is described and illustrated in this patent document.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001 MATH-US-00001-2" nb-file="US20230007246A1-20230105-M00001.NB"><img id="EMI-M00001" he="18.37mm" wi="76.20mm" file="US20230007246A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00002" nb-file="US20230007246A1-20230105-M00002.NB"><img id="EMI-M00002" he="8.47mm" wi="76.20mm" file="US20230007246A1-20230105-M00002.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00003" nb-file="US20230007246A1-20230105-M00003.NB"><img id="EMI-M00003" he="6.69mm" wi="76.20mm" file="US20230007246A1-20230105-M00003.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00004 MATH-US-00004-2" nb-file="US20230007246A1-20230105-M00004.NB"><img id="EMI-M00004" he="8.81mm" wi="76.20mm" file="US20230007246A1-20230105-M00004.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-math idrefs="MATH-US-00005 MATH-US-00005-2" nb-file="US20230007246A1-20230105-M00005.NB"><img id="EMI-M00005" he="11.26mm" wi="76.20mm" file="US20230007246A1-20230105-M00005.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method implemented by a video coding apparatus, comprising:<claim-text>applying a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input; and</claim-text><claim-text>performing a conversion between a video media file and a bitstream based on the filtered sample that was generated.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the coding parameter input comprises one or more selected from a group consisting of: a partitioning scheme for the video unit; a prediction mode of the video unit; a quantization parameter associated with the video unit; and a boundary strength parameter for a boundary of the video unit.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>extracting features from the coding parameter input using convolutional layers of the NN filter; and</claim-text><claim-text>using the extracted features as an attention in the NN filter model.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein an intermediate feature map of the NN filter model is to be recalibrated by the attention, and wherein the attention is obtained by concatenating the coding parameter input with the intermediate feature map to provide a concatenated result, and feeding the concatenated result into the convolutional layers of the NN filter.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the attention is obtained using a two-layer convolutional neural network, and wherein the attention is a single-channel feature map having a spatial resolution that is the same as a spatial resolution of an intermediate feature map of the NN filter model to be recalibrated by the attention.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, further comprising recalibrating intermediate feature maps of the NN filter model using the attention, wherein the intermediate feature maps of the NN filter model are given as G, where G&#x3f5;R<sup>N&#xd7;W&#xd7;H</sup>, wherein N is a channel number, W is a channel width, and H is a channel height, and wherein the obtained attention is given as A, where A E R<sup>W&#xd7;H</sup>.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein 0 represents the recalibrated intermediate feature maps, and wherein applying the attention comprises providing the recalibrated intermediate feature maps according to &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;A<sup>j,k</sup>, wherein 1&#x2264;i&#x2264;N, wherein 1&#x2264;j&#x2264;W, and wherein 1&#x2264;k&#x2264;H.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein # represents the recalibrated intermediate feature maps, and wherein applying the attention comprises providing the recalibrated intermediate feature maps according to &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>), wherein 1&#x2264;i&#x2264;N, wherein 1&#x2264;j&#x2264;W, wherein 1&#x2264;k&#x2264;H, and wherein &#x192; represents a mapping function applied on each element of the attention.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the mapping function &#x192; comprises a sigmoid function or a hyperbolic tangent function.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein a different A or &#x192; is used for different channels of the intermediate feature maps.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein &#x3d5; represents the recalibrated intermediate feature maps, and wherein applying the attention comprises providing the recalibrated intermediate feature maps according to &#x3d5;<sup>i,j,k</sup>=G<sup>i,j,k</sup>&#xd7;&#x192;(A<sup>j,k</sup>)+G<sup>i,j,k</sup>, wherein 1&#x2264;i&#x2264;N, wherein 1&#x2264;j&#x2264;W, wherein 1&#x2264;k&#x2264;H, and wherein &#x192; represents a mapping function applied on each element of the attention.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the mapping function &#x192; comprises a sigmoid function or a hyperbolic tangent function.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a different A or &#x192; is used for different channels of the intermediate feature maps.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the attention is applied to specified layers inside the NN filter model.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the NN filter model contains residual blocks, and wherein the attention is only applied on feature maps from a last layer of each residual block.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the NN filter is one or more selected from a group consisting of an adaptive loop filter, a deblocking filter, and a sample adaptive offset filter.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the conversion comprises generating the bitstream according to the video media file.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the conversion comprises parsing the bitstream to obtain the video media file.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. An apparatus for coding video data comprising a processor and a non-transitory memory with instructions thereon, wherein the instructions upon execution by the processor cause the processor to:<claim-text>apply a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input; and</claim-text><claim-text>convert between a video media file and a bitstream based on the filtered sample that was generated.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer readable medium storing a bitstream of a video that is generated by a method performed by a video processing apparatus, wherein the method comprises:<claim-text>applying a neural network (NN) filter to an unfiltered sample of a video unit to generate a filtered sample, wherein the NN filter is based on an NN filter model configured to obtain an attention based on a coding parameter input; and</claim-text><claim-text>generating the bitstream based on the filtered sample that was generated.</claim-text></claim-text></claim></claims></us-patent-application>