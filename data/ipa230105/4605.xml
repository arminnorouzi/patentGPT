<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004606A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004606</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17901196</doc-number><date>20220901</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>GB</country><doc-number>1914692.7</doc-number><date>20191010</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9532</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>951</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9538</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>954</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9532</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>951</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9538</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>954</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>134</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">DATA RETRIEVAL SYSTEM AND METHOD</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17066922</doc-number><date>20201009</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11468130</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17901196</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Palantir Technologies Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Colquhoun</last-name><first-name>Elliot</first-name><address><city>Auckland</city><country>NZ</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Zabriskie</last-name><first-name>Hugh</first-name><address><city>Houston</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Casale</last-name><first-name>Joshua</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Ramsharan</last-name><first-name>Rahij</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Heerjee</last-name><first-name>Rushad</first-name><address><city>London</city><country>GB</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method, performed by one or more processors, including: receiving a user query; deriving, based on the user query, a search engine query for use with search engine software and a data access query for use with data access software; sending, to the search engine software, the search engine query to cause the search engine software to locate first data stored in a search engine index; sending, to the data access software, the data access query to cause the data access software to locate second data stored in a distributed data store; receiving, from the search engine software, the first data; and receiving, from the data access software, the second data.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="129.37mm" wi="158.75mm" file="US20230004606A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="183.81mm" wi="156.63mm" orientation="landscape" file="US20230004606A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="193.80mm" wi="142.83mm" file="US20230004606A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="186.44mm" wi="147.74mm" file="US20230004606A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="186.44mm" wi="147.91mm" file="US20230004606A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="187.54mm" wi="127.00mm" file="US20230004606A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.54mm" wi="127.00mm" file="US20230004606A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="187.54mm" wi="127.00mm" file="US20230004606A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="175.18mm" wi="122.68mm" orientation="landscape" file="US20230004606A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. application Ser. No. 17/066,922, filed Oct. 9, 2020, which claims priority to UK Patent Application No. 1914692.7, filed on Oct. 10, 2019, both incorporated by reference herein for all purposes.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates to systems and methods for retrieving data.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Data retrieval is a key function of modern computer systems. Data may be retrieved from a variety of data storage systems using appropriate retrieval operations. An example of a data storage system is a database. Data may be retrieved from a database using a query.</p><p id="p-0005" num="0004">A database is an organized collection of data which is stored and may be accessed electronically. Databases are used in virtually every commercial sector to store, organize and manage data relating to, for example, to cybersecurity data, technical processes, data analysis and transformation processes, and inventory management, to give a very limited number of examples. Non-relational databases tend to be the preferred class where scalability and distribution of database storage nodes on multiple computer systems is needed. Such scalability and provision of distributed storage are factors that many modern database users require, particularly where databases hold large amounts of data which increase over time. However, as the amount of data in a database grows, the amount of time required to retrieve data relevant to a query may also increase. This may hinder the usefulness of the database for online use.</p><p id="p-0006" num="0005">The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">According to a first aspect of the specification, there is provided a method, performed by one or more processors, including: receiving a user query; deriving, based on the user query, a search engine query for use with search engine software and a data access query for use with data access software; sending, to the search engine software, the search engine query to cause the search engine software to locate first data stored in a search engine index; sending, to the data access software, the data access query to cause the data access software to locate second data stored in a distributed data store; receiving, from the search engine software, the first data; and receiving, from the data access software, the second data.</p><p id="p-0008" num="0007">The search engine software may be distributed search engine software.</p><p id="p-0009" num="0008">The search engine index may be a distributed inverted index.</p><p id="p-0010" num="0009">The data access software may include a cluster-computing framework.</p><p id="p-0011" num="0010">The distributed data store may be a distributed database.</p><p id="p-0012" num="0011">The search engine index may store a subset of data stored in the distributed data store.</p><p id="p-0013" num="0012">The distributed data store comprises a first one or more computing devices located at a first data center and a second one or more computing devices located at a second data center.</p><p id="p-0014" num="0013">The method may further include, in response to receiving the first data, sending the first data to a client device, and in response to receiving the second data, sending the second data to the client device. The operations of receiving and sending of the second data may be subsequent to the operations of receiving and sending of the first data.</p><p id="p-0015" num="0014">According to a second aspect of the specification, there is provided a system including:</p><p id="p-0016" num="0015">retrieval software; a search engine index; a distributed data store storing a superset of data stored in the search engine index; search engine software; and data access software.</p><p id="p-0017" num="0016">The search engine software may be configured to receive a search engine query in response to receiving the search engine query, to locate first data stored in the search engine index; and to send the first data to the retrieval software. The data access software may be configured to receive a data access query, in response to receiving the data access query, to locate second data stored in the distributed data store, and to send the second data to the retrieval software.</p><p id="p-0018" num="0017">The retrieval software may be configured to send, to the search engine software, a search engine query, receive, from the search engine software, first data, wherein the first data comprises one or more data records, derive, based on the one or more data records, a data access query for locating one or more data objects derived using data extracted from the one or more data records, send, to the data access software, the data access query, and receive, from the data access software, second data comprising the one or more data objects.</p><p id="p-0019" num="0018">The one or more data objects may be rich data objects defined using an ontology. The one or more data records may be log records.</p><p id="p-0020" num="0019">The retrieval software may be configured to receive a user query, to derive, based on the user query, a search engine query for use with the search engine software and a data access query for use the with data access software, to send, to the search engine software, the search engine query, to send, to the data access software, the data access query, to receive, from the search engine software, the first data, and to receive, from the data access software, the second data.</p><p id="p-0021" num="0020">The retrieval software may be configured, in response to receiving the first data, to send the first data to a client device, and in response to receiving the second data, to send the second data to the client device.</p><p id="p-0022" num="0021">The system may further include a client device configured to send, to the retrieval software, the user query, to receive, from the retrieval software, the first data, in response to receiving the first data, to display the first data, to receive, from the retrieval software, the second data, and in response to receiving the second data, to display the second data.</p><p id="p-0023" num="0022">The receiving and displaying of the second data may be subsequent to the receiving and displaying of the first data.</p><p id="p-0024" num="0023">The distributed data store may include a first one or more computing devices located at a first data center and a second one or more computing devices located at a second data center.</p><p id="p-0025" num="0024">The one or more server computing devices may be configured to perform any method according to the first aspect</p><p id="p-0026" num="0025">According to a third aspect, there may be provided a computer program, optionally stored on a non-transitory computer readable medium, which when executed by one or more processors of a data processing apparatus, may cause the data processing apparatus to carry out any method according to the first aspect.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0027" num="0026">The features of the subject innovations are set forth in the appended claims. However, for purpose of explanation, several aspects of the disclosed subject matter are set forth in the following figures.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustration an example of a computer system configured to facilitate data retrieval, in accordance with example embodiments;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a first example method for retrieving data using search engine software and data access software, in accordance with example embodiments;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating a second example method for retrieving data using search engine software and data access software, in accordance with example methods;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating an example method for displaying data received from retrieval software, in accordance with example embodiments;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIGS. <b>5</b>A, <b>5</b>B and <b>5</b>C</figref> are representative drawings illustrating an example instance of a graphical user interface for displaying data received from retrieval software; and</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of a computing device in which software-implemented processes of the example embodiments may be embodied.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0034" num="0033">Reference will now be made in detail to specific example embodiments for carrying out the subject matter of the present disclosure. In the following description, specific details are set forth in order to provide a thorough understanding of the subject matter. It shall be appreciated that embodiments may be practiced without some or all of these specific details.</p><heading id="h-0007" level="2">Computer System</heading><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example of a computer system configured to facilitate data retrieval, henceforth referred to as the data retrieval system <b>100</b>.</p><p id="p-0036" num="0035">As shown, the data retrieval system <b>100</b> may comprise a client computing device <b>120</b> usable by a human user <b>110</b>, one or more retrieval servers <b>130</b>, one or more search engine servers <b>140</b>, one or more data access servers <b>150</b>, and one or more distributed data stores <b>160</b>. The client computing device <b>120</b> and at least one of the one or more retrieval servers <b>130</b> may be configured to communicate with one another via a network (not shown). The network may include the Internet, an intranet, a local area network (LAN), a wide area network (WAN), a wired network, a wireless network, a virtual private network (VPN), and/or any combination of such networks, whether wireless or wired. For ease of understanding, various components of the system have each been described with reference to one or more computing devices. It should be noted that, in some embodiments, any number of these components may be collocated on the same computing device or distributed across multiple computing devices.</p><p id="p-0037" num="0036">The client computing device <b>120</b> may for instance be a laptop computer, a desktop computer, a mobile phone, a personal digital assistant (PDA), a tablet computer, a netbook, a television with one or more processors embedded therein or coupled thereto, a physical machine or a virtual machine. The client computing device <b>120</b> may include one or more of a keyboard, a mouse, a display <b>112</b>, or a touch screen (of which the display <b>112</b> may be a part of) or another form of input device. For example, the client computing device <b>120</b> may be composed of hardware components like those of computing device <b>500</b> described below with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0038" num="0037">The client computing device <b>120</b> may include client software <b>122</b> for displaying and analyzing received data. The client software <b>122</b> may interact with retrieval software <b>132</b> on the one or more retrieval servers <b>132</b> to provide this functionality. Aspects of the functionality of the client software <b>122</b> may be provided using one or more embodiments of the method <b>400</b> described with respect to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0039" num="0038">The functionality of the client software <b>122</b> may be accessed and interacted with by the user <b>110</b> using a graphical user interface (GUI) <b>114</b> shown on the display. The graphical user interface <b>114</b> may be provided by the client software <b>122</b>. The graphical user interface <b>114</b> may be a web browser window, a client application window, an operating system window, an integrated development environment window, a virtual terminal window or other computer graphical user interface window. An example graphical user interface <b>600</b> is illustrated in, and described with respect to <figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>C</figref>.</p><p id="p-0040" num="0039">While only one user <b>110</b> and one client computing device <b>120</b> are illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, example embodiments may be implemented for use by one or more users associated with one or more client computing devices.</p><p id="p-0041" num="0040">Each of the one or more retrieval server(s) <b>130</b> may include one or more processors (e.g. CPUs), a network interface, and memory. The processor is configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the respective server.</p><p id="p-0042" num="0041">Each of the one or more retrieval servers <b>130</b> may include a network interface that is configured to allow the server to transmit and receive data in one or more networks, e.g. one or more networks connecting the retrieval server <b>130</b> to at least one of the one or more search engine servers <b>140</b> and/or at least one of the one or more data access servers <b>150</b>. The network interface may include one or more network interface cards (NICs). The memory of the one or more retrieval servers <b>130</b> stores its respective data, software and computer-readable instructions which, when executed by the one or more processors of said retrieval servers, may perform operations described herein.</p><p id="p-0043" num="0042">The one or more retrieval server(s) <b>130</b> may include retrieval software <b>132</b>. The retrieval software <b>132</b> may provide functionality for receiving user queries from the client computing device <b>120</b>, retrieving data using the one or more search engine servers <b>140</b> and the one or more data access servers <b>150</b>, and sending data to the client computing device <b>120</b>. Aspects of the functionality of the retrieval software <b>132</b> may be provided by the retrieval software operating according to one or more embodiments, for example operations of a first method <b>200</b> and/or operations of a second method <b>300</b>, each of which is described below.</p><p id="p-0044" num="0043">Each of the one or more search engine servers <b>140</b> may include one or more processors (e.g. CPUs), a network interface, and memory. The processor(s) may be configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the respective search engine server. Each of the one or more search engine servers <b>140</b> may include a network interface that is configured to allow the search engine server to transmit and receive data using one or more networks, e.g. the one or more networks connecting the retrieval server <b>130</b> to at least one of the one or more search engine servers <b>140</b>. Where there are a plurality of search engine servers, the one or more networks may include one or more networks connecting the search engine server(s) with one another. The network interface may include one or more network interface cards (NICs). The memory of each of the one or more search engine servers <b>140</b> may store its respective data and instructions. In some embodiments, the one or more search engine servers <b>140</b> may be a plurality of search engine servers, e.g. a search engine server cluster, implementing a distributed search engine.</p><p id="p-0045" num="0044">Each of the one or more search engine servers <b>140</b> may include search engine software <b>142</b>. The search engine software <b>142</b> may be configured to receive a search engine query, which may be received from the retrieval server <b>130</b> and/or the retrieval software <b>132</b>. The search engine software <b>142</b> may locate data in a search engine index <b>144</b> in response to receiving the search engine query, and send the located data to the retrieval server <b>130</b> and/or the retrieval software <b>132</b>. The search engine query may be received in a text format specified by the search engine software <b>142</b> and/or via application programming interface (API) calls to the search engine software <b>142</b>. For example, the search engine query may be in the Query DSL (Domain Specific Language). The located data may include one or more data records <b>146</b>. The search engine software <b>142</b> may be any suitable search engine software. The search engine software <b>142</b> may be adapted for online use, e.g. to locate and retrieve some data relevant to the query nearly instantaneously. The adaptation of the search engine software <b>142</b> to online use may limit the amount of data that can be efficiently retrieved for each query. For example, a single Elasticsearch query cannot be used to retrieve more than 10000 data records at a time. The number of data records that may be efficiently or near instantaneously retrieved may have a lower limit, e.g. between 100 and 1000 records.</p><p id="p-0046" num="0045">Where a single search engine server <b>140</b> is used, the search engine software <b>142</b> may be an information retrieval library suitable for use on a single server, e.g. Lucene, Xapian or Sphinx.</p><p id="p-0047" num="0046">Where a plurality of search engine servers <b>140</b> are used, the search engine software <b>142</b> may be distributed search engine software configured for use across multiple servers, e.g. ElasticSearch or Solr. While configured for use across multiple servers, the distributed search engine software <b>142</b> may be adapted for situations where there is a low latency connection between the servers. The distributed search engine software may not be well suited for use across multiple servers located across several data centers. The distributed search engine software <b>142</b> may be particularly unsuited for use across data centers which are geographically distant from one another. The plurality of search engine servers <b>140</b> may be located in one data center or geographically proximate data centers, e.g. data centers within a hundred miles of one another. Distributed search engine software adaptation to low latency connections between search engine servers <b>140</b> may make it undesirable to use too large a number of search engine servers. Correspondingly, there may be an upper limit on the amount of data that it is desirable to store across the search engine servers <b>140</b>.</p><p id="p-0048" num="0047">The search engine index <b>144</b> may be any index usable by the search engine software <b>142</b> for locating and retrieving data. The search engine index <b>144</b> may have been created using the search engine software <b>142</b>. The search engine index <b>144</b> may include a subset of the data stored in the distributed data store <b>160</b>. Where there is a limit on the amount of data which it is possible and/or desirable to store in the search engine index <b>144</b>, the subset of the data may be the data which is considered to have the &#x2018;highest value&#x2019;. The highest value data may be data of types where there is a limited amount of that type of that data available and/or data which users of the data retrieval system <b>100</b> are most likely to desire fast access to.</p><p id="p-0049" num="0048">The search engine index <b>144</b> may have been created by using application programming interface (API) calls to the search engine software <b>144</b>, or a component thereof, to add data contained in the distributed data store to the search engine index <b>144</b>. The search engine index <b>144</b> may be an inverted index. An inverted index may store a mapping from content to a table location and/or document. Where a plurality of search engine servers <b>140</b> are used, the search engine index <b>144</b> may be distributed across the search engine servers <b>140</b>. The search engine index <b>144</b> may be distributed across the servers as index shards. Where the index shards are inverted indices, the search engine index <b>144</b> may be a distributed inverted index.</p><p id="p-0050" num="0049">The search engine index <b>144</b> may include a plurality of data records <b>146</b>. Each data record of the plurality of data records <b>146</b> may include values for one or more properties. The data records <b>146</b> may have been extracted from appropriate sources and stored in the distributed data store <b>160</b>, and then transferred into the search engine index <b>144</b>, e.g. by using an API of the search engine software <b>140</b>. The data records <b>144</b> may represent data of any desired type, e.g. system event records, documents, and/or maintenance logs.</p><p id="p-0051" num="0050">Examples of system event records include system log records and security monitoring application records.</p><p id="p-0052" num="0051">Examples of system log records include Windows&#xae; event log records and Linux log file records.</p><p id="p-0053" num="0052">Windows&#xae; event log records may be stored in and extracted from one or more of a Windows&#xae; Application log, a Windows&#xae; Security log, a Windows&#xae; Setup log, a Windows&#xae; System log, a Windows&#xae; Forwarded Events log, and application and/or service specific logs. Windows&#xae; event log records may be stored and/or output in the Windows XML, event log (EVTX) format, which is a binary XML, format, or in a format representing the data contained therein, e.g. the data in a human-readable XML format. Windows&#xae; event log records include one or more of the following properties: keywords, user, operational code, log (e.g. log text and/or markup), computer, process ID, thread ID, processor ID, session ID, kernel time, user time, processor time, correlation ID, relative correlation ID, and event source name.</p><p id="p-0054" num="0053">Linux log records may be in a standardized format specified by the Internet Engineering Task Force (IETF) RFC 5424 standard or the IETF RFC 3164 format. Linux log file records may be stored in and extracted from one or more log files. The one or more log files may be stored in a log directory of a Linux system, e.g. a &#x2018;/var/log&#x2019; directory. Examples of log files include: messages, syslog, auth.log, kern.log and cron. Linux log file records include one or more of the following properties: a timestamp, a hostname, an IP address, a facility code, a severity level, a message component, a tag, a version number, an application name, a process identifier, and a message identifier.</p><p id="p-0055" num="0054">Security monitoring application records are system event records produced by a security monitoring application. Examples of security monitoring applications include System Center Operations Manager (SCOM); Nagios; Rudder; and appropriately configured instances of Splunk and/or Kibana. The security monitoring application may be a network monitoring application. Examples of network monitoring applications include Zeek, Siricata and Snort. The security monitoring application may be an endpoint monitoring application. Examples of endpoint monitoring applications include Endgame, Carbonblack and CrowdStrike. The security monitoring application <b>152</b> may be an advanced threat protection (ATP) application, e.g. Microsoft Office 365 Advanced Threat Protection. The security monitoring application may be an antivirus application, e.g. AVG Antivirus, BitDefender Security, ClamAV, Microsoft Windows Defender and Sophos Anti-Virus.</p><p id="p-0056" num="0055">Each of the one or more data access servers <b>150</b> may include one or more processors (e.g. CPUs), a network interface, and memory. The processor(s) is configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the respective data access server. Each of the one or more data access servers <b>150</b> includes a network interface that is configured to allow the data access server to transmit and receive data in one or more networks, e.g. the one or more networks connecting the retrieval server <b>130</b> to at least one of the one or more data access servers <b>150</b> and/or one or more networks connecting at least one of the one or more data access servers <b>150</b> to the distributed data store <b>160</b>. The network interface may include one or more network interface cards (NICs). The memory of each of the one or more data access servers <b>150</b> stores its respective data and instructions. In some embodiments, the one or more data access servers <b>150</b> may be a plurality of data access servers, e.g. a data access server cluster.</p><p id="p-0057" num="0056">Each of the one or more data access servers <b>150</b> may include data access software <b>152</b>. The data access software <b>152</b> may be configured to receive a data access query, which may be received from the retrieval server <b>130</b> and/or the retrieval software <b>132</b>. The data access software <b>152</b> may locate data stored in the distributed data store <b>160</b> in response to receiving the data access query. The data access software may send data to the one or more retrieval servers <b>130</b> and/or retrieval software <b>132</b>. The data access query may be received in a text format specified by the data access software <b>152</b> and/or via API calls to the data access software <b>152</b>. For example, the data access query may be in Spark SQL, Cassandra Query Language or HiveQL. The located data may include one or more data records <b>166</b> and/or one or more data objects <b>168</b>. The data access software <b>152</b> may be a library or other software for querying the distributed data store <b>160</b>. Where there are a plurality of data access servers <b>150</b>, the data access software <b>152</b> may be adapted for operating across multiple servers. For example, the data access software <b>152</b> may be a cluster-computing framework such as Spark or Hadoop. The data access software <b>152</b> may be adapted for batch retrieval and processing of data facilitating scalability over vast quantities of hardware but potentially increasing response time, e.g. it may take longer for data to be retrieved using the data access software <b>152</b> than using the search engine software <b>142</b>. The data access software <b>152</b> may also be more suited to retrieving and processing large quantities of data than the search engine software <b>142</b>. The data access software <b>152</b> may also be more tolerant of high latencies than the search engine software <b>142</b>, facilitating its use across data access servers <b>150</b> distributed across different geographical locations and/or data centers, and facilitating its use with data stores distributed across multiple geographical locations and/or data centers.</p><p id="p-0058" num="0057">The distributed data store <b>160</b> may be implemented using one or a plurality of data store computing devices <b>162</b>-<b>1</b>-<b>162</b>-N. Each of the plurality of data store computing devices <b>162</b>-<b>1</b>-<b>162</b>-N may include one or more processors (e.g., CPUs), a network interface, and memory. The processor(s) may be configured to execute computer instructions that are stored in one or more computer-readable media, for example, the memory of the data store computing device <b>162</b>-<b>1</b>-<b>162</b>-N. Each data store computing device <b>162</b>-<b>1</b>-<b>162</b>-N may include a network interface that is configured to allow the data store computing device to transmit and receive data in one or more networks. The network interface may include one or more network interface cards (NICs). The memory of each data store computing device <b>162</b>-<b>1</b>-<b>162</b>-N may store data or instructions. The instructions stored in the memory may include respective data store server software <b>164</b>-<b>1</b>-<b>164</b>-N.</p><p id="p-0059" num="0058">The data store server software <b>164</b>-<b>1</b>-<b>164</b>-N may be any suitable software for implementing a distributed data store across a plurality of data store computing devices <b>162</b>-<b>1</b>-<b>162</b>-N. The distributed data store <b>160</b> may be a distributed database and the data store software <b>164</b> may be distributed database server, e.g. Cassandra, HBase, or Riak. The distributed data store <b>160</b> may be a distributed file store and the data store software <b>164</b> may be a distribute file store server, e.g. Hadoop Distributed File System (HDFS) or Amazon&#xae; Simple Storage Server (S3).</p><p id="p-0060" num="0059">The data store server software <b>164</b>-<b>1</b>-<b>164</b>-N may be adapted for scalability over vast quantities of hardware but these adaptations may increase the time taken for data retrieval, e.g. it may take longer for data to be retrieved from the distributed data store <b>160</b> than from the search engine index <b>144</b>. The distributed data store server software <b>164</b>-<b>1</b>-<b>164</b>-N may also be more suited to storing and providing large quantities of data than the search engine index <b>144</b>. The distributed data store server software <b>164</b>-<b>1</b>-<b>164</b>-N may also be more tolerant of high latencies than the search engine software <b>142</b> facilitating its use across data store computing devices <b>162</b> distributed across different geographical locations and/or data centers.</p><p id="p-0061" num="0060">The data store computing devices <b>162</b>-<b>1</b>-<b>162</b>-N may store a respective plurality of data records <b>166</b>-<b>1</b>-<b>166</b>-N and/or a respective plurality of data objects <b>168</b>-<b>1</b>-<b>168</b>-N.</p><p id="p-0062" num="0061">Each data record of the plurality of data records <b>166</b>-<b>1</b>-<b>166</b>-N includes values for one or more properties. The data records <b>166</b>-<b>1</b>-<b>166</b>-N may have been extracted from appropriate sources and stored in the distributed data store <b>160</b>, e.g. by using the data access software <b>152</b> or an API of the distributed data store server software <b>164</b>-<b>1</b>-<b>164</b>-N. The plurality of data records <b>166</b>-<b>1</b>-<b>166</b>- may represent data of any desired type, e.g. system event records, documents, and/or maintenance logs. The plurality of data records <b>166</b>-<b>1</b>-<b>166</b>-N may be a superset of the plurality of data records <b>146</b> stored in the search engine index <b>146</b>. In addition to the data records <b>146</b> stored in the search engine index <b>144</b>, the plurality of data records <b>166</b>-<b>1</b>-<b>166</b>-N may include &#x2018;lower value&#x2019; data records. &#x2018;Lower value&#x2019; data records may be data records of types where there are vast amounts of type of that data available and/or data which users of the data retrieval system <b>100</b> are willing to tolerate a higher access latency for, e.g. wait longer to see the relevant data.</p><p id="p-0063" num="0062">Each data object of the plurality of data objects <b>168</b>-<b>1</b>-<b>168</b>-N may include values for one or more properties. At least some of the data objects of the plurality of data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be rich data objects. Rich data objects may include one or more of nested data objects and/or references to other data objects. The structure of rich data objects and the associations between them may be defined using an ontology. The ontology may define object types, object hierarchy relationships, e.g. inheritance hierarchies, and/or object composition relationships. The ontology may also specify how objects of a given type should be displayed.</p><heading id="h-0008" level="2">First Data Retrieval Method</heading><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart illustrating a first example method <b>200</b> for retrieving data. The method <b>200</b> may be performed by computer-readable instructions, e.g. software, for execution by one or more processors of one or more computing devices (e.g., the computing device <b>500</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>). In one embodiment, the one or more computing devices are the one or more retrieval servers <b>130</b>. The method <b>200</b> may be performed using retrieval software, e.g. the above-mentioned retrieval software <b>132</b> of the one or more retrieval server(s) <b>130</b>. The retrieval software <b>132</b> may be any number of and/or any combination of sequences of instructions, interpretable code, loadable modules, dynamic link libraries and/or computer programs. The retrieval software <b>132</b> may be implemented on a single computing device or distributed across multiple computing devices. Additional or fewer operations, or steps, may be used in some embodiments.</p><p id="p-0065" num="0064">At step <b>210</b>, a user query is received. The user query may be received from a client computing device, e.g. the client <b>120</b> or client software <b>122</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, or from an intermediary server computing device between the device implementing this method and a client computing device. The user query may be received in a query format constrained to operations capable of being executed by search engine software, e.g. the search engine software <b>142</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and data access software <b>152</b>, e.g. constrained to operations that can be represented both in a search query and a data access query. The query format may include corresponding operators for each operation in the intersection of the set of operations performable using the search engine software and the set of operations performable using the data access software, or may include corresponding operators for a subset of this intersection. The query format may be referred to as a common query language. The query format may be any suitable format, e.g. a text string, a markup language representation or a series of programmatic calls. The user query may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0066" num="0065">At step <b>220</b>, a search engine query for use with search engine software and a data access query for use with data access query are derived based on the user query. The derived search engine query and the derived data access query are commensurate queries, e.g. if the search engine query was performed using the search engine software <b>142</b> and the data access query was performed using the data access software <b>152</b> on equivalent datasets, then the same data or substantially the same data would be returned. The commensurate queries may be derived by parsing or otherwise processing the user query to derive equivalent operators in a search engine query format for the search engine query and to derive equivalent operators in a data access query format for the data access query. The derived search engine query may be in a text format or may be one or more API calls for the search engine software. Examples of search engine query formats include the Query DSL (Domain Specific Language).</p><p id="p-0067" num="0066">At step <b>230</b>, the search engine query is sent to the search engine software <b>142</b> to cause the search engine software to locate first data stored in a search engine index <b>144</b>. The search engine software may be the search engine software <b>142</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The search engine index may be the search engine index <b>144</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The search engine query may be sent to the search engine software <b>142</b> using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0068" num="0067">At step <b>240</b>, the data access query is sent to the data access software <b>152</b> to cause the data access software to locate second data stored in a distributed data store. The data access software may be the data access software <b>152</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The distributed data store may be the distributed data store <b>160</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The data access query may be sent to the data access software <b>152</b> using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0069" num="0068">At step <b>250</b>, first data is received from the search engine software <b>142</b>. The first data may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage. The first data may include one or more data records, e.g. at least one of the one or more data records <b>146</b>-<b>1</b> <b>146</b>-N described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The first data may be received from the search engine software <b>142</b> after a short time period, e.g. less than ten seconds, as the search engine software may be adapted for online use, e.g. to locate and retrieve some data relevant to the search engine query nearly instantaneously. The adaptation of the search engine software <b>142</b> to online use may limit the amount of data that can be efficiently located and retrieved for each query which may correspondingly limit the maximum size of the first data. For example, a single Elasticsearch query cannot be used to retrieve more than 10000 data records at a time. The size of the first data may correspondingly be limited to 10000 data records. The number of data records that may be efficiently or near instantaneously retrieved may have a lower limit, e.g. between 100 and 1000 data records. The size of the first data may corresponding be limited to a number of data records between 100 and 1000 data records.</p><p id="p-0070" num="0069">Step <b>260</b> is optional, as is indicated by the dashed lines. At step <b>260</b>, the first data is sent to a client device <b>120</b> in response to receiving the first data. Where the first data is received near instantaneously, e.g. because the search engine software <b>142</b> is adapted for online use, the first data may be sent to the client device <b>120</b> near instantaneously. The first data may be sent to the client device <b>120</b> using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0071" num="0070">At step <b>270</b>, the second data is received from the data access software <b>152</b>. The second data may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage. The second data may include one or more data records, e.g. at least one of the one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and/or one or more data objects, e.g. at least one of the one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The second data may be received from the data access software <b>152</b> after a longer time period than the first data, e.g. one or more minutes, as the data access software may be adapted for batch processing, e.g. to retrieving and processing large quantities of data. The receiving of the second data may be subsequent to the receiving of the first data. The receiving of the second may be subsequent to sending the first data to the client device.</p><p id="p-0072" num="0071">Step <b>280</b> is optional, as is indicated by the dashed lines. At step <b>280</b>, the second data is sent to a client device <b>120</b> in response to receiving the second data. Where the second data is received after a longer time period than the first data, e.g. because the data access software <b>152</b> is adapted to batch processing, the second data may be sent to the client device <b>120</b> after a longer time period. The second data may be sent to the client device <b>120</b> using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage. The sending of the second data may be subsequent to the receiving of the first data. The sending of the second may be subsequent to sending the first data to the client device <b>120</b>.</p><heading id="h-0009" level="2">Second Data Retrieval Method</heading><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart illustrating a second example method <b>300</b> for retrieving data. The method <b>300</b> may be performed by computer-readable instructions, e.g. software, for execution by one or more processors of one or more computing devices (e.g., the computing device <b>500</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>). In some embodiments, the one or more computing devices are the one or more retrieval servers <b>130</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The method <b>300</b> may be performed using retrieval software, e.g. the retrieval software <b>132</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The retrieval software <b>132</b> may be any number of and/or any combination of sequences of instructions, interpretable code, loadable modules, dynamic link libraries and/or computer programs. The retrieval software <b>132</b> may be implemented on a single computing device or distributed across multiple computing devices.</p><p id="p-0074" num="0073">At step <b>310</b>, a search engine query is sent to search engine software <b>142</b>. The search engine query may be in a text format or may be one or more API calls for the search engine software. Examples of search engine query formats include the Query DSL (Domain Specific Language). The search engine query may be a derived search engine query, e.g. derived based on a user query as described in relation to step <b>220</b> of the first method <b>200</b>. The search engine query may be sent to the search engine software <b>142</b> using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0075" num="0074">At step <b>320</b>, first data is received from the search engine software <b>142</b>. The first data includes one or more data records, e.g. at least one of the one or more data records <b>146</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The first data may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage. The first data may be received from the search engine software <b>142</b> after a short time period, e.g. less than ten seconds, as the search engine software may be adapted for online use, e.g. to locate and retrieve some data relevant to the search engine query nearly instantaneously. The adaptation of the search engine software <b>142</b> to online use may limit the amount of data that can be efficiently located and retrieved for each query which may correspondingly limit the maximum size of the first data. For example, a single Elasticsearch query cannot be used to retrieve more than 10000 data records at a time. The size of the first data may correspondingly be limited to 10000 data records. The number of data records that may be efficiently or near instantaneously retrieved may have a lower limit, e.g. between 100 and 1000 data records. The size of the first data may corresponding be limited to a number of data records between 100 and 1000 data records.</p><p id="p-0076" num="0075">At step <b>330</b>, a data access query for locating one or more data objects derived using data extracted from the one or more data records is derived based on the one or more data records. Each data record of the one or more data records may include identifiers for a data object or data objects derived using the respective data record, e.g. one or more data object IDs. The derived data access query may include these identifiers such that the one or more objects can be located. Each data record of the one or more data records may include an identifier for itself, e.g. a data record identifier. The derived data access query may include these data record identifiers. The one or more data objects may include appropriate data record identifiers or otherwise indirectly reference and/or be connected to appropriate data record identifiers. The derived data access query may include the data record identifier for each of the one or more data records and include appropriate operations such that the one or more relevant data objects can be located. The derived data access query may be in a text format or may be one or more API calls for the data access software. Examples of data access query formats include Spark SQL, Cassandra Query Language and HiveQL. The data access query may be derived in response to receiving an indication from a client device that data objects related to one or more data records are desired.</p><p id="p-0077" num="0076">At step <b>340</b>, the data access query is sent to the data access software <b>152</b>. The data access software may be the data access software <b>152</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Sending the data access query to the data access software may cause the data access software <b>152</b> to locate second data in one or more data stores <b>162</b>-<b>1</b>-<b>162</b>-N where the second data includes the one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N. The one or more data stores <b>162</b>-<b>1</b>-<b>162</b>-N may be the distributed data store <b>160</b> described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The data access query may be sent to the data access software <b>152</b> using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0078" num="0077">At step <b>350</b>, second data comprising the one or more data objects may be received from the data access software <b>152</b>. At least some of the one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be rich data objects. Rich data objects may include one or more of nested data objects and/or references to other data objects. The structure of rich data objects and the associations between them may be defined using an ontology. The ontology may define object types, object hierarchy relationships, e.g. inheritance hierarchies, and/or object composition relationships. The ontology may also specify how objects of a given type should be displayed. The second data may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage. The second data may be received from the data access software after a longer time period than the first data, e.g. one or more minutes, as the data access software may be adapted for batch processing, e.g. to retrieving and processing large quantities of data. The receiving of the second data may be subsequent to the receiving of the first data.</p><heading id="h-0010" level="2">Data Display Method</heading><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart illustrating an example method <b>400</b> for displaying data. The method <b>400</b> is performed by computer-readable instructions, e.g. software, for execution by one or more processors of one or more computing devices (e.g., the computing device <b>500</b> of <figref idref="DRAWINGS">FIG. <b>6</b></figref>). In one embodiment, the one or more computing devices are the client computing device <b>120</b>. The method <b>400</b> may be performed using client software, e.g. the client software <b>122</b>. The client software may be any number of and/or any combination of sequences of instructions, interpretable code, loadable modules, dynamic link libraries and/or computer programs. The client software may be implemented on a single computing device or distributed across multiple computing devices.</p><p id="p-0080" num="0079">At step <b>410</b>, a user query is sent to the retrieval software. The retrieval software may be, for example, retrieval software <b>132</b>. The retrieval software <b>132</b> may be executed on a retrieval server, e.g. retrieval server <b>130</b>. The user query may be or may be based on received user input, e.g. one or more keyboard inputs and/or one or more mouse inputs. The sending of the user query may be in response to one or more user inputs, e.g. a user pressing the enter key on a keyboard or clicking a button in a graphical user interface.</p><p id="p-0081" num="0080">The user query may be sent in a query format constrained to operations capable of being executed by search engine software <b>142</b> and data access software <b>152</b>, e.g. constrained to operations that can be represented both in a search query and a data access query. The query format may include corresponding operators for each operation in the intersection of the set of operations performable using the search engine software <b>142</b> and the set of operations performable using the data access software <b>152</b>, or may include corresponding operators for a subset of this intersection. The query format may be referred to as a common query language. The query format may be any suitable format, e.g. a text string, a markup language representation or a series of programmatic calls. The user query may be sent using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0082" num="0081">At step <b>420</b>, first data is received from the retrieval software <b>132</b>. The first data may be received in response to the sending of the user query to the retrieval software <b>132</b>. The first data may be received near instantaneously after the sending of the user query as the first data may be data received from the search engine software <b>142</b> adapted for online use. The first data may include one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N. The one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N may be received in any suitable form. For example, the one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N may be received as or received as part of one or more strings; XML, formatted data; one or more JSON objects; one or more files and/or platform specific markup or binary format data. The first data may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0083" num="0082">At step <b>430</b>, the first data is displayed in response to receiving the first data. Where the first data is received near instantaneously, the first data may be displayed near instantaneously. The first data may include one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N. The one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N may be displayed on the display simultaneously or using user interface elements whereby a user provides inputs to access some of the one or more data records and/or properties thereof. For example, the user may scroll down or scroll across to access some of the data records <b>166</b>-<b>1</b>-<b>166</b>-N and/or some of the properties of the data records; and/or may click a user interface element, e.g. an expand button, to access some of the one or more properties of a data record. The one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N may be displayed in a format corresponding to and/or based on the format of the data records. For example, where the one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N are received as markup language, the display format may be based on the structure of the markup language.</p><p id="p-0084" num="0083">At step <b>440</b>, second data is received from the retrieval software <b>132</b>. The second data may be received in response to the sending of the user query to the retrieval software <b>132</b>. The second data may be received after a longer time period than the first data as the second data may be data received from data access software <b>152</b> adapted for batch processing. The second data may include one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N and/or one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N. The one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N and/or one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be received in any suitable form. For example, the one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N and/or one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be received as or received as part of one or more strings; XML formatted data; one or more JSON objects; one or more files and/or platform specific markup or binary format data. The one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N and/or the one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be received using any suitable mechanism, e.g. one or more remote service calls; one or more representational state transfer (REST) operations; one or more API calls; reception or retrieval of an event from an event queue; reception or retrieval of a message from a message queue; an internal networking protocol; a file sharing protocol or service; shared memory; or shared persistent storage.</p><p id="p-0085" num="0084">At step <b>450</b>, the first data is displayed in response to receiving the second data. Where the second data is received after a longer time period than the first data, the second data may be displayed after a longer time period than the first data, e.g. after one or more minutes. The second data may include one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N and/or one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N. The one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N and/or data records <b>166</b>-<b>1</b>-<b>166</b>-N may be displayed on the display simultaneously or using user interface elements whereby a user provides inputs to access some of the one or more data objects, one or more data records and/or properties of other. For example, the user may scroll down or scroll across to access some of the data records <b>166</b>-<b>1</b>-<b>166</b>-N or objects <b>168</b>-<b>1</b>-<b>168</b>-N and/or some of the properties of the data records or objects; and/or may click a user interface element, e.g. an expand button, to access some of the one or more properties of a data record. The one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N may be displayed in a format corresponding to and/or based on the format of the data records. The one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be displayed in a format corresponding to and/or based on the format of the data objects. For example, where the one or more data objects are received as markup language, the display format may be based on the structure of the markup language.</p><p id="p-0086" num="0085">In some embodiments, the steps <b>440</b> and <b>450</b> may be repeated. In the first repetition, one or more data records <b>166</b>-<b>1</b>-<b>166</b>-N may be received and displayed, and in the second repetition one or more data objects <b>168</b>-<b>1</b>-<b>168</b>-N may be received and displayed.</p><heading id="h-0011" level="2">Data Display User Interface</heading><p id="p-0087" num="0086"><figref idref="DRAWINGS">FIGS. <b>5</b>A-<b>5</b>C</figref> illustrate example graphical user interfaces (GUIs) <b>600</b>A-<b>600</b>C for displaying data received from retrieval software.</p><p id="p-0088" num="0087">Referring to <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, a GUI <b>600</b>A may be displayed by a client application, e.g. the client application <b>122</b>. For ease of explanation, the elements are shown in a single window but it should be noted that one or more parts of the illustrated GUI <b>600</b> may be in a separate tab, window or overlay, and/or may be dynamically shown or hidden.</p><p id="p-0089" num="0088">The GUI <b>600</b>A includes a query entry box <b>610</b>A. A query may be entered into the query entry box <b>610</b>A by a user, e.g. using one or more keyboard, mouse or touchscreen inputs. The query may be a user query in a user query format interpretable by the retrieval software <b>132</b> and/or may be a query in a format from which a user query in the user query format can be derived, e.g. a user query in the common query language.</p><p id="p-0090" num="0089">The GUI <b>600</b>A includes a data record display area <b>620</b>A. The data record display area <b>620</b>A shows data records received from the retrieval software <b>132</b> in, in this case, a tabular format. An identifier for each data record may be displayed. Values for each of one or more properties for each of the data records may be displayed. For example, in the illustration, values for each of three properties&#x2014;Property A, Property B and Property C&#x2014;are shown. As is shown in search user interface illustration <b>600</b>A, the data record display area <b>620</b>A may display initial after a query is entered and/or submitted. The initial data records may be data records received from retrieval software near instantaneously, e.g. because the retrieval software received these data records from search engine software adapted for online use. The initial data records may not fill the entirety of the data record display area <b>620</b>A. The remainder of the data record display area <b>620</b>A may display a loading symbol such as that shown. The loading symbol may be animated.</p><p id="p-0091" num="0090">Referring to <figref idref="DRAWINGS">FIGS. <b>5</b>B and <b>5</b>C</figref>, in respect of GUIs <b>600</b>B and <b>600</b>C, additional data records may be subsequently displayed in the data record display areas <b>620</b>B, <b>620</b>C. These additional data records may be subsequently displayed as they are received from the retrieval software <b>132</b> after a longer time period than the initial data records, e.g. because the retrieval software received these data records from data access software adapted for batch processing.</p><p id="p-0092" num="0091">The GUIs <b>600</b>A-<b>600</b>C includes data object display areas <b>630</b>A-<b>630</b>C. As is shown in <figref idref="DRAWINGS">FIGS. <b>5</b>A and <b>5</b>B</figref>, in respect of GUIs <b>600</b>A and <b>600</b>B, the data object display area <b>630</b>A, <b>630</b>B may initially display a loading symbol such as that shown. Subsequently, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> for GUI <b>600</b>C, details of objects are displayed in the object display area <b>630</b>C. The displayed objects may be data objects derived from or otherwise associated with the data records displayed in the data record display area <b>620</b>. For each data object, an object identifier may be displayed. Several properties for each data object may also be displayed, e.g. the object type, the object name and the identifiers of one or more data records associated with the object. A user may access further properties of an object by providing a user input to an area of the data object display area <b>630</b>C included in or associated with the respective object. For example, the user may click on an expand button, such as the arrow symbol shown on the right-hand side for each of the data objects in the data object display area <b>630</b>C. The data objects may be displayed subsequent to the initial data records, as they are received from the retrieval software after a longer time period than the initial data records, e.g. because the retrieval software received these data records from data access software adapted for batch processing. The data objects may be displayed subsequent to the additional data records as they are received from the retrieval software after a longer time period than the additional records, e.g. because the amount of data in the data objects is greater and/or the query to retrieve them is more complex.</p><heading id="h-0012" level="1">Example Computing Device</heading><p id="p-0093" num="0092">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, it is a block diagram that illustrates an example computing device <b>500</b> in which software-implemented processes of the subject innovations may be embodied. Computing device <b>500</b> and its components, including their connections, relationships, and functions, is meant to be exemplary only, and not meant to limit implementations of the subject innovations. Other computing devices suitable for implementing the subject innovations may have different components, including components with different connections, relationships, and functions.</p><p id="p-0094" num="0093">Computing device <b>500</b> may include a bus <b>502</b> or other communication mechanism for addressing main memory <b>506</b> and for transferring data between and among the various components of device <b>500</b>.</p><p id="p-0095" num="0094">Computing device <b>500</b> may also include one or more hardware processors <b>504</b> coupled with bus <b>502</b> for processing information. A hardware processor <b>504</b> may be a general purpose microprocessor, a system on a chip (SoC), or other processor suitable for implementing the subject innovations.</p><p id="p-0096" num="0095">Main memory <b>506</b>, such as a random access memory (RAM) or other dynamic storage device, also may be coupled to bus <b>502</b> for storing information and instructions to be executed by processor(s) <b>504</b>. Main memory <b>506</b> also may be used for storing temporary variables or other intermediate information during execution of software instructions to be executed by processor(s) <b>504</b>.</p><p id="p-0097" num="0096">Such software instructions, when stored in non-transitory storage media accessible to processor(s) <b>504</b>, render computing device <b>500</b> into a special-purpose computing device that is customized to perform the operations specified in the instructions. The terms &#x201c;instructions&#x201d;, &#x201c;software&#x201d;, &#x201c;software instructions&#x201d;, &#x201c;program&#x201d;, &#x201c;computer program&#x201d;, &#x201c;computer-executable instructions&#x201d;, and &#x201c;processor-executable instructions&#x201d; are to be broadly construed to cover any machine-readable information, whether or not human-readable, for instructing a computing device to perform specific operations, and including, but not limited to, application software, desktop applications, scripts, binaries, operating systems, device drivers, boot loaders, shells, utilities, system software, JAVASCRIPT, web pages, web applications, plugins, embedded software, microcode, compilers, debuggers, interpreters, virtual machines, linkers, and text editors.</p><p id="p-0098" num="0097">Computing device <b>500</b> also may include read only memory (ROM) <b>508</b> or other static storage device coupled to bus <b>502</b> for storing static information and instructions for processor(s) <b>504</b>.</p><p id="p-0099" num="0098">One or more mass storage devices <b>510</b> may be coupled to bus <b>502</b> for persistently storing information and instructions on fixed or removable media, such as magnetic, optical, solid-state, magnetic-optical, flash memory, or any other available mass storage technology. The mass storage may be shared on a network, or it may be dedicated mass storage. Typically, at least one of the mass storage devices <b>510</b> (e.g., the main hard disk for the device) stores a body of program and data for directing operation of the computing device, including an operating system, user application programs, driver and other support files, as well as other data files of all sorts.</p><p id="p-0100" num="0099">Computing device <b>500</b> may be coupled via bus <b>502</b> to display <b>512</b>, such as a liquid crystal display (LCD) or other electronic visual display, for displaying information to a computer user. In some configurations, a touch sensitive surface incorporating touch detection technology (e.g., resistive, capacitive, etc.) may be overlaid on display <b>512</b> to form a touch sensitive display for communicating touch gesture (e.g., finger or stylus) input to processor(s) <b>504</b>.</p><p id="p-0101" num="0100">An input device <b>514</b>, including alphanumeric and other keys, may be coupled to bus <b>502</b> for communicating information and command selections to processor <b>504</b>. In addition to or instead of alphanumeric and other keys, input device <b>514</b> may include one or more physical buttons or switches such as, for example, a power (on/off) button, a &#x201c;home&#x201d; button, volume control buttons, or the like.</p><p id="p-0102" num="0101">Another type of user input device may be a cursor control <b>516</b>, such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor <b>504</b> and for controlling cursor movement on display <b>512</b>. This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.</p><p id="p-0103" num="0102">While in some configurations, such as the configuration depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, one or more of display <b>512</b>, input device <b>514</b>, and cursor control <b>516</b> are external components (e.g., peripheral devices) of computing device <b>500</b>, some or all of display <b>512</b>, input device <b>514</b>, and cursor control <b>516</b> are integrated as part of the form factor of computing device <b>500</b> in other configurations.</p><p id="p-0104" num="0103">Functions of the disclosed systems, methods, and modules may be performed by computing device <b>500</b> in response to processor(s) <b>504</b> executing one or more programs of software instructions contained in main memory <b>506</b>. Such instructions may be read into main memory <b>506</b> from another storage medium, such as storage device(s) <b>510</b>. Execution of the software program instructions contained in main memory <b>506</b> cause processor(s) <b>504</b> to perform the functions of the disclosed systems, methods, and modules.</p><p id="p-0105" num="0104">While in some implementations, functions of the disclosed systems and methods are implemented entirely with software instructions, hard-wired or programmable circuitry of computing device <b>500</b> (e.g., an ASIC, a FPGA, or the like) may be used in place of or in combination with software instructions to perform the functions, according to the requirements of the particular implementation at hand.</p><p id="p-0106" num="0105">The term &#x201c;storage media&#x201d; as used herein refers to any non-transitory media that store data and/or instructions that cause a computing device to operate in a specific fashion. Such storage media may comprise non-volatile media and/or volatile media. Non-volatile media includes, for example, non-volatile random access memory (NVRAM), flash memory, optical disks, magnetic disks, or solid-state drives, such as storage device <b>510</b>. Volatile media includes dynamic memory, such as main memory <b>506</b>. Common forms of storage media include, for example, a floppy disk, a flexible disk, hard disk, solid-state drive, magnetic tape, or any other magnetic data storage medium, a CD-ROM, any other optical data storage medium, any physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, NVRAM, flash memory, any other memory chip or cartridge.</p><p id="p-0107" num="0106">Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example, transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus <b>502</b>. Transmission media can also take the form of acoustic or light waves, such as those generated during radio-wave and infra-red data communications.</p><p id="p-0108" num="0107">Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor(s) <b>504</b> for execution. For example, the instructions may initially be carried on a magnetic disk or solid-state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computing device <b>500</b> can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus <b>502</b>. Bus <b>502</b> carries the data to main memory <b>506</b>, from which processor(s) <b>504</b> retrieves and executes the instructions. The instructions received by main memory <b>506</b> may optionally be stored on storage device(s) <b>510</b> either before or after execution by processor(s) <b>504</b>.</p><p id="p-0109" num="0108">Computing device <b>500</b> also may include one or more communication interface(s) <b>518</b> coupled to bus <b>502</b>. A communication interface <b>518</b> provides a two-way data communication coupling to a wired or wireless network link <b>520</b> that is connected to a local network <b>522</b> (e.g., Ethernet network, Wireless Local Area Network, cellular phone network, Bluetooth wireless network, or the like). Communication interface <b>518</b> sends and receives electrical, electromagnetic, or optical signals that carry digital data streams representing various types of information. For example, communication interface <b>518</b> may be a wired network interface card, a wireless network interface card with an integrated radio antenna, or a modem (e.g., ISDN, DSL, or cable modem).</p><p id="p-0110" num="0109">Network link(s) <b>520</b> typically provide data communication through one or more networks to other data devices. For example, a network link <b>520</b> may provide a connection through a local network <b>522</b> to a host computer <b>524</b> or to data equipment operated by an Internet Service Provider (ISP) <b>526</b>. ISP <b>526</b> in turn provides data communication services through the world wide packet data communication network now commonly referred to as the &#x201c;Internet&#x201d; <b>528</b>. Local network(s) <b>522</b> and Internet <b>528</b> use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link(s) <b>520</b> and through communication interface(s) <b>518</b>, which carry the digital data to and from computing device <b>500</b>, are example forms of transmission media.</p><p id="p-0111" num="0110">Computing device <b>500</b> can send messages and receive data, including program code, through the network(s), network link(s) <b>520</b> and communication interface(s) <b>518</b>. In the Internet example, a server <b>530</b> might transmit a requested code for an application program through Internet <b>528</b>, ISP <b>526</b>, local network(s) <b>522</b> and communication interface(s) <b>518</b>.</p><p id="p-0112" num="0111">The received code may be executed by processor <b>504</b> as it is received, and/or stored in storage device <b>510</b>, or other non-volatile storage for later execution</p><p id="p-0113" num="0112">The above-described example computer hardware is presented for purpose of illustrating the example underlying computer components that may be employed for implementing the subject innovations. The subject innovations, however, are not necessarily limited to any particular computing environment or computing device configuration. Instead, the subject innovations may be implemented in any type of system architecture or processing environment that one skilled in the art, in light of this disclosure, would understand as capable of supporting the features and functions of the subject innovations as presented herein.</p><heading id="h-0013" level="2">Extensions and Alternatives</heading><p id="p-0114" num="0113">It is understood that any specific order or hierarchy of steps in the methods disclosed are an illustration of example approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the methods may be rearranged, or that all illustrated steps be performed. Some of the steps may be performed simultaneously. For example, in certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components illustrated above should not be understood as requiring such separation, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, performed by one or more processors, comprising:<claim-text>sending, to search engine software, a search engine query to cause the search engine software to locate first data stored in a first data store;</claim-text><claim-text>receiving, from the search engine software, the first data comprising one or more data records;</claim-text><claim-text>deriving, based on the first data, a data access query for locating second data using data extracted from the one or more data records, the second data comprising one or more data objects;</claim-text><claim-text>sending, to data access software, the data access query to cause the data access software to locate the second data stored in a second data store different from the first data store; and</claim-text><claim-text>receiving, from the data access software, the second data.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the first data store includes a search engine index;</claim-text><claim-text>the search engine index is configured to store the one or more data records; and</claim-text><claim-text>the search engine index includes an inverted index that is a mapping associated with the one or more data records.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein at least one data record of the one or more data records requires a first access speed faster than a second access speed of a data record not stored in the search engine index.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein at least one data record of the one or more data records is associated with a first data type, wherein a first amount of data of the first data type is lower than a second amount of data of a second data type different from the first data type, wherein a data record of the second data type is not stored in the search engine index.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first data store includes a distributed inverted index that is distributed across a plurality of computing devices.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the search engine query includes an application programming interface (API) call to the search engine software.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a first time period is between sending the search engine query and receiving the first data, wherein a second time period is between sending the data access query and receiving the second data, wherein the first time period is shorter than the second time period.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the second data store is a distributed data store that is implemented using a plurality of computing devices.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>in response to receiving the first data, sending the first data to a client device; and</claim-text><claim-text>in response to receiving the second data, sending the second data to the client device;</claim-text><claim-text>wherein the receiving of the second data is subsequent to the receiving of the first data, and</claim-text><claim-text>wherein the one or more data objects in the second data are rich data objects defined using an ontology.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving a user query; and</claim-text><claim-text>deriving, based on the user query, the search engine query for use with the search engine software and the data access query for use the with data access software by at least:<claim-text>processing the user query to derive one or more first operators in a search engine query format for the search engine query; and</claim-text><claim-text>processing the user query to derive one or more second operators in a data access query format for the data access query,</claim-text><claim-text>wherein each first operator of the one or more first operators is equivalent to a second operator of the one or more second operators.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A system comprising:<claim-text>one or more processors; and</claim-text><claim-text>one or more memories storing instructions that when executed by the one or more processors cause the system to perform a set of operations, the set of operations comprising:<claim-text>sending, to search engine software, a search engine query to cause the search engine software to locate first data stored in a first data store;</claim-text><claim-text>receiving, from the search engine software, the first data comprising one or more data records;</claim-text><claim-text>deriving, based on the first data, a data access query for locating second data using data extracted from the one or more data records, the second data comprising one or more data objects;</claim-text><claim-text>sending, to data access software, the data access query to cause the data access software to locate the second data stored in a second data store different from the first data store; and</claim-text><claim-text>receiving, from the data access software, the second data.</claim-text></claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein:<claim-text>the first data store includes a search engine index;</claim-text><claim-text>the search engine index is configured to store the one or more data records; and</claim-text><claim-text>the search engine index includes an inverted index that is a mapping associated with the one or more data records.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein at least one data record of the one or more data records requires a first access speed faster than a second access speed of a data record not stored in the search engine index.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The system of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein at least one data record of the one or more data records is associated with a first data type, wherein a first amount of data of the first data type is lower than a second amount of data of a second data type different from the first data type, wherein a data record of the second data type is not stored in the search engine index.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first data store includes a distributed inverted index that is distributed across a plurality of computing devices.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the search engine query includes an application programming interface (API) call to the search engine software.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein a first time period is between sending the search engine query and receiving the first data, wherein a second time period is between sending the data access query and receiving the second data, wherein the first time period is shorter than the second time period.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the second data store is a distributed data store that is implemented using a plurality of computing devices.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the set of operations further comprise:<claim-text>in response to receiving the first data, sending the first data to a client device; and</claim-text><claim-text>in response to receiving the second data, sending the second data to the client device;</claim-text><claim-text>wherein the receiving of the second data is subsequent to the receiving of the first data, and</claim-text><claim-text>wherein the one or more data objects in the second data are rich data objects defined using an ontology.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the set of operations further comprise:<claim-text>receiving a user query; and</claim-text><claim-text>deriving, based on the user query, the search engine query for use with the search engine software and the data access query for use the with data access software by at least:<claim-text>processing the user query to derive one or more first operators in a search engine query format for the search engine query; and</claim-text><claim-text>processing the user query to derive one or more second operators in a data access query format for the data access query,</claim-text><claim-text>wherein each first operator of the one or more first operators is equivalent to a second operator of the one or more second operators.</claim-text></claim-text></claim-text></claim></claims></us-patent-application>