<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007248A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007248</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17899515</doc-number><date>20220830</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>119</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>124</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>172</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>119</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>124</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>172</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>14</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">REGION SPECIFIC ENCODING AND SAO-SENSITIVE-SLICE-WIDTH-ADAPTATION FOR IMPROVED-QUALITY HEVC ENCODING</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17099012</doc-number><date>20201116</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11470311</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17899515</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15648984</doc-number><date>20170713</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10841581</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17099012</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62362168</doc-number><date>20160714</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ARRIS Enterprises LLC</orgname><address><city>Suwanee</city><state>GA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Ramamurthy</last-name><first-name>Shailesh</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Chandrashekar</last-name><first-name>Padmassri</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Nellore</last-name><first-name>Anil Kumar</first-name><address><city>Bengaluru</city><country>IN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>ARRIS Enterprises LLC</orgname><role>02</role><address><city>Suwanee</city><state>GA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method provides for encoding a frame of video using an edge map made up of one or more edge-blocks detected in the frame. When the edge-blocks are contiguous, at least one slice partition is formed using the edge-blocks and the slice partition is encoded using a sample adaptive offset (SAO) filter, wherein the slice partition is formed with an adaptive slice width, and the sample adaptive offset (SAO) filter is turned on or off during the encoding based on whether the edge-blocks are being encoded. When the edge-blocks are not contiguous, edge-block processing is performed around edges in the frame during encoding of the edge-blocks. The edge-block processing involves configuring one or more of: an intra block size, a transform block size, an inter prediction block size, a quantization parameter, candidate modes for intra prediction, pyramid level for motion estimation, and fractional pixel motion estimation search.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="118.53mm" wi="158.75mm" file="US20230007248A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="188.89mm" wi="114.13mm" orientation="landscape" file="US20230007248A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="218.95mm" wi="163.91mm" orientation="landscape" file="US20230007248A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="215.65mm" wi="130.73mm" orientation="landscape" file="US20230007248A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="204.64mm" wi="147.74mm" file="US20230007248A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="213.19mm" wi="159.77mm" orientation="landscape" file="US20230007248A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="181.53mm" wi="164.08mm" file="US20230007248A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="179.92mm" wi="150.37mm" orientation="landscape" file="US20230007248A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="186.94mm" wi="123.19mm" file="US20230007248A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="170.86mm" wi="159.85mm" orientation="landscape" file="US20230007248A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="82.47mm" wi="123.19mm" file="US20230007248A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="207.35mm" wi="47.16mm" file="US20230007248A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="201.25mm" wi="47.16mm" file="US20230007248A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="224.28mm" wi="49.53mm" file="US20230007248A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="161.54mm" wi="154.60mm" file="US20230007248A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="129.88mm" wi="181.27mm" file="US20230007248A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="130.05mm" wi="169.42mm" file="US20230007248A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="153.59mm" wi="153.08mm" file="US20230007248A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="162.81mm" wi="133.43mm" file="US20230007248A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="186.35mm" wi="176.70mm" file="US20230007248A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="207.86mm" wi="180.59mm" file="US20230007248A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="145.80mm" wi="141.82mm" file="US20230007248A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="148.42mm" wi="141.99mm" file="US20230007248A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="244.01mm" wi="57.74mm" orientation="landscape" file="US20230007248A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="155.62mm" wi="135.04mm" file="US20230007248A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="195.58mm" wi="101.26mm" file="US20230007248A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/099,012 filed Nov. 16, 2020, which is a continuation of U.S. patent application Ser. No. 15/648,984 filed Jul. 13, 2017, now U.S. Pat. No. 10,841,581, which claims benefit of U.S. Provisional Patent Application No. 62/362,168, filed Jul. 14, 2016, by Shailesh Ramamurthy, Padmassri Chandrashekar and Anilkumar Nellore, and entitled &#x201c;REGION SPECIFIC ENCODING AND SAO-SENSITIVE-SLICE-WIDTH-ADAPTATION FOR IMPROVED-QUALITY HEVC ENCODING,&#x201d; which application is hereby incorporated by reference herein.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Field of the Invention</heading><p id="p-0003" num="0002">The present invention relates to systems and methods for encoding video data, and in particular to a system for region-specific encoding and sample adaptive offset (SAO) sensitive slice-width-adaptation for improved-quality high efficiency video coding (HEVC) encoding.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">Block-based hybrid video encoding schemes such as high efficiency video coding (HEVC) achieve compression not only by removing redundant information from the bitstream, but also by making adjustments in the quality of the output bitstream. While such quality compromises render HEVC an inherently lossy process, such compromises may be made in a minimally perceptible way. The quality of the output bitstream may be controlled by varying a number of parameters used in the encoding process.</p><p id="p-0005" num="0004">Unless encoders use modeling of human visual system (HVS) to differentiate between different parts of a scene content, the encoder quality would be typically found wanting. If the quality of a reference (which could be a reference frame in non-scalable encoding or a reference frame from a previous layer for scalable coding) is not improved using guidance from HVS, the subsequent coded portions of the bitstream would show areas of opportunity for optimization.</p><p id="p-0006" num="0005">For example, some pixels could be part of edges or textures. Typically, quantization as decided by a na&#xef;ve rate control may make regions having texture and/or edges suffer from a loss of detail. Coarse quantization in general reduces high frequency information, which is important for edges or textures, and this has a ripple effect when sub-optimally coded edges/textures are used as a reference in intra or inter predictions, or in scalable coding.</p><p id="p-0007" num="0006">It is also important to be aware of moving versus static edges/textures during the coding process. Moving edges with compression artifacts give rise to mosquito noise, which is annoying in terms of perceptual video quality.</p><p id="p-0008" num="0007">Accordingly, there is a need for improved region-specific encoding. This need is met by the methods and systems discussed below.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0009" num="0008">To address the requirements described above, the present invention discloses methods for encoding a frame of video.</p><p id="p-0010" num="0009">In one embodiment, the method comprises detecting an edge map comprised of one or more edge-blocks in the frame. The edge map is detected by an edge operator. The edge map is detected by classification of pixels in the frame as edges or non-edges, and by classification of blocks as edge-blocks or non-edge-blocks based on the classification of the pixels. Specifically, the edge map is detected by a gradient or differences computation in a pixel domain of the frame, wherein a lower threshold and a higher threshold are used on the gradient or differences computation in order to generate the edge map, wherein the lower threshold and the higher threshold are used on a number of edge pixels per individual block to classify the individual block as one of the edge-blocks or one of the non-edge-blocks, and wherein the lower and higher threshold are scaled based on the individual block's size used during the encoding for decisions within the individual block.</p><p id="p-0011" num="0010">The method also comprises, when the edge-blocks are contiguous, forming at least one slice partition using the edge-blocks and encoding the slice partition using a sample adaptive offset (SAO) filter. The slice partition is formed with an adaptive slice width, and the sample adaptive offset (SAO) filter is turned on or off during the encoding based on whether the edge-blocks are being encoded.</p><p id="p-0012" num="0011">In addition, the method comprises, when the edge-blocks are not contiguous, performing edge-block processing around edges in the frame during encoding of the edge-blocks. The edge-block processing involves configuring one or more of: an intra block size, a transform block size, an inter prediction block size, a quantization parameter, candidate modes for intra prediction, pyramid level for motion estimation, and fractional pixel motion estimation search.</p><p id="p-0013" num="0012">In another embodiment, the method comprises detecting an edge map in the frame, wherein the edge map is detected using one or more edge operators.</p><p id="p-0014" num="0013">The method also comprises choosing a slice width for a slice of the image, based on the detected edge map.</p><p id="p-0015" num="0014">In addition, the method comprises selectively turning a sample adaptive offset (SAO) filter on or off for the slice at the chosen slice width, based on the detected edge map.</p><p id="p-0016" num="0015">The edge map contains one or more blocks containing edges, and edge-block processing is performed dynamically during encoding of the edge-blocks by configuring for: smaller prediction block sizes around edges for intra; smaller transform unit sizes around edges for intra or inter; improved quantization parameter (QP) and smaller block sizes for edge-blocks that will be used as references for intra or inter; improved prediction by more intense sub-pixel motion estimation (ME); and motion vectors (MVs) of panned regions showing many adjacent blocks having nearly the same motion vectors, wherein a global motion vector is used to detect panned regions.</p><p id="p-0017" num="0016">Still another embodiment is evidenced by an apparatus having a processor for performing the foregoing methods.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0018" num="0017">Referring now to the drawings in which like reference numbers represent corresponding parts throughout:</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram depicting an exemplary embodiment of a video coding-decoding system that can be used for transmission and/or storage and retrieval of audio and/or video information;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a diagram of one embodiment of a codec system in which the encoded AV information is transmitted to and received at another location;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a diagram depicting an exemplary embodiment of codec system in which the encoded information is stored and later retrieved for presentation, hereinafter referred to as codec storage system;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is another diagram depicting an exemplary content distribution system comprising a coding system or encoder and a decoding system or decoder that can be used to transmit and receive HEVC data;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating one embodiment of the source encoder;</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram depicting a picture of audio visual information, such as one of the pictures in the picture sequence;</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a diagram showing an exemplary partition of a coding tree unit into coding units;</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a diagram showing a luma (Y), two chroma samples Cb and Cr, and associated syntax elements, used in coding tree blocks, coding blocks, prediction blocks and transform blocks;</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating a representation of a representative quadtree and data parameters for the code tree block partitioning shown in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>;</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating the partition of a coding unit into one or more prediction units;</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram showing a coding unit partitioned into four prediction units and an associated set of transform units;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram showing a residual quad tree for the transform units associated with the coding unit in the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating spatial prediction;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating temporal prediction;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating the use of motion vector predictors;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIGS. <b>13</b>A-F</figref> are graphs of pixel level vs. pixel index;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. <b>14</b>A-D</figref> illustrate different Edge Types, and how an edge is searched across one of the directions;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is an image of a typical edge map detected by an edge operator;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>16</b></figref> illustrates how a sample is classified into one of five categories;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>17</b></figref> shows an example of the four consecutive bands that are modified by adding the values denoted as band offsets;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates the structure of slices in HEVC, wherein the slices are groups of CTUs in scan order, separated by a slice header;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates the bitstream structure of HEVC that includes multiple slices;</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates multiple slices from <figref idref="DRAWINGS">FIG. <b>15</b></figref> using adaptive slice widths;</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is an example edge map, based on <figref idref="DRAWINGS">FIG. <b>20</b></figref>, that shows different arrangements and orientations of edge blocks and non-edge blocks in a frame;</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIGS. <b>22</b>A-B</figref> are non-limiting examples of how some embodiments of the invention would work on processors with multicore architectures;</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIGS. <b>23</b>A-B</figref> illustrate the differences in quality resulting from this invention;</p><p id="p-0045" num="0044"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a diagram illustrating an exemplary computer system <b>2200</b> that could be used to implement elements of the present invention; and</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a flowchart illustrating the steps or functions performed by a processor, according to one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS</heading><p id="p-0047" num="0046">In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.</p><heading id="h-0008" level="1">HEVC SUMMARY</heading><heading id="h-0009" level="1">Audio-Visual Information Transception and Storage</heading><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a diagram depicting an exemplary embodiment of a video coding-decoding (codec) system <b>100</b> that can be used for transmission and/or storage and retrieval of audio and/or video information. The codec system <b>100</b> comprises an encoding system <b>104</b>, which accepts audio-visual (AV) information <b>102</b> (also referred to hereinafter as uncoded video) and processes the AV information <b>102</b> to generate encoded (compressed) AV information <b>106</b>, and a decoding system <b>112</b>, which processes the encoded AV information <b>106</b> to produce recovered AV information <b>114</b>. Since the encoding and decoding processes are not lossless, the recovered AV information <b>114</b> is not identical to the initial AV information <b>102</b>, but with judicious selection of the encoding processes and parameters, the differences between the recovered AV information <b>114</b> and the unprocessed AV information <b>102</b> are acceptable to human perception.</p><p id="p-0049" num="0048">The encoded AV information <b>106</b> is typically transmitted or stored and retrieved before decoding and presentation, as performed by transception (transmission and reception) or storage/retrieval system <b>108</b>. Transception losses may be significant, but storage/retrieval losses are typically minimal or non-existent, hence, the transcepted AV information <b>110</b> provided to the decoding system <b>112</b> is typically the same as or substantially the same as the encoded AV information <b>106</b>.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a diagram of one embodiment of a codec system <b>200</b>A in which the encoded AV information <b>106</b> is transmitted to and received at another location. A transmission segment <b>230</b> converts an input AV information <b>102</b> into a signal appropriate for transmission and transmits the converted signal over the transmission channel <b>212</b> to the reception segment <b>232</b>. The reception segment <b>232</b> receives the transmitted signal, and converts the received signal into the recovered AV information <b>114</b> for presentation. As described above, due to coding and transmission losses and errors, the recovered AV information <b>114</b> may be of lower quality than the AV information <b>102</b> that was provided to the transmission segment <b>230</b>. However, error-correcting systems may be included to reduce or eliminate such errors. For example, the encoded AV information <b>106</b> may be forward error correction (FEC) encoded by adding redundant information, and such redundant information can be used to identify and eliminate errors in the reception segment <b>232</b>.</p><p id="p-0051" num="0050">The transmission segment <b>230</b> comprises one or more source encoders <b>202</b> to encode multiple sources of AV information <b>102</b>. The source encoder <b>202</b> encodes the AV information <b>102</b> primarily for purposes of compression to produce the encoded AV information <b>106</b>, and may include, for example a processor and related memory storing instructions implementing a codec such as MPEG-1, MPEG-2, MPEG-4 AVC/H.264, HEVC or similar codec, as described further below.</p><p id="p-0052" num="0051">The codec system <b>200</b>A may also include optional elements indicated by the dashed lines in <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. These optional elements include a video multiplex encoder <b>204</b>, an encoding controller <b>208</b>, and a video demultiplexing decoder <b>218</b>. The optional video multiplex encoder <b>204</b> multiplexes encoded AV information <b>106</b> from an associated plurality of source encoder(s) <b>202</b> according to one or more parameters supplied by the optional encoding controller <b>208</b>. Such multiplexing is typically accomplished in the time domain and is data packet based.</p><p id="p-0053" num="0052">In one embodiment, the video multiplex encoder <b>204</b> comprises a statistical multiplexer, which combines the encoded AV information <b>106</b> from a plurality of source encoders <b>202</b> so as to minimize the bandwidth required for transmission. This is possible, since the instantaneous bit rate of the coded AV information <b>106</b> from each source encoder <b>202</b> can vary greatly with time according to the content of the AV information <b>102</b>. For example, scenes having a great deal of detail and motion (e.g. sporting events) are typically encoded at higher bitrates than scenes with little motion or detail (e.g. portrait dialog). Since each source encoder <b>202</b> may produce information with a high instantaneous bitrate while another source encoder <b>202</b> produces information with a low instantaneous bit rate, and since the encoding controller <b>208</b> can command the source encoders <b>202</b> to encode the AV information <b>102</b> according to certain performance parameters that affect the instantaneous bit rate, the signals from each of the source encoders <b>202</b> (each having a temporally varying instantaneous bit rate) can be combined together in an optimal way to minimize the instantaneous bit rate of the multiplexed stream <b>205</b>.</p><p id="p-0054" num="0053">As described above, the source encoder <b>202</b> and the video multiplex coder <b>204</b> may optionally be controlled by an encoding controller <b>208</b> to minimize the instantaneous bit rate of the combined video signal. In one embodiment, this is accomplished using information from a transmission buffer <b>206</b> which temporarily stores the coded video signal and can indicate the fullness of the buffer <b>206</b>. This allows the coding performed at the source encoder <b>202</b> or video multiplex coder <b>204</b> to be a function of the storage remaining in the transmission buffer <b>206</b>.</p><p id="p-0055" num="0054">The transmission segment <b>230</b> also may comprise a transmission encoder <b>210</b>, which further encodes the video signal for transmission to the reception segment <b>232</b>. Transmission encoding may include for example, the aforementioned FEC coding and/or coding into a multiplexing scheme for the transmission medium of choice. For example, if the transmission is by satellite or terrestrial transmitters, the transmission encoder <b>210</b> may encode the signal into a signal constellation before transmission via quadrature amplitude modulation (QAM) or similar modulation technique. Also, if the encoded video signal is to be streamed via an Internet protocol device and the Internet, the transmission encodes the signal according to the appropriate protocol. Further, if the encoded signal is to be transmitted via mobile telephony, the appropriate coding protocol is used, as further described below.</p><p id="p-0056" num="0055">The reception segment <b>232</b> comprises a transmission decoder <b>214</b> to receive the signal that was coded by the transmission encoder <b>210</b> using a decoding scheme complementary to the coding scheme used in the transmission decoder <b>214</b>. The decoded received signal may be temporarily stored by optional reception buffer <b>216</b>, and if the received signal comprises multiple video signals, the received signal is multiplex decoded by video multiplex decoder <b>218</b> to extract the video signal of interest from the video signals multiplexed by the video multiplex encoder <b>204</b>. Finally, the video signal of interest is decoded by source decoder <b>220</b> (hereinafter also referred to as a target decoding device) using a decoding scheme or codec complementary to the codec used by the source encoder <b>202</b> to encode the AV information <b>102</b>.</p><p id="p-0057" num="0056">In one embodiment, the transmitted data comprises a packetized video stream transmitted from a server (representing the transmitting segment <b>230</b>) to a client (representing the receiving segment <b>232</b>). In this case, the transmission encoder <b>210</b> may packetize the data and embed network abstract layer (NAL) units in network packets. NAL units define a data container that has header and coded elements, and may correspond to a video frame or other slice of video data.</p><p id="p-0058" num="0057">The compressed data to be transmitted may packetized and transmitted via transmission channel <b>212</b>, which may include a Wide Area Network (WAN) or a Local Area Network (LAN). Such a network may comprise, for example, a wireless network such as WiFi, an Ethernet network, an Internet network or a mixed network composed of several different networks. Such communication may be affected via a communication protocol, for example Real-time Transport Protocol (RTP), User Datagram Protocol (UDP) or any other type of communication protocol. Different packetization methods may be used for each network abstract layer (NAL) unit of the bitstream. In one case, one NAL unit size is smaller than the maximum transport unit (MTU) size corresponding to the largest packet size that can be transmitted over the network without being fragmented. In this case, the NAL unit is embedded into a single network packet. In another case, multiple entire NAL units are included in a single network packet. In a third case, one NAL unit may be too large to be transmitted in a single network packet and is thus split into several fragmented NAL units with each fragmented NAL unit being transmitted in an individual network packet. Fragmented NAL units are typically sent consecutively for decoding purposes.</p><p id="p-0059" num="0058">The reception segment <b>232</b> receives the packetized data and reconstitutes the NAL units from the network packet. For fragmented NAL units, the client concatenates the data from the fragmented NAL units in order to reconstruct the original NAL unit. The reception segment client <b>232</b> decodes the received and reconstructed data stream and reproduces the video images on a display device and the audio data by a loud speaker.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a diagram depicting an exemplary embodiment of codec system in which the encoded information is stored and later retrieved for presentation, hereinafter referred to as codec storage system <b>200</b>B. This embodiment may be used, for example, to locally store information in a digital video recorder (DVR), a flash drive, hard drive, or similar device. In this embodiment, the AV information <b>102</b> is source encoded by source encoder <b>202</b>, optionally buffered by storage buffer <b>234</b> before storage in a storage device <b>236</b>. The storage device <b>236</b> may store the video signal temporarily or for an extended period of time, and may comprise a hard drive, flash drive, RAM or ROM. The stored AV information is then retrieved, optionally buffered by retrieve buffer <b>238</b> and decoded by the source decoder <b>220</b>.</p><p id="p-0061" num="0060"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is another diagram depicting an exemplary content distribution system <b>200</b>C comprising a coding system or encoder <b>202</b> and a decoding system or decoder <b>220</b> that can be used to transmit and receive HEVC data.</p><p id="p-0062" num="0061">In some embodiments, the coding system <b>202</b> can comprise an input interface <b>256</b>, a scene change detector <b>249</b>, a controller <b>241</b> a counter <b>242</b> a frame memory <b>243</b>, an encoding unit <b>244</b>, a transmitter buffer <b>247</b> and an output interface <b>257</b>.</p><p id="p-0063" num="0062">The decoding system <b>220</b> can comprise a receiver buffer <b>259</b>, a decoding unit <b>260</b>, a frame memory <b>261</b> and a controller <b>267</b>. The coding system <b>202</b> and the decoding system <b>220</b> can be coupled with each other via a transmission path which can carry a compressed bit stream. The controller <b>241</b> of the coding system <b>202</b> can control the amount of data to be transmitted on the basis of the capacity of the transmitter buffer <b>247</b> or receiver buffer <b>259</b> and can include other parameters such as the amount of data per a unit of time. The controller <b>241</b> can control the encoding unit <b>244</b> to prevent the occurrence of a failure of a received signal decoding operation of the decoding system <b>220</b>. The controller <b>241</b> can be a processor or include, by way of a non-limiting example, a microcomputer having a processor, a random access memory and a read only memory.</p><p id="p-0064" num="0063">Source pictures <b>246</b> supplied from, by way of a non-limiting example, a content provider can include a video sequence of frames including source pictures in a video sequence. The source pictures <b>246</b> can be uncompressed or compressed. If the source pictures <b>246</b> are uncompressed, the coding system <b>202</b> can have an encoding function. If the source pictures <b>246</b> are compressed, the coding system <b>202</b> can have a transcoding function. Coding units can be derived from the source pictures <b>246</b> utilizing the controller <b>241</b>. The frame memory <b>243</b> can have a first area that can be used for storing the incoming frames from the source pictures <b>246</b> and a second area that can be used for reading out the frames <b>245</b> and outputting them to the encoding unit <b>244</b>. The controller <b>241</b> can output an area switching control signal <b>249</b> to the frame memory <b>243</b>. The area switching control signal <b>249</b> can indicate whether the first area or the second area is to be utilized.</p><p id="p-0065" num="0064">The controller <b>241</b> can output an encoding control signal <b>250</b> to the encoding unit <b>244</b>. The encoding control signal <b>250</b> can cause the encoding unit <b>244</b> to start an encoding operation, such as preparing the Coding Units of a source picture. In response to the encoding control signal <b>250</b> from the controller <b>241</b>, the encoding unit <b>244</b> can begin to read out the prepared Coding Units to a high-efficiency encoding process, such as a prediction coding process or a transform coding process which process the prepared Coding Units generating video compression data based on the source pictures associated with the Coding Units.</p><p id="p-0066" num="0065">The encoding unit <b>244</b> can package the generated video compression data in a packetized elementary stream (PES) including video packets. The encoding unit <b>244</b> can map the video packets into an encoded video signal <b>248</b> using control information and a program time stamp (PTS) and the encoded video signal <b>248</b> can be transmitted to the transmitter buffer <b>247</b>.</p><p id="p-0067" num="0066">The encoded video signal <b>248</b>, including the generated video compression data, can be stored in the transmitter buffer <b>247</b>. The information amount counter <b>242</b> can be incremented to indicate the total amount of data in the transmitter buffer <b>247</b>. As data is retrieved and removed from the buffer, the counter <b>242</b> can be decremented to reflect the amount of data in the transmitter buffer <b>247</b>. The occupied area information signal <b>253</b> can be transmitted to the counter <b>242</b> to indicate whether data from the encoding unit <b>244</b> has been added or removed from the transmitter buffer <b>247</b> so the counter <b>242</b> can be incremented or decremented. The controller <b>241</b> can control the production of video packets produced by the encoding unit <b>244</b> on the basis of the occupied area information <b>253</b> which can be communicated in order to anticipate, avoid, prevent, and/or detect an overflow or underflow from taking place in the transmitter buffer <b>247</b>.</p><p id="p-0068" num="0067">The information amount counter <b>242</b> can be reset in response to a preset signal <b>254</b> generated and output by the controller <b>241</b>. After the information amount counter <b>242</b> is reset, it can count data output by the encoding unit <b>244</b> and obtain the amount of video compression data and/or video packets, which have been generated. The information amount counter <b>242</b> can supply the controller <b>241</b> with an information amount signal <b>255</b> representative of the obtained amount of information. The controller <b>241</b> can control the encoding unit <b>244</b> so that there is no overflow at the transmitter buffer <b>247</b>.</p><p id="p-0069" num="0068">In some embodiments, the decoding system <b>220</b> can comprise an input interface <b>266</b>, a receiver buffer <b>259</b>, a controller <b>267</b>, a frame memory <b>261</b>, a decoding unit <b>260</b> and an output interface <b>268</b>. The receiver buffer <b>259</b> of the decoding system <b>220</b> can temporarily store the compressed bit stream, including the received video compression data and video packets based on the source pictures from the source pictures <b>246</b>. The decoding system <b>220</b> can read the control information and presentation time stamp information associated with video packets in the received data and output a frame number signal <b>263</b> which can be applied to the controller <b>267</b>. The controller <b>267</b> can supervise the counted number of frames at a predetermined interval. By way of a non-limiting example, the controller <b>267</b> can supervise the counted number of frames each time the decoding unit <b>260</b> completes a decoding operation.</p><p id="p-0070" num="0069">In some embodiments, when the frame number signal <b>263</b> indicates the receiver buffer <b>259</b> is at a predetermined capacity, the controller <b>267</b> can output a decoding start signal <b>264</b> to the decoding unit <b>260</b>. When the frame number signal <b>263</b> indicates the receiver buffer <b>259</b> is at less than a predetermined capacity, the controller <b>267</b> can wait for the occurrence of a situation in which the counted number of frames becomes equal to the predetermined amount. The controller <b>267</b> can output the decoding start signal <b>264</b> when the situation occurs. By way of a non-limiting example, the controller <b>267</b> can output the decoding start signal <b>264</b> when the frame number signal <b>263</b> indicates the receiver buffer <b>259</b> is at the predetermined capacity. The encoded video packets and video compression data can be decoded in a monotonic order (i.e., increasing or decreasing) based on presentation time stamps associated with the encoded video packets.</p><p id="p-0071" num="0070">In response to the decoding start signal <b>264</b>, the decoding unit <b>260</b> can decode data amounting to one picture associated with a frame and compressed video data associated with the picture associated with video packets from the receiver buffer <b>259</b>. The decoding unit <b>260</b> can write a decoded video signal <b>162</b> into the frame memory <b>261</b>. The frame memory <b>261</b> can have a first area into which the decoded video signal is written, and a second area used for reading out decoded pictures <b>262</b> to the output interface <b>268</b>.</p><p id="p-0072" num="0071">In various embodiments, the coding system <b>202</b> can be incorporated or otherwise associated with a transcoder or an encoding apparatus at a headend and the decoding system <b>220</b> can be incorporated or otherwise associated with a downstream device, such as a mobile device, a set top box or a transcoder.</p><p id="p-0073" num="0072">Source Encoding/Decoding</p><p id="p-0074" num="0073">As described above, the encoders <b>202</b> employ compression algorithms to generate bit streams and/or files of smaller size than the original video sequences in the AV information <b>102</b>. Such compression is made possible by reducing spatial and temporal redundancies in the original sequences.</p><p id="p-0075" num="0074">Encoders <b>202</b> include those compliant with the video compression standard H.264/MPEG-4 AVC (&#x201c;Advanced Video Coding&#x201d;) developed by between the &#x201c;Video Coding Expert Group&#x201d; (VCEG) of the ITU and the &#x201c;Moving Picture Experts Group&#x201d; (MPEG) of the ISO, in particular in the form of the publication &#x201c;Advanced Video Coding for Generic Audiovisual Services&#x201d; (March 2005), which is hereby incorporated by reference herein.</p><p id="p-0076" num="0075">HEVC &#x201c;High Efficiency Video Coding&#x201d; (sometimes known as H.265) is expected to replace the H.264/MPEG-4 AVC. HEVC introduces new coding tools and entities that are generalizations of the coding entities defined in H.264/AVC, as further described below.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating one embodiment of the source encoder <b>202</b>. The source encoder <b>202</b> accepts AV information <b>102</b> and uses sampler <b>302</b> to sample the AV information <b>102</b> to produce a sequence <b>303</b> of successive of digital images or pictures, each having a plurality of pixels. A picture can comprise a frame or a field, wherein a frame is a complete image captured during a known time interval, and a field is the set of odd-numbered or even-numbered scanning lines composing a partial image.</p><p id="p-0078" num="0077">The sampler <b>302</b> produces a digitized (and as yet, uncompressed) picture sequence <b>303</b>. Each digital picture can be represented by one or more matrices having a plurality of coefficients that represent information about the pixels that together comprise the picture. The value of a pixel can correspond to luminance or other information. In the case where several components are associated with each pixel, for example, red-green-blue (RGB) or luminance-chrominance (YCbCr, wherein Y is the luma component and Cb and Cr are the blue-difference and red-difference chroma components, respectively), each of these components may be separately processed.</p><p id="p-0079" num="0078">Images can be segmented or partitioned into &#x201c;slices,&#x201d; which may comprise a portion of the picture or may comprise the entire picture. In the H.264 standard, these slices are divided into coding entities called macroblocks (generally blocks of size 16 pixels&#xd7;16 pixels) and each macroblock may in turn be divided into different sizes of data blocks, for example 4&#xd7;4, 4&#xd7;8, 8&#xd7;4, 8&#xd7;8, 8&#xd7;16, 16&#xd7;8. HEVC expands and generalizes the notion of the coding entity beyond that of the macroblock.</p><heading id="h-0010" level="1">HEVC Coding Entities: CTU, CU, CTB, CB, PU and TU</heading><p id="p-0080" num="0079">Like other video coding standards, HEVC is a block-based hybrid spatial and temporal predictive coding scheme. However, HEVC introduces new coding entities that are not included with H.264/AVC standard. These coding entities include (1) coding tree units (CTUs), coding units (CUs), coding tree blocks (CTBs), coding blocks (CBs), predictive units (PUs) and transform units (TUs), and are further described below.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram depicting a picture <b>400</b> of AV information <b>102</b>, such as one of the pictures in the picture sequence <b>303</b>. The picture <b>400</b> is spatially divided into non-overlapping square blocks known as coding tree unit(s), or CTUs <b>402</b>. Unlike H.264 and previous video coding standards where the basic coding unit is macroblock of 16&#xd7;16 pixels, the CTU <b>402</b> is the basic coding unit of HEVC, and can be as large as 128&#xd7;128 pixels. As shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the CTUs <b>402</b> are typically referenced within the picture <b>400</b> in an order analogous to a progressive scan.</p><p id="p-0082" num="0081">Each CTU <b>402</b> may in turn be iteratively divided into smaller variable size coding units (CUs) described by a &#x201c;quadtree&#x201d; decomposition further described below. Coding units are regions formed in the image to which similar encoding parameters are applied and transmitted in the bitstream <b>314</b>.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is a diagram showing an exemplary partition of a CTU <b>402</b> into CUs such as coding unit <b>502</b>A and <b>502</b>B (hereinafter alternatively referred to as coding unit(s) <b>502</b>). A single CTU <b>402</b> can be divided into four CUs <b>502</b> such as CU <b>502</b>A, each a quarter of the size of CTU <b>402</b>. Each such divided CU <b>502</b>A can be further divided into four smaller CUs <b>502</b>B of quarter size of initial CU <b>502</b>A.</p><p id="p-0084" num="0083">The division of CTUs <b>402</b> into CUs <b>502</b>A and into smaller CUs <b>502</b>B is described by &#x201c;quadtree&#x201d; data parameters (e.g. flags or bits) that are encoded into the output bitstream <b>314</b> along with the encoded data as overhead known as syntax.</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a diagram showing a luma (Y) <b>504</b>, two chroma samples Cb <b>506</b> and Cr <b>508</b>, and associated syntax elements <b>510</b>, that comprise coding tree blocks (CTBs) or coding blocks (CBs), respectively, for the CTUs <b>402</b> or CUs <b>502</b>A, <b>502</b>B. This structure is also used for prediction blocks (PBs) associated with prediction units (PUs) and transform blocks (TBs) associated with transform units (TUs), as described in more detail below.</p><p id="p-0086" num="0085"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating a representation of a representative quadtree <b>600</b> and data parameters for the CTU <b>402</b> partitioning shown in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>. The quadtree <b>600</b> comprises a plurality of nodes including first node <b>602</b>A at one hierarchical level and second node <b>602</b>B at a lower hierarchical level (hereinafter, quadtree nodes may be alternatively referred to as &#x201c;nodes&#x201d; <b>602</b>). At each node <b>602</b> of a quadtree, a &#x201c;split flag&#x201d; or bit &#x201c;1&#x201d; is assigned if the node <b>602</b> is further split into sub-nodes, otherwise a bit &#x201c;0&#x201d; is assigned.</p><p id="p-0087" num="0086">For example, the CTU <b>402</b> partition illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> can be represented by the quadtree <b>600</b> presented in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, which includes a split flag of &#x201c;1&#x201d; associated with node <b>602</b>A at the top CU <b>502</b> level (indicating there are 4 additional nodes at a lower hierarchical level). The illustrated quadtree <b>600</b> also includes a split flag of &#x201c;1&#x201d; associated with node <b>602</b>B at the mid CU <b>502</b> level to indicate that this CU is also partitioned into four further CUs <b>502</b> at the next (bottom) CU level. The source encoder <b>202</b> may restrict the minimum and maximum CU <b>502</b> sizes, thus changing the maximum possible depth of the CU <b>502</b> splitting.</p><p id="p-0088" num="0087">The source encoder <b>202</b> generates encoded AV information <b>106</b> in the form of a bitstream <b>314</b> that includes a first portion having encoded data for the CUs <b>502</b> and a second portion that includes overhead known as syntax elements. The encoded data includes data corresponding to the encoded CUs <b>502</b> (i.e., the encoded residuals together with their associated motion vectors, predictors, or related residuals as described further below). The second portion includes syntax elements that may represent encoding parameters which do not directly correspond to the encoded data of the blocks. For example, the syntax elements may comprise an address and identification of the CU <b>502</b> in the image, a quantization parameter, an indication of the elected Inter/Intra coding mode, the quadtree <b>600</b> or other information.</p><p id="p-0089" num="0088">CUs <b>502</b> correspond to elementary coding elements and include two related sub-units: prediction units (PUs) and transform units (TUs), both of which have a maximum size equal to the size of the corresponding CU <b>502</b>. Each PU and TU is comprised of prediction blocks (PBs) and transform blocks (TBs), respectively, formatted as shown in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, with a luma (Y) <b>504</b>, two chroma samples Cb <b>506</b> and Cr <b>508</b>, and associated syntax elements <b>510</b>.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram illustrating the partition of a CU <b>502</b> into one or more PUs <b>702</b>. A PU <b>702</b> corresponds to a partitioned CU <b>502</b> and is used to predict pixel values for intra-picture or inter-picture types. PUs <b>702</b> are an extension of the partitioning of H.264/AVC for motion estimation, and are defined for each CU <b>502</b> that is not further subdivided into other CUs (&#x201c;split flag&#x201d;=0). At each leaf <b>604</b> of the quadtree <b>600</b>, a final (bottom level) CU <b>502</b> of 2N&#xd7;2N can possess one of four possible patterns of PUs: 2N&#xd7;2N (<b>702</b>A), 2N&#xd7;N (<b>702</b>B), N&#xd7;2N (<b>702</b>C) and N&#xd7;N (<b>702</b>D), as shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, as well as certain other asymmetric motion partitions (AMP) defined in the HEVC specification.</p><p id="p-0091" num="0090">A CU <b>502</b> can be either spatially or temporally predictive coded. If a CU <b>502</b> is coded in &#x201c;intra&#x201d; mode, each PU <b>702</b> of the CU <b>502</b> can have its own spatial prediction direction and image information as further described below. Also, in the &#x201c;intra&#x201d; mode, the PU <b>702</b> of the CU <b>502</b> may depend on another CU <b>502</b> because it may use a spatial neighbor, which is in another CU. If a CU <b>502</b> is coded in &#x201c;inter&#x201d; mode, each PU <b>702</b> of the CU <b>502</b> can have its own motion vector(s) and associated reference picture(s).</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram showing a CU <b>502</b> partitioned into four PUs <b>702</b> and an associated set of transform units (TUs) <b>802</b>. TUs <b>802</b> are used to represent the elementary units that are spatially transformed by a transform such as the DCT (Discrete Cosine Transform) or the DST (discrete sine transform). The size and location of each block transform TU <b>802</b> within a CU <b>502</b> is described by a &#x201c;residual&#x201d; quadtree (RQT).</p><p id="p-0093" num="0092"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram showing RQT <b>900</b> for TUs <b>802</b> for the CU <b>502</b> in the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. Note that the &#x201c;1&#x201d; at the first node <b>902</b>A of the RQT <b>900</b> indicates that there are four branches and that the &#x201c;1&#x201d; at the second node <b>902</b>B at the adjacent lower hierarchical level indicates that the indicated node further has four branches. The data describing the RQT <b>900</b> is also coded and transmitted as an overhead in the bitstream <b>314</b>.</p><p id="p-0094" num="0093">The coding parameters of a video sequence may be stored in dedicated NAL units called parameter sets, which include a Video Parameter Sets (VPS) that describes the overall characteristics of coded video sequences; a Sequence Parameter Set (SPS) that contains information that applies to all slices of a video sequence and is fixed within a sequence; and a Picture Parameter Set (PPS) that conveys information that could change from picture to picture.</p><heading id="h-0011" level="1">Spatial and Temporal Prediction</heading><p id="p-0095" num="0094">One of the techniques used to compress a bitstream <b>314</b> is to forego the storage of pixel values themselves and instead, predict the pixel values using a process that can be repeated at the decoder <b>220</b> and store or transmit the difference between the predicted pixel values and the actual pixel values (known as the residual). So long as the decoder <b>220</b> can compute the same predicted pixel values from the information provided, the actual picture values can be recovered by adding the residuals to the predicted values. The same technique can be used to compress other data as well.</p><p id="p-0096" num="0095">Referring back to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, each PU <b>702</b> of the CU <b>502</b> being processed is provided to a predictor module <b>307</b>. The predictor module <b>307</b> predicts the values of the PUs <b>702</b> based on information in nearby PUs <b>702</b> in the same frame (intra-frame prediction, which is performed by the spatial predictor <b>324</b>) and information of PUs <b>702</b> in temporally proximate frames (inter-frame prediction, which is performed by the temporal predictor <b>330</b>). Temporal prediction, however, may not always be based on a collocated PU, since collocated PUs are defined to be located at a reference/non-reference frame having the same x and y coordinates as the current PU <b>702</b>. These techniques take advantage of spatial and temporal dependencies between PUs <b>702</b>.</p><p id="p-0097" num="0096">Encoded units can therefore be categorized to include two types: (1) non-temporally predicted units and (2) temporally predicted units. Non-temporally predicted units are predicted using the current frame, including adjacent or nearby PUs <b>702</b> within the frame (e.g. intra-frame prediction), and are generated by the spatial predictor <b>324</b>. Temporally predicted units are predicted from one temporal picture (e.g. P-frames) or predicted from at least two reference pictures temporally ahead and/or behind (i.e. B-frames).</p><heading id="h-0012" level="1">Spatial Prediction</heading><p id="p-0098" num="0097"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating spatial prediction of PUs <b>702</b>. A picture may comprise a PU <b>702</b> and spatially proximate other PUs <b>1</b>-<b>4</b>, including nearby PU <b>702</b>N. The spatial predictor <b>324</b> predicts the current block (e.g. block C of <figref idref="DRAWINGS">FIG. <b>10</b></figref>) by means of an &#x201c;intra-frame&#x201d; prediction which uses PUs <b>702</b> of already-encoded other blocks of pixels of the current image.</p><p id="p-0099" num="0098">The spatial predictor <b>324</b> locates a nearby PU (e.g. PU <b>1</b>, <b>2</b>, <b>3</b>, <b>4</b> or <b>5</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>) that is appropriate for spatial coding and determines an angular prediction direction to that nearby PU. In HEVC, 35 directions can be considered, so each PU may have one of 35 directions associated with it, including horizontal, vertical, 45 degree diagonal, 135 degree diagonal, etc. The spatial prediction direction of the PU is indicated in the syntax.</p><p id="p-0100" num="0099">Referring back to the spatial predictor <b>324</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, this located nearby PU is used to compute a residual PU <b>704</b> (<i>e</i>) as the difference between the pixels of the nearby PU <b>702</b>N and the current PU <b>702</b>, using element <b>305</b>. The result is an intra-predicted PU element <b>1006</b> that comprises a prediction direction <b>1002</b> and the intra-predicted residual PU <b>1004</b>. The prediction direction <b>1002</b> may be coded by inferring the direction from spatially proximate PUs, and the spatial dependencies of the picture, enabling the coding rate of the intra prediction direction mode to be reduced.</p><heading id="h-0013" level="1">Temporal Prediction</heading><p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram illustrating temporal prediction. Temporal prediction considers information from temporally neighboring pictures or frames, such as the previous picture, picture i&#x2212;1.</p><p id="p-0102" num="0101">Generally, temporal prediction includes single-prediction (P-type), which predicts the PU <b>702</b> by referring to one reference area from only one reference picture, and multiple prediction (B-type), which predicts the PU by referring to two reference areas from one or two reference pictures. Reference images are images in the video sequence that have already been coded and then reconstructed (by decoding).</p><p id="p-0103" num="0102">The temporal predictor <b>330</b> identifies, in one or several of these reference areas (one for P-type or several for B-type), areas of pixels in a temporally nearby frame so that they can be used as predictors of this current PU <b>702</b>. In the case where several areas predictors are used (B-type), they may be merged to generate one single prediction. The reference area <b>1102</b> is identified in the reference frame by a motion vector (MV) <b>1104</b> that defines the displacement between the current PU <b>702</b> in current frame (picture i) and the reference area <b>1102</b> identified by a reference index (refIdx) in the reference frame (picture i&#x2212;1). A PU in a B-picture may have up to two MVs. Both MV and refIdx information are included in the syntax of the HEVC bitstream.</p><p id="p-0104" num="0103">Referring again to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a difference between the pixel values between of the reference area <b>1102</b> and the current PU <b>702</b> may be computed by element <b>305</b> as selected by switch <b>306</b>. This difference is referred to as the residual of the inter-predicted PU <b>1006</b>. At the end of the temporal or inter-frame prediction process, the current PU <b>1006</b> is composed of one motion vector MV <b>1104</b> and a residual <b>1106</b>.</p><p id="p-0105" num="0104">However, as described above, one technique for compressing data is to generate predicted values for the data using means repeatable by the decoder <b>220</b>, computing the difference between the predicted and actual values of the data (the residual) and transmitting the residual for decoding. So long as the decoder <b>220</b> can reproduce the predicted values, the residual values can be used to determine the actual values.</p><p id="p-0106" num="0105">This technique can be applied to the MVs <b>1104</b> used in temporal prediction by generating a prediction of the MV <b>1104</b>, computing a difference between the actual MV <b>1104</b> and the predicted MV <b>1104</b> (a residual) and transmitting the MV residual in the bitstream <b>314</b>. So long as the decoder <b>220</b> can reproduce the predicted MV <b>1104</b>, the actual MV <b>1104</b> can be computed from the residual. HEVC computes a predicted MV for each PU <b>702</b> using the spatial correlation of movement between nearby PUs <b>702</b>.</p><p id="p-0107" num="0106"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating the use of motion vector predictors (MVPs) in HEVC. Motion vector predictors V<sub>1</sub>, V<sub>2 </sub>and V<sub>3 </sub>are taken from the MVs <b>1104</b> of a plurality of blocks 1, 2, and 3 situated nearby or adjacent the block to encode (C). As these vectors refer to motion vectors of spatially neighboring blocks within the same temporal frame and can be used to predict the motion vector of the block to encode, these vectors are known as spatial motion predictors.</p><p id="p-0108" num="0107"><figref idref="DRAWINGS">FIG. <b>12</b></figref> also illustrates temporal motion vector predictor V<sub>T </sub>which is the motion vector of the co-located block C&#x2032; in a previously decoded picture (in decoding order) of the sequence (e.g. block of picture i&#x2212;1 located at the same spatial position as the block being coded (block C of image i).</p><p id="p-0109" num="0108">The components of the spatial motion vector predictors V<sub>1</sub>, V<sub>2 </sub>and V<sub>3 </sub>and the temporal motion vector predictor V<sub>T </sub>can be used to generate a median motion vector predictor V<sub>M</sub>. In HEVC, the three spatial motion vector predictors may be taken as shown in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, that is, from the block situated to the left of the block to encode (V<sub>1</sub>), the block situated above (V<sub>3</sub>) and from one of the blocks situated at the respective corners of the block to encode (V<sub>2</sub>), according to a predetermined rule of availability. This MV predictor selection technique is known as Advanced Motion Vector Prediction (AMVP).</p><p id="p-0110" num="0109">A plurality of (typically five) MV predictor (MVP) candidates having spatial predictors (e.g. V<sub>1</sub>, V<sub>2 </sub>and V<sub>3</sub>) and temporal predictor(s) V<sub>T </sub>is therefore obtained. In order to reduce the overhead of signaling the motion vector predictor in the bitstream, the set of motion vector predictors may be reduced by eliminating data for duplicated motion vectors (for example, MVs which have the same value as other MVs may be eliminated from the candidates).</p><p id="p-0111" num="0110">The encoder <b>202</b> may select a &#x201c;best&#x201d; motion vector predictor from among the candidates, and compute a motion vector predictor residual as a difference between the selected motion vector predictor and the actual motion vector, and transmit the motion vector predictor residual in the bitstream <b>314</b>. To perform this operation, the actual motion vector must be stored for later use by the decoder <b>220</b> (although it is not transmitted in the bit stream <b>314</b>. Signaling bits or flags are included in the bitstream <b>314</b> to specify which MV residual was computed from the normalized motion vector predictor, and are later used by the decoder to recover the motion vector.</p><p id="p-0112" num="0111">The intra-predicted residuals <b>1004</b> and the inter-predicted residuals <b>1106</b> obtained from the spatial (intra) or temporal (inter) prediction process are then transformed by transform module <b>308</b> (depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) into the transform units (TUs) <b>802</b> described above. A TU <b>802</b> can be further split into smaller TUs using the RQT decomposition described above with respect to <figref idref="DRAWINGS">FIG. <b>9</b></figref>. In HEVC, generally 2 or 3 levels of decompositions are used and authorized transform sizes are from 32&#xd7;32, 16&#xd7;16, 8&#xd7;8 and 4&#xd7;4. As described above, the transform is derived according to a discrete cosine transform (DCT) or discrete sine transform (DST).</p><p id="p-0113" num="0112">The residual transformed coefficients are then quantized by quantizer <b>310</b>. Quantization plays a very important role in data compression. In HEVC, quantization converts the high precision transform coefficients into a finite number of possible values. Although the quantization permits a great deal of compression, quantization is a lossy operation, and the loss by quantization cannot be recovered.</p><p id="p-0114" num="0113">The coefficients of the quantized transformed residual are then coded by means of an entropy coder <b>312</b> and then inserted into the compressed bit stream <b>314</b> as a part of the useful data coding the images of the AV information. Coding syntax elements may also be coded using spatial dependencies between syntax elements to increase the coding efficiency. HEVC offers entropy coding such as context-adaptive binary arithmetic coding (CABAC). Other forms or entropy or arithmetic coding may also be used.</p><p id="p-0115" num="0114">In order to calculate the predictors used above, the encoder <b>202</b> decodes already encoded PUs <b>702</b> using &#x201c;decoding&#x201d; loop <b>315</b>, which includes elements <b>316</b>, <b>318</b>, <b>320</b>, <b>322</b>, <b>328</b>. This decoding loop <b>315</b> reconstructs the PUs and images from the quantized transformed residuals.</p><p id="p-0116" num="0115">The quantized transform residual coefficients E are provided to dequantizer <b>316</b>, which applies the inverse operation to that of quantizer <b>310</b> to produce dequantized transform coefficients of the residual PU (E&#x2032;) <b>708</b>. The dequantized data <b>708</b> is then provided to inverse transformer <b>318</b> which applies the inverse of the transform applied by the transform module <b>308</b> to generate reconstructed residual coefficients of the PU (e&#x2032;) <b>710</b>.</p><p id="p-0117" num="0116">The reconstructed coefficients of the residual PU <b>710</b> are then added to the corresponding coefficients of the corresponding predicted PU (x&#x2032;) <b>702</b>&#x2032; selected from the intra-predicted PU <b>1004</b> and the inter-predicted PU <b>1106</b> by selector <b>306</b>. For example, if the reconstructed residual comes from the &#x201c;intra&#x201d; coding process of the spatial predictor <b>324</b>, the &#x201c;intra&#x201d; predictor (x&#x2032;) is added to this residual in order to recover a reconstructed PU (x&#x2033;) <b>712</b> corresponding to the original PU <b>702</b> modified by the losses resulting from a transformation, for example in this case the quantization operations. If the residual <b>710</b> comes from an &#x201c;inter&#x201d; coding process of the temporal predictor <b>330</b>, the areas pointed to by the current motion vectors (these areas belong to the reference images stored in reference buffer <b>328</b> referred by the current image indices) are merged then added to this decoded residual. In this way the original PU <b>702</b> is modified by the losses resulting from the quantization operations.</p><p id="p-0118" num="0117">To the extent that the encoder <b>202</b> uses motion vector prediction techniques analogous to the image prediction techniques described above, the motion vector may be stored using motion vector buffer <b>329</b> for use in temporally subsequent frames. A flag may be set and transferred in the syntax to indicate that the motion vector for the currently decoded frame should be used for at least the subsequently coded frame instead of replacing the contents of the MV buffer <b>329</b> with the MV for the current frame.</p><p id="p-0119" num="0118">A loop filter <b>322</b> is applied to the reconstructed signal (x&#x2033;) <b>712</b> in order to reduce the effects created by heavy quantization of the residuals obtained, and to improve the signal quality. The loop filter <b>322</b> sequentially applies a deblocking filter (DBF) and a sample adaptive offset (SAO) filter in the inter-picture prediction loop.</p><p id="p-0120" num="0119">The loop filter <b>322</b> applies the DBF for smoothing borders between PUs to visually attenuate high frequencies created by the coding process and a linear filter that is applied after all of the PUs for an image have been decoded to minimize the sum of the square difference (SSD) with the original image. The linear filtering process is performed on a frame by frame basis and uses several pixels around the pixel to be filtered, and also uses spatial dependencies between pixels of the frame. The linear filter coefficients may be coded and transmitted in one header of the bitstream, typically a picture or slice header.</p><p id="p-0121" num="0120">The loop filter <b>322</b> applies the SAO filter to allow for better reconstruction of the original signal amplitudes by applying offsets stored in a lookup table in the bitstream. The SAO filter can be disabled or applied in one of two modes per CTB or CB: edge offset mode or band offset mode.</p><p id="p-0122" num="0121">The edge offset mode operates by comparing the value of a sample to two of its eight neighbors using one of four directional gradient patterns. Based on a comparison with these two neighbors, the sample is classified into one of five categories: minimum, maximum, an edge with the sample having the lower value, an edge with the sample having the higher value, or monotonic. For each of the first four categories an offset is applied.</p><p id="p-0123" num="0122">The band offset mode applies an offset based on the amplitude of a single sample. A sample is categorized by its amplitude into one of 32 bands (histogram bins). Offsets are specified for four consecutive of the 32 bands, because in flat areas which are prone to banding artifacts, sample amplitudes tend to be clustered in a small range. The SAO filter was designed to increase picture quality, reduce banding artifacts, and reduce ringing artifacts.</p><p id="p-0124" num="0123">The filtered images, also known as reconstructed images, are then stored as reference images from reference image buffer <b>328</b> in order to allow the subsequent &#x201c;inter&#x201d; predictions taking place during the compression of the subsequent images of the current video sequence.</p><heading id="h-0014" level="1">Picture Level Quantization Parameter Rate Control</heading><p id="p-0125" num="0124">For quantization, HEVC uses essentially the same uniform-reconstruction quantization (URQ) scheme controlled by a quantization parameter (QP) as in H.264/MPEG-4 AVC. The range of the QP values is defined from 0 to 51, and an increase by 6 doubles the quantization step size, such that the mapping of QP values to step sizes is approximately logarithmic. Quantization scaling matrices are also supported.</p><p id="p-0126" num="0125">To reduce the memory needed to store frequency-specific scaling values, only quantization matrices of sizes 4&#xd7;4 and 8&#xd7;8 are used. For the larger transformations of 16&#xd7;16 and 32&#xd7;32 sizes, an 8&#xd7;8 scaling matrix is sent and is applied by sharing values within 2&#xd7;2 and 4&#xd7;4 coefficient groups in frequency sub-spaces&#x2014;except for values at DC positions, for which distinct values are sent and applied.</p><p id="p-0127" num="0126">It is also advantageous to adapt QP estimates on a sub-picture basis. This can exploit the non-uniform nature of HEVC coding. Spatial masking and distortion is less noticeable in busy (higher complexity) areas than in non-busy (smooth or less complex) areas. Accordingly, a higher QP parameter may be assigned to a busy area of the picture (thus requiring fewer bits to code) and a lower QP parameter (resulting in encoding using a greater number of bits) may be used in smooth areas.</p><heading id="h-0015" level="1">Region Specific Encoding and SAO-Sensitive Slice-Width-Adaptation</heading><p id="p-0128" num="0127">In this invention, the HEVC encoder uses guidance from the HVS, or edge or ROI (region of interest) aspects, to perform the following steps or functions:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0128">1. An edge map comprised of one or more edge blocks is detected in an image using, as a non-limiting example, one or more hardware-assisted primitives, such as INTEL&#x2122; IPPs (Integrated Performance Primitives) edge operators. Example edge operators include Prewitt, Sobel, Canny, Difference of Gaussian, Laplacian or other edge operators. Hence, the use of hardware-assisted primitives makes for low complexity implementations, and the complexity for this step can be expediently bounded.</li>        <li id="ul0002-0002" num="0129">2. Based on the edge map, a slice width may be chosen.</li>        <li id="ul0002-0003" num="0130">3. SAO filtering is selectively turned on or off in the loop filter <b>322</b>, based on the presence of the edge map or otherwise. A measure of how many edge pixels are present in a specific region can be used since, typically, regions would contain a few or many edges (rather than none or a completely-edge-region). More advanced fuzzy classification methods can be used. Adaptive slice width selection is used so that the SAO filtering is turned on only within ROI slices.</li>    </ul>    </li></ul></p><p id="p-0129" num="0131">For the blocks containing edges that undergo edge based processing, the following steps or functions can be configured dynamically during encoding of such blocks:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0132">Smaller prediction block sizes around edges (for example, 4&#xd7;4 or 8&#xd7;8) for intra.</li>        <li id="ul0004-0002" num="0133">Smaller TU sizes around edges (for example, 4&#xd7;4 or 8&#xd7;8) for intra or inter.</li>        <li id="ul0004-0003" num="0134">Finer QP and small block-sizes for edge blocks that will be used as references. It can be determined as to which blocks are used as references for intra. For inter, Pass 1 encoding shows which blocks would be used as references.</li>        <li id="ul0004-0004" num="0135">Improve prediction by more intense sub-pixel motion estimation (ME) (include more references).</li>        <li id="ul0004-0005" num="0136">Motion vectors of panned regions show many adjacent blocks having nearly same MV (they move together in panning). MVs of blocks which suffer more mosquito noise during encoding would be showing different orientations. The global motion vector can be used to detect panned regions.</li>    </ul>    </li></ul></p><p id="p-0130" num="0137">The table set forth below describes how these cases can be categorized as bins and processed accordingly.</p><p id="p-0131" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="1"><colspec colname="1" colwidth="217pt" align="center"/><thead><row><entry namest="1" nameend="1" rowsep="1">TABLE 1</entry></row></thead><tbody valign="top"><row><entry namest="1" nameend="1" align="center" rowsep="1"/></row><row><entry>Categorization of edge maps and processing</entry></row><row><entry>involved under this invention</entry></row></tbody></tgroup><tgroup align="left" colsep="0" rowsep="0" cols="3"><colspec colname="1" colwidth="35pt" align="left"/><colspec colname="2" colwidth="91pt" align="left"/><colspec colname="3" colwidth="91pt" align="left"/><tbody valign="top"><row><entry/><entry/><entry>Invention uses the following</entry></row><row><entry>Category</entry><entry>Characteristic</entry><entry>processing</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row><row><entry>Bin 1</entry><entry>When edge blocks are</entry><entry>Induce a slice partition on the</entry></row><row><entry/><entry>contiguous, and enough in</entry><entry>contiguous blocks that have</entry></row><row><entry/><entry>number, form a slice partition</entry><entry>edges and encode such slices</entry></row><row><entry/><entry>with an adaptive slice width.</entry><entry>turning SAO on.</entry></row><row><entry/><entry>(Use empirical thresholds for</entry><entry>Advantage: bitrate savings as</entry></row><row><entry/><entry>the above determination.)</entry><entry>well as computational savings</entry></row><row><entry/><entry/><entry>compared to unconditionally</entry></row><row><entry/><entry/><entry>turning SAO on everywhere</entry></row><row><entry/><entry/><entry>or turning SAO off</entry></row><row><entry/><entry/><entry>everywhere.</entry></row><row><entry>Bin 2</entry><entry>When edge blocks are not</entry><entry>Do edge block processing</entry></row><row><entry/><entry>contiguous, perform edge</entry><entry>with maximally intense</entry></row><row><entry/><entry>block processing. The edge</entry><entry>processing (e.g. around</entry></row><row><entry/><entry>blocks are not static, and also</entry><entry>edges):</entry></row><row><entry/><entry>do not &#x201c;move together&#x201d; (this</entry><entry>induce small intra</entry></row><row><entry/><entry>can be detected by motion</entry><entry>blocks (4 &#xd7; 4, 8 &#xd7; 8),</entry></row><row><entry/><entry>field or motion vectors</entry><entry>small transform block</entry></row><row><entry/><entry>characteristics). Rather, the</entry><entry>size (4 &#xd7; 4, 8 &#xd7; 8),</entry></row><row><entry/><entry>blocks move in different</entry><entry>small inter prediction</entry></row><row><entry/><entry>directions and have high edge</entry><entry>block size (4 &#xd7; 4, 8 &#xd7; 8,</entry></row><row><entry/><entry>content, whereupon higher</entry><entry>asymmetric e.g. 4 &#xd7; 8, 8 &#xd7; 4,</entry></row><row><entry/><entry>mosquito noise results, i.e.,</entry><entry>etc.),</entry></row><row><entry/><entry>unlike a large &#x201c;rigid body</entry><entry>finer quantization</entry></row><row><entry/><entry>motion.&#x201d;</entry><entry>parameters (&#x3c;35)</entry></row><row><entry/><entry/><entry>independently parameterized</entry></row><row><entry/><entry/><entry>for exact value for each of</entry></row><row><entry/><entry/><entry>these intra/inter prediction</entry></row><row><entry/><entry/><entry>block sizes, and</entry></row><row><entry/><entry/><entry>for intra, more</entry></row><row><entry/><entry/><entry>candidate modes, perform</entry></row><row><entry/><entry/><entry>Motion Estimation at full</entry></row><row><entry/><entry/><entry>resolution as opposed to</entry></row><row><entry/><entry/><entry>subsampled space in pyramid,</entry></row><row><entry/><entry/><entry>heavy duty search for</entry></row><row><entry/><entry/><entry>fractional pixel motion</entry></row><row><entry/><entry/><entry>estimation (e.g. half and</entry></row><row><entry/><entry/><entry>quarter pixel).</entry></row><row><entry>Bin 3</entry><entry>Medium or low number of</entry><entry>Progressively decrease the</entry></row><row><entry/><entry>edges, non-contiguous.</entry><entry>amount of processing</entry></row><row><entry/><entry/><entry>(corresponding to medium to</entry></row><row><entry/><entry/><entry>low number of edges) which</entry></row><row><entry/><entry/><entry>has been described for bin 2.</entry></row><row><entry/><entry/><entry>For example, use:</entry></row><row><entry/><entry/><entry>medium intra block</entry></row><row><entry/><entry/><entry>size (16 &#xd7; 16, 32 &#xd7; 32),</entry></row><row><entry/><entry/><entry>medium transform</entry></row><row><entry/><entry/><entry>block size (e.g. 16 &#xd7; 16),</entry></row><row><entry/><entry/><entry>medium inter prediction</entry></row><row><entry/><entry/><entry>block size (16 &#xd7; 16),</entry></row><row><entry/><entry/><entry>Intra - relatively</entry></row><row><entry/><entry/><entry>candidate modes than in bin 2,</entry></row><row><entry/><entry/><entry>Motion Estimation not</entry></row><row><entry/><entry/><entry>necessarily at full resolution</entry></row><row><entry/><entry/><entry>and may include direct search</entry></row><row><entry/><entry/><entry>in sub-sampled space in</entry></row><row><entry/><entry/><entry>pyramid, lesser search in</entry></row><row><entry/><entry/><entry>fractional pixel motion</entry></row><row><entry/><entry/><entry>estimation (e.g. half and</entry></row><row><entry/><entry/><entry>quarter pixel).</entry></row><row><entry>Bin 4</entry><entry>No edge content or edges</entry><entry>None of the above processing.</entry></row><row><entry/><entry>&#x201c;move together&#x201d; as in a rigid</entry></row><row><entry/><entry>body motion which does not</entry></row><row><entry/><entry>pose mosquito noise risks.</entry></row><row><entry namest="1" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><heading id="h-0016" level="1">Edge Processing</heading><p id="p-0132" num="0138">Consider the edge map as detected by a Sobel or Prewitt or Canny operator, for example. This is obtained by running edge detection on each frame, which basically gives a map of gradients or adjacent-pixels, evaluated on a per-pixel-position.</p><heading id="h-0017" level="1">Setting Gradient or Difference Limits</heading><p id="p-0133" num="0139">In order to run edge detection, the first level of parameterization is to set lower and higher limits of adjacent-pixel-differences (or gradients). A band-pass filtering of gradients (with upper and lower thresholds parameters configured) determines which pixels are classified as edges.</p><p id="p-0134" num="0140">For example, pixels may be classified as edges when the gradient falls between the values of DLL (Difference-Lower-Limit) and DHL (Difference-Higher-Limit). An example for values of DLL and DHL can be 80 and 255. All pixels with a gradient between DLL and DHL which are adjacent to a pixel already determined as edge also are declared as edge pixels.</p><heading id="h-0018" level="1">Classification of Coding Block as Edge Block</heading><p id="p-0135" num="0141">In one embodiment, the classification of a coding block (CB) as an edge block is performed by the following steps or functions:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0142">1. Determine the edge map using the chosen operator, as described above.</li>        <li id="ul0006-0002" num="0143">2. Perform the band-pass filtering by setting gradient or difference limits, as described above.</li>        <li id="ul0006-0003" num="0144">3. As an example, for a block (CU) size of 32&#xd7;32, parameterize an upper and lower thresholds parameters to classify the block (CU) as an edge block if the number of contained pixel-edges (obtained by step #2 above) is between these limits. In one example, BL32 (Block-Low-edge-count-parameter for block size 32&#xd7;32) and BH32 (Block-High-edge-count-parameter for block size 32&#xd7;32) parameters are set to 64 and 512 for a block (CU) size of 32&#xd7;32.</li>        <li id="ul0006-0004" num="0145">4. For edge-based processing in HEVC encoding, note that the edge detection is carried out on a specific block size, for example, 32&#xd7;32 or 16&#xd7;16, in a preprocessing step (i.e. prior to encoding) that works on the pixel domain. The BL32 and BH32 are directly used to make decisions on which blocks are edges. During actual encoding, the CU sizes are decided. At this stage, the decisions on which of the blocks were edges in the preprocessing step can easily be used to map the CU region into constituent edge or non-edge blocks. In other words, the CU region contains blocks that have been determined as edge or non-edge blocks in the preprocessing step. These edge or non-edge blocks guide the exemplary actions as in step #5 below. The constituent edge or non-edge blocks can be used to guide the prediction block size and transform block size that can be used as candidates.</li>        <li id="ul0006-0005" num="0146">5. For the block size under consideration, which is used for each of the following decisions in HEVC, use the blocks that get classified as edge-blocks from steps #3 and #4 above, to further perform the following exemplary (non-limiting) actions:        <ul id="ul0007" list-style="none">            <li id="ul0007-0001" num="0147">induce small intra blocks (4&#xd7;4, 8&#xd7;8) within the block (CU) being coded;</li>            <li id="ul0007-0002" num="0148">small transform block size (4&#xd7;4, 8&#xd7;8) within the block (CU) being coded;</li>            <li id="ul0007-0003" num="0149">small inter prediction block size (4&#xd7;4, 8&#xd7;8, asymmetric e.g. 4&#xd7;8, 8&#xd7;4, etc., within the block (CU) being coded;</li>            <li id="ul0007-0004" num="0150">improved (finer) quantization parameters (&#x3c;35) independently parameterized for exact value for each of these intra/inter prediction block sizes, within the block (CU) being coded;</li>            <li id="ul0007-0005" num="0151">for intra, more candidate modes, within the block (CU) being coded;</li>            <li id="ul0007-0006" num="0152">perform Motion Estimation at full resolution as opposed to subsampled space in pyramid, heavy duty search for fractional pixel motion estimation (e.g. half and quarter pixel), within the block (CU) being coded.</li>        </ul>        </li>        <li id="ul0006-0006" num="0153">6. From experimental results, it seems better to also have a mask which filters out only edges which are associated with moving portions of the frame. Note that non-moving portions are associated with static edges inherent in the static visual content. There are several ways to determine moving edges and create the mask. These range from simple differences between frames to more sophisticated motion vector analysis used for deriving the mask.</li>    </ul>    </li></ul></p><heading id="h-0019" level="1">Adaptive Slice Width and Selectively Enabling the SAO Filter</heading><p id="p-0136" num="0154">Quantization makes reconstructed and original blocks differ. The quantization error is not uniformly distributed among pixels. There is a bias in distortion around edges (due to the Gibbs effect).</p><p id="p-0137" num="0155">As noted above, HEVC uses two filtering stages in its in-loop filtering <b>322</b>, namely, DBF and SAO filters. The SAO filtering adds an offset to a (deblocked) pixel value according to an SAO type which is based on edge direction/shape (edge offset) and pixel value (band offset) or unchanged (off).</p><p id="p-0138" num="0156">In addition to correction at local extremes, HEVC allows alternative correction to specific ranges of pixel values.</p><p id="p-0139" num="0157">For example, <figref idref="DRAWINGS">FIGS. <b>13</b>A-<b>13</b>F</figref> are graphs of pixel level vs. pixel index (x&#x2212;1, x, x+1) that illustrate the offsets in SAO filtering, wherein <figref idref="DRAWINGS">FIGS. <b>13</b>A, <b>13</b>B and <b>13</b>C</figref> are graphs of positive offsets applied in the case of local minima (local min) and <figref idref="DRAWINGS">FIGS. <b>13</b>D, <b>13</b>E and <b>13</b>F</figref> are graphs of negative offsets applied in case of local maxima (local max). The arrows in each graph at pixel index x show the offset direction.</p><p id="p-0140" num="0158">It has been reported that SAO filtering reduces ringing and mosquito artifacts (which become more serious with large transforms) and improves subjective quality for low compression ratio video.</p><p id="p-0141" num="0159">SAO filtering can be optionally turned off or applied only on luma samples or only on chroma samples (regulated by slice_sao_luma_flag and slice_sao_chroma_flag). SAO parameters can be either explicitly signaled in the CTU header or inherited from left or above CTUs.</p><p id="p-0142" num="0160">As mentioned above, there are two types of SAO filtering:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0000">    <ul id="ul0009" list-style="none">        <li id="ul0009-0001" num="0161">Edge Type&#x2014;offset depends on edge mode (signaled by SaoTypeIdx=2); and</li>        <li id="ul0009-0002" num="0162">Band Type&#x2014;offset depends on the sample amplitude (SaoTypeIdx=1).</li>    </ul>    </li></ul></p><p id="p-0143" num="0163">In the case of Edge Type, the edge is searched across one of the directions signaled by the value of the sao_eo_class parameter (=0, 1, 2, 3), as shown in <figref idref="DRAWINGS">FIGS. <b>14</b>A-D</figref>, once per CTU <b>1400</b>, <b>1402</b>, <b>1404</b>, <b>1406</b>, wherein the sample labeled &#x201c;p&#x201d; indicates a current sample and the two samples labeled &#x201c;n0&#x201d; and &#x201c;n1&#x201d; specify two neighboring samples along the chosen direction.</p><p id="p-0144" num="0164">The detected edge can come from an edge map using an edge detection operator (Canny edge detector operator is a non-limiting example). A typical edge map detected by an edge operator is shown in <figref idref="DRAWINGS">FIG. <b>15</b></figref>.</p><p id="p-0145" num="0165">The edge detection is applied to each sample. According to the results, the sample is classified into five categories (EdgeIdx=0, 1, 2, 3, 4), as shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref>, wherein each EdgeIdx has a corresponding condition with regard to the samples labeled &#x201c;p&#x201d;, &#x201c;n0&#x201d; and &#x201c;n1&#x201d;, and an associated meaning. For the EdgeIdx=0, the condition comprises p=n0 and p=n1, which has the meaning of &#x201c;flat area&#x201d;; for the EdgeIdx=1, the condition comprises p&#x3c;n0 and p&#x3c;n1, which has the meaning of &#x201c;local min&#x201d;; for the EdgeIdx=2, the condition comprises p&#x3c;n0 and p=n1 or p&#x3c;n1 and p=n0, which has the meaning of &#x201c;edge&#x201d;; for the EdgeIdx=3, the condition comprises p&#x3e;n0 and p=n1 or p&#x3e;n1 and p=n0, which has the meaning of &#x201c;edge&#x201d;; and for the EdgeIdx=4, the condition comprises p&#x3e;n0 and p&#x3e;n1, which has the meaning of &#x201c;local max&#x201d;.</p><p id="p-0146" num="0166">According to EdgeIdx, the corresponding sample offset (signaled by sao_offset_abs and sao_offset_sign) is added to the current sample. Up to 12 edge offsets (4 luma, 4 Cb chroma and 4 Cr chroma) are signaled per CTU.</p><p id="p-0147" num="0167">Under the band offset method, the pixel range from 0 to 255 (for 8 bit depth) is uniformly split into 32 bands and the sample values belonging to four consecutive bands are modified by adding the values denoted as band offsets. <figref idref="DRAWINGS">FIG. <b>17</b></figref> shows an example of the pixel range <b>1700</b> from 0 to 255 where four consecutive bands <b>1702</b> are modified by adding the values denoted as band offsets. The band offsets are signaled in the CTU header. Experimental results reveal that Band Type SAO is beneficial in noisy sequences or in sequences with large gradients.</p><heading id="h-0020" level="1">Slices in HEVC</heading><p id="p-0148" num="0168"><figref idref="DRAWINGS">FIG. <b>18</b></figref> illustrates the structure <b>1800</b> of slices in HEVC, wherein the slices are groups of CTUs in scan order, separated by a start code (slice header). In this example, five slice partitions are shown, labeled as Slice #0 (<b>1802</b>), #1 (<b>1804</b>), #2 (<b>1806</b>), #3 (<b>1808</b>) and #4 (<b>1810</b>).</p><p id="p-0149" num="0169">Generally, slices are used for:<ul id="ul0010" list-style="none">    <li id="ul0010-0001" num="0000">    <ul id="ul0011" list-style="none">        <li id="ul0011-0001" num="0170">network packetization (MTU size matching);</li>        <li id="ul0011-0002" num="0171">parallel processing (slices are self-contained, excepting deblocking), but the decoder has to perform some preprocessing to identify entry points; and</li>        <li id="ul0011-0003" num="0172">fast resynchronization in case of bitstream errors or packet loss.</li>    </ul>    </li></ul></p><p id="p-0150" num="0173"><figref idref="DRAWINGS">FIG. <b>19</b></figref> illustrates the bitstream structure <b>1900</b> of HEVC, wherein the NAL unit of the bitstream includes a VPS (<b>1902</b>), SPS (<b>1904</b>), and PPS (<b>1906</b>), followed by three instances of slice headers (<b>1908</b>) and slice data (<b>1910</b>) for Pictures #1, #2, #3. In this structure the SPS (<b>1904</b>) points at the PPS (<b>1906</b>), and the PPS (<b>1906</b>) points at each slice header (<b>1908</b>).</p><p id="p-0151" num="0174">A slice comprises an integral number of CTBs or macroblocks. The number of CTBs in a slice is typically configured as a fixed number in most implementations. Alternatively, in some implementations, a slice can contain a varying integral number of CTBs with an approximately fixed number of bits. The number of bits in a slice is referred to as the slice width. This invention proposes a new method of slice width selection in the context of HEVC and compression/mosquito noise reduction.</p><p id="p-0152" num="0175">As opposed to this characterization of slice width with regard to the gross video quality or noise, this invention uses a more nuanced approach. In the context of this invention:<ul id="ul0012" list-style="none">    <li id="ul0012-0001" num="0000">    <ul id="ul0013" list-style="none">        <li id="ul0013-0001" num="0176">1. The edge map is first detected. As noted above, many hardware-assisted primitives, including INTEL&#x2122; IPPs, are available as non-limiting examples for this step or function, and hence, the use of hardware-assisted primitives makes for low complexity implementations, and the complexity of this step can be expediently bounded. Example edge operators include Sobel, Prewitt, Canny, Difference of Gaussian, Laplacian or other edge operators.</li>        <li id="ul0013-0002" num="0177">2. Based on the edge map, the slice width may be chosen as depicted in <figref idref="DRAWINGS">FIG. <b>20</b></figref>.</li>        <li id="ul0013-0003" num="0178">3. SAO filtering is selectively turned on or off in the loop filter <b>322</b>, based on the presence of an edge map or otherwise. A measure of how may edge pixels are present in a specific region can be used since, typically, regions would contain a few or many edges (rather than none of completely edge region). More advanced fuzzy classification methods can be used.</li>    </ul>    </li></ul></p><p id="p-0153" num="0179"><figref idref="DRAWINGS">FIG. <b>20</b></figref> illustrates Slice 0 (<b>2000</b>), Slice 1 (<b>2002</b>) and Slice 2 (<b>2004</b>) for the image from <figref idref="DRAWINGS">FIG. <b>15</b></figref> using an adaptive slice width, wherein each slice has a different width. Note that Slice 1 (<b>2002</b>) has contiguous blocks having significant edge content and hence this invention turns SAO filtering on for only Slice 1 (<b>2002</b>) in this figure. This saves encoding complexity and compression efficiency for Slice 0 (<b>2000</b>) and Slice 2 (<b>2004</b>), while Slice 1 (<b>2002</b>) gets reduced mosquito noise around the moving edges, by virtue of SAO filtering being turned on.</p><heading id="h-0021" level="1">Formation of Slices</heading><p id="p-0154" num="0180">The edge map basically tags each block either as an edge-block or non-edge block. <figref idref="DRAWINGS">FIG. <b>21</b></figref> is an example edge map <b>2100</b>, based on <figref idref="DRAWINGS">FIG. <b>20</b></figref>, that shows different arrangements and orientations of edge-blocks and non-edge-blocks in a frame, wherein edge-blocks are labeled as &#x201c;E&#x201d;, while non-edge-blocks are labeled as &#x201c;N&#x201d;.</p><p id="p-0155" num="0181">The edge (E) blocks within the boundary lines of <b>2102</b> (i.e., beginning at row 3, column 13 through row 7, column 14) satisfy the conditions to form an edge slice comprised of only edge blocks that are contiguous, as well as more than the threshold required to form a slice. These blocks correspond to Slice 1 in <figref idref="DRAWINGS">FIG. <b>20</b></figref>.</p><p id="p-0156" num="0182">The edge (E) blocks outside the boundary lines of <b>2102</b> (i.e., beginning at row 1, column 1 through row 3, column 12, and beginning at row 8, column 1 through row 9, column 14) do not satisfy the conditions to form a complete slice that is comprised of only edge blocks, either because they are isolated, or in some cases contiguous, but too few in number, and hence below the threshold required to form an edge slice. These blocks correspond to Slice 0 (i.e., beginning at row 1, column 1 through row 3, column 12) and Slice 2 (i.e., beginning at row 8, column 1 through row 9, column 14) in <figref idref="DRAWINGS">FIG. <b>20</b></figref>.</p><p id="p-0157" num="0183">Slice 1 is formed first as a complete slice that is comprised only of edge-blocks. After formation of Slice 1, the remaining blocks are aggregated into contiguous regions of blocks. A slice needs to have a contiguous region of blocks; hence, the aggregation yields two regions for slices (apart from Slice 1 already formed). Thus, the result is Slice 0 and Slice 2, respectively. Note that other slice formation methods may be used for the non-edge slices (for example, based on a selected slice width for such non-edge slices).</p><p id="p-0158" num="0184">The following describes a method for forming the exclusive slices with edge-blocks, according to one embodiment.<ul id="ul0014" list-style="none">    <li id="ul0014-0001" num="0000">    <ul id="ul0015" list-style="none">        <li id="ul0015-0001" num="0185">1. At the beginning of each frame, a toggle flag is initialized to off and a counter is initialized to 0.</li>        <li id="ul0015-0002" num="0186">2. Pass 1&#x2014;&#x201c;Get Count Data&#x201d;        <ul id="ul0016" list-style="none">            <li id="ul0016-0001" num="0187">Loop L&#x2014;Each of the blocks in a frame is then traversed in a raster scan.            <ul id="ul0017" list-style="none">                <li id="ul0017-0001" num="0188">Step A&#x2014;&#x201c;Count Blocks in Each Run&#x201d;                <ul id="ul0018" list-style="none">                    <li id="ul0018-0001" num="0189">As each block is encountered, if there is a transition from non-edge to edge, a toggle flag is turned on. Each edge-block increments a counter.</li>                    <li id="ul0018-0002" num="0190">When there is a transition to a non-edge-block, the counter's value is saved to an indexed list of counter values associated with the contained blocks traversed in the run. (Each run of contiguous edge-blocks, that is, the run of edge-blocks encountered since the toggle flag was turned on, is saved as a separate indexed list entry of the counter's vale and associated blocks). The counter is then reset to 0 and the toggle flag is turned off.</li>                    <li id="ul0018-0003" num="0191">The logic returns to step A, until all blocks of the frame are processed by Loop L.</li>                </ul>                </li>            </ul>            </li>        </ul>        </li>        <li id="ul0015-0003" num="0192">3. Pass 2&#x2014;&#x201c;Form Slices&#x201d;        <ul id="ul0019" list-style="none">            <li id="ul0019-0001" num="0193">A minimum threshold for blocks within a slice is selected, e.g., N.</li>            <li id="ul0019-0002" num="0194">Each of the list entries in the indexed list of counter values is examined. If the counter value is greater than N, a slice is formed by the blocks associated with that list entry. Note that N has an implication on the number of slices in the frame and can be chosen accordingly. For example, if the total number of blocks in the frame is B, and it is decided that there should be no more than 5 slices per frame, then N=B/S can be selected.</li>            <li id="ul0019-0003" num="0195">All the eligible runs which exceed N are formed as slices. These are slices associated with edge-blocks for which SAO filtering is turned on.</li>            <li id="ul0019-0004" num="0196">Each group of remaining blocks in between the eligible slices are aggregated into a slice. Since there may be multiple such groups in a frame, there could be multiple such slices of non-edge-blocks, for which SAO filtering is then turned off. Note that other slice formation methods may apply for the non-edge slices (for example, based on a selected slice width for such non-edge slices).</li>        </ul>        </li>    </ul>    </li></ul></p><p id="p-0159" num="0197"><figref idref="DRAWINGS">FIGS. <b>22</b>A-<b>22</b>B</figref> are non-limiting examples of how some embodiments of the invention would work on processors with multicore architectures.</p><p id="p-0160" num="0198"><figref idref="DRAWINGS">FIG. <b>22</b>A</figref> shows how the different slices are associated with different free cores available in an example timing diagram. Specifically, Slice 0 is associated with core m, Slice 1 is associated with core m+1, and Slice 2 is associated with core m+2. Note that, in the case where there are fewer cores than slices to be encoded, the number of blocks contained in each slice can be used to effectively load-balance the cores.</p><p id="p-0161" num="0199"><figref idref="DRAWINGS">FIG. <b>22</b>B</figref> shows a different timing diagram for a frame that has additional slices. Specifically, Slice 0 is associated with core m, Slice 1 is associated with core m+1, Slice 2 is associated with core m+2, Slice 3 is associated with core m, and Slice 4 is associated with core m+2. In this example, cores m and m+2 handle multiple slices in the time that core m+1 handles the largest slice, Slice 1. Effective task scheduling mechanisms can ensure good parallelism among cores using different type of parallelization strategies.</p><heading id="h-0022" level="1">Guidance on the SAO Filter to be Used</heading><p id="p-0162" num="0200">As noted above, the focus of this invention is to partition the video frames into slices in order to turn SAO filtering on for selected slices. The following steps can provide guidance on the SAO filter to be used.<ul id="ul0020" list-style="none">    <li id="ul0020-0001" num="0000">    <ul id="ul0021" list-style="none">        <li id="ul0021-0001" num="0201">1. The edges may show discontinuities or breaks, due to the different strengths of edges. Short edges can be aggregated into extended edges using some parametric techniques. Hough transform can be used to parametrically identify line edges with different angular orientations.</li>        <li id="ul0021-0002" num="0202">2. Using these detected and processed edges, a histogram of edges is created for the edges with each block, that is, for each coding tree block (CTB). Each histogram bin sums up the strength of pixels with similar edge direction in the CTB using the processed edges. The histogram bin with a maximum strength indicates there is a strong edge along this direction in the CTB and, hence, is considered as the likely edge offset type.</li>        <li id="ul0021-0003" num="0203">3. The SAO parameters for each CTB are comprised of SAO mode, SAO type and four offsets. SAO type can be SAO_TYPE_EO_0, _90, _135 and _45, and one band offset SAO_TYPE_BO. Since there are four bins for edge offsets, the processed edges are clustered into the closest bin, out of the said four bins.</li>    </ul>    </li></ul></p><p id="p-0163" num="0204">Thus, based on the distribution of the edge direction histogram, only one Edge Offset class is chosen for further encoding process.</p><heading id="h-0023" level="1">Experimental Results</heading><p id="p-0164" num="0205">Using edge-based processing, experimental results should that improvements were obtained using the invention. Specifically, <figref idref="DRAWINGS">FIGS. <b>23</b>A and <b>23</b>B</figref> illustrate the difference in quality resulting from this invention, wherein <figref idref="DRAWINGS">FIG. <b>23</b>B</figref> is of higher quality (i.e., less mosquito noise around the edges) as compared to <figref idref="DRAWINGS">FIG. <b>23</b>A</figref>. In order to ensure that non-edge block regions did not deteriorate, the PSNR-bitrate curves were monitored and it was ensured there was no degradation due to the processing applied under this invention.</p><heading id="h-0024" level="1">Hardware Environment</heading><p id="p-0165" num="0206"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a diagram illustrating an exemplary computer system <b>2400</b> that could be used to implement elements of the present invention, including some or all of the elements of the codec system <b>200</b>A. The exemplary computer system <b>2400</b> may also be used to encode the uncoded video <b>102</b> according to the selected encoding parameters or to decode the coded video.</p><p id="p-0166" num="0207">The computer <b>2402</b> comprises a general purpose hardware processor <b>2404</b>A and/or a special purpose hardware processor <b>2404</b>B (hereinafter alternatively collectively referred to as processor <b>2404</b>) and a memory <b>2406</b>, such as random access memory (RAM). The computer <b>2402</b> may be coupled to other devices, including input/output (I/O) devices such as a keyboard <b>2414</b>, a mouse device <b>2416</b> and a printer <b>2428</b>.</p><p id="p-0167" num="0208">In one embodiment, the computer <b>2402</b> operates by the general purpose processor <b>2404</b>A performing instructions defined by the computer program <b>2410</b> under control of an operating system <b>2408</b>. The computer program <b>2410</b> and/or the operating system <b>2408</b> may be stored in the memory <b>2406</b> and may interface with the user and/or other devices to accept input and commands and, based on such input and commands and the instructions defined by the computer program <b>2410</b> and operating system <b>2408</b> to provide output and results.</p><p id="p-0168" num="0209">Output/results may be presented on the display <b>2422</b> or provided to another device for presentation or further processing or action. In one embodiment, the display <b>2422</b> comprises a liquid crystal display (LCD) having a plurality of separately addressable pixels formed by liquid crystals. Each pixel of the display <b>2422</b> changes to an opaque or translucent state to form a part of the image on the display in response to the data or information generated by the processor <b>2404</b> from the application of the instructions of the computer program <b>2410</b> and/or operating system <b>2408</b> to the input and commands. Other display <b>2422</b> types also include picture elements that change state in order to create the image presented on the display <b>2422</b>. The image may be provided through a graphical user interface (GUI) module <b>2418</b>A. Although the GUI module <b>2418</b>A is depicted as a separate module, the instructions performing the GUI functions can be resident or distributed in the operating system <b>2408</b>, the computer program <b>2410</b>, or implemented with special purpose memory and processors.</p><p id="p-0169" num="0210">Some or all of the operations performed by the computer <b>2402</b> according to the computer program <b>2410</b> instructions may be implemented in a special purpose processor <b>2404</b>B. In this embodiment, some or all of the computer program <b>2410</b> instructions may be implemented via firmware instructions stored in a read only memory (ROM), a programmable read only memory (PROM) or flash memory within the special purpose processor <b>2404</b>B or in memory <b>2406</b>. The special purpose processor <b>2404</b>B may also be hardwired through circuit design to perform some or all of the operations to implement the present invention. Further, the special purpose processor <b>2404</b>B may be a hybrid processor, which includes dedicated circuitry for performing a subset of functions, and other circuits for performing more general functions such as responding to computer program instructions. In one embodiment, the special purpose processor is an application specific integrated circuit (ASIC).</p><p id="p-0170" num="0211">The computer <b>2402</b> may also implement a compiler <b>2412</b> which allows an application program <b>2410</b> written in a programming language such as COBOL, C, C++, FORTRAN, or other language to be translated into processor <b>2404</b> readable code. After completion, the application or computer program <b>2410</b> accesses and manipulates data accepted from I/O devices and stored in the memory <b>2406</b> of the computer <b>2402</b> using the relationships and logic that was generated using the compiler <b>2412</b>.</p><p id="p-0171" num="0212">The computer <b>2402</b> also optionally comprises an external communication device such as a modem, satellite link, Ethernet card, or other device for accepting input from and providing output to other computers.</p><p id="p-0172" num="0213">In one embodiment, instructions implementing the operating system <b>2408</b>, the computer program <b>2410</b>, and/or the compiler <b>2412</b> are tangibly embodied in a computer-readable medium, e.g., data storage device <b>2420</b>, which could include one or more fixed or removable data storage devices, such as a zip drive, floppy disc drive <b>2424</b>, hard drive, CD-ROM drive, tape drive, or a flash drive. Further, the operating system <b>2408</b> and the computer program <b>2410</b> are comprised of computer program instructions which, when accessed, read and executed by the computer <b>2402</b>, causes the computer <b>2402</b> to perform the steps necessary to implement and/or use the present invention or to load the program of instructions into a memory, thus creating a special purpose data structure causing the computer to operate as a specially programmed computer executing the method steps described herein. Computer program <b>2410</b> and/or operating instructions may also be tangibly embodied in memory <b>2406</b> and/or data communications devices <b>2430</b>, thereby making a computer program product or article of manufacture according to the invention. As such, the terms &#x201c;article of manufacture,&#x201d; &#x201c;program storage device&#x201d; and &#x201c;computer program product&#x201d; or &#x201c;computer readable storage device&#x201d; as used herein are intended to encompass a computer program accessible from any computer readable device or media.</p><p id="p-0173" num="0214">Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer <b>2402</b>.</p><p id="p-0174" num="0215">Although the term &#x201c;computer&#x201d; is referred to herein, it is understood that the computer may include portable devices such as cellphones, portable MP3 players, video game consoles, notebook computers, pocket computers, or any other device with suitable processing, communication, and input/output capability.</p><heading id="h-0025" level="1">Processor Steps or Functions</heading><p id="p-0175" num="0216"><figref idref="DRAWINGS">FIG. <b>25</b></figref> is a flowchart illustrating the steps or functions <b>2500</b> performed by a processor, according to one embodiment. Specifically, these steps and functions are performed by the elements of the codec system <b>200</b>A when encoding a frame of video.</p><p id="p-0176" num="0217">Block <b>2502</b> represents a processor detecting an edge map comprised of one or more edge-blocks in the frame. The edge map is detected by an edge operator. The edge map is detected by classification of pixels in the frame as edges or non-edges, and by classification of blocks as edge-blocks or non-edge-blocks based on the classification of the pixels. Specifically, the edge map is detected by a gradient or differences computation in a pixel domain of the frame, wherein a lower threshold and a higher threshold are used on the gradient or differences computation in order to generate the edge map, wherein the lower threshold and the higher threshold are used on a number of edge pixels per individual block to classify the individual block as one of the edge-blocks or one of the non-edge-blocks, and wherein the lower and higher threshold are scaled based on the individual block's size used during the encoding for decisions within the individual block.</p><p id="p-0177" num="0218">Block <b>2504</b> represents a processor, when the edge-blocks are contiguous, forming at least one slice partition using the edge-blocks and encoding the slice partition using a sample adaptive offset (SAO) filter. The slice partition is formed with an adaptive slice width, and the sample adaptive offset (SAO) filter is turned on or off during the encoding based on whether the edge-blocks are being encoded.</p><p id="p-0178" num="0219">Block <b>2506</b> represents a processor, when the edge-blocks are not contiguous, performing edge-block processing around edges in the frame during encoding of the edge-blocks. The edge-block processing involves configuring one or more of: an intra block size, a transform block size, an inter prediction block size, a quantization parameter, candidate modes for intra prediction, pyramid level for motion estimation, and fractional pixel motion estimation search.</p><heading id="h-0026" level="1">CONCLUSION</heading><p id="p-0179" num="0220">This concludes the description of the preferred embodiments of the present invention. The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching.</p><p id="p-0180" num="0221">It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. The above specification, examples and data provide a complete description of the manufacture and use of the apparatus and method of the invention. Since many embodiments of the invention can be made without departing from the scope of the invention, the invention resides in the claims hereinafter appended.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of encoding frames of video, comprising:<claim-text>(a) processing blocks in the frames to classify the blocks as having a first degree of edges and a second degree of edges, where said first degree of edges is greater than said second degree of edges, constructing maps for respective said blocks having said first degree of edges or said second degree of edges of said frames, based upon the respective maps (i) forming at least one first slice partitioning having a size so as to enclose said first degree of edges of said blocks, and (ii) forming at least one second slice partitioning having a size so as to enclose said second degree of edges of said blocks;</claim-text><claim-text>(b) encoding blocks in the at least one first slice partition using a sample adaptive offset (SAO) filter;</claim-text><claim-text>(c) encoding blocks in the at least one second slice partition by performing edge-block processing in the second slice partition, without applying a SAO filter to edge blocks in the second partition.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising wherein the SAO filter is disabled while encoding the at least one second slice partition.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the slice partition is formed with an adaptive slice width.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one slice partition comprises a plurality of slice partitions and the plurality of slice partitions are processed in parallel.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the map is detected by an edge operator.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the map is detected by classification of samples in the frame as edges or non-edges, and by classification of blocks as edge-blocks or non-edge-blocks based on the classification of the samples.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the map is detected by a gradient or differences computation in a sample domain of the frame.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein a lower threshold and a higher threshold are used on the gradient or differences computation in order to generate the map.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the lower threshold and the higher threshold are used on a number of edge samples per individual block to classify the individual block as one of edge-blocks or one of non-edge-blocks.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the lower and higher threshold are scaled based on the individual block's size used during the encoding for decisions within the individual block.</claim-text></claim></claims></us-patent-application>