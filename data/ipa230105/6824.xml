<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006825A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006825</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17902736</doc-number><date>20220902</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>14</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3215</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0861</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3236</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>088</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SECURE ORBIT COMMUNICATION</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17225044</doc-number><date>20210407</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17902736</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>63150898</doc-number><date>20210218</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SpiderOak, Inc.</orgname><address><city>Lenexa</city><state>KS</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Moore</last-name><first-name>Jonathan Andrew Crockett</first-name><address><city>Portland</city><state>OR</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Presented here is a system to enable secure communication between a first and a second communicator on a communication channel. The system can use multiple rotating cryptographic keys that are rotating according to a predetermined schedule to encrypt the communication between the first and the second communicator. The system can record the authority associated with the communication channel on a block chain. To determine whether the first and the second communicator have the authority to access the communication channel, the system can compute the authority of the first and the second communicator by checking the block chain from an initial block to a last block. The system can encrypt multiple communications sent via the communication channel using the multiple rotating cryptographic keys and can send the communications via the communication channel.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="67.73mm" wi="158.75mm" file="US20230006825A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="243.76mm" wi="176.61mm" orientation="landscape" file="US20230006825A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="149.35mm" wi="135.81mm" file="US20230006825A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="164.59mm" wi="141.65mm" file="US20230006825A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="189.15mm" wi="165.10mm" file="US20230006825A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="246.04mm" wi="125.98mm" orientation="landscape" file="US20230006825A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="99.23mm" wi="177.72mm" file="US20230006825A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="211.84mm" wi="143.85mm" orientation="landscape" file="US20230006825A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="232.83mm" wi="99.57mm" orientation="landscape" file="US20230006825A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="234.10mm" wi="164.85mm" orientation="landscape" file="US20230006825A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="236.47mm" wi="154.60mm" orientation="landscape" file="US20230006825A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="155.11mm" wi="106.60mm" orientation="landscape" file="US20230006825A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="232.49mm" wi="140.12mm" orientation="landscape" file="US20230006825A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="242.82mm" wi="137.50mm" orientation="landscape" file="US20230006825A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="240.45mm" wi="137.50mm" orientation="landscape" file="US20230006825A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="173.40mm" wi="101.52mm" file="US20230006825A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="153.59mm" wi="102.36mm" file="US20230006825A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="241.81mm" wi="171.37mm" orientation="landscape" file="US20230006825A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="208.96mm" wi="170.52mm" orientation="landscape" file="US20230006825A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="169.50mm" wi="177.63mm" orientation="landscape" file="US20230006825A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="200.66mm" wi="177.63mm" orientation="landscape" file="US20230006825A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="211.07mm" wi="150.45mm" orientation="landscape" file="US20230006825A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="190.08mm" wi="118.19mm" orientation="landscape" file="US20230006825A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="131.83mm" wi="118.19mm" orientation="landscape" file="US20230006825A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00024" num="00024"><img id="EMI-D00024" he="216.07mm" wi="125.98mm" orientation="landscape" file="US20230006825A1-20230105-D00024.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00025" num="00025"><img id="EMI-D00025" he="178.48mm" wi="148.93mm" orientation="landscape" file="US20230006825A1-20230105-D00025.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00026" num="00026"><img id="EMI-D00026" he="204.64mm" wi="83.57mm" orientation="landscape" file="US20230006825A1-20230105-D00026.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00027" num="00027"><img id="EMI-D00027" he="164.76mm" wi="102.36mm" file="US20230006825A1-20230105-D00027.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00028" num="00028"><img id="EMI-D00028" he="148.76mm" wi="102.36mm" file="US20230006825A1-20230105-D00028.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00029" num="00029"><img id="EMI-D00029" he="175.43mm" wi="93.90mm" orientation="landscape" file="US20230006825A1-20230105-D00029.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00030" num="00030"><img id="EMI-D00030" he="210.06mm" wi="83.06mm" orientation="landscape" file="US20230006825A1-20230105-D00030.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00031" num="00031"><img id="EMI-D00031" he="179.32mm" wi="86.61mm" orientation="landscape" file="US20230006825A1-20230105-D00031.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00032" num="00032"><img id="EMI-D00032" he="218.36mm" wi="128.95mm" orientation="landscape" file="US20230006825A1-20230105-D00032.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00033" num="00033"><img id="EMI-D00033" he="239.61mm" wi="138.26mm" orientation="landscape" file="US20230006825A1-20230105-D00033.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00034" num="00034"><img id="EMI-D00034" he="238.00mm" wi="132.42mm" orientation="landscape" file="US20230006825A1-20230105-D00034.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00035" num="00035"><img id="EMI-D00035" he="232.83mm" wi="128.44mm" orientation="landscape" file="US20230006825A1-20230105-D00035.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00036" num="00036"><img id="EMI-D00036" he="237.83mm" wi="77.98mm" orientation="landscape" file="US20230006825A1-20230105-D00036.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00037" num="00037"><img id="EMI-D00037" he="124.46mm" wi="110.15mm" file="US20230006825A1-20230105-D00037.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00038" num="00038"><img id="EMI-D00038" he="237.32mm" wi="143.59mm" orientation="landscape" file="US20230006825A1-20230105-D00038.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00039" num="00039"><img id="EMI-D00039" he="234.95mm" wi="149.18mm" orientation="landscape" file="US20230006825A1-20230105-D00039.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00040" num="00040"><img id="EMI-D00040" he="217.34mm" wi="101.77mm" file="US20230006825A1-20230105-D00040.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00041" num="00041"><img id="EMI-D00041" he="189.57mm" wi="101.77mm" file="US20230006825A1-20230105-D00041.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00042" num="00042"><img id="EMI-D00042" he="159.60mm" wi="131.32mm" file="US20230006825A1-20230105-D00042.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. Non-Provisional patent application Ser. No. 17/225,044, filed Apr. 7, 2021, which claims priority to and the benefit of U.S. Provisional Patent Application No. 63/150,898, filed Feb. 18, 2021, which is hereby incorporated by reference in its entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present application is related to managing access to a secured file system, and more specifically, to methods and systems that manage group authority and access to the secured file system in an enterprise environment.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The major problem our computing systems face today is that internal threats&#x2014;that is, threats from our reliance upon a centralized infrastructure and the people that manage and provide it&#x2014;are a part of the overall threat model. According to Microsoft SharePoint Admin Role documentation, &#x201c;[g]lobal admins and SharePoint admins don't have automatic access to all sites and each user's OneDrive, but they can give themselves access to any site or OneDrive.&#x201d; Our current approach to infrastructure, that centralizes the management and provision of security and access control with admins allows people access to information without a need-to-know that information. As a result, administrators that do not have the authority to read data stored on the server that they are administering can still gain access and read the data, without the authority to do so.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0005" num="0004">Presented here is a system to enable secure communication between a terrestrial operator and an extraterrestrial object. The system can use multiple rotating cryptographic keys that are rotating according to a predetermined schedule, and where the multiple rotating cryptographic keys are initially encrypted and distributed to the terrestrial operator and the extraterrestrial object. The predetermined schedule can be an algorithm that calculates the multiple rotating cryptographic keys from an initial key, and a round indicator, which indicates the place of the key in the sequence of the multiple rotating cryptographic keys. The system can create a radiofrequency communication channel between the terrestrial operator and the extraterrestrial object.</p><p id="p-0006" num="0005">The system can append to a block chain a block defining an authority of the terrestrial operator and the extraterrestrial object, where the authority defines an operation that the two communicators can perform on the communication channel, such as read, write, add an additional communicator, etc. The system can grant access to the communication channel to the terrestrial operator and the extraterrestrial object by determining the authority of each. To determine the authority, the system can compute the authority of the terrestrial operator and the extraterrestrial object by checking the block chain from an initial block to a last block. The system can encrypt multiple communications sent via the communication channel using the multiple rotating cryptographic keys and can send the communications via the communication channel.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a system to manage group authority and access to cryptographically secure data in a decentralized environment.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a team linear sequence and a space linear sequence.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows the linear ordering between a team linear sequence and a space linear sequence.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows anatomy of a block.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows verification of various layers of policies that can exist within the system.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows various cryptographic IDs that can exist within the system.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows how a block can be distributed to multiple devices.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a linear sequence containing blocks.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a team linear sequence and a space linear sequence.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIGS. <b>10</b>A-B</figref> show authority computation in case a malicious actor tries to infiltrate the system.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIGS. <b>11</b>A-C</figref> show how access to encrypted data can be controlled upon authority revocation.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart of a method to manage authority, via a distributed ledger, separately from access to encrypted data by one or more trusted devices, wherein each of the trusted devices corresponds to at least one cryptographic key-based identity.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart of a method to manage access to encrypted data using a distributed ledger.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows how the secure file system can be integrated into an enterprise information technology (IT) infrastructure, according to one embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows how the secure file system can be integrated into an enterprise IT infrastructure, according to another embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>16</b>A</figref> shows how a clock can be implemented using a block chain.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>16</b>B</figref> shows contents of a clock block chain.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>17</b></figref> shows a cryptographic tree.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>18</b></figref> shows anatomy of a token.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>19</b></figref> shows a token preventing a replay attack.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>20</b></figref> shows how a recovery key can be used.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>21</b></figref> shows a split key system limiting an attack to the encrypted data when a user device is compromised.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>22</b></figref> shows an update to the interpretation of the semantics of a block chain.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a flowchart of a method to generate a token providing authorization credentials.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a flowchart of a method to create an attenuated token.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>25</b></figref> shows a Ground Station as a Service (GaaS) use case.</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>26</b></figref> shows a communications use case with a remotely deployed ground terminal.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>27</b></figref> shows a hosted payload use case.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIGS. <b>28</b>-<b>30</b></figref> show architectures of the system using a commercial satellite.</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>31</b></figref> shows a use of OrbitSecure protocol to ensure authority, identity, integrity, and confidentiality throughout the data lifecycle.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>32</b></figref> shows a logical view of the data flow through the system.</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>33</b></figref> shows a processing segment.</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>34</b></figref> shows a shared hybrid space architecture.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>35</b></figref> shows how an autonomous vehicle can be securely controlled using the disclosed system.</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>36</b></figref> is a flowchart of a method to encrypt communication between a terrestrial operator and an extraterrestrial object.</p><p id="p-0042" num="0041"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is a flowchart of a method to securely communicate between two communication endpoints.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>38</b></figref> is a diagrammatic representation of a machine in the example form of a computer system within which a set of instructions, for causing the machine to perform any one or more of the methodologies or modules discussed herein, may be executed.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><heading id="h-0007" level="2">Managing Group Authority and Access to Secure Data in a Decentralized Environment</heading><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows a system to manage group authority and access to cryptographically secure data in a decentralized environment. The server <b>100</b> is in communication with multiple devices <b>110</b>, <b>120</b>, <b>130</b>, <b>140</b>, <b>150</b>, also called endpoints. Each of the devices <b>110</b>-<b>150</b> can be associated with an entity or a user such as Alice, Bob, Carol, Dave, Ellen, respectively. Each user Alice-Ellen can have a unique cryptographic user identification (&#x201c;ID&#x201d;), as explained later in this application, and each device can have a unique cryptographic device ID. Each cryptographic user ID can have one or more cryptographic device IDs associated with it.</p><p id="p-0045" num="0044">The unique cryptographic user IDs can be separated into teams, such as team 1 and team 2 as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, Alice's, Bob's and Carol's cryptographic user IDs can be members of team 1, while Dave's and Ellen's cryptographic user IDs can be members of team 2, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Team 1 and team 2 can have mutually exclusive membership, as shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, or can have partially overlapping membership. The team membership can be recorded in a linear sequence, for example, a team linear sequence <b>160</b>, <b>170</b> (only one instance of a team linear sequence labeled for brevity). Each team 1, 2 can have one team linear sequence <b>160</b>, <b>170</b>, respectively. The linear sequence, such as the team linear sequence <b>160</b>, <b>170</b> and a space linear sequence <b>190</b>, <b>192</b>, <b>194</b>, is a cryptographic data structure akin to a ledger. Because the linear sequence can be distributed across multiple devices, each of which independently verifies the linear sequence, the linear sequence can represent a distributed ledger.</p><p id="p-0046" num="0045">Each team 1, 2 can have one or more spaces <b>180</b>, <b>182</b>, <b>184</b> (only one instance of a space labeled for brevity). Each space <b>180</b>, <b>182</b>, <b>184</b> can be a virtual compartment containing encrypted data and members having access to the encrypted data. A subset of team members can be included in one or more spaces <b>180</b>, <b>182</b>, <b>184</b> and given authority to access encrypted data associated with the one or more spaces <b>180</b>, <b>182</b>, <b>184</b>. For example, team 1 has space <b>180</b>, and all the team members Alice, Bob and Carol are invited to space <b>180</b>. In another example, team 2 has space <b>182</b> and <b>184</b>. Space <b>182</b> only has Dave as a member, while space <b>184</b> has both Dave and Ellen as members. Each space <b>180</b>, <b>182</b>, <b>184</b> can have encrypted data that can be made accessible only to the space members. Encrypted data can include content or data, or both. For example, encrypted data can include a file, a file system, a document, and/or messages such as instant messages, emails, chat messages, text messages, etc.</p><p id="p-0047" num="0046">In an example, only users Alice, Bob, Carol have authority to the encrypted data associated with space <b>180</b>. In another example, only user Dave has the authority to the encrypted data associated with the space <b>182</b>, while both users Dave and Ellen have the authority to access encrypted data associated with space <b>184</b>. Authority to the encrypted data can include permission to read, write, and/or modify the encrypted data. Access to encrypted data can be granted upon verifying that the cryptographic user ID requesting the access has the authority encompassing the access.</p><p id="p-0048" num="0047">For example, user Ellen's cryptographic user ID can have the authority to read the encrypted data. However, if user Ellen's cryptographic user ID requests to write to the encrypted data, user Ellen's cryptographic user ID will be denied the access to write to the encrypted data because user Ellen's cryptographic user ID lacks the authority. In other words, in the system disclosed here, the access to the encrypted data cannot exceed the authority associated with the encrypted data.</p><p id="p-0049" num="0048">In another embodiment, the teams 1, 2 do not exist, and the users can be grouped into one or more spaces <b>180</b>, <b>182</b>, <b>184</b>. To generate a space, a general pool of cryptographic user IDs that exist in the system can be searched to define the members of the space. The team linear sequence <b>160</b>, <b>170</b> can be integrated into the corresponding space linear sequence <b>190</b>, <b>192</b>, <b>194</b> (only one instance of a space linear sequence labeled for brevity). For example, the space linear sequence <b>190</b> can include the team linear sequence <b>160</b> and the space linear sequence <b>192</b>, the space linear sequence <b>192</b> can include the team linear sequence <b>170</b> and the space linear sequence <b>192</b>, while the space linear sequence <b>194</b> can include the team linear sequence <b>170</b> and the space or list <b>194</b>.</p><p id="p-0050" num="0049">A record of the authority associated with the encrypted data can be computed by combining the team linear sequence <b>160</b>, <b>170</b> and a corresponding space linear sequence <b>190</b>, <b>192</b>, <b>194</b>, as described further in this application. In addition to storing authority and membership, the space linear sequence <b>190</b>, <b>192</b>, <b>194</b> can also store the encrypted data and/or references to the encrypted data.</p><p id="p-0051" num="0050">A copy of the team linear sequence <b>160</b>, <b>170</b> and the space linear sequence <b>190</b>, <b>192</b>, <b>194</b> can be distributed to all the devices <b>110</b>-<b>160</b> whose cryptographic user IDs are members of the corresponding team and space as well as the server <b>100</b>. For example, devices <b>110</b>-<b>130</b> have a copy of the team linear sequence <b>160</b> and the space linear sequence <b>190</b> because the cryptographic user IDs associated with the devices <b>110</b>-<b>130</b> are members of team 2 and space <b>180</b>. In another example, device <b>140</b> has a copy of the team linear sequence <b>170</b> and space linear sequences <b>192</b> and <b>194</b>, because user Dave's cryptographic user ID associated with the device <b>140</b> is a member of team 2 and space <b>182</b>, <b>184</b>. In a third example, device <b>150</b> has a copy of the team linear sequence <b>170</b> and space linear sequence <b>194</b>, because user Ellen's cryptographic user ID associated with device <b>150</b> is a member of team 2 and space <b>184</b>.</p><p id="p-0052" num="0051">The metadata contained in the team linear sequence <b>160</b>, <b>170</b> and the space linear sequence <b>190</b>, <b>192</b>, <b>194</b> can be stored in plain text, while the remainder of the data can be encrypted. The metadata can include authority information, policy information, roles, etc., stored within the team linear sequence <b>160</b>, <b>170</b> and the space linear sequence <b>190</b>, <b>192</b>, <b>194</b>. The remainder of the data can include confidential data such as files, filesystems, messages, and/or other confidential data. For example, filenames can be a part of the confidential data if the encrypted data includes files and/or filesystems. The filesystems, files, and/or messages can only be accessed by knowing the encryption key used in encrypting the data. Even if an attacker were to successfully gain control of the encryption key, a user's private key, and/or authorized endpoint device, the compromise of the system would be limited.</p><p id="p-0053" num="0052">For example, if the attacker gains control of the encryption key associated with space <b>182</b>, the attacker would only be able to access confidential data within the space <b>182</b>, not the confidential data within spaces <b>184</b> and <b>180</b>. If an attacker obtains Ellen's private key, the attacker would only be able to access confidential data within the space <b>184</b>, and not spaces <b>180</b> and <b>182</b>. Thus, by compartmentalizing authority and access to spaces <b>180</b>, <b>182</b>, <b>184</b>, the breach of the system can be confined.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows a team linear sequence and a space linear sequence. A team linear sequence <b>200</b> can be used to track identities of team members and their authority in a team. A space linear sequence <b>210</b> can be used to form a secure compartment which can admit a subset of the team members. The secure compartments are used to manage data and negotiate shared keys among the space members. The team linear sequence <b>200</b> can be connected to a program <b>220</b> containing a system policy, as well as to a database <b>230</b> containing facts. The space linear sequence <b>210</b> can rely on the team linear sequence <b>200</b> to determine policy within the space. The space linear sequence <b>210</b> can be connected to a database <b>250</b> containing facts.</p><p id="p-0055" num="0054">The team linear sequence <b>200</b> and the space linear sequence <b>210</b> can each contain multiple blocks <b>205</b>, <b>207</b>, <b>209</b>, <b>215</b> (only 4 labeled for brevity). The initial block <b>205</b> of the team linear sequence <b>200</b> can define a policy for the team. A policy can specify a role and an authority associated with the role. For example, a policy can specify &#x201c;only administrators can create spaces within a team.&#x201d; A team policy can be obtained from a policy template stored in a policy database and/or can be modified when instantiating the first block <b>205</b>. Alternatively, the first block <b>205</b> can define the team policy without reference to the policy template. A policy program <b>220</b> can be shared between different teams. The different teams, however, can have different fact databases <b>230</b>. The team policy can also be modified by later blocks added to the team linear sequences <b>200</b>, if the team policy defining block <b>205</b> permits modification.</p><p id="p-0056" num="0055">The policy program <b>220</b> can store policy templates that can be included and/or modified as policy in the initial block <b>205</b>. The fact database <b>230</b> can contain unique key-value pairs that can define user and user authority within the system. For example, a key-value pair that can be added to the fact database <b>200</b> can be &#x201c;Alice-administrator&#x201d;, after a block that specifies that Alice is an administrator has been verified.</p><p id="p-0057" num="0056">Block <b>207</b> of the team linear sequence <b>200</b> can include a profile of the user that is a member of the team <b>200</b>. The user profile can include the user's identity <b>240</b> which can be represented by a cryptographic user ID, such as a public-key in an asymmetric cryptographic algorithm such as Rivest-Shamir-Adleman (RSA) or Diffie Hellman (DH). Only the user can be in possession of the private-key. The user profile can also include a cryptographic device ID <b>242</b>, <b>244</b> associated with all the devices that the user has approved.</p><p id="p-0058" num="0057">There are multiple ways that a device can be added to the system. For example, the user can approve the device by sending a request to add the device to the system, where the request is signed with a private key of the user. In another example, to approve a device, the user can perform a multi-step process. In the first step, the user can create a new set of device keys using the asymmetric cryptographic algorithm. In the second step, the user can sign the device keys with the user's private key and construct a device certificate containing the device public-key and the user's private key signatures. In the third step, the device can send a request, which includes the certificate from the second step, to be added to the team, where the request is signed using the device private key. The system can authenticate that a team member has made the request by verifying the request using the public-key of the user. The cryptographic device ID can be a cryptographic hash of the public-key of the asymmetric cryptographic algorithm, while the private-key can be known only to the device and can be used to authenticate actions performed by the device.</p><p id="p-0059" num="0058">Block <b>209</b> of the team linear sequence <b>200</b> can include an event such as addition of a new user, creation of the space linear sequences <b>210</b>, a change to policy <b>205</b>, removal of an existing user, and/or a change of role of a user.</p><p id="p-0060" num="0059">Block <b>215</b> of the space linear sequence <b>210</b> can include an event such as addition of a user to the space, addition of encrypted data to the space, removal of a user from space, etc. Each event <b>215</b> in the space linear sequence <b>210</b> complies with the policy defined in the team linear sequence <b>200</b>. In some embodiments, policy cannot be changed in the space linear sequence <b>210</b> and must be changed in the team linear sequence <b>200</b>. A team can have multiple spaces with different policies by defining multiple space types having different policies, and establishing the spaces corresponding to the different space types. For example, a space type can include an &#x201c;administrator space type&#x201d; where all users have administrator roles and administrators add and remove other users and can have read and write access to the encrypted data. In another example, the space type can include &#x201c;stratified space type&#x201d; where some users have administrator roles, and some users have user roles, and the administrator roles have more authority than the user roles. Events in the team linear sequence <b>210</b> that change authority of a user can be stored in the fact database <b>250</b>.</p><p id="p-0061" num="0060">User policy <b>205</b> can be defined to enable users matching certain attributes to only have access to the space linear sequence <b>210</b> and space encrypted data for a limited amount of time. The passage of time can be measured by an always increasing clock that can provide a timestamp <b>260</b>, <b>270</b>, <b>280</b>, <b>290</b> for each block <b>215</b> in the space linear sequence <b>210</b>. The timestamp <b>260</b> can, for example, state &#x201c;11:46 AM Nov. 21, 2019 (PST).&#x201d; In the space linear sequence <b>210</b>, the timestamp <b>260</b>, <b>270</b>, <b>280</b>, <b>290</b> is always increasing between subsequent blocks. To enable time-limited access to the space linear sequence <b>210</b> and associated encrypted data, the user policy <b>205</b> can state that &#x201c;user associated with profile <b>1</b> can have access to the linear sequence until Dec. 2, 2019.&#x201d;</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows the linear ordering between a team linear sequence and a space linear sequence. Because the policy at least partially defining authority is stored in the team linear sequence <b>310</b>, to compute an authority in a space linear sequence <b>300</b>, a reference to the team linear sequence <b>310</b> needs to be made.</p><p id="p-0063" num="0062">For example, in block <b>320</b> of the space linear sequence <b>300</b>, the user of the space requests to add another user. In block <b>330</b> of the team linear sequence <b>310</b>, the policy defined authority of the space user to add another space user, however in block <b>340</b> of the team linear sequence <b>310</b>, the policy was modified to prevent space users from adding others space users. To determine whether block <b>320</b> is valid and should be added to the space linear sequence <b>300</b>, the linear sequence of blocks <b>330</b>, <b>340</b> in the team linear sequence <b>310</b> and the blocks <b>320</b>, <b>350</b>, <b>360</b> in the space linear sequence <b>300</b> needs to be established.</p><p id="p-0064" num="0063">To establish the linear sequence, a temporal relationship <b>370</b>, <b>380</b>, <b>390</b> can be established between the blocks <b>320</b>, <b>350</b>, <b>360</b> in the space linear sequence <b>300</b> and the blocks <b>330</b>, <b>340</b> in the team linear sequence <b>310</b>. The temporal relationship <b>370</b>, <b>380</b>, <b>390</b> can include a pointer from the space block <b>320</b>, <b>350</b>, <b>360</b> to the team block which is the immediate predecessor or immediate successor of the space block <b>320</b>, <b>350</b>, <b>360</b>. In <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the temporal relationships <b>370</b>, <b>380</b>, <b>390</b> point from the space block <b>320</b>, <b>350</b>, <b>360</b> to the immediately preceding team block. For example, temporal relationship <b>370</b>, <b>380</b> indicates that the team block <b>330</b> is the immediate predecessor of space blocks <b>320</b>, <b>350</b>, meaning that space blocks <b>320</b>, <b>350</b> were created after the team block <b>330</b>, but before team block <b>340</b>. Similarly, the temporal relationship <b>290</b> indicates that space block <b>360</b> was created after team block <b>340</b>.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows anatomy of a block. The block <b>400</b>, <b>410</b>, can contain one or more events 1-6. The events 1-6 in blocks <b>400</b>, <b>410</b> can be atomic. Each event 1-6 is committed in a single block <b>400</b>, <b>410</b>.</p><p id="p-0066" num="0065">A transaction can include one or more events where the last event is signed. A transaction can be produced by a single client, such as client <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. When a transaction includes multiple events, such as transaction 1 containing events 1 and 2, the events can be ordered by the client prior to being sent to the server. The ordering of the events is indicated using arrows <b>420</b>, <b>430</b>, <b>440</b>, <b>450</b>. Upon receiving transactions 1-4 from multiple clients, the server can order transactions according to the order indicated by the arrows <b>420</b>, <b>430</b>, <b>440</b>, <b>450</b>.</p><p id="p-0067" num="0066">Events in a single transaction point to each other, and the last event is signed. For example, events 1 and 2 form a single transaction 1. Similarly, events 5 and 6 form a single transaction 4. The arrow <b>420</b> between event 3 and event 2, indicates that a server should commit event 3 to the linear sequence after event 1. Similarly, the arrow <b>430</b> between events 5 and 6 indicates that the server should commit the event 6 to the linear sequence after event 5.</p><p id="p-0068" num="0067">In an embodiment, events 1 and 2 come from a single client, while event 3 can come from the same client as events 1 and 2, or from a different client. Similarly, events 5 and 6 come from a single client, while event 4 can come from the same client or a different client. Further to this embodiment, there can be at least one and up to four clients creating transactions 1-4, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. For example, a single client can author transaction 1, including events 1 and 2. A second client can author transaction 2 including event 3. A third client can author transaction 3 including event 4, and a fourth client can author transaction 4 including events 5 and 6.</p><p id="p-0069" num="0068">In the case that more than one event, for example, events 1-3, need to be added in an atomic manner, the events 1-3 can be combined into a single block <b>400</b>, and the block <b>400</b> can be stored in the linear sequence. In the block <b>400</b>, <b>410</b>, only the last event, such as event 3, 6, respectively, can be signed and none of the events 1-3, 4-6 in the block <b>400</b>, <b>410</b> are valid unless they all appear in the intended order in the intended block.</p><p id="p-0070" num="0069">The events 1-6 in blocks <b>400</b>, <b>410</b> are cryptographically signed and recorded in an authenticated linear sequence, as explained in this application. The structure of the linear sequences guarantees that devices <b>110</b>-<b>160</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, which accept a block with some index n, are certain to agree on the contents of all blocks with an index less than n. Blocks <b>400</b>, <b>410</b> have indices <b>1</b>, <b>2</b>, respectively, in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0071" num="0070">Once the block <b>400</b>, <b>410</b> is finalized, the block <b>400</b>, <b>410</b> gains a block ID. Finalizing a block means committing a block to a durable storage and not changing the block. A block ID is a tuple of the block's index, and the cryptographic hash of its contents. For a given block n, all events intended to be added to the linear sequence in block n+1 can include block ID of block n. This ensures that the intended ordering of events of devices <b>110</b>-<b>160</b> is preserved. Additionally, only devices which agree on the block order and contents of blocks 0 through n, can accept an event in block n+1.</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows verification of various layers of policies that can exist within the system. An events <b>500</b> is processed using a formal policy which may either reject an event <b>500</b> or accept an event <b>500</b>, and optionally update a database of facts <b>510</b>, <b>520</b>. A fact database <b>510</b>, <b>520</b> is an index over the linear sequence with respect to the policy. The index is a collection of key value pairs. For example, the fact database <b>510</b>, <b>520</b> can record facts generated by the event <b>500</b> and the policy rule which authorized it. The fact database <b>510</b>, <b>520</b> can be read by a policy pressor when deciding if the event <b>500</b> is valid and should be accepted in the linear sequence, such as a team linear sequence, or a space linear sequence.</p><p id="p-0073" num="0072">When a server <b>100</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> receives the event <b>500</b>, the server can include the event <b>500</b> in the next block. When the device <b>110</b>-<b>160</b> receives the event <b>500</b>, the device can process the event <b>500</b> based on the business needs.</p><p id="p-0074" num="0073">The system policy <b>530</b> is implemented by the device <b>110</b>-<b>160</b> and server <b>100</b>. All cooperating devices <b>110</b>-<b>160</b> must use the same system policy <b>530</b> when processing the same block. In one embodiment, system policy <b>530</b> can be implemented as source code in a programming language such as Rust, Python, Go, or a proprietary policy language. The system policy <b>530</b> describes the structure of the blocks themselves. The system policy <b>530</b> describes the core protocol of the linear sequences, such as &#x201c;all events in block n must reference block n&#x2212;1.&#x201d;</p><p id="p-0075" num="0074">The user policy <b>540</b> can be the team policy <b>205</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The team policy <b>205</b> can be provided by a customer and can be tailored to the customer's organization. To ensure that all parties agree on the user policy <b>540</b>, the user policy <b>540</b> can be stored in the linear sequence, such as the team linear sequence <b>310</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and is guaranteed to be the same for all users cooperating on a particular linear sequence. An example of a team policy rule is &#x201c;only team admins can add new members to a team.&#x201d;</p><p id="p-0076" num="0075">The application policy <b>550</b> can be defined per team <b>160</b>, <b>170</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The key difference between the application policy and other policies is that the application policy operates after any cyphertext has been decrypted. Consequently, the application policy cannot be checked by the server. The application policy may not record authority, and can specify low level rules such as &#x201c;two files cannot have the same name.&#x201d; The application policy <b>550</b> can encode rules to resolve low-level conflicts such as &#x201c;if two files have the same name, the second file is ignored.&#x201d; Policies, including the system policy <b>530</b>, the user policy <b>540</b> and/or the application policy <b>550</b>, can be fixed in the program or managed using the linear sequences, such as team linear sequence <b>200</b> and space linear sequence <b>210</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows various cryptographic IDs that can exist within the system. Identities form the foundation of the security. Identities are represented by cryptographic identification (ID), such as asymmetric key pairs generated off-line using RSA, DH or other asymmetric algorithms. The public-key from the asymmetric key pair is used as the cryptographic identity of the entity, while the private-key from the asymmetric key pair is known only to the entity. The off-line generation of the root asymmetric key pairs protects the key pair from being compromised by a bad actor. Device keys can be generated online but may be stored in a hardware security module (HSM).</p><p id="p-0078" num="0077">A cryptographic ID, such as a cryptographic device ID or cryptographic user ID, represents a single entity in the system, such as a device or a user, respectively. Consequently, the identity established using the cryptographic ID is globally distinct. In an embodiment, users are unique across teams even if no administrators distinguish them. Even between non-cooperating groups, such as teams that do not share any members, the identity established using the cryptographic ID remains globally distinct.</p><p id="p-0079" num="0078">The cryptographic user IDs can be used to sign/authorize device keys which are used operationally in the system. Devices can use cryptographic device IDs, which can include three keys types: administrative signing keys, message signing keys, and device encryption key. All of these key types are asymmetric key pairs and can be managed outside of the application, in an operating system (OS) keys store or a hardware security module (HSM).</p><p id="p-0080" num="0079">The identity certificate <b>600</b> can be deterministically generated from a recovery secret, allowing efficient hand transcription of the recovery secret when provisioning a new device.</p><p id="p-0081" num="0080">The administrative signing key <b>610</b> can be used in high-risk operations and can require proof of user presence for any signing request. Examples of the high-risk operations are adding users or changing permissions.</p><p id="p-0082" num="0081">The message signing key <b>620</b> can be used to sign most data transmitted by the device <b>110</b>-<b>160</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and does not require proof of presence. An example use of the message signing key <b>620</b> is to sign messages sent in a chat, or to sign files to be uploaded.</p><p id="p-0083" num="0082">The device encryption key <b>630</b> can be used when sending a confidential message to the device is necessary. The device encryption key <b>630</b> can be rotated often to provide for forward secrecy for device to device communications.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows how a block can be distributed to multiple devices. Devices <b>700</b>, <b>710</b>, <b>720</b> can belong to the same space and/or team. They all can have a copy of the linear sequence <b>730</b>. When one of the devices, such as device <b>700</b>, adds a new block <b>740</b> to the linear sequence <b>700</b>, the device <b>700</b> sends the new block <b>740</b> to the server <b>750</b>.</p><p id="p-0085" num="0084">The server <b>750</b> also has a copy of the linear sequence <b>730</b>. The server <b>750</b> can compute whether the block <b>740</b> is valid by computing whether the user has the authority to perform the operation represented in the block <b>740</b>. To determine whether the user has the authority, the server <b>750</b> can compute the authority from the linear sequence <b>730</b>. The authority computation is explained below.</p><p id="p-0086" num="0085">Once the server <b>750</b> verifies that the block is valid, the server can distribute the block <b>740</b> to the devices <b>710</b>, <b>720</b>, which in turn can also compute whether the block <b>740</b> is valid based on the authority recorded in the linear sequence <b>730</b>. If the device <b>710</b>, <b>720</b> determines that the block is not valid, the device can shut down because likely a breach of the system has occurred.</p><p id="p-0087" num="0086">The devices <b>700</b>, <b>710</b>, <b>720</b> can share encrypted data <b>760</b>, if they are in the same space. The encrypted data <b>760</b> is encrypted using at least one cryptographic key, such as a confidential session key, explained below. Different devices <b>700</b>, <b>710</b>, <b>720</b> can have different authority to the encrypted data <b>760</b> such as read-only, write-only, and read and write authority.</p><p id="p-0088" num="0087">The server <b>750</b> can also store the encrypted confidential data <b>760</b>, however the server <b>750</b> does not store any of the cryptographic keys, including the confidential session key. The server <b>750</b> does not have any authority to the encrypted data <b>760</b>. The server <b>750</b> has a copy of the encrypted data <b>750</b> to ensure availability of the data. For example, if the devices <b>700</b>, <b>710</b> are off-line, and the device <b>720</b>, as a newly added member of the space, requests the encrypted confidential data <b>760</b>, the server <b>750</b> can provide the encrypted confidential data <b>760</b> to the device <b>720</b>, even if the devices <b>700</b>, <b>710</b> are off-line.</p><p id="p-0089" num="0088"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows a linear sequence containing blocks. The linear sequence <b>800</b> contains at least blocks <b>810</b>, <b>820</b>, <b>830</b>. Block <b>810</b> contains multiple events <b>812</b>, <b>814</b>, while block <b>820</b> contains events <b>822</b>, <b>824</b>. Block <b>810</b> is the initial block in the linear sequence <b>800</b> and contains the policy <b>816</b> defining authority for the linear sequence <b>800</b>. Each event in the subsequent blocks, such as block <b>820</b>, can be verified to ensure that the event <b>822</b>, <b>824</b> is consistent with the policy <b>816</b>.</p><p id="p-0090" num="0089">Each block subsequent to the initial block, such as block <b>820</b>, includes the cryptographic hash <b>826</b> of the previous block, which for block <b>820</b> would be the hash of block <b>810</b>. By including the cryptographic hash of the previous block, the ordering of the blocks in the linear sequence <b>800</b> can be guaranteed, and a reordering or editing of existing blocks, and/or an insertion of new blocks within the linear sequence <b>800</b> can be detected and automatically rejected.</p><p id="p-0091" num="0090">The linear sequence <b>800</b> does not require a proof of work to verify the validity of the block, because the linear sequence <b>800</b> is a linear sequence, without any branching. Further, when a block is added to the list, the block's validity has been checked to comply with the policy and authority recorded in the linear sequence <b>800</b>, and the block cannot be deleted. In other words, the order list <b>800</b> cannot be rolled back.</p><p id="p-0092" num="0091">Within the initial block <b>810</b>, event <b>812</b> establishes Alice as the user. The event is signed by Alice, meaning that Alice uses her private-key to encrypt the statement &#x201c;Alice is a user.&#x201d; To verify that Alice is truly requesting to be established as a user, a processor can verify the signed statement &#x201c;Alice is a user,&#x201d; using Alice's public-key and if verification succeeded the processor can know that Alice has truly requested to establish the user.</p><p id="p-0093" num="0092">Event <b>814</b> establishes Alice as an administrator. Similarly, the event is signed and the processor can verify Alice's identity, as explained above. Because block <b>810</b> is the initial block, the policy <b>816</b> for the linear sequence is established. For example, policy <b>816</b> can state &#x201c;only administrators can add users.&#x201d; Once block <b>810</b> has been committed to the linear sequence <b>800</b>, the effective roles of the system are that Alice is an administrator and Alice is a user.</p><p id="p-0094" num="0093">Event <b>822</b> in block <b>820</b> establishes that Bob is a user. To compute whether Alice has the authority to add the user, the processor can check the policy <b>816</b> and Alice's role in the system established by events <b>812</b>, <b>814</b>. Because the policy specifies that only administrators can add users, the processor checks whether Alice is an administrator. Upon verifying that Alice is an administrator, the processor can verify that Alice has the authority to add Bob as a user. Each event subsequent to the events contained in the initial block <b>812</b>, <b>814</b>, can be checked against the policy <b>816</b>, and the policy authorizing the event can be recorded. For example, for event <b>822</b>, block <b>820</b> can point to the policy stating that &#x201c;only administrators can add users,&#x201d; and a processor can check that there is a fact stored in a fact database that &#x201c;Alice is an administrator.&#x201d;</p><p id="p-0095" num="0094">Event <b>824</b> adds Carol as a user and must also be signed by Alice, as explained above. Event <b>822</b> can also point to the policy that authorized the event, namely the policy stating &#x201c;only administrators can add users&#x201d; which is supported by the fact that &#x201c;Alice is an administrator.&#x201d; The hash <b>826</b> creates a linear sequence of blocks <b>810</b>, <b>820</b>. After block <b>820</b> has been committed to the linear sequence <b>800</b>, the effective roles in the system are that Alice is an administrator, and Alice, Bob, and Carol are users.</p><p id="p-0096" num="0095">Other roles can be defined within the team such as legal, technical, sales etc. Each role can be granted access to a corresponding space type. For example, if Alice has role of &#x201c;legal,&#x201d; Alice can be granted access to all spaces that have type &#x201c;legal.&#x201d; If Alice's &#x201c;legal&#x201d; role is revoked, Alice can automatically lose access to the spaces that have type &#x201c;legal.&#x201d;</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a team linear sequence and a space linear sequence. In this example, the team linear sequence <b>900</b> and the block linear sequence contain blocks that include only one event. The team linear sequence <b>900</b> is initialized with the initial block <b>910</b> and using connection <b>915</b> linked to the policy <b>920</b>, which establishes the policy for the team and any spaces. In block <b>930</b>, Alice adds Bob as a user, and this event can be linked, using connection <b>935</b>, to the policy <b>920</b> that authorizes it.</p><p id="p-0098" num="0097">In block <b>940</b>, Bob creates space &#x201c;planning,&#x201d; and the event is linked to the policy <b>920</b> to ensure that Bob as the user has the authority to create a space. By default, only the creator of the space is granted administrative authority to the space on the space linear sequence <b>970</b>. If policy <b>920</b> authorizes users to create spaces, the block <b>930</b> is validated, the event is linked using connection <b>945</b> to the policy <b>920</b>, and the block <b>940</b> is added to the team linear sequence <b>900</b>. When Bob creates space &#x201c;planning,&#x201d; space linear sequence <b>970</b> is established, with the initial block <b>980</b> pointing to block <b>940</b> to indicate that the list was created after block <b>940</b>, but before block <b>950</b>, explained below.</p><p id="p-0099" num="0098">In block <b>950</b>, Alice limits space creation to administrators. This action changes the policy <b>920</b>. To verify whether block <b>950</b> is valid, a processor needs to check the policy <b>920</b> to see if the policy allows administrators to modify the policy. If the policy <b>920</b> allows administrators to modify the policy, the event is linked, using connection <b>955</b>, to a portion of policy <b>920</b> that allows administrators to modify the policy, and the new policy <b>925</b> is established. Even though after block <b>950</b>, Bob cannot create a space, because Bob had the authority in block <b>942</b> to create the space, the space that Bob created is valid. In block <b>960</b>, Alice adds Carol, and the event is checked against the new policy <b>925</b>. Once the event is approved as authorized by the new policy <b>925</b>, the connection <b>965</b> is established to that portion of the new policy <b>925</b> that authorizes the event.</p><p id="p-0100" num="0099">In block <b>990</b> of the space linear sequence <b>970</b>, Bob adds Carol as a user. To verify whether block <b>990</b> is valid, the processor needs to check the new policy <b>925</b> to see if policy <b>925</b> allows space users to add other space users. The policy <b>925</b> allows users to add users, and the event is linked, using connection <b>995</b>, to a portion of the policy <b>925</b> that authorizes the event.</p><p id="p-0101" num="0100">As explained earlier, only team members can be added to the space. If Bob attempts to add Carol prior to the block <b>950</b>, the processor would not authorize the addition of the block <b>990</b>, because after checking the fact base and/or the team linear sequence <b>900</b>, the processor can determine that Carol is not a member of the team. However, if Bob attempts to add Carol to the space linear sequence <b>970</b> after block <b>960</b>, the processor will authorize the addition of block <b>990</b>, because the policy allows space users to add space users, and because Carol is a member of the team.</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIGS. <b>10</b>A-B</figref> show authority computation in case a malicious actor tries to infiltrate the system. This example illustrates how a compromise of the server <b>1000</b> does not compromise the devices <b>1010</b>, <b>1020</b>, <b>1030</b> because each device <b>1010</b>-<b>1030</b> independently checks and guarantees a validity of the linear sequence <b>1040</b> and the authority recorded in the linear sequence <b>1040</b>.</p><p id="p-0103" num="0102">If the server <b>1000</b> is compromised, for example, by a malicious server administrator who coerces the server <b>1000</b> into incorrectly verifying and distributing a fraudulent block <b>1050</b> to the devices <b>1010</b>-<b>1030</b>, each device <b>1010</b>-<b>1030</b> can independently verify the validity of the block <b>1050</b>.</p><p id="p-0104" num="0103">In <figref idref="DRAWINGS">FIG. <b>10</b>B</figref>, each device <b>1010</b>-<b>1030</b> can independently verify that the hash <b>1060</b> of the last block in the linear sequence <b>1040</b> is valid. Each device <b>1010</b>-<b>1030</b> can verify that user is a valid role. Each device <b>1010</b>-<b>1030</b> can verify that Mal's signature is valid because, prior to submitting block <b>1050</b>, Mal has requested that the server <b>1000</b> generate a public-key and a private-key for him and distribute the public-keys to the devices <b>1010</b>-<b>1030</b>. However, the device <b>1010</b>-<b>1030</b> can determine that block <b>1050</b> is not valid because, according to system policy, only existing members, such as administrators or users, can add new users, and Mal is not an administrator or a user. Because the block <b>1050</b> does not satisfy policy, all the devices <b>1010</b>-<b>1030</b> can reject the block <b>1050</b>. In addition, the devices <b>1010</b>-<b>1030</b> can shut down once an invalid transaction is received from the server <b>1000</b>, because the devices <b>1010</b>-<b>1030</b> can conclude that the server <b>1000</b> has been compromised.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>11</b>A-C</figref> show how access to encrypted data can be controlled upon authority revocation. Devices <b>1100</b>, <b>1110</b>, <b>1120</b> can share encrypted data <b>1130</b>, by, for example, being part of the same space. The encrypted data <b>1130</b> can be encrypted using an Advanced Encryption Standard (AES), a symmetric-key algorithm using the same key for both encrypting and decrypting the data. The encrypted confidential data <b>1130</b> can be stored on the devices <b>1100</b>-<b>1120</b> and the server <b>1140</b>. The AES key can be known only to the devices <b>1100</b>-<b>1120</b> that have the authority to access the encrypted data <b>1130</b>.</p><p id="p-0106" num="0105">Assuming Alice is an administrator and has the authority to remove users, Alice can submit a block <b>1150</b> to the server, that states &#x201c;Carol is not a user,&#x201d; thus revoking Carol's authority to any future encrypted data shared between Alice and Bob. The server <b>1140</b> can distribute the block <b>1150</b> to all the devices <b>1110</b>-<b>1120</b>, as seen in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>.</p><p id="p-0107" num="0106">Upon validation of the block <b>1150</b>, by the devices <b>1110</b>-<b>1120</b>, Carol and her device <b>1120</b> lose the authority to access any future encrypted data. To ensure that Carol and her device <b>1120</b> cannot access any future encrypted data shared between Alice and Bob, devices <b>1100</b>, <b>1110</b> generate a new channel session key.</p><p id="p-0108" num="0107">The new channel session key can be generated using the cryptographic methods such as elliptic curve cryptography, for example, using a P-384 elliptic curve. The channel session key can be generated using secret key generation materials <b>1170</b>, such as domain parameters in the case of elliptic curve cryptography. The domain parameters can include the constants A, B defining the elliptic curve Y<sup>2</sup>=X<sup>3</sup>+AX+B.</p><p id="p-0109" num="0108">The new group of devices that share the key is computed based on the linear sequence <b>1160</b>. The secret key generation material <b>1170</b> is encrypted using each of the public-keys of an asymmetric cryptographic algorithm belonging to the devices remaining in the new group of devices. The encrypted secret key generation materials <b>1170</b> are distributed to all the devices in the group. The devices <b>1100</b>, <b>1110</b> can use their own private-keys of the asymmetric cryptographic algorithm to decrypt the received encrypted message. As a result, only devices <b>1100</b>, <b>1110</b> having the private key corresponding to the public-key used in encryption can calculate the new channel session key.</p><p id="p-0110" num="0109">Devices <b>1100</b>, <b>1110</b> receiving the secret key generation materials <b>1170</b> can compute a private portion <b>1172</b> of the channel session key and a public portion <b>1174</b> of the channel session key, and can record the public portion <b>1174</b> of the channel session key to the linear sequence <b>1160</b>. As a result of committing the public portion <b>1174</b> of the channel session key to the linear sequence <b>1160</b>, a client having an access to the linear sequence <b>1160</b> can access the public portion <b>1174</b> and have write-only access to the linear sequence <b>1160</b>. The client cannot read any of the encrypted data associated with the linear sequence <b>1160</b>, because the client does not have the secret key generation materials <b>1170</b> and/or the private portion <b>1172</b> of the channel session key. The private portion <b>1172</b> of the channel session key is not recorded in the linear sequence <b>1160</b>.</p><p id="p-0111" num="0110">Because the linear sequence <b>1160</b> does not require proof of work, and duplicating the linear sequence <b>1160</b> can be computationally feasible, a compromised server <b>1140</b> can present two different linear sequences <b>1162</b>, <b>1164</b> to two groups of users, as seen in <figref idref="DRAWINGS">FIG. <b>11</b>C</figref>. For example, the compromised server <b>1140</b> can refuse to distribute block <b>1150</b> to device <b>1120</b>, thus leading the device <b>1120</b> to believe it is still in the group and to attempt to share encrypted data <b>1190</b> of device <b>1120</b> with devices <b>1100</b> and <b>1110</b>. Consequently, a new channel session key <b>1180</b> can be computed based on the hash of the last block <b>1150</b> in the linear sequence <b>1160</b>. For example, the new channel session key <b>1180</b> can be obtained by performing HKDF (channel session key in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>, hash of block <b>1150</b>). As a result, since devices <b>1100</b> and <b>1110</b> do not share the same last block with the device <b>1120</b>, device <b>1120</b> cannot compute the same channel session key <b>1180</b>.</p><p id="p-0112" num="0111">In addition to the users of the same space Alice and Bob, a guest user can be temporarily granted access to the encrypted data contained in the same space as Alice and Bob. The guest user does not have access to the team linear sequence <b>1160</b> and cannot validate authority of a user within the space linear sequence <b>1160</b>. However, the guest user can still negotiate a channel session key with Alice and Bob and be granted a temporary access to the encrypted data <b>1130</b>.</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart of a method to manage, via a distributed ledger, authority separately from access to encrypted data by one or more trusted devices, wherein each of the trusted devices corresponds to at least one cryptographic key-based identity. In step <b>1200</b>, a processor can create a block defining an authority of a user. The block can include a cryptographic user ID uniquely identifying the user and an authority associated with the cryptographic user ID. The authority can define at least an operation associated with the cryptographic user ID to perform on the encrypted data. The operation can include read-only, write-only, or read and write. Unlike a bitcoin ledger which requires approval to work, the block does not require an entry approving work, thus generation of the block is less processor intensive compared to bitcoin, which, on average, requires 10 minutes of processor time to generate a proof of work for the block.</p><p id="p-0114" num="0113">In step <b>1210</b>, the processor can append the block to an end of a linear sequence, including multiple blocks defining an authority associated with the encrypted data, and preserves a membership and an ordering of each block in the multiple blocks. To preserve the membership of the block, no block in the linear sequence can be deleted. In other words, deletion is not allowed operation on the linear sequence. To preserve ordering of each block among multiple blocks, rollbacks are not an allowed operation of the linear sequence. In other words, the linear sequence cannot branch, and contents of a block in the linear sequence cannot be modified and/or edited once the block is added to the linear sequence. The prohibition of deletion and modification of blocks ensures integrity of the linear sequence. In other words, once a block is added to the linear sequence, the block is permanently in the linear sequence. Further, before a block is added to the linear sequence, the contents of the block must be verified to ensure they are consistent with the preceding blocks in the linear sequence.</p><p id="p-0115" num="0114">In step <b>1220</b>, the processor can receive a request to access the encrypted data. The request can include a cryptographic user ID associated with the user making the request. Access to the encrypted data can include read-only, write-only, or both read and write access.</p><p id="p-0116" num="0115">In step <b>1230</b>, the processor can determine whether the user making the request has an authority to access the encrypted data by computing the authority recorded in the linear sequence as shown in <figref idref="DRAWINGS">FIGS. <b>8</b>, <b>9</b>, and <b>10</b>A</figref>-B. To compute the authority, the processor can check the linear sequence from an initial block to a last block to determine user roles and authority associated with each role, and to compare the request from the user to the user role. In other words, the processor can manage access to the encrypted data by the cryptographic user ID by checking that the access by the cryptographic user ID is permitted by the authority recorded in the linear sequence.</p><p id="p-0117" num="0116">In step <b>1240</b>, the processor can grant access to the encrypted data to the user making the request upon determining that the user making the request has the authority to access the encrypted data.</p><p id="p-0118" num="0117">The processor can create an initial block in the linear sequence defining a policy specifying a role and an authority associated with the role. For example, the initial block <b>810</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref> defines policy <b>816</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. Further, the processor can create the block in the linear sequence defining a role associated with the cryptographic user ID. The block can be the initial block <b>810</b>, as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref> which, in addition to defining policy, defines that Alice is an administrator in event <b>814</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, or the block can be a subsequent block, such as block <b>820</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, which defines Bob and Carol as users.</p><p id="p-0119" num="0118">To preserve the ordering of each block in the multiple blocks, the processor can include a cryptographic hash (&#x201c;hash&#x201d;) of each previous block in each subsequent block, thus enabling detection of any change in the ordering sequence, as explained in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. For example, the processor can compute a second cryptographic hash of data contained in a second block in the multiple blocks. The second block can be the initial block, or any block, in the linear sequence. The processor can store the second cryptographic hash within the second block, and can include the second cryptographic hash in data contained in a block subsequent to the second block.</p><p id="p-0120" num="0119">To preserve the membership of blocks within the linear sequence, the processor can define a set of operations to be performed on the linear sequence, where any operation outside of the defined set cannot be performed in the linear sequence. The defined set can exclude operations such as deletion, branching of the linear sequence, and/or modification of data within the linear sequence.</p><p id="p-0121" num="0120">To reduce the likelihood of a failure, such as corrupting the linear sequence and/or the encrypted data by a compromised central server, the processor can distribute the linear sequence to multiple devices. Each device in the multiple devices can be cryptographically verified by a cryptographic user ID associated with the linear sequence, as explained in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. For example, to add a device to the list of authorized devices, an already authorized cryptographic user ID needs to request access for the device, as explained in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Upon receiving the request, the processor can verify that the cryptographic user ID indeed made the request by decrypting the request using the public-key of the cryptographic user ID. Upon verification, the processor can assign a cryptographic device ID to the device.</p><p id="p-0122" num="0121">Each device among the multiple devices having the cryptographic device ID can independently verify the validity of a request based on the authority computed based on the linear sequence, as explained in <figref idref="DRAWINGS">FIGS. <b>10</b>A-B</figref>. If a device cannot verify that the block is valid based on the computed authority, the device can refuse to add the block. Upon failure to verify, the device can shut down to prevent tampering with the encrypted data on the device.</p><p id="p-0123" num="0122">The processor can define a team of cryptographic user IDs, for efficiency purposes, so that not all the cryptographic IDs have to be searched to find a group of people who can share encrypted data amongst themselves. To create the team, the processor can create a team linear sequence including multiple blocks. The multiple blocks can include one or more policy blocks, one or more profile blocks, and one or more authority blocks. The one or more policy blocks can define a policy establishing a role and an authority associated with the role, the one or more profile blocks can establish a cryptographic user ID and a cryptographic device ID associated with the cryptographic user ID, and the one or more authority blocks can define the role associated with the cryptographic user ID. The team linear sequence is an instance of, and has the same properties as, the linear sequence described in this application.</p><p id="p-0124" num="0123">The policy recorded in the initial block of a linear sequence, such as the team linear sequence, can be modified if the policy recorded in the initial block permits modification. If the policy recorded in the initial block does not permit modification, any block attempting to modify the policy will not be verified by the multiple devices.</p><p id="p-0125" num="0124">To modify the policy, the processor can obtain a request to modify the policy defined in the one or more policy blocks and a cryptographic ID of a user making the request. The processor can check whether the cryptographic user ID is authorized to modify the policy by determining authority associated with the cryptographic ID from the team linear sequence. Usually only administrators are allowed to modify the policy, and the processor can check whether the cryptographic user ID has a role of an administrator or a user. If the cryptographic user ID has the role of a user, the processor can refuse to verify the block. Upon determining that the cryptographic user ID is authorized, the processor can create a policy block specifying the modification and can append the policy block defining the modification to the end of the team linear sequence.</p><p id="p-0126" num="0125">Once the processor defines the team, the processor can define a space within the team, which has a subset of the team members that can privately share encrypted data. The space membership can be the same as the team membership or can be smaller than the team membership. The space is a virtual compartment defining encrypted data and access to the encrypted data. The space can include the encrypted data using a cryptographic key known only to the members of the space.</p><p id="p-0127" num="0126">To define the space the processor can represent the members and the encrypted data by creating a space linear sequence. For efficiency, the space linear sequence can be subdivided into multiple linear sequences. For example, the space linear sequence can be subdivided into an authority linear sequence, and the encrypted data linear sequence. The authority linear sequence can define a role within the space of the cryptographic user ID. The cryptographic user ID is a member of the space and the role is consistent with the policy defined in the one or more policy blocks of the team. The encrypted data linear sequence can record operations performed on the encrypted data such as addition, deletion or modification of at least a portion of the encrypted data.</p><p id="p-0128" num="0127">The encrypted data can include multiple types of encrypted data such as files, emails, messages, etc. The processor can create a linear sequence for each of the encrypted data types. So, instead of creating one encrypted data linear sequence, the processor can create a linear sequence for the files, a linear sequence for the emails and a linear sequence for the messages.</p><p id="p-0129" num="0128">By creating a separate linear sequences for authority and for each type of encrypted data, the processor can speed up the computation of authority because to compute the authority, the processor need only examine the linear sequence of blocks containing data pertaining to authority, as opposed to examining linear sequence containing authority blocks as well as encrypted data blocks. Assuming that there are as many authority blocks as encrypted data blocks, by splitting up the space linear list into the authority linear list and encrypted data linear list, the processor can speed up the computation of authority by a factor of two. Similarly, the processor can speed up retrieval of encrypted data by approximately a factor of 2, because to retrieve the encrypted data, the processor need only examine the encrypted data linear sequence, as opposed to linear sequence containing both encrypted data blocks and the authority blocks.</p><p id="p-0130" num="0129">The processor can revoke membership of a cryptographic user ID associated with the space. When membership is revoked, the cryptographic user ID must be prevented from accessing and encrypted data shared within the space after the revocation of cryptographic user IDs membership. To prevent the cryptographic user ID from accessing encrypted data added to the space after the revocation, the processor can generate a cryptographic session key unknown to the cryptographic user ID whose membership has been revoked, and can encrypt the encrypted data added to the space after the revocation using the cryptographic session key. The data contained in space prior to the revocation can also be encrypted using the new cryptographic session key.</p><p id="p-0131" num="0130">The new cryptographic session key can be an AES key computed using the following 4 steps. In step 1, the AES key can be computed using elliptic curve algorithm such as P-384. In step 2, the remaining group of devices is computed from the space linear sequence, for example, the authority linear sequence within the space. In step 3, the AES key is encrypted using a public device key of each device still in the space, and the encrypted AES key is distributed to each device within the space. Each device can decrypt encrypted AES key because each device knows its own private device key. Since no other devices know the private-key of the device, no eavesdroppers can decrypt the encrypted AES key. In step 4, a message encrypted using the AES key can be distributed to the devices within the space to ensure that everybody can decrypt the message.</p><p id="p-0132" num="0131">In some instances, such as described in <figref idref="DRAWINGS">FIG. <b>11</b></figref> C, the computation of the session key can include an additional step performed before step 3, in which the computation of the session key also includes a cryptographic hash of the last block in the space linear sequence, such as the authority linear sequence of the space. Specifically, once the AES key is computed in step 1, to generate the final key an additional step of combining the AES key and the cryptographic hash of the last block can be performed. The combination can be computed using the HKDF cryptographic function which takes his arguments the AES key and the cryptographic hash of the last block to produce the final key. The final key is then encrypted and distributed to all the devices.</p><p id="p-0133" num="0132">In addition to computing the new session key once a member is removed from the list, the new session key can be computed when a new member is added, and the intent is to prevent the member from accessing the encrypted data shared within the space prior to the member joining.</p><p id="p-0134" num="0133">The processor can enable a linear ordering of the team linear sequence in the space linear sequence by establishing a temporal relationship between multiple team blocks belonging to the team linear sequence and multiple space blocks belonging to the space linear sequence, as explained in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. There can be various types of temporal relationships, such as a space block can be bound to a team block immediately preceding the space block, or the space block can be bound to a team block immediately succeeding the space block, etc. Establishing the linear order is important in authority computation as well as auditing.</p><p id="p-0135" num="0134">For example, to determine the authority, reference needs to be made to the current policy defined in the team space at a time prior to the addition of the block. In another example, when performing auditing of the linear sequences, to determine whether a block was correctly added to a space linear sequence, the current authority needs to be computed which can be partially defined on the team linear sequence. To determine the current policy, a linear order of the blocks within the space linear sequence and the team linear sequence needs to be determined, so that the authority recorded in the team list prior to addition of a block can be computed.</p><p id="p-0136" num="0135">Consequently, every time a block is added to the space linear sequence, the block is bound to the team linear sequence to determine the linear order between the team linear sequence and the space linear sequence. The linear order between two space linear sequences does not need to be established because the authority within the one space linear sequence does not affect the authority within the other space linear sequence.</p><p id="p-0137" num="0136"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart of a method to manage access to encrypted data using a distributed ledger. In step <b>1300</b>, a processor can manage access to the encrypted data by checking that the access is permitted by an authority recorded in a linear sequence including multiple blocks arranged, where an initial block in the linear sequence defines a policy specifying a role and an authority associated with the role.</p><p id="p-0138" num="0137">In step <b>1310</b>, the processor can preserve a validity of the authority recorded in the linear sequence by cryptographically identifying a user associated with the linear sequence, thus preventing an authorized user from accessing the linear sequence. Prior to adding a block associated with a user authority to the multiple blocks, the processor can check the linear sequence to ensure the user authority is consistent with the policy. Upon ensuring that the user authority is consistent with the policy, the processor can add the block associated with the user authority to the multiple blocks.</p><p id="p-0139" num="0138">The processor can determine a user role associated with the user, an authority associated with the user role and can ensure the user authority associated with the block is within the limits of the authority associated with the user role.</p><p id="p-0140" num="0139">For example, a block to be added to the sequence can request a modification of the policy. Prior to adding the block to the sequence, the processor can check whether the policy permits verification, and what role can modify the policy. For example, the policy can state that the policy can be modified but that only an administrator can modify the policy. If that is the case, the processor can check whether the user requesting modification is an administrator or not.</p><p id="p-0141" num="0140">To prevent unauthorized access to the data by a compromised central server, the processor can distribute a linear sequence to multiple devices associated with multiple users, wherein each device in the multiple devices is cryptographically authenticated by a user in the multiple users. The determination whether to add a block to the linear sequence can be made independently by each of the devices, instead of being made by the central server, which creates a single point of failure.</p><p id="p-0142" num="0141">The processor can authenticate each user using a cryptographic user ID, which can be a public-key generated using an asymmetric cryptographic algorithm. The cryptographic user ID can be a string of 2,048 bits. The asymmetric cryptographic algorithm can be RSA or DH, and can generate two keys, a public-key and a private-key. The processor can provide a first key (i.e., the private-key) in the asymmetric cryptographic key pair only to the user, and the cryptographic user ID (i.e., the public-key) in the asymmetric cryptographic key pair to multiple users into the whole system. The processor can use the public-key is a way to identify the user throughout the system. As a result, the user can assume different names in different teams or spaces, and the various names can be tied to one cryptographic user ID.</p><p id="p-0143" num="0142">For example, to verify the user's identity, the processor can receive a text message and the text message can be signed using a private-key of the user. To verify the user's identity, the processor can use the user's public-key (i.e., the cryptographic user ID) to reverse the signing process. The processor can then compare the text message and the message obtained by reversing the signing process. If the text message and the message obtained by reversing the signing process are an exact match, the processor can verify the user's identity. Otherwise, the processor cannot verify the user's identity.</p><p id="p-0144" num="0143">For efficiency purposes, the processor can create a team. To create a team the processor can obtain multiple cryptographic user IDs identifying multiple users. The processor can create the linear sequence including the multiple blocks arranged in the linear sequence, where the initial block in the linear sequence defines the policy specifying the role and the authority associated with the role, and where a block in the multiple blocks defines a role associated with a cryptographic user ID in the multiple cryptographic user IDs identifying a user in the multiple users.</p><p id="p-0145" num="0144">To create a space within the team, the processor does not have to search all the cryptographic IDs in the system and can only search the cryptographic IDs contained in the team, thus preserving CPU cycles. For example, if a team contains 10 users, the whole system contains tens of thousands of users, the number of processor cycles used to create the space is reduced by approximately 1,000. The space can contain a subset of the cryptographic user IDs of the team. The space can include the data encrypted using a cryptographic key known only to the members of the space. The space can include a space linear sequence representing the members and the encrypted data.</p><p id="p-0146" num="0145">As explained in this application, the space linear sequence can contain two or more sub-sequences for efficiency reasons. The space linear sequence can include an authority linear sequence containing blocks modifying the authority within the system, such as adding or removing users and/or administrators. Encrypted data linear sequence can include the linear sequence adding, deleting, and modifying encrypted data within the system. Encrypted data linear sequence can be further subdivided into multiple linear sequences depending on the type of the encrypted data, such as files and/or messages.</p><p id="p-0147" num="0146">The team linear sequence, the space linear sequences, and the encrypted data can be stored in a memory configured to be continuously available to one or more computers over a network, such as the central server. So, in case most of the devices within the space are off-line, a device in the space can request encrypted data and/or can add a block to the space ordered sequence from the central server.</p><p id="p-0148" num="0147">Integration of a Block Chain Managing Group Authority and Access in an Enterprise Environment</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows how the secure file system can be integrated into an enterprise information technology (IT) infrastructure, according to one embodiment. The server <b>1400</b> can store encrypted data <b>1410</b>, which can include confidential data such as the file system, emails, instant messages, etc. The server <b>1400</b> can also store the block chains <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> which can represent a team linear sequence or a space linear sequence, as described in this application. A block chain is a growing list of records, called blocks, that are linked using cryptography. Each block contains a cryptographic hash of the previous block, for example, <b>826</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, and data, for example, <b>812</b>, <b>814</b>, <b>816</b>, <b>822</b>, <b>824</b> in <figref idref="DRAWINGS">FIG. <b>8</b></figref>. A block can also include a timestamp, for example, <b>260</b>, <b>270</b>, <b>280</b>, <b>290</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0150" num="0149">The block chains <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> can record authority associated with a cryptographic user ID, as explained in this application. The block chains <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> can be stored in plain text, and the server <b>1400</b> can control access to the block chains <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> by allowing access to the plain text only to authorized requesters. To authorize a requester, the server <b>1400</b> can issue and manage tokens, as explained below.</p><p id="p-0151" num="0150">The system <b>1420</b> can be implemented on customer premises, as part of an enterprise IT infrastructure. The system <b>1420</b> can include an access control server <b>1430</b>, a token issuer <b>1440</b> and a user device <b>1450</b>.</p><p id="p-0152" num="0151">The access control server <b>1430</b> can control the user device's <b>1450</b> access to web applications, services and/or files running on the enterprise infrastructure by granting or denying permission to the user device <b>1450</b> based on a set of enterprise policies. The access control server <b>1430</b> can run various software such as, Microsoft Active Directory, or Apple Open Directory.</p><p id="p-0153" num="0152">The token issuer <b>1440</b> can act as middleware between the access control server <b>1430</b>, the user device <b>1450</b> and the server <b>1400</b>. The token issuer <b>1440</b> can receive a token request <b>1460</b> from the user device <b>1450</b> requesting access to a portion of the block chain <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b>. The token request <b>1460</b> can include a cryptographic user ID associated with the user making the request, and a specification of the portion of the block chain <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> being requested. For example, the token request <b>1460</b> can include the cryptographic user ID in the form of an alphanumeric string, such as &#x201c;9EDaleMN9CUy1V7VSYyAUTkfEGC7MUDMkugmXV VsM7Z5r01Wpg,&#x201d; and an identification of a team block chain <b>1402</b>, <b>1408</b> or a space block chain <b>1404</b>, <b>1406</b>, <b>1412</b>.</p><p id="p-0154" num="0153">The token issuer <b>1440</b> can send a request <b>1470</b> for a token from the server <b>1400</b> granting permission to the user device <b>1450</b> to access the specified portion of the block chain. The token request <b>1470</b> can include the cryptographic user ID and the identification of the team block chain <b>1402</b>, <b>1408</b> or the space block chain <b>1404</b>, <b>1406</b>, <b>1412</b> contained in the token request <b>1460</b>.</p><p id="p-0155" num="0154">Upon receiving the token request <b>1470</b>, the server <b>1400</b> can compute whether the cryptographic user ID has the authority to access the requested portion of the block chain <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> based on the membership information stored in the block chain <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b>. For example, if the cryptographic user ID requests access to space block chain <b>1404</b>, the server <b>1400</b> can check whether the cryptographic user ID is a member of the space block chain <b>1404</b>. If the cryptographic user ID is a member of the space, the server <b>1400</b> can determine that the cryptographic user ID has the necessary authority and can issue a token <b>1480</b>. Otherwise, the server <b>1400</b> can determine the cryptographic user ID is not authorized to access the space block chain <b>1404</b> and can refuse to issue the token <b>1480</b>.</p><p id="p-0156" num="0155">The token <b>1480</b> can grant unlimited read access to the requested portion of the block chain, such as the space block chain <b>1404</b>. In other words, whenever the server <b>1400</b> and/or the token issuer <b>1440</b> receive the token <b>1480</b> from any source, the server <b>1400</b> does not perform the authority computation described above, and immediately grants access to the portion of the block chain specified in the token <b>1480</b>, such as the space block chain <b>1404</b>. Effectively, the token <b>1480</b> creates an efficiency gain by allowing the server <b>1400</b> to not perform the expensive computation of calculating authority every time the cryptographic user ID requests access to the space block chain <b>1404</b>. Instead, the token <b>1480</b> allows the server <b>1400</b> to perform a less expensive calculation of simply verifying the token <b>1480</b>, as described below.</p><p id="p-0157" num="0156">Before passing the token <b>1480</b> to the user device <b>1450</b>, the token issuer <b>1440</b> can check with the enterprise access control server <b>1430</b> for what kind of permissions the user device <b>1450</b> has regarding the space block chain <b>1404</b>. To perform the check, the user device <b>1450</b> can send a ticket request <b>1490</b> to the access control server <b>1430</b>. The ticket request <b>1490</b> can contain the access control server user identification, such as the user's login ID and the user's password. The user's login ID and the user's password used to identify the user to the access control server <b>1430</b> are different from the cryptographic user ID used to identify the user to the server <b>1400</b>.</p><p id="p-0158" num="0157">Upon verifying the user's identification, such as the login ID and the password, the access control server <b>1430</b> can check a permission that the user has according to the company policy and send the ticket <b>1492</b>, including the permission, to the token issuer <b>1440</b>. For example, the company policy can specify that while the user is on vacation, the user does not have access to email. Consequently, the permission can specify various restrictions such as &#x201c;the user is allowed access only when the user is at a particular location, such as inside the company building,&#x201d; &#x201c;the user is allowed access only during a particular time,&#x201d; and/or &#x201c;the user is only allowed access when the user device <b>1450</b> is connected to a particular network,&#x201d; such as the company network.</p><p id="p-0159" num="0158">The token issuer <b>1440</b> can incorporate the permissions specified in the ticket <b>1492</b> into the token <b>1480</b> to obtain an attenuated token. The permissions specified in the ticket <b>1492</b> may not increase the permissions granted by the token <b>1480</b> but can either leave the permissions unchanged or attenuate, that is, reduce, the permissions granted by the token <b>1480</b>.</p><p id="p-0160" num="0159">In addition, the token issuer <b>1440</b> can add additional restrictions to an attenuated token, such as when the attenuated token expires (e.g., within 3 or 5 minutes), location restrictions, Internet address restrictions, etc. The additional restrictions can be added to the attenuated token to produce the attenuated token <b>1494</b>, which is sent to the user device <b>1450</b>.</p><p id="p-0161" num="0160">The user device <b>1450</b> can request to be added to a team block chain <b>1402</b>, <b>1408</b>. To be added to the team, the user device <b>1450</b> can authenticate itself with the access control server <b>1430</b>, which can send the ticket <b>1492</b> authenticating the user, to the token issuer <b>1440</b>. In addition, the token issuer <b>1440</b> can authenticate the user with the server <b>1400</b> by asking the server to compute the authority stored in the team block chain <b>1402</b>, <b>1408</b> for the cryptographic user ID associated with the user. If both the access control server <b>1430</b> and the server <b>1400</b> authorize the user, the user can be added to the team block chain <b>1402</b>, <b>1408</b>.</p><p id="p-0162" num="0161">Even if the access control server <b>1430</b> is controlled by an adversary, because the access control server <b>1430</b> cannot increase the permissions granted by the token <b>1480</b>, the adversary would still only have the authority that is in the block chain <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> and granted by the token <b>1480</b>. If the adversary controls the token issuer <b>1440</b>, the adversary can only control tokens <b>1480</b> for the teams that the token issuer <b>1440</b> has received from the server. In both cases, the adversary would only be able to read the plain text data, and not the encrypted data <b>1410</b>. Further, the adversary would not be able to modify the plain text data.</p><p id="p-0163" num="0162">The token issuer <b>1440</b> can receive an indication of how much the access control server <b>1430</b> is trusted. If the access control server <b>1430</b> is not trusted, the token <b>1494</b> can be issued or a user can be added to a team 1, 2 without involving the access control server <b>1430</b>.</p><p id="p-0164" num="0163"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows how the secure file system can be integrated into an enterprise IT infrastructure, according to another embodiment. The access to the block chain <b>1502</b>, <b>1504</b>, <b>1506</b>, <b>1512</b> can be managed without the access control server <b>1430</b> in <figref idref="DRAWINGS">FIG. <b>14</b></figref>. The company policy implemented by the access control server <b>1430</b> can be recorded on a block chain <b>1520</b>, or can be part of a fact database <b>1530</b>. The block chain <b>1520</b> and the fact database <b>1530</b> can exist independently of a team 1, 2 or a space 1, 2. The server <b>1500</b> and the token issuer <b>1540</b> can be part of the enterprise IT infrastructure, and/or can be provided as a cloud service. Removing the access control server <b>1430</b> reduces a number of potential security issues and allows the system to function even if the access control server <b>1430</b> is not trusted.</p><p id="p-0165" num="0164">When a user device <b>1550</b> requests a token using the token request <b>1560</b>, the token issuer can forward the token request <b>1560</b> to the server <b>1500</b>. The token request <b>1560</b> can contain the cryptographic user ID and an identification of a portion of the block chain <b>1502</b>, <b>1504</b>, <b>1506</b>, <b>1508</b>, <b>1512</b> to which the access is being requested. For example, the identification of the portion of the block chain can identify the team block chain <b>1508</b>.</p><p id="p-0166" num="0165">The server <b>1500</b> can compute the authority of the cryptographic user ID recorded in the team block chain <b>1508</b>, to determine whether the cryptographic user ID is a member of the team. If the cryptographic user ID is not a member of the team, the server <b>1500</b> can refuse to send a token to the token issuer <b>1540</b>. If the cryptographic user ID is a member of the team, the server <b>1500</b> can check the facts database <b>1530</b> and/or the company policy block chain <b>1520</b> to determine whether the company policy puts any restrictions on the access of the cryptographic user ID. In this case, a single cryptographic user ID can be used to check both the permissions associated with the server <b>1500</b> and permissions associated with the company policy, as opposed to requiring separate authentication, as explained in <figref idref="DRAWINGS">FIG. <b>14</b></figref>.</p><p id="p-0167" num="0166">The server <b>1500</b> can send a message <b>1580</b> to the token issuer <b>1540</b>. The message <b>1580</b> can include a token granting unrestricted read access to the team block chain <b>1508</b>, and permissions associated with the company policy. The token issuer <b>1540</b> can create the attenuated token <b>1594</b> by combining the token and the permissions associated with the company policy and forward the attenuated token <b>1594</b> to the user device <b>1550</b>.</p><p id="p-0168" num="0167">The user device <b>1550</b> may want to further attenuate the attenuated token <b>1594</b> to grant a permission to a third party to access the team block chain <b>1508</b>. To do so, the user device <b>1550</b> can send a request to the token issuer <b>1540</b> containing the attenuated token <b>1594</b> and the additional permission imposed on the attenuated token, for example a temporal permission. The token issuer <b>1540</b> can incorporate the additional permission into the attenuated token <b>1594</b>, and issue a new token to send to the user device <b>1550</b>, which the user device <b>1550</b> can forward to the third party.</p><heading id="h-0008" level="2">Clock</heading><p id="p-0169" num="0168"><figref idref="DRAWINGS">FIG. <b>16</b>A</figref> shows how a clock can be implemented using a block chain. To incorporate the temporal permission, discussed in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, a processor can create an always increasing clock, as explained for example in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, where each block <b>1635</b>, <b>1645</b> (only two labeled for brevity) in the block chain <b>1610</b>, <b>1615</b>, <b>1620</b>, <b>1625</b> is time stamped, such that optional timestamps <b>1630</b>, <b>1640</b> within the blocks <b>1635</b>, <b>1645</b> are always increasing.</p><p id="p-0170" num="0169">The temporal permission in a token can be expressed in terms of the timestamps, such as, the token is valid 5 minutes after the timestamp <b>1630</b>. So, if the timestamp <b>1640</b> is more than 5 minutes after the timestamp <b>1630</b>, a token holder is not allowed read access to the block <b>1645</b>. The blocks <b>1635</b>, <b>1645</b> can be ordered within the team and the sequence but may not be able to be ordered between two different teams or two different sequences. The timestamps <b>1630</b>, <b>1640</b> can be placed within the header of the block <b>1635</b>, <b>1645</b>, respectively.</p><p id="p-0171" num="0170">Instead, or in addition, the clock can be implemented using the block chain <b>1600</b>. The clock block chain <b>1600</b> can include blocks <b>1650</b>, <b>1660</b>, <b>1670</b>, etc., each representing a tick of the clock, such as 1 second, 1 minute, 5 minutes, half an hour, an hour. The frequency of the blocks <b>1650</b>, <b>1660</b>, <b>1670</b> can be related to the computational resources of the enterprise. The higher the computational resources, the more frequent the block <b>1650</b>, <b>1660</b>, <b>1670</b>, and the lower the computational resources the less frequent the blocks <b>1650</b>, <b>1660</b>, <b>1670</b>.</p><p id="p-0172" num="0171">Each block <b>1625</b>, <b>1635</b>, <b>1645</b> (only three labeled for brevity) in team block chain <b>1610</b>, <b>1615</b> can have a binding <b>1628</b>, <b>1638</b>, <b>1648</b>, respectively, to a corresponding block <b>1650</b>, <b>1660</b>, <b>1670</b> in the clock block chain <b>1600</b>. For example, the team block <b>1625</b> has a binding <b>1628</b> to the block <b>1650</b>, meaning that the team block <b>1625</b> was created after the creation of the block <b>1650</b>, and before the creation of the block <b>1660</b>.</p><p id="p-0173" num="0172">The blocks <b>1680</b>, <b>1690</b> (only two labeled for brevity) in the space block chains <b>1620</b>, <b>1625</b> can have a binding <b>1682</b>, <b>1692</b>, respectively, to a corresponding block <b>1635</b>, <b>1625</b> to the team block chains <b>1610</b>, <b>1615</b>. For example, the binding <b>1682</b> indicates that the block <b>1680</b> is created after the block <b>1635</b>, but before the block <b>1645</b>.</p><p id="p-0174" num="0173">Consequently, each block <b>1680</b>, <b>1690</b> in the space block chains <b>1620</b>, <b>1625</b> is bound to the corresponding block in the team block chains <b>1610</b>, <b>1615</b>, and indirectly to the block <b>1650</b>, <b>1660</b>, <b>1670</b> in the clock block chain <b>1600</b>. For example, based on the bindings shown in <figref idref="DRAWINGS">FIG. <b>16</b>A</figref>, block <b>1690</b> is created after block <b>1650</b>, but before block <b>1660</b>.</p><p id="p-0175" num="0174">The temporal permission in a token can be expressed in terms of the clock block chain <b>1600</b>, block <b>1650</b>, <b>1660</b>, <b>1670</b>, or in terms of a wall clock. The clock block chain <b>1600</b> can correspond to the wall clock, with the constraint that the blocks <b>1650</b>, <b>1660</b>, <b>1670</b> in the clock block chain <b>1600</b> are always increasing.</p><p id="p-0176" num="0175">For example, when the temporal permission is formulated in terms of the wall clock, the temporal permission can state that the token is valid until Dec. 1, 2020. The first block <b>1650</b>, <b>1660</b>, <b>1670</b> that has a timestamp after the specified date designates the time at which, and after which, the token is no longer valid. All the blocks bound to the first block designating such time are not accessible to the token holder.</p><p id="p-0177" num="0176">In another example, when the temporal permission is formulated in terms of the block <b>1650</b>, <b>1660</b>, <b>1670</b>, the temporal permission can state that the token is valid for 1&#xbd; hours after block <b>1650</b>. The first block <b>1660</b>, <b>1670</b> that has a timestamp after the specified time designates the time at which, and after which, the token is no longer valid. All the blocks bound to the first block designating such time are not accessible to the token holder.</p><p id="p-0178" num="0177"><figref idref="DRAWINGS">FIG. <b>16</b>B</figref> shows contents of a clock block chain. The block <b>1650</b>, <b>1660</b>, <b>1670</b> of the clock block chain <b>1600</b> can contain several fields including a wall clock field <b>1652</b>, <b>1662</b>, <b>1672</b>, sequence clock field <b>1654</b>, <b>1664</b>, <b>1674</b> and a root of cryptographic hash tree field <b>1656</b>, <b>1666</b>, <b>1676</b>.</p><p id="p-0179" num="0178">The wall clock field <b>1652</b>, <b>1662</b>, <b>1672</b> can be a record of the time indicated by a clock of a server storing the clock block chain <b>1600</b>. The wall clock fields <b>1652</b>, <b>1662</b>, <b>1672</b> do not have to be always increasing, so the fields <b>1652</b>, <b>1662</b> can have the same value, or the field <b>1672</b> can indicate a time before the time indicated by field <b>1652</b>.</p><p id="p-0180" num="0179">The sequence clock <b>1654</b>, <b>1664</b>, <b>1674</b> is always increasing. The sequence clock can be indicated by multiple servers that are measuring and agreeing on the current time. The multiple servers provide redundancy, so that if one server fails, the clock block chain <b>1600</b> can continue measuring time. The current time agreed upon has the property of being greater than the previous current time. The current time can be the latest time measured by the multiple servers, or it can be a time that the most servers agree on, as long as the current time is greater than the previously agreed-upon current time.</p><p id="p-0181" num="0180">The root of cryptographic hash tree field <b>1656</b>, <b>1666</b>, <b>1676</b> can be a Merkle root, and can include the cryptographic hash of all the most recent blocks in the block chains bound to the block <b>1650</b>, <b>1660</b>, <b>1670</b>. For example, the cryptographic hash tree field <b>1662</b> can contain the cryptographic hash of block <b>1635</b> and block <b>1685</b>. The reason to provide a root of the cryptographic hash tree, instead of a list of all the most recent blocks, can be to preserve bandwidth and storage resources because communicating and storing the root is less expensive than communicating and storing the list of all the blocks. Another reason can be to keep the list of all the blocks secret, by only providing the root from which, with some additional information, the list of all the blocks can be calculated.</p><p id="p-0182" num="0181"><figref idref="DRAWINGS">FIG. <b>17</b></figref> shows a cryptographic tree. The endpoints represent block <b>1700</b>, <b>1710</b>, <b>1720</b>, <b>1730</b> that are all of the most recent blocks in the block chains bound to a block in the clock block chain <b>1600</b> in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. The cryptographic tree <b>1740</b> is constructed by, at each node, computing a cryptographic hash such as SHA of the child nodes. For example, node <b>1750</b> is computed by computing the cryptographic hash of block <b>1710</b>, while the node <b>1792</b> is computed by computing the cryptographic hash of nodes <b>1770</b>, <b>1780</b>. Finally, the root <b>1790</b> is computed by computing the cryptographic hash of the nodes <b>1792</b>, <b>1794</b>.</p><p id="p-0183" num="0182">The root <b>1790</b> can be stored in the clock block chain <b>1600</b>. The value of the root <b>1790</b> is unique to the sequence of blocks <b>1700</b>, <b>1710</b>, <b>1720</b>, <b>1730</b> that generated the cryptographic tree <b>1740</b>. Storing a single value, such as root <b>1790</b>, in the clock block chain <b>1600</b> preserves bandwidth and storage space compared to storing the value of all the blocks <b>1700</b>, <b>1710</b>, <b>1720</b>, <b>1730</b>. Further, storing the root <b>1790</b> does not disclose all the blocks <b>1700</b>, <b>1710</b>, <b>1720</b>, <b>1730</b> used in constructing the cryptographic tree <b>1740</b>.</p><p id="p-0184" num="0183">To check whether a block is part of the cryptographic tree <b>1740</b>, only a subset of all the elements in the cryptographic tree <b>1740</b> needs to be supplied. For example, if there are N endpoints, that is, N blocks used in constructing the cryptographic tree <b>1740</b>, only log (N) elements need to be supplied to check whether the root <b>1790</b> contains a particular element.</p><p id="p-0185" num="0184">In a more specific example, to check whether block <b>1710</b> is a member of root <b>1790</b>, only the block <b>1710</b> and nodes <b>1760</b>, <b>1792</b> need to be supplied. Once supplied, the value of the node <b>1750</b> can be computed from the value of block <b>1710</b>. The value of the node <b>1794</b> can be computed from the value of the nodes <b>1750</b> and <b>1760</b>, but, for example, by computing SHA (node <b>1760</b>, node <b>1750</b>). The root node can be computed from the values of nodes <b>1794</b> and <b>1792</b>. If the so computed root node matches the root <b>1790</b> stored in the clock block chain <b>1600</b>, the membership of the block <b>1710</b> in the cryptographic tree <b>1740</b> can be confirmed.</p><heading id="h-0009" level="2">Token</heading><p id="p-0186" num="0185"><figref idref="DRAWINGS">FIG. <b>18</b></figref> shows the anatomy of a token. The token <b>1800</b> can be the token <b>1480</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1580</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, granted by a first authority source, such as the server <b>1400</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1500</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref> storing the authority-defining block chains <b>1402</b>, <b>1404</b>, <b>1406</b>, <b>1408</b>, <b>1412</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1502</b>, <b>1504</b>, <b>1506</b>, <b>1508</b>, <b>1512</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>.</p><p id="p-0187" num="0186">The token <b>1800</b> can include a key identifier (ID) <b>1810</b> identifying a secret root key, a permission <b>1820</b> and a cryptographic hash <b>1830</b> of the permission <b>1820</b> and the secret root key. The secret root key can be known to the server <b>1400</b>, <b>1500</b> and/or to the token issuer <b>1440</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1540</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. Using the key identifier <b>1810</b>, the server <b>1400</b>, <b>1500</b> and/or the token issuer <b>1440</b>, <b>1540</b> can retrieve the secret root key. The cryptographic hash <b>1830</b> can be HMAC, sometimes expanded as either a keyed-hash message authentication code or a hash-based message authentication code. HMAC can be used to simultaneously verify both the data integrity and the authenticity of a message, as with any MAC. Any cryptographic hash function, such as SHA-256 or SHA-3, may be used in the calculation of an HMAC. As with all cryptographic hashes, the cryptographic hash <b>1830</b> is not reversible, meaning given the output of the cryptographic hash <b>1830</b>, determining the inputs into the cryptographic hash is not computationally feasible.</p><p id="p-0188" num="0187">The token <b>1800</b>, with an addition of a second permission <b>1850</b>, can change to become an attenuated token <b>1840</b>. The attenuated token <b>1840</b> can be the token <b>1494</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1594</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The second permission <b>1850</b> can be granted by a second authority source such as the access control server <b>1430</b> in <figref idref="DRAWINGS">FIG. <b>14</b></figref> or the company policy recorded in the block chain <b>1520</b> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The token <b>1800</b> can contain any number of permissions, which are also called constraints or caveats.</p><p id="p-0189" num="0188">To obtain an attenuated token <b>1840</b>, the server <b>1400</b>, <b>1500</b> can add the second permission <b>1850</b> to the token <b>1840</b>, compute a second cryptographic hash <b>1860</b> of the first cryptographic hash <b>1830</b> and the second permission <b>1850</b> and remove the first cryptographic hash <b>1830</b> from the token, thereby obtaining the attenuated token <b>1840</b>.</p><p id="p-0190" num="0189">The second permission <b>1850</b> is interpreted to only decrease the first permission <b>1820</b>. By removing the cryptographic hash <b>1830</b> from the first token, token <b>1840</b> is created where the first permission <b>1820</b> is limited by the second permission <b>1850</b>. Because the cryptographic hash <b>1860</b> is not reversible, an attacker cannot guess the cryptographic hash <b>1830</b>, and the token <b>1840</b> is secure. Consequently, the largest authority is granted by the original token <b>1800</b>, having only one permission <b>1820</b>.</p><p id="p-0191" num="0190">For example, the first permission <b>1820</b> can specify the cryptographic user ID is being granted access to read metadata associated with block chains <b>1402</b>, <b>1404</b>, <b>1408</b>, <b>1412</b>, <b>1502</b>, <b>1504</b>, <b>1508</b>, <b>1512</b>. The second permission <b>1850</b> can specify a team block chain, such as team block chain <b>1402</b>, <b>1408</b>, <b>1502</b>, <b>1508</b>, to which the cryptographic user ID has access. Additional permissions can be added to the attenuated token <b>1840</b> to make an even more attenuated token <b>1870</b>.</p><p id="p-0192" num="0191">In one embodiment, the attenuated token <b>1870</b> can be generated upon request by a user device. For example, a third permission <b>1880</b> can specify a space block chain <b>1404</b>, <b>1406</b>, <b>1412</b>, <b>1504</b>, <b>1506</b>, <b>1512</b> within the team block chain <b>1402</b>, <b>1408</b>, <b>1502</b>, <b>1508</b> to which the cryptographic user ID can have access. A third cryptographic hash <b>1890</b> can be included in the attenuated token <b>1870</b>, or the cryptographic hash <b>1890</b> can be a cryptographic hash of the cryptographic hash <b>1860</b> and the third permission <b>1880</b>. The cryptographic hash <b>1860</b> can be removed from the token <b>1870</b>.</p><p id="p-0193" num="0192">In another embodiment, the user device can grant the attenuated token <b>1870</b> to a third party. For example, the third party can have a proprietary video processing algorithm, and the attenuated token <b>1870</b> can grant access to a video that the user device has access to. The reason for granting the access to the third party can be that a third party has access to a faster network connection than the user device. The attenuated token <b>1870</b> can contain a third permission <b>1880</b> specifying the video to which the attenuated token <b>1870</b> grants access.</p><p id="p-0194" num="0193">To request the video, the third party can send the attenuated token <b>1870</b> to the server <b>1400</b>, <b>1500</b> and/or to the token issuer <b>1440</b>, <b>1540</b>. The server can verify the token, as explained below, using the secret root key, and can grant access to the video to the third party.</p><p id="p-0195" num="0194"><figref idref="DRAWINGS">FIG. <b>19</b></figref> shows a token preventing a replay attack. To prevent an attacker from performing a replay attack by obtaining the token, and providing a copy of the token to the token issuer <b>1440</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1540</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, and/or the server <b>1400</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1500</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the attenuated tokens <b>1840</b>, <b>1870</b> in <figref idref="DRAWINGS">FIG. <b>18</b></figref> can include a single use permission <b>1900</b>, <b>1910</b> to obtain attenuated tokens <b>1940</b>, <b>1970</b>. The cryptographic hash <b>1920</b> can be a cryptographic hash of the cryptographic hash <b>1860</b> in <figref idref="DRAWINGS">FIG. <b>18</b></figref> and the third permission <b>1900</b>, while the cryptographic hash <b>1930</b> can be a cryptographic hash of the cryptographic hash <b>1890</b> in <figref idref="DRAWINGS">FIG. <b>18</b></figref> and the fourth permission <b>1910</b>. If the tokens <b>1940</b>, <b>1970</b> are intercepted on request, replaying the token <b>1940</b>, <b>1970</b> does not grant any access to the attacker because the tokens <b>1940</b>, <b>1970</b> are not valid after the one request is satisfied.</p><heading id="h-0010" level="2">Recovery Key</heading><p id="p-0196" num="0195"><figref idref="DRAWINGS">FIG. <b>20</b></figref> shows how a recovery key can be used. Block chain <b>2000</b> can contain block <b>2010</b>. Block <b>2010</b> can be the initial block of the block chain <b>2000</b>, or it can be any other block in the block chain <b>2000</b>. Block <b>2010</b> can contain multiple events <b>2012</b>, <b>2014</b>, <b>2016</b>. Most of the events in the block chain <b>2000</b>, like events <b>2012</b> and <b>2014</b>, are signed by a public key of a user entering the event, such as Alice. However, an event, such as the event <b>2016</b>, can be signed by a recovery key <b>2050</b>.</p><p id="p-0197" num="0196">The recovery key <b>2050</b> is a special key that circumvents entire authority and policy computation. Before a processor even determines whether the policy authorizes the event <b>2016</b>, the processor can determine whether the event is signed by the recovery key <b>2050</b>. If the event is signed with the recovery key <b>2050</b>, the processor determines that the event is allowed regardless of authority and policy. Thus, the recovery key <b>2050</b> overrides the entire authority and policy.</p><p id="p-0198" num="0197">The recovery key <b>2050</b> needs to be protected extremely well. Consequently, the recovery key <b>2050</b> can be split into multiple parts <b>2052</b>, <b>2054</b>, <b>2056</b> (only three labeled for brevity), such as 30 parts. The different parts <b>2052</b>, <b>2054</b>, <b>2056</b> can be put in different safe places, such as different HSMs, each having different operating procedures. The different parts <b>2052</b>, <b>2054</b>, <b>2056</b> can be encrypted, and one person can have a password to store the key parts <b>2052</b>, <b>2054</b>, <b>2056</b> in a file, and a different person can have a password to retrieve the key parts <b>2052</b>, <b>2054</b>, <b>2056</b> from the file. The assembly of the recovery key <b>2050</b> can require the participation of all, or at least a majority of, devices and users having parts of the <b>2052</b>, <b>2054</b>, <b>2056</b> of the recovery key <b>2050</b>, thereby safeguarding accidental use of the recovery key <b>2050</b>.</p><p id="p-0199" num="0198">The existence and the use of the recovery key <b>2050</b> can be optional. The recovery key can be set to a predetermined value, such as all zeros, which indicates to the processor that the recovery key <b>2050</b> has not been generated and does not exist. The processor can ignore any event signed by the recovery key <b>2050</b> set to the predetermined value.</p><heading id="h-0011" level="2">Split Key</heading><p id="p-0200" num="0199"><figref idref="DRAWINGS">FIG. <b>21</b></figref> shows a split key system limiting an attack to the encrypted data when a user device is compromised. The user device <b>2100</b> can store data <b>2110</b> encrypted using multiple keys, such as a channel session key <b>2120</b>, as described in this application, as well as a split key <b>2130</b>. The split key <b>2130</b> can be separated into at least two parts <b>2132</b>, <b>2134</b>. The first key part <b>2132</b> can be stored on the server <b>2140</b>, while the second key part <b>2134</b> can be stored on the user device <b>2100</b>.</p><p id="p-0201" num="0200">To encrypt data, the user device <b>2100</b> can request the first key part <b>2132</b> from the server <b>2140</b>. Upon receiving the first key part <b>2132</b>, the user device <b>2100</b> can calculate a key derivation function (KDF) that is a combination of the first key part <b>2132</b> and the second key part <b>2134</b> to obtain the split key <b>2130</b> with which to encrypt the data. Similarly, to decrypt the encrypted data <b>2110</b>, the user device <b>2100</b> can request the first key part <b>2132</b> from the server <b>2140</b> and calculate the split key <b>2130</b> using the KDF, which is a combination of the first key part <b>2132</b> and the second key part <b>2134</b>.</p><p id="p-0202" num="0201">Once the user device <b>2100</b> calculates the split key <b>2130</b>, the user device <b>2100</b> can forget the first key part <b>2132</b> based on a predetermined rule. The predetermined rule can state that for every time the user device <b>2100</b> is suspended and/or rebooted, the first key part <b>2132</b> is forgotten; for every three files that are opened using the split key <b>2130</b>, the first key part <b>2132</b> is forgotten; for every time the application associated with the key derivation function is closed, the first key part <b>2132</b> is forgotten; for every time a geolocation and/or an IP address of the user device <b>2100</b> is outside of a predefined space, the first key part <b>2132</b> is forgotten; etc.</p><p id="p-0203" num="0202">Because the user device <b>2100</b> forgets the first key part <b>2132</b> based on the predetermined rule, the server <b>2140</b> can revoke access to the user device <b>2100</b>. For example, if the server <b>2140</b> is notified that the user device <b>2100</b> has been compromised, such as by being stolen and/or hacked by an attacker, the server <b>2140</b> can record that the request for the first key part <b>2132</b> from the user device <b>2100</b> should be refused. The next time the user device <b>2100</b> requests the first key part <b>2132</b>, the server <b>2140</b> can refuse to provide the first key part <b>2132</b>. Consequently, the encrypted data <b>2110</b> remains encrypted on the user device <b>2100</b> and is not available to the attacker.</p><p id="p-0204" num="0203">To increase security of the first key part <b>2132</b>, the server <b>2140</b> can require a multifactor authentication before providing the first key part <b>2132</b>. For example, the server <b>2140</b> can require a second device <b>2150</b> to provide an authentication to the server <b>2140</b>. Once the server <b>2140</b> receives the authentication from the second device <b>2150</b>, the server <b>2140</b> can provide the first key part <b>2132</b> to the user device <b>2100</b>.</p><heading id="h-0012" level="2">System Updates</heading><p id="p-0205" num="0204"><figref idref="DRAWINGS">FIG. <b>22</b></figref> shows an update to the interpretation of the semantics of a block chain. The block chain <b>2200</b> can contain blocks <b>2210</b>, <b>2220</b>, <b>2230</b>, etc. Rules for interpreting the semantics of the block chain <b>2200</b> can be coded in the blocks <b>2210</b>, <b>2220</b>, <b>2230</b>, and can be represented as a source code in a programming language such as Rust, Python, Go, or a proprietary language. Updating interpretation of the semantics of the block chain <b>2200</b> (including authority, policy, etc.) can happen in the block chain <b>2200</b>.</p><p id="p-0206" num="0205">For example, the block <b>2210</b> can contain source code updating how to interpret the blocks <b>2230</b>, subsequent to the block <b>2210</b>. By putting the semantics in the block chain <b>2200</b>, every instance of the system, spread across multiple clients and containing different block chains, can update the local rules for interpreting the semantics of the block chain when they receive the block <b>2210</b>. So, blocks <b>2220</b> preceding the block <b>2210</b> are interpreted according to a first set of rules, while the blocks <b>2230</b> subsequent to the block <b>2210</b> are interpreted according to the second set of rules established by the block <b>2210</b>.</p><p id="p-0207" num="0206">For example, the rules for interpreting the semantics of the block chain <b>2200</b> can govern how race conditions are resolved. Such rules can be specified in system policy <b>530</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, user policy <b>540</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref> or application policy <b>550</b> in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Consequently, the block <b>2210</b> can update system <b>530</b>, user <b>540</b>, and/or application <b>550</b> policy.</p><p id="p-0208" num="0207">To prevent introducing a bug into the rules for interpreting the semantics of the block chain <b>2200</b>, the policy engine <b>530</b>, <b>540</b>, <b>550</b> can be formally verified. Formal verification is the act of proving the correctness of the policy <b>530</b>, <b>540</b>, <b>550</b> with respect to a certain formal specification or property, using formal methods of mathematics. The formal verification can provide assurance that there are no bugs in the policy <b>530</b>, <b>540</b>, <b>550</b>.</p><heading id="h-0013" level="2">Flow Diagrams</heading><p id="p-0209" num="0208"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a flowchart of a method to generate a token providing authorization credentials. In step <b>2300</b>, a processor can create a block chain including multiple blocks by creating a block defining an authority of the user in appending the block to the end of the block chain. The block can include a cryptographic user ID identifying the user and an authority associated with the cryptographic user ID. The authority can define at least an operation associated with the cryptographic user ID to perform on the block chain. For example, the operation can include read access, write access, and/or read/write access to the block chain and/or to an encrypted data associated with the block chain. The block chain may not be encrypted.</p><p id="p-0210" num="0209">In step <b>2310</b>, the processor can receive a request from a requesting device to access the block chain. The request can include a cryptographic user ID associated with the user making the request, where the cryptographic user ID can be authorized by the block chain to perform certain operations. The requesting device can be a user device.</p><p id="p-0211" num="0210">In step <b>2320</b>, the processor can determine whether the user making the request has an authority to access the block chain by computing the authority recorded in the block chain including checking the block chain from an initial block to a last block. Performing the authority computation can be expensive.</p><p id="p-0212" num="0211">In step <b>2330</b>, the processor can generate a token granting access to the block chain to the user making the request upon determining that the user making the request has the authority to access the block chain. The token can be a certificate that proves the processor has done the expensive operation of, for example, computing the authority on the block chain, or checking the user's password. So, the next time the processor receives the token, the processor does not have to perform the expensive operation, and instead can check the token, which can be a cheaper operation than, for example, computing the authority in the block chain. In step <b>2340</b>, the processor can send the token to the requesting device.</p><p id="p-0213" num="0212">The token can include a message and an HMAC taking two arguments, namely, the message and a secret root key, as explained in this application. For example, the message can be a permission identifying the user authorized to access the block chain.</p><p id="p-0214" num="0213">In one embodiment, when the user wants to read the block chain, the user can send a signed message providing the cryptographic user ID and identifying a portion of the block chain, such as a team and/or a space, that the user wants to read. A processor having access to the block chain can check the public key associated with the cryptographic user ID, the signature and the fact database to confirm that the cryptographic user ID has the permission to access the requested team and/or space. If the processor does not make the confirmation, the processor can deny access to the user. If the processor confirms that the user has authority to access the team and/or the space, the processor can create a token including the cryptographic user and an indication of the requested team and/or space. The token can grant a read permission to the cryptographic user ID.</p><p id="p-0215" num="0214">To generate the token, the processor can create a key identifier identifying a secret root key. The key identifier can be implemented as an index into a database associated with the server. The secret root key can be further protected using public-key or secret-key encryption. The processor can create a permission to the block chain granted by the token, such as the user ID or the team and/or the space ID. Further, the processor can create a cryptographic hash of the secret root key and the permission. The cryptographic hash can be an HMAC. The processor can add the key identifier, the permission and the cryptographic hash to the token. The token can give read permission to the team and/or the space.</p><p id="p-0216" num="0215">To determine whether the user making the request has the authority to act as the block chain, the processor can determine whether the request is signed with a recovery key without computing the authority recorded in the block chain. As explained in this application, the recovery key can override the authority recorded in the block chain. The processor can generate a second token granting unlimited access to the block chain to the user making the request upon determining that the request is signed with the recovery key.</p><p id="p-0217" num="0216">To prevent attackers from gaining access to the recovery key, the recovery key can be separated into multiple parts, where each part is encrypted using a different secret encryption key, and each encrypted part is distributed among multiple devices such as HSMs.</p><p id="p-0218" num="0217">To prevent attackers from gaining access to the system by compromising an endpoint, for example, a user device, the encrypted data can be additionally encrypted with a split key. The split key can be separated into two parts, the first part that is stored on a server, and the second part that is stored on the user device. To decrypt encrypted data, the user device has to request the first part of the split key, that is, the first cryptographic key, from the server. Upon receiving the request for the first cryptographic key, the server can determine whether the user device is permitted to receive the first cryptographic key.</p><p id="p-0219" num="0218">For example, the user device can be reported as stolen and consequently not permitted to receive the first cryptographic key. The server can refuse to send the first cryptographic key upon determining that the user device is not permitted to receive the first cryptographic key. If the user device receives the cryptographic key, the user device can compute a key derivation function which is a combination of the first and the second cryptographic keys, such as HMAC, to obtain a key which can be used in decrypting the encrypted data.</p><p id="p-0220" num="0219">The software updates to the computation of authority and/or policy stored in the block chain can be stored, themselves, in the block chain. The server can receive an update regarding an interpretation of semantics of the block chain. The server can ensure consistency of the interpretation of the semantics of the block chain across multiple user devices by storing the update within the block chain.</p><p id="p-0221" num="0220"><figref idref="DRAWINGS">FIG. <b>24</b></figref> is a flowchart of a method to create an attenuated token. In step <b>2400</b>, a processor can obtain a token granting an access to a block chain. The access to the block chain can be permitted by a first authority source defined by the block chain. In other words, the first authority source can be the block chain recording authority and policy, itself. The token can include a key identifier identifying a secret root key, a first permission to access the block chain authorized by the first authority source and a first cryptographic hash of the secret root key and the permission. Access to the block chain can be granted based on whether the requester has read access to the encrypted data, or membership in the requested team and/or space.</p><p id="p-0222" num="0221">The first permission can include a cryptographic user ID to whom the first permission is granted, and an identification of at least a portion of the block chain to which the cryptographic user ID has access, such as the team or space. The first permission can include an operation permitted to be performed by the cryptographic user ID, or the permitted operation may not be included and can be assumed that operation is read-only.</p><p id="p-0223" num="0222">In step <b>2410</b>, the processor can receive a request to access the block chain from a requesting device, with a second permission from a second authority source limiting access associated with the requesting device. The second authority source can be an access control server such as an active directory. The access control server can be part of an enterprise IT system.</p><p id="p-0224" num="0223">The second permission can include a time limitation or a geolocation limitation. For example, the second permission can specify a time window within which the axis is permitted, or a geolocation within which access is permitted. In a more specific example, if the user leaves the building, access to the block chain can be revoked. The second permission can also include an Internet address limitation, for example, permitting access to the requesting device as long as the Internet protocol (IP) address of the requesting device is within a specified IP address range.</p><p id="p-0225" num="0224">In step <b>2420</b>, the processor can attenuate the access granted by the token by adding the second permission from the enterprise to the token, computing a second cryptographic hash of the first cryptographic hash and the second permission, and removing the first cryptographic hash from the token, thereby obtaining an attenuated token. The first permission and the second permission obtained from the first authority source and the second authority source, respectively, can be translated into multiple permissions and entries in the token and the attenuated token. In step <b>2430</b>, the processor can send the attenuated token to the requesting device such as the user device.</p><p id="p-0226" num="0225">To obtain the token, the processor can compute the authority stored in the block chain. The block chain can include multiple blocks wherein a block in the block chain defines an authority of a cryptographic user ID. The authority can define at least an operation associated with the cryptographic user ID to perform on the block chain. To determine whether the user making the request has an authority to access the block chain, the processor can compute the authority recorded in the block chain including checking the block chain from an initial block to a last block. The processor can generate the token granting access to the block chain to the user making the request upon determining that the user making the request has the authority to access the block chain.</p><p id="p-0227" num="0226">The processor can grant access to the block chain upon receiving a valid token. The processor can receive a request to access a portion of the block chain and the attenuated token. The processor can obtain the secret root key using the key ID stored within the attenuated token. The processor can calculate the cryptographic hash of the secret root key and the first permission to obtain a third cryptographic hash. The processor can calculate the cryptographic hash of the third cryptographic hash and the second permission to obtain a fourth cryptographic hash. The processor can determine whether the second cryptographic hash included in the attenuated token matches the fourth cryptographic hash by comparing the second cryptographic hash included in the attenuated token and the fourth cryptographic hash. Upon determining that the second cryptographic hash included in the attenuated token and the fourth cryptographic hash match, the processor can grant the request to access the portion of the block chain. If the second cryptographic hash and the fourth cryptographic hash do not match, the processor can refuse to grant the request because the attenuated token is not valid.</p><p id="p-0228" num="0227">The attenuated token can be attenuated further by adding additional permissions, that is, constraints or caveats, to the attenuated token. For example, the attenuated token holder may want to delegate a portion of his access to the block chain to a third party. Consequently, the attenuated token holder can request a creation of an additional attenuated token granting a portion of the access to the third party. For example, the token holder can specify specific blocks within the team to which the third party can have access.</p><p id="p-0229" num="0228">To create an even further attenuated token, the processor can receive the attenuated token and a request for a third permission. In one embodiment, the processor can determine whether the third permission is authorized by the first permission and the second permission. For example, the first permission and the second permission may grant access to team 1 user Alice, while the third permission can request access to team 2. The processor can determine user Alice does not have access to team 2 and can refuse to create the attenuated token. In another example, upon determining that the third permission is authorized by the first permission and the second permission, the processor can create a second attenuated token by computing the cryptographic hash of the second cryptographic hash and the third permission, deleting the second cryptographic hash from the attenuated token, adding the third permission to the attenuated token, and adding the third cryptographic hash to the attenuated token, thereby creating the second attenuated token.</p><p id="p-0230" num="0229">In another embodiment, the processor does not determine the validity of the permissions, and instead only creates the attenuated token. The validity of the permissions can be determined at the time when the validity of the token is determined. If the third permission requests data not granted by the first and second permissions, a null response can be provided to the requester.</p><p id="p-0231" num="0230">The processor can grant the token based on a recovery key. The processor can determine whether the user making the request for the token has an authority to access the block chain by determining whether the request is signed with the recovery key without computing the authority recorded in the block chain. The processor can generate a second token granting unlimited access to the block chain to the user making the request upon determining that the request is signed with the recovery key. As described in this application, the processor can break up the recovery key into multiple parts, such as 30 parts, encrypt each part, distribute the encrypted key parts to multiple devices, and require participation of at least the majority of the devices to assemble the recovery key from the multiple parts.</p><p id="p-0232" num="0231">To guard against an attacker infiltrating the system by compromising the user device, the processor can implement a split key, where the first cryptographic key is stored on the server, and the second cryptographic key is stored in the user device. When the processor receives the request for the first cryptographic key from the user device, the processor can determine whether the user device is permitted to receive the first cryptographic key upon receiving the request. For example, if the user device is reported as stolen, the processor does not permit the user device to receive the first cryptographic key stored on the server. If the user device receives the cryptographic key, the user device can perform a KDF which is a combination of the first and the second cryptographic key, such as HMAC, to obtain a key which can be used in decrypting encrypted data.</p><p id="p-0233" num="0232">The processor can receive an update regarding an interpretation of semantics of the block chain. The processor can ensure consistency of the interpretation of the semantics of the block chain across multiple user devices by storing the update within the block chain.</p><p id="p-0234" num="0233">To enforce time sensitive permissions, such as time sensitive permissions stored in the token, the processor can create a clock block chain including multiple blocks. Each block among the multiple blocks can include a timestamp greater than a timestamp of a preceding block. The processor can create a temporal relation between a block in the block chain and a clock block in the clock block chain. For example, a link between the block and the clock block can indicate that the block has been created before the clock block, after the clock block, at the same time as the clock block, within specified time after and/or before the clock block, etc.</p><p id="p-0235" num="0234">The processor can receive the token including a time-limited permission, and a request to access a portion of the block chain. The processor can determine whether the time-limited permission is authorized by the clock block chain associated with the requested portion of the block chain. The processor can refuse the request to access the portion of the block chain upon determining that the time-limited permission is not authorized by the clock block chain. For example, the latest block in the clock block chain can be past the time-limited permission, or the requested portion of block chain has been created outside of the time-limited permission window, etc.</p><heading id="h-0014" level="2">Secure Orbit Communication</heading><heading id="h-0015" level="1">INTRODUCTION</heading><p id="p-0236" num="0235">The traditional approach to operating spacecraft involved one single party operating the craft, it's payload, and the ground network that supported it. This vertical integration allowed for the information security of the spacecraft to be built around the trust within an organization.</p><p id="p-0237" num="0236">Technology has moved into an era where operators are using third party ground stations, even separating out the roles of spacecraft and payload operators. In this hybrid, multi-party, environment, security can no longer be based on trust. The integrity, confidentiality, and authority of commands and data can be implemented using controls which are near-impossible to circumvent for the ground station network and the operators of the spacecraft upon which the payloads ride.</p><p id="p-0238" num="0237">The system disclosed herein provides tools to:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0000">    <ul id="ul0002" list-style="none">        <li id="ul0002-0001" num="0238">1. Secure the communications for the management of spacecraft and payloads, such that only authorized parties may command the assets.</li>        <li id="ul0002-0002" num="0239">2. Secure the communications for the management of spacecraft and payloads, such that only authorized parties may receive telemetry from the assets.</li>        <li id="ul0002-0003" num="0240">3. Secure the communications for observations made by payloads, such that only authorized parties may gain access to the contents.</li>        <li id="ul0002-0004" num="0241">4. Secure the management of spacecraft and payloads, such that authorized parties are granted the minimum privilege required for their duties.</li>    </ul>    </li></ul></p><p id="p-0239" num="0242">It is essential that these features are delivered in such a way that the complexity of implementation and recourses required by the assets is minimized; thus, the system disclosed herein places lightweight requirements on the assets.</p><p id="p-0240" num="0243">Additionally, the system disclosed herein works with existing mission planning, scheduling, and control solutions and integrates with the heritage solutions upon which the industry has come to rely. The disclosed system, including an OrbitSecure protocol, can be deployed into a customer's environment and can provide agile key management as a service for mission planning and Space C2 (C2) software. The OrbitSecure protocol is a cryptographic protocol, as described in this application, that ensures the integrity and confidentiality of mission data, command and control, and telemetry.</p><p id="p-0241" num="0244">Multiple key control agents can be deployed to various segments of a Ground infrastructure. To provide forward deployed secure product distribution, client applications, such as CrossClave, can be deployed to end users. CrossClave application allows communication and data-sharing that is secured across any network with end-to-end encryption. An implementation of the OrbitSecure protocol can provide Multi-Key-per-Pass (MKP) solutions. More involved integrations with C2 and Mission Planning &#x26; Scheduling software can allow Multi-Key-per-Collect (MKC).</p><p id="p-0242" num="0245">The OrbitSecure protocol provides a strong assurance of the authority, identity, integrity, and confidentiality of the space architecture data and systems entrusted to it. A flexible protocol, OrbitSecure is capable of integrating with older systems on-orbit for years, and new systems yet to launch.</p><heading id="h-0016" level="2">Integration</heading><p id="p-0243" num="0246">The following sections outline multiple scenario types for both key scenarios and various integration opportunities for either Pre- or Post-Launch.</p><heading id="h-0017" level="2">Pre-Launch Scenarios</heading><p id="p-0244" num="0247">In <figref idref="DRAWINGS">FIGS. <b>25</b>-<b>35</b></figref>, all blue assets are considered trusted; all yellow assets are considered untrusted, but have metadata access; and finally, all red assets are completely untrusted within the infrastructure.</p><heading id="h-0018" level="2">Ground Station as a Service (GaaS) Use Case</heading><p id="p-0245" num="0248"><figref idref="DRAWINGS">FIG. <b>25</b></figref> shows a GaaS use case. In the GaaS use case only the Operator's ground segment and their asset are fully trusted. The public networks used to reach the ground station are untrusted, and the ground station itself is trusted only to faithfully relay commands to the satellite, telemetry, and mission data back to the Operators Ground Segment. Telemetry is the collection of measurements and onboard instrument readings required to deduce the health and status of all of the subsystems on the Operator asset, such as the satellite. Mission data is the data relevant to the mission that the satellite has gathered. In the model we have three types of information:<ul id="ul0003" list-style="none">    <li id="ul0003-0001" num="0000">    <ul id="ul0004" list-style="none">        <li id="ul0004-0001" num="0249">1. Commands for the satellite.</li>        <li id="ul0004-0002" num="0250">2. Telemetry data from the satellite.</li>        <li id="ul0004-0003" num="0251">3. Mission data from the satellite.</li>    </ul>    </li></ul></p><p id="p-0246" num="0252">In this protocol:<ul id="ul0005" list-style="none">    <li id="ul0005-0001" num="0000">    <ul id="ul0006" list-style="none">        <li id="ul0006-0001" num="0253">The Operator and Satellite have visibility into all types of data.</li>        <li id="ul0006-0002" num="0254">The public networks only know that there are encrypted communications between the Operator and Ground station provider.</li>        <li id="ul0006-0003" num="0255">The Ground station provider knows only how many commands were sent and the volume of telemetry and data but not the contents.</li>    </ul>    </li></ul></p><p id="p-0247" num="0256">Keys are assigned to 4 unique entities: Operator Ground Segment, Processing Segment, Ground Antenna and Asset Operator. Ground creates two channels: (1) C2, and (2) Telemetry C2. Channel members include Operator Segment and Asset. Telemetry channel members include Operator, Antenna, and Asset. Processing creates two channels: (1) Full Payload, and (2) Metadata Only. &#x201c;Full Payload&#x201d; channel members are Processing and Asset. &#x201c;Metadata Only&#x201d; channel members are Processing, Asset, and Ground Segment. A channel a caries a type of data such as telemetry, mission data, etc.</p><heading id="h-0019" level="2">Communications Use Case</heading><p id="p-0248" num="0257"><figref idref="DRAWINGS">FIG. <b>26</b></figref> shows a communications use case with a remotely deployed ground terminal. In this use case the only two trusted endpoints of the system are the owner-operated ground segment and a field deployed communications terminal. This communications terminal can be a person, IoT device, or otherwise communicating entity. In this case, the satellite provider is only aware of the need to collect. The operator asset, such as a satellite, will need to know on which frequency to communicate and the appropriate band/method on which to listen or pulse, if commands are to be sent to the field deployed device.</p><heading id="h-0020" level="2">Payload Use Case</heading><p id="p-0249" num="0258"><figref idref="DRAWINGS">FIG. <b>27</b></figref> shows a hosted payload use case. In this use case, a single operator asset, such as a satellite bus, is hosting one or more payloads which perform various functions. The payload owner/operator does not own/control the satellite bus, and thus does not trust it. In this case, the hosted payload may use the OrbitSecure protocol to protect its specific payload data from the rest of the satellite bus/platform. Additionally, this approach could support multiple payloads on a satellite bus to keep each payload data and communications cryptographically separate.</p><heading id="h-0021" level="2">Post-Launch Scenario</heading><p id="p-0250" num="0259">In this scenario an organization's assets are already on-orbit. Therefore, integrating the disclosed system with these assets should be performed differently. While every platform will vary in practice, the following overall Concept of Operations (CONOP) will apply:<ul id="ul0007" list-style="none">    <li id="ul0007-0001" num="0000">    <ul id="ul0008" list-style="none">        <li id="ul0008-0001" num="0260">1. The inflight software is updated to support key rotation. This can be accomplished either by using a schedule with a fixed set of managed keys, or by using a root key and a key derivation function (KDF).</li>        <li id="ul0008-0002" num="0261">2. The inflight software is updated to use keys from either the schedule or KDF when engaging in protected communications.</li>        <li id="ul0008-0003" num="0262">3. Where possible, cypher selection can be updated to use modern authenticated encryption modes.<br/>The above CONOP can be accomplished by utilizing the OrbitSecure protocol. All other operations are the same as the prelaunch scenario.</li>    </ul>    </li></ul></p><heading id="h-0022" level="2">Key Management</heading><p id="p-0251" num="0263">Multi-Key-Per-Pass (MKP) Use Case</p><p id="p-0252" num="0264">For example, satellite company A can use OrbitSecure to separately protect the payload data its satellite collects. User X orders an image collect. User Y orders an image collect. The system can create N number of virtual channels per pass for the each collect performed. In this example, the system can create one pass with 2 collects&#x2014;so, two channels. Although in the real world a single pass may have dozens or hundreds of collects this example only uses two collects for simplicity. The system can scale up to real-world collect levels for modern remote sensing assets. Through the mission planning and scheduling software, the system can provide the collection cryptographic key (&#x201c;collection key&#x201d;) for each upcoming collect. Each planned collect which is part of the schedule loaded to the vehicle, such as a satellite, also can contain the collection key which will be used to encrypt the payload for that individual collect. As described in this application, the collection key can be determined using a schedule with a fixed set of managed keys, or by using a root key and a KDF.</p><p id="p-0253" num="0265">During one single pass, both User X's and User Y's collects occur, separately. They are communicated to the ground and are received by the processing segment, such as a computer processor. The payload data passes through the downlink antenna and the ground control segment with no knowledge of payload data. If those segments were to try to interrogate the data, they see only cipher-text. Only the trusted processing segment has the requisite collection key to read and process that data. Upon successful product creation, the processing segment sends the resultant product to the end customer.</p><p id="p-0254" num="0266">Product transmission to the end user can be done either within the same collection channel or a new channel. Due to the flexible nature of the system, users can maintain channels by sensor type, by Country Code, and/or by individual user within a requesting organization. The cryptographic channel through which the collect is made does not have to be the same channel the finished product is disseminated through to an end customer.</p><heading id="h-0023" level="2">Attack Scenarios</heading><p id="p-0255" num="0267">The system can prevent various threat models and attacks with respect to on-orbit assets. Ground stations or actors masquerading as ground stations can perform numerous attacks against satellites. OrbitSecure protocol can prevent against a number of attack scenarios, which described below in further detail.</p><p id="p-0256" num="0268">In these attack scenarios implementation defects such as logic bugs or remote code execution attacks (RCE) are not covered. Rather, the common architectural weaknesses found in many CONOPS are addressed, and how the system defends against attacks.</p><p id="p-0257" num="0269">Attacks or discussed based on the operational segment in which they occur: Network, Control Plane, and Processing Segment.</p><heading id="h-0024" level="2">Attacks in the Network</heading><p id="p-0258" num="0270">Network can be any equipment or infrastructure that exists between operational components of the system, such as between mission control and ground stations, ground stations and orbit, or ground stations and the processing segment.</p><p id="p-0259" num="0271">A mission control center (MCC), sometimes called a flight control center or operations center) is a facility that manages space flights, usually from the point of launch until landing or the end of the mission. It is part of the ground segment of spacecraft operations. A staff of flight controllers and other support personnel monitor all aspects of the mission using telemetry, and send commands to the vehicle using ground stations. Personnel supporting the mission from an MCC can include representatives of the attitude control system, power, propulsion, thermal, attitude dynamics, orbital operations and other subsystem disciplines.</p><p id="p-0260" num="0272">A ground station, earth station, or earth terminal is a terrestrial radio station designed for extraplanetary telecommunication with spacecraft (constituting part of the ground segment of the spacecraft system), or reception of radio waves from astronomical radio sources. Ground stations may be located either on the surface of the Earth, or in its atmosphere. Ground stations communicate with spacecraft by transmitting and receiving radio waves in the super high frequency or extremely high frequency bands (e.g., microwaves). When a ground station successfully transmits radio waves to a spacecraft (or vice versa), it establishes a telecommunications link. A principal telecommunications device of the ground station is the parabolic antenna. Ground stations may have either a fixed or itinerant position.</p><p id="p-0261" num="0273">The system can assume that all network traffic is encrypted with modern authenticated cyphers such as AES-GCM and that there are not defects in the cryptographic implementations.</p><p id="p-0262" num="0274">Key Distribution</p><p id="p-0263" num="0275">When any two devices wish to secure their communications cryptographically, they can first agree on a secret used to establish security. This is either done by manual distribution or using public key cryptography to exchange or agree on keys. Whatever method is used, assuring that the keys received were not intercepted and are properly authenticated, is a challenging problem.</p><p id="p-0264" num="0276">The system addresses this issue by using device and user onboarding to establish a basis for trust which allows for secure attenuated key distribution. Leveraging onboarding to establish a root of trust takes advantage of existing protocols and procedures to meet mission specific needs. The ground side key management authority and satellite can be provisioned with matching cryptographic keys. The cryptographic keys can be stored in a secure hardware module associated with the ground side key management authority and a secure hardware module on the satellite.</p><p id="p-0265" num="0277">In addition, the system can use a second outer layer of encryption which uses existing protocols, such as Transport Layer Security (TLS) Public Key Infrastructure (PKI), thus guaranteeing our protocol introduces no new weaknesses in key distribution. TLS is a cryptographic protocol designed to provide communications security over a computer network. PKI is a technology for authenticating users and devices in the digital world. The purpose of a PKI is to securely associate a key with an entity.</p><p id="p-0266" num="0278">Attacks at Terminators</p><p id="p-0267" num="0279">In many network configurations used in space communications, encryption approaches change between each link. For example, the Mission Control to Ground Station encryption differs from Ground Station to Satellite encryption. In this approach, data must be decrypted and re-encrypted at the ground station. Each time decryption happens, a new opportunity opens up for attackers to gain access. In response, the system uses an end-to-end approach with protects data even as it passes from one link type to another, internet ground network to L or X band, for example; meaning only the intended final recipient and the asset are privy to confidential data. In other words, the data may not be decrypted between the endpoints.</p><p id="p-0268" num="0280">The L band is the Institute of Electrical and Electronics Engineers (IEEE) designation for the range of frequencies in the radio spectrum from 1 to 2 gigahertz (GHz).</p><p id="p-0269" num="0281">The X band is the designation for a band of frequencies in the microwave radio region of the electromagnetic spectrum. In some cases, such as in communication engineering, the frequency range of the X band is rather indefinitely set at approximately 7.0-11.2 GHz. In radar engineering, the frequency range is specified by the Institute of Electrical and Electronics Engineers (IEEE) at 8.0-12.0 GHz. The X band is used for radar, satellite communication, and wireless computer networks.</p><p id="p-0270" num="0282">Attacks in the Control Plane</p><p id="p-0271" num="0283">Eavesdropping</p><p id="p-0272" num="0284">Adversaries who gain access to the control plane are in most systems able to see all commands, telemetry, and collections related to associated assets. In practice, most points in the control plane need only limited access to observe the data. The use of differentiated keys in the system for each concern, such as commands, telemetry, and collections, and/or each communication link in each concern means that access is limited to only what is strictly necessary.</p><p id="p-0273" num="0285">Integrity and Completeness</p><p id="p-0274" num="0286">In a communications system, faithfully and completely communicating data by forwarding parities is important. If an adversary in the control plane can modify or drop messages, then any trust in any part of the system is difficult to establish. The system uses cryptographic MACs on all messages and monotonic sequence numbering to make any manipulation tampering evident and fail closed.</p><p id="p-0275" num="0287">Temporal Authority</p><p id="p-0276" num="0288">A control that implements temporal authority is one where the authority is granted for a limited, possibly future, interval. Common approaches to key management usually lead to a violation of temporal authority restrictions. For example, a ground station which is given a key to communicate with a satellite for one pass can use the key to talk with the satellite on subsequent and prior passes even if it was not commanded to do so. The disclosed system prevents this from happening by, for example, using clocks and tokens, as described herein. With the OrbitSecure protocol, the utilization of agile re-keying allows each key to remain valid for only a single pass (or access within a pass), preventing the use of a key outside of its intended scope.</p><p id="p-0277" num="0289">Command Authorization</p><p id="p-0278" num="0290">In the traditional approach to on-board command scheduling, an asset will accept any schedule entries transmitted by any party which knows the radio channel encryption keys. In most cases these transmitting parties are entities such as ground stations which are authorized only to relay commands from mission control. In practice, there are often no controls to enforce this&#x2014;allowing an attacker-compromised ground station to issue commands of the attacker's choosing.</p><p id="p-0279" num="0291">The system solves this issue by having all commands issued from mission control use unforgeable authenticators, such as cryptographic keys, which can be validated by the controlled device. This limits the commands that a ground station can successfully transmit to only those issued by mission control.</p><p id="p-0280" num="0292">Replay Attacks</p><p id="p-0281" num="0293">Even if commands include unforgeable authenticators, it is important that a command can only be received by an asset once; otherwise an adversary in the control plane can build a catalog of commands which it can replay at will in order to reach its goals. The OrbitSecure command protocol includes replay protection so that each command is processed only once, and in the intended order, to prevent replay and other attacks. The replay protection is achieved by using a sequence clock such as a monotonic counter or by using hash chaining where each command includes the cryptograph hash of the previous command. The choice of sequence lock or hash chaining depends on the capabilities of the hardware and mission requirements.</p><p id="p-0282" num="0294">Attacks in the Processing Segment</p><p id="p-0283" num="0295">Poisoned Data and Product Chains</p><p id="p-0284" num="0296">If any error, corruption, or anomaly is discovered in a data product, it is often challenging to track down and inform consumers of derived products. This is made even more challenging in an environment where audit teams may not be authorized to know some or all of the final data products produced. The OrbitSecure protocol, deployed at the processing segment, allows for products to be cryptographically hashed for tracking of provenance through the data lifecycle. Further, the algorithms executed on both the raw and processed data can be stored on the processing ledger, thereby cryptographically assuring the algorithms themselves, their change over time, and the products generated from their use. Users of the OrbitSecure protocol would be able to know what products were processed, by which algorithms, and the version of that algorithm used. Further, the audit trail can be held at a different level than the data products; thus, you avoid needing compensating controls to prevent auditors from accessing products for which they should not have access.</p><p id="p-0285" num="0297">The processing ledger can be a block chain, akin to the team linear sequence <b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b>, <b>310</b></figref> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the space linear sequence <b>210</b> in <figref idref="DRAWINGS">FIG. <b>2</b>, <b>300</b></figref> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and/or the clock block chain <b>1600</b> and <figref idref="DRAWINGS">FIGS. <b>16</b>A-<b>16</b>B</figref>. The processing ledger can store encrypted information about what data was processed, when was the data processed, which algorithms were used in processing the data and the version of the algorithm used.</p><heading id="h-0025" level="2">Trust Doesn't Exist</heading><p id="p-0286" num="0298">OrbitSecure protocol prevents unauthorized access, provides explicit channel membership, and end-to-end encryption backed with private ledger guarantees integrity. As explained herein, man-in-the-middle attacks are prevented, only endpoints can maintain keys. Orbit secure protocol is a true no-knowledge system.</p><heading id="h-0026" level="2">OrbitSecure Protocol</heading><p id="p-0287" num="0299">OrbitSecure protocol can work with existing assets&#x2014;no hardware encryption is needed. Sharing and trust can be added or removed in seconds or less. OrbitSecure protocol can work on ATAC (Automatic Targeting Attack Communicator) or similar systems. OrbitSecure protocol provides for straight forward Mission Partner sharing, allows for secure, trusted handoff of C2 between operators, and allows for U.S. Government (USG) entities to securely receive commercial data from commercially operated sensor. OrbitSecure protocol can provide pixel provenance.</p><p id="p-0288" num="0300"><figref idref="DRAWINGS">FIGS. <b>28</b>-<b>30</b></figref> show architectures of the system using a commercial satellite. <figref idref="DRAWINGS">FIG. <b>28</b></figref> shows a flow of data endpoint-to-endpoint. <figref idref="DRAWINGS">FIG. <b>29</b></figref> shows how the data flow shown in <figref idref="DRAWINGS">FIG. <b>28</b></figref> can be attacked at multiple points in the commercial satellite architecture. <figref idref="DRAWINGS">FIG. <b>30</b></figref> shows potential points in the commercial satellite architecture in <figref idref="DRAWINGS">FIG. <b>28</b></figref>, where encryption can be applied to increase authority, identity, integrity, and confidentiality of the user data.</p><p id="p-0289" num="0301"><figref idref="DRAWINGS">FIG. <b>31</b></figref> shows a use of OrbitSecure protocol to ensure authority, identity, integrity, and confidentiality throughout the data lifecycle. The OrbitSecure protocol communicates using the block chain approach described in this application to provide cryptographic keys to devices <b>3110</b>, <b>3130</b>, <b>3140</b> who have authorization to access some type of data on the satellite <b>3120</b> at a given time. Each type of data and time will have distinct keys.</p><p id="p-0290" num="0302">The data is encrypted end to end, and only accessible to devices <b>3110</b>, <b>3120</b>, <b>3130</b>, <b>3140</b>.</p><p id="p-0291" num="0303">The server <b>3100</b> can securely distribute the key material, such as cryptographic keys, key generation materials. The server <b>3100</b> can distribute the key material to various system elements such as the initiating device <b>3110</b>, the commercial satellite operator <b>3120</b>, the processing segment <b>3130</b> and the end customer <b>3140</b>.</p><p id="p-0292" num="0304">A key schedule is an algorithm that calculates all round keys from an original key, which can be distributed by the server <b>3100</b>. In a key schedule, ciphering and deciphering of data is typically done as an iteration of rounds. The setup for each round is generally the same, except for round-specific fixed values called a round indicator, and round-specific data derived from the cipher key called a round key. In the initial round, the round key can be the original key. After N-round key (where N is an integer) is used, the round indicator, N, can be increased, and the next round key, e.g. N+1-round key, can be calculated based on the round indicator, and data derived from the N-round key.</p><p id="p-0293" num="0305"><figref idref="DRAWINGS">FIG. <b>32</b></figref> shows a logical view of the data flow through the system. The un-trusted assets such as antenna <b>3200</b> and public cloud <b>3210</b> see only cipher text blocks. In some embodiments, the antenna <b>3200</b> can have access to telemetry data.</p><p id="p-0294" num="0306">In step 1, ground segment receives user collection requests as input. In step 2, processing segment calls OrbitSecure protocol service. OrbitSecure protocol uses the ground segment key and the on-orbit asset key to derive multiple collection keys, by, for example, using a key derivation function. In step 3, the collection keys themselves are encrypted against the public key of the on-orbit asset.</p><p id="p-0295" num="0307">In step 4, collection schedule and associated collection keys are transmitted to the on-orbit asset <b>3220</b> through untrusted infrastructure. The collection schedule and the associated collection keys can include one or more keys to use for each of the scheduled activities. All data associated with each activity is encrypted with the appropriate key. In contrast, current satellite operation encrypts data using the point to point encryption provided by the radio links. The satellite <b>3220</b> operates according to a schedule. A computer on the satellite <b>3220</b> has a schedule that has entries like:<ul id="ul0009" list-style="none">    <li id="ul0009-0001" num="0000">    <ul id="ul0010" list-style="none">        <li id="ul0010-0001" num="0308">12:50 jan 12 2012: turn on main payload</li>        <li id="ul0010-0002" num="0309">13:00 jan 12 2021: point camera at NYC</li>        <li id="ul0010-0003" num="0310">13:05 jan 12 2021: turn on camera for 10 minutes</li>        <li id="ul0010-0004" num="0311">13:20 jan 12 2012: point camera at Washington D.C., etc.</li>        <li id="ul0010-0005" num="0312">13:30 jan 12 2012: turn on camera for 5 minutes, etc.</li>    </ul>    </li></ul></p><p id="p-0296" num="0313">The current system extends the operation of the satellite by adding a unique cryptographic key to use when recording information associated with each of the above commands. When the data is encrypted using the unique cryptographic key, only holders of keys can make use of the encrypted data. Each data collection in the above schedule can correspond to one round in the key schedule. For example, the data collected at entry at 13:05, recording NYC for 10 minutes, can be encrypted with the M-round key, while the data collected at entry 13:30, recording Washington D.C. for 5 minutes, can be encrypted with the M+1 round key.</p><p id="p-0297" num="0314">In step 5, the on-orbit asset <b>3220</b> now has unique collection keys for each upcoming collect in the next pass. The next pass can occur within a predetermined time window, such as the next hour, next day, next week, next month, etc. The next pass can occur according to the schedule listed above. In step 6, the on-orbit asset <b>3220</b> performs collection, and encrypts the collected data with the appropriate key.</p><p id="p-0298" num="0315">In step 7, after the on-orbit asset <b>3220</b> has performed the collection, the on-orbit asset <b>3220</b> downlinks the data back to the ground segment. In step 8, upon receipt of the payload data the processing segment <b>3230</b> associated with an individual collect receives the ciphertext relevant to the individual collect. In step 9, the processing segment <b>3230</b> decrypts the collections and creates finished products.</p><p id="p-0299" num="0316">In step 10, end users are setup on individual distribution channels with unique channel session keys, as described in this application. The end users' keys can be calculated using the key schedule. In step 11, finished products are disseminated to end users using appropriate channel session keys.</p><p id="p-0300" num="0317"><figref idref="DRAWINGS">FIG. <b>33</b></figref> shows a processing segment. The processing segment <b>3300</b> can provide information necessary to determine pixel provenance. In other words, the processing segment <b>3300</b> can provide information to track the per pixel properties of an image, where the properties can include pixel origin, processing, transmission, etc.</p><p id="p-0301" num="0318">The system extends trust to the processing segment <b>3300</b> in a unique way. The processing segment <b>3300</b> can be gated by the OrbitSecure protocol, which can only provide access to the processing segment <b>3300</b> based on policy. Processing performed on the image, such as algorithms applied, can be stored in a linear record, such as a block chain. The images which are generated are cryptographically hashed. Consequently, all output products have an irrefutable history recorded in the secure block chain. Any downstream image issues can be traced.</p><p id="p-0302" num="0319"><figref idref="DRAWINGS">FIG. <b>34</b></figref> shows a shared hybrid space architecture. In this scenario, OrbitSecure protocol is used to secure the C2 and downlink of payload data to the government in a shared hybrid space architecture. In this shared use-case, the commercial operator ground segment <b>3400</b> commands the on-orbit asset <b>3410</b>, but the on-orbit asset <b>3410</b> later communicates with the government <b>3420</b> to downlink the data which the government <b>3420</b> initially requested for collection. Using OrbitSecure protocol allows this collaboration to happen without the commercial entity requiring Type-1 Encryptors. The Government is owner of the channel used and must approve/validate new entrants onto existing or new channels.</p><p id="p-0303" num="0320"><figref idref="DRAWINGS">FIG. <b>35</b></figref> shows how an autonomous vehicle can be securely controlled using the disclosed system. In this scenario, User A is controlling and operating a trusted autonomous vehicle <b>3500</b>, such as an unmanned aerial vehicle (UAV), in the field. User A has responsibility for flight operations. User A needs to perform hand-over to User B, and/or handover is requested by secondary operator, User B. User A and User B perform handover approval across available untrusted network <b>3510</b>. User B is now in control of airborne asset <b>3500</b>. User A remains as mission owner and can pull back control as needed.</p><heading id="h-0027" level="2">Flow Diagram</heading><p id="p-0304" num="0321"><figref idref="DRAWINGS">FIG. <b>36</b></figref> is a flowchart of a method to encrypt communication between a terrestrial operator and an extraterrestrial object. The terrestrial operator can be the server <b>3100</b> in <figref idref="DRAWINGS">FIG. <b>31</b></figref>, the initiating device <b>3110</b> in <figref idref="DRAWINGS">FIG. <b>31</b></figref>, the processing segment <b>3130</b> in <figref idref="DRAWINGS">FIG. <b>31</b></figref>, and/or the end customer <b>3140</b> in <figref idref="DRAWINGS">FIG. <b>31</b></figref>.</p><p id="p-0305" num="0322">The extraterrestrial object can be a satellite, a spacecraft, an airplane, an unmanned aerial vehicle, an autonomous vehicle, an autonomous object, etc., such as the commercial satellite operator <b>3120</b> in <figref idref="DRAWINGS">FIG. <b>31</b></figref>, and/or the unmanned aerial vehicle <b>3500</b> in <figref idref="DRAWINGS">FIG. <b>35</b></figref>.</p><p id="p-0306" num="0323">In step <b>3600</b>, a hardware or a software processor executing instructions described in this application can obtain an initial cryptographic key and a procedure to iteratively calculate a sequence of cryptographic keys. The initial cryptographic key and the procedure are distributed to the terrestrial operator and the extraterrestrial object. The initial cryptographic key and the procedure can be distributed during manufacture or can be communicated using a public key cryptography.</p><p id="p-0307" num="0324">In one embodiment, the procedure can be a schedule with a fixed set of managed keys, over which the procedure iterates based on a round indicator. For example, the set of managed keys can be a sequence of keys from 1 to 100, where 1 to 100 indicates a round indicator. Each communication between the terrestrial operator and the extraterrestrial object can correspond to one key in the sequence of keys. For example, the initial communication can correspond to key 1, the tenth communication can correspond to key 10, etc. Upon reaching communication 101, the key to encrypt the one hundred and first communication can go back to key 1.</p><p id="p-0308" num="0325">In another embodiment, the procedure can use an initial key, e.g. a root key, and a KDF. KDF is an algorithm that calculates all round keys from the initial key, which can be distributed to the terrestrial operator and the extraterrestrial object by the server. In a key schedule, ciphering and deciphering of data is typically done as an iteration of rounds. KDF is a cryptographic hash function that derives one or more secret keys from a secret value such as a main key, a password, or a passphrase using a pseudorandom function. KDFs can be used to stretch keys into longer keys or to obtain keys of a required format, such as converting a group element that is the result of a Diffie Hellman key exchange into a symmetric key for use with AES.</p><p id="p-0309" num="0326">In step <b>3610</b>, the processor can encrypt a first communication between the terrestrial operator and the extraterrestrial object using a first cryptographic key in the sequence of cryptographic keys. The first cryptographic key in the sequence of cryptographic keys is obtained based on the initial cryptographic key. For example, the first cryptographic key can be the initial key, or the first cryptographic key can be calculated from the initial key using the procedure and can be key 1 in the sequence of cryptographic keys.</p><p id="p-0310" num="0327">In step <b>3620</b>, the processor can rotate the keys by calculating a second cryptographic key prior to sending a second communication between the terrestrial operator and the extraterrestrial object. The processor can use the procedure to calculate the second cryptographic key based on a round indicator, and the initial cryptographic key. The round indicator represents a place of the second cryptographic key in the sequence of cryptographic keys. The setup for each round is generally the same, except for round-specific fixed value, the round indicator, and round-specific data derived from the round key. In the initial round, the round key can be the initial key. After N-round key (where N is an integer) is used, the round indicator, N, can be increased, and the next round key, e.g. N+1-round key, can be calculated based on the round indicator, and data derived from the N-round key.</p><p id="p-0311" num="0328">In step <b>3630</b>, the processor can encrypt a second communication between the terrestrial operator and the extraterrestrial object using the second cryptographic key in the sequence of cryptographic keys. In step <b>3640</b>, the processor can send the first communication and the second communication between the terrestrial operator and the extraterrestrial object.</p><p id="p-0312" num="0329">To communicate between the extraterrestrial object and the terrestrial operator, the processor can create a communication channel, such as a radio frequency channel. There can be multiple channels between the extraterrestrial object and the terrestrial operator, and each channel can be specific to a particular pair of the extraterrestrial object and the terrestrial operator. In addition, a particular pair of the extraterrestrial object and the terrestrial operator can have multiple channels established between them. For example, one channel can carry metadata only, another channel can carry mission data, a third channel can carry telemetry from the extraterrestrial object, etc.</p><p id="p-0313" num="0330">The processor can append to a block chain a first block defining an authority of the terrestrial operator, where the first authority defines at least an operation associated with the terrestrial operator to perform on a first communication or a second communication transmitted via the communication channel. The operation can include listening to a channel, sending communication via the channel, accessing metadata associated with the channel, adding an additional communicator to the channel, etc.</p><p id="p-0314" num="0331">The processor can also append to a block chain a second block defining an authority of the extraterrestrial object, where the second authority defines at least an operation associated with the extraterrestrial object to perform on a first communication or a second communication transmitted via the communication channel.</p><p id="p-0315" num="0332">The processor can grant access to the communication channel to the terrestrial operator and the extraterrestrial object by determining that the first authority associated with the terrestrial operator and the second authority associated with the extraterrestrial object grants them access to the communication channel. To determine the authority, the processor can compute the first and the second authority by checking the block chain from an initial block to a last block and/or the policy associated with a block chain, as described in this application.</p><p id="p-0316" num="0333">The extraterrestrial object can perform data collections, such as recording pictures of particular locations on Earth from the orbit. In one embodiment, the processor can associate a cryptographic key in the sequence of cryptographic keys with each data collection performed by the extraterrestrial object, where the multiple data collections are arranged sequentially. The processor can establish a correspondence between the sequence of data collections and the sequence of keys. The processor can encrypt a data collection with the cryptographic key. The processor can select a subsequent cryptographic key in the sequence of cryptographic keys, and encrypt a subsequent data collection in the multiple data collections with the subsequent cryptographic key. When the data is encrypted using the unique cryptographic key, only holders of keys can make use of the encrypted data.</p><p id="p-0317" num="0334">In another embodiment, the extraterrestrial object and the terrestrial operator can utilize a single cryptographic key or key pair to communicate with each other, and to encrypt multiple data collections. The route of the encrypted communication between the extraterrestrial object and the terrestrial operator can be part of the metadata recorded on the block chain. The route can include public networks, outsourced ground segments, other extraterrestrial objects, etc. The route can vary depending on availability, security, and speed of communication.</p><p id="p-0318" num="0335">To obtain the initial cryptographic key and the procedure to iteratively calculate the sequence of cryptographic keys, the processor can obtain the initial cryptographic key encrypted based on a public key of the extraterrestrial object, and can obtain the procedure including a KDF. The initial cryptographic key and/or the sequence of cryptographic keys can be encrypted against the public key of the extraterrestrial object, such as the public key of the on-orbit asset. The so encrypted keys can be communicated to both the extraterrestrial object and the terrestrial operator via a public network.</p><p id="p-0319" num="0336">The processor can store an operation executed on a communication between the terrestrial operator and the extraterrestrial object on a block chain, thereby enabling retrieval of the communication, the operation used on the communication, and a version of the operation executed on the communication. The operation can be encrypted prior to being stored on the block chain. The operation can be an algorithm such as an image processing algorithm. Anyone accessing the block chain would know what products were processed, by which algorithms, and the versions of those algorithms used. For example, recording encrypted images on the block chain, the algorithms used on the encrypted images, and their outputs can provide pixel provenance for each image. Provenance analysis provides a snapshot of the chronology and validity of content as it is uploaded, re-uploaded, and modified over time. Pixel provenance can provide provenance analysis on per-pixel basis. For example, pixel provenance can be used to determine when a pixel was added to the image, an operation used to add the pixel to the image, and/or an author of the pixel. To perform the analysis, the processor can utilize other related images and their contents, knowledge about available image editing tools over time, and/or image or video metadata such as timestamps, geotags, and camera IDs.</p><p id="p-0320" num="0337">In one embodiment, the processor can prevent a replay attack using key rotation based on time. Replay attack occurs when an attacker records an encrypted communication between the terrestrial operator and the satellite and replays the encrypted communication at a later time. The processor can enable the first cryptographic key within a predetermined timeframe, where the time is measured using a block chain clock as described in this application. The processor can receive the first communication encrypted with the first cryptographic key. Upon receiving the first communication encrypted with the first cryptographic key, the processor can determine whether the first communication is received during the predetermined timeframe. If the first communication is received during the predetermined timeframe, the processor can decrypt the communication, and if the communication contains an instruction, execute the instruction. However, upon determining that the first communication is not received within the predetermined timeframe, the processor can disregard the first communication.</p><p id="p-0321" num="0338">In another embodiment, to prevent the replay attack, the processor can use a token, as described in this application. The token can indicate the round of the encryption key used to encrypt the message. If the round and the encryption key do not match, or if the round does not correspond to the round expected by the terrestrial operator and/or the extraterrestrial object, the processor can disregard the communication.</p><p id="p-0322" num="0339">In another embodiment, to prevent the replay attack, the processor can create a sequence of communications including the first communication and the second communication, where a subsequent communication in the sequence of communications includes a hash of the sequence of communications. The processor can receive a communication in the sequence of communications. The processor can determine whether the communication in the sequence of communications contains the hash of the sequence of previous communications. Upon determining that the communication does not contain the hash of the sequence of communications, the processor can disregard the communication. For example, in a replay attack, Nth communication in the sequence of communications contains a hash of N&#x2212;1 previous communications. If the attacker replays the Nth communication, the replay will contain the hash of N&#x2212;1 previous communications. However, because the replayed communication is N+1st communication, the replay should contain a hash of N previous communications. The processor can detect that the hash does not contain the Nth communication, and can disregard the replayed communication.</p><p id="p-0323" num="0340">The processor can send a communication between the terrestrial operator and the extraterrestrial object, where the communication includes a command for the extraterrestrial object, a telemetry data from the extraterrestrial object, or a mission data from the extraterrestrial object. The processor can use a different initial cryptographic key and/or a different procedure to iteratively calculate the sequence of cryptographic keys for each: the command for the extraterrestrial object, the telemetry data from the extraterrestrial object, or the mission data from the extraterrestrial object.</p><p id="p-0324" num="0341">The processor can create a communication channel between the terrestrial operator and the extraterrestrial object. The communication channel can be based on a sensor type, a country code, or a requester. The processor can grant access to the communication channel based on a policy stored in a block chain associated with the communication channel.</p><p id="p-0325" num="0342"><figref idref="DRAWINGS">FIG. <b>37</b></figref> is a flowchart of a method to securely communicate between two communication endpoints. The communication endpoints can be terrestrial, extraterrestrial, or a combination of both. In step <b>3700</b>, a processor can obtain an indication of multiple rotating cryptographic keys, where the multiple rotating cryptographic keys are distributed to a first communicator and a second communicator. The indication of multiple rotating cryptographic keys can include an initial cryptographic key and a procedure to iteratively calculate a sequence of cryptographic keys. The procedure can include multiple cryptographic keys and a schedule according to which multiple cryptographic keys should be used. For example, the procedure can include a linear list of cryptographic keys, and the schedule can contain instructions to retrieve the cryptographic keys from the linear list in a sequence. Alternatively, the procedure can be a KDF that calculates the next cryptographic key based on the round indicator and the previous or initial cryptographic key. The processor can obtain the initial cryptographic key and/or the procedure encrypted using a public key of the first or the second communicator.</p><p id="p-0326" num="0343">In step <b>3710</b>, the processor can create a communication channel between a first communicator and a second communicator. The communication channel can be a radiofrequency channel.</p><p id="p-0327" num="0344">In step <b>3720</b>, the processor can append to a block chain a first block defining a first authority of the first communicator. The first authority can define at least a first operation associated with the first communicator to perform on a first communication or a second communication transmitted via the communication channel.</p><p id="p-0328" num="0345">In step <b>3730</b>, the processor can append to a block chain a second block defining a second authority of the second communicator. The second authority can define at least a second operation associated with the second communicator to perform on a first communication or a second communication transmitted via the communication channel. The first and the second operation can include reading an encrypted communication associated with the communication channel, sending a communication via the communication channel, reading an encrypted communication associated with the communication channel, adding another communicator to the channel, etc.</p><p id="p-0329" num="0346">In step <b>3740</b>, the processor can grant access to the communication channel to the first communicator and the second communicator by determining that the first authority associated with the first communicator and the second authority associated with the second communicator grants access to the communication channel. To determine the first authority and the second authority, the processor can compute the first and the second authority by checking the block chain from an initial block to a last block, as described in this application, for example in <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0330" num="0347">In step <b>3750</b>, the processor can encrypt multiple communications sent via the communication channel using the multiple rotating cryptographic keys. The processor can send the communications via the communication channel. To utilize the multiple rotating cryptographic keys, the processor can encrypt the first communication using a first cryptographic key in the sequence of cryptographic keys, where the first cryptographic key in the sequence of cryptographic keys is obtained based on the initial cryptographic key. The processor can calculate a second cryptographic key prior to sending a second communication between the first and the second communicator. To calculate the second cryptographic key, the processor can use the procedure which takes as input the round indicator, the initial cryptographic key, or the previous cryptographic key, and produces the second cryptographic key. The round indicator represents a place of the second cryptographic key in the sequence of cryptographic keys. The processor can encrypt a second communication between the first communicator and the second communicator using the second cryptographic key in the sequence of cryptographic keys.</p><p id="p-0331" num="0348">The processor can associate a cryptographic key in the sequence of cryptographic keys with a data collection among multiple data collections performed by the second communicator, where the multiple data collections are arranged in a sequence of data collections. The processor can encrypt the data collection with the cryptographic key. The processor can select a subsequent cryptographic key in the sequence of cryptographic keys and encrypt a subsequent data collection among the multiple data collections with the subsequent cryptographic key.</p><p id="p-0332" num="0349">The processor can store an operation executed on a communication between the first communicator and the second communicator on a block chain, thereby enabling retrieval of the communication, the operation used on the communication, and a version of the operation executed on the communication. The operation can be an algorithm executed on both the raw and the processed data. The operation can be stored on the processing ledger, thereby cryptographically assuring the algorithms themselves, their change over time, and the products generated from their use. Users of the OrbitSecure protocol would be able to know what products were processed, by which algorithms, and the versions of those algorithms used. OrbitSecure protocol can provide pixel provenance.</p><p id="p-0333" num="0350">The processor can enable the first cryptographic key within a predetermined timeframe. The processor can receive the first communication encrypted with the first cryptographic key. Upon receiving the first communication encrypted with the first cryptographic key, the processor can determine whether the first communication is received during the predetermined timeframe. Upon determining that the first communication is not received within the predetermined timeframe, the processor can disregard the first communication.</p><p id="p-0334" num="0351">The processor can prevent replay attacks by creating a sequence of communications including the first communication and the second communication, wherein a subsequent communication in the sequence of communications includes a hash of the sequence of communications. Upon receiving a communication in the sequence of communications, the processor can determine whether the communication in the sequence of communications contains the hash of the sequence of communications. Upon determining that the communication does not contain the hash of the sequence of communications, the processor can disregard the communication.</p><p id="p-0335" num="0352">The processor can send a communication between the first communicator and the second communicator. The communication can include a command for the second communicator, a telemetry data from the second communicator, or a mission data from the second communicator. The processor can use a different initial cryptographic key and/or a different procedure to iteratively calculate the sequence of cryptographic keys for each of the command for the second communicator, the telemetry data from the second communicator, or the mission data from the second communicator.</p><p id="p-0336" num="0353">The processor can create a communication channel between the first and the second communicator, where the communication channel is based on a sensor type, a country code, or a requester. The processor can grant access to the communication channel based on a policy stored in a block chain associated with the communication channel.</p><heading id="h-0028" level="2">Computer</heading><p id="p-0337" num="0354"><figref idref="DRAWINGS">FIG. <b>38</b></figref> is a diagrammatic representation of a machine in the example form of a computer system <b>3800</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies or modules discussed herein, may be executed.</p><p id="p-0338" num="0355">In the example of <figref idref="DRAWINGS">FIG. <b>38</b></figref>, the computer system <b>3800</b> includes a processor, memory, non-volatile memory, and an interface device. Various common components (e.g., cache memory) are omitted for illustrative simplicity. The computer system <b>3800</b> is intended to illustrate a hardware device on which any of the components described in the example of <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>37</b></figref> (and any other components described in this specification) can be implemented. The computer system <b>3800</b> can be of any applicable known or convenient type. The components of the computer system <b>3800</b> can be coupled together via a bus or through some other known or convenient device.</p><p id="p-0339" num="0356">The computer system <b>3800</b> can represent the server such as <b>100</b> in <figref idref="DRAWINGS">FIG. <b>1</b>, <b>750</b></figref> in <figref idref="DRAWINGS">FIG. <b>7</b>, <b>1000</b></figref> and <figref idref="DRAWINGS">FIG. <b>10</b>A, <b>1140</b></figref> in <figref idref="DRAWINGS">FIGS. <b>11</b>A-C</figref>, <b>1400</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1500</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The computer system <b>3800</b> can represent the devices, such as <b>110</b>-<b>116</b> <figref idref="DRAWINGS">FIG. <b>1</b>, <b>700</b>-<b>720</b></figref> in <figref idref="DRAWINGS">FIG. <b>7</b>, <b>1010</b>-<b>1030</b></figref> in <figref idref="DRAWINGS">FIG. <b>10</b>A, <b>1100</b>-<b>1120</b></figref> in <figref idref="DRAWINGS">FIGS. <b>11</b>A-<b>11</b></figref> C, <b>1440</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1540</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b>, <b>1450</b></figref> <figref idref="DRAWINGS">FIG. <b>15</b>, <b>1550</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref>. The processor of the system <b>3800</b> can perform the various methods and instructions described in this application, for example, methods described in <figref idref="DRAWINGS">FIGS. <b>36</b>-<b>37</b></figref>. The main memory, nonvolatile memory, and/or the drive unit of the system <b>3800</b> can store the instructions to be performed by the processor. The devices <b>1110</b>-<b>1160</b>, <b>700</b>-<b>720</b>, <b>1010</b>-<b>1030</b>, <b>1100</b>-<b>1120</b>, and the server <b>100</b>, <b>750</b>, <b>1000</b>, <b>1140</b>, <b>1400</b>, <b>1500</b>, <b>1440</b>, <b>1540</b> can communicate with each other using the network interface device of the system <b>3800</b>. For example, the token <b>1480</b>, <b>1494</b> in <figref idref="DRAWINGS">FIG. <b>14</b>, <b>1580</b>, <b>1594</b></figref> in <figref idref="DRAWINGS">FIG. <b>15</b></figref> can be communicated via the network interface of the system <b>3800</b>. The network interface device of the computer system <b>3800</b> can facilitate communication between the terrestrial operator and the extraterrestrial object.</p><p id="p-0340" num="0357">This disclosure contemplates the computer system <b>3800</b> taking any suitable physical form. As example and not by way of limitation, computer system <b>3800</b> may be an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a mobile telephone, a personal digital assistant (PDA), a server, or a combination of two or more of these. Where appropriate, computer system <b>3800</b> may include one or more computer systems <b>3800</b>; be unitary or distributed; span multiple locations; span multiple machines; or reside in a cloud, which may include one or more cloud components in one or more networks. Where appropriate, one or more computer systems <b>3800</b> may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more computer systems <b>3800</b> may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more computer systems <b>3800</b> may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.</p><p id="p-0341" num="0358">The processor may be, for example, a conventional microprocessor such as an Intel Pentium microprocessor or Motorola power PC microprocessor. One of skill in the relevant art will recognize that the terms &#x201c;machine-readable (storage) medium&#x201d; or &#x201c;computer-readable (storage) medium&#x201d; include any type of device that is accessible by the processor.</p><p id="p-0342" num="0359">The memory is coupled to the processor by, for example, a bus. The memory can include, by way of example but not limitation, random access memory (RAM), such as dynamic RAM (DRAM) and static RAM (SRAM). The memory can be local, remote, or distributed.</p><p id="p-0343" num="0360">The bus also couples the processor to the non-volatile memory and drive unit. The non-volatile memory is often a magnetic floppy or hard disk, a magnetic-optical disk, an optical disk, a read-only memory (ROM), such as a CD-ROM, EPROM, or EEPROM, a magnetic or optical card, or another form of storage for large amounts of data. Some of this data is often written, by a direct memory access process, into memory during execution of software in the computer <b>3800</b>. The non-volatile storage can be local, remote, or distributed. The non-volatile memory is optional because systems can be created with all applicable data available in memory. A typical computer system will usually include at least a processor, memory, and a device (e.g., a bus) coupling the memory to the processor.</p><p id="p-0344" num="0361">Software is typically stored in the non-volatile memory and/or the drive unit. Indeed, storing and entire large program in memory may not even be possible. Nevertheless, it should be understood that for software to run, if necessary, it is moved to a computer readable location appropriate for processing, and for illustrative purposes, that location is referred to as the memory in this paper. Even when software is moved to the memory for execution, the processor will typically make use of hardware registers to store values associated with the software, and local cache that, ideally, serves to speed up execution. As used herein, a software program is assumed to be stored at any known or convenient location (from non-volatile storage to hardware registers) when the software program is referred to as &#x201c;implemented in a computer-readable medium.&#x201d; A processor is considered to be &#x201c;configured to execute a program&#x201d; when at least one value associated with the program is stored in a register readable by the processor.</p><p id="p-0345" num="0362">The bus also couples the processor to the network interface device. The interface can include one or more of a modem or network interface. It will be appreciated that a modem or network interface can be considered to be part of the computer system <b>3800</b>. The interface can include an analog modem, isdn modem, cable modem, token ring interface, satellite transmission interface (e.g. &#x201c;direct PC&#x201d;), or other interfaces for coupling a computer system to other computer systems. The interface can include one or more input and/or output devices. The I/O devices can include, by way of example but not limitation, a keyboard, a mouse or other pointing device, disk drives, printers, a scanner, and other input and/or output devices, including a display device. The display device can include, by way of example but not limitation, a cathode ray tube (CRT), liquid crystal display (LCD), or some other applicable known or convenient display device. For simplicity, it is assumed that controllers of any devices not depicted in the example of <figref idref="DRAWINGS">FIG. <b>38</b></figref> reside in the interface.</p><p id="p-0346" num="0363">In operation, the computer system <b>3800</b> can be controlled by operating system software that includes a file management system, such as a disk operating system. One example of operating system software with associated file management system software is the family of operating systems known as Windows&#xae; from Microsoft Corporation of Redmond, Wash., and their associated file management systems. Another example of operating system software with its associated file management system software is the Linux&#x2122; operating system and its associated file management system. The file management system is typically stored in the non-volatile memory and/or drive unit and causes the processor to execute the various acts required by the operating system to input and output data and to store data in the memory, including storing files on the non-volatile memory and/or drive unit.</p><p id="p-0347" num="0364">Some portions of the detailed description may be presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0348" num="0365">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as &#x201c;processing&#x201d; or &#x201c;computing&#x201d; or &#x201c;calculating&#x201d; or &#x201c;determining&#x201d; or &#x201c;displaying&#x201d; or &#x201c;generating&#x201d; or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.</p><p id="p-0349" num="0366">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the methods of some embodiments. The required structure for a variety of these systems will appear from the description below. In addition, the techniques are not described with reference to any particular programming language, and various embodiments may thus be implemented using a variety of programming languages.</p><p id="p-0350" num="0367">In alternative embodiments, the machine operates as a standalone device or may be connected (e.g., networked) to other machines. In a networked deployment, the machine may operate in the capacity of a server or a client machine in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment.</p><p id="p-0351" num="0368">The machine may be a server computer, a client computer, a personal computer (PC), a tablet PC, a laptop computer, a set-top box (STB), a personal digital assistant (PDA), a cellular telephone, an iPhone, a Blackberry, a processor, a telephone, a web appliance, a network router, switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine.</p><p id="p-0352" num="0369">While the machine-readable medium or machine-readable storage medium is shown in an exemplary embodiment to be a single medium, the term &#x201c;machine-readable medium&#x201d; and &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-readable medium&#x201d; and &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies or modules of the presently disclosed technique and innovation.</p><p id="p-0353" num="0370">In general, the routines executed to implement the embodiments of the disclosure, may be implemented as part of an operating system or a specific application, component, program, object, module or sequence of instructions referred to as &#x201c;computer programs.&#x201d; The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer, and that, when read and executed by one or more processing units or processors in a computer, cause the computer to perform operations to execute elements involving the various aspects of the disclosure.</p><p id="p-0354" num="0371">Moreover, while embodiments have been described in the context of fully functioning computers and computer systems, those skilled in the art will appreciate that the various embodiments are capable of being distributed as a program product in a variety of forms, and that the disclosure applies equally regardless of the particular type of machine or computer-readable media used to actually effect the distribution.</p><p id="p-0355" num="0372">Further examples of machine-readable storage media, machine-readable media, or computer-readable (storage) media include but are not limited to recordable type media such as volatile and non-volatile memory devices, floppy and other removable disks, hard disk drives, optical disks (e.g., Compact Disk Read-Only Memory (CD ROMS), Digital Versatile Disks, (DVDs), etc.), among others, and transmission type media such as digital and analog communication links.</p><p id="p-0356" num="0373">In some circumstances, operation of a memory device, such as a change in state from a binary one to a binary zero or vice-versa, for example, may comprise a transformation, such as a physical transformation. With particular types of memory devices, such a physical transformation may comprise a physical transformation of an article to a different state or thing. For example, but without limitation, for some types of memory devices, a change in state may involve an accumulation and storage of charge or a release of stored charge. Likewise, in other memory devices, a change of state may comprise a physical change or transformation in magnetic orientation or a physical change or transformation in molecular structure, such as from crystalline to amorphous or vice versa. The foregoing is not intended to be an exhaustive list in which a change in state for a binary one to a binary zero or vice-versa in a memory device may comprise a transformation, such as a physical transformation. Rather, the foregoing is intended as illustrative examples.</p><p id="p-0357" num="0374">A storage medium typically may be non-transitory or comprise a non-transitory device. In this context, a non-transitory storage medium may include a device that is tangible, meaning that the device has a concrete physical form, although the device may change its physical state. Thus, for example, non-transitory refers to a device remaining tangible despite this change in state.</p><heading id="h-0029" level="1">REMARKS</heading><p id="p-0358" num="0375">The language used in the specification has been principally selected for readability and instructional purposes, and it may not have been selected to delineate or circumscribe the inventive subject matter. It is, therefore, intended that the scope of the invention be limited not by this Detailed Description, but rather by any claims that issue on an application based hereon. Accordingly, the disclosure of various embodiments is intended to be illustrative, but not limiting, of the scope of the embodiments, which is set forth in the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An encryption server configured to:<claim-text>obtain an initial cryptographic key and a key schedule, the initial cryptographic key and the key schedule used to generate a sequence of cryptographic keys, each cryptographic key of the sequence of cryptographic keys being generated during a respective round and each respective round being associated with:<claim-text>a respective round indicator; and</claim-text><claim-text>a respective predetermined timeframe;</claim-text></claim-text><claim-text>receive unencrypted data to be transmitted to an on-orbit asset;</claim-text><claim-text>in accordance with a predetermined timeframe, use the key schedule to determine a round indicator and to produce a cryptographic key of the sequence of cryptographic keys;</claim-text><claim-text>encrypt the unencrypted data with the cryptographic key to generate encrypted data; and</claim-text><claim-text>transmit the encrypted data through a network comprising one or more untrusted assets to the on-orbit asset, the one or more untrusted assets comprising at least one device that is accessible to devices other than the encryption server.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The encryption server of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the encryption server is communicatively coupled to an initiating device and an end customer device; and</claim-text><claim-text>the encryption server sends and receives communications from the initiating device and the end customer device.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The encryption server of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the encryption server transmits key generation material to the initiating device and the end customer device.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The encryption server of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the encryption server is further configured to:<claim-text>create a communication channel between the encryption server and the on-orbit asset; and</claim-text><claim-text>transmit metadata to the on-orbit asset through the communication channel.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The encryption server of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein:<claim-text>the communication channel comprises a plurality of radio frequency channels;</claim-text><claim-text>each radio frequency channel of the plurality of radio frequency channels is based on at least one of a sensor type, a country code, or a requester; and</claim-text><claim-text>the encryption server is further configured to grant access to the plurality of radio frequency channels based on a policy stored in a blockchain associated with the encryption server.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The encryption server of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further configured to associate the cryptographic key with a data collection of a plurality of data collections, wherein the data collection corresponds to one or more operations capable of being performed by the on-orbit asset.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The encryption server of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein:<claim-text>an indication of the data collection is received at the encryption server; and</claim-text><claim-text>the encryption server is further configured to select the cryptographic key based on the indication of the data collection.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A method for enabling cryptographic encryption, the method comprising:<claim-text>obtaining an initial cryptographic key and a key schedule usable to generate a sequence of cryptographic keys from the initial cryptographic key, each cryptographic key of the sequence of cryptographic keys being generated during a respective round and each respective round being associated with a respective round indicator;</claim-text><claim-text>obtaining data to be transmitted to an on-orbit asset;</claim-text><claim-text>using the key schedule to determine a round indicator and to produce a cryptographic key of the sequence of cryptographic keys;</claim-text><claim-text>using the cryptographic key, encrypting the data to generate encrypted data; and</claim-text><claim-text>transmitting the encrypted data through a network comprising one or more untrusted assets to the on-orbit asset.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein:<claim-text>the data to be transmitted to the on-orbit asset is first data, the cryptographic key is a first cryptographic key, the round indicator is a first round indicator, and the encrypted data is first encrypted data; and</claim-text><claim-text>the method further comprises:<claim-text>after obtaining the first data, obtaining second data to be transmitted to the on-orbit asset;</claim-text><claim-text>using the key schedule to determine a second round indicator and a second cryptographic key of the sequence of cryptographic keys;</claim-text><claim-text>using the second cryptographic key, encrypting the second data to generate second encrypted data; and</claim-text><claim-text>transmitting the second encrypted data through the network comprising the one or more untrusted assets to the on-orbit asset.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein:<claim-text>the initial cryptographic key and the key schedule are stored within a memory of the on-orbit asset; and</claim-text><claim-text>after receiving the encrypted data through the network comprising the one or more untrusted assets, the on-orbit asset uses the initial cryptographic key and the key schedule to de-encrypt the encrypted data.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising associating the cryptographic key with a data collection of a plurality of data collections, wherein the data collection corresponds to one or more operations capable of being performed by the on-orbit asset.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising:<claim-text>selecting the cryptographic key associated with the data collection in response to receiving a request to initiate performance of the one or more operations corresponding to the data collection; and</claim-text><claim-text>transmitting the cryptographic key to the on-orbit asset.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein respective cryptographic keys are automatically generated and transmitted to the on-orbit asset at a periodic time interval.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising encrypting a second cryptographic key of the sequence of cryptographic keys, wherein encrypting the second cryptographic key comprises:<claim-text>enabling the second cryptographic key within a predetermined timeframe;</claim-text><claim-text>receiving second data and determining that the second data is associated with the second cryptographic key;</claim-text><claim-text>determining whether the second data was received within the predetermined timeframe; and</claim-text><claim-text>upon determining that the second data was not received within the predetermined timeframe, disregarding the second data.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising encrypting a second cryptographic key of the sequence of cryptographic keys, wherein encrypting the second cryptographic key comprises:<claim-text>enabling the second cryptographic key within a predetermined timeframe;</claim-text><claim-text>receiving second data and determining that the second data is associated with the second cryptographic key;</claim-text><claim-text>determining whether the second data was received within the predetermined timeframe; and</claim-text><claim-text>upon determining that the second data was received within the predetermined timeframe, encrypting and transmitting the second data.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. A system comprising:<claim-text>one or more processors; and</claim-text><claim-text>a non-transitory memory coupled to the one or more processors, the non-transitory memory including instructions executable by the one or more processors to:<claim-text>obtain, from a data repository, an initial cryptographic key and a key rotation protocol, the initial cryptographic key and the key rotation protocol capable of generating a sequence of cryptographic keys;</claim-text><claim-text>during a predetermined timeframe, obtain data, from an initiating device, to be transmitted to an on-orbit asset;</claim-text><claim-text>in accordance with the predetermined timeframe and using the key rotation protocol, produce a cryptographic key of the sequence of cryptographic keys;</claim-text><claim-text>encrypt the data using the cryptographic key to generate encrypted data; and</claim-text><claim-text>transmit the encrypted data, through a network comprising one or more untrusted assets, to the on-orbit asset, the one or more untrusted assets comprising at least one device that is accessible to devices other than the one or more processors.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein:<claim-text>the data received from the initiating device is scheduled data; and</claim-text><claim-text>the scheduled data is transmitted, as the encrypted data, through the network at a time indicated by the scheduled data.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein:<claim-text>the predetermined timeframe is a first predetermined timeframe of a plurality of predetermined timeframes; and</claim-text><claim-text>the plurality of predetermined timeframes corresponds to a scheduled reception of periodic data, the periodic data corresponding to operations to be performed on the on-orbit asset.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the one or more untrusted assets are not controlled by a party in control of at least the one or more processors or the memory coupled to the one or more processors.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the key rotation protocol is at least one of:<claim-text>a schedule with a fixed set of managed keys; or</claim-text><claim-text>a root key and a key derivation function.</claim-text></claim-text></claim></claims></us-patent-application>