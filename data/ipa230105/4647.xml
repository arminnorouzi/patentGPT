<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004648A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004648</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17941945</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>57</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>73</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>572</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>577</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>73</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>74</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Firmware Integrity Check Using Silver Measurements</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16639876</doc-number><date>20200218</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11443041</doc-number></document-id></parent-grant-document><parent-pct-document><document-id><country>WO</country><doc-number>PCT/CA2018/050443</doc-number><date>20180410</date></document-id></parent-pct-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17941945</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62548815</doc-number><date>20170822</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Absolute Software Corporation</orgname><address><city>Vancouver</city><country>CA</country></address></addressbook><residence><country>CA</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>KHORUZHENKO</last-name><first-name>Eugene</first-name><address><city>Redmond</city><state>WA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Measurements of a device's firmware are made regularly and compared with prior, derived measurements. Prior measurements are derived from a set of identical firmware measurements obtained from multiple devices having the same make, model and firmware version number. The firmware integrity status is reported on a data and device security console for a group of managed endpoints. Alerts about firmware changes, which may be potential attacks on the firmware, are given automatically.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="214.71mm" wi="158.75mm" file="US20230004648A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="216.83mm" wi="158.16mm" file="US20230004648A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="216.49mm" wi="161.29mm" file="US20230004648A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.58mm" wi="166.71mm" file="US20230004648A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="213.95mm" wi="149.78mm" file="US20230004648A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The present disclosure relates to the protection of electronic devices from firmware attacks, and in particular relates to automatically deriving benchmark measurements with which to compare firmware measurements.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">There are increasing attacks on the BIOS (Basic Input/Output System) in electronic computing devices, such as the implanting of rootkits in the BIOS. If the BIOS on a PC (Personal Computer) endpoint is compromised with a rootkit, there is no convenient or automated way at any given point of time to check its integrity and perform remediation. Nevertheless, one way to check integrity of the firmware is to compare a measurement of it with a golden measurement obtained from the manufacturer, but this is not always possible or desirable. Firmware checking applications that use golden measurements must be updated with new golden measurements at the same time that the firmware is updated, otherwise legitimate firmware changes will be unnecessarily and widely reported as suspect. Golden measurements must be made in exactly the same way as the firmware measurements that are compared with the golden measurements. The National Institute of Standards and Technology (NIST) has published a conceptual draft relating to BIOS integrity, entitled &#x201c;BIOS Integrity Measurement Guidelines&#x201d; (Publication number 800-155). However, the extent of its implementation is unknown as of the time of writing.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0004" num="0003">In order to recognize attacks on a device's firmware, measurements of the firmware are made regularly and compared with prior firmware measurements and/or silver measurements. Silver measurements, which are reputation based measurements, are derived from a set of identical firmware measurements obtained from multiple devices having the same make, model and firmware version number. The comparison of firmware measurements enables additional reporting to users and IT administrators, to alert them about firmware changes. The firmware integrity status may be reported, for example, on a data and device security console for a group of managed endpoints. Real-time alerts can be sent to the IT administrators and end users when firmware updates are detected on their endpoints. Alerts about firmware changes, which may be potential attacks on the firmware, can be given automatically.</p><p id="p-0005" num="0004">An advantage of the invention is that the integrity of the firmware of a device can be checked without having to obtain a golden measurement from the manufacturer, or without manually or otherwise making a golden measurement. The applications that perform the firmware checks do not need to be manually or automatically updated with golden measurements. Instead, the invention detects changes across multiple devices and automatically determines whether the changes are genuine or suspect. Another advantage is that firmware roll-backs can be detected and reported. The embodiments disclosed herein each provide one or more of the above advantages.</p><p id="p-0006" num="0005">Disclosed herein is a method for protecting electronic devices comprising: receiving, by a server from each of a first threshold number of electronic devices, an identically performed firmware measurement, wherein said devices have an identical make, an identical model and a firmware with an identical version number; determining, by the server, that at least a second threshold number of the received firmware measurements are identical; defining, by the server, one of said identical firmware measurements to be a silver measurement; receiving, by a processor, from a further electronic device having the identical make, identical model and firmware with the identical version number, a further identically performed firmware measurement; and comparing the further firmware measurement with the silver measurement.</p><p id="p-0007" num="0006">Also disclosed herein is a system for protecting electronic devices comprising a server; a processor in the server; and a non-transient computer readable memory in the server that stores instructions, which, when executed by the processor, cause the server to: receive from each of a first threshold number of electronic devices, an identically performed firmware measurement, wherein said devices have an identical make, an identical model and a firmware with an identical version number; determine that at least a second threshold number of the received firmware measurements are identical; define one of said identical firmware measurements to be a silver measurement; receive, from a further electronic device having the identical make, identical model and identical firmware version, a further identically performed firmware measurement; and compare the further firmware measurement with the silver measurement.</p><p id="p-0008" num="0007">Still further disclosed herein is a non-transient computer readable medium that stores instructions, which, when executed by a processor, cause the processor to: receive from each of a first threshold number of electronic devices, an identically performed firmware measurement, wherein said devices have an identical make, an identical model and a firmware with an identical version number; determine that at least a second threshold number of the received firmware measurements are identical; define one of said identical firmware measurements to be a silver measurement; receive, from a further electronic device having the identical make, identical model and identical firmware version, a further identically performed firmware measurement; and compare the further firmware measurement with the silver measurement.</p><p id="p-0009" num="0008">This summary is not an extensive overview intended to delineate the scope of the subject matter that is described and claimed herein. The summary presents aspects of the subject matter in a simplified form to provide a basic understanding thereof, as a prelude to the detailed description that is presented below. Neither this summary, the drawings nor the following detailed description purport to define or limit the invention; the invention is defined only by the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of an overview of the process for checking firmware, according to an embodiment of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic diagram of a system for firmware integrity checking, according to an embodiment of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flowchart of a process for providing a device's firmware data to a server, carried out by a firmware integrity check application installed in the device, according to an embodiment of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart of a process for checking the integrity of the firmware of a device, carried out by a backend server of the system according to an embodiment of the present invention.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart of a process for automatically deriving silver measurements, carried out by the server of the system according to an embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><heading id="h-0006" level="1">A. Terminology</heading><p id="p-0015" num="0014">Device: This is any electronic device or any computing device to be protected, which includes non-volatile memory and a BIOS or its equivalent device firmware stored in the non-volatile memory. Non-limiting examples of a device include a laptop, cell phone, personal digital assistant, smart phone, memory stick, personal media device, gaming device, personal computer, tablet computer, electronic book, camera with a network interface, and netbook. Most devices protected by the invention will be mobile devices, but static devices, such as desktop computers, projectors, televisions, photocopiers and household appliances may also be protected. Many other kinds of electronic devices may be included, such as hi-fi equipment, cameras, bicycles, cars, barbecues and toys, if they include non-volatile memory and a BIOS or equivalent device firmware. Devices are configured to communicate with a remote server, and they may initiate the communications and/or the communications may be initiated by the server. Communications may be via Wi-Fi, SMS, cellular data or satellite, for example, or may use another communications protocol. While the invention is often explained in relation to laptops, it is to be understood that it applies equally to other electronic and computing devices.</p><p id="p-0016" num="0015">ACPI: Advanced Configuration and Power Interface, an industry specification for the efficient handling of power consumption in desktop and mobile computers. ACPI specifies how a computer's basic input/output system, operating system, and peripheral devices communicate with each other regarding power usage. ACPI defines tables that provide the interface between an ACPI-compliant operating system and system firmware. The tables allow for the description of system hardware in a platform-independent manner, and are presented as either fixed-formatted data structures or in AML (ACPI Machine Language).</p><p id="p-0017" num="0016">API: Application Program Interface</p><p id="p-0018" num="0017">BIOS: Basic Input/Output System. This performs a power-on self-test of the hardware during the booting process of an electronic device, initializes the hardware, and provides runtime services for operating systems and programs. BIOS is an example of device firmware.</p><p id="p-0019" num="0018">CHIPSEC: A framework for analyzing the security of PC platforms including hardware, system firmware (BIOS/UEFI), and platform components. It includes a security test suite, tools for accessing various low level interfaces, and forensic capabilities.</p><p id="p-0020" num="0019">Computer readable medium: A computer memory or memories of one or more different types, each capable of storing computer readable instructions and/or computer readable data.</p><p id="p-0021" num="0020">FIC: Firmware Integrity Check, a process of the present invention in which the current firmware measurement of a device is checked against a prior firmware measurement and/or a silver measurement.</p><p id="p-0022" num="0021">Firmware: Programming instructions that provide control, monitoring and data manipulation for electronic devices. Firmware is typically stored in non-volatile memory components such as ROM (Read-only Memory), EPROM (Electronically programmable ROM), or flash memory in the device. Firmware such as the ROM BIOS of a personal computer may contain only elementary basic functions of the computer and may provide services to higher-level software. Changing the firmware of a device may occasionally be done during its lifetime, for example for updating the firmware, fixing bugs or adding features. Firmware may employ settings that are stored within the firmware or elsewhere in the non-volatile memory in the device. When used herein, the term &#x201c;firmware&#x201d; means device firmware such as BIOS, UEFI or similar, unless specifically stated otherwise.</p><p id="p-0023" num="0022">Golden Measurement: In assessing the firmware measurements of devices, a measurement assessment authority (MAA) references a set of characteristics. These characteristics come in two varieties: (1) endpoint attributes and measurements of BIOS code provided and vouched for, using certificates, by the Original Equipment Manufacturer (OEM), Value Added Reseller (VAR), or an Independent Software Vendor (ISV); and (2) measurements of configuration settings either gathered by the user/administrator of the endpoint during initial provisioning of the endpoint or by the MAA. The assemblage of ideal measurement characteristics is referred to as a golden measurement.</p><p id="p-0024" num="0023">Hash: A hash function is any function that can be used to map data of arbitrary size to data of fixed size. The values returned by a hash function are called hash values, hash codes, digests, hash sums, or simply hashes.</p><p id="p-0025" num="0024">NIST: National Institute of Standards and Technology</p><p id="p-0026" num="0025">NVRAM: Non-Volatile Random Access Memory</p><p id="p-0027" num="0026">OEM: Original Equipment Manufacturer</p><p id="p-0028" num="0027">OS: Operating System</p><p id="p-0029" num="0028">PCR: Platform Configuration Register, a storage register that is used to hold a value that summarizes all the measurement results that were presented to it and the order in which those values were presented to it. The PCR is hosted by the TPM (Trusted Platform Module). The PCR has two advantages: an indefinite number of results can be stored in a single register, and no measurement results need to be discarded to make room for new measurement results.</p><p id="p-0030" num="0029">Processor: This term may be used to refer to a single computer processor or multiple computer processors.</p><p id="p-0031" num="0030">RAM: Random Access Memory</p><p id="p-0032" num="0031">Roll-Back: The change of software or firmware present on a device from its present version to an older version.</p><p id="p-0033" num="0032">Rootkit: A collection of computer software programs, typically malicious, designed to enable unauthorized access to a computer or areas of its software that would not otherwise be allowed, and/or to mask its existence or the existence of other malicious software.</p><p id="p-0034" num="0033">Silver measurement: A reference measurement of firmware that is derived from multiple identical measurements of different copies of the same piece of firmware present on different devices of the same make and model. A silver measurement covers firmware code (i.e. computer readable instructions) but excludes firmware settings, since the latter can be intentionally changed.</p><p id="p-0035" num="0034">SMM: System Management Mode, an operating mode of a device in which all normal execution, including the operating system, is suspended and separate, special software, which is usually part of the firmware or a hardware-assisted debugger, is executed with high privileges.</p><p id="p-0036" num="0035">SPI: Serial Peripheral Interface</p><p id="p-0037" num="0036">TCG: Trusted Computing Group, a group formed to implement trusted computing concepts across personal computers.</p><p id="p-0038" num="0037">TCPA: Trusted Computing Platform Alliance, the former name of the Trusted Computing Group</p><p id="p-0039" num="0038">TPM: Trusted Platform Module, a dedicated microcontroller designed to secure hardware by integrating cryptographic keys into devices. The TPM hosts the above-mentioned PCRs. The TPM specification was written by the TCG.</p><p id="p-0040" num="0039">UEFI: Unified Extensible Firmware Interface, a specification that defines a software interface between an operating system and platform firmware. The UEFI is stored as firmware in non-volatile memory.</p><p id="p-0041" num="0040">WMI: Windows Management Instrumentation</p><heading id="h-0007" level="1">B. Overview</heading><p id="p-0042" num="0041">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a brief overview of the process for checking the integrity of firmware is shown. In step <b>2</b>, hashes of newly updated firmware are obtained from multiple devices. In step <b>4</b>, the hashes are analyzed in order to derive a silver measurement of the newly updated firmware. In particular, when multiple devices of the same make, model and firmware version have hashes that are the same, then the particular value of the hash is deemed to be a silver measurement of the particular make, model and firmware version. In step <b>6</b>, the firmware of further devices is measured to provide hashes, each of which is compared to the silver measurement corresponding to the device's particular make, model and firmware version. If the comparison results in a match, then those devices with a match can be considered to have firmware that is not compromised. The devices that do not have a match can be considered to have their firmware compromised.</p><heading id="h-0008" level="1">C. Exemplary Embodiment</heading><p id="p-0043" num="0042">A symbolic block diagram of an exemplary embodiment of the system <b>10</b> for checking the firmware integrity of a device <b>20</b> is shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The device <b>20</b> typically includes a display <b>22</b>, one or more processors <b>24</b> and non-volatile memory <b>26</b>, which may be split into two or more constituent memories. The device <b>20</b> also includes further, volatile memory <b>28</b>, such as RAM. The device <b>20</b> may also include a hard disk drive (HDD) <b>29</b>, solid state drive or other long-term storage.</p><p id="p-0044" num="0043">Present in the non-volatile memory <b>26</b> (e.g. NVRAM) of the device <b>20</b> is firmware <b>30</b>, which may be any type of device firmware such as BIOS, UEFI or firmware that performs comparable functions to BIOS or UEFI. The firmware <b>30</b> may be divided into multiple volumes, and includes both code and data. Each volume may store data, code, or both data and code. The non-volatile memory <b>26</b> also includes an identification <b>36</b> of the device <b>20</b>, an information module <b>32</b> and a persistence module <b>34</b>. The persistence module <b>34</b> is normally located inside the firmware <b>30</b>. The non-volatile memory <b>26</b> may store several firmware images of different kinds as well as other non-firmware data. The information in module <b>32</b> saved in non-volatile memory <b>26</b> includes, for example, non-volatile BIOS settings, such as overclock settings, persistence activation state, enable/disable Secure Boot, and many other static BIOS settings. The information module <b>32</b> may not necessarily be a single or specifically defined module, but may include a collection of unrelated registers or other data storage areas, for example, which are collectively referred to herein as an information module for convenience. Dynamic information such as whether USB devices are attached to the device <b>20</b>, is kept by the BIOS in memory <b>28</b>. Also, the log (TCPA table), along with other ACPI tables, are produced dynamically by firmware <b>30</b> and also stored in memory <b>28</b>.</p><p id="p-0045" num="0044">The FIC application <b>40</b> is maintained in the volatile memory <b>28</b> by the OS agent <b>41</b>. The OS agent <b>41</b> does not itself include any applications, such as the FIC application, but exists to maintain a communication link to the server <b>60</b>. The server <b>60</b> transfers the FIC application <b>40</b> and other applications as necessary to the device through the OS agent's communication channel with the server. The persistence module <b>34</b> ensures that the OS agent <b>41</b> is present in an uncompromised state in the volatile memory <b>28</b> of the device <b>20</b>, or elsewhere in the device. If the OS agent <b>41</b> is not present in the device <b>20</b> or is found to be compromised upon boot, the persistence module <b>34</b>, which includes a mini-agent embedded in it, restores the OS agent directly from flash memory or any other storage within the device, without any internet connection to the device. It is also possible, in other embodiments, for the persistence module to reload the OS agent <b>41</b> across the internet, if the persistence module has internet connectivity.</p><p id="p-0046" num="0045">The FIC application <b>40</b> is responsible for calculating a measurement of the firmware <b>30</b>, which may be a hash <b>42</b>. When FIC application <b>40</b> performs its measurements, the persistence module <b>34</b> is measured along with the rest of the firmware <b>30</b> because the persistence module is part of the firmware. The FIC application <b>40</b> stores the hash <b>42</b> as a hash <b>42</b>A in the HDD <b>29</b> or equivalent storage using the OS's cryptographic API. The FIC application <b>40</b> can make use of functions of the operating system <b>44</b> to read the contents of the non-volatile memory <b>26</b>, to change settings in it and to write data to it. Versions of the firmware <b>30</b> can be read using OS interfaces such as WMI, or they can be discovered in a more direct way using the FIC application <b>40</b>, and then stored in the information module <b>32</b>. Firmware version numbers may include numerical digits, letters and/or other characters or symbols.</p><p id="p-0047" num="0046">After the device has booted, the FIC application <b>40</b> can periodically measure the firmware <b>30</b> and compare the measurements with previously stored results that have been stored in the HDD <b>29</b>. The volatile memory <b>28</b> may contain ACPI tables that contain a measurement log, which can be verified with TPM PCR registers. UEFI firmware may create the ACPI tables. The log can be checked with prior logs and/or silver measurements. The UEFI firmware volumes can be copied from non-volatile memory <b>26</b> by the FIC application <b>40</b>, parsed, and measured as a whole as opposed to the TPM-based method. Firmware volumes are located in non-volatile memory <b>26</b> and mapped at a specific location in CPU (central processing unit) address space, so the FIC application <b>40</b> can, via an OS device driver, map and copy firmware volumes from non-volatile memory address space into the main memory <b>28</b>.</p><p id="p-0048" num="0047">In the TPM-based method, an immutable BIOS boot block stores measurements in PCRs on the TPM. A PCR register in the TPM is combined with a nonce and signed by a TPM-resident key to create a report on the BIOS code present at boot time. The measurement as a whole can either be done in conjunction with the TPM-based method or on its own if there is no TPM, or if the BIOS does not generate the TCPA table. This may require a kernel driver to directly access the memory <b>26</b> and ACPI tables in the information module <b>32</b>. As ACPI tables can be accessed via an OS API, however, use of a kernel driver is not obligatory. In Linux&#x2122; systems the ACPI tables are mapped in a virtual file system. A kernel driver would be necessary in other situations, such as reading BIOS from flash, reading SPI controller registers, etc. Other, known types of measurement may also be used.</p><p id="p-0049" num="0048">As a separate check, the FIC application <b>40</b> can periodically read the non-volatile memory <b>26</b>, which includes e.g. flash regions and controller lock registers, in a way similar to that performed by the CHIPSEC utility, and report/alert if any region of the flash is unlocked. This requires a kernel driver to access the physical hardware registers.</p><p id="p-0050" num="0049">The device <b>20</b> is connected via communications link <b>52</b> and the internet <b>38</b> or other network to a server <b>60</b>, which is connected to the internet via link <b>62</b>. Further devices <b>20</b>A, <b>20</b>B which are similar in function to device <b>20</b>, for which the firmware is to be monitored, are connected to the server <b>60</b> via the internet <b>38</b> and links <b>58</b>, <b>59</b> respectively. The server includes one or more processors <b>64</b>, user interface <b>66</b> and one or more memories <b>68</b>. The memory <b>68</b> stores one or more programs <b>70</b> for interacting with the devices <b>20</b>, <b>20</b>A, <b>20</b>B and storing information related to their firmware in database <b>72</b>. In particular, the database <b>72</b> includes data entries <b>74</b> that relate identifications of specific devices <b>20</b>, <b>20</b>A, <b>20</b>B to their firmware, for example using firmware hashes. For example, data entry <b>74</b> includes a copy <b>36</b>A of the device identification <b>36</b> stored in relation to a copy <b>42</b>B of the hash <b>42</b> of the firmware <b>30</b>. The database <b>72</b> also includes entries <b>76</b> that relate device makes, models and their firmware versions (M-M-F) to silver measurements (S #) of the corresponding firmware. A database <b>72</b> includes the type of the flash controller and flash part of the device so that the FIC application <b>40</b> knows how to access the flash lock registers on different platforms. Over time, additional functionality can be added to the database.</p><p id="p-0051" num="0050">A web front-end <b>80</b>, which is a further computing device, is connected to the server <b>60</b> via communications link <b>82</b> and the internet <b>38</b>. Alerts indicating a change in the firmware <b>30</b> of device <b>20</b> are presented as popup messages <b>86</b> on the display <b>84</b> of the web front-end <b>80</b>, which can also trigger emails or other messages to IT administrators. The system <b>10</b> can also alert the end user directly with a popup message <b>90</b> or lock the display <b>22</b> of the device <b>20</b>, depending on the particular policy selected.</p><heading id="h-0009" level="1">D. FIC Application Process</heading><p id="p-0052" num="0051">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a flowchart is shown of an exemplary process undertaken by the FIC application <b>40</b> in a device <b>20</b> in which the firmware is BIOS. In step <b>100</b>, the FIC application <b>40</b> is initialized, which is achieved by loading, installing and running it in the device <b>20</b>, under control of the persistence module <b>34</b>.</p><p id="p-0053" num="0052">In step <b>105</b>, the FIC application <b>40</b> receives a policy from the backend, i.e. the server <b>60</b>. The policy includes instructions for the FIC application <b>40</b> as to which parts of the firmware <b>30</b> to measure, how to measure them and how often to measure them, etc. The server <b>60</b> sends the policy and commands to the device <b>20</b>, and the device sends data to the server. In some embodiments, the server informs the FIC application <b>40</b> on the device <b>20</b> whether its measurements are OK or not. However, this status information may be intentionally withheld from a compromised device if it is desired that the server continue to monitor the compromised device, while keeping a user of the device unaware that the status has been determined.</p><p id="p-0054" num="0053">In step <b>110</b>, the application <b>40</b> gathers, from the device, the device's BIOS version, the date and time of its build, and its size. It also calculates a hash <b>42</b> of the firmware <b>30</b>, or a different hash for each volume of the firmware. Optionally, it gathers the I/O ports to enable/disable SMM and other parameters including published ACPI, SMBIOS, and/or other standard interfaces.</p><p id="p-0055" num="0054">If, in step <b>115</b>, there is no information previously saved on the device by the FIC application (i.e. firmware version, firmware date, firmware time and/or firmware hash) with the policy relating to the specific device, then the application <b>40</b> proceeds to step <b>118</b>. In step <b>118</b>, the gathered information and hashes from step <b>110</b> are securely saved locally and sent to the server <b>60</b> in step <b>120</b>. When the FIC application <b>40</b> runs for the first time it takes the baseline measurement, saves it securely on the device <b>20</b>, and sends to the server <b>60</b>. When the FIC application next runs, it can then compare a new measurement with the saved baseline measurement, and, if different, send the new measurement to the server if instructed to do so by to the policy. Optionally, in step <b>121</b>, the device may receive an acknowledgment from the server if the measurement is acceptable, for example if it corresponds to a silver measurement. Alternately, the optional message back from the server may be a command to take a security action, if the measurement does not equal a corresponding silver measurement. The process then ends in step <b>122</b>.</p><p id="p-0056" num="0055">Referring back to step <b>115</b>, if the specific device information (i.e. firmware version, firmware date, firmware time and/or firmware hash) has been previously gathered from the device <b>20</b> under control of the policy, which informs the FIC application <b>40</b> where to get the device specific information, then the process moves to step <b>125</b>. In step <b>125</b>, the FIC application <b>40</b> determines whether the BIOS has been updated. This is done by comparing the current data obtained in step <b>110</b> with the previous data stored earlier in step <b>118</b>. For example, this is achieved by comparing the current BIOS version number with the prior BIOS version number; the current BIOS build date with the prior BIOS build date; and/or the current BIOS size with the prior BIOS size. If the BIOS has been updated, then, in step <b>140</b>, the FIC application <b>40</b> generates an alert and the new information is sent to the server in step <b>145</b>, after which the process ends in step <b>150</b>. Optionally, the device may receive an acknowledgment from the server or a security instruction before the process ends. The alert is displayed as a popup or message <b>90</b> on the display <b>22</b> of the device <b>20</b>, e.g. &#x201c;Your device firmware was upgraded from version x to y; if you did not authorize the upgrade, shutdown the computer and contact your administrator. Unauthorized firmware change may be a sign of a hacker attack.&#x201d;</p><p id="p-0057" num="0056">If, in step <b>125</b>, the FIC application <b>40</b> determines that the BIOS has not been updated, then the process moves to step <b>130</b>, in which the FIC application compares the current hashes with the prior hashes. If, in step <b>135</b>, the BIOS has been changed, then, in step <b>140</b>, the FIC application generates an alert and the new information is sent to the server in step <b>145</b>, after which the process ends in step <b>150</b>. In conjunction with the alert, the process may lock the device or permit restricted use only of it until the change in the BIOS has been verified to be legitimate. As above, the alert is displayed as a popup or message <b>90</b> on the display <b>22</b> of the device <b>20</b>. If, in step <b>135</b>, the BIOS has not been changed, which is determined by the current hash being equal to the prior hash, then the process permits normal or continued and unhindered operation of the device in step <b>148</b>, and then ends in step <b>150</b>. In another embodiment, step <b>145</b> may be performed after step <b>148</b> even if there are no changes to the BIOS, i.e. the data would be sent again even if it has not changed.</p><p id="p-0058" num="0057">The process can be repeated on every boot of the device or periodically, randomly or from time to time, starting from step <b>105</b> in which the information is received from the server.</p><heading id="h-0010" level="1">E. Server Process</heading><p id="p-0059" num="0058">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, in step <b>200</b>, the FIC feature for the device <b>20</b> is enabled, for example by an administrator setting a flag in server <b>60</b> that indicates that the feature should be present on the device. When the OS agent <b>41</b> in device <b>20</b> communicates with the server <b>60</b>, the server reads the flag and instructs the OS agent to initialize the FIC application <b>40</b>.</p><p id="p-0060" num="0059">In step <b>205</b>, the server <b>60</b> receives the BIOS version, build date and time, BIOS size and hashes of the firmware volumes from the FIC application <b>40</b> for the first time. This is achieved as a result of the FIC application <b>40</b> performing step <b>120</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0061" num="0060">In step <b>210</b>, the server <b>60</b> stores the received information (i.e. BIOS version, build date and time, BIOS size and hashes of the firmware volumes) in the database <b>72</b>, in a record <b>74</b> that links it to an identification <b>36</b> of the device.</p><p id="p-0062" num="0061">In step <b>220</b>, the server <b>60</b> receives updated information including the current firmware measurement for the device, as a result of the FIC application <b>40</b> performing step <b>145</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In step <b>225</b>, the server <b>60</b> generates an acknowledgment that indicates that information has been received. In step <b>230</b>, the server determines whether the BIOS firmware has been updated to a later version, for example by comparing the currently received firmware version number with a previously received firmware version number from the same device. If it has, then, in step <b>235</b>, the server determines whether a silver measurement is available. If a silver measurement is available, then, in step <b>245</b>, the server performs a silver measurement check. This is done by comparing the current firmware measurement with the silver measurement and determining whether there is a difference between the two. If, in step <b>250</b>, the result of the check is OK, i.e. there is no difference between the current firmware measurement and the silver measurement, then the new information and optionally the OK status are stored in record <b>74</b> in the database <b>72</b>, in step <b>240</b>. The status indicates that at the date and time of the check, the firmware <b>30</b> is OK. As well, a message may be sent back to the device to inform it that the update in its firmware is legitimate and that it may continue with its normal and unhindered operation. If the result of the silver measurement check is not OK in step <b>250</b>, a security violation alert is generated in step <b>270</b>.</p><p id="p-0063" num="0062">Returning to step <b>235</b>, if a silver measurement is not yet available, then the new information is stored in step <b>240</b> in the database <b>72</b> as record <b>74</b>, or as an addition to record <b>74</b>.</p><p id="p-0064" num="0063">Returning to step <b>230</b>, if the server determines that the BIOS has not been updated to a later version, the server then determines, in step <b>260</b> whether the BIOS has been rolled back to a prior version. The server identifies a roll-back of the BIOS by determining that the currently received firmware version number is earlier than the previously stored firmware version number from the same device. If the firmware has been rolled back, then, in step <b>270</b> the server generates a security violation alert. If the BIOS has not been rolled back to a prior version, then the server determines, in step <b>265</b>, whether the hashes of the firmware volumes have been changed. If they have been changed, then, in step <b>270</b>, the server generates a security violation alert. If the hashes have not changed, as would be the case if step <b>145</b> is performed following step <b>148</b>, the server determines whether a later BIOS version is available in step <b>290</b>. If there is not a new BIOS available, the process ends at step <b>280</b>. If a new BIOS is available, i.e. the current firmware is out of date, then a notification is sent to the IT administrator and/or the user of the device <b>20</b> in step <b>295</b>, after which the process ends in step <b>280</b>. The server can also check whether it is aware of a newer version of the firmware <b>30</b>, and, if so, sends an alert to the user that a BIOS update is available, and to the IT administrator that the device <b>20</b> still uses an older BIOS.</p><p id="p-0065" num="0064">After each security violation alert in step <b>270</b>, the parameters that caused the alert are displayed on the user interface <b>66</b> of the server and/or as a pop-up <b>86</b> or other message on a web front-end computer <b>80</b> in step <b>275</b>. In some embodiments, alerts may also be communicated from the server <b>60</b> to the device <b>20</b> for display on the display of the device, or to trigger a security response in the device such as a lock-down. After generation of a security violation alert in step <b>270</b>, the server may send a message to the device to instruct it to freeze, to delete data therefrom, to transmit data to the server, to reduce its functionality, or to transmit its location such that it can be tracked. Other security measures are also possible. Following this, the process ends in step <b>280</b>. The process is then repeated from step <b>220</b> as and when it receives new data from the device.</p><p id="p-0066" num="0065">If the flag in the server <b>60</b> for the FIC feature is not set, then the OS agent <b>41</b> of the device <b>20</b> will either disable the FIC application <b>40</b> if it is present in the device or refrain from enabling it if it is absent from the device.</p><p id="p-0067" num="0066">When measuring the firmware, care should be taken to measure the code rather than the data, otherwise the measurements may become meaningless. However, it is conceivable that the measurements may include a permissible range of allowed data and/or settings if the measurement checks can allow for it.</p><heading id="h-0011" level="1">F. Silver Measurement Determination</heading><p id="p-0068" num="0067">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, an exemplary process for deriving a silver measurement is shown. In step <b>300</b>, the FIC feature is enabled on multiple devices having the same make, model and firmware version. In step <b>305</b>, the server receives the BIOS information for the multiple devices, including the build date, time and size, and hashes of the firmware volumes. The hashes must all be calculated in the same way in order to provide consistent results. In step <b>310</b>, the server determines whether the number of devices for which the BIOS information has been received is above a first threshold number. If the number of devices does not meet the first threshold, the server proceeds to wait, and then later receives BIOS information from more devices, by returning to step <b>305</b>.</p><p id="p-0069" num="0068">As an example, the first threshold number of devices may be equal to 10. However, in other embodiments the first threshold may be different, configurable and/or adjustable, either manually or automatically, and the actual value may be based on statistical data.</p><p id="p-0070" num="0069">Once the first threshold has been reached, the server determines, in step <b>315</b>, whether the number of devices that have identical information is above another, second threshold (which may either be the same number as the first threshold or a lower number). This second threshold may be 9, for example, which, if the first threshold is 10, would indicate with a relatively high probability that these 9 devices are uncompromised. The 1 device out of the 10, which has different information, may likewise be considered to be compromised with a relatively high probability. If the number of devices with identical measurements is not equal to or above the second threshold, then the process reverts to step <b>305</b> to receive BIOS information from more devices.</p><p id="p-0071" num="0070">If, in step <b>315</b>, the number of devices that report identical BIOS information is equal to or above the second threshold, then, in step <b>320</b>, the hash of the reported identical BIOS information is set as the silver measurement for the specific make, model and firmware version of the device. In step <b>325</b>, the silver measurement (S #) is stored in the database <b>72</b> in a record <b>76</b> that links to the specific make, model and firmware version (M-M-F) of the device. The process ends in step <b>335</b>, and may be repeated for other makes, models and/or firmware versions of devices that are to have their firmware integrity checked.</p><p id="p-0072" num="0071">The result is that the server can look at new firmware, analyze it, and automatically determine whether it is genuine or suspect without having to compare it with a pre-existing benchmark. Once the new firmware is determined to be genuine, it is defined as a silver measurement. The silver measurement can then be used as a benchmark for checking the firmware of further devices.</p><heading id="h-0012" level="1">G. Variations</heading><p id="p-0073" num="0072">Note that the information obtained in step <b>110</b> (<figref idref="DRAWINGS">FIG. <b>3</b></figref>) may simply be a repeat of existing information, but received at a later time or date, which would indicate that the firmware <b>30</b> has not changed. In some embodiments, the device itself may not detect the change in the firmware, but leave the detection of change to the server <b>60</b> to perform.</p><p id="p-0074" num="0073">Thresholds in the determination of the silver measurement may be different depending on the identity of the devices that initially contact the server with an updated firmware version. Lower thresholds may be used if the measurements are coming from devices that are, or become, known to be less susceptible to firmware attacks than other devices. The thresholds may be different depending on make, model, number of identified firmware attacks, location of the devices, owner of the devices, configuration of the devices, etc. The thresholds may also vary with time.</p><p id="p-0075" num="0074">In a basic embodiment, the silver measurement may include a firmware version number and firmware date and time. An intermediate embodiment may further include one or more of the actual firmware volume measurements. An advanced embodiment may ultimately completely satisfy the NIST guidelines referred to above. Another possible variation is to include measurements of the firmware settings and to discover which combinations are disallowed by the customers.</p><p id="p-0076" num="0075">Functions described as being performed by one server may be divided between separate servers, and functions described as being performed on multiple servers may be combined on the same server. Intermediate servers may also be employed in the system.</p><p id="p-0077" num="0076">Steps in the flowcharts may be performed in a different order to that illustrated, or they may be combined where shown separately. Steps may be omitted and others added, and steps from different flowcharts may be interchanged, all without departing from the scope of the invention. Components shown herein may be divided into constituent components or be combined with each other.</p><p id="p-0078" num="0077">While the invention has been described predominantly with respect to BIOS, it applies equally to UEFI and other types of firmware.</p><p id="p-0079" num="0078">In other embodiments, the persistence module is a form of firmware, but not considered to be device firmware.</p><p id="p-0080" num="0079">In general, unless otherwise indicated, singular elements may be in the plural and vice versa with no loss of generality. Drawings are not to scale or in proportion.</p><p id="p-0081" num="0080">The detailed descriptions within are presented largely in terms of methods or processes, symbolic representations of operations, functionalities and features of the invention. These method descriptions and representations are the means used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art. A software implemented method or process is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. These steps involve physical manipulations of physical quantities. Often, but not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It will be further appreciated that the line between hardware, software and firmware is not always sharp, it being understood by those skilled in the art that software implemented processes may be embodied in hardware, firmware, or software, in the form of coded instructions such as in microcode and/or in stored programming instructions. Computer readable memory or media described herein are all non-transitory in that they store computer readable instructions and/or computer readable data either permanently or temporarily. A medium that can only support a propagating signal without storing it is considered to be transitory.</p><p id="p-0082" num="0081">The present description includes the best presently contemplated mode of carrying out the subject matter disclosed and claimed herein. The description is made for the purpose of illustrating the general principles of the subject matter and not be taken in a limiting sense; the subject matter can find utility in a variety of implementations without departing from the scope of the disclosure made, as will be apparent to those of skill in the art from an understanding of the principles that underlie the subject matter.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for protecting electronic devices comprising:<claim-text>receiving, by a processor, an identically-performed firmware measurement from each of a first threshold number electronic devices that have an identical make, model and firmware version number;</claim-text><claim-text>determining, by the processor, that a second threshold number of said firmware measurements are identical;</claim-text><claim-text>defining, by the processor, a silver measurement to be one of said identical firmware measurements;</claim-text><claim-text>receiving, by the processor, a further identically-performed firmware measurement from each of further electronic devices that have the identical make, model and firmware version number;</claim-text><claim-text>for those of the further electronic devices providing firmware measurements that equal the silver measurement, the processor permitting unhindered use thereof; and</claim-text><claim-text>for those of the further electronic devices providing firmware measurements that do not equal the silver measurement, the processor taking a security action therefor.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the security action is a restriction of use.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, for one of the further electronic devices providing firmware measurements that equal the silver measurement:<claim-text>determining, by the processor, that it has firmware that is out of date.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving, by the processor, a different firmware version number from another electronic device that has the identical make and model;</claim-text><claim-text>determining, by the processor, that the different firmware version number is earlier than the identical version number; and</claim-text><claim-text>generating, by the processor, a security alert indicating that a firmware of the other electronic device has been rolled back.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising, for one of the further electronic devices providing firmware measurements that do not equal the silver measurement:<claim-text>determining, by the processor, that a non-volatile memory in which firmware of said one further electronic device is stored is not properly locked.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the firmware measurements are based on either:<claim-text>one or more volumes of firmware;</claim-text><claim-text>the firmware version number and a date of the firmware; or</claim-text><claim-text>a time of the firmware.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the firmware measurements are of either:<claim-text>a BIOS (Basic Input/Output System), or</claim-text><claim-text>a UEFI (Unified Extensible Firmware Interface).</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising storing, by the processor, all said firmware measurements in a database.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first threshold number is equal to the second threshold number.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first threshold number is greater than the second threshold number, the method further comprising:<claim-text>permitting, by the processor, continued unhindered use of those of the electronic devices that have a firmware measurement equal to the silver measurement; and</claim-text><claim-text>taking, by the processor, another security action, with respect to those of the electronic devices that have a firmware measurement different from the silver measurement.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each of all said firmware measurements is performed by an application running in volatile memory in either one of the electronic devices or one of the further electronic devices.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein each application is maintained to be present and functional by an operating system agent running under an operating system of the respective electronic device or further electronic device.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein each operating system agent is maintained to be present and functional by a persistent agent present in non-volatile memory of the respective electronic device or further electronic device.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein all said firmware measurements are hashes of firmware instructions and not of firmware data or firmware settings.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A system for protecting electronic devices comprising:<claim-text>a server;</claim-text><claim-text>a processor in the server; and</claim-text><claim-text>a non-transient computer readable memory in the server that stores instructions, which, when executed by the processor, cause the server to:<claim-text>receive an identically-performed firmware measurement from each of a first threshold number electronic devices that have an identical make, model and firmware version number;</claim-text><claim-text>determine that a second threshold number of said firmware measurements are identical;</claim-text><claim-text>define a silver measurement to be one of said identical firmware measurements;</claim-text><claim-text>receive a further identically-performed firmware measurement from each of further electronic devices that have the identical make, model and firmware version number;</claim-text><claim-text>for those of the further electronic devices providing firmware measurements that equal the silver measurement, permit unhindered use thereof; and</claim-text><claim-text>for those of the further electronic devices providing firmware measurements that do not equal the silver measurement, take a security action therefor.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising in each of the electronic devices and each of the further electronic devices:<claim-text>a firmware measurement application running in volatile memory;</claim-text><claim-text>an operating system agent running under an operating system and configured to maintain the firmware measurement application present and functional; and</claim-text><claim-text>a persistent agent in non-volatile memory configured to maintain the operating system agent present and functional.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein all said firmware measurements are hashes of firmware instructions and not of firmware data or firmware settings.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. A non-transient computer-readable medium that stores instructions, which, when executed by a processor, cause the processor to<claim-text>receive an identically-performed firmware measurement from each of a first threshold number electronic devices that have an identical make, model and firmware version number;</claim-text><claim-text>determine that a second threshold number of said firmware measurements are identical;</claim-text><claim-text>define a silver measurement to be one of said identical firmware measurements;</claim-text><claim-text>receive a further identically-performed firmware measurement from each of further electronic devices that have the identical make, model and firmware version number;</claim-text><claim-text>for those of the further electronic devices providing firmware measurements that equal the silver measurement, permit unhindered use thereof; and</claim-text><claim-text>for those of the further electronic devices providing firmware measurements that do not equal the silver measurement, take a security action therefor.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transient computer-readable medium of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein all said firmware measurements are hashes of firmware instructions and not of firmware data or firmware settings.</claim-text></claim></claims></us-patent-application>