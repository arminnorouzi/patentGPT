<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005560A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005560</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17942059</doc-number><date>20220909</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>42</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>12</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>10</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>42</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>12015</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>1039</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>1201</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>36</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>2029</main-group><subgroup>3202</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>11</main-group><subgroup>4082</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">SINGLE "A" LATCH WITH AN ARRAY OF "B" LATCHES</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17468024</doc-number><date>20210907</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11443822</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17942059</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>63107413</doc-number><date>20201029</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>SambaNova Systems, Inc.</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>ZIAJA</last-name><first-name>Thomas A.</first-name><address><city>Austin</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>DURAIRAJAN</last-name><first-name>Uma</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>AMIRTHARAJ</last-name><first-name>Dinesh R.</first-name><address><city>Milpitas</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>SambaNova Systems, Inc.</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An integrated circuit (IC) includes first and scan latches that are enabled to load data during a first part of a clock period. A clocking circuit outputs latch clocks with one latch clock driven to an active state during a second part of the clock period dependent on a first address input. A set of storage elements have inputs coupled to the output of the first scan latch and are respectively coupled to a latch clock to load data during a time that their respective latch clock is in an active state. A selector circuit is coupled to outputs of the first set of storage elements and outputs a value from one output based on a second address input. The second scan latch then loads data from the selector's output during the first part of the input clock period.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="110.74mm" wi="158.75mm" file="US20230005560A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="223.60mm" wi="166.54mm" orientation="landscape" file="US20230005560A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="241.13mm" wi="170.77mm" orientation="landscape" file="US20230005560A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="136.14mm" wi="158.33mm" orientation="landscape" file="US20230005560A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="227.58mm" wi="152.99mm" orientation="landscape" file="US20230005560A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="240.45mm" wi="160.95mm" orientation="landscape" file="US20230005560A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="189.23mm" wi="140.97mm" orientation="landscape" file="US20230005560A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="241.81mm" wi="164.51mm" orientation="landscape" file="US20230005560A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="179.32mm" wi="137.84mm" orientation="landscape" file="US20230005560A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="246.13mm" wi="172.47mm" orientation="landscape" file="US20230005560A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="237.83mm" wi="166.79mm" orientation="landscape" file="US20230005560A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="246.13mm" wi="162.56mm" orientation="landscape" file="US20230005560A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="242.99mm" wi="167.72mm" orientation="landscape" file="US20230005560A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="234.10mm" wi="160.78mm" orientation="landscape" file="US20230005560A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="223.77mm" wi="146.64mm" file="US20230005560A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIORITY APPLICATION</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/468,024, now U.S. Pat. No. 11,443,822, filed 7 Sep. 2021, which claims the benefit of U.S. Provisional Patent Application No. 63/107,413 filed 29 Oct. 2020, both of which are incorporated by reference herein.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD OF THE TECHNOLOGY</heading><p id="p-0003" num="0002">The present technology relates to the field of integrated circuits including memory designed for testability and diagnostics including, in some embodiments, scan chain compatible memory testable using one or more of automatic test pattern generation (ATPG), transition testing (TT) and memory built-in self-test (BIST).</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Integrated circuits include various types of on-chip memory circuits. Examples of such memory circuits which can be used in critical processing paths are known by such names as working memory, cache, buffers, registers, First-In-First-Out buffers (FIFOs), Look-Up-Tables (LUTs), Least Recently Used (LRU) buffers, and various types of queues. In many settings, memory circuits must be stable and fast, and can occupy significant area on a chip.</p><p id="p-0005" num="0004">Integrated circuits often incorporate structures to support testing of the circuits on the devices, using Design for Testability (DFT) techniques. One aspect of such techniques includes implementation of scan chains on the integrated circuit, which connect flip-flops and registers used in the functional circuit, to form a serial chain parallel to the functional circuit paths of the device. Data patterns can be loaded in the chip using the scan chain, the functional circuits can be exercised, and then the resulting pattern read out using the scan chain for analysis. An early example of such a technique is a scan design known as Level Sensitive Scan Design (LSSD) described in U.S. Pat. No. 3,761,695 to Eichelberger.</p><p id="p-0006" num="0005">It is desirable to provide technologies for efficient integrated circuit memory with improved testability.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">Technologies are described herein which improve the testability of memory on integrated circuits supporting, in various embodiments, connecting storage elements like latches in memory to scan chains and configuring memory for scan dump. The use of latches and similar compact storage elements to form scannable memory can extend the testability of high-density memory circuits on complex integrated circuits operable at high clock speeds.</p><p id="p-0008" num="0007">A scannable memory circuit is described for implementation on an integrated circuit having a scan chain, in one aspect of the technology herein, in which the memory is composed of an array of storage elements, such storage latches, having a plurality of rows and a plurality of columns. Also, the circuit includes an input buffer connected to the array of storage elements, including a row of buffer latches enabled to load data during a first part of an input clock signal, such as having active low enable inputs connected to the input clock. The storage elements in the array are enabled to load data during a second part of an input clock signal, such as by having active high enable signals coupled to a row clock signal synchronized with the input clock. The row of buffer latches is configured to transfer data during the second part of the input clock signal from the input buffer to storage elements of a selected row in the plurality of rows in parallel. The memory circuit in this aspect of the technology includes an output selector connected to the array of storage elements having inputs connected to the storage elements in the array of storage elements, to output data from storage elements in a selected row in parallel to an output bus having lines DOUT[N&#x2212;1:0]. To support inserting storage elements in the array in a scan chain, an input data selector having an output DIN[N&#x2212;1:0] is connected to the row of buffer latches in the input buffer and selects, in dependence on a scan enable signal, from a first input connected to a functional path data, and a second input connected to a scan mode input bus. The scan mode input bus has a scan-in line connected to the scan chain for connection to DIN[N&#x2212;1] and a plurality of feedback lines for output data DOUT[N&#x2212;1:1] from storage elements in the selected row for connection to DIN[N&#x2212;2:0], respectively. Also, the memory circuit includes a circuit, responsive to the scan enable signal to connect output data DOUT[0] to a scan-out line connected to the scan chain.</p><p id="p-0009" num="0008">To support testing such as automatic test pattern generator ATPG scan tests and transition testing using ATPG, a control circuit can be included to provide the scan enable signal, and to set a row address to the selected row during a scan operation shifting data from the scan-in line through the selected row to the scan-out line. The control circuit can be configured to execute a procedure including: setting the row of input selectors to a scan mode; setting the row enable signal to a fixed row in the scan mode; sequentially while in a scan mode, loading during the first part of the clock period a bit from the scan chain in the first buffer latch of the input row and a bit from the output line of the next adjacent column in the other latches in the input row, and writing during the second part of the clock period the bits in the input row of latches to the storage elements in the fixed row in the corresponding columns; and applying the line on the output bus corresponding to the last column of the array to a scan-out line.</p><p id="p-0010" num="0009">A scannable memory circuit is described for implementation on an integrated circuit having a scan chain configured for scan dump (a scan dump chain), in one aspect of the technology herein, in which the memory is composed of an array of storage elements having a plurality of rows and a plurality of columns. An input buffer in this aspect of the technology is connected to the array of storage elements, including a row of buffer latches enabled to load data during a first part of an input clock signal, and configured to transfer data during a second part of the input clock signal from the input buffer to storage elements of a selected row in the plurality of rows in parallel. An output selector is connected to the array of storage elements having inputs connected to the storage elements in the array of storage elements, to output data from storage elements in a selected row in parallel to an output bus having lines DOUT[N&#x2212;1:0]. An input data selector having an output DIN[N&#x2212;1:0] connected to the row of buffer latches in the input buffer selects, in dependence on a scan dump signal, from a first input connected to a functional path data, and a second input connected to a scan dump input bus, the scan dump input bus having a plurality of feedback lines for output data DOUT[N&#x2212;1:1] from storage elements in the selected row for connection to DIN[N&#x2212;2:0], respectively. The line of the scan dump input bus for connection to DIN[N&#x2212;1] can be disconnected or connected to a reference node in some cases, or in other cases connected to a scan dump in line to receive scan dump data from other circuits on the device. A circuit is provided, responsive to the scan dump signal, to connect output data DOUT[0] to a scan-out line connected to the scan dump chain.</p><p id="p-0011" num="0010">To support testing operations including scan dump, a control circuit to provide the scan dump signal, and increment the selected row during a scan dump operation. As a result, the scan dump operations shifts data from the plurality of rows in sequence to the scan-dump out line. The control circuit can be configured to execute a procedure including: setting the row of input selectors to a scan mode; sequentially while the input clock is running in a scan dump mode, loading during the first part of the clock period a bit from the scan chain in a first buffer latch of the input row and a bit from the output line of the next adjacent column in the other buffer latches in the input row, and writing during a second part of the clock period the bits in the input row of buffer latches to the storage elements in a selected row in the corresponding columns; incrementing the row enable signals while the input clock is running in the scan dump mode by one row after a number of input clock periods equal to the number of columns of the array; and applying a line on the output bus corresponding to the last column of the array to a scan-out line.</p><p id="p-0012" num="0011">These and other features, aspects, and advantages of the technology disclosed will become apparent from the following detailed description and the accompanying drawings.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0013" num="0012">In the drawings, like reference characters generally refer to like parts throughout the different views. In the following description, various implementations of the technology disclosed are described with reference to the following drawings.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a system diagram illustrating a scan chain and scan dump tester, MBIST data verification and an example reconfigurable processor.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts an example four-row, four column scannable latch array.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example data bus multiplexer interposed between a memory built-in self-testing (MBIST) and a Latch Array.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example storage latch array row clocking circuit.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows example address multiplexers for selecting rows in the array in a plurality of modes.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows example multiplexers for providing write enable and read enable signals in a plurality of modes.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a Latch Array in the ATPG row &#x201c;0&#x201d; scannable mode using &#x201c;A&#x201d; latch row multiplexers.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is an example of a testable Latch Array wrapper and pin-out.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> depicts an example Latch Array loading row &#x201c;0&#x201d; with serial-in data operative in Scan Dump mode.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> depicts an example Latch Array loading row &#x201c;1&#x201d; with serial-in data operative in Scan Dump mode.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>9</b>C</figref> depicts an example Latch Array loading row &#x201c;2&#x201d; with serial-in data operative in Scan Dump mode.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>9</b>D</figref> depicts an example Latch Array loading row &#x201c;3&#x201d; with serial-in data operative in Scan Dump mode.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>9</b>E</figref> depicts an example Latch Array loading row &#x201c;0&#x201d; with serial-in data in Scan Dump mode and shifting a first row of data to scan-out.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>10</b>A</figref> illustrates a four row, four column Latch Array after 17 scan shift clocks.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>10</b>B</figref> illustrates a four row, four column Latch Array after 31 scan shift clocks.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>10</b>C</figref> illustrates a four row, four column Latch Array after 32 scan shift clocks.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0030" num="0029">The following discussion is to enable any person skilled in the art to make and use the technology disclosed. Various modifications to the disclosed implementations will be clear to those skilled in the art, and the general principles defined can apply to other implementations and applications without departing from the spirit and scope of the technology disclosed. Thus, the technology disclosed is not limiting to the implementations shown but is to be accorded the widest scope consistent with the principles and features disclosed.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is heuristic diagram of a data processing system including a tester <b>20</b>, a memory built-in self-test MBIST module <b>140</b>, a data verification module <b>30</b> included as part of, or coupled to, an integrated circuit <b>40</b> which includes one or more scannable storage element arrays <b>102</b>. As illustrated, the circuit <b>40</b> can include scannable storage element arrays configured as scalar FIFOs <b>17</b> and Vector FIFOs <b>16</b>. Other types of memory can be included on the integrated circuit, implemented using scannable storage element arrays as described herein. In this example, the integrated circuit <b>40</b> comprises a reconfigurable processor (RP) having an array of reconfigurable units (e.g., PCU <b>41</b>, PMU <b>42</b>), the units including or being coupled to the scannable storage element arrays <b>102</b> for various purposes. In one embodiment, the integrated circuit comprises a coarse grain reconfigurable array (CGRA) of reconfigurable units, such as described in Prabhakar et al., &#x201c;Plasticine: A Reconfigurable Architecture for Parallel Patterns,&#x201d; ISCA '17, Jun. 24-28, 2017, Toronto, ON, Canada, which is incorporated by reference as if fully set forth herein. Scannable storage element arrays as described herein can be part of any type of integrated circuit, such as a microprocessor, a digital signal processor, a microcontroller, an application-specific integrated circuit (ASIC), a communications device, a memory controller, a field programmable gate array (FPGA), or the like.</p><p id="p-0032" num="0031">The Tester <b>20</b> comprises an automatic test pattern generator (ATPG), transition testing (TT), scan dump and scan chain interfaces, scan logic and scan verification. The Tester outputs MODE_SELECTS <b>21</b> to choose between the functional mode, the MBIST mode, scan dump mode and the ATPG/TT scan modes. A SCAN_IN line <b>130</b> injects serial test data to a scan chain on the integrated circuit <b>40</b>. The SCAN_CONTROL <b>22</b> is a bus comprising the scan shift clock. The SCAN_OUT/SCAN_DUMP_OUT line <b>160</b> is the data output after traversing the scan chains in the RP. The MBIST <b>140</b> outputs MBIST_ADDR/DATA (line <b>24</b>) which comprise the address, data, and enable lines to test the Latch Array rows. The MBIST <b>140</b> also outputs the MBIST_COMPARE <b>146</b> vectors to the Data Verification module <b>30</b>. The Data Verification module <b>30</b> contains the Data Out Circuits and Comparators <b>190</b> whose first input is the vector DOUT [N:0] <b>34</b> which must compare with MBIST_COMPARE <b>146</b> vectors. The DOUT [N:0] <b>34</b> is the output generated by the MBIST controller. In some embodiments, the MBIST <b>140</b> and Data Verification module <b>30</b> are embedded within the example integrated circuit <b>40</b> block.</p><p id="p-0033" num="0032">As described herein, some or all memory implemented using scannable storage element arrays on the integrated circuit are incorporated in one or more scan chains as represented by line <b>25</b> (and/or scan dump chains which can be scan chains configured to support scan dump), and testable using at least one of the tester <b>20</b>, Memory Built In Self Test MBIST module <b>140</b> and data verification module <b>30</b>, and some or all memory implemented using storage element arrays on the integrated circuit can be written with data from line <b>24</b> and output data on line <b>34</b> for use with the MBIST unit <b>140</b>.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is schematic diagram of an implementation of a scannable storage element array in which the storage elements are latches. The array of <figref idref="DRAWINGS">FIG. <b>2</b></figref> includes four rows by four columns (4&#xd7;4) of latches. The scannable array comprises one row <b>104</b> of &#x201c;B&#x201d; latches B0 to B3 (&#x201c;buffer latches&#x201d;), and four &#x201c;A&#x201d; latch rows, a row <b>106</b> of &#x201c;A&#x201d; latches (&#x201c;storage latches&#x201d;), a row <b>107</b> of &#x201c;A&#x201d; latches, a row <b>108</b> of &#x201c;A&#x201d; latches, a row <b>109</b> of &#x201c;A&#x201d; latches. The &#x201c;B&#x201d; latches in this example are enabled &#x201c;active low&#x201d; in response to the clock on line <b>215</b>, and latch input data from the corresponding multiplexer during the interval when the clock on line <b>215</b> is low. The &#x201c;A&#x201d; latches in this example are enabled &#x201c;active high&#x201d; in response to the corresponding row clock on line <b>126</b><i>b</i>, and latch respective bits of input data LA_DIN[3:0] from &#x201c;B&#x201d; latches in respective columns during the interval when the corresponding row clock on line <b>126</b><i>b </i>is high.</p><p id="p-0035" num="0034">The &#x201c;A&#x201d; and &#x201c;B&#x201d; latches are storage elements having enable inputs which pass their input data to their output when the enable signal is asserted, and hold the last value of the input data when the enable signal is de-asserted. Because they pass their input data to their output when the enable signal asserted, they can be referred to as transparent latches. As a result, their output is not necessarily stable during the time that the enable signal is asserted, and depends on the fluctuations of the input signals in that enabled interval.</p><p id="p-0036" num="0035">The &#x201c;A&#x201d; and &#x201c;B&#x201d; latches in scannable latch array of <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be implemented using D-latches or other storage element circuits, with active high and active low enable inputs, respectively. In this example, the enable input to the each of the &#x201c;B&#x201d; latches is active low, and so the &#x201c;B&#x201d; latch is enabled when the CLOCK signal is low (a &#x201c;second part of the clock period&#x201d;), and holds the data value on its input at the end of the low phase of the clock during the time that the CLOCK signal is high (a &#x201c;first part of the clock period&#x201d;), that is during the high phase of the CLOCK signal. Also in this example, the enable input to each of the &#x201c;A&#x201d; latches is active high, and so the &#x201c;A&#x201d; latch is enabled when the corresponding row clock signal (e.g. CLK[0]) is high, and holds the data value on its input at the end of the high phase of the corresponding row clock signal (e.g. CLK[0]), that is during the high phase of the corresponding row clock signal (e.g. CLK[0]).</p><p id="p-0037" num="0036">In this embodiment, the CLOCK signal and the row clock signals (e.g. CLK[0]), are synchronized, meaning herein that the high and low phases are aligned sufficiently for this operation to operate without unacceptable glitches. So the &#x201c;B&#x201d; latch captures an input value at the end of the low phase of the CLOCK signal, which corresponds with the end of the low phase of the row clock signals, and holds the captured input value during the high phase of row clock signals which corresponds to the high phase of the CLOCK signal. This relationship establishes a master-slave flip-flop operation, in which the &#x201c;B&#x201d; latch is a master latch for a corresponding column of &#x201c;A&#x201d; latches, and the &#x201c;A&#x201d; latch of a selected row is the slave latch. The &#x201c;A&#x201d; latch in a selected row therefore latches new data at the rising edge of the row clock signal. Because the master &#x201c;B&#x201d; latch is holding its data during the high phase of the CLOCK signal, and the slave &#x201c;A&#x201d; latch changes only during the high phase of the row clock signal, any changes in data in the latch array are synchronized the leading edge of the row clock signal.</p><p id="p-0038" num="0037">More generally, the &#x201c;B&#x201d; latches are enabled in a first part of a clock period of a scan clock, and the &#x201c;A&#x201d; latches are enabled in a second part of the clock period, so that data is captured in the &#x201c;A&#x201d; latch on transition from the first part to the second part of the clock period. Data read from the latches is stable during the second part of the clock period. For example, in an alternate embodiment, the &#x201c;B&#x201d; latches can be active high, and the &#x201c;A&#x201d; latches can be active low.</p><p id="p-0039" num="0038">An &#x201c;A&#x201d; latch in the latch array can be incorporated into a scan chain that utilizes this master-slave operation. The use of transparent latches in the array (&#x201c;A&#x201d; latches) results in substantial saving of area because the circuits to implement them are smaller than circuits for flip-flops. The configuration described herein however, provides the ability to include storage elements in the array in a scan chain, and to support other testing methodologies.</p><p id="p-0040" num="0039">In the row <b>104</b> of &#x201c;B&#x201d; latches, input multiplexers <b>230</b>-<b>233</b> are connected to the inputs of respective &#x201c;B&#x201d; latches B0-B3, and have control inputs connected to a scan enable signal SCAN_EN on line <b>290</b>. The outputs of the input multiplexers <b>230</b>-<b>233</b> collectively provide a scan mode input bus and/or a scan dump input bus (not separately shown in the figure). Input multiplexer <b>233</b> has its output connected to the input of &#x201c;B&#x201d; latch B3. A first input of the input multiplexer <b>233</b> is a corresponding line from the data in bus <b>120</b><i>b</i>, carrying bit 3 of the data DIN[3:0], and a second input of the input multiplexer <b>233</b> is a SCAN-IN signal received from a scan chain.</p><p id="p-0041" num="0040">Input multiplexer <b>232</b> has its output connected to the input of &#x201c;B&#x201d; latch B2. A first input of the input multiplexer <b>232</b> is a corresponding line from the data in bus <b>120</b><i>b</i>, carrying bit 2 of the data DIN[3:0], and a second input of the input multiplexer <b>232</b> is a corresponding line from a data out bus <b>34</b>, carrying bit 3 of the data signal DOUT[3:0].</p><p id="p-0042" num="0041">Input multiplexer <b>231</b> has its output connected to the input of &#x201c;B&#x201d; latch B1. A first input of the input multiplexer <b>231</b> is a corresponding line from the data in bus <b>120</b><i>b</i>, carrying bit 1 of the data DIN[3:0], and a second input of the input multiplexer <b>232</b> is a corresponding line from a data out bus <b>34</b>, carrying bit 2 of the data signal DOUT[3:0].</p><p id="p-0043" num="0042">Input multiplexer <b>230</b> has its output connected to the input of &#x201c;B&#x201d; latch B0. A first input of the input multiplexer <b>230</b> is a corresponding line from the data in bus <b>120</b><i>b</i>, carrying bit 0 of the data DIN[3:0], and a second input of the input multiplexer <b>230</b> is a corresponding line from a data out bus <b>34</b>, carrying bit 1 of the data signal DOUT[3:0].</p><p id="p-0044" num="0043">A first mode of operation is the functional mode in which the multiplexers <b>230</b> to <b>233</b> connect corresponding lines of the input bus carrying DIN[3:0] to the inputs of latches B3 to B0. A second mode of operation is the scan mode, where the multiplexer <b>233</b> connects SCAN-IN on line <b>130</b> to the input of latch B3, the multiplexer <b>232</b> connects DOUT[3] from bus <b>34</b> to the input of latch B2; the multiplexer <b>231</b> connects DOUT[2] from bus <b>34</b> to the input of latch B <b>1</b>; and the multiplexer <b>230</b> connects DOUT[1] from bus <b>34</b> to the input of latch B0. During an MBIST mode, the input bus carrying DIN[3:0] can carry the MBIST input data.</p><p id="p-0045" num="0044">Also, included is an &#x201c;A&#x201d; latch row clocking circuit <b>126</b>. The latch row clocking circuit <b>126</b> receives the clock on line <b>215</b>, and row select signals (e.g., addresses) not shown, and applies the clock signal from line <b>215</b> to a selected row. In some embodiments, the clock signals applied on the selected rows can be generated from alternate sources, so long at the operative timing is correct.</p><p id="p-0046" num="0045">Also, are &#x201c;A&#x201d; latch row select multiplexers <b>260</b> to <b>263</b> (in group <b>110</b>) having inputs connected to the outputs of one &#x201c;A&#x201d; latch in each row in respective columns of the array. The control signal READ-ADDR on line <b>256</b> is connected to &#x201c;A&#x201d; latch row multiplexers <b>110</b> and selects an &#x201c;A&#x201d; latch row to couple onto DOUT [3:0] <b>34</b>.</p><p id="p-0047" num="0046">During a write operation for both functional and scan modes, the selected one of the inputs SCAN-IN or DIN [3] for multiplexer <b>233</b> is input to the corresponding &#x201c;B&#x201d; latch, B3. The B3 latch will output LA-DIN [3] to a first column of &#x201c;A3&#x201d; latches. Decoding a physical address causes latch row clocking circuit <b>126</b> to provide a valid row clock for the A3 latch of the selected &#x201c;A&#x201d; latch row, the A3 latch of the selected row captures the data while the row clock is high. In this example, there are four row clocks for the four &#x201c;A&#x201d; latch rows.</p><p id="p-0048" num="0047">Similarly, during a write operation for both functional and scan modes, the selected one of the inputs DOUT [3] or DIN [2] for multiplexer <b>232</b> is input to &#x201c;B&#x201d; latch, B2. The B2 &#x201c;B&#x201d; latch will output LA-DIN [2] to a second column of &#x201c;A2&#x201d; latches, and the A2 latch of selected the row captures the data while the row clock is high.</p><p id="p-0049" num="0048">Similarly, during a write operation for both functional and scan modes, the selected one of the inputs DOUT [2] or DIN [1] for multiplexer <b>231</b> is input to &#x201c;B&#x201d; latch, B1. The B1 &#x201c;B&#x201d; latch data will output LA-DIN [1] to a third column of &#x201c;A1&#x201d; latches, and the A1 latch of the selected row captures the data while the row clock is high.</p><p id="p-0050" num="0049">Similarly, during a write operation for both functional and scan modes, the selected one of the inputs DOUT [1] or DIN [0] for multiplexer <b>230</b> are input to &#x201c;B&#x201d; latch, B0. The B0 &#x201c;B&#x201d; latch data will output LA-DIN [0] to a fourth column of &#x201c;A0&#x201d; latches, and the A0 latch of the selected row captures the data while the row clock is high.</p><p id="p-0051" num="0050">For a write operation in the functional mode, the latch array can store input vectors in parallel. In the example illustrated, the input vector is four bits DIN[3:0] received from a functional data path in the integrated circuit. In other embodiments, the input vector can have any width, such as eight bits, 16 bits, 32 bits, 128 bits, and so on. In a one cycle write of an input vector DIN[3:0], the bits of input data DIN[3:0] on the bus <b>120</b><i>b </i>are captured in parallel in the &#x201c;B&#x201d; latches B3 to B0 while the clock signal on line <b>215</b> is low, and held while the clock signal is high. While the row clock signal on line <b>126</b><i>b </i>of the selected row, e.g. CLK[0], is high, the data bits captured during the low phase and held during the high phase of the input clock signal on line <b>215</b> in the &#x201c;B&#x201d; latches B3 to B0 are captured in parallel in the corresponding &#x201c;A&#x201d; latches A3 to A0 of the selected row, and passed through to the multiplexers <b>263</b>-<b>262</b> and the output data bus <b>34</b> as bits DOUT[3:0]. The &#x201c;B&#x201d; latches B3 to B0 hold the data bits received at their respective inputs at the end of the high phase of the row clock while the corresponding row clock is low. In this example, the input clock on line <b>215</b> and the row clocks on lines <b>126</b><i>b </i>are synchronized, meaning herein that the high and low phases are aligned sufficiently for this operation to operate without unacceptable glitches.</p><p id="p-0052" num="0051">In the scan modes, input data captured while the input clock is low includes four bits: the SCAN-IN bit from a scan chain in latch B3, DOUT[3] in latch B2 to shift the data from latch B3 to latch B2, DOUT[2] in latch B1 to shift select data from latch B2 to latch B <b>1</b>, and DOUT[1] in latch B0 to shift the data from latch B1 to latch B0. While the row clock signal on line <b>126</b><i>b </i>of the selected row, e.g. CLK[0], is high, the data bits captured during the low phase and held during the high phase of the input clock signal on line <b>215</b> in the &#x201c;B&#x201d; latches B3 to B0 are captured in parallel in the corresponding &#x201c;A&#x201d; latches A3 to A0 of the selected row, and passed through to the multiplexers <b>263</b>-<b>262</b> and the output data bus <b>34</b> as bits DOUT[3:0]. The bit DOUT[0] from the last column of the latch array is the SCAN_OUT bit for the latch array, and is fed to the scan chain SCAN_OUT line <b>160</b> through a buffer <b>234</b>, in this example. This feedback from the output bus DOUT[3:0] shifted by one position implements a serial shift data path through the latch array, which is inserted into the scan chain of the integrated circuit.</p><p id="p-0053" num="0052">Generally, the circuit of <figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example of a memory circuit in which the input row includes a number N of latches B(n), the input bus includes the number N of input bus lines DIN(n), and the output bus includes the number N of output bus lines DOUT(n), where N is the number of columns of the array. Also, the first input of the input selector connected to the data input of latch B(n) is connected to input bus line DIN(n), for n going for 0 to N&#x2212;1, and the second input of the input selector connected to the data input of latch B(n) in the input row other than the first latch is connected to output bus line DOUT(n+1), for n going from 0 to N&#x2212;2, that is to a next adjacent column in the array. The variable N can be any practical positive integer. The number N in this example corresponds with the number of columns in the array. Although in the examples illustrated, N is a power of 2, there can be any number of columns. Other implementations include numbers columns that are not powers of 2, and odd numbers of columns. Also, in the illustrated example the number of rows is a power of 2, there can be any number of rows. Other implementations include numbers of rows that are not powers of 2, and odd numbers of rows.</p><p id="p-0054" num="0053">In another embodiment, the storage elements implemented using the &#x201c;A&#x201d; latches in the array of <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be implemented using SRAM bit cells, typically six transistor cells including opposing inverters and pass gates connecting the opposing inverter inputs to true and complement terminals of the cells, which are connected to corresponding true and complement bit lines. The bit lines in a scannable storage element array as described herein can be shared by the bit cells in each column. Sense amplifiers are coupled to the true and complement bit lines, which provide output data for a selected bit cell in the corresponding column. In this case, the multiplexers <b>260</b> to <b>263</b> can be replaced by the sense amplifiers for the corresponding columns of cells. Also, the LA_DIN[3:0] lines can be differential signals applied to the true and complement bit lines. The row clocks CLK[3:0] are applied to the word lines which connect to enable inputs of pass gates of the bit cells in corresponding rows. An SRAM bit cell can be implemented so that it is enabled when the word line signal is high (a second part of the clock period), and holds data while the word line signal is low (a first part of the clock period). In this functional sense, it is like a transparent latch and can be used for implantation of scannable arrays as described herein.</p><p id="p-0055" num="0054"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example schematic illustrating a DIN[3:0] data path comprising data multiplexer block <b>120</b>. The control MB_RUN on line <b>320</b> is a selector input to the data multiplexer block <b>120</b>, which selects between memory built-in self-test data MBDIN (such as MIST DATA on line <b>24</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and DATA from the functional circuitry represented by cloud <b>120</b><i>a</i>. In this example, the multiplexer block <b>120</b> comprises four multiplexers <b>310</b>-<b>313</b>. When the MBIST function is running the signal MB_RUN on line <b>320</b> causes the multiplexers <b>310</b>-<b>313</b> to select data MBDIN. When the MBIST function is not running, the signal MB_RUN on line <b>320</b> causes the multiplexers <b>310</b>-<b>313</b> to select data DATA. The data multiplexer block <b>120</b> outputs DIN [3:0] on bus <b>120</b><i>b </i>which is applied to the multiplexers <b>263</b>-<b>260</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example schematic illustrating an implementation of an array row clocking circuit <b>126</b> block suitable for use in the circuit shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. This example schematic is an implementation of a clocking circuit that provides a decoded clock for each row. Referring to the details of the schematic, the output of the AND gate <b>416</b> is a row clock CLK[N] on line <b>126</b><i>b </i>of CLK[3:0] shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The address S_WA [1:0] <b>328</b> are input to a decoder <b>430</b> (e.g. a one hot decoder) for row selection in the functional write mode. Control signals SCAN_EN <b>290</b> and S_WE <b>348</b> are inputs to an OR gate <b>422</b>. The AND gate <b>432</b> receives a first input <b>423</b> from the output of the OR gate <b>422</b> and a second input <b>431</b> from the decoder <b>430</b> to provide a data input <b>433</b> to active low latch <b>434</b>, which is clocked by the input clock on line <b>215</b> (or other synchronized clock), which is a scan clock in the scan modes and a functional clock in the MBIST and functional modes. The clock <b>215</b> and &#x201c;B&#x201d; latch <b>434</b> Q output <b>436</b> are input to the AND gate <b>416</b> to produce the corresponding row clock on line <b>126</b><i>b</i>. Thus, the row address in the latch array is captured at the same time (e.g. low phase of the input clock on line <b>215</b>) as the input data is latched in the &#x201c;B&#x201d; latch row of the latch array, and stable during the access to the selected row. Similar circuits can be used to produce the row select signals in response to read enable RA signals.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example schematic showing an implementation of an address multiplexer circuit <b>122</b> supporting four modes of operation of the latch array, applying addresses for accessing the array. The first mode is the functional mode used in operation of the array. The second mode is a memory built-in self-test mode. The third mode is a scan dump mode, and the fourth mode is the scan mode usable for ATPG/TT and similar testing. The address multiplexer circuit <b>122</b> selects between the functional address bus, the MBIST generated address bus, the scan dump generated address bus, and the ATPG one-row row-0 mode. This example implementation shows two address scan multiplexer circuits; one multiplexer circuit is for write addresses, and one multiplexer circuit is for read addresses.</p><p id="p-0058" num="0057">According to one embodiment, the example write address multiplexer has an output multiplexer <b>329</b> operative to output the write address S_WA [1:0] on line <b>328</b> for supply to the row clock circuit of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, and to output the read address S_RA[1:0] on line <b>338</b>, for generation of the read address controlling the output multiplexers <b>260</b>-<b>263</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The first output multiplexer <b>329</b> receives inputs <b>381</b> from a second multiplexer <b>324</b> and input <b>327</b> from a third multiplexer <b>326</b>. The output multiplexer <b>329</b> output uses SCAN_CTL <b>323</b> to determine modes of operation and to select which address to output. The second multiplexer <b>324</b> selects between the functional input write address wa[1:0] from logic <b>122</b><i>a </i>and MBIST generated write address mbwa[1:0] from line <b>142</b><i>a</i>, and is controlled by the MB_RUN control signal on line <b>320</b>. The third multiplexer <b>326</b> selects between the scan counter address values, SCAN_CNT [3:2] on line <b>312</b>, generated for the Scan Dump mode or a fixed value for the scan row mode using the ATPG_MODE control signal on line <b>321</b>. In this example, the scan row is set for row &#x201c;0&#x201d; in the ATPG_MODE which is 00&#x2032;b binary.</p><p id="p-0059" num="0058">The example read address multiplexer has an output multiplexer <b>332</b> operative to output the read address S_RA [1:0] on line <b>338</b>. The output multiplexer <b>332</b> has an input <b>386</b> from a second multiplexer <b>334</b> and an input <b>337</b> from a third multiplexer <b>336</b>. The output multiplexer <b>332</b> uses SCAN_CTL <b>323</b> to determine modes of operation and to select which address to output. The second multiplexer <b>334</b> selects between the functional input read address ra[1:0] and MBIST generated read address mbra[1:0] using the MB_RUN <b>320</b> control. The third multiplexer <b>336</b> selects between the scan counter address values, SCAN_CNT [3:2] on line <b>312</b>, which are generated by the scan bit-cell counter <b>370</b> for the Scan Dump mode or a fixed value for the scan row mode using the ATPG_MODE <b>321</b> control. In this example, the scan row is set to 0, which is 00&#x2032;b binary. Scan Dump mode uses the scan bit-cell counter <b>370</b> and will start counting when the SCAN_EN <b>290</b> control is high.</p><p id="p-0060" num="0059">A scan bit-cell counter <b>370</b> provides for the Scan Dump mode to strobe row addresses in sequence to dump out the data in the array via the scan chain. A clock is input to increment the counter, a SCAN_EN <b>290</b> control will start the counter and the counter outputs are SCAN_CNT [3:2] on line <b>314</b> and SCAN_CNT [1:0] on line <b>312</b>.</p><p id="p-0061" num="0060">In this example, observation registers <b>380</b> and <b>385</b> capture addresses generated by the address selector. The observation registers <b>380</b>, <b>385</b> are part of a scan chain (not shown) which samples combinatorial logic outputs from multiplexers <b>324</b> and <b>334</b>, which output read/write addresses into the scan chain produced by the functional circuit on the device, or by the MBIST module. The observation registers capture the functional read/write addresses from lines <b>122</b><i>a </i>and <b>142</b><i>a </i>input to the multiplexers <b>324</b> and <b>334</b> so that the logic generating the addresses can be evaluated using the scan chain in ATPG/TT scan modes.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example schematic that shows an example enable signal multiplexer <b>124</b> for the enable bus applied as input to the row clock circuit, such as that shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, for the latch array. An enable scan multiplexer selects between the two inputs, functional read/write enable signal <b>124</b><i>a </i>and MBIST generated enable signal <b>144</b><i>a</i>. The output of the multiplexers is an enable signal bus represented by <b>124</b><i>b</i>. One multiplexer is operative for each read enable and write enable circuit. The multiplexer <b>340</b> selects between the functional write enable <b>362</b> and the MBIST generated write enable <b>364</b> using MB_RUN <b>320</b>. The multiplexer <b>350</b> selects between the functional read enable <b>352</b> and the MBIST generated read enable <b>354</b> using MB_RUN <b>320</b>.</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example schematic depicting a scannable Latch Array <b>102</b> like that of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, having a size 4&#xd7;4 structure in the ATPG row &#x201c;0&#x201d; scannable mode. The ATPG row &#x201c;0&#x201d; scannable mode is active when inputs to the control block <b>510</b> SCAN_EN equals 1, ATPG_MODE 321 equals 1, S_RE <b>358</b> is active and row 00&#x2032;b <b>325</b> is set. In this mode, block <b>510</b> outputs a ROW_OUT control signal on line <b>256</b> operative to enable the row multiplexers row &#x201c;0&#x201d; data.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows an input pattern HGFE DCBA on the SCAN_IN line <b>130</b>, which depicts abstractions of data, where ABCD, etc. are labels for a specific bit in the stream of bits going in. So, the letter A represents a bit having one of a binary 0 or binary 1 value at a specific location in the bit stream, as a way of showing the progression of that specific bit. The same is true for all the bits HGFE DCBA. For clarity, we use letter symbols rather than the binary values as way to track progression of that specific bit in the scan chain.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows ROW-0 <b>106</b> after four scan cycles written with data ABCD, with letter &#x201c;A&#x201d; is in the A0 position, &#x201c;B&#x201d; is in the A1 position, &#x201c;C&#x201d; is in the A2 position, and &#x201c;D&#x201d; is in the A3 position. In a first cycle, data &#x201c;A&#x201d; is stored in the A3 latch, and fed back as input to the B2 latch. In a second cycle, data &#x201c;A&#x201d; is stored in the A2 latch, and data &#x201c;B&#x201d; is stored in the A3 latch, and so on. After four clocks, ROW-0 stores the data &#x201c;D&#x201d; in the A3 latch, &#x201c;C&#x201d; in the A2 latch, &#x201c;B&#x201d; in the A1 latch and &#x201c;A&#x201d; in the A0 latch. A fifth clock would shift the data with &#x201c;E&#x201d; entering the ROW-0 A3 latch and shifting &#x201c;D&#x201d; in the A2 latch, &#x201c;C&#x201d; in the A1 latch and &#x201c;B&#x201d; in A0 latch, the data &#x201c;A&#x201d; would then shift out via DOUT[0] to the SCAN_OUT line <b>160</b> via the buffer <b>234</b>. This routing provides shift register movement of data through the selected row providing coverage of the peripheral circuits of the array (addressing, clocking, muxing . . . ) by the scan operation. After eight clocks, ROW-0 stores the data &#x201c;H&#x201d; in the A3 latch, &#x201c;G&#x201d; in the A2 latch, &#x201c;F&#x201d; in the A1 latch, and &#x201c;E&#x201d; in the A0 latch, and the data DCBA would be shifted down the scan chain.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a schematic block diagram using a representation of a scannable storage element array <b>586</b> comprising four 4&#xd7;4 scannable latch array macros (&#x201c;4r&#xd7;4c&#x201d;), each of which can be implemented as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Concatenating the four 4&#xd7;4 scannable latch array macros <b>102</b> results in a 4 row by a 16 column functional array, usable for example in a functional mode as a 16 bit vector FIFO. The representation includes 4r&#xd7;4c LA_macro pin out list <b>584</b>. Note that the terms WR_PTR [1:0] and RD_PTR [1:0] refer to read/write addresses pointers. The term &#x201c;SI&#x201d; is serial-in data, &#x201c;SO&#x201d; is serial-out or scan-out, &#x201c;SE&#x201d; is scan-enable. The schematic block diagram of a Verilog style block (la_wrapper 4r&#xd7;16c <b>586</b>) illustrates appending four 4&#xd7;4 Latch Array macros (4r&#xd7;4c LA_macro <b>584</b>) to achieve a 4&#xd7;16 Latch Array.</p><p id="p-0067" num="0066">In some embodiments, the number of rows can be extended, and the number of columns is fixed for concatenation purposes. Using &#x201c;mini&#x201d; 4-column macro instantiations allows amortization of test logic and fixes the column count to &#x201c;4&#x201d;. Repeating 4 column macros can achieve a desired wrapper width where a byte is two macros, a word is four macros, etc.</p><p id="p-0068" num="0067">The la_wrapper 4r&#xd7;16c <b>586</b> illustrates additional signals, a Test at-speed mode with the signal &#x201c;start&#x201d;, a test static mode with the signal ATPG_MODE and a broadcast with Scan_En. There is also test static with daisy-chained SCAN_IN. MBIST input logic, staging flops, and Pass/Fail amortize over all 4r&#xd7;4c macro instances.</p><p id="p-0069" num="0068">In some embodiments, individual placement of each mini 4&#xd7;4 Latch Array (4r&#xd7;4c LA_macro <b>584</b>) can be more efficient in a semiconductor integrated circuit as they are small units connected by scan stitching. Scan stitching between macros can allow for optimal place-and-route flexibility. This eases the problem of placement and routing as it is easier to place smaller chunks of Latch Array memory when building a FIFO or LUT (look-up table) unit. Timing constraints also impose restrictions. MBIST timing can require memory test circuits to be placed in proximity to MBIST controllers. The ability to split Latch Arrays into several macros allows for flexibility to meet timing constraints. Devices having a greater number of memory arrays spread over the same size (or wider) chip area can run into timing problems and additional routing complexities. This macro concept comes to solve that problem.</p><p id="p-0070" num="0069">In some embodiments, Functional Mode implementations of the mini 4&#xd7;4 Latch Array example (4r&#xd7;4c LA_macro <b>584</b>) are sized in row depth and column width for a FIFO operative to load data and pop data off a memory stack using (WR_PTR [1:0]) write addresses pointers and (RD_PTR [1:0]) read addresses pointers. In some embodiments, the system has flags for full, half-full and empty to monitor a FIFO memory stack. In other aspects, a FIFO wrap-around mode allows for circular buffering of data. In other embodiments, implementations of LUTs are used in the Functional Mode.</p><p id="p-0071" num="0070">The following is an example pseudo-code method for a 4&#xd7;4 Scan Dump shown.</p><heading id="h-0007" level="2">Example Pseudo-Code Method for a 4&#xd7;4 Scan Dump</heading><p id="p-0072" num="0071">Step 0: Stop Chip, prepare for Scan Dump<br/>Stop clocks and set ATPG_MODE=0</p><heading id="h-0008" level="2">Step 1: Select Scan Dump Mode</heading><heading id="h-0009" level="2">Scan_EN=1</heading><p id="p-0073" num="0072">Row Counter points to row 0<br/>Step 2: Begin scan unload<br/>4 shift clocks, Row 0 data shifts out scan-out<br/>Column Counter equals 2&#x2032;b11 increments Row Counter to 1<br/>4 shift clocks, Row-1 data shifts out scan-out<br/>Column Counter increments Row Counter to 2<br/>4 shift clocks, Row-2 data shifts out scan-out<br/>Column Counter increments Row Counter to 3<br/>4 shift clocks, Row-3 data shifts out scan-out<br/>Column Counter increments Row Counter to 0<br/>Repeat in other macros</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref> depicts a schematic showing an example 4&#xd7;4 scannable Latch Array <b>102</b> loading row &#x201c;0&#x201d; with serial-in data, operative in Scan Dump mode. The decoder SCAN DUMP &#x201c;A&#x201d; LATCH ROW-MUXING <b>710</b> Row-0 mode is active when SCAN_EN equals 1, ATPG_MODE 321 equals 0, S_RE <b>358</b> is active and SCAN_CNT [3:2] 312 equals 0 to output a ROW_OUT <b>256</b> control that enables the row muxes to select Row-0 for the ROW-DATA. An example Scan Dump mode shows an input pattern PONM LKJI HGFE DCBA that is the serial data for the SCAN_IN input on line <b>130</b> to the B3 latch. After four clocks, ROW-0 stores the data &#x201c;D&#x201d; in the A3 latch, &#x201c;C&#x201d; in the A2 latch, &#x201c;B&#x201d; in the A1 latch and A&#x2033; in the A0 latch. In Scan Dump mode, the data &#x201c;A&#x201d; shifts out to the SCAN_OUT line <b>160</b> via the buffer <b>234</b> only after a wrap-around. This routing provides the shift register movement of data from each of the row outputs across the row-columns using clocking provided by the &#x201c;A&#x201d; latch row clocking circuit <b>126</b>.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>9</b>B</figref> depicts a schematic showing an example scannable Latch Array <b>102</b> loading row &#x201c;1&#x201d; with serial-in data, operative in Scan Dump mode with input TSRQ PONM LKJI HGFE as the serial data for the SCAN_IN input to the B3 latch remaining after scanning in DCBA. After eight clocks, ROW 1 stores the data &#x201c;H&#x201d; in the A3 latch, &#x201c;G&#x201d; in the A2 latch, &#x201c;F&#x201d; in the A1 latch, and E&#x2033; in the A0 latch. The decoder SCAN DUMP &#x201c;A&#x201d; LATCH ROW-MUXING <b>711</b> ROW-1 mode is active when SCAN_EN equals 1, ATPG_MODE 321 equals 0, S_RE <b>358</b> is active and SCAN_CNT [3:2] 312 equals 01&#x2032;b, and outputs a ROW_OUT <b>256</b> control that enables the row muxes to select Row-1 for the ROW-DATA [N:0] <b>245</b>.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>9</b>C</figref> depicts a schematic showing an example scannable Latch Array <b>102</b> loading row &#x201c;2&#x201d; with serial-in data, operative in Scan Dump mode. The decoder SCAN DUMP &#x201c;A&#x201d; LATCH ROW-MUXING <b>721</b> Row-2 mode is active when SCAN_EN equals 1, ATPG_MODE 321 equals 0, S_RE <b>358</b> is active and SCAN_CNT [3:2] 312 equals 10&#x2032;b and can output a ROW_OUT <b>256</b> control to enable the row muxes to select Row-2 of the ROW-DATA [N:0] <b>245</b>. The example Scan Dump mode shows an input TSRQ PONM LKJI on line <b>130</b> as serial data for the SCAN_IN input to the B3 latch. After four clocks, Row-2 stores the data &#x201c;L&#x201d; in the A3 latch, &#x201c;K&#x201d; in the A2 latch, &#x201c;J&#x201d; in the A1 latch and &#x201c;I&#x201d; in the A0 latch.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>9</b>D</figref> depicts an example scannable Latch Array <b>102</b> loading row &#x201c;3&#x201d; with serial-in data operative in Scan Dump mode. The decoder SCAN DUMP &#x201c;A&#x201d; LATCH ROW-MUXING <b>721</b> mode is active when SCAN_EN equals 1, ATPG_MODE 321 equals 0, S_RE <b>358</b> is active and SCAN_CNT [3:2] 312 equals 11&#x2032;b and will output a ROW_OUT <b>256</b> control, enabling the row muxes to select row-3 for the ROW-DATA [N:0] <b>245</b>. The input TSRQ PONM on line <b>130</b> is applied as the serial data for the SCAN_IN input to the B3 latch. After four clocks, ROW-3 stores the data &#x201c;P&#x201d; in the A3 latch, &#x201c;O&#x201d; in the A2 latch, &#x201c;N&#x201d; in the A1 latch and &#x201c;M&#x201d; in the A0 latch.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>9</b>E</figref> depicts a schematic showing an example scannable Latch Array <b>102</b> wrapping row &#x201c;0&#x201d; with serial-in data, operative in Scan Dump mode and shifting a first row of data to SCAN_OUT==DCBA <b>730</b>. The decoder SCAN DUMP &#x201c;A&#x201d; LATCH ROW-MUXING ROW-0 <b>714</b> mode is active when SCAN_EN equals 1, ATPG MODE 321 equals 0, S_RE <b>358</b> is active and SCAN_CNT [3:2] 312 equals 00&#x2032;b will output a ROW_OUT <b>256</b> control to enable the row muxes to select Row-0 for the ROW-DATA [N:0] <b>245</b>. The input TSRQ on line <b>130</b> as the serial data for the SCAN_IN input to the B3 latch. After four clocks, ROW-3 stores the data &#x201c;T&#x201d; in the A3 latch, &#x201c;S&#x201d; in the A2 latch, &#x201c;R&#x201d; in the A1 latch, and &#x201c;Q&#x201d; in the A0 latch. Rows one, two, and three were previously filled in <figref idref="DRAWINGS">FIGS. <b>9</b>A, <b>9</b>B and <b>9</b>C</figref>. During wrap-around mode, SCAN_OUT shifts the data DCBA after four clock cycles.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>10</b>A</figref> illustrates a four row, four column scannable Latch Array after 17 scan shift clocks <b>812</b>. The scannable Latch Array <b>810</b> first fills with sixteen data values, counting from a Bit 0 value to a Bit 15 value. On the 17th shift clock, upon wrap-around, the row-0 A0 column latch shifts out <b>812</b> the Bit 0 value to SCAN-OUT line <b>160</b> and shifts in the value of Bit 1. Bit 2 shifts into the row-0 A1 column latch, Bit 3 shifts into the row-0 A2 column latch and a Bit 16 shifts into the row-0 A3 column latch. The next bit value 17 <b>811</b> is on the SCAN_IN line <b>130</b>, ready to shift in on the next shift clock.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>10</b>B</figref> illustrates a four row, four column scannable Latch Array after 31 scan shift clocks. The scannable Latch Array <b>820</b> fills with a second set of fifteen new data values, counting from a Bit 16 value to a Bit 30 value. On the 31st shift clock, during wrap-around, the value of Bit 15 shifts into the row-3 A0 column latch and the Bit 14 <b>822</b> value shifts to SCAN-OUT line <b>160</b>. Bit 28 shifts into the row-3 A1 column latch, Bit 29 shifts into the row-3 A2 column latch, and Bit 30 shifts into the row-3 A3 column latch. The next Bit value 31 <b>821</b> is on the SCAN_IN line <b>130</b> ready to shift in on the next shift clock.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>10</b>C</figref> illustrates a four row, four column scannable Latch Array after 32 scan shift clocks. The scannable Latch Array <b>830</b> first fills with a second set of fifteen new data values counting from a Bit 16 value to a Bit 31 value as shown in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref>. On the 32nd clock, during wrap-around, the row-3 A0 column latch shifts out the Bit 15 <b>832</b> to SCAN-OUT line <b>160</b> and Bit 28 shifts into the row-3 A0 column latch. Bit 29 shifts into the row-3 A1 column latch, Bit 30 shifts into the row-3 A2 column latch, and a Bit 32 shifts into the row-3 A3 column latch. The next Bit value 32 <b>831</b> is on the SCAN_IN line <b>130</b> ready to shift in on the next shift clock.</p><p id="p-0082" num="0081">Testability of memory on integrated circuits is improved by connecting storage elements like latches in memory to scan chains and configuring memory for scan dump. The use of latches and similar compact storage elements to form scannable memory can extend the testability of high-density memory circuits on complex integrated circuits operable at high clock speeds. A scannable memory architecture includes an input buffer with active low buffer latches, and an array of active high storage latches, operated in coordination to enable incorporation of the memory into scan chains for ATPG/TT and scan dump testing modes.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An integrated circuit (IC) comprising:<claim-text>an input clock;</claim-text><claim-text>a first scan latch, coupled to the input clock, and having a first output and enabled to load data during a first part of a period of the input clock;</claim-text><claim-text>a clocking circuit, coupled to the input clock, having a first address input, and outputting a plurality of latch clocks with a latch clock of the plurality of latch clocks driven to an active state during a second part of the period of the input clock dependent on the first address input;</claim-text><claim-text>a first set of two or more storage elements having inputs coupled to the first output of the first scan latch, storage elements of the first set of two or more storage elements respectively coupled to a latch clock of the plurality of latch clocks, a storage element of the first set of two or more storage elements enabled to load data during a time that its respective latch clock is in an active state;</claim-text><claim-text>a selector circuit coupled to outputs of the first set of two or more storage elements and having a second address input and a selector output, the selector circuit configured to output a first value from one output of the outputs of the first set of two or more storage elements on the selector output based on the second address input;</claim-text><claim-text>a second scan latch coupled to the selector output enabled to load data during the first part of the input clock period; and</claim-text><claim-text>a scan chain that includes the first scan latch and the second scan latch.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The IC of <claim-ref idref="CLM-00001">claim 1</claim-ref>, comprising an input buffer and an array of storage elements;<claim-text>the input buffer comprising the first scan latch and the second scan latch; and</claim-text><claim-text>an array of storage elements including the first set of storage elements as a column of the array of storage elements.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The IC of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first set of two or more storage elements consists of N storage elements respectively coupled to an Nth latch clock of the plurality of latch clocks, the IC further comprising:<claim-text>a second set of N storage elements having inputs coupled to a second output of the second scan latch, an Nth storage element of the second set of N storage elements coupled to the Nth latch clock of the plurality of latch clocks and enabled to load data during a time that the Nth latch clock is in an active state, and outputs of the second set of N storage elements coupled to the selector circuit which is further configured to also output a second value from one output of the outputs of the second set of N storage elements on the selector output based on the second address input.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. An integrated circuit (IC) comprising:<claim-text>an input buffer enabled to load data during a first part of a clock period;</claim-text><claim-text>an array of storage elements, coupled to the input buffer, enabled to load data from the input buffer to a selected row in the array of storage elements in parallel during a second part of the clock period;</claim-text><claim-text>an output multiplexor, coupled to the array of storage elements, enabled to output data from a chosen row in the array of storage elements in parallel on an output data path;</claim-text><claim-text>a scan input for a scan chain;</claim-text><claim-text>an input multiplexor, coupled to the input buffer, a functional data path, the scan input, and a subset of the output data path, and enabled to select between the functional data path and a set of inputs including the scan input and the subset of the output data path as an input to the input buffer;</claim-text><claim-text>a scan output for the scan chain coupled to a line of the output data path.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The IC of claim <b>10</b>, wherein the input buffer, each row of the array of storage elements, the output data path, the functional data path, the first input of the input multiplexor, and the second input of the input multiplexor each have N elements, numbered from N&#x2212;1 to 0, where N is a positive integer greater than 1;<claim-text>the functional data path is coupled to the first input of the input multiplexor;</claim-text><claim-text>the scan input is coupled to line N&#x2212;1 of the second input of the input multiplexor;</claim-text><claim-text>lines N&#x2212;1 through 1 of the output data path are respectively coupled to lines N&#x2212;2 through 0 of the second input of the input multiplexor; and</claim-text><claim-text>the scan output is coupled to line 0 of the output data path.</claim-text></claim-text></claim></claims></us-patent-application>