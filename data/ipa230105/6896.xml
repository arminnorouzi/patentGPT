<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006897A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006897</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17364399</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>26</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>29</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>955</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>028</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>0272</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>9566</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHODS AND APPARATUS TO DETERMINE MAIN PAGES FROM NETWORK TRAFFIC</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>The Nielsen Company (US), LLC</orgname><address><city>New York</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Papakostas</last-name><first-name>Achilleas</first-name><address><city>Dallas</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Berthelot</last-name><first-name>Travis</first-name><address><city>Lewisville</city><state>TX</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Shapovalov</last-name><first-name>Andrey</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Patel</last-name><first-name>Jaimin</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Phillips</last-name><first-name>Brendan</first-name><address><city>New York</city><state>NY</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods and apparatus to determine main pages from network traffic are disclosed. A disclosed example non-transitory computer readable medium includes instructions which, when executed, cause at least one processor to determine patterns of uniform resource identifiers (URIs) with corresponding main pages, parse data from network traffic, identify at least one of the main pages from the data based on the patterns, and provide the identified at least one of the main pages for crediting thereof.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="223.69mm" wi="145.88mm" file="US20230006897A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="191.35mm" wi="169.67mm" file="US20230006897A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="242.91mm" wi="180.00mm" file="US20230006897A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="245.87mm" wi="160.36mm" orientation="landscape" file="US20230006897A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="225.72mm" wi="149.01mm" file="US20230006897A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="234.10mm" wi="182.03mm" file="US20230006897A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="201.76mm" wi="167.47mm" orientation="landscape" file="US20230006897A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="199.22mm" wi="176.11mm" orientation="landscape" file="US20230006897A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="201.08mm" wi="152.91mm" file="US20230006897A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="240.28mm" wi="167.05mm" file="US20230006897A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="245.96mm" wi="175.77mm" file="US20230006897A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="170.52mm" wi="68.41mm" file="US20230006897A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">FIELD OF THE DISCLOSURE</heading><p id="p-0002" num="0001">This disclosure relates generally to data collection and, more particularly, to methods and apparatus to determine main pages from network traffic.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Web content can be delivered to and presented by a wide variety of content presentation devices such as desktop computers, laptop computers, tablet computers, personal digital assistants, smartphones, etc. Because a significant portion of web content is presented to such devices, monitoring of web content can provide valuable information to advertisers, content providers, and the like.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example environment in which examples disclosed herein can be implemented.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an overview of an example process flow in accordance with teachings of this disclosure.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic overview of an example browsing analysis system in accordance with teachings of this disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart representative of example machine readable instructions that may be executed by example processor circuitry to implement the example browsing analysis system of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart representative of example machine readable instructions that may be executed by example processor circuitry to implement the example browsing analysis system of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example analysis that can be implemented in examples disclosed herein.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates another example analysis that can be implemented in examples disclosed herein.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example processing platform including processor circuitry structured to execute the example machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> to implement the example browsing analysis system of <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram of an example implementation of the processor circuitry of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram of another example implementation of the processor circuitry of <figref idref="DRAWINGS">FIG. <b>8</b></figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a block diagram of an example software distribution platform (e.g., one or more servers) to distribute software (e.g., software corresponding to the example machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> to client devices associated with end users and/or consumers (e.g., for license, sale and/or use), retailers (e.g., for sale, re-sale, license, and/or sub-license), and/or original equipment manufacturers (OEMs) (e.g., for inclusion in products to be distributed to, for example, retailers and/or to other end users such as direct buy customers).</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0015" num="0014">The figures are not to scale. In general, the same reference numbers will be used throughout the drawing(s) and accompanying written description to refer to the same or like parts.</p><p id="p-0016" num="0015">Unless specifically stated otherwise, descriptors such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc. are used herein without imputing or otherwise indicating any meaning of priority, physical order, arrangement in a list, and/or ordering in any way, but are merely used as labels and/or arbitrary names to distinguish elements for ease of understanding the disclosed examples. In some examples, the descriptor &#x201c;first&#x201d; may be used to refer to an element in the detailed description, while the same element may be referred to in a claim with a different descriptor such as &#x201c;second&#x201d; or &#x201c;third.&#x201d; In such instances, it should be understood that such descriptors are used merely for identifying those elements distinctly that might, for example, otherwise share a same name. As used herein, &#x201c;approximately&#x201d; and &#x201c;about&#x201d; refer to dimensions that may not be exact due to manufacturing tolerances and/or other real world imperfections. As used herein &#x201c;substantially real time&#x201d; refers to occurrence in a near instantaneous manner recognizing there may be real world delays for computing time, transmission, etc. Thus, unless otherwise specified, &#x201c;substantially real time&#x201d; refers to real time+/&#x2212;1 second. As used herein, the phrase &#x201c;in communication,&#x201d; including variations thereof, encompasses direct communication and/or indirect communication through one or more intermediary components, and does not require direct physical (e.g., wired) communication and/or constant communication, but rather additionally includes selective communication at periodic intervals, scheduled intervals, aperiodic intervals, and/or one-time events. As used herein, &#x201c;processor circuitry&#x201d; is defined to include (i) one or more special purpose electrical circuits structured to perform specific operation(s) and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors), and/or (ii) one or more general purpose semiconductor-based electrical circuits programmed with instructions to perform specific operations and including one or more semiconductor-based logic devices (e.g., electrical hardware implemented by one or more transistors). Examples of processor circuitry include programmed microprocessors, Field Programmable Gate Arrays (FPGAs) that may instantiate instructions, Central Processor Units (CPUs), Graphics Processor Units (GPUs), Digital Signal Processors (DSPs), XPUs, or microcontrollers and integrated circuits such as Application Specific Integrated Circuits (ASICs). For example, an XPU may be implemented by a heterogeneous computing system including multiple types of processor circuitry (e.g., one or more FPGAs, one or more CPUs, one or more GPUs, one or more DSPs, etc., and/or a combination thereof) and application programming interface(s) (API(s)) that may assign computing task(s) to whichever one(s) of the multiple types of the processing circuitry is/are best suited to execute the computing task(s).</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0017" num="0016">Methods and apparatus to determine main pages from network traffic are disclosed. Web content can be delivered to and presented by a wide variety of content presentation devices. This web content can be analyzed to determine web activity. Some known implementations include monitoring web content of a custom browser. However, data associated with the custom browser is heavily skewed towards a subset of persons willing to use the custom browser. Similarly, external monitoring devices can correspond to data skewed towards those willing to use the external monitoring devices.</p><p id="p-0018" num="0017">Examples disclosed herein enable accurate and computationally efficient determination of main pages (e.g., main websites, main web pages, primary pages, etc.) from extracted and/or parsed uniform resource identifiers (URIs) and/or uniform resource locators (URLs) that are captured in network traffic (e.g., web traffic). Examples disclosed herein also enable space-efficient storage of data and use of relatively less bandwidth than known implementations. Even further, by analyzing network traffic, examples disclosed herein can accurately obtain data without the need for special permission from users.</p><p id="p-0019" num="0018">Examples disclosed herein utilize trained data for subsequent identification of patterns in network traffic for determination/characterization of browsing activity, including access of main pages. For example, a pattern of a main page is trained based on URI sets (e.g., URI lists) encountered during a training phase. The pattern can be generated, maintained and stored on a server, for example. Subsequent to the training phase, in an implementation phase, the pattern is utilized to identify access of the main page by a media device, for example. In particular, the media device can identify the pattern based on comparing URI sets/lists from data packets (e.g., parsed data packets) in network traffic (e.g., data packets obtained via a virtual private network (VPN)) to the aforementioned pattern. As a result, the accessed main page can be forwarded for crediting and/or post-processing. In some examples, the media device employs a web traffic processor (WTFP) to identify the pattern based on the URI sets.</p><p id="p-0020" num="0019">In some examples, the pattern is identified based on a number of occurrences of URIs in the URI sets. In some examples, the URIs and/or the URI sets are removed from a storage (e.g., a data storage) once a main page is determined, thereby saving storage space. In some examples, a ratio of attempts of requested URIs to a total number of occurrences of the request URI in an event log defines the pattern and/or is utilized to identify the pattern. In some examples, the pattern includes, is defined by and/or is associated with lists of URIs associated with a main page. In some such examples, collected and/or obtained URIs are compared to the lists. In some examples, the media device provides and/or forwards the main page to the aforementioned server, thereby reducing an amount of data being transmitted and received therebetween, in addition to reducing an amount of data stored.</p><p id="p-0021" num="0020">As used herein, the term &#x201c;pattern&#x201d; refers to a pattern associated with URIs (e.g., a list or set of URIs) corresponding to a main website or a main page. As used herein, the terms &#x201c;main URI,&#x201d; &#x2018;main URL,&#x201d; &#x201c;main web page&#x201d; and &#x201c;main page&#x201d; refer to a primary page with sub-pages or URIs that are associated therewith. Accordingly, the terms &#x201c;main URI,&#x201d; &#x201c;main URL,&#x201d; &#x201c;main web page&#x201d; and &#x201c;main page&#x201d; can refer to primary websites that call, refer to and/or direct traffic when accessed via a browser or other application. Moreover, the terms &#x201c;main URI,&#x201d; &#x2018;main URL,&#x201d; &#x201c;main web page&#x201d; and &#x201c;main page&#x201d; can refer to pages that are hierarchically above URIs, including intermediate pages/URIs or top level pages/URIs.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example environment <b>100</b> in which examples disclosed herein can be implemented. The example environment <b>100</b> supports monitoring of media presented at one or more monitored sites, such as an example monitored site <b>102</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and includes example media devices (e.g., a media presentation devices) <b>104</b>. Although the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates one of the monitored site <b>102</b> and five of the media devices <b>104</b>, examples disclosed herein can be implemented in an environment <b>100</b> supporting any number of monitored sites <b>102</b> having any number of the media devices <b>104</b>. Further, examples disclosed herein can be implemented in any appropriate network configuration and/or topology.</p><p id="p-0023" num="0022">The environment <b>100</b> of the illustrated example includes an example metering controller <b>106</b> to monitor media presented by the media devices <b>104</b>. In the illustrated example, the media monitored by the metering controller <b>106</b> can correspond to any type of media presentable by the media devices <b>104</b>. For example, monitored media can correspond to media content, such as television programs, radio programs, movies, Internet video, video-on-demand, etc., as well as commercials, advertisements, etc. In this example, the metering controller <b>106</b> determines metering data that may identify and/or be used to identify media presented by the media devices <b>104</b> (and, thus, infer media exposure) at the monitored site <b>102</b>. The metering controller <b>106</b> then stores and reports this metering data via an example network <b>108</b> to an example data processing facility <b>110</b>. In this example, the network <b>108</b> is communicatively coupled to a VPN <b>109</b>.</p><p id="p-0024" num="0023">In this example, the data processing facility <b>110</b> stores, maintains and generates patterns associated with the metering data and performs any appropriate post-processing of the metering data to, for example, determine audience ratings information, identify targeted advertising to be provided to the monitored site <b>102</b>, etc. In this example, the data processing facility <b>110</b> can correspond to any type(s) and/or number of external facilities, cloud-based data centers, or in-house facilities and includes example servers <b>112</b> and an example central database <b>114</b>. In some examples, the post-processing of the metering data is performed on one or more of the servers <b>112</b>. In some examples, the central database <b>114</b> can store the metering data from the metering controller <b>106</b> and/or processed metering data from the servers <b>112</b>. In the illustrated example, the network <b>108</b> can correspond to any type(s) and/or number of wired and/or wireless data networks, or any combination thereof.</p><p id="p-0025" num="0024">In the illustrated example, each of the media devices <b>104</b> monitored by the metering controller <b>106</b> can correspond to any type of audio, video and/or multimedia presentation device capable of presenting media audibly and/or visually. For example, each of the media devices <b>104</b> can correspond to a multimedia computer system, a personal digital assistant, a cellular/mobile smartphone, a radio, a tablet computer, etc.</p><p id="p-0026" num="0025">In examples disclosed herein, the metering controller <b>106</b> can be implemented by or otherwise included in each of the media devices <b>104</b>. This example implementation can be especially useful in scenarios in which a media monitoring application is executed on the media devices <b>104</b>, but the media devices <b>104</b> prevents (e.g., via digital rights management or other techniques) third-party applications, such as the media monitoring application, from accessing protected media data stored on the media device <b>104</b>.</p><p id="p-0027" num="0026">As will be discussed in greater detail below in connection with <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>11</b></figref>, examples disclosed train web access/browser data (e.g., at the servers <b>112</b>) to generate patterns associated with main URIs (e.g., main web pages, primary web pages, etc.). In turn, the patterns are utilized to identify access of the main URIs from data in network traffic (e.g., web traffic, internet traffic, proxy traffic, parsed network traffic, etc.). Examples disclosed herein can be applied to URIs, URLs, or any other type of network/internet content or data. Further, examples disclosed herein can be applied to any appropriate type of web traffic including, but not limited to, HyperText Transfer Protocol (HTTP) data, HyperText Transfer Protocol Secure (HTTPS) data, etc.</p><p id="p-0028" num="0027">While the VPN <b>109</b> is shown in this example, in some examples a proxy (e.g., a proxy server, a proxy device, etc.) can be implemented instead. In some such examples, proxy traffic can be recorded and analyzed for use with examples disclosed herein. In some examples, the VPN <b>109</b> can be implemented on at least one of the media devices <b>104</b>.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an overview of an example process flow <b>200</b> in accordance with teachings of this disclosure. In the illustrated example, a training phase <b>201</b> and an implementation phase <b>203</b> are shown. According to examples disclosed herein, a main page <b>202</b> is associated with a set <b>204</b> of corresponding URIs <b>206</b> (hereinafter <b>206</b>A, <b>206</b>B, <b>206</b>C, <b>206</b>D, etc.). Likewise, a main page <b>210</b> is associated with a set <b>214</b> of URIs including the URI <b>206</b>A and URIs <b>216</b> (hereinafter <b>216</b>A, <b>216</b>B, <b>216</b>C, etc.).</p><p id="p-0030" num="0029">To determine and/or generate patterns associated with the main pages <b>202</b>, <b>210</b>, the sets <b>204</b>, <b>214</b>, respectively, are identified and/or characterized. For example, the patterns are determined by identifying URIs typically or commonly present when a corresponding one of the main pages <b>202</b>, <b>210</b> is loaded and/or accessed. In some examples, a number of occurrences of some URIs and/or related URIs define the pattern. Additionally or alternatively, a timing and delay between when the URIs respond define the pattern. In some examples, artifacts, files and/or embedded data at least partially define the pattern.</p><p id="p-0031" num="0030">To determine whether traffic data and/or browsing data corresponds to at least one of the main pages, the implementation phase <b>203</b> is executed (e.g., without accessing browser data). As a result, access of a main page can be identified based on received, identified and/or monitored URIs. In the example of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the URIs <b>206</b>A, <b>206</b>B, <b>206</b>C, <b>206</b>D are identified or observed at similar times (e.g., within a requisite time period, within a defined time interval, etc.) and, thus, the main page <b>202</b> is determined to be accessed by a user of the media device <b>104</b>. Similarly, the URIs <b>206</b>A, <b>216</b>A, <b>216</b>B, <b>216</b>C are also identified, thereby indicating access of the main page <b>210</b> in the implementation phase <b>203</b>. In this example, the media device <b>104</b> performs the implementation phase <b>203</b> based on patterns received from the server <b>112</b>. As mentioned above, the patterns are defined and stored at the server <b>112</b>, for example. Further, the server <b>112</b> can maintain and update the patterns. In this example, the server <b>112</b> transmits and/or provides the patterns to the media device <b>104</b> at regular intervals or when a condition is met (e.g., at least one pattern is generated, the media device <b>104</b> requests patterns, the media device <b>104</b> cannot determine a main page based on URIs that the media device <b>104</b> has encountered, the media device <b>104</b> is unable to identify a pattern based on previously provided patterns, etc.).</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic overview of an example browsing analysis system <b>300</b> in accordance with teachings of this disclosure. The browsing analysis system <b>300</b> of the illustrated example includes a pattern trainer <b>302</b>, which can be implemented in the servers <b>112</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The example pattern trainer <b>302</b> trains data for use with traffic analyzer circuitry <b>304</b> and pattern identifier circuitry <b>305</b>, both of which are implemented in the media device <b>104</b>, the metering controller <b>106</b> and/or the VPN <b>109</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In turn, the example pattern trainer <b>302</b> includes example grouper circuitry <b>306</b>, example data collector circuitry <b>308</b> and example pattern generator circuitry <b>310</b>. The example browsing analysis system <b>300</b> also includes a data interface <b>314</b> that communicatively couples the pattern trainer <b>302</b> and the pattern identifier circuitry <b>305</b>. Further, in this example, the media device <b>104</b> and/or the pattern identifier circuitry <b>305</b> is communicatively coupled to a database <b>318</b> while the pattern trainer <b>302</b> is communicatively coupled to the database <b>114</b> shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The example data and/or network topology is on only an example implementation and any appropriate topology can be implemented instead.</p><p id="p-0033" num="0032">In the illustrated example, the data collector circuitry <b>308</b>, which can be implemented on the servers <b>112</b> and/or the media device <b>104</b>, collects data (e.g., pattern data, URI pattern data, etc.) for use with training data associated with main pages for later identification and crediting thereof. In this example, the data collector circuitry <b>308</b> collects URI/URL network traffic data via the data interface <b>314</b> and/or the network <b>108</b> so that patterns associated with the main pages can be generated for subsequent identification by the media device <b>104</b>. In some examples, the data collector circuitry <b>308</b> collects this data as parsed data packets, which may be provided from the VPN network <b>109</b>. In some examples, the data collector circuitry <b>308</b> collects the data through launching the main pages on the media device <b>104</b>. Additionally or alternatively, the data is obtained by the servers <b>112</b> accessing the main pages.</p><p id="p-0034" num="0033">The pattern generator circuitry <b>310</b> of the illustrated example is implemented to generate patterns associated with main pages during the training phase. In particular, the example pattern generator circuitry <b>310</b> determines and/or identifies the patterns of URIs (e.g., URIs accessed, URIs referenced, URIs in a list, etc.) associated with the main pages to generate trained data. In this example, the pattern generator circuitry <b>310</b> generates the trained data as URI sets (e.g., lists of URI obtained and/or identified) encountered in network traffic as the main pages are accessed. In some examples, a pattern is generated by repeated and/or multiple launches (e.g., offline launches, online launches) and/or refreshes of a corresponding main page. Additionally or alternatively, event logs (e.g., URI/URL request/access logs, fetch data, etc.) are utilized in determining the patterns. In some examples, the patterns are generated based on websites viewed by a known panel of users. In some examples, the pattern includes at least one list of URIs and associated attributes of the URIs (e.g., loading, sequence, loading times, a number of URIs, etc.) corresponding to the main page. The pattern, URI lists of the pattern and/or URI data may be stored in the database <b>114</b>.</p><p id="p-0035" num="0034">The example traffic analyzer circuitry <b>304</b> captures URIs and/or associated parameters of the URIs from the network traffic data captured by the media device <b>104</b> and/or the VPN <b>109</b>. In the illustrated example, the traffic analyzer circuitry <b>304</b> collects multiple URIs that can be associated with a single main page during a single session (e.g., a session with a corresponding time interval), for example. In this example, the URIs are identified from parsed data packets (e.g., parsed data packets captured by and/or passing through the VPN <b>109</b>) and compiled into a list (e.g., a list of URIs encountered within a defined time interval).</p><p id="p-0036" num="0035">The example pattern identifier circuitry <b>305</b> is implemented to determine the main page based on a known identified pattern (e.g., a previously trained pattern). The pattern identifier circuitry <b>305</b> can be implemented in the server <b>112</b>, the media device <b>104</b>, the metering controller <b>106</b> and/or the VPN <b>109</b>. In this example, the pattern identifier circuitry <b>305</b> is implemented on the media device <b>104</b> to identify a main page based on at least one pattern received from the server <b>112</b>. In this example, multiple patterns and/or data corresponding to the patterns is provided to the media device <b>104</b> by the server <b>112</b> for identification and crediting of the main page. As a result of identifying access of the main page, the example pattern identifier circuitry <b>305</b> outputs relatively compact data pertaining to the identified main page to the server <b>112</b>, thereby saving bandwidth usage and storage space. For example, the data can include only a main page identification that is computationally efficient to process and/or analyze (e.g., analyze by the server <b>112</b>) due to containing significantly less data than data representing multiple URIs. In some examples, the pattern identifier circuitry <b>305</b> removes URIs, URI lists and/or URI sets from the database <b>318</b> in response to identification of the main page, thereby conserving storage space thereof.</p><p id="p-0037" num="0036">In some examples, the grouper circuitry <b>306</b> is implemented to group URIs for pattern matching by the example pattern generator circuitry <b>310</b>. The URIs can be grouped based on time (e.g., session time, time interval, time delay, etc.), device information, session information, browser information (e.g., browser identifiers, etc.) during the training phase. In some examples, the grouper circuitry <b>306</b> groups the URIs identified and/or collected in network traffic (e.g., VPN traffic) based on timing during the training phase (e.g., the URIs are collected during a defined time period of the training phase). In other examples, the grouper circuitry <b>306</b> is implemented to group URIs for the pattern identifier circuitry <b>305</b> during the implementation phase.</p><p id="p-0038" num="0037">While an example manner of implementing the browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> is illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, one or more of the elements, processes and/or devices illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be combined, divided, re-arranged, omitted, eliminated and/or implemented in any other way. Further, the example traffic analyzer circuitry <b>304</b>, the example data collector circuitry <b>308</b>, the example grouper circuitry <b>306</b>, the example pattern generator circuitry <b>310</b>, the example pattern identifier circuitry <b>305</b>, and/or, more generally, the example browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented by hardware, software, firmware and/or any combination of hardware, software and/or firmware. Thus, for example, any of the example traffic analyzer <b>304</b>, the example data collector <b>308</b>, the example grouper <b>306</b>, the example pattern generator <b>310</b>, the example pattern identifier <b>305</b> and/or, more generally, the example browsing analysis system <b>300</b> could be implemented by processor circuitry, analog circuit(s), digital circuit(s), logic circuit(s), programmable processor(s), programmable microcontroller(s), graphics processing unit(s) (GPU(s)), digital signal processor(s) (DSP(s)), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and/or field programmable logic device(s) (FPLD(s)) such as Field Programmable Gate Arrays (FPGAs). When reading any of the apparatus or system claims of this patent to cover a purely software and/or firmware implementation, at least one of the example the example traffic analyzer circuitry <b>304</b>, the example pattern identifier circuitry <b>305</b>, the example data collector circuitry <b>308</b>, the example grouper circuitry <b>306</b>, the example pattern generator circuitry <b>310</b>, and/or the example the example pattern identifier circuitry <b>305</b> is/are hereby expressly defined to include a non-transitory computer readable storage device or storage disk such as a memory, a digital versatile disk (DVD), a compact disk (CD), a Blu-ray disk, etc., including the software and/or firmware. Further still, the example browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> may include one or more elements, processes and/or devices in addition to, or instead of, those illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, and/or may include more than one of any or all of the illustrated elements, processes and devices.</p><p id="p-0039" num="0038">Flowcharts representative of example hardware logic, machine readable instructions, hardware implemented state machines, and/or any combination thereof for implementing the browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> are shown in <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>. The machine readable instructions may be one or more executable programs or portion(s) of an executable program for execution by processor circuitry, such as the processor <b>812</b> shown in the example processor platform <b>800</b> discussed below in connection with <figref idref="DRAWINGS">FIG. <b>8</b></figref> and/or the example processor circuitry discussed below in connection with <figref idref="DRAWINGS">FIGS. <b>9</b> and/or <b>10</b></figref>. The program may be embodied in software stored on a non-transitory computer readable storage media such as a CD, a floppy disk, a hard disk-drive (HDD), a DVD, a Blu-ray disk, a volatile memory (e.g., Random Access Memory (RAM) of any type, etc.), or a non-volatile memory (e.g., FLASH memory, an HDD, etc.) associated with processor circuitry located in one or more hardware devices, but the entire program and/or parts thereof could alternatively be executed by one or more hardware devices other than the processor circuitry and/or embodied in firmware or dedicated hardware. The machine readable instructions may be distributed across multiple hardware devices and/or executed by two or more hardware devices (e.g., a server and a client hardware device). For example, the client hardware device may be implemented by an endpoint client hardware device (e.g., a hardware device associated with a user) or an intermediate client hardware device (e.g., a radio access network (RAN) gateway that may facilitate communication between a server and an endpoint client hardware device). Similarly, the non-transitory computer readable storage media may include one or more mediums located in one or more hardware devices. Further, although the example program is described with reference to the flowcharts illustrated in <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>, many other methods of implementing the example browsing analysis system <b>300</b> may alternatively be used. For example, the order of execution of the blocks may be changed, and/or some of the blocks described may be changed, eliminated, or combined. Additionally or alternatively, any or all of the blocks may be implemented by one or more hardware circuits (e.g., processor circuitry, discrete and/or integrated analog and/or digital circuitry, an FPGA, an ASIC, a comparator, an operational-amplifier (op-amp), a logic circuit, etc.) structured to perform the corresponding operation without executing software or firmware. The processor circuitry may be distributed in different network locations and/or local to one or more hardware devices (e.g., a single-core processor (e.g., a single core central processor unit (CPU), a multi-core processor (e.g., a multi-core CPU), etc.) in a single machine, multiple processors distributed across multiple servers of a server rack, multiple processors distributed across one or more server racks, a CPU and/or a FPGA located in the same package (e.g., the same integrated circuit (IC) package in two or more separate housings, etc.).</p><p id="p-0040" num="0039">The machine readable instructions described herein may be stored in one or more of a compressed format, an encrypted format, a fragmented format, a compiled format, an executable format, a packaged format, etc. Machine readable instructions as described herein may be stored as data or a data structure (e.g., as portions of instructions, code, representations of code, etc.) that may be utilized to create, manufacture, and/or produce machine executable instructions. For example, the machine readable instructions may be fragmented and stored on one or more storage devices and/or computing devices (e.g., servers) located at the same or different locations of a network or collection of networks (e.g., in the cloud, in edge devices, etc.). The machine readable instructions may require one or more of installation, modification, adaptation, updating, combining, supplementing, configuring, decryption, decompression, unpacking, distribution, reassignment, compilation, etc., in order to make them directly readable, interpretable, and/or executable by a computing device and/or other machine. For example, the machine readable instructions may be stored in multiple parts, which are individually compressed, encrypted, and/or stored on separate computing devices, wherein the parts when decrypted, decompressed, and/or combined form a set of executable instructions that implement one or more operations that may together form a program such as that described herein.</p><p id="p-0041" num="0040">In another example, the machine readable instructions may be stored in a state in which they may be read by processor circuitry, but require addition of a library (e.g., a dynamic link library (DLL)), a software development kit (SDK), an application programming interface (API), etc., in order to execute the machine readable instructions on a particular computing device or other device. In another example, the machine readable instructions may need to be configured (e.g., settings stored, data input, network addresses recorded, etc.) before the machine readable instructions and/or the corresponding program(s) can be executed in whole or in part. Thus, machine readable media, as used herein, may include machine readable instructions and/or program(s) regardless of the particular format or state of the machine readable instructions and/or program(s) when stored or otherwise at rest or in transit.</p><p id="p-0042" num="0041">The machine readable instructions described herein can be represented by any past, present, or future instruction language, scripting language, programming language, etc. For example, the machine readable instructions may be represented using any of the following languages: C, C++, Java, C#, Perl, Python, JavaScript, HyperText Markup Language (HTML), Structured Query Language (SQL), Swift, etc.</p><p id="p-0043" num="0042">As mentioned above, the example operations of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> may be implemented using executable instructions (e.g., computer and/or machine readable instructions) stored on one or more non-transitory computer and/or machine readable media such as optical storage devices, magnetic storage devices, an HDD, a flash memory, a read-only memory (ROM), a CD, a DVD, a cache, a RAM of any type, a register, and/or any other storage device or storage disk in which information is stored for any duration (e.g., for extended time periods, permanently, for brief instances, for temporarily buffering, and/or for caching of the information). As used herein, the terms non-transitory computer readable medium and non-transitory computer readable storage is expressly defined to include any type of computer readable storage device and/or storage disk and to exclude propagating signals and to exclude transmission media.</p><p id="p-0044" num="0043">&#x201c;Including&#x201d; and &#x201c;comprising&#x201d; (and all forms and tenses thereof) are used herein to be open ended terms. Thus, whenever a claim employs any form of &#x201c;include&#x201d; or &#x201c;comprise&#x201d; (e.g., comprises, includes, comprising, including, having, etc.) as a preamble or within a claim recitation of any kind, it is to be understood that additional elements, terms, etc. may be present without falling outside the scope of the corresponding claim or recitation. As used herein, when the phrase &#x201c;at least&#x201d; is used as the transition term in, for example, a preamble of a claim, it is open-ended in the same manner as the term &#x201c;comprising&#x201d; and &#x201c;including&#x201d; are open ended. The term &#x201c;and/or&#x201d; when used, for example, in a form such as A, B, and/or C refers to any combination or subset of A, B, C such as (1) A alone, (2) B alone, (3) C alone, (4) A with B, (5) A with C, (6) B with C, or (7) A with B and with C. As used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. Similarly, as used herein in the context of describing structures, components, items, objects and/or things, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, and (3) at least one A and at least one B. As used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A and B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B. Similarly, as used herein in the context of describing the performance or execution of processes, instructions, actions, activities and/or steps, the phrase &#x201c;at least one of A or B&#x201d; is intended to refer to implementations including any of (1) at least one A, (2) at least one B, or (3) at least one A and at least one B.</p><p id="p-0045" num="0044">As used herein, singular references (e.g., &#x201c;a&#x201d;, &#x201c;an&#x201d;, &#x201c;first&#x201d;, &#x201c;second&#x201d;, etc.) do not exclude a plurality. The term &#x201c;a&#x201d; or &#x201c;an&#x201d; object, as used herein, refers to one or more of that object. The terms &#x201c;a&#x201d; (or &#x201c;an&#x201d;), &#x201c;one or more&#x201d;, and &#x201c;at least one&#x201d; are used interchangeably herein. Furthermore, although individually listed, a plurality of means, elements or method actions may be implemented by, e.g., the same entity or object. Additionally, although individual features may be included in different examples or claims, these may possibly be combined, and the inclusion in different examples or claims does not imply that a combination of features is not feasible and/or advantageous.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flowchart representative of example machine readable instructions and/or example operations <b>400</b> that may be executed and/or instantiated by processor circuitry to implement the example browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The example method <b>400</b> begins as main page data is to be trained to generate patterns associated with main pages (e.g., main web pages, main pages, main URIs, main URLs, main web sites, top-level pages, etc.). The patterns are to be subsequently used to identify the main pages by the media device <b>104</b>, for example. In other words, the example method <b>400</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example training phase.</p><p id="p-0047" num="0046">At block <b>402</b>, the example data collector circuitry <b>308</b> identifies main pages to be trained. In some examples, the main pages include web pages determined from a panel (e.g., web pages known to be accessed by the panel, web pages predicted to be accessed by the panel, etc.). Additionally or alternatively, the main pages include websites deemed to be popular or well-known (e.g., based on traffic, based on polling, etc.).</p><p id="p-0048" num="0047">At block <b>404</b>, in the illustrated example, the data collector circuitry <b>308</b> accesses (e.g., accesses in an off-line session) the main pages. In this example, the data collector circuitry <b>308</b> accesses the main pages so that related URIs can be associated with the main pages. Additionally or alternatively, the data collector circuitry <b>308</b> causes the media device <b>104</b> to access the main pages and, thus, access URIs thereof. For example, a GET URI function and/or a table associated with the GET URI function (e.g., an event log, a table of the URIs accessed with the main pages) can be utilized to identify and characterize the accessed URIs. In particular, the GET URI function can be related to sending events to a central server for processing. In some examples, the URIs and/or information pertaining to the URIs are stored in the database <b>114</b>.</p><p id="p-0049" num="0048">At block <b>406</b>, in this example, the data collector circuitry <b>308</b> and/or the pattern generator circuitry <b>310</b> records URIs associated with the main pages accessed during the training phase. In particular, the URIs are recorded when the main pages are accessed (or as a result of the main pages being accessed). In this example, the URIs are recorded in a table form with corresponding parameters thereof (e.g., an order of loading the URIs, a number of requests versus encountered numbers, loading/access times of the URIs, etc.). In some examples, a ratio is employed between the number of requests and number of encountered URIs (e.g., from a URI log). In some examples, the URIs are obtained from data packets in network traffic. In some examples, network data, such as a forwarding URI is analyzed (e.g., when HTTP data is analyzed). Additionally or alternatively associated URIs are mapped to identifiers to enable faster computational processing.</p><p id="p-0050" num="0049">At block <b>408</b>, the data collector circuitry <b>308</b> and/or the grouper circuitry <b>306</b> stores the URIs and/or data associated with the URIs in the database <b>114</b>. In some examples, the grouper circuitry <b>306</b> groups the URIs based on the main pages (e.g., the URIs are organized, grouped and/or bundled together based on their corresponding main URIs/web pages, etc.)</p><p id="p-0051" num="0050">At block <b>410</b>, the pattern generator circuitry <b>310</b> of the illustrated example determines whether to generate a pattern. If the pattern is to be generated (block <b>410</b>), control of the process proceeds to block <b>412</b>. Otherwise, the process returns to block <b>402</b>. This determination may be based on whether the loading of the main pages was successful. Additionally or alternatively, the determination is based on whether repeated/successive reloading the main pages results in consistent URIs and/or URI attributes being accessed (e.g., successive reloads of the main pages yield with a threshold degree of similarity).</p><p id="p-0052" num="0051">At block <b>412</b>, the pattern generator circuitry <b>310</b> generates the pattern. In particular, URI data and/or aspects of the URIs associated with the main pages are trained to define the pattern. In some examples, the data of the URIs associated with the main pages are trained with different conditions (e.g., logged in versus not logged in, etc.), different times of the day, different browsers, etc. In some examples, the pattern corresponds to URI signatures, audio fingerprinting, time-based access/delay of URIs requested (e.g., via the GET URI FUNCTION), sequences of URIs accessed, loading times of URIs and/or the main pages, website requests (e.g., pinging another URI or web page) and/or web panel size/layout information, etc. In some examples, multiple patterns are associated with ones of the main pages. In some examples, the pattern is based on background artifacts and/or objects (e.g., JavaScript, ads, CSS, etc.).</p><p id="p-0053" num="0052">At block <b>414</b>, it is determined by the data collector circuitry <b>308</b> and/or the pattern generator circuitry <b>310</b> whether to re-train the data. This determination may be based on whether the pattern(s) associated with the main page has changed. Additionally or alternatively, the determination is based on whether the main pages have yielded consistent pattern(s) and/or changed (e.g., website reconfigurations, etc.). In some examples, the data is retrained if too many main pages are matched. If the data is to be retrained (block <b>414</b>), the process returns to block <b>402</b>. Otherwise, the process proceeds to block <b>416</b>.</p><p id="p-0054" num="0053">At block <b>416</b>, the grouper circuitry <b>306</b> and/or the pattern generator circuitry <b>310</b> organizes and/or processes the data associated with the patterns. For example, the data associated with the patterns can be translated and/or converted into data for the media device <b>104</b> so that the media device <b>104</b> can recognize the patterns and provide bandwidth efficient indications of recognized patterns to the server <b>112</b>, for example.</p><p id="p-0055" num="0054">At block <b>418</b>, it is determined whether to repeat the process. If the process is to be repeated (block <b>418</b>), control of the process returns to block <b>402</b>. Otherwise, the process ends.</p><p id="p-0056" num="0055"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a flowchart representative of example machine readable instructions and/or example operations <b>500</b> that may be executed and/or instantiated by processor circuitry to implement the example browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The example method <b>500</b> begins as the media device <b>104</b> has been provided with trained data from the server <b>112</b> for recognizing a main page. In particular, the media device <b>104</b> has been provided with a pattern to identify access of the main page.</p><p id="p-0057" num="0056">At block <b>502</b>, the traffic analyzer circuitry <b>304</b> of the illustrated example obtains traffic (e.g., web traffic). In this example, the traffic analyzer circuitry <b>304</b> obtains data packets (e.g., HTTP packets) containing URI information and/or references thereto.</p><p id="p-0058" num="0057">At block <b>504</b>, the traffic analyzer circuitry <b>304</b> parses data from the traffic associated the data interface <b>314</b>. In this example, the traffic analyzer circuitry <b>304</b> parses the data from the aforementioned data packets.</p><p id="p-0059" num="0058">At block <b>506</b>, the traffic analyzer circuitry <b>304</b> and/or the pattern identifier circuitry <b>305</b> obtains and/or collects URIs. In this example, the URIs are associated with web traffic of the media device <b>104</b> and/or the VPN <b>109</b> during web browsing activity. In some examples, the URIs are stored in the database <b>318</b>.</p><p id="p-0060" num="0059">At block <b>508</b>, in some examples, the traffic analyzer circuitry <b>304</b> and/or the pattern identifier circuitry <b>305</b> compares URIs accessed by the media device <b>104</b> and/or the VPN <b>109</b> to a threshold. For example, URIs having a likelihood of being above the threshold are designated to be forwarded to the traffic analyzer circuitry <b>304</b> for pattern recognition. Conversely, URIs with a likelihood not exceeding the threshold are eliminated, such as a winners/losers logic in which incomplete URIs and/or URIs with low relevance numbers, thereby reducing an amount of URIs to be analyzed by the example pattern identifier circuitry <b>305</b>.</p><p id="p-0061" num="0060">At block <b>510</b>, the pattern identifier circuitry <b>305</b> of the illustrated example compares URIs and/or associated URI data of the media device <b>104</b> and/or data from the VPN <b>109</b> to patterns stored in the database <b>318</b>. In this example, the patterns include tables of URI data. In some examples, tables of the URIs encountered are compared to tables associated with the patterns. Additionally or alternatively, a likelihood of a match is calculated based on a similarity of the URI data of the media device <b>104</b> to the patterns.</p><p id="p-0062" num="0061">At block <b>512</b> the example pattern identifier circuitry <b>305</b> determines whether a pattern has been identified. This determination may be based on a degree of similarity of the URIs to the pattern (e.g., a 60% match a 70% match, an 80% match, a 90% match, etc.) exceeding a threshold degree of similarity. Additionally different weighting can be applied to different aspects (e.g., a higher weight is applied to URI identification as opposed to a lower weight applied to URI sequence/timing in determining and/or identifying a pattern). In some examples, pattern tables are utilized in the determination. If the pattern has been identified (block <b>512</b>), control of the process proceeds to block <b>518</b>. Otherwise, the process proceeds to block <b>514</b>.</p><p id="p-0063" num="0062">At block <b>514</b>, in some examples, if the pattern is not identified (block <b>512</b>), the pattern identifier circuitry <b>305</b> requests new and/or additional trained data from the pattern generator circuitry <b>310</b> and/or the data collector circuitry <b>308</b> of the server <b>112</b>.</p><p id="p-0064" num="0063">At block <b>516</b>, in some examples, the pattern identifier circuitry <b>305</b> and/or the traffic analyzer circuitry <b>304</b> provides URIs and/or data associated with the URIs to the pattern generator circuitry <b>310</b> and/or the server <b>112</b> so that additional patterns can be generated by the pattern generator circuitry <b>310</b> (e.g., in response to not being able to identify a pattern). In some examples, URIs that are not matched are forwarded to the pattern generator circuitry <b>310</b>. Additionally or alternatively, the URIs can be sent to the pattern generator circuitry <b>310</b> for increasing pattern accuracies. In some examples, the URIs are discarded when no pattern can be matched to the URIs.</p><p id="p-0065" num="0064">According to examples disclosed herein, at block <b>518</b>, the pattern identifier circuitry <b>305</b> identifies access of the main page by the media device <b>104</b> based on the identified pattern. In this example, the pattern identifier circuitry <b>305</b> utilizes parameters (e.g., URI lists, URI timing, URI ordering, embedded files, images, etc.) of the URIs and compares the parameters to the pattern to identify the main page. In some examples, this determination is based on a degree of similarity between the pattern and the URIs parsed from network traffic.</p><p id="p-0066" num="0065">At block <b>519</b>, the pattern identifier circuitry <b>305</b> of the illustrated example provides/forwards the main page to the server <b>112</b>. In this example, the pattern identifier circuitry <b>305</b> outputs the main page to the data collector circuitry <b>308</b> so that crediting and post-processing can be performed. Additionally or alternatively, the main page is stored in the database <b>318</b>. In some examples, the pattern identifier circuitry <b>305</b> removes and/or erases the associated URIs from the database <b>318</b> once the main page is determined. In some examples, the pattern identifier circuitry <b>305</b> is implemented on the server <b>112</b> and utilizes event logs to credit the main page. In some examples, post-processing is performed in response to the main page being identified. For example, crediting can be performed on the main page by the server <b>112</b> and/or the data collector circuitry <b>308</b>.</p><p id="p-0067" num="0066">At block <b>520</b>, it is determined whether to repeat the process. If the process is to be repeated (block <b>520</b>), control of the process returns to block <b>502</b>. Otherwise, the process ends. This determination may be based on a level of browsing activity, network activity, URI activity and/or a degree (e.g., a number) of URIs parsed from network traffic.</p><p id="p-0068" num="0067"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an example analysis that can be implemented in examples disclosed herein. In the illustrated view of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, an example table <b>600</b> that represents example URI data that can represent patterns and/or be associated with patterns is shown. In this example, main GET URI functions tested are associated with attempts and total numbers of the primary main page in an event log. As a result, ratios of a sum of total attempts and a number of events in an event log over the number of events is calculated to characterize a main page associated with the URI data. Accordingly, these ratios can be used to generate patterns or to identify patterns of URIs associated with the main page.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an example analysis that can be implemented in examples disclosed herein. As can be seen in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, an example table <b>700</b> that represents example URI data that can represent patterns and/or be associated with patterns is shown. According to the illustrated example, time stamps identify when GET URI functions and connections occur. As a result, a response time is calculated. Further, a status (e.g., <b>301</b>, <b>200</b>, etc.) of a corresponding URI is shown. Any of the above-described parameters in connection with <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>7</b></figref> can be utilized, alone or in combination, in establishing, identifying or generating a pattern associated with a main page.</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a block diagram of an example processor platform <b>800</b> structured to execute and/or instantiate the machine readable instructions and/or operations of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> to implement the browsing analysis system <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The processor platform <b>800</b> can be, for example, a server, a personal computer, a workstation, a self-learning machine (e.g., a neural network), a mobile device (e.g., a cell phone, a smart phone, a tablet such as an iPad), a personal digital assistant (PDA), an Internet appliance, a DVD player, a CD player, a digital video recorder, a Blu-ray player, a gaming console, a personal video recorder, a set top box, a headset (e.g., an augmented reality (AR) headset, virtual reality (VR) headset, etc.), or other wearable device, or any other type of computing device.</p><p id="p-0071" num="0070">The processor platform <b>800</b> of the illustrated example includes processor circuitry <b>812</b>. The processor circuitry <b>812</b> of the illustrated example is hardware. For example, the processor circuitry <b>812</b> can be implemented by one or more integrated circuits, logic circuits, FPGAs, microprocessors, CPUs, GPUs, DSPs, and/or microcontrollers from any desired family or manufacturer. The processor circuitry <b>812</b> may be implemented by one or more semiconductor based (e.g., silicon based) devices. In this example, the processor circuitry <b>812</b> implements the example traffic analyzer circuitry <b>304</b>, the example data collector circuitry <b>308</b>, the example pattern identifier circuitry <b>305</b>, the example grouper circuitry <b>306</b>, the example pattern generator circuitry <b>310</b> and the example pattern identifier circuitry <b>305</b>.</p><p id="p-0072" num="0071">The processor circuitry <b>812</b> of the illustrated example includes a local memory <b>813</b> (e.g., a cache, registers, etc.). The processor circuitry <b>812</b> of the illustrated example is in communication with a main memory including a volatile memory <b>814</b> and a non-volatile memory <b>816</b> via a bus <b>818</b>. The volatile memory <b>814</b> may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS&#xae; Dynamic Random Access Memory (RDRAM&#xae;), and/or any other type of RAM device. The non-volatile memory <b>816</b> may be implemented by flash memory and/or any other desired type of memory device. Access to the main memory <b>814</b>, <b>816</b> of the illustrated example is controlled by a memory controller <b>817</b>.</p><p id="p-0073" num="0072">The processor platform <b>800</b> of the illustrated example also includes interface circuitry <b>820</b>. The interface circuitry <b>820</b> may be implemented by hardware in accordance with any type of interface standard, such as an Ethernet interface, a universal serial bus (USB) interface, a Bluetooth&#xae; interface, a near field communication (NFC) interface, a PCI interface, and/or a PCIe interface.</p><p id="p-0074" num="0073">In the illustrated example, one or more input devices <b>822</b> are connected to the interface circuitry <b>820</b>. The input device(s) <b>822</b> permit(s) a user to enter data and/or commands into the processor <b>812</b>. The input device(s) can be implemented by, for example, an audio sensor, a microphone, a camera (still or video), a keyboard, a button, a mouse, a touchscreen, a track-pad, a trackball, an isopoint device, and/or a voice recognition system.</p><p id="p-0075" num="0074">One or more output devices <b>824</b> are also connected to the interface circuitry <b>820</b> of the illustrated example. The output devices <b>824</b> can be implemented, for example, by display devices (e.g., a light emitting diode (LED), an organic light emitting diode (OLED), a liquid crystal display (LCD), a cathode ray tube (CRT) display, an in-place switching (IPS) display, a touchscreen, etc.), a tactile output device, a printer and/or speaker. The interface circuitry <b>820</b> of the illustrated example, thus, typically includes a graphics driver card, a graphics driver chip, and/or graphics driver processor circuitry such as a GPU.</p><p id="p-0076" num="0075">The interface circuitry <b>820</b> of the illustrated example also includes a communication device such as a transmitter, a receiver, a transceiver, a modem, a residential gateway, a wireless access point, and/or a network interface to facilitate exchange of data with external machines (e.g., computing devices of any kind) by a network <b>826</b>. The communication can be by, for example, an Ethernet connection, a digital subscriber line (DSL) connection, a telephone line connection, a coaxial cable system, a satellite system, a line-of-site wireless system, a cellular telephone system, an optical connection, etc.</p><p id="p-0077" num="0076">The processor platform <b>800</b> of the illustrated example also includes one or more mass storage devices <b>828</b> to store software and/or data. Examples of such mass storage devices <b>828</b> include magnetic storage devices, optical storage devices, floppy disk drives, HDDs, CDs, Blu-ray disk drives, redundant array of independent disks (RAID) systems, solid state storage devices such as flash memory devices, and DVD drives.</p><p id="p-0078" num="0077">The machine executable instructions <b>832</b> which may be implemented by the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>4</b></figref> may be stored in the mass storage device <b>828</b>, in the volatile memory <b>814</b>, in the non-volatile memory <b>816</b>, and/or on a removable non-transitory computer readable storage medium such as a CD or DVD.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a block diagram of an example implementation of the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. In this example, the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> is implemented by a microprocessor <b>900</b>. For example, the microprocessor <b>900</b> may implement multi-core hardware circuitry such as a CPU, a DSP, a GPU, an XPU, etc. Although it may include any number of example cores <b>902</b> (e.g., <b>1</b> core), the microprocessor <b>900</b> of this example is a multi-core semiconductor device including N cores. The cores <b>902</b> of the microprocessor <b>900</b> may operate independently or may cooperate to execute machine readable instructions. For example, machine code corresponding to a firmware program, an embedded software program, or a software program may be executed by one of the cores <b>902</b> or may be executed by multiple ones of the cores <b>902</b> at the same or different times. In some examples, the machine code corresponding to the firmware program, the embedded software program, or the software program is split into threads and executed in parallel by two or more of the cores <b>902</b>. The software program may correspond to a portion or all of the machine readable instructions and/or operations represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>.</p><p id="p-0080" num="0079">The cores <b>902</b> may communicate by an example bus <b>904</b>. In some examples, the bus <b>904</b> may implement a communication bus to effectuate communication associated with one(s) of the cores <b>902</b>. For example, the bus <b>904</b> may implement at least one of an Inter-Integrated Circuit (I2C) bus, a Serial Peripheral Interface (SPI) bus, a PCI bus, or a PCIe bus. Additionally or alternatively, the bus <b>904</b> may implement any other type of computing or electrical bus. The cores <b>902</b> may obtain data, instructions, and/or signals from one or more external devices by example interface circuitry <b>906</b>. The cores <b>902</b> may output data, instructions, and/or signals to the one or more external devices by the interface circuitry <b>906</b>. Although the cores <b>902</b> of this example include example local memory <b>920</b> (e.g., Level 1 (L1) cache that may be split into an L1 data cache and an L1 instruction cache), the microprocessor <b>900</b> also includes example shared memory <b>910</b> that may be shared by the cores (e.g., Level 2 (L2_cache)) for high-speed access to data and/or instructions. Data and/or instructions may be transferred (e.g., shared) by writing to and/or reading from the shared memory <b>910</b>. The local memory <b>920</b> of each of the cores <b>902</b> and the shared memory <b>910</b> may be part of a hierarchy of storage devices including multiple levels of cache memory and the main memory (e.g., the main memory <b>814</b>, <b>816</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>). Typically, higher levels of memory in the hierarchy exhibit lower access time and have smaller storage capacity than lower levels of memory. Changes in the various levels of the cache hierarchy are managed (e.g., coordinated) by a cache coherency policy.</p><p id="p-0081" num="0080">Each core <b>902</b> may be referred to as a CPU, DSP, GPU, etc., or any other type of hardware circuitry. Each core <b>902</b> includes control unit circuitry <b>914</b>, arithmetic and logic (AL) circuitry (sometimes referred to as an ALU) <b>916</b>, a plurality of registers <b>918</b>, the L1 cache <b>920</b>, and an example bus <b>922</b>. Other structures may be present. For example, each core <b>902</b> may include vector unit circuitry, single instruction multiple data (SIMD) unit circuitry, load/store unit (LSU) circuitry, branch/jump unit circuitry, floating-point unit (FPU) circuitry, etc. The control unit circuitry <b>914</b> includes semiconductor-based circuits structured to control (e.g., coordinate) data movement within the corresponding core <b>902</b>. The AL circuitry <b>916</b> includes semiconductor-based circuits structured to perform one or more mathematic and/or logic operations on the data within the corresponding core <b>902</b>. The AL circuitry <b>916</b> of some examples performs integer based operations. In other examples, the AL circuitry <b>916</b> also performs floating point operations. In yet other examples, the AL circuitry <b>916</b> may include first AL circuitry that performs integer based operations and second AL circuitry that performs floating point operations. In some examples, the AL circuitry <b>916</b> may be referred to as an Arithmetic Logic Unit (ALU). The registers <b>918</b> are semiconductor-based structures to store data and/or instructions such as results of one or more of the operations performed by the AL circuitry <b>916</b> of the corresponding core <b>902</b>. For example, the registers <b>918</b> may include vector register(s), SIMD register(s), general purpose register(s), flag register(s), segment register(s), machine specific register(s), instruction pointer register(s), control register(s), debug register(s), memory management register(s), machine check register(s), etc. The registers <b>918</b> may be arranged in a bank as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>. Alternatively, the registers <b>918</b> may be organized in any other arrangement, format, or structure including distributed throughout the core <b>902</b> to shorten access time. The bus <b>904</b> may implement at least one of an I2C bus, a SPI bus, a PCI bus, or a PCIe bus</p><p id="p-0082" num="0081">Each core <b>902</b> and/or, more generally, the microprocessor <b>900</b> may include additional and/or alternate structures to those shown and described above. For example, one or more clock circuits, one or more power supplies, one or more power gates, one or more cache home agents (CHAs), one or more converged/common mesh stops (CMSs), one or more shifters (e.g., barrel shifter(s)) and/or other circuitry may be present. The microprocessor <b>900</b> is a semiconductor device fabricated to include many transistors interconnected to implement the structures described above in one or more integrated circuits (ICs) contained in one or more packages. The processor circuitry may include and/or cooperate with one or more accelerators. In some examples, accelerators are implemented by logic circuitry to perform certain tasks more quickly and/or efficiently than can be done by a general purpose processor. Examples of accelerators include ASICs and FPGAs such as those discussed herein. A GPU or other programmable device can also be an accelerator. Accelerators may be on-board the processor circuitry, in the same chip package as the processor circuitry and/or in one or more separate packages from the processor circuitry.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a block diagram of another example implementation of the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. In this example, the processor circuitry <b>812</b> is implemented by FPGA circuitry <b>1000</b>. The FPGA circuitry <b>1000</b> can be used, for example, to perform operations that could otherwise be performed by the example microprocessor <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> executing corresponding machine readable instructions. However, once configured, the FPGA circuitry <b>1000</b> instantiates the machine readable instructions in hardware and, thus, can often execute the operations faster than they could be performed by a general purpose microprocessor executing the corresponding software.</p><p id="p-0084" num="0083">More specifically, in contrast to the microprocessor <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> described above (which is a general purpose device that may be programmed to execute some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> but whose interconnections and logic circuitry are fixed once fabricated), the FPGA circuitry <b>1000</b> of the example of <figref idref="DRAWINGS">FIG. <b>10</b></figref> includes interconnections and logic circuitry that may be configured and/or interconnected in different ways after fabrication to instantiate, for example, some or all of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>. In particular, the FPGA <b>1000</b> may be thought of as an array of logic gates, interconnections, and switches. The switches can be programmed to change how the logic gates are interconnected by the interconnections, effectively forming one or more dedicated logic circuits (unless and until the FPGA circuitry <b>1000</b> is reprogrammed). The configured logic circuits enable the logic gates to cooperate in different ways to perform different operations on data received by input circuitry. Those operations may correspond to some or all of the software represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>. As such, the FPGA circuitry <b>1000</b> may be structured to effectively instantiate some or all of the machine readable instructions of the flowchart of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> as dedicated logic circuits to perform the operations corresponding to those software instructions in a dedicated manner analogous to an ASIC. Therefore, the FPGA circuitry <b>1000</b> may perform the operations corresponding to the some or all of the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> faster than the general purpose microprocessor can execute the same.</p><p id="p-0085" num="0084">In the example of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, the FPGA circuitry <b>1000</b> is structured to be programmed (and/or reprogrammed one or more times) by an end user by a hardware description language (HDL) such as Verilog. The FPGA circuitry <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, includes example input/output (I/O) circuitry <b>1002</b> to obtain and/or output data to/from example configuration circuitry <b>1004</b> and/or external hardware (e.g., external hardware circuitry) <b>1006</b>. For example, the configuration circuitry <b>1004</b> may implement interface circuitry that may obtain machine readable instructions to configure the FPGA circuitry <b>1000</b>, or portion(s) thereof. In some such examples, the configuration circuitry <b>1004</b> may obtain the machine readable instructions from a user, a machine (e.g., hardware circuitry (e.g., programmed or dedicated circuitry) that may implement an Artificial Intelligence/Machine Learning (AI/ML) model to generate the instructions), etc. In some examples, the external hardware <b>1006</b> may implement the microprocessor <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The FPGA circuitry <b>1000</b> also includes an array of example logic gate circuitry <b>1008</b>, a plurality of example configurable interconnections <b>1010</b>, and example storage circuitry <b>1012</b>. The logic gate circuitry <b>1008</b> and interconnections <b>1010</b> are configurable to instantiate one or more operations that may correspond to at least some of the machine readable instructions of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> and/or other desired operations. The logic gate circuitry <b>1008</b> shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref> is fabricated in groups or blocks. Each block includes semiconductor-based electrical structures that may be configured into logic circuits. In some examples, the electrical structures include logic gates (e.g., And gates, Or gates, Nor gates, etc.) that provide basic building blocks for logic circuits. Electrically controllable switches (e.g., transistors) are present within each of the logic gate circuitry <b>1008</b> to enable configuration of the electrical structures and/or the logic gates to form circuits to perform desired operations. The logic gate circuitry <b>1008</b> may include other electrical structures such as look-up tables (LUTs), registers (e.g., flip-flops or latches), multiplexers, etc.</p><p id="p-0086" num="0085">The interconnections <b>1010</b> of the illustrated example are conductive pathways, traces, vias, or the like that may include electrically controllable switches (e.g., transistors) whose state can be changed by programming (e.g., using an HDL instruction language) to activate or deactivate one or more connections between one or more of the logic gate circuitry <b>1008</b> to program desired logic circuits.</p><p id="p-0087" num="0086">The storage circuitry <b>1012</b> of the illustrated example is structured to store result(s) of the one or more of the operations performed by corresponding logic gates. The storage circuitry <b>1012</b> may be implemented by registers or the like. In the illustrated example, the storage circuitry <b>1012</b> is distributed amongst the logic gate circuitry <b>1008</b> to facilitate access and increase execution speed.</p><p id="p-0088" num="0087">The example FPGA circuitry <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> also includes example Dedicated Operations Circuitry <b>1014</b>. In this example, the Dedicated Operations Circuitry <b>1014</b> includes special purpose circuitry <b>1016</b> that may be invoked to implement commonly used functions to avoid the need to program those functions in the field. Examples of such special purpose circuitry <b>1016</b> include memory (e.g., DRAM) controller circuitry, PCIe controller circuitry, clock circuitry, transceiver circuitry, memory, and multiplier-accumulator circuitry. Other types of special purpose circuitry may be present. In some examples, the FPGA circuitry <b>1000</b> may also include example general purpose programmable circuitry <b>1018</b> such as an example CPU <b>1020</b> and/or an example DSP <b>1022</b>. Other general purpose programmable circuitry <b>1018</b> may additionally or alternatively be present such as a GPU, an XPU, etc., that can be programmed to perform other operations.</p><p id="p-0089" num="0088">Although <figref idref="DRAWINGS">FIGS. <b>9</b> and <b>10</b></figref> illustrate two example implementations of the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, many other approaches are contemplated. For example, as mentioned above, modern FPGA circuitry may include an on-board CPU, such as one or more of the example CPU <b>1020</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>. Therefore, the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> may additionally be implemented by combining the example microprocessor <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and the example FPGA circuitry <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>. In some such hybrid examples, a first portion of the machine readable instructions represented by the flowcharts of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> may be executed by one or more of the cores <b>902</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and a second portion of the machine readable instructions represented by the flowchart of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref> may be executed by the FPGA circuitry <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref>.</p><p id="p-0090" num="0089">In some examples, the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> may be in one or more packages. For example, the processor circuitry <b>900</b> of <figref idref="DRAWINGS">FIG. <b>9</b></figref> and/or the FPGA circuitry <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>10</b></figref> may be in one or more packages. In some examples, an XPU may be implemented by the processor circuitry <b>812</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, which may be in one or more packages. For example, the XPU may include a CPU in one package, a DSP in another package, a GPU in yet another package, and an FPGA in still yet another package.</p><p id="p-0091" num="0090">A block diagram illustrating an example software distribution platform <b>1105</b> to distribute software such as the example machine readable instructions <b>832</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref> to third parties is illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The example software distribution platform <b>1105</b> may be implemented by any computer server, data facility, cloud service, etc., capable of storing and transmitting software to other computing devices. The third parties may be customers of the entity owning and/or operating the software distribution platform <b>1105</b>. For example, the entity that owns and/or operates the software distribution platform <b>1105</b> may be a developer, a seller, and/or a licensor of software such as the example machine readable instructions <b>832</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>. The third parties may be consumers, users, retailers, OEMs, etc., who purchase and/or license the software for use and/or re-sale and/or sub-licensing. In the illustrated example, the software distribution platform <b>905</b> includes one or more servers and one or more storage devices. The storage devices store the computer readable instructions <b>832</b>, which may correspond to the example machine readable instructions <b>400</b>, <b>500</b> of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>, as described above. The one or more servers of the example software distribution platform <b>1105</b> are in communication with a network <b>1110</b>, which may correspond to any one or more of the Internet and/or any of the example network <b>108</b> described above. In some examples, the one or more servers are responsive to requests to transmit the software to a requesting party as part of a commercial transaction. Payment for the delivery, sale and/or license of the software may be handled by the one or more servers of the software distribution platform and/or by a third party payment entity. The servers enable purchasers and/or licensors to download the machine readable instructions <b>832</b> from the software distribution platform <b>1105</b>. For example, the software, which may correspond to the example machine readable instructions <b>400</b>, <b>500</b> of <figref idref="DRAWINGS">FIGS. <b>4</b> and <b>5</b></figref>, may be downloaded to the example processor platform <b>800</b>, which is to execute the machine readable instructions <b>832</b> to implement the browsing analysis system <b>300</b>. In some example, one or more servers of the software distribution platform <b>805</b> periodically offer, transmit, and/or force updates to the software (e.g., the example machine readable instructions <b>832</b> of <figref idref="DRAWINGS">FIG. <b>8</b></figref>) to ensure improvements, patches, updates, etc. are distributed and applied to the software at the end user devices, such as the media devices <b>104</b>, for example.</p><p id="p-0092" num="0091">Further examples and combinations thereof include the following:</p><p id="p-0093" num="0092">Example 1 includes an apparatus comprising processor circuitry including one or more of at least one of a central processing unit, a graphic processing unit or a digital signal processor, the at least one of the central processing unit, the graphic processing unit or the digital signal processor having control circuitry to control data movement within the processor circuitry, arithmetic and logic circuitry to perform one or more first operations corresponding to instructions, and one or more registers to store a result of the one or more first operations, the instructions in the apparatus, a Field Programmable Gate Array (FPGA), the FPGA including logic gate circuitry, a plurality of configurable interconnections, and storage circuitry, the logic gate circuitry and interconnections to perform one or more second operations, the storage circuitry to store a result of the one or more second operations, or Application Specific Integrated Circuitry (ASIC) including logic gate circuitry to perform one or more third operations, the processor circuitry to perform at least one of the first operations, the second operations or the third operations to instantiate pattern generator circuitry to determine patterns of uniform resource identifiers (URIs) associated with corresponding main pages, traffic analyzer circuitry to parse data from network traffic, and pattern identifier circuitry to identify at least one of the main pages from the data based on the patterns, and provide the identified at least one of the main pages for crediting thereof.</p><p id="p-0094" num="0093">Example 2 includes the apparatus as defined in example 1, wherein the pattern identifier circuitry is to identify the patterns based on numbers of occurrences of the URIs.</p><p id="p-0095" num="0094">Example 3 includes the apparatus as defined in example 2, wherein the occurrences are associated with corresponding GET URI functions.</p><p id="p-0096" num="0095">Example 4 includes the apparatus as defined in any of examples 1 to 3, wherein the pattern generator circuitry is to discard URIs identified in the network traffic from a storage in response to identification of the one of the main pages.</p><p id="p-0097" num="0096">Example 5 includes the apparatus as defined in any of examples 1 to 4, wherein the traffic analyzer circuitry is to parse data packets from the network traffic via a virtual private network (VPN).</p><p id="p-0098" num="0097">Example 6 includes the apparatus as defined in any of examples 1 to 4, wherein the pattern identifier circuitry is to request additional trained data from the pattern generator when the main page cannot be identified.</p><p id="p-0099" num="0098">Example 7 includes the apparatus as defined in any of examples 1 to 6, wherein the identification of the at least one of the main pages is based on a sum of a ratio of attempts of requested URIs with a total number of occurrences of the requested URIs to the attempts of the requested URIs.</p><p id="p-0100" num="0099">Example 8 includes the apparatus as defined in any of examples 1 to 7, wherein the pattern generator circuitry is implemented on a server and the pattern identifier is implemented on a media device.</p><p id="p-0101" num="0100">Example 9 includes a non-transitory computer readable medium comprising instructions which, when executed, cause at least one processor to determine patterns of uniform resource identifiers (URIs) with corresponding main pages, parse data from network traffic, identify at least one of the main pages from the data based on the patterns, and provide the identified at least one of the main pages for crediting thereof.</p><p id="p-0102" num="0101">Example 10 includes the non-transitory computer readable medium as defined in example 9, wherein the patterns are determined based on numbers of occurrences of the URIs.</p><p id="p-0103" num="0102">Example 11 includes the non-transitory computer readable medium as defined in example 10, wherein the occurrences are associated with corresponding GET URI functions.</p><p id="p-0104" num="0103">Example 12 includes the non-transitory computer readable medium as defined in any of examples 9 to 11, wherein the instructions further cause the at least one processor to discard URIs identified in the network traffic from storage in response to the identification of the at least one of the main pages.</p><p id="p-0105" num="0104">Example 13 includes the non-transitory computer readable medium as defined in any of examples 9 to 12, wherein the instructions further cause the at least one processor to parse data packets from the network traffic via a virtual private network (VPN).</p><p id="p-0106" num="0105">Example 14 includes the non-transitory computer readable medium as defined in any of examples 9 to 13, wherein the instructions further cause the at least one processor to request additional trained data when the main page cannot be identified.</p><p id="p-0107" num="0106">Example 15 includes the non-transitory computer readable medium as defined in any of examples 9 to 14, wherein the identification of the at least one of the main pages is based on a sum of a ratio of attempts of requested URIs with a total number of occurrences of the requested URIs to the attempts of the requested URIs.</p><p id="p-0108" num="0107">Example 16 includes the non-transitory computer readable medium as defined in any of examples 9 to 15, wherein the pattern is determined based on a list of the URIs.</p><p id="p-0109" num="0108">Example 17 includes a method comprising determining, by executing instructions with at least one processor, patterns of uniform resource identifiers (URIs) with corresponding main pages, parsing, by executing instructions with the at least one processor, data from network traffic, identifying, by executing instructions with the at least one processor, at least one of the main pages from the data based on the patterns, and providing, by executing instructions with the at least one processor, the identified at least one of the main pages for crediting thereof.</p><p id="p-0110" num="0109">Example 18 includes the method as defined in example 17, wherein the determining of the patterns is based on numbers of occurrences of the URIs.</p><p id="p-0111" num="0110">Example 19 includes the method of example 18, wherein the occurrences are associated with corresponding GET URI functions.</p><p id="p-0112" num="0111">Example 20 includes the method as defined in any of examples 17 to 19, further including discarding by executing instructions with the at least one processor, URIs identified from the network traffic in response to the identifying of the at least one of the main pages.</p><p id="p-0113" num="0112">Example 21 includes the method as defined in any of examples 17 to 20, wherein the parsing of the data from the network traffic occurs via a virtual private network (VPN) and includes parsing data packets of the network traffic.</p><p id="p-0114" num="0113">Example 22 includes the method as defined in any of examples 17 to 21, further including requesting additional trained data when the main page cannot be identified.</p><p id="p-0115" num="0114">Example 23 includes the method as defined in any of examples 17 to 22, wherein the identifying of the one of the main pages is based on a sum of a ratio of attempts of requested URIs with a total number of occurrences of the requested URIs to the attempts of the requested URIs.</p><p id="p-0116" num="0115">Example 24 includes the method as defined in any of examples 17 to 23, wherein the determining of the pattern is based on a list of the URIs.</p><p id="p-0117" num="0116">Example 25 includes an apparatus comprising at least one memory, instructions in the apparatus, and processor circuitry including control circuitry to control data movement within the processor circuitry, arithmetic and logic circuitry to perform one or more operations on the data, and one or more registers to store a result of one or more of the operations, the processor circuitry to execute the instructions to determine patterns of uniform resource identifiers (URIs) associated with corresponding main pages, parse data from network traffic, and identify at least one of the main pages from the data based on the patterns.</p><p id="p-0118" num="0117">Example 26 includes the apparatus as defined in example 25, wherein the processor circuitry is to identify the patterns based on numbers of occurrences of the URIs.</p><p id="p-0119" num="0118">Example 27 includes the apparatus as defined in example 26, wherein the occurrences are associated with corresponding GET URI functions.</p><p id="p-0120" num="0119">Example 28 includes the apparatus as defined in example 25, wherein the processor circuitry is to discard URIs identified in the network traffic from a storage in response to identification of the one of the main pages.</p><p id="p-0121" num="0120">Example 29 includes the apparatus as defined in example 25, wherein the processor circuitry is to parse data packets from the network traffic via a virtual private network (VPN).</p><p id="p-0122" num="0121">Example 30 includes the apparatus as defined in example 25, wherein the processor circuitry is to request additional trained data from the pattern generator when the main page cannot be identified.</p><p id="p-0123" num="0122">Example 31 includes the apparatus as defined in example 25, wherein the identification of the at least one of the main pages is based on a sum of a ratio of attempts of requested URIs with a total number of occurrences of the requested URIs to the attempts of the requested URIs.</p><p id="p-0124" num="0123">From the foregoing, it will be appreciated that example methods, apparatus and articles of manufacture have been disclosed that enable accurate determination of main pages and/or main pages from extracted URIs. Examples disclosed herein also enable space efficient storage of data. The disclosed systems, methods, apparatus, and articles of manufacture improve the efficiency of using a computing device by enabling a reduced data set that can be much more computationally efficient to analyze, store and/or distribute. The disclosed systems, methods, apparatus, and articles of manufacture are accordingly directed to one or more improvement(s) in the operation of a machine such as a computer or other electronic and/or mechanical device.</p><p id="p-0125" num="0124">Although certain example systems, methods, apparatus, and articles of manufacture have been disclosed herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all systems, methods, apparatus, and articles of manufacture fairly falling within the scope of the claims of this patent.</p><p id="p-0126" num="0125">The following claims are hereby incorporated into this Detailed Description by this reference, with each claim standing on its own as a separate embodiment of the present disclosure.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. An apparatus comprising:<claim-text>processor circuitry including one or more of:</claim-text><claim-text>at least one of a central processing unit, a graphic processing unit or a digital signal processor, the at least one of the central processing unit, the graphic processing unit or the digital signal processor having control circuitry to control data movement within the processor circuitry, arithmetic and logic circuitry to perform one or more first operations corresponding to instructions, and one or more registers to store a result of the one or more first operations, the instructions in the apparatus;</claim-text><claim-text>a Field Programmable Gate Array (FPGA), the FPGA including logic gate circuitry, a plurality of configurable interconnections, and storage circuitry, the logic gate circuitry and interconnections to perform one or more second operations, the storage circuitry to store a result of the one or more second operations; or</claim-text><claim-text>Application Specific Integrated Circuitry (ASIC) including logic gate circuitry to perform one or more third operations;</claim-text><claim-text>the processor circuitry to perform at least one of the first operations, the second operations or the third operations to instantiate:<claim-text>pattern generator circuitry to determine patterns of uniform resource identifiers (URIs) associated with corresponding main pages,</claim-text><claim-text>traffic analyzer circuitry to parse data from network traffic, and</claim-text><claim-text>pattern identifier circuitry to:<claim-text>identify at least one of the main pages from the data based on the patterns, wherein the identification of the at least one of the main pages is based on ratios of the requested URIs, the ratios comparing attempts of the requested URIs to a total number of occurrences of the requested URIs; and</claim-text><claim-text>provide the identified at least one of the main pages for crediting thereof.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the pattern identifier circuitry is to identify the patterns based on numbers of occurrences of the URIs.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The apparatus as defined in <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the occurrences are associated with corresponding GET URI functions.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the pattern generator circuitry is to discard URIs identified in the network traffic from a storage in response to identification of the one of the main pages.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the traffic analyzer circuitry is to parse data packets from the network traffic via a virtual private network (VPN).</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the pattern identifier circuitry is to request additional trained data from the pattern generator when the main page cannot be identified.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. An apparatus comprising:<claim-text>processor circuitry including one or more of:</claim-text><claim-text>at least one of a central processing unit, a graphic processing unit or a digital signal processor, the at least one of the central processing unit, the graphic processing unit or the digital signal processor having control circuitry to control data movement within the processor circuitry, arithmetic and logic circuitry to perform one or more first operations corresponding to instructions, and one or more registers to store a result of the one or more first operations, the instructions in the apparatus;</claim-text><claim-text>a Field Programmable Gate Array (FPGA), the FPGA including logic gate circuitry, a plurality of configurable interconnections, and storage circuitry, the logic gate circuitry and interconnections to perform one or more second operations, the storage circuitry to store a result of the one or more second operations; or</claim-text><claim-text>Application Specific Integrated Circuitry (ASIC) including logic gate circuitry to perform one or more third operations;</claim-text><claim-text>the processor circuitry to perform at least one of the first operations, the second operations or the third operations to instantiate:<claim-text>pattern generator circuitry to determine patterns of uniform resource identifiers (URIs) associated with corresponding main pages,</claim-text><claim-text>traffic analyzer circuitry to parse data from network traffic, and</claim-text><claim-text>pattern identifier circuitry to:<claim-text>identify at least one of the main pages from the data based on the patterns, wherein the identification of the at least one of the main pages is based on a sum of a ratio of attempts of requested URIs with a total number of occurrences of the requested URIs to the attempts of the requested URIs; and</claim-text><claim-text>provide the identified at least one of the main pages for crediting thereof.</claim-text></claim-text></claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the pattern generator circuitry is implemented on a server and the pattern identifier is implemented on a media device.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. A non-transitory computer readable medium comprising instructions which, when executed, cause at least one processor to:<claim-text>determine patterns of uniform resource identifiers (URIs) with corresponding main pages;</claim-text><claim-text>parse data from network traffic;</claim-text><claim-text>identify at least one of the main pages from the data based on the patterns, wherein the identification of the at least one of the main pages is based on ratios of the requested URIs, the ratios comparing attempts of the requested URIs to a total number of occurrences of the requested URIs; and</claim-text><claim-text>provide the identified at least one of the main pages for crediting thereof.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the patterns are determined based on numbers of occurrences of the URIs.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the occurrences are associated with corresponding GET URI functions.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions further cause the at least one processor to discard URIs identified in the network traffic from storage in response to the identification of the at least one of the main pages.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions further cause the at least one processor to parse data packets from the network traffic via a virtual private network (VPN).</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the instructions further cause the at least one processor to request additional trained data when the main page cannot be identified.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium comprising instructions which, when executed, cause at least one processor to:<claim-text>determine patterns of uniform resource identifiers (URIs) with corresponding main pages;</claim-text><claim-text>parse data from network traffic;</claim-text><claim-text>identify at least one of the main pages from the data based on the patterns, wherein the identification of the at least one of the main pages is based on a sum of a ratio of attempts of requested URIs with a total number of occurrences of the requested URIs to the attempts of the requested URIs; and</claim-text><claim-text>provide the identified at least one of the main pages for crediting thereof.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium as defined in <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the pattern is determined based on a list of the URIs.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. A method comprising:<claim-text>determining, by executing instructions with at least one processor, patterns of uniform resource identifiers (URIs) with corresponding main pages;</claim-text><claim-text>parsing, by executing instructions with the at least one processor, data from network traffic;</claim-text><claim-text>identifying, by executing instructions with the at least one processor, at least one of the main pages from the data based on the patterns, wherein the identification of the at least one of the main pages is based on ratios of the requested URIs, the ratios comparing attempts of the requested URIs to a total number of occurrences of the requested URIs; and</claim-text><claim-text>providing, by executing instructions with the at least one processor, the identified at least one of the main pages for crediting thereof.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method as defined in <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the determining of the patterns is based on numbers of occurrences of the URIs.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00018">claim 18</claim-ref>, wherein the occurrences are associated with corresponding GET URI functions.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method as defined in <claim-ref idref="CLM-00017">claim 17</claim-ref>, further including discarding by executing instructions with the at least one processor, URIs identified from the network traffic in response to the identifying of the at least one of the main pages.</claim-text></claim><claim id="CLM-21-31" num="21-31"><claim-text><b>21</b>.-<b>31</b>. (canceled)</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the ratios are arranged in an array or table to determine the patterns.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the ratios are determined from a URI log.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The apparatus as defined in <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the attempts of the requested URIs correspond to respective GET URI functions.</claim-text></claim></claims></us-patent-application>