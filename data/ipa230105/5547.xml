<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005548A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005548</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943139</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>16</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>16</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DATA ERASE OPERATIONS FOR A MEMORY SYSTEM</invention-title><us-related-documents><division><relation><parent-doc><document-id><country>US</country><doc-number>17074758</doc-number><date>20201020</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11443811</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17943139</doc-number></document-id></child-doc></relation></division><division><relation><parent-doc><document-id><country>US</country><doc-number>15994151</doc-number><date>20180531</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10854299</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17074758</doc-number></document-id></child-doc></relation></division></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Brandt</last-name><first-name>Kevin R.</first-name><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Hieb</last-name><first-name>Adam J.</first-name><address><city>Meridian</city><state>ID</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Tanguy</last-name><first-name>Jonathan</first-name><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Thomson</last-name><first-name>Preston A.</first-name><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A data erase operation is performed on the memory system. The directed data erase operation performed on the memory system erases blocks of the memory device including blocks that are indicated as not including user data. In some embodiments, a data erase operation may be performed on a memory system to erase those groups of memory cells (e.g., blocks) indicated as not including user data. In some embodiments, a data erase operation may be performed on a memory system to erase those groups of memory cells (e.g., blocks) indicated as valid without erasing those groups of memory cells (e.g., blocks) indicated as invalid. In some embodiments, a data erase operation that can be performed on a memory system may obtain information associated with failing scenes of groups of memory cells (e.g., blocks) prior to obtaining the information, and erase the blocks (e.g., invalid blocks) subsequently.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="111.25mm" wi="155.79mm" file="US20230005548A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="128.78mm" wi="157.82mm" file="US20230005548A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="226.91mm" wi="146.73mm" file="US20230005548A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.89mm" wi="135.81mm" file="US20230005548A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="230.89mm" wi="135.89mm" file="US20230005548A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="94.83mm" wi="135.72mm" file="US20230005548A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="220.90mm" wi="148.00mm" file="US20230005548A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="216.83mm" wi="157.82mm" file="US20230005548A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIORITY INFORMATION</heading><p id="p-0002" num="0001">This application is a Divisional of U.S. application Ser. No. 17/074,758, filed on Oct. 20, 2020, which will issue as U.S. Pat. No. 11,443,811 on Sep. 13, 2022, which is a Divisional of U.S. application Ser. No. 15/994,151, filed on May 31, 2018, now issued as U.S. Pat. No. 10,854,299, the contents of which are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure relates generally to semiconductor memory devices, and, more particularly, to methods and apparatuses associated with data erase operations for a memory system.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A memory system can be a storage system, such as a solid-state drive (SSD), and can include one or more memory components that store data. For example, a memory system can include memory devices such as non-volatile memory devices and volatile memory devices. In general, a host system can utilize a memory system to store data at the memory devices of the memory system and to retrieve data stored at the memory system.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">The present disclosure will be understood more fully from the details description given below and from the accompanying drawings of various implementations of the disclosure.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing system that includes a storage device, in accordance with some embodiments of the present disclosure.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an example memory device that includes physical blocks in accordance some embodiments of the present disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates a flow diagram of an example method to perform a data erase operation in accordance with some embodiments of the present disclosure.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>3</b>B-<b>3</b>C</figref> illustrate block diagrams of example statuses of a memory device illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a flow diagram of another example method to perform a data erase operation in accordance with some embodiments of the present disclosure.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b>B-<b>4</b>C</figref> illustrate block diagrams of example statuses of a memory device illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates a flow diagram of another example method to perform a data erase operation in accordance with some embodiments of the present disclosure.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b>B-<b>5</b>D</figref> illustrate block diagrams of example statuses of a memory device illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram of an example apparatus in the form of a computer system in which implementations of the present disclosure may operate.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">Aspects of the present disclosure are directed to data erase operations for a memory system. The memory system can be a storage system, such as a solid-state drive (SSD). An SSD can include multiple interface connections to one or more host systems (hereinafter referred to as hosts). An SSD can be capable of performing a data erase operation, which is an execution of a command, for example, received from the host.</p><p id="p-0016" num="0015">Data erase operations performed on the SSD may include secure erase and/or sanitization operations. Conventional secure erase/sanitization operations may result in an undesired consequence on information stored on the SSD unless directed otherwise. For example, the data erase operations may not erase those blocks that are erroneously indicated as not including user data (e.g., empty) although those blocks erroneously indicated as empty may include sensitive data. For example, the data erase operations may erase those blocks storing information desired to be still obtainable subsequent to the data erase operations.</p><p id="p-0017" num="0016">Aspects of the present disclosure address the above and other deficiencies by providing a data erasure command that causes (e.g., direct) the SSD to perform data erase operations in a manner different than had the SSD not been directed. For example, the host-directed data erasure command provided to the SSD may cause the SSD to erase blocks that would not have been erased or not to erase (or delay erasing) blocks that would have been erased in the absence of the data erasure command of the present disclosure. As such, blocks, which are desired to be erased but would not have been erased in a conventional manner, may be securely erased because the SSD may be specifically directed to do so. Further, particular information (e.g., raw bit error rate (RBER) and/or information associated with threshold voltage distributions), which is desired to be obtained but would have been erased without being obtained in a conventional manner, may be preserved (e.g., obtained) because the SSD may be specifically directed not to erase and/or obtain the information prior to erasing those.</p><p id="p-0018" num="0017">In some embodiments, a data erase operation may be performed on a memory system to erase those groups of memory cells (e.g., blocks) indicated as not including user data. In this example, those blocks that would not have been, in previous approaches, erased (e.g., as those blocks do not include user data) may be specifically directed to be erased.</p><p id="p-0019" num="0018">In some embodiments, a data erase operation may be performed on a memory system to erase those groups of memory cells (e.g., blocks) indicated as valid without erasing those groups of memory cells (e.g., blocks) indicated as invalid. In this example, those blocks that would have been, in previous approaches, erased (e.g., invalid blocks) may be specifically directed to be not erased such that information associated with failing scenes of the invalid blocks are obtainable (e.g., preserved) subsequent to the data erase operation.</p><p id="p-0020" num="0019">In some embodiments, a data erase operation that can be performed on a memory system may obtain information associated with failing scenes of groups of memory cells (e.g., blocks) prior to obtaining the information, and erase the blocks (e.g., invalid blocks) subsequently. In this example, those information that would have been, in previous data erase operations, lost (e.g., not obtained) may be obtained as a part of the data erase operation.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example computing system <b>100</b> that includes a storage device, in accordance with some embodiments of the present disclosure. An example of a memory system <b>104</b> is an SSD. The computing system <b>100</b> can include a host system, which is hereinafter referred to as host <b>102</b>. A host <b>102</b> can be a host system such as a personal laptop computer, a desktop computer, a digital camera, a mobile telephone, or a memory card reader, among various other types of hosts. Computing system <b>100</b> includes a memory system <b>104</b> comprising controller <b>108</b> configured to perform data erase operations in accordance with some embodiments of the present disclosure. The host <b>102</b> can issue commands causing data to be written to the memory system <b>104</b> and/or read from the memory system <b>104</b>.</p><p id="p-0022" num="0021">The memory system <b>104</b> can include memory devices <b>110</b>-<b>1</b> to <b>110</b>-N. In some embodiments, the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N may include non-volatile memory. For example, the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N may be NAND flash memory. Each of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N may include one or more arrays of memory cells such as single level cells (SLCs), multi-level cells (MLCs), or quad-level cells (QLCs). Each of the memory cells may store bits of data (e.g., pages and/or blocks of data) used by the host system <b>102</b>. Although non-volatile memory devices such as NAND flash memory are described, the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N may be based on any other type of memory. For example, the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N may be, but are not limited to, random access memory (RAM), read-only memory (ROM), dynamic random access memory (DRAM), synchronous dynamic random access memory (SDRAM), phase change memory (PCM), magneto random access memory (MRAM), negative-or (NOR) flash memory, and electrically erasable programmable read-only memory (EEPROM). Furthermore, the memory cells of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N may be grouped as memory pages or data blocks that may refer to a unit of the memory device used to store data.</p><p id="p-0023" num="0022">The host <b>102</b> can be coupled to the memory system <b>104</b> via a physical host interface. Examples of a physical host interface include, but are not limited to, a serial advanced technology attachment (SATA) interface, a peripheral component interconnect express (PCIe) interface, universal serial bus (USB) interface, Fibre Channel, Serial Attached SCSI (SAS), etc. The physical host interface may be used to transmit data between the host <b>102</b> and the memory system <b>104</b>. The host <b>104</b> may further utilize an NVM Express (NVMe) interface protocol to access the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N when the memory system <b>104</b> is coupled with the host <b>102</b> by the PCIe interface.</p><p id="p-0024" num="0023">The host <b>102</b> can issue one or more commands (e.g., read, write, erase, program, etc.) to the memory system <b>104</b>. In some embodiments, the command issued from the host <b>102</b> to the memory system <b>104</b> may be a data erasure command that may direct how the memory system <b>104</b>, responsive to receiving the data erasure command, performs a data erase operation on the memory device <b>110</b>-<b>1</b> to <b>110</b>-N. As such, the data erasure command issued from the host may be a host-directed command.</p><p id="p-0025" num="0024">The memory system <b>104</b> can include a controller <b>108</b> to communicate with the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N to perform operations such as reading data, writing data, or erasing data at the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N and other such operations. The controller <b>108</b> can include hardware such as one or more integrated circuits and/or discrete components, software such as firmware or other instructions, or a combination thereof. In general, the controller <b>108</b> can receive commands or operations from the host <b>102</b> and can convert the commands or operations into instructions or appropriate commands to achieve the desired access to the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N. The controller <b>108</b> can be responsible for other operations such as wear leveling operations, garbage collection operations, error detection and error-correcting code (ECC) operations, encryption operations, caching operations, and address translations between a logical block address and a physical block address that are associated with the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N.</p><p id="p-0026" num="0025">The controller <b>108</b> can include a data erase component <b>112</b> to perform data erase operation as specifically directed by the data erasure command issued and received from the host <b>102</b>. The data erase component <b>112</b> can perform a data erase operation that can erase blocks indicated as not including user data, not erase blocks marked as invalid (e.g., invalidated), and/or not erase blocks marked as invalid until particular information associated with the invalid blocks is obtained, as directed by the data erasure command received from the host <b>102</b>. In some embodiments, the data erase operations performed on the memory device <b>110</b> may physically erase blocks of the memory device <b>110</b>.</p><p id="p-0027" num="0026">In some embodiments, the data erase component <b>112</b> can perform data erase operations by overwriting a particular data pattern to the blocks. For example, binary bit values of the particular data pattern may be all &#x201c;1s&#x201d;, all &#x201c;0s&#x201d;, and/or any combination of &#x201c;1&#x201d; and &#x201c;0&#x201d; in a random manner.</p><p id="p-0028" num="0027">In some embodiments, performing data erase operations on blocks may include destroying readability of data stored on the blocks. In some embodiments, the particular data pattern may be overwritten to a portion of memory cells of the block, which can be sufficient to destroy a readability of data stored on the block. In some embodiments, if data stored on a block (e.g., block to be erased) is encrypted, a readability of the data may be destroyed by changing information associated with a corresponding encryption key, which may be stored on the same block and/or on a different block. In this example, the encrypted data stored on the block may not be erased (e.g., overwritten with a particular data pattern) and/or destroyed since the changed information associated with the corresponding encryption key would make it unable to read the data stored on the block.</p><p id="p-0029" num="0028">Embodiments of the present disclosure can provide benefits such as preserving particular information associated with invalid blocks of the memory device <b>110</b>. In previous approaches, erase operations performed in association with secure erase/sanitization destroyed (e.g., erased) invalid blocks such that the information that may be utilized in analyzing failing scenes of the invalid blocks is unobtainable. In contrast, embodiments of the present disclosure provide a deletion mechanism that preserves the information (e.g., data) associated with the failing scenes of invalid blocks, for example, even subsequent to performing data erase operations of the present disclosure.</p><p id="p-0030" num="0029">In some embodiments, information associated with the failing scenes of invalid blocks that are obtainable can include, for example, information associated with threshold voltage distributions of the invalid blocks. For example, those invalid blocks may previously have experienced undesirable drift in threshold voltage distributions, which may have resulted in failures of memory operations performed on the blocks. As such, the information (e.g., threshold voltage distributions) obtained may be utilized to analyze failing scenes of the invalid blocks in connection with draft of the threshold voltage distributions.</p><p id="p-0031" num="0030">The controller <b>108</b> can include a mapping component <b>114</b> that can include a logical to physical address map (e.g., table) as well as indicators of page status (e.g., valid, invalid, erased, etc.). The mapping component <b>114</b> can identify blocks that are currently invalid and/or blocks that were previously invalidated. In some embodiments, those blocks that are marked as invalid may be blocks whose reliability is adversely affected, for example, such that they are no longer in use for various memory operations.</p><p id="p-0032" num="0031">The address map and/or page status can be updated in various manners. In some embodiments, the mapping can be initiated by host <b>102</b>. For example, the host <b>102</b> may be configured to provide a trim command in association with providing a host-initiated data erasure command to the controller <b>108</b>, which can initiate a data erase operation based on the LBA list provided from the trim command. As used herein, a trim command may be referred to as a command that informs the memory system <b>104</b> of which blocks of data are no longer considered in use (e.g., invalid blocks). For example, a trim command may be a TRIM command, UNMAP command, or DEALLOCATE command, among other commands, which can depend on a particular interface type and/or protocol (e.g., ATA, SCSI, etc.).</p><p id="p-0033" num="0032">The mapping component <b>114</b> can update the table to mark a particular block as invalid, for example, responsive to a failure of a memory operation performed on the particular block of one or more of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N. For example, the mapping component <b>114</b> may perform write operations on blocks of the one or more of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N, determine that the write operation performed on a particular block failed, and update the table to mark that the particular block is invalid.</p><p id="p-0034" num="0033">Blocks may be invalidated responsive to occurrence of various events that make the blocks unreliable. For example, a block may be invalidated responsive to a corresponding bit error rates (BER) exceeding a threshold BER. For example, a block may be invalidated when a memory operation failed to be performed on the block. In some embodiments, those blocks to be invalidated may be referred to as grown bad blocks (GBB).</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a diagram of a portion of a memory device <b>210</b> having physical blocks <b>216</b>-<b>0</b> (BLOCK <b>0</b>), <b>216</b>-<b>1</b> (BLOCK <b>1</b>), . . . , <b>216</b>-B (BLOCK B) in accordance with some embodiments of the present disclosure. The memory device <b>210</b> illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can be at least one of the memory device <b>110</b>-<b>1</b> to <b>110</b>-N of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The memory device <b>210</b> can be, for example, a NAND flash memory. However, embodiments of the present disclosure are not limited to a particular type of memory or memory. For example, the memory device <b>210</b> can be a DRAM array, an RRAM array, or a PCRAM array, among other types of memory. Further, although not shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the memory device <b>210</b> can be located on a particular semiconductor die along with various peripheral circuitry associated with the operation thereof.</p><p id="p-0036" num="0035">The blocks <b>216</b>-<b>0</b> (BLOCK <b>0</b>), <b>216</b>-<b>1</b> (BLOCK <b>1</b>), . . . , <b>216</b>-B (BLOCK B) can be referred to collectively as blocks <b>216</b>. The blocks <b>216</b> can comprise single level cells (SLCs) and/or multilevel cells (MLCs). As an example, the number of physical blocks <b>216</b> in the memory device <b>210</b> may be 128 blocks, 512 blocks, or 1,024 blocks, but embodiments are not limited to a particular number of physical blocks in the memory device <b>210</b>.</p><p id="p-0037" num="0036">Each block <b>216</b> can include memory cells that are erased together as a unit. As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, each physical block <b>216</b> can comprise physical rows <b>218</b>-<b>0</b>, <b>218</b>-<b>1</b>, . . . , <b>218</b>-R of memory cells that can each be coupled to a respective access line (e.g., word line). The number of rows in each physical block can be 32, but embodiments are not limited to a particular number of rows <b>218</b> per physical block.</p><p id="p-0038" num="0037">As one of ordinary skill in the art will appreciate, each row <b>218</b> can comprise physical pages of cells. A physical page of cells can refer to memory cells that are programmed and/or read together or as a functional group. In the embodiment shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, each row <b>218</b> can comprise one physical page of cells. However, embodiments of the present disclosure are not so limited. For instance, each row <b>218</b> can comprise multiple physical pages of cells (e.g., an even page associated with cells coupled to even-numbered bit lines, and an odd page associated with cells coupled to odd numbered bit lines). Additionally, for embodiments including multilevel cells, a physical page can store multiple logical pages of data with each cell in a physical page contributing a bit toward a logical lower page, a bit toward a logical upper page, and one or more bits toward a respective number of logical intermediate pages.</p><p id="p-0039" num="0038">In the example shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a physical page corresponding to a row <b>218</b> can store sectors <b>220</b>-<b>1</b>, <b>220</b>-<b>2</b>, . . . , <b>220</b>-S of data (e.g., an amount of data corresponding to a host sector, such as 512 bytes). The sectors <b>220</b> may comprise user data as well as overhead data, such as error correction code (ECC) data and LBA data. It is noted that other configurations for the physical blocks <b>216</b>, rows <b>218</b>, and sectors <b>220</b> are possible. For example, rows <b>218</b> can each store data corresponding to a single sector which can include, for example, more or less than <b>512</b> bytes of data.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> illustrates a flow diagram of an example method <b>330</b> to perform a data erase operation in accordance with some embodiments of the present disclosure. The method <b>330</b> may be performed by processing logic that may include hardware (e.g., processing device circuitry, dedicated logic, programmable logic, microcode, hardware of a device, integrated circuit, etc.), software (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method <b>330</b> may be performed by the data erase component <b>112</b> or one or more components of the controller <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0041" num="0040">At block <b>332</b>, processing logic receives a data erasure command from a host. The command can be a request for the memory system to perform a data erase operation that can be specifically directed as to a manner in which the data erase operation is to be performed. As such, the data erasure command can be a host-initiated as well as a host-directed command. The memory system can be an SSD, for example, as described in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0042" num="0041">At block <b>334</b>, processing logic performs the data erase operation on a memory device. The memory device can be one or more of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The data erase operation performed on the memory device can include (e.g., result in) erasing blocks indicated as not including user data. For example, the data erase operation described in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> can erase those blocks marked as &#x201c;empty&#x201d; as further described in connection with <figref idref="DRAWINGS">FIG. <b>3</b>B-<b>3</b>C</figref>.</p><p id="p-0043" num="0042"><figref idref="DRAWINGS">FIG. <b>3</b>B-<b>3</b>C</figref> illustrate block diagrams of example statuses of a memory device illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. For example, <figref idref="DRAWINGS">FIG. <b>3</b>B-<b>3</b>C</figref> illustrate status change of each example block of the memory device as the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> is performed on the memory device <b>310</b>.</p><p id="p-0044" num="0043">Turning to <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> illustrates a block status <b>336</b> of the memory device <b>310</b>, for example, prior to performing the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. For example, the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>3</b>B-<b>3</b>C</figref> on the memory device <b>310</b> may result in erasure of blocks of the memory device <b>310</b> indicated as not including user data.</p><p id="p-0045" num="0044">The memory device <b>310</b> may include four different blocks <b>316</b>-<b>0</b>, <b>316</b>-<b>1</b>, <b>316</b>-<b>2</b>, and <b>316</b>-<b>3</b> whose block statuses are illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the blocks <b>316</b>-<b>0</b> and <b>316</b>-<b>2</b> are illustrated as having &#x201c;VALID&#x201d; status, which indicates that the blocks <b>316</b>-<b>0</b> and <b>316</b>-<b>2</b> are still in use (e.g., by the host <b>102</b>). For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref>, the blocks <b>316</b>-<b>1</b> and <b>316</b>-<b>3</b> are illustrated as having &#x201c;FREE&#x201d; status, which indicates that the blocks <b>316</b>-<b>1</b> and <b>316</b>-<b>3</b> do not include user data. Those blocks such as blocks <b>316</b>-<b>1</b> and <b>316</b>-<b>3</b> indicated as not including user data are empty blocks that were previously erased and to which data is not written prior to the data erase operation being performed. The blocks <b>316</b>-<b>0</b>, <b>316</b>-<b>1</b>, <b>316</b>-<b>2</b>, and <b>316</b>-<b>3</b> may be collectively referred to as blocks <b>316</b>.</p><p id="p-0046" num="0045">Turning to <figref idref="DRAWINGS">FIG. <b>3</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>3</b>C</figref> illustrates a block status <b>338</b> of the memory device <b>310</b>, for example, subsequent to performing the data erase operation, as described in connection with <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>. The data erase operation performed on the memory device <b>310</b> may erase all blocks (e.g., blocks <b>316</b>) of the memory device <b>310</b>. For example, the blocks <b>316</b> of the memory device <b>310</b> erased as a result of the data erase operation include those &#x201c;VALID&#x201d; blocks <b>316</b>-<b>0</b> and <b>316</b>-<b>2</b> as well as those &#x201c;FREE&#x201d; blocks <b>316</b>-<b>1</b> and <b>316</b>-<b>3</b>. As such, performing the data erase operation as described in connection with <figref idref="DRAWINGS">FIG. <b>3</b>A-<b>3</b>C</figref> may result in re-erasing those blocks <b>316</b>-<b>1</b> and <b>316</b>-<b>3</b> indicated as not including user data.</p><p id="p-0047" num="0046">The data erase operations as described in connection with FIG. <figref idref="DRAWINGS">FIG. <b>3</b>B-<b>3</b>C</figref> provide benefits such as providing secure erasure on blocks that are erroneously indicated as not including user data. For example, the processing logic can utilize a table stored on the processing logic to identify invalid blocks, and the table may erroneously indicate that a particular block is an empty block while the particular block indeed includes user data. In previous approaches, those user data included in blocks that are erroneously indicated as invalid may not be securely erased as empty blocks are typically not re-erased in previous secure erase/sanitization operations. In contrast, the present disclosure provides a deletion mechanism that securely erase even those blocks that are indicated as empty to ensure that user data that may have been included in the empty blocks are also erased.</p><p id="p-0048" num="0047"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a flow diagram of another example method <b>440</b> to perform a data erase operation in accordance with some embodiments of the present disclosure. The method <b>440</b> may be performed by processing logic that may include hardware (e.g., processing device circuitry, dedicated logic, programmable logic, microcode, hardware of a device, integrated circuit, etc.), software (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method <b>330</b> may be performed by the data erase component <b>112</b> or one or more components of the controller <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0049" num="0048">In some embodiments, the data erase operation performed in connection with <figref idref="DRAWINGS">FIG. <b>4</b>A-<b>4</b>C</figref> on a memory system (e.g., memory system <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may result in erasure of blocks indicated as valid without erasing blocks indicated as invalid such that information associated with failing scenes of the invalid blocks are obtainable subsequent to performing the data erase operation directed by the data erasure command of the present disclosure. In a number of embodiments, the data erasure command may be issued from a host (e.g., host <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) such that the host can enable/disenable performance of the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>4</b>A-<b>4</b>C</figref>.</p><p id="p-0050" num="0049">At block <b>442</b>, processing logic receives a data erasure command from a host. The command can be a request for the memory system to perform a data erase operation that can be specifically directed as to a manner in which the data erase operation is to be performed. As such, the data erasure command can be a host-initiated as well as a host-directed command. The memory system can be an SSD, for example, as described in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0051" num="0050">In some embodiments, a data erase operation that may be specifically directed by the received data erasure command may erase blocks that are indicated as valid without erasing those blocks indicated as invalid. As such, the processing logic may identify, prior to performing the data erase operation, blocks that are currently invalid, the processing logic may be configured to update a table such that the table reflects which blocks of the memory device are currently invalid. The table update may be initiated by the host <b>102</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> via, for example, a trim command as described in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0052" num="0051">At block <b>444</b>, processing logic performs the data erase operation on the memory device. The memory device can be one or more of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The data erase operation performed on the memory device results in erasure of &#x201c;valid&#x201d; blocks without erasing &#x201c;invalid&#x201d; blocks such that information associated with failing scenes of the &#x201c;invalid&#x201d; blocks are obtainable subsequent to the data erase operation performed.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>4</b>B-<b>4</b>C</figref> illustrate block diagrams of example statuses of a memory device illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. For example, <figref idref="DRAWINGS">FIG. <b>4</b>B-<b>4</b>C</figref> illustrate status change of each example block of the memory device as the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is performed on the memory device <b>410</b>.</p><p id="p-0054" num="0053">Turning to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates a block status <b>446</b> of the memory device <b>410</b>, for example, prior to performing the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. The memory device <b>410</b> may include four different blocks <b>416</b>-<b>0</b>, . . . , <b>416</b>-<b>3</b> whose blocks statuses are illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the blocks <b>416</b>-<b>0</b>, <b>416</b>-<b>1</b>, and <b>416</b>-<b>2</b> are illustrated as having &#x201c;VALID&#x201d; status, which indicates that the blocks <b>416</b>-<b>0</b>, <b>416</b>-<b>1</b>, and <b>416</b>-<b>2</b> are still in use for memory operations (e.g., write, read, and/or erase). For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the blocks <b>416</b>-<b>3</b> is illustrated as having &#x201c;INVALID&#x201d; status, which indicates that the block <b>416</b>-<b>3</b> is no longer in use for memory operations (e.g., write and/or read).</p><p id="p-0055" num="0054">Turning to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>C</figref> illustrates a block status <b>448</b> of the memory device <b>410</b>, for example, subsequent to performing the data erase operation. The data erase operation performed responsive to the data erasure command received from the host <b>102</b> erase those blocks marked as &#x201c;VALID&#x201d; and not erase those blocks marked as &#x201c;INVALID.&#x201d; For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, the blocks <b>416</b>-<b>0</b>, <b>416</b>-<b>1</b> and <b>416</b>-<b>2</b> are erased as a result of the data erase operation performed on the memory device <b>410</b>, and their statuses are updated to be marked as &#x201c;FREE.&#x201d; For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, the blocks <b>416</b>-<b>3</b> is not erased even subsequent to the data erase operation performed on the memory device <b>410</b>. As such, its status remains as &#x201c;INVALID.&#x201d;</p><p id="p-0056" num="0055">The data erase operations as described in connection with <figref idref="DRAWINGS">FIG. <b>4</b>A-<b>4</b>C</figref> provide benefits such as preserving information associated with failing scenes of invalid blocks. For example, the memory device <b>410</b> on which the data erase operations are performed may still include the information as the invalid blocks were not erased during the operations. As such, data stored on the invalid blocks may be obtainable at a later time such that the data (e.g., information associated with failing scenes) of the invalid blocks may be utilized in various ways, for example, such as in analyzing failing scenes of the invalid blocks.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> illustrates a flow diagram of another example method <b>550</b> to perform a data erase operation in accordance with some embodiments of the present disclosure. The method <b>560</b> may be performed by processing logic that may include hardware (e.g., processing device circuitry, dedicated logic, programmable logic, microcode, hardware of a device, integrated circuit, etc.), software (e.g., instructions run or executed on a processing device), or a combination thereof. In some embodiments, the method <b>330</b> may be performed by the data erase component <b>112</b> or one or more components of the controller <b>108</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0058" num="0057">At block <b>552</b>, processing logic receives a data erasure command from a host. The command can be a request for the memory system to perform a data erase operation that can be specifically directed as to a manner in which the data erase operation is to be performed. As such, the data erasure command can be a host-initiated as well as a host-directed command. The memory system can be an SSD, for example, as described in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0059" num="0058">In some embodiments, processing logic, responsive to receiving the data erasure command from the host, can identify blocks that are invalid among blocks of the memory device. To identify blocks that are &#x201c;currently&#x201d; invalid, the table may be updated responsive to receiving a data erasure command. As described in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the table may, to identify the blocks that are &#x201c;currently&#x201d; invalid, be updated by the processing logic, for example, responsive to the trim command issued from the host.</p><p id="p-0060" num="0059">At block <b>554</b>, processing logic obtains information associated with failing scenes of invalid blocks of a memory device. The memory device can be one or more of the memory devices <b>110</b>-<b>1</b> to <b>110</b>-N of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The processing logic may obtain the information of, for example, &#x201c;currently&#x201d; invalid blocks that may have been identified as described in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0061" num="0060">In some embodiments, the obtained information may be stored (e.g., relocated) in a particular location. For example, the information may be relocated to the host (e.g., host <b>102</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), processing logic (e.g., controller <b>108</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>), and/or a different block within the same memory device (e.g., memory device <b>110</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>). Further details of the relocation are described in connection with <figref idref="DRAWINGS">FIG. <b>5</b>B-<b>5</b>D</figref>. Subsequent to obtaining the information, the method <b>560</b> can proceed to <b>556</b>.</p><p id="p-0062" num="0061">At block <b>556</b>, processing logic performs the data erase operation on the memory device. In some embodiments, the data erase operation directed by the data erasure command from the host may erase blocks of the memory device including those blocks identified as &#x201c;currently&#x201d; invalid.</p><p id="p-0063" num="0062">In some embodiments, the data erase operation directed by the data erasure command and performed on the memory device may erase other blocks as well as those blocks identified as currently invalid. The data erase operation may erase, for example, those blocks that are identified as valid and those blocks that are identified as empty.</p><p id="p-0064" num="0063">In some embodiments, when the information associated with the failing scenes of the invalid blocks are stored within the memory device, the data erase operation may erase any block of the memory device except a particular block on which the obtained information is stored, as described further in connection with <figref idref="DRAWINGS">FIG. <b>5</b>B-<b>5</b>D</figref>. The particular block can be at various locations within a memory system (e.g., memory system <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). For example, the particular block may be located on a memory device (e.g., memory device <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) of NAND flash memory. For example, the particular block may be located on a memory device of NOR flash memory.</p><p id="p-0065" num="0064"><figref idref="DRAWINGS">FIG. <b>5</b>B-<b>5</b>D</figref> illustrate block diagrams of example statuses of a memory device illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>. For example, <figref idref="DRAWINGS">FIG. <b>5</b>B-<b>5</b>D</figref> illustrate status change of each example block of the memory device as the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>5</b>A</figref> is performed on the memory device <b>510</b>.</p><p id="p-0066" num="0065">Turning to <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> illustrates a block status <b>560</b> of the memory device <b>510</b>, for example, prior to performing the data erase operation described in connection with <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>. The memory device <b>510</b> may include eight different blocks <b>516</b>-<b>0</b>, . . . , <b>516</b>-<b>7</b> whose block statuses are illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, the blocks <b>516</b>-<b>0</b>, <b>516</b>-<b>2</b>, <b>516</b>-<b>4</b>, and <b>516</b>-<b>5</b> are illustrated as having VALID status, which indicates that the blocks <b>516</b>-<b>0</b>, <b>516</b>-<b>2</b>, <b>516</b>-<b>4</b>, and <b>516</b>-<b>5</b> are still in use for memory operations (e.g., write, read, and/or erase operations). For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, the blocks <b>516</b>-<b>1</b> and <b>516</b>-<b>6</b> are illustrated as having &#x201c;INVALID&#x201d; status, which indicates that the block <b>416</b>-<b>3</b> is no longer in use for the memory operations (e.g., read, write, and/or erase operations). For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, the blocks <b>516</b>-<b>3</b> and <b>516</b>-<b>7</b> are illustrated as having &#x201c;FREE&#x201d; status, which indicates that the blocks <b>516</b>-<b>3</b> and <b>516</b>-<b>7</b> do not include user data. Those blocks such as blocks <b>516</b>-<b>3</b> and <b>516</b>-<b>7</b> indicated as not including user data are empty blocks that were previously erased and to which data is not written prior to the data erase operation being performed.</p><p id="p-0067" num="0066">Turning to <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>C</figref> illustrates a block status <b>562</b> of the memory device <b>510</b>, for example, subsequent to receiving a data erasure command. Responsive to receiving the data erasure command, the controller <b>108</b> may identify which blocks of the memory device <b>510</b> are invalid, and obtain, based on the identification information associated with failing scenes of invalid blocks (e.g., blocks <b>516</b>-<b>1</b> and <b>516</b>-<b>6</b>). In some embodiments, the obtained information associated with failing scenes of invalid physical blocks <b>516</b>-<b>1</b> and <b>516</b>-<b>6</b> may be stored on various locations. In some embodiments, the information may be transferred from the memory device <b>510</b> to the controller <b>108</b> (e.g., as illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and/or to the host <b>102</b> such that a subsequent data erase operation performed on the memory device <b>510</b> erases all blocks of the memory device <b>510</b>. In some embodiments, the obtained information may be stored on a particular location of the memory device <b>510</b>. For example, as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, the obtained information may be stored on one of the blocks <b>516</b>-<b>3</b> and <b>516</b>-<b>7</b> marked as &#x201c;FREE&#x201d; (e.g., empty). In an example as illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, the obtained information is stored on the empty block <b>516</b>-<b>3</b>, and therefore, the controller <b>108</b> updates the table to mark the block <b>516</b>-<b>7</b> as &#x201c;EXCEPTION&#x201d;, which indicates that the block <b>516</b>-<b>7</b> includes the information associated with the failing scenes, and not to be erased during the subsequent data erase operation.</p><p id="p-0068" num="0067">Turning to <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> illustrates a block status <b>564</b> of the memory device <b>510</b>, for example, subsequent to performing the data erase operation. As described in connection with <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, the data erase operation may be performed subsequent to update the table to indicate that the block <b>516</b>-<b>7</b> includes the information associated with the failing scenes.</p><p id="p-0069" num="0068">In an example illustrated in <figref idref="DRAWINGS">FIG. <b>5</b>D</figref>, the data erase operation may erase all blocks of the memory device <b>510</b> except a particular block indicated as including the information associated with the failing scenes. For example, the date erase operation may erase those blocks <b>516</b>-<b>0</b>, <b>516</b>-<b>2</b>, <b>516</b>-<b>4</b>, and <b>516</b>-<b>5</b> (e.g., at <b>562</b>) marked as &#x201c;VALID,&#x201d; those blocks <b>516</b>-<b>1</b> and <b>516</b>-<b>6</b> (e.g., at <b>562</b>) marked as &#x201c;INVALID,&#x201d; and the block <b>516</b>-<b>3</b> marked as FREE, and not erase the block <b>516</b>-<b>7</b> marked as &#x201c;EXCEPTION.&#x201d; As such, subsequent to the data erase operation performed, the controller <b>108</b> may update a table to mark the erased blocks <b>516</b>-<b>0</b>, <b>516</b>-<b>1</b>, <b>516</b>-<b>2</b>, <b>512</b>-<b>3</b>, <b>516</b>-<b>4</b>, <b>516</b>-<b>5</b>, and <b>516</b>-<b>6</b> as FREE, which indicates that those blocks are empty while the block <b>516</b>-<b>7</b> remains being marked as EXCEPTION, which indicates that the block <b>516</b>-<b>7</b> includes the information associated with the failing scenes.</p><p id="p-0070" num="0069">The data erase operations as described in connection with <figref idref="DRAWINGS">FIG. <b>5</b>A-<b>5</b>D</figref> provides benefits such as securely erasing all blocks of a memory device while preserving information associated with failing scenes of invalid blocks. For example, the data erase operations performed on the memory device <b>510</b> securely erase all blocks (e.g., blocks <b>516</b>) of the memory device <b>510</b> such that, the memory device <b>510</b> does not include user data subsequent to the data erase operations. At the same time, information associated with failing scenes of invalid data are still obtainable subsequent to the data operations as the information is still stored on a particular location (e.g., the memory device <b>510</b>).</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example machine of a computer system <b>400</b> within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. For example, the computer system <b>400</b> may correspond to a host system (e.g., the host system <b>120</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) that includes or utilizes a memory system (e.g., the memory system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) or may be used to perform the operations of a controller (e.g., to execute an operating system to perform operations corresponding to the adaptive scan component <b>113</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). In alternative implementations, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the Internet. The machine may operate in the capacity of a server or a client machine in client-server network environment, as a peer machine in a peer-to-peer (or distributed) network environment, or as a server or a client machine in a cloud computing infrastructure or environment.</p><p id="p-0072" num="0071">The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while a single machine is illustrated, the term &#x201c;machine&#x201d; shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein. The example computer system <b>400</b> includes a processing device <b>402</b>, a main memory <b>404</b> (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory <b>406</b> (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device <b>418</b>, which communicate with each other via a bus <b>430</b>.</p><p id="p-0073" num="0072">Processing device <b>402</b> represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device <b>402</b> may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device <b>402</b> is configured to execute instructions <b>426</b> for performing the operations and steps discussed herein. The computer system <b>400</b> may further include a network interface device <b>408</b> to communicate over the network <b>420</b>.</p><p id="p-0074" num="0073">The data storage device <b>418</b> may include a machine-readable storage medium <b>424</b> (also known as a computer-readable medium) on which is stored one or more sets of instructions or software <b>426</b> embodying any one or more of the methodologies or functions described herein. The instructions <b>426</b> may also reside, completely or at least partially, within the main memory <b>404</b> and/or within the processing device <b>402</b> during execution thereof by the computer system <b>400</b>, the main memory <b>404</b> and the processing device <b>402</b> also constituting machine-readable storage media. The machine-readable storage medium <b>424</b>, data storage device <b>418</b>, and/or main memory <b>404</b> may correspond to the memory system <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0075" num="0074">The data storage device <b>610</b> can include a machine-readable storage medium <b>676</b> (also referred to as a computer-readable medium) on which is stored one or more sets of instructions <b>675</b> (e.g., software) embodying one or more of the various methodologies or functions described herein. The instructions <b>675</b> can also reside, completely or at least partially, within the main memory <b>605</b> and/or within the processing device <b>603</b> during execution thereof by the computer system <b>601</b>, the main memory <b>605</b> and the processing device <b>603</b> also constituting machine-readable storage media. The machine-readable storage medium <b>676</b>, data storage device <b>610</b>, and/or main memory <b>605</b> can correspond to the memory system <b>104</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0076" num="0075">In one implementation, the instructions <b>426</b> include instructions to implement functionality corresponding to a programming component (e.g., adaptive scan component <b>113</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>). While the machine-readable storage medium <b>424</b> is shown in an example implementation to be a single medium, the term &#x201c;machine-readable storage medium&#x201d; should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term &#x201c;machine-readable storage medium&#x201d; shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term &#x201c;machine-readable storage medium&#x201d; shall accordingly be taken to include, but not be limited to, solid-state memories, optical media and magnetic media</p><p id="p-0077" num="0076">Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.</p><p id="p-0078" num="0077">It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion, it is appreciated that throughout the description, aspects of the present disclosure may refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage systems.</p><p id="p-0079" num="0078">The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the intended purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.</p><p id="p-0080" num="0079">The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition, the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.</p><p id="p-0081" num="0080">The present disclosure may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present disclosure. A machine-readable medium includes any mechanism for storing information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium such as a read only memory (&#x201c;ROM&#x201d;), random access memory (&#x201c;RAM&#x201d;), magnetic disk storage media, optical storage media, flash memory devices, etc.</p><p id="p-0082" num="0081">In the foregoing specification, implementations of the disclosure have been described with reference to specific example implementations thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of implementations of the disclosure as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method, comprising:<claim-text>performing a data erase operation on a memory system, wherein performing the data erase operation includes erasing a plurality of blocks of the memory system including blocks indicated as not including user data.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of blocks includes all blocks of the memory system, and wherein the all blocks of the memory system includes:<claim-text>a plurality of first blocks indicated as including user data; and</claim-text><claim-text>a plurality of second blocks indicated as not including user data.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the blocks indicated as not including user data are empty blocks that were previously erased and to which data is not written prior to the data erase operation being performed.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein erasing the plurality of blocks including the blocks indicated as not including user data comprises overwriting a particular data pattern to the plurality of blocks including the blocks indicated as not including user data.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein a data erasure command is received at a controller of a solid state drive, and wherein the controller is coupled to a host and the data erasure command is issued from the host to the controller.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. An apparatus, comprising:<claim-text>an array of memory cells including a plurality of blocks; and</claim-text><claim-text>a controller coupled to the array and configured to:<claim-text>receive a data erasure command; and</claim-text><claim-text>perform, in response to receipt of the data erasure command, a data erase operation on one or more blocks of the array that are indicated as not including user data to result in erasure of the one or more blocks.</claim-text></claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the controller is configured to mark, prior to performance of the data erase operation, the one or more blocks as a result of a previous data erase operation performed on the one or more blocks.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the controller is configured to overwrite a particular data pattern to the one or more blocks to perform the data erase operation on the one or more blocks.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the particular data pattern comprises a number of bits having a first binary value.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The apparatus of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the particular data pattern comprises a combination of first and second binary values in a random manner.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the controller is further coupled to a host and the data erasure command is received from the host.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the blocks indicated as not including user data are empty blocks that were previously erased and to which user data is not written prior to the data erase operation being performed.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. An apparatus, comprising:<claim-text>an array of memory cells including a plurality of blocks including one or more blocks indicated as not including user data; and</claim-text><claim-text>a controller coupled to the array and configured to:<claim-text>receive a data erasure command; and</claim-text><claim-text>re-erase, as a result of performance of a data erase operation as directed by the data erasure command, the one or more blocks of the plurality of blocks that are indicated as not including user data.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the blocks indicated as not including user data are empty blocks that were previously erased and to which user data is not written prior to the data erase operation being performed.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the controller is configured to overwrite a particular data pattern to the one or more blocks to perform the data erase operation on the one or more blocks.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the particular data pattern comprises a number of bits having a first binary value.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the particular data pattern comprises a combination of first and second binary values in a random manner.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein each block of the plurality of blocks of the array is a unit of erasure and is configured to store a plurality of pages of data.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The apparatus of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the controller is configured to destroy, to perform the data erase operation, destroying a readability of the one or more blocks by changing information associated with an encryption key of an encryption key corresponding to the data stored in the one or more blocks.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The apparatus of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the encryption key is stored in one of the one or more blocks.</claim-text></claim></claims></us-patent-application>