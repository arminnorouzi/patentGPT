<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004651A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004651</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17662477</doc-number><date>20220509</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>57</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>577</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2221</main-group><subgroup>033</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">PENETRATION TESTING FOR API SERVICE SECURITY</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217055</doc-number><date>20210630</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Cisco Technology, Inc.</orgname><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Bosch</last-name><first-name>Hendrikus G.P.</first-name><address><city>Aalsmeer</city><country>NL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Duminuco</last-name><first-name>Alessandro</first-name><address><city>Milano</city><country>IT</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Mullender</last-name><first-name>Sape Jurri&#xeb;n</first-name><address><city>Amsterdam</city><country>NL</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">According to some embodiments, a method comprises: obtaining an application programming interface (API) specification for an API service; performing one or more tests on the API service to determine an amount of deviation between the API service and the API specification; and determining a deviation score based on the amount of deviation between the API service and the API specification. The method may include transmitting the deviation score to a scoring agent.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="89.58mm" wi="158.75mm" file="US20230004651A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="230.29mm" wi="139.28mm" orientation="landscape" file="US20230004651A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="229.45mm" wi="123.61mm" file="US20230004651A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application claims priority to U.S. Provisional Application Ser. No. 63/217,055 entitled &#x201c;Penetration Testing for API Service Security,&#x201d; filed Jun. 30, 2021, the entire content of which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This disclosure generally relates to application security, and more specifically to application programming interface (API) security.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">When an enterprise application uses APIs from internal or third party services, the users of that application are exposed to certain security risks. These risks include data leakage of personally identifiable information, penetration or hacking of the calling party or application, and/or other nefarious use.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0005" num="0004">For a more complete understanding of the disclosed embodiments and their features and advantages, reference is now made to the following description, taken in conjunction with the accompanying drawings, in which:</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flow diagram illustrating API analysis, according to particular embodiments;</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating an example method performed by a security agent, according to particular embodiments; and</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example security agent, according to particular embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DESCRIPTION OF EXAMPLE EMBODIMENTS</heading><heading id="h-0006" level="1">Overview</heading><p id="p-0009" num="0008">When application programing interface (API) services are used in an application, the calling application is exposed to any vulnerabilities of the API services. Data can leak, the server can (inadvertently) attack the calling application and expose the calling application to malware, adware, cross-site scripting or otherwise, or the service simply does not implement what the service says its implements by way of its interface definition language (IDL) specification, documentation or other sources.</p><p id="p-0010" num="0009">Moreover, discrepancies may exist between a published IDL and the actual API server implementation. If a client application can be made aware of the level of deficiency in real time, the client application can define and/or enforce security and application vulnerability policies (e.g., allow, amend or even deny access to a service) based on the number of deficiencies.</p><p id="p-0011" num="0010">One method to test a service is to apply a sequence of penetration tests on the API service. A set of positive and negative tests may be run against a service and based on the responses from the API service, the calling party may associate a security score to the tests. The service should be able to withstand all such tests, possibly even under duress, but more likely than not, most API services will expose issues with the service.</p><p id="p-0012" num="0011">Another problem is that such tests can be circumvented by the API service itself. For example, some software may recognize it is being tested and react perfectly to the tester. The same applies for API services. In such cases, the software under test may return test data, thereby making it difficult for the tester to understand if the service is well implemented.</p><p id="p-0013" num="0012">Particular embodiments include testing and recognizing &#x201c;bit-rot,&#x201d; the phenomenon that software quality (and thus API services) deteriorate over time. The measure may be used in enforcing security policies.</p><p id="p-0014" num="0013">According to some embodiments, a method comprises: obtaining an application programming interface (API) specification for an API service; performing one or more tests on the API service to determine an amount of deviation between the API service and the API specification; and determining a deviation score based on the amount of deviation between the API service and the API specification. The method may include transmitting the deviation score to a scoring agent.</p><p id="p-0015" num="0014">Discrepancies may exist between a published IDL and the API implementation. If a client application is made aware of the level of deficiency in real time, the client application may define and/or enforce policies (e.g., allow, amend or even deny access to a service) based on the amount or number of deficiencies. Penetration testing may be used to detect discrepancies. The penetration testing may be co-mingled with normal operation to disguise the testing.</p><heading id="h-0007" level="1">Example Embodiments</heading><p id="p-0016" num="0015">Application developers may use external services through application programming interfaces (APIs) when implementing their enterprise applications. By using external API services in applications, a developer may leverage available technology and significantly speed up the development cycle. However, the use of external API services exposes applications to problems with the APIs. For example, among other problems, services often do not fully or completely implement the specification as defined by the interface definition language (IDL) describing the API.</p><p id="p-0017" num="0016">Penetration testing can be used to identify such implementation omissions. Penetration testing involves invoking each interface of the API service, sometimes multiple times with different parameters or even with fuzzed parameters and verifying the results. In this way, the penetration test can detect unimplemented or incorrectly implemented interfaces.</p><p id="p-0018" num="0017">Another way to identify API implementation omissions is to dynamically reconstruct the IDL specification and compare it with the published IDL specification for a service to identify discrepancies. For this, a client-side application is used to first capture the requests that are sent to the server, by a transparent agent (or man-in-the-middle) for example, and then to capture the responses. By collecting a large set of requests and responses, the client-side application may recreate the likely IDL specification.</p><p id="p-0019" num="0018">Thus, as the client applications are using the services, the collected telemetry forms the basis for the IDL definition. If the recreation is performed across a large body of client applications, the specificity of the interface definition improves as more methods are used and more fidelity of the data fields is learned. Moreover, by tracking multiple of such calls, parameter dependencies are found.</p><p id="p-0020" num="0019">Based on the results of the penetration testing and/or the IDL reconstruction, the API service may be assigned a score. API services with fewer discrepancies with the published IDL may receive a higher score than those with more discrepancies. Client applications may use the score to define and/or enforce policies (e.g., allow, amend or even deny access to a service).</p><p id="p-0021" num="0020">Over time, discrepancies between what the server implements and what is defined through the IDL may change. For example, changes to API server software, hardware, or third party services used by the application may change (e.g., software/hardware upgrades, availability of libraries, etc.). These changes may then affect the API service. Although some upgrades may fix prior problems, the trend over time may be an increase in the discrepancies. This may be referred to as API service degradation or &#x201c;bit rot.&#x201d; Alternatively, a service may become better as well, showing the inverse.</p><p id="p-0022" num="0021">Thus, one advantage of particular embodiments is to dynamically update the score over time so that the score reflects the current state of the API service. An example implementation is illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flow diagram illustrating API analysis. The illustrated example system <b>10</b> includes server <b>12</b> to be tested, client <b>14</b> to test server <b>12</b>, man-in-the-middle (MitM) application <b>16</b> to perform API analysis, and scoring agent <b>18</b> for storing scores.</p><p id="p-0024" num="0023">Initially, an application developer builds a server with an associated API specification. At step <b>1</b>, MitM application <b>16</b> receives the API specification from server <b>12</b>. For example, MitM application <b>16</b> may receive one or more IDL files from server <b>12</b>. In other embodiments, MitM application <b>16</b> may receive the API specification from another source. For example, an application provider may manually upload one or more IDL files to MitM application <b>16</b>.</p><p id="p-0025" num="0024">MitM application <b>16</b> is configured to act as a proxy between client <b>14</b> and server <b>12</b>. MitM application <b>16</b> receives, inspects, and analyzes the requests and responses between client <b>14</b> and server <b>12</b>. At step <b>2</b>, client <b>14</b> sets up a connection to server <b>12</b> via MitM application <b>16</b>. At step <b>3</b>, MitM application <b>16</b> completes the end-to-end session setup between the client <b>14</b> and server <b>12</b>.</p><p id="p-0026" num="0025">At steps <b>4</b>-<b>7</b>, client <b>14</b> makes a series of remote procedure calls (RPCs) to the server <b>12</b> via MitM application <b>16</b>. The RPCs may be designed to test all or part of the Server API. The vast majority of the RPCs executed from client <b>14</b> to server <b>12</b> may be legitimate RPCs and are part of the workload. To ensure that the API service cannot cheat the testing regime, particular embodiments randomly insert a set of a positive and negative API service tests to ensure the API service is still working appropriately. Thus, the series of RPCs may include a penetration test intermixed with regular operations.</p><p id="p-0027" num="0026">The series of RPCs may be designed to dynamically construct an IDL for the API and moreover to build an outside view of the server. The system may use machine learning and/or artificial intelligence learning techniques. MitM application <b>16</b> uses the information to assess the RPCs with the published specification and may maintain a dynamic model of the Server API that reflects the &#x201c;actual&#x201d; IDL.</p><p id="p-0028" num="0027">Methods to include discrepancies include assessing over time responses and return values to: purposefully omitting required parameters, fuzzing input parameters, observing deviating responses on similar requests over time, purposefully submitting flawed requests, submitting invalid API service tokens, assessing the performance of requests (slower, faster), purposefully changing parameters mid-stream in a sequence of requests, purposefully mishandling API service tokens and authorizations to get access to un-authorized data, purposefully creating and posting invalid data to the service and more.</p><p id="p-0029" num="0028">Discrepancies are detected by keeping a log of the responses and keeping a measure for the deficiency rates of the service. If more deficiencies are found over time, it is experiencing bit-rot and the score should reflect this. On the other hand, if the service improves, this should be positively reflected in the security score.</p><p id="p-0030" num="0029">In some embodiments, client <b>14</b> is not a test client, but a live enterprise application, for example. MitM application <b>16</b> may analyze the API based on the RPCs called during normal operation. MitM application <b>16</b> may base its analysis on RPCs made by more than one client application. This is a form of chaos engineering where the chaos engineering is integrated with penetration test services. It is referred to chaos engineering because some of the tests may actually be destructive on the service. In some embodiments, there is an option to disable this feature when the API service owner does not appreciate such testing. In such cases, the score of the service can reflect the unwillingness for external penetration testing.</p><p id="p-0031" num="0030">Using the MitM approach benefits the model learning phase. The model can then capture the actual use of the service and also gets a sense for the most commonly used parameters. For example, if in 99.9% of the cases a particular method in a service receives a parameter between 0-9, if a client sends a very large number, it is likely flawed. The penetration testing functionality can use the server's response to such interesting parameter values to further train its penetration testing system.</p><p id="p-0032" num="0031">After determining any deviation between the published IDL and the Server API, at step <b>8</b> MitM application <b>16</b> updates scoring agent <b>18</b> based on the determined deviation. Scoring agent <b>18</b> may use the determined deviation, either alone or in combination with other metrics, to assign a score to server <b>12</b>.</p><p id="p-0033" num="0032">Other clients may access scoring agent <b>18</b> to retrieve the score for server <b>12</b>. The clients may define and/or apply policies based on the score for server <b>12</b>.</p><p id="p-0034" num="0033">Some embodiments may not include MitM application <b>16</b> and client <b>14</b> may perform the analysis. Similarly, some embodiments may not include scoring agent <b>18</b> and the score for server <b>12</b> may be stored with server <b>12</b> or client <b>14</b>. In general, the scoring and analysis may be performed by a security agent, and the security agent reside at any one or more of MitM application <b>16</b>, client <b>14</b>, server <b>12</b>, and/or scoring agent <b>18</b>.</p><p id="p-0035" num="0034">In some embodiments, penetration tests are included in the application using the API service in a manner such that the testing is disguised to the API service. Assume there is an application that uses service A continuously. Intermingling a series of test cases into regular operations (e.g., 1% of the requests are test requests, the remainder are normal operations) makes it difficult for the tested service to understand it is being tested, while providing the caller good insight into the quality of the service. Moreover, combining such testing across a set of calling applications and coordinating between the callers, it is almost impossible for the API service to deduce it is being tested.</p><p id="p-0036" num="0035">The downside of testing &#x201c;in-line&#x201d; is that it minimally slows down the calling application. Given that such tests may be destructive for poor service implementations, not all callers may want to participate. The performance impact is low, but more importantly, while there is a risk the tests are destructive, such tests reveal serious problems with the API service and addressing such problems provides for better results longer term. In a sense, this type of testing is chaos engineering applied to API security.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a method performed by a security agent, according to some embodiments. The steps of method <b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref> may be performed by agent <b>300</b> described with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0038" num="0037">The method begins at step <b>212</b>, where the security agent obtains an application programming interface (API) specification for an API service. For example, to be able to analyze the API service, the security agent needs to know the API specification that the API service purports to implement. The API specification may be obtained in various ways.</p><p id="p-0039" num="0038">In some embodiments, the security agent may obtain one or more files containing interface definition language (IDL) specifications for the API service. The security agent may receive the files from the API service, the files may be uploaded to the security agent, or the files may be obtained from any other suitable location (e.g., standard repository, etc.).</p><p id="p-0040" num="0039">In some embodiments, the security agent may dynamically construct an IDL specification for the API service based on remote procedure calls (RPCs) with the API service. The security agent may implement RPCs designed by the security agent as test RPCs to generate the IDL. The security agent may proxy one or more requests and responses between one or more client applications and the API service. By observing these requests and responses over time, the security agent may generate the IDL.</p><p id="p-0041" num="0040">At step <b>214</b>, the security agent performs one or more tests on the API service to determine an amount of deviation between the API service and the API specification. For example, now that the security agent knows the API specification, the security agent run penetration tests designed to test the parameter of the API service. In some embodiments, the security agent may proxy one or more requests and responses between one or more client applications and the API service. By observing these requests and responses over time, the security agent may determine how well the API service adheres to the API specification.</p><p id="p-0042" num="0041">At step <b>216</b>, the security agent determines a deviation score based on the amount of deviation between the API service and the API specification. Examples of determining a deviation are described above and may include assessing over time responses and return values to: purposefully omitting required parameters, fuzzing input parameters, observing deviating responses on similar requests over time, purposefully submitting flawed requests, submitting invalid API service tokens, assessing the performance of requests (slower, faster), purposefully changing parameters mid-stream in a sequence of requests, purposefully mishandling API service tokens and authorizations to get access to un-authorized data, purposefully creating and posting invalid data to the service and more.</p><p id="p-0043" num="0042">At step <b>218</b>, the security agent may transmit the deviation score to a scoring agent. The scoring agent may then store the deviation score or combine the deviation score with other scores for the API service to arrive at a combined security score for the API service. Other clients may access the scoring agent to retrieve a deviation score or combined security score for the API service and make policy decisions based on the results.</p><p id="p-0044" num="0043">As described above, in some embodiments the security agent may be included or embedded as part of the client application (e.g., to mask testing activity). In some conditions, performing the testing may be undesirable.</p><p id="p-0045" num="0044">At step <b>220</b>, the security agent receives an indication to disable performing one or more tests on the API service. When the testing is disabled, the deviation score may be updated to reflect the condition.</p><p id="p-0046" num="0045">Modifications, additions, or omissions may be made to method <b>200</b> depicted in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. Method <b>200</b> may include more, fewer, or other steps. Additionally, steps may be performed in parallel or in any suitable order. Method <b>200</b> may be repeated as necessary and the deviation score may be updated to reflect any changes over time.</p><p id="p-0047" num="0046"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating an example security agent, according to particular embodiments. In particular embodiments, one or more agents <b>300</b> perform one or more steps of one or more methods described or illustrated herein. In particular embodiments, one or more agents <b>300</b> provide functionality described or illustrated herein, such as the functionality described with respect to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> (e.g., functionality with respect to server <b>12</b>, client <b>14</b>, and/or MitM application <b>16</b>). In particular embodiments, software running on one or more agents <b>300</b> performs one or more steps of one or more methods described or illustrated herein or provides functionality described or illustrated herein. Particular embodiments include one or more portions of one or more agents <b>300</b>. Herein, reference to an agent may encompass a computing device, and vice versa, where appropriate. Moreover, reference to an agent may encompass one or more agents, where appropriate.</p><p id="p-0048" num="0047">Particular embodiments may include any suitable number of agents <b>300</b>. Agent <b>300</b> may take any suitable physical form. As example and not by way of limitation, agent <b>300</b> may comprise an embedded computer system, a system-on-chip (SOC), a single-board computer system (SBC) (such as, for example, a computer-on-module (COM) or system-on-module (SOM)), a desktop computer system, a laptop or notebook computer system, an interactive kiosk, a mainframe, a mesh of computer systems, a server, or a combination of two or more of these. Where appropriate, agent <b>300</b> may include one or more agents <b>300</b>; be unitary or distributed; span multiple locations; span multiple machines; span multiple data centers; or reside in a cloud, which may include one or more cloud components in one or more networks.</p><p id="p-0049" num="0048">Where appropriate, one or more agents <b>300</b> may perform without substantial spatial or temporal limitation one or more steps of one or more methods described or illustrated herein. As an example and not by way of limitation, one or more agents <b>300</b> may perform in real time or in batch mode one or more steps of one or more methods described or illustrated herein. One or more agents <b>300</b> may perform at different times or at different locations one or more steps of one or more methods described or illustrated herein, where appropriate.</p><p id="p-0050" num="0049">In particular embodiments, agent <b>300</b> includes a processor <b>302</b>, memory <b>304</b>, storage <b>306</b>, an input/output (I/O) interface <b>308</b>, a communication interface <b>310</b>, and a bus <b>312</b>. Although this disclosure describes and illustrates a particular agent having a particular number of particular components in a particular arrangement, particular embodiments may include any suitable computer system having any suitable number of any suitable components in any suitable arrangement.</p><p id="p-0051" num="0050">In particular embodiments, processor <b>302</b> includes hardware for executing instructions, such as those making up a computer program. As an example and not by way of limitation, to execute instructions, processor <b>302</b> may retrieve (or fetch) the instructions from an internal register, an internal cache, memory <b>304</b>, or storage <b>306</b>; decode and execute them; and then write one or more results to an internal register, an internal cache, memory <b>304</b>, or storage <b>306</b>. In particular embodiments, processor <b>302</b> may include one or more internal caches for data, instructions, or addresses. Processor <b>302</b> may include any suitable number of any suitable internal caches, where appropriate.</p><p id="p-0052" num="0051">As an example and not by way of limitation, processor <b>302</b> may include one or more instruction caches, one or more data caches, and one or more translation lookaside buffers (TLBs). Instructions in the instruction caches may be copies of instructions in memory <b>304</b> or storage <b>306</b>, and the instruction caches may speed up retrieval of those instructions by processor <b>302</b>. Data in the data caches may be copies of data in memory <b>304</b> or storage <b>306</b> for instructions executing at processor <b>302</b> to operate on; the results of previous instructions executed at processor <b>302</b> for access by subsequent instructions executing at processor <b>302</b> or for writing to memory <b>304</b> or storage <b>306</b>; or other suitable data. The data caches may speed up read or write operations by processor <b>302</b>. The TLBs may speed up virtual-address translation for processor <b>302</b>.</p><p id="p-0053" num="0052">In particular embodiments, processor <b>302</b> may include one or more internal registers for data, instructions, or addresses. Processor <b>302</b> may include any suitable number of any suitable internal registers, where appropriate. Where appropriate, processor <b>302</b> may include one or more arithmetic logic units (ALUs); be a multi-core processor; or include one or more processors <b>302</b>. Although this disclosure describes and illustrates a particular processor, particular embodiments may include any suitable processor.</p><p id="p-0054" num="0053">In particular embodiments, memory <b>304</b> includes main memory for storing instructions for processor <b>302</b> to execute or data for processor <b>302</b> to operate on. As an example and not by way of limitation, agent <b>300</b> may load instructions from storage <b>306</b> or another source (such as, for example, another computer system <b>700</b>) to memory <b>304</b>. Processor <b>302</b> may then load the instructions from memory <b>304</b> to an internal register or internal cache.</p><p id="p-0055" num="0054">To execute the instructions, processor <b>302</b> may retrieve the instructions from the internal register or internal cache and decode them. During or after execution of the instructions, processor <b>302</b> may write one or more results (which may be intermediate or final results) to the internal register or internal cache. Processor <b>302</b> may then write one or more of those results to memory <b>304</b>. In particular embodiments, processor <b>302</b> executes only instructions in one or more internal registers or internal caches or in memory <b>304</b> (as opposed to storage <b>306</b> or else-where) and operates only on data in one or more internal registers or internal caches or in memory <b>304</b> (as opposed to storage <b>306</b> or elsewhere).</p><p id="p-0056" num="0055">One or more memory buses (which may each include an address bus and a data bus) may couple processor <b>302</b> to memory <b>304</b>. Bus <b>312</b> may include one or more memory buses, as described below. In particular embodiments, one or more memory management units (MMUs) reside between processor <b>302</b> and memory <b>304</b> and facilitate accesses to memory <b>304</b> requested by processor <b>302</b>. In particular embodiments, memory <b>304</b> includes random access memory (RAM). This RAM may be volatile memory, where appropriate. Where appropriate, this RAM may be dynamic RAM (DRAM) or static RAM (SRAM). Moreover, where appropriate, this RAM may be single-ported or multi-ported RAM. Particular embodiments may include any suitable RAM. Memory <b>304</b> may include one or more memories <b>304</b>, where appropriate. Although this disclosure describes and illustrates particular memory, particular embodiments may include any suitable memory.</p><p id="p-0057" num="0056">In particular embodiments, storage <b>306</b> includes mass storage for data or instructions. As an example and not by way of limitation, storage <b>306</b> may include a hard disk drive (HDD), a floppy disk drive, flash memory, an optical disc, a magneto-optical disc, magnetic tape, or a Universal Serial Bus (USB) drive or a combination of two or more of these. Storage <b>306</b> may include removable or non-removable (or fixed) media, where appropriate. Storage <b>306</b> may be internal or external to agent <b>300</b>, where appropriate. In particular embodiments, storage <b>306</b> is non-volatile, solid-state memory. In particular embodiments, storage <b>306</b> includes read-only memory (ROM). Where appropriate, this ROM may be mask-programmed ROM, programmable ROM (PROM), erasable PROM (EPROM), electrically erasable PROM (EEPROM), electrically alterable ROM (EAROM), or flash memory or a combination of two or more of these. Storage <b>306</b> may take any suitable physical form.</p><p id="p-0058" num="0057">Storage <b>306</b> may include one or more storage control units facilitating communication between processor <b>302</b> and storage <b>306</b>, where appropriate. Where appropriate, storage <b>306</b> may include one or more storages <b>306</b>. Although this disclosure describes and illustrates particular storage, particular embodiments may include any suitable storage.</p><p id="p-0059" num="0058">In particular embodiments, I/O interface <b>308</b> includes hardware, software, or both, providing one or more interfaces for communication between agent <b>300</b> and one or more I/O devices. Agent <b>300</b> may include one or more of these I/O devices, where ap-propriate. One or more of these I/O devices may enable communication between a person and agent <b>300</b>. As an example and not by way of limitation, an I/O device may include a keyboard, keypad, microphone, monitor, mouse, printer, scanner, speaker, still camera, stylus, tablet, touch screen, trackball, video camera, another suitable I/O device or a combination of two or more of these. An I/O device may include one or more sensors. Particular embodiments may include any suitable I/O devices and any suitable I/O interfaces <b>308</b> for them. Where appropriate, I/O interface <b>308</b> may include one or more device or software drivers enabling processor <b>302</b> to drive one or more of these I/O devices. I/O interface <b>308</b> may include one or more I/O interfaces <b>308</b>, where appropriate. Although this disclosure describes and illustrates a particular I/O interface, particular embodiments may include any suitable I/O interface. In particular embodiments, I/O interface <b>308</b> may include an interface to a remote network management system.</p><p id="p-0060" num="0059">In particular embodiments, communication interface <b>310</b> includes hardware, software, or both providing one or more interfaces for communication (such as, for example, packet-based communication) between agent <b>300</b> and one or more other agents <b>300</b> or one or more networks. As an example and not by way of limitation, communication interface <b>310</b> may include a network interface controller (NIC) or network adapter for communicating with an Ethernet or other wire-based network or a wireless NIC (WNIC) or wireless adapter for communicating with a wireless network, such as a WI-FI network.</p><p id="p-0061" num="0060">Particular embodiments may include any suitable network and any suitable communication interface <b>310</b> for it. As an example and not by way of limitation, agent <b>300</b> may communicate with an ad hoc network, a personal area network (PAN), a LAN, WAN, MAN, or one or more portions of the Internet or a combination of two or more of these. One or more portions of one or more of these networks may be wired or wireless. As an example, agent <b>300</b> may communicate with a wireless PAN (WPAN) (such as, for example, a BLUETOOTH WPAN), a WI-FI network, a WI-MAX network, a cellular telephone network (such as, for example, a Global System for Mobile Communications (GSM) network, a Long-Term Evolution (LTE) network, or a 5G network), or other suitable wireless network or a combination of two or more of these. Agent <b>300</b> may include any suitable communication interface <b>310</b> for any of these networks, where appropriate. Communication interface <b>310</b> may include one or more communication interfaces <b>310</b>, where appropriate. Although this disclosure describes and illustrates a particular communication interface, particular embodiments may include any suitable communication interface.</p><p id="p-0062" num="0061">In particular embodiments, bus <b>312</b> includes hardware, software, or both coupling com-ponents of agent <b>300</b> to each other. As an example and not by way of limitation, bus <b>312</b> may include an Accelerated Graphics Port (AGP) or other graphics bus, an Enhanced Industry Standard Architecture (EISA) bus, a front-side bus (FSB), a HYPERTRANSPORT (HT) interconnect, an Industry Standard Architecture (ISA) bus, an INFINIBAND interconnect, a low-pin-count (LPC) bus, a memory bus, a Micro Channel Architecture (MCA) bus, a Peripheral Component Interconnect (PCI) bus, a PCI-Express (PCIe) bus, a serial advanced technology attachment (SATA) bus, a Video Electronics Standards Association local (VLB) bus, or another suitable bus or a combination of two or more of these. Bus <b>312</b> may include one or more buses <b>312</b>, where appropriate. Although this disclosure describes and illustrates a particular bus, particular embodiments may include any suitable bus or interconnect.</p><p id="p-0063" num="0062">Herein, a computer-readable non-transitory storage medium or media may include one or more semiconductor-based or other integrated circuits (ICs) (such, as for example, field-programmable gate arrays (FPGAs) or application-specific ICs (ASICs)), hard disk drives (HDDs), hybrid hard drives (HHDs), optical discs, optical disc drives (ODDs), magneto-optical discs, magneto-optical drives, floppy diskettes, floppy disk drives (FDDs), magnetic tapes, solid-state drives (SSDs), RAM-drives, SECURE DIGITAL cards or drives, any other suitable computer-readable non-transitory storage media, or any suitable combination of two or more of these, where appropriate. A computer-readable non-transitory storage medium may be volatile, non-volatile, or a combination of volatile and non-volatile, where appropriate</p><p id="p-0064" num="0063">The following is a more detailed description of security scoring for API endpoints. As described above, when applications use third-party API endpoints, such applications may expose critical information to third-party service providers. By providing a security score for the third-party service providers, such interactions may be prevented should the security score be suboptimal or just plainly poor. Security scores may be provided at the infrastructure level and at the application level.</p><p id="p-0065" num="0000">How to calculate a reputation score for an organization is described in &#x201c;A Deep Dive in Scoring Methodology&#x201d;, B. Sohval, SecurityScorecard.com, 2020. The reputation score is defined as the likelihood of a data breach in such an organization and is calculated by (a) assessing prior data-breaches into (all) organizations and deciding the contributing factors that led to the breach, (b) analyzing which contributing factors can be observed from the outside-in, (c) building an infrastructure that observes all Internet-facing organizations for such observable events, and then finally (d) given the incidence of breaches, provide the score given the contributing weights of each of the sensed events.</p><p id="p-0066" num="0064">Because data breaches change with changing software infrastructure, the events that need to be observed change as well and the individual contribution of each of the sensed events changes. If the observed events are modeled as a vector, then the vector changes over time and the weights of each of the elements in the vector is dynamic. As per Sohval, SecurityScorecard today uses a vector that focusses on network security, domain name system (DNS) health, patching cadence, endpoint security, IP reputation, application security, proprietary information, hacker chatter, information leaks and social engineering&#x2014;all elements that do not require access to the actual application.</p><p id="p-0067" num="0065">Sohval, SecurityScorecard and their competitors are not in the business of scoring endpoints of services, also referred to as API endpoints. As per &#x201c;API security: What You Need to Do to Protect Your APIs&#x201d;, Zumerle et al., Gartner, August 2019, API security is a new attack surface for nefarious actors, and often, misuse of APIs can lead to data breaches. API security is not covered by Sohval, SecurityScorecard and their competitors today for a few simple reasons:</p><p id="p-0068" num="0066">Incidence reports of API security-based data breaches are not readily available, making scoring a challenge. Additionally, API security-based breaches are mostly based on misuse of the application logic, less so on the infrastructure of setting up services on the Internet. This makes automated &#x201c;outside-in&#x201d; gathering of events a challenge and less scalable.</p><p id="p-0069" num="0067">The Open Web Application Security Project (OWASP) publishes top-10 lists of common mistakes made for client and server applications generally for API endpoints specifically. Indeed, many of these issues are application specific and not easily sensed by SecurityScorecard and competitors by simply observing interactions on the network, or by simply setting up a HTTP(s) session with a remote service: it requires intelligent interactions to understand if an API endpoint can be misused. The top-10 issues for API misuse include broken authentication (object, user, function), security misconfigurations, data misuse (excessive data exposure, mass assignment, injection), visibility (assets, logging, monitoring) and resource management.</p><p id="p-0070" num="0068">To provide for an API security score, particular embodiments described herein include a method to gather information about APIs. Whereas Sohval and others simply observe communication, attract traffic with honeypots and sinkholes, and gather other telemetry with sensors operating in the Internet, particular embodiments deploy API endpoint testing agents in the applications. The API testing agents interact with the API endpoint and attempt to misuse it. After breaking an API endpoint, particular embodiments know its deficiencies and may score the API endpoint relative to other API endpoints.</p><p id="p-0071" num="0069">To break an API endpoint, first, an agent may build a model of the API endpoint (e.g., how do applications typically use the API endpoint?), and with the model, the teachings of OWASP API top 10 and API definition available, the agent automatically crafts a set of tests to test the API endpoint. Techniques that may be used for this are included in &#x201c;KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs&#x201d;, Cadar et al., OSDI'08 and &#x201c;Mechanical Phish: Resilient Autonomous Hacking&#x201d;, Shoshitaishvili et al., IEEE Computer and Reliability Societies, IEEE to find issues with the infrastructure of the application, such as: badly formed transport layer security (TLS) certificates, common vulnerabilities and exposures (CVE) issues, cross-site scripting and more. To get insight into the actual behavior of the API endpoint, an agent may rely on the teachings of &#x201c;On Testing Non-testable Programs&#x201d;, Weyuker, 1982, The Computer Journal, Vol 24, No. 4, Wiley Heyden. Weyuker argues one needs to understand the output of test cases at a semantic, i.e., application, level before results can be accepted. Based on this, &#x201c;Automatic Generation of Test Cases for REST APIs: A Specification-Based Approach&#x201d;, H. Ed-douibi et al., 2018 IEEE 22<sup>nd </sup>IEDOCC, IEEE Computer Society, 2018 and &#x201c;RestTestGen: Automated Black-Box Testing of RESTful APIs&#x201d;, E. Viglianisi et al., 2020 IEEE 13<sup>th </sup>ICST, IEEE Computer Society present methods how to transform swagger/OpenAPI Interface Definition Language (IDL) specification into a set of test cases that lead to negative and positive results at the application level. Both authors found implementation issues with publicly available APIs through API guru.</p><p id="p-0072" num="0070">Some embodiments may extend applications that use a particular API endpoint with code to record the interactions to learn &#x201c;normal&#x201d; behavior, combine this with such interactions from other clients, aggregate all those interactions and combine this with test cases generated with techniques described by Ed-douibi and Viglianisi to obtain a model of how a particular API endpoint is used in a normal setting to form the semantic (meta-) model. The recordings may occur in both the application's stage- or run-time phase. The semantic modeling may be continuous as API endpoints change over time.</p><p id="p-0073" num="0071">For each of the categories in the OWASP API top 10, and positive/negative tests with the semantic (meta-) model and the typical use of the API endpoint, some embodiments derive tests that should succeed/fail on the API endpoint. With these tests, an agent may exercise the API endpoint. The test cases may be a separate stage before applications using the API endpoint are deployed or may be used while the application is actually operating. Some care should be taken not to significantly disrupt the application, but it is an effective method to continuously test API endpoints. This method comprises chaos testing using API endpoints for actual (potentially disruptive) testing. With these tests, an agent may formulate an API endpoint security score that is in line with the number of discrepancies between the expected test results and the actual test results (practically, some embodiments may count the number of successful HTTP operations&#x2014;2xx&#x2014;versus 4xx and 5xx responses).</p><p id="p-0074" num="0072">Semantic API endpoint tests may be performed with or without assistance of the provider of the API endpoint. There are three important reasons why the service provider may wish to participate. First, it is in the interest of the provider to show that it provides for a well implemented API endpoint. The provider can advertise this and attract more revenue for its services if it can show that it can withstand intrusion attempts. Second, the client of the service may demand such testing before it will use the API endpoint. Lastly, when the service provider is exposed to the semantic model of their application, they can train their ingress web-application firewall to the learnt model and flag all those calls that deviate from it to trap anomalous or nefarious behavior. Even today, a consuming party engages, mostly manually, with third-party providers to make sure it is not exposing itself to external vulnerabilities. By automating this, API endpoints are more consumable, and all parties are more assured of a proper interaction.</p><p id="p-0075" num="0073">There are cases where the provider of a service does not wish to participate in the testing of its API endpoint, or the provider is simply disinterested in participating. Yet, if a consumer of an API endpoint uses the API endpoint for their services, there is little an API endpoint provider can do to avoid this Black-Box testing.</p><p id="p-0076" num="0074">There are also cases where the provider of a service wishes to participate to the point that they can even enable service testing. This testing then degenerates into Grey-Box fuzzing (see &#x201c;Coverage-based Greybox Fuzzing as Markov Chain&#x201d;, M. Bohme et al., Transaction of Software Engineering, July 2017) or even White-Box testing. In these cases, more detailed and more precise test coverage can be realized, and a more precise semantic-level score can be provided.</p><p id="p-0077" num="0075">With all testing in hand, both at the infrastructure of the application and at the semantic level, two variables may describe the current security state of an API endpoint: the infrastructure application score and the semantic score. These scores may be used by the applications, their developers, chief information security officers, or security personnel to allow or deny calls by policy. Such policies can take into consideration the classification of the data carried and the scores associated with the API endpoints. Agents can be introduced in the calling application that only enable such calls to go through when the combined security score is in alignment with security policies set by the enterprise hosting the application. Because security scores vary over time, application behavior may be affected over time as well.</p><p id="p-0078" num="0076">Herein, &#x201c;or&#x201d; is inclusive and not exclusive, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, &#x201c;A or B&#x201d; means &#x201c;A, B, or both,&#x201d; unless expressly indicated otherwise or indicated otherwise by context. Moreover, &#x201c;and&#x201d; is both joint and several, unless expressly indicated otherwise or indicated otherwise by context. Therefore, herein, &#x201c;A and B&#x201d; means &#x201c;A and B, jointly or severally,&#x201d; unless expressly indicated otherwise or indicated otherwise by context.</p><p id="p-0079" num="0077">The scope of this disclosure encompasses all changes, substitutions, variations, alterations, and modifications to the example embodiments described or illustrated herein that a person having ordinary skill in the art would comprehend. The scope of this disclosure is not limited to the example embodiments described or illustrated herein. Moreover, although this disclosure describes and illustrates respective embodiments herein as including particular components, elements, feature, functions, operations, or steps, any of these embodiments may include any combination or permutation of any of the components, elements, features, functions, operations, or steps described or illustrated anywhere herein that a person having ordinary skill in the art would comprehend. Additionally, although this disclosure describes or illustrates particular embodiments as providing particular advantages, particular embodiments may provide none, some, or all of these advantages.</p><p id="p-0080" num="0078">The embodiments disclosed herein are only examples, and the scope of this disclosure is not limited to them. Particular embodiments may include all, some, or none of the components, elements, features, functions, operations, or steps of the embodiments disclosed herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system, comprising:<claim-text>one or more processors;</claim-text><claim-text>one or more computer-readable non-transitory storage media comprising instructions that, when executed by the one or more processors, cause one or more components of the system to perform operations comprising:</claim-text><claim-text>obtaining an application programming interface (API) specification for an API service;</claim-text><claim-text>performing one or more tests on the API service to determine an amount of deviation between the API service and the API specification; and</claim-text><claim-text>determining a deviation score based on the amount of deviation between the API service and the API specification.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the operations further comprising transmitting the deviation score to a scoring agent.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining the API specification comprises obtaining one or more files containing interface definition language (IDL) specifications for the API service.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more files containing IDL specifications are obtained from the API service.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein obtaining the API specification comprises dynamically constructing an interface definition language (IDL) specification for the API service based on remote procedure calls (RPCs) with the API service.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein dynamically constructing the IDL specification comprises proxying one or more requests and responses between one or more client applications and the API service.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein performing one or more tests on the API service comprises transmitting one or more penetration tests to the API service.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein performing one or more tests on the API service comprises proxying one or more requests and responses between one or more client applications and the API service.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the operations further comprising receiving an indication to disable performing one or more tests on the API service.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein determining the deviation score is further based on the indication to disable performing one or more tests on the API service.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A method comprising:<claim-text>obtaining an application programming interface (API) specification for an API service;</claim-text><claim-text>performing one or more tests on the API service to determine an amount of deviation between the API service and the API specification; and</claim-text><claim-text>determining a deviation score based on the amount of deviation between the API service and the API specification.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising transmitting the deviation score to a scoring agent.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein obtaining the API specification comprises obtaining one or more files containing interface definition language (IDL) specifications for the API service.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the one or more files containing IDL specifications are obtained from the API service.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein obtaining the API specification comprises dynamically constructing an interface definition language (IDL) specification for the API service based on remote procedure calls (RPCs) with the API service.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein dynamically constructing the IDL specification comprises proxying one or more requests and responses between one or more client applications and the API service.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein performing one or more tests on the API service comprises transmitting one or more penetration tests to the API service.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein performing one or more tests on the API service comprises proxying one or more requests and responses between one or more client applications and the API service.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00011">claim 11</claim-ref>, further comprising receiving an indication to disable performing one or more tests on the API service.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein determining the deviation score is further based on the indication to disable performing one or more tests on the API service.</claim-text></claim></claims></us-patent-application>