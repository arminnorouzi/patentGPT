<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004320A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004320</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17711421</doc-number><date>20220401</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>KR</country><doc-number>10-2021-0087795</doc-number><date>20210705</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0655</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0625</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0679</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">METHOD OF MANAGING DEBUGGING LOG IN STORAGE DEVICE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Samsung Electronics Co., Ltd.</orgname><address><city>Suwon-si</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>CHOI</last-name><first-name>Bomi</first-name><address><city>Seoul</city><country>KR</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CHUN</last-name><first-name>Sunghoon</first-name><address><city>Hwaseong-si</city><country>KR</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>KIM</last-name><first-name>Seongyeon</first-name><address><city>Hwaseong-si</city><country>KR</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>EUM</last-name><first-name>Jaeyoung</first-name><address><city>Hwaseong-si</city><country>KR</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Samsung Electronics Co., Ltd.</orgname><role>03</role><address><city>Suwon-si</city><country>KR</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">In a method of managing a debugging log in a storage device, an event trigger signal is generated based on an external power supply voltage and a plurality of configuration control signals. The event trigger signal is activated in response to an event of interest being issued for generating and storing the debugging log. The debugging log represents information associated with errors occurring in the storage device. The debugging log is generated based on the event trigger signal. The debugging log is stored in a nonvolatile memory. The event of interest includes at least one of a power up event a reset event, a link up event, a link down event or a power down event.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="87.88mm" wi="124.04mm" file="US20230004320A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="115.32mm" wi="125.98mm" file="US20230004320A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="175.26mm" wi="151.55mm" file="US20230004320A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="230.55mm" wi="146.64mm" orientation="landscape" file="US20230004320A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="143.00mm" wi="159.68mm" file="US20230004320A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="186.44mm" wi="155.36mm" orientation="landscape" file="US20230004320A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="212.01mm" wi="118.03mm" orientation="landscape" file="US20230004320A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="89.24mm" wi="126.07mm" file="US20230004320A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="230.80mm" wi="147.66mm" orientation="landscape" file="US20230004320A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="68.83mm" wi="125.98mm" file="US20230004320A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="230.80mm" wi="146.81mm" orientation="landscape" file="US20230004320A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="148.51mm" wi="128.35mm" file="US20230004320A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="245.70mm" wi="153.75mm" file="US20230004320A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="139.70mm" wi="146.13mm" file="US20230004320A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="230.89mm" wi="145.80mm" orientation="landscape" file="US20230004320A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="214.38mm" wi="136.74mm" orientation="landscape" file="US20230004320A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="115.23mm" wi="128.10mm" file="US20230004320A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="205.82mm" wi="150.11mm" file="US20230004320A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="218.44mm" wi="157.06mm" file="US20230004320A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="218.44mm" wi="157.14mm" file="US20230004320A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00020" num="00020"><img id="EMI-D00020" he="95.08mm" wi="156.97mm" file="US20230004320A1-20230105-D00020.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00021" num="00021"><img id="EMI-D00021" he="249.51mm" wi="150.20mm" file="US20230004320A1-20230105-D00021.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00022" num="00022"><img id="EMI-D00022" he="135.55mm" wi="126.15mm" file="US20230004320A1-20230105-D00022.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00023" num="00023"><img id="EMI-D00023" he="236.98mm" wi="155.36mm" file="US20230004320A1-20230105-D00023.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">This application claims priority under 35 USC &#xa7; 119 to Korean Patent Application No. 10-2021-0087795 filed on Jul. 5, 2021 in the Korean Intellectual Property Office (KIPO), the contents of which are herein incorporated by reference in their entirety.</p><heading id="h-0002" level="1">BACKGROUND</heading><heading id="h-0003" level="1">1. Technical Field</heading><p id="p-0003" num="0002">Example embodiments relate generally to semiconductor integrated circuits, and more particularly to methods of managing debugging logs in storage devices.</p><heading id="h-0004" level="1">2. Description of the Related Art</heading><p id="p-0004" num="0003">One or more semiconductor memory devices may be used in data storage devices. Examples of such data storage devices include solid state drives (SSDs). These types of data storage devices may have various design and/or performance advantages over hard disk drives (HDDs). Examples of potential advantages include the absence of moving mechanical parts, higher data access speeds, stability, durability, and/or low power consumption. Various systems, e.g., a laptop computer, a car, an airplane, a drone, etc., have adopted the SSDs for data storage.</p><p id="p-0005" num="0004">As technology has developed and the performance of storage devices has increased, the operating speed of the storage devices have increased, and the firmware thereof is configured such that the storage devices include various functions. Such increases in the operating speed or functions may increase the likelihood of operational errors in the storage devices. A separate debugging technique for extracting error information may be used to detect and/or correct such errors. For example, a debugging may be performed using debugging logs collected in the storage devices.</p><heading id="h-0005" level="1">SUMMARY</heading><p id="p-0006" num="0005">At least one example embodiment of the present disclosure provides a method of managing a debugging log in a storage device capable of efficiently generating and storing the debugging log that is information associated with errors occurring in the storage device.</p><p id="p-0007" num="0006">According to example embodiments, in a method of managing a debugging log in a storage device, an event trigger signal is generated, by a storage controller included in the storage device, based on an external power supply voltage and a plurality of configuration control signals. The event trigger signal is activated in response to an event of interest being issued for generating and storing the debugging log. The debugging log represents information associated with errors occurring in the storage device. The debugging log is generated, by the storage controller, based on the event trigger signal. The debugging log is stored in a nonvolatile memory included in the storage device. The event of interest includes at least one of a power up event in which the external power supply voltage is activated, a reset event for initializing the storage controller, a link up event in which a communication establishment between a host device disposed outside the storage device and the storage controller is completed, a link down event in which the communication establishment between the host device and the storage controller is released, or a power down event in which the external power supply voltage is deactivated.</p><p id="p-0008" num="0007">According to example embodiments, in a method of managing a debugging log in a storage device, an event trigger signal is generated, by a storage controller included in the storage device, based on an external power supply voltage and a plurality of configuration control signals. The event trigger signal is activated in response to an event of interest being issued for generating and storing the debugging log. The debugging log represents information associated with errors occurring in the storage device. The debugging log is generated, by the storage controller, based on the event trigger signal. An abnormal event trigger signal is generated, by the storage controller, based on the external power supply voltage and the plurality of configuration control signals. The abnormal event trigger signal is activated in response to the event of interest corresponding to an abnormal event. In response to the event of interest corresponding to the abnormal event, the debugging log is immediately stored in a nonvolatile memory included in the storage device based on the abnormal event trigger signal. In response to the event of interest corresponding to a normal event, the debugging log is temporarily stored in a buffer memory included in the storage device, and then the debugging log is stored in the nonvolatile memory.</p><p id="p-0009" num="0008">According to example embodiments, in a method of managing a debugging log in a storage device, an event trigger signal is generated, by a storage controller included in the storage device, based on an external power supply voltage and a plurality of configuration control signals. The event trigger signal is activated in response to a plurality of events of interest being issued for generating and storing a plurality of debugging logs. The plurality of debugging logs represent information associated with errors occurring in the storage device. The plurality of debugging logs are generated, by the storage controller, based on the event trigger signal. The plurality of debugging logs are stored in a nonvolatile memory included in the storage device. The nonvolatile memory includes a plurality of memory blocks. Two of the plurality of memory blocks are set as a first debugging memory block and a second debugging memory block. The first and second debugging memory blocks are configured to store the plurality of debugging logs. First to M-th debugging logs among the plurality of debugging logs are sequentially stored in the first debugging memory block, where M is a natural number greater than or equal to two. (M+1)-th to 2M-th debugging logs among the plurality of debugging logs are sequentially stored in the second debugging memory block. (2M+1)-th to 3M-th debugging logs among the plurality of debugging logs are sequentially stored in the first debugging memory block after an erase operation is performed on the first debugging memory block.</p><p id="p-0010" num="0009">In the method of managing the debugging log in the storage device according to example embodiments, the situation in which the errors occur intensively and/or frequently may be defined as the event of interest, and the debugging log may be generated, extracted, and stored when the event of interest is issued. Accordingly, data required, or sufficient, for debugging may be efficiently obtained. In an environment where power cycles in which power is turned on/off occur relatively frequently, such as a personal computer, the error analysis may be difficult when the debugging log is lost. When the debugging log is generated, extracted, and stored by monitoring the event of interest according to example embodiments, the log history and the context of errors may be checked even after the power cycles, and thus the error analysis may be efficiently performed.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0006" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0011" num="0010">Illustrative, non-limiting example embodiments will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart illustrating an example of a method of managing a debugging log in a storage device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating a storage device and a storage system including the storage device according to example embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating an example of a storage controller included in a storage device according to example embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating an example of a nonvolatile memory included in a storage device according to example embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram for describing an operation of a storage device according to example embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating an example of storing a debugging log in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram for describing an operation of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating another example of storing a debugging log in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram for describing an operation of <figref idref="DRAWINGS">FIG. <b>9</b></figref>.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart illustrating an example of a method of managing a debugging log in a storage device of <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart illustrating an example of storing a debugging log in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>11</b></figref>.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram for describing an operation of <figref idref="DRAWINGS">FIG. <b>13</b></figref>.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram for describing an operation of a storage device according to example embodiments.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a flowchart illustrating an example of storing a plurality of debugging logs in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>16</b></figref>.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIGS. <b>18</b>A, <b>18</b>B, <b>18</b>C, <b>18</b>D and <b>18</b>E</figref> are diagrams for describing an operation of <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a flowchart illustrating another example of storing a plurality of debugging logs in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>16</b></figref>.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram illustrating an electronic system including a storage device according to example embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0007" level="1">DETAILED DESCRIPTION OF THE EMBODIMENTS</heading><p id="p-0033" num="0032">Various example embodiments will be described more fully with reference to the accompanying drawings, in which embodiments are shown. The present disclosure may, however, be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Like reference numerals refer to like elements throughout this application.</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments.</p><p id="p-0035" num="0034">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a method of managing a debugging log is performed by a storage device that includes a nonvolatile memory and/or a storage controller. The storage device may further include a buffer memory. The storage device operates based on an external power supply voltage and/pr a command that are received from a host device disposed outside the storage device, and exchanges a plurality of configuration control signals and/or data with the host device. Detailed configurations of the storage device and a storage system including the storage device will be described with reference to <figref idref="DRAWINGS">FIGS. <b>3</b>, <b>4</b> and <b>5</b></figref>.</p><p id="p-0036" num="0035">In the method of managing the debugging log in the storage device according to example embodiments, the storage controller generates an event trigger signal based on the external power supply voltage and/or the plurality of configuration (or setup) control signals (step S<b>100</b>). The event trigger signal is activated when an event of interest is issued for generating and/or storing the debugging log.</p><p id="p-0037" num="0036">The debugging log represents information associated with or related to errors (or bugs) occurring in the storage device (or errors occurring between the storage device and the host device). The debugging log may be referred to as debug log or data for debugging. For example, the debugging log may provide useful information about bugs that are difficult to reproduce, such as that errors that occur in a user environment but are difficult to produce in a test environment.</p><p id="p-0038" num="0037">The event of interest represents an event in which the error occurrence in the storage device is concentrated, that is, a situation or environment in which the errors may occur intensively and/or frequently. The event of interest may be referred to as an error concentrated event. For example, the storage controller may monitor whether the event of interest is issued, and may activate the event trigger signal when the event of interest is issued. The monitoring operation will be described with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0039" num="0038">In some example embodiments, the event of interest may include at least one of a power up event in which the external power supply voltage is activated, a reset event for initializing the storage controller, a link up event in which a communication establishment (or setup) between the host device and the storage controller is completed, a link down event in which the communication establishment between the host device and the storage controller is released, and/or a power down event in which the external power supply voltage is deactivated. The event of interest will be described with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0040" num="0039">In some example embodiments, the event of interest may further include a host idle event in which the host device maintains an idle state for more than a predetermined (or alternately given) reference time interval. In some example embodiments, the event of interest may further include a thermal event in which an operating temperature of the storage device increases higher than a predetermined (or alternately given) reference temperature. However, example embodiments are not limited thereto, and the event of interest may further include various events having a relatively high probability of the error occurrence.</p><p id="p-0041" num="0040">The storage controller generates the debugging log based on the event trigger signal (step S<b>200</b>). The debugging log is stored in the nonvolatile memory (step S<b>300</b>). For example, as will be described with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the nonvolatile memory may include a plurality of memory blocks, some of the plurality of memory blocks may be set as a debugging memory block, and the debugging log may be stored in the debugging memory block. Step S<b>300</b> will be described with reference to <figref idref="DRAWINGS">FIGS. <b>7</b> through <b>10</b></figref>.</p><p id="p-0042" num="0041">Although <figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates that one debugging log is generated and stored, example embodiments are not limited thereto. For example, as will be described with reference to <figref idref="DRAWINGS">FIGS. <b>2</b> through <b>16</b></figref>, the debugging log may be continuously and repeatedly generated and stored whenever the event of interest is issued, and thus a plurality of debugging logs may be generated and stored.</p><p id="p-0043" num="0042">In the method of managing the debugging log in the storage device according to example embodiments, the situation in which the errors occur intensively and/or frequently may be defined as the event of interest, and the debugging log may be generated, extracted, and/or stored when the event of interest is issued. Accordingly, data required, or sufficient, for debugging may be efficiently obtained. In an environment where power cycles in which power is turned on/off occur relatively frequently, such as a personal computer (PC), the error analysis may be difficult when the debugging log is lost. When the debugging log is generated, extracted, and/or stored by monitoring the event of interest according to example embodiments, the log history and/or the context of errors may be checked even after the power cycles, and thus the error analysis may be efficiently performed. In some example embodiments, a separate debugging technique may refer to the debugging log to extract error information used to detect and/or correct errors. Accordingly, a debugging technique according to example embodiments may more accurately determine and/or correct errors in a storage device, and integrity of data stored on the storage device may be more effectively maintained.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flowchart illustrating an example of a method of managing a debugging log in a storage device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0045" num="0044">Referring to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref>, when generating the event trigger signal (step S<b>100</b>), the storage controller may monitor the external power supply voltage and the plurality of configuration control signals (step S<b>110</b>). The types of the plurality of configuration control signals will be described with reference to <figref idref="DRAWINGS">FIGS. <b>6</b> and <b>15</b></figref>.</p><p id="p-0046" num="0045">When it is determined, based on a result of the monitoring operation in step S<b>110</b>, that the event of interest is issued (step S<b>120</b>: YES), e.g., when at least one of the power up event, the reset event, the link up event, the link down event, the power down event, the host idle event and/or the thermal event occurs, the event trigger signal may be activated (step S<b>130</b>). For example, the event trigger signal may basically have an inactive state, and may temporarily have an active state only when the event of interest is issued.</p><p id="p-0047" num="0046">When it is determined, based on a result of the monitoring in step S<b>110</b>, that the event of interest is not issued (step S<b>120</b>: NO), the event trigger signal may be deactivated (step S<b>140</b>). For example, the inactive state of the event trigger signal may be maintained.</p><p id="p-0048" num="0047">Based on the activated event trigger signal, the debugging log may be generated (step S<b>200</b>), and the debugging log may be stored in the nonvolatile memory (step S<b>300</b>). After steps S<b>200</b> and S<b>300</b> are performed, the activated event trigger signal may be deactivated.</p><p id="p-0049" num="0048">After it is determined that the event of interest is issued and the debugging log is generated and/or stored (e.g., after steps S<b>130</b>, S<b>200</b> and/or S<b>300</b> are performed), and after it is determined that the event of interest is not issued and the event trigger signal is deactivated (e.g., after step S<b>140</b> is performed), the monitoring operation of step S<b>110</b> may be performed again. In other words, it may be continuously and/or repeatedly monitored whether the event of interests are issued, and thus the plurality of debugging logs may be continuously and repeatedly generated and/or stored whenever the event of interests are issued.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a block diagram illustrating a storage device and a storage system including the storage device according to example embodiments.</p><p id="p-0051" num="0050">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, a storage system <b>100</b> includes a host device <b>200</b> and a storage device <b>300</b>.</p><p id="p-0052" num="0051">The host device <b>200</b> controls overall operations of the storage system <b>100</b>. The host device <b>200</b> may include a host processor <b>210</b> and/or a host memory <b>220</b>.</p><p id="p-0053" num="0052">The host processor <b>210</b> may control an operation of the host device <b>200</b>. For example, the host processor <b>210</b> may execute an operating system (OS). For example, the operating system may include a file system for file management and/or a device driver for controlling peripheral devices including the storage device <b>300</b> at the operating system level. For example, the host processor <b>210</b> may include at least one of various processing units, e.g., a central processing unit (CPU), and/or the like.</p><p id="p-0054" num="0053">The host memory <b>220</b> may store instructions and/or data that are executed and/or processed by the host processor <b>210</b>. For example, the host memory <b>220</b> may include at least one of various volatile memories, e.g., a dynamic random access memory (DRAM), and/or the like.</p><p id="p-0055" num="0054">The storage device <b>300</b> is accessed by the host device <b>200</b>. The storage device <b>300</b> may include a storage controller <b>310</b>, a plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>, and/or a buffer memory <b>330</b>.</p><p id="p-0056" num="0055">The storage controller <b>310</b> may control an operation of the storage device <b>300</b>. For example, the storage controller <b>310</b> may receive an external power supply voltage EPWR from the host device <b>200</b>, may exchange a plurality of configuration control signals CCON with the host device <b>200</b>, and/or may operate based on the external power supply voltage EPWR and/or the plurality of configuration control signals CCON. For example, the storage controller <b>310</b> may control a data write operation and/or a data read operation of the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>based on a command and/or data that are received from the host device <b>200</b>.</p><p id="p-0057" num="0056">The storage controller <b>310</b> may include an event monitoring unit <b>312</b> and/or a debugging log generator <b>314</b>.</p><p id="p-0058" num="0057">The event monitoring unit <b>312</b> may generate at least one trigger signal TRG by monitoring the external power supply voltage EPWR and/or the plurality of configuration control signals CCON. For example, the at least one trigger signal TRG may include the event trigger signal described with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the at least one trigger signal TRG may further include an abnormal event trigger signal, which will be described with reference to <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The debugging log generator <b>314</b> may generate a debugging log DLOG, which represents information associated with errors occurring in the storage device <b>300</b>, based on the at least one trigger signal TRG.</p><p id="p-0059" num="0058">The storage controller <b>310</b> may perform the method of managing the debugging log according to example embodiments described with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. For example, the event monitoring unit <b>312</b> may generate the event trigger signal, which is activated when an event of interest is issued for generating and storing the debugging log DLOG, based on the external power supply voltage EPWR and the plurality of configuration control signals CCON. The debugging log generator <b>314</b> may generate the debugging log DLOG based on the event trigger signal, and may store the debugging log DLOG in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>. In some example embodiments, the debugging log DLOG may be directly provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>. In other example embodiments, the debugging log DLOG may be provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>through the buffer memory <b>330</b>. In addition, the storage controller <b>310</b> may perform a method of managing a debugging log according to example embodiments, which will be described with reference to <figref idref="DRAWINGS">FIGS. <b>11</b>, <b>16</b> and <b>20</b></figref>.</p><p id="p-0060" num="0059">The plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>may store a plurality of data. For example, the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>may store the meta data, various user data, and/or the like, and/or may store the debugging log DLOG.</p><p id="p-0061" num="0060">In some example embodiments, each or one or more of the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>may include a NAND flash memory. In other example embodiments, each or one or more of the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>may include one of an electrically erasable programmable read only memory (EEPROM), a phase change random access memory (PRAM), a resistance random access memory (RRAM), a nano floating gate memory (NFGM), a polymer random access memory (PoRAM), a magnetic random access memory (MRAM), a ferroelectric random access memory (FRAM), and/or the like.</p><p id="p-0062" num="0061">The buffer memory <b>330</b> may store instructions and/or data that are executed and/or processed by the storage controller <b>310</b>, may temporarily store data stored in or to be stored into the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>, and/or may temporarily store the debugging log DLOG. For example, the buffer memory <b>330</b> may include at least one of various volatile memories, e.g., a static random access memory (SRAM), a DRAM, and/or the like.</p><p id="p-0063" num="0062">In some example embodiments, the storage device <b>300</b> may be a solid state drive (SSD). In other example embodiments, the storage device <b>300</b> may be a universal flash storage (UFS), a multi-media card (MMC) and/or an embedded multi-media card (eMMC). Alternatively, the storage device <b>300</b> may be one of a secure digital (SD) card, a micro SD card, a memory stick, a chip card, a universal serial bus (USB) card, a smart card, a compact flash (CF) card, and/or the like.</p><p id="p-0064" num="0063">In some example embodiments, the storage device <b>300</b> may be connected to the host device <b>200</b> via a block accessible interface which may include, for example, a UFS, an eMMC, a serial advanced technology attachment (SATA) bus, a nonvolatile memory express (NVMe) bus, a serial attached SCSI (SAS) bus, and/or the like. The storage device <b>300</b> may use a block accessible address space corresponding to an access size of the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>to provide the block accessible interface to the host device <b>200</b>, for allowing the access by units of a memory block with respect to data stored in the plurality of nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c. </i></p><p id="p-0065" num="0064">In some example embodiments, the storage system <b>100</b> may be any computing system, such as a personal computer (PC), a server computer, a data center, a workstation, a digital television, a set-top box, a navigation system, etc. In other example embodiments, the storage system <b>100</b> may be any mobile system, such as a mobile phone, a smart phone, a tablet computer, a laptop computer, a personal digital assistant (PDA), a portable multimedia player (PMP), a digital camera, a portable game console, a music player, a camcorder, a video player, a navigation device, a wearable device, an internet of things (IoT) device, an internet of everything (IoE) device, an e-book reader, a virtual reality (VR) device, an augmented reality (AR) device, a robotic device, a drone, etc.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram illustrating an example of a storage controller included in a storage device according to example embodiments.</p><p id="p-0067" num="0066">Referring to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a storage controller <b>400</b> may include a processor <b>410</b>, a memory <b>420</b>, a debugging log manager <b>430</b>, a host interface <b>440</b>, an error correction code (ECC) engine <b>450</b>, a memory interface <b>460</b> and/or an advanced encryption standard (AES) engine <b>470</b>.</p><p id="p-0068" num="0067">The processor <b>410</b> may control an operation of the storage controller <b>400</b> in response to a command received via the host interface <b>440</b> from a host device (e.g., the host device <b>200</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>). For example, the processor <b>410</b> may control an operation of a storage device (e.g., the storage device <b>300</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>), and/or may control respective components by employing firmware for operating the storage device.</p><p id="p-0069" num="0068">The memory <b>420</b> may store instructions and data executed and processed by the processor <b>410</b>. For example, the memory <b>420</b> may be implemented with a volatile memory, such as a DRAM, a SRAM, a cache memory, and/or the like.</p><p id="p-0070" num="0069">The debugging log manager <b>430</b> may perform the method of managing the debugging log according to example embodiments, and may include an event monitoring unit (EMON) <b>432</b> and a debugging log generator (DLGEN) <b>434</b>. The event monitoring unit <b>432</b> and the debugging log generator <b>434</b> may be substantially the same as the event monitoring unit <b>312</b> and the debugging log generator <b>314</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, respectively. In some example embodiments, at least a part of the debugging log manager <b>430</b> may be implemented as hardware. For example, at least a part of the debugging log manager <b>430</b> may be included in a computer-based electronic system. In other example embodiments, at least a part of the debugging log manager <b>430</b> may be implemented as instruction codes or program routines (e.g., a software program). For example, the instruction codes or the program routines may be executed by a computer-based electronic system, and may be stored in any storage device located inside and/or outside the computer-based electronic system.</p><p id="p-0071" num="0070">The ECC engine <b>450</b> for error correction may perform coded modulation using a Bose-Chaudhuri-Hocquenghem (BCH) code, a low density parity check (LDPC) code, a turbo code, a Reed-Solomon code, a convolution code, a recursive systematic code (RSC), a trellis-coded modulation (TCM), a block coded modulation (BCM), etc., and/or may perform ECC encoding and ECC decoding using above-described codes and/or other error correction codes.</p><p id="p-0072" num="0071">The host interface <b>440</b> may provide physical connections between the host device and the storage device. The host interface <b>440</b> may provide an interface corresponding to a bus format of the host device for communication between the host device and the storage device. In some example embodiments, the bus format of the host device may be a small computer system interface (SCSI) or a serial attached SCSI (SAS) interface. In other example embodiments, the bus format of the host device may be a USB, a peripheral component interconnect (PCI) express (PCIe), an advanced technology attachment (ATA), a parallel ATA (PATA), a serial ATA (SATA), a nonvolatile memory (NVM) express (NVMe), etc., format.</p><p id="p-0073" num="0072">The memory interface <b>460</b> may exchange data with a nonvolatile memory (e.g., the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>in <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The memory interface <b>460</b> may transfer data to the nonvolatile memory, or may receive data read from the nonvolatile memory. In some example embodiments, the memory interface <b>460</b> may be connected to the nonvolatile memory via one channel. In other example embodiments, the memory interface <b>460</b> may be connected to the nonvolatile memory via two or more channels. For example, the memory interface <b>460</b> may be configured to comply with a standard protocol, such as Toggle and/or open NAND flash interface (ONFI).</p><p id="p-0074" num="0073">The AES engine <b>470</b> may perform at least one of an encryption operation and/or a decryption operation on data input to the storage controller <b>400</b> by using a symmetric-key algorithm. Although not illustrated in detail, the AES engine <b>470</b> may include an encryption module and/or a decryption module. For example, the encryption module and the decryption module may be implemented as separate modules. For another example, one module capable of performing both encryption and decryption operations may be implemented in the AES engine <b>470</b>.</p><p id="p-0075" num="0074"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram illustrating an example of a nonvolatile memory included in a storage device according to example embodiments.</p><p id="p-0076" num="0075">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, a nonvolatile memory <b>500</b> may include a memory cell array <b>510</b>, an address decoder <b>520</b>, a page buffer circuit <b>530</b>, a data I/O circuit <b>540</b>, a voltage generator <b>550</b> and/or a control circuit <b>560</b>.</p><p id="p-0077" num="0076">The memory cell array <b>510</b> may be connected to the address decoder <b>520</b> via a plurality of string selection lines SSL, a plurality of wordlines WL and/or a plurality of ground selection lines GSL. The memory cell array <b>510</b> may be further connected to the page buffer circuit <b>530</b> via a plurality of bitlines BL. The memory cell array <b>510</b> may include a plurality of memory cells (e.g., a plurality of nonvolatile memory cells) that are connected to the plurality of wordlines WL and the plurality of bitlines BL. The memory cell array <b>510</b> may be divided into a plurality of memory blocks BLK<b>1</b>, BLK<b>2</b>, . . . , BLKz each or one or more of which includes memory cells. In addition, each or one or more of the plurality of memory blocks BLK<b>1</b>, BLK<b>2</b>, . . . , BLKz may be divided into a plurality of pages.</p><p id="p-0078" num="0077">In some example embodiments, the plurality of memory cells included in the memory cell array <b>510</b> may be arranged in a two-dimensional (2D) array structure or a three-dimensional (3D) vertical array structure. The 3D vertical array structure may include vertical cell strings that are vertically oriented such that at least one memory cell is located over another memory cell. The at least one memory cell may comprise a charge trap layer. The following patent documents, which are hereby incorporated by reference in their entirety, describe suitable configurations for a memory cell array including a 3D vertical array structure, in which the three-dimensional memory array is configured as a plurality of levels, with wordlines and/or bitlines shared between levels: U.S. Pat. Nos. 7,679,133; 8,553,466; 8,654,587; 8,559,235; and US Pat. Pub. No. 2011/0233648.</p><p id="p-0079" num="0078">In some example embodiments, the plurality of memory cells may include single-level memory cells (SLCs) each or one or more of which stores one data bit, and/or may include multi-level memory cells (MLCs) each or one or more of which stores two or more data bits. Hereinafter, the multi-level memory cell may be used as a term that includes not only a memory cell storing two data bits, but also a memory cell storing three data bits (e.g., a triple level memory cell (TLC)), a memory cell storing four data bits (e.g., a quad level memory cell (QLC)), and/or the like. For example, the multi-level memory cells may be programmed using various program schemes, such as a shadow programming scheme, a reprogramming scheme or an on-chip buffered programming scheme.</p><p id="p-0080" num="0079">The control circuit <b>560</b> may receive a command CMD and/or an address ADDR from an outside (e.g., from the storage controller <b>310</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>), and may control erasure, programming and/or read operations of the nonvolatile memory <b>500</b> based on the command CMD and/or the address ADDR. An erasure operation may include performing a sequence of erase loops, and a program operation may include performing a sequence of program loops. Each or one or more program loop may include a program operation and/or a program verification operation. Each or one or more erase loop may include an erase operation and/or an erase verification operation. The read operation may include a normal read operation and/or data recover read operation.</p><p id="p-0081" num="0080">For example, the control circuit <b>560</b> may generate control signals CON, which are used for controlling the voltage generator <b>550</b>, and/or may generate control signal PBC for controlling the page buffer circuit <b>530</b>, based on the command CMD, and/or may generate a row address R_ADDR and/or a column address C_ADDR based on the address ADDR. The control circuit <b>560</b> may provide the row address R_ADDR to the address decoder <b>520</b> and/or may provide the column address C_ADDR to the data I/O circuit <b>540</b>.</p><p id="p-0082" num="0081">The address decoder <b>520</b> may be connected to the memory cell array <b>510</b> via the plurality of string selection lines SSL, the plurality of wordlines WL and/or the plurality of ground selection lines GSL.</p><p id="p-0083" num="0082">For example, in the data erase/write/read operations, the address decoder <b>520</b> may determine at least one of the plurality of wordlines WL as a selected wordline, and may determine the rest or remainder of the plurality of wordlines WL other than the selected wordline as unselected wordlines, based on the row address R_ADDR.</p><p id="p-0084" num="0083">In addition, in the data erase/write/read operations, the address decoder <b>520</b> may determine at least one of the plurality of string selection lines SSL as a selected string selection line, and may determine the rest or remainder of the plurality of string selection lines SSL other than the selected string selection line as unselected string selection lines, based on the row address R_ADDR.</p><p id="p-0085" num="0084">Further, in the data erase/write/read operations, the address decoder <b>520</b> may determine at least one of the plurality of ground selection lines GSL as a selected ground selection line, and may determine the rest or remainder of the plurality of ground selection lines GSL other than the selected ground selection line as unselected ground selection lines, based on the row address R_ADDR.</p><p id="p-0086" num="0085">The voltage generator <b>550</b> may generate voltages VS that are required, or sufficient, for an operation of the nonvolatile memory <b>500</b> based on a power PWR and/or the control signals CON. The voltages VS may be applied to the plurality of string selection lines SSL, the plurality of wordlines WL and/or the plurality of ground selection lines GSL via the address decoder <b>520</b>. In addition, the voltage generator <b>550</b> may generate an erase voltage VERS that is required, or sufficient, for the data erase operation based on the power PWR and/or the control signals CON. The erase voltage VERS may be applied to the memory cell array <b>510</b> directly and/or via the bitline BL.</p><p id="p-0087" num="0086">For example, during the erase operation, the voltage generator <b>550</b> may apply the erase voltage VERS to a common source line and/or the bitline BL of a memory block (e.g., a selected memory block) and may apply an erase permission voltage (e.g., a ground voltage) to all, or one or more, wordlines of the memory block or a portion of the wordlines via the address decoder <b>520</b>. In addition, during the erase verification operation, the voltage generator <b>550</b> may apply an erase verification voltage simultaneously to all, or one or more, wordlines of the memory block or sequentially to the wordlines one by one.</p><p id="p-0088" num="0087">For example, during the program operation, the voltage generator <b>550</b> may apply a program voltage to the selected wordline and may apply a program pass voltage to the unselected wordlines via the address decoder <b>520</b>. In addition, during the program verification operation, the voltage generator <b>550</b> may apply a program verification voltage to the selected wordline and may apply a verification pass voltage to the unselected wordlines via the address decoder <b>520</b>.</p><p id="p-0089" num="0088">In addition, during the normal read operation, the voltage generator <b>550</b> may apply a read voltage to the selected wordline and may apply a read pass voltage to the unselected wordlines via the address decoder <b>520</b>. During the data recover read operation, the voltage generator <b>550</b> may apply the read voltage to a wordline adjacent to the selected wordline and may apply a recover read voltage to the selected wordline via the address decoder <b>520</b>.</p><p id="p-0090" num="0089">The page buffer circuit <b>530</b> may be connected to the memory cell array <b>510</b> via the plurality of bitlines BL. The page buffer circuit <b>530</b> may include a plurality of page buffers. In some example embodiments, each or one or more page buffer may be connected to one bitline. In other example embodiments, each or one or more page buffer may be connected to two or more bitlines.</p><p id="p-0091" num="0090">The page buffer circuit <b>530</b> may store data DAT to be programmed into the memory cell array <b>510</b> and/or may read data DAT sensed from the memory cell array <b>510</b>. In other words, the page buffer circuit <b>530</b> may operate as a write driver and/or a sensing amplifier according to an operation mode of the nonvolatile memory <b>500</b>.</p><p id="p-0092" num="0091">The data I/O circuit <b>540</b> may be connected to the page buffer circuit <b>530</b> via data lines DL. The data I/O circuit <b>540</b> may provide the data DAT from the outside of the nonvolatile memory <b>500</b> to the memory cell array <b>510</b> via the page buffer circuit <b>530</b> and/or may provide the data DAT from the memory cell array <b>510</b> to the outside of the nonvolatile memory <b>500</b>, based on the column address C_ADDR.</p><p id="p-0093" num="0092">Although the nonvolatile memory according to example embodiments is described based on a NAND flash memory, the nonvolatile memory according to example embodiments may be any nonvolatile memory, e.g., a PRAM, a RRAM, a NFGM, a PoRAM, a MRAM, a FRAM, and/or the like.</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram for describing an operation of a storage device according to example embodiments.</p><p id="p-0095" num="0094">Referring to <figref idref="DRAWINGS">FIGS. <b>3</b> and <b>6</b></figref>, an example of the event of interest is illustrated when an interface between the host device <b>200</b> and the storage device <b>300</b> is formed based on PCIe.</p><p id="p-0096" num="0095">As described with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the storage device <b>300</b> may receive the external power supply voltage EPWR from the host device <b>200</b>, and/or may exchange the plurality of configuration control signals CCON with the host device <b>200</b>.</p><p id="p-0097" num="0096">In some example embodiments, the plurality of configuration control signals CCON may include a reset signal PERST# and/or a link signal PCIe_LINK. For example, the reset signal PERST# may be a signal provided from the host device <b>200</b> to the storage device <b>300</b>, and may be referred to as a PCIe reset signal. For example, the host device <b>200</b> and the storage device <b>300</b> may be connected to each other through a physical connection, which is referred to as a link, and may exchange data through the link. The link signal PCIe_LINK may be a signal representing whether such connection between the host device <b>200</b> and the storage device <b>300</b> through the link is completed, e.g., whether the communication establishment between the host device <b>200</b> and the storage controller <b>310</b> is completed.</p><p id="p-0098" num="0097">Hereinafter, the event of interest issued in the storage device according to example embodiments will be described with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0099" num="0098">In an initial operation time, at a time point ts<b>1</b>, the external power supply voltage EPWR may be activated, and thus power may start to be supplied to the storage device <b>300</b> (e.g., to the storage controller <b>310</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>). The time point is 1 may correspond to the power up event, and it may be determined that the power up event is issued by detecting the activation of the external power supply voltage EPWR.</p><p id="p-0100" num="0099">After that, at a time point ts<b>2</b>, the reset signal PERST# may be activated (e.g., de-assertion), and thus the storage controller <b>310</b> included in the storage device <b>300</b> may be initialized and/or reset. For example, the reset signal PERST# may be used to represent when the power supply is stable and/or is within a predetermined (or alternately given) voltage tolerance, and a status system and/or other logics in the storage controller <b>310</b> may be initialized after the power supply is stabilized. The time point ts<b>2</b> may correspond to the reset event, the reset signal PERST# may be associated with the reset event, and/or it may be determined that the reset event is issued by detecting the activation of the reset signal PERST#.</p><p id="p-0101" num="0100">After that, at a time point ts<b>3</b>, the link signal PCIe_LINK may be activated, and thus the communication establishment between the host device <b>200</b> and the storage device <b>300</b> (e.g., the storage controller <b>310</b>) may be completed (e.g., link-up). When the communication establishment is completed, the host device <b>200</b> and the storage device <b>300</b> (e.g., the storage controller <b>310</b>) may be in a state in which data can be exchanged. The time point ts<b>3</b> may correspond to the link up event, and it may be determined that the link up event is issued by detecting the activation of the link signal PCIe_LINK.</p><p id="p-0102" num="0101">After the time points is 1, ts<b>2</b> and/or ts<b>3</b> have elapsed, the storage device <b>300</b> may normally operate.</p><p id="p-0103" num="0102">After that, at a time point te<b>1</b>, the link signal PCIe_LINK may be deactivated, and thus the communication establishment between the host device <b>200</b> and the storage device <b>300</b> (e.g., the storage controller <b>310</b>) may be released, blocked and/or terminated (e.g., link-down). When the communication establishment is released, the host device <b>200</b> and the storage device <b>300</b> (e.g., the storage controller <b>310</b>) may be in a state in which data cannot be exchanged. The time point te<b>1</b> may correspond to the link down event, and it may be determined that the link down event is issued by detecting the deactivation of the link signal PCIe_LINK.</p><p id="p-0104" num="0103">After that, at a time point te<b>2</b>, the reset signal PERST# may be deactivated. After that, at a time point te<b>3</b>, the external power supply voltage EPWR may be deactivated, and thus the power supply to the storage device <b>300</b> (e.g., to the storage controller <b>310</b>) may be blocked. The time point te<b>3</b> may correspond to the power down event, and it may be determined that the power down event is issued by detecting the deactivation of the external power supply voltage EPWR.</p><p id="p-0105" num="0104">In a personal computer environment, particularly, in a laptop environment, the low power may be an important requirement, or feature, and thus a power management (PM) function may be implemented. Recently, an ultra power saving mode may be requested, and thus a PM operation may become more complicated and related errors may occur frequently. Therefore, as illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the power up event, the reset event, the link up event, the link down event and/or the power down event by the power cycle and/or the PM operation may be defined as the events of interest according to example embodiments.</p><p id="p-0106" num="0105">Although <figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates that the external power supply voltage EPWR is deactivated after the link signal PCIe_LINK is deactivated, e.g., the link down event and the power down event are sequentially issued, example embodiments are not limited thereto. For example, the external power supply voltage EPWR may maintain an active state even after the link down event is issued, and then the link up event may be issued again. For another example, in a sudden power off (SPO) situation, the link down event and the power down event may be substantially simultaneously issued.</p><p id="p-0107" num="0106">In some example embodiments, the event of interest may further include the host idle event. There may be a high probability that an unintended error occurs in the host device <b>200</b> when the idle state of the host device <b>200</b> continues, and thus the debugging log may be generated and stored before a timeout for an I/O command (IO command) of the operating system of the host device <b>200</b>.</p><p id="p-0108" num="0107">In some example embodiments, the event of interest may further include the thermal event. There may be a high probability that an unintended error occurs in the storage device <b>300</b> when the operating temperature of the storage device <b>300</b> increases higher than the reference temperature, and thus the debugging log may be generated and stored while the performance of the storage device <b>300</b> decreases for reducing the heat generation of the storage device <b>300</b>. For example, although not illustrated in detail, the storage device <b>300</b> may further include a temperature sensor that detects the operating temperature.</p><p id="p-0109" num="0108">In some example embodiments, the event of interest may be predetermined (or alternately given) at a designing phase and/or manufacturing process of the storage device <b>300</b>. In some example embodiments, the event of interest may be additionally set when the number of errors due to specific operations increases while the storage device <b>300</b> is operating.</p><p id="p-0110" num="0109"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flowchart illustrating an example of storing a debugging log in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. <figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram for describing an operation of <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0111" num="0110">Referring to <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>7</b> and <b>8</b></figref>, before step S<b>300</b> is performed, the storage controller <b>310</b> (e.g., the event monitoring unit <b>312</b>) may generate the event trigger signal ETRG, which is activated when the event of interest is issued. In addition, the storage controller <b>310</b> (e.g., the debugging log generator <b>314</b>) may generate the debugging log DLOG based on the event trigger signal ETRG.</p><p id="p-0112" num="0111">When storing the debugging log in the nonvolatile memory (step S<b>300</b>), the debugging log DLOG may be temporarily stored in the buffer memory <b>330</b> by providing the debugging log DLOG that is generated by the storage controller <b>310</b> to the buffer memory <b>330</b> (step S<b>310</b>). The debugging log DLOG may be stored in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>by providing the debugging log DLOG that is temporarily stored in the buffer memory <b>330</b> to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>(step S<b>320</b>). For example, during a periodic background operation and/or flush operation while the storage device <b>300</b> is normally operating, the debugging log DLOG may be transmitted from the buffer memory <b>330</b> to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>. For example, the debugging log DLOG may be stored in a debugging memory block included in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c. </i></p><p id="p-0113" num="0112">In some example embodiments, the debugging memory block may include multi-level memory cells each or one or more of which stores two or more data bits. When the debugging log DLOG is temporarily stored in the buffer memory <b>330</b> and then stored in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>as in the example of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the debugging log DLOG may be stored in the debugging memory block including the multi-level memory cells. However, example embodiments are not limited thereto, and the debugging memory block may include single-level memory cells each or one or more of which stores one data bit and/or the debugging log DLOG may be stored in the debugging memory block including the single-level memory cells.</p><p id="p-0114" num="0113"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating another example of storing a debugging log in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. <figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram for describing an operation of <figref idref="DRAWINGS">FIG. <b>9</b></figref>. The descriptions repeated with <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> will be omitted.</p><p id="p-0115" num="0114">Referring to <figref idref="DRAWINGS">FIGS. <b>1</b>, <b>9</b> and <b>10</b></figref>, when storing the debugging log in the nonvolatile memory (step S<b>300</b>), the debugging log DLOG may be directly stored in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>by directly providing the debugging log DLOG that is generated by the storage controller <b>310</b> to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>(step S<b>330</b>). For example, when a sudden power off situation occurs on the storage device <b>300</b>, the debugging log DLOG may be directly transmitted to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>without passing through the buffer memory <b>330</b>. For example, the debugging log DLOG may be stored in a debugging memory block included in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c. </i></p><p id="p-0116" num="0115">In some example embodiments, the debugging memory block may include single-level memory cells each or one or more of which stores one data bit. When the debugging log DLOG is directly stored in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>as in the example of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the debugging log DLOG may be stored in the debugging memory block including the single-level memory cells. However, example embodiments are not limited thereto, and the debugging memory block may include multi-level memory cells each or one or more of which stores two or more data bits and the debugging log DLOG may be stored in the debugging memory block including the multi-level memory cells.</p><p id="p-0117" num="0116"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments. The descriptions repeated with <figref idref="DRAWINGS">FIG. <b>1</b></figref> will be omitted.</p><p id="p-0118" num="0117">Referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, in a method of managing a debugging log in a storage device according to example embodiments, steps S<b>100</b> and/or S<b>200</b> may be substantially the same as steps S<b>100</b> and S<b>200</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, respectively.</p><p id="p-0119" num="0118">The storage controller generates an abnormal event trigger signal based on the external power supply voltage and the plurality of configuration control signals (step S<b>400</b>). The abnormal event trigger signal is activated when the event of interest corresponds to an abnormal event. For example, as with step S<b>100</b>, the storage controller may monitor whether the event of interest corresponds to the abnormal event, and may activate the abnormal event trigger signal when the event of interest corresponds to the abnormal event.</p><p id="p-0120" num="0119">The debugging log is stored in the nonvolatile memory based on the abnormal event trigger signal (step S<b>300</b><i>a</i>). Step S<b>300</b><i>a </i>may be similar to step S<b>300</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, and an operation of storing the debugging log in the nonvolatile memory may be changed depending on whether the abnormal event trigger signal is activated. Step S<b>300</b><i>a </i>will be described with reference to <figref idref="DRAWINGS">FIGS. <b>13</b> and <b>14</b></figref>.</p><p id="p-0121" num="0120"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart illustrating an example of a method of managing a debugging log in a storage device of <figref idref="DRAWINGS">FIG. <b>11</b></figref>. The descriptions repeated with <figref idref="DRAWINGS">FIG. <b>2</b></figref> will be omitted.</p><p id="p-0122" num="0121">Referring to <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref>, steps S<b>110</b>, S<b>120</b>, S<b>130</b>, S<b>140</b> and/or S<b>200</b> may be substantially the same as steps S<b>110</b>, S<b>120</b>, S<b>130</b>, S<b>140</b> and S<b>200</b> in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, respectively.</p><p id="p-0123" num="0122">When generating the abnormal event trigger signal (step S<b>400</b>), when it is determined, based on the result of the monitoring operation in step S<b>110</b>, that the event of interest corresponds to the abnormal event (step S<b>410</b>: YES), the abnormal event trigger signal may be activated (step S<b>420</b>). For example, as with the event trigger signal, the abnormal event trigger signal may basically have an inactive state, and may temporarily have an active state only when the event of interest corresponds to the abnormal event.</p><p id="p-0124" num="0123">When it is determined, based on the result of the monitoring operation in step S<b>110</b>, that the event of interest does not correspond to the abnormal event (step S<b>410</b>: NO), e.g., when it is determined that the event of interest corresponds to a normal event, the abnormal event trigger signal may be deactivated (step S<b>430</b>). For example, the inactive state of the abnormal event trigger signal may be maintained.</p><p id="p-0125" num="0124">The debugging log may be stored in the nonvolatile memory based on the abnormal event trigger signal that is activated or deactivated (step S<b>300</b><i>a</i>). After step S<b>300</b><i>a </i>is performed, the activated event trigger signal and/or the activated abnormal event trigger signal may be deactivated.</p><p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart illustrating an example of storing a debugging log in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>11</b></figref>. <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram for describing an operation of <figref idref="DRAWINGS">FIG. <b>13</b></figref>. The descriptions repeated with <figref idref="DRAWINGS">FIGS. <b>7</b>, <b>8</b>, <b>9</b> and <b>10</b></figref> will be omitted.</p><p id="p-0127" num="0126">Referring to <figref idref="DRAWINGS">FIGS. <b>11</b>, <b>13</b> and <b>14</b></figref>, before step S<b>300</b><i>a </i>is performed, the storage controller <b>310</b> (e.g., the event monitoring unit <b>312</b>) may generate the event trigger signal ETRG, which is activated when the event of interest is issued, and may generate an abnormal event trigger signal AETRG, which is activated when the event of interest corresponds to the abnormal event. In addition, the storage controller <b>310</b> (e.g., the debugging log generator <b>314</b>) may generate the debugging log DLOG based on the event trigger signal ETRG.</p><p id="p-0128" num="0127">When storing the debugging log in the nonvolatile memory based on the abnormal event trigger signal (step S<b>300</b><i>a</i>), step S<b>340</b> may be substantially the same as step S<b>410</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref>, and step S<b>340</b> may be omitted when step S<b>410</b> in <figref idref="DRAWINGS">FIG. <b>12</b></figref> is performed.</p><p id="p-0129" num="0128">When it is determined that the event of interest corresponds to the abnormal event (step S<b>410</b>: YES), e.g., when the abnormal event trigger signal AETRG is activated, the storage controller <b>310</b> may immediately store the debugging log DLOG in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>based on the abnormal event trigger signal AETRG (step S<b>350</b>). In other words, when it is determined that the abnormal event is issued, the debugging log DLOG may be immediately updated to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>to reduce or prevent the loss of the debugging log DLOG. For example, as described with reference to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the debugging log DLOG may be directly provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>. For another example, as described with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the debugging log DLOG may be provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and <b>320</b><i>c </i>through the buffer memory <b>330</b>.</p><p id="p-0130" num="0129">When it is determined that the event of interest corresponds to the normal event (step S<b>410</b>: NO), e.g., when the abnormal event trigger signal AETRG is deactivated, the debugging log DLOG may be temporarily stored in the buffer memory <b>330</b> and then may be stored in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>(step S<b>360</b>). In other words, when it is determined that the normal event is issued, the debugging log DLOG may be updated to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>only at a predetermined (or alternately given) update timing, and thus the performance degradation and wear-out of the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c </i>due to the frequent updates may be reduced or prevented. For example, step S<b>360</b> may include steps S<b>310</b> and/or S<b>320</b> in <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0131" num="0130"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram for describing an operation of a storage device according to example embodiments. The descriptions repeated with <figref idref="DRAWINGS">FIG. <b>6</b></figref> will be omitted.</p><p id="p-0132" num="0131">Referring to <figref idref="DRAWINGS">FIGS. <b>14</b> and <b>15</b></figref>, an example of the event of interest and an example of determining whether the event of interest corresponds to the abnormal event are illustrated when an interface between the host device <b>200</b> and the storage device <b>300</b> is formed based on PCIe.</p><p id="p-0133" num="0132">In some example embodiments, the plurality of configuration control signals CCON may include the reset signal PERST# and the link signal PCIe_LINK, and may further include a controller configuration enable signal CC_EN and a controller status ready signal CSTS_RDY. For example, the controller configuration enable signal CC_EN may be a signal provided from the host device <b>200</b> to the storage device <b>300</b>, and may represent the setting completion for the storage controller <b>310</b>. For example, the controller status ready signal CSTS_RDY may be a signal provided from the storage device <b>300</b> to the host device <b>200</b>, and may represent the preparation completion of the storage controller <b>310</b>.</p><p id="p-0134" num="0133">Hereinafter, the operation of determining whether the event of interest issued in the storage device according to example embodiments corresponds to the abnormal event will be described with reference to <figref idref="DRAWINGS">FIG. <b>15</b></figref>.</p><p id="p-0135" num="0134">The time points ts<b>1</b>, ts<b>2</b>, ts<b>3</b>, te<b>1</b> and te<b>2</b> may be substantially the same as those described with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>. At a time point ts<b>4</b>, the host device <b>200</b> may activate the controller configuration enable signal CC_EN. At a time point ts<b>5</b>, the storage controller <b>310</b> may activate the controller status ready signal CSTS_RDY.</p><p id="p-0136" num="0135">In some example embodiments, when a time interval T<b>1</b> between a first time point ts<b>2</b> and a second time point ts<b>3</b> is greater than a predetermined (or alternately given) first reference value, it may be determined that the event of interest corresponds to the abnormal event. The first time point ts<b>2</b> may represent a time point at which the reset signal PERST# is activated, and the second time point ts<b>3</b> may represent a time point at which the communication establishment between the host device <b>200</b> and the storage device <b>300</b> (e.g., the storage controller <b>310</b>) is completed. For example, the host device <b>200</b> may perform a reset release, and then the storage device <b>300</b> may enable a link training and status state machine (LTSSM) and may perform a linkup. Thus, a time interval (e.g., the time interval T<b>1</b>) required, or sufficient, from the reset release to the link up may be checked, and it may be determined that the abnormal event is issued when the time interval T<b>1</b> is greater than the first reference value. For example, the debugging log DLOG may include information associated with the LTSSM.</p><p id="p-0137" num="0136">In some example embodiments, when a time interval T<b>2</b> between a third time point ts<b>4</b> and a fourth time point ts<b>5</b> is greater than a predetermined (or alternately given) second reference value, it may be determined that the event of interest corresponds to the abnormal event. The third time point ts<b>4</b> may represent a time point at which the controller configuration enable signal CC_EN is activated, and the fourth time point ts<b>5</b> may represent a time point at which the controller status ready signal CSTS_RDY is activated.</p><p id="p-0138" num="0137">In some example embodiments, when a time interval T<b>3</b> between a fifth time point te<b>1</b> and a sixth time point te<b>2</b> is greater than a predetermined (or alternately given) third reference value, it may be determined that the event of interest corresponds to the abnormal event. The fifth time point te<b>1</b> may represent a time point at which the communication establishment between the host device <b>200</b> and the storage device <b>300</b> (e.g., the storage controller <b>310</b>) is released, and the sixth time point te<b>2</b> may represent a time point at which the reset signal PERST# is deactivated.</p><p id="p-0139" num="0138">However, example embodiments are not limited thereto. For example, the abnormal event may further include a case in which the power up and/or the reset are not completed within a predetermined (or alternately given) time interval, a case in which an abnormal link up and/or an abnormal link down occur, a case in which the idle state of the host device <b>200</b> continues for more than the reference time interval, a case in which the operating temperature of the storage device <b>300</b> is maintained higher than the reference temperature for more than a predetermined (or alternately given) time interval after the operating temperature increases higher than the reference temperature, etc.</p><p id="p-0140" num="0139"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments. The descriptions repeated with <figref idref="DRAWINGS">FIG. <b>1</b></figref> will be omitted.</p><p id="p-0141" num="0140">Referring to <figref idref="DRAWINGS">FIG. <b>16</b></figref>, in a method of managing a debugging log in a storage device according to example embodiments, the storage controller generates the event trigger signal based on the external power supply voltage and/or the plurality of configuration control signals (step S<b>100</b><i>b</i>). The event trigger signal is activated when a plurality of events of interest are issued for generating and/or storing a plurality of debugging logs. The storage controller generates the plurality of debugging logs based on the event trigger signal (step S<b>200</b><i>b</i>). The plurality of debugging logs are stored in the nonvolatile memory (step S<b>300</b><i>b</i>). For example, when the plurality of events of interest are sequentially issued, the plurality of debugging logs corresponding thereto may be sequentially generated and/or stored.</p><p id="p-0142" num="0141">Steps S<b>100</b><i>b</i>, S<b>200</b><i>b </i>and/or S<b>300</b><i>b </i>may be similar to steps S<b>100</b>, S<b>200</b> and S<b>300</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, respectively. The example of <figref idref="DRAWINGS">FIG. <b>16</b></figref> may be substantially the same as the example of <figref idref="DRAWINGS">FIG. <b>1</b></figref>, except that the plurality of events of interest are issued and the plurality of debugging logs are generated and/or stored. In the example of <figref idref="DRAWINGS">FIG. <b>16</b></figref>, an operation of generating and/or storing one debugging log based on the event trigger signal when one event of interest is issued may be substantially the same as that described with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In addition, an operation of detecting the plurality of events of interest and/or an operation of generating and/or storing the plurality of debugging logs may be implemented by continuously and/or repeatedly performing the monitoring operation as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0143" num="0142">In some example embodiments, as described with reference to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, an operation of generating the abnormal event trigger signal, which is activated when the plurality of events of interest correspond to the abnormal event, may be added to the example of <figref idref="DRAWINGS">FIG. <b>16</b></figref>. In this example, an operation of determining whether one event of interest corresponds to the abnormal event may be substantially the same as that described with reference to <figref idref="DRAWINGS">FIGS. <b>11</b> and <b>12</b></figref>.</p><p id="p-0144" num="0143"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a flowchart illustrating an example of storing a plurality of debugging logs in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>16</b></figref>.</p><p id="p-0145" num="0144">Referring to <figref idref="DRAWINGS">FIGS. <b>16</b> and <b>17</b></figref>, when storing the plurality of debugging logs in the nonvolatile memory (step S<b>300</b><i>b</i>), the nonvolatile memory may include a plurality of memory blocks, as described with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>. In addition, two or more of the plurality of memory blocks may be set as a debugging memory block that stores the plurality of debugging logs, and the plurality of debugging logs may be sequentially stored in two or more debugging memory blocks.</p><p id="p-0146" num="0145">In an initial operation time, all, or one or more, of the debugging memory blocks may be empty. Thus, one empty debugging memory block may be selected, and some of the plurality of debugging logs may be sequentially stored in the selected debugging memory block (step S<b>371</b>).</p><p id="p-0147" num="0146">When all pages of the selected debugging memory block are not programmed (step S<b>373</b>: NO), step S<b>371</b> may be performed on the selected debugging memory block until all pages of the selected debugging memory block are programmed.</p><p id="p-0148" num="0147">When all pages of the selected debugging memory block are programmed (step S<b>373</b>: YES), and when at least one another empty debugging memory block exists (step S<b>375</b>: YES), another empty debugging memory block may be selected, and steps S<b>371</b> and S<b>373</b> may be performed on the selected debugging memory block.</p><p id="p-0149" num="0148">When all the debugging memory blocks are used and there is no empty debugging memory block (step S<b>375</b>: NO), the debugging memory block that is earliest (or oldest) programmed (e.g., the debugging memory block firstly selected in step S<b>371</b>) may be selected, and an erase operation is performed on the selected debugging memory block (step S<b>377</b>). Some of the plurality of debugging logs may be sequentially stored in the erased debugging memory block (step S<b>379</b>). Step S<b>379</b> may be substantially the same as step S<b>371</b>.</p><p id="p-0150" num="0149">When all pages of the erased debugging memory block are not programmed (step S<b>381</b>: NO), step S<b>379</b> may be performed on the erased debugging memory block until all pages of the erased debugging memory block are programmed Step S<b>381</b> may be substantially the same as step S<b>373</b>.</p><p id="p-0151" num="0150">When all pages of the erased debugging memory block are programmed (step S<b>381</b>: YES), the debugging memory block that is earliest programmed at a current time point may be selected, and steps S<b>377</b>, S<b>379</b> and S<b>381</b> may be performed on the selected debugging memory block.</p><p id="p-0152" num="0151">When only one debugging memory block is used, the debugging log that is actually necessary may be lost if it is stored in the last page, because of the characteristics of the erase operation of the NAND flash memory in which the erase operation is performed by units of memory block. In contrast, when two or more debugging memory blocks are assigned or allocated as described above, the loss of the debugging log that is actually necessary may be reduced or prevented. Accordingly, a debugging technique according to example embodiments may more accurately determine and/or correct errors in a storage device, and integrity of data stored on the storage device may be more effectively maintained.</p><p id="p-0153" num="0152"><figref idref="DRAWINGS">FIGS. <b>18</b>A, <b>18</b>B, <b>18</b>C, <b>18</b>D and <b>18</b>E</figref> are diagrams for describing an operation of <figref idref="DRAWINGS">FIG. <b>17</b></figref>.</p><p id="p-0154" num="0153">Referring to <figref idref="DRAWINGS">FIGS. <b>18</b>A, <b>18</b>B, <b>18</b>C, <b>18</b>D and <b>18</b>E</figref>, an example in which two debugging memory blocks BLK<b>1</b> and BLK<b>2</b> are used is illustrated. The debugging memory blocks BLK<b>1</b> and/or BLK<b>2</b> may be included in the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c. </i></p><p id="p-0155" num="0154">As illustrated in <figref idref="DRAWINGS">FIG. <b>18</b>A</figref>, the first debugging memory block BLK<b>1</b> may include M pages PG<b>1</b>-<b>1</b>, PG<b>1</b>-<b>2</b>, . . . , PG<b>1</b>-M, where M is a natural number greater than or equal to two, and the second debugging memory block BLK<b>2</b> may also include M pages PG<b>2</b>-<b>1</b>, PG<b>2</b>-<b>2</b>, . . . , PG<b>2</b>-M. In an initial operation time, both the first and second debugging memory blocks BLK<b>1</b> and BLK<b>2</b> may not store debugging logs and may be empty.</p><p id="p-0156" num="0155">As illustrated in <figref idref="DRAWINGS">FIG. <b>18</b>B</figref>, first to M-th events of interest may be sequentially issued, and first to M-th debugging logs DLOG_<b>1</b> to DLOG_M may be sequentially generated and provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and <b>320</b><i>c</i>. The first debugging memory block BLK<b>1</b> may be selected from among the first and second debugging memory blocks BLK<b>1</b> and BLK<b>2</b> that are empty, and the first to M-th debugging logs DLOG_<b>1</b> to DLOG_M may be sequentially stored in the pages PG<b>1</b>-<b>1</b> to PG<b>1</b>-M included in the first debugging memory block BLK<b>1</b>. Although <figref idref="DRAWINGS">FIG. <b>18</b></figref> and subsequent figures illustrate that one debugging log is stored in one page, example embodiments are not limited thereto. When up to the M-th debugging log DLOG_M is stored, all pages PG<b>1</b>-<b>1</b> to PG<b>1</b>-M in the first debugging memory block BLK<b>1</b> may be programmed.</p><p id="p-0157" num="0156">After that, as illustrated in <figref idref="DRAWINGS">FIG. <b>18</b>C</figref>, (M+1)-th to 2M-th events of interest may be sequentially issued, and (M+1)-th to 2M-th debugging logs DLOG_(M+1) to DLOG_2M may be sequentially generated and provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>. The second debugging memory block BLK<b>2</b> that is empty may be selected, and the (M+1)-th to 2M-th debugging logs DLOG_(M+1) to DLOG_2M may be sequentially stored in the pages PG<b>2</b>-<b>1</b> to PG<b>2</b>-M included in the second debugging memory block BLK<b>2</b>. When up to the 2M-th debugging log DLOG_<b>2</b>M is stored, all pages PG<b>2</b>-<b>1</b> to PG<b>2</b>-M in the second debugging memory block BLK<b>2</b> may be programmed.</p><p id="p-0158" num="0157">After that, as illustrated in <figref idref="DRAWINGS">FIG. <b>18</b>D</figref>, (2M+1)-th to 3M-th events of interest may be sequentially issued, and (2M+1)-th to 3M-th debugging logs DLOG_(2M+1) to DLOG_<b>3</b>M may be sequentially generated and provided to the nonvolatile memories <b>320</b><i>a</i>, <b>320</b><i>b </i>and/or <b>320</b><i>c</i>. Since there is no empty debugging memory block, the first debugging memory block BLK<b>1</b> that is programmed earlier may be selected from among the first and second debugging memory blocks BLK<b>1</b> and BLK<b>2</b>, and the erase operation may be performed on the first debugging memory block BLK<b>1</b>.</p><p id="p-0159" num="0158">After that, as illustrated in <figref idref="DRAWINGS">FIG. <b>18</b>E</figref>, the (2M+1) to 3M debugging logs DLOG_(2M+1) to DLOG_<b>3</b>M may be sequentially stored in the pages PG<b>1</b>-<b>1</b> to PG<b>1</b>-M included the first debugging memory block BLK<b>1</b> that is erased.</p><p id="p-0160" num="0159">When only one debugging memory block is used, and when up to the (2M+1)-th debugging log DLOG_(2M+1) is stored but the 2M-th debugging log DLOG_2M is necessary, the 2M-th debugging log DLOG_2M may be lost due to the erase operation and may not be obtained. In contrast, when two (or more) debugging memory blocks BLK<b>1</b> and BLK<b>2</b> are used as described above, the 2M-th debugging log DLOG_<b>2</b>M may be obtained from the second debugging memory block BLK<b>2</b> that is not erased yet.</p><p id="p-0161" num="0160"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a flowchart illustrating another example of storing a plurality of debugging logs in a nonvolatile memory in <figref idref="DRAWINGS">FIG. <b>16</b></figref>. The descriptions repeated with <figref idref="DRAWINGS">FIG. <b>17</b></figref> will be omitted.</p><p id="p-0162" num="0161">Referring to <figref idref="DRAWINGS">FIGS. <b>16</b> and <b>19</b></figref>, when storing the plurality of debugging logs in the nonvolatile memory (step S<b>300</b><i>b</i>), steps S<b>371</b>, S<b>373</b>, S<b>375</b>, S<b>377</b>, S<b>379</b> and/or S<b>381</b> may be substantially the same as steps S<b>371</b>, S<b>373</b>, S<b>375</b>, S<b>377</b>, S<b>379</b> and S<b>381</b> in <figref idref="DRAWINGS">FIG. <b>17</b></figref>, respectively.</p><p id="p-0163" num="0162">When all pages of the erased debugging memory block are programmed (step S<b>381</b>: YES), it may be determined whether program/erase (P/E) cycles of all the debugging memory blocks exceed a predetermined (or alternately given) reference number of times (step S<b>383</b>), before the debugging memory block that is earliest programmed at the current time point is selected and steps S<b>377</b>, S<b>379</b> and/or S<b>381</b> are performed.</p><p id="p-0164" num="0163">When the P/E cycles of all the debugging memory blocks exceed the reference number of times (step S<b>383</b>: YES), it may represent that the lifetime of all the debugging memory blocks is over and the operation of storing the debugging logs is impossible, and thus a function of storing the debugging logs may be terminated or finished (step S<b>385</b>). In other words, when all the debugging memory blocks are out of the warranty even if two or more debugging memory blocks are used to reduce or prevent the loss of the debugging log, a debuggability function may be turned off.</p><p id="p-0165" num="0164">When the P/E cycle of at least one debugging memory block is within the reference number of times (step S<b>383</b>: NO), the debugging memory block that is within the warranty and is earliest programmed at the current time point may be selected, and steps S<b>377</b>, S<b>379</b> and/or S<b>381</b> may be performed on the selected debugging memory block.</p><p id="p-0166" num="0165"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a flowchart illustrating a method of managing a debugging log in a storage device according to example embodiments. The descriptions repeated with <figref idref="DRAWINGS">FIG. <b>1</b></figref> will be omitted.</p><p id="p-0167" num="0166">Referring to <figref idref="DRAWINGS">FIG. <b>20</b></figref>, in a method of managing a debugging log in a storage device according to example embodiments, steps S<b>100</b>, S<b>200</b> and/or S<b>300</b> may be substantially the same as steps S<b>100</b>, S<b>200</b> and S<b>300</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, respectively.</p><p id="p-0168" num="0167">The debugging log stored in the nonvolatile memory is output (step S<b>500</b>). For example, the debugging log may be output to the host device and may be provided to a host memory (e.g., the host memory <b>220</b> in <figref idref="DRAWINGS">FIG. <b>3</b></figref>) included in the host device, based on a request from the host device. For another example, the storage device may be physically connected to a debugging device disposed outside the storage system through a separate port, and/or the debugging log may be output to the debugging device based on a request (e.g., a vendor unit command) from the debugging device. The host device and/or the debugging device may analyze the errors occurring in the storage device based on the debugging log.</p><p id="p-0169" num="0168">As will be appreciated by those skilled in the art, the inventive concepts may be embodied as a system, method, computer program product, and/or a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon. The computer readable program code may be provided to a processor of a general purpose computer, special purpose computer, and/or other programmable data processing apparatus. The computer readable medium may be a computer readable signal medium and/or a computer readable storage medium. The computer readable storage medium may be any tangible medium that can contain and/or store a program for use by and/or in connection with an instruction execution system, apparatus, and/or device. For example, the computer readable medium may be a non-transitory computer readable medium.</p><p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a block diagram illustrating an electronic system including a storage device according to example embodiments.</p><p id="p-0171" num="0170">Referring to <figref idref="DRAWINGS">FIG. <b>21</b></figref>, an electronic system <b>3000</b> may include a semiconductor device <b>3100</b> and a controller <b>3200</b> electrically connected to the semiconductor device <b>3100</b>. The electronic system <b>3000</b> may be a storage device including one or a plurality of semiconductor devices <b>3100</b> and/or an electronic device including a storage device. For example, the electronic system <b>3000</b> may be a solid state drive (SSD) device, a universal serial bus (USB), a computing system, a medical device, and/or a communication device that may include one or a plurality of semiconductor devices <b>3100</b>.</p><p id="p-0172" num="0171">The semiconductor device <b>3100</b> may be a memory device, for example, a nonvolatile memory device described with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>. The semiconductor device <b>3100</b> may include a first structure <b>3100</b>F and/or a second structure <b>3100</b>S on the first structure <b>3100</b>F. The first structure <b>3100</b>F may be a peripheral circuit structure including a decoder circuit <b>3110</b>, a page buffer circuit <b>3120</b>, and/or a logic circuit <b>3130</b>. The second structure <b>3100</b>S may be a memory cell structure including a bitline BL, a common source line CSL, wordlines WL, first and second upper gate lines UL<b>1</b> and UL<b>2</b>, first and/or second lower gate lines LL<b>1</b> and LL<b>2</b>, and/or memory cell strings CSTR between the bitline BL and the common source line CSL.</p><p id="p-0173" num="0172">In the second structure <b>3100</b>S, each or one or more of the memory cell strings CSTR may include lower transistors LT<b>1</b> and/or LT<b>2</b> adjacent to the common source line CSL, upper transistors UT<b>1</b> and/or UT<b>2</b> adjacent to the bitline BL, and/or a plurality of memory cell transistors MCT between the lower transistors LT<b>1</b> and/or LT<b>2</b> and the upper transistors UT<b>1</b> and/or UT<b>2</b>. The number of the lower transistors LT<b>1</b> and/or LT<b>2</b> and/or the number of the upper transistors UT<b>1</b> and/or UT<b>2</b> may be varied in accordance with example embodiments.</p><p id="p-0174" num="0173">In some example embodiments, the upper transistors UT<b>1</b> and/or UT<b>2</b> may include string selection transistors, and/or the lower transistors LT<b>1</b> and/or LT<b>2</b> may include ground selection transistors. The lower gate lines LL<b>1</b> and/or LL<b>2</b> may be gate electrodes of the lower transistors LT<b>1</b> and/or LT<b>2</b>, respectively. The wordlines WL may be gate electrodes of the memory cell transistors MCT, respectively, and/or the upper gate lines UL<b>1</b> and/or UL<b>2</b> may be gate electrodes of the upper transistors UT<b>1</b> and/or UT<b>2</b>, respectively.</p><p id="p-0175" num="0174">In some example embodiments, the lower transistors LT<b>1</b> and/or LT<b>2</b> may include a lower erase control transistor LT<b>1</b> and/or a ground selection transistor LT<b>2</b> that may be connected with each other in serial. The upper transistors UT<b>1</b> and/or UT<b>2</b> may include a string selection transistor UT<b>1</b> and/or an upper erase control transistor UT<b>2</b>. At least one of the lower erase control transistor LT<b>1</b> and/or the upper erase control transistor UT<b>2</b> may be used in an erase operation for erasing data stored in the memory cell transistors MCT through gate induced drain leakage (GIDL) phenomenon.</p><p id="p-0176" num="0175">The common source line CSL, the first and/or second lower gate lines LL<b>1</b> and LL<b>2</b>, the wordlines WL, and/or the first and/or second upper gate lines UL<b>1</b> and UL<b>2</b> may be electrically connected to the decoder circuit <b>3110</b> through first connection wirings <b>1115</b> extending to the second structure <b>3110</b>S in the first structure <b>3100</b>F. The bitlines BL may be electrically connected to the page buffer circuit <b>3120</b> through second connection wirings <b>3125</b> extending to the second structure <b>3100</b>S in the first structure <b>3100</b>F.</p><p id="p-0177" num="0176">In the first structure <b>3100</b>F, the decoder circuit <b>3110</b> and/or the page buffer circuit <b>3120</b> may perform a control operation for at least one selected memory cell transistor among the plurality of memory cell transistors MCT. The decoder circuit <b>3110</b> and/or the page buffer circuit <b>3120</b> may be controlled by the logic circuit <b>3130</b>. The semiconductor device <b>3100</b> may communicate with the controller <b>3200</b> through an input/output pad <b>3101</b> electrically connected to the logic circuit <b>3130</b>. The input/output pad <b>3101</b> may be electrically connected to the logic circuit <b>3130</b> through an input/output connection wiring <b>3135</b> extending to the second structure <b>3100</b>S in the first structure <b>3100</b>F.</p><p id="p-0178" num="0177">The controller <b>3200</b> may include a processor <b>3210</b>, a NAND controller <b>3220</b>, and/or a host interface <b>3230</b>. The electronic system <b>3000</b> may include a plurality of semiconductor devices <b>3100</b>, and in this case, the controller <b>3200</b> may control the plurality of semiconductor devices <b>3100</b>.</p><p id="p-0179" num="0178">The processor <b>3210</b> may control operations of the electronic system <b>3000</b> including the controller <b>3200</b>. The processor <b>3210</b> may be operated by firmware, and may control the NAND controller <b>3220</b> to access the semiconductor device <b>3100</b>. The NAND controller <b>3220</b> may include a NAND interface <b>3221</b> for communicating with the semiconductor device <b>3100</b>. Through the NAND interface <b>3221</b>, control command for controlling the semiconductor device <b>3100</b>, data to be written in the memory cell transistors MCT of the semiconductor device <b>3100</b>, data to be read from the memory cell transistors MCT of the semiconductor device <b>3100</b>, etc., may be transferred. The host interface <b>3230</b> may provide communication between the electronic system <b>3000</b> and an outside host. When control command is received from the outside host through the host interface <b>3230</b>, the processor <b>3210</b> may control the semiconductor device <b>3100</b> in response to the control command.</p><p id="p-0180" num="0179">The electronic system <b>3000</b> may perform the method of managing the debugging log according to example embodiments described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> through <b>20</b></figref>.</p><p id="p-0181" num="0180">One or more of the elements disclosed above may include or be implemented in one or more processing circuitries such as hardware including logic circuits; a hardware/software combination such as a processor executing software; or a combination thereof. For example, the processing circuitries more specifically may include, but is not limited to, a central processing unit (CPU), an arithmetic logic unit (ALU), a digital signal processor, a microcomputer, a field programmable gate array (FPGA), a System-on-Chip (SoC), a programmable logic unit, a microprocessor, application-specific integrated circuit (ASIC), etc.</p><p id="p-0182" num="0181">The inventive concepts may be applied to various electronic devices and systems that include the storage devices and/or the storage systems. For example, the inventive concepts may be applied to systems such as a personal computer (PC), a server computer, a data center, a workstation, a mobile phone, a smart phone, a tablet computer, a laptop computer, a personal digital assistant (PDA), a portable multimedia player (PMP), a digital camera, a portable game console, a music player, a camcorder, a video player, a navigation device, a wearable device, an internet of things (IoT) device, an internet of everything (IoE) device, an e-book reader, a virtual reality (VR) device, an augmented reality (AR) device, a robotic device, a drone, etc.</p><p id="p-0183" num="0182">The foregoing is illustrative of example embodiments and is not to be construed as limiting thereof. Although some example embodiments have been described, those skilled in the art will readily appreciate that many modifications are possible in the example embodiments without materially departing from the novel teachings and advantages of the example embodiments. Accordingly, all such modifications are intended to be included within the scope of the example embodiments as defined in the claims. Therefore, it is to be understood that the foregoing is illustrative of various example embodiments and is not to be construed as limited to the specific example embodiments disclosed, and that modifications to the disclosed example embodiments, as well as other example embodiments, are intended to be included within the scope of the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of managing a debugging log in a storage device, the method comprising:<claim-text>generating, by a storage controller included in the storage device, an event trigger signal based on an external power supply voltage and a plurality of configuration control signals, the event trigger signal being activated in response to an event of interest being issued for generating and storing the debugging log, the debugging log representing information associated with errors occurring in the storage device;</claim-text><claim-text>generating, by the storage controller, the debugging log based on the event trigger signal; and</claim-text><claim-text>storing the debugging log in a nonvolatile memory included in the storage device,</claim-text><claim-text>wherein the event of interest includes at least one of<claim-text>a power up event in which the external power supply voltage is activated,</claim-text><claim-text>a reset event for initializing the storage controller,</claim-text><claim-text>a link up event in which a communication establishment between a host device disposed outside the storage device and the storage controller is completed,</claim-text><claim-text>a link down event in which the communication establishment between the host device and the storage controller is released, or</claim-text><claim-text>a power down event in which the external power supply voltage is deactivated.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event of interest further includes a host idle event in which the host device maintains an idle state for more than a reference time interval.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the event of interest further includes a thermal event in which an operating temperature of the storage device increases higher than a reference temperature.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein storing the debugging log in the nonvolatile memory includes:<claim-text>temporarily storing the debugging log in a buffer memory included in the storage device; and</claim-text><claim-text>storing the debugging log in the nonvolatile memory by providing the debugging log that is temporarily stored in the buffer memory to the nonvolatile memory.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein:<claim-text>the debugging log is stored in a debugging memory block included in the nonvolatile memory, and</claim-text><claim-text>the debugging memory block includes multi-level memory cells (MLCs) each of which stores two or more data bits.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein storing the debugging log in the nonvolatile memory includes:<claim-text>directly storing the debugging log in the nonvolatile memory by directly providing the debugging log that is generated by the storage controller to the nonvolatile memory.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, further comprising:<claim-text>storing the debugging log in a debugging memory block included in the nonvolatile memory, the debugging memory block including single-level memory cells (SLCs) each of which configured to store one data bit.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>generating, by the storage controller, an abnormal event trigger signal based on the external power supply voltage and the plurality of configuration control signals, the abnormal event trigger signal being activated in response to the event of interest corresponding to an abnormal event,</claim-text><claim-text>wherein the debugging log is stored in the nonvolatile memory based on the abnormal event trigger signal.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein storing the debugging log in the nonvolatile memory includes:<claim-text>in response to the event of interest corresponding to the abnormal event, immediately storing the debugging log in the nonvolatile memory based on the abnormal event trigger signal; and</claim-text><claim-text>in response to the event of interest corresponding to a normal event, temporarily storing the debugging log in a buffer memory included in the storage device, and then storing the debugging log in the nonvolatile memory.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>determining, in response to a time interval between a first time point and a second time point being greater than a first reference value, that the event of interest corresponds to the abnormal event,</claim-text><claim-text>wherein the first time point represents a time point at which a reset signal associated with the reset event is activated, and</claim-text><claim-text>wherein the second time point represents a time point at which the communication establishment between the host device and the storage controller is completed.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>determining, in response to a time interval between a third time point and a fourth time point being greater than a second reference value, that the event of interest corresponds to the abnormal event,</claim-text><claim-text>wherein the third time point represents a time point at which a controller configuration enable signal provided from the host device to the storage controller is activated, and</claim-text><claim-text>wherein the fourth time point represents a time point at which a controller status ready signal generated by the storage controller is activated.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00008">claim 8</claim-ref>, further comprising:<claim-text>determining, in response to a time interval between a fifth time point and a sixth time point being greater than a third reference value, that the event of interest corresponds to the abnormal event,</claim-text><claim-text>wherein the fifth time point represents a time point at which the communication establishment between the host device and the storage controller is released, and</claim-text><claim-text>wherein the sixth time point represents a time point at which a reset signal associated with the reset event is deactivated.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein:<claim-text>the nonvolatile memory includes a plurality of memory blocks, and</claim-text><claim-text>two or more of the plurality of memory blocks are set as a debugging memory block configured to store the debugging log.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>sequentially generating a plurality of debugging logs in response to a plurality of events of interest being sequentially issued;</claim-text><claim-text>sequentially storing first to M-th debugging logs among the plurality of debugging logs are in a first debugging memory block, where M is a natural number greater than or equal to two;</claim-text><claim-text>sequentially storing (M+1)-th to 2M-th debugging logs among the plurality of debugging logs in a second debugging memory block; and</claim-text><claim-text>sequentially storing (2M+1)-th to 3M-th debugging logs among the plurality of debugging logs in the first debugging memory block after an erase operation is performed on the first debugging memory block.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A method of managing a debugging log in a storage device, the method comprising:<claim-text>generating, by a storage controller included in the storage device, an event trigger signal based on an external power supply voltage and a plurality of configuration control signals, the event trigger signal being activated in response to an event of interest being issued for generating and storing the debugging log, the debugging log representing information associated with errors occurring in the storage device;</claim-text><claim-text>generating, by the storage controller, the debugging log based on the event trigger signal;</claim-text><claim-text>generating, by the storage controller, an abnormal event trigger signal based on the external power supply voltage and the plurality of configuration control signals, the abnormal event trigger signal being activated in response to the event of interest corresponding to an abnormal event;</claim-text><claim-text>in response to the event of interest corresponding to the abnormal event, immediately storing the debugging log in a nonvolatile memory included in the storage device based on the abnormal event trigger signal; and</claim-text><claim-text>in response to the event of interest corresponding to a normal event, temporarily storing the debugging log in a buffer memory included in the storage device, and then storing the debugging log in the nonvolatile memory.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the event of interest includes at least one of<claim-text>a power up event in which the external power supply voltage is activated,</claim-text><claim-text>a reset event for initializing the storage controller,</claim-text><claim-text>a link up event in which a communication establishment between a host device disposed outside the storage device and the storage controller is completed,</claim-text><claim-text>a link down event in which the communication establishment between the host device and the storage controller is released, or</claim-text><claim-text>a power down event in which the external power supply voltage is deactivated.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>determining, in response to a time interval between a first time point and a second time point being greater than a first reference value, that the event of interest corresponds to the abnormal event,</claim-text><claim-text>wherein the first time point represents a time point at which a reset signal associated with the reset event is activated, and</claim-text><claim-text>wherein the second time point represents a time point at which the communication establishment between the host device and the storage controller is completed.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>determining, in response to a time interval between a third time point and a fourth time point being greater than a second reference value, that the event of interest corresponds to the abnormal event,</claim-text><claim-text>wherein the third time point represents a time point at which a controller configuration enable signal provided from the host device to the storage controller is activated, and</claim-text><claim-text>wherein the fourth time point represents a time point at which a controller status ready signal generated by the storage controller is activated.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, further comprising:<claim-text>determining, in response to a time interval between a fifth time point and a sixth time point being greater than a third reference value, that the event of interest corresponds to the abnormal event,</claim-text><claim-text>wherein the fifth time point represents a time point at which the communication establishment between the host device and the storage controller is released, and</claim-text><claim-text>wherein the sixth time point represents a time point at which a reset signal associated with the reset event is deactivated.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. (canceled)</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. A method of managing a debugging log in a storage device, the method comprising:<claim-text>generating, by a storage controller included in the storage device, an event trigger signal based on an external power supply voltage and a plurality of configuration control signals, the event trigger signal being activated in response to a plurality of events of interest being issued for generating and storing a plurality of debugging logs, the plurality of debugging logs representing information associated with errors occurring in the storage device;</claim-text><claim-text>generating, by the storage controller, the plurality of debugging logs based on the event trigger signal;</claim-text><claim-text>storing the plurality of debugging logs in a nonvolatile memory included in the storage device, the nonvolatile memory including a plurality of memory blocks, two of the plurality of memory blocks being set as a first debugging memory block and a second debugging memory block, the first and second debugging memory blocks configured to store the plurality of debugging logs;</claim-text><claim-text>sequentially storing first to M-th debugging logs among the plurality of debugging logs in the first debugging memory block, where M is a natural number greater than or equal to two;</claim-text><claim-text>sequentially storing (M+1)-th to 2M-th debugging logs among the plurality of debugging logs in the second debugging memory block; and</claim-text><claim-text>sequentially storing (2M+1)-th to 3M-th debugging logs among the plurality of debugging logs in the first debugging memory block after an erase operation is performed on the first debugging memory block.</claim-text></claim-text></claim></claims></us-patent-application>