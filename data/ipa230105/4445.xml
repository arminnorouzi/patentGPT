<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004446A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004446</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940972</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>48</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>54</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5072</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>485</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>542</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>5077</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2209</main-group><subgroup>508</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">VARIABLE AND EVENT REPORTING IN A CLOUD SERVICE SYSTEM</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17029968</doc-number><date>20200923</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11500687</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17940972</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62907322</doc-number><date>20190927</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62907327</doc-number><date>20190927</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62907312</doc-number><date>20190927</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Tencent America LLC</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SODAGAR</last-name><first-name>Iraj</first-name><address><city>Los Angeles</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Tencent America LLC</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for cloud service includes receiving, by processing circuitry that operates for a cloud service, a request including a first reporting descriptor object including (i) a first variables descriptor object associated with variables, (ii) a first events descriptor object associated with events, and (iii) a reporting interval. The method also includes generating, by the processing circuitry, at a time within the reporting interval, a message including a second reporting descriptor object with (i) a second variables descriptor object having updated values for the variables and (ii) a second events descriptor object associated with a subset of the events. The method also includes sending, by the processing circuitry, the message to a recipient.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="152.57mm" wi="150.20mm" file="US20230004446A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="212.77mm" wi="167.13mm" orientation="landscape" file="US20230004446A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.04mm" wi="147.49mm" orientation="landscape" file="US20230004446A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="141.65mm" wi="130.98mm" orientation="landscape" file="US20230004446A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="171.45mm" wi="116.92mm" orientation="landscape" file="US20230004446A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="214.80mm" wi="166.88mm" file="US20230004446A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="141.65mm" wi="96.35mm" orientation="landscape" file="US20230004446A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="159.00mm" wi="81.53mm" orientation="landscape" file="US20230004446A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="146.90mm" wi="117.09mm" orientation="landscape" file="US20230004446A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="143.09mm" wi="156.97mm" orientation="landscape" file="US20230004446A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="230.55mm" wi="166.45mm" file="US20230004446A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="158.75mm" wi="143.09mm" file="US20230004446A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="191.77mm" wi="165.95mm" file="US20230004446A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="229.87mm" wi="166.29mm" file="US20230004446A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="119.46mm" wi="143.00mm" file="US20230004446A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="177.97mm" wi="150.37mm" file="US20230004446A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="184.49mm" wi="152.23mm" file="US20230004446A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="231.14mm" wi="178.90mm" orientation="landscape" file="US20230004446A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">INCORPORATION BY REFERENCE</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. application Ser. No. 17/029,968 filed on Sep. 23, 2020, which claims the benefit of priority to U.S. Provisional Application No. 62/907,322, &#x201c;SELF-CONTAINED REPORTING FOR CLOUD SERVICES&#x201d; filed on Sep. 27, 2019, U.S. Provisional Application No. 62/907,327, &#x201c;SELF-CONTAINED MONITORING FOR CLOUD SERVICES&#x201d; filed on Sep. 27, 2019, and U.S. Provisional Application No. 62/907,312, &#x201c;SELF-CONTAINED NOTIFICATION FOR CLOUD SERVICES&#x201d; filed on Sep. 27, 2019. The entire disclosures of the prior applications are hereby incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure describes embodiments generally related to cloud service.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent the work is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.</p><p id="p-0005" num="0004">Various media applications and services require significant processing capability. In some examples, cloud processing is preferred where workloads that otherwise would have been performed on a client device, can be offloaded to remote servers. Because the remote servers have much higher computation capacity, complex media processing tasks can be performed by the remote servers and then final results or near-to-final results can be sent to the client device.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">Aspects of the disclosure provide methods and apparatuses for cloud service. For example, an apparatus in a cloud for providing a cloud service includes processing circuitry. The processing circuitry receives a request including at least first characteristics associated with a variable. In an example, the first characteristics include complete information for describing the variable. The processing circuitry generates a message including the first characteristics associated with the variable and an updated value of the variable and sends the message to a recipient.</p><p id="p-0007" num="0006">In an example, the first characteristics include at least a definition of the variable, a unit of the variable, a format of the variable, and a universal identifier of the variable.</p><p id="p-0008" num="0007">In some examples, the processing circuitry can establish and manage a workflow for the cloud service. In some other examples, the processing circuitry can perform one or more tasks in a workflow for the cloud service.</p><p id="p-0009" num="0008">In some embodiments, the request includes at least second characteristics associated with an event. The second characteristics include complete information for describing the event. The processing circuitry can generate the message that includes the first characteristics associated with the variable and the updated value of the variable, and the second characteristics associated with the event for indicating an occurrence of the event. It is noted that the variable can be a function variable or a system variable, and the event can be a function event or a system event.</p><p id="p-0010" num="0009">In some embodiments, the request includes a first reporting descriptor object with at least a first variables descriptor object associated with variables, a first events descriptor object associated with events, and a reporting interval. The processing circuitry generates, at a time with the reporting interval to a previous message, the message that includes a second reporting descriptor object with a second variables descriptor object having updated values for the variables, and a second events descriptor object associated with a subset of the events.</p><p id="p-0011" num="0010">In some embodiments, the request includes a first notification descriptor object with at least a first variables descriptor object associated with variables, and a first events descriptor object associated with subscribed events. The processing circuitry generates, in response to an occurrence of at least one of the subscribed events, the message that includes a second reporting descriptor object with a second variables descriptor object having updated values for the variables, and a second events descriptor object associated with a subset of the subscribed events.</p><p id="p-0012" num="0011">In some embodiments, the request includes a first monitoring descriptor object with at least a first variables descriptor object associated with variables, and a first events descriptor object associated with events. The processing circuitry receives, the request that is sent from a monitoring entity, and generates, in response to the request, the message that includes a second reporting descriptor object with a second variables descriptor object having updated values for the variables, and a second events descriptor object associated with a subset of the events. Then, the processing circuitry sends the message to the monitoring entity.</p><p id="p-0013" num="0012">It is noted that, in some embodiments, the message includes a request descriptor object that identifies the request.</p><p id="p-0014" num="0013">Aspects of the disclosure also provide a non-transitory computer-readable medium storing instructions which when executed by a computer for cloud service cause the computer to perform the method for cloud service.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0015" num="0014">Further features, the nature, and various advantages of the disclosed subject matter will be more apparent from the following detailed description and the accompanying drawings in which:</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an exemplary media processing system according to an embodiment of the disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example of a graph according to an embodiment of the disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a list of variables in a function according to some embodiments of the disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a table of characteristics for a variable according to some embodiments of the disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of a variables descriptor schema according to some embodiments of the disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a list of events in a function according to some embodiments of the disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a table of characteristics for an event according to some embodiments of the disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of an events descriptor schema according to some embodiments of the disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a table of parameters in a reporting descriptor and the corresponding types for the parameters.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example of a reporting descriptor schema according to some embodiments of the disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a table of parameters in a notification descriptor and the corresponding types for the parameters.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIGS. <b>12</b>A-B</figref> show an example of a notification descriptor schema according to some embodiments of the disclosure.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a table of parameters in a monitoring descriptor and the corresponding types for the parameters.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an example of a monitoring descriptor schema according to some embodiments of the disclosure.</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a flow chart outlining a process according to an embodiment of the disclosure.</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a schematic illustration of a computer system in accordance with an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0032" num="0031">Cloud computing refers to the practice of using a network of remote servers hosted on a network (e.g., the Internet) to deliver information computing services (e.g., cloud services). The network architecture (e.g., including hardware and software) through which the cloud services are provided to service consumers (e.g., clients) is referred to as the cloud. Cloud computing provides access to a wide range of services, such as data processing, media processing, server, storage, network, applications, online services and the like. In some examples, media processing becomes compute intensive, and thus a media processing cloud is preferred to offload significant workloads to remote servers.</p><p id="p-0033" num="0032">Generally, a cloud computing system includes a network, one or more servers, and one or more client devices. The network facilitates communications between the servers and client devices. A client device may be, for example, a smartphone, a tablet computer, a laptop, a personal computer, a wearable device, a head-mounted display (HMD), or the like. A server can include any suitable computing or processing device that can provide computing services for one or more client devices. For example, each server can include one or more processing devices, one or more memories storing instructions and data, and one or more network interfaces facilitating communication over the network. In some embodiments, a server includes a workflow manager that can select functions and build a workflow pipeline to perform a processing task.</p><p id="p-0034" num="0033">According to some embodiments of the disclosure, when computation is offloaded to remote servers, the client device, or a service provider that is responsible for providing the service, may need information regarding the processing status of the service, such as real-time information of the service, and the like. In some examples, actions can be taken in the cloud computing system to provide status information to entities involved in the cloud service. In an example, reporting is an action that is regularly performed (e.g., frequently performed based on a time interval) to provide information about events and variables to a destination during performing of a service. In another example, notifying is an action of providing information to a destination when an event occurs. In another example, monitoring is an action of an entity requesting information and receiving the requested information. For ease of description, in the following description, the status information generated in response to the actions (e.g., reporting, notifying and monitoring) is referred to as status report; the status information generated in response to the reporting action is referred to as regular report; the status information generated in response to the notifying action is referred to as notification report; and the status information generated in response to the monitoring action is referred to as monitoring report.</p><p id="p-0035" num="0034">Aspects of the disclosure provide a framework for reporting, monitoring and notifying in a cloud computing system. The framework can simplify setting up and processing of reporting, monitoring and notifying actions. Specifically, some aspects of the disclosure provide self-contained reporting, monitoring and notifying framework for cloud computing services. A self-contained framework can provide to a recipient, a container (e.g., a message) that includes all the necessary information in the container for the recipient to understand, thus the recipient does not need cross referencing information out of the container to understand the received information.</p><p id="p-0036" num="0035">It is noted that, in the present disclosure, a media processing system (also referred to as a media processing cloud in some examples) that performs network-based media processing (NBMP) is used as an example to illustrate the reporting, monitoring and notifying frameworks, and the reporting, monitoring and notifying frameworks can be used in other suitable cloud computing system.</p><p id="p-0037" num="0036">In a media processing system, a NBMP source describes the requested media processing and provides information about the nature and format of the media data. Accordingly, an NBMP workflow manager can establish a media processing workflow and informs the NBMP source that the workflow is ready, and then media processing can start. For example, media source(s) can then start transmitting media to the network for processing.</p><p id="p-0038" num="0037">In some embodiments, an NBMP workflow includes media processing tasks that are connected based on input/output relationships among the media processing tasks. Each of the media processing tasks performs a media processing operation, such as video decoding, video stitching, video encoding, and/or the like. In an example, a first media processing task performs a media processing operation based on inputs and generates outputs. The outputs of the first media processing task can be used as inputs to a second media processing task that is connected with the first media processing task. In other words, an NBMP workflow can be considered as a connected graph of media processing tasks.</p><p id="p-0039" num="0038">The workflow manager can ensure the correct operation of the workflow by configuring and monitoring each task as well as the workflow output. In some examples, the workflow manager is configured to the select the media processing functions and instantiate the media processing functions as tasks based on the workflow description that is received from the NBMP source.</p><p id="p-0040" num="0039">In a media processing system, suitable interactions can be performed to establish, load, instantiate and monitor media processing entities that will run the media processing tasks. In some examples, application programming interfaces (APIs) can be defined between an NBMP source and workflow manager; workflow manager and task(s); and an API is defined to discover appropriate function(s). In some examples, a media processing system is configured to be media format and protocol agnostic. The media processing system can identify and signal the media, metadata and auxiliary information formats for data exchanged between media source, the workflow manager and tasks.</p><p id="p-0041" num="0040">In some examples, interfaces including both data formats and application programming interfaces (APIs) among the entities connected through digital networks for media processing can be defined. Users can access and configure user operations remotely for efficient, intelligent processing. The workflows to be applied to media data can be described and managed. The media data can be uploaded to the network, and the media processing tasks can be instantiated and configured. In some embodiments, dynamic creation of media processing pipelines, as well as access to processed media data and metadata in real-time or in a deferred way are enabled. The media and metadata formats used between the media source, workflow manager and media processing entities in a media processing pipeline are also specified.</p><p id="p-0042" num="0041">In an example, clients (e.g., creators, service providers, and consumers of digital media) can describe media processing operations to be performed by media processing entities in a network. A workflow can be described by composing a set of media processing functions that are accessible through interfaces (e.g., NBMP APIs). A media processing entity (MPE) can run processing tasks applied on the media and the related metadata received from media source(s) or other tasks. The MPE can provide capabilities for configuring, managing, and monitoring processing tasks. A media processing task can be a process applied to media and metadata input(s), producing data and related metadata output(s) to be consumed by a media sink or other media processing tasks.</p><p id="p-0043" num="0042">The media processing system can support various delivery methods such as streaming, file delivery, push-based progressive download, hybrid delivery, multipath, and heterogeneous network environments.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an exemplary media processing system (e.g., NBMP system, a NBMP reference architecture, a NBMP architecture) (<b>100</b>) according to an embodiment of the disclosure. The media processing system (<b>100</b>) can include a plurality of entities, such as a NBMP source (<b>101</b>), a workflow manager (e.g., a NBMP workflow manager) (<b>103</b>), a function repository (<b>105</b>), a media source (<b>111</b>), a media processing entity (MPE) (<b>113</b>), a media sink (<b>115</b>), a third party entity, and/or the like. The media processing system (<b>100</b>) can include additional media source(s), media sink(s), and/or media processing entities. The media processing system (<b>100</b>) can process media data across one or more processing entities in a network. Information, such as various media and control information (or control data) for the media, can be communicated among the plurality of entities in the media processing system (<b>100</b>).</p><p id="p-0045" num="0044">To provide a context for discussion purposes, the media processing system (<b>100</b>) is described as the NBMP system (<b>100</b>) below. The descriptions can be suitably adapted to any media processing system.</p><p id="p-0046" num="0045">The NBMP source (<b>101</b>) can describe, or otherwise indicate, media processing in the network. The function repository (<b>105</b>) can include NBMP function descriptions of various NBMP functions. The NBMP source (<b>101</b>) and the workflow manager (<b>103</b>) can retrieve the NBMP function descriptions or functions from the function repository (<b>105</b>). An NBMP function can refer to implementation of a standalone and self-contained media processing operation and/or the corresponding description of the operation.</p><p id="p-0047" num="0046">A processing task or a task can refer to a runtime instance of a NBMP function that is executed by the MPE (<b>113</b>). An NBMP workflow or a workflow can be represented by a graph (e.g., a directed acyclic graph (DAG)) of one or more connected task(s) that achieve the requested media processing. The workflow manager (<b>103</b>) can provision task(s) and connect the task(s) to create, control, manage and monitor a workflow, for example, based on a workflow description document (WDD).</p><p id="p-0048" num="0047">The media source (<b>111</b>) can provide media content (e.g., media data, supplementary information) to be processed by a workflow. The supplementary information can include metadata or auxiliary information related to the media data. The media source (<b>111</b>) can provide an input to the workflow. The media sink (<b>115</b>) can consume an output of the workflow. The MPE (<b>113</b>) can run one or more media processing task(s) to process the media content.</p><p id="p-0049" num="0048">Different entities (e.g., the NBMP Source (<b>101</b>), the workflow manager (<b>103</b>) and the MPE (<b>113</b>)) in the NBMP system (<b>100</b>) can use APIs to invoke and respond to media service requests. The APIs can include a NBMP workflow API or a workflow API, a function discovery API, and a task API. The workflow API can provide an interface between the NBMP Source (<b>101</b>) and the workflow manager (<b>103</b>). The task API can provide an interface between the workflow manager (<b>103</b>) and media processing tasks. The function discovery API can provide an interface between the workflow manager (<b>103</b>)/the NBMP Source (<b>101</b>) and the Function Repository (<b>105</b>).</p><p id="p-0050" num="0049">NBMP interfaces described above can be used to create and control media processing workflows in the network. The NBMP system (<b>100</b>) can be split into a control plane and a media plane (or media data plane). The control plane can include the workflow API, the function discovery API, and the task API.</p><p id="p-0051" num="0050">The workflow API can be used by the NBMP source (<b>101</b>) to create and control a media processing workflow. The NBMP Source (<b>101</b>) can use the workflow API to communicate with the workflow manager (<b>103</b>) for configuring and controlling media processing in the network. When the NBMP Source (<b>101</b>) sends a request to the workflow manager (<b>103</b>) by including a workflow resource (WR) in an operation of the workflow API, the workflow manager (<b>103</b>) can parse the WR, the included WDD and corresponding descriptors, and take the appropriate actions according to the requested operation. Then, the workflow manager (<b>103</b>) can acknowledge the request with a response. The workflow API operations can include creating a workflow (e.g., CreateWorkflow), updating a workflow (e.g., UpdateWorkflow), deleting a workflow (e.g., DeleteWorkflow), retrieving a workflow (e.g., RetrieveWorkflow), and the like.</p><p id="p-0052" num="0051">The function discovery API can provide the means for the workflow manager (<b>103</b>) and/or the NBMP Source (<b>101</b>) to discover media processing functions that can be loaded as part of a media processing workflow.</p><p id="p-0053" num="0052">The task API can be used by the workflow manager (<b>103</b>) to configure and monitor task(s) (e.g., a task <b>1</b> and a task <b>2</b> run by the MPE (<b>113</b>)) at runtime. The task API can define interface(s) for configuration of media processing tasks by the workflow manager (<b>103</b>), for example, after the resources for the task are allocated in the MPE (<b>113</b>). Task API operations can include creating a task (e.g., CreateTask), updating a task (e.g., UpdateTask), getting a task (e.g., GetTask), deleting a task (e.g., DeleteTask), and the like.</p><p id="p-0054" num="0053">On the media plane, the media formats, the metadata, and the supplementary information formats between the NBMP Source (<b>111</b>) and task(s), as well as between the tasks can be defined.</p><p id="p-0055" num="0054">A workflow description (WD) can be passed from the NBMP source (<b>101</b>) to the workflow manager (<b>103</b>). The WD can describe information such as input data and output data, functions and other requirements for the workflow.</p><p id="p-0056" num="0055">The workflow manager (<b>103</b>) can receive a WDD from the NBMP source (<b>101</b>) and can build a workflow for requested media processing. In a workflow procedure, media processing functions can be selected, for example, from the function repository (<b>105</b>), and then corresponding media processing tasks can be configured and distributed to a set of one or more MPEs (e.g., including the MPE (<b>113</b>)).</p><p id="p-0057" num="0056">The set of functions provided by the function repository (<b>105</b>) can be read by an NBMP source (<b>101</b>) and the workflow manager (<b>103</b>). In an embodiment, the NBMP source (<b>101</b>) requests the creation of a workflow using a set of functions in the function repository (<b>105</b>). Accordingly, the NBMP source (<b>101</b>) is configured to select functions for the workflow. The NBMP source (<b>101</b>) can request the creation of the workflow as described below. The NBMP source (<b>101</b>) can use a description of the media processing tasks by which the workflow is to be created, and can specify a connection map to define connections of inputs and outputs of the media processing tasks. When the workflow manager (<b>103</b>) receives the above information from the NBMP source (<b>101</b>), the workflow manager (<b>103</b>) can instantiate the media processing tasks based on respective function names and can connect the media processing tasks according to the connection map.</p><p id="p-0058" num="0057">Alternatively, the NBMP source (<b>101</b>) can request the creation of a workflow using a set of keywords by which the workflow manager (<b>103</b>) can construct the workflow. Accordingly, the NBMP source (<b>101</b>) may not be aware of a set of functions to be inserted into the workflow. The NBMP source (<b>101</b>) can request the creation of the workflow as described below. The NBMP source (<b>101</b>) can use the set of keywords by which the workflow manager (<b>103</b>) can find the appropriate functions, and can specify the requirements of the workflow using suitable workflow description.</p><p id="p-0059" num="0058">When the workflow manager (<b>103</b>) receives the above information (e.g., the set of keywords) from the NBMP source (<b>101</b>), the workflow manager (<b>103</b>) can create the workflow by searching for appropriate functions using the keywords, for example, specified in a processing descriptor. The workflow manager (<b>103</b>) can then use other descriptors in the workflow description to provision the media processing tasks and connect the media processing tasks to create the final workflow.</p><p id="p-0060" num="0059">A processing model of the workflow manager (<b>103</b>) can be described as below.</p><p id="p-0061" num="0060">The workflow manager (<b>103</b>) can discover available media processing functions as below. The NBMP function repository (<b>105</b>) can provide the function discovery interface (or API) to allow external entities to query for a media processing function that can fulfil the requested processing. The workflow manager (<b>103</b>) can have access to a directory service that offers a searchable list of media processing functions. The workflow manager (<b>103</b>) can use the description of the media processing tasks in the workflow description to find the appropriate functions for the workflow.</p><p id="p-0062" num="0061">Selection of the media processing tasks for the workflow can be described below. When a request for media processing is received from the NBMP source (<b>101</b>), the workflow manager (<b>103</b>) can search the function repository (<b>105</b>) to find the list of all available functions that can fulfill the workflow. Using the workflow description from the NBMP Source (<b>101</b>), the workflow manager (<b>103</b>) can find the functions from the function repository (<b>105</b>) to implement the workflow, which can depend on the information for media processing from the NBMP Source (<b>101</b>). The information for media processing can include the input and output description, the description of the requested processing, and the information in other descriptors for functions in the function directory (<b>105</b>). Mapping of the source requests to appropriate media processing tasks to be included in the workflow can be a part of the implementation of the NBMP in the network. To reference and link input sources with input port names and output port names at the time of task creation, the input-ports and output-ports can be used to make references to the input streams.</p><p id="p-0063" num="0062">A search for appropriate functions to be instantiated as tasks can be performed by the workflow manager (<b>103</b>) using a function discovery API. Alternatively, the workflow manager (<b>103</b>) can retrieve detailed information of some or all suitable functions in the function repository (<b>105</b>) using the function discovery API. The workflow manager (<b>103</b>) can then compare the information for media processing from the NBMP source (<b>101</b>) with different descriptors of each function.</p><p id="p-0064" num="0063">Selected media processing tasks can be configured in the workflow. When the functions to be included in the workflow are identified, the NBMP workflow manager (<b>103</b>) can instantiate the functions as respective tasks and configure the tasks so that the tasks can be added to the workflow. The NBMP workflow manager (<b>103</b>) can extract the configuration data from the media processing information received from the NBMP source (<b>101</b>) and configure the corresponding tasks. The configuration of the tasks can be performed using a task API (e.g., NBMP task API).</p><p id="p-0065" num="0064">Task allocation and distribution can be described below. The workflow manager (<b>103</b>) can use the workflow to perform processing deployment and configure the media processing entities. In an example, for computationally intensive media processing requests, the workflow manager (<b>103</b>) can set up multiple computational instances and distribute a workload among the multiple computational instances. Thus, the workflow manager (<b>103</b>) can connect and configure the multiple computational instances as needed. In an example, the workflow manager (<b>103</b>) allocates a same task to multiple instances and provisions a load balancer to distribute the workload among the multiple instances using a chosen scheduling mechanism. In an alternative example, the workflow manager (<b>103</b>) allocates different operations of the same task to different instances (e.g., parallel operations). In both examples described above, the workflow manager (<b>103</b>) can set up the workflow paths between the instances, and thus the suitable workload can be successfully realized. The workflow manager (<b>103</b>) can configure the tasks to push the processed media data/streams (or make them available through a pull mechanism) to a next task in the workflow graph.</p><p id="p-0066" num="0065">When the workflow manager (<b>103</b>) receives a WDD from the NBMP Source (<b>101</b>), the workflow manager (<b>103</b>) can perform a selection of media processing functions to be inserted into the workflow. When the list of tasks to be included in the workflow is compiled, the workflow manager (<b>103</b>) can then connect the tasks to prepare the workflow.</p><p id="p-0067" num="0066">The workflow manager (<b>103</b>) can generate a workflow, for example, as represented by a graph (e.g., a DAG) from the WDD. <figref idref="DRAWINGS">FIG. <b>2</b></figref> shows an example of a graph (e.g., a DAG) (<b>200</b>) according to an embodiment of the disclosure. The DAG (<b>200</b>) can include a plurality of nodes (T<b>1</b>)-(T<b>6</b>) and a plurality of links (or connections) (<b>202</b>)-(<b>208</b>). In an example, the DAG (<b>200</b>) represents the workflow (<b>200</b>).</p><p id="p-0068" num="0067">Each node of the DAG (<b>200</b>) can represent a media processing task in the workflow (<b>200</b>). A link (e.g., the link (<b>202</b>)) connecting a first node (e.g., the node (T<b>1</b>)) to a second node (e.g., the node (T<b>2</b>)) in the DAG (<b>200</b>) can represent a transfer of an output of the first node (e.g., the node (T<b>1</b>)) as an input to the second node (e.g., the node (T<b>2</b>)).</p><p id="p-0069" num="0068">In general, a workflow can include any suitable number of input(s) (or workflow input(s)) and any suitable number of output(s) (or workflow output(s)). The workflow input(s) can be connected to the media source (<b>111</b>), other workflow(s), and/or the like, and the workflow output(s) can be connected to the media sink (<b>115</b>), other workflow(s), and/or the like. The workflow (<b>200</b>) has an input (<b>201</b>) and outputs (<b>209</b>) and (<b>210</b>). The workflow (<b>200</b>) can have one or more outputs from intermediate nodes in some embodiments.</p><p id="p-0070" num="0069">According to some aspects of the disclosure, status reports can include information of variables and information of events for functions. For example, an NBMP function is an implementation of a processing operation. In some embodiments, an NBMP function can be a standalone and self-contained media processing operation and the corresponding description of the processing operation. In some examples, for each NBMP function, two independent descriptors are used in the description. One of the two independent descriptors is for events of the NBMP function and is referred to as events descriptor and the other one of the two independent descriptors is for variables and is referred to as variables descriptor. The variables descriptor includes characteristics of the variables, such as mathematical definitions, units, formats, universal identifiers and the like that are used to understand the variables. Thus, in some examples, the variables descriptor can be self-explanatory, and variables can be understood based on the variables descriptor and no need to refer other texts out of the variables descriptor. Similarly, the events descriptor includes characteristics of the events that are used to understand the events. Thus, in some examples, the events descriptor can be self-explanatory, and events can be understood based on the events descriptor and no need to refer other texts out of the events descriptor.</p><p id="p-0071" num="0070">According to an aspect of the disclosure, workflow of a service can be performed on different systems (also referred to as platforms, cloud systems). Each system may have system variables and system events. The system variables and system events can be included in the status report.</p><p id="p-0072" num="0071">In some embodiments, status reports are defined based on self-contained descriptors. In an example, a regular report is defined based on a self-contained descriptor that is referred to as reporting descriptor. For example, the regular report can include an object defined based on the reporting descriptor, and the object is referred to as a reporting descriptor object. The reporting descriptor object allows the regular report to include a subset of function variables and events, as well as system variables and events. The variables (e.g., function variables and system variables) can be included in the form defined based the variables descriptor and the events (e.g., function events and system events) can be included in the form defined based on events descriptor. Thus, the regular report can be self-explanatory, and the variables and the events can be understood based on the variables descriptor and events descriptor.</p><p id="p-0073" num="0072">In another example, a notification report is defined based on a self-contained descriptor that is referred to as notification descriptor. For example, the notification report can include an object defined based on the notification descriptor, and the object is referred to as a notification descriptor object. The notification descriptor object allows the notification report to include a subset of function variables and events, as well as system variables and events. The variables (e.g., function variables and system variables) can be included in the form defined based the variables descriptor and events (e.g., function events and system events) can be included in the form defined based on events descriptor. Thus, the notification report can be self-explanatory, and the variables and the events can be understood based on the variables descriptor and events descriptor.</p><p id="p-0074" num="0073">In another example, a monitoring report is defined based on a self-contained descriptor that is referred to as monitoring descriptor. For example, the monitoring report can include an object defined based on the monitoring descriptor, and the object is referred to as a monitoring descriptor object. The monitoring descriptor object allows the monitoring report to include a subset of function variables and events, as well as system variables and events. The variables (e.g., function variables and system variables) can be included in the form defined based the variables descriptor and events (e.g., function events and system events) can be included in the form defined based on events descriptor. Thus, the monitoring report can be self-explanatory, and the variables and the events can be understood based on the variables descriptor and events descriptor.</p><p id="p-0075" num="0074">Specifically, in some examples, each function can include a list of variables described according to the variables descriptor.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a list of variables in a function according to some embodiments of the disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the function includes one or more variables, such as Variable-1, Variable-2, Variable-3 and the like. The variables or a subset of the variables can be included in a regular report in response to a reporting action. The variables or a subset of the variables can be included in a monitoring report in response to a monitoring action. The variables or a subset of the variables can be included in a notification report in response to a notifying action.</p><p id="p-0077" num="0076">In some embodiments, a variable descriptor object that is defined according to the variable descriptor can be included in a status report. The variable descriptor object can include an array of objects associated with variables. An object associated with a variable can include characteristics of the variable. For example, Object-1 includes the characteristics of Variable-1; Object-2 includes the characteristics of Variable-2; and Object-3 includes the characteristics of Variable-3.</p><p id="p-0078" num="0077"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a table of characteristics for a variable according to some embodiments of the disclosure. The table also includes explanation of the characteristics. For example, an object associated with a variable includes a name for the variable, a definition for the variable, a value of the variable, a unit for the variable, a parameter type for the variable and possibly a range for the variable (including a min value and a max value for the variable), and the like.</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows an example of a variables descriptor schema according to some embodiments of the disclosure. As shown, the variable descriptor is an array of objects (e.g., items) associated with variables.</p><p id="p-0080" num="0079">Further, in some examples, each function includes a list of events described according to an events descriptor.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a list of events in a function according to some embodiments of the disclosure. As shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, the function includes one or more events, such as Event-1, Event-2, and the like. The events or a subset of the events can be included in a regular report in response to a reporting action. The events or a subset of the events can be included in a monitoring report in response to a monitoring action. The events or a subset of the events can be included in a notification report in response to a notifying action.</p><p id="p-0082" num="0081">In some embodiments, an event descriptor object that is defined according to the event descriptor can be included in a status report. The event descriptor object can include an array of objects associated with events. An object associated with an event can include characteristics of the event. For example, Object-1 includes the characteristics of Event-1; Object-2 includes the characteristics of Event-2.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>7</b></figref> shows a table of characteristics for an event according to some embodiments of the disclosure. The table also includes explanation of the characteristics. For example, an object associated with an event includes name of the event, definition of the event and the like.</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows an example of an events descriptor schema according to some embodiments of the disclosure. As shown, the events descriptor can includes an array of objects (items) associated with events.</p><p id="p-0085" num="0084">According to an aspect of the disclosure, reporting is an act of regularly reporting information (e.g., generating and sending regular reports) to a destination. In some embodiments, reporting can be setup in response to request. In some examples, a requesting entity sends a request to a reporting entity. The request includes a first reporting descriptor object that is defined according to reporting descriptor. The first reporting descriptor object can include a list of desired variables and events to report, a destination to send the report, and the like. Then, the reporting entity sends the destination defined in the first reporting descriptor object, the events and variable values described in the first reporting descriptor object. For example, a regular report includes a second reporting descriptor object that is similar to the first reporting descriptor object. The second reporting descriptor object can include updated values for variables and occurrence information of the events. Generally, the reporting descriptor also includes frequency of reporting, the start time of reporting and delivery protocol of regular reports. It is noted that the destination can be the requesting entity and can be an entity different from the requesting entity.</p><p id="p-0086" num="0085">In the media processing system (<b>100</b>), the requesting entity can be the NBMP source (<b>101</b>) or the workflow manager (<b>103</b>). The reporting entity can be workflow manager (<b>103</b>) or media processing tasks.</p><p id="p-0087" num="0086">In an example, the workflow manager (<b>103</b>) can send a request, via a task API, to a media processing task (e.g., TASK <b>1</b> executed by MPE (<b>113</b>)) for regular reporting. The workflow manager (<b>103</b>) can specify the desired variables and events, the time-interval, grouping, the destination and protocol in a first reporting descriptor object in the request. Then, the media processing task can send regular reports based on the time-interval to the destination using the protocol specified in the first reporting descriptor object. A regular report includes a second reporting descriptor object that carries the information of the variables and events to report and other information, such as the time-interval, grouping, the destination, protocol and the like.</p><p id="p-0088" num="0087">In another example, the NBMP source (<b>101</b>) can setup one or more reporting schemes and can send a request, via workflow API, to the workflow manager (<b>103</b>) for regular reporting. Then, the workflow manager (<b>103</b>) can generate regular reports or the workflow manager (<b>103</b>) can request a media processing task to generate regular reports. The NBMP source (<b>101</b>) can specify the desired variables and events, the time-interval, grouping, the destination and protocol in a first reporting descriptor object in the request. Then, the workflow manager (<b>103</b>) or the media processing task can send regular reports based on the time-interval to the destination using the protocol specified in the first reporting descriptor object. A regular report includes a second reporting descriptor object that carries the information of the variables and events to report and other information, such as the time-interval, grouping, the destination, protocol and the like.</p><p id="p-0089" num="0088">In some embodiments, HTTP/1.1 is used as the protocol, and POST method is used for sending the regular reports in POST messages. For example, a body of a POST message includes a reporting descriptor object. In some examples, the body of the POST message also includes a request descriptor object in order to identify the report. In an example, the request descriptor object includes an identification of the request, a priority, and a task identification for the media processing task.</p><p id="p-0090" num="0089"><figref idref="DRAWINGS">FIG. <b>9</b></figref> shows a table of parameters in a reporting descriptor and the corresponding types for the parameters and <figref idref="DRAWINGS">FIG. <b>10</b></figref> shows an example of a reporting descriptor schema according to some embodiments of the disclosure. It is noted that system-events include events that belong to the media processing system and can be provided by the cloud in the same format as the events of the function. It is also noted that system-variables include variables that belong to the media processing system and can be provided by the cloud in the same format as the variables of the function. In some embodiments, the (function) variables can be included in a first variables descriptor object, and system variables can be included in a second variables descriptor object; the (function) events can be included in a first events descriptor object, and system events can be included in a second events descriptor object.</p><p id="p-0091" num="0090">According to another aspect of the disclosure, notification is an act of reporting information (e.g., generating and sending notification report) to a destination when an event occurs. In some embodiments, notification is setup in response to request. In some examples, a requesting entity sends a request to a notifying entity. The request includes a first notification descriptor object defined according to the notification descriptor. The first notification descriptor object can specify, for example, a list of desired variables and events, a destination to send the report, and the like. Then, when one or more of the events listed in the first notification descriptor object occurs, the notifying entity sends the destination defined in the first notification descriptor object, the events and variable values described in the first notification descriptor object. For example, a notification report includes a second notification descriptor object that is similar to the first notification descriptor object. The second notification descriptor object can include updated values for variables and occurrence information of the events. Generally, the notification descriptor can also include other suitable information for notification, such as the start time, notification interval, delivery protocol, and the like. It is noted that the destination can be the requesting entity and can be an entity different from the requesting entity.</p><p id="p-0092" num="0091">In the media processing system (<b>100</b>), the requesting entity can be the NBMP source (<b>101</b>) or the workflow manager (<b>103</b>). The notifying entity can be workflow manager (<b>103</b>) or media processing tasks.</p><p id="p-0093" num="0092">In an example, the workflow manager (<b>103</b>) can send a request, via a task API, to a media processing task (e.g., TASK <b>1</b> executed by MPE (<b>113</b>)) for notification. The workflow manager (<b>103</b>) can specify a list of subscribed events for notification, a list of variables, the destination and protocol in a first notification descriptor object in the request. Then, when one or more events in the list of subscribed events occurs, the media processing task can send a notification report to the destination using the protocol specified in the notification descriptor. A notification report includes a second notification descriptor object that carries the information of the variables in the list of variables, information of events in the list of subscribed events and other information.</p><p id="p-0094" num="0093">In another example, the NBMP source (<b>101</b>) can setup one or more notification schemes and can send a request, via workflow API, to the workflow manager (<b>103</b>) for notification. Then, the workflow manager (<b>103</b>) can generate notification reports or the workflow manager (<b>103</b>) can request a media processing task to generate notification reports. The NBMP source (<b>101</b>) can specify a list of subscribed events, a list of variables, the destination and protocol in a first notification descriptor object in the request. Then, when any of the events in the list of subscribed events occurs, the workflow manager (<b>103</b>) or the media processing task can send a notification report to the destination using the protocol specified in the notification descriptor. A notification report includes a second notification descriptor object that carries the information of the variables and information of the events, and other information of the regular reports, such as the destination, protocol and the like.</p><p id="p-0095" num="0094">In some embodiments, HTTP/1.1 is used as the protocol, and POST method is used for sending the notification reports in POST messages. For example, a body of a POST message includes a notification descriptor object. In some examples, the body of the POST message also includes a request descriptor object in order to identify the notification. In an example, the request descriptor object includes an identification of the request, a priority, and a task identification for the media processing task.</p><p id="p-0096" num="0095"><figref idref="DRAWINGS">FIG. <b>11</b></figref> shows a table of parameters in a notification descriptor and the corresponding types for the parameters and <figref idref="DRAWINGS">FIGS. <b>12</b>A-B</figref> show an example of a notification descriptor schema according to some embodiments of the disclosure. It is noted that system-events include events that belong to the media processing system and can be provided by the cloud in the same format as the events of the function. It is also noted that system-variables include variables that belong to the media processing system and can be provided by the cloud in the same format as the variables of the function. In some embodiments, the (function) variables can be included in a first variables descriptor object, and system variables can be included in a second variables descriptor object; the (function) events can be included in a first events descriptor object, and system events can be included in a second events descriptor object.</p><p id="p-0097" num="0096">According to another aspect of the disclosure, monitoring is an act of an entity requesting information and receiving the requested information. In some embodiments, monitoring can be performed in response to request. In some examples, a monitoring entity (an entity who monitors) sends a monitoring update request to a monitored entity (an entity being monitored). The monitoring update request includes a first monitoring descriptor object defined according to monitoring descriptor. The first monitoring descriptor object can specify, for example, a list of desired variables and event. In response to the monitoring update request, the monitored entity sends to the monitoring entity a monitoring reporting with a second monitoring descriptor object that carries values of the requested variables and a subset of events from the desired events that have occurred.</p><p id="p-0098" num="0097">In the media processing system (<b>100</b>), the monitoring entity can be the NBMP source (<b>101</b>) or the workflow manager (<b>103</b>). The monitored entity can be workflow manager (<b>103</b>) or media processing tasks.</p><p id="p-0099" num="0098">In an example, the workflow manager (<b>103</b>) can send a monitoring update request, via a task API, to a media processing task (e.g., TASK <b>1</b> executed by MPE (<b>113</b>)). The workflow manager (<b>103</b>) can specify the desired variables and events in a first monitoring descriptor object in the monitoring update request. In response to the monitoring update request, the media processing task can send a monitoring report to the workflow manager (<b>103</b>). The monitoring report includes a second monitoring descriptor object that carries the information of the variables and events to report.</p><p id="p-0100" num="0099">In another example, the NBMP source (<b>101</b>) can send a monitoring update request, via workflow API, to the workflow manager (<b>103</b>). The NBMP source (<b>101</b>) can specify the desired variables and events in a first monitoring descriptor object in the monitoring update request. In response to the monitoring update request, the workflow manager (<b>103</b>) can generate a monitoring report and send to the NBMP source (<b>101</b>). A monitoring report includes a second monitoring descriptor object that carries the information of the variables and events to report.</p><p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. <b>13</b></figref> shows a table of parameters in a monitoring descriptor and the corresponding types for the parameters and <figref idref="DRAWINGS">FIG. <b>14</b></figref> shows an example of a monitoring descriptor schema according to some embodiments of the disclosure. It is noted that system-events include events that belong to the media processing system and can be provided by the cloud in the same format as the events of the function. It is also noted that system-variables include variables that belong to the media processing system and can be provided by the cloud in the same format as the variables of the function. In some embodiments, the (function) variables can be included in a first variables descriptor object, and system variables can be included in a second variables descriptor object; the (function) events can be included in a first events descriptor object, and system events can be included in a second events descriptor object.</p><p id="p-0102" num="0101">In some embodiments, HTTP/1.1 is used as the protocol, and POST method is used for sending the monitoring reports in POST messages. For example, a body of a POST message includes a monitoring descriptor object. In some examples, the body of the POST message also includes a request descriptor object in order to identify the monitoring reports.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>15</b></figref> shows a flow chart outlining a process (<b>1500</b>) according to an embodiment of the disclosure. In an example, the process (<b>1500</b>) is executed in a cloud, such as the media processing system (<b>100</b>), and the like. In some embodiments, the process (<b>1500</b>) is implemented in software instructions, thus when the processing circuitry executes the software instructions, the processing circuitry performs the process (<b>1500</b>). The process starts at (S<b>1501</b>) and proceeds to (S<b>1510</b>).</p><p id="p-0104" num="0103">At (S<b>1510</b>), a request including first characteristics associated with a variable is received. The first characteristics associated with the variable can fully describe the variable. For example, the first characteristics include a definition of the variable, a unit of the variable, a format of the variable, a universal identifier of the variable and the like. The variable can be understood based on the first characteristics without cross referencing other texts out of the first characteristics. In some embodiments, the first characteristics are a portion of a first variables descriptor object. The first variables descriptor object includes an array of objects respectively associated with variables. The variables can be function variables or system variables. The request can also include a first events descriptor object that includes an array of objects respectively associated events. The events can be function events or system events.</p><p id="p-0105" num="0104">In an example, the request is sent from the NBMP source (<b>101</b>) to the workflow manager (<b>103</b>). In another example, the request is sent from the workflow manager (<b>103</b>) to a media processing task.</p><p id="p-0106" num="0105">At (S<b>1520</b>), a message is generated, the message includes the first characteristics of the variable and an updated value of the variable.</p><p id="p-0107" num="0106">In an embodiment, the request includes a first reporting descriptor object to request regular reports. The first reporting descriptor object can include a first variable descriptor object associated with variables, a first event descriptor object with associated with events, and a reporting interval. Based on the first reporting descriptor object, a message is generated regularly based on the reporting interval. The message can include a second reporting descriptor object. For example, the second reporting descriptor object includes a second variables descriptor object that is similar to the first variables descriptor object with updated values for the variables. The second reporting descriptor object in the message can also include a second event descriptor object having a subset of events based on occurrences of the events.</p><p id="p-0108" num="0107">In another embodiment, the request includes a first notification descriptor object to request notification report that is triggered by occurrence of events. The first notification descriptor object can include a first variable descriptor object associated with variables, and a first event descriptor object associated with events. Then, in response to an occurrence of at least one of the subscribed events, the message is generated. The message includes a second notification descriptor object that is similar to the first notification descriptor object. For example, the second notification descriptor object includes a second variables descriptor object that is similar to the first variable descriptor object but with updated values for the variables. The second notification descriptor object also includes a second events descriptor object having a subset of the subscribed events.</p><p id="p-0109" num="0108">In another embodiment, the request includes a first monitoring descriptor object to request a monitoring report. The first monitoring descriptor object can include with a first variable descriptor object associated with variables, and a first event descriptor object associated with events. Then, in response to the request, the message is generated. The message includes a second monitoring descriptor object that is similar to the first monitoring descriptor object. For example, the second monitoring descriptor object includes a second variables descriptor object that is similar to the first variable descriptor object but with updated values for the variables. The second monitoring descriptor object also includes a second events descriptor object having a subset of the events.</p><p id="p-0110" num="0109">At (S<b>1530</b>), the message is sent to a recipient, and the process proceeds to S<b>1599</b> and terminates.</p><p id="p-0111" num="0110">In the example of regular report, the first and second reporting descriptor objects include a destination (e.g., url), and the message is sent to the destination.</p><p id="p-0112" num="0111">In the example of notification report, the first and second notification descriptor objects include a destination (e.g., url), and the message is sent to the destination.</p><p id="p-0113" num="0112">In the example of monitoring report, the message is sent to the entity where the request came from.</p><p id="p-0114" num="0113">The process (<b>1500</b>) can be suitably adapted. Step(s) in the process (<b>1500</b>) can be modified and/or omitted. Additional step(s) can be added. Any suitable order of implementation can be used.</p><p id="p-0115" num="0114">The techniques described above, can be implemented as computer software using computer-readable instructions and physically stored in one or more computer-readable media.</p><p id="p-0116" num="0115">The methods and embodiments in the disclosure may be used separately or combined in any order. Further, each of the methods (or embodiments), functions or tasks, may be implemented by processing circuitry (e.g., one or more processors or one or more integrated circuits). In one example, the one or more processors execute a program that is stored in a non-transitory computer-readable medium.</p><p id="p-0117" num="0116">The techniques described above, can be implemented as computer software using computer-readable instructions and physically stored in one or more computer-readable media. For example, <figref idref="DRAWINGS">FIG. <b>16</b></figref> shows a computer system (<b>1600</b>) suitable for implementing certain embodiments of the disclosed subject matter.</p><p id="p-0118" num="0117">The computer software can be coded using any suitable machine code or computer language, that may be subject to assembly, compilation, linking, or like mechanisms to create code comprising instructions that can be executed directly, or through interpretation, micro-code execution, and the like, by one or more computer central processing units (CPUs), Graphics Processing Units (GPUs), and the like.</p><p id="p-0119" num="0118">The instructions can be executed on various types of computers or components thereof, including, for example, personal computers, tablet computers, servers, smartphones, gaming devices, internet of things devices, and the like.</p><p id="p-0120" num="0119">The components shown in <figref idref="DRAWINGS">FIG. <b>16</b></figref> for computer system (<b>1600</b>) are exemplary in nature and are not intended to suggest any limitation as to the scope of use or functionality of the computer software implementing embodiments of the present disclosure. Neither should the configuration of components be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary embodiment of a computer system (<b>1600</b>).</p><p id="p-0121" num="0120">Computer system (<b>1600</b>) may include certain human interface input devices. Such a human interface input device may be responsive to input by one or more human users through, for example, tactile input (such as: keystrokes, swipes, data glove movements), audio input (such as: voice, clapping), visual input (such as: gestures), olfactory input (not depicted). The human interface devices can also be used to capture certain media not necessarily directly related to conscious input by a human, such as audio (such as: speech, music, ambient sound), images (such as: scanned images, photographic images obtain from a still image camera), video (such as two-dimensional video, three-dimensional video including stereoscopic video).</p><p id="p-0122" num="0121">Input human interface devices may include one or more of (only one of each depicted): keyboard (<b>1601</b>), mouse (<b>1602</b>), trackpad (<b>1603</b>), touch screen (<b>1610</b>), data-glove (not shown), joystick (<b>1605</b>), microphone (<b>1606</b>), scanner (<b>1607</b>), camera (<b>1608</b>).</p><p id="p-0123" num="0122">Computer system (<b>1600</b>) may also include certain human interface output devices. Such human interface output devices may be stimulating the senses of one or more human users through, for example, tactile output, sound, light, and smell/taste. Such human interface output devices may include tactile output devices (for example tactile feedback by the touch-screen (<b>1610</b>), data-glove (not shown), or joystick (<b>1605</b>), but there can also be tactile feedback devices that do not serve as input devices), audio output devices (such as: speakers (<b>1609</b>), headphones (not depicted)), visual output devices (such as screens (<b>1610</b>) to include CRT screens, LCD screens, plasma screens, OLED screens, each with or without touch-screen input capability, each with or without tactile feedback capability&#x2014;some of which may be capable to output two dimensional visual output or more than three dimensional output through means such as stereographic output; virtual-reality glasses (not depicted), holographic displays and smoke tanks (not depicted)), and printers (not depicted).</p><p id="p-0124" num="0123">Computer system (<b>1600</b>) can also include human accessible storage devices and their associated media such as optical media including CD/DVD ROM/RW (<b>1620</b>) with CD/DVD or the like media (<b>1621</b>), thumb-drive (<b>1622</b>), removable hard drive or solid state drive (<b>1623</b>), legacy magnetic media such as tape and floppy disc (not depicted), specialized ROM/ASIC/PLD based devices such as security dongles (not depicted), and the like.</p><p id="p-0125" num="0124">Those skilled in the art should also understand that term &#x201c;computer readable media&#x201d; as used in connection with the presently disclosed subject matter does not encompass transmission media, carrier waves, or other transitory signals.</p><p id="p-0126" num="0125">Computer system (<b>1600</b>) can also include an interface to one or more communication networks. Networks can for example be wireless, wireline, optical. Networks can further be local, wide-area, metropolitan, vehicular and industrial, real-time, delay-tolerant, and so on. Examples of networks include local area networks such as Ethernet, wireless LANs, cellular networks to include GSM, 3G, 4G, 5G, LTE and the like, TV wireline or wireless wide area digital networks to include cable TV, satellite TV, and terrestrial broadcast TV, vehicular and industrial to include CANBus, and so forth. Certain networks commonly require external network interface adapters that attached to certain general purpose data ports or peripheral buses (<b>1649</b>) (such as, for example USB ports of the computer system (<b>1600</b>)); others are commonly integrated into the core of the computer system (<b>1600</b>) by attachment to a system bus as described below (for example Ethernet interface into a PC computer system or cellular network interface into a smartphone computer system). Using any of these networks, computer system (<b>1600</b>) can communicate with other entities. Such communication can be uni-directional, receive only (for example, broadcast TV), uni-directional send-only (for example CANbus to certain CANbus devices), or bi-directional, for example to other computer systems using local or wide area digital networks. Certain protocols and protocol stacks can be used on each of those networks and network interfaces as described above.</p><p id="p-0127" num="0126">Aforementioned human interface devices, human-accessible storage devices, and network interfaces can be attached to a core (<b>1640</b>) of the computer system (<b>1600</b>).</p><p id="p-0128" num="0127">The core (<b>1640</b>) can include one or more Central Processing Units (CPU) (<b>1641</b>), Graphics Processing Units (GPU) (<b>1642</b>), specialized programmable processing units in the form of Field Programmable Gate Areas (FPGA) (<b>1643</b>), hardware accelerators for certain tasks (<b>1644</b>), and so forth. These devices, along with Read-only memory (ROM) (<b>1645</b>), Random-access memory (<b>1646</b>), internal mass storage such as internal non-user accessible hard drives, SSDs, and the like (<b>1647</b>), may be connected through a system bus (<b>1648</b>). In some computer systems, the system bus (<b>1648</b>) can be accessible in the form of one or more physical plugs to enable extensions by additional CPUs, GPU, and the like. The peripheral devices can be attached either directly to the core's system bus (<b>1648</b>), or through a peripheral bus (<b>1649</b>). Architectures for a peripheral bus include PCI, USB, and the like.</p><p id="p-0129" num="0128">CPUs (<b>1641</b>), GPUs (<b>1642</b>), FPGAs (<b>1643</b>), and accelerators (<b>1644</b>) can execute certain instructions that, in combination, can make up the aforementioned computer code. That computer code can be stored in ROM (<b>1645</b>) or RAM (<b>1646</b>). Transitional data can be also be stored in RAM (<b>1646</b>), whereas permanent data can be stored for example, in the internal mass storage (<b>1647</b>). Fast storage and retrieve to any of the memory devices can be enabled through the use of cache memory, that can be closely associated with one or more CPU (<b>1641</b>), GPU (<b>1642</b>), mass storage (<b>1647</b>), ROM (<b>1645</b>), RAM (<b>1646</b>), and the like.</p><p id="p-0130" num="0129">The computer readable media can have computer code thereon for performing various computer-implemented operations. The media and computer code can be those specially designed and constructed for the purposes of the present disclosure, or they can be of the kind well known and available to those having skill in the computer software arts.</p><p id="p-0131" num="0130">As an example and not by way of limitation, the computer system having architecture (<b>1600</b>), and specifically the core (<b>1640</b>) can provide functionality as a result of processor(s) (including CPUs, GPUs, FPGA, accelerators, and the like) executing software embodied in one or more tangible, computer-readable media. Such computer-readable media can be media associated with user-accessible mass storage as introduced above, as well as certain storage of the core (<b>1640</b>) that are of non-transitory nature, such as core-internal mass storage (<b>1647</b>) or ROM (<b>1645</b>). The software implementing various embodiments of the present disclosure can be stored in such devices and executed by core (<b>1640</b>). A computer-readable medium can include one or more memory devices or chips, according to particular needs. The software can cause the core (<b>1640</b>) and specifically the processors therein (including CPU, GPU, FPGA, and the like) to execute particular processes or particular parts of particular processes described herein, including defining data structures stored in RAM (<b>1646</b>) and modifying such data structures according to the processes defined by the software. In addition or as an alternative, the computer system can provide functionality as a result of logic hardwired or otherwise embodied in a circuit (for example: accelerator (<b>1644</b>)), which can operate in place of or together with software to execute particular processes or particular parts of particular processes described herein. Reference to software can encompass logic, and vice versa, where appropriate. Reference to a computer-readable media can encompass a circuit (such as an integrated circuit (IC)) storing software for execution, a circuit embodying logic for execution, or both, where appropriate. The present disclosure encompasses any suitable combination of hardware and software.</p><p id="p-0132" num="0131">While this disclosure has described several exemplary embodiments, there are alterations, permutations, and various substitute equivalents, which fall within the scope of the disclosure. It will thus be appreciated that those skilled in the art will be able to devise numerous systems and methods which, although not explicitly shown or described herein, embody the principles of the disclosure and are thus within the spirit and scope thereof.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for cloud service, comprising:<claim-text>receiving, by processing circuitry that operates for a cloud service, a request including a first reporting descriptor object including (i) a first variables descriptor object associated with variables, (ii) a first events descriptor object associated with events, and (iii) a reporting interval;</claim-text><claim-text>generating, by the processing circuitry, at a time within the reporting interval, a message including a second reporting descriptor object with (i) a second variables descriptor object having updated values for the variables and (ii) a second events descriptor object associated with a subset of the events; and</claim-text><claim-text>sending, by the processing circuitry, the message to a recipient.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first variables descriptor object comprises respective definitions of the variables, respective units of the variables, respective formats of the variables, and respective universal identifiers of the variables.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing circuitry is configured to establish and manage a workflow for the cloud service.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the processing circuitry is configured to perform one or more tasks in a workflow for the cloud service.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein<claim-text>the first variables descriptor object describe the events, and</claim-text><claim-text>the second events descriptor object included in the second reporting descriptor object in the generated message indicates an occurrence of the subset of the events.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00005">claim 5</claim-ref>, wherein the variables include at least one of a function variable or a system variable, and the events include at least one of a function event or a system event.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein<claim-text>the events of the first events descriptor object are subscribed events, and</claim-text><claim-text>the second events descriptor object indicates an occurrence of at least one of the subscribed events.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the method further comprises:<claim-text>receiving the request from a monitoring entity;</claim-text><claim-text>generating, in response to the request, the message; and</claim-text><claim-text>sending the message to the monitoring entity.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the message includes a request descriptor object that identifies the request.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. An apparatus for providing a cloud service, comprising:<claim-text>processing circuitry configured to:<claim-text>receive a request including a first reporting descriptor object including (i) a first variables descriptor object associated with variables, (ii) a first events descriptor object associated with events, and (iii) a reporting interval;</claim-text><claim-text>generating, at a time within the reporting interval, a message including a second reporting descriptor object with (i) a second variables descriptor object having updated values for the variables and (ii) a second events descriptor object associated with a subset of the events; and</claim-text><claim-text>sending the message to a recipient.</claim-text></claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the first variables descriptor object comprises respective definitions of the variables, respective units of the variables, respective formats of the variables, and respective universal identifiers of the variables.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processing circuitry is configured to establish and manage a workflow for the cloud service.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processing circuitry is configured to perform one or more tasks in a workflow for the cloud service.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein<claim-text>the first variables descriptor object describe the events, and</claim-text><claim-text>the second events descriptor object included in the second reporting descriptor object in the generated message indicates an occurrence of the subset of the events.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The apparatus of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the variables include at least one of a function variable or a system variable, and the events include at least one of a function event or a system event.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein<claim-text>the events of the first events descriptor object are subscribed events, and</claim-text><claim-text>the second events descriptor object indicates an occurrence of at least one of the subscribed events.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The apparatus of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the processing circuitry is configured to:<claim-text>receive the request from a monitoring entity;</claim-text><claim-text>generate, in response to the request, the message; and</claim-text><claim-text>send the message to the monitoring entity.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The apparatus of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the message includes a request descriptor object that identifies the request.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. A non-transitory computer-readable storage medium storing computer-readable instructions thereon, which, when executed by processing circuitry of a cloud service, cause the processing circuitry to perform a method for cloud service, the method comprising:<claim-text>receiving a request including a first reporting descriptor object including (i) a first variables descriptor object associated with variables, (ii) a first events descriptor object associated with events, and (iii) a reporting interval;</claim-text><claim-text>generating, at a time within the reporting interval, a message including a second reporting descriptor object with (i) a second variables descriptor object having updated values for the variables and (ii) a second events descriptor object associated with a subset of the events; and</claim-text><claim-text>sending the message to a recipient.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer-readable storage medium of <claim-ref idref="CLM-00019">claim 19</claim-ref>, wherein the first variables descriptor object comprises respective definitions of the variables, respective units of the variables, respective formats of the variables, and respective universal identifiers of the variables.</claim-text></claim></claims></us-patent-application>