<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004298A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004298</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17903233</doc-number><date>20220906</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>202010153571.4</doc-number><date>20200306</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0605</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0659</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0634</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">Data Processing Method and Device</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>PCT/CN2021/078734</doc-number><date>20210302</date></document-id><parent-status>PENDING</parent-status></parent-doc><child-doc><document-id><country>US</country><doc-number>17903233</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Huawei Technologies Co., Ltd.</orgname><address><city>Shenzhen</city><country>CN</country></address></addressbook><residence><country>CN</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Shen</last-name><first-name>Yong</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>He</last-name><first-name>Yi</first-name><address><city>Chengdu</city><country>CN</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Cheng</last-name><first-name>Tao</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Li</last-name><first-name>Li</first-name><address><city>Shenzhen</city><country>CN</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Embodiments of this application disclose a data processing method, which is used in a storage system. The method in embodiments of this application includes: A network interface card device receives a first access request of a first client, where the first access request carries an access address; the network interface card device detects whether the first access request has a conflict; and when the network interface card device detects that the first access request has a conflict, the network interface card device processes the conflict according to a processing policy. In embodiments of this application, when a conflict occurs, the network interface card device processes the conflict according to the processing policy. This avoids conflict management performed by a processor of a storage node, and saves a resource of the processor of the storage node.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="76.12mm" wi="93.13mm" file="US20230004298A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="181.69mm" wi="137.33mm" file="US20230004298A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="197.10mm" wi="165.61mm" file="US20230004298A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="164.85mm" wi="124.97mm" file="US20230004298A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of International Application No. PCT/CN2021/078734, filed on Mar. 2, 2021, which claims priority to Chinese Patent Application No. 202010153571.4, filed on Mar. 6, 2020. The disclosures of the aforementioned applications are hereby incorporated by reference in their entireties.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">Embodiments of this application relate to the field of computer technologies, and in particular, to a data processing method and a device thereof.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In a computer application field, a shared volume of a storage system may be accessed by a plurality of users, and read and write may be performed on the shared volume by the plurality of users. When a plurality of users access a same shared volume, software corresponding to the shared volume may be used for conflict management, to avoid a multi-user access conflict.</p><p id="p-0005" num="0004">When the software corresponding to the shared volume is used for conflict management, a storage node corresponding to the shared volume needs to participate in the conflict management, that is, a processor resource of the storage node needs to be occupied.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0006" num="0005">Embodiments of this application provide a data processing method, which is used in data storage. When a write conflict occurs, the conflict is processed by a network interface card device. This avoids participation by a processor of a storage node, and saves a resource of the processor of the storage node.</p><p id="p-0007" num="0006">A first aspect of the embodiments of this application provides a data processing method.</p><p id="p-0008" num="0007">When a first client needs to access a storage node, the first client sends a first access request to a network interface card device corresponding to the storage node. The first access request carries an access address of the storage node that needs to be accessed.</p><p id="p-0009" num="0008">After receiving the first access request, the network interface card device parses the first access request, and detects, based on the access address carried in the first access request, whether the first access request has a conflict.</p><p id="p-0010" num="0009">When detecting that the access address that the first access request requests to access is being accessed, the network interface card device determines that a conflict exists.</p><p id="p-0011" num="0010">After a conflict occurs, the network interface card device processes the conflict according to a processing policy. The processing policy is preset by the network interface card device.</p><p id="p-0012" num="0011">In this embodiment of this application, when a write conflict occurs, conflict management may be performed by using the network interface card device, without participation by a processor of the storage node, thereby saving a resource of the processor of the storage node.</p><p id="p-0013" num="0012">Based on the first aspect of the embodiments of this application, in a first implementation of the first aspect of the embodiments of this application, the first access request sent by the first client is a write request. Before the network interface card device receives the first access request, the network interface card device receives a second write request sent by a second client. If an access address carried in the second write request is the same as that in the first access request, the network interface card device determines, based on the fact that the access address carried in the second write request is the same as that in the first access request, that the first access request conflicts with the second write request.</p><p id="p-0014" num="0013">In this embodiment of this application, the network interface card device determines, based on the fact that the first access request and the second write request have a same access address, that a conflict occurs. This improves implementability of a solution.</p><p id="p-0015" num="0014">Based on the first aspect of the embodiments of this application or the first implementation of the first aspect of the embodiments of this application, in a second implementation of the first aspect of the embodiments of this application, the first access request sent by the first client is a read request. Before the network interface card device receives the first access request, the network interface card device receives a third write request sent by a third client. If an access address carried in the third write request is the same as that carried in the first access request, the network interface card device determines, based on the third write request and the first access request, that the first access request conflicts with the third write request.</p><p id="p-0016" num="0015">In this embodiment of this application, the network interface card device determines, based on the fact that the first access request and the second write request have a same access address, that a conflict occurs. This improves implementability of a solution.</p><p id="p-0017" num="0016">Based on the first aspect, the first implementation of the first aspect, or the second implementation of the first aspect of the embodiments of this application, in a third implementation of the first aspect of the embodiments of this application, the first access request is used to write second data to the access address corresponding to the storage node. The network interface card device determines, based on the access address in the first access request and a status attribute of metadata corresponding to the access address, that a conflict exists. The network interface card device processes the second data according to the processing policy. The processing policy is generated by the network interface card device.</p><p id="p-0018" num="0017">In this embodiment of this application, the network interface card device determines, based on the status attribute of the metadata, that a conflict exists. This improves implementability of a solution.</p><p id="p-0019" num="0018">Based on the first aspect, the first implementation of the first aspect, or the third implementation of the first aspect of the embodiments of this application, in a fourth implementation of the first aspect of the embodiments of this application, when updating, based on the second write request, the status attribute of the metadata corresponding to the access address, the network interface card device updates the status attribute of the metadata corresponding to the access address to writing by the second client.</p><p id="p-0020" num="0019">In this embodiment of this application, the network interface card device updates the status attribute to writing by the second client, to clarify information about a client that is currently performing writing. When the client has a write request subsequently, writing can continue. This improves data writing efficiency.</p><p id="p-0021" num="0020">Based on the first aspect, the first implementation of the first aspect, or the third implementation of the first aspect of the embodiments of this application, in a fifth implementation of the first aspect of the embodiments of this application, when updating, based on the second write request, the status attribute of the metadata corresponding to the access address, the network interface card device updates the status attribute of the metadata corresponding to the access address to a writing state.</p><p id="p-0022" num="0021">In this embodiment of this application, the network interface card device updates the status attribute to the writing state. This improves implementability of a solution.</p><p id="p-0023" num="0022">Based on the first aspect, the first implementation of the first aspect, or the fifth implementation of the first aspect of the embodiments of this application, in a sixth implementation of the first aspect of the embodiments of this application, when processing the second data according to the processing policy, the network interface card device may send a first conflict notification to a processor corresponding to the access address. The first conflict notification indicates that an access address to which the second write request of the second client requests to write data is the same as the access address to which the first access request of the first client requests to write data.</p><p id="p-0024" num="0023">In this embodiment of this application, the network interface card device sends the first conflict notification to the processor, so that the processor performs subsequent processing. This improves implementability of a solution.</p><p id="p-0025" num="0024">Based on the first aspect, the first implementation of the first aspect, or the fifth implementation of the first aspect of the embodiments of this application, in a seventh implementation of the first aspect of the embodiments of this application, when processing the second data according to the processing policy, the network interface card device may directly discard the second data, that is, may not obtain the second data. After discarding the second data, the network interface card device sends a second conflict notification to the first client. The second conflict notification indicates that the access address to which the first access request of the first client requests to write data is the same as an access address to which the second write request of the second client requests to write data.</p><p id="p-0026" num="0025">In this embodiment of this application, the network interface card device directly discards the second data, and sends the second conflict notification to the first client, without processing the second data by using a CPU. This saves a CPU resource.</p><p id="p-0027" num="0026">Based on the first aspect, the first implementation of the first aspect, or the seventh implementation of the first aspect of the embodiments of this application, in an eighth implementation of the first aspect of the embodiments of this application, after the network interface card device writes the data corresponding to the second client to a data block, the network interface card device receives a feedback result sent by the processor. The feedback result indicates that writing of the data corresponding to the second client is completed. The network interface card device invokes, based on the feedback result, a conflict clearing interface integrated in the network interface card device to clear the status attribute of the metadata corresponding to the access address.</p><p id="p-0028" num="0027">In this embodiment of this application, after the writing of the data corresponding to the second client is completed, the network interface card device invokes the conflict clearing interface to clear the status attribute of the metadata, so that the access address can be accessed by a new client. This improves implementability of a solution.</p><p id="p-0029" num="0028">Based on the first aspect, the first implementation of the first aspect, or the eighth implementation of the first aspect of the embodiments of this application, in a ninth implementation of the first aspect of the embodiments of this application, the metadata corresponding to the data block may include: a version number of the data block, a current conflict status of the data block, and/or a number of a client currently accessing the data block, and a corresponding quantity of data blocks.</p><p id="p-0030" num="0029">In this embodiment of this application, a specific composition form of the metadata is illustrated as an example. This improves implementability of a solution.</p><p id="p-0031" num="0030">A second aspect of the embodiments of this application provides a network interface card device.</p><p id="p-0032" num="0031">The network interface card device includes an interface and a processor. The interface communicates with the processor. The interface is configured to receive a first access request of a first client. The first access request carries an access address.</p><p id="p-0033" num="0032">The processor is configured to detect whether the first access request has a conflict; and when detecting that the first access request has a conflict, process the conflict according to a processing policy.</p><p id="p-0034" num="0033">Based on the implementation of the second aspect of the embodiments of this application, in a first implementation of the second aspect of the embodiments of this application, the first access request is a write request. The interface is further configured to: before receiving the first access request of the first client, receive a second write request of a second client. The second write request includes the access address.</p><p id="p-0035" num="0034">The processor is specifically configured to detect that the first access request conflicts with the second write request.</p><p id="p-0036" num="0035">Based on the second aspect of the embodiments of this application or the first implementation of the second aspect of the embodiments of this application, in a second implementation of the second aspect of the embodiments of this application, the first access request is a read request. The interface is further configured to: before receiving the first access request of the first client, receive a third write request of a third client. The third write request includes the access address.</p><p id="p-0037" num="0036">The processor is specifically configured to detect that the first access request conflicts with the third write request.</p><p id="p-0038" num="0037">Based on the second aspect, the first implementation of the second aspect, or the second implementation of the second aspect of the embodiments of this application, in a third implementation of the second aspect of the embodiments of this application, the first access request is used to write second data to the access address.</p><p id="p-0039" num="0038">The processor is specifically configured to determine, based on the first access request and metadata, that a conflict exists. The metadata represents a status attribute of the access address.</p><p id="p-0040" num="0039">The processor is specifically configured to process the second data according to the processing policy. The processing policy is generated by the processor.</p><p id="p-0041" num="0040">Based on the second aspect, the first implementation of the second aspect, or the third implementation of the second aspect of the embodiments of this application, in a fourth implementation of the second aspect of the embodiments of this application, the processor is further configured to update, based on the second write request, the status attribute of the metadata to writing by the second client.</p><p id="p-0042" num="0041">Based on the second aspect, the first implementation of the second aspect, or the third implementation of the second aspect of the embodiments of this application, in a fifth implementation of the second aspect of the embodiments of this application, the processor is further configured to update the status attribute of the metadata to a writing state based on the second write request.</p><p id="p-0043" num="0042">Based on the second aspect, the first implementation of the second aspect, or the fifth implementation of the second aspect of the embodiments of this application, in a sixth implementation of the second aspect of the embodiments of this application, the processor of the network interface card device is configured to send a first conflict notification to a processor corresponding to the access address. The first conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0044" num="0043">Based on the second aspect, the first implementation of the second aspect, or the fifth implementation of the second aspect of the embodiments of this application, in a seventh implementation of the second aspect of the embodiments of this application, the processor is configured to discard the second data.</p><p id="p-0045" num="0044">The interface is further configured to send a second conflict notification to the first client. The second conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0046" num="0045">Based on the second aspect, the first implementation of the second aspect, or the seventh implementation of the second aspect of the embodiments of this application, in an eighth implementation of the second aspect of the embodiments of this application, the interface is further configured to receive a feedback result sent by the processor corresponding to the access address. The feedback result indicates that writing of data of the second write request is completed.</p><p id="p-0047" num="0046">The processor is further configured to clear the status attribute of the metadata based on the feedback result.</p><p id="p-0048" num="0047">Based on the second aspect, the first implementation of the second aspect, or the eighth implementation of the second aspect of the embodiments of this application, in a ninth implementation of the second aspect of the embodiments of this application, the status attribute of the metadata includes at least one of the following: a version number, a conflict status, or a number of a client currently performing access.</p><p id="p-0049" num="0048">A third aspect of the embodiments of this application provides a network interface card device, including: a receiving unit, configured to receive a first access request of a first client, where the first access request carries an access address; and a processing unit, configured to detect whether the first access request has a conflict; where when detecting that the first access request has a conflict, the processing unit processes the conflict according to a processing policy.</p><p id="p-0050" num="0049">Based on the implementation of the third aspect of the embodiments of this application, in a first implementation of the third aspect of the embodiments of this application, the first access request is a write request. The receiving unit is further configured to: before receiving the first access request of the first client, receive a second write request of a second client. The second write request includes the access address.</p><p id="p-0051" num="0050">The processing unit is specifically configured to detect that the first access request conflicts with the second write request.</p><p id="p-0052" num="0051">Based on the third aspect of the embodiments of this application or the first implementation of the third aspect of the embodiments of this application, in a second implementation of the third aspect of the embodiments of this application, the first access request is a read request. Before receiving the first access request of the first client, the receiving unit receives a third write request of a third client. The third write request includes the access address.</p><p id="p-0053" num="0052">The processing unit is specifically configured to detect that the first access request conflicts with the third write request.</p><p id="p-0054" num="0053">Based on the third aspect, the first implementation of the third aspect, or the second implementation of the third aspect of the embodiments of this application, in a third implementation of the third aspect of the embodiments of this application, the first access request is used to write second data to the access address.</p><p id="p-0055" num="0054">The processing unit is specifically configured to determine, based on the first access request and metadata, that a conflict exists. The metadata represents a status attribute of the access address.</p><p id="p-0056" num="0055">The processing unit is specifically configured to process the second data according to the processing policy. The processing policy is generated by the processing unit.</p><p id="p-0057" num="0056">Based on the third aspect, the first implementation of the third aspect, or the third implementation of the third aspect of the embodiments of this application, in a fourth implementation of the third aspect of the embodiments of this application, the processing unit is further configured to update, based on the second write request, the status attribute of the metadata to writing by the second client.</p><p id="p-0058" num="0057">Based on the third aspect, the first implementation of the third aspect, or the third implementation of the third aspect of the embodiments of this application, in a fifth implementation of the third aspect of the embodiments of this application, the processing unit is further configured to update the status attribute of the metadata to a writing state based on the second write request.</p><p id="p-0059" num="0058">Based on the third aspect, the first implementation of the third aspect, or the fifth implementation of the third aspect of the embodiments of this application, in a sixth implementation of the third aspect of the embodiments of this application, the network interface card device further includes: a sending unit, configured to send a first conflict notification to a processor corresponding to the access address. The first conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0060" num="0059">Based on the third aspect, the first implementation of the third aspect, or the fifth implementation of the third aspect of the embodiments of this application, in a seventh implementation of the third aspect of the embodiments of this application, the processing unit is configured to discard the second data.</p><p id="p-0061" num="0060">The network interface card device further includes a sending unit configured to send a second conflict notification to the first client. The second conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0062" num="0061">Based on the third aspect, the first implementation of the third aspect, or the seventh implementation of the third aspect of the embodiments of this application, in an eighth implementation of the third aspect of the embodiments of this application, the receiving unit is further configured to receive a feedback result sent by the processor. The feedback result indicates that writing of data of the second write request is completed.</p><p id="p-0063" num="0062">The processing unit is further configured to clear the status attribute of the metadata based on the feedback result.</p><p id="p-0064" num="0063">Based on the third aspect, the first implementation of the third aspect, or the eighth implementation of the third aspect of the embodiments of this application, in a ninth implementation of the third aspect of the embodiments of this application, the status attribute of the metadata includes at least one of the following: a version number, a conflict status, or a number of a client currently performing access.</p><p id="p-0065" num="0064">A fourth aspect of the embodiments of this application provides a computer storage medium. The computer storage medium stores instructions. When the instructions are executed on a computer, the computer is enabled to perform the method according to any one of the implementations of the first aspect of this application.</p><p id="p-0066" num="0065">A fifth aspect of the embodiments of this application provides a computer program product. When the computer program product is executed on a computer, the computer is enabled to perform the method according to the implementation of the first aspect of this application.</p><p id="p-0067" num="0066">It can be learned from the foregoing technical solutions that embodiments of this application have the following advantages:</p><p id="p-0068" num="0067">In the embodiments of this application, when a write conflict occurs, first data to be written to a same data block is processed according to the processing policy generated by the network interface card device. This avoids participation by the processor of the storage node, and saves a resource of the processor of the storage node.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of a storage system framework according to an embodiment of this application;</p><p id="p-0070" num="0069"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is another schematic diagram of a storage system framework according to an embodiment of this application;</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic flowchart of a data processing method according to an embodiment of this application;</p><p id="p-0072" num="0071"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of a structure of a network interface card device according to an embodiment of this application;</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of another structure of a network interface card device according to an embodiment of this application; and</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of another structure of a network interface card device according to an embodiment of this application.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DESCRIPTION OF EMBODIMENTS</heading><p id="p-0075" num="0074">Embodiments of this application provide a data processing method, which is used in data storage. When an access conflict occurs, the conflict is processed according to a processing policy generated by a network interface card device. This avoids participation by a processor of a storage node, and saves a resource of the processor of the storage node.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic diagram of a storage system framework according to this application.</p><p id="p-0077" num="0076">An embodiment of this application provides a storage system framework. The storage system framework includes at least two clients: a first client <b>101</b> and a second client <b>102</b>, and at least one storage node <b>103</b>.</p><p id="p-0078" num="0077">The first client <b>101</b> and the second client <b>102</b> each include a network interface card (NIC) device, and the storage node <b>103</b> includes a network interface card (NIC) device. The storage node <b>103</b> further includes a processor, such as a central processing unit (CPU).</p><p id="p-0079" num="0078">The first client is configured to store data onto the storage node <b>103</b>.</p><p id="p-0080" num="0079">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the network interface card device of the storage node in this embodiment of this application includes a conflict detector. Metadata is preset in the conflict detector. Different metadata Sn corresponds to a different data block block n in the storage node. It should be noted that, one piece of metadata may correspond to one data block. Alternatively, one piece of metadata may correspond to a plurality of data blocks. This is not specifically limited herein. The data block is an address at which a client accesses data, that is, an access address.</p><p id="p-0081" num="0080">It should be noted that, a size of one data block may be configured to be 4K or 64K. It can be understood that, another size may be configured, for example, 128K. This is not specifically limited herein.</p><p id="p-0082" num="0081">When the first client needs to write data to a corresponding data block block 1, metadata S1 corresponding to the conflict detector of the network interface card device is used for determining. When no other client is writing data to the data block, the first client can write the data to the data block.</p><p id="p-0083" num="0082">In an actual application process, the data storage node may be simultaneously accessed by a plurality of clients. When a plurality of clients simultaneously request to write data to a same data block, the network interface card device performs corresponding processing.</p><p id="p-0084" num="0083">The following describes the data processing method in this embodiment of this application with reference to the storage system frameworks in <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0085" num="0084"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic flowchart of an embodiment of a data processing method according to this application.</p><p id="p-0086" num="0085">In step <b>301</b>, a second client sends a second write request to a network interface card device.</p><p id="p-0087" num="0086">When the second client needs to write data to a storage node, the second client sends the second write request to the network interface card device corresponding to the storage node. The second write request is used to write the data of the second client to a data block in the storage node, that is, to an access address carried in the second write request.</p><p id="p-0088" num="0087">It can be understood that, in an actual application process, based on a size of the data that the second client requests to write, the second write request of the second client may be sent to a network interface card device of a buffer memory corresponding to the storage node, or may be directly sent to a network interface card device of the storage node. This is not specifically limited herein.</p><p id="p-0089" num="0088">Before the second client sends the second write request to the network interface card device, at an initialization stage of a storage system, service software corresponding to the storage node registers information about a shared resource of the storage node with the network interface card device. The information about the shared resource includes but is not limited to a start address of a data block of the storage node, a size of a data block of the shared resource, and a quantity of data blocks of the shared resource. That is, the quantity of corresponding data blocks, the size of the data block, and the start address of the data block are recorded by using metadata in the storage node.</p><p id="p-0090" num="0089">At the initialization stage of the storage system, the storage node further sets a corresponding processing policy, and initializes the conflict detector on the network interface card device. The processing policy is used to process a read/write conflict when the read/write conflict occurs.</p><p id="p-0091" num="0090">In step <b>302</b>, the network interface card device updates, based on the second write request, a status attribute of the metadata to writing by the second client.</p><p id="p-0092" num="0091">After the network interface card device receives the second write request sent by the second client, the network interface card device parses the data in the second write request, that is, parses an I/O data packet corresponding to the data in the second write request, to obtain an access type and a data block (an access address) to which the I/O data packet corresponding to the data of the second write request is to be written. The access type includes a write request or a read request. The network interface card device determines the status attribute of the metadata corresponding to the data block to which the data is to be written. When the status attribute of the metadata corresponding to the data block is empty, the network interface card device writes the data of the second write request to the corresponding data block, and updates the status attribute of the metadata to writing by the second client. Writing by the second client indicates that the second client is writing the data to the corresponding data block. In another implementation, the status attribute indicates that no access conflict exists. The network interface card device writes the data of the second write request to the corresponding data block, and updates the status attribute of the metadata to writing by the second client. Writing by the second client indicates that the second client is writing the data to the corresponding data block.</p><p id="p-0093" num="0092">It can be understood that, in an actual application process, when the data of the second write request is being written to the corresponding data block, the status attribute of the metadata may alternatively be another status attribute, for example, may be updated to a writing state. The writing state indicates that data is being written to the data block. It can be understood that, there may be a status attribute in another form, provided that the status attribute can indicate that data is being input to a corresponding data block. This is not specifically limited in this embodiment of this application.</p><p id="p-0094" num="0093">In an actual application process, the metadata may include but is not limited to one or more of a version number of the data block, a conflict status of the data block, and an ID of a client recently accessing the data block.</p><p id="p-0095" num="0094">For example, version 1.0 is used to represent the version number of the data block. It can be understood that, the version number of the data block may alternatively be represented in another form, for example, V1.1. This is not specifically limited herein.</p><p id="p-0096" num="0095">For example, the status attribute of the data block is identified by using a bitmap. It can be understood that, the status attribute of the data block may alternatively be represented in another form. This is not specifically limited herein.</p><p id="p-0097" num="0096">For example, an owner ID (owner id), that is, a client ID, may be used to represent a last client accessing a data block. It can be understood that, the last client accessing a data block may alternatively be represented in another form. This is not specifically limited herein.</p><p id="p-0098" num="0097">In step <b>303</b>, a first client sends a first access request to the network interface card device.</p><p id="p-0099" num="0098">After the network interface card device updates the status attribute of the metadata, if the first client needs to access the storage node, for example, needs to write data to the storage node, the first client sends the first access request to the network interface card device corresponding to the storage node. The first access request is used to write second data of the first client to the data block in the storage node.</p><p id="p-0100" num="0099">It can be understood that, the first access request may be alternatively used to read data in the storage node. This is not specifically limited herein.</p><p id="p-0101" num="0100">In step <b>304</b>, the network interface card device determines a conflict exist based on the first access request and the metadata.</p><p id="p-0102" num="0101">When the network interface card device receives the first access request sent by the first client, and when the first access request is a write request, the network interface card device parses the second data in the first access request, that is, parses an I/O data packet corresponding to the second data, to obtain an access type and a data block (an access address) that the I/O data packet corresponding to the second data is to be written. The access type includes a write request or a read request. The network interface card device searches for the corresponding metadata based on the access address corresponding to the second data, and checks the status attribute of the metadata. When the access address to which the I/O data packet corresponding to the second data needs to be written is the same as the access address to which the I/O data packet corresponding to the data of the second write request needs to be written, that is, when the status attribute of the metadata is writing by the second client, the network interface card device determines that a conflict occurs.</p><p id="p-0103" num="0102">It can be understood that, when the first access request is a read request, based on the fact that the address from which data needs to be read is the same as the address to which the data of the second write request is to be written, the network interface card device determines that a conflict occurs. When the first access request is a write request, the network interface card device also determines that a conflict occurs.</p><p id="p-0104" num="0103">In step <b>305</b>, the network interface card device processes the conflict according to the processing policy.</p><p id="p-0105" num="0104">When the network interface card device determines that a conflict occurs, the network interface card device invokes a different preset processing policy, and processes the conflict according to the different processing policy, so as to process the second data in a different way.</p><p id="p-0106" num="0105">For example, when the first access request is a write request, the processing policy may be: sending the I/O data packet corresponding to the second data to the service software of the storage node, that is, sending the I/O data packet corresponding to the second data to the processor of the storage node, and sending a first conflict notification to the processor. The first conflict notification indicates that the second write request sent by the second client conflicts with the first access request sent by the first client, that is, the data block to which the data of the second write request needs to be written is the same as the data block to which the data of the first access request is being written.</p><p id="p-0107" num="0106">After obtaining the first conflict notification and the second data, the processor performs further processing on the second data.</p><p id="p-0108" num="0107">For example, after obtaining the second data, the processor writes the second data to a corresponding log area according to a time sequence of obtaining the second data, and after the writing of the data of the second write request is completed, writes the second data to the corresponding data block.</p><p id="p-0109" num="0108">In an actual application process, a plurality of clients may simultaneously send write requests to the network interface card device for a same data block. When the network interface card device sends, to the processor, data that needs to be written by the plurality of clients, after a current client completes writing to the data block, the processor may further write, to the data block according to a sequence of writing to the log area, the data that needs to be written by the plurality of clients to the data block.</p><p id="p-0110" num="0109">It should be noted that, in an actual application process, the second data may alternatively be processed by using another processing policy. For example, the processing policy may be that the network interface card device discards the second data.</p><p id="p-0111" num="0110">When the network interface card device determines that a write conflict occurs, the network interface card device does not process the second data, that is, discards the second data, and sends a second conflict notification to the first client. The second conflict notification is used to indicate that the second write request sent by the second client conflicts with the first access request sent by the first client. To be specific, the data block to which the data of the second write request needs to be written is the same as the data block to which the data of the first access request is being written.</p><p id="p-0112" num="0111">After receiving the second conflict notification sent by the network interface card device, the first client performs further processing.</p><p id="p-0113" num="0112">For example, after receiving the second conflict notification, the first client quits inputting the second data, that is, no longer sends a write request for the second data to the network interface card device.</p><p id="p-0114" num="0113">It can be understood that, after the first client receives the second conflict notification sent by the network interface card device, the first client may further have another processing manner.</p><p id="p-0115" num="0114">For example, after the first client receives the second conflict notification, the first client continues to generate a new write request, where the new write request is used to request to write the second data to a corresponding data block; and the first client continues to send the new write request to the network interface card device.</p><p id="p-0116" num="0115">It can be understood that, the first client may further have another processing manner. For example, after receiving the second conflict notification, the first client waits for specific duration and then sends a new write request to the network interface card device. A specific processing manner of the first client is not limited in this embodiment of this application.</p><p id="p-0117" num="0116">It can be understood that, the network interface card device may further process the second data by using another processing policy. This is not specifically limited herein.</p><p id="p-0118" num="0117">When the first access request is a read request, the network interface card device may directly discard the read request, and send the second conflict notification to the first client, so that the first client performs subsequent processing.</p><p id="p-0119" num="0118">In step <b>306</b>, the processor sends a feedback result to the network interface card device.</p><p id="p-0120" num="0119">After the network interface card device writes the data of the second write request, when the status attribute of the metadata is writing by the second client, the second client continues to send a new write request to the network interface card device, to request to write new data to the data block. In this case, the status attribute of the metadata corresponding to the data block is a state of writing by the second client, that is, the network interface card device determines that the new write request has no conflict. In this case, the network interface card device continues to write the new data of the second client to the data block. After the network interface card device writes the data, the processor obtains the corresponding data written to the storage node. When writing of all data is completed, the processor sends a feedback result to the network interface card device. The feedback result is used to indicate that writing of all current data of the second client is completed.</p><p id="p-0121" num="0120">In step <b>307</b>, the network interface card device clears the status attribute of the metadata based on the feedback result.</p><p id="p-0122" num="0121">When the network interface card device receives the feedback result sent by the processor, the network interface card device invokes a conflict clearing interface of the network interface card device based on the feedback result, to clear the status attribute of the metadata corresponding to the data block, for example, clear an owner ID of the metadata and a status attribute indicated by a corresponding bitmap; and updates a version number corresponding to the data block.</p><p id="p-0123" num="0122">After the status attribute of the metadata corresponding to the data block is cleared, when another client has a write request and needs to write data to the data block, the network interface card device determines, based on a current status attribute of the metadata, that the write request has no conflict, and writes the data of the another client to the data block.</p><p id="p-0124" num="0123">In an actual application process, step <b>306</b> and step <b>307</b> are optional steps. The network interface card device may alternatively not clear the status attribute of the metadata based on the feedback result of the processor. For example, when the first client performs writing, the network interface card device starts a timer, and when the timer expires, the network interface card device clears the status attribute of the metadata corresponding to the data block. This is not specifically limited herein.</p><p id="p-0125" num="0124">In this embodiment of this application, when a conflict occurs, the network interface card device processes the conflict according to the processing policy. This avoids conflict management performed by using the software, and saves a resource of the processor of the storage node.</p><p id="p-0126" num="0125">The foregoing describes the data processing method in the embodiments of this application. The following describes a network interface card device in the embodiments of this application. <figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic diagram of a structure of an embodiment of the network interface card device according to this application.</p><p id="p-0127" num="0126">The network interface card device includes an interface <b>401</b> and a processor <b>402</b>. The interface <b>401</b> communicates with the processor <b>402</b>. The interface <b>401</b> is configured to receive a first access request of a first client. The first access request carries an access address.</p><p id="p-0128" num="0127">The processor <b>402</b> is configured to detect whether the first access request has a conflict; and when detecting that the first access request has a conflict, process the conflict according to a processing policy.</p><p id="p-0129" num="0128">In this embodiment, operations performed by the interface <b>401</b> and the processor <b>402</b> in the network interface card device are similar to those described in the embodiment shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and details are not described herein again.</p><p id="p-0130" num="0129">Optionally, the first access request is a write request. The interface <b>401</b> is further configured to: before receiving the first access request of the first client, receive a second write request of a second client. The second write request includes the access address.</p><p id="p-0131" num="0130">The processor <b>402</b> is specifically configured to detect that the first access request conflicts with the second write request.</p><p id="p-0132" num="0131">Optionally, the first access request is a read request. The interface <b>401</b> is further configured to: before receiving the first access request of the first client, receive a third write request of a third client. The third write request includes the access address.</p><p id="p-0133" num="0132">The processor <b>402</b> is specifically configured to detect that the first access request conflicts with the third write request.</p><p id="p-0134" num="0133">Optionally, the first access request is used to write second data to a data block.</p><p id="p-0135" num="0134">The processor <b>402</b> is specifically configured to determine, based on the first access request and metadata, that a conflict exists. The metadata represents a status attribute of the data block.</p><p id="p-0136" num="0135">The processor <b>402</b> is specifically configured to process the second data according to the processing policy. The processing policy is generated by the processor.</p><p id="p-0137" num="0136">Optionally, the processor <b>402</b> is further configured to update, based on the second write request, the status attribute of the metadata to writing by the second client.</p><p id="p-0138" num="0137">Optionally, the processor <b>402</b> is further configured to update the status attribute of the metadata to a writing state based on the second write request.</p><p id="p-0139" num="0138">Optionally, the interface <b>401</b> is configured to send a first conflict notification to a processor corresponding to the access address. The first conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0140" num="0139">Optionally, the processor <b>402</b> is configured to discard the second data.</p><p id="p-0141" num="0140">The interface <b>401</b> is further configured to send a second conflict notification to the first client. The second conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0142" num="0141">Optionally, the interface <b>401</b> is further configured to receive a feedback result sent by the processor corresponding to the access address. The feedback result indicates that writing of data of the second write request is completed.</p><p id="p-0143" num="0142">The processor <b>402</b> is further configured to clear the status attribute of the metadata based on the feedback result.</p><p id="p-0144" num="0143">Optionally, the status attribute of the metadata includes at least one of the following: a version number, a conflict status, a number of a client currently performing access, or the corresponding data block.</p><p id="p-0145" num="0144">In this embodiment, operations performed by the interface <b>401</b> and the processor <b>402</b> in the network interface card device are similar to those described in the embodiment shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and details are not described herein again.</p><p id="p-0146" num="0145"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic diagram of a structure of another embodiment of a network interface card device according to this application.</p><p id="p-0147" num="0146">a receiving unit <b>501</b>, configured to receive a first access request of a first client, where the first access request carries an access address; and a processing unit <b>502</b>, configured to detect whether the first access request has a conflict; where when detecting that the first access request has a conflict, the processing unit <b>502</b> processes the conflict according to a processing policy.</p><p id="p-0148" num="0147">In this embodiment, operations performed by the units in the network interface card device are similar to those described in the embodiment shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and details are not described herein again.</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic diagram of a structure of another embodiment of a network interface card device according to this application.</p><p id="p-0150" num="0149">a receiving unit <b>601</b>, configured to receive a first access request of a first client, where the first access request carries an access address; and a processing unit <b>602</b>, configured to detect whether the first access request has a conflict; where when detecting that the first access request has a conflict, the processing unit <b>602</b> processes the conflict according to a processing policy.</p><p id="p-0151" num="0150">Optionally, the first access request is a write request. The receiving unit <b>601</b> is further configured to: before receiving the first access request of the first client, receive a second write request of a second client. The second write request includes the access address.</p><p id="p-0152" num="0151">The processing unit <b>602</b> is specifically configured to detect that the first access request conflicts with the second write request.</p><p id="p-0153" num="0152">Optionally, the first access request is a read request. Before receiving the first access request of the first client, the receiving unit <b>601</b> receives a third write request of a third client. The third write request includes the access address.</p><p id="p-0154" num="0153">The processing unit <b>602</b> is specifically configured to detect that the first access request conflicts with the third write request.</p><p id="p-0155" num="0154">Optionally, the first access request is used to write second data to the access address.</p><p id="p-0156" num="0155">The processing unit <b>602</b> is specifically configured to determine, based on the first access request and metadata, that a conflict exists. The metadata represents a status attribute of the access address.</p><p id="p-0157" num="0156">The processing unit <b>602</b> is specifically configured to process the second data according to the processing policy. The processing policy is generated by the processing unit.</p><p id="p-0158" num="0157">Optionally, the processing unit <b>602</b> is further configured to update, based on the second write request, the status attribute of the metadata to writing by the second client.</p><p id="p-0159" num="0158">Optionally, the processing unit <b>602</b> is further configured to update the status attribute of the metadata to a writing state based on the second write request.</p><p id="p-0160" num="0159">Optionally, the network interface card device further includes: a sending unit <b>603</b>, configured to send a first conflict notification to a processor corresponding to the access address. The first conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0161" num="0160">Optionally, the processing unit <b>602</b> is configured to discard the second data.</p><p id="p-0162" num="0161">The sending unit <b>603</b> is further configured to send a second conflict notification to the first client. The second conflict notification is used to indicate that the first access request conflicts with the second write request.</p><p id="p-0163" num="0162">Optionally, the receiving unit <b>601</b> is further configured to receive a feedback result sent by the processor. The feedback result indicates that writing of data of the second write request is completed.</p><p id="p-0164" num="0163">The processing unit <b>602</b> is further configured to clear the status attribute of the metadata based on the feedback result.</p><p id="p-0165" num="0164">Optionally, the status attribute of the metadata includes at least one of the following: a version number, a conflict status, or a number of a client currently performing access.</p><p id="p-0166" num="0165">In this embodiment, operations performed by the units in the network interface card device are similar to those described in the embodiment shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, and details are not described herein again.</p><p id="p-0167" num="0166">An embodiment of this application further provides a computer-readable storage medium in which a computer program is stored. When the computer program is executed by a computer, a method process related to the network interface card device in any of the foregoing method embodiments is implemented.</p><p id="p-0168" num="0167">A storage node in this embodiment of the present invention may be a storage node in a distributed storage system, or may be an array controller in a storage array. This is not limited in the present invention.</p><p id="p-0169" num="0168">It should be understood that, the processor mentioned in the foregoing embodiments of this application may be a central processing unit (CPU), or may be another general-purpose processor, a digital signal processor (DSP), an application-specific integrated circuit (ASIC), a field programmable gate array (FPGA) or another programmable logic device, a discrete gate or transistor logic device, a discrete hardware component, or the like. The general-purpose processor may be a microprocessor, or the processor may be any conventional processor or the like.</p><p id="p-0170" num="0169">It should be further understood that, in the foregoing embodiments of this application, there may be one or more processors, and a quantity of processors may be adjusted based on an actual application scenario. This is merely an example for description, and is not limited herein. There may be one or more memories in embodiments of this application. A quantity of memories may be adjusted based on an actual application scenario. This is merely an example for description herein, and is not limited.</p><p id="p-0171" num="0170">It should be further understood that, in the embodiments of this application, the memory, the readable storage medium, or the like described in the foregoing embodiments may be a volatile memory or a non-volatile memory, or may include both a volatile memory and a non-volatile memory. The non-volatile memory may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or a flash memory. The volatile memory may be a random access memory (RAM), used as an external cache. By way of example and not limitation, RAMs in many forms may be used, for example, a static random access memory (SRAM), a dynamic random access memory (DRAM), a synchronous dynamic random access memory (SDRAM), a double data rate synchronous dynamic random access memory (DDR SDRAM), an enhanced synchronous dynamic random access memory (ESDRAM), a synchlink dynamic random access memory (SLDRAM), and a direct rambus random access memory (DR RAM).</p><p id="p-0172" num="0171">An embodiment of this application further provides a computer program or a computer program product including the computer program. When the computer program is executed on a computer, the computer is enabled to implement a method procedure related to the network interface card device in any one of the foregoing method embodiments.</p><p id="p-0173" num="0172">All or a part of the embodiment in <figref idref="DRAWINGS">FIG. <b>3</b></figref> may be implemented by using software, hardware, firmware, or any combination thereof. When software is used to implement the embodiment, all or a part of the embodiment may be implemented in a form of a computer program product.</p><p id="p-0174" num="0173">The computer program product includes one or more computer instructions. When the computer program instructions are loaded and executed on a computer, all or some of the procedures or the functions according to embodiments of this application are generated. The computer may be a general-purpose computer, a dedicated computer, a computer network, or another programmable apparatus. The computer instructions may be stored in a computer-readable storage medium or may be transmitted from a computer-readable storage medium to another computer-readable storage medium. For example, the computer instructions may be transmitted from a web site, computer, server, or data center to another website, computer, server, or data center in a wired (for example, a coaxial cable, an optical fiber, or a digital subscriber line (DSL)) or wireless (for example, infrared, radio, or microwave) manner. The computer-readable storage medium may be any usable medium accessible by the computer, or a data storage device, such as a server or a data center, integrating one or more usable media. The usable medium may be a magnetic medium (for example, a floppy disk, a hard disk, or a magnetic tape), an optical medium (for example, a DVD), a semiconductor medium (for example, a solid-state disk (SSD)), or the like.</p><p id="p-0175" num="0174">A person skilled in the art may clearly understand that, for the purpose of convenient and brief description, for detailed working processes of the foregoing system, apparatus, and unit, refer to corresponding processes in the foregoing method embodiments. Details are not described herein again.</p><p id="p-0176" num="0175">In the several embodiments provided in this application, it should be understood that the disclosed system, apparatus, and method may be implemented in other manners. For example, the described apparatus embodiments are merely examples. For example, division into units is merely logical function division and may be other division during actual implementation. For example, a plurality of units or components may be combined or integrated into another system, or some features may be ignored or not performed. In addition, the displayed or discussed mutual couplings or direct couplings or communication connections may be implemented through some interfaces. The indirect couplings or communication connections between the apparatuses or the units may be implemented in electronic, mechanical, or other forms.</p><p id="p-0177" num="0176">The units described as separate components may or may not be physically separate, and components displayed as units may or may not be physical units. To be specific, the components may be located at one position, or may be distributed on a plurality of network units. Some or all of the units may be selected based on actual requirements to achieve the objectives of the solutions of the embodiments.</p><p id="p-0178" num="0177">In addition, functional units in embodiments of this application may be integrated into one processing unit, or each of the units may exist alone physically, or two or more units may be integrated into one unit. The integrated unit may be implemented in a form of hardware, or may be implemented in a form of a software functional unit.</p><p id="p-0179" num="0178">When the integrated unit is implemented in the form of the software functional unit and sold or used as an independent product, the integrated unit may be stored in a computer-readable storage medium. Based on such an understanding, the technical solutions of this application essentially, or the part contributing to the conventional technology, or all or some of the technical solutions may be implemented in a form of a software product. The computer software product is stored in a storage medium and includes several instructions for instructing a computer device (which may be a personal computer, a server, or a network device) to perform all or some of the steps of the method described in the embodiment in <figref idref="DRAWINGS">FIG. <b>3</b></figref> of this application. The storage medium includes any medium that can store program code, such as a USB flash drive, a removable hard disk, a read-only memory (ROM), a random access memory (RAM), a magnetic disk, or an optical disc.</p><p id="p-0180" num="0179">In the specification, claims, and accompanying drawings of this application, the terms &#x201c;first&#x201d;, &#x201c;second&#x201d;, and the like are intended to distinguish similar objects but do not necessarily indicate a specific order or sequence. It should be understood that the terms used in such a way are interchangeable in appropriate circumstances. This is merely a discrimination manner that is used when objects having a same attribute are described in embodiments of this application. In addition, the terms &#x201c;include&#x201d;, &#x201c;have&#x201d;, and any other variations thereof are intended to cover the non-exclusive inclusion, so that a process, method, system, product, or device that includes a series of units is not limited to those units, but may include other units not expressly listed or inherent to such a process, method, product, or device.</p><p id="p-0181" num="0180">Names of messages/frames/information, modules, units, or the like provided in embodiments of this application are merely examples, and other names may be used provided that the messages/frames/information, modules, units, or the like have same functions.</p><p id="p-0182" num="0181">The terms used in embodiments of this application are merely for the purpose of illustrating specific embodiments, and are not intended to limit the present invention. The terms &#x201c;a&#x201d;, &#x201c;the&#x201d;, and &#x201c;this&#x201d; of singular forms used in embodiments of this application are also intended to include plural forms, unless otherwise specified in a context clearly. It should be further understood that in the descriptions of this application, &#x201c;/&#x201d; represents an &#x201c;or&#x201d; relationship between associated objects unless otherwise specified. For example, A/B may represent A or B. The term &#x201c;and/or&#x201d; in this application is merely an association relationship for describing associated objects, and represents that three relationships may exist. For example, A and/or B may represent the following three cases: Only A exists, both A and B exist, and only B exists, where A and B each may be singular or plural.</p><p id="p-0183" num="0182">Depending on the context, for example, the word &#x201c;if&#x201d; used herein may be explained as &#x201c;while&#x201d; or &#x201c;when&#x201d; or &#x201c;in response to determining&#x201d; or &#x201c;in response to detecting&#x201d;. Similarly, depending on the context, the phrase &#x201c;if determining&#x201d; or &#x201c;if detecting (a stated condition or event)&#x201d; may be explained as &#x201c;when determining&#x201d; or &#x201c;in response to determining&#x201d; or &#x201c;when detecting (the stated condition or event)&#x201d; or &#x201c;in response to detecting (the stated condition or event)&#x201d;.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A data processing method, wherein the method comprises:<claim-text>receiving, by a network interface card device, a first access request of a first client, wherein the first access request carries an access address;</claim-text><claim-text>detecting, by the network interface card device, whether the first access request has a conflict; and</claim-text><claim-text>when the network interface card device detects that the first access request has a conflict, processing, by the network interface card device, the conflict according to a processing policy.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first access request is a write request, and before the receiving, by a network interface card device, a first access request of a first client, the method further comprises: receiving, by the network interface card device, a second write request of a second client, wherein the second write request comprises the access address; and that the network interface card device detects that the first access request has a conflict is specifically: the network interface card device detects that the first access request conflicts with the second write request.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first access request is a read request, and before the receiving, by a network interface card device, a first access request of a first client, the method further comprises: receiving, by the network interface card device, a third write request of a third client, wherein the third write request comprises the access address; and that the network interface card device detects that the first access request has a conflict is specifically: the network interface card device detects that the first access request conflicts with the third write request.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the first access request is used to write second data to the access address; the network interface card device determines, based on the first access request and metadata, that a conflict exists, wherein the metadata represents a status attribute of the access address; and the processing, by the network interface card device, the conflict according to a processing policy comprises: processing, by the network interface card device, the second data according to the processing policy, wherein the processing policy is generated by the network interface card device.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein before the detecting, by the network interface card device, whether the first access request has a conflict, the method further comprises: updating, by the network interface card device based on the second write request, the status attribute of the metadata to writing by the second client.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein before the detecting, by the network interface card device, whether the first access request has a conflict, the method further comprises: updating, by the network interface card device, the status attribute of the metadata to a writing state based on the second write request.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref> wherein the processing, by the network interface card device, the conflict according to a processing policy comprises: sending, by the network interface card device, a first conflict notification to a processor, wherein the first conflict notification is used to indicate that the first access request conflicts with the second write request, and the processor is a processor that processes the access address.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the processing, by the network interface card device, the conflict according to a processing policy comprises:<claim-text>discarding, by the network interface card device, the second data; and</claim-text><claim-text>sending, by the network interface card device, a second conflict notification to the first client, wherein the second conflict notification is used to indicate that the first access request conflicts with the second write request.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein after the processing, by the network interface card device, the conflict according to a processing policy, the method further comprises:<claim-text>receiving, by the network interface card device, a feedback result sent by the processor, wherein the feedback result indicates that writing of data of the second write request is completed; and</claim-text><claim-text>clearing, by the network interface card device, the status attribute of the metadata based on the feedback result.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method according to <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the status attribute of the metadata comprises at least one of the following: a version number, a conflict status, or a number of a client currently performing access.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. A network interface card device, wherein the network interface card device comprises an interface and a processor, the interface communicates with the processor, and the interface is configured to receive a first access request of a first client; and the first access request carries an access address; and the processor is configured to detect whether the first access request has a conflict; and when detecting that the first access request has a conflict, process the conflict according to a processing policy.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The network interface card device according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first access request is a write request, and the interface is further configured to: before receiving the first access request of the first client, receive a second write request of a second client, wherein the second write request comprises the access address; and the processor is specifically configured to detect that the first access request conflicts with the second write request.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The network interface card device according to <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the first access request is a read request, and the interface is further configured to: before receiving the first access request of the first client, receive a third write request of a third client, wherein the third write request comprises the access address; and the processor is specifically configured to detect that the first access request conflicts with the third write request.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The network interface card device according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first access request is used to write second data to the access address; the processor is specifically configured to determine, based on the first access request and metadata, that a conflict exists, wherein the metadata represents a status attribute of the access address; and the processor is specifically configured to process the second data according to the processing policy, wherein the processing policy is generated by the processor.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The network interface card device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processor is further configured to update, based on the second write request, the status attribute of the metadata to writing by the second client.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The network interface card device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processor is further configured to update the status attribute of the metadata to a writing state based on the second write request.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The network interface card device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the interface is configured to send a first conflict notification to a processor corresponding to the access address, wherein the first conflict notification is used to indicate that the first access request conflicts with the second write request.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The network interface card device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the processor is configured to discard the second data; and the interface is further configured to send a second conflict notification to the first client, wherein the second conflict notification is used to indicate that the first access request conflicts with the second write request.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The network interface card device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the interface is further configured to receive a feedback result sent by the processor corresponding to the access address, wherein the feedback result indicates that writing of data of the second write request is completed; and the processor is further configured to clear the status attribute of the metadata based on the feedback result.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The network interface card device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the status attribute of the metadata comprises at least one of the following: a version number, a conflict status, or a number of a client currently performing access.</claim-text></claim></claims></us-patent-application>