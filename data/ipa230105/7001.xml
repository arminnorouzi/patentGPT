<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007002A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007002</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17816226</doc-number><date>20220729</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>40</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20120101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>38</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20220101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>N</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>10</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3213</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>1441</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>Q</subclass><main-group>20</main-group><subgroup>3823</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>63</main-group><subgroup>20</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0637</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>2463</main-group><subgroup>144</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">BLOCKCHAIN-BASED ADMISSION PROCESSES FOR PROTECTED ENTITIES</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>17132695</doc-number><date>20201223</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11438336</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17816226</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>15994414</doc-number><date>20180531</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11019059</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17132695</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62663132</doc-number><date>20180426</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>RADWARE LTD.</orgname><address><city>Tel Aviv</city><country>IL</country></address></addressbook><residence><country>IL</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>LELCUK</last-name><first-name>Alon</first-name><address><city>Ramot Meir</city><country>IL</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>AVIV</last-name><first-name>David</first-name><address><city>Tel Aviv</city><country>IL</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Radware Ltd.</orgname><role>03</role><address><city>Tel Aviv</city><country>IL</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Arrangements for controlling access to a protected entity include receiving a redirected client request to access the protected entity that includes a public key of the client; granting, in response to the received redirected request, access tokens of a first type to a client using the public key of the client; identifying a conversion transaction identifying a request to convert the first type of access tokens with access tokens of a second type, the transaction designating the protected entity; determining a conversion value for converting the first-type access tokens into second-type access tokens based on at least one access parameter; converting, using the conversion value, a first sum of the first-type access tokens into a second sum of second-type access tokens; and granting the client access to the protected entity when the sum of second-type of access tokens is received as a payment from the protected entity.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="73.49mm" wi="158.75mm" file="US20230007002A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="224.79mm" wi="117.86mm" orientation="landscape" file="US20230007002A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="187.28mm" wi="138.68mm" orientation="landscape" file="US20230007002A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="212.34mm" wi="129.29mm" orientation="landscape" file="US20230007002A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="220.13mm" wi="162.14mm" orientation="landscape" file="US20230007002A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="201.59mm" wi="99.65mm" file="US20230007002A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="121.92mm" wi="148.42mm" file="US20230007002A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="141.56mm" wi="157.23mm" file="US20230007002A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation of U.S. patent application Ser. No. 17/132,695 filed Dec. 23, 2020, now allowed, which is in turn a continuation of U.S. Ser. No. 15/994,414 filed May 31, 2018, now U.S. Pat. No. 11,019,059. The Ser. No. 15/994,414 application claims the benefit of U.S. Provisional Application No. 62/663,132 filed on Apr. 26, 2018, the contents of which are hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">This disclosure generally relates to network security technology, and more particularly to admission controls allowing deferential admission to protected entities using blockchains decentralized ledgers.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In the related art, conventional admission control solutions are typically third-party services which the access is requested. For example, Facebook&#xae; and Google&#xae; provide such services using the OAuth protocol for admission control</p><p id="p-0005" num="0004">In many enterprises, similar technology is utilized internally to allow access. For example, Windows&#xae; Single-Sign-On (SSO) based on a NT LAN Manager (NTLM) and Kerberos is used as centralized admission service for clients, servers, and applications. Typically, an admission service may consider many parameters in making an admission decision. For example, a role-based access control (RBAC) which is a method of regulating access to computer or network resources based on the roles of individual users within an enterprise. The admission decision is typically an allow-or-deny property.</p><p id="p-0006" num="0005">That is, an admission service considers the available parameters and only the final decision is exposed to the protected entity, if the parameters satisfying a role in the form of a secure admission token (e.g., certificate or a session key). This allow-or-deny binary property of admission control system was historically sufficient as it was assumed that all clients are coming from a relatively trusted environment. In the emerging, predominantly cloud driven, landscape a solution that can provide granular admission after evaluating the risk associated with the access request is clearly needed.</p><p id="p-0007" num="0006">In most cases, the admission to a protected entity requires a user to expose private information over networks and sometimes over the Internet (e.g., user name, phone number, login credentials, etc.), thus admission service are vulnerable to privacy breaches.</p><p id="p-0008" num="0007">Some existing admission control systems are based on a trusted third-party service or infrastructure. For example, a Certificate Authority (CA) used in Public Key Infrastructure (PKI) to infer trust between entities.</p><p id="p-0009" num="0008">A replay attack is one security risk caused by the vulnerability of admission controllers and authentication technologies. In a replay attacks, a third-party adversary listens to the communication between an admission controller and a client (or an admission service) and &#x201c;replay&#x201d; the captured communication to gain un-rightful admission. Addressing this risk is in the heart of most admission control systems and protocols. Typically, the communication between the admission controller, the client (or service) is performed over protected interactive sessions. The interactive nature of existing solutions imposes many limitations in system architecture, scale and system availability, thereby leading to costly and inflexible solutions.</p><p id="p-0010" num="0009">In many cases, an admission request is originated from a malicious entity such as a Bot. Addressing the bot risk is also many times in the problem domain of admission systems. However, most admission systems can not address this risk internally, thus relying on external third-party solutions. This further increases the admission control complexity and inflexibility.</p><p id="p-0011" num="0010">Blockchain is a technology that allows for fast, secure and transparent peer-to-peer transfer of digital goods (e.g., money and intellectual property) built over a combination of proven technologies applied in a new way. Specifically, the fundamentals of blockchain are based on the Internet, a private key cryptography, a consensus algorithm and a protocol governing incentivization.</p><p id="p-0012" num="0011">The blockchain provides a system for digital interactions that provides transparency for transactions and does not require a trusted third party. The infrastructure of the blockchain can be viewed as a decentralized immutable database, protected by advanced cryptography, and residing in a plurality of nodes in a large network.</p><p id="p-0013" num="0012">The decentralized immutable database is a distributed ledger that is held and updated independently by each node. The distribution is unique as records are not communicated to various nodes by a central authority, but are instead independently constructed and held by every node. That is, every single node on the network processes every transaction, resulting in self-conclusions, and then votes on those conclusions to ensure that the majority agree with the conclusions. Once there is consensus, the distributed ledger is updated, and each node maintains its own identical copy of the same ledger.</p><p id="p-0014" num="0013">A prime use for blockchain technologies is in virtual currencies or cryptocurrencies, such as Bitcoin, Ethereum, and Litecoin. In Bitcoin, for example, each time a transaction takes place, such as one party sending bitcoin directly to another, the transaction's details (e.g., source, destination and date/timestamp) are added to what is referred to as a block. For example, the block contains the transaction with other similar types of recently submitted transactions. Then, the validity of the transactions within the cryptographically-protected block is checked and confirmed by the collective computing power of nodes (miners) in the network. A consensus reaching technology and game theory based loose/gain procedure is used to make sure all nodes have the same information, the nodes (or minters) are for example computers configured to utilize their processing power to solve complex mathematical problems, such as complex hashing algorithms until a consensus is reached. Once solved, the block and all of its respective transactions are verified as legitimate. When the transactions within a block are deemed legitimate, the block is attached to the most recently verified block in the chain, creating a sequential ledger which is viewable by all who desire.</p><p id="p-0015" num="0014">This process continues in perpetuity, expanding upon the blockchain's contents and providing a public record that can be trusted. In addition to being constantly updated, the chain and all of its blocks are distributed across to all other nodes in the networks. This ensures that the latest version of this decentralized ledger exists virtually everywhere, making it almost impossible to forge.</p><p id="p-0016" num="0015">Most blockchain-based applications involve related monetary transactions of virtual currencies. However, as blockchain technology advances, other blockchain-based applications and uses are proposed. Such applications include establishing digital identity without exposing vulnerable personal information of users, recording smart legal contracts, auditing financial transactions, and automating regulatory compliance.</p><p id="p-0017" num="0016">Cyber-security solutions related to blockchains, discussed in the related art, are mainly directed at securing the transactions or infrastructure of the blockchain (e.g., the distributed ledger, etc.). There are no available solutions for securing entities (e.g., servers, datacenters, and the like) outside of the blockchain infrastructure using blockchain-based technologies. For example, there is no blockchain-based solution that can identify if an access request to a web server is received from a legitimate user or a malicious bot.</p><p id="p-0018" num="0017">Therefore, it would be advantageous to provide an efficient solution that would cure the deficiencies of existing security admission solutions while benefiting from Blockchain advantages.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0019" num="0018">A summary of several example embodiments of the disclosure follows. This summary is provided for the convenience of the reader to provide a basic understanding of such embodiments and does not wholly define the breadth of the disclosure. This summary is not an extensive overview of all contemplated embodiments, and is intended to neither identify key or critical elements of all embodiments nor to delineate the scope of any or all aspects. Its sole purpose is to present some concepts of one or more embodiments in a simplified form as a prelude to the more detailed description that is presented later. For convenience, the term &#x201c;certain embodiments&#x201d; may be used herein to refer to a single embodiment or multiple embodiments of the disclosure.</p><p id="p-0020" num="0019">Certain embodiments disclosed herein include a method for controlling access to a protected entity by a client. The method comprises: receiving a redirected request of the client to access the protected entity that was denied by the protected entity, the redirected request including a public key of the client and designating the protected entity to be accessed, the protected entity being an entity to be protected from malicious threats; granting, in response to the received redirected request, access tokens of a first type to the client, using the public key of the client; identifying a conversion transaction identifying a request to convert the first type of access tokens with access tokens of a second type, wherein the transaction designates at least the protected entity; determining a conversion value for converting the first type of access tokens into the second type of access tokens, wherein the conversion value is determined based on at least one access parameter; converting, based on the determined conversion value, a first sum of the first type of access tokens into a second sum of the second type of access tokens; and granting the client access to the protected entity when the sum of the second type of access tokens is received as a payment from the protected entity.</p><p id="p-0021" num="0020">Certain embodiments disclosed herein also include an access system for controlling access to a protected entity by a client. The system comprises: a processing circuitry; and a memory, the memory containing instructions that when, executed by the processing circuitry, configure the access system to: receive a redirected request of the client to access the protected entity that was denied by the protected entity, the redirected request including a public key of the client and designating the protected entity to be accessed, the protected entity being an entity to be protected from malicious threats; grant, in response to the received redirected request, access tokens of a first type to the client, using the public key of the client; identify a conversion transaction identifying a conversion of the first type of access tokens with access tokens of a second type, wherein the transaction designates at least the protected entity; determine a conversion value for converting the first type of access tokens into the second type of access tokens, wherein the conversion value is determined based on at least one access parameter; convert, based on the determined conversion value, a first sum of the first type of access tokens into a second sum of the second type of access tokens; and grant the client access to the protected entity when the sum of the second type of access tokens is received as a payment from the protected entity.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0022" num="0021">The subject matter disclosed herein is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other objects, features, and advantages of the disclosed embodiments will be apparent from the following detailed description taken in conjunction with the accompanying drawings.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a network diagram utilized to describe the various disclosed embodiments.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow diagram illustrating a non-weighted blockchain-based admission process according to an embodiment.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a flow diagram illustrating a cost-based and blockchain-based admission process according to an embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a flow diagram illustrating a weighted blockchain-based admission process according to an embodiment.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example flowchart illustrating a method for blockchain-based admission to a protected entity according to an embodiment.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example block diagram of the admission system according to an embodiment.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a flow diagram illustrating a challenge process utilized by the admission system according to an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0030" num="0029">The embodiments disclosed herein are only examples of the many possible advantageous uses and implementations of the innovative teachings presented herein. In general, statements made in the specification of the present application do not necessarily limit any of the various claimed embodiments. Moreover, some statements may apply to some inventive features but not to others. In general, unless otherwise indicated, singular elements may be in plural and vice versa with no loss of generality. In the drawings, like numerals refer to like parts through several views.</p><p id="p-0031" num="0030">According to the disclosed embodiments, techniques for allowing blockchain-based admission to protected entities are provided. An admission (or access) to a protected entity is given to a client after granting a number of one or more access tokens in the blockchain. The &#x201c;spending&#x201d; of such tokens is also performed via the blockchain network. In an embodiment, the access tokens and, hence, the admission to access to a protected entity, are based on a non-linear model where there is a weight or &#x201c;cost&#x201d; is associated with each admission request. This is different than a traditional admission model implemented by existing cyber security systems and admission-services, such as a role-based access control (RBAC), where the admission is binary upon satisfying an access rule. In contrast, according to the disclosed embodiments, the admission is weighted based on one or more access parameters set to weight the risk of false positive detection of an attacker admission with the risk of false negative detection of a legitimate user denial of admission. Furthermore, according to the disclosed embodiments, the admission may optionally comprise a plurality of weighted parameters indicating the risk associated in multiple dimensions such as, but not restricted to, risk in reading, risk in modifying, risk in sharing, on so on. Accordingly, the disclosed embodiments provide for increased temporal-accuracy access token verifications and, thus, more secure admission, than existing admission solutions. The disclose embodiments also allow for detecting and mitigating the risk associated with Bots. The various disclosed embodiments will now be disclosed in greater detail.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example network diagram <b>100</b> utilized to describe the various disclosed embodiments. The network diagram <b>100</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> includes an admission system <b>110</b>, a client <b>120</b>, a blockchain peer-to-peer network <b>130</b> (hereinafter referred to as the blockchain network <b>130</b>, merely for simplicity purposes), and a protected entity <b>140</b>. The entities in the network diagram <b>100</b> communicate via a network <b>150</b>, reside in the network <b>150</b>, or both. The admission system <b>110</b> controls and regulates admission of the client <b>120</b> by issuing to the client <b>120</b> access tokens to be consumed by the protected entity <b>140</b> as will be discussed in detail below. In certain implementations, a trust broker <b>160</b> is also connected to the network <b>150</b> and communicatively connected to the blockchain network <b>130</b>. As discussed below, the trust broker <b>160</b> is configured to replace one type of access token with another type of access token based, in part, on a non-linear conversion model for example using e<sup>&#x2212;ct </sup>as a multiplication factor where &#x2018;ct&#x2019; is driven from the time of last admission.</p><p id="p-0033" num="0032">In an embodiment, the various entities discussed herein, the admission system <b>110</b>, client <b>120</b>, protected entity <b>140</b>, trust broker <b>160</b>, and audit system <b>170</b> act as full peer members in the blockchain network <b>130</b> accessing it without intermediaries. In an embodiment, the audit system <b>170</b> is integrated in the admission system.</p><p id="p-0034" num="0033">In another embodiment, these entities can all be non-blockchain members. In such configuration, some or all these entities can enlist the services of a third-party cryptocurrency wallet service or application to provide access to the blockchain network <b>130</b> as well as holding all relevant crypto elements, such as keys. In yet another embodiment, the client <b>120</b> and the protected entity <b>140</b> may optionally include means for maintaining tokens issued by the admission system <b>110</b> or utilized the cryptocurrency wallet described herein.</p><p id="p-0035" num="0034">The network <b>150</b> may be, but is not limited to, a local area network, a wide area network, the Internet, one or more data centers, a cloud computing infrastructure, a cellular network, a metropolitan area network (MAN), or any combination thereof. The admission system <b>110</b>, the protect entity <b>140</b>, or both, can be hosted in a cloud computing platform, such as, but not limited to, a private cloud, a public cloud, a hybrid cloud, or any combination thereof. The client <b>120</b> may be a PC, a mobile phone, a smart phone, a tablet computer, a server, and the like. The client <b>120</b> may be operated by a legitimate user, a program or may be an attack tool.</p><p id="p-0036" num="0035">The protected entity <b>140</b> is the entity to be protected from malicious threats. The protected entity <b>140</b> may be any network or computing element including resources that can be accessed by the client <b>120</b>. For example, the protected entity <b>140</b> may be a function in a serverless architecture, an application server, a web server, a cloud application, a datacenter, a network device (e.g., a router, an ADC, etc.), a firewall (e.g., a web-application firewall), and so on.</p><p id="p-0037" num="0036">In certain implementations, the network diagram <b>100</b> further includes an audit system <b>170</b> utilized to record or log any transactions performed between two or more of the admission system <b>110</b>, the client <b>120</b>, the trust broker <b>160</b>, the protected entity <b>140</b>. For example, the audit system <b>170</b> is configured to record whether an admission request is accepted or not, the conversion value set for different types of access tokens, a number of admission requests requested by the client <b>120</b>, and so on. In another embodiment, the function of logging transactions by the audit system <b>170</b> is performed on the blockchain network <b>130</b>, i.e., by its distributed ledger.</p><p id="p-0038" num="0037">According to an embodiment, the admission system <b>110</b> may be communicatively connected with the protected entity <b>140</b>, where both the admission system <b>110</b> and the protected entity <b>140</b> are peers in a blockchain peer-to-peer (P<b>2</b>P) network and may act as a proxy to the P<b>2</b>P network. For example, translating from HTTPS messages to message that can be transported on the P<b>2</b>P network. The admission system <b>110</b> and the protected entity <b>140</b> may be configured each or both to receive or otherwise intercept requests (such as, but not limited to, HTTP/HTTPS requests) generated by the client <b>120</b>. The requests are directed using the device proxy function or using the native protocol redirect functions to the admission system <b>110</b>. The secured datacenter can be operable in a cloud-computing infrastructure, a hosting server datacenter, service provider networks, or a cooperative network.</p><p id="p-0039" num="0038">It should be noted that, although one client <b>120</b> and one protected entity <b>140</b> are illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> merely for the sake of simplicity, the embodiments disclosed herein can be applied to a plurality of clients, a plurality of protected entities, or both. Further, a plurality of admission systems can be utilized, or the admission system <b>110</b> may be configured in a distributed implementation. The clients may be located in different geographical locations. Furthermore, a single client <b>120</b> may be served by a plurality of admission servers <b>110</b> concurrently.</p><p id="p-0040" num="0039">It should be further noted that in certain embodiments, the admission system <b>110</b> and the trust broker <b>160</b> may be implemented in a single system or as a distributed system. Further, each element discussed above can also be integrated in a single system for example the admission system <b>110</b> and protected entity <b>140</b> implemented as a single unified gateway.</p><p id="p-0041" num="0040">In another embodiment, the admission system <b>110</b>, the trust broker <b>160</b>, and/or the protected entity <b>140</b> can be implemented in a network device already deployed in the network <b>150</b>. Example for such a network device includes an application delivery controller (ADC), load balancer, a web application firewall (WAF), a router, a firewall, and the like.</p><p id="p-0042" num="0041">The blockchain network <b>130</b> is a collection of nodes (not labeled) utilized to maintain a distributed ledger and verified blocks, as discussed above. A node may be a physical machine, or a virtual machine executed by a machine having a sufficient computing power to verify a block. In an embodiment, the nodes of the blockchain network <b>130</b> may be configured to handle proprietary tokens (e.g., verified block of transactions for converting proprietary tokens). The proprietary tokens may be of different types.</p><p id="p-0043" num="0042">In another embodiment, the nodes of the blockchain network <b>130</b> may be configured to handle tokens of standard virtual currencies such as, but not limited to, Bitcoin, Ethereum, Litecoin, and the like. For example, the infrastructure to the Ethereum blockchain network is based on a collection of nodes realized as Ethereum Virtual Machines (EVM) connected in a mesh connection. Each such node runs a copy of the entire blockchain and competes to mine the next block or validate a transaction. Further, each node in the blockchain network <b>130</b>, implemented as Ethereum, maintains an updated copy of the entire Ethereum blockchain. In an embodiment, the blockchain network <b>130</b> can be configured as a private network. In this embodiment, tokens (or contracts) accessible to nodes that are connected to a private network, e.g., the blockchain network <b>130</b>, operate in a private mode. In yet another embodiment, a private token is utilized as part of a public or private Ethereum blockchain.</p><p id="p-0044" num="0043">In another embodiment, the admission system <b>110</b> and the protected entity <b>140</b> participate in a smart contract using the crypto EVM capabilities to grant and track admission of the client to the client <b>120</b>. A smart contract is a computer protocol intended to digitally facilitate, verify, or enforce the negotiation or performance of a contract defined as collection of executable computer code in one of many possible computer languages such as but not limited to &#x201c;Python&#x201d;, &#x201c;Java&#x201d;, &#x201c;R&#x201d;, &#x201c;Solidity&#x201d; or any other computer languages used now or in the future to implement blockchain based smart contracts. Smart contracts allow the performance of credible transactions without the existence of trusted third parties. These transactions are tractable and irreversible.</p><p id="p-0045" num="0044">In an embodiment, the smart contract is generated (&#x201c;written&#x201d;) by the admission system <b>110</b>. The admission system <b>110</b> may determine the pre-conditions or conditions for the smart contract. Such conditions may be determined based on, for example, the client <b>120</b>, protected entity <b>140</b>, logged history, and so on. The smart contract, although being fulfilled by, for example, the EVM (network <b>130</b>) the contract generated by the system <b>110</b> is independent of the network.</p><p id="p-0046" num="0045">In should be noted that other embodiments utilizing other forms of consensus-based technologies can be used to implement the admission system <b>110</b>. For example, a Byzantine Fault Tolerance algorithm can be used for control and reach consensus over the Linux Foundation hyper-ledger implementation, over Corda, and the like.</p><p id="p-0047" num="0046">It should be appreciated that, in some embodiments, utilizing the blockchain network <b>130</b> for the admission process allows maintaining privacy of the user accessing the protected entity <b>140</b> while providing transparency of admission transactions. Further, the blockchain network <b>130</b> can be easily scaled, therefore providing a scalable solution.</p><p id="p-0048" num="0047">In the example implementations described with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the admission to the protected entity <b>140</b> is delegated to and regulated by the admission system <b>110</b> and is based, in part, on access tokens provided by the admission system <b>110</b>. The access tokens may be of the same type or of different types. Further, the tokens may be proprietary tokens or may be based on standard virtual currencies or contracts, such as those described above.</p><p id="p-0049" num="0048">According to the disclosed embodiments, various blockchain-based admission processes can be implemented by the admission system <b>110</b>. In an embodiment, the admission system <b>110</b> provides access tokens to the client <b>120</b>, upon receiving a request to grant such tokens. The access tokens are granted through the blockchain network <b>130</b>. In other words, the granting of the access tokens is recorded as a transaction included in a block of a blockchain maintained by the blockchain network <b>130</b>. Upon requesting an access to the protected entity <b>140</b> by the client <b>120</b>, the client <b>120</b> &#x201c;pays&#x201d; the protected entity <b>140</b> the access tokens.</p><p id="p-0050" num="0049">This may be performed by revoking (spending) the access tokens granted to the client <b>120</b> in order to gain access. In other words, the use of the access tokens is recorded as a transaction and included in a block of the blockchain maintained by the blockchain network <b>130</b>. Thus, the validation of the transaction (access request) is performed through the blockchain network <b>130</b>. In an embodiment, the validation can be performed prior to admitting an access to the protected entity <b>140</b>. In yet another embodiment, the validation is performed after an admission is conditionally granted to the client. If the validation fails, the client <b>120</b> is disconnected from the protected entity <b>140</b>.</p><p id="p-0051" num="0050">In an embodiment, the access tokens can be granted by the admission system <b>110</b> after the client <b>120</b> performs computing challenges. An example for such challenges may include a requirement to solve a mathematical function. As such, the client <b>120</b> is required to invest computing resources to solve the function. For legitimate users it would be a one-time challenge, but for attackers (bots) generating thousands of requests it would drain their computing resources.</p><p id="p-0052" num="0051">In exemplary embodiment the complexity of the admission system <b>110</b> issued challenges to client <b>120</b> can be controlled by the admission system <b>110</b> dynamically. The admission system <b>110</b> may increase or decreases the challenge complexity according to one or more access parameters, discussed herein.</p><p id="p-0053" num="0052">In an embodiment, the admission system <b>110</b> is configured to protect a plurality of protected entities <b>140</b> the dynamic challenge cost can be controlled by referencing the combined activity of the client <b>120</b> accessing multiple protected entities. This allows the admission system <b>110</b> to act as an anti-bot service.</p><p id="p-0054" num="0053">As the challenge complexity increases, an embodiment can set thresholds on one or more access parameters and use the designated threshold to identify a bot threat. Once a bot threat has been identified an embodiment can change the dynamic challenge strategy and set a new challenge strategy, for example, setting an exponential growth challenge complexity so the risk can be slowed down quickly.</p><p id="p-0055" num="0054">According to another embodiment, a specific cost is associated with accessing the protected entity <b>140</b>. For example, various services provided by the entity <b>140</b> would require different numbers of access tokens. That is, the cost, in this embodiment, is defined by the number and type of access tokens. The cost for accessing may be maintained in a centralized location, by the admission system <b>110</b>, or by the protected entity <b>140</b> or in any combination thereof. The client <b>120</b> is configured to check the admission cost for accessing the protected entity <b>140</b>. If the client <b>120</b> does not possess enough access tokens (as recorded in the blockchain), the client <b>120</b> requests the admission system <b>110</b> for additional access tokens. The request may designate any combination of a number of access tokens and their types. To access the protected entity <b>140</b>, the access tokens are provided through the blockchain network <b>130</b>.</p><p id="p-0056" num="0055">In another embodiment, the admission cost is dynamically weighted and two or more different types of access tokens are utilized. In this embodiment, to access the protected entity <b>140</b>, the client <b>120</b> first acquires a number of first-type access tokens from the admission system <b>110</b>. The protected entity <b>140</b> also requires a number of second-type access tokens. Thus, the client <b>120</b> is configured to convert the first-type access tokens for the second-type access tokens using the trust broker service <b>160</b>. The conversion value can be dynamically determined, e.g., per access request based on one or more parameters. Such parameters may be related to the client <b>120</b>, the protected entity <b>140</b>, global indications, or a combination thereof. For example, the reputation, geographical location, or historical record as supplied by the blockchain <b>130</b> network or the audit system <b>170</b> and rate of access tokens spending may be parameters related to the client <b>120</b>. A service being accessed, and a current load may be parameters related to the protected entity <b>140</b>. An indication for an external source (not shown) an on-going attack campaign or the state of the internal anti-bot function may be an indication for an ongoing attack.</p><p id="p-0057" num="0056">The admission system <b>110</b> may issue more than one type of access tokens in a single transaction to the client <b>120</b>. In an embodiment, a transaction issued may include a number of cryptocurrency tokens as well as an SSL certificate issued to the client <b>120</b>, the SSL certificate is generated by a certificate issuer (not drawn) and may include the client <b>120</b> identity information, if such information was supplied as well as the client <b>120</b> public key. The certificate may have a revocation date that was influenced by the admission controller <b>110</b> one or more access parameters.</p><p id="p-0058" num="0057">The issued certificate can be used to establish a legacy secure service that does not have blockchain access for example an existing VPN, web or email solution</p><p id="p-0059" num="0058">The various embodiments for admission controls will be discussed in further detail with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>-<b>4</b></figref>.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example flow diagram <b>200</b> illustrating a non-weighted blockchain-based admission process according to an embodiment. The elements illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref> including the admission system <b>110</b>, the client <b>120</b>, the blockchain network <b>130</b>, and the protected entity <b>140</b>, are described herein above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0061" num="0060">At S<b>210</b>, the client <b>120</b> sends a request (<b>201</b>) to grant (&#x201c;buy&#x201d;) access tokens from the admission system <b>110</b>. The access tokens may be used to access the protected entity <b>140</b>. In some embodiments, the request (<b>201</b>) is sent only after the client <b>120</b> successfully completes a challenge selected and set by the admission system <b>110</b>. The challenge process is discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0062" num="0061">The request (<b>201</b>) may include a public key of the client <b>120</b> and may further designate the entity to be accessed. The request (<b>201</b>) sent from the client <b>120</b> does not need to include any identifying information of a user of the client <b>120</b>. The request (<b>201</b>) may be sent using a standard layer-7 protocol, such as HTTP or HTTPS. In yet another embodiment, the request (<b>201</b>) may be sent via the blockchain network <b>130</b> as a non-interactive payment of the admission service. The admission system <b>110</b> may implement various known and unknown procedures such as, but not limited to, client certificates, one-time pads (OTPs), and so on, to identify, qualify, validate, check balances or historical record locations, or a combination thereof, of the client <b>120</b>. When keeping the privacy of the client <b>120</b> is mandatory, argument of knowledge such as SK-SNAKS and Zcach can be used instead of exposing the client identity directly.</p><p id="p-0063" num="0062">In some embodiments, the request (<b>201</b>) may be trigged after the client <b>120</b> failed to directly access the protected object <b>140</b>. In such case, the protected object <b>140</b> may redirect a request from the client <b>120</b> to the admission system <b>110</b>.</p><p id="p-0064" num="0063">At S<b>220</b>, upon identifying, validating, and approving the client's <b>120</b> request for admission, the admission system <b>110</b> is configured to grant (<b>202</b>) a number of access tokens to the client <b>120</b>. The access tokens are granted (e.g., paid) to the client <b>120</b> through the blockchain network <b>130</b> using the public key of the client <b>120</b>. In yet another embodiment, when the access tokens are implemented using zero-knowledge arguments of proof cryptography, such as ZK-SNARKs used in Zcash the public key of the client <b>120</b> may not be required.</p><p id="p-0065" num="0064">It should be noted that in some configurations, when the client <b>120</b> successfully passed a challenge set by the admission system <b>110</b>, S<b>210</b> and S<b>220</b> can be skipped, as the access tokens are granted as the client <b>120</b> passes the challenge.</p><p id="p-0066" num="0065">At S<b>230</b>, the client <b>120</b> is configured to identify, on the blockchain network <b>130</b>, the transaction ID holding the access tokens granted to the client <b>120</b>.</p><p id="p-0067" num="0066">At S<b>240</b>, the client <b>120</b> is configured to add a transaction (<b>203</b>) to the blockchain network <b>130</b>. The transaction (<b>203</b>) includes transaction data, a transaction hash value, and a hash value of a previous transaction(s). In an embodiment, the transaction may also include an arbitrary number of metadata elements as specified and requested by the admission system <b>110</b>, the client <b>120</b> or the protected object <b>140</b>. In an example embodiment, the transaction data may include a unique transaction ID, a number of access tokens to pay for access, an identification of the admission system <b>110</b> as the source granting the access tokens, and a target service, application, or resource at the protected entity <b>140</b> that the client <b>120</b> requests access to. It is not mandatory for the transaction (<b>203</b>) to include any information identifying the client <b>120</b> or a user using the client <b>120</b>. A hash of transaction is cryptographic hash of the transaction's content. The owner of the transaction, e.g., the admission system <b>204</b> sign the transaction with its private key or other cryptographic identities. The transaction can be verified using a public key of the transaction owner.</p><p id="p-0068" num="0067">At S<b>250</b>, the client <b>120</b> sends an access request (<b>204</b>) to the protected entity <b>140</b> to access a service or resource. For example, the access request (<b>204</b>) may be to login to a user account, perform an action (e.g., download a file), access a secured resource, and so on. The request (<b>204</b>) may be sent using a standard layer-7 protocol, such as HTTP or HTTPS. The access request (<b>204</b>) can include the transaction ID of the transaction (<b>203</b>) to ease the protect entity <b>140</b> to look up for the transaction, the protected entity <b>140</b> may search for a relevant transaction in case that such transaction ID is not provided.</p><p id="p-0069" num="0068">It should be noted that any access request sent from the client <b>120</b> to the protected entity <b>140</b> remains pending until admission by the protected entity <b>140</b>. The access requests may be iteratively sent, until access is granted. It should be further noted that the validation of the transaction (access request) is performed through the blockchain network <b>130</b>. As noted above, the validation can be performed prior to admitting an access to the protected entity <b>140</b>. Alternatively, the validation is performed after an admission is conditionally granted to the client. If the validation fails, the client <b>120</b> is disconnected from the protected entity <b>140</b>. In addition, the audit system <b>170</b> may log any failure to successfully complete a challenge to at least determine the determine trust of access value for the client, as discussed in detail below.</p><p id="p-0070" num="0069">At S<b>260</b>, the protected entity <b>140</b> is configured to validate the transaction (<b>203</b>) through the blockchain network <b>130</b>. In an embodiment, such validation is performed by immediately spending the access tokens designated in the transaction (<b>203</b>) as payment to the admission system <b>110</b>. As a result, the transaction (<b>203</b>) is marked as &#x201c;spent&#x201d; in a respective block maintained in the blockchain network <b>130</b> and cannot be referenced by again by the client. It should be noted that transactions are never deleted from blocks maintained in the network <b>130</b>.</p><p id="p-0071" num="0070">At S<b>270</b>, once the transaction is validated and access tokens are paid, access is granted to the client <b>120</b> to access the target resource or service at the protected entity <b>140</b>. In an embodiment, the protected entity <b>140</b> may use the number and type of access token paid to set temporal ACL on the accessing the client <b>120</b>. That is, the access may be limited in time based on the number and type of access tokens being paid.</p><p id="p-0072" num="0071">It should be noted that the access tokens are typically paid to the admission system <b>110</b> upon fulfillment of the access request (<b>204</b>). A fulfillment of the access request (<b>204</b>) may include allowing the client <b>120</b> to access the protected object <b>140</b>, conditionally allowing the client <b>120</b> access the protected object <b>140</b>, or denying an access to the protected object <b>140</b>.</p><p id="p-0073" num="0072">It should be further noted that each transaction (<b>203</b>) is a transfer of a certain value of access tokens between the client <b>120</b>, the system <b>110</b>, and the entity <b>140</b>. The blockchain block signature also prevents the transaction from being altered once it has been issued. Although not illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, all transactions are broadcast between nodes of the blockchain network <b>130</b> and validated through a mining process.</p><p id="p-0074" num="0073">It should be further noted that, to grant the access tokens, the admission system <b>110</b> and the client <b>120</b> may exchange their public keys. In order to revoke the access tokens, the system <b>110</b> and protected entity <b>140</b> may exchange their public keys. That is, there is no direct transaction with respect to the utilization of the access tokens between the client <b>120</b> and the protected entity <b>140</b>. A key (private or public) may be a cryptography key. Alternatively or collectively, the protected entity <b>140</b> and admission system <b>110</b> may employ other means of secure communication, such as pre-shared keys. Furthermore, the admission system <b>110</b>, the client <b>120</b>, and the protected entity <b>140</b> may be acting under a public key infrastructure (PKI) or certificate authority (CA) mechanism.</p><p id="p-0075" num="0074">As an example, an access token may be a chain of digital signatures. The system <b>110</b> may transfer the access token to the client by digitally signing a hash of the previous transaction and the public key of the protected entity <b>140</b>. The signatures (hash values) may be appended to each access token. To grant an access to the client <b>120</b>, the entity can validate the signatures to verify the chain of ownership.</p><p id="p-0076" num="0075"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows an example flow diagram <b>300</b> illustrating a cost-based admission process according to another embodiment. The elements illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> including the admission system <b>110</b>, the client <b>120</b>, the blockchain network <b>130</b>, and the protected entity <b>140</b>, are described herein above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0077" num="0076">In this embodiment, there is a dynamic admission cost to access the protected entity <b>140</b>. The cost is defined by a number of access tokens that may be set based on a target service, application, or resource at the protected entity <b>140</b> from which an access is required; the behavior of the client <b>120</b>; or both. The cost is maintained in a cost table <b>301</b>. In an embodiment, the cost table <b>301</b> may be managed and reside in the admission system <b>110</b>. Alternatively, the cost table <b>301</b> may be managed by an admission system <b>110</b>, but saved in the centralized repository (not shown). This would allow the admission system <b>110</b>, the protected entity <b>140</b>, or another arbitrator (not shown) to control the admission costs across different protected entities, across different clients, or both.</p><p id="p-0078" num="0077">In yet another embodiment, the cost table <b>301</b> is saved in the protected entity <b>140</b> including the admission cost to access its services or resources. The cost table <b>301</b> may be managed by the protected entity <b>140</b> or the admission system <b>110</b>.</p><p id="p-0079" num="0078">In yet another embodiment, the cost table <b>301</b> may be maintained in the blockchain network <b>130</b> as distributed records in the distributed ledger. This would allow for consistent maintenance of cost values. In such an embodiment, the cost table <b>301</b> may be managed by the admission system <b>110</b> or the protected entity <b>140</b>.</p><p id="p-0080" num="0079">It should be noted that the cost table <b>301</b> discussed herein below refers to all of the different embodiments utilizing cost tables as described herein.</p><p id="p-0081" num="0080">At S<b>310</b>, the client <b>120</b> is configured to inquire about the admission cost (i.e., the number of access tokens) required for accessing a specific service or resource at the protected entity <b>140</b>. The inquiry is to the cost table <b>301</b>.</p><p id="p-0082" num="0081">At S<b>320</b>, if the client <b>120</b> does not have sufficient access token value in its wallet, the client <b>120</b> sends a request (<b>302</b>) to grant access tokens from the admission system <b>110</b>. The access tokens may be used to access the protected entity <b>140</b>. As noted below, the admission system <b>110</b> may implement different business flows to identify, qualify, or validate the client <b>120</b>, or a combination thereof. In some embodiments, the request (<b>302</b>) is sent only after the client <b>120</b> successfully completes a challenge selected and set by the admission system <b>110</b>. The challenge process is discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0083" num="0082">At S<b>330</b>, upon identifying, qualifying, or validating, and approving the client's <b>120</b> request for admission, the admission system <b>110</b> is configured to grant (<b>202</b>) a number of access tokens to the client <b>120</b>. The access tokens are granted (e.g., paid) to the client <b>120</b> through the blockchain network <b>130</b> using the public key of the admission system <b>110</b>. The number of granted access tokens should be enough to satisfy the admission cost designated in the cost table <b>301</b>. It should be noted that if the client <b>120</b> already has enough tokens (e.g., as verified via the blockchain network <b>130</b>), or the client <b>120</b> successfully passes the challenge S<b>320</b> and S<b>330</b> are not performed.</p><p id="p-0084" num="0083">At S<b>340</b>, the client <b>120</b> identifies, on the blockchain network <b>130</b>, the transaction ID holding the access tokens granted to the client <b>120</b>. The identified tokens may be stored in a cryptocurrency wallet included in the client <b>120</b>.</p><p id="p-0085" num="0084">At S<b>350</b>, the client <b>120</b> is configured to add a transaction (<b>303</b>) to the blockchain maintained by the blockchain network <b>130</b>. The transaction (<b>303</b>) includes transaction data, a transaction hash value, and a hash value of a previous transaction(s). In an example embodiment, the transaction data may include a number of access tokens to pay for access, an identification of admission system <b>110</b> as the source granting the access tokens, and a target service, application or resource at the protected entity <b>140</b> that the client <b>120</b> requests to access. The transaction (<b>303</b>) does not include any information identifying the client <b>120</b> or its user. In an embodiment, the transaction may also include an arbitrary number of metadata elements as specified and requested by the admission system <b>110</b>, the client <b>120</b> or the protected object <b>140</b>.</p><p id="p-0086" num="0085">At S<b>360</b>, the client <b>120</b> is configured to send an access request (<b>304</b>) to the protected entity <b>140</b>. The access request (<b>304</b>) includes the transaction ID of the transaction added to the blockchain. As mentioned above, the access request (<b>304</b>) can include the transaction ID of the transaction (<b>303</b>) to ease the protected entity <b>140</b> to look up for the transaction, the protected entity <b>140</b> may search for a relevant transaction in case that such transaction ID is not provided. As further noted above, any access request sent from the client <b>120</b> to the protected entity <b>140</b> is pending admission by the protected entity <b>140</b>.</p><p id="p-0087" num="0086">At S<b>370</b>, the protected entity <b>140</b> is configured to validate the transaction (<b>303</b>) through the blockchain network <b>130</b>. As noted above, such validation is performed by immediately spending the access tokens designated in the transaction (<b>304</b>) as payment to the admission system <b>110</b>. As a result, the transaction (<b>304</b>) is removed from a respective block maintained in the blockchain network <b>130</b> and cannot be referenced again by the client <b>120</b>.</p><p id="p-0088" num="0087">At S<b>380</b>, once the transaction is validated and tokens are paid, access is granted to the client <b>120</b> to access the target resource or service at the protected entity <b>140</b>. As noted above, the protected entity <b>140</b> may use the number and type of access token paid to set a temporary ACL on the accessing the client <b>120</b>. That is, the access may be limited in time based on the number and type of access tokens being paid.</p><p id="p-0089" num="0088">In some embodiments, S<b>380</b> may further include updating the cost table <b>301</b>, e.g., increasing or decreasing the cost associated with accessing the protected entity <b>140</b>. The cost may be updated based on of the parameters discussed herein above by the entity managing the cost table <b>301</b> (e.g., the admission system <b>110</b>, the protected entity <b>140</b>, etc.).</p><p id="p-0090" num="0089">As mentioned above, each transaction (e.g., a transaction <b>304</b>) is a transfer of a certain value of access tokens between the client <b>120</b>, the admission system <b>110</b>, and the protected entity <b>140</b>, each of which may maintain a cryptocurrency wallet. Further, to grant the access tokens, the admission system <b>110</b> and the client <b>120</b> may exchange their public keys. In order to revoke the access tokens, the admission system <b>110</b> and the protected entity <b>140</b> may exchange their public keys. That is, there is no direct transaction with respect to the utilization of the access tokens between the client <b>120</b> and the protected entity <b>140</b>. A key (private or public) is a cryptographic key.</p><p id="p-0091" num="0090"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows an example flow diagram <b>400</b> illustrating a weighted blockchain-based admission process according to an embodiment. The elements illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> including the admission system <b>110</b>, the client <b>120</b>, the blockchain network <b>130</b>, the protected entity <b>140</b>, and the trust broker <b>160</b> are described herein above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0092" num="0091">In this embodiment, two types of access tokens are used, where a conversion value is dynamically determined for converting the first-type to the second-type of the access tokens. For example, the conversion value may be determined per access request, per conversion-token transaction, per session, or a combination thereof. In essence, the conversion value determines the admission cost, but in this embodiment, such cost is dynamically updated based on a plurality of access parameters. Further, there is no need to maintain any data structure (e.g., the cost table <b>301</b>, <figref idref="DRAWINGS">FIG. <b>3</b></figref>). In an embodiment, the conversion value is determined by the trust broker <b>160</b>.</p><p id="p-0093" num="0092">The weighted admission process weights the risk of false positive detection of attacker admission against the risk of false negative detection of legitimate user denial of admission. The weighted admission process allows a defender to scale a cost to access a protected entity linearly with the attack, while exponentially increasing the admission cost as, for example, the volume of the attack, type of attack, and other risk factors associated with the attack.</p><p id="p-0094" num="0093">To this end, the conversion value is dynamically determined based on one or more access parameters, the interaction between the access parameters, or both. A first group of access parameters are related to the client <b>120</b>. A reputation of the client <b>120</b>, determined by the system <b>110</b> or received from an external service, can be utilized to determine the conversion value. That is, a bad reputation would lead to a higher conversion value, and vice versa. The geographical location of the client <b>120</b> can determine the conversion value. For example, a client <b>120</b> from a &#x201c;reputable&#x201d; country (e.g., USA) would positively affect the conversion value. A behavior of the client <b>120</b> can also determine the conversion value. The admission system <b>110</b>, the trust broker <b>160</b>, or both, may monitor the activity of the client <b>120</b> across multiple protected entities, non-protected entities, or both, to detect any suspicious activity and determine the conversion value respective thereof. For example, a client that frequently requests additional access tokens may be classified as suspicious (e.g., a bot), which would lead to a higher conversion value. As another example, a client <b>120</b> that does not perform any malicious activity may be classified as legitimate, which would lead to a lower conversion value.</p><p id="p-0095" num="0094">The conversion value can be determined over multiple access tokens representing different granular admission rights. For example, read-access-tokens indicting the client <b>120</b> admission may incur lower cost than write-access-tokens indicting the client permissions to edit data and incur higher cost therefor controlling the client temporal authorization in fine granularity over multiple dimensions as dictated by risk analysis and the protected entity admission granularity.</p><p id="p-0096" num="0095">A second group of access parameters are related to the protected entity <b>140</b>. For example, a sensitive resource or service of the protected entity <b>140</b> would require a higher conversion value, regardless of the trustworthiness of the client <b>120</b>. As another example, the current load on the protected entity <b>140</b> may affect the conversion value, i.e., the higher the load the higher the conversion value is.</p><p id="p-0097" num="0096">In an embodiment, a network load balancer or and ADC (not shown) deployed in network <b>150</b> anywhere in the path of client <b>120</b> or protected entity <b>140</b> can be used to provide load and utilization data as such external data.</p><p id="p-0098" num="0097">A third group of access parameters are global indications. An indication of an-going cyber-attack against the protected entity or other entities in the network is considered as a global parameter. A volume of an on-going attack is also considered as a global parameter. Such indications may be received from external systems (not shown) connected to the admission system <b>110</b>, the trust broker <b>160</b>, or both. For example, an indication of an on-going cyber-attack would lead to a higher conversion value. Other examples for global parameters may include time of the day, certain day (weekends, weekdays, or holidays), and the like.</p><p id="p-0099" num="0098">In all of the above example access parameters, the weight (i.e., conversion value) can be adapted as a non-linear function. The non-linear function does not impact legitimate users that occasionally access the protected entity <b>140</b>, but such a function significantly impacts attackers frequently accessing the protected entity <b>140</b>. Thus, using the access parameters to determine the conversion value allows to &#x201c;discriminate&#x201d; among clients, while the clients can maintain their privacy. The mentioned above example access parameters may be determined based on historical data logged in the audit system <b>170</b>. For example, such data may include the identified conversion transaction, determined conversion values, and more.</p><p id="p-0100" num="0099">At S<b>410</b>, the client <b>120</b> is configured to send a request (<b>401</b>) for grant (buy) of access tokens from the admission system <b>110</b>. The access tokens may be used to access the protected entity <b>140</b> only after being converted. That is, a first-type of access token is required. In an embodiment, the request (<b>401</b>) includes a public key of the client <b>120</b> and may further designate the entity to be accessed. In another embodiment, the first-type of access token is based on zero-knowledge cryptography and does not require a public key. As an example, the access token can be implemented using Zcash technologies.</p><p id="p-0101" num="0100">The request (<b>401</b>) sent from the client <b>120</b> does not need to include any identifying information on a user of the client <b>120</b>. The request (<b>401</b>) may be sent using a standard layer-7 protocol, such as HTTP or HTTPS. The admission system <b>110</b> may implement different business flows to identify, qualify, or validate the client <b>120</b>, or a combination thereof.</p><p id="p-0102" num="0101">As noted above, in some embodiments, the request (<b>401</b>) may be trigged after the client <b>120</b> failed to directly access the protected object <b>140</b>. In such case, the protected object <b>140</b> may redirect a request from the client <b>120</b> to the admission system <b>110</b>. In some embodiments, the request (<b>401</b>) is sent only after the client <b>120</b> successfully completes a challenge selected and set by the admission system <b>110</b>. The challenge process is discussed in greater detail with reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0103" num="0102">At S<b>420</b>, upon identifying, validating, and approving the client's <b>120</b> request for admission, the admission system <b>110</b> is configured to grant a number of first-type access tokens to the client <b>120</b>. The access tokens are granted (e.g., paid) to the client <b>120</b> through the blockchain network <b>130</b> using the public key of the client <b>120</b>. In yet another embodiment, when the access tokens are implemented using zero-knowledge arguments of proof cryptography, such as ZK-SNARKs used in Zcash, the public key of the client <b>120</b> may not be required. When admission system <b>110</b> grants the first type access token, the system <b>110</b> add metadata in the blockchain network's <b>130</b> transaction record.</p><p id="p-0104" num="0103">At S<b>430</b>, the client <b>120</b> is configured to identify, on the blockchain network <b>130</b>, the transaction ID holding the first-type access tokens granted to the client <b>120</b>. The tokens may be stored in a cryptocurrency wallet included in the client <b>120</b>.</p><p id="p-0105" num="0104">It should be noted that S<b>410</b>-S<b>430</b> may not be performed if the client <b>120</b> holds enough first-type access tokens, for example, from previous transaction(s).</p><p id="p-0106" num="0105">At S<b>440</b>, the client <b>120</b> is configured to add a transaction (<b>402</b>) to the blockchain network <b>130</b> to convert the first-type of access tokens with a second-type of access tokens. The transaction (<b>402</b>) includes transaction data, a transaction hash value, and a hash value of a previous transaction(s). In an example embodiment, the transaction data may include a unique transaction ID, a number of available first-type access tokens, an identification of the admission system <b>110</b> as the source granting the access tokens, and a target service or resource at the protected entity <b>140</b> that the client <b>120</b> requests to access. The transaction (<b>402</b>) does not need to include any information identifying the client <b>120</b> or a user using the client <b>120</b>.</p><p id="p-0107" num="0106">At S<b>450</b>, the trust broker <b>160</b>, is configured to identify the transaction ID of the transaction (<b>402</b>) and determine the conversion value for the transaction (<b>402</b>) based on one or more access parameters. As noted above, such parameters may be related to the client <b>120</b>, the protected entity <b>140</b>, or any global indication. It should be noted that in some embodiments, the trust broker <b>160</b> may be integrated in the admission system <b>110</b>. Thus, the admission system <b>110</b> may perform the conversion operation. Further, the admission system <b>110</b>, trust broker <b>160</b>, or both can be implemented as a distributed system.</p><p id="p-0108" num="0107">In an embodiment, the conversion transaction can be realized as a smart contract written on the Ethereum network EVN or other blockchain network. In another embodiment, the conversion transaction can be realized using off-chain Oracle.</p><p id="p-0109" num="0108">As a result, the admission system <b>110</b> is configured to grant a number of second-type access tokens to the client <b>120</b> based on the conversion value. Such second-type access tokens are paid to the client <b>120</b> through the blockchain network <b>130</b> using, for example, a public key of the client <b>120</b>. In an example implementation, the first and second access-tokens may be different types of cryptography currencies. For example, the first-type token may be a Zcash coin and the second-type token may be Ethereum.</p><p id="p-0110" num="0109">It should be noted that the first-type and second-type of access tokens can be granted during different sessions. That is, the conversion of the first-type and second-type access tokens may not occur immediately after the first-type of access tokens are granted. That is, the client <b>110</b> may hold the first-type access tokens in its wallet or as unspent transactions in the ledger and request the conversion only when it is required to access the protected entity. Further, the first-type of access tokens may be a global currency, while the second-type of access token may be specific to certain types of protected entities. That is, various types of &#x201c;second-types&#x201d; tokens can be used. It should be further noted that, once the second-type of access tokens are granted to the client, the previous transaction, i.e., the transaction (<b>402</b>), is spent from a block maintained in the blockchain network <b>130</b> and cannot be referenced again by the client <b>120</b>.</p><p id="p-0111" num="0110">At S<b>460</b>, the client <b>120</b> is configured to identify, on the blockchain network <b>130</b>, the transaction ID holding the second-type of access tokens. The tokens may be stored in a cryptocurrency wallet included in the client <b>120</b>.</p><p id="p-0112" num="0111">At S<b>470</b>, the client <b>120</b> is configured to add a new transaction (<b>403</b>) to the blockchain network <b>130</b> to convert the first-type access tokens with a second-type access tokens. The transaction (<b>403</b>) includes transaction data, a transaction hash value, and a hash value of a previous transaction(s). In an example embodiment, the transaction data may include a unique transaction ID, a number of available second-type access tokens an identification of admission system <b>110</b> as the source granting the access tokens, and a target service or resource at the protected entity <b>140</b> that the client <b>120</b> requests to access. In an embodiment, the transaction may also include an arbitrary number of metadata elements as specified and requested by the admission system <b>110</b>, the client <b>120</b> or the protected object <b>140</b>.</p><p id="p-0113" num="0112">At S<b>480</b>, the client <b>120</b> is configured to send an access request (<b>404</b>) to the protected entity <b>140</b>. As mentioned above, the access request (<b>404</b>) can include the transaction ID of the transaction (<b>403</b>) to ease the protected entity <b>140</b> to look up for the transaction, the protected entity <b>140</b> may search for a relevant transaction in case that such transaction ID is not provided. As further noted above, any access request sent from the client <b>120</b> to the protected entity <b>140</b> is pending admission by the protected entity <b>140</b>.</p><p id="p-0114" num="0113">At S<b>490</b>, the protected entity <b>140</b> is configured to validate the transaction (<b>403</b>) through the blockchain network <b>130</b>. In an embodiment, such validation is performed by immediately spending the second-type access tokens designated in the transaction (<b>403</b>) as payment to the admission system <b>110</b>. As a result, the transaction (<b>403</b>) is marked as spent in a respective block maintained in the blockchain network <b>130</b> and cannot be referenced by again by the client <b>120</b>.</p><p id="p-0115" num="0114">At S<b>495</b>, once the transaction is validated and access tokens are paid, access is granted to the client <b>120</b> to access the target resource or service at the protected entity <b>140</b>.</p><p id="p-0116" num="0115">As mentioned above, each transaction (e.g., the transactions <b>402</b> and <b>403</b>) is a transfer of a certain value of access tokens between the client <b>120</b>, the admission system <b>110</b>, and the protected entity <b>140</b>, each of which may maintain a cryptocurrency wallet. Such information may be logged in an audit system (e.g., the audit system <b>170</b>, <figref idref="DRAWINGS">FIG. <b>1</b></figref>). This allow the admission system <b>110</b> and the trust broker <b>160</b> to derive the full history of transactions between the client <b>120</b>, the admission system <b>110</b>, and the trust broker <b>160</b>. Further, to provide access tokens, the admission system <b>110</b> and the client <b>120</b> may exchange their public keys. In order to &#x201c;spend&#x201d;, the access tokens, the admission system <b>110</b> and the protected entity <b>140</b> may exchange their public keys. That is, there is no direct transaction with respect to the utilization of the access tokens between the client <b>120</b> and the protected entity <b>140</b>. A key (private or public) is a cryptographic key.</p><p id="p-0117" num="0116">It should be appreciated that the disclosed embodiments provide an improved security solution as the bots would not be able to access and load protected entities with access requests. That is, by shifting the processing to malicious clients (through access tokens processing), the protected entities would remain free to handle legitimate requests with more available computing resources. Further, the protected entities would not require executing authentication processes, thereby further reducing the utilization of computing resources by such entities.</p><p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example flowchart illustrating a method for blockchain-based admission to a protected entity according to an embodiment.</p><p id="p-0119" num="0118">At S<b>510</b>, a request to grant access tokens of a first-type is received from a client. The client utilizes the first-type access tokens as a means to later access a protected entity.</p><p id="p-0120" num="0119">At S<b>520</b>, upon validating and approving the request, a first-type of access tokens are granted to the client. As noted above, such tokens can be paid (sent) the client directly or through the blockchain network.</p><p id="p-0121" num="0120">At S<b>530</b>, a transaction to convert the first-type of access tokens with access tokens of a second-type is identified on the blockchain network. The transaction data of the conversion transaction may designate, for example, the protected entity to access and a number of available first-type access tokens. The conversion transaction may also be directed to exchange cryptographic identities (e.g., keys or argument of knowledge) between the owners of the first and second access tokens. To this end, the conversion transaction may designate the public keys of, for example, the trust broker and the client.</p><p id="p-0122" num="0121">It should be noted that the request to grant first type of tokens and the conversion transaction are separate and the cryptographic identities are not shared between such requests. Further, no entity (user, owner of the trust broker, etc.) needs to reveal its (real) identity to receive and/or convert tokens. It should be further noted that the entity receiving the first-type of access token and the entity requesting the conversion to the second entity may be different entities.</p><p id="p-0123" num="0122">At S<b>540</b>, a conversion value for converting the first-type of access tokens into the second-type of access tokens is determined. As discussed in detail above, the conversion value is determined based on one or more access parameters. Examples of which are provided above.</p><p id="p-0124" num="0123">At S<b>550</b>, based on the determined conversion value, a first sum of the first-type of access tokens is converted into a second sum of the second-type of access-tokens. The first-type and second-type of access tokens may be different cryptocurrencies. The second-type of access tokens are paid or sent to a client or any other entity requesting the conversion. As noted above, the client uses the second-type of access token to access the protected entity. To this end, an access request is sent from the client to the protected entity. In order to allow access or admission, the protected entity identifies, in the blockchain network <b>130</b>, the second-type of access tokens of the client, and further spends such tokens to allow payment the admission system. It should be noted that revoking of tokens does not delete any transaction records.</p><p id="p-0125" num="0124">In response, at S<b>560</b>, the second-type of access tokens are received as a payment from the protected entity. At S<b>570</b>, upon receipt of the second-type of access tokens, an admission or access to the protected entity is granted to the client. It should be noted that the number of second-type of access tokens to be converted is determined by the conversion value. There is a minimum number of access-tokens required to the access the protected entity. Such number is determined regardless of the access parameters. The access parameters define the number of first-type of access tokens required to be converted to reach the minimum number of access-tokens. For example, if the minimum number of second-type access tokens is 10, then a client-A may need to convert 40 first-type of access tokens, while a client-B may be required to convert only 5 first-type of access tokens.</p><p id="p-0126" num="0125">In an embodiment, the method discussed herein can be performed by the admission system (<b>110</b>). In such embodiment, the admission system implements or includes the trust broker (<b>160</b>).</p><p id="p-0127" num="0126"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example block diagram of the admission system <b>110</b> according to an embodiment. The admission system <b>110</b> includes a processing circuitry <b>610</b> coupled to a memory <b>620</b>, a storage <b>630</b>, and a network interface <b>640</b>. In an embodiment, the components of the admission system <b>110</b> may be communicatively connected via a bus <b>650</b>.</p><p id="p-0128" num="0127">The processing circuitry <b>610</b> may be realized as one or more hardware logic components and circuits. For example, and without limitation, illustrative types of hardware logic components that can be used include field programmable gate arrays (FPGAs), application-specific integrated circuits (ASICs), Application-specific standard products (ASSPs), GPUs, system-on-a-chip systems (SOCs), general-purpose microprocessors, microcontrollers, digital signal processors (DSPs), and the like, or any other hardware logic components that can perform calculations or other manipulations of information. In an embodiment, the processing circuitry <b>610</b> (or the entire system <b>110</b>) may be implemented as a Turing machine over the blockchain network.</p><p id="p-0129" num="0128">The memory <b>620</b> may be volatile (e.g., RAM, etc.), non-volatile (e.g., ROM, flash memory, etc.), or a combination thereof. In one configuration, computer readable instructions to implement one or more embodiments disclosed herein may be stored in the storage <b>630</b>.</p><p id="p-0130" num="0129">In another embodiment, the memory <b>620</b> is configured to store software. Software shall be construed broadly to mean any type of instructions, whether referred to as software, firmware, middleware, microcode, hardware description language, or otherwise. Instructions may include code (e.g., in source code format, binary code format, executable code format, or any other suitable format of code). The instructions, when executed by the one or more processors, cause the processing circuitry <b>210</b> to perform the various processes described herein. Specifically, the instructions, when executed, cause the processing circuitry <b>610</b> to perform blockchain-based admission, as discussed hereinabove. In a further embodiment, the memory <b>620</b> may further include a memory portion <b>625</b> including the instructions.</p><p id="p-0131" num="0130">The storage <b>630</b> may be magnetic storage, optical storage, and the like, and may be realized, for example, as flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs), hard-drives, SSD, or any other medium which can be used to store the desired information, such as log of transactions, public keys, and so on.</p><p id="p-0132" num="0131">The network interface <b>640</b> allows the admission system <b>110</b> to communicate with the blockchain network, clients, trust broker, and protected entities. The network interface <b>640</b> further peer-to-peer communication with these elements.</p><p id="p-0133" num="0132">It should be understood that the embodiments described herein are not limited to the specific architecture illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, and that other architectures may be equally used without departing from the scope of the disclosed embodiments.</p><p id="p-0134" num="0133">It should be further noted that the trust broker <b>160</b> may be realized using a computing architecture, similar to the architecture illustrated in <figref idref="DRAWINGS">FIG. <b>6</b></figref>, and that other architectures may be equally used without departing from the scope of the disclosed embodiments. Further, the memory <b>620</b> may include instructions for executing the function of the trust broker <b>160</b>.</p><p id="p-0135" num="0134"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example flow diagram <b>700</b> illustrating a challenge process utilized in the any of the admission processes described above. The elements illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> including the admission system <b>110</b>, the client <b>120</b>, the blockchain network <b>130</b>, and the protected entity <b>140</b>, are described herein above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0136" num="0135">A S<b>710</b>, the client <b>120</b> sends a request (<b>701</b>) to create an anti-bot client identity and request a challenge. The requested identity will be used by the client <b>120</b> to access into one or more protected entities <b>140</b>. In an embodiment, the request (<b>701</b>) may already contain a public key of the client <b>120</b>. In another embodiment, the request (<b>701</b>) does not include such a key, and the admission system <b>110</b> may assign a key to the client <b>120</b> and generate a token ID.</p><p id="p-0137" num="0136">The request (<b>701</b>) sent from the client <b>120</b> does not need to include any identifying information of a user of the client <b>120</b>. The request (<b>701</b>) may be sent using a standard layer-7 protocol, such as HTTP or HTTPS. In yet another embodiment, the request (<b>701</b>) can be delivered using the blockchain network <b>130</b>. The admission system <b>110</b> may implement various known and unknown procedures such as, but not limited to, client fingerprinting, client certificates, human identification techniques such as CAPTHAs and other proof of knowledge techniques to further strengthen the understanding of client <b>120</b> natures.</p><p id="p-0138" num="0137">In some embodiments, the request (<b>701</b>) may be trigged after the client <b>120</b> failed to directly access the protected entity <b>140</b>. In such case, the protected entity <b>140</b> may redirect a request from the client <b>120</b> to the admission system <b>110</b>.</p><p id="p-0139" num="0138">At S<b>720</b>, upon identifying, validating, and approving the request (<b>701</b>), the admission system <b>110</b> selects a challenge and sends the challenge to the client <b>120</b> together with other needed information such as session IDs or token IDs.</p><p id="p-0140" num="0139">In an embodiment, the admission system <b>110</b> can interrogate other sources for information before selecting a challenge. Examples for such sources include external databases, reputation services, the anti-bot system historical records, the protected entity historical records, and the like.</p><p id="p-0141" num="0140">The selected challenge is characterized by the type and optionally complexity and may contain a randomly selectable seed value. As an example, the admission system <b>110</b> generates a random seed number, then selects a SHA256 challenge and sets the complexity requesting the client <b>120</b> to find a string that together with the seed would result with a SHA256 number with a certain probability.</p><p id="p-0142" num="0141">In other embodiment, the request <b>701</b> and the response <b>702</b> can be skipped all together if the client <b>120</b> choses to follow a non-interactive challenge path. In such non-interactive embodiment, the client <b>120</b> can chose a challenge from a pool of challenges available in an external registry (not shown). The registry may be part of the blockchain network <b>130</b>. In yet another embodiment, the challenge can be based on time of day and the time delta between the selected time of day and the actual time stamp in the <b>703</b> blockchain message deposits.</p><p id="p-0143" num="0142">At S<b>730</b>, the client <b>120</b> completes the challenge and deposits the result of the challenge in the blockchain network <b>130</b>.</p><p id="p-0144" num="0143">At S<b>740</b>, the admission system <b>110</b> validates the deposited challenge. This can be performed by monitoring the blockchain network <b>130</b> or by receiving a notification from the client <b>120</b>.</p><p id="p-0145" num="0144">At S<b>750</b>, upon validating the challenge's results, the admission system <b>110</b> is configured to deposit access tokens directly in the blockchain network <b>130</b> via a transaction <b>704</b> without waiting for explicit request from the client <b>120</b>. Alternatively, the admission system <b>110</b> can notify the client <b>120</b> of such deposit via a message <b>705</b>.</p><p id="p-0146" num="0145">It should be noted that, that if the challenge fails, no access tokens are deposited to the client <b>120</b>. The audit system <b>170</b> may log any failure to successfully complete a challenge to at least determine the determine trust of access value for the client, as discussed herein above.</p><p id="p-0147" num="0146">The various embodiments disclosed herein can be implemented as any combination of hardware, firmware, and software. Moreover, the software is preferably implemented as an application program tangibly embodied on a program storage unit or computer readable medium. The application program may be uploaded to, and executed by, a machine comprising any suitable architecture. Preferably, the machine is implemented on a computer platform having hardware such as one or more central processing units (&#x201c;CPUs&#x201d;), a memory, and input/output interfaces. The computer platform may also include an operating system and microinstruction code. The various processes and functions described herein may be either part of the microinstruction code or part of the application program, or any combination thereof, which may be executed by a CPU, whether or not such computer or processor is explicitly shown. In addition, various other peripheral units may be connected to the computer platform such as an additional data storage unit and a printing unit. Furthermore, a non-transitory computer readable medium is any computer readable medium except for a transitory propagating signal.</p><p id="p-0148" num="0147">It should be understood that any reference to an element herein using a designation such as &#x201c;first,&#x201d; &#x201c;second,&#x201d; and so forth does not generally limit the quantity or order of those elements. Rather, these designations are generally used herein as a convenient method of distinguishing between two or more elements or instances of an element. Thus, a reference to first and second elements does not mean that only two elements may be employed there or that the first element must precede the second element in some manner. Also, unless stated otherwise a set of elements comprises one or more elements. In addition, terminology of the form &#x201c;at least one of A, B, or C&#x201d; or &#x201c;one or more of A, B, or C&#x201d; or &#x201c;at least one of the group consisting of A, B, and C&#x201d; or &#x201c;at least one of A, B, and C&#x201d; used in the description or the claims means &#x201c;A or B or C or any combination of these elements.&#x201d; For example, this terminology may include A, or B, or C, or A and B, or A and C, or A and B and C, or 2A, or 2B, or 2C, and so on.</p><p id="p-0149" num="0148">All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the disclosed embodiments and the concepts contributed by the inventor to furthering the art, and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover, all statements herein reciting principles, aspects, and embodiments of the invention, as well as specific examples thereof, are intended to encompass both structural and functional equivalents thereof. Additionally, it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future, i.e., any elements developed that perform the same function, regardless of structure.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for controlling access to a protected entity by a client, comprising:<claim-text>receiving a redirected request of the client to access the protected entity that was denied by the protected entity, the redirected request including a public key of the client and designating the protected entity to be accessed, the protected entity being an entity to be protected from malicious threats;</claim-text><claim-text>granting, in response to the received redirected request, access tokens of a first type to the client, using the public key of the client;</claim-text><claim-text>identifying a conversion transaction identifying a request to convert the first type of access tokens with access tokens of a second type, wherein the transaction designates at least the protected entity;</claim-text><claim-text>determining a conversion value for converting the first type of access tokens into the second type of access tokens, wherein the conversion value is determined based on at least one access parameter;</claim-text><claim-text>converting, based on the determined conversion value, a first sum of the first type of access tokens into a second sum of the second type of access tokens; and</claim-text><claim-text>granting the client access to the protected entity when the sum of the second type of access tokens is received as a payment from the protected entity.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein granting the client access to the protected entity further comprises:<claim-text>validating the client based on at least a predefined condition, wherein the first-type access tokens are granted only upon successful validation of the client.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first-type access tokens and the second-type access tokens are different types.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the first-type access tokens and the second-type access tokens are cryptocurrency tokens having different cryptographic identities.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the least one access parameter weights a risk of false positive of granting access to an illegitimate client and of false negative of denying access of a legitimate client.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the at least one access parameter is related to any one of: the client, the protected entity, and at least one global indication.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining the conversion value further comprises:<claim-text>dynamically changing the conversion value based on at least one access parameter.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the conversion value is dynamically changed based on any one of: per transaction, per access request from the client, and per session.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>conditionally granting the client access to the protected entity; and</claim-text><claim-text>revoking the conditionally granted access, when a transaction holding the sum of the second type of access tokens is not identified.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the conversion transaction includes transaction data, a transaction hash value, and a previous transaction hash value, wherein the transaction data includes a unique transaction identifier (ID), a number of available first-type access tokens, an identification of a source granting the first-type access tokens, and an identifier of the protected entity.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the conversion transaction does not include information identifying at least one of: the client and a user of the client.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>logging at least the identified conversion transaction and the determined conversion value.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A non-transitory computer readable medium having stored thereon instructions for causing one or more processing units to execute the method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. An access system for controlling access to a protected entity by a client, comprising:<claim-text>a processing circuitry; and</claim-text><claim-text>a memory, the memory containing instructions that when, executed by the processing circuitry, configure the access system to:</claim-text><claim-text>receive a redirected request of the client to access the protected entity that was denied by the protected entity, the redirected request including a public key of the client and designating the protected entity to be accessed, the protected entity being an entity to be protected from malicious threats;</claim-text><claim-text>grant, in response to the received redirected request, access tokens of a first type to the client, using the public key of the client;</claim-text><claim-text>identify a conversion transaction identifying a conversion of the first type of access tokens with access tokens of a second type, wherein the transaction designates at least the protected entity;</claim-text><claim-text>determine a conversion value for converting the first type of access tokens into the second type of access tokens, wherein the conversion value is determined based on at least one access parameter;</claim-text><claim-text>convert, based on the determined conversion value, a first sum of the first type of access tokens into a second sum of the second type of access tokens; and</claim-text><claim-text>grant the client access to the protected entity when the sum of the second type of access tokens is received as a payment from the protected entity.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the access system is further configured to provide its public key to the client.</claim-text></claim></claims></us-patent-application>