<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004843A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004843</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17363542</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>04</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>5</main-group><subgroup>045</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2282</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>K</subclass><main-group>9</main-group><subgroup>6264</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">DECISION OPTIMIZATION UTILIZING TABULAR DATA</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>International Business Machines Corporation</orgname><address><city>Armonk</city><state>NY</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Marinescu</last-name><first-name>Radu</first-name><address><city>Dublin</city><country>IE</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Kishimoto</last-name><first-name>Akihiro</first-name><address><city>Tokyo</city><country>JP</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Palmes</last-name><first-name>Paulito</first-name><address><city>Dublin</city><country>IE</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Wistuba</last-name><first-name>Martin</first-name><address><city>Dublin</city><country>IE</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A computer-implemented method for automated policy decision making optimization is disclosed. The computer-implemented method includes creating a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables. The computer-implemented method further includes determining a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model. The computer-implemented method further includes learning a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm. The computer-implemented method further includes determining, based on the learned decision policy, an expected reward.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="176.87mm" wi="119.55mm" file="US20230004843A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="189.65mm" wi="128.02mm" file="US20230004843A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="188.72mm" wi="121.58mm" file="US20230004843A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="80.94mm" wi="155.70mm" file="US20230004843A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="168.91mm" wi="172.13mm" file="US20230004843A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="171.87mm" wi="157.99mm" orientation="landscape" file="US20230004843A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="204.47mm" wi="153.50mm" orientation="landscape" file="US20230004843A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">The present invention relates generally to the field of decision optimization, and in particular, automated policy decision making optimization using tabular data.</p><p id="p-0003" num="0002">Policy optimization is an effective reinforcement learning approach to solve continuous and discrete control tasks. Policy optimization recommends the best possible action to take based on a set of input information. Tabular data is structured into rows and columns, wherein each row represents a single record or data point and each column contains information pertaining a record or data point. Tabular data enables information to be organized and accessed in a meaningful manner for information processing and decision making.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0004" num="0003">According to one embodiment of the present invention, a computer-implemented method for automated policy decision making optimization is disclosed. The computer-implemented method includes creating a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables. The computer-implemented method further includes determining a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model. The computer-implemented method further includes learning a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm. The computer-implemented method further includes determining, based on the learned decision policy, an expected reward.</p><p id="p-0005" num="0004">According to another embodiment of the present invention, a computer program product for automated policy decision making optimization is disclosed. The computer program product includes one or more computer readable storage media and program instructions stored on the one or more computer readable storage media. The program instructions include instructions to create a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables. The program instructions further include instructions to determine a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model. The program instructions further include instructions to learn a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm. The program instructions further include instructions to determine, based on the learned decision policy, an expected reward.</p><p id="p-0006" num="0005">According to another embodiment of the present invention, a computer system for automated policy decision making optimization is disclosed. The computer system includes one or more computer processors, one or more computer readable storage media, and computer program instructions, the computer program instructions being stored on the one or more computer readable storage media for execution by the one or more computer processors. The program instructions include instructions to create a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables. The program instructions further include instructions to determine a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model. The program instructions further include instructions to learn a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm. The program instructions further include instructions to determine, based on the learned decision policy, an expected reward.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0007" num="0006">The drawings included in the present disclosure are incorporated into, and form part of, the specification. They illustrate embodiments of the present disclosure and, along with the description, serve to explain the principles of the disclosure. The drawings are only illustrative of certain embodiments and do not limit the disclosure.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram of a network computing environment for learning optimal decision policies from tabular data, generally designated <b>100</b>, in accordance with at least one embodiment of the present invention.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart diagram depicting operational steps for learning optimal decision policies from tabular data, generally designated <b>200</b>, in accordance with at least one embodiment of the present invention.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an exemplary set of tabular data, generally designated <b>300</b>, displaying potential state variables, action variables, and reward variables in accordance with at least one embodiment of the present invention.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram depicting components of a computer, generally designated <b>400</b>, suitable for executing a decision policy optimization (DPO) program <b>101</b> in accordance with at least one embodiment of the present invention.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram depicting a cloud computing environment <b>50</b> in accordance with at least one embodiment of the present invention.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a block diagram depicting a set of functional abstraction model layers provided by cloud computing environment <b>50</b> depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> in accordance with at least one embodiment of the present invention.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0014" num="0013">While the embodiments described herein are amenable to various modifications and alternative forms, specifics thereof have been shown by way of example in the drawings and will be described in detail. It should be understood, however, that the particular embodiments described are not to be taken in a limiting sense. On the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the disclosure.</p><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0015" num="0014">The present invention relates generally to the field of decision optimization, and in particular, automated policy decision making optimization using tabular data.</p><p id="p-0016" num="0015">Policy optimization from tabular data produces an optimized decision based on important information regarding an input. Oftentimes, policy optimization uses machine learning based decision support systems which learn a model that predicts the value of a target variable. However, current policy optimization methods are unable to provide a decision policy that recommends the next best action, decision, or sequence of next best actions or decisions. Deep reinforcement learning combines artificial neural networks with a reinforcement learning architecture that enables software-defined agents to learn the best actions possible in virtual environment in order to attain their goals. Neural net architectures are complex structures which take in multiple inputs to produce a single output. However, deep reinforcement learning and neural net architectures assume a particular neural network architecture for the Q-function. The Q-function is also known as the action-value function. Q(s, a) is the expected return (where the return is defined as the accumulated discounted reward over an infinite time horizon) that can be obtained in state (s) by applying action (a). Oftentimes, a Q-function is hand-crafted by an expert or simulator. Embodiments of the present invention recognize the need for a decision policy which does not require an expert or simulator to determine a Q-function.</p><p id="p-0017" num="0016">Embodiments of the present invention further recognize the need for the capability to automatically generate decision policies instead of point value predictions. Embodiments of the present invention generate an optimized policy based on a given dataset, in which the optimized policy includes one or more optimal actions to take. In an embodiment, the present invention provides for the capability to automatically identify state variables and corresponding actions. In an embodiment, the present invention provides for the capability to use current state and action variables to automatically learn a decision policy from a dataset. In an embodiment, the present invention provides for the capability to evaluate generated decision policies to identify the most optimal decision policy from a set of generated decision policies.</p><p id="p-0018" num="0017">Embodiments of the present invention automatically generate an optimized decision policy from raw tabular data with minimal, to no user input. Embodiments of the present invention further iterate over multiple function approximator candidates. For each iteration, the present invention learns a decision policy and determines an optimal decision policy at the end. Embodiments of the present invention learn an immediate reward model R(s,a) that predicts the immediate reward when applying action &#x201c;a&#x201d; in state &#x201c;s,&#x201d; as well as a transition model M(s,a) that predicts the next state &#x201c;s&#x2032;&#x201d; when applying action &#x201c;a&#x201d; in state &#x201c;s.&#x201d;</p><p id="p-0019" num="0018">Embodiments of the present invention improve upon the foregoing deficiencies of decision optimization by constructing candidates of Q-functions from the data. Embodiments of the present invention perform a systematic search over the possible partitions of the input columns x into state (S) variables, action (A) variables and reward (R) variables in order to determine a policy that is relevant to the decision maker or decision problem to be solved. This search procedure is done when the decision maker does not specify the state, action and reward columns in the dataset. By selecting a subset of columns to act as state, action, and reward variables.</p><p id="p-0020" num="0019">Embodiments of the present invention perform meta-learning of the Q-function, together with meta-learning of the environment of a given set of tabular data), with respect to regression learning algorithms. Embodiments of the present invention provide for the accommodation of diverse domains without requiring a user to manually design or select the desired function approximator Q (e.g., a neural net in the case of a Deep Q-Network (DQN)).</p><p id="p-0021" num="0020">The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present.</p><p id="p-0022" num="0021">The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suit-able combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.</p><p id="p-0023" num="0022">Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.</p><p id="p-0024" num="0023">Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++ or the like, and conventional procedural programming languages, such as the &#x201c;C&#x201d; programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.</p><p id="p-0025" num="0024">Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.</p><p id="p-0026" num="0025">These computer readable program instructions may be provided to a processor of a general-purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0027" num="0026">The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.</p><p id="p-0028" num="0027">The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.</p><p id="p-0029" num="0028">The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.</p><p id="p-0030" num="0029">The present invention will now be described in detail with reference to the Figures. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a functional block diagram of a network computing environment for determining optimized decisions using tabular data, generally designated <b>100</b>, in accordance with at least one embodiment of the present invention. In an embodiment, network computing environment <b>100</b> may be provided by cloud computing environment <b>50</b>, as depicted and described with reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in accordance with at least one embodiment of the present invention. <figref idref="DRAWINGS">FIG. <b>1</b></figref> provides an illustration of only one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environment may be made by those skilled in the art without departing from the scope of the present invention as recited by the claims.</p><p id="p-0031" num="0030">Network computing environment <b>100</b> includes user device <b>110</b>, server <b>120</b>, and storage device <b>130</b> interconnected over network <b>140</b>. User device <b>110</b> may represent a computing device of a user, such as a laptop computer, a tablet computer, a netbook computer, a personal computer, a desktop computer, a personal digital assistant (PDA), a smart phone, a wearable device (e.g., smart glasses, smart watches, e-textiles, AR headsets, etc.), or any programmable computer systems known in the art. In general, user device <b>110</b> can represent any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with server <b>120</b>, storage device <b>130</b> and other devices (not depicted) via a network, such as network <b>140</b>. User device <b>110</b> can include internal and external hardware components, as depicted and described in further detail with respect to <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0032" num="0031">User device <b>110</b> further includes user interface <b>112</b> and application <b>114</b>. User interface <b>112</b> is a program that provides an interface between a user of an end user device, such as user device <b>110</b>, and a plurality of applications that reside on the device (e.g., application <b>114</b>). A user interface, such as user interface <b>112</b>, refers to the information (such as graphic, text, and sound) that a program presents to a user, and the control sequences the user employs to control decision policy optimization (DPO) program <b>101</b>. A variety of types of user interfaces exist. In one embodiment, user interface <b>112</b> is a graphical user interface. A graphical user interface (GUI) is a type of user interface that allows users to interact with electronic devices, such as a computer keyboard and mouse, through graphical icons and visual indicators, such as secondary notation, as opposed to text-based interfaces, typed command labels, or text navigation. In computing, GUIs were introduced in reaction to the perceived steep learning curve of command-line interfaces which require commands to be typed on the keyboard. The actions in GUIs are often performed through direct manipulation of the graphical elements. In another embodiment, user interface <b>112</b> is a script or application programming interface (API). In an embodiment, user inputs tabular data or other relevant data via application <b>114</b> or user interface <b>112</b>.</p><p id="p-0033" num="0032">Application <b>114</b> can be representative of one or more applications (e.g., an application suite) that operate on user device <b>110</b>. In an embodiment, application <b>114</b> is representative of one or more applications (e.g., social media applications, web conferencing applications, and email applications) located on user device <b>110</b>. In various example embodiments, application <b>114</b> can be an application that a user of user device <b>110</b> utilizes to input tabular data and view the optimum decision. In an embodiment, application <b>114</b> can be a client-side application associated with a server-side application running on server <b>120</b> (e.g., a client-side application associated with a decision policy optimization program <b>101</b>). In an embodiment, application <b>114</b> can operate to perform processing steps of decision policy optimization program <b>101</b> (i.e., application <b>114</b> can be representative of decision policy optimization program <b>101</b> operating on user device <b>110</b>).</p><p id="p-0034" num="0033">Server <b>120</b> includes DPO program <b>101</b>. Server <b>120</b> is configured to provide resources to various computing devices, such as user device <b>110</b>. In various embodiments, server <b>120</b> is a computing device that can be a standalone device, a management server, a web server, an application server, a mobile device, or any other electronic device or computing system capable of receiving, sending, and processing data. In an embodiment, server <b>120</b> represents a server computing system utilizing multiple computers as a server system, such as in a cloud computing environment. In an embodiment, server <b>120</b> represents a computing system utilizing clustered computers and components (e.g. database server computer, application server computer, web server computer, webmail server computer, media server computer, etc.) that act as a single pool of seamless resources when accessed within network computing environment <b>100</b>. In general, server <b>120</b> represents any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with each other, as well as with user device <b>110</b>, storage device <b>130</b>, and other computing devices (not shown) within network computing environment <b>100</b> via a network, such as network <b>140</b>.</p><p id="p-0035" num="0034">Server <b>120</b> may include components as depicted and described in detail with respect to cloud computing node <b>10</b>, as described in reference to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, in accordance with at least one embodiment of the present invention. Server <b>120</b> may include components, as depicted, and described in detail with respect to computing device <b>300</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in accordance with at least one embodiment of the present invention.</p><p id="p-0036" num="0035">In various embodiments, storage device <b>130</b> is a secure data repository for persistently storing audio notification tones utilized by various applications and user devices of a user, such as user device <b>110</b>. Storage device <b>130</b> may be implemented using any volatile or non-volatile storage media known in the art for storing data. For example, storage device <b>130</b> may be implemented with a tape library, optical library, one or more independent hard disk drives, multiple hard disk drives in a redundant array of independent disks (RAID), solid-state drives (SSD), random-access memory (RAM), and any possible combination thereof. Similarly, storage device <b>130</b> may be implemented with any suitable storage architecture known in the art, such as a relational database, an object-oriented database, or one or more tables.</p><p id="p-0037" num="0036">In an embodiment, storage device <b>130</b> includes tabular data <b>132</b> and decision policies <b>134</b>. In an embodiment, tabular data <b>132</b> includes tabular data or any data which can be put into tabular form. In an embodiment, tabular data <b>132</b> is stored in a relational database. A relational database is a database which can identify and access data in relation to another piece of data in the database. Relational databases are often organized in tables. It should be noted that although embodiments of the present invention are directed towards automatically generating optimized decision policies based on tabular data stored in a relational or sequential (SQL) database, any type of data structure and database structure may be used to practice the invention. For example, in alternative embodiments, the automatic generation of optimized decision polices may be accomplished using data stored in a hierarchical database, object-oriented database, and non-relational or NoSQL database.</p><p id="p-0038" num="0037">In an embodiment, decision policies <b>134</b> include a dynamic set of rules for automatically determining optimized decision or action(s). In an embodiment, decision policies <b>134</b> include a dynamic set of rules from a reinforcement learning algorithm that learns one or more policies. In an embodiment, decision policies <b>134</b> include information describing different decision-making actions that DPO program <b>101</b> should generate depending on the circumstances or tabular data input. For example, decision policies <b>134</b> may include a different set of rules for how and when to determine an optimum decision depending on what type of setting the DPO program <b>101</b> is being used in. For example, decision policies <b>134</b> may include one set of rules for if DPO program <b>101</b> is analyzing the stock market verses if the DPO program <b>101</b> is analyzing inventory status of a warehouse.</p><p id="p-0039" num="0038">In an embodiment, DPO program <b>101</b> may be configured to access various data sources, such as tabular data <b>132</b>, that may include personal data, content, contextual data, or information that a user does not want to be processed. Personal data includes personally identifying information or sensitive personal information as well as user information, such as location tracking or geolocation information. Processing refers to any operation, automated or unautomated, or set of operations such as collecting, recording, organizing, structuring, storing, adapting, altering, retrieving, consulting, using, disclosing by transmission, dissemination, or otherwise making available, combining, restricting, erasing, or destroying personal data. In an embodiment, DPO program <b>101</b> enables the authorized and secure processing of personal data. In an embodiment, DPO program <b>101</b> provides informed consent, with notice of the collection of personal data, allowing the user to opt in or opt out of processing personal data. Consent can take several forms. Opt-in consent can impose on the user to take an affirmative action before personal data is processed. Alternatively, opt-out consent can impose on the user to take an affirmative action to prevent the processing of personal data before personal data is processed. In an embodiment, DPO program <b>101</b> provides information regarding personal data and the nature (e.g., type, scope, purpose, duration, etc.) of the processing. In an embodiment, DPO program <b>101</b> provides a user with copies of stored personal data. In an embodiment, DPO program <b>101</b> allows for the correction or completion of incorrect or incomplete personal data. In an embodiment, DPO program <b>101</b> allows for the immediate deletion of personal data.</p><p id="p-0040" num="0039">In an embodiment, DPO program <b>101</b> utilizes Auto Machine Learning (AutoML) system to automatically determine and execute an optimum decision or action(s). AutoML is a variation of automated machine learning which extends the automation of model building towards automation of the full life cycle of a machine learning model. It applies intelligent automation to the task of building predictive machine learning models by preparing data for training, identifying the best type of model for the given data, then choosing the features, or columns of data, that best support the problem the model is solving. For example, the AutoML may be IBM's AutoAI System. While reference is made to IBM-specific hardware and/or software components, it should be understood that aspects of the present invention may be applied equally to other machine learning technologies. Finally, automation tests a variety of tuning options to reach the best result as it generates, then ranks, model-candidate pipelines. The best performing pipelines can be put into production to process new data, and deliver predictions based on the model training.</p><p id="p-0041" num="0040">In an embodiment, DPO program <b>101</b> automatically generates, as an output, an optimized decision policy based on tabular data. In an embodiment, DPO program <b>101</b> selects a subset of columns as state variables, a column as an action variable, and a column as a reward variable. In an embodiment, selection of the state, action, and reward variables is done iteratively. In an embodiment, a function approximator Q is learned from the selected columns acting as state variables, an action variable, and a reward variable, and the function approximator Q is applied to a reinforcement learning algorithm to derive an optimal decision policy. In an embodiment, the function approximator Q(s, a) is selected from the set of candidates based on a performance metric. A performance metric measures the behavior, activities, or performance of an activity or business. In an embodiment, a function approximator Q function Q(s, a) is learned from the selected columns acting as state variables, an action variable, and a reward variable, and the function approximator function Q(s, a) is applied to a reinforcement learning algorithm to derive an optimal decision policy. In an embodiment, the Q-function Q(s, a) also known as the action-value function, is the expected return (where the return is defined as the accumulated discounted reward over an infinite time horizon) that can be obtained in state (s) by applying action (a). In an embodiment, a reinforcement learning algorithm is a Q-learning algorithm. Q-learning is a model-free reinforcement learning algorithm to learn the value of an action in a particular state. It does not require a model of the environment, and it can handle problems with stochastic transitions and rewards without requiring adaptations.</p><p id="p-0042" num="0041">In an embodiment, DPO program <b>101</b> receives a tabular dataset from generated from tabular data <b>132</b>. In an embodiment, the tabular dataset is structured data organized in a tabular form. In an embodiment, the tabular dataset is formed from an initial set of unstructured data that DPO program <b>101</b> organizes into a structured, tabular form. In an embodiment, DPO program <b>101</b> determines a state, action, and one or more reward variables. A state variable is one of the set of variables from the tabular dataset used to describe the mathematical &#x201c;state&#x201d; of a dynamical system. The state of a system is used to determine an optimal decision policy. In an embodiment, a state variable (S) is one or more variables from the tabular dataset. In an embodiment, the user selects one or more state variables. In an embodiment, the action variable is selected by the user. An action variable includes the action to be taken for an optimum output. For example, if a tabular dataset for the inventory in a warehouse includes the inventory type, demand, stockout, and balance as state variables, the action may be whether to order more inventory. The reward variable is the reward from the optimal decision. For example, for a tabular dataset associated with inventory in a warehouse, the least expensive cost for purchasing the inventory would be the reward. In an embodiment, the state and action variables are known and DPO program <b>101</b> determines the reward variable. In an embodiment, the state and reward variables are known and DPO program <b>101</b> determines the action variable.</p><p id="p-0043" num="0042">In an embodiment, DPO program <b>101</b> generates one or more decisions. In an embodiment, DPO program <b>101</b> ranks the decisions based on one or more learned decision policies <b>134</b>. In an embodiment, DPO program <b>101</b> determines an optimal decision based on one or more learned decision policies <b>134</b>.</p><p id="p-0044" num="0043">In an embodiment, DPO program <b>101</b> automatically generates, as an output, an optimized decision policy based on tabular data received as an input. As an example, let X be the set of variables corresponding to the columns in dataset (D). Based on the dataset (D), state (S), action (A), and reward (R) variables are selected from X. For simplicity and without loss of generality, we assume that S<sub>i </sub>includes a set of variables, and A<sub>i </sub>and R<sub>i </sub>are single variables. However, in other instances, A<sub>i </sub>and R<sub>i </sub>may be include a set of variables or any possible combinations thereof. In an embodiment, DPO program <b>101</b> automatically selects that state (S), action (A), and reward (R) variables from X. In an alternative embodiment, a user selects the state (S), action (A), and reward (R) variables from X. In an embodiment, DPO program <b>101</b> further generates a state vector (S<sub>i</sub>), an action vector (A<sub>i</sub>), and a reward vector (R<sub>i</sub>) based on the dataset (D).</p><p id="p-0045" num="0044">In an embodiment, S<sub>j</sub>, A<sub>j</sub>, and R<sub>j </sub>are the previous set of state, action, and reward columns. In an embodiment, DPO program <b>101</b> automatically generates S<sub>i</sub>, A<sub>i</sub>, and R<sub>i</sub>, which are different from the previous set of data. In an embodiment, S<sub>i</sub>, A<sub>i</sub>, and R<sub>i </sub>are sets or vectors of columns or variables in the dataset. In an embodiment, a column is a variable. For example, if S<sub>i </sub>is a single element, then S<sub>i </sub>is just a variable.</p><p id="p-0046" num="0045">In an embodiment, DPO program <b>101</b> selects variables S<sub>i</sub>, A<sub>i</sub>, and R<sub>i </sub>based on a previous set of variables S<sub>j</sub>, A<sub>j</sub>, and R<sub>j</sub>. In an embodiment, if S<sub>j</sub>, A<sub>j</sub>, and R<sub>j </sub>are empty, then S<sub>i </sub>is a random subset of X, A<sub>i </sub>is a random variable in X, but not in S<sub>i</sub>, and R<sub>i </sub>is a numerical variable in X, but not in S<sub>i </sub>and a different numerical variable than A<sub>i</sub>. In an embodiment, if S<sub>j</sub>, A<sub>j</sub>, and R<sub>j </sub>are not empty, then S<sub>i</sub>=S<sub>j</sub>, where with a probability of 0.5 or greater, a variable is selected from X that is not in S<sub>j </sub>and is different from A<sub>j </sub>and R<sub>j </sub>and added to S<sub>i</sub>. Else, if a probability of less than 0.5, a random variable is selected from S<sub>i </sub>and removed. In an embodiment, if S<sub>j</sub>, A<sub>j</sub>, and R<sub>j </sub>are not empty, then S<sub>i</sub>=S<sub>j</sub>, where with a probability of 0.5 or greater, a variable A<sub>i </sub>is selected from X that is not in S<sub>i </sub>and different from A<sub>j</sub>. Else, if a probability of less than 0.5, A<sub>i</sub>=A<sub>j</sub>. In an embodiment, if S<sub>j</sub>, A<sub>j</sub>, and R<sub>j </sub>are not empty, then S<sub>i</sub>=S<sub>j</sub>, where with a probability of 0.5 or greater, a numerical variable R<sub>i </sub>is selected from X that is not in S<sub>i </sub>and different from A<sub>i</sub>. Else, if a probability of less than 0.5, R<sub>i</sub>=R<sub>j</sub>.</p><p id="p-0047" num="0046">In an embodiment, DPO program <b>101</b> generates a set of k candidate Q-functions (Q<sub>1 </sub>. . . Q<sub>k</sub>) with scope (Si, Ai). In an embodiment, DPO program <b>101</b> generates a set of k environments (E<sub>j </sub>. . . E<sub>k</sub>), where each Ej consists of an immediate reward model Rj(Si,Ai) and a transition model Mj(Si,ai). In an embodiment, a trained immediate reward model R(s,a) or Rj(Si,Ai) predicts the immediate reward when applying action (A) in state (S). In an embodiment, the trained immediate reward model can be selected form a set of candidate models based on a performance metric (e.g., accuracy). In an embodiment, for each Q-function Q<sub>j</sub>, (where j=1 . . . k), DPO program <b>101</b> utilizes a Reinforcement Learning (RL) algorithm, such as a DQN, with Q-function Q<sub>j </sub>and environment E<sub>j </sub>to learn a policy P<sub>ij</sub>. In an embodiment, a neural network (NN) having Q-function Q<sub>j </sub>(NN Q<sub>j</sub>) that approximates the action-value function is trained. In an embodiment, DPO program <b>101</b> determines an expected return R<sub>ij </sub>of P<sub>ij </sub>when evaluated with respect to a subset D&#x2032; of database D. In an embodiment, if R<sub>ij </sub>is an improvement of any prior determined expected return, then P<sub>ij </sub>is maintained as the optimal policy (P<sub>best</sub>=P<sub>ij</sub>). In an embodiment, DPO program <b>101</b> utilizes the policies in decision policies <b>134</b> to determine an optimal decision. In an embodiment, DPO program <b>101</b> returns the best or most optimal policy P<sub>best </sub>for a given dataset. In an embodiment, P<sub>best </sub>is the optimal learned decision policy.</p><p id="p-0048" num="0047">In an embodiment, DPO program <b>101</b> determines a reward function R(s,a). In an embodiment, DPO program <b>101</b> learns a reward function. For example, the input dataset where state column(s), action column (a) and reward column (r) are known, the output is a model R(s,a) that predicts the reward when applying action (a) in state (s). For example, if (X<sub>1</sub>, . . . , X<sub>n</sub>) are the state and action columns and let Y be the reward, DPO program <b>101</b> utilizes a AutoAI to learn regression model R(s,a) to return top k models R1(s,a) . . . Rk(s,a).</p><p id="p-0049" num="0048">In an embodiment, a transition model M(s,a) predicts the next state S if applying action A in state S. For example, DPO program <b>101</b> receives an input dataset D with state, action, and reward data. In an embodiment, DPO program <b>101</b> utilizes AutoAI to learn a multi-variate prediction model and return top k models. For example, model M predicts inventory and demand as next state as a multivariate prediction model. In an embodiment, the transition model M(s,a) predicts a next state when applying an action (a) to a state (s). In an embodiment the transition model can be selected from a set of candidate models based on a performance metric (e.g., accuracy).</p><p id="p-0050" num="0049">In an embodiment, DPO program <b>101</b> generates Q-function candidates. In an embodiment, DPO program <b>101</b> receives an input dataset D with state variables S<sub>i</sub>, action variable A<sub>i</sub>, and reward variable R<sub>i</sub>. a dataset D&#x2032; from D such that it's columns correspond to S<sub>i</sub>, A<sub>i</sub>, and R<sub>i</sub>. In an embodiment, Q1, . . . , Qk is the top k Machine Learning regression pipelines obtained by running an Auto Machine Learning (AutoML) system for regression on dataset D&#x2032; with target column R<sub>i</sub>. In an embodiment, Q1, . . . , Qk is the top k neural network architectures obtained by running a NAS (neural architecture search) algorithm for dataset D&#x2032; with target column R<sub>i</sub>. In an embodiment, DPO program <b>101</b> determines a return of Q1, . . . , Qk together with their parameters &#x3b8;<sub>1</sub>, . . . , &#x3b8;<sub>k</sub>. In an embodiment, DPO program <b>101</b> determines an output of a set of function approximators that predict R<sub>i </sub>given (S<sub>i</sub>, A<sub>i</sub>).</p><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a flow chart diagram depicting operational steps for learning optimal decision policies from tabular data, generally designated <b>200</b>, in accordance with at least one embodiment of the present invention. <figref idref="DRAWINGS">FIG. <b>2</b></figref> provides only an illustration of one implementation and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environment may be made by those skilled in the art without departing from the scope of the invention as recited by the claims.</p><p id="p-0052" num="0051">At step S<b>202</b>, DPO program <b>101</b> receives state, action, and reward variables. In an embodiment, DPO program <b>101</b> receives state, action, and reward variables as tabular data. In an embodiment, DPO program <b>101</b> selects a subset of columns as state variables, a column as an action variable, and a column as a reward variable. In an embodiment, selection of the state, action, and reward variables is done iteratively.</p><p id="p-0053" num="0052">At step S<b>204</b>, DPO program <b>101</b> determines state vector (S<sub>i</sub>), action vector (A<sub>i</sub>), and reward vector (R<sub>i</sub>). In an embodiment, DPO program <b>101</b> generates a state vector (S<sub>i</sub>), an action vector (A<sub>i</sub>), and a reward vector (R<sub>i</sub>) based on the tabular dataset. In an embodiment, DPO program <b>101</b> automatically generates S<sub>i</sub>, A<sub>i</sub>, and R<sub>i</sub>, which are different from the previous set of data. In an embodiment, S<sub>i</sub>, A<sub>i</sub>, and R<sub>i </sub>are sets or vectors of columns or variables in the dataset.</p><p id="p-0054" num="0053">At step S<b>206</b>, DPO program <b>101</b> generates Q-function candidates (f<sub>j </sub>(S<sub>i</sub>, A<sub>i</sub>), environment models (R<sub>j </sub>(S<sub>i</sub>, A<sub>i</sub>), and transition (M<sub>j </sub>(S<sub>i</sub>, A<sub>i</sub>). In an embodiment, a function approximator Q is learned from the selected columns acting as state variables, an action variable, and a reward variable, and the function approximator Q is applied to a reinforcement learning algorithm to derive an optimal decision policy. In an embodiment, the function approximator X is selected from the set of candidates based on a performance metric. In an embodiment, a function approximator Q function Q(s, a) is learned from the selected columns acting as state variables, an action variable, and a reward variable, and the function approximator function Q(s, a) is applied to a reinforcement learning algorithm to derive an optimal decision policy.</p><p id="p-0055" num="0054">At step S<b>208</b>, DPO program <b>101</b> determines one or more decision policies (P<sub>jj</sub>). In an embodiment, DPO program <b>101</b> uses one or more Q-function candidates in a reinforcement learning algorithm to learn one or more decision policies.</p><p id="p-0056" num="0055">At decision step S<b>210</b>, DPO program <b>101</b> determines if one or more decision policies are optimal. In an embodiment, DPO program <b>101</b> evaluates generated decision policies to identify the most optimal decision policy from a set of generated decision policies. In an embodiment, DPO program <b>101</b> determines if there is an improvement of any prior determined expected reward to determine the optimal decision policy. If there are not one or more decision policies that are optimal (decision step S<b>210</b> &#x201c;NO&#x201d; branch), DPO program <b>101</b> proceeds to step S<b>206</b>. If it is determined that one or more decision policies are optimal (decision step S<b>210</b> &#x201c;YES&#x201d; branch), DPO program <b>101</b> concludes.</p><p id="p-0057" num="0056"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an exemplary set of tabular data, generally designated <b>300</b>, displaying potential state variable, action variable, and reward variable in accordance with at least one embodiment of the present invention. As depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the set of tabular data is associated with a warehouse inventory. In an embodiment, DPO program <b>101</b> automatically selects a set of columns as state variables (S), a column as reward variables (R), and a column as action variables (A). Here, the state variables (S) are the amount of inventory, demand, stockout, and balance. The reward variable (R) is the cost. In this example, the action variable (A) is determinative of how many items need to be ordered. In an embodiment, DPO program <b>101</b> trains a machine learning model to predict a reward when applying an action (a) to a particular state (S). In an embodiment, DPO program trains a machine learning model to predict an action when applying a reward (r) to a particular state (s). For example, let (X<sub>1</sub>, . . . , X<sub>n</sub>) be the features for the state (S) and action (A) columns, and let Y be the reward. In this example, DPO program utilizes an AutoAI algorithm to learn a regression or multistate variable prediction model R(s,a) to return top k models R1(s,a) . . . Rk(s,a).</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a block diagram depicting components of a computing device, generally designated <b>400</b>, suitable for DPO program <b>101</b> in accordance with at least one embodiment of the invention. Computing device <b>400</b> includes one or more processor(s) <b>404</b> (including one or more computer processors), communications fabric <b>402</b>, memory <b>406</b> including, RAM <b>416</b> and cache <b>418</b>, persistent storage <b>408</b>, which further includes DPO program <b>101</b>, communications unit <b>412</b>, I/O interface(s) <b>414</b>, display <b>422</b>, and external device(s) <b>420</b>. It should be appreciated that <figref idref="DRAWINGS">FIG. <b>3</b></figref> provides only an illustration of one embodiment and does not imply any limitations with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environment may be made.</p><p id="p-0059" num="0058">As depicted, computing device <b>400</b> operates over communications fabric <b>402</b>, which provides communications between computer processor(s) <b>404</b>, memory <b>406</b>, persistent storage <b>408</b>, communications unit <b>412</b>, and input/output (I/O) interface(s) <b>414</b>. Communications fabric <b>402</b> can be implemented with any architecture suitable for passing data or control information between processor(s) <b>404</b> (e.g., microprocessors, communications processors, and network processors), memory <b>406</b>, external device(s) <b>420</b>, and any other hardware components within a system. For example, communications fabric <b>402</b> can be implemented with one or more buses.</p><p id="p-0060" num="0059">Memory <b>406</b> and persistent storage <b>408</b> are computer readable storage media. In the depicted embodiment, memory <b>406</b> includes random-access memory (RAM) <b>416</b> and cache <b>418</b>. In general, memory <b>406</b> can include any suitable volatile or non-volatile one or more computer readable storage media.</p><p id="p-0061" num="0060">Program instructions for DPO program <b>101</b> can be stored in persistent storage <b>408</b>, or more generally, any computer readable storage media, for execution by one or more of the respective computer processor(s) <b>404</b> via one or more memories of memory <b>406</b>. Persistent storage <b>408</b> can be a magnetic hard disk drive, a solid-state disk drive, a semiconductor storage device, read-only memory (ROM), electronically erasable programmable read-only memory (EEPROM), flash memory, or any other computer readable storage media that is capable of storing program instructions or digital information.</p><p id="p-0062" num="0061">Media used by persistent storage <b>408</b> may also be removable. For example, a removable hard drive may be used for persistent storage <b>408</b>. Other examples include optical and magnetic disks, thumb drives, and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage <b>408</b>.</p><p id="p-0063" num="0062">Communications unit <b>412</b>, in these examples, provides for communications with other data processing systems or devices. In these examples, communications unit <b>412</b> can include one or more network interface cards. Communications unit <b>412</b> may provide communications through the use of either or both physical and wireless communications links. In the context of some embodiments of the present invention, the source of the various input data may be physically remote to computing device <b>400</b> such that the input data may be received, and the output similarly transmitted via communications unit <b>412</b>.</p><p id="p-0064" num="0063">I/O interface(s) <b>414</b> allows for input and output of data with other devices that may operate in conjunction with computing device <b>400</b>. For example, I/O interface(s) <b>414</b> may provide a connection to external device(s) <b>420</b>, which may be as a keyboard, keypad, a touch screen, or other suitable input devices. External device(s) <b>420</b> can also include portable computer readable storage media, for example thumb drives, portable optical or magnetic disks, and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage media and may be loaded onto persistent storage <b>408</b> via I/O interface(s) <b>414</b>. I/O interface(s) <b>414</b> also can similarly connect to display <b>422</b>. Display <b>422</b> provides a mechanism to display data to a user and may be, for example, a computer monitor.</p><p id="p-0065" num="0064">It is to be understood that although this disclosure includes a detailed description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.</p><p id="p-0066" num="0065">Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.</p><p id="p-0067" num="0066">Characteristics are as follows:</p><p id="p-0068" num="0067">On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.</p><p id="p-0069" num="0068">Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).</p><p id="p-0070" num="0069">Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).</p><p id="p-0071" num="0070">Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.</p><p id="p-0072" num="0071">Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported, providing transparency for both the provider and consumer of the utilized service.</p><p id="p-0073" num="0072">Service Models are as follows:</p><p id="p-0074" num="0073">Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based email). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.</p><p id="p-0075" num="0074">Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.</p><p id="p-0076" num="0075">Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).</p><p id="p-0077" num="0076">Deployment Models are as follows:</p><p id="p-0078" num="0077">Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.</p><p id="p-0079" num="0078">Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.</p><p id="p-0080" num="0079">Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.</p><p id="p-0081" num="0080">Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).</p><p id="p-0082" num="0081">A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.</p><p id="p-0083" num="0082"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a block diagram depicting a cloud computing environment <b>50</b> in accordance with at least one embodiment of the present invention. Cloud computing environment <b>50</b> includes one or more cloud computing nodes <b>10</b> with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone <b>54</b>A, desktop computer <b>54</b>B, laptop computer <b>54</b>C, and/or automobile computer system <b>54</b>N may communicate. Nodes <b>10</b> may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment <b>50</b> to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices <b>54</b>A-N shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> are intended to be illustrative only and that computing nodes <b>10</b> and cloud computing environment <b>50</b> can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).</p><p id="p-0084" num="0083"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is block diagram depicting a set of functional abstraction model layers provided by cloud computing environment <b>50</b> depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref> in accordance with at least one embodiment of the present invention. It should be understood in advance that the components, layers, and functions shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref> are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:</p><p id="p-0085" num="0084">Hardware and software layer <b>60</b> includes hardware and software components. Examples of hardware components include: mainframes <b>61</b>; RISC (Reduced Instruction Set Computer) architecture based servers <b>62</b>; servers <b>63</b>; blade servers <b>64</b>; storage devices <b>65</b>; and networks and networking components <b>66</b>. In some embodiments, software components include network application server software <b>67</b> and database software <b>68</b>.</p><p id="p-0086" num="0085">Virtualization layer <b>70</b> provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers <b>71</b>; virtual storage <b>72</b>; virtual networks <b>73</b>, including virtual private networks; virtual applications and operating systems <b>74</b>; and virtual clients <b>75</b>.</p><p id="p-0087" num="0086">In one example, management layer <b>80</b> may provide the functions described below. Resource provisioning <b>81</b> provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing <b>82</b> provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal <b>83</b> provides access to the cloud computing environment for consumers and system administrators. Service level management <b>84</b> provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment <b>85</b> provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.</p><p id="p-0088" num="0087">Workloads layer <b>90</b> provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation <b>91</b>; software development and lifecycle management <b>92</b>; virtual classroom education delivery <b>93</b>; data analytics processing <b>94</b>; transaction processing <b>95</b>; and tabular data based decision policy optimization <b>96</b>.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A computer-implemented method for automated policy decision making optimization, the computer-implemented method comprising:<claim-text>creating a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables;</claim-text><claim-text>determining a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model;</claim-text><claim-text>learning a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm; and</claim-text><claim-text>determining, based on the learned decision policy, an expected reward.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>determining an optimized decision policy based, at least in part, on:<claim-text>iteratively selecting different state variables, action variables, and reward variables from the dataset; and</claim-text><claim-text>determining additional candidate function approximators (Q) based on applying the iteratively selected different state, action, and reward variables to the trained regression model.</claim-text></claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the function approximator Q is selected from a set of candidates based on a performance metric.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the state variable is a random subset of the function approximator Q, the action variable is a random variable in the function approximator Q, but not in the state variable, and the reward variable is a numerical variable in the function approximator Q but not in the state variable and is different from the action variable.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>selecting a learned decision policy for predicting the expected reward when applying the action variable to the state variable from a set of candidate learned decision policies based on a performance metric.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The computer-implemented method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>selecting a learned decision policy for predicting a next state when applying the action variable to the state variable from a set of candidate learned decision policy models based on a performance metric.</claim-text></claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. A computer program product for automated policy decision making optimization, the computer program product comprising one or more computer readable storage media and program instructions stored on the one or more computer readable storage media, the program instructions including instructions to:<claim-text>create a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables;</claim-text><claim-text>determine a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model;</claim-text><claim-text>learn a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm; and</claim-text><claim-text>determine, based on the learned decision policy, an expected reward.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising instructions to:<claim-text>determine an optimized decision policy based, at least in part, on:<claim-text>iteratively selecting different state variables, action variables, and reward variables from the dataset; and</claim-text><claim-text>determine additional candidate function approximators (Q) based on applying the iteratively selected different state, action, and reward variables to the trained regression model.</claim-text></claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the function approximator Q is selected from a set of candidates based on a performance metric.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, wherein the state variable is a random subset of the function approximator Q, the action variable is a random variable in the function approximator Q, but not in the state variable, and the reward variable is a numerical variable in the function approximator Q but not in the state variable and is different from the action variable.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising instructions to:<claim-text>select a learned decision policy for predicting the expected reward when applying the action variable to the state variable from a set of candidate learned decision policies based on a performance metric.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The computer program product of <claim-ref idref="CLM-00007">claim 7</claim-ref>, further comprising instructions to:<claim-text>select a learned decision policy for predicting a next state when applying the action variable to the state variable from a set of candidate learned decision policy models based on a performance metric.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A computer system for automated policy decision making optimization, comprising:<claim-text>one or more computer processors;</claim-text><claim-text>one or more computer readable storage media; and</claim-text><claim-text>computer program instructions, the computer program instructions being stored on the one or more computer readable storage media for execution by the one or more computer processors, the computer program instructions including instructions to:<claim-text>create a dataset from a tabular database, wherein the dataset includes one or more columns selected as state variables, a column selected as action variables, and a column selected as reward variables;</claim-text><claim-text>determine a candidate function approximator Q based on applying at least one state variable, one action variable, and one reward variable to a trained regression model;</claim-text><claim-text>learn a decision policy based on applying the candidate function approximator Q to a reinforcement learning algorithm; and</claim-text><claim-text>determine, based on the learned decision policy, an expected reward.</claim-text></claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising instructions to:<claim-text>determine an optimized decision policy based, at least in part, on:<claim-text>iteratively selecting different state variables, action variables, and reward variables from the dataset; and</claim-text><claim-text>determine additional candidate function approximators (Q) based on applying the iteratively selected different state, action, and reward variables to the trained regression model.</claim-text></claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the function approximator Q is selected from a set of candidates based on a performance metric.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the state variable is a random subset of the function approximator Q, the action variable is a random variable in the function approximator Q, but not in the state variable, and the reward variable is a numerical variable in the function approximator Q but not in the state variable and is different from the action variable.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising instructions to:<claim-text>select a learned decision policy for predicting the expected reward when applying the action variable to the state variable from a set of candidate learned decision policies based on a performance metric.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer system of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising instructions to:<claim-text>select a learned decision policy for predicting a next state when applying the action variable to the state variable from a set of candidate learned decision policy models based on a performance metric.</claim-text></claim-text></claim></claims></us-patent-application>