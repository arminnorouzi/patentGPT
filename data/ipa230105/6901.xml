<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006902A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006902</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17661191</doc-number><date>20220428</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0805</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>70</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>0805</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>43</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>47</main-group><subgroup>82</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">METHOD, APPARATUS AND COMPUTER PROGRAM PRODUCT FOR IMPROVING DYNAMIC RETRY OF RESOURCE SERVICE</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16510373</doc-number><date>20190712</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11343165</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17661191</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62697791</doc-number><date>20180713</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>GROUPON, INC.</orgname><address><city>CHICAGO</city><state>IL</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Mostov</last-name><first-name>Michael</first-name><address><city>Chicago</city><state>IL</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Methods, apparatuses and computer program products for implementing dynamic retry of a resource service in a network system are provided. An example method may include: transmitting a first service request to the resource service, determining a first service availability indicator, calculating a first service availability estimate associated with the resource service based on the first service availability indicator, and determining whether to transmit a second service request based on the first service availability estimate. The example method may be repeated by an example apparatus continuously for each transmitted service request.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="197.44mm" wi="158.75mm" file="US20230006902A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="225.30mm" wi="175.60mm" file="US20230006902A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="194.73mm" wi="118.11mm" file="US20230006902A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="216.07mm" wi="143.68mm" file="US20230006902A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="218.27mm" wi="145.20mm" file="US20230006902A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="222.59mm" wi="134.03mm" file="US20230006902A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="220.39mm" wi="131.66mm" file="US20230006902A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="220.39mm" wi="131.66mm" file="US20230006902A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="217.25mm" wi="156.46mm" file="US20230006902A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. patent application Ser. No. 16/510,373, titled &#x201c;Method, Apparatus And Computer Program Product For Improving Dynamic Retry Of Resource Service,&#x201d; filed Sep. 12, 2019, which claims priority to U.S. Provisional Patent Application No. 62/697,791, titled &#x201c;Method, Apparatus And Computer Program Product For Improving Dynamic Retry Of Resource Service,&#x201d; filed Jul. 13, 2018, the entire contents of which are incorporated by reference in their entirety.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">Network resources have varying availability. Applicant has identified many deficiencies and problems associated with existing methods, apparatuses, and systems related to servicing network resource requests.</p><heading id="h-0003" level="1">BRIEF SUMMARY</heading><p id="p-0004" num="0003">In general, embodiments of the present disclosure provide methods, apparatuses, systems, computing devices, and/or the like for improving real-time availability estimates and providing dynamic retry for resource services of network systems.</p><p id="p-0005" num="0004">In accordance with one aspect, an apparatus for implementing dynamic retry of a resource service in a network system is provided. The apparatus comprises at least one processor and at least one non-transitory memory storing program code, the at least one non-transitory memory and the program code being configured to, with the at least one processor, cause the apparatus to at least: transmit a first service request to the resource service; determine a first service availability indicator, wherein the first service availability indicator is indicative of whether the resource service is available to respond to the first service request; calculate a first service availability estimate associated with the resource service based on the first service availability indicator; and determine whether to transmit a second service request based on the first service availability estimate.</p><p id="p-0006" num="0005">In accordance with another aspect, determining the first service availability indicator further comprises: determining that no service response is received within a predetermined time period subsequent to transmitting the first service request; and generating the first service availability indicator indicating that the resource service is not available.</p><p id="p-0007" num="0006">In accordance with another aspect, determining whether to transmit the second service request further comprises: retrieving a service availability threshold associated with the resource service; and determining whether the first service availability estimate satisfies the service availability threshold.</p><p id="p-0008" num="0007">In accordance with another aspect, determining whether to transmit the second service request further comprises: determining that the first service availability estimate satisfies the service availability threshold; and in response to determining that the first service availability estimate satisfies the service availability threshold, transmitting the second service request to the resource service.</p><p id="p-0009" num="0008">In accordance with another aspect, determining whether to transmit the second service request further comprises: determining that the first service availability estimate does not satisfy the service availability threshold; and in response to determining that the first service availability estimate does not satisfy the service availability threshold, triggering generation of an electronic indication that the second service request is not transmitted.</p><p id="p-0010" num="0009">In accordance with another aspect, the at least one non-transitory memory and the program code are configured to, with the at least one processor, cause the apparatus to further: generate an entry to a log file associated with the resource service, wherein the log file indicates a failure count associated with the resource service.</p><p id="p-0011" num="0010">In accordance with another aspect, the at least one non-transitory memory and the program code are configured to, with the at least one processor, cause the apparatus to further: determine, based on the log file, whether the failure count satisfies a failure alert threshold associated with the resource service; and in response to determining that the failure count satisfies the failure alert threshold, trigger generation of an electronic alert.</p><p id="p-0012" num="0011">In accordance with another aspect, the at least one non-transitory memory and the program code are configured to, with the at least one processor, cause the apparatus to further: continuously transmit subsequent service requests to the resource service; determine a service availability indicator, wherein the service availability indicator is indicative of whether the resource service is available to respond to each subsequent service request; calculate a service availability estimate associated with the resource service based on the service availability indicator; and determine whether to transmit a further subsequent service request based on the service availability estimate.</p><p id="p-0013" num="0012">In accordance with another aspect, a computer-implemented method for implementing dynamic retry of a resource service in a network system is provided. The method comprises: transmitting a first service request to the resource service; determining a first service availability indicator, wherein the first service availability indicator is indicative of whether the resource service is available to respond to the first service request; calculating a first service availability estimate associated with the resource service based on the first service availability indicator; and determining whether to transmit a second service request based on the first service availability estimate.</p><p id="p-0014" num="0013">In accordance with another aspect, a computer program product for implementing dynamic retry of a resource service in a network system is provided. The computer program product comprises at least one non-transitory computer-readable storage medium having computer-readable program code portions stored therein. The computer-readable program code portions comprise an executable portion configured to: transmit a first service request to the resource service; determine a first service availability indicator, wherein the first service availability indicator is indicative of whether the resource service is available to respond to the first service request; calculate a first service availability estimate associated with the resource service based on the first service availability indicator; and determine whether to transmit a second service request based on the first service availability estimate.</p><p id="p-0015" num="0014">The above summary is provided merely for purposes of summarizing some example embodiments to provide a basic understanding of some aspects of the disclosure. Accordingly, it will be appreciated that the above-described embodiments are merely examples and should not be construed to narrow the scope or spirit of the disclosure in any way. It will be appreciated that the scope of the disclosure encompasses many potential embodiments in addition to those here summarized, some of which will be further described below.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0016" num="0015">Having thus described some embodiments in general terms, references will now be made to the accompanying drawings, which are not necessarily drawn to scale, and wherein:</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is an example system architecture diagram illustrating an example network resource service platform in communication with client devices in accordance with some embodiments of the present disclosure;</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is an example system infrastructure diagram illustrating an example system resource management server in accordance with some embodiments of the present disclosure;</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is an example flow diagram in accordance with some embodiments of the present disclosure;</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is an example flow diagram in accordance with some embodiments of the present disclosure;</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is an example data flow diagram in accordance with some embodiments of the present disclosure;</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is an example data flow diagram in accordance with some embodiments of the present disclosure;</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is an example data flow diagram in accordance with some embodiments of the present disclosure; and</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates example diagrams showing various features of the present disclosure in accordance with some embodiments described herein.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION OF VARIOUS EMBODIMENTS</heading><p id="p-0025" num="0024">Various embodiments of the present disclosure now will be described more fully hereinafter with reference to the accompanying drawings, in which some, but not all embodiments of the disclosure are shown. Indeed, the disclosure may be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather, these embodiments are provided so that this disclosure will satisfy applicable legal requirements. The term &#x201c;or&#x201d; is used herein in both the alternative and conjunctive sense, unless otherwise indicated. The terms &#x201c;illustrative,&#x201d; &#x201c;example,&#x201d; and &#x201c;exemplary&#x201d; are used to be examples with no indication of quality level. Like numbers refer to like elements throughout.</p><p id="p-0026" num="0025">The phrases &#x201c;in one embodiment,&#x201d; &#x201c;in some embodiments,&#x201d; &#x201c;according to one embodiment,&#x201d; and the like generally mean that the particular feature, structure, or characteristic following the phrase may be included in at least one embodiment of the present disclosure, and may be included in more than one embodiment of the present disclosure. Such phrases do not necessarily refer to the same embodiment.</p><heading id="h-0006" level="1">Overview</heading><p id="p-0027" num="0026">Various embodiments of the present disclosure relate generally to generating availability estimates for resource services in a network system and improving availability of a service by employing a dynamically adjustable retry policy. Various embodiments of the present disclosure may enhance the accuracy of real-time availability estimates and provide improvements in data management and communication.</p><p id="p-0028" num="0027">In a computer network system that provides various services, it is often required to monitor, estimate and/or predict availabilities (or likelihood of availability) of these provided services. In theory, a service may be &#x201c;available&#x201d; when it provides such a level of quality that every service request receives a non-error response. In practice, it may be unrealistic for a service to be able to satisfy this level of quality at all times, and availability may be measured as a percentage of requests that receive non-error responses.</p><p id="p-0029" num="0028">Many systems and approaches to monitoring and estimating service availabilities are plagued by technical restrictions and limitations. For example, one approach for measuring and estimating service availability may be collecting a statistically significant amount of samples of network service responses over a period of time (a &#x201c;sampling interval&#x201d;), counting errors, and dividing the error count by the number of network service requests. One of the many disadvantages of this approach is that the results often lag behind a current state by at least the duration of the sampling interval. This may lead to distortion in the results, which may qualitatively differ from reality.</p><p id="p-0030" num="0029">For example, if a hypothetical Service A stops returning responses and become unavailable for one (1) minute, and samples are collected during a sampling interval of two (2) minutes, then the estimated availability for Service A computed using this approach may not drop below fifty percent (50%). In this example, the estimated availability may be a distorted, incomplete reflection of the reality because Service A is either one-hundred percent (100%) available or one-hundred percent (100%) unavailable, and, in reality, there may not be a point in time when Service A is fifty percent (50%) available, as the estimated availability would suggest.</p><p id="p-0031" num="0030">Continuing from the above example, thirty (30) seconds (which is a quarter (&#xbc;) of the sampling interval) after Service A becomes one-hundred percent (100%) unavailable (which may be considered as a &#x201c;catastrophic failure&#x201d;), the estimated availability may indicate that Service A is seventy-five percent (75%) available, which may be another materially wrong reflection of reality.</p><p id="p-0032" num="0031">In the above examples, it would take two (2) minutes (i.e. the sampling interval) before this approach would be able to collect a statistically significant amount of samples and generate a more accurate service availability estimate of Service A. Therefore, this approach fails to provide real-time estimates of service availability.</p><p id="p-0033" num="0032">Some approaches for measuring and estimating service availability may shorten the sampling interval. However, such approaches may lead to many other problems and disadvantages. For example, to ensure that measurements are statistically accurate, the selected sampling interval must contain a statistically significant amount of samples. If few responses are observed during the sampling interval, a single error in the responses may be assigned a large weight value for calculating the server availability, which may distort availability estimates and trigger false alerts.</p><p id="p-0034" num="0033">Some approaches for measuring and estimating service availability may lengthen the sampling interval, and may take the average of several samples in systems where the number of service requests is low, or where such number fluctuate over a wide range (e.g., the volume of requests drops significantly during certain times of the day). However, longer time intervals may lead to distorted measurements and delayed reaction in detecting changes in availability. Continuing from the previous example, when the sampling interval is two (2) minutes, such approaches would require two (2) minutes before it would be able to produce a more accurate service availability estimate. During these two (2) minutes, estimates calculated based on these approaches may be materially distorted from the reality.</p><p id="p-0035" num="0034">Systems structured in accordance with various embodiments of the present disclosure may overcome challenges faced by many systems and approaches. For example, example systems structured in accordance with embodiments of the present disclosure may utilize a Kalman filter based algorithm to accurately predict the true state of the system, even if the data source contains noise (i.e., unreliable measurements).</p><p id="p-0036" num="0035">In some embodiments, the present disclosure does not rely on collecting a statistically significant amount of samples, and may provide fast, reliable estimates in real time without undue memory allotments or additional data storage devices. For example, systems structured in accordance with various embodiments of the disclosure may generate an accurate service availability estimate as soon as the service stops returning responses. Because systems according to the present disclosure do not require collecting a statistically significant amount of samples, the delay in providing service availability estimates may be minimal or completely removed.</p><p id="p-0037" num="0036">In some embodiments, systems structured in accordance with various embodiments of the disclosure may provide a dynamic, self-adjustable retry policy. The dynamic retry policy may describe how and when service requests should be resubmitted, details of which are described hereinafter.</p><p id="p-0038" num="0037">As such, methods, systems, and apparatuses structured in accordance with various embodiments of the present disclosure provide specific, technical solutions to technical problems faced by existing systems, details of which are described hereinafter.</p><heading id="h-0007" level="1">Definitions</heading><p id="p-0039" num="0038">As used herein, the terms &#x201c;data,&#x201d; &#x201c;content,&#x201d; &#x201c;digital content,&#x201d; &#x201c;digital content object,&#x201d; &#x201c;information,&#x201d; and similar terms may be used interchangeably to refer to data capable of being transmitted, received, and/or stored in accordance with embodiments of the present disclosure. Thus, use of any such terms should not be taken to limit the spirit and scope of embodiments of the present disclosure. Further, where a computing device is described herein to receive data from another computing device, it will be appreciated that the data may be received directly from another computing device or may be received indirectly via one or more intermediary computing devices, such as, for example, one or more servers, relays, routers, network access points, base stations, hosts, and/or the like, sometimes referred to herein as a &#x201c;network.&#x201d; Similarly, where a computing device is described herein to send data to another computing device, it will be appreciated that the data may be sent directly to another computing device or may be sent indirectly via one or more intermediary computing devices, such as, for example, one or more servers, relays, routers, network access points, base stations, hosts, and/or the like.</p><p id="p-0040" num="0039">The term &#x201c;client device&#x201d; refers to computer hardware and/or software that is configured to access a service made available by a server. The server is often (but not always) on another computer system, in which case the client device accesses the service by way of a network. Client devices may include, without limitation, smart phones, tablet computers, laptop computers, wearables, personal computers, enterprise computers, and the like.</p><p id="p-0041" num="0040">The terms &#x201c;resource service,&#x201d; &#x201c;network resource,&#x201d; &#x201c;resource&#x201d; refer to a computer program, embedded in one or more computing apparatuses, which may be configured to perform one or more designated functions and support interoperable machine-to-machine interaction over a network. In other words, resource services may provide reusable software functionalities via well-defined interfaces.</p><p id="p-0042" num="0041">A client device and/or a resource service may generate a &#x201c;service request&#x201d; (which may include one or more inputs associated with the designated functions), which may be transmitted to another resource service. In response to receiving a service request, a resource service may generate a &#x201c;service response&#x201d; (which may include one or more outputs based on the one or more received inputs). For example, a network system that facilitates e-commerce transactions may include a credit card validation service. When a user submits a request to complete a transaction using a credit card, the network system may, for example, transmit a service request to the credit card validation service and provide the credit card number, the expiration date, and the Card Security Code (CSC) or Card Verification Value (CVV) as inputs in the service request so that the credit card validation service may determine whether the credit card is valid.</p><p id="p-0043" num="0042">A resource service may have various attributes, including, for example, availability, which may indicate whether the resource service can perform one or more designated functions at a given time point or time period. In various embodiments of the present disclosure, the availability of a resource service may be indicated by a &#x201c;service availability indicator,&#x201d; which can be expressed in various forms, such as, but not limited to, a binary value. For example, when the service availability indicator is zero (0), it indicates that the service is not available (&#x201c;failure to respond&#x201d;). When the service availability indicator is one (1), it indicates that the service is available (&#x201c;success response&#x201d;). A variety of factors may cause the resource service to be unavailable, including, for example, server overload, human error, security flaws, server operating system bugs, and the like.</p><p id="p-0044" num="0043">As discussed above, a service request may be transmitted to the server(s) that hosts a resource service and, in response, the server(s) may return a service response if it is available, or fail to generate any service response if it is not available. Continuing from the previous credit card validation service example, a service request may be sent to the credit card validation service and, if the credit card validation service is not available, it may provide a service response in the form of an error message or an electronic alert. In some examples, when the resource service fails to provide any response within a predetermined time period subsequent to the service request being transmitted, an availability estimator circuitry may determine that the silence of the resource service may correspond to a service availability indicator indicating that the resource service is not available, details of which are described in the present disclosure.</p><p id="p-0045" num="0044">To provide a prediction of the probability of success in generating service responses, various embodiments of the present disclosure may generate a &#x201c;service availability estimate,&#x201d; which can be expressed and calculated in various forms. For example, a service availability estimate during a measurement period may be a percentage value based on the number of successful service responses divided by the total number of service requests. The service availability estimate may be expressed as a direct proportion (for example, 9/10 or 0.9) or as a percentage (for example, 90%).</p><p id="p-0046" num="0045">In various embodiments of the present disclosure, a service availability threshold may be provided, which indicates a baseline availability requirement for a resource service, details of which are described in the present disclosure.</p><p id="p-0047" num="0046">The term &#x201c;system time&#x201d; refers to a network system's notion of the current time and date so that various services of the network system can calibrate their respective clocks and otherwise access a common time. System time is typically measured by a system clock or by a network associated device that is designated as the system clock. For example, a network system may utilize a time server that reads the actual time from a reference clock (e.g. a connected radio clock, an atomic clock, another time server on the network or the Internet) and distributes the time data to other components of the network system.</p><p id="p-0048" num="0047">The term &#x201c;circuitry&#x201d; should be understood broadly to include hardware and, in some embodiments, software for configuring the hardware. With respect to components of the apparatus, the term &#x201c;circuitry&#x201d; as used herein should therefore be understood to include particular hardware configured to perform the functions associated with the particular circuitry as described herein. For example, in some embodiments, &#x201c;circuitry&#x201d; may include processing circuitry, storage media, network interfaces, input/output devices, and the like.</p><heading id="h-0008" level="1">Example System Architecture for Implementing Embodiments of the Present Disclosure</heading><p id="p-0049" num="0048">Methods, apparatuses, and computer program products of the present disclosure may be embodied by any of a variety of devices. For example, the method, apparatus, and computer program product of an example embodiment may be embodied by a networked device (e.g., a network resource service platform), such as a server or other network entity, configured to communicate with one or more devices, such as one or more client devices. Additionally, or alternatively, the computing device may include fixed computing devices, such as a personal computer or a computer workstation. Still further, example embodiments may be embodied by any of a variety of mobile devices, such as a portable digital assistant (PDA), a mobile telephone, a smartphone, a laptop computer, a tablet computer, a wearable, or any combination of the aforementioned devices.</p><p id="p-0050" num="0049"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an example system architecture <b>100</b> within which embodiments of the present disclosure may operate. Users may access a server resource platform <b>105</b> via a communication network <b>103</b> using client devices <b>101</b>A-<b>101</b>N.</p><p id="p-0051" num="0050">The client devices <b>101</b>A-<b>101</b>N may be any computing device as defined above. Electronic data received by the server resource platform <b>105</b> from the client devices <b>101</b>A-<b>101</b>N may be provided in various forms and via various methods. For example, the client devices <b>101</b>A-<b>101</b>N may include desktop computers, laptop computers, smartphones, netbooks, tablet computers, wearables, and the like.</p><p id="p-0052" num="0051">In embodiments where a client device of client devices <b>101</b>A-<b>101</b>N is a mobile device, such as a smart phone or tablet, the client device may execute an &#x201c;app&#x201d; to interact with the server resource platform <b>105</b>. Such apps are typically designed to execute on mobile devices, such as tablets or smartphones. For example, an app may be provided that executes on mobile device operating systems such as iOS&#xae;, Android&#xae;, or Windows&#xae;. These platforms typically provide frameworks that allow apps to communicate with one another and with particular hardware and software components of mobile devices. For example, the mobile operating systems named above each provide frameworks for interacting with location services circuitry, wired and wireless network interfaces, user contacts, and other applications.</p><p id="p-0053" num="0052">Additionally, or alternatively, the client devices <b>101</b>A-<b>101</b>N may interact with the server resource platform <b>105</b> via a web browser. As yet another example, the client devices <b>101</b>A-<b>101</b>N may include various hardware or firmware designed to interface with the server resource platform <b>105</b>.</p><p id="p-0054" num="0053">Communication network <b>103</b> may include any wired or wireless communication network including, for example, a wired or wireless local area network (LAN), a personal area network (PAN), a metropolitan area network (MAN), a wide area network (WAN), or the like, as well as any hardware, software and/or firmware required to implement it (such as, e.g., network routers, and the like). For example, communication network <b>103</b> may include a cellular telephone, an 802.11, 802.16, 802.20, and/or WiMAX network. Further, the communication network <b>103</b> may include a public network (such as the Internet), a private network (such as an intranet), or combinations thereof, and may utilize a variety of networking protocols now available or later developed including, but not limited to TCP/IP based networking protocols. For instance, the networking protocol may be customized to suit the needs of the server resource platform <b>105</b>. In some embodiments, the protocol may be a custom protocol of JSON objects sent via a Web Socket channel. In some embodiments, the protocol may be JSON over RPC, JSON over REST/HTTP, and the like.</p><p id="p-0055" num="0054">In some embodiments, the server resource platform <b>105</b> may comprise various resource service devices <b>107</b> and one or more databases <b>117</b>A-<b>117</b>N. The various resource service devices <b>107</b> may include a system resource management server <b>109</b> and one or more resource servers <b>115</b>A-<b>115</b>N. The one or more resource servers <b>115</b>A-<b>115</b>N and the system resource management server <b>109</b> may be configured to provide resource services to the one or more client devices <b>101</b>A-<b>101</b>N and/or other resource servers. For example, the client device <b>101</b>A may transmit a service request to the resource server <b>115</b>A via the communication network <b>103</b>, and the resource server <b>115</b>A may generate a service response based on the service request.</p><p id="p-0056" num="0055">According to various embodiments of the present disclosure, software and/or hardware components related to the dynamic retry policy may be embedded in the system resource management server <b>109</b>, and the system resource management server <b>109</b> may transmit resource service requests to one or more resource servers <b>115</b>A-<b>115</b>N. In some embodiments, the system resource management server <b>109</b> may calculate one or more service availability estimates via the availability estimator component <b>111</b>. In some embodiments, the system resource management server <b>109</b> may determine whether to resubmit service requests via the retry submitter component <b>113</b>, details of which are described hereinafter. In some embodiments, the system resource management server <b>109</b> may be a sub-circuitry of the one or more resource servers <b>115</b>A-<b>115</b>N.</p><p id="p-0057" num="0056">It is noted that various components of the system resource management server <b>109</b> may leverage the same computer or computing apparatus to perform various operations in accordance with embodiments of the present disclosure. Similarly, various components of the resource servers <b>115</b>A-<b>115</b>N may leverage the same computer or computing apparatus to perform various operations in accordance with embodiments of the present disclosure.</p><p id="p-0058" num="0057">The one or more databases <b>117</b>A-<b>117</b>N may be embodied as a data storage device such as a Network Attached Storage (NAS) device or devices, or as a separate database server or servers. In some embodiments, the one or more databases <b>117</b>A-<b>117</b>N may be relational databases, such as MySQL databases. In some embodiments, the one or more databases <b>117</b>A-<b>117</b>N may include information accessed and stored by the server resource platform <b>105</b>.</p><heading id="h-0009" level="1">Example Apparatus for Implementing Embodiments of the Present Disclosure</heading><p id="p-0059" num="0058">The system resource management server <b>109</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> may be embodied by one or more computing systems, such as apparatus <b>200</b> shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>. The apparatus <b>200</b> may include a processor <b>202</b>, a memory <b>204</b>, a communications circuitry <b>208</b>, an availability estimator circuitry <b>212</b>, and a retry submitter circuitry <b>214</b>. The apparatus <b>200</b> may be configured to execute the operations described above with respect to <figref idref="DRAWINGS">FIG. <b>1</b></figref> and below with respect to <figref idref="DRAWINGS">FIGS. <b>3</b>-<b>8</b></figref>. Although these components <b>202</b>, <b>204</b>, <b>208</b>, <b>212</b>, and <b>214</b> are described with respect to functional limitations, it should be understood that the particular implementations necessarily include the use of particular hardware. It should also be understood that certain of these components <b>202</b>, <b>204</b>, <b>208</b>, <b>212</b>, and <b>214</b> may include similar or common hardware. For example, two sets of circuitries may both leverage use of the same processor, network interface, storage medium, or the like to perform their associated functions, such that duplicate hardware is not required for each set of circuitries.</p><p id="p-0060" num="0059">In some embodiments, the processor <b>202</b> (and/or co-processor or any other processing circuitry assisting or otherwise associated with the processor) may be in communication with the memory <b>204</b> via a bus for passing information among components of the apparatus. The memory <b>204</b> is non-transitory and may include, for example, one or more volatile and/or non-volatile memories. In other words, for example, the memory <b>204</b> may be an electronic storage device (e.g., a computer-readable storage medium). The memory <b>204</b> may be configured to store information, data, content, applications, instructions, or the like for enabling the apparatus to carry out various functions in accordance with example embodiments of the present disclosure.</p><p id="p-0061" num="0060">The processor <b>202</b> may be embodied in a number of different ways and may, for example, include one or more processing devices configured to perform independently. In some embodiments, the processor <b>202</b> may include one or more processors configured in tandem via a bus to enable independent execution of instructions, pipelining, and/or multithreading. The use of the term &#x201c;processing circuitry&#x201d; may be understood to include a single core processor, a multi-core processor, multiple processors internal to the apparatus, and/or remote or &#x201c;cloud&#x201d; processors.</p><p id="p-0062" num="0061">In some embodiments, the processor <b>202</b> may be configured to execute instructions stored in the memory <b>204</b> or otherwise accessible to the processor <b>202</b>. In some embodiments, the processor <b>202</b> may be configured to execute hard-coded functionalities. As such, whether configured by hardware or software methods, or by a combination thereof, the processor <b>202</b> may represent an entity (e.g., physically embodied in circuitry) capable of performing operations according to embodiments of the present disclosure while configured accordingly. Alternatively, as another example, when the processor <b>202</b> is embodied as an executor of software instructions, the instructions may specifically configure the processor <b>202</b> to perform the algorithms and/or operations described herein when the instructions are executed.</p><p id="p-0063" num="0062">The communications circuitry <b>208</b> may be any means such as a device or circuitry embodied in either hardware or a combination of hardware and software that is configured to receive and/or transmit data from/to a network and/or any other device, circuitry, or module in communication with the apparatus <b>200</b>. In this regard, the communications circuitry <b>208</b> may include, for example, a network interface for enabling communications with a wired or wireless communication network. For example, the communications circuitry <b>208</b> may include one or more network interface cards, antennae, buses, switches, routers, modems, and supporting hardware and/or software, or any other device suitable for enabling communications via a network. Additionally, or alternatively, the communications circuitry <b>208</b> may include the circuitry for interacting with the antenna/antennae to cause transmission of signals via the antenna/antennae or to handle receipt of signals received via the antenna/antennae.</p><p id="p-0064" num="0063">The availability estimator circuitry <b>212</b> may include hardware configured to calculate service availability estimates, example details of which are described hereinafter. The availability estimator circuitry <b>212</b> may utilize processing circuitry, such as the processor <b>202</b>, to perform these actions. In some embodiments, the availability estimator circuitry <b>212</b> may include a separate processor, specially configured Field Programmable Gate Array (FPGA), or Application Specific Integrated Circuit (ASIC). The availability estimator circuitry <b>212</b> may be implemented using hardware components of the apparatus configured by either hardware or software for implementing the functions described herein.</p><p id="p-0065" num="0064">The retry submitter circuitry <b>214</b> may include hardware configured to resubmit service requests based on the service availability estimates. The retry submitter circuitry <b>214</b> may utilize processing circuitry, such as the processor <b>202</b>, to perform these actions. However, it should also be appreciated that, in some embodiments, the retry submitter circuitry <b>214</b> may include a separate processor, specially configured Field Programmable Gate Array (FPGA), or Application Specific Integrated Circuit (ASIC) for performing the functions described herein. The retry submitter circuitry <b>214</b> may be implemented using hardware components of the apparatus configured by either hardware or software for implementing these planned functions.</p><p id="p-0066" num="0065">As will be appreciated, any such computer program instructions and/or other type of code may be loaded onto a computer, processor or other programmable apparatus's circuitry to produce a machine, such that the computer, processor or other programmable circuitry that execute the code on the machine creates the means for implementing various functions, including those described herein.</p><p id="p-0067" num="0066">As described above and as will be appreciated based on this disclosure, embodiments of the present disclosure may be configured as methods, mobile devices, backend network devices, and the like. Accordingly, embodiments may comprise various means including entirely of hardware or any combination of software and hardware. Furthermore, embodiments may take the form of a computer program product on at least one non-transitory computer-readable storage medium having computer-readable program instructions (e.g., computer software) embodied in the storage medium. Any suitable computer-readable storage medium may be utilized including non-transitory hard disks, CD-ROMs, flash memory, optical storage devices, or magnetic storage devices.</p><heading id="h-0010" level="1">Example Data Flows of Embodiments of the Present Disclosure</heading><p id="p-0068" num="0067">Various methods described herein provide technical improvements on computer functionalities. For example, various processes described herein may improve the accuracy of service availability estimates, and may provide a dynamically adjustable retry policy based on the service availability estimates.</p><heading id="h-0011" level="2">Real-Time Service Availability Estimate</heading><p id="p-0069" num="0068">Referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, an example method <b>300</b> for calculating real-time service availability estimates of a resource service in accordance with some embodiments of the present disclosure is shown.</p><p id="p-0070" num="0069">The method <b>300</b> starts at block <b>301</b>. At block <b>303</b>, an example apparatus (such as the client devices <b>101</b>A-<b>101</b>N and/or the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may transmit one or more service requests to a resource service. The service request may prompt the resource service to return a service response.</p><p id="p-0071" num="0070">For example, an availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may transmit a first service request to a credit card validation service at the first system time T<sub>0</sub>, a second service request to the credit card validation service at the second system time T<sub>1</sub>, a third service request to the credit card validation service at the third system time T<sub>2</sub>, and the like.</p><p id="p-0072" num="0071">At block <b>305</b>, an availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may determine whether a service response has been received from the resource service.</p><p id="p-0073" num="0072">If the availability estimator circuitry determines that the resource service does not provide any service response to the service request, for example, within a predetermined time period subsequent to transmitting the service request at block <b>303</b>, the availability estimator circuitry may determine that the resource service is not available at block <b>311</b>. As discussed above, a service availability indicator may indicate whether a resource service is available to provide a service response. In other words, when a resource service fails to provide a service response within a predetermined time period, the service availability indicator may indicate that the resource service is not available at block <b>311</b>.</p><p id="p-0074" num="0073">If the availability estimator circuitry determines that a service response has been received at block <b>305</b>, the availability estimator circuitry may proceed to determine whether the service response indicates that the service request has been successfully processed by the resource service at block <b>307</b>. If yes, then the availability estimator circuitry may determine that the resource service is available at block <b>309</b>. For example, a service availability indicator may indicate that the resource service is available to provide a service response at block <b>309</b>. If, at block <b>307</b>, the service response does not indicate that the service request has been successfully processed by the resource service (for example, if the service response includes an error message), then the availability estimator circuitry may determine that the resource service is not available at block <b>311</b>.</p><p id="p-0075" num="0074">Continuing from the previous example, after transmitting the first service request, the availability estimator circuitry may determine a first service availability indicator associated with the credit card validation service, which may be indicative of whether the credit card validation service is available to respond to the first service request. For example, when a service response to the first service request is received and indicates that the first service request has been successfully processed, the availability estimator circuitry may determine a first service availability indicator that the service is available at the first system time T<sub>0</sub>. As another example, in response to the second service request, the credit card validation service may return a service response indicating that the service is available at the second system time T<sub>1</sub>, and the availability estimator circuitry may determine a second service availability indicator at the second system time T<sub>1 </sub>accordingly. As another example, when no response is received within a predetermined time period, the availability estimator circuitry may deem the credit card validation service as not available, and may generate a service availability indicator indicating that the service is not available.</p><p id="p-0076" num="0075">At block <b>313</b>, an availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may generate a service availability estimate based on a service availability indicator and a prior service availability estimate (if available).</p><p id="p-0077" num="0076">Continuing from the above example, the availability estimator circuitry may generate a first service availability estimate associated with the credit card validation service at a second system time T<sub>1 </sub>based on the first service availability indicator at system time T<sub>0</sub>. The first service availability estimate may indicate whether the credit card validation service is predicted to be available at the second system time T<sub>1</sub>.</p><p id="p-0078" num="0077">As another example, the availability estimator circuitry may generate a second service availability estimate associated with the credit card validation service at a third system time T<sub>2 </sub>based on the first service availability estimate described above and the second service availability indicator at system time T<sub>1</sub>.</p><p id="p-0079" num="0078">Similarly, subsequent service requests to the resource service may be continuously transmitted to the credit card validation service, and the availability estimator circuitry may refine the availability estimate, detailed of which are described hereinafter.</p><p id="p-0080" num="0079">In some embodiments, the present disclosure may implement the above calculations based on the Apache&#xae; implementation of the Kalman filter algorithm. In some embodiments, other implementations of the Kalman filter algorithm can be used to facilitate the calculation.</p><p id="p-0081" num="0080">In various embodiments of the present disclosure, the availability estimator circuitry may be configured to cause the storage of a singular last (i.e., most recent) computed service availability estimate. The value of the last computed service availability estimate may, in some embodiments, be stored in a local/fast memory (such as memory <b>204</b> of the system resource management server <b>109</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>), or a processor's register (i.e., device which provides fast access to stored values).</p><p id="p-0082" num="0081">In some embodiments, the service availability indicator of a completely unavailable service may be represented as zero (&#x201c;0&#x201d;), and the service availability indicator of a fully available service may be represented as one (&#x201c;1&#x201d;). In some embodiments, an initial service availability estimate can be set to any numeric value between 0 and 1, inclusive.</p><p id="p-0083" num="0082">Continuing from the previous example, the initial service availability estimate may reflect that, before the very first service request is transmitted to the credit card validation service, no information is available to gauge the availability of the service. Every time a service request is received by the credit card validation service, the determined service availability indicator may be fed into an availability estimator circuitry, and the availability estimator circuitry may increase or decrease the value of the service availability estimate within the [0, 1] range. As described above, after a new service availability estimate is computed, the availability estimator circuitry may replace the previous service availability estimate in the memory or register with the newly computed (i.e. last or most recent) service availability estimate.</p><p id="p-0084" num="0083">In some embodiments, the amount of adjustment caused by a single service availability indicator may be based on a sensitivity parameter, which can be configured depending on the desired speed of adjustment and amount of random &#x201c;noise&#x201d; in the particular application. In some embodiments, &#x201c;noise&#x201d; may indicate unreliable results that do not reflect true state of service.</p><p id="p-0085" num="0084">In some embodiments, a lower value for the sensitivity parameter may improve the amount of noise that is filtered out. However, a lower value for the sensitivity parameter may require more service responses to arrive at an accurate estimate as compared to a higher value for the sensitivity parameter. For example, the time it takes to arrive at an accurate availability estimate may be inversely proportional to the frequency at which service requests are received. The higher the frequency of the service requests, the faster that the availability estimator circuitry may compute an accurate service availability estimate.</p><p id="p-0086" num="0085">Continuing from the previous example, the availability estimator circuitry may set an initial service availability estimate as 0.5 for the credit card validation service. The availability estimator circuitry may determine that the credit card validation service is available at T<sub>0</sub>, and this response may result in increasing the estimate by a delta value D. The exact value of D may be variable, for example computed by the Kalman Filter algorithm, and may depend on the sensitivity parameter (described above), the value of the previous service availability estimate, and the service availability indicator (i.e. whether it indicates availability or unavailability).</p><p id="p-0087" num="0086">In various embodiments of the present disclosure, an availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may retrieve a service availability threshold associated with the resource service, and compare and determine whether the service availability estimate satisfies a service availability threshold.</p><p id="p-0088" num="0087">For example, if:</p><p id="p-0089" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>X&#x2265;SLA,<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0090" num="0000">where X is the service availability estimate (i.e. the probability of service request succeeding), and SLA is the service availability threshold (e.g. a service level agreement), then the availability estimator circuitry may determine that the service availability estimate satisfies the service availability threshold. In this example, the resource service may be deemed as in a GOOD state, which may be numerically described as one (1) as described above. In some embodiments, SLA may be a constant defined by external system requirements.</p><p id="p-0091" num="0088">As another example, if:</p><p id="p-0092" num="0000"><br/><?in-line-formulae description="In-line Formulae" end="lead"?>X&#x3c;SLA,<?in-line-formulae description="In-line Formulae" end="tail"?></p><p id="p-0093" num="0000">then the availability estimator circuitry may determine that the service availability estimate does not satisfy the service availability threshold. In this example, the resource service is deemed as in a BAD state, which can be numerically described as zero (0) as described above. In response to determining that the service availability estimate does not satisfy the service availability threshold, an availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may generate an alert message in the form of, for example, an electronic indication.</p><p id="p-0094" num="0089">Continuing from the previous example, if the service availability threshold SLA is 0.9, and the service availability estimate X is 0.8 at a particular system time, the availability estimator circuitry may determine that the service is estimated to be in a BAD state at the particular system time. The system may further generate an electronic indication (e.g. a server notification) indicating that the service may be predicted as not able to satisfy system requirements at the particular system time.</p><p id="p-0095" num="0090">The method <b>300</b> ends at block <b>315</b>.</p><p id="p-0096" num="0091">As described above, various embodiments of the present disclosure may apply Kalman filter algorithm for estimating the state of a resource service (i.e. whether the resource service is available or unavailable), which may be measured by a discrete variable that can take values of GOOD or BAD. The estimation may be done by sending service requests and observing responses: each correct response may indicate that service is in a GOOD state, and each incorrect response (or the lack of response) may indicate that service is in a BAD state. Various embodiments of the present disclosure may convert observed results to numeric form by assigning value &#x201c;0&#x201d; to the service availability indicator if it indicates a BAD state, and &#x201c;1&#x201d; to the service availability indicator if it indicates a GOOD state. Various embodiments of the present disclosure may then use the obtained numeric sequence as inputs for the Kalman filter algorithm, as described above.</p><heading id="h-0012" level="2">Dynamic Retry and Error Recovery</heading><p id="p-0097" num="0092">As discussed above, in reality, no resource service can provide an all-time one-hundred percent (100%) availability. In other words, even the most well-behaved resource service occasionally does not return a valid response within an acceptable time frame. Some systems may attempt to improve overall availability by retrying failed requests (i.e. resubmitting the failed request) based on an implicit assumption that observed failures are caused by transient low-probability events (i.e. such events are not likely to be observed twice in a row). When such assumption happens to be correct, retry attempts are likely to succeed, and availability of the service may be improved. However, when this implicit assumption is wrong (i.e. when the failure is caused by non-transient persistent problems), retried requests are likely to fail. In such circumstances, these approaches of retry policy may cause a waste of processing resources.</p><p id="p-0098" num="0093">Further, practical observations may indicate that a common cause of failures in distributed systems is the overload of some of the downstream dependent resource services. In these cases, retries may be contraindicated. If every failed request is retried, it may further increase the load on downstream dependent resource service (up to two times (<b>2</b><i>x</i>)), and may cause a complete resource breakdown and a prolonged period of outage. As such, some systems may avoid retries and therefore fail to capture the technical benefits of implementing a retry policy.</p><p id="p-0099" num="0094">From a broad perspective, software systems may be complex because they integrate multiple software and hardware components. For example, non-deterministic interaction of multiple components coupled with changing environmental factors may lead to random errors. &#x201c;Random Error&#x201d; may be defined as an error which is not likely to be observed when failed operation (such as a service request) is retried. For example, even the same environmental and interaction factors may result in variation in system behaviors, such as different execution times of repeated operations. These variations may be governed by the laws of statistics, and repeating the same operation for a large number of times may produce &#x201c;outliers&#x201d; (i.e. operations which are completed significantly faster or slower than the mean). A system (which has a time limit on execution of operation) may flag slow outliers as errors, which can also be described as &#x201c;random errors.&#x201d;</p><p id="p-0100" num="0095">Given the definition, random errors may be recovered by retrying the failed operation. However, technical challenges exist in classifying an error as a random error (i.e. predicting that retry of the operation will be successful before committing resources of the system to retry the failed operation). If error is not random, allocation of resources to retry the operation may be wasteful, and, in some cases, may exert additional pressure on downstream resource, causing cascading failure.</p><p id="p-0101" num="0096">Various embodiments of the present disclosure overcome the technical challenges described above. For example, various embodiments may provide an intelligent retry policy, which may dynamically self-adjust in response to the state of the underlying resource service, and may resubmit failed requests only when underlying resource is in a GOOD state (for example, when the service availability estimate satisfies the service availability threshold). In other words, various embodiments of the present disclosure may generate an estimate on the probability that retry of the failed operation will succeed. Such estimate may drive the decision of whether it would be beneficial to allocate time and computing resources to retry the failed operation. Successful retry of failures due to random errors may improve availability of software systems. Avoiding retries that are not likely to succeed may conserve computing resources and protect downstream components from cascading failures.</p><p id="p-0102" num="0097">Referring now to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, a method <b>400</b> for determining whether to retry a failed service request is shown. The method <b>400</b> starts at block <b>402</b>.</p><p id="p-0103" num="0098">At block <b>404</b>, an example apparatus (such as the client devices <b>101</b>A-<b>101</b>N or the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may transmit one or more service requests to a resource service, similar to those described above in connection with block <b>303</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. For example, a service request may be transmitted to a credit card validation service.</p><p id="p-0104" num="0099">At block <b>406</b>, an availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may determine the service availability of the resource service, similar to those described above in connection with blocks <b>305</b>, <b>307</b>, <b>309</b>, and <b>311</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref>. For example, the availability estimator circuitry may determine a service availability indicator, which may indicate whether the resource service is available to respond to the service request, as described above.</p><p id="p-0105" num="0100">If the availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) determines that the resource service is available at block <b>408</b>, the method <b>400</b> ends at block <b>418</b>.</p><p id="p-0106" num="0101">If the availability estimator circuitry (such as the availability estimator circuitry <b>212</b> of the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>2</b></figref>) determines that the resource service is not available at block <b>408</b>, the method <b>400</b> proceeds to the dynamic retry policy component <b>410</b>.</p><p id="p-0107" num="0102">Continuing from the previous example, the method <b>400</b> may determine whether the credit card validation service is available based on the service availability indicator. If yes, then the method <b>400</b> ends. If no, then the method <b>400</b> proceeds to determine whether to resubmit the same service request (or another service request) to the credit validation service based on the dynamic retry policy component <b>410</b>.</p><p id="p-0108" num="0103">The determination of whether retry is permitted at block <b>412</b> may be based on the service availability estimates generated at block <b>414</b>. The calculation of service availability estimates may be implemented in accordance with various embodiments of the present disclosure, such as, for example, based on the service availability determined at block <b>406</b> and in accordance with method <b>300</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>.</p><p id="p-0109" num="0104">If the service availability estimate indicates that the resource service is predicted to be available (for example, if the service availability estimate satisfies the service availability threshold as described above in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>), then retry (e.g. resubmitting the service request) may be permitted at block <b>412</b>, and the method <b>400</b> may return to block <b>404</b> to resubmit the service request.</p><p id="p-0110" num="0105">If the service availability estimate indicates that the resource service is predicted to be not available (for example, if the service availability estimate does not satisfy the service availability threshold as described above in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>), then retry is not permitted at block <b>412</b>, and the method <b>400</b> proceeds to block <b>416</b>.</p><p id="p-0111" num="0106">As block <b>416</b>, an example apparatus (such as the system resource management server <b>109</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>1</b></figref> and <figref idref="DRAWINGS">FIG. <b>2</b></figref>) may perform operations to handle failure. In some embodiments, the example apparatus may generate an electronic indication that the subsequent service request is not transmitted.</p><p id="p-0112" num="0107">In some embodiments, information about the failure may be written to a log file associated with the resource service, and the log file may indicate the frequency and/or failure count associated with the resource service. For example, the example apparatus may continuously monitor the content of the log file and aggregate information regarding failures associated with the resource service. In response to determining that the frequency and/or failure count satisfies a failure alert threshold, the example apparatus may trigger generation of an electronic alert.</p><p id="p-0113" num="0108">Continuing from the previous example, if the method <b>400</b> determines that the credit card validation service is not available based on the service availability indicator, then the method <b>400</b> proceeds to determine whether resubmitting the service request is permitted based on the service availability estimate. If the service availability estimate indicates that the credit card validation service is predicted to become available, then the method <b>400</b> proceeds to resubmitting the service request. If the service availability estimate indicates that the credit card validation service is not predicted to become available, then the method <b>400</b> will not resubmit the service request.</p><p id="p-0114" num="0109">The method <b>400</b> ends at block <b>418</b>.</p><p id="p-0115" num="0110">Referring now to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, an example data flow <b>500</b> between Service A and Service B in accordance with various embodiments of the present disclosure is shown.</p><p id="p-0116" num="0111">The data flow starts at step <b>502</b>. At step <b>504</b>, Service A may transmit a service request to Service B. At step <b>506</b>, Service A may determine that no response is received from Service B within a predetermined time period subsequent to transmitting the service request. As described above, Service A may determine that Service B is not available, and the service availability indicator associated with Service B may indicate such condition accordingly.</p><p id="p-0117" num="0112">At step <b>508</b>, Service A may calculate the service availability estimate of Service B, which may be implemented in accordance with various embodiments of the present disclosure, such as the method <b>300</b> described above in connection with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In some examples, the service availability indicator determined in step <b>506</b> may be used as input to computations applied at step <b>508</b>. For example, the service availability estimate may have an initial value of 0.5 prior to step <b>506</b>. At step <b>508</b>, the service availability estimate may be refined based on the determination that no response is received at step <b>506</b>.</p><p id="p-0118" num="0113">At step <b>510</b>, Service A may determine that Service B is predicted to be available at a subsequent system time (for example, the service availability estimate calculated at step <b>508</b> satisfies a service availability threshold). In response to the determination, Service A may retry (e.g. resubmit) the service request to Service B at the subsequent system time at step <b>512</b>.</p><p id="p-0119" num="0114">The data flow <b>500</b> ends at step <b>514</b>.</p><p id="p-0120" num="0115">Referring now to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, an example data flow <b>600</b> between Service A and Service B in accordance with various embodiments of the present disclosure is shown.</p><p id="p-0121" num="0116">The data flow starts at step <b>602</b>. At step <b>604</b>, Service A may transmit a service request to Service B. At step <b>606</b>, Service A may determine that no response is received from Service B within a predetermined time period subsequent to transmitting the service request. As described above, Service A may determine that Service B is not available, and the service availability indicator associated with Service B may indicate such condition accordingly.</p><p id="p-0122" num="0117">At step <b>608</b>, Service A may calculate the service availability estimate of Service B, which can be implemented in accordance with various embodiments of the present disclosure, such as the method <b>300</b> described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In some examples, the service availability indicator determined in step <b>606</b> may be used as input to computations applied at step <b>608</b>. For example, the service availability estimate may have an initial value of 0.5 prior to step <b>606</b>. At step <b>608</b>, the service availability estimate may be refined based on the determination that no response is received at step <b>606</b>.</p><p id="p-0123" num="0118">At step <b>610</b>, Service A determines that Service B is predicted to be not available at a subsequent system time (for example, the service availability estimate calculated at step <b>608</b> does not satisfy a service availability threshold). In response to the determination, Service A does not retry (i.e. no resubmission of) the service request to Service B at the subsequent system time.</p><p id="p-0124" num="0119">The data flow <b>600</b> ends at step <b>612</b>.</p><p id="p-0125" num="0120">Referring now to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, an example data flow <b>700</b> between Service A and Service B in accordance with various embodiments of the present disclosure is shown.</p><p id="p-0126" num="0121">The data flow starts at step <b>701</b>. At step <b>703</b>, Service A may transmit a service request to Service B. At step <b>705</b>, Service A may receive a service response from Service B within a predetermined time period subsequent to transmitting the service request. As described above, Service A may determine that Service B is available, and the service availability indicator associated with Service B may indicate such condition accordingly.</p><p id="p-0127" num="0122">At step <b>707</b>, Service A may calculate the service availability estimate of Service B, which can be implemented in accordance with various embodiments of the present disclosure, such as the method <b>300</b> described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. In some examples, the service availability indicator determined in step <b>705</b> may be used as input to computations applied at step <b>707</b>. For example, the service availability estimate may have an initial value of 0.5 prior to step <b>705</b>. At step <b>707</b>, the service availability estimate may be refined based on the determination that a response is received at step <b>705</b>.</p><p id="p-0128" num="0123">At step <b>709</b>, Service A may update the retry policy for Service B based on the service availability estimate calculated at step <b>707</b>, in accordance with various embodiments of the present disclosure, such as the method <b>300</b> described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref> and the method <b>400</b> described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0129" num="0124">The data flow <b>700</b> ends at step <b>711</b>.</p><p id="p-0130" num="0125"><figref idref="DRAWINGS">FIG. <b>8</b></figref> shows charts <b>802</b>, <b>804</b>, <b>806</b>, and <b>808</b>, which illustrate various results of an example network resource service platform that may implement dynamic retry policies in accordance with various embodiments of the present disclosure. More specifically, <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates that applying a dynamic retry policy in accordance of various embodiments of the present disclosure may improve average availability of the system at a lower computing resource expense than a static retry policy.</p><p id="p-0131" num="0126">Chart <b>802</b> illustrates an availability indicator curve <b>801</b> of a hypothetical target service S. When the service S is available, the availability indicator may be equal to &#x201c;1.&#x201d; When the service S is not available, the availability indicator may be equal to &#x201c;0.&#x201d; For example, when the service S does not return a service response, or returns an error message, it may be shown in the chart <b>802</b> as a &#x201c;0&#x201d; on the availability indicator curve <b>801</b>. Based on chart <b>802</b>, the hypothetical target service S may have an overall availability of 64.0% for a total of 300 service requests.</p><p id="p-0132" num="0127">Chart <b>804</b> shows the results when a dynamic retry policy is implemented for service S in accordance with various embodiments of the present disclosure. The curve <b>805</b> may indicate the service availability estimates for service <b>5</b>, which can be calculated in accordance with various embodiments of the present disclosure, such as, for example, the method <b>300</b> described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The curve <b>803</b> may indicate the range of time during which the dynamic retry policy allows retries to proceed. When the service S is predicted as not available, there is no retry allowed.</p><p id="p-0133" num="0128">Chart <b>806</b> demonstrates the effects of applying a dynamic retry policy for processing results of service S, where curve <b>807</b> shows a 66.0% availability at the cost of only 308 requests. In contrast, Chart <b>808</b> demonstrates the effects of applying a static retry policy (which is configured to retry every failed request only once). As curve <b>809</b> shows, the static retry policy provides a 69.0% availability at the cost of 407 requests.</p><p id="p-0134" num="0129">As shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the example dynamic retry policy may boost the observed availability of the target service S by 2% compared to the original results when no retry policy is applied at all (66% in chart <b>806</b> as compared to 64% in chart <b>802</b>). This improvement is achieved at the cost of submitting only 8 additional requests (308 total requests in chart <b>806</b> as compared to the original 300 requests in chart <b>802</b>). The number of requests reflects the amount of computing resources required to carry out the operations. In other words, the cost of 2% boost in availability is achieved at the cost of around 2.5% increase in processing costs.</p><p id="p-0135" num="0130">As shown in chart <b>808</b>, the static retry policy may boost availability to 69%. However, this additional improvement comes at much higher cost of extra 107 requests (407 requests total in chart <b>808</b> as compared to the original 300 requests in chart <b>802</b>). In other words, the 5% boost in availability is achieved at the cost of around 36% increase in processing costs.</p><p id="p-0136" num="0131">Comparing the effects of static retry policy in chart <b>808</b> to dynamic retry policy in chart <b>806</b>, the extra 3% improvement in availability came at a cost of 99 additional requests, or 33% increase in processing costs. Thus, the example dynamic retry policy is a more computationally efficient (costing less computing resource) approach to boosting the observed availability of target service S.</p><p id="p-0137" num="0132">Further, <figref idref="DRAWINGS">FIG. <b>8</b></figref> shows the distribution of additional retry requests over the lifetime of the target service S. For the dynamic retry policy, most of the retries (additional requests) may be applied when service S is in relatively good health (i.e. when service S is available). When the lack of GOOD state from service S indicates that service is in distress, the dynamic retry policy may disable the retries.</p><p id="p-0138" num="0133">For the static retry policy, the opposite may be true as shown in <figref idref="DRAWINGS">FIG. <b>8</b></figref>: most of the reties happen when service S returns a majority of BAD state, which indicates that it is in distress. During this period, the static retry policy effectively doubles the processing load on the distressed service. This aspect of static retry policy behavior may make it unacceptable for most distributed applications: increasing load on distressed service may likely to exacerbate the problem and prevent self-recovery. In contrast, the example dynamic retry policy does not have this negative side effect. Therefore, the example dynamic retry policy in accordance with various embodiments of the present disclosure provides technical improvements over the conventional designs.</p><heading id="h-0013" level="1">Additional Implementation Details</heading><p id="p-0139" num="0134">Although example processing systems have been described in <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>2</b></figref>, implementations of the subject matter and the functional operations described herein can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.</p><p id="p-0140" num="0135">Embodiments of the subject matter and the operations described herein can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described herein can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer-readable storage medium for execution by, or to control the operation of, information/data processing apparatus. Alternatively, or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, which is generated to encode information/data for transmission to suitable receiver apparatus for execution by an information/data processing apparatus. A computer-readable storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer-readable storage medium is not a propagated signal, a computer-readable storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer-readable storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).</p><p id="p-0141" num="0136">The operations described herein can be implemented as operations performed by an information/data processing apparatus on information/data stored on one or more computer-readable storage devices or received from other sources.</p><p id="p-0142" num="0137">The term &#x201c;data processing apparatus&#x201d; encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (Application Specific Integrated Circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.</p><p id="p-0143" num="0138">A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or information/data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.</p><p id="p-0144" num="0139">The processes and logic flows described herein can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input information/data and generating output. Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and information/data from a read-only memory, a random-access memory, or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive information/data from or transfer information/data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Devices suitable for storing computer program instructions and information/data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.</p><p id="p-0145" num="0140">To provide for interaction with a user, embodiments of the subject matter described herein can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information/data to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.</p><p id="p-0146" num="0141">Embodiments of the subject matter described herein can be implemented in a computing system that includes a back-end component, e.g., as an information/data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client device having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described herein, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital information/data communication, e.g., a communication network. Examples of communication networks include a local area network (&#x201c;LAN&#x201d;) and a wide area network (&#x201c;WAN&#x201d;), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).</p><p id="p-0147" num="0142">The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits information/data (e.g., an HTML page) to a client device (e.g., for purposes of displaying information/data to and receiving user input from a user interacting with the client device). Information/data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.</p><p id="p-0148" num="0143">While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any disclosures or of what may be claimed, but rather as description of features specific to particular embodiments of particular disclosures. Certain features that are described herein in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable sub-combination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a sub-combination or variation of a sub-combination.</p><p id="p-0149" num="0144">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results, unless described otherwise. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p><p id="p-0150" num="0145">Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results, unless described otherwise. In certain implementations, multitasking and parallel processing may be advantageous.</p><heading id="h-0014" level="1">CONCLUSION</heading><p id="p-0151" num="0146">Many modifications and other embodiments of the disclosures set forth herein will come to mind to one skilled in the art to which these disclosures pertain having the benefit of the teachings presented in the foregoing description and the associated drawings. Therefore, it is to be understood that the disclosures are not to be limited to the specific embodiments disclosed and that modifications and other embodiments are intended to be included within the scope of the appended claims. Although specific terms are employed herein, they are used in a generic and descriptive sense only and not for purposes of limitation, unless described otherwise.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>.-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. An apparatus for implementing dynamic retry of a resource service in a network system, the apparatus comprising at least one processor and at least one non-transitory memory storing program code, wherein the at least one non-transitory memory and the program code are configured to, with the at least one processor, cause the apparatus to at least:<claim-text>transmit one or more service requests to the resource service;</claim-text><claim-text>for each of the one or more service requests, determine a service availability indicator;</claim-text><claim-text>for each service availability indicator determined for the one or more service requests, calculate a service availability estimate associated with the resource service based at least in part on the service availability indicator, the service availability estimate representing a prediction of availability of the resource service; and</claim-text><claim-text>transmit a subsequent service request to the resource service based at least in part on the service availability estimate.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the resource service comprises a credit card validation service.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein determining the service availability indicator further comprises:<claim-text>determining that a service response is not received within a predetermined time period subsequent to transmitting a given one of the one or more service requests; and</claim-text><claim-text>generating the service availability indicator indicating that the resource service is not available.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the at least one non-transitory memory and the program code are configured to, with the at least one processor, cause the apparatus to further:<claim-text>determine whether to transmit the subsequent service request.</claim-text></claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The apparatus of <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein determining whether to transmit the subsequent service request further comprises:<claim-text>retrieving a service availability threshold associated with the resource service; and</claim-text><claim-text>determining whether the service availability estimate satisfies the service availability threshold.</claim-text></claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The apparatus of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein determining whether to transmit the subsequent service request further comprises:<claim-text>determining that the service availability estimate satisfies the service availability threshold; and</claim-text><claim-text>in response to determining that the service availability estimate satisfies the service availability threshold, transmitting the subsequent service request to the resource service.</claim-text></claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein calculating the service availability estimate further comprises:<claim-text>replacing a previous service availability estimate with a current service availability estimate upon each service availability indicator determined for the one or more service requests.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. A computer-implemented method for implementing dynamic retry of a resource service in a network system, comprising:<claim-text>transmitting one or more service requests to the resource service;</claim-text><claim-text>for each of the one or more service requests, determining a service availability indicator;</claim-text><claim-text>for each service availability indicator determined for the one or more service requests, calculating a service availability estimate associated with the resource service based at least in part on the service availability indicator, the service availability estimate representing a prediction of availability of the resource service; and</claim-text><claim-text>transmitting a subsequent service request to the resource service based at least in part on the service availability estimate.</claim-text></claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The computer-implemented method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the resource service comprises a credit card validation service.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The computer-implemented method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising:<claim-text>determining that a service response is not received within a predetermined time period subsequent to transmitting a given one of the one or more service requests; and</claim-text><claim-text>generating the service availability indicator indicating that the resource service is not available.</claim-text></claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The computer-implemented method of <claim-ref idref="CLM-00028">claim 28</claim-ref>, further comprising:<claim-text>determining whether to transmit the subsequent service request.</claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The computer-implemented method of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein determining whether to transmit the subsequent service request further comprises:<claim-text>retrieving a service availability threshold associated with the resource service; and</claim-text><claim-text>determining whether the service availability estimate satisfies the service availability threshold.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The computer-implemented method of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein determining whether to transmit the subsequent service request further comprises:<claim-text>determining that the service availability estimate satisfies the service availability threshold; and</claim-text><claim-text>in response to determining that the service availability estimate satisfies the service availability threshold, transmitting the subsequent service request to the resource service.</claim-text></claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein calculating the service availability estimate further comprises:<claim-text>replacing a previous service availability estimate with a current service availability estimate upon each service availability indicator determined for the one or more service requests.</claim-text></claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. A computer program product for implementing dynamic retry of a resource service in a network system, the computer program product comprising at least one non-transitory computer-readable storage medium having computer-readable program code portions stored therein, the computer-readable program code portions comprising an executable portion configured to:<claim-text>transmit one or more service requests to the resource service;</claim-text><claim-text>for each of the one or more service requests, determine a service availability indicator;</claim-text><claim-text>for each service availability indicator determined for the one or more service requests, calculate a service availability estimate associated with the resource service based at least in part on the service availability indicator, the service availability estimate representing a prediction of availability of the resource service; and</claim-text><claim-text>transmit a subsequent service request to the resource service based at least in part on the service availability estimate.</claim-text></claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The computer program product of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the resource service comprises a credit card validation service</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The computer program product of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein determining the service availability indicator further comprises:<claim-text>determining that a service response is not received within a predetermined time period subsequent to transmitting a given one of the one or more service requests; and</claim-text><claim-text>generating the service availability indicator indicating that the resource service is not available.</claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The computer program product of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the computer-readable program code portions further comprise an executable portion configured to:<claim-text>determine whether to transmit the subsequent service request.</claim-text></claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The computer program product of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein determining whether to transmit the subsequent service request further comprises:<claim-text>retrieving a service availability threshold associated with the resource service; and</claim-text><claim-text>determining whether the service availability estimate satisfies the service availability threshold.</claim-text></claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The computer program product of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein calculating the service availability estimate further comprises:<claim-text>replacing a previous service availability estimate with a current service availability estimate upon each service availability indicator determined for the one or more service requests.</claim-text></claim-text></claim></claims></us-patent-application>