<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004409A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004409</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17365170</doc-number><date>20210701</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>451</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>448</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>452</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20180201</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>9</main-group><subgroup>4494</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>N</subclass><main-group>20</main-group><subgroup>00</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">User Interface with Configurable Specification of Related Data Sources</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>ServiceNow, Inc.</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Gupta</last-name><first-name>Sanjay Kumar</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Ramesh</last-name><first-name>Vytesh</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>Szeles</last-name><first-name>Elizabeth Ilona</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>Rajashekara</last-name><first-name>Shilpa Shree</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="04" designation="us-only"><addressbook><last-name>Onteru</last-name><first-name>Shankaraiah</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="05" designation="us-only"><addressbook><last-name>Konduri</last-name><first-name>Praneeth</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="06" designation="us-only"><addressbook><last-name>Kumar</last-name><first-name>Jitendra</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="07" designation="us-only"><addressbook><last-name>Waldia</last-name><first-name>Kavita</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="08" designation="us-only"><addressbook><last-name>Tran</last-name><first-name>Duc Tuan</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="09" designation="us-only"><addressbook><last-name>Chaffee</last-name><first-name>Amanda</first-name><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">Persistent storage contains a definition of a playbook and a plurality of subtasks for the playbook, wherein some of the subtasks are respectively associated with corresponding data sources that provide units of related information. One or more processors can: generate a representation of a graphical user interface including a menu pane, a subtask pane, and a related information pane, wherein the menu pane is populated with selectable objects representing the subtasks; receive an indication that a particular selectable object representing a particular subtask has been selected; determine that a particular data source corresponding to the particular subtask can provide a particular unit of the related information; obtain, from the particular data source, the particular unit of the related information; and update the representation to include details of the particular subtask in the subtask pane, and to include the particular unit of the related information in the related information pane.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="202.78mm" wi="158.75mm" file="US20230004409A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="144.02mm" wi="162.22mm" orientation="landscape" file="US20230004409A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="178.65mm" wi="133.94mm" file="US20230004409A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="232.33mm" wi="165.61mm" orientation="landscape" file="US20230004409A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="232.33mm" wi="164.17mm" orientation="landscape" file="US20230004409A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="197.44mm" wi="167.89mm" orientation="landscape" file="US20230004409A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="218.44mm" wi="158.67mm" file="US20230004409A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="181.53mm" wi="159.09mm" orientation="landscape" file="US20230004409A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="232.75mm" wi="159.68mm" orientation="landscape" file="US20230004409A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="232.75mm" wi="162.05mm" orientation="landscape" file="US20230004409A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="232.41mm" wi="162.05mm" orientation="landscape" file="US20230004409A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="177.80mm" wi="152.74mm" orientation="landscape" file="US20230004409A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="232.75mm" wi="159.68mm" orientation="landscape" file="US20230004409A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="232.75mm" wi="162.05mm" orientation="landscape" file="US20230004409A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="232.92mm" wi="162.14mm" orientation="landscape" file="US20230004409A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="231.90mm" wi="146.30mm" orientation="landscape" file="US20230004409A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="232.33mm" wi="154.35mm" orientation="landscape" file="US20230004409A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="232.33mm" wi="154.35mm" orientation="landscape" file="US20230004409A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="175.26mm" wi="162.14mm" orientation="landscape" file="US20230004409A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="229.53mm" wi="165.95mm" file="US20230004409A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">Modern user interfaces are often dynamically generated, with script-based components that retrieve information from a database and then provide this information for display. Nonetheless, these user interfaces are still limited, in that they frequently require the user to navigate between pages of information during common tasks. This results in users being more likely to lose track of where they are in these tasks, or at least the context for the subtask upon which they are working and/or the subtask's information. As a consequence, users tend to switch back and forth several times between pages, with dynamic information therein potentially being freshly loaded each time. Doing so places an unnecessary burden on processing power and memory utilization, not only on server devices that provide the information, but also on the databases that store this information.</p><heading id="h-0002" level="1">SUMMARY</heading><p id="p-0003" num="0002">The embodiments herein overcome these and potentially other technical problems by establishing a data-driven framework for dynamically displaying information related to subtasks within the overall context of a task (also referred to herein as a workflow or a playbook). An administrator may define one or more data sources per subtask, and information retrieved from these data sources may be displayed in a separate pane of a web page (or another form of user interface) guiding the user through the task. The data sources could be database tables, remote application programming interfaces (APIs), local files, machine learning models, etc. The number of data sources per subtask and the related content to obtain from these data sources can be dynamically defined.</p><p id="p-0004" num="0003">With these embodiments in place, users are presented with task, subtask, and related information obtained from the specified data sources all in one web page rather than being split across two or more web pages. This reduces the number of times that a user switches between pages, as well as the number of times that the user refreshes these pages. This produces a commensurate reduction in computing resource utilization (e.g., processor, memory, and/or network) on the associated web server and data source.</p><p id="p-0005" num="0004">Accordingly, a first example embodiment may involve generating, for display on a client device, a representation of a graphical user interface including a menu pane, a subtask pane, and a related information pane, wherein the menu pane is populated with a plurality of selectable objects representing a plurality of subtasks for a playbook, wherein persistent storage contains a definition of the playbook and the plurality of subtasks, and wherein at least some of the subtasks are respectively associated with corresponding data sources that can provide units of related information. The first example embodiment may also involve transmitting, to the client device, the representation of the graphical user interface. The first example embodiment may also involve receiving, from the client device, an indication that a particular selectable object of the plurality of selectable objects has been selected, wherein the particular selectable object represents a particular subtask of the plurality of subtasks. The first example embodiment may also involve determining that a particular data source corresponding to the particular subtask can be used to provide a particular unit of the related information. The first example embodiment may also involve obtaining, by way of the particular data source, the particular unit of the related information. The first example embodiment may also involve updating the representation of the graphical user interface to include details of the particular subtask in the subtask pane, and to include the particular unit of the related information in the related information pane. The first example embodiment may also involve transmitting, to the client device, the representation of the graphical user interface as updated.</p><p id="p-0006" num="0005">In a second example embodiment, an article of manufacture may include a non-transitory computer-readable medium, having stored thereon program instructions that, upon execution by a computing system, cause the computing system to perform operations in accordance with the first example embodiment.</p><p id="p-0007" num="0006">In a third example embodiment, a computing system may include at least one processor, as well as memory and program instructions. The program instructions may be stored in the memory, and upon execution by the at least one processor, cause the computing system to perform operations in accordance with the first example embodiment.</p><p id="p-0008" num="0007">In a fourth example embodiment, a system may include various means for carrying out each of the operations of the first example embodiment.</p><p id="p-0009" num="0008">These, as well as other embodiments, aspects, advantages, and alternatives, will become apparent to those of ordinary skill in the art by reading the following detailed description, with reference where appropriate to the accompanying drawings. Further, this summary and other descriptions and figures provided herein are intended to illustrate embodiments by way of example only and, as such, that numerous variations are possible. For instance, structural elements and process steps can be rearranged, combined, distributed, eliminated, or otherwise changed, while remaining within the scope of the embodiments as claimed.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0003" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a schematic drawing of a computing device, in accordance with example embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates a schematic drawing of a server device cluster, in accordance with example embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a remote network management architecture, in accordance with example embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>4</b></figref> depicts a communication environment involving a remote network management architecture, in accordance with example embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> depicts another communication environment involving a remote network management architecture, in accordance with example embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>5</b>B</figref> is a flow chart, in accordance with example embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a logical hierarchy for a task, its subtasks, and associated data sources, in accordance with example embodiments.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts a tabbed graphical user interface layout based on the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, in accordance with example embodiments.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref> depicts a possible implementation of the tabbed graphical user interface layout of <figref idref="DRAWINGS">FIG. <b>7</b></figref> with a first tab selected, in accordance with example embodiments.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>8</b>B</figref> depicts a possible implementation of the tabbed graphical user interface layout of <figref idref="DRAWINGS">FIG. <b>7</b></figref> with a second tab selected, in accordance with example embodiments.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>9</b></figref> depicts an improved logical hierarchy for a task, its subtasks, and associated data sources, in accordance with example embodiments.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts an improved graphical user interface layout based on the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>9</b></figref>, in accordance with example embodiments.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>11</b>A</figref> depicts a possible implementation of the graphical user interface layout of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in accordance with example embodiments.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>11</b>B</figref> depicts a possible implementation of the graphical user interface layout of <figref idref="DRAWINGS">FIG. <b>10</b></figref> with a menu selected, in accordance with example embodiments.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>12</b></figref> depicts a specific implementation of the graphical user interface layout of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in accordance with example embodiments.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>13</b>A</figref> depicts a database schema to support the graphical user interface layout of <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in accordance with example embodiments.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> depicts a specific example using the database schema of <figref idref="DRAWINGS">FIG. <b>13</b>A</figref> in use, in accordance with example embodiments.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>13</b>C</figref> depicts a script, in accordance with example embodiments.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow chart, in accordance with example embodiments.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0004" level="1">DETAILED DESCRIPTION</heading><p id="p-0029" num="0028">Example methods, devices, and systems are described herein. It should be understood that the words &#x201c;example&#x201d; and &#x201c;exemplary&#x201d; are used herein to mean &#x201c;serving as an example, instance, or illustration.&#x201d; Any embodiment or feature described herein as being an &#x201c;example&#x201d; or &#x201c;exemplary&#x201d; is not necessarily to be construed as preferred or advantageous over other embodiments or features unless stated as such. Thus, other embodiments can be utilized and other changes can be made without departing from the scope of the subject matter presented herein.</p><p id="p-0030" num="0029">Accordingly, the example embodiments described herein are not meant to be limiting. It will be readily understood that the aspects of the present disclosure, as generally described herein, and illustrated in the figures, can be arranged, substituted, combined, separated, and designed in a wide variety of different configurations. For example, the separation of features into &#x201c;client&#x201d; and &#x201c;server&#x201d; components may occur in a number of ways.</p><p id="p-0031" num="0030">Further, unless context suggests otherwise, the features illustrated in each of the figures may be used in combination with one another. Thus, the figures should be generally viewed as component aspects of one or more overall embodiments, with the understanding that not all illustrated features are necessary for each embodiment.</p><p id="p-0032" num="0031">Additionally, any enumeration of elements, blocks, or steps in this specification or the claims is for purposes of clarity. Thus, such enumeration should not be interpreted to require or imply that these elements, blocks, or steps adhere to a particular arrangement or are carried out in a particular order.</p><heading id="h-0005" level="1">I. INTRODUCTION</heading><p id="p-0033" num="0032">A large enterprise is a complex entity with many interrelated operations. Some of these are found across the enterprise, such as human resources (HR), supply chain, information technology (IT), and finance. However, each enterprise also has its own unique operations that provide essential capabilities and/or create competitive advantages.</p><p id="p-0034" num="0033">To support widely-implemented operations, enterprises typically use off-the-shelf software applications, such as customer relationship management (CRM) and human capital management (HCM) packages. However, they may also need custom software applications to meet their own unique requirements. A large enterprise often has dozens or hundreds of these custom software applications. Nonetheless, the advantages provided by the embodiments herein are not limited to large enterprises and may be applicable to an enterprise, or any other type of organization, of any size.</p><p id="p-0035" num="0034">Many such software applications are developed by individual departments within the enterprise. These range from simple spreadsheets to custom-built software tools and databases. But the proliferation of siloed custom software applications has numerous disadvantages. It negatively impacts an enterprise's ability to run and grow its operations, innovate, and meet regulatory requirements. The enterprise may find it difficult to integrate, streamline, and enhance its operations due to lack of a single system that unifies its subsystems and data.</p><p id="p-0036" num="0035">To efficiently create custom applications, enterprises would benefit from a remotely-hosted application platform that eliminates unnecessary development complexity. The goal of such a platform would be to reduce time-consuming, repetitive application development tasks so that software engineers and individuals in other roles can focus on developing unique, high-value features.</p><p id="p-0037" num="0036">In order to achieve this goal, the concept of Application Platform as a Service (aPaaS) is introduced, to intelligently automate workflows throughout the enterprise. An aPaaS system is hosted remotely from the enterprise, but may access data, applications, and services within the enterprise by way of secure connections. Such an aPaaS system may have a number of advantageous capabilities and characteristics. These advantages and characteristics may be able to improve the enterprise's operations and workflows for IT, HR, CRM, customer service, application development, and security.</p><p id="p-0038" num="0037">The aPaaS system may support development and execution of model-view-controller (MVC) applications. MVC applications divide their functionality into three interconnected parts (model, view, and controller) in order to isolate representations of information from the manner in which the information is presented to the user, thereby allowing for efficient code reuse and parallel development. These applications may be web-based, and offer create, read, update, and delete (CRUD) capabilities. This allows new applications to be built on a common application infrastructure.</p><p id="p-0039" num="0038">The aPaaS system may support standardized application components, such as a standardized set of widgets for graphical user interface (GUI) development. In this way, applications built using the aPaaS system have a common look and feel. Other software components and modules may be standardized as well. In some cases, this look and feel can be branded or skinned with an enterprise's custom logos and/or color schemes.</p><p id="p-0040" num="0039">The aPaaS system may support the ability to configure the behavior of applications using metadata. This allows application behaviors to be rapidly adapted to meet specific needs. Such an approach reduces development time and increases flexibility. Further, the aPaaS system may support GUI tools that facilitate metadata creation and management, thus reducing errors in the metadata.</p><p id="p-0041" num="0040">The aPaaS system may support clearly-defined interfaces between applications, so that software developers can avoid unwanted inter-application dependencies. Thus, the aPaaS system may implement a service layer in which persistent state information and other data are stored.</p><p id="p-0042" num="0041">The aPaaS system may support a rich set of integration features so that the applications thereon can interact with legacy applications and third-party applications. For instance, the aPaaS system may support a custom employee-onboarding system that integrates with legacy HR, IT, and accounting systems.</p><p id="p-0043" num="0042">The aPaaS system may support enterprise-grade security. Furthermore, since the aPaaS system may be remotely hosted, it should also utilize security procedures when it interacts with systems in the enterprise or third-party networks and services hosted outside of the enterprise. For example, the aPaaS system may be configured to share data amongst the enterprise and other parties to detect and identify common security threats.</p><p id="p-0044" num="0043">Other features, functionality, and advantages of an aPaaS system may exist. This description is for purpose of example and is not intended to be limiting.</p><p id="p-0045" num="0044">As an example of the aPaaS development process, a software developer may be tasked to create a new application using the aPaaS system. First, the developer may define the data model, which specifies the types of data that the application uses and the relationships therebetween. Then, via a GUI of the aPaaS system, the developer enters (e.g., uploads) the data model. The aPaaS system automatically creates all of the corresponding database tables, fields, and relationships, which can then be accessed via an object-oriented services layer.</p><p id="p-0046" num="0045">In addition, the aPaaS system can also build a fully-functional MVC application with client-side interfaces and server-side CRUD logic. This generated application may serve as the basis of further development for the user. Advantageously, the developer does not have to spend a large amount of time on basic application functionality. Further, since the application may be web-based, it can be accessed from any Internet-enabled client device. Alternatively or additionally, a local copy of the application may be able to be accessed, for instance, when Internet service is not available.</p><p id="p-0047" num="0046">The aPaaS system may also support a rich set of pre-defined functionality that can be added to applications. These features include support for searching, email, templating, workflow design, reporting, analytics, social media, scripting, mobile-friendly output, and customized GUIs.</p><p id="p-0048" num="0047">Such an aPaaS system may represent a GUI in various ways. For example, a server device of the aPaaS system may generate a representation of a GUI using a combination of HTML and JAVASCRIPT&#xae;. The JAVASCRIPT&#xae; may include client-side executable code, server-side executable code, or both. The server device may transmit or otherwise provide this representation to a client device for the client device to display on a screen according to its locally-defined look and feel. Alternatively, a representation of a GUI may take other forms, such as an intermediate form (e.g., JAVA&#xae; byte-code) that a client device can use to directly generate graphical output therefrom. Other possibilities exist.</p><p id="p-0049" num="0048">Further, user interaction with GUI elements, such as buttons, menus, tabs, sliders, checkboxes, toggles, etc. may be referred to as &#x201c;selection&#x201d;, &#x201c;activation&#x201d;, or &#x201c;actuation&#x201d; thereof. These terms may be used regardless of whether the GUI elements are interacted with by way of keyboard, pointing device, touchscreen, or another mechanism.</p><p id="p-0050" num="0049">An aPaaS architecture is particularly powerful when integrated with an enterprise's network and used to manage such a network. The following embodiments describe architectural and functional aspects of example aPaaS systems, as well as the features and advantages thereof.</p><heading id="h-0006" level="1">II. EXAMPLE COMPUTING DEVICES AND CLOUD-BASED COMPUTING ENVIRONMENTS</heading><p id="p-0051" num="0050"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a simplified block diagram exemplifying a computing device <b>100</b>, illustrating some of the components that could be included in a computing device arranged to operate in accordance with the embodiments herein. Computing device <b>100</b> could be a client device (e.g., a device actively operated by a user), a server device (e.g., a device that provides computational services to client devices), or some other type of computational platform. Some server devices may operate as client devices from time to time in order to perform particular operations, and some client devices may incorporate server features.</p><p id="p-0052" num="0051">In this example, computing device <b>100</b> includes processor <b>102</b>, memory <b>104</b>, network interface <b>106</b>, and input/output unit <b>108</b>, all of which may be coupled by system bus <b>110</b> or a similar mechanism. In some embodiments, computing device <b>100</b> may include other components and/or peripheral devices (e.g., detachable storage, printers, and so on).</p><p id="p-0053" num="0052">Processor <b>102</b> may be one or more of any type of computer processing element, such as a central processing unit (CPU), a co-processor (e.g., a mathematics, graphics, or encryption co-processor), a digital signal processor (DSP), a network processor, and/or a form of integrated circuit or controller that performs processor operations. In some cases, processor <b>102</b> may be one or more single-core processors. In other cases, processor <b>102</b> may be one or more multi-core processors with multiple independent processing units. Processor <b>102</b> may also include register memory for temporarily storing instructions being executed and related data, as well as cache memory for temporarily storing recently-used instructions and data.</p><p id="p-0054" num="0053">Memory <b>104</b> may be any form of computer-usable memory, including but not limited to random access memory (RAM), read-only memory (ROM), and non-volatile memory (e.g., flash memory, hard disk drives, solid state drives, compact discs (CDs), digital video discs (DVDs), and/or tape storage). Thus, memory <b>104</b> represents both main memory units, as well as long-term storage. Other types of memory may include biological memory.</p><p id="p-0055" num="0054">Memory <b>104</b> may store program instructions and/or data on which program instructions may operate. By way of example, memory <b>104</b> may store these program instructions on a non-transitory, computer-readable medium, such that the instructions are executable by processor <b>102</b> to carry out any of the methods, processes, or operations disclosed in this specification or the accompanying drawings.</p><p id="p-0056" num="0055">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, memory <b>104</b> may include firmware <b>104</b>A, kernel <b>104</b>B, and/or applications <b>104</b>C. Firmware <b>104</b>A may be program code used to boot or otherwise initiate some or all of computing device <b>100</b>. Kernel <b>104</b>B may be an operating system, including modules for memory management, scheduling, and management of processes, input/output, and communication. Kernel <b>104</b>B may also include device drivers that allow the operating system to communicate with the hardware modules (e.g., memory units, networking interfaces, ports, and buses) of computing device <b>100</b>. Applications <b>104</b>C may be one or more user-space software programs, such as web browsers or email clients, as well as any software libraries used by these programs. Memory <b>104</b> may also store data used by these and other programs and applications.</p><p id="p-0057" num="0056">Network interface <b>106</b> may take the form of one or more wireline interfaces, such as Ethernet (e.g., Fast Ethernet, Gigabit Ethernet, and so on). Network interface <b>106</b> may also support communication over one or more non-Ethernet media, such as coaxial cables or power lines, or over wide-area media, such as Synchronous Optical Networking (SONET) or digital subscriber line (DSL) technologies. Network interface <b>106</b> may additionally take the form of one or more wireless interfaces, such as IEEE 802.11 (Wifi), BLUETOOTH&#xae;, global positioning system (GPS), or a wide-area wireless interface. However, other forms of physical layer interfaces and other types of standard or proprietary communication protocols may be used over network interface <b>106</b>. Furthermore, network interface <b>106</b> may comprise multiple physical interfaces. For instance, some embodiments of computing device <b>100</b> may include Ethernet, BLUETOOTH&#xae;, and Wifi interfaces.</p><p id="p-0058" num="0057">Input/output unit <b>108</b> may facilitate user and peripheral device interaction with computing device <b>100</b>. Input/output unit <b>108</b> may include one or more types of input devices, such as a keyboard, a mouse, a touch screen, and so on. Similarly, input/output unit <b>108</b> may include one or more types of output devices, such as a screen, monitor, printer, and/or one or more light emitting diodes (LEDs). Additionally or alternatively, computing device <b>100</b> may communicate with other devices using a universal serial bus (USB) or high-definition multimedia interface (HDMI) port interface, for example.</p><p id="p-0059" num="0058">In some embodiments, one or more computing devices like computing device <b>100</b> may be deployed to support an aPaaS architecture. The exact physical location, connectivity, and configuration of these computing devices may be unknown and/or unimportant to client devices. Accordingly, the computing devices may be referred to as &#x201c;cloud-based&#x201d; devices that may be housed at various remote data center locations.</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>2</b></figref> depicts a cloud-based server cluster <b>200</b> in accordance with example embodiments. In <figref idref="DRAWINGS">FIG. <b>2</b></figref>, operations of a computing device (e.g., computing device <b>100</b>) may be distributed between server devices <b>202</b>, data storage <b>204</b>, and routers <b>206</b>, all of which may be connected by local cluster network <b>208</b>. The number of server devices <b>202</b>, data storages <b>204</b>, and routers <b>206</b> in server cluster <b>200</b> may depend on the computing task(s) and/or applications assigned to server cluster <b>200</b>.</p><p id="p-0061" num="0060">For example, server devices <b>202</b> can be configured to perform various computing tasks of computing device <b>100</b>. Thus, computing tasks can be distributed among one or more of server devices <b>202</b>. To the extent that these computing tasks can be performed in parallel, such a distribution of tasks may reduce the total time to complete these tasks and return a result. For purposes of simplicity, both server cluster <b>200</b> and individual server devices <b>202</b> may be referred to as a &#x201c;server device.&#x201d; This nomenclature should be understood to imply that one or more distinct server devices, data storage devices, and cluster routers may be involved in server device operations.</p><p id="p-0062" num="0061">Data storage <b>204</b> may be data storage arrays that include drive array controllers configured to manage read and write access to groups of hard disk drives and/or solid state drives. The drive array controllers, alone or in conjunction with server devices <b>202</b>, may also be configured to manage backup or redundant copies of the data stored in data storage <b>204</b> to protect against drive failures or other types of failures that prevent one or more of server devices <b>202</b> from accessing units of data storage <b>204</b>. Other types of memory aside from drives may be used.</p><p id="p-0063" num="0062">Routers <b>206</b> may include networking equipment configured to provide internal and external communications for server cluster <b>200</b>. For example, routers <b>206</b> may include one or more packet-switching and/or routing devices (including switches and/or gateways) configured to provide (i) network communications between server devices <b>202</b> and data storage <b>204</b> via local cluster network <b>208</b>, and/or (ii) network communications between server cluster <b>200</b> and other devices via communication link <b>210</b> to network <b>212</b>.</p><p id="p-0064" num="0063">Additionally, the configuration of routers <b>206</b> can be based at least in part on the data communication requirements of server devices <b>202</b> and data storage <b>204</b>, the latency and throughput of the local cluster network <b>208</b>, the latency, throughput, and cost of communication link <b>210</b>, and/or other factors that may contribute to the cost, speed, fault-tolerance, resiliency, efficiency, and/or other design goals of the system architecture.</p><p id="p-0065" num="0064">As a possible example, data storage <b>204</b> may include any form of database, such as a structured query language (SQL) database. Various types of data structures may store the information in such a database, including but not limited to tables, arrays, lists, trees, and tuples. Furthermore, any databases in data storage <b>204</b> may be monolithic or distributed across multiple physical devices.</p><p id="p-0066" num="0065">Server devices <b>202</b> may be configured to transmit data to and receive data from data storage <b>204</b>. This transmission and retrieval may take the form of SQL queries or other types of database queries, and the output of such queries, respectively. Additional text, images, video, and/or audio may be included as well. Furthermore, server devices <b>202</b> may organize the received data into web page or web application representations. Such a representation may take the form of a markup language, such as the hypertext markup language (HTML), the extensible markup language (XML), or some other standardized or proprietary format. Moreover, server devices <b>202</b> may have the capability of executing various types of computerized scripting languages, such as but not limited to Perl, Python, PHP Hypertext Preprocessor (PHP), Active Server Pages (ASP), JAVASCRIPT&#xae;, and so on. Computer program code written in these languages may facilitate the providing of web pages to client devices, as well as client device interaction with the web pages. Alternatively or additionally, JAVA&#xae; may be used to facilitate generation of web pages and/or to provide web application functionality.</p><heading id="h-0007" level="1">III. EXAMPLE REMOTE NETWORK MANAGEMENT ARCHITECTURE</heading><p id="p-0067" num="0066"><figref idref="DRAWINGS">FIG. <b>3</b></figref> depicts a remote network management architecture, in accordance with example embodiments. This architecture includes three main components&#x2014;managed network <b>300</b>, remote network management platform <b>320</b>, and public cloud networks <b>340</b>&#x2014;all connected by way of Internet <b>350</b>.</p><p id="p-0068" num="0067">A. Managed Networks</p><p id="p-0069" num="0068">Managed network <b>300</b> may be, for example, an enterprise network used by an entity for computing and communications tasks, as well as storage of data. Thus, managed network <b>300</b> may include client devices <b>302</b>, server devices <b>304</b>, routers <b>306</b>, virtual machines <b>308</b>, firewall <b>310</b>, and/or proxy servers <b>312</b>. Client devices <b>302</b> may be embodied by computing device <b>100</b>, server devices <b>304</b> may be embodied by computing device <b>100</b> or server cluster <b>200</b>, and routers <b>306</b> may be any type of router, switch, or gateway.</p><p id="p-0070" num="0069">Virtual machines <b>308</b> may be embodied by one or more of computing device <b>100</b> or server cluster <b>200</b>. In general, a virtual machine is an emulation of a computing system, and mimics the functionality (e.g., processor, memory, and communication resources) of a physical computer. One physical computing system, such as server cluster <b>200</b>, may support up to thousands of individual virtual machines. In some embodiments, virtual machines <b>308</b> may be managed by a centralized server device or application that facilitates allocation of physical computing resources to individual virtual machines, as well as performance and error reporting. Enterprises often employ virtual machines in order to allocate computing resources in an efficient, as needed fashion. Providers of virtualized computing systems include VMWARE&#xae; and MICROSOFT&#xae;.</p><p id="p-0071" num="0070">Firewall <b>310</b> may be one or more specialized routers or server devices that protect managed network <b>300</b> from unauthorized attempts to access the devices, applications, and services therein, while allowing authorized communication that is initiated from managed network <b>300</b>. Firewall <b>310</b> may also provide intrusion detection, web filtering, virus scanning, application-layer gateways, and other applications or services. In some embodiments not shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, managed network <b>300</b> may include one or more virtual private network (VPN) gateways with which it communicates with remote network management platform <b>320</b> (see below).</p><p id="p-0072" num="0071">Managed network <b>300</b> may also include one or more proxy servers <b>312</b>. An embodiment of proxy servers <b>312</b> may be a server application that facilitates communication and movement of data between managed network <b>300</b>, remote network management platform <b>320</b>, and public cloud networks <b>340</b>. In particular, proxy servers <b>312</b> may be able to establish and maintain secure communication sessions with one or more computational instances of remote network management platform <b>320</b>. By way of such a session, remote network management platform <b>320</b> may be able to discover and manage aspects of the architecture and configuration of managed network <b>300</b> and its components. Possibly with the assistance of proxy servers <b>312</b>, remote network management platform <b>320</b> may also be able to discover and manage aspects of public cloud networks <b>340</b> that are used by managed network <b>300</b>.</p><p id="p-0073" num="0072">Firewalls, such as firewall <b>310</b>, typically deny all communication sessions that are incoming by way of Internet <b>350</b>, unless such a session was ultimately initiated from behind the firewall (i.e., from a device on managed network <b>300</b>) or the firewall has been explicitly configured to support the session. By placing proxy servers <b>312</b> behind firewall <b>310</b> (e.g., within managed network <b>300</b> and protected by firewall <b>310</b>), proxy servers <b>312</b> may be able to initiate these communication sessions through firewall <b>310</b>. Thus, firewall <b>310</b> might not have to be specifically configured to support incoming sessions from remote network management platform <b>320</b>, thereby avoiding potential security risks to managed network <b>300</b>.</p><p id="p-0074" num="0073">In some cases, managed network <b>300</b> may consist of a few devices and a small number of networks. In other deployments, managed network <b>300</b> may span multiple physical locations and include hundreds of networks and hundreds of thousands of devices. Thus, the architecture depicted in <figref idref="DRAWINGS">FIG. <b>3</b></figref> is capable of scaling up or down by orders of magnitude.</p><p id="p-0075" num="0074">Furthermore, depending on the size, architecture, and connectivity of managed network <b>300</b>, a varying number of proxy servers <b>312</b> may be deployed therein. For example, each one of proxy servers <b>312</b> may be responsible for communicating with remote network management platform <b>320</b> regarding a portion of managed network <b>300</b>. Alternatively or additionally, sets of two or more proxy servers may be assigned to such a portion of managed network <b>300</b> for purposes of load balancing, redundancy, and/or high availability.</p><p id="p-0076" num="0075">B. Remote Network Management Platforms</p><p id="p-0077" num="0076">Remote network management platform <b>320</b> is a hosted environment that provides aPaaS services to users, particularly to the operator of managed network <b>300</b>. These services may take the form of web-based portals, for example, using the aforementioned web-based technologies. Thus, a user can securely access remote network management platform <b>320</b> from, for example, client devices <b>302</b>, or potentially from a client device outside of managed network <b>300</b>. By way of the web-based portals, users may design, test, and deploy applications, generate reports, view analytics, and perform other tasks. Remote network management platform <b>320</b> may also be referred to as a multi-application platform.</p><p id="p-0078" num="0077">As shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, remote network management platform <b>320</b> includes four computational instances <b>322</b>, <b>324</b>, <b>326</b>, and <b>328</b>. Each of these computational instances may represent one or more server nodes operating dedicated copies of the aPaaS software and/or one or more database nodes. The arrangement of server and database nodes on physical server devices and/or virtual machines can be flexible and may vary based on enterprise needs. In combination, these nodes may provide a set of web portals, services, and applications (e.g., a wholly-functioning aPaaS system) available to a particular enterprise. In some cases, a single enterprise may use multiple computational instances.</p><p id="p-0079" num="0078">For example, managed network <b>300</b> may be an enterprise customer of remote network management platform <b>320</b>, and may use computational instances <b>322</b>, <b>324</b>, and <b>326</b>. The reason for providing multiple computational instances to one customer is that the customer may wish to independently develop, test, and deploy its applications and services. Thus, computational instance <b>322</b> may be dedicated to application development related to managed network <b>300</b>, computational instance <b>324</b> may be dedicated to testing these applications, and computational instance <b>326</b> may be dedicated to the live operation of tested applications and services. A computational instance may also be referred to as a hosted instance, a remote instance, a customer instance, or by some other designation. Any application deployed onto a computational instance may be a scoped application, in that its access to databases within the computational instance can be restricted to certain elements therein (e.g., one or more particular database tables or particular rows within one or more database tables).</p><p id="p-0080" num="0079">For purposes of clarity, the disclosure herein refers to the arrangement of application nodes, database nodes, aPaaS software executing thereon, and underlying hardware as a &#x201c;computational instance.&#x201d; Note that users may colloquially refer to the graphical user interfaces provided thereby as &#x201c;instances.&#x201d; But unless it is defined otherwise herein, a &#x201c;computational instance&#x201d; is a computing system disposed within remote network management platform <b>320</b>.</p><p id="p-0081" num="0080">The multi-instance architecture of remote network management platform <b>320</b> is in contrast to conventional multi-tenant architectures, over which multi-instance architectures exhibit several advantages. In multi-tenant architectures, data from different customers (e.g., enterprises) are comingled in a single database. While these customers' data are separate from one another, the separation is enforced by the software that operates the single database. As a consequence, a security breach in this system may affect all customers' data, creating additional risk, especially for entities subject to governmental, healthcare, and/or financial regulation. Furthermore, any database operations that affect one customer will likely affect all customers sharing that database. Thus, if there is an outage due to hardware or software errors, this outage affects all such customers. Likewise, if the database is to be upgraded to meet the needs of one customer, it will be unavailable to all customers during the upgrade process. Often, such maintenance windows will be long, due to the size of the shared database.</p><p id="p-0082" num="0081">In contrast, the multi-instance architecture provides each customer with its own database in a dedicated computing instance. This prevents comingling of customer data, and allows each instance to be independently managed. For example, when one customer's instance experiences an outage due to errors or an upgrade, other computational instances are not impacted. Maintenance down time is limited because the database only contains one customer's data. Further, the simpler design of the multi-instance architecture allows redundant copies of each customer database and instance to be deployed in a geographically diverse fashion. This facilitates high availability, where the live version of the customer's instance can be moved when faults are detected or maintenance is being performed.</p><p id="p-0083" num="0082">In some embodiments, remote network management platform <b>320</b> may include one or more central instances, controlled by the entity that operates this platform. Like a computational instance, a central instance may include some number of application and database nodes disposed upon some number of physical server devices or virtual machines. Such a central instance may serve as a repository for specific configurations of computational instances as well as data that can be shared amongst at least some of the computational instances. For instance, definitions of common security threats that could occur on the computational instances, software packages that are commonly discovered on the computational instances, and/or an application store for applications that can be deployed to the computational instances may reside in a central instance. Computational instances may communicate with central instances by way of well-defined interfaces in order to obtain this data.</p><p id="p-0084" num="0083">In order to support multiple computational instances in an efficient fashion, remote network management platform <b>320</b> may implement a plurality of these instances on a single hardware platform. For example, when the aPaaS system is implemented on a server cluster such as server cluster <b>200</b>, it may operate virtual machines that dedicate varying amounts of computational, storage, and communication resources to instances. But full virtualization of server cluster <b>200</b> might not be necessary, and other mechanisms may be used to separate instances. In some examples, each instance may have a dedicated account and one or more dedicated databases on server cluster <b>200</b>. Alternatively, a computational instance such as computational instance <b>322</b> may span multiple physical devices.</p><p id="p-0085" num="0084">In some cases, a single server cluster of remote network management platform <b>320</b> may support multiple independent enterprises. Furthermore, as described below, remote network management platform <b>320</b> may include multiple server clusters deployed in geographically diverse data centers in order to facilitate load balancing, redundancy, and/or high availability.</p><p id="p-0086" num="0085">C. Public Cloud Networks</p><p id="p-0087" num="0086">Public cloud networks <b>340</b> may be remote server devices (e.g., a plurality of server clusters such as server cluster <b>200</b>) that can be used for outsourced computation, data storage, communication, and service hosting operations. These servers may be virtualized (i.e., the servers may be virtual machines). Examples of public cloud networks <b>340</b> may include AMAZON WEB SERVICES&#xae; and MICROSOFT&#xae; AZURE&#xae;. Like remote network management platform <b>320</b>, multiple server clusters supporting public cloud networks <b>340</b> may be deployed at geographically diverse locations for purposes of load balancing, redundancy, and/or high availability.</p><p id="p-0088" num="0087">Managed network <b>300</b> may use one or more of public cloud networks <b>340</b> to deploy applications and services to its clients and customers. For instance, if managed network <b>300</b> provides online music streaming services, public cloud networks <b>340</b> may store the music files and provide web interface and streaming capabilities. In this way, the enterprise of managed network <b>300</b> does not have to build and maintain its own servers for these operations.</p><p id="p-0089" num="0088">Remote network management platform <b>320</b> may include modules that integrate with public cloud networks <b>340</b> to expose virtual machines and managed services therein to managed network <b>300</b>. The modules may allow users to request virtual resources, discover allocated resources, and provide flexible reporting for public cloud networks <b>340</b>. In order to establish this functionality, a user from managed network <b>300</b> might first establish an account with public cloud networks <b>340</b>, and request a set of associated resources. Then, the user may enter the account information into the appropriate modules of remote network management platform <b>320</b>. These modules may then automatically discover the manageable resources in the account, and also provide reports related to usage, performance, and billing.</p><p id="p-0090" num="0089">D. Communication Support and Other Operations</p><p id="p-0091" num="0090">Internet <b>350</b> may represent a portion of the global Internet. However, Internet <b>350</b> may alternatively represent a different type of network, such as a private wide-area or local-area packet-switched network.</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>4</b></figref> further illustrates the communication environment between managed network <b>300</b> and computational instance <b>322</b>, and introduces additional features and alternative embodiments. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, computational instance <b>322</b> is replicated, in whole or in part, across data centers <b>400</b>A and <b>400</b>B. These data centers may be geographically distant from one another, perhaps in different cities or different countries. Each data center includes support equipment that facilitates communication with managed network <b>300</b>, as well as remote users.</p><p id="p-0093" num="0092">In data center <b>400</b>A, network traffic to and from external devices flows either through VPN gateway <b>402</b>A or firewall <b>404</b>A. VPN gateway <b>402</b>A may be peered with VPN gateway <b>412</b> of managed network <b>300</b> by way of a security protocol such as Internet Protocol Security (IPSEC) or Transport Layer Security (TLS). Firewall <b>404</b>A may be configured to allow access from authorized users, such as user <b>414</b> and remote user <b>416</b>, and to deny access to unauthorized users. By way of firewall <b>404</b>A, these users may access computational instance <b>322</b>, and possibly other computational instances. Load balancer <b>406</b>A may be used to distribute traffic amongst one or more physical or virtual server devices that host computational instance <b>322</b>. Load balancer <b>406</b>A may simplify user access by hiding the internal configuration of data center <b>400</b>A, (e.g., computational instance <b>322</b>) from client devices. For instance, if computational instance <b>322</b> includes multiple physical or virtual computing devices that share access to multiple databases, load balancer <b>406</b>A may distribute network traffic and processing tasks across these computing devices and databases so that no one computing device or database is significantly busier than the others. In some embodiments, computational instance <b>322</b> may include VPN gateway <b>402</b>A, firewall <b>404</b>A, and load balancer <b>406</b>A.</p><p id="p-0094" num="0093">Data center <b>400</b>B may include its own versions of the components in data center <b>400</b>A. Thus, VPN gateway <b>402</b>B, firewall <b>404</b>B, and load balancer <b>406</b>B may perform the same or similar operations as VPN gateway <b>402</b>A, firewall <b>404</b>A, and load balancer <b>406</b>A, respectively. Further, by way of real-time or near-real-time database replication and/or other operations, computational instance <b>322</b> may exist simultaneously in data centers <b>400</b>A and <b>400</b>B.</p><p id="p-0095" num="0094">Data centers <b>400</b>A and <b>400</b>B as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref> may facilitate redundancy and high availability. In the configuration of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, data center <b>400</b>A is active and data center <b>400</b>B is passive. Thus, data center <b>400</b>A is serving all traffic to and from managed network <b>300</b>, while the version of computational instance <b>322</b> in data center <b>400</b>B is being updated in near-real-time. Other configurations, such as one in which both data centers are active, may be supported.</p><p id="p-0096" num="0095">Should data center <b>400</b>A fail in some fashion or otherwise become unavailable to users, data center <b>400</b>B can take over as the active data center. For example, domain name system (DNS) servers that associate a domain name of computational instance <b>322</b> with one or more Internet Protocol (IP) addresses of data center <b>400</b>A may re-associate the domain name with one or more IP addresses of data center <b>400</b>B. After this re-association completes (which may take less than one second or several seconds), users may access computational instance <b>322</b> by way of data center <b>400</b>B.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>4</b></figref> also illustrates a possible configuration of managed network <b>300</b>. As noted above, proxy servers <b>312</b> and user <b>414</b> may access computational instance <b>322</b> through firewall <b>310</b>. Proxy servers <b>312</b> may also access configuration items <b>410</b>. In <figref idref="DRAWINGS">FIG. <b>4</b></figref>, configuration items <b>410</b> may refer to any or all of client devices <b>302</b>, server devices <b>304</b>, routers <b>306</b>, and virtual machines <b>308</b>, any applications or services executing thereon, as well as relationships between devices, applications, and services. Thus, the term &#x201c;configuration items&#x201d; may be shorthand for any physical or virtual device, or any application or service remotely discoverable or managed by computational instance <b>322</b>, or relationships between discovered devices, applications, and services. Configuration items may be represented in a configuration management database (CMDB) of computational instance <b>322</b>.</p><p id="p-0098" num="0097">As noted above, VPN gateway <b>412</b> may provide a dedicated VPN to VPN gateway <b>402</b>A. Such a VPN may be helpful when there is a significant amount of traffic between managed network <b>300</b> and computational instance <b>322</b>, or security policies otherwise suggest or require use of a VPN between these sites. In some embodiments, any device in managed network <b>300</b> and/or computational instance <b>322</b> that directly communicates via the VPN is assigned a public IP address. Other devices in managed network <b>300</b> and/or computational instance <b>322</b> may be assigned private IP addresses (e.g., IP addresses selected from the 10.0.0.0-10.255.255.255 or 192.168.0.0-192.168.255.255 ranges, represented in shorthand as subnets 10.0.0.0/8 and 192.168.0.0/16, respectively).</p><heading id="h-0008" level="1">IV. EXAMPLE DEVICE, APPLICATION, AND SERVICE DISCOVERY</heading><p id="p-0099" num="0098">In order for remote network management platform <b>320</b> to administer the devices, applications, and services of managed network <b>300</b>, remote network management platform <b>320</b> may first determine what devices are present in managed network <b>300</b>, the configurations and operational statuses of these devices, and the applications and services provided by the devices, as well as the relationships between discovered devices, applications, and services. As noted above, each device, application, service, and relationship may be referred to as a configuration item. The process of defining configuration items within managed network <b>300</b> is referred to as discovery, and may be facilitated at least in part by proxy servers <b>312</b>.</p><p id="p-0100" num="0099">For purposes of the embodiments herein, an &#x201c;application&#x201d; may refer to one or more processes, threads, programs, client modules, server modules, or any other software that executes on a device or group of devices. A &#x201c;service&#x201d; may refer to a high-level capability provided by multiple applications executing on one or more devices working in conjunction with one another. For example, a high-level web service may involve multiple web application server threads executing on one device and accessing information from a database application that executes on another device.</p><p id="p-0101" num="0100"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> provides a logical depiction of how configuration items can be discovered, as well as how information related to discovered configuration items can be stored. For sake of simplicity, remote network management platform <b>320</b>, public cloud networks <b>340</b>, and Internet <b>350</b> are not shown.</p><p id="p-0102" num="0101">In <figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, CMDB <b>500</b> and task list <b>502</b> are stored within computational instance <b>322</b>. Computational instance <b>322</b> may transmit discovery commands to proxy servers <b>312</b>. In response, proxy servers <b>312</b> may transmit probes to various devices, applications, and services in managed network <b>300</b>. These devices, applications, and services may transmit responses to proxy servers <b>312</b>, and proxy servers <b>312</b> may then provide information regarding discovered configuration items to CMDB <b>500</b> for storage therein. Configuration items stored in CMDB <b>500</b> represent the environment of managed network <b>300</b>.</p><p id="p-0103" num="0102">Task list <b>502</b> represents a list of activities that proxy servers <b>312</b> are to perform on behalf of computational instance <b>322</b>. As discovery takes place, task list <b>502</b> is populated. Proxy servers <b>312</b> repeatedly query task list <b>502</b>, obtain the next task therein, and perform this task until task list <b>502</b> is empty or another stopping condition has been reached.</p><p id="p-0104" num="0103">To facilitate discovery, proxy servers <b>312</b> may be configured with information regarding one or more subnets in managed network <b>300</b> that are reachable by way of proxy servers <b>312</b>. For instance, proxy servers <b>312</b> may be given the IP address range 192.168.0/24 as a subnet. Then, computational instance <b>322</b> may store this information in CMDB <b>500</b> and place tasks in task list <b>502</b> for discovery of devices at each of these addresses.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref> also depicts devices, applications, and services in managed network <b>300</b> as configuration items <b>504</b>, <b>506</b>, <b>508</b>, <b>510</b>, and <b>512</b>. As noted above, these configuration items represent a set of physical and/or virtual devices (e.g., client devices, server devices, routers, or virtual machines), applications executing thereon (e.g., web servers, email servers, databases, or storage arrays), relationships therebetween, as well as services that involve multiple individual configuration items.</p><p id="p-0106" num="0105">Placing the tasks in task list <b>502</b> may trigger or otherwise cause proxy servers <b>312</b> to begin discovery. Alternatively or additionally, discovery may be manually triggered or automatically triggered based on triggering events (e.g., discovery may automatically begin once per day at a particular time).</p><p id="p-0107" num="0106">In general, discovery may proceed in four logical phases: scanning, classification, identification, and exploration. Each phase of discovery involves various types of probe messages being transmitted by proxy servers <b>312</b> to one or more devices in managed network <b>300</b>. The responses to these probes may be received and processed by proxy servers <b>312</b>, and representations thereof may be transmitted to CMDB <b>500</b>. Thus, each phase can result in more configuration items being discovered and stored in CMDB <b>500</b>.</p><p id="p-0108" num="0107">In the scanning phase, proxy servers <b>312</b> may probe each IP address in the specified range of IP addresses for open Transmission Control Protocol (TCP) and/or User Datagram Protocol (UDP) ports to determine the general type of device. The presence of such open ports at an IP address may indicate that a particular application is operating on the device that is assigned the IP address, which in turn may identify the operating system used by the device. For example, if TCP port <b>135</b> is open, then the device is likely executing a WINDOWS&#xae; operating system. Similarly, if TCP port <b>22</b> is open, then the device is likely executing a UNIX&#xae; operating system, such as LINUX&#xae;. If UDP port <b>161</b> is open, then the device may be able to be further identified through the Simple Network Management Protocol (SNMP). Other possibilities exist. Once the presence of a device at a particular IP address and its open ports have been discovered, these configuration items are saved in CMDB <b>500</b>.</p><p id="p-0109" num="0108">In the classification phase, proxy servers <b>312</b> may further probe each discovered device to determine the version of its operating system. The probes used for a particular device are based on information gathered about the devices during the scanning phase. For example, if a device is found with TCP port <b>22</b> open, a set of UNIX&#xae;-specific probes may be used. Likewise, if a device is found with TCP port <b>135</b> open, a set of WINDOWS&#xae;-specific probes may be used. For either case, an appropriate set of tasks may be placed in task list <b>502</b> for proxy servers <b>312</b> to carry out. These tasks may result in proxy servers <b>312</b> logging on, or otherwise accessing information from the particular device. For instance, if TCP port <b>22</b> is open, proxy servers <b>312</b> may be instructed to initiate a Secure Shell (SSH) connection to the particular device and obtain information about the operating system thereon from particular locations in the file system. Based on this information, the operating system may be determined. As an example, a UNIX&#xae; device with TCP port <b>22</b> open may be classified as AIX&#xae;, HPUX, LINUX&#xae;, MACOS&#xae;, or SOLARIS&#xae;. This classification information may be stored as one or more configuration items in CMDB <b>500</b>.</p><p id="p-0110" num="0109">In the identification phase, proxy servers <b>312</b> may determine specific details about a classified device. The probes used during this phase may be based on information gathered about the particular devices during the classification phase. For example, if a device was classified as LINUX&#xae;, a set of LINUX&#xae;-specific probes may be used. Likewise, if a device was classified as WINDOWS&#xae; 2012, as a set of WINDOWS&#xae;-2012-specific probes may be used. As was the case for the classification phase, an appropriate set of tasks may be placed in task list <b>502</b> for proxy servers <b>312</b> to carry out. These tasks may result in proxy servers <b>312</b> reading information from the particular device, such as basic input/output system (BIOS) information, serial numbers, network interface information, media access control address(es) assigned to these network interface(s), IP address(es) used by the particular device and so on. This identification information may be stored as one or more configuration items in CMDB <b>500</b>.</p><p id="p-0111" num="0110">In the exploration phase, proxy servers <b>312</b> may determine further details about the operational state of a classified device. The probes used during this phase may be based on information gathered about the particular devices during the classification phase and/or the identification phase. Again, an appropriate set of tasks may be placed in task list <b>502</b> for proxy servers <b>312</b> to carry out. These tasks may result in proxy servers <b>312</b> reading additional information from the particular device, such as processor information, memory information, lists of running processes (applications), and so on. Once more, the discovered information may be stored as one or more configuration items in CMDB <b>500</b>.</p><p id="p-0112" num="0111">Running discovery on a network device, such as a router, may utilize SNMP. Instead of or in addition to determining a list of running processes or other application-related information, discovery may determine additional subnets known to the router and the operational state of the router's network interfaces (e.g., active, inactive, queue length, number of packets dropped, etc.). The IP addresses of the additional subnets may be candidates for further discovery procedures. Thus, discovery may progress iteratively or recursively.</p><p id="p-0113" num="0112">Once discovery completes, a snapshot representation of each discovered device, application, and service is available in CMDB <b>500</b>. For example, after discovery, operating system version, hardware configuration, and network configuration details for client devices, server devices, and routers in managed network <b>300</b>, as well as applications executing thereon, may be stored. This collected information may be presented to a user in various ways to allow the user to view the hardware composition and operational status of devices, as well as the characteristics of services that span multiple devices and applications.</p><p id="p-0114" num="0113">Furthermore, CMDB <b>500</b> may include entries regarding dependencies and relationships between configuration items. More specifically, an application that is executing on a particular server device, as well as the services that rely on this application, may be represented as such in CMDB <b>500</b>. For example, suppose that a database application is executing on a server device, and that this database application is used by a new employee onboarding service as well as a payroll service. Thus, if the server device is taken out of operation for maintenance, it is clear that the employee onboarding service and payroll service will be impacted. Likewise, the dependencies and relationships between configuration items may be able to represent the services impacted when a particular router fails.</p><p id="p-0115" num="0114">In general, dependencies and relationships between configuration items may be displayed on a web-based interface and represented in a hierarchical fashion. Thus, adding, changing, or removing such dependencies and relationships may be accomplished by way of this interface.</p><p id="p-0116" num="0115">Furthermore, users from managed network <b>300</b> may develop workflows that allow certain coordinated activities to take place across multiple discovered devices. For instance, an IT workflow might allow the user to change the common administrator password to all discovered LINUX&#xae; devices in a single operation.</p><p id="p-0117" num="0116">In order for discovery to take place in the manner described above, proxy servers <b>312</b>, CMDB <b>500</b>, and/or one or more credential stores may be configured with credentials for one or more of the devices to be discovered. Credentials may include any type of information needed in order to access the devices. These may include userid/password pairs, certificates, and so on. In some embodiments, these credentials may be stored in encrypted fields of CMDB <b>500</b>. Proxy servers <b>312</b> may contain the decryption key for the credentials so that proxy servers <b>312</b> can use these credentials to log on to or otherwise access devices being discovered.</p><p id="p-0118" num="0117">The discovery process is depicted as a flow chart in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>. At block <b>520</b>, the task list in the computational instance is populated, for instance, with a range of IP addresses. At block <b>522</b>, the scanning phase takes place. Thus, the proxy servers probe the IP addresses for devices using these IP addresses, and attempt to determine the operating systems that are executing on these devices. At block <b>524</b>, the classification phase takes place. The proxy servers attempt to determine the operating system version of the discovered devices. At block <b>526</b>, the identification phase takes place. The proxy servers attempt to determine the hardware and/or software configuration of the discovered devices. At block <b>528</b>, the exploration phase takes place. The proxy servers attempt to determine the operational state and applications executing on the discovered devices. At block <b>530</b>, further editing of the configuration items representing the discovered devices and applications may take place. This editing may be automated and/or manual in nature.</p><p id="p-0119" num="0118">The blocks represented in <figref idref="DRAWINGS">FIG. <b>5</b>B</figref> are examples. Discovery may be a highly configurable procedure that can have more or fewer phases, and the operations of each phase may vary. In some cases, one or more phases may be customized, or may otherwise deviate from the exemplary descriptions above.</p><p id="p-0120" num="0119">In this manner, a remote network management platform may discover and inventory the hardware, software, and services deployed on and provided by the managed network. As noted above, this data may be stored in a CMDB of the associated computational instance as configuration items. For example, individual hardware components (e.g., computing devices, virtual servers, databases, routers, etc.) may be represented as hardware configuration items, while the applications installed and/or executing thereon may be represented as software configuration items.</p><p id="p-0121" num="0120">The relationship between a software configuration item installed or executing on a hardware configuration item may take various forms, such as &#x201c;is hosted on&#x201d;, &#x201c;runs on&#x201d;, or &#x201c;depends on&#x201d;. Thus, a database application installed on a server device may have the relationship &#x201c;is hosted on&#x201d; with the server device to indicate that the database application is hosted on the server device. In some embodiments, the server device may have a reciprocal relationship of &#x201c;used by&#x201d; with the database application to indicate that the server device is used by the database application. These relationships may be automatically found using the discovery procedures described above, though it is possible to manually set relationships as well.</p><p id="p-0122" num="0121">The relationship between a service and one or more software configuration items may also take various forms. As an example, a web service may include a web server software configuration item and a database application software configuration item, each installed on different hardware configuration items. The web service may have a &#x201c;depends on&#x201d; relationship with both of these software configuration items, while the software configuration items have a &#x201c;used by&#x201d; reciprocal relationship with the web service. Services might not be able to be fully determined by discovery procedures, and instead may rely on service mapping (e.g., probing configuration files and/or carrying out network traffic analysis to determine service level relationships between configuration items) and possibly some extent of manual configuration.</p><p id="p-0123" num="0122">Regardless of how relationship information is obtained, it can be valuable for the operation of a managed network. Notably, IT personnel can quickly determine where certain software applications are deployed, and what configuration items make up a service. This allows for rapid pinpointing of root causes of service outages or degradation. For example, if two different services are suffering from slow response times, the CMDB can be queried (perhaps among other activities) to determine that the root cause is a database application that is used by both services having high processor utilization. Thus, IT personnel can address the database application rather than waste time considering the health and performance of other configuration items that make up the services.</p><heading id="h-0009" level="1">V. GRAPHICAL USER INTERFACE SUPPORT FOR DISPLAYING RELATED INFORMATION</heading><p id="p-0124" num="0123">Tasks, often in the form of workflows or playbooks, have become an important part of enterprise computing. For instance, a workflow may define a sequence, ordering, or directed graph of subtasks that are to be carried out by one or more computers or individuals in order to accomplish an overarching task.</p><p id="p-0125" num="0124">As a simple example, a case workflow can be used to address a problem or request raised by a user. Each case may represent a task assigned to an agent, and may consist of a linear ordering of subtasks that the agent is to perform. In order, these subtasks may be for the agent to: (i) investigate the issue raised, (ii) review details related to the user and/or the services to which the user subscribes, (iii) work on resolving the case, and (iv) close the case when it is resolved.</p><p id="p-0126" num="0125">Many other possible workflows exist with more or fewer subtasks. In some cases, &#x201c;playbooks&#x201d; may be defined that guide the agent through a canonical sequence of subtasks that have been established to address certain types of common issues. Some subtasks of a workflow could be automated and thus performed entirely by computer, while others could involve only human interaction or a combination of human and computer interaction.</p><p id="p-0127" num="0126">Unless context suggests otherwise, the terms &#x201c;task&#x201d;, &#x201c;workflow&#x201d;, and &#x201c;playbook&#x201d; shall be used interchangeably herein. Nonetheless, other terms of art could be used to refer to these items.</p><p id="p-0128" num="0127">Given that execution of workflows can make up a significant portion of the utilization of a remote network management platform, any effort to reduce the impact that workflow execution has on the computing resources of the platform would be welcome. As will be described below, the nature of current graphical user interface designs that support workflows, as well as their underlying database schema, are such that agents have to switch back and forth between web pages or tabs on a web page in order to obtain the information needed to carry out a subtask. Each time the user switches, a further query to a data source (e.g., a database) may be made so that the graphical user interface representing the workflow can be updated. This results in unnecessary additional load being introduced to the remote network management platform.</p><p id="p-0129" num="0128">The embodiments herein provide an improved graphical user interface design and layout, as well as improved database schema techniques. These improvements result in the majority, if not all, relevant information for each subtask being displayed on a single web page. Further, these embodiments are significantly more flexible than previous systems, allowing simplified configuration of displays involving data to be retrieved from data sources beyond just databases. Additionally, while it is assumed for sake of simplicity that the graphical user interfaces herein are implemented as web pages, other implementations may be possible, including other types of web elements, web components, or visual features within a different user interface framework.</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>6</b></figref> depicts a logical hierarchy for a task, its subtasks, and associated data sources. Here, task <b>600</b> may represent a workflow or playbook, and may be comprised of subtasks <b>602</b>A, <b>602</b>B, <b>602</b>C, and <b>602</b>D. Further, task <b>600</b> may define an ordering in which subtasks <b>602</b>A, <b>602</b>B, <b>602</b>C, and <b>602</b>D are to be carried out. Such an ordering could be linear, tree-based, and may contain loops and/or repeated subtasks.</p><p id="p-0131" num="0130">For example, task <b>600</b> may specify that the workflow or playbook starts with subtask <b>602</b>A, then proceeds to subtasks <b>602</b>B, <b>602</b>C, and <b>602</b>D in that order. Alternatively, task <b>600</b> may specify that the workflow or playbook starts with subtask <b>602</b>A, and then proceeds to subtask <b>602</b>B followed by subtask <b>602</b>C. From subtask <b>602</b>C, the workflow or playbook may proceed back to subtask <b>602</b>B or on to subtask <b>602</b>D. Other possibilities exist.</p><p id="p-0132" num="0131">Additionally, task <b>600</b> could be associated with one or more data sources. As shown, data sources <b>604</b>A, <b>604</b>B, <b>604</b>C, <b>604</b>D, <b>604</b>E, <b>604</b>F, and <b>604</b>G are associated with task <b>600</b>. These data sources may be one or more tables of a database (e.g., a CMDB or some other database of the remote network management platform), an API of a remote service (e.g., a representational state transfer (REST) API of a third-party service with information relevant to the task), a local file (e.g., a file stored on by the remote network management platform), a machine learning model (e.g., a similarity or clustering model trained based on data related to the task), or some other type of data source. Data from these data sources may be incorporated into web pages of the workflow that are displayed to the agent generally and/or during various subtasks.</p><p id="p-0133" num="0132"><figref idref="DRAWINGS">FIG. <b>7</b></figref> depicts an example tabbed graphical user interface layout based on the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>6</b></figref>. Particularly, this graphical user interface may be a web page that consists of menu pane <b>700</b>, subtask pane <b>702</b>, and tabs <b>704</b>. Each of tabs <b>704</b> may be selected, clicked on, or otherwise actuated to change or control what is displayed in menu pane <b>700</b> and subtask pane <b>702</b> (herein the term &#x201c;selected&#x201d; or variations thereof may refer any mechanism for actuating a graphical user interface component). Typically, only one tab may be selected at any point in time. Likewise, designated items in menu pane <b>700</b> may be selected to further change or control what is displayed in subtask pane <b>702</b>.</p><p id="p-0134" num="0133">As shown, the task tab of tabs <b>704</b> is selected (indicated by thicker lines). This causes display of task <b>600</b> and its subtasks in menu pane <b>700</b>. Of the subtasks, subtask <b>602</b>B is selected (indicated by thicker lines). This causes display of details of subtask <b>602</b>B in subtask pane <b>702</b>. These details may include, for example, text and image displays, text input boxes and/or drop-drop menus that the agent is expected to use when carrying out subtask <b>602</b>B.</p><p id="p-0135" num="0134">When the agent selects a different tab, such as the tab for data source <b>604</b>D as an example, menu pane <b>700</b> and subtask pane <b>702</b> be reloaded with information related to this data source. Thus, each time a tab is selected, the associated data source may be queried one or more times to obtain this information, and then the information is formulated into a web page for display to the agent.</p><p id="p-0136" num="0135"><figref idref="DRAWINGS">FIGS. <b>8</b>A and <b>8</b>B</figref> provide a more concrete example of the operation of such a graphical user interface, and its corresponding limitations. Graphical user interface <b>800</b> in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> and graphical user interface <b>810</b> in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> depict a version of a possible web page implementation of the graphical user interface layout depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>.</p><p id="p-0137" num="0136">Particularly, <figref idref="DRAWINGS">FIGS. <b>8</b>A and <b>8</b>B</figref> show specific data sources for tabs <b>704</b>. The tabs shown in <figref idref="DRAWINGS">FIGS. <b>8</b>A and <b>8</b>B</figref> has a one-to-one mapping with the tabs shown in <figref idref="DRAWINGS">FIG. <b>7</b></figref>. Thus, the playbook tab maps to the task tab, the emails tab maps to the data source <b>604</b>A tab, the work orders tab maps to the data source <b>604</b>B tab, the SLAs tab maps to the data source <b>604</b>C tab, the jobs tab maps to the data source <b>604</b>D tab, the interactions tab maps to the data source <b>604</b>E tab, the details tab maps to the data source <b>604</b>F tab, and the other tab maps to the data source <b>604</b>G tab.</p><p id="p-0138" num="0137">The &#x201c;playbook&#x201d; tab of tabs <b>704</b> is shown as having been selected in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref>. This playbook consists of subtasks of &#x201c;investigate&#x201d;, &#x201c;review details&#x201d;, &#x201c;work in progress&#x201d;, and &#x201c;resolve and close&#x201d;, which are displayed in a selectable menu in menu pane <b>700</b>. Further, the &#x201c;review details&#x201d; subtask is also shown as having been selected in menu pane <b>700</b>. Thus, subtask pane <b>702</b> displays information detailing this subtask (these details are not shown in <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> for purposes of simplicity).</p><p id="p-0139" num="0138">Other tabs of tabs <b>704</b> refer to data sources that contain information that is deemed to be relevant to the current task. For example, there are two related service level agreements (SLAs), three jobs, and one email, as indicated in tabs <b>704</b>. During the course of the agent carrying out the review details subtask, some of this related information may be required by or at least helpful to the agent. However, the current graphical user interface layout and underlying logical hierarchy of information (i.e., that of <figref idref="DRAWINGS">FIG. <b>6</b></figref>) does not indicate which tabs contain information that is relevant to each specific subtask.</p><p id="p-0140" num="0139">For example, information from the data source associated with the SLAs tab may be relevant to the &#x201c;review details&#x201d; subtask, while information from the jobs and email data sources might not be relevant. Likewise, information from the data source associated with the emails and work orders tabs may be relevant to the &#x201c;investigate&#x201d; subtask, while information from the SLAs and jobs data sources might not be relevant.</p><p id="p-0141" num="0140">However, the arrangement of information in the logical hierarchy does not indicate the relevance of information in certain data sources to specific subtasks. As a consequence, the graphical user interface may provide information from the data sources, respectively in tabs <b>704</b>, that is relevant to the task in general. Thus, in order to access information that is relevant to a specific subtask, the agent may have to switch between multiple tabs while carrying out the subtask.</p><p id="p-0142" num="0141">To that point, <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> depicts the web page implementation from <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> as graphical user interface <b>810</b>. In <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, the SLAs tab of tabs <b>704</b> has been selected. This selection caused menu pane <b>700</b> to display an SLA list consisting of SLA 1 and SLA 2 (the two SLAs indicated in the SLAs tab). Of these, SLA 1 has been selected, which caused display of information related to SLA 1 in subtask pane <b>702</b>. While not shown in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> for purposes of simplicity, this information may include static data as well as data retrieved from a data source.</p><p id="p-0143" num="0142">Notably, the information related to the &#x201c;review details&#x201d; subtask is no longer shown when the SLA tab is selected. This may cause the agent to lose the context of the subtask, resulting in the agent then selecting the playbook tab once again and navigating to the &#x201c;review details&#x201d; subtask. In some situations, the agent may switch back and forth between the SLAs and playbook tabs several times in order to double check information respectively appearing on these tabs. In other situations, the agent may switch between three or four tabs some number of times in order to gather all of the desired information.</p><p id="p-0144" num="0143">A consequence of this behavior is that each time the agent switches to a new tab, a number of queries to the associated data sources may be made. These queries each utilize computational resources (e.g., processor, memory, and/or network capacity) of the data source. Additionally, computational resources of the remote network management platform may be used to formulate the results of the queries into web page data and provide this web page data to the agent's client device. Thus, when this switching can be prevented or discouraged, there will be a performance benefit for the data sources as well as the remote network management platform.</p><p id="p-0145" num="0144">In order to reduce computational resource utilization, an improved logical hierarchy for tasks, subtasks, and their related information is shown in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. Analogous to task <b>600</b>, task <b>900</b> may represent a workflow or playbook that is comprised of subtasks <b>902</b>A, <b>902</b>B, <b>902</b>C, and <b>902</b>D. Further, task <b>900</b> may define an ordering in which subtasks <b>902</b>A, <b>902</b>B, <b>902</b>C, and <b>902</b>D are to be carried out.</p><p id="p-0146" num="0145">Unlike the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>6</b></figref> that associates data sources with the task in general, each subtask is associated with one or more data sources in <figref idref="DRAWINGS">FIG. <b>9</b></figref>. Data from these data sources may be displayed or used as the basis of information displayed to the agent during the associated subtasks.</p><p id="p-0147" num="0146">As shown, subtask <b>902</b>A is associated with data sources <b>904</b>A and <b>904</b>B, subtask <b>902</b>B is associated with data source <b>904</b>C, subtask <b>902</b>C is associated with data sources <b>904</b>D, <b>904</b>E, and <b>904</b>F, and subtask <b>902</b>D is associated with data source <b>904</b>G. As noted, these data sources may be one or more tables of a database, an API of a remote service, a local file, a machine learning model, or some other type of data source.</p><p id="p-0148" num="0147">Some data sources could be used by multiple subtasks. For instance, data sources <b>904</b>C and <b>904</b>E may be the same data source. Further, each subtask may define or otherwise be associated with one or more scripts that are programmed to retrieve specific information from the associated data source(s) and display this information in a particular fashion on a graphical user interface.</p><p id="p-0149" num="0148"><figref idref="DRAWINGS">FIG. <b>10</b></figref> depicts an example tabbed graphical user interface layout based on the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>9</b></figref>. Particularly, this graphical user interface may be a web page that consists of menu pane <b>1000</b>, subtask pane <b>1002</b>, tabs <b>1004</b>, and related information pane <b>1006</b>. Each of tabs <b>1004</b> may be selected to change or control what is displayed in menu pane <b>1000</b>, subtask pane <b>1002</b>, and/or related information pane <b>1006</b>. Likewise, designated items in menu pane <b>1000</b> may be selected to further change or control what is displayed in subtask pane <b>1002</b> and/or related information pane <b>1006</b>.</p><p id="p-0150" num="0149">As shown, the task tab of tabs <b>1004</b> is selected (indicated by thicker lines). This causes display of task <b>900</b> and its subtasks in menu pane <b>1000</b>. Of the subtasks, subtask <b>902</b>B is selected (indicated by thicker lines). This causes display of details of subtask <b>902</b>B in subtask pane <b>1002</b>. These details may include, for example, text and image displays, text input boxes and/or drop-drop menus that the agent is expected to use when carrying out subtask <b>902</b>B. Selection of subtask <b>902</b>B also causes retrieval of information related to subtask <b>902</b>B from its associated data source(s), as well as display of this information in related information pane <b>1006</b>. Notably, the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>9</b></figref> indicates that data source <b>904</b>C stores information relevant to subtask <b>902</b>B. Therefore, related information pane <b>1006</b> may display information retrieved from data source <b>904</b>C.</p><p id="p-0151" num="0150">Advantageously, displaying this related information on the same web page as the details of subtask <b>902</b>B can eliminate the need for the agent to switch back and forth between displaying the task tab and the tab for data source <b>904</b>C. This, in turn, results in a reduced load on the computational resources of data source <b>904</b>C and the remote network management platform.</p><p id="p-0152" num="0151"><figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref> provide a more concrete example of the operation of such a graphical user interface, and its corresponding limitations. Particularly, <b>11</b>A and <b>11</b>B show specific data sources for tabs <b>1004</b>, where appropriate. The tabs shown in <figref idref="DRAWINGS">FIGS. <b>11</b>A and <b>11</b>B</figref> have a one-to-one mapping with the tabs shown in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. Thus, the playbook tab maps to the task tab, the emails tab maps to the data source <b>904</b>A tab, the work orders tab maps to the data source <b>904</b>B tab, the SLAs tab maps to the data source <b>904</b>C tab, the jobs tab maps to the data source <b>904</b>D tab, the interactions tab maps to the data source <b>904</b>E tab, the details tab maps to the data source <b>904</b>F tab, and the other tab maps to the data source <b>904</b>G tab.</p><p id="p-0153" num="0152">Graphical user interface <b>1100</b> in <figref idref="DRAWINGS">FIG. <b>11</b>A</figref> and graphical user interface <b>1110</b> in <figref idref="DRAWINGS">FIG. <b>11</b>B</figref> depict a version of a possible web page implementation of the graphical user interface layout depicted in <figref idref="DRAWINGS">FIG. <b>10</b></figref>. Particularly, graphical user interface <b>1100</b> shows the &#x201c;playbook&#x201d; tab of tabs <b>1004</b> as having been selected. As shown in menu pane <b>1000</b> of <figref idref="DRAWINGS">FIG. <b>11</b>A</figref>, this playbook consists of subtasks of &#x201c;investigate&#x201d;, &#x201c;review details&#x201d;, &#x201c;work in progress&#x201d;, and &#x201c;resolve and close&#x201d;. Further, the &#x201c;review details&#x201d; subtask is also shown as having been selected in menu pane <b>1000</b>. Thus, subtask pane <b>1002</b> displays the details of this subtask.</p><p id="p-0154" num="0153">Notably, related information pane <b>1006</b> displays information from SLA 1 and SLA 2 of the SLAs. This information is displayed because the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>9</b></figref> indicates that subtask <b>902</b>B (here, implemented as the &#x201c;review details&#x201d; subtask) is related to data source <b>904</b>C (here, implemented as the SLAs data source). In a similar fashion, when the &#x201c;investigate&#x201d; subtask is selected in menu pane <b>1000</b>, related information pane <b>1006</b> may display information from emails and work orders. This information would be displayed because the logical hierarchy of <figref idref="DRAWINGS">FIG. <b>9</b></figref> indicates that subtask <b>902</b>A (here, implemented as the &#x201c;investigate&#x201d; subtask) is related to data sources <b>904</b>A (here, implemented as the emails data source) and <b>904</b>B (here, implemented as the work orders data source).</p><p id="p-0155" num="0154">The information displayed in related information pane <b>1006</b> is formatted as cards (e.g., rectangular objects, one per unit of information), but other graphical user interface elements could be used. For example, this information could appear in a list or a menu as just two possibilities.</p><p id="p-0156" num="0155">This arrangement of related information provides the agent with what he or she is most likely to need during each subtask, all on one web page. Further, the exact format and presentation of the related information can be configured by way of Boolean logic, arithmetic operations, and/or script logic. This flexibility enables the customizing of how and what information is displayed in related information pane <b>1006</b>. Moreover, as discussed above, the providing of the information in a single web page results in less overall resource utilization on the remote network management platform and related computing devices.</p><p id="p-0157" num="0156">As a further example of the flexibility enabled by this approach, <figref idref="DRAWINGS">FIG. <b>11</b>B</figref> depicts graphical user interface <b>1110</b>. The layout of graphical user interface <b>1110</b> is similar to that of graphical user interface <b>1100</b> with the addition of menu icon <b>1112</b> and menu <b>1114</b>. Selection of menu icon <b>1112</b> may cause menu <b>1114</b> to be displayed in a drop-down fashion.</p><p id="p-0158" num="0157">Menu <b>1114</b> includes a list of related information for some or all of the subtasks. Accordingly, menu <b>1114</b> displays entries for emails, SLAs, and jobs, which are the three data sources with information related to the subtasks shown in menu pane <b>1000</b>. Each of these entries may be selectable, and when selected cause the corresponding information to be displayed in related information pane <b>1006</b>. For example, if the emails entry is selected, related information pane <b>1006</b> may be modified to display emails related to the case being handled by the agent. In some situations, entries in the menu may be related to information that can be obtained from a data source that is not shown in any of tabs <b>1004</b>.</p><p id="p-0159" num="0158">A further example of the improved single-web page layout is shown in <figref idref="DRAWINGS">FIG. <b>12</b></figref>. To that end, graphical user interface <b>1200</b> is an illustrative mock-up of the web page for a different workflow. This web page includes tabs <b>1202</b>, menu pane <b>1204</b>, subtask pane <b>1206</b>, and related information pane <b>1208</b>. Related information pane <b>1208</b> shows the display of menu <b>1210</b>. Unless indicated otherwise, the components of graphical user interface <b>1200</b> are analogous to those of graphical user interface <b>1110</b>.</p><p id="p-0160" num="0159">In order to facilitate these features, a new database schema has been developed. This schema can be implemented as part of one or more databases used by the remote network management platform. Thus, the tables of this schema are new tables that can be added to an existing schema. An example implementation of such a schema is shown in <figref idref="DRAWINGS">FIG. <b>13</b>A</figref></p><p id="p-0161" num="0160">Table <b>1300</b> is a related information definition table that defines the context of a workflow (e.g., the subtask being performed) and provides a reference to a data source as well as an optional definition of a script to execute on the data obtained from the data source. Table <b>1302</b> is a related information context table that defines operations that are to take place on the related information obtained from the data source. For example, the related information may be temporarily stored in yet another database table (not shown) and conditional operations may be applied to selective fields of this table. This allows the related information to be filtered and formatted prior to display on a graphical user interface. Table <b>1304</b> is a relationship table that matches entries from table <b>1300</b> with those of <b>1302</b>.</p><p id="p-0162" num="0161">The fields of table <b>1300</b> can be described as follows. The display label field is a string that is displayed along with the related information. The primary reference table field identifies the table of the task that is being carried out by the agent (e.g., the table that was queried to obtain information about the task in general). The secondary reference table field identifies another table of this task in the case that information about the task is distributed across more than one table. The queries from field is a reference to the table that stores the related information. The script field specifies an optional script to execute on the related information. Such a script may transform the related information, or provide it to a third-party API or a machine learning model, for example. Thus, the combination of the queries from field and the script field allow various types of data sources to be specified.</p><p id="p-0163" num="0162">The fields of table <b>1302</b> can be described as follows. The name field specifies a name for the related information. The applies to field specifies the table in which the related information is temporarily storage after it is retrieved. The condition field specifies a Boolean and/or arithmetic expression to apply to the related information, which may serve to filter this information. The primary reference field specifies the field of the table in the applies to field on to which the condition is applied. The secondary reference field specifies another field of the same table in case the condition requires two operands. The order field is used to determine the ordering of operations when more than one entry from table <b>1302</b> is to be applied to the related information. The active field indicates when the entry is active.</p><p id="p-0164" num="0163">The fields of table <b>1304</b> can be described as follows. The context field refers to an entry in table <b>1302</b>. The definition field refers to an entry in table <b>1300</b>. This structure allows m-to-n relationships to be formed between entries in these two tables. The order field is used to determine the ordering of operations when more than one entry from table <b>1304</b> is to be applied. The active field indicates when the entry is active.</p><p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. <b>13</b>B</figref> provides a more concrete example of how these tables might be populated. Table <b>1310</b> contains the related information definitions, table <b>1312</b> contains the related information context, and table <b>1314</b> matches entries from table <b>1310</b> with those of <b>1312</b>.</p><p id="p-0166" num="0165">In table <b>1310</b>, the display label field specifies that the string &#x201c;SLAs&#x201d; is to be displayed. The primary reference table field identifies the table case[csm_case]. The secondary reference table field is not used. The queries from field identifies the table sla[task_sla]. The script field specifies script <b>1316</b> that is applied to the related information.</p><p id="p-0167" num="0166">In table <b>1312</b>, the name field specifies the string &#x201c;Verify SLA&#x201d;. The applies to field specifies the table sys_activity. The condition field filters the related information to include only items with a valid SLA. The primary reference field specifies the field context.inputrecord. The secondary reference field is not used. The order field is set to 100. The active field indicates that the entry is active.</p><p id="p-0168" num="0167">In table <b>1314</b>, the context field refers to an entry in table <b>1312</b>. The definition field refers to an entry in table <b>1310</b>. The order field is set to 1. The active field indicates that the entry is active.</p><p id="p-0169" num="0168">In some embodiments, scripts that are more complex can be used to reference other data sources. <figref idref="DRAWINGS">FIG. <b>13</b>C</figref> provides an example of such a script. Particularly, script <b>1320</b> uses an XMLHttpRequest object to send and receive a request from a remote REST API. Facilitating scripts in this fashion allows for arbitrary logic to be applied to related information and the results thereof to be displayed in a related information pane of a graphical user interface.</p><heading id="h-0010" level="1">VI. EXAMPLE OPERATIONS</heading><p id="p-0170" num="0169"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a flow chart illustrating an example embodiment. The process illustrated by <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be carried out by a computing device, such as computing device <b>100</b>, and/or a cluster of computing devices, such as server cluster <b>200</b>. However, the process can be carried out by other types of devices or device subsystems. For example, the process could be carried out by a computational instance of a remote network management platform or a portable computer, such as a laptop or a tablet device.</p><p id="p-0171" num="0170">The embodiments of <figref idref="DRAWINGS">FIG. <b>14</b></figref> may be simplified by the removal of any one or more of the features shown therein. Further, these embodiments may be combined with features, aspects, and/or implementations of any of the previous figures or otherwise described herein.</p><p id="p-0172" num="0171">Block <b>1400</b> may involve generating, for display on a client device, a representation of a graphical user interface including a menu pane, a subtask pane, and a related information pane, wherein the menu pane is populated with a plurality of selectable objects representing a plurality of subtasks for a playbook, wherein persistent storage contains a definition of the playbook and the plurality of subtasks, and wherein at least some of the subtasks are respectively associated with corresponding data sources that can provide units of related information.</p><p id="p-0173" num="0172">Block <b>1402</b> may involve transmitting, to the client device, the representation of the graphical user interface.</p><p id="p-0174" num="0173">Block <b>1404</b> may involve receiving, from the client device, an indication that a particular selectable object of the plurality of selectable objects has been selected, wherein the particular selectable object represents a particular subtask of the plurality of subtasks.</p><p id="p-0175" num="0174">Block <b>1406</b> may involve determining that a particular data source corresponding to the particular subtask can be used to provide a particular unit of the related information.</p><p id="p-0176" num="0175">Block <b>1408</b> may involve obtaining, by way of the particular data source, the particular unit of the related information.</p><p id="p-0177" num="0176">Block <b>1410</b> may involve updating the representation of the graphical user interface to include details of the particular subtask in the subtask pane, and to include the particular unit of the related information in the related information pane.</p><p id="p-0178" num="0177">Block <b>1412</b> may involve transmitting, to the client device, the representation of the graphical user interface as updated.</p><p id="p-0179" num="0178">In some embodiments, the persistent storage may include a database, wherein the particular data source is in the database.</p><p id="p-0180" num="0179">In some embodiments, the particular data source is not in the persistent storage.</p><p id="p-0181" num="0180">In some embodiments, the particular data source is a remote service accessible by way of an application programming interface, wherein obtaining the particular unit of the related information comprises: transmitting, to the application programming interface, a request for the particular unit of the related information; and receiving, from the application programming interface, the particular unit of the related information.</p><p id="p-0182" num="0181">In some embodiments, the particular data source is a machine learning model, wherein obtaining the particular unit of the related information comprises: providing, to the machine learning model, input data; and receiving, from the machine learning model, the particular unit of the related information.</p><p id="p-0183" num="0182">In some embodiments, the related information pane includes a menu icon that, when selected, causes appearance of a drop-down menu on the graphical user interface, wherein the drop-down menu contains labels for a plurality of different types of the related information, and wherein selection of any of the labels causes the related information pane to display at least some of the units of related information of the associated type.</p><p id="p-0184" num="0183">Some embodiments may further involve: receiving, from the client device, a second indication that a second particular selectable object of the plurality of selectable objects has been selected, wherein the second particular selectable object represents a second particular subtask of the plurality of subtasks; determining that a second particular data source corresponding to the second particular subtask can be used to provide a second particular unit of the related information; obtaining, by way of the second particular data source, the second particular unit of the related information; updating further the representation of the graphical user interface to include details of the second particular subtask in the subtask pane, and to include the second particular unit of the related information in the related information pane; and transmitting, to the client device, the representation of the graphical user interface as updated further.</p><p id="p-0185" num="0184">In some embodiments, determining that the particular data source can be used to provide the particular unit of the related information comprises reading, from the persistent storage, a configuration for the playbook that maps the subtasks to their corresponding data sources.</p><p id="p-0186" num="0185">In some embodiments, the configuration comprises a subtask definition, and a related information processing definition, wherein the subtask definition specifies the particular subtask and the particular data source, wherein related information processing definition specifies a filter, and wherein obtaining the particular unit of the related information comprises applying the filter to the particular unit of the related information.</p><p id="p-0187" num="0186">In some embodiments, the configuration also comprises a relationship definition that associates the subtask definition with the related information processing definition.</p><p id="p-0188" num="0187">In some embodiments, the subtask definition, the related information processing definition, and the relationship definition are implemented as entries in respective database tables.</p><p id="p-0189" num="0188">In some embodiments, the subtask definition also specifies script logic, wherein obtaining the particular unit of the related information further comprises executing the script logic to formulate the particular unit of the related information.</p><heading id="h-0011" level="1">VII. CLOSING</heading><p id="p-0190" num="0189">The present disclosure is not to be limited in terms of the particular embodiments described in this application, which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its scope, as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure, in addition to those described herein, will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims.</p><p id="p-0191" num="0190">The above detailed description describes various features and operations of the disclosed systems, devices, and methods with reference to the accompanying figures. The example embodiments described herein and in the figures are not meant to be limiting. Other embodiments can be utilized, and other changes can be made, without departing from the scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure, as generally described herein, and illustrated in the figures, can be arranged, substituted, combined, separated, and designed in a wide variety of different configurations.</p><p id="p-0192" num="0191">With respect to any or all of the message flow diagrams, scenarios, and flow charts in the figures and as discussed herein, each step, block, and/or communication can represent a processing of information and/or a transmission of information in accordance with example embodiments. Alternative embodiments are included within the scope of these example embodiments. In these alternative embodiments, for example, operations described as steps, blocks, transmissions, communications, requests, responses, and/or messages can be executed out of order from that shown or discussed, including substantially concurrently or in reverse order, depending on the functionality involved. Further, more or fewer blocks and/or operations can be used with any of the message flow diagrams, scenarios, and flow charts discussed herein, and these message flow diagrams, scenarios, and flow charts can be combined with one another, in part or in whole.</p><p id="p-0193" num="0192">A step or block that represents a processing of information can correspond to circuitry that can be configured to perform the specific logical functions of a herein-described method or technique. Alternatively or additionally, a step or block that represents a processing of information can correspond to a module, a segment, or a portion of program code (including related data). The program code can include one or more instructions executable by a processor for implementing specific logical operations or actions in the method or technique. The program code and/or related data can be stored on any type of computer readable medium such as a storage device including RAM, a disk drive, a solid-state drive, or another storage medium.</p><p id="p-0194" num="0193">The computer readable medium can also include non-transitory computer readable media such as non-transitory computer readable media that store data for short periods of time like register memory and processor cache. The non-transitory computer readable media can further include non-transitory computer readable media that store program code and/or data for longer periods of time. Thus, the non-transitory computer readable media may include secondary or persistent long-term storage, like ROM, optical or magnetic disks, solid-state drives, or compact disc read only memory (CD-ROM), for example. The non-transitory computer readable media can also be any other volatile or non-volatile storage systems. A non-transitory computer readable medium can be considered a computer readable storage medium, for example, or a tangible storage device.</p><p id="p-0195" num="0194">Moreover, a step or block that represents one or more information transmissions can correspond to information transmissions between software and/or hardware modules in the same physical device. However, other information transmissions can be between software modules and/or hardware modules in different physical devices.</p><p id="p-0196" num="0195">The particular arrangements shown in the figures should not be viewed as limiting. It should be understood that other embodiments could include more or less of each element shown in a given figure. Further, some of the illustrated elements can be combined or omitted. Yet further, an example embodiment can include elements that are not illustrated in the figures.</p><p id="p-0197" num="0196">While various aspects and embodiments have been disclosed herein, other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purpose of illustration and are not intended to be limiting, with the true scope being indicated by the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A system comprising:<claim-text>persistent storage containing a definition of a playbook and a plurality of subtasks for the playbook, wherein at least some of the subtasks are respectively associated with corresponding data sources that can provide units of related information; and</claim-text><claim-text>one or more processors configured to:<claim-text>generate, for display on a client device, a representation of a graphical user interface including a menu pane, a subtask pane, and a related information pane, wherein the menu pane is populated with a plurality of selectable objects representing the plurality of subtasks;</claim-text><claim-text>transmit, to the client device, the representation of the graphical user interface;</claim-text><claim-text>receive, from the client device, an indication that a particular selectable object of the plurality of selectable objects has been selected, wherein the particular selectable object represents a particular subtask of the plurality of subtasks;</claim-text><claim-text>determine that a particular data source corresponding to the particular subtask can be used to provide a particular unit of the related information;</claim-text><claim-text>obtain, by way of the particular data source, the particular unit of the related information;</claim-text><claim-text>update the representation of the graphical user interface to include details of the particular subtask in the subtask pane, and to include the particular unit of the related information in the related information pane; and</claim-text><claim-text>transmit, to the client device, the representation of the graphical user interface as updated.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>a database, wherein the particular data source is in the database.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the particular data source is not in the persistent storage.</claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the particular data source is a remote service accessible by way of an application programming interface, and wherein obtaining the particular unit of the related information comprises:<claim-text>transmitting, to the application programming interface, a request for the particular unit of the related information; and</claim-text><claim-text>receiving, from the application programming interface, the particular unit of the related information.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the particular data source is a machine learning model, and wherein obtaining the particular unit of the related information comprises:<claim-text>providing, to the machine learning model, input data; and</claim-text><claim-text>receiving, from the machine learning model, the particular unit of the related information.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the related information pane includes a menu icon that, when selected, causes appearance of a drop-down menu on the graphical user interface, wherein the drop-down menu contains labels for a plurality of different types of the related information, and wherein selection of any of the labels causes the related information pane to display at least some of the units of related information of the associated type.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the one or more processors are further configured to:<claim-text>receive, from the client device, a second indication that a second particular selectable object of the plurality of selectable objects has been selected, wherein the second particular selectable object represents a second particular subtask of the plurality of subtasks;</claim-text><claim-text>determine that a second particular data source corresponding to the second particular subtask can be used to provide a second particular unit of the related information;</claim-text><claim-text>obtain, by way of the second particular data source, the second particular unit of the related information;</claim-text><claim-text>update further the representation of the graphical user interface to include details of the second particular subtask in the subtask pane, and to include the second particular unit of the related information in the related information pane; and</claim-text><claim-text>transmit, to the client device, the representation of the graphical user interface as updated further.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The system of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein determining that the particular data source can be used to provide the particular unit of the related information comprises:<claim-text>reading, from the persistent storage, a configuration for the playbook that maps the subtasks to their corresponding data sources.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The system of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the configuration comprises a subtask definition, and a related information processing definition, wherein the subtask definition specifies the particular subtask and the particular data source, wherein related information processing definition specifies a filter, and wherein obtaining the particular unit of the related information comprises applying the filter to the particular unit of the related information.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the configuration also comprises a relationship definition that associates the subtask definition with the related information processing definition.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The system of <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the subtask definition, the related information processing definition, and the relationship definition are implemented as entries in respective database tables.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The system of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the subtask definition also specifies script logic, and wherein obtaining the particular unit of the related information further comprises executing the script logic to formulate the particular unit of the related information.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A computer-implemented method comprising:<claim-text>generating, for display on a client device, a representation of a graphical user interface including a menu pane, a subtask pane, and a related information pane, wherein the menu pane is populated with a plurality of selectable objects representing a plurality of subtasks for a playbook, wherein persistent storage contains a definition of the playbook and the plurality of subtasks, and wherein at least some of the subtasks are respectively associated with corresponding data sources that can provide units of related information;</claim-text><claim-text>transmitting, to the client device, the representation of the graphical user interface;</claim-text><claim-text>receiving, from the client device, an indication that a particular selectable object of the plurality of selectable objects has been selected, wherein the particular selectable object represents a particular subtask of the plurality of subtasks;</claim-text><claim-text>determining that a particular data source corresponding to the particular subtask can be used to provide a particular unit of the related information;</claim-text><claim-text>obtaining, by way of the particular data source, the particular unit of the related information;</claim-text><claim-text>updating the representation of the graphical user interface to include details of the particular subtask in the subtask pane, and to include the particular unit of the related information in the related information pane; and</claim-text><claim-text>transmitting, to the client device, the representation of the graphical user interface as updated.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The computer-implemented method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the related information pane includes a menu icon that, when selected, causes appearance of a drop-down menu on the graphical user interface, wherein the drop-down menu contains labels for a plurality of different types of the related information, and wherein selection of any of the labels causes the related information pane to display at least some of the units of related information of the associated type.</claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The computer-implemented method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein determining that the particular data source can be used to provide the particular unit of the related information comprises:<claim-text>reading, from the persistent storage, a configuration for the playbook that maps the subtasks to their corresponding data sources.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The computer-implemented method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the configuration comprises a subtask definition, and a related information processing definition, wherein the subtask definition specifies the particular subtask and the particular data source, wherein related information processing definition specifies a filter, and wherein obtaining the particular unit of the related information comprises applying the filter to the particular unit of the related information.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The computer-implemented method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the configuration also comprises a relationship definition that associates the subtask definition with the related information processing definition.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The computer-implemented method of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the subtask definition, the related information processing definition, and the relationship definition are implemented as entries in respective database tables.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The computer-implemented method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the subtask definition also specifies script logic, and wherein obtaining the particular unit of the related information further comprises executing the script logic to formulate the particular unit of the related information.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. An article of manufacture including a non-transitory computer-readable medium, having stored thereon program instructions that, upon execution by a computing system, cause the computing system to perform operations comprising:<claim-text>generating, for display on a client device, a representation of a graphical user interface including a menu pane, a subtask pane, and a related information pane, wherein the menu pane is populated with a plurality of selectable objects representing a plurality of subtasks for a playbook, wherein persistent storage contains a definition of the playbook and the plurality of subtasks, and wherein at least some of the subtasks are respectively associated with corresponding data sources that can provide units of related information;</claim-text><claim-text>transmitting, to the client device, the representation of the graphical user interface;</claim-text><claim-text>receiving, from the client device, an indication that a particular selectable object of the plurality of selectable objects has been selected, wherein the particular selectable object represents a particular subtask of the plurality of subtasks;</claim-text><claim-text>determining that a particular data source corresponding to the particular subtask can be used to provide a particular unit of the related information;</claim-text><claim-text>obtaining, by way of the particular data source, the particular unit of the related information;</claim-text><claim-text>updating the representation of the graphical user interface to include details of the particular subtask in the subtask pane, and to include the particular unit of the related information in the related information pane; and</claim-text><claim-text>transmitting, to the client device, the representation of the graphical user interface as updated.</claim-text></claim-text></claim></claims></us-patent-application>