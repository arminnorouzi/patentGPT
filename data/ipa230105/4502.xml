<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004503A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004503</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17940666</doc-number><date>20220908</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>CN</country><doc-number>PCT/CN2022/107344</doc-number><date>20220722</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>1027</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>12</main-group><subgroup>1027</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>2212</main-group><subgroup>682</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">RATE LIMITING COMMANDS FOR SHARED WORK QUEUES</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Intel Corporation</orgname><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>XUE</last-name><first-name>ZHAN</first-name><address><city>ShangHai</city><country>CN</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>CUI</last-name><first-name>BO</first-name><address><city>ShangHai</city><country>CN</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Intel Corporation</orgname><role>02</role><address><city>Santa Clara</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A memory management unit of a processor may receive a command associated with a process. The command may specify an operation to be performed by another device. The memory management unit may determine a counter value associated with a shared work queue of the another device, an indication the shared work queue to be specified by the command. The memory management unit may determine whether to accept or reject the command based on the counter value and a threshold for the process.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="76.88mm" wi="149.01mm" file="US20230004503A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="243.25mm" wi="178.22mm" orientation="landscape" file="US20230004503A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="230.29mm" wi="170.86mm" orientation="landscape" file="US20230004503A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="159.85mm" wi="136.99mm" orientation="landscape" file="US20230004503A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="197.27mm" wi="157.40mm" orientation="landscape" file="US20230004503A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="218.86mm" wi="166.79mm" orientation="landscape" file="US20230004503A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="239.27mm" wi="160.44mm" file="US20230004503A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="239.27mm" wi="162.73mm" file="US20230004503A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="239.27mm" wi="151.05mm" file="US20230004503A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="107.19mm" wi="157.73mm" file="US20230004503A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">BACKGROUND</heading><p id="p-0002" num="0001">In a multi-tenant computing environment, different software processes can share the same underlying hardware. Each process can submit work to a queue of the device. Furthermore, each process must wait for a response from the device that indicates whether the work was accepted or not accepted. However, when multiple processes submit requests to the same queue concurrently, these requests compete with each other. In some examples, one process may consume the resources of the device to the exclusion of other processes. Therefore, not all processes may be not able to access the device in a fair manner. Doing so may diminish performance and security.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0002" level="1">BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS</heading><p id="p-0003" num="0002">To easily identify the discussion of any particular element or act, the most significant digit or digits in a reference number refer to the figure number in which that element is first introduced.</p><p id="p-0004" num="0003"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an aspect of the subject matter in accordance with one embodiment.</p><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates an aspect of the subject matter in accordance with one embodiment.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an aspect of the subject matter in accordance with one embodiment.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an aspect of the subject matter in accordance with one embodiment.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an aspect of the subject matter in accordance with one embodiment.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a logic flow in accordance with one embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates a logic flow in accordance with one embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates a logic flow in accordance with one embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an aspect of a storage medium in accordance with one embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0003" level="1">DETAILED DESCRIPTION</heading><p id="p-0013" num="0012">Embodiments disclosed herein provide techniques to limit the rate at which software is able to submit work to the shared work queues of computing devices. More specifically, embodiments disclosed herein extend translation lookaside buffer (TLB) entries to include metrics describing the access to shared work queues by different processes. The accesses may be based on instructions that submit a work descriptor via a non-posted write (e.g., a Deferrable Memory Write (DMWr)). One example of such an instruction is an ENQCMD. Based on these metrics and applicable policies (e.g., thresholds, time intervals, etc.), embodiments disclosed herein may abort the execution of an instruction without triggering additional mechanisms to handle cases where the instruction is not accepted by the shared work queue (e.g., due to capacity or other temporal reasons).</p><p id="p-0014" num="0013">For example, embodiments disclosed herein may maintain, in the TLB, a count reflecting the number of instructions submitted by a process to the shared work queue during a time interval. When a process executing on a processor submits an instruction, embodiments disclosed herein intercept the command for address translation via a memory management unit (MMU). The counter in the TLB may be incremented to reflect the submitted instruction. If the counter exceeds a threshold, embodiments disclosed herein abort execution of the instruction and trigger an MMU fault which returns a retry status to the process. If the counter does not exceed the threshold, the execution continues (e.g., the instruction is submitted to the shared work queue and a success response is returned to the process).</p><p id="p-0015" num="0014">Advantageously, embodiments disclosed herein help limit the rate at which processes can submit work to shared work queues of devices. For example, a shared work queue compliant with the Peripheral Component Interconnect-enhanced (PCIe) specification must accept a DMWr within a time limit. When multiple processes issue instructions to the shared work queue, these transactions compete against each other. If processes issue requests maliciously and/or at a sufficiently high rate, other processes may be denied access to the shared work queue (e.g., due to a capacity of the shared work queue, a flow control credit limitation, or a time limitation). A service level agreement (SLA) implemented in the device may guarantee fairness and priority of device resource utilization. However, the SLA cannot resolve the competition and/or denial of service (DOS) issues by itself. Furthermore, the SLA cannot increase the number of DMWrs that are accepted within a time limit. Advantageously, however, embodiments disclosed herein can rebalance the rate at which processes generate non-posted writes targeting the shared work queues. Doing so mitigates the competition between processes, reduces the risk of DOS attacks, and facilitates the acceptance of these writes within the required time limit. Doing so improves the functioning and security of all associated computing devices. Furthermore, by providing configurable thresholds and other policy parameters, different processes may be able to submit non-posted writes at different rates.</p><p id="p-0016" num="0015">With general reference to notations and nomenclature used herein, one or more portions of the detailed description which follows may be presented in terms of program procedures executed on a computer or network of computers. These procedural descriptions and representations are used by those skilled in the art to convey the substances of their work to others skilled in the art. A procedure is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. These operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical, magnetic, or optical signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It proves convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be noted, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to those quantities.</p><p id="p-0017" num="0016">Further, these manipulations are often referred to in terms, such as adding or comparing, which are commonly associated with mental operations performed by a human operator. However, no such capability of a human operator is necessary, or desirable in most cases, in any of the operations described herein that form part of one or more embodiments. Rather, these operations are machine operations. Useful machines for performing operations of various embodiments include digital computers as selectively activated or configured by a computer program stored within that is written in accordance with the teachings herein, and/or include apparatus specially constructed for the required purpose or a digital computer. Various embodiments also relate to apparatus or systems for performing these operations. These apparatuses may be specially constructed for the required purpose. The required structure for a variety of these machines will be apparent from the description given.</p><p id="p-0018" num="0017">Reference is now made to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for the purpose of explanation, numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident, however, that the novel embodiments can be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate a description thereof. The intention is to cover all modification, equivalents, and alternatives within the scope of the claims.</p><p id="p-0019" num="0018">In the Figures and the accompanying description, the designations &#x201c;a&#x201d; and &#x201c;b&#x201d; and &#x201c;c&#x201d; (and similar designators) are intended to be variables representing any positive integer. Thus, for example, if an implementation sets a value for a=5, then a complete set of components <b>123</b> illustrated as components <b>123</b>-<b>1</b> through <b>123</b>-<i>a </i>(or <b>123</b><i>a</i>) may include components <b>123</b>-<b>1</b>, <b>123</b>-<b>2</b>, <b>123</b>-<b>3</b>, <b>123</b>-<b>4</b>, and <b>123</b>-<b>5</b>. The embodiments are not limited in this context.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates an embodiment of a system <b>100</b> that rate limits commands for shared work queues in accordance with various embodiments. System <b>100</b> is a computer system with multiple processor cores such as a distributed computing system, supercomputer, high-performance computing system, computing cluster, mainframe computer, mini-computer, client-server system, personal computer (PC), workstation, server, portable computer, laptop computer, tablet computer, handheld device such as a personal digital assistant (PDA), or other device for processing, displaying, or transmitting information. Similar embodiments may comprise, e.g., entertainment devices such as a portable music player or a portable video player, a smart phone or other cellular phone, a telephone, a digital video camera, a digital still camera, an external storage device, or the like. Further embodiments implement larger scale server configurations. In other embodiments, the system <b>100</b> may have a single processor with one core or more than one processor. Note that the term &#x201c;processor&#x201d; refers to a processor with a single core or a processor package with multiple processor cores. More generally, the computing system <b>100</b> is configured to implement all logic, systems, logic flows, methods, apparatuses, and functionality described herein with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>9</b></figref>.</p><p id="p-0021" num="0020">As used in this application, the terms &#x201c;system&#x201d; and &#x201c;component&#x201d; and &#x201c;module&#x201d; are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution, examples of which are provided by the exemplary system <b>100</b>. For example, a component can be, but is not limited to being, a process running on a processor, a processor, a hard disk drive, multiple storage drives (of optical and/or magnetic storage medium), an object, an executable, a thread of execution, a program, and/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and/or thread of execution, and a component can be localized on one computer and/or distributed between two or more computers. Further, components may be communicatively coupled to each other by various types of communications media to coordinate operations. The coordination may involve the uni-directional or bi-directional exchange of information. For instance, the components may communicate information in the form of signals communicated over the communications media. The information can be implemented as signals allocated to various signal lines. In such allocations, each message is a signal. Further embodiments, however, may alternatively employ data messages. Such data messages may be sent across various connections. Exemplary connections include parallel interfaces, serial interfaces, and bus interfaces.</p><p id="p-0022" num="0021">As shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, system <b>100</b> comprises a motherboard or system-on-chip (SoC) <b>102</b> for mounting platform components. Motherboard or system-on-chip (SoC) <b>102</b> is a point-to-point (P2P) interconnect platform that includes a first processor <b>104</b> and a second processor <b>106</b> coupled via a point-to-point interconnect <b>172</b> such as an Ultra Path Interconnect (UPI). In other embodiments, the system <b>100</b> may be of another bus architecture, such as a multi-drop bus. Furthermore, each of processor <b>104</b> and processor <b>106</b> may be processor packages with multiple processor cores including core(s) <b>108</b> and core(s) <b>110</b>, respectively. While the system <b>100</b> is an example of a two-socket (<b>2</b>S) platform, other embodiments may include more than two sockets or one socket. For example, some embodiments may include a four-socket (<b>4</b>S) platform or an eight-socket (<b>8</b>S) platform. Each socket is a mount for a processor and may have a socket identifier. Note that the term platform refers to the motherboard with certain components mounted such as the processor <b>104</b> and chipset <b>134</b>. Some platforms may include additional components and some platforms may only include sockets to mount the processors and/or the chipset. Furthermore, some platforms may not have sockets (e.g. SoC, or the like). Although depicted as a motherboard or SoC <b>102</b>, one or more of the components of the motherboard or SoC <b>102</b> may also be included in a single die package, a multi-chip module (MCM), a multi-die package, a chiplet, a bridge, and/or an interposer. Therefore, embodiments are not limited to a motherboard or a SoC.</p><p id="p-0023" num="0022">The processor <b>104</b> and processor <b>106</b> can be any of various commercially available processors, including without limitation an Intel&#xae; Celeron&#xae;, Core&#xae;, Core (2) Duo&#xae;, Itanium&#xae;, Pentium&#xae;, Xeon&#xae;, and XScale&#xae; processors; AMD&#xae; Athlon&#xae;, Duron&#xae; and Opteron&#xae; processors; ARM&#xae; application, embedded and secure processors; IBM&#xae; and Motorola&#xae; DragonBall&#xae; and PowerPC&#xae; processors; IBM and Sony&#xae; Cell processors; and similar processors. Dual microprocessors, multi-core processors, and other multi-processor architectures may also be employed as the processor <b>104</b> and/or processor <b>106</b>. Additionally, the processor <b>104</b> need not be identical to processor <b>106</b>.</p><p id="p-0024" num="0023">Processor <b>104</b> includes a memory management unit (MMU) <b>120</b> and point-to-point (P2P) interface <b>126</b> and P2P interface <b>130</b>. Similarly, the processor <b>106</b> includes a memory management unit (MMU) <b>122</b> as well as P2P interface <b>128</b> and P2P interface <b>132</b>. MMU <b>120</b> and MMU <b>122</b> couple the processor <b>104</b> and processor <b>106</b>, respectively, to respective memories (e.g., memory <b>116</b> and memory <b>118</b>). Memory <b>116</b> and memory <b>118</b> may be portions of the main memory (e.g., a dynamic random-access memory (DRAM)) for the platform such as double data rate type 3 (DDR3) or type 4 (DDR4) synchronous DRAM (SDRAM). In the present embodiment, the memory <b>116</b> and the memory <b>118</b> locally attach to the respective processors (i.e., processor <b>104</b> and processor <b>106</b>). In other embodiments, the main memory may couple with the processors via a bus and shared memory hub. Processor <b>104</b> includes registers <b>112</b> and processor <b>106</b> includes registers <b>114</b>. Although depicted as being components of the processors <b>104</b>, <b>106</b>, in some embodiments, the MMU <b>120</b> and MMU <b>122</b> may be external to the processors <b>104</b>, <b>106</b>. The MMUs <b>120</b>, <b>122</b> may generally translate a virtual memory address into a physical memory address using paging techniques. A memory controller may translate the physical memory address to an address in memory (e.g., memory <b>116</b>, memory <b>118</b>).</p><p id="p-0025" num="0024">As shown, the MMU <b>120</b> includes a data translation lookaside buffer (TLB) <b>124</b><i>a </i>and MMU <b>122</b> includes a TLB <b>124</b><i>b</i>. Generally, a data TLB stores the most recent translations from virtual memory addresses to physical memory addresses. Therefore, the TLB <b>124</b><i>a </i>stores the most recent translations for processor <b>104</b> while TLB <b>124</b><i>b </i>stores the most recent translations for processor <b>106</b>. Furthermore, the MMU <b>120</b> and MMU <b>122</b> may include a respective page table structure (not pictured) to break physical memory (e.g., memory <b>116</b>, memory <b>118</b>) into a plurality of virtual pages and store all translations from virtual memory addresses to physical memory addresses.</p><p id="p-0026" num="0025">System <b>100</b> includes chipset <b>134</b> coupled to processor <b>104</b> and processor <b>106</b>. Furthermore, chipset <b>134</b> can be coupled to storage device <b>152</b>, for example, via an interface (I/F) <b>140</b>. The I/F <b>140</b> may be, for example, a Peripheral Component Interconnect-enhanced (PCIe) interface, a Compute Express Link&#xae; (CXL) interface, or a Universal Chiplet Interconnect Express (UCIe) interface. Storage device <b>152</b> can store instructions executable by circuitry of system <b>100</b> (e.g., processor <b>104</b>, processor <b>106</b>, GPU <b>150</b>, device <b>156</b>, vision processing unit <b>158</b>, or the like). For example, storage device <b>152</b> can store instructions for the work queue engine <b>206</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, or the like.</p><p id="p-0027" num="0026">Processor <b>104</b> couples to the chipset <b>134</b> via P2P interface <b>130</b> and P2P <b>136</b> while processor <b>106</b> couples to the chipset <b>134</b> via P2P interface <b>132</b> and P2P <b>138</b>. Direct media interface (DMI) <b>178</b> and DMI <b>180</b> may couple the P2P interface <b>130</b> and the P2P <b>136</b> and the P2P interface <b>132</b> and P2P <b>138</b>, respectively. DMI <b>178</b> and DMI <b>180</b> may be a high-speed interconnect that facilitates, e.g., eight Giga Transfers per second (GT/s) such as DMI 3.0. In other embodiments, the processor <b>104</b> and processor <b>106</b> may interconnect via a bus.</p><p id="p-0028" num="0027">The chipset <b>134</b> may comprise a controller hub such as a platform controller hub (PCH). The chipset <b>134</b> may include a system clock to perform clocking functions and include interfaces for an I/O bus such as a universal serial bus (USB), peripheral component interconnects (PCIs), CXL interconnects, UCIe interconnects, interface serial peripheral interconnects (SPIs), integrated interconnects (I2Cs), and the like, to facilitate connection of peripheral devices on the platform. In other embodiments, the chipset <b>134</b> may comprise more than one controller hub such as a chipset with a memory controller hub, a graphics controller hub, and an input/output (I/O) controller hub.</p><p id="p-0029" num="0028">In the depicted example, chipset <b>134</b> couples with a trusted platform module (TPM) <b>146</b> and UEFI, BIOS, FLASH circuitry <b>148</b> via I/F <b>144</b>. The TPM <b>146</b> is a dedicated microcontroller designed to secure hardware by integrating cryptographic keys into devices. The UEFI, BIOS, FLASH circuitry <b>148</b> may provide pre-boot code.</p><p id="p-0030" num="0029">Furthermore, chipset <b>134</b> includes the I/F <b>140</b> to couple chipset <b>134</b> with a high-performance graphics engine, such as, graphics processing circuitry or a graphics processing unit (GPU) <b>150</b>. In other embodiments, the system <b>100</b> may include a flexible display interface (FDI) (not shown) between the processor <b>104</b> and/or the processor <b>106</b> and the chipset <b>134</b>. The FDI interconnects a graphics processor core in one or more of processor <b>104</b> and/or processor <b>106</b> with the chipset <b>134</b>.</p><p id="p-0031" num="0030">Additionally, device <b>156</b> and/or vision processing unit <b>158</b> (VPU) can be coupled to chipset <b>134</b> via I/F <b>140</b>. The device <b>156</b> is representative of any type of peripheral device, such as an accelerator device (e.g., cryptographic accelerator, cryptographic co-processor, an offload engine, etc.) a storage device (e.g., the storage device <b>152</b>), a GPU (e.g., the GPU <b>150</b>), a VPU (e.g., the VPU <b>158</b>), a network interface device, or any other device. For example, the device <b>156</b> may be a USB device, PCI device, PCIe device, CXL device, UCIe device, and/or an SPI device. The device <b>156</b> may include one or more shared work queues <b>182</b>. Generally, a shared work queue <b>182</b> is configured to store descriptors submitted by multiple software entities (e.g., a process, a thread, an application, a virtual machine, a container, a microservice, etc.) that share the device <b>156</b>. The shared work queue shared work queues <b>182</b> may be include one or more registers (not pictured).</p><p id="p-0032" num="0031">For example, the device <b>156</b> may be shared according to the Single Root I/O virtualization (SR-IOV) architecture and/or the Scalable I/O virtualization (S-IOV) architecture. Embodiments are not limited in these contexts. In some embodiments, software uses an instruction to atomically submit the descriptor to the shared work queue <b>182</b> via a non-posted write (e.g., a deferred memory write (DMWr)). One example of an instruction that atomically submits a work descriptor to the shared work queue <b>182</b> is the ENQCMD command or instruction (which may be referred to as &#x201c;ENQCMD&#x201d; herein) supported by the Intel&#xae; Instruction Set Architecture (ISA). However, any instruction having a descriptor that includes indications of the operation to be performed, a source virtual address for the descriptor, a destination virtual address for a device-specific register of the shared work queue <b>182</b>, virtual addresses of parameters, a virtual address of a completion record, and an identifier of an address space of the submitting process is representative of an instruction that atomically submits a work descriptor to the shared work queue <b>182</b>.</p><p id="p-0033" num="0032">Various I/O devices <b>162</b> and display <b>154</b> couple to the bus <b>174</b>, along with a bus bridge <b>160</b> which couples the bus <b>174</b> to a second bus <b>176</b> and an I/F <b>142</b> that connects the bus <b>174</b> with the chipset <b>134</b>. In one embodiment, the second bus <b>176</b> may be a low pin count (LPC) bus. Various devices may couple to the second bus <b>176</b> including, for example, a keyboard <b>164</b>, a mouse <b>166</b> and communication devices <b>168</b>.</p><p id="p-0034" num="0033">Furthermore, an audio I/O <b>170</b> may couple to second bus <b>176</b>. Many of the I/O devices <b>162</b> and communication devices <b>168</b> may reside on the motherboard or system-on-chip (SoC) <b>102</b> while the keyboard <b>164</b> and the mouse <b>166</b> may be add-on peripherals. In other embodiments, some or all the I/O devices <b>162</b> and communication devices <b>168</b> are add-on peripherals and do not reside on the motherboard or system-on-chip (SoC) <b>102</b>.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic <b>200</b> illustrating techniques for rate limiting of instructions that target shared work queues in accordance with various embodiments. As shown, a process <b>202</b> may execute on a processor, such as the processor <b>104</b>. The process <b>202</b> is representative of any type of executable code, such as a thread, an application, a virtual machine, a container, a microservice, etc. As shown, the process <b>202</b> generates an ENQCMD <b>204</b>. As stated, an ENQCMD may include a virtual address of an MMIO shared work queue <b>182</b> (e.g., a register) of the device <b>156</b>. As shown, therefore, the &#x201c;swq_window&#x201d; parameter of ENQCMD <b>204</b> may be a virtual address to the shared work queue <b>182</b> of the device <b>156</b>. The process <b>202</b> may generally issue the ENQCMD <b>204</b> from user space and the processor <b>104</b> may generate the virtual address for the register of the shared work queue <b>182</b>.</p><p id="p-0036" num="0035">The MMU <b>120</b> of processor <b>104</b> may then receive the ENQCMD <b>204</b>. As shown, the MMU <b>120</b> includes a work queue engine <b>206</b> (&#x201c;WQE&#x201d; <b>206</b>), which may be implemented in hardware, software, or a combination of hardware and software. The work queue engine <b>206</b> is generally configured to limit the rate at which a given process <b>202</b> can submit ENQCMDs <b>204</b> to the shared work queue <b>182</b>. The work queue engine <b>206</b> may leverage the TLBs <b>124</b><i>a</i>, which is extended to include metadata describing accesses to the shared work queues <b>182</b>. For example, TLB entry <b>208</b> includes a TLB extension <b>210</b> portion that includes one or more TLB hit counters <b>212</b>. The TLB extension <b>210</b> may further include a bit to indicate whether a translation in the TLB <b>124</b><i>a </i>is associated with a register of a shared work queue <b>182</b> of the device <b>156</b>. The hit counters <b>212</b> may include one or more counters to count the number of ENQCMDs <b>204</b> issued by a given process <b>202</b> within a time interval, a threshold exceeded counter for the process (e.g., whether the ENQCMD counter for the process is exceeded), and a back-off counter indicating a duration of the suppression. In some embodiments, the hit counters <b>212</b> further include a time-to-trigger counter indicating when to apply suppression of ENQCMDs <b>204</b> for a process. The work queue engine <b>206</b> may store threshold values for each of a plurality of different processes (also referred to as an &#x201c;ENQCMD threshold&#x201d;). The ENQCMD threshold values may generally indicate a limit to the number of ENQCMDs a process can submit during a time interval. The ENQCMD threshold values may be based on a SLA. For example, a first process associated with a first client may have a first threshold value, while a second process associated with a second client may have a second threshold value, different than the first threshold value.</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates three example TLB entries, namely TLB entry <b>306</b>, TLB entry <b>308</b>, and TLB entry <b>310</b>. The TLB entries may be in the TLB <b>124</b><i>a </i>and/or the TLB <b>124</b><i>b</i>. For the sake of clarity, the entries are discussed with reference to TLB <b>124</b><i>a</i>. As shown, the TLB <b>124</b><i>a </i>includes an enqueue register (ER) bit <b>302</b> and count bits <b>304</b>. The enqueue register bit <b>302</b> indicates whether a given entry in the TLB <b>124</b><i>a </i>is associated with a register of a shared work queue <b>182</b> of the device <b>156</b>. Because MMIO addresses are allocated at system boot, the addresses associated with the device <b>156</b> and/or the shared work queue <b>182</b> are known. Where applicable (e.g., in TLB entry <b>310</b>), the count bits <b>304</b> include three different values, namely a back-off counter <b>312</b> (e.g., a duration of ENQCMD suppression), a threshold exceeded counter <b>314</b> (e.g., whether the ENQCMD threshold for a process has been exceeded), and a TLB hit counter <b>316</b> reflecting TLB hits for the virtual address (e.g., the virtual address of the shared work queue <b>182</b>). Therefore, TLB entry <b>310</b>, with a &#x201c;1&#x201d; in the enqueue register bit <b>302</b>, indicates that the TLB entry <b>310</b> is associated with an enqueue register (e.g., the shared work queue <b>182</b>). Furthermore, TLB entry <b>310</b>, with values of (1, 1, 3000) in count bits <b>304</b> indicates that the back-off counter <b>312</b> has a value of 1 (e.g., that some time remains on the back-off counter), that the ENQCMD threshold for the process has been exceeded (based on threshold exceeded counter <b>314</b>), and 3000 TLB hits have occurred (based on TLB hit counter <b>316</b>) for the process based on the virtual address of the associated enqueue register (e.g., of the shared work queue <b>182</b>). However, TLB entry <b>306</b> and TLB entry <b>308</b>, having enqueue register bits <b>302</b> set to zero, are not associated with a shared work queue <b>182</b>.</p><p id="p-0038" num="0037">In some embodiments, the count bits <b>304</b> may be pointers to another location that stores the values for the back-off counter <b>312</b>, threshold exceeded counter <b>314</b>, and the TLB hit counter <b>316</b>. For example, the pointer may be to one or more performance monitor counter registers (e.g., the registers <b>512</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>). In some embodiments, the count bits <b>304</b> may be in one more unused reserved (or ignored) bits of a given page table entry (and correspondingly each TLB entry).</p><p id="p-0039" num="0038">Returning to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the work queue engine <b>206</b> may access the TLB <b>124</b><i>a </i>using the virtual address specified in the ENQCMD <b>204</b>. If there is a miss in the TLB <b>124</b><i>a </i>for the virtual address (e.g., there is no translation for the virtual address in the TLB <b>124</b><i>a</i>), the work queue engine <b>206</b> may determine that rate limiting for the process <b>202</b> is not needed. Stated differently, because there is no entry in the TLB <b>124</b><i>a </i>for the virtual address, the process <b>202</b> has not recently issued ENQCMDs targeting the virtual address, and rate limiting is not needed. Instead, the TLB <b>124</b><i>a </i>may be updated with an entry from the page table corresponding to the virtual address and execution of the ENQCMD <b>204</b> may continue.</p><p id="p-0040" num="0039">If there is a hit in the TLB <b>124</b><i>a </i>for the virtual address (e.g., a translation for the virtual address exists in an entry of the TLB <b>124</b><i>a</i>, such as the TLB entry <b>310</b>), the work queue engine <b>206</b> may determine whether the enqueue register bit <b>302</b> is set to 1. For example, there may be a hit in the TLB <b>124</b><i>a </i>for the virtual address specified by ENQCMD <b>204</b> in TLB entry <b>310</b>. Because the enqueue register bit <b>302</b> is set to 1, the work queue engine <b>206</b> determines the ENQCMD <b>204</b> is associated with the shared work queue <b>182</b>. If the back-off counter is equal to 0, the process <b>202</b> is not being rate limited, and the work queue engine <b>206</b> may increment the back-off counter by 1. The execution of the ENQCMD <b>204</b> may continue via with the physical address from the TLB entry <b>310</b> and the DMWr transaction <b>214</b> may be issued to the physical address of the shared work queue <b>182</b>. A success message may then be returned to the process <b>202</b></p><p id="p-0041" num="0040">If, however, the back-off counter is set to 1, the work queue engine <b>206</b> rejects the TLB hit and aborts execution of the ENQCMD <b>204</b>. For example, the work queue engine <b>206</b> may trigger a fault and return a status of &#x201c;retry&#x201d; to the process <b>202</b>. Because the back-off counter in TLB entry <b>310</b> is set to 1, the process <b>202</b> may have exceeded its ENQCMD threshold (e.g., the value of 3000 for the TLB hit counter may exceed the ENQCMD threshold for the process <b>202</b>). Therefore, the work queue engine <b>206</b> may abort execution of the ENQCMD <b>204</b>, trigger a fault, and return a status of retry to the process <b>202</b>.</p><p id="p-0042" num="0041">Furthermore, the work queue engine <b>206</b> may periodically (e.g., at the end and/or beginning of a time interval) analyze the entries in the TLB <b>124</b><i>a</i>. The work queue engine <b>206</b> may identify any entries in the TLB <b>124</b><i>a </i>that have the enqueue register bit <b>302</b> set (e.g., to 1). If the back-off counter <b>312</b> of the entry equals zero, the TLB hit counter <b>316</b> is determined for the current time interval. The TLB hit counter <b>316</b> may then be reset to zero. If the back-off counter <b>312</b> does not equal zero, a timer is restarted, the back-off counter <b>312</b> is decremented by 1, and the TLB hit counter <b>316</b> is reset to zero.</p><p id="p-0043" num="0042">Furthermore, if the TLB hit counter <b>316</b> is greater than or equal to the ENQCMD threshold for the process, the work queue engine <b>206</b> begins rate limiting of ENQCMDs submitted by the process. For example the work queue engine <b>206</b> may increment the threshold exceeded counter <b>314</b> by 1 in the TLB entry. If the TLB hit counter <b>316</b> is less than the ENQCMD threshold for the process, the threshold exceeded counter <b>314</b> is reset to 0 and the timer is restarted.</p><p id="p-0044" num="0043">In some embodiments, the work queue engine <b>206</b> may divide a time-to-trigger value for the process by the sampling interval. If the threshold exceeded counter <b>314</b> is greater than or equal to the value returned by dividing a time-to-trigger value for the process by the sampling interval, the threshold exceeded counter <b>314</b> is reset to zero and the back-off counter <b>312</b> is set by dividing a back-off time for the process and the sampling interval.</p><p id="p-0045" num="0044">Advantageously, because the virtual address of the shared work queue <b>182</b> in the TLB entry <b>310</b> is associated with the virtual address space of the process <b>202</b>, the TLB <b>124</b><i>a </i>may be used to track the number accesses to the shared work queue <b>182</b> by the process <b>202</b>. Any hits for the virtual address can be associated with the process <b>202</b>, and used to limit the rate at which the process <b>202</b> can submit ENQCMDs when the TLB hit counter <b>316</b> exceeds the ENQCMD threshold for the process. Furthermore, different processes have different virtual address spaces, and each virtual address space therefore has a distinct virtual address for the register of the shared work queue <b>182</b>. Therefore, TLB hits can be associated with the respective process based on the virtual address of a given ENQCMD instruction, and the work queue engine <b>206</b> may rate limit each process accordingly. Furthermore, by tuning the parameters (e.g., ENQCMD threshold, time-to-trigger, back-off counter <b>312</b>, etc.), different performance and latency requirements can be applied for different clients.</p><p id="p-0046" num="0045"><figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates a graph <b>402</b> that depicts techniques to limit the rate at which processes issue commands to shared work queues in accordance with various embodiments. As shown, the y-axis of the graph <b>402</b> corresponds to the TLB hit frequency for a given process, which may correspond to the TLB hit counter <b>316</b>. The x-axis of the graph <b>402</b> may correspond to a time interval, where each time interval is a predetermined period of time. Generally, As shown, an ENQCMD threshold <b>404</b> may indicate the ENQCMD threshold for the process.</p><p id="p-0047" num="0046">As stated, the work queue engine <b>206</b> may implement rate limiting when the TLB hit counter <b>316</b> of a process exceeds the threshold <b>404</b>. Therefore, at points <b>406</b> and point <b>408</b>, the ENQCMDs issued by the process are executed and a success message is returned to the process because the TLB hit counter <b>316</b> does not exceed the ENQCMD threshold <b>404</b>. In contrast, at point <b>410</b>, the TLB hit counter <b>316</b> of the process exceeds the ENQCMD threshold <b>404</b>. However, the work queue engine <b>206</b> permits execution of the ENQCMD at point <b>410</b> and returns a status success message because the point <b>410</b> is within the time-to-trigger interval <b>414</b>. The time-to-trigger interval <b>414</b> generally indicates a period of time that the work queue engine <b>206</b> is willing to tolerate a process having a TLB hit counter <b>316</b> that exceeds the ENQCMD threshold. In some embodiments, the time-to-trigger interval <b>414</b> is based on a predetermined number of time intervals (e.g., one time interval, two time intervals, etc.) where the TLB hit counter <b>316</b> exceeds the ENQCMD threshold <b>404</b>. Once the time-to-trigger interval <b>414</b> elapses, the work queue engine <b>206</b> may begin suppressing ENQCMDs.</p><p id="p-0048" num="0047">Therefore, at point <b>412</b> which is after the time-to-trigger interval <b>414</b> elapses, the work queue engine <b>206</b> begins suppression of ENQCMDs submitted by the process. As shown, the work queue engine <b>206</b> may abort execution of the ENQCMD issued at point <b>412</b> and return a status retry message to the issuing process. Furthermore, any additional ENQCMDs issued by the process during the back-off time interval <b>416</b> are similarly rejected by the work queue engine <b>206</b>. The back-off time interval <b>416</b> may be any predetermined number of time intervals (e.g., one time interval, two time intervals, etc.). Because the work queue engine <b>206</b> restricts the execution of ENQCMDs during the back-off time interval <b>416</b>, the TLB hit counter <b>316</b> of the process should subsequently fall below the ENQCMD threshold <b>404</b>, at which point the process may be able to execute ENQCMDs.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates an example of competition between processes for a shared work queue in accordance with various embodiments. As shown, timer <b>506</b><i>a </i>may be associated with processor <b>104</b> and timer <b>506</b><i>b </i>may be associated with processor <b>106</b>. The timers <b>506</b><i>a</i>, <b>506</b><i>b </i>may be implemented in hardware, software, or a combination thereof. The timers <b>506</b><i>a</i>, <b>506</b><i>b </i>may be configured to define the time intervals for the work queue engine <b>206</b>. The timers <b>506</b><i>a</i>, <b>506</b><i>b </i>may be restarted at each new time interval.</p><p id="p-0050" num="0049">As shown, a process <b>502</b><i>a </i>may execute on processor <b>104</b> and a process <b>502</b><i>b </i>may execute on processor <b>106</b>. The process <b>502</b><i>a </i>and process <b>502</b><i>a </i>may be single-threaded and/or multi-threaded processes, and may be associated with any executable code (e.g., a process, a thread, an application, a virtual machine, a container, a microservice, etc.). As shown, process <b>502</b><i>a </i>issues an ENQCMD <b>504</b><i>a </i>while process <b>502</b><i>b </i>issues an ENQCMD <b>504</b><i>b</i>. The MMU <b>120</b> and TLB <b>124</b><i>a </i>of processor <b>104</b> may access ENQCMD <b>504</b><i>a</i>, while MMU <b>122</b> and TLB <b>124</b><i>b </i>of processor <b>106</b> may access ENQCMD <b>504</b><i>b. </i></p><p id="p-0051" num="0050">The work queue engine <b>206</b><i>a </i>of MMU <b>120</b> may index the TLB <b>124</b><i>a </i>based on the virtual address of the ENQCMD <b>504</b><i>a</i>. If there is a hit in the TLB <b>124</b><i>a</i>, the work queue engine <b>206</b><i>a </i>of MMU <b>120</b> may determine whether the enqueue register bit <b>302</b> is set. In the example depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, there is a TLB <b>124</b><i>a </i>hit and the corresponding enqueue register bit <b>302</b> is set. The work queue engine <b>206</b><i>a </i>may then determine the back-off counter <b>312</b>, threshold exceeded counter <b>314</b>, and TLB hit counter <b>316</b> for the corresponding TLB entry in the TLB <b>124</b><i>a</i>. For example, the threshold exceeded counter <b>314</b> of TLB <b>124</b><i>a </i>may indicate that the TLB hit counter <b>316</b> of the process does not exceed the ENQCMD threshold for the process <b>502</b><i>a</i>. Based on the back-off counter <b>312</b>, threshold exceeded counter <b>314</b>, and TLB hit counter <b>316</b>, the work queue engine <b>206</b><i>a </i>may determine to permit execution of the ENQCMD <b>504</b><i>a </i>and return a success message <b>508</b> to the process <b>502</b><i>a</i>. The ENQCMD <b>504</b><i>a </i>may then be sent to the shared work queue <b>182</b> using a non-posted write, and the associated workload may be executed by the device <b>156</b>.</p><p id="p-0052" num="0051">The work queue engine <b>206</b><i>b </i>of MMU <b>122</b> may index the TLB <b>124</b><i>b </i>based on the virtual address of the ENQCMD <b>504</b><i>b</i>. If there is a hit in the TLB <b>124</b><i>b</i>, the work queue engine <b>206</b><i>b </i>of MMU <b>122</b> may determine whether the enqueue register bit <b>302</b> is set. In the example depicted in <figref idref="DRAWINGS">FIG. <b>5</b></figref>, there is a TLB <b>124</b><i>b </i>hit and the corresponding enqueue register bit <b>302</b> is set. The work queue engine <b>206</b><i>b </i>may then determine the back-off counter <b>312</b>, threshold exceeded counter <b>314</b>, and TLB hit counter <b>316</b> for the corresponding TLB entry in the TLB <b>124</b><i>b</i>. Based on the back-off counter <b>312</b>, threshold exceeded counter <b>314</b>, and TLB hit counter <b>316</b> in TLB <b>124</b><i>b</i>, the work queue engine <b>206</b><i>b </i>may determine to abort execution of the ENQCMD <b>504</b><i>a </i>and return a retry message <b>510</b> to the process <b>502</b><i>b</i>. For example, the process <b>502</b><i>b </i>may then wait a predetermined amount of time and resubmit the ENQCMD <b>504</b><i>b. </i></p><p id="p-0053" num="0052">Operations for the disclosed embodiments may be further described with reference to the following figures. Some of the figures may include a logic flow. Although such figures presented herein may include a particular logic flow, it can be appreciated that the logic flow merely provides an example of how the general functionality as described herein can be implemented. Further, a given logic flow does not necessarily have to be executed in the order presented unless otherwise indicated. Moreover, not all acts illustrated in a logic flow may be required in some embodiments. In addition, the given logic flow may be implemented by a hardware element, a software element executed by a processor, or any combination thereof. The embodiments are not limited in this context.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates an embodiment of a logic flow <b>600</b>. The logic flow <b>600</b> may be representative of some or all of the operations executed by one or more embodiments described herein. For example, the logic flow <b>600</b> may include some or all of the operations performed by a background process for periodic rate limiting of instructions that target shared work queues. The embodiments are not limited in this context.</p><p id="p-0055" num="0054">Generally, the logic flow <b>600</b> may be periodically executed as a background process to rate limit ENQCMD instructions submitted by a process (e.g., via the logic flow <b>700</b> depicted in <figref idref="DRAWINGS">FIG. <b>7</b></figref>). As shown, at block <b>602</b> of logic flow <b>600</b>, system software (e.g., an operating system, hypervisor, etc.) may configure a software profile for the shared work queue <b>182</b> for each of a plurality of tenants (or processes). The software profile may include, for example, an ENQCMD threshold <b>404</b> (a threshold number of ENQCMDs a process can submit during a time interval), the time-to-trigger interval <b>414</b>, back-off time interval <b>416</b>, and sampling interval for each process. Furthermore, the physical address of a register for each shared work queue <b>182</b> is mapped to a virtual address space for each process in the software profile. At block <b>604</b>, the software profile (including address mappings) for each process may be stored in the work queue engine <b>206</b> and/or MMUs <b>120</b>, <b>122</b>.</p><p id="p-0056" num="0055">At block <b>606</b>, a timer (e.g., one or more of the timers <b>506</b><i>a</i>, <b>506</b><i>b</i>) are started based on the sampling interval defined at blocks <b>602</b>-<b>604</b>. At block <b>608</b>, the timer expires at the end of a sampling interval (e.g., 1 microsecond, etc.). At block <b>610</b>, the work queue engine <b>206</b> identifies entries in the TLB (e.g., the TLB <b>124</b><i>a</i>, TLB <b>124</b><i>b</i>) for any entries including an enqueue register bit <b>302</b> that is set (e.g., entries corresponding to a register of a shared work queue <b>182</b>). The logic flow <b>600</b> may proceed to block <b>612</b> for each entry identified at block <b>610</b>. At block <b>612</b>, the work queue engine <b>206</b> determines whether the back-off counter <b>312</b> of the TLB entry is not set (e.g., equals zero). If the back off counter is not equal to zero, the logic flow <b>600</b> proceeds to block <b>614</b>. At block <b>614</b>, the work queue engine <b>206</b> resets the TLB hit counter <b>316</b> for the entry, decrements the back-off counter <b>312</b> by 1, and the logic flow <b>600</b> returns to block <b>606</b>.</p><p id="p-0057" num="0056">Returning to block <b>612</b>, if the back-off counter <b>312</b> equals zero, the logic flow <b>600</b> proceeds to block <b>616</b>. At block <b>616</b>, the work queue engine <b>206</b> determines the TLB hit counter <b>316</b> for the TLB entry. At block <b>618</b>, the work queue engine <b>206</b> determines whether the TLB hit counter <b>316</b> is greater than or equal to the ENQCMD threshold <b>404</b> for the process. If the TLB hit counter <b>316</b> is not greater than or equal to the ENQCMD threshold <b>404</b>, the logic flow <b>600</b> proceeds to block <b>620</b>, where the work queue engine <b>206</b> resets the threshold exceeded counter <b>314</b> to zero and the logic flow <b>600</b> returns to block <b>606</b>. If the TLB hit counter <b>316</b> is greater than or equal to the threshold <b>404</b>, the logic flow <b>600</b> proceeds to block <b>622</b>, where the work queue engine <b>206</b> increments the threshold exceeded counter <b>314</b> for the TLB entry.</p><p id="p-0058" num="0057">At block <b>624</b>, the work queue engine <b>206</b> determines whether the threshold exceeded counter <b>314</b> is greater than or equal to a quotient of the time-to-trigger interval <b>414</b> for the process and the sampling interval for the process. If the threshold exceeded counter <b>314</b> is less than the quotient of the time-to-trigger interval <b>414</b> for the process and the sampling interval for the process, the logic flow <b>600</b> returns to block <b>606</b>. If the threshold exceeded counter <b>314</b> is greater than or equal to the quotient of the time-to-trigger interval <b>414</b> for the process and the sampling interval for the process, the logic flow <b>600</b> proceeds to block <b>626</b>, where the work queue engine <b>206</b> begins rate limiting for the process. More specifically, the work queue engine <b>206</b> may reset the threshold exceeded counter <b>314</b> for the process to zero and set the back-off counter <b>312</b> for the process to the back-off time interval <b>416</b> of the process divided by the sampling interval for the process.</p><p id="p-0059" num="0058"><figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates an embodiment of a logic flow <b>700</b>. The logic flow <b>700</b> may be representative of some or all of the operations executed by one or more embodiments described herein. For example, the logic flow <b>700</b> may include some or all of the operations performed for periodic rate limiting of instructions that target shared work queues. The embodiments are not limited in this context.</p><p id="p-0060" num="0059">As shown, at block <b>702</b>, a user space process (e.g., process <b>202</b>, process <b>502</b><i>a</i>, process <b>502</b><i>b</i>, etc.) maps the physical address of a register associated with a shared work queue <b>182</b> to a virtual address in the virtual address space for the process. The mapping may be stored in an entry of the page table of the MMU <b>120</b> or MMU <b>122</b> and the enqueue register bit <b>302</b> for the entry may be set to 1. At block <b>704</b>, the process issues an ENQCMD that specifies a virtual address of a register of a shared work queue <b>182</b>. At block <b>706</b>, the processor <b>104</b> or <b>106</b> on which the process is executing generates the virtual address for the register of the shared work queue specified by the ENQCMD and the virtual address is provided to the work queue engine <b>206</b> and/or the MMU <b>120</b>, <b>122</b>. At block <b>708</b>, the work queue engine <b>206</b> determines whether there is a hit in the TLB (e.g., TLB <b>124</b><i>a</i>, TLB <b>124</b><i>b</i>) for the processor and whether the enqueue register bit <b>302</b> for the entry is set.</p><p id="p-0061" num="0060">If there is no TLB hit (or the enqueue register bit <b>302</b> is not set to 1), the instruction does not target the shared work queue <b>182</b> and a legacy TLB miss procedure is completed at block <b>710</b>. In such embodiments, the TLB may be filled with the entry determined from the page table using the legacy TLB miss procedure (e.g., the TLB <b>124</b><i>a</i>, <b>124</b><i>b </i>is filled with the page table entry returned from the legacy TLB miss procedure). The logic flow <b>700</b> may then proceed to block <b>718</b>.</p><p id="p-0062" num="0061">Returning to block <b>708</b>, if there is a TLB hit and the enqueue register bit <b>302</b> for the entry is set to 1, the logic flow <b>700</b> proceeds to block <b>712</b>, where the work queue engine <b>206</b> determines whether the back-off counter <b>312</b> for the TLB entry identified at block <b>708</b> equals zero. If the back-off counter <b>312</b> does not equal zero, the work queue engine <b>206</b> may abort execution of the ENQCMD at block <b>714</b>, e.g., because the process is being restricted from submitting ENQCMDs. The work queue engine <b>206</b> may therefore reject the TLB hit and generate a fault (e.g., a MMU fault or other translation fault) and a retry status message is returned to the process at block <b>714</b>.</p><p id="p-0063" num="0062">Returning to block <b>712</b>, if the back-off counter <b>312</b> equals zero, the ENQCMD of the process is not being rate limited and the logic flow <b>700</b> proceeds to block <b>716</b>. At block <b>716</b>, the work queue engine <b>206</b> increments the TLB hit counter <b>316</b> for the entry by a predetermined value (e.g., 1). At block <b>718</b>, the execution of the ENQCMD continues based on the physical address of the register of the shared work queue <b>182</b>. For example, a non-posted memory write may be made to the physical address of the register of the shared work queue <b>182</b> to provide the ENQCMD to the shared work queue <b>182</b>. A success message may be returned to the process and the device <b>156</b> may execute one or more operations associated with the ENQCMD.</p><p id="p-0064" num="0063"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates an embodiment of a logic flow <b>800</b>. The logic flow <b>800</b> may be representative of some or all of the operations executed by one or more embodiments described herein. For example, the logic flow <b>800</b> may include some or all of the operations performed for periodic rate limiting of instructions that target shared work queues. The embodiments are not limited in this context.</p><p id="p-0065" num="0064">In block <b>802</b>, a memory management unit (e.g., MMU <b>120</b>, <b>122</b>) of a processor (e.g., processor <b>104</b>, <b>106</b>) receives a command associated with a process, the command to specify an operation to be performed by another device. In block <b>804</b>, the memory management unit determines a counter value associated with a shared work queue of the another device, an indication the shared work queue to be specified by the command. In block <b>806</b>, the memory management unit determines whether to accept or reject the command based on the counter value and a threshold for the process.</p><p id="p-0066" num="0065"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an embodiment of a storage medium <b>900</b>. Storage medium <b>900</b> may comprise any non-transitory computer-readable storage medium or machine-readable storage medium, such as an optical, magnetic, or semiconductor storage medium. In various embodiments, storage medium <b>900</b> may comprise an article of manufacture. In some embodiments, storage medium <b>900</b> may store computer-executable instructions, such as computer-executable instructions to implement one or more of logic flows or operations described herein, such as instructions <b>904</b>, <b>906</b>, and <b>908</b> for logic flows <b>600</b>, <b>700</b>, <b>800</b> of <figref idref="DRAWINGS">FIGS. <b>6</b>-<b>8</b></figref>, respectively. The storage medium <b>900</b> may further store computer-executable instructions <b>902</b> for the work queue engine <b>206</b>. The processor <b>104</b> or processor <b>106</b> may execute any of the instructions in storage medium <b>900</b>. Examples of a computer-readable storage medium or machine-readable storage medium may include any tangible media capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or re-writeable memory, and so forth. Examples of computer-executable instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, object-oriented code, visual code, and the like. The embodiments are not limited in this context.</p><p id="p-0067" num="0066">The components and features of the devices described above may be implemented using any combination of discrete circuitry, application specific integrated circuits (ASICs), logic gates and/or single chip architectures. Further, the features of the devices may be implemented using microcontrollers, programmable logic arrays and/or microprocessors or any combination of the foregoing where suitably appropriate. It is noted that hardware, firmware and/or software elements may be collectively or individually referred to herein as &#x201c;logic&#x201d; or &#x201c;circuit.&#x201d;</p><p id="p-0068" num="0067">It will be appreciated that the exemplary devices shown in the block diagrams described above may represent one functionally descriptive example of many potential implementations. Accordingly, division, omission or inclusion of block functions depicted in the accompanying figures does not infer that the hardware components, circuits, software and/or elements for implementing these functions would necessarily be divided, omitted, or included in embodiments.</p><p id="p-0069" num="0068">At least one computer-readable storage medium may include instructions that, when executed, cause a system to perform any of the computer-implemented methods described herein.</p><p id="p-0070" num="0069">Some embodiments may be described using the expression &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; along with their derivatives. These terms mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification are not necessarily all referring to the same embodiment. Moreover, unless otherwise noted the features described above are recognized to be usable together in any combination. Thus, any features discussed separately may be employed in combination with each other unless it is noted that the features are incompatible with each other.</p><p id="p-0071" num="0070">With general reference to notations and nomenclature used herein, the detailed descriptions herein may be presented in terms of program procedures executed on a computer or network of computers. These procedural descriptions and representations are used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art.</p><p id="p-0072" num="0071">A procedure is here, and generally, conceived to be a self-consistent sequence of operations leading to a desired result. These operations are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical, magnetic or optical signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It proves convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be noted, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to those quantities.</p><p id="p-0073" num="0072">Further, the manipulations performed are often referred to in terms, such as adding or comparing, which are commonly associated with mental operations performed by a human operator. No such capability of a human operator is necessary, or desirable in most cases, in any of the operations described herein, which form part of one or more embodiments. Rather, the operations are machine operations. Useful machines for performing operations of various embodiments include general purpose digital computers or similar devices.</p><p id="p-0074" num="0073">Some embodiments may be described using the expression &#x201c;coupled&#x201d; and &#x201c;connected&#x201d; along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example, some embodiments may be described using the terms &#x201c;connected&#x201d; and/or &#x201c;coupled&#x201d; to indicate that two or more elements are in direct physical or electrical contact with each other. The term &#x201c;coupled,&#x201d; however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other.</p><p id="p-0075" num="0074">Various embodiments also relate to apparatus or systems for performing these operations. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer as selectively activated or reconfigured by a computer program stored in the computer. The procedures presented herein are not inherently related to a particular computer or other apparatus. Various general purpose machines may be used with programs written in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these machines will appear from the description given.</p><p id="p-0076" num="0075">What has been described above includes examples of the disclosed architecture. It is, of course, not possible to describe every conceivable combination of components and/or methodologies, but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly, the novel architecture is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims.</p><p id="p-0077" num="0076">The various elements of the devices as previously described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>6</b></figref> may include various hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, logic devices, components, processors, microprocessors, circuits, processors, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), memory units, logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, software development programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. However, determining whether an embodiment is implemented using hardware elements and/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, heat tolerances, processing cycle budget, input data rates, output data rates, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.</p><p id="p-0078" num="0077">One or more aspects of at least one embodiment may be implemented by representative instructions stored on a machine-readable medium which represents various logic within the processor, which when read by a machine causes the machine to fabricate logic to perform the techniques described herein. Such representations, known as &#x201c;IP cores&#x201d; may be stored on a tangible, machine readable medium and supplied to various customers or manufacturing facilities to load into the fabrication machines that make the logic or processor. Some embodiments may be implemented, for example, using a machine-readable medium or article which may store an instruction or a set of instructions that, if executed by a machine, may cause the machine to perform a method and/or operations in accordance with the embodiments. Such a machine may include, for example, any suitable processing platform, computing platform, computing device, processing device, computing system, processing system, computer, processor, or the like, and may be implemented using any suitable combination of hardware and/or software. The machine-readable medium or article may include, for example, any suitable type of memory unit, memory device, memory article, memory medium, storage device, storage article, storage medium and/or storage unit, for example, memory, removable or non-removable media, erasable or non-erasable media, writeable or re-writeable media, digital or analog media, hard disk, floppy disk, Compact Disk Read Only Memory (CD-ROM), Compact Disk Recordable (CD-R), Compact Disk Rewriteable (CD-RW), optical disk, magnetic media, magneto-optical media, removable memory cards or disks, various types of Digital Versatile Disk (DVD), a tape, a cassette, or the like. The instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, encrypted code, and the like, implemented using any suitable high-level, low-level, object-oriented, visual, compiled and/or interpreted programming language.</p><p id="p-0079" num="0078">It will be appreciated that the exemplary devices shown in the block diagrams described above may represent one functionally descriptive example of many potential implementations. Accordingly, division, omission or inclusion of block functions depicted in the accompanying figures does not infer that the hardware components, circuits, software and/or elements for implementing these functions would necessarily be divided, omitted, or included in embodiments.</p><p id="p-0080" num="0079">At least one computer-readable storage medium may include instructions that, when executed, cause a system to perform any of the computer-implemented methods described herein.</p><p id="p-0081" num="0080">Some embodiments may be described using the expression &#x201c;one embodiment&#x201d; or &#x201c;an embodiment&#x201d; along with their derivatives. These terms mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase &#x201c;in one embodiment&#x201d; in various places in the specification are not necessarily all referring to the same embodiment. Moreover, unless otherwise noted the features described above are recognized to be usable together in any combination. Thus, any features discussed separately may be employed in combination with each other unless it is noted that the features are incompatible with each other.</p><p id="p-0082" num="0081">The following examples pertain to further embodiments, from which numerous permutations and configurations will be apparent.</p><p id="p-0083" num="0082">Example 1 includes a processor, comprising: a processor core; and a memory management unit to comprise circuitry configured to: receive a command associated with a process, the command to specify an operation to be performed by another device; determine a counter value associated with a shared work queue of the another device, an indication the shared work queue to be specified by the command; and determine whether to accept or reject the command based on the counter value and a threshold for the process.</p><p id="p-0084" num="0083">Example 2 includes the subject matter of example 1, the circuitry configured to: determine a back-off counter for the process, wherein the circuitry further determines whether to accept or reject the command based on the back-off counter for the process.</p><p id="p-0085" num="0084">Example 3 includes the subject matter of example 2, the circuitry configured to: determine a threshold exceeded counter for the process, wherein the circuitry further determines whether to accept or reject the command based on the threshold exceeded counter for the process.</p><p id="p-0086" num="0085">Example 4 includes the subject matter of example 3, wherein the back-off counter, the threshold exceeded counter, and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0087" num="0086">Example 5 includes the subject matter of example 4, wherein the entry of the TLB is further to store an enqueue register bit to indicate the command is associated with a shared work queue of the another device.</p><p id="p-0088" num="0087">Example 6 includes the subject matter of example 1, wherein the command is to atomically submit a work descriptor to the another device.</p><p id="p-0089" num="0088">Example 7 includes the subject matter of example 1, wherein the another device comprises a Peripheral Component Interconnect Express (PCIe) device, a Compute Express Link (CXL) device, or a Universal Chiplet Interconnect Express (UCIe) device.</p><p id="p-0090" num="0089">Example 8 includes the subject matter of example 1, wherein the process is associated with one or more of: (i) an application, (ii) a container, (iii) a virtual machine, or (iv) a microservice.</p><p id="p-0091" num="0090">Example 9 includes the subject matter of example 1, the circuitry configured to: reject the command based on a determination that the counter exceeds the threshold; and return, to the process, a retry message.</p><p id="p-0092" num="0091">Example 10 includes the subject matter of example 1, the circuitry configured to: accept the command based on a determination that the counter does not exceed the threshold; submit, based on a non-posted write, the command to a register of a shared work queue of the another device; and return, to the process, a success message.</p><p id="p-0093" num="0092">Example 11 includes the subject matter of example 1, wherein the threshold and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0094" num="0093">Example 12 includes the subject matter of example 11, wherein the command is to specify a virtual address of a register of a shared work queue of the another device, wherein the entry in the TLB is to comprise a mapping of the virtual address to a physical address, wherein the entry in the TLB is to comprise an enqueue register bit to indicate the command is associated with the shared work queue.</p><p id="p-0095" num="0094">Example 13 includes a method, comprising: receiving, by a memory management unit of a processor, a command associated with a process, the command to specify an operation to be performed by another device; determining, by the memory management unit, a counter value associated with a shared work queue of the another device, an indication the shared work queue to be specified by the command; and determining, by the memory management unit, whether to accept or reject the command based on the counter value and a threshold for the process.</p><p id="p-0096" num="0095">Example 14 includes the subject matter of example 13, further comprising: determining, by the memory management unit, a back-off counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the back-off counter for the process.</p><p id="p-0097" num="0096">Example 15 includes the subject matter of example 14, further comprising: determining, by the memory management unit, a threshold exceeded counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the threshold exceeded counter for the process.</p><p id="p-0098" num="0097">Example 16 includes the subject matter of example 15, wherein the back-off counter, the threshold exceeded counter, and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0099" num="0098">Example 17 includes the subject matter of example 16, wherein the entry of the TLB is further to store an enqueue register bit to indicate the command is associated with a shared work queue of the another device.</p><p id="p-0100" num="0099">Example 18 includes the subject matter of example 13, wherein the command is to atomically submit a work descriptor to the another device.</p><p id="p-0101" num="0100">Example 19 includes the subject matter of example 13, wherein the another device comprises a Peripheral Component Interconnect Express (PCIe) device, a Compute Express Link (CXL) device, or a Universal Chiplet Interconnect Express (UCIe) device.</p><p id="p-0102" num="0101">Example 20 includes the subject matter of example 13, wherein the process is associated with one or more of: (i) an application, (ii) a container, (iii) a virtual machine, or (iv) a microservice.</p><p id="p-0103" num="0102">Example 21 includes the subject matter of example 13, further comprising: rejecting, by the memory management unit, the command based on a determination that the counter exceeds the threshold; and returning, by the memory management unit to the process, a retry message.</p><p id="p-0104" num="0103">Example 22 includes the subject matter of example 13, further comprising: accepting, by the memory management unit, the command based on a determination that the counter does not exceed the threshold; submitting, by the memory management unit based on a non-posted write, the command to a register of a shared work queue of the another device; and returning, by the memory management unit to the process, a success message.</p><p id="p-0105" num="0104">Example 23 includes the subject matter of example 13, wherein the threshold and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0106" num="0105">Example 24 includes the subject matter of example 23, wherein the command is to specify a virtual address of a register of a shared work queue of the another device, wherein the entry in the TLB is to comprise a mapping of the virtual address to a physical address, wherein the entry in the TLB is to comprise an enqueue register bit to indicate the command is associated with the shared work queue.</p><p id="p-0107" num="0106">Example 25 includes a non-transitory computer-readable storage medium, the computer-readable storage medium including instructions that when executed by a processor, cause the processor to: receive, by a memory management unit of the processor, a command associated with a process, the command to specify an operation to be performed by another device; determine, by the memory management unit, a counter value associated with a shared work queue of the another device, an indication the shared work queue to be specified by the command; and determine, by the memory management unit, whether to accept or reject the command based on the counter value and a threshold for the process.</p><p id="p-0108" num="0107">Example 26 includes the subject matter of example 25, wherein the instructions further cause the processor to: determine, by the memory management unit, a back-off counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the back-off counter for the process.</p><p id="p-0109" num="0108">Example 27 includes the subject matter of example 26, wherein the instructions further cause the processor to: determine, by the memory management unit, a threshold exceeded counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the threshold exceeded counter for the process.</p><p id="p-0110" num="0109">Example 28 includes the subject matter of example 27, wherein the back-off counter, the threshold exceeded counter, and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0111" num="0110">Example 29 includes the subject matter of example 28, wherein the entry of the TLB is further to store an enqueue register bit to indicate the command is associated with a shared work queue of the another device.</p><p id="p-0112" num="0111">Example 30 includes the subject matter of example 25, wherein the command is to atomically submit a work descriptor to the another device.</p><p id="p-0113" num="0112">Example 31 includes the subject matter of example 25, wherein the another device comprises a Peripheral Component Interconnect Express (PCIe) device, a Compute Express Link (CXL) device, or a Universal Chiplet Interconnect Express (UCIe) device.</p><p id="p-0114" num="0113">Example 32 includes the subject matter of example 25, wherein the process is associated with one or more of: (i) an application, (ii) a container, (iii) a virtual machine, or (iv) a microservice.</p><p id="p-0115" num="0114">Example 33 includes the subject matter of example 25, wherein the instructions further cause the processor to: reject, by the memory management unit, the command based on a determination that the counter exceeds the threshold; and return, by the memory management unit to the process, a retry message.</p><p id="p-0116" num="0115">Example 34 includes the subject matter of example 25, wherein the instructions further cause the processor to: accept, by the memory management unit, the command based on a determination that the counter does not exceed the threshold; submit, by the memory management unit based on a non-posted write, the command to a register of a shared work queue of the another device; and return, by the memory management unit to the process, a success message.</p><p id="p-0117" num="0116">Example 35 includes the subject matter of example 25, wherein the threshold and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0118" num="0117">Example 36 includes the subject matter of example 35, wherein the command is to specify a virtual address of a register of a shared work queue of the another device, wherein the entry in the TLB is to comprise a mapping of the virtual address to a physical address, wherein the entry in the TLB is to comprise an enqueue register bit to indicate the command is associated with the shared work queue.</p><p id="p-0119" num="0118">Example 37 includes an apparatus, comprising: means for receiving a command associated with a process, the command to specify an operation to be performed by another device; means for determining a counter value associated with a shared work queue of the another device, an indication the shared work queue to be specified by the command; and means for determining whether to accept or reject the command based on the counter value and a threshold for the process.</p><p id="p-0120" num="0119">Example 38 includes the subject matter of example 37, further comprising: means for determining a back-off counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the back-off counter for the process.</p><p id="p-0121" num="0120">Example 39 includes the subject matter of example 38, further comprising: means for determining a threshold exceeded counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the threshold exceeded counter for the process.</p><p id="p-0122" num="0121">Example 40 includes the subject matter of example 39, wherein the back-off counter, the threshold exceeded counter, and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of a memory management unit.</p><p id="p-0123" num="0122">Example 41 includes the subject matter of example 40, wherein the entry of the TLB is further to store an enqueue register bit to indicate the command is associated with a shared work queue of the another device.</p><p id="p-0124" num="0123">Example 42 includes the subject matter of example 37, wherein the command is to atomically submit a work descriptor to the another device.</p><p id="p-0125" num="0124">Example 43 includes the subject matter of example 37, wherein the another device comprises a Peripheral Component Interconnect Express (PCIe) device, a Compute Express Link (CXL) device, or a Universal Chiplet Interconnect Express (UCIe) device.</p><p id="p-0126" num="0125">Example 44 includes the subject matter of example 37, wherein the process is associated with one or more of: (i) an application, (ii) a container, (iii) a virtual machine, or (iv) a microservice.</p><p id="p-0127" num="0126">Example 45 includes the subject matter of example 37, further comprising: means for rejecting the command based on a determination that the counter exceeds the threshold; and means for returning, to the process, a retry message.</p><p id="p-0128" num="0127">Example 46 includes the subject matter of example 37, further comprising: means for accepting the command based on a determination that the counter does not exceed the threshold; means for submitting, based on a non-posted write, the command to a register of a shared work queue of the another device; and means for returning, to the process, a success message.</p><p id="p-0129" num="0128">Example 47 includes the subject matter of example 37, wherein the threshold and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</p><p id="p-0130" num="0129">Example 48 includes the subject matter of example 47, wherein the command is to specify a virtual address of a register of a shared work queue of the another device, wherein the entry in the TLB is to comprise a mapping of the virtual address to a physical address, wherein the entry in the TLB is to comprise an enqueue register bit to indicate the command is associated with the shared work queue.</p><p id="p-0131" num="0130">It is emphasized that the Abstract of the Disclosure is provided to allow a reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment. In the appended claims, the terms &#x201c;including&#x201d; and &#x201c;in which&#x201d; are used as the plain-English equivalents of the respective terms &#x201c;comprising&#x201d; and &#x201c;wherein,&#x201d; respectively. Moreover, the terms &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; and so forth, are used merely as labels, and are not intended to impose numerical requirements on their objects.</p><p id="p-0132" num="0131">The foregoing description of example embodiments has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the present disclosure to the precise forms disclosed. Many modifications and variations are possible in light of this disclosure. It is intended that the scope of the present disclosure be limited not by this detailed description, but rather by the claims appended hereto. Future filed applications claiming priority to this application may claim the disclosed subject matter in a different manner, and may generally include any set of one or more limitations as variously disclosed or otherwise demonstrated herein.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A processor, comprising:<claim-text>a processor core; and</claim-text><claim-text>a memory management unit to comprise circuitry configured to:<claim-text>receive a command associated with a process, the command to specify an operation to be performed by another device;</claim-text><claim-text>determine a counter value associated with a shared work queue of the another device, an indication of the shared work queue to be specified by the command; and</claim-text><claim-text>determine whether to accept or reject the command based on the counter value and a threshold for the process.</claim-text></claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the circuitry configured to:<claim-text>determine a back-off counter for the process, wherein the circuitry further determines whether to accept or reject the command based on the back-off counter for the process.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The processor of <claim-ref idref="CLM-00002">claim 2</claim-ref>, the circuitry configured to:<claim-text>determine a threshold exceeded counter for the process, wherein the circuitry further determines whether to accept or reject the command based on the threshold exceeded counter for the process.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The processor of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the back-off counter, the threshold exceeded counter, and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The processor of <claim-ref idref="CLM-00004">claim 4</claim-ref>, wherein the entry of the TLB is further to store an enqueue register bit to indicate the command is associated with the shared work queue of the another device.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the command is to atomically submit a work descriptor to the another device.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the another device comprises a Peripheral Component Interconnect Express (PCIe) device, a Compute Express Link (CXL) device, or a Universal Chiplet Interconnect Express (UCIe) device.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the process is associated with one or more of: (i) an application, (ii) a container, (iii) a virtual machine, or (iv) a microservice.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the circuitry configured to:<claim-text>reject the command based on a determination that the counter exceeds the threshold; and</claim-text><claim-text>return, to the process, a retry message.</claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, the circuitry configured to:<claim-text>accept the command based on a determination that the counter does not exceed the threshold;</claim-text><claim-text>submit, based on a non-posted write, the command to a register of a shared work queue of the another device; and</claim-text><claim-text>return, to the process, a success message.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The processor of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the threshold and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The processor of <claim-ref idref="CLM-00011">claim 11</claim-ref>, wherein the command is to specify a virtual address of a register of a shared work queue of the another device, wherein the entry in the TLB is to comprise a mapping of the virtual address to a physical address, wherein the entry in the TLB is to comprise an enqueue register bit to indicate the command is associated with the shared work queue.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. A method, comprising:<claim-text>receiving, by a memory management unit of a processor, a command associated with a process, the command to specify an operation to be performed by another device;</claim-text><claim-text>determining, by the memory management unit, a counter value associated with a shared work queue of the another device, an indication of the shared work queue to be specified by the command; and</claim-text><claim-text>determining, by the memory management unit, whether to accept or reject the command based on the counter value and a threshold for the process.</claim-text></claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>determining, by the memory management unit, a back-off counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the back-off counter for the process.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The method of <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>determining, by the memory management unit, a threshold exceeded counter for the process, wherein the memory management unit further determines whether to accept or reject the command based on the threshold exceeded counter for the process.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The method of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the back-off counter, the threshold exceeded counter, and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The method of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the entry of the TLB is further to store an enqueue register bit to indicate the command is associated with the shared work queue of the another device.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the command is to atomically submit a work descriptor to the another device.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the another device comprises a Peripheral Component Interconnect Express (PCIe) device, a Compute Express Link (CXL) device, or a Universal Chiplet Interconnect Express (UCIe) device.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the process is associated with one or more of: (i) an application, (ii) a container, (iii) a virtual machine, or (iv) a microservice.</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>rejecting, by the memory management unit, the command based on a determination that the counter exceeds the threshold; and</claim-text><claim-text>returning, by the memory management unit to the process, a retry message.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, further comprising:<claim-text>accepting, by the memory management unit, the command based on a determination that the counter does not exceed the threshold;</claim-text><claim-text>submitting, by the memory management unit based on a non-posted write, the command to a register of a shared work queue of the another device; and</claim-text><claim-text>returning, by the memory management unit to the process, a success message.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The method of <claim-ref idref="CLM-00013">claim 13</claim-ref>, wherein the threshold and the counter value are to be stored in an entry in a translation lookaside buffer (TLB) of the memory management unit.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The method of <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the command is to specify a virtual address of a register of a shared work queue of the another device, wherein the entry in the TLB is to comprise a mapping of the virtual address to a physical address, wherein the entry in the TLB is to comprise an enqueue register bit to indicate the command is associated with the shared work queue.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. A non-transitory computer-readable storage medium, the computer-readable storage medium including instructions that when executed by a processor, cause the processor to:<claim-text>receive, by a memory management unit of the processor, a command associated with a process, the command to specify an operation to be performed by another device;</claim-text><claim-text>determine, by the memory management unit, a counter value associated with a shared work queue of the another device, an indication of the shared work queue to be specified by the command; and</claim-text><claim-text>determine, by the memory management unit, whether to accept or reject the command based on the counter value and a threshold for the process.</claim-text></claim-text></claim></claims></us-patent-application>