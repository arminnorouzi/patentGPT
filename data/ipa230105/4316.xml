<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004317A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004317</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17450409</doc-number><date>20211008</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>22</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0647</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>2237</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0604</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0653</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>065</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">USE OF COPY LOCATION TO SELECTIVELY SET OR SELECTIVELY CLEAR BITS OF METADATA DURING LIVE MIGRATION</invention-title><us-related-documents><us-provisional-application><document-id><country>US</country><doc-number>63217714</doc-number><date>20210701</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Samsung Electronics Co., Ltd.</orgname><address><city>Suwon-si</city><country>KR</country></address></addressbook><residence><country>KR</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Wu</last-name><first-name>Chun-Chu Chen-Jhy Archie</first-name><address><city>San Carlos</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Vikram Singh</last-name><first-name>FNU</first-name><address><city>Fremont</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method for tracking a progress of data copying for a live migration includes transferring, by a storage controller, a first data structure to a live migration server, the first data structure including a first status identifier indicating a location of a source data to be copied from a source storage to a target storage, and selectively generating or selectively clearing, by the storage controller, a second status identifier in or from a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="112.95mm" wi="158.75mm" file="US20230004317A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="227.92mm" wi="162.81mm" orientation="landscape" file="US20230004317A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="224.54mm" wi="165.35mm" orientation="landscape" file="US20230004317A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="224.37mm" wi="165.35mm" orientation="landscape" file="US20230004317A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="229.45mm" wi="173.91mm" orientation="landscape" file="US20230004317A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="108.71mm" wi="87.21mm" orientation="landscape" file="US20230004317A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="226.23mm" wi="73.74mm" orientation="landscape" file="US20230004317A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="225.21mm" wi="150.62mm" orientation="landscape" file="US20230004317A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="225.47mm" wi="136.23mm" orientation="landscape" file="US20230004317A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="216.07mm" wi="125.22mm" orientation="landscape" file="US20230004317A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="222.42mm" wi="74.51mm" orientation="landscape" file="US20230004317A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="226.06mm" wi="171.62mm" orientation="landscape" file="US20230004317A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="219.46mm" wi="162.64mm" file="US20230004317A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="236.39mm" wi="167.98mm" file="US20230004317A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="227.16mm" wi="167.98mm" file="US20230004317A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATION(S)</heading><p id="p-0002" num="0001">The present application claims priority to, and the benefit of, U.S. Provisional Application Ser. No. 63/217,714, filed Jul. 1, 2021, entitled &#x201c;ACTIVE ENTRIES REDUCTION ALGORITHM IN THE DIRTY BITMAP FOR LIVE MIGRATION,&#x201d; the entire content of which is incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">One or more aspects of embodiments according to the present disclosure relate to computer storage, and more particularly to methods, devices, and systems for tracking a progress of data copying for live migration operations.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The present background section is intended to provide context only, and the disclosure of any embodiment or concept in this section does not constitute an admission that said embodiment or concept is prior art.</p><p id="p-0005" num="0004">In the field of computer storage, a live migration (LM) operation (or live migration process) may refer to a copying of data from a source storage to a target storage at a time when the source storage may potentially receive a user data write from a source server (e.g., a normal source server, or a normal source host, that is not a live migration server, or a live migration host). Data structures (e.g., bitmaps) may be used to identify initial data locations within the source storage to be copied to the target storage. A live migration server may use (e.g., refer to) the data structures to perform the live migration process, which may include copying relevant data (e.g., mapped data in an initial state) from the source storage and writing the relevant data to the target storage. Because the copying and writing processes may take a significant amount of time, data structures (e.g., bitmaps) may also be used to track locations of subsequent user data writes that occur at relevant locations of the source storage, after a transferring of the initial data structures to the live migration server. Tracking the locations of the subsequent user data writes may allow the migration server to update the relevant data at the target storage, based on the locations of the user data writes at the source storage. However, such data structures used to track the subsequent data writes (e.g., &#x201c;dirty bitmaps&#x201d;) may include metadata (e.g., one or more &#x201c;dirty&#x201d; bits, or status identifiers) identifying locations of the relevant source data that were not yet copied by the live migration server when the data writes were recorded in the dirty bitmap. Thus, redundant copying may occur when the live migration server performs an initial copying of data from the source storage to the target storage using the initial data structure (e.g., an initial dirty bitmap) and when the live migration server performs later copying using a tracked data structure (e.g., a second or later dirty bitmap), which slows down the live migration process.</p><p id="p-0006" num="0005">Accordingly, there is a need for methods, devices, and systems for efficiently managing the use of bitmaps for updating data associated with a live migration process.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0007" num="0006">Aspects of embodiments of the present disclosure relate to computer storage systems, and provide improvements to the management and tracking of metadata for identifying locations in a source storage having data updates to be copied to a target storage.</p><p id="p-0008" num="0007">According to some embodiments of the present disclosure, there is provided a method for tracking a progress of data copying for a live migration, the method including transferring, by a storage controller, a first data structure to a live migration server, the first data structure including a first status identifier indicating a location of a source data to be copied from a source storage to a target storage, and selectively generating or selectively clearing, by the storage controller, a second status identifier in or from a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</p><p id="p-0009" num="0008">The method may further include monitoring, by the storage controller, the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure, and monitoring, by the storage controller, the first user data write, wherein the selectively generating the second status identifier in the second data structure may include tracking, by the storage controller, a planned but yet to be copied section of the source storage and a planned and copied section of the source storage, based on the first current copying location, and determining whether to generate the second status identifier in the second data structure based on the planned but yet to be copied section.</p><p id="p-0010" num="0009">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a current copy index corresponding to a start address of a continuous index and to an end address of the continuous index, the continuous index being associated with a planned to copy section, the planned to copy section including contiguous storage locations.</p><p id="p-0011" num="0010">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a planned but yet to be copied bitmap and a planned and copied bitmap, the planned but yet to be copied bitmap and the planned and copied bitmap being associated with a planned to copy section, the planned to copy section including one or more distributed storage locations.</p><p id="p-0012" num="0011">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a planned but yet to be copied bitmap associated with a planned to copy section, the planned to copy section including one or more distributed storage locations, and tracking, using the planned but yet to be copied bitmap, the planned and copied section by inverting a bit state used to track the planned but yet to be copied section.</p><p id="p-0013" num="0012">The selectively clearing the second status identifier from the second data structure may include generating the second status identifier in the second data structure based on the first user data write, and clearing, by the storage controller, the second status identifier from the second data structure, based on the second status identifier being associated with the first current copying location of the live migration server.</p><p id="p-0014" num="0013">The method may further include monitoring, by the storage controller, the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure, monitoring, by the storage controller, the first user data write, transferring the second data structure to the live migration server, monitoring, by the storage controller, a second current copying location of the live migration server, the second current copying location corresponding to a copying of the source data based on the second data structure, monitoring, by the storage controller, a second user data write to the source storage, the second user data write occurring during or after the transferring of the second data structure, and selectively generating or selectively clearing, by the storage controller, a third status identifier in or from a third data structure, based on the second current copying location of the live migration server, the third status identifier indicating a location of the second user data write.</p><p id="p-0015" num="0014">According to other embodiments of the present disclosure, there is provided a storage device for tracking a progress of data copying for a live migration, the storage device being configured to transfer a first data structure from a storage controller to a live migration server, the first data structure including a first status identifier indicating a location of a source data to be copied from a source storage to a target storage, and selectively generate or selectively clear, by the storage controller, a second status identifier in or from a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</p><p id="p-0016" num="0015">The storage device may be configured to monitor the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure, and monitor the first user data write, wherein the selectively generating the second status identifier in the second data structure includes tracking a planned but yet to be copied section of the source storage and a planned and copied section of the source storage, based on the first current copying location, and determining whether to generate the second status identifier in the second data structure based on the planned but yet to be copied section.</p><p id="p-0017" num="0016">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a current copy index corresponding to a start address of a continuous index and to an end address of the continuous index, the continuous index being associated with a planned to copy section, the planned to copy section including contiguous storage locations.</p><p id="p-0018" num="0017">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a planned but yet to be copied bitmap and a planned and copied bitmap, the planned but yet to be copied bitmap and the planned and copied bitmap being associated with a planned to copy section, the planned to copy section including one or more distributed storage locations.</p><p id="p-0019" num="0018">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a planned but yet to be copied bitmap associated with a planned to copy section, the planned to copy section including one or more distributed storage locations, and tracking, using the planned but yet to be copied bitmap, the planned and copied section by inverting a bit state used to track the planned but yet to be copied section.</p><p id="p-0020" num="0019">The storage device may be configured to monitor the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure, and monitor the first user data write, wherein the selectively clearing the second status identifier from the second data structure includes generating the second status identifier in the second data structure based on the first user data write, and clearing the second status identifier from the second data structure, based on the second status identifier being associated with the first current copying location of the live migration server.</p><p id="p-0021" num="0020">The storage device may be configured to transfer the second data structure to the live migration server, monitor a second current copying location of the live migration server, the second current copying location corresponding to a copying of the source data based on the second data structure, monitor a second user data write to the source storage, the second user data write occurring during or after the transferring of the second data structure, and selectively generate or selectively clear a third status identifier in or from a third data structure, based on the second current copying location of the live migration server, the third status identifier indicating a location of the second user data write.</p><p id="p-0022" num="0021">According to other embodiments of the present disclosure, there is provided a system for tracking a progress of data copying for a live migration, the system including a live migration server, and a storage device, wherein the storage device is configured to transfer a first data structure from a storage controller to the live migration server, the first data structure including a first status identifier indicating a location of a source data to be copied from a source storage to a target storage, and selectively generate or selectively clear, by the storage controller, a second status identifier in or from a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</p><p id="p-0023" num="0022">The storage device may be configured to monitor the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure, and monitor the first user data write, wherein the selectively generating the second status identifier in the second data structure includes tracking a planned but yet to be copied section of the source storage and a planned and copied section of the source storage, based on the first current copying location, and determining whether to generate the second status identifier in the second data structure based on the planned but yet to be copied section.</p><p id="p-0024" num="0023">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a current copy index corresponding to a start address of a continuous index and to an end address of the continuous index, the continuous index being associated with a planned to copy section, the planned to copy section including contiguous storage locations.</p><p id="p-0025" num="0024">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a planned but yet to be copied bitmap and a planned and copied bitmap, the planned but yet to be copied bitmap and the planned and copied bitmap being associated with a planned to copy section, the planned to copy section including one or more distributed storage locations.</p><p id="p-0026" num="0025">The tracking the planned but yet to be copied section and the planned and copied section may include tracking a planned but yet to be copied bitmap associated with a planned to copy section, the planned to copy section including one or more distributed storage locations, and tracking, using the planned but yet to be copied bitmap, the planned and copied section by inverting a bit state used to track the planned but yet to be copied section.</p><p id="p-0027" num="0026">The storage device may be configured to monitor the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure, and monitor the first user data write, wherein the selectively clearing the second status identifier from the second data structure includes generating the second status identifier in the second data structure based on the first user data write, and clearing, by the storage controller, the second status identifier from the second data structure, based on the second status identifier being associated with the first current copying location of the live migration server.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0028" num="0027">Non-limiting and non-exhaustive embodiments of the present disclosure are described with reference to the following figures, wherein like reference numerals refer to like parts throughout the various views unless otherwise specified.</p><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a system diagram depicting a system for tracking a progress of data copying for a live migration, according to some embodiments of the present disclosure;</p><p id="p-0030" num="0029"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a simplified conceptual diagram depicting a transferring of a passive first data structure and a tracking of user data writes with an active second data structure, according to some embodiments of the present disclosure;</p><p id="p-0031" num="0030"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a simplified conceptual diagram depicting a transferring of a passive version of the second data structure and a tracking of user data writes with an active third data structure, according to some embodiments of the present disclosure;</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>G</figref>, and <figref idref="DRAWINGS">FIG. <b>4</b>H</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>4</b></figref>) are simplified conceptual diagrams depicting details of a bitmap vision diagram for depicting methods for tracking a progress of data copying for a live migration, according to some embodiments of the present disclosure;</p><p id="p-0033" num="0032"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, and <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>5</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using a continuous index associated with contiguous storage locations and a selective generation of second status identifiers in a second data structure, according to some embodiments of the present disclosure;</p><p id="p-0034" num="0033"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>D</figref> and <figref idref="DRAWINGS">FIG. <b>6</b>E</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>6</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using a planned but yet to be copied bitmap and a planned and copied bitmap associated with distributed storage locations, according to some embodiments of the present disclosure;</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>7</b>C</figref>, and <figref idref="DRAWINGS">FIG. <b>7</b>D</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>7</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using the planned but yet to be copied bitmap and the planned and copied bitmap associated with the distributed storage locations of <figref idref="DRAWINGS">FIG. <b>6</b></figref> and a selective generation of second status identifiers in a second data structure, according to some embodiments of the present disclosure;</p><p id="p-0036" num="0035"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, and <figref idref="DRAWINGS">FIG. <b>8</b>C</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>8</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration in a subsequent iteration of data copying using a planned but yet to be copied bitmap and a planned and copied bitmap, corresponding to the second data structure of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and a selective generation of third status identifiers in a third data structure, according to some embodiments of the present disclosure;</p><p id="p-0037" num="0036"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref>, <figref idref="DRAWINGS">FIGS. <b>9</b>B, and <b>9</b>C</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>9</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using the planned but yet to be copied bitmap of <figref idref="DRAWINGS">FIG. <b>8</b></figref> and tracking a planned and copied section by inverting a bit state used to track the planned but yet to be copied section, according to some embodiments of the present disclosure;</p><p id="p-0038" num="0037"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a system diagram including a bitmap vision diagram depicting a system and method for tracking a progress of data copying for a live migration process using a second data structure and a selective clearing of second status identifiers in the second data structure, according to some embodiments of the present disclosure;</p><p id="p-0039" num="0038"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a simplified summary flowchart depicting example operations of methods for tracking a progress of data copying for a live migration process using aspects of methods described above, with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>10</b></figref>, according to some embodiments of the present disclosure;</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart depicting example operations of selective generation methods for tracking a progress of data copying for a live migration process, according to some embodiments of the present disclosure; and</p><p id="p-0041" num="0040"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart depicting example operations of selective clearing methods for tracking a progress of data copying for a live migration process, according to some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><p id="p-0042" num="0041">Corresponding reference characters indicate corresponding components throughout the several views of the drawings. Skilled artisans will appreciate that elements in the figures are illustrated for simplicity and clarity, and have not necessarily been drawn to scale. For example, the dimensions of some of the elements, layers, and regions in the figures may be exaggerated relative to other elements, layers, and regions to help to improve clarity and understanding of various embodiments. Also, common but well-understood elements and parts not related to the description of the embodiments might not be shown in order to facilitate a less obstructed view of these various embodiments and to make the description clear.</p><heading id="h-0006" level="1">DETAILED DESCRIPTION</heading><p id="p-0043" num="0042">Features of the inventive concept and methods of accomplishing the same may be understood more readily by reference to the detailed description of embodiments and the accompanying drawings. Hereinafter, embodiments will be described in more detail with reference to the accompanying drawings. The described embodiments, however, may be embodied in various different forms, and should not be construed as being limited to only the illustrated embodiments herein. Rather, these embodiments are provided as examples so that this disclosure will be thorough and complete, and will fully convey the aspects and features of the present inventive concept to those skilled in the art. Accordingly, processes, elements, and techniques that are not necessary to those having ordinary skill in the art for a complete understanding of the aspects and features of the present inventive concept may not be described.</p><p id="p-0044" num="0043">Unless otherwise noted, like reference numerals, characters, or combinations thereof denote like elements throughout the attached drawings and the written description, and thus, descriptions thereof will not be repeated. Further, parts not related to the description of the embodiments might not be shown to make the description clear. In the drawings, the relative sizes of elements, layers, and regions may be exaggerated for clarity.</p><p id="p-0045" num="0044">In the detailed description, for the purposes of explanation, numerous specific details are set forth to provide a thorough understanding of various embodiments. It is apparent, however, that various embodiments may be practiced without these specific details or with one or more equivalent arrangements.</p><p id="p-0046" num="0045">It will be understood that, although the terms &#x201c;zeroth,&#x201d; &#x201c;first,&#x201d; &#x201c;second,&#x201d; &#x201c;third,&#x201d; etc., may be used herein to describe various elements, components, regions, layers and/or sections, these elements, components, regions, layers and/or sections should not be limited by these terms. These terms are used to distinguish one element, component, region, layer or section from another element, component, region, layer or section. Thus, a first element, component, region, layer or section described below could be termed a second element, component, region, layer or section, without departing from the spirit and scope of the present disclosure.</p><p id="p-0047" num="0046">It will be understood that when an element, layer, region, or component is referred to as being &#x201c;on,&#x201d; &#x201c;connected to,&#x201d; or &#x201c;coupled to&#x201d; another element, layer, region, or component, it can be directly on, connected to, or coupled to the other element, layer, region, or component, or one or more intervening elements, layers, regions, or components may be present. However, &#x201c;directly connected/directly coupled&#x201d; refers to one component directly connecting or coupling another component without an intermediate component. Meanwhile, other expressions describing relationships between components such as &#x201c;between,&#x201d; &#x201c;immediately between&#x201d; or &#x201c;adjacent to&#x201d; and &#x201c;directly adjacent to&#x201d; may be construed similarly. In addition, it will also be understood that when an element or layer is referred to as being &#x201c;between&#x201d; two elements or layers, it can be the only element or layer between the two elements or layers, or one or more intervening elements or layers may also be present.</p><p id="p-0048" num="0047">The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the present disclosure. As used herein, the singular forms &#x201c;a&#x201d; and &#x201c;an&#x201d; are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms &#x201c;comprises,&#x201d; &#x201c;comprising,&#x201d; &#x201c;have,&#x201d; &#x201c;having,&#x201d; &#x201c;includes,&#x201d; and &#x201c;including,&#x201d; when used in this specification, specify the presence of the stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. As used herein, the term &#x201c;and/or&#x201d; includes any and all combinations of one or more of the associated listed items.</p><p id="p-0049" num="0048">As used herein, the term &#x201c;substantially,&#x201d; &#x201c;about,&#x201d; &#x201c;approximately,&#x201d; and similar terms are used as terms of approximation and not as terms of degree, and are intended to account for the inherent deviations in measured or calculated values that would be recognized by those of ordinary skill in the art. &#x201c;About&#x201d; or &#x201c;approximately,&#x201d; as used herein, is inclusive of the stated value and means within an acceptable range of deviation for the particular value as determined by one of ordinary skill in the art, considering the measurement in question and the error associated with measurement of the particular quantity (i.e., the limitations of the measurement system). For example, &#x201c;about&#x201d; may mean within one or more standard deviations, or within &#xb1;30%, 20%, 10%, 5% of the stated value. Further, the use of &#x201c;may&#x201d; when describing embodiments of the present disclosure refers to &#x201c;one or more embodiments of the present disclosure.&#x201d;</p><p id="p-0050" num="0049">When one or more embodiments may be implemented differently, a specific process order may be performed differently from the described order. For example, two consecutively described processes may be performed substantially at the same time or performed in an order opposite to the described order.</p><p id="p-0051" num="0050">Any of the components or any combination of the components described (e.g., in any system diagrams included herein) may be used to perform one or more of the operations of any flow chart included herein. Further, (i) the operations are example operations, and may involve various additional operations not explicitly covered, and (ii) the temporal order of the operations may be varied.</p><p id="p-0052" num="0051">The electronic or electric devices and/or any other relevant devices or components according to embodiments of the present disclosure described herein may be implemented utilizing any suitable hardware, firmware (e.g. an application-specific integrated circuit), software, or a combination of software, firmware, and hardware. For example, the various components of these devices may be formed on one integrated circuit (IC) chip or on separate IC chips. Further, the various components of these devices may be implemented on a flexible printed circuit film, a tape carrier package (TCP), a printed circuit board (PCB), or formed on one substrate.</p><p id="p-0053" num="0052">Further, the various components of these devices may be a process or thread, running on one or more processors, in one or more computing devices, executing computer program instructions and interacting with other system components for performing the various functionalities described herein. The computer program instructions are stored in a memory which may be implemented in a computing device using a standard memory device, such as, for example, a random access memory (RAM). The computer program instructions may also be stored in other non-transitory computer readable media such as, for example, a CD-ROM, flash drive, or the like. Also, a person of skill in the art should recognize that the functionality of various computing devices may be combined or integrated into a single computing device, or the functionality of a particular computing device may be distributed across one or more other computing devices without departing from the spirit and scope of the embodiments of the present disclosure.</p><p id="p-0054" num="0053">Unless otherwise defined, all terms (including technical and scientific terms) used herein have the same meaning as commonly understood by one of ordinary skill in the art to which the present inventive concept belongs. It will be further understood that terms, such as those defined in commonly used dictionaries, should be interpreted as having a meaning that is consistent with their meaning in the context of the relevant art and/or the present specification, and should not be interpreted in an idealized or overly formal sense, unless expressly so defined herein.</p><p id="p-0055" num="0054">As mentioned above, in the field of computer storage, a live migration (LM) operation (or live migration process) may refer to a copying of data from a source storage to a target storage at a time when the source storage may potentially receive a user data write from a source server (e.g., normal source server or host). There may be three operations in a live migration. First, an initial copy may be made of all the in-use entries from a source to a destination. Second, &#x201c;dirty&#x201d; entries that are written during the initial copying of the in-use entries may be tracked and copied to the destination iteratively, to provide updates after the initial copying. Third, the copying may be stopped for a short period of time while the last list of the dirty entries may be copied to the destination and the data provided to the user may be changed over from a source drive to a destination drive. The present disclosure provides improvements for the tracking of dirty entries associated with the second operation.</p><p id="p-0056" num="0055">Some tracking methods may track all written data from a user occurring during the initial copying of in-use entries as dirty entries, in a tracked record (e.g., a data structure), and the tracked record may be used by the live migration server performing the next iteration of copying after the initial copying is finished. For example, such methods may not stop tracking when a written address is in a source storage location that a live migration server is planning to copy but has yet to copy (e.g., some dirty entries may be located in a planned but yet to be copied section of the source storage). Tracking the user data writes to the planned but yet to be copied section in a dirty bitmap may create redundant copying and writing operations of a current copy operation and a next copy operation, thereby, slowing down the live migration process.</p><p id="p-0057" num="0056">A mechanism for tracking a progress of data copying for a live migration according to aspects of embodiments of the present disclosure may: (1) reduce an amount of dirty entries in each iteration of tracking a progress of data copying in dirty bitmaps; (2) reduce a live migration time and power consumption (e.g., by reducing Copy Write operations that consume power); (3) reduce a latency associated with each iteration and an accumulated latency built up with each iteration of copying source data based on dirty bitmaps, by selectively generating or selectively clearing dirty bitmap entries based on a monitoring of a current copying location of a live migration server; and (4) reduce performance disturbance of user writes (e.g., normal user writes) and user reads (e.g., normal user reads) due to reducing the amounts of the copy read and copy write.</p><p id="p-0058" num="0057">As used herein a &#x201c;status identifier&#x201d; (or &#x201c;status identifier bit&#x201d;) is a type of metadata used to indicate whether a given storage location (e.g., a logical block address (LBA), byte address, etc.), of a source storage, includes data to be copied from the source storage to a target storage. For example, a status identifier set to &#x201c;1&#x201d; may indicate that a corresponding storage location includes data to be copied from the source storage to the target storage, whereas a status identifier bit set to &#x201c;0&#x201d; may indicate that a given storage location of the source storage, does not include data to be copied from the source storage to the target storage. Status identifiers may be arranged into a bitmap, where each status identifier in the bitmap corresponds to a different storage location (e.g., LBA, etc.). As used herein, a status identifier may indicate whether a corresponding storage location includes valid data (e.g., mapped data) or whether the corresponding storage location includes &#x201c;dirty&#x201d; data (e.g., changed data). However, the present disclosure is not limited to the above description. For example, in some embodiments, the roles of 1's and 0's may be reversed, or a different type of status identifier, besides 1's and 0's (e.g., a descriptive text), may be used to indicate whether or not a given storage location includes data to be copied from a source storage to a target storage. Furthermore, status identifiers may be arranged in other data structures, besides bitmaps.</p><p id="p-0059" num="0058">As discussed in further detail below, with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> to <b>13</b></figref>, a mechanism for tracking a progress of data copying for a live migration of data from a source storage (including one or more storage devices) to a target storage may allow for the use of fewer computing resources (e.g., memory space, data-bus bandwidth, power, and processing time) for tracking and transferring data associated with bitmaps (or other data structures) during the live migration process. The mechanism may involve tracking, by a storage controller (e.g., a live migration storage controller or live migration controller), user application data writes from a source storage controller (e.g., a normal source storage controller), and tracking a live migration copy read (&#x201c;LMCPR&#x201d;) operation (e.g., process) status (e.g., a current copying location) of a live migration server (e.g., a host associated with managing the live migration process), as the live migration server copies data (e.g., data associated with a namespace for the live migration) from the source storage to the target storage. The live migration storage controller may (1) use the current copying location to track a planned and copied section and a planned but yet to be copied section of the relevant source storage data and (2) create bitmaps for providing information to the live migration server regarding a state of the relevant source storage data at different times throughout the live migration process.</p><p id="p-0060" num="0059">The live migration controller may create a first bitmap to provide metadata (e.g., status identifiers) for a set of storage locations to the live migration server, indicating an initial state of the relevant source storage data to be copied to the target storage. The live migration storage controller may transfer the first bitmap to the live migration server to perform the live migration of the relevant data based on the first bitmap. The live migration storage controller may create a second bitmap (e.g., a bitmap of status identifiers that indicate whether corresponding storage locations are dirty), initially having all &#x201c;0&#x201d; entries (e.g., having all bits cleared to &#x201c;0&#x201d;), to track locations of user application (e.g., normal) data writes from a source storage controller to the source storage. The live migration controller may monitor (e.g., &#x201c;snoop&#x201d;) the user application data writes from the source storage controller that occur while, or after, the first bitmap is transferred to the live migration server (e.g., during the live migration server's copying of metadata associated with the first bitmap and during the live migration server's copying of data from the source storage to the target storage, based on the first bitmap). Based on the monitored user data writes, the live migration controller may mark dirty (e.g., set 1's) to snoop address-associated bitmap entries in the second bitmap (e.g., the live migration controller may cause status identifier bits to be generated in the second bitmap). After the live migration server finishes copying data according to the first bitmap, the second bitmap may be transferred to the live migration server to update target storage data based on the user application data writes to the source storage.</p><p id="p-0061" num="0060">The live migration storage controller may either selectively generate or selectively clear the status identifier bits (e.g., &#x201c;dirty&#x201d; bits for indicating locations of user application data writes) in the second bitmap, based on a current copying location of the live migration server, to reduce an amount of redundant storage data copying. For example, the live migration controller may follow two methodologies (e.g., two separate approaches to reducing dirty bit entries in dirty page bitmaps): (1) disable/prevent tracking (e.g., filter the tracking of or selectively track) locations of user application data writes to the planned but yet to be copied section of the source storage in the second bitmap or (2) track and set status identifier bits (e.g., dirty bits) based on the occurrence of a user data write UDW but, later, clear status identifier bits (e.g., dirty bits) in the second bitmap if they correspond to a current copying location of the live migration server. When tracking but, later, clearing dirty bits, the live migration controller need not reference a planned and copied section or a planned but yet to be copied section. Accordingly, as a result of either methodology (selectively generating or selectively clearing), the second bitmap may: (1) include a reduced amount of dirty entries in the data structures to be transferred to the live migration server and (2) prevent a needless duplicate copying of data, from the source storage, by the live migration server. This may reduce memory usage, reduce bandwidth usage, reduce power consumption, reduce processing time, and reduce disruption of user data writes UDW and user data reads UDR (e.g., in comparison to their normal performance).</p><p id="p-0062" num="0061">In the case of tracking a current copying location of distributed source storage data (e.g., where two or more storage locations corresponding to source data to be copied from the source storage are not immediately adjacent to each other), the live migration controller may track the current copying location of the live migration server by using, for example, two separate bitmaps, (1) a planned and copied bitmap and (2) a planned but yet to be copied bitmap. (As discussed above, although the description refers to bitmaps, the present disclosure is not limited to bitmaps. It should be understood that other data structures may be used for tracking a progress of data copying for a live migration.) Alternatively, the live migration controller may track the current copying status of the live migration server using only a planned but yet to be copied bitmap (instead of also tracking in a planned and copied bitmap) and identifying the relevant copied data, based on an inversion of a bit state used to track the planned but yet to be copied data locations, along with unmapped (not planned to copy) data locations, (e.g., if a &#x201c;1&#x201d; bit is used to track an storage location corresponding to the planned but yet to be copied section, the bit may be flipped, by the live migration storage controller, to &#x201c;0&#x201d; when the source data corresponding to the storage location has been copied).</p><p id="p-0063" num="0062"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a system diagram depicting a system for tracking a progress of data copying for a live migration, according to some embodiments of the present disclosure.</p><p id="p-0064" num="0063">Referring to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the system <b>1</b> may include a source server <b>100</b><i>a </i>(e.g., a normal source server) and a live migration server <b>100</b><i>b</i>. The source server <b>100</b><i>a </i>and the live migration server <b>100</b><i>b </i>may be part of a host system <b>1000</b> (e.g., a source host system). The source server <b>100</b><i>a </i>and the live migration server <b>100</b><i>b </i>may be connected to a source storage device <b>250</b><i>a </i>and a live migration storage device <b>250</b><i>b</i>. The source storage device <b>250</b><i>a </i>and the live migration storage device <b>250</b><i>b </i>may be connected to a source storage <b>200</b>. The live migration server <b>100</b><i>b </i>may also be connected to a target storage device <b>250</b><i>c</i>. The target storage device <b>250</b><i>c </i>may be connected to a target storage <b>300</b>. The source storage <b>200</b> and the target storage <b>300</b> may include storage locations (e.g., LBAs including LBA<b>0</b> to LBA<b>11</b> depicted within the source storage <b>200</b> for a simplified example), which may be associated with physical locations in the source storage <b>200</b> and the target storage <b>300</b> for storing data (e.g., a user's data).</p><p id="p-0065" num="0064">The live migration server <b>100</b><i>b </i>may be connected to a target storage device <b>250</b><i>c </i>(e.g., a live migration target storage device) via a communications link <b>20</b>. The communications link <b>20</b> may include (e.g., may be implemented by way of) a variety of technologies (e.g., peripheral component interconnect express (PCIe), non-volatile memory express (NVMe) over PCIe, NVMe over Fabrics (NVMe-oF), Serial ATA (STATA), Small Computer Storage Interface (SCSI), etc.).</p><p id="p-0066" num="0065">The target storage device <b>250</b><i>c </i>may include a target storage controller <b>210</b><i>c</i>. The target storage <b>300</b> may include a target memory <b>330</b>, which may include (e.g., may be) a non-volatile memory and/or a volatile memory. For example, the target memory <b>330</b> may include a non-volatile memory and/or a memory tier (including volatile and non-volatile memory) and may correspond to non-volatile memories of one or more target storage devices <b>250</b><i>c</i>. The target storage device <b>250</b><i>c </i>may be connected to the target storage <b>300</b> via a storage interface <b>22</b><i>d </i>(e.g., a storage interface serving live migration copy write (LMCPW) operations (e.g., processes)). The storage interface <b>22</b><i>d </i>may include (e.g., may be) a flash interface (e.g., a NAND flash interface) or a remote interface (e.g., implemented by way of Ethernet).</p><p id="p-0067" num="0066">The source server <b>100</b><i>a </i>may serve read and write requests from a user application. For example, a user may use an application (e.g., a word processing application) and send a user data write UDW (e.g., a user application data write) or a user data read UDR (e.g., a user application data read) to the source storage <b>200</b> (e.g., via a source storage device <b>250</b><i>a</i>).</p><p id="p-0068" num="0067">The source server <b>100</b><i>a </i>may be connected to the source storage device <b>250</b><i>a </i>(e.g., a normal source storage device) via a communications link <b>20</b>. The communications link <b>20</b> may include (e.g., may be implemented by way of) a variety of technologies (e.g., peripheral component interconnect express (PCIe), non-volatile memory express (NVMe) over PCIe, NVMe over Fabrics (NVMe-oF), SATA, SCSI, etc.).</p><p id="p-0069" num="0068">The source storage device <b>250</b><i>a </i>may include a source storage controller <b>210</b><i>a </i>and a source controller memory <b>220</b><i>a</i>. The source controller memory <b>220</b><i>a </i>may include (e.g., may be) random access memory (RAM) (e.g., static random access memory (SRAM) or dynamic random access memory (DRAM)). The source storage controller <b>210</b><i>a </i>may include (e.g., may be implemented by way of) embedded logic (e.g., embedded within the source storage device <b>250</b><i>a</i>) for handling requests from a server (e.g., the source server <b>100</b><i>a</i>) to write data to the source storage <b>200</b>. The source storage device <b>250</b><i>a </i>may connect to the source storage <b>200</b> (or a portion of the source storage <b>200</b>). The source storage <b>200</b> may include a source memory <b>230</b>. The source memory <b>230</b> may include (e.g., may be) non-volatile memory and/or volatile memory. For example, the source memory <b>230</b> may include a non-volatile memory and/or a memory tier (including volatile and non-volatile memory) and may connect to one or more source storage devices <b>250</b><i>a</i>. The source storage device <b>250</b><i>a </i>may be connected to the source storage <b>200</b> via a storage interface <b>22</b><i>a </i>(e.g., a storage interface serving UDW operations) and a storage interface <b>22</b><i>b </i>(e.g., a storage interface serving user data read UDR operations). The storage interfaces <b>22</b><i>a </i>and <b>22</b><i>b </i>may include (e.g., may be) a flash interface (e.g., a NAND flash interface) or a remote interface (e.g., implemented by way of Ethernet).</p><p id="p-0070" num="0069">The live migration server <b>100</b><i>b </i>may be a server that is assigned equal, lower, or higher privileges to access data within the system <b>1</b> than the source server <b>100</b><i>a</i>. The live migration server <b>100</b><i>b </i>may be assigned to manage a live migration operation (e.g., a live migration process) for copying data from the source storage <b>200</b> to the target storage <b>300</b>. The live migration server <b>100</b><i>b </i>may include a live migration server memory <b>120</b><i>b</i>. The live migration server memory <b>120</b><i>b </i>may include (e.g., may be) random access memory (RAM) (e.g., static random access memory (SRAM) or dynamic random access memory (DRAM)). The live migration server memory <b>120</b><i>b </i>may be used to store metadata for managing the live migration operation. The live migration server <b>100</b><i>b </i>may be connected to a live migration storage device <b>250</b><i>b </i>via a communications link <b>20</b>. The communications link <b>20</b> may include (e.g., may be implemented by way of) a variety of technologies (e.g., peripheral component interconnect express (PCIe), non-volatile memory express (NVMe) over PCIe, NVMe over Fabrics (NVMe-oF), SATA or SCSI, etc.).</p><p id="p-0071" num="0070">The live migration storage device <b>250</b><i>b </i>may be a storage device that is assigned equal, lower, or higher privileges to access data within the system <b>1</b> than the source storage device <b>250</b><i>a </i>or the target storage device <b>250</b><i>c</i>. The live migration storage device may be assigned to assist in the live migration operation for copying data from the source storage <b>200</b> to the target storage <b>300</b>.</p><p id="p-0072" num="0071">The live migration storage device <b>250</b><i>b </i>may include a live migration controller <b>210</b><i>b </i>and a live migration controller memory <b>220</b><i>b</i>. The live migration controller memory <b>220</b><i>b </i>may include (e.g., may be) random access memory (RAM) (e.g., static random access memory (SRAM) or dynamic random access memory (DRAM)). The live migration controller memory <b>220</b><i>b </i>may be used to store metadata for managing (e.g., monitoring, tracking, and/or directing) the live migration operation. The live migration controller <b>210</b><i>b </i>may include (e.g., may be implemented by way of) embedded logic (e.g., embedded within the live migration storage device <b>250</b><i>b</i>) for assisting the live migration server <b>100</b><i>b </i>in copying data from the source storage <b>200</b> to the target storage <b>300</b>. The live migration storage device <b>250</b><i>b </i>may be connected to the source storage <b>200</b> via a storage interface <b>22</b><i>c </i>(e.g., a storage interface serving LMCPR operations). The storage interface <b>22</b><i>c </i>may include (e.g., may be) a flash interface (e.g., a NAND flash interface) or a remote interface (e.g., implemented by way of Ethernet).</p><p id="p-0073" num="0072">The live migration server <b>100</b><i>b </i>may be connected (e.g., linked) to the source server <b>100</b><i>a </i>via a live migration server to source link <b>10</b>. The live migration server to source link <b>10</b> may be implemented by a variety of technologies depending on whether the system <b>1</b> is implemented via hardware (&#x201c;HW&#x201d;), software (&#x201c;SW&#x201d;), or a combination of hardware and software. For example, it should be understood that the servers and storage devices of the system <b>1</b> may be implemented via HW, SW, or a combination of HW and SW. For example, in some embodiments, the live migration server to source link <b>10</b> may be a physical network connection (e.g., Ethernet). In some embodiments, one or more of the servers (e.g., the source server <b>100</b><i>a </i>or the live migration server <b>100</b><i>b</i>) may be software entities. For example, one or more of the servers may be virtual machines VMs managed by a hypervisor associated with one or more central processing units (CPUs). Likewise, one or more of the storage devices may be implemented by way of HW and/or SW techniques. For example, one or more of the source storage device <b>250</b><i>a</i>, the live migration storage device <b>250</b><i>b</i>, and the target storage device <b>250</b><i>c </i>may be different virtual machines implemented on one or more physical devices. For example, the source storage <b>200</b> and/or the target storage <b>300</b> may be logical partitions of the same physical medium (e.g., the source storage <b>200</b> may be a first namespace and the target storage <b>300</b> may be a second namespace).</p><p id="p-0074" num="0073">The live migration server <b>100</b><i>b </i>and the live migration controller <b>210</b><i>b </i>may coordinate a management or tracking of a live migration process by communicating metadata (e.g., status identifier bits) that are indicative of a status of data corresponding to the storage locations (e.g., LBAs) in the source storage <b>200</b>. For example, the live migration server <b>100</b><i>b </i>may send one or more copy read requests to the live migration controller <b>210</b><i>b </i>in reference to status identifier bits (e.g., 1's) in the live migration server memory <b>120</b><i>b</i>. The live migration controller <b>210</b><i>b </i>may work on mapping to the relevant data (e.g., &#x201c;valid&#x201d; data), within the source storage <b>200</b>, to be copied to the target storage <b>300</b>. The live migration controller <b>210</b><i>b </i>may create a first data structure M<b>1</b> (e.g., a first bitmap) of metadata corresponding to the source storage. For example, at a mapping stage of the live migration process, the first data structure M<b>1</b> may be referred to as a bitmap of mapped pages (e.g., &#x201c;BMP&#x201d; or bitmap mapped page), each mapped page (e.g. LBA) being a logic unit of storage (e.g., a page) in the source storage <b>200</b>. The first data structure M<b>1</b> may be created (e.g., temporarily stored) in the live migration controller memory <b>220</b><i>b. </i></p><p id="p-0075" num="0074">The first data structure M<b>1</b> may include bits (e.g., first status identifier bits), each bit of the first status identifier bits indicating whether or not a given storage location (e.g., LBA) includes valid data to be copied to the target storage <b>300</b>. Each LBA, which may include, for example, 4 kilobytes (KB) of data, may be represented by one status identifier bit in the bitmap of the first data structure M<b>1</b>. For example, a &#x201c;0&#x201d; bit may indicate that a given LBA has no valid data to be copied to the target storage <b>300</b>, and a &#x201c;1&#x201d; bit may indicate that a given LBA does have valid data to be copied to the target storage <b>300</b>. Thus, an entire drive having a large storage capacity, for example, 8 terabytes (TB) of data in the source storage <b>200</b>, may be represented by way of a bitmap having, for example, 2048 megabits of metadata. For example, the live migration controller <b>210</b><i>b </i>may map the source storage <b>200</b> based on the request from the live migration server <b>100</b><i>b</i>, and may set first status identifier bits indicating a location of a source data to be copied MD<b>1</b> (e.g., 1's) in the first data structure M<b>1</b> to identify data locations to be copied from the source storage <b>200</b> to the target storage <b>300</b>. (The first status identifier bits indicating a location of a source data to be copied MD<b>1</b> may be bits, corresponding to the first data structure M<b>1</b>, indicating that a corresponding storage location includes data to be copied from the source storage to the target storage.)</p><p id="p-0076" num="0075">When the live migration controller <b>210</b><i>b </i>has finished mapping the source storage <b>200</b>, the live migration controller <b>210</b><i>b </i>may transfer (e.g., via a bitmap transfer request-response) the first data structure M<b>1</b> (including the first status identifier bits indicating a location of a source data to be copied MD<b>1</b>) to the live migration server <b>100</b><i>b</i>, shown as a host version of the first data structure M<b>1</b>&#x2032; (or a first data structure M<b>1</b>&#x2032;) in the live migration server memory <b>120</b><i>b </i>of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. The live migration server <b>100</b><i>b </i>may use the host version of the first data structure M<b>1</b>&#x2032; to work on copying the relevant data from the source storage <b>200</b> to the target storage <b>300</b> (e.g., via a live migration copy (LMCP) process, including a live migration copy read operation (e.g., process) LM-CP-Read, or LMCPR, and a live migration copy write operation LM-CP-Write, or LMCPW). For example, the live migration server <b>100</b><i>b </i>may use the host version of the data structure M<b>1</b>&#x2032; to perform the LMCP process, where the live migration server <b>100</b><i>b </i>reads data from the source storage <b>200</b> (e.g., during LMCPR) and the live migration server <b>100</b><i>b </i>writes the data to the target storage <b>300</b> (e.g., during LMCPW). In summary, the live migration controller <b>210</b><i>b </i>may transfer (e.g., bitmap transfer) the first data structure M<b>1</b> from the live migration controller memory <b>220</b><i>b </i>to the live migration server memory <b>120</b><i>b</i>. The version of the first data structure M<b>1</b> in the live migration host memory <b>120</b><i>b </i>may be referred to as the host version of the first data structure M<b>1</b>&#x2032; (e.g., a bitmap request and transfer) or simply the first data structure M<b>1</b>&#x2032; (also known as a &#x201c;host snapshot&#x201d;). A host version HV may refer to any host version of a data structure (e.g., an initial BMP, initial BDP, or subsequent BDP) used by the live migration server <b>100</b><i>b </i>to work on copying relevant data from the source storage <b>200</b> to the target storage <b>300</b>.</p><p id="p-0077" num="0076">User data writes UDW to the source storage <b>200</b> may occur during the process of copying and writing the data from the source storage <b>200</b> to the target storage <b>300</b>. To track the locations of the user data writes UDW, the live migration controller <b>210</b><i>b </i>may create a second data structure M<b>2</b> (e.g., a second bitmap) of metadata, which may be referred to as a bitmap of &#x201c;dirty&#x201d; pages (&#x201c;BDP&#x201d;). For example, the second data structure M<b>2</b> may be created to indicate which storage locations (e.g., LBAs) correspond to the user data writes UDW and, thus, have data to be copied to the target storage <b>300</b> in the next iteration. The second data structure M<b>2</b> may be transferred (e.g., bitmap transferred) to live migration server <b>100</b><i>b </i>by the live migration controller <b>210</b><i>b </i>(e.g., in response to completion of copying based on the first data structure M<b>1</b>). The live migration server <b>100</b><i>b </i>may use a host version of the second data structure M<b>2</b>&#x2032; (or a second data structure M<b>2</b>&#x2032;) (e.g., a host version HV corresponding to the second data structure M<b>2</b> created by the live migration controller <b>210</b><i>b</i>) as a reference for data to be copied from the source storage <b>200</b> to the target storage <b>300</b> at a later iteration by the live migration server <b>100</b><i>b</i>. For example, the host version of the second data structure M<b>2</b>&#x2032; may be a BDP that may be used by the live migration server <b>100</b><i>b </i>to update the relevant data at the target storage <b>300</b>, based on a change to the relevant data at the source storage <b>200</b>.</p><p id="p-0078" num="0077">In summary, three distinct operations may be performed. First, the live migration controller <b>210</b><i>b </i>may transfer an initial data structure (e.g., the first data structure M<b>1</b>, or the second data structure M<b>2</b>) to the live migration server <b>100</b><i>b </i>causing a host version of the first data structure M<b>1</b>&#x2032; or a host version of the second data structure M<b>2</b>&#x2032; to be created in the live migration server <b>100</b><i>b</i>. Second, the live migration server <b>100</b><i>b </i>may perform a copying process in reference to the host version of the first data structure M<b>1</b>&#x2032; or the host version of the second data structure M<b>2</b>&#x2032; while the live migration controller <b>210</b><i>b </i>tracks user data writes UDW as dirty bits in a subsequent data structure (e.g., the second data structure M<b>2</b>, if the initial data structure was the first data structure M<b>1</b>, or a third data structure M<b>3</b>, if the second data structure M<b>2</b> was the initial data structure). Third, when the copying process is done, the live migration server <b>100</b><i>b </i>may request a transfer of the next data structure (e.g., the next bitmap data structure) from the live migration controller <b>210</b><i>b</i>. When the live migration server <b>100</b><i>b </i>receives a transfer of the next data structure, another iteration of the three distinct operations may be performed. (<figref idref="DRAWINGS">FIG. <b>1</b></figref> is discussed again further below. <figref idref="DRAWINGS">FIG. <b>2</b></figref> and <figref idref="DRAWINGS">FIG. <b>3</b></figref> discuss details regarding the tracking and transferring of data structures in reference to a first data structure M<b>1</b>, a second data structure M<b>2</b>, and a third data structure M<b>3</b>.)</p><p id="p-0079" num="0078"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a simplified conceptual diagram depicting a transferring of a passive first data structure and a tracking of user data writes with an active second data structure, according to some embodiments of the present disclosure.</p><p id="p-0080" num="0079"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a simplified conceptual diagram depicting a transferring of a passive version of the second data structure and a tracking of user data writes with an active third data structure, according to some embodiments of the present disclosure.</p><p id="p-0081" num="0080">Referring to <figref idref="DRAWINGS">FIG. <b>2</b></figref>, as discussed above, the live migration controller <b>210</b><i>b </i>may create (e.g., provide) a first data structure M<b>1</b> that may be a BMP towards (e.g., at) the beginning of the live migration process. In response to a request from the live migration server <b>100</b><i>b</i>, the live migration controller <b>210</b><i>b </i>may also create a second data structure M<b>2</b> that may be a BDP (e.g., during the live migration BMP transfer from the live migration controller <b>210</b><i>b </i>to the live migration server <b>100</b><i>b </i>and during the live migration copying process) for incremental (e.g., iterative) updates to the data in the target storage <b>300</b>. For example, the second data structure M<b>2</b> that is a BDP may track (e.g., identify) locations of user data writes UDW from the source storage device <b>250</b><i>a </i>that may have occurred at the relevant data locations in the source storage <b>200</b> during or after a transferring of the first data structure M<b>1</b> that is a BMP, and during a subsequent live migration copy operation LMCP (including a live migration copy read operation LMCPR and/or a live migration copy write operation LMCPW).</p><p id="p-0082" num="0081">For example, at a mapping stage of the live migration process, the first data structure M<b>1</b> may be the BMP. The live migration server <b>100</b><i>b </i>may request a copy of the BMP (e.g., the live migration server <b>100</b><i>b </i>may send a &#x201c;query BMP&#x201d; command to the live migration controller <b>210</b><i>b </i>(e.g., a host bitmap fetch <b>212</b>)). The live migration controller <b>210</b><i>b </i>may prepare a buffer as the first data structure M<b>1</b> (e.g., a location in the live migration controller memory <b>220</b><i>b</i>, shown in <figref idref="DRAWINGS">FIG. <b>1</b></figref>) for the BMP. The live migration controller <b>210</b><i>b </i>may set first status identifier bits indicating a location of a source data to be copied MD<b>1</b> as mapped bits (e.g., one or more 1's) into the first data structure M<b>1</b> that is a BMP buffer for every page (or LBA) of a mapping operation that has valid data. When the mapping operation is complete, the first data structure M<b>1</b> that is a BMP may become a passive bitmap (e.g., the BMP may no longer be available for updates to the bits of the bitmap) and the live migration controller <b>210</b><i>b </i>may transfer (e.g., bitmap transfer) the first data structure M<b>1</b> content, first status identifier bits indicating a location of a source data to be copied MD<b>1</b>, (e.g., send the BMP) to the live migration server memory <b>120</b><i>b </i>in the live migration server <b>100</b><i>b</i>. The live migration server <b>100</b><i>b </i>may receive and store a host version of the first data structure M<b>1</b>&#x2032; that is a BMP in the live migration server memory <b>120</b><i>b</i>, read the mapped pages, in reference to the host version of the first data structure M<b>1</b>&#x2032;, from the source storage <b>200</b>, and copy over the relevant data (e.g., via a host data fetch <b>213</b> and a corresponding Live Migration Server Copy Write LMCPW) to the target storage <b>300</b> (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>).</p><p id="p-0083" num="0082">As discussed above, the live migration controller <b>210</b><i>b </i>may create a second data structure M<b>2</b>, which may be a first BDP, to track updates to the relevant locations of the source storage <b>200</b> that occur during or after the transferring (e.g., the bitmap transferring) of the first data structure M<b>1</b> (e.g., a BMP) and the subsequent live migration copy operation LMCP. For example, the live migration controller <b>210</b><i>b </i>may prepare a second data structure M<b>2</b> (e.g., that is an active BDP buffer, or active bitmap buffer) having all bits cleared to &#x201c;0&#x201d; initially. A bitmap logger <b>211</b> may monitor (e.g., &#x201c;snoop&#x201d;) user data writes UDW from the source storage device <b>250</b><i>a</i>, and may set second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., to &#x201c;1&#x201d; bits) in the active second data structure M<b>2</b> during the current live migration copy LMCP operation to identify the relevant locations of the user data writes UDW. (The second status identifier bits indicating a location of a source data to be copied MD<b>2</b> may be bits, corresponding to the second data structure M<b>2</b>, indicating that a corresponding storage location includes data to be copied from the source storage to the target storage.)</p><p id="p-0084" num="0083">In some embodiments, when the live migration server <b>100</b><i>b </i>has finished the live migration copying operations corresponding to the passive bitmap (e.g., a buffer for the passive first data structure M<b>1</b> or a subsequent passive second data structure M<b>2</b>), the live migration server <b>100</b><i>b </i>may send a command (e.g., a &#x201c;swap BDP&#x201d; command) to swap the active bitmap buffer and the passive bitmap buffer.</p><p id="p-0085" num="0084">For example, and referring to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, in some embodiments, the buffer corresponding to the passive first data structure M<b>1</b> may become an active third data structure M<b>3</b> buffer (e.g., for a second or subsequent BDP bitmap) and the first active second data structure M<b>2</b> buffer may become a passive second data structure M<b>2</b> buffer. The live migration server <b>100</b><i>b </i>may send a command (e.g., a &#x201c;query BDP&#x201d; command) to the live migration controller <b>210</b><i>b </i>to transfer (e.g., bitmap transfer) the passive buffer (e.g., copy a passive second data structure M<b>2</b> corresponding to the passive buffer) to the live migration server <b>100</b><i>b </i>in a host version of the second data structure M<b>2</b>&#x2032;. In some embodiments, when the passive bitmap has been transferred to the live migration server <b>100</b><i>b </i>(e.g., as a bitmap transfer, or host version HV), the live migration controller <b>210</b><i>b </i>may reset the passive bitmap buffer (e.g., clear all of the bits to &#x201c;0&#x201d;) and prepare it for tracking as an active bitmap buffer for the next BDP (e.g., a third data structure M<b>3</b> having third status identifier bits indicating a location of a source data to be copied MD<b>3</b>). (The third status identifier bits indicating a location of a source data to be copied MD<b>3</b> may be bits, corresponding to the third data structure M<b>3</b>, indicating that a corresponding storage location includes data to be copied from the source storage to the target storage.) The live migration server <b>100</b><i>b </i>may parse the host version of the second data structure M<b>2</b>&#x2032; (e.g., the BDP), read the dirty pages from the source storage <b>200</b> (in reference to the host version of the second data structure M<b>2</b>&#x2032;), and copy over the relevant data to the target storage <b>300</b>.</p><p id="p-0086" num="0085">Referring again to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in some embodiments, and as discussed further below in reference to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>13</b></figref>, the live migration controller <b>210</b><i>b </i>may monitor (e.g., &#x201c;snoop&#x201d;) user data writes UDW from the source storage device <b>250</b><i>a </i>to the source storage <b>200</b>. The live migration controller <b>210</b><i>b </i>may monitor a current copying location CCL associated with LMCPR and LMCPW operations of the live migration controller <b>100</b><i>b. </i></p><p id="p-0087" num="0086">In some embodiments, the live migration controller <b>210</b><i>b </i>may use the current copying location CCL, a starting (or start) address A<b>1</b> (e.g., a starting address of a planned to copy section), and an ending (or end) address A<b>2</b> (e.g., an ending address of the planned to copy section) to track a planned and copied section CS and a planned but yet to be copied section YS of the source storage <b>200</b>. For example, as depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, LBA<b>0</b> to LBA<b>8</b> may correspond to a planned to copy section (e.g., a section of the source storage <b>200</b> that the live migration server <b>100</b><i>b </i>has been assigned to copy to the target storage <b>300</b>). LBA<b>0</b> to LBA<b>2</b> may correspond to the planned and copied section CS at a first time t<sub>1</sub>, and LBA<b>3</b> to LBA<b>8</b> may correspond to the planned but yet to be copied section YS at the first time t<sub>1</sub>. LBA<b>9</b> to LBA<b>11</b> may correspond to an unmapped section US (e.g., a section of the source storage <b>200</b> that is not planned to be copied). For example, the current copying location CCL may be associated with a current copy index corresponding to a start address A<b>1</b> of a continuous index and to an end address A<b>2</b> of the continuous index, the continuous index being associated with the planned to copy section, which includes contiguous storage locations (e.g., LBAs) between the start address A<b>1</b> and the end address A<b>2</b>.</p><p id="p-0088" num="0087">In some embodiments, when the storage locations (e.g., LBAs) that are planned to be copied are not all adjacent to each other (e.g., are not all contiguous or are distributed), the live migration controller <b>210</b><i>b </i>may use the current copy location CCL along with one or more bitmap notations/representations (e.g., instead of a starting address A<b>1</b> and an ending address A<b>2</b>) to track the planned and copied section CS and the planned but yet to be copied section YS of the source storage <b>200</b>. A bitmap may be a data structure including a collection of 1's and/or 0's with position information (see, e.g., <figref idref="DRAWINGS">FIG. <b>4</b></figref> and the related description below).</p><p id="p-0089" num="0088">The live migration controller <b>210</b><i>b </i>may monitor user data writes UDW that occur during and after the bitmap transferring of the first data structure M<b>1</b> to the live migration server <b>100</b><i>b</i>, when the live migration copying is in progress (e.g., during the LMCPR and LMCPW processes), and before all data is copied. The live migration controller <b>210</b><i>b </i>may create a second data structure M<b>2</b> and track (e.g., record) the locations of the user data writes UDW with second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., &#x201c;dirty&#x201d; bits) in the second data structure M<b>2</b>. The second data structure M<b>2</b> may be transferred to the live migration server <b>100</b><i>b </i>after the first LMCP process (e.g., including LMCPR and LMCPW operations) has been completed to indicate to the live migration server <b>100</b><i>b </i>where relevant source data has changed (e.g., where the user data writes UDW have been written) so that the live migration server <b>100</b><i>b </i>may perform another LMCP iteration (e.g., a later iteration) including another LMCPR operation to copy the source data (from the locations identified by the one or more second status identifier bits indicating a location of a source data to be copied MD<b>2</b>) at the source storage <b>200</b> and another LMCPW operation to update the data at the target storage <b>300</b>.</p><p id="p-0090" num="0089">For example, a first user data write UDW<b>1</b> may be written to LBA<b>0</b> to LBA<b>9</b> at the first time t<sub>1 </sub>(e.g., when the current copying address CCL corresponds to LBA<b>2</b>). In some embodiments, the live migration controller <b>210</b><i>b </i>may generate the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b> corresponding to each LBA address LBA<b>0</b> to LBA<b>9</b> to be included in the second data structure M<b>2</b> for use by the live migration server <b>100</b><i>b </i>to track user data writes UDW to the source storage device <b>250</b><i>a </i>when copying valid data (associated with the host version of the first data structure M<b>1</b>&#x2032;) from the source storage <b>200</b> during the next LMCP process. However, at t<b>1</b>, addresses LBA<b>3</b> to LBA<b>8</b> are scheduled to be copied and written to the target storage <b>330</b> based on the first data structure M<b>1</b>&#x2032;, but have not yet been so copied and written. Accordingly, if the addresses LBA<b>3</b> to LBA<b>8</b> were included in the second data structure M<b>2</b> and sent to the live migration server <b>100</b><i>b</i>, the source data corresponding to LBA<b>3</b> to LBA<b>8</b> would be copied twice (e.g., read twice from the source storage <b>200</b> and written twice to the target storage <b>300</b>) from the source storage <b>200</b>&#x2014;once based on the first data structure M<b>1</b>&#x2032; and once based on the second data structure M<b>2</b>&#x2032;. Accordingly, the next LMCPR and LMCPW iteration may include redundant reads and writes if LBA<b>3</b> to LBA<b>8</b> were copied again from <b>200</b> to <b>300</b>. It may be wasteful to consume time and power redundantly copying the source data corresponding to LBA<b>3</b> to LBA<b>8</b>, which was previously copied to the target storage <b>300</b> in the prior iteration. Furthermore, the drawbacks associated with redundant copying may have a cumulative effect by creating more BDP runs (e.g., more iterations of LMCPR and LMCPW operations to update data at the target storage <b>300</b>).</p><p id="p-0091" num="0090">In some embodiments, as discussed further below in reference to <figref idref="DRAWINGS">FIGS. <b>5</b>-<b>13</b></figref>, to reduce (e.g., to eliminate) redundant copying, the live migration controller <b>210</b><i>b </i>may selectively generate or selectively clear second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., dirty bits) in the second data structure M<b>2</b> (and/or subsequent iterations of LMCP processes).</p><p id="p-0092" num="0091">For example, in some embodiments involving selective generation methods, the live migration controller <b>210</b><i>b </i>may use the tracking of the planned and copied section CS and/or the planned but yet to be copied section YS to filter the generation of second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., dirty bits) in the second data structure M<b>2</b> (and/or subsequent iterations of LMCP processes), such that the tracking of the planned but yet to be copied section disables (or prevents) the live migration controller <b>210</b> from generating the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b> (e.g., for those current copying locations CCL overlapping with the planned but yet to be copied bitmap YBM). For example, the live migration controller <b>210</b><i>b </i>may selectively generate the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b> so that the live migration server <b>100</b><i>b </i>may reduce (e.g., avoid) redundant copying at the next LMCP iteration, when referring to the second data structure M<b>2</b> bitmap transferred by the live migration controller <b>210</b><i>b. </i></p><p id="p-0093" num="0092">In some embodiments involving selective clearing methods, instead of using the tracking of the planned and copied section CS and/or the planned but yet to be copied section YS to filter the generation of second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b>, the live migration controller <b>210</b> may track and set the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b> based on the occurrence of user data writes UDW but, later, clear the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> from the second data structure M<b>2</b> if the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> correspond to a current copying location CCL of the live migration server.</p><p id="p-0094" num="0093">As used herein, &#x201c;tracking&#x201d; a section (e.g., a planned but yet to be copied section YS and/or a planned and copied section CS of the source storage <b>200</b>) may mean remaining aware of, or maintaining a record of, storage locations (e.g., LBAs) within a set of storage locations (e.g., LBAs) associated with the section and/or remaining aware of, or maintaining a record of, storage locations (e.g., LBAs) outside of (e.g., not within) the set of storage locations (e.g., LBAs) associated with the section.</p><p id="p-0095" num="0094">As used herein, &#x201c;filtering&#x201d; the generating of status identifiers (e.g., second status identifier bits indicating a location of a source data to be copied MD<b>2</b>) may mean generating status identifiers in some circumstances and not generating status identifiers in some other circumstances.</p><p id="p-0096" num="0095">For example, in some embodiments, after the first data structure M<b>1</b> has been transferred to the live migration server, a live migration (LM) copy status data structure of the first data structure M<b>1</b> (e.g., the first data structure M<b>1</b> or another data structure or other data structures, based on the first data structure M<b>1</b> and also separate and distinct from the second data structure M<b>2</b>) may be effectively used as a filter before setting status identifier bits (e.g., second status identifier bits indicating a location of a source data to be copied MD<b>2</b>) in the second data structure M<b>2</b> to identify the locations of user data writes to the source storage <b>200</b>.</p><p id="p-0097" num="0096">For example, a LM copy status data structure may be a data structure at the live migration controller <b>210</b><i>b</i>. The LM copy status data structure may be based on M<b>1</b>, but the LM copy status data structure may be a different data structure than M<b>1</b>. In some embodiments, the LM copy status data structure may include (e.g., may be) three different bitmaps and an index (e.g., an index indicating where the current copying location CCL is). In some embodiments involving a continuous section, the LM copy status data structure may include three indices (e.g., a start index, a current index, and an end index).</p><p id="p-0098" num="0097">In some embodiments involving non-continuous (or distributed) sections, the LM copy status data structure may include three bitmaps (e.g., a planned and copied bitmap CBM, a planned but yet to be copied bitmap YBM, and an unmapped section bitmap UBM. In some embodiments, the LM copy status data structure may include (e.g., may be) one bitmap and several indices. For example, one index may indicate where a mapped region begins (e.g., so a location before that index may be an unmapped location), one index may indicate where a current copy location CCL is, and one index may indicate where a final mapped entry is (e.g., so a location after that index may be an unmapped location again). It should be understood that other data structure and index embodiments are possible. In some embodiments, in which the LM copy status data structure is a data structure that is different from the first data structure M<b>1</b>, the planned but yet to be copied section YS may be initialized based on the first data structure M<b>1</b>.</p><p id="p-0099" num="0098">For example, in some embodiments, the live migration controller <b>210</b><i>b </i>may initialize the LM copy status data structure of the first data structure M<b>1</b> to track three sections, along with the current copying location CCL: (1) a planned and copied section CS (or a planned and copied bitmap CBM); (2) a planned but yet to be copied section YS (or a planned but yet to be copied bitmap YBM); and (3) an unmapped section US (or unmapped section bitmap UBM). For example, the live migration controller <b>210</b><i>b </i>may initialize all status identifier bits in the first data structure M<b>1</b> (e.g., the LM copy status data structure of the first data structure) corresponding to the planned and copied section CS to 0's; the live migration controller <b>210</b><i>b </i>may initialize all status identifier bits in the first data structure M<b>1</b> corresponding to the planned but yet to be copied section YS to all 1's/valid to match M<b>1</b> (e.g., initialize the status identifier bits in the planned but yet to be copied section YS to 1's); and the live migration controller <b>210</b><i>b </i>may initialize all status identifier bits in the first data structure M<b>1</b> corresponding to the unmapped section US to 1's (e.g., all status identifier bits in the unmapped section US may be 1's and may stay static (e.g., remain 1's) for an entire LMCP iteration).</p><p id="p-0100" num="0099">In some embodiments, the first data structure M<b>1</b> (or another data structure based on the first data structure M<b>1</b>) used for tracking the current copying location CCL may include more than one separate data structure for tracking the separate sections CS/CBM, YS/YBM, and/or US/UBM (see, e.g., <figref idref="DRAWINGS">FIGS. <b>4</b>, <b>6</b>, <b>7</b>, and <b>8</b></figref>).</p><p id="p-0101" num="0100">In some embodiments, the first data structure M<b>1</b> (or another data structure based on the first data structure M<b>1</b>) used for tracking the current copying location CCL may include one data structure for tracking the separate sections CS/CBM, YS/YBM, and/or UM (see, e.g., <figref idref="DRAWINGS">FIG. <b>9</b></figref>).</p><p id="p-0102" num="0101">Referring again to <figref idref="DRAWINGS">FIG. <b>1</b></figref>, in some embodiments, the live migration controller <b>210</b><i>b </i>may monitor (e.g., in parallel) for user data writes UDW and for LMCPR read LBAs. As the current copying location CCL changes (e.g., progresses), the live migration controller <b>210</b><i>b </i>may clear status identifier bits (e.g., planned but yet to be copied section status identifier bits indicating a location of a source data to be copied YS.MD<b>1</b>) (set the bits to 0's) in the planned but yet to be copied section YS, and set corresponding status identifier bits (e.g., planned and copied section status identifier bits indicating a location of a source data that has been copied CS.MD<b>1</b>) in the planned and copied section CS to 1's (see, e.g., <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> below). (The planned but yet to be copied section status identifier bits indicating a location of a source data to be copied YS.MD<b>1</b> may be bits, corresponding to the planned but yet to be copied section YS of an LM copy status data structure, indicating that a corresponding storage location includes data that has not yet been copied from the source storage to the target storage. The planned and copied section status identifier bits indicating a location of a source data that has been copied CS.MD<b>1</b> may be bits, corresponding to the planned and copied section CS of an LM copy status data structure, indicating that a corresponding storage location includes data that has been copied from the source storage to the target storage.) If a monitored user data write UDW corresponds to an LBA that corresponds to an entry of the first data structure M<b>1</b> having a status identifier bit in the planned but yet to be copied section YS that is set to 1, the user data write UDW corresponding to that LBA address may not be tracked (e.g., by not setting second status identifier bits valid, to 1's) in the second data structure M<b>2</b>. If, on the other hand, a monitored user data write UDW corresponds to an LBA that corresponds to an entry of the first data structure M<b>1</b> having a status identifier bit in the planned but yet to be copied section YS that is set to 0, the user data write UDW corresponding to that LBA address may be tracked (e.g., by setting second status identifier bits valid, to 1's) in the second data structure M<b>2</b>. Because the updated data from the user data write UDW may be copied by the live migration server based on the mapping in the first data structure M<b>1</b>, a redundant copy operation by the live migration server <b>100</b><i>b </i>may be prevented by filtering the update (e.g., preventing the generation of dirty bits) to the second data structure M<b>2</b>. For example, by not setting second status identifier bits indicating a location of a source data to be copied MD<b>2</b> valid to 1's (e.g., by filtering the update to the second data structure M<b>2</b>), a redundant copy operation by the live migration server <b>100</b><i>b </i>may be prevented. For example, without the selective generation method applied, second status identifier bits indicating a location of a source data to be copied MD<b>2</b> may be set to 1's that may lead to redundant copying.</p><p id="p-0103" num="0102">For example, as depicted in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, a first user data write UDW<b>1</b> at a first time t<sub>1 </sub>may write at LBA locations associated with one of the three sections in the first data structure M<b>1</b> (or another data structure based on the first data structure M<b>1</b>) (the planned and copied section CS, the planned but yet to be copied section YS, and the unmapped section US). The live migration controller <b>210</b><i>b </i>may refer to the first data structure M<b>1</b> (or another data structure based on the first data structure M<b>1</b>) and allow only the user data writes UDW corresponding to the planned and copied section CS or the unmapped section US to be set as second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., 1's) in the second data structure M<b>2</b>, while not allowing the user data writes UDW corresponding to the planned but yet to be copied section YS to be set as second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b>. (See also the flowchart of <figref idref="DRAWINGS">FIG. <b>12</b></figref>.)</p><p id="p-0104" num="0103">In some embodiments, as discussed further below in reference to <figref idref="DRAWINGS">FIG. <b>10</b></figref> and <figref idref="DRAWINGS">FIG. <b>13</b></figref>, to reduce (e.g., to eliminate) redundant copying, the live migration controller <b>210</b><i>b </i>may track the current copying location CCL, without referencing a planned and copied section CS or a planned but yet to be copied section YS. In such embodiments, the live migration controller <b>210</b><i>b </i>may monitor and track user data writes UDW, occurring during or after the bitmap transferring of the first data structure M<b>1</b> to the live migration server <b>100</b><i>b </i>(e.g., during the live migration server copying, and before the live migration server copying finishes). In the meantime, the live migration server <b>100</b><i>b </i>may generate the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b> according to the user data writes UDW without filtering or preventing the generation of the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> corresponding to a planned but yet to be copied section. In such embodiments, the live migration controller <b>210</b><i>b </i>may monitor the current copying location CCL and may clear the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., the &#x201c;dirty&#x201d; bits) from the second data structure M<b>2</b> corresponding to the current copying location CCL, because the associated source data has been copied by the live migration server <b>100</b><i>b </i>(as indicated by the current copying location CCL). Accordingly, the live migration controller <b>210</b><i>b </i>may selectively clear the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in the second data structure M<b>2</b> so that the live migration server <b>100</b><i>b </i>may reduce (e.g., avoid) redundant copying at the next LMCPR and LMCPW iteration, when referring to the second data structure M<b>2</b> transferred by the live migration controller <b>210</b><i>b</i>. (See also the flowchart of <figref idref="DRAWINGS">FIG. <b>13</b></figref>.)</p><p id="p-0105" num="0104">In some embodiments, the live migration controller <b>210</b><i>b </i>may generate the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> to indicate locations of user data writes UDW occurring outside of the planned to copy section (e.g., in the unmapped section US).</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, <figref idref="DRAWINGS">FIG. <b>4</b>G</figref>, and <figref idref="DRAWINGS">FIG. <b>4</b>H</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>4</b></figref>) are simplified conceptual diagrams depicting details of a bitmap vision diagram for depicting methods for tracking a progress of data copying for a live migration, according to some embodiments of the present disclosure.</p><p id="p-0107" num="0106">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, a host version of the first data structure M<b>1</b>&#x2032; may be in the live migration server memory <b>120</b><i>b </i>for use in performing an LMCP operation (see <figref idref="DRAWINGS">FIG. <b>1</b></figref>). The bitmap may represent source data in the source storage <b>200</b> associated with, for example, LBA<b>0</b> to LBA<b>49</b>. First status identifier bits indicating a location of a source data to be copied MD<b>1</b> (e.g., the &#x201c;1&#x201d; bits) may indicate source data (e.g., valid or dirty data) for copying from the source storage <b>200</b> to the target storage <b>300</b>. The current copying location CCL may progress from a starting address A<b>1</b> to an ending address A<b>2</b> between a zeroth time t<sub>0 </sub>to a third time t<b>3</b>. The bitmap locations at a top row above the ending address A<b>2</b> may correspond to an unmapped section US.</p><p id="p-0108" num="0107">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the first data structure M<b>1</b> (or one or more other data structures, as discussed above with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref>) may be located in the live migration controller memory <b>220</b><i>b </i>to track a progress of the current copying location CCL. For example, as depicted in <figref idref="DRAWINGS">FIG. <b>4</b>B</figref> with respect to a first time t<sub>1</sub>, the first data structure M<b>1</b> may be used by the live migration controller <b>210</b><i>b </i>to track the progress of the current copying location CCL by clearing status identifier bits (e.g., planned but yet to be copied section status identifier bits indicating a location of a source data to be copied YS.MD<b>1</b>) (clearing the bits to 0's) from the first data structure M<b>1</b> corresponding to the planned but yet to be copied section YS, and adding (e.g., respectively adding) status identifier bits (e.g., planned and copied section status identifier bits indicating a location of a source data that has been copied CS.MD<b>1</b>) to the first data structure M<b>1</b> corresponding to the planned and copied section CS. For example, as the current copying location CCL progresses, an amount of planned and copied section status identifier bits indicating a location of a source data that has been copied CS.MD<b>1</b> (e.g., 1's) may increase in the planned and copied section CS and an amount of planned but yet to be copied section status identifier bits indicating a location of a source data to be copied YS.MD<b>1</b> (e.g., 1's) may decrease (e.g., respectively decrease) in the planned but yet to be copied section YS. An amount of unmapped section status identifier bits US.MD<b>1</b> may not increase or decrease in a given iteration. (The unmapped section status identifier bits US.MD<b>1</b> may be bits, corresponding to the unmapped section US of an LM copy status data structure, indicating that a corresponding storage location is outside of the planned to copy section.)</p><p id="p-0109" num="0108">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>C</figref>, a second data structure M<b>2</b> may be in the live migration controller memory <b>220</b><i>b </i>and activated, with each bit initially set to &#x201c;0,&#x201d; for tracking user data writes UDW from the source storage device <b>250</b><i>a </i>occurring between the zeroth time to and the third time t<b>3</b>. In <figref idref="DRAWINGS">FIGS. <b>4</b>C to <b>4</b>F</figref>, the current copying location CCL sections (e.g., YS, CS, and UM) are illustrated next to the second data structure M<b>2</b> to depict how the planned and copied section CS and the planned but yet to be copied section YS respectively change in size and correspond to the filtering of the generation of second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., &#x201c;1&#x201d; bits) in the second data structure M<b>2</b>.</p><p id="p-0110" num="0109">At the zeroth time t<sub>0</sub>, each bit between the starting address A<b>1</b> and the ending address A<b>2</b> may correspond to a planned but yet to be copied section YS.</p><p id="p-0111" num="0110">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>D</figref>, at the first time t<sub>1</sub>, a first user data write UDW<b>1</b> may occur at LBA<b>0</b> to LBA<b>9</b>. According to some embodiments, the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., dirty bits in a BDP) may be generated in the second data structure M<b>2</b> locations corresponding to LBAs in the planned and copied section CS and in the unmapped section US, while second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., dirty bits, or 1's) may not be generated in the second data structure M<b>2</b> locations corresponding to LBAs in the planned but yet to be copied section YS (e.g., LBA<b>3</b> to LBA<b>8</b>).</p><p id="p-0112" num="0111">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>E</figref>, a similar filtering of the generation of dirty bits may occur based on a second user data write UDW<b>2</b> at a second time t<sub>2 </sub>(occurring at LBA<b>10</b> to LBA<b>19</b>). For example, second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., dirty bits, or 1's) may not be generated in the second data structure M<b>2</b> locations corresponding to LBAs in the planned but yet to be copied section YS (e.g., LBA<b>16</b> to LBA<b>18</b>). Referring to <figref idref="DRAWINGS">FIG. <b>4</b>F</figref>, a third data write UDW<b>3</b> occurring at the third time t<b>3</b> (occurring at LBA<b>20</b> to LBA<b>29</b>) may generate one or more second status identifier bits indicating a location of a source data to be copied MD<b>2</b> throughout the bitmap locations corresponding to LBA<b>20</b> to LBA<b>29</b> because each location corresponds to the planned and copied section CS at the third time t<b>3</b>.</p><p id="p-0113" num="0112">Referring to <figref idref="DRAWINGS">FIG. <b>4</b>G</figref> and <figref idref="DRAWINGS">FIG. <b>4</b>H</figref>, a sequence of user data write UDW times and locations and resulting filtered status identifiers (e.g., dirty bits) may be represented in a bitmap vision diagram (e.g., a diagram used to depict a selective generating or selective clearing of status identifiers in a data structure that is used for indicating locations of user data writes to a source storage). For example, <figref idref="DRAWINGS">FIG. <b>4</b>G</figref> depicts a final version of the second data structure M<b>2</b> (e.g., the BDP) generated in <figref idref="DRAWINGS">FIGS. <b>4</b>C to <b>4</b>F</figref> with &#x201c;1&#x201d; and &#x201c;0&#x201d; bits shown. <figref idref="DRAWINGS">FIG. <b>4</b>H</figref> depicts the final version of the second data structure M<b>2</b>, generated in <figref idref="DRAWINGS">FIGS. <b>4</b>C to <b>4</b>F</figref>, superimposed over the first data structure M<b>1</b>, with each tracked user data write UDW divided into sections for simplicity. The second data structure M<b>2</b> is illustrated as being superimposed over the first data structure M<b>1</b> in the bitmap vision diagrams to depict how the progress of the current copying location CCL corresponds to the filtering of the generation of second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., &#x201c;1&#x201d; bits) in the second data structure M<b>2</b>.</p><p id="p-0114" num="0113">For example, the first user data write UDW<b>1</b> is divided into three sections&#x2014;<b>1</b>, <b>2</b>, and <b>3</b>; the second user data write UDW<b>2</b> is divided into three sections&#x2014;<b>4</b>, <b>5</b>, and <b>6</b>; and the third user data write UDW<b>3</b> is divided into two sections&#x2014;<b>7</b> and <b>8</b>. Sections <b>1</b>, <b>4</b>, and <b>7</b> depict bitmap locations corresponding to LBAs in the planned and copied section CS at the time of their respective user data writes UDW; sections <b>2</b> and <b>5</b> depict bitmap locations corresponding to LBAs in the planned but yet to be copied section YS at the time of their respective user data writes UDW; and sections <b>3</b>, <b>6</b>, and <b>8</b> depict bitmap locations corresponding to LBAs in the unmapped section US where user data writes UDW occurred.</p><p id="p-0115" num="0114"><figref idref="DRAWINGS">FIG. <b>5</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>5</b>C</figref>, and <figref idref="DRAWINGS">FIG. <b>5</b>D</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>5</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using a continuous index associated with contiguous storage locations and a selective generation of second status identifiers in a second data structure, according to some embodiments of the present disclosure.</p><p id="p-0116" num="0115">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, the previous descriptions for <figref idref="DRAWINGS">FIGS. <b>4</b>C to <b>4</b>F</figref> may be depicted in a series of bitmap vision diagrams. To summarize, in some embodiments, the live migration controller <b>210</b><i>b </i>may monitor a copy index (e.g., the current copy location CCL) of the first data structure M<b>1</b> (e.g., a BMP or a previous BDP) and may disable or prevent the generation of second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in locations of the second data structure M<b>2</b> corresponding to LBAs above the current copy location CCL in the planned to copy section (e.g., corresponding to the planned but yet to be copied section YS). Thus, a final version of the second data structure M<b>2</b> may be filtered of dirty bits that may cause a redundant copying (e.g., as depicted by the user data write UDW sections <b>2</b> and <b>5</b> depicted in <figref idref="DRAWINGS">FIGS. <b>5</b>B to <b>5</b>D</figref>).</p><p id="p-0117" num="0116">Aspects of embodiments of the present disclosure depicted in <figref idref="DRAWINGS">FIGS. <b>6</b> to <b>10</b></figref> are discussed using bitmap vision diagrams.</p><p id="p-0118" num="0117"><figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>, <figref idref="DRAWINGS">FIG. <b>6</b>D</figref> and <figref idref="DRAWINGS">FIG. <b>6</b>E</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>6</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using a planned but yet to be copied bitmap and a planned and copied bitmap associated with distributed storage locations, according to some embodiments of the present disclosure.</p><p id="p-0119" num="0118">In some embodiments, a first data structure M<b>1</b> may correspond to source data in the source storage <b>200</b> that is not located in a continuous block. For example, the storage locations (e.g., LBA addresses) associated with the relevant data in the source storage <b>200</b> to be copied to the target storage <b>300</b> may not be adjacent to each other (e.g., may be distributed).</p><p id="p-0120" num="0119">Referring to <figref idref="DRAWINGS">FIG. <b>6</b></figref>, gaps GAP have been added to the bitmap vision diagrams in <figref idref="DRAWINGS">FIGS. <b>6</b>A to <b>6</b>D</figref> to depict non-adjacent bitmap locations corresponding to such distributed (e.g., non-adjacent) storage locations (e.g., LBA addresses). In such situations, the current copying location CCL may be tracked by way of a planned but yet to be copied bitmap YBM and a planned and copied bitmap CBM. The progression of the current copying location CCL may be seen by the shaded portions corresponding to bitmap bits (e.g., status identifiers) indicating a location of a first distributed address D<b>1</b>, a second distributed address D<b>2</b>, a third distributed address D<b>3</b>, and a fourth distributed address D<b>4</b> (see the enlarged bitmap depicted in <figref idref="DRAWINGS">FIG. <b>6</b>E</figref>).</p><p id="p-0121" num="0120">Referring to <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, the status identifiers (e.g., 1 bits) associated with each of the first distributed address D<b>1</b>, the second distributed address D<b>2</b>, the third distributed address D<b>3</b>, and the fourth distributed address D<b>4</b> may all be in the planned but yet to be copied bitmap YBM at a zeroth time t<sub>0</sub>. For example, an LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations (e.g., D<b>1</b> to D<b>4</b>) may have not yet begun at a time depicted in <figref idref="DRAWINGS">FIG. <b>6</b>A</figref>, such that all of the distributed storage locations are indicated by (e.g., within) the planned but yet to be copied bitmap YBM. Referring to <figref idref="DRAWINGS">FIG. <b>6</b>B</figref>, at a first time t<sub>1</sub>, the LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations (e.g., D<b>1</b> to D<b>4</b>) may be in progress with the data associated with the first distributed address D<b>1</b> having been copied. Thus, the corresponding status identifier associated with the first distributed address D<b>1</b> may be removed from the planned but yet to be copied bitmap YBM and added to the planned and copied bitmap CBM. The process may continue until all of the status identifiers associated with the first distributed address D<b>1</b>, the second distributed address D<b>2</b>, the third distributed address D<b>3</b>, and the fourth distributed address D<b>4</b> are removed (e.g., cleared) from the planned but yet to be copied bitmap YBM and added to the planned and copied bitmap CBM.</p><p id="p-0122" num="0121">For example, and referring to <figref idref="DRAWINGS">FIG. <b>6</b>C</figref>, at a second time t<sub>2</sub>, the LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations (e.g., D<b>1</b> to D<b>4</b>) may be in progress with the data associated with the first distributed address D<b>1</b> and the second distributed address D<b>2</b> having been copied. Thus, the corresponding status identifier associated with the second distributed address D<b>2</b> may be removed from the planned but yet to be copied bitmap YBM and added to the planned and copied bitmap CBM. Referring to <figref idref="DRAWINGS">FIG. <b>6</b>D</figref>, at a third time t<b>3</b>, the LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations (e.g., D<b>1</b> to D<b>4</b>) may be completed, with the data associated with the first distributed address D<b>1</b>, the second distributed address D<b>2</b>, the third distributed address D<b>3</b>, and the fourth distributed address D<b>4</b> having been copied. Thus, the corresponding status identifiers associated with the third distributed address D<b>3</b> and the fourth distributed address D<b>4</b> may be removed from the planned but yet to be copied bitmap YBM and added to the planned and copied bitmap CBM.</p><p id="p-0123" num="0122"><figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>7</b>C</figref>, and <figref idref="DRAWINGS">FIG. <b>7</b>D</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>7</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using the planned but yet to be copied bitmap and the planned and copied bitmap associated with the distributed storage locations of <figref idref="DRAWINGS">FIG. <b>6</b></figref> and a selective generation of second status identifiers in a second data structure, according to some embodiments of the present disclosure.</p><p id="p-0124" num="0123">Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, distributed user data writes UDW occurring during or after the transferring of a first data structure M<b>1</b> may be tracked by the live migration controller <b>210</b><i>b </i>by selectively generating second status identifier bits indicating a location of a source data to be copied MD<b>2</b> in a second data structure M<b>2</b>. For example, the second data structure M<b>2</b>, having the selectively generating method applied, may result in fewer dirty bits (as shown below each of <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, <figref idref="DRAWINGS">FIG. <b>7</b>C</figref>, and <figref idref="DRAWINGS">FIG. <b>7</b>D</figref>) than an otherwise similar second data structure XM<b>2</b>, not having the selectively generating method applied.</p><p id="p-0125" num="0124">Referring to <figref idref="DRAWINGS">FIG. <b>7</b>A</figref>, at a zeroth time t<sub>0</sub>, an LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations may have not yet begun, such that all of the distributed storage locations are indicated within the planned but yet to be copied bitmap YBM.</p><p id="p-0126" num="0125">Referring to <figref idref="DRAWINGS">FIG. <b>7</b>B</figref>, at a first time t<sub>1</sub>, the LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations may be in progress with the data associated with some of the distributed storage locations having been copied. A first user data write UDW<b>1</b> may occur at the first time t<sub>1</sub>, such that a first section of the first user data write UDW<b>1</b> may occur at distributed storage locations corresponding to the planned and copied bitmap CBM, a second section of the first user data write UDW<b>1</b> may occur at distributed storage locations corresponding to the planned but yet to be copied bitmap YBM, and a third section of the first user data write UDW<b>1</b> may occur at distributed storage locations corresponding to the unmapped section US. Accordingly, second status identifier bits indicating a location of a source data to be copied MD<b>2</b> may be selectively generated in the second data structure M<b>2</b>, such that the second section of the first user data write UDW<b>1</b> may not be tracked in the second data structure M<b>2</b>.</p><p id="p-0127" num="0126">Referring to <figref idref="DRAWINGS">FIG. <b>7</b>C</figref>, at a second time t<sub>2</sub>, the LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations may be in progress with the data associated with more of the distributed storage locations having been copied. A second user data write UDW<b>2</b> may occur at the second time t<sub>2</sub>, such that a fourth section of the second user data write UDW<b>2</b> may occur at distributed storage locations corresponding to the planned and copied bitmap CBM, a fifth section of the second user data write UDW<b>2</b> may occur at distributed storage locations corresponding to the planned but yet to be copied bitmap YBM, and a sixth section of the second user data write UDW<b>2</b> may occur at distributed storage locations corresponding to the unmapped section US. Accordingly, second status identifier bits indicating a location of a source data to be copied MD<b>2</b> may be selectively generated in the second data structure M<b>2</b>, such that the fifth section of the second user data write UDW<b>2</b> may not be tracked in the second data structure M<b>2</b>.</p><p id="p-0128" num="0127">Referring to <figref idref="DRAWINGS">FIG. <b>7</b>D</figref>, at a third time t<b>3</b>, the LMCP process based on the first data structure M<b>1</b> indicating distributed storage locations may be completed, with the data associated with all of the distributed storage locations having been copied. A third user data write UDW<b>3</b> may occur at the third time t<b>3</b>, such that a seventh section of the third user data write UDW<b>3</b> may occur at distributed storage locations corresponding to the planned and copied bitmap CBM and an eighth section of the third user data write UDW<b>3</b> may occur at distributed storage locations corresponding to the unmapped section US. Accordingly, second status identifier bits indicating a location of a source data to be copied MD<b>2</b> may be selectively generated in the second data structure M<b>2</b>, such that all of sections of the third user data write UDW<b>3</b> may be tracked in the second data structure M<b>2</b>.</p><p id="p-0129" num="0128">In the case of selective clearing methods (discussed below with reference to <figref idref="DRAWINGS">FIGS. <b>10</b> and <b>13</b></figref>), the second data structure M<b>2</b> and the otherwise similar second data structure XM<b>2</b> would appear the same initially (e.g., at a first time t<sub>1</sub>) but the second data structure M<b>2</b> would have second status identifier bits indicating a location of a source data to be copied MD<b>2</b> selectively cleared later (e.g., after the first time t<sub>1</sub>).</p><p id="p-0130" num="0129"><figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, and <figref idref="DRAWINGS">FIG. <b>8</b>C</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>8</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration in a subsequent iteration of data copying using a planned but yet to be copied bitmap and a planned and copied bitmap, corresponding to the second data structure of <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and a selective generation of third status identifiers in a third data structure, according to some embodiments of the present disclosure.</p><p id="p-0131" num="0130">Referring to <figref idref="DRAWINGS">FIG. <b>8</b></figref>, the same selectively generating method may be applied to subsequent LMCP iterations. For example, as shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, a second data structure M<b>2</b> may actively track user data writes UDW (in a second data structure M<b>2</b>) to the source storage <b>200</b> occurring during or after a first data structure M<b>1</b> is transferred to the live migration server <b>100</b><i>b </i>for a first LMCP process. After the first LMCP process, the second data structure M<b>2</b> may be transferred to the live migration server <b>100</b><i>b</i>, as shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, for a second LMCP iteration. The live migration controller <b>210</b><i>b </i>may track user data writes UDW (in a third data structure M<b>3</b>) occurring during or after the second data structure M<b>2</b> is transferred to the live migration server <b>100</b><i>b </i>for a second LMCP process. Accordingly, as shown in <figref idref="DRAWINGS">FIG. <b>8</b>B</figref> and <figref idref="DRAWINGS">FIG. <b>8</b>C</figref>, the third data structure M<b>3</b>, having the selectively generating method applied, may result in fewer dirty bits than an otherwise similar third data structure XM<b>3</b>, not having the selectively generating method applied.</p><p id="p-0132" num="0131">For example, and referring to <figref idref="DRAWINGS">FIG. <b>8</b>A</figref>, at a zeroth time t<sub>0</sub>, an LMCP process based on the second data structure M<b>2</b> indicating storage locations to be copied (e.g., distributed storage locations) may have not yet begun, such that all of the storage locations are indicated within the planned but yet to be copied bitmap YBM. Furthermore, because the second data structure M<b>2</b> may have been generated during a previous LMCP iteration based on selective generation (or selective clearing) techniques, <figref idref="DRAWINGS">FIG. <b>8</b>A</figref> indicates storage locations of the second data structure that are within the planned to copy section P and storage locations of the second data structure that are outside of the planned to copy section O.</p><p id="p-0133" num="0132">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>B</figref>, at a first time t<sub>1</sub>, the LMCP process based on the second data structure M<b>2</b> may be in progress with the data associated with some of the storage locations having been copied. A first user data write UDW<b>1</b> may occur at the first time such that a first section of the first user data write UDW<b>1</b> may occur at some storage locations corresponding to the planned and copied bitmap CBM and some storage locations of the second data structure that are outside of the planned to copy section O, a second section of the first user data write UDW<b>1</b> may occur only at storage locations of the second data structure that are outside of the planned to copy section O, and a third section of the first user data write UDW<b>1</b> may occur at storage locations corresponding only to the planned but yet to be copied bitmap YBM. Accordingly, third status identifier bits indicating a location of a source data to be copied MD<b>3</b> may be selectively generated in the third data structure M<b>3</b>, such that the third section of the first user data write UDW<b>1</b> may not be tracked in the third data structure M<b>3</b> (and the first and second sections of the first user data write UDW<b>1</b> may be tracked in the third data structure M<b>3</b>).</p><p id="p-0134" num="0133">Referring to <figref idref="DRAWINGS">FIG. <b>8</b>C</figref>, at a second time t<sub>2</sub>, the LMCP process based on the second data structure M<b>2</b> may be completed, with the data associated with all of the storage locations having been copied. A second user data write UDW<b>2</b> may occur at the second time t<sub>2</sub>, such that a fourth section, a fifth section, and a sixth section of the second user data write UDW<b>2</b> may all occur at storage locations corresponding to either the planned and copied bitmap CBM or at storage locations of the second data structure that are outside of the planned to copy section O. Accordingly, third status identifier bits indicating a location of a source data to be copied MD<b>3</b> may be selectively generated in the third data structure M<b>3</b>, such that all of the sections of the second user data write UDW<b>2</b> may be tracked in the third data structure M<b>3</b>.</p><p id="p-0135" num="0134"><figref idref="DRAWINGS">FIG. <b>9</b>A</figref>, <figref idref="DRAWINGS">FIGS. <b>9</b>B, and <b>9</b>C</figref> (collectively, <figref idref="DRAWINGS">FIG. <b>9</b></figref>) are bitmap vision diagrams depicting a method for tracking a progress of data copying for a live migration using the planned but yet to be copied bitmap of <figref idref="DRAWINGS">FIG. <b>8</b></figref> and tracking a planned and copied section by inverting a bit state used to track the planned but yet to be copied section, according to some embodiments of the present disclosure.</p><p id="p-0136" num="0135">Referring to <figref idref="DRAWINGS">FIG. <b>9</b></figref>, a single bitmap, a planned and yet to be copied bitmap/planned and copied bitmap YBM/CBM (&#x201c;YBM/CMB bitmap&#x201d;), may be created and used by the live migration controller <b>210</b><i>b </i>to track both sections. For example, the live migration controller <b>210</b><i>b </i>may identify locations in the bitmap corresponding to the planned but yet to be copied section YS of the source storage <b>200</b> with a first bit state (e.g., a &#x201c;1&#x201d;). Referring to <figref idref="DRAWINGS">FIG. <b>9</b>A</figref>, all of the status identifiers associated with the YBM/CMB bitmap may be associated with a planned but yet to be copied section of the source storage <b>200</b> at a zeroth time t<sub>0</sub>. Referring to <figref idref="DRAWINGS">FIG. <b>9</b>B</figref> and <figref idref="DRAWINGS">FIG. <b>9</b>C</figref>, the bitmap locations corresponding to the planned and copied bitmap may be identified by inverting the first bit state to a second bit state (e.g., a &#x201c;0&#x201d;) after the source data associated with the bitmap locations has been copied by the live migration server <b>100</b><i>b</i>. Accordingly, a memory size of the bitmaps used to track the current copy location may be reduced. For example, a single planned and yet to be copied bitmap YBM may be used instead of using three bitmaps (e.g., a planned and copied bitmap CBM, a planned but yet to be copied bitmap YBM, and an unmapped bitmap).</p><p id="p-0137" num="0136"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a system diagram including a bitmap vision diagram depicting a system and method for tracking a progress of data copying for a live migration process using a second data structure and a selective clearing of second status identifiers in the second data structure, according to some embodiments of the present disclosure.</p><p id="p-0138" num="0137">Referring to <figref idref="DRAWINGS">FIG. <b>10</b></figref>, in some embodiments, the live migration controller <b>210</b><i>b </i>may reduce redundant copying by the live migration server <b>100</b><i>b </i>by selectively clearing (e.g., resetting or changing a dirty bit from a &#x201c;1&#x201d; to a &#x201c;0&#x201d;) second status identifier bits indicating a location of a source data to be copied MD<b>2</b> from a second data structure M<b>2</b> (without referring to a planned but yet to be copied section YS or a planned and copied section CS). For example, the live migration controller <b>210</b><i>b </i>may monitor (e.g., in parallel) user data writes UDW and a current copying locations CCL. For example, the live migration controller <b>210</b><i>b </i>may monitor a first user data write UDW<b>1</b> at a first time t<sub>1 </sub>and generate the second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., set &#x201c;1&#x201d;) in the second data structure M<b>2</b> corresponding to all locations of the first data write UDW<b>1</b> (e.g., sections <b>1</b>, <b>2</b>, and <b>3</b>). Thus, at the first time t<sub>1</sub>, all the bitmap locations corresponding to the locations of the first user data write UDW<b>1</b> may have second status identifier bits indicating a location of a source data to be copied MD<b>2</b> (e.g., dirty bits), even at section <b>2</b>. Based on a second status identifier bit indicating a location of a source data to be copied MD<b>2</b> (e.g., a dirty bit or &#x201c;1&#x201d;) being identified at a second time t<sub>2 </sub>(a later time than the first time t<sub>1</sub>) as corresponding with the current copying location CCL, the live migration controller <b>210</b><i>b </i>may clear the second status identifier bit indicating a location of a source data to be copied MD<b>2</b> from the second data structure M<b>2</b> (e.g., may clear a &#x201c;1&#x201d; bit to a &#x201c;0&#x201d; bit) associated with the current copying location CCL (e.g., the dirty bits at section <b>2</b>) because the data associated with the dirty bits (1's) has been copied from the source storage <b>200</b> and, thus, need not be copied at a later LMCP iteration. In some embodiments, the live migration controller <b>210</b><i>b </i>may clear (e.g., automatically clear) entries in the second data structure M<b>2</b> corresponding to the current copying location CCL (e.g., without determining whether the corresponding entry is set to a &#x201c;1&#x201d; bit or a &#x201c;0&#x201d; bit).</p><p id="p-0139" num="0138">In some embodiments, using the selective clearing method, the system <b>1</b> may not incorporate a first data structure M<b>1</b> (or alternate data structure) to track the current copying location CCL/planned and copied section CS/planned but yet to be copied section YS, or to track the current copying location CCL/planned and copied bitmap CBM/planned but yet to be copied bitmap YBM. For example, the user data writes UDW may be tracked using only a second data structure M<b>2</b> and a short term of time of the first data structure M<b>1</b> (e.g., during a transferring of the first data structure M<b>1</b> to the live migration server <b>100</b><i>b</i>). This may result in a more efficient memory usage because the first data structure M<b>1</b> may be recycled in the live migration controller memory <b>220</b><i>b </i>after (e.g., right after) it has been transferred to live migration server <b>100</b><i>b</i>. According to such selective clearing embodiments, during most of the live migration operation time, except when transferring the second data structure M<b>2</b> (or a subsequent iteration of a dirty bitmap, e.g., a third data structure M<b>3</b>), only a dirty bitmap tracking may be performed.</p><p id="p-0140" num="0139">Thus, selective clearing methods may provide several improvements and advantages over other methods. For example, in some embodiments, selective generation methods may use one or three copies of a subdivided first data structure M<b>1</b> bitmap memory. In some embodiments, selective generation methods may read a current planned but yet to be copied section YS/planned and yet to be copied bitmap YBM status, clear the status to 0, and write a &#x201c;1&#x201d; bit to the planned and copied section CS/planned and copied bitmap CBM. Contrastingly, in some embodiments, selective clearing methods may not use a first data structure M<b>1</b>. As a result, less memory may be used for most of the operation time. Furthermore, in some embodiments, selective clearing may not perform an extra read and write to the planned and copied section CS/planned and copied bitmap CBM and a planned but yet to be copied YS/planned but yet to be copied bitmap YBM database.</p><p id="p-0141" num="0140"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a simplified summary flowchart depicting example operations of methods for tracking a progress of data copying for a live migration process using aspects of methods described above, with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>-<b>10</b></figref>, according to some embodiments of the present disclosure.</p><p id="p-0142" num="0141">Referring to <figref idref="DRAWINGS">FIG. <b>11</b></figref>, a method <b>1100</b> for tracking a progress of data copying for a live migration may include: receiving a request, from a migration server, to transfer data from a source storage to a target storage (operation <b>1101</b>); transferring a first data structure from a storage controller to the live migration server, the first data structure including a first status identifier (operation <b>1102</b>); clearing all locations in a second data structure (operation <b>1103</b>); selectively generating a second status identifier (e.g., set &#x201c;1&#x201d; to a location) in the second data structure, based on a current copying location of the live migration server (operation <b>1104</b>A); or non-selectively generating a second status identifier in the second data structure, and selectively clearing the second status identifier (e.g., clear a location to &#x201c;0&#x201d;) from the second data structure, based on a current copying location of the live migration server (operation <b>1104</b>B); and transferring the second data structure to the live migration server (operation <b>1105</b>).</p><p id="p-0143" num="0142"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a flowchart depicting example operations of selective generation methods for tracking a progress of data copying for a live migration process, according to some embodiments of the present disclosure.</p><p id="p-0144" num="0143">Referring to <figref idref="DRAWINGS">FIG. <b>12</b></figref>, a method <b>1200</b> for tracking a progress of data copying for a live migration may include: sending, by a live migration (&#x201c;LM&#x201d;) server a request to a live migration controller (operation <b>1201</b>); generating, by the live migration controller, a first data structure M<b>1</b> (e.g., a bitmap of the mapped pages (&#x201c;BMP&#x201d;)) (operation <b>1202</b>); initializing a second data structure M<b>2</b> (e.g., an initial or subsequent BDP) and setting (e.g., clearing) all of the status identifier bits to 0's (operation <b>1203</b>); determining whether a user write request (e.g., a normal user write request) has issued from a source storage device (operation <b>1204</b>) (note: operations on the left side of the flowchart may be associated with the second data structure M<b>2</b>, while operations on the right side of the flowchart may be associated with the first data structure M<b>1</b>; the operations on the left side and the right side of the flowchart may occur substantially in parallel); generating, by a source storage controller, a write command to the source storage (operation <b>1205</b>); writing a user data write UDW to the source storage (operation <b>1206</b>); snooping (e.g., monitoring), by live migration controller, user data writes UDW to storage locations (e.g., LBAs) of the source storage (e.g., by extracting LBA addresses associated with the user data writes UDW) (operation <b>1207</b>); determining, by the live migration controller, whether to generate dirty bits in the second data structure M<b>2</b>, based on determining whether a user data write UDW occurred in a planned but yet to be copied section YS/YBM (e.g., by determining whether a status identifier bit of the planned but yet to be copied bitmap YS/YBM, corresponding to an LBA address of the user data write UDW, is set to &#x201c;1,&#x201d; thereby indicating that the LBA address is within the planned but yet to be copied section YS/YBM) (operation <b>1208</b>) (see also related operation <b>1218</b>); generating a dirty bit in the second data structure M<b>2</b> based on determining that the user data write UDW has occurred in the planned but yet to be copied section YS/YBM (operation <b>1209</b>A); disabling (or preventing or foregoing) a generation of a dirty bit in the second data structure M<b>2</b> based on determining that the user data write UDW has not occurred in the planned but yet to be copied section YS/YBM (operation <b>1209</b>B); determining whether the data copying, based on a host version of the first data structure M<b>1</b>&#x2032; in the live migration server <b>100</b><i>b </i>(e.g., the BMP), has finished (and looping back to operation <b>1204</b> based on determining that the data copying has not finished) (operation <b>1210</b>); initializing, by the live migration controller, a third data structure M<b>3</b> (e.g., by clearing all status identifier bits of the third data structure M<b>3</b> to &#x201c;0&#x201d;) (operation <b>1211</b>); transferring the second data structure M<b>2</b> to the live migration server (operation <b>1212</b>); transferring the first data structure M<b>1</b> (e.g., the BMP) to the live migration server (operation <b>1213</b>); initializing, by the live migration controller, the planned and copied section CS/planned and copied bitmap CBM (e.g., by setting all status identifier bits to 0's), and the planned but yet to be copied section YS/planned but yet to be copied bitmap YBM (e.g., by setting all status identifier bits to correspond to the status identifier bits (e.g., 1's) of the first data structure M<b>1</b>) (operation <b>1214</b>); determining whether an LM Copy Read has occurred (and looping back to operation <b>1215</b> based on determining that no LM Copy Read has occurred) (operation <b>1215</b>); snooping (e.g., monitoring) the LMCPR read LBA address in response to a determination that an LM Copy Read has occurred (e.g., by extracting LBA addresses associated with the LMCPR read) (operation <b>1216</b>); reading, by the live migration server, from the source storage (based on determining that an LM Copy Read has occurred) (operation <b>1217</b>); clearing a status identifier bit entry (e.g., a planned but yet to be copied section status identifier bit indicating a location of a source data to be copied YS.MD<b>1</b>, or YS/YBM.MD<b>1</b>) in the planned but yet to be copied section YS/planned but yet to be copied bitmap YBM (e.g., based on the snooped LBA address) (operation <b>1218</b>) (note: dashed line <b>1218</b><i>x </i>indicates that status identifier bits set to 1 at operation <b>1208</b> may be cleared at operation <b>1218</b> based on the corresponding data being copied); adding (e.g., setting) a status identifier bit entry (e.g., a planned and copied section status identifier bit indicating a location of a source data that has been copied CS.MD<b>1</b>, or CS/CBM.MD<b>1</b>) in the planned and copied section CS/planned and copied bitmap CBM (e.g., based on the snooped LBA address) (operation <b>1219</b>); determining whether the data copying of the first data structure M<b>1</b> has finished (operation <b>1220</b>) (note: dashed line <b>1220</b><i>x </i>indicates that both of operations <b>1210</b> and <b>1220</b> may include checking the same BMP COPY END result&#x2014;e.g., in the same database); and stopping the LMCPR snooping operations of the current iteration based on determining that the data copying of the first data structure M<b>1</b>, by the live migration server, has finished (operation <b>1221</b>).</p><p id="p-0145" num="0144"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a flowchart depicting example operations of selective clearing methods for tracking a progress of data copying for a live migration process, according to some embodiments of the present disclosure.</p><p id="p-0146" num="0145">Referring to <figref idref="DRAWINGS">FIG. <b>13</b></figref>, a method <b>1300</b> for tracking a progress of data copying for a live migration may include: sending, by a live migration (&#x201c;LM&#x201d;) server a request to a live migration controller (operation <b>1301</b>); generating, by the live migration controller, a first data structure M<b>1</b> (e.g., a bitmap of the mapped pages (&#x201c;BMP&#x201d;)) (operation <b>1302</b>); initializing (e.g., generating or creating) a second data structure M<b>2</b> (e.g., an initial or subsequent BDP) and setting (e.g., clearing) all of the status identifier bits to 0's (operation <b>1303</b>); determining whether a user write request (e.g., a normal user write request) has issued (e.g., occurred) from a source storage device (and looping back to operation <b>1304</b> based on determining that no user write request has issued) (operation <b>1304</b>) (note: operations on the left side of the flowchart may be associated with the second data structure M<b>2</b>, while operations on the right side of the flowchart may be associated with the first data structure M<b>1</b>; the operations on the left side and the right side of the flowchart may occur substantially in parallel); generating, by a source storage controller, a write command to the source storage (operation <b>1305</b>); writing a user data write UDW to the source storage (operation <b>1306</b>); snooping (e.g., monitoring), by live migration controller, user data writes UDW to storage locations (e.g., LBAs) of the source storage (e.g., by extracting LBA addresses associated with the user data writes UDW) (operation <b>1307</b>); generating dirty bits in the second data structure M<b>2</b> (operation <b>1308</b>) (see also related operation <b>1317</b>); determining whether the data copying, based on the first data structure M<b>1</b> (e.g., the BMP), has finished (and looping back to operation <b>1304</b> based on determining that the data copying, based on the first data structure M<b>1</b>, has not finished) (operation <b>1309</b>); initializing, by the live migration controller, a third data structure M<b>3</b> based on determining that the data copying, based on the first data structure M<b>1</b>, has finished (e.g., by setting all status identifier bits of the third data structure M<b>3</b> to &#x201c;0&#x201d;) (operation <b>1310</b>); transferring the second data structure M<b>2</b> to the live migration server (operation <b>1311</b>); transferring the first data structure M<b>1</b> (e.g., the BMP) to the live migration server (operation <b>1312</b>); determining whether an LM Copy Read has occurred (and looping back to operation <b>1313</b> based on determining that no LM Copy Read has occurred) (operation <b>1313</b>); snooping (e.g., monitoring) the LMCPR read LBA address based on determining that an LM Copy Read has occurred (e.g., by extracting LBA addresses associated with the LMCPR read) (operation <b>1314</b>); reading, by the live migration server, from the source storage (operation <b>1315</b>); clearing (e.g., to 0) the status identifier bit (e.g., the dirty bit) entry in the second data structure M<b>2</b> (e.g., based on the snooped LBA) (operation <b>1316</b>) (note: dashed line <b>1316</b><i>x </i>indicates dirty bits generated in the second data structure M<b>2</b> at operation <b>1308</b> may be selectively cleared at operation <b>1316</b>); determining whether the data copying of the first data structure M<b>1</b> has finished (operation <b>1317</b>) (note: dashed line <b>1317</b><i>x </i>indicates that both of operations <b>1309</b> and <b>1317</b> may include checking the same BMP COPY END result&#x2014;e.g., in the same database); and stopping the LMCPR snooping operations of the current iteration based on determining that the data copying of the first data structure M<b>1</b>, by the live migration server, has finished (operation <b>1318</b>).</p><p id="p-0147" num="0146">Accordingly, embodiments of the present disclosure provide improvements and advantages for tracking a progress of data copying during a live migration process. By selectively generating or selectively clearing dirty bits in a dirty bitmap, a redundant copying of source data may be reduced and computing resources (e.g., memory, bandwidth, power, and host or storage device processing) may be used more efficiently.</p><p id="p-0148" num="0147">While embodiments of the present disclosure have been particularly shown and described with reference to the embodiments described herein, it will be understood by those of ordinary skill in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present invention as set forth in the following claims and their equivalents.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method for tracking a progress of data copying for a live migration, the method comprising:<claim-text>transferring, by a storage controller, a first data structure to a live migration server, the first data structure comprising a first status identifier indicating a location of a source data to be copied from a source storage to a target storage; and</claim-text><claim-text>selectively generating, by the storage controller, a second status identifier in a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>monitoring, by the storage controller, the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure; and</claim-text><claim-text>monitoring, by the storage controller, the first user data write,</claim-text><claim-text>wherein the selectively generating the second status identifier in the second data structure based on the first current copying location comprises:<claim-text>tracking, by the storage controller, a planned but yet to be copied section of the source storage and a planned and copied section of the source storage, based on the first current copying location; and</claim-text><claim-text>generating the second status identifier in the second data structure based on the planned but yet to be copied section.</claim-text></claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises tracking a current copy index corresponding to:<claim-text>a start address of a continuous index; and</claim-text><claim-text>an end address of the continuous index,</claim-text><claim-text>the continuous index is associated with a planned to copy section comprising contiguous storage locations.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises tracking a planned but yet to be copied bitmap and a planned and copied bitmap, the planned but yet to be copied bitmap and the planned and copied bitmap, both, being associated with a planned to copy section, the planned to copy section comprising one or more distributed storage locations.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises:<claim-text>tracking a planned but yet to be copied bitmap associated with a planned to copy section comprising:<claim-text>both the planned but yet to be copied section and the planned and copied section; and</claim-text><claim-text>one or more distributed storage locations; and</claim-text></claim-text><claim-text>tracking, using the planned but yet to be copied bitmap, the planned and copied section by inverting a bit state used to track the planned but yet to be copied section.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. (canceled)</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>transferring the second data structure to the live migration server;</claim-text><claim-text>monitoring, by the storage controller, a second current copying location of the live migration server, the second current copying location corresponding to a copying of the source data based on the second data structure;</claim-text><claim-text>monitoring, by the storage controller, a second user data write to the source storage, the second user data write occurring during or after the transferring of the second data structure; and</claim-text><claim-text>selectively generating, by the storage controller, a third status identifier in a third data structure, based on the second current copying location of the live migration server, the third status identifier indicating a location of the second user data write.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A storage device for tracking a progress of data copying for a live migration, the storage device being configured to:<claim-text>transfer a first data structure from a storage controller to a live migration server, the first data structure comprising a first status identifier indicating a location of a source data to be copied from a source storage to a target storage; and</claim-text><claim-text>selectively generate, by the storage controller, a second status identifier in a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The storage device of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the storage device is configured to:<claim-text>monitor the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure; and</claim-text><claim-text>monitor the first user data write,</claim-text><claim-text>wherein the selectively generating the second status identifier in the second data structure based on the first current copying location comprises:<claim-text>tracking a planned but yet to be copied section of the source storage and a planned and copied section of the source storage, based on the first current copying location; and</claim-text><claim-text>generating the second status identifier in the second data structure based on the planned but yet to be copied section.</claim-text></claim-text></claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The storage device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises tracking a current copy index corresponding to:<claim-text>a start address of a continuous index; and</claim-text><claim-text>an end address of the continuous index,</claim-text><claim-text>the continuous index is associated with a planned to copy section comprising contiguous storage locations.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The storage device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises tracking a planned but yet to be copied bitmap and a planned and copied bitmap, the planned but yet to be copied bitmap and the planned and copied bitmap, both, being associated with a planned to copy section, the planned to copy section comprising one or more distributed storage locations.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The storage device of <claim-ref idref="CLM-00009">claim 9</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises:<claim-text>tracking a planned but yet to be copied bitmap associated with a planned to copy section comprising:<claim-text>both the planned but yet to be copied section and the planned and copied section; and</claim-text><claim-text>one or more distributed storage locations; and</claim-text></claim-text><claim-text>tracking, using the planned but yet to be copied bitmap, the planned and copied section by inverting a bit state used to track the planned but yet to be copied section.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. (canceled)</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The storage device of <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the storage device is configured to:<claim-text>transfer the second data structure to the live migration server;</claim-text><claim-text>monitor a second current copying location of the live migration server, the second current copying location corresponding to a copying of the source data based on the second data structure;</claim-text><claim-text>monitor a second user data write to the source storage, the second user data write occurring during or after the transferring of the second data structure; and</claim-text><claim-text>selectively generate a third status identifier in a third data structure, based on the second current copying location of the live migration server, the third status identifier indicating a location of the second user data write.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A system for tracking a progress of data copying for a live migration, the system comprising:<claim-text>a live migration server; and</claim-text><claim-text>a storage device,</claim-text><claim-text>wherein the storage device is configured to:<claim-text>transfer a first data structure from a storage controller to the live migration server, the first data structure comprising a first status identifier indicating a location of a source data to be copied from a source storage to a target storage; and</claim-text><claim-text>selectively generate, by the storage controller, a second status identifier in a second data structure, based on a first current copying location of the live migration server, the second status identifier indicating a location of a first user data write to the source storage.</claim-text></claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The system of <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the storage device is configured to:<claim-text>monitor the first current copying location, the first current copying location corresponding to a copying of the source data based on the first data structure; and</claim-text><claim-text>monitor the first user data write,</claim-text><claim-text>wherein the selectively generating the second status identifier in the second data structure based on the first current copying location comprises:<claim-text>tracking a planned but yet to be copied section of the source storage and a planned and copied section of the source storage, based on the first current copying location; and</claim-text><claim-text>generating the second status identifier in the second data structure based on the planned but yet to be copied section.</claim-text></claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises tracking a current copy index corresponding to:<claim-text>a start address of a continuous index; and</claim-text><claim-text>an end address of the continuous index,</claim-text><claim-text>the continuous index is associated with a planned to copy section comprising contiguous storage locations.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises tracking a planned but yet to be copied bitmap and a planned and copied bitmap, the planned but yet to be copied bitmap and the planned and copied bitmap, both, being associated with a planned to copy section, the planned to copy section comprising one or more distributed storage locations.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The system of <claim-ref idref="CLM-00016">claim 16</claim-ref>, wherein the tracking, based on the first current copying location, the planned but yet to be copied section and the planned and copied section comprises:<claim-text>tracking a planned but yet to be copied bitmap associated with a planned to copy section comprising:<claim-text>both the planned but yet to be copied section and the planned and copied section; and</claim-text><claim-text>one or more distributed storage locations; and</claim-text></claim-text><claim-text>tracking, using the planned but yet to be copied bitmap, the planned and copied section by inverting a bit state used to track the planned but yet to be copied section.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. (canceled)</claim-text></claim></claims></us-patent-application>