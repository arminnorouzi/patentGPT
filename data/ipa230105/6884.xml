<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006885A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006885</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17305118</doc-number><date>20210630</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>12</main-group><subgroup>24</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>12</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>082</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0883</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>41</main-group><subgroup>0853</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">TOPOLOGY COMPILER FOR NETWORK MANAGEMENT SYSTEM</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Juniper Networks, Inc.</orgname><address><city>Sunnyvale</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Henkel</last-name><first-name>Michael</first-name><address><city>Saratoga</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Moghe</last-name><first-name>Atul S.</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">An example controller device that manages a plurality of network devices includes one or more processing units implemented in circuitry and configured to receive, via an application programming interface (API) framework, an indication of an intent. The intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes. The one or more processing units are further configured to process the intent to select a topology compiler from a plurality of topology compilers and invoke, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate abstract configuration information. The one or more processing units are further configured to configure the network device based on the abstract configuration information.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="156.21mm" wi="151.13mm" file="US20230006885A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="197.78mm" wi="153.16mm" file="US20230006885A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="240.62mm" wi="178.56mm" file="US20230006885A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="207.60mm" wi="153.50mm" orientation="landscape" file="US20230006885A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="207.01mm" wi="153.50mm" orientation="landscape" file="US20230006885A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="207.01mm" wi="153.50mm" orientation="landscape" file="US20230006885A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="213.61mm" wi="145.29mm" orientation="landscape" file="US20230006885A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="234.61mm" wi="156.97mm" file="US20230006885A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="235.12mm" wi="128.10mm" file="US20230006885A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="233.85mm" wi="133.18mm" file="US20230006885A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="212.43mm" wi="128.61mm" file="US20230006885A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">TECHNICAL FIELD</heading><p id="p-0002" num="0001">The disclosure relates to computer networks, and more particularly, to management of network devices.</p><heading id="h-0002" level="1">BACKGROUND</heading><p id="p-0003" num="0002">A computer network is a collection of interconnected computing devices that can exchange data and share resources. A variety of devices operate to facilitate communication between the computing devices. For example, a computer network may include routers, switches, gateways, firewalls, and a variety of other devices to provide and facilitate network communication.</p><p id="p-0004" num="0003">These network devices typically include mechanisms, such as management interfaces, for locally or remotely configuring the devices. By interacting with the management interface, a client can perform configuration tasks as well as perform operational commands to collect and view operational data of the managed devices. For example, the clients may configure interface cards of the device, adjust parameters for supported network protocols, specify physical components within the device, modify routing information maintained by a router, access software modules and other resources residing on the device, and perform other configuration tasks. In addition, the clients may allow a user to view current operating parameters, system logs, information related to network connectivity, network activity or other status information from the devices as well as view and react to event information received from the devices.</p><p id="p-0005" num="0004">Network configuration services may be performed by multiple distinct devices, such as routers with service cards and/or dedicated service devices. Such services include connectivity services such as Layer Three Virtual Private Network (L3VPN), Virtual Private Local Area Network Service (VPLS), and Peer to Peer (P2P) services. Other services include network configuration services, such as Dot1q VLAN Service. Network management systems (NMSs) and NMS devices, also referred to as controllers or controller devices, may support these services such that an administrator can easily create and manage these high-level network configuration services.</p><p id="p-0006" num="0005">In particular, user configuration of devices may be referred to as &#x201c;intents.&#x201d; An intent-based networking system lets administrators describe the intended network/compute/storage state. User intents can be categorized as business policies or stateless intents. Business policies, or stateful intents, may be resolved based on the current state of a network. Stateless intents may be fully declarative ways of describing an intended network/compute/storage state, without concern for a current network state.</p><p id="p-0007" num="0006">Intents may be represented as intent data models, which may be modeled using unified graphs. Intent data models may be represented as connected graphs, so that business policies can be implemented across intent data models. For example, data models may be represented using connected graphs having vertices connected with has-edges and reference (ref) edges. Controller devices may model intent data models as unified graphs, so that the intend models can be represented as connected. In this manner, business policies can be implemented across intent data models. When Intents are modeled using a unified graph model, extending new intent support needs to extend the graph model and compilation logic.</p><p id="p-0008" num="0007">In order to configure devices to perform the intents, a user (such as an administrator) may write translation programs that translate high-level configuration instructions (e.g., instructions according to an intent data model, which may be expressed as a unified graph model) to low-level configuration instructions (e.g., instructions according to a device configuration model). As part of configuration service support, the user/administrator may provide the intent data model and a mapping between the intent data model to a device configuration model.</p><p id="p-0009" num="0008">In order to simplify the mapping definition for the user, controller devices may be designed to provide the capability to define the mappings in a simple way. For example, some controller devices provide the use of Velocity Templates and/or Extensible Stylesheet Language Transformations (XSLT). Such translators contain the translation or mapping logic from the intent data model to the low-level device configuration model. Typically, a relatively small number of changes in the intent data model impact a relatively large number of properties across device configurations. Different translators may be used when services are created, updated, and deleted from the intent data model.</p><heading id="h-0003" level="1">SUMMARY</heading><p id="p-0010" num="0009">In general, this disclosure describes techniques for managing network devices. A network management system (NMS) device, also referred herein as a controller or controller device, may be configured to translate high-level configuration (intents received from an administrator for a plurality of managed network devices) to low-level configuration (to be applied to the managed network devices themselves). In some instances, the controller device may receive an indication of a topology and a role for a resource device and generate device-level configuration information for the resource device. For example, an administrator (e.g., a human being) may select a topology (e.g., spine or leaf, 3-stage Clos, or 5-stage Clos) and role for the resource device and provide an intent. In some examples, the controller device may generate device-level configuration for the resource device based on the role of the resource device, the topology, and the intent. In some instances, intents provided by the administrator to the controller device may be associate with many (e.g., more than 10, more than 20, etc.) roles. As the number of roles increases, a complexity of operating the controller device increases, which may result in an administrator assigning an incorrect role or topology to a resource device such that the controller device is not able to correctly implement the intent.</p><p id="p-0011" num="0010">According to the techniques of this disclosure, the controller device may support a plurality of topology compilers, where each topology compiler is associated with a respective topology. For example, a first topology compiler may be associated with a 3-stage Clos network and a second topology compiler may be associated with a 5-stage Clos network. Rather than relying on an administrator to assign a role to each resource device, the topology compiler may be configured to assign the rule to each resource device. In this way, setting up a fabric using a topology may be implemented with less interaction from the administrator, which may improve a reliability of the fabric.</p><p id="p-0012" num="0011">Moreover, rather than relying on a set of instructions for all topologies, each resource device supporting a topology may invoke the respective topology compiler assigned to the topology. For example, a first resource device may invoke a 3-state Clos network topology compiler along with an indication of the role of the first resource device, and the 3-stage Clos network topology compiler may generate an abstract configuration for the first resource device. In this example, the first resource device may generate device-level configuration information to configure the first resource device to implement the intent provided by the administrator. In this way, a resource controller for the resource device may auto-generate the necessary configuration information in view of the chosen topology, which may reduce a time for configuring resource devices to implement an intent.</p><p id="p-0013" num="0012">Further, the controller device may implement an &#x201c;extensible framework&#x201d; that may permit one or more additional topology compilers while maintaining a common framework. In this way, the controller device may be configured to support a new topology while operating existing topologies at runtime and without modifying framework for the existing topologies.</p><p id="p-0014" num="0013">In one example, a method includes receiving, by a controller device that manages a plurality of network devices, via an application programming interface (API) framework, an indication of an intent. The intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes. The method further includes processing, by the controller device, the intent to select a topology compiler from a plurality of topology compilers and invoking, by the controller device, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate abstract configuration information. The method further includes configuring, by the controller device, the network device based on the abstract configuration information.</p><p id="p-0015" num="0014">In another example, a controller device that manages a plurality of network devices includes one or more processing units implemented in circuitry and configured to receive, via an application programming interface (API) framework, an indication of an intent. The intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes. The one or more processing units are further configured to process the intent to select a topology compiler from a plurality of topology compilers and invoke, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate abstract configuration information. The one or more processing units are further configured to configure the network device based on the abstract configuration information.</p><p id="p-0016" num="0015">In one example, a computer-readable storage medium having stored thereon instructions that, when executed, causes a processor of a controller device that manages a plurality of network devices to receive, via an application programming interface (API) framework, an indication of an intent. The intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes. The instructions further cause the processor to process the intent to select a topology compiler from a plurality of topology compilers and invoke, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate abstract configuration information. The instructions further cause the processor to configure the network device based on the abstract configuration information.</p><p id="p-0017" num="0016">The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example including elements of an enterprise network that are managed using a management device.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an example set of components for the management device of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a conceptual diagram illustrating example assignment of roles to elements in accordance with the techniques of this disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a conceptual diagram illustrating example of generating an abstract device configuration for a resource device in accordance with the techniques of this disclosure.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a conceptual diagram illustrating example of generating an abstract device configuration for a service device in accordance with the techniques of this disclosure.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a conceptual diagram illustrating example of generating a device-level configuration in accordance with the techniques of this disclosure.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating an example Clos network.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating an example process for determining a role for a network device using a topology compiler according to techniques of this disclosure.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating an example process for generating an abstract configuration using a topology compiler according to techniques of this disclosure.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart illustrating an example process for configuring a device resource using a topology compiler according to techniques of this disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram illustrating an example including elements of an enterprise network <b>2</b> that are managed using a controller device <b>10</b>. Managed elements <b>14</b>A-<b>14</b>G (collectively, &#x201c;elements <b>14</b>&#x201d;) of enterprise network <b>2</b> include network devices interconnected via communication links to form a communication topology in order to exchange resources and information. Elements <b>14</b> (also generally referred to as network devices or remote network devices) may include, for example, routers, switches, gateways, bridges, hubs, servers, firewalls or other intrusion detection systems (IDS) or intrusion prevention systems (IDP), computing devices, computing terminals, printers, other network devices, or a combination of such devices. While described in this disclosure as transmitting, conveying, or otherwise supporting packets, enterprise network <b>2</b> may transmit data according to any other discrete data unit defined by any other protocol, such as a cell defined by the Asynchronous Transfer Mode (ATM) protocol, or a datagram defined by the User Datagram Protocol (UDP). Communication links interconnecting elements <b>14</b> may be physical links (e.g., optical, copper, and the like), wireless, or any combination thereof.</p><p id="p-0029" num="0028">Enterprise network <b>2</b> is shown coupled to public network <b>18</b> (e.g., the Internet) via a communication link. Public network <b>18</b> may include, for example, one or more client computing devices. Public network <b>18</b> may provide access to web servers, application servers, public databases, media servers, end-user devices, and other types of network resource devices and content.</p><p id="p-0030" num="0029">Controller device <b>10</b> is communicatively coupled to elements <b>14</b> via enterprise network <b>2</b>. Controller device <b>10</b>, in some examples, forms part of a device management system, although only one device of the device management system is illustrated for purpose of example in <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Controller device <b>10</b> may be coupled either directly or indirectly to the various elements <b>14</b>. Once elements <b>14</b> are deployed and activated, administrator <b>12</b> uses controller device <b>10</b> to manage the network devices using a device management protocol. One example device protocol is the Simple Network Management Protocol (SNMP) that allows controller device <b>10</b> to traverse and modify management information bases (MIBs) that store configuration data within each of managed elements <b>14</b>. Further details of the SNMP protocol can be found in Harrington et al., RFC 3411, &#x201c;An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks,&#x201d; Network Working Group, the Internet Engineering Task Force draft, December 2002, available at http://tools.ietf.org/html/rfc3411, the entire contents of which are incorporated herein by reference.</p><p id="p-0031" num="0030">Controller device <b>10</b>, also referred to as a network management system (NMS) or NMS device, and elements <b>14</b> are centrally maintained by an IT group of the enterprise. Administrator <b>12</b> interacts with controller device <b>10</b> to remotely monitor and configure elements <b>14</b>. For example, administrator <b>12</b> may receive alerts from controller device <b>10</b> regarding any of elements <b>14</b>, view configuration data of elements <b>14</b>, modify the configurations data of elements <b>14</b>, add new network devices to enterprise network <b>2</b>, remove existing network devices from enterprise network <b>2</b>, or otherwise manipulate the enterprise network <b>2</b> and network devices therein. Although described with respect to an enterprise network, the techniques of this disclosure are applicable to other network types, public and private, including LANs, VLANs, VPNs, and the like.</p><p id="p-0032" num="0031">In some examples, administrator <b>12</b> uses controller device <b>10</b> or a local workstation to interact directly with elements <b>14</b>, e.g., through telnet, secure shell (SSH), or other such communication sessions. That is, elements <b>14</b> generally provide interfaces for direct interaction, such as command line interfaces (CLIs), web-based interfaces, graphical user interfaces (GUIs), or the like, by which a user can interact with the devices to directly issue text-based commands. For example, these interfaces typically allow a user to interact directly with the device, e.g., through a telnet, secure shell (SSH), hypertext transfer protocol (HTTP), or other network session, to enter text in accordance with a defined syntax to submit commands to the managed element. In some examples, the user initiates an SSH session <b>15</b> with one of elements <b>14</b>, e.g., element <b>14</b>F, using controller device <b>10</b>, to directly configure element <b>14</b>F. In this manner, a user can provide commands in a format for execution directly to elements <b>14</b>.</p><p id="p-0033" num="0032">Further, administrator <b>12</b> can also create scripts that can be submitted by controller device <b>10</b> to any or all of elements <b>14</b>. For example, in addition to a CLI interface, elements <b>14</b> also provide interfaces for receiving scripts that specify the commands in accordance with a scripting language. In a sense, the scripts may be output by controller device <b>10</b> to automatically invoke corresponding remote procedure calls (RPCs) on the managed elements <b>14</b>. The scripts may conform to, e.g., extensible markup language (XML) or another data description language.</p><p id="p-0034" num="0033">Administrator <b>12</b> uses controller device <b>10</b> to configure elements <b>14</b> to specify certain operational characteristics that further the objectives of administrator <b>12</b>. For example, administrator <b>12</b> may specify for an element <b>14</b> a particular operational policy regarding security, device accessibility, traffic engineering, quality of service (QoS), network address translation (NAT), packet filtering, packet forwarding, rate limiting, or other policies. Controller device <b>10</b> uses one or more network management protocols designed for management of configuration data within managed network elements <b>14</b>, such as the SNMP protocol or the Network Configuration Protocol (NETCONF) protocol or a derivative thereof, such as the Juniper Device Management Interface, to perform the configuration. In general, NETCONF provides mechanisms for configuring network devices and uses an Extensible Markup Language (XML)-based data encoding for configuration data, which may include policy data. NETCONF is described in Enns, &#x201c;NETCONF Configuration Protocol,&#x201d; Network Working Group, RFC 4741, December 2006, available at tools.ietf.org/html/rfc4741, the entire contents of which are incorporated herein by reference. Controller device <b>10</b> may establish NETCONF sessions with one or more of elements <b>14</b>.</p><p id="p-0035" num="0034">Controller device <b>10</b> may be configured to accept high-level configuration data, or intents, from administrator <b>12</b> (which may be expressed as structured input parameters, e.g., according to YANG, which is described in Bjorklund, &#x201c;YANG&#x2014;A Data Modeling Language for the Network Configuration Protocol (NETCONF),&#x201d; Internet Engineering Task Force. RFC 6020, October 2010, available at tools.ietf.org/html/rfc6020). Controller device <b>10</b> may also be configured to output respective sets of low-level device configuration data, e.g., device configuration additions, modifications, and removals. Additional details regarding an example process for translating high level configuration information to low-level device configuration information can be found in, e.g., Jiang et al., &#x201c;TRANSLATING HIGH-LEVEL CONFIGURATION INSTRUCTIONS TO LOW-LEVEL DEVICE CONFIGURATION,&#x201d; U.S. patent application Ser. No. 15/198,657, filed Jun. 30, 2016, the entire contents of which are hereby incorporated by reference. This disclosure refers to low-level device configuration produced from intents (i.e., produced by compiling or translating the intents) as &#x201c;device-level intent configuration information&#x201d; or &#x201c;intent configuration,&#x201d; to distinguish this device-level configuration from out of band (OOB) device-level configuration. In some examples, controller device <b>10</b> may use YANG modeling for an intent data model and low-level device configuration models. This data may contain relations across YANG entities, such as list items and containers. In some examples, controller device <b>10</b> may convert a YANG data model into a database model, and convert YANG validations into data validations. Techniques for managing network devices using a graph model for high level configuration data is described in &#x201c;CONFIGURING AND MANAGING NETWORK DEVICES USING PROGRAM OVERLAY ON YANG-BASED GRAPH DATABASE.&#x201d; U.S. patent application Ser. No. 15/462,465, filed Mar. 17, 2017, the entire contents of which are hereby incorporated by reference.</p><p id="p-0036" num="0035">Controller device <b>10</b> may receive data from one of administrators <b>12</b> representing any or all of create, update, and/or delete actions with respect to the intent data model. Controller device <b>10</b> may be configured to use the same compilation logic for each of create, update, and delete as applied to the graph model.</p><p id="p-0037" num="0036">In general, controllers like controller device <b>10</b> may use a hierarchical data model for intents, low-level data models, and resources. The hierarchical data model can be based on YANG or YAML. The hierarchical data model can be represented as a graph, as discussed above. Use of intents may ease the management of networks. Intents are declarative. To realize intents, controller device <b>10</b> attempts to select optimal resources.</p><p id="p-0038" num="0037">In general, controller device <b>10</b> may be configured to translate high-level configuration (e.g., intents received from an administrator for a plurality of managed network devices) to low-level configuration, which may also be referred to herein as &#x201c;device-level configuration&#x201d; (to be applied to the managed network devices themselves). In some instances, controller device <b>10</b> may receive an indication of a topology and a role for element <b>14</b>A and generate device-level configuration information for element <b>14</b>A. For example, administrator <b>12</b> may select a topology and role for element <b>14</b>A and provide an intent. In some examples, controller device <b>10</b> may generate device-level configuration for element <b>14</b>A based on the role (e.g., spine or leaf) of element <b>14</b>A in the topology (e.g., a spine and leaf topology), the topology, and the intent. In some instances, intents provided by administrator <b>12</b> to controller device <b>10</b> may be associate with many (e.g., more than 10, more than 20, etc.) of roles. As the number of roles increases, a complexity of operating the controller device increases, which may result in administrator <b>12</b> assigning an incorrect role or topology to a resource device such that controller device <b>10</b> is not able to correctly implement the intent.</p><p id="p-0039" num="0038">According to the techniques of this disclosure, controller device <b>10</b> may support a plurality of topology compilers, where each topology compiler is associated with a respective topology. For example, a first topology compiler may be associated with a 3-stage Clos network and a second topology compiler may be associated with a 5-stage Clos network. Rather than relying on administrator <b>12</b> to assign a role to each resource device, the topology compiler may be configured to assign the rule to each resource device. In this way, setting up a fabric using a topology may be implemented with less interaction from the administrator, which may improve a reliability of the fabric.</p><p id="p-0040" num="0039">Moreover, rather than relying on a set of instructions for all topologies, each of elements <b>14</b> may invoke the topology compiler assigned to the topology. For example, element <b>14</b>A may invoke a 3-state Clos network topology compiler along with an indication of the role of the first resource device, and the 3-stage Clos network topology compiler may generate an abstract configuration for the first resource device. In this example, element <b>14</b>A may generate device-level configuration information to configure element <b>14</b>A to implement the intent provided by administrator <b>12</b>. In this way, controller device <b>10</b> may auto-generate configuration information in view of the chosen topology, which may reduce a time for configuring resource devices to implement an intent.</p><p id="p-0041" num="0040">Further, controller device <b>10</b> may implement an &#x201c;extensible framework&#x201d; that may permit one or more additional topology compilers while maintaining a common framework. In this way, controller device <b>10</b> may be configured to support a new topology while operating existing topologies at runtime and without modifying framework for the existing topologies. For instance, each of the topology compilers may comprise pluggable topology compilers configurated to conform to a standard invocable by the extensible framework (e.g., an application programming interface (API) framework).</p><p id="p-0042" num="0041">For example, controller device <b>10</b> may receive an indication of an intent. In some examples, the intent includes data indicating an update to a data structure including a plurality of nodes representing elements <b>14</b> and a plurality of edges connecting the plurality of nodes. Controller device <b>10</b> may process the intent to select a topology compiler from a plurality of topology compilers. For example, controller device <b>10</b> may select a topology of a plurality of topologies for the elements <b>14</b> based on the intent and connectivity information of elements <b>14</b>. In this example, controller device <b>10</b> may select the topology compiler that is associated with (e.g., assigned to) the selected topology.</p><p id="p-0043" num="0042">Controller device <b>10</b> may invoke, via the API framework, the topology compiler using a role of element <b>14</b>A and an indication of element <b>14</b>A as input to generate abstract configuration information. In this example, controller device <b>10</b> may configure element <b>14</b>A based on the abstract configuration information. In this way, controller device <b>10</b> may auto-generate configuration information in view of the chosen topology, which may reduce a time for configuring resource devices to implement an intent. Moreover, using the API framework may comprise an extensible framework, which may allow the plurality of compilers conforming to a standard invocable by the extensible framework to be modified at runtime such that new topology compilers may be added and existing topology compilers can be removed. In this way, controller device <b>10</b> may be modified at runtime, which may reduce a downtime of network <b>2</b>.</p><p id="p-0044" num="0043"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a block diagram illustrating an example set of components for controller device <b>10</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. In this example, controller device <b>10</b> includes control unit <b>22</b>, network interface <b>34</b>, and user interface <b>36</b>. Network interface <b>34</b> represents an example interface that can communicatively couple controller device <b>10</b> to an external device, e.g., one of elements <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Network interface <b>34</b> may represent a wireless and/or wired interface, e.g., an Ethernet interface or a wireless radio configured to communicate according to a wireless standard, such as one or more of the IEEE 802.11 wireless networking protocols (such as 802.11 a/b/g/n or other such wireless protocols). Controller device <b>10</b> may include multiple network interfaces in various examples, although only one network interface is illustrated for purposes of example.</p><p id="p-0045" num="0044">Control unit <b>22</b> represents any combination of hardware, software, and/or firmware for implementing the functionality attributed to control unit <b>22</b> and its constituent modules and elements. When control unit <b>22</b> includes software or firmware, control unit <b>22</b> further includes any necessary hardware for storing and executing the software or firmware, such as one or more processors or processing units. In general, a processing unit may include one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. Furthermore, a processing unit is generally implemented using fixed and/or programmable logic circuitry.</p><p id="p-0046" num="0045">User interface <b>36</b> represents one or more interfaces by which a user, such as administrator <b>12</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) interacts with controller device <b>10</b>, e.g., to provide input and receive output. For example, user interface <b>36</b> may represent one or more of a monitor, keyboard, mouse, touchscreen, touchpad, trackpad, speakers, camera, microphone, or the like. Furthermore, although in this example controller device <b>10</b> includes a user interface, it should be understood that administrator <b>12</b> need not directly interact with controller device <b>10</b>, but instead may access controller device <b>10</b> remotely, e.g., via network interface <b>34</b>.</p><p id="p-0047" num="0046">In this example, control unit <b>22</b> includes user interface module <b>38</b>, network interface module <b>32</b>, and management module <b>24</b>. Control unit <b>22</b> executes user interface module <b>38</b> to receive input from and/or provide output to user interface <b>36</b>. Control unit <b>22</b> also executes network interface module <b>32</b> to send and receive data (e.g., packets) via network interface <b>34</b>. User interface module <b>38</b>, network interface module <b>32</b>, and management module <b>24</b> may again be implemented as respective hardware units, or in software or firmware, or a combination thereof.</p><p id="p-0048" num="0047">Control unit <b>22</b> executes management module <b>24</b> to manage various network devices, e.g., elements <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Management includes, for example, configuring the network devices according to instructions received from a user (e.g., administrator <b>12</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) and providing the user with the ability to submit instructions to configure the network devices. In this example, management module <b>24</b> further includes configuration module <b>26</b> and translation module <b>28</b>.</p><p id="p-0049" num="0048">Management module <b>24</b> is configured to receive intents (e.g., high-level configuration instructions) for a set of managed network devices from a user, such as administrator <b>12</b>. In some examples, management module <b>24</b> may be referred to herein as a &#x201c;fabric manager.&#x201d; Over time, the user may update the configuration instructions, e.g., to add new services, remove existing services, or modify existing services performed by the managed devices. The intents may be structured according to, e.g., YANG. In some examples, management module <b>24</b> also provides the user with the ability to submit translation functions that translation module <b>28</b> executes to transform intents to device-specific, low-level configuration instructions, as discussed below.</p><p id="p-0050" num="0049">Controller device <b>10</b> also includes configuration database <b>40</b>. Configuration database <b>40</b> generally includes information describing managed network devices, e.g., elements <b>14</b>. For example, configuration database <b>40</b> may include information indicating device identifiers (such as MAC and/or IP addresses), device type, device vendor, devices species (e.g., muter, switch, bridge, hub, etc.), or the like. Configuration database <b>40</b> also stores device-level configuration information based on intents (e.g., high-level configuration information, or in some cases, both high-level configuration and low-level configuration information) for the managed devices (e.g., elements <b>14</b>).</p><p id="p-0051" num="0050">Translation module <b>28</b>, which may also be referred to herein as a &#x201c;device manager,&#x201d; may determine which devices are managed using configuration database <b>40</b>. Translation module <b>28</b> determines which of translation functions <b>30</b> to execute on the high-level configuration instructions based on the information of configuration database <b>40</b>, e.g., which of the devices are to receive the low-level configuration instructions. Translation module <b>28</b> then executes each of the determined translation functions of translation functions <b>30</b>, providing the high-level configuration instructions to the translation functions as input and receiving low-level configuration instructions. Translation module <b>28</b> may then provide the low-level configuration instructions to configuration module <b>26</b>.</p><p id="p-0052" num="0051">After receiving the low-level configuration instructions from translation module <b>28</b>, configuration module <b>26</b> sends the low-level configuration instructions to respective managed network devices for which configuration is to be updated via network interface module <b>32</b>. Network interface module <b>32</b> passes the low-level configuration instructions to network interface <b>34</b>. Network interface <b>34</b> forwards the low-level configuration instructions to the respective network devices.</p><p id="p-0053" num="0052">Although user interface <b>36</b> is described for purposes of example as allowing administrator <b>12</b> (<figref idref="DRAWINGS">FIG. <b>1</b></figref>) to interact with controller device <b>10</b>, it should be understood that other interfaces may be used in other examples. For example, controller device <b>10</b> may include a representational state transfer (REST) client (not shown) that may act as an interface to another device, by which administrator <b>12</b> may configure controller device <b>10</b>. Likewise, administrator <b>12</b> may configure elements <b>14</b> by interacting with controller device <b>10</b> through the REST client.</p><p id="p-0054" num="0053"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a conceptual diagram illustrating example assignment of roles to elements <b>14</b> in accordance with the techniques of this disclosure. Fabric manager <b>302</b> includes API framework <b>304</b> (also referred to herein as simply &#x201c;API <b>304</b>&#x201d;), controllers <b>306</b>, which includes fabric controller <b>308</b>, topology compilers <b>310</b>A-<b>310</b><i>n </i>(collectively, &#x201c;topology compilers <b>301</b>&#x201d;), topology validation <b>312</b>, role assignment <b>314</b>, and inventory manager <b>316</b>. Inventory manager <b>316</b> may access configuration database <b>40</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> to determine connectivity information.</p><p id="p-0055" num="0054">In the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, fabric controller <b>308</b> may call topology compiler <b>310</b>A with an indication of element <b>14</b>A as input (<b>320</b>). For example, fabric controller <b>308</b> may select topology compiler <b>310</b>A from topology compilers <b>310</b> based on an intent indicating a change to a topology associated with (e.g., assigned to) topology compiler <b>310</b>A. In this example, fabric controller <b>308</b> may invoke, via API <b>304</b>, topology compiler <b>310</b>A. For instance, fabric controller <b>308</b> may invoke, via a standard invokable by API <b>304</b>, topology compiler <b>310</b>A.</p><p id="p-0056" num="0055">Topology compiler <b>310</b>A may read connectivity information (e.g., link and/or cabling information) from inventory manager <b>316</b> (<b>316</b>). Topology compiler <b>310</b>A may validate the user requested topology based on the provided topology type and elements <b>14</b>. For instance, topology compiler <b>310</b>A may, when executed by fabric controller <b>308</b>, compare the connectivity information from inventory manager <b>316</b> with valid connectivity information for the provided topology type.</p><p id="p-0057" num="0056">Topology compiler <b>310</b>A may assign topology specific roles to elements <b>14</b>. For example, topology compiler <b>310</b>A may include a binary that when executed by fabric controller <b>308</b> assigns a spine or leaf role to element <b>14</b>A based on the connectivity information. For instance, topology compiler <b>310</b>A may, when executed by fabric controller <b>308</b>, assign a spine role to element <b>14</b>A in response to the connectivity information indicating that element <b>14</b>A is cabled as a spine in a spine and leaf topology.</p><p id="p-0058" num="0057"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a conceptual diagram illustrating an example of generating an abstract device configuration <b>332</b> for a resource device in accordance with the techniques of this disclosure. Fabric manager <b>302</b> includes API <b>304</b>, controllers <b>306</b>, which includes fabric controller <b>308</b>, topology compilers <b>310</b>, and abstract device configuration <b>332</b>.</p><p id="p-0059" num="0058">In the example of <figref idref="DRAWINGS">FIG. <b>4</b></figref>, fabric controller <b>308</b>, via API <b>304</b>, may call a topology compiler of topology compliers <b>310</b> with a device resource, including the roles, as input (<b>340</b>). For instance, fabric controller <b>308</b>, via API <b>304</b>, may call topology complier <b>310</b>A with an indication of element <b>14</b>A, including a roles (e.g., leaf or spine), as input. Based on the role and the topology associated with topology compiler <b>310</b>A, fabric controller <b>308</b>, when executing topology compiler <b>310</b>A, may create abstract device configuration <b>332</b> (<b>342</b>). For instance, fabric controller <b>308</b>, when executing topology compiler <b>310</b>A, may create abstract device configuration <b>332</b> for element <b>14</b>A based on the role of element <b>14</b>A. The abstract device configuration <b>332</b> may comprise an OpenConfig instructions on a per device basis (e.g., per element of elements <b>14</b>A).</p><p id="p-0060" num="0059"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a conceptual diagram illustrating an example of generating an abstract device configuration <b>352</b> for a service resource in accordance with the techniques of this disclosure. Fabric manager <b>302</b> includes API <b>304</b>, controllers <b>306</b>, which includes service controller <b>350</b>, topology compilers <b>310</b>, and abstract device configuration <b>332</b>.</p><p id="p-0061" num="0060">In the example of <figref idref="DRAWINGS">FIG. <b>5</b></figref>, service controller <b>350</b>, with API <b>304</b>, may call a topology compiler of topology compliers <b>310</b> with a service resource, including the roles, as input (<b>360</b>). For instance, service controller <b>350</b>, via API <b>304</b>, may call topology complier <b>310</b>A with an indication of a service resource, including a roles, as input. Based on the role and the topology associated with topology compiler <b>310</b>A, service controller <b>350</b>, when executing topology compiler <b>310</b>A, may create abstract device configuration <b>352</b> (<b>362</b>). For instance, service controller <b>350</b>, when executing topology compiler <b>310</b>A, may create abstract device configuration <b>352</b> for a service resource based on the role of the service resource. The abstract device configuration <b>352</b> may comprise an OpenConfig instructions on a per service resource basis.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a conceptual diagram illustrating example of generating a device-level configuration in accordance with the techniques of this disclosure. In the example of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, topology compilers <b>310</b> may use API <b>304</b> when transforming an intent into an abstract device configuration. Resource controllers <b>372</b>A-<b>372</b>C (collectively, &#x201c;resource controllers <b>372</b>&#x201d;) may be configured for topology awareness. For instance, resource controller <b>372</b>A may determine a topology implemented by resource controller <b>372</b>A and invoke a topology compiler of topology compilers <b>310</b> that is associated with the topology implemented by resource controller <b>372</b>A. In some examples, a telemetry manager may output telemetry information to each of the resource controllers <b>372</b>. A device manager may convert an abstract configuration into a device-level configuration. In some examples, the device manager may comprise translation module <b>28</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref> and/or may be configured to perform one or more functions of translation module <b>28</b>.</p><p id="p-0063" num="0062">Resource controllers <b>372</b> may be configured to provide semantic translation of intent resources to abstract configuration based on topology. For instance, resource controller <b>372</b>A may invoke topology compiler <b>310</b>A that is associated with the topology implemented by resource controller <b>372</b>A to translate the intent into an abstract configuration.</p><p id="p-0064" num="0063">Resource controllers <b>372</b> may be configured to support multiple topology compilers <b>372</b>. For instance, resource controller <b>372</b>A may select one of topology compilers <b>310</b> that is associated with the topology implemented by resource controller <b>372</b>A. In some examples, topology compilers <b>310</b> may be pluggable. For example, each topology compiler of topology compilers <b>310</b> may comprise a pluggable compiler configurated to conform to a standard invocable by the API <b>304</b>. For instance, API <b>304</b> may comprise a set of communication standards for providing intent information to topology compilers <b>310</b> and may comprise a set of communication standards for receiving an abstract configuration. In this way, a new topology compiler may be added to topology compilers <b>310</b> at runtime.</p><p id="p-0065" num="0064">Resource controllers <b>372</b> may be topology agnostic. For example, resource controller <b>372</b>A may send an abstract configuration to a device manager (e.g., translation module <b>28</b>). In this example, the device manager may translate the abstract into a device-level configuration.</p><p id="p-0066" num="0065">In the example of <figref idref="DRAWINGS">FIG. <b>6</b></figref>, processing circuitry (e.g., processing circuitry of controller device <b>10</b>), may generate, via API <b>304</b>, one or more change events for resource controllers <b>372</b> using an intent as an input. For example, the processing circuitry (e.g., processing circuitry of controller device <b>10</b>) may generate the one or more change events for resource controllers <b>372</b> based on the intent and further based on a data structure (e.g., a graph model) stored in graph database <b>370</b>.</p><p id="p-0067" num="0066">Resource controllers <b>372</b>A may determine whether a change event has occurred for resource controller <b>372</b>A. For instance, a watch function <b>305</b> (also referred to herein as simply &#x201c;watch <b>305</b>&#x201d;) may indicate, via API <b>304</b>, whether a change event has occurred for each of resource controllers <b>372</b>A. Resource controller <b>372</b>A may determine a topology compiler from topology compilers <b>310</b> based on the one or more change events. For example, resource controller <b>372</b>A may determine topology compiler <b>310</b>A is associated with the one or more change events based on a portion of a data structure stored by graph database <b>370</b>. In this example, resource controller <b>372</b>A may invoke, via API <b>304</b>, topology compiler <b>310</b>A using a role of element <b>14</b>A and an indication of element <b>14</b>A as input to generate abstract configuration information. In this example, topology compiler <b>310</b>, when executed by processing circuitry (e.g., processing circuitry of controller device <b>10</b>), may output the abstract configuration information to resource controller <b>372</b>A.</p><p id="p-0068" num="0067">Resource controller <b>372</b>A may configure element <b>14</b>A based on the abstract configuration information. Resource controller <b>372</b>A may configure element <b>14</b>A based on the abstract configuration. In some examples, resource controller <b>372</b>A may output the abstract configuration to the device manager and may receive a device-level configuration. In some examples, resource controller <b>372</b>A may determine the device-level configuration based on the abstract configuration.</p><p id="p-0069" num="0068"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a block diagram illustrating an example Clos network <b>430</b>. Clos network <b>430</b> includes three stages of switches: ingress switches <b>432</b>A-<b>432</b>N (ingress switches <b>432</b>), mid-stage switches <b>434</b>A-<b>434</b>N (mid-stage switches <b>434</b>), and egress switches <b>436</b>A-<b>436</b>N (egress switches <b>436</b>). Although the letter &#x201c;N&#x201d; is used to designate a variable number for each of ingress switches <b>432</b>, mid-stage switches <b>434</b>, and egress switches <b>436</b>, the number of switches included in each stage is not necessarily the same. That is, there may be different numbers of ingress switches <b>432</b>, mid-stage switches <b>434</b>, and egress switches <b>436</b>.</p><p id="p-0070" num="0069">Furthermore, although Clos network <b>430</b> includes three stages, a general Clos network may include any number of stages (e.g., a 5-stage Clos network or another stage Clos network).</p><p id="p-0071" num="0070"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a flowchart illustrating an example process for determining a role for a network device using a topology compiler according to techniques of this disclosure. In some examples, the process illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> may represent a &#x201c;day 0&#x201d; operation. Controller device <b>10</b> may receive a list of network devices (<b>502</b>). For example, controller device <b>10</b> may receive a list of elements <b>14</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>. Controller device <b>10</b> may gather connectivity information from a set of network devices (<b>504</b>). For example, controller device <b>10</b> may gather cabling information from one or more of elements <b>14</b>.</p><p id="p-0072" num="0071">Controller device <b>10</b> may provide a set of recommended topologies (<b>506</b>). For example, controller device <b>10</b> may recommend a leaf and spine network topology in response to determining that connectivity information indicates that elements <b>14</b> arc arranged in a leaf and spine network topology. Controller device <b>10</b> may verify devices and connectivity information based on recommended topology architectures (<b>508</b>). For example, controller device <b>10</b> may verify that cabling provides links to support the recommended topology. Controller device <b>10</b> may receive user input selecting a topology (<b>510</b>). For example, controller device <b>10</b> may receive a user input selecting a topology from a plurality of recommended topologies. In some examples, controller device <b>10</b> may receive a user input confirming an instruction to implement a single recommended topology.</p><p id="p-0073" num="0072">Controller device <b>10</b> may determine a topology compiler based on the selected topology (<b>512</b>). For example, controller device <b>10</b> may select a topology compiler associated (e.g., assigned) to the selected topology from a plurality of topology compilers that arc each associated with a respective topology. Controller device <b>10</b> may invoke the topology compiler to determine a role for each network device (<b>514</b>). For example, controller device <b>10</b>, when executing the topology compiler, may determine a spine role to element <b>14</b>A and a leaf role to element <b>14</b>B.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a flowchart illustrating an example process for generating an abstract configuration using a topology compiler according to techniques of this disclosure. In some examples, the process illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref> may represent a &#x201c;day 1+&#x201d; operation. Controller device <b>10</b> may receive an intent for a plurality of network devices (<b>602</b>). For example, controller device <b>10</b> may receive an intent from administrator <b>12</b>. Controller device <b>10</b> may apply a Symantec check on the intent (<b>604</b>). Controller device <b>10</b> may update graph database <b>370</b> based on the intent and emit an indication of a change event on watch <b>305</b> (<b>606</b>).</p><p id="p-0075" num="0074">Resource controller <b>372</b>A may receive an indication of an event (<b>608</b>) and invoke a topology compiler using a role and device resource as input to generate an abstract configuration for the device resource (<b>610</b>). For example, resource controller <b>372</b>A may determine a topology compiler from topology compilers <b>310</b> based on the change event. For example, resource controller <b>372</b>A may determine topology compiler <b>310</b>A is associated with the change event based on a portion of a data structure stored by graph database <b>370</b>. In this example, resource controller <b>372</b>A may invoke, with API <b>304</b>, topology compiler <b>310</b>A using a role of element <b>14</b>A and an indication of element <b>14</b>A as input to generate abstract configuration information. In this example, topology compiler <b>310</b>, when executed by processing circuitry (e.g., processing circuitry of controller device <b>10</b>), may output the abstract configuration information to resource controller <b>372</b>A.</p><p id="p-0076" num="0075">Resource controller <b>372</b>A may configure element <b>14</b>A based on the abstract configuration (<b>612</b>). Resource controller <b>372</b>A may configure element <b>14</b>A based on the abstract configuration. In some examples, resource controller <b>372</b>A may output the abstract configuration to the device manager and may receive a device-level configuration. In some examples, resource controller <b>372</b>A may determine the device based on the abstract configuration.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a flowchart illustrating an example process for configuring a device resource using a topology compiler according to techniques of this disclosure. Controller device <b>10</b> may receive an indication of an intent (<b>702</b>). For example, controller device <b>10</b> may receive the intent from administrator <b>12</b>. The intent may include data indicating an update to a data structure including a plurality of nodes representing a plurality of network devices (e.g., elements <b>14</b>) and a plurality of edges connecting the plurality of nodes. In some examples, the data structure may comprise a graph model. The plurality of edges may define relationships between the plurality of nodes.</p><p id="p-0078" num="0077">Controller device <b>10</b> may process the intent to select a topology compiler from a plurality of topology compilers (<b>704</b>). For example, controller device <b>10</b> may select a topology of a plurality of topologies for the elements <b>14</b> based on the intent and connectivity information of elements <b>14</b>. In this example, controller device <b>10</b> may select the topology compiler that is associated with (e.g., assigned to) the selected topology. In some examples, each topology compiler of topology compilers <b>310</b> is associated with a respective topology of a plurality of topologies. For instance, topology compiler <b>310</b>A may be assigned to a first topology, topology compiler <b>310</b>B may be assigned to a second topology, and so on. The plurality of topologies may comprise one or more of a 3-stage Clos network topology, a 5-stage Clos network topology, or a spine and leaf topology. In some examples, each topology compiler of the topology compilers comprises a binary executable by controller device <b>10</b>.</p><p id="p-0079" num="0078">Each topology compiler of the plurality of topology compilers may comprise a pluggable compiler configurated to conform to a standard invocable by the API framework. For example, each of the topology compilers <b>310</b> may comprise a pluggable topology compiler configurated to conform to a standard invocable by API <b>304</b>. For instance, API <b>304</b> may comprise a set of communication standards for providing intent information to topology compilers <b>310</b> and may comprise a set of communication standards for receiving an abstract configuration.</p><p id="p-0080" num="0079">Controller device <b>10</b> may invoke, via the API, the selected topology compiler using a role of the network device and an indication of the network device as input to generate abstract configuration information (<b>708</b>). For example, resource controller <b>372</b>A may invoke, with API <b>304</b>, topology compiler <b>310</b>A using a role of network device <b>14</b>A and an indication of network device <b>14</b>A as input and topology compiler <b>310</b>A, when executed by controller device <b>10</b>, generates the abstract configuration information. Controller device <b>10</b> may configure the network device based on the abstract configuration information (<b>710</b>). For example, resource controller <b>372</b>A may output the abstract configuration to a device manager and may receive a device-level configuration. In this example, resource controller <b>372</b>A may configure element <b>14</b>A with the device-level configuration received from the device manager. In some examples, resource controller <b>372</b>A may determine the device based on the abstract configuration and configure element <b>14</b>A with the device-level configuration determined by resource controller <b>372</b>A.</p><p id="p-0081" num="0080">In some examples, controller device <b>10</b> may determine the role of a network device. For example, controller device <b>10</b> may receive an indication of a plurality of network devices (e.g., elements <b>14</b>). In this example, controller device <b>10</b> may determine connectivity information (e.g., cabling information) for the plurality of devices. Controller device <b>10</b> may select a topology for the plurality of network devices based on the connectivity information. The topology compiler (e.g., topology compiler <b>310</b>A) may be associated with the selected topology. Controller device <b>10</b> may invoke, via the API framework (e.g., API <b>304</b>), the topology compiler using the connectivity information as input to determine the role of the network device. In some examples, invoking the topology compiler to determine the role of the network device is in response to a user interaction indicating a confirmation of the selected topology.</p><p id="p-0082" num="0081">The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combination of such components. The term &#x201c;processor&#x201d; or &#x201c;processing circuitry&#x201d; may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.</p><p id="p-0083" num="0082">Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.</p><p id="p-0084" num="0083">The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer-readable media may include non-transitory computer-readable storage media and transient communication media. Computer readable storage media, which is tangible and non-transitory, may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer-readable storage media. The term &#x201c;computer-readable storage media&#x201d; refers to physical storage media, and not signals, carrier waves, or other transient media.</p><p id="p-0085" num="0084">Various examples have been described. These and other examples are within the scope of the following claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method comprising:<claim-text>receiving, by a controller device that manages a plurality of network devices, via an application programming interface (API) framework, an indication of an intent, wherein the intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes;</claim-text><claim-text>processing, by the controller device, the intent to select, from a plurality of topology compilers, a topology compiler configured to generate abstract configuration information for each role of a plurality of roles of a topology assigned to the topology compiler, wherein each topology compiler of the plurality of topology compilers comprises a pluggable compiler configured to conform to a standard invocable by the API framework that comprises a first set of communication standards for providing intent information to the plurality of topology compilers and that comprises a second set of communication standards for receiving the abstract configuration information;</claim-text><claim-text>invoking, by the controller device, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate the abstract configuration information; and</claim-text><claim-text>configuring, by the controller device, the network device based on the abstract configuration information.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. (canceled)</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>receiving, by the controller device, an indication of the plurality of network devices;</claim-text><claim-text>determining, by the controller device, connectivity information for the plurality of devices;</claim-text><claim-text>selecting, by the controller device, a topology for the plurality of network devices based on the connectivity information, wherein the selected topology compiler is associated with the selected topology; and</claim-text><claim-text>invoking, by the controller device, via the API framework, the selected topology compiler using the connectivity information as input to determine the role of the network device.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method of <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein invoking the selected topology compiler to determine the role of the network device is in response to a user interaction indicating a confirmation of the selected topology.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein configuring the network device comprises determining a device-level configuration for the network device based on the abstract configuration and outputting an indication of the device-level configuration to the network device.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each topology compiler of the plurality of topology compilers is associated with a respective topology of a plurality of topologies.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method of <claim-ref idref="CLM-00006">claim 6</claim-ref>, wherein the plurality of topologies comprises one or more of a 3-stage Clos network topology, a 5-stage Clos network topology, or a spine and leaf topology.</claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of edges define relationships between the plurality of nodes.</claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the data structure comprises a graph model.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein each topology compiler of the plurality of topology compilers comprises a binary executable by the controller device.</claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the network device comprises one or more of a resource device or a service device.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. A controller device that manages a plurality of network devices, the controller device comprising one or more processing units implemented in circuitry and configured to:<claim-text>receive, via an application programming interface (API) framework, an indication of an intent, wherein the intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes;</claim-text><claim-text>process the intent to select, from a plurality of topology compilers, a topology compiler configured to generate abstract configuration information for each role of a plurality of roles of a topology assigned to the topology compiler, wherein each topology compiler of the plurality of topology compilers comprises a pluggable compiler configured to conform to a standard invocable by the API framework that comprises a first set of communication standards for providing intent information to the plurality of topology compilers and that comprises a second set of communication standards for receiving abstract configuration information;</claim-text><claim-text>invoke, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate abstract configuration information; and</claim-text><claim-text>configure the network device based on the abstract configuration information.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. (canceled)</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The controller device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the one or more processing units are further configured to:<claim-text>receive an indication of the plurality of network devices;</claim-text><claim-text>determine connectivity information for the plurality of devices;</claim-text><claim-text>select a topology for the plurality of network devices based on the connectivity information, wherein the selected topology compiler is associated with the selected topology; and</claim-text><claim-text>invoke, via the API framework, the selected topology compiler using the connectivity information as input to determine the role of the network device.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The controller device of <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the one or more processing units are configured to invoke the selected topology compiler to determine the role of the network device in response to a user interaction indicating a confirmation of the selected topology.</claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The controller device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein, to configure the network device, the one or more processing units are configured to determine a device-level configuration for the network device based on the abstract configuration and output an indication of the device-level configuration to the network device.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The controller device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein each topology compiler of the plurality of topology compilers is associated with a respective topology of a plurality of topologies.</claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The controller device of <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the plurality of topologies comprises one or more of a 3-stage Clos network topology, a 5-stage Clos network topology, or a spine and leaf topology.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The controller device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of edges define relationships between the plurality of nodes.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. A non-transitory computer-readable storage medium having stored thereon instructions that, when executed, cause a processor of a controller device that manages a plurality of network devices to:<claim-text>receive, via an application programming interface (API) framework, an indication of an intent, wherein the intent includes data indicating an update to a data structure including a plurality of nodes representing the plurality of network devices and a plurality of edges connecting the plurality of nodes;</claim-text><claim-text>process the intent to select, from a plurality of topology compilers, a topology compiler configured to generate abstract configuration information for each role of a plurality of roles of a topology assigned to the topology compiler, wherein each topology compiler of the plurality of topology compilers comprises a pluggable compiler configured to conform to a standard invocable by the API framework that comprises a first set of communication standards for providing intent information to the plurality of topology compilers and that comprises a second set of communication standards for receiving abstract configuration information;</claim-text><claim-text>invoke, via the API framework, the selected topology compiler using a role of a network device of the plurality of network devices and an indication of the network device as input to generate abstract configuration information; and</claim-text><claim-text>configure the network device based on the abstract configuration information.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The method of <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the plurality of roles comprises a spine role and a leaf role.</claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The controller device of <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the plurality of roles comprises a spine role and a leaf role.</claim-text></claim></claims></us-patent-application>