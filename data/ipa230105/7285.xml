<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230007286A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230007286</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943405</doc-number><date>20220913</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>423</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>44</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20140101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>436</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>423</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>44</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20141101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>N</subclass><main-group>19</main-group><subgroup>176</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">PARALLEL CODING USING HISTORY-BASED MOTION VECTOR PREDICTION WITH SHARED ROW BUFFERS</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16544331</doc-number><date>20190819</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11496759</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17943405</doc-number></document-id></child-doc></relation></continuation><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16213705</doc-number><date>20181207</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10440378</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16544331</doc-number></document-id></child-doc></relation></continuation><us-provisional-application><document-id><country>US</country><doc-number>62699372</doc-number><date>20180717</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Tencent America LLC</orgname><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>XU</last-name><first-name>Xiaozhong</first-name><address><city>State College</city><state>PA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>LIU</last-name><first-name>Shan</first-name><address><city>San Jose</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>LI</last-name><first-name>Xiang</first-name><address><city>Saratoga</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties><assignees><assignee><addressbook><orgname>Tencent America LLC</orgname><role>02</role><address><city>Palo Alto</city><state>CA</state><country>US</country></address></addressbook></assignee></assignees></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method of video encoding includes, prior to encoding a first tile of s plurality of tiles of a current picture, initializing a shared row buffer that is shared among multiple processor threads associated with the first tile. The method also includes encoding a first unit of a plurality of units in a first row of the first tile by a first processor thread and using a corresponding first HMVP buffer. The method also includes, when all of the plurality of blocks in the first unit have been encoded, copying contents of the first HMVP buffer into the shared row buffer, copying contents of the shared row buffer into a second HMVP buffer, starting encoding of a unit in a second row of the plurality of rows by the second processor thread using the second HMVP buffer, and resetting the first HMVP buffer.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="111.59mm" wi="158.75mm" file="US20230007286A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="143.34mm" wi="187.20mm" file="US20230007286A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="138.43mm" wi="169.50mm" file="US20230007286A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="143.26mm" wi="178.90mm" file="US20230007286A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="138.35mm" wi="183.22mm" file="US20230007286A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="129.37mm" wi="183.13mm" file="US20230007286A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="128.35mm" wi="176.11mm" file="US20230007286A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="79.16mm" wi="68.75mm" file="US20230007286A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="127.42mm" wi="177.88mm" file="US20230007286A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="71.71mm" wi="179.24mm" file="US20230007286A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="110.15mm" wi="101.77mm" file="US20230007286A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="92.79mm" wi="146.64mm" file="US20230007286A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="100.08mm" wi="161.12mm" file="US20230007286A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="149.18mm" wi="188.38mm" file="US20230007286A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="143.43mm" wi="185.42mm" file="US20230007286A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">INCORPORATION BY REFERENCE</heading><p id="p-0002" num="0001">The present application is a continuation of U.S. application Ser. No. 16/544,331 filed on Aug. 19, 2019, which is a continuation of U.S. patent application Ser. No. 16/213,705, filed on Dec. 7, 2018, now U.S. Pat. No. 10,440,378, which claims the benefit of priority to U.S. Provisional Application No. 62/699,372, &#x201c;TECHNIQUES FOR MOTION VECTOR DIFFERENCE CODING IN BI-DIRECTIONAL MOTION COMPENSATION&#x201d; filed on Jul. 17, 2018. The benefit of priority is claimed to each of the foregoing, and the entire contents of each of the foregoing are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure describes embodiments generally related to video coding.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent the work is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.</p><p id="p-0005" num="0004">Video coding and decoding using inter-picture prediction with motion compensation has been known for decades. Uncompressed digital video can include a series of pictures, each picture having a spatial dimension of, for example, 1920&#xd7;1080 luminance samples and associated chrominance samples. The series of pictures can have a fixed or variable picture rate (informally also known as frame rate), of, for example 60 pictures per second or 60 Hz. Uncompressed video has significant bitrate requirements. For example, 1080p60 4:2:0 video at 8 bit per sample (1920&#xd7;1080 luminance sample resolution at 60 Hz frame rate) requires close to 1.5 Gbit/s bandwidth. An hour of such video requires more than 600 GByte of storage space.</p><p id="p-0006" num="0005">One purpose of video coding and decoding can be the reduction of redundancy in the input video signal, through compression. Compression can help reduce aforementioned bandwidth or storage space requirements, in some cases by two orders of magnitude or more. Both lossless and lossy compression, as well as a combination thereof can be employed. Lossless compression refers to techniques where an exact copy of the original signal can be reconstructed from the compressed original signal. When using lossy compression, the reconstructed signal may not be identical to the original signal, but the distortion between the original and reconstructed signal is small enough to make the reconstructed signal useful for the intended application. In the case of video, lossy compression is widely employed. The amount of distortion tolerated depends on the application; for example, users of certain consumer streaming applications may tolerate higher distortion than users of television contribution applications. The compression ratio achievable can reflect that: higher allowable/tolerable distortion can yield higher compression ratios.</p><p id="p-0007" num="0006">Motion compensation can be a lossy compression technique and can relate to techniques where a block of sample data from a previously reconstructed picture or part thereof (reference picture), after being spatially shifted in a direction indicated by a motion vector (MV henceforth), is used for the prediction of a newly reconstructed picture or picture part. In some cases, the reference picture can be the same as the picture currently under reconstruction. MVs can have two dimensions X and Y, or three dimensions, the third being an indication of the reference picture in use (the latter, indirectly, can be a time dimension).</p><p id="p-0008" num="0007">In some video compression techniques, an MV applicable to a certain area of sample data can be predicted from other MVs, for example from those related to another area of sample data spatially adjacent to the area under reconstruction, and preceding that MV in decoding order. Doing so can substantially reduce the amount of data required for coding the MV, thereby removing redundancy and increasing compression. MV prediction can work effectively, for example, because when coding an input video signal derived from a camera (known as natural video) there is a statistical likelihood that areas larger than the area to which a single MV is applicable move in a similar direction and, therefore, can in some cases be predicted using a similar motion vector derived from neighboring area's MVs. That results in the MV found for a given area to be similar or the same as the MV predicted from the surrounding MVs, and that in turn can be represented, after entropy coding, in a smaller number of bits than what would be used if coding the MV directly. In some cases, MV prediction can be an example of lossless compression of a signal (namely: the MVs) derived from the original signal (namely: the sample stream). In other cases, MV prediction itself can be lossy, for example because of rounding errors when calculating a predictor from several surrounding MVs.</p><p id="p-0009" num="0008">Various MV prediction mechanisms are described in H.265/HEVC (ITU-T Rec. H.265, &#x201c;High Efficiency Video Coding&#x201d;, December 2016). Out of the many MV prediction mechanisms that H.265 offers, described here is a technique henceforth referred to as &#x201c;spatial merge&#x201d;.</p><p id="p-0010" num="0009">A history buffer of motion vector predictors may be used to perform encoding or decoding. Generally, the maintenance of the history buffer is performed after each block, in encoding or decoding order, is completed. If this block is coded in inter mode with a set of MV information, the MV of this block is put into HMVP buffer for updating the buffer. When encoding or decoding the current block, the MV predictors for the current block may come from previously coded spatial/neighboring blocks. Some of these blocks may still be in the HMVP buffer. When putting a newly decoded/encoded MV into the HMVP buffer, some comparisons may be performed to make sure the new MV is different from all previous ones in the HMVP buffer. If there is already an MV with the same value in the buffer, the old MV will be removed from the buffer, and the new MV is put into the buffer as the last entry. These general maintenance procedures of the history buffer do not properly reset the history buffer when necessary to remove information from the history buffer that may not be relevant for a current block being encoded or decoded. Furthermore, encoding or decoding of a block using a history buffer doesn't properly take into account parallel processing of the block.</p><heading id="h-0004" level="1">SUMMARY</heading><p id="p-0011" num="0010">An exemplary embodiment of the present disclosure includes a method for video decoding. The method includes acquiring a current picture from a coded video bitstream, where the current picture is segmented into a plurality of units, each unit is divided into a plurality of blocks, and the plurality of blocks in each unit being arranged as a grid. The method further includes decoding, for one of the units, a current block from the plurality of blocks using an entry from a history motion vector (HMVP) buffer. The method further includes updating the HMVP buffer with a motion vector of the decoded current block. The method further includes determining whether a condition is satisfied, the condition specifying that (i) the current block is a beginning of a row included in the grid of the one of the units, and (ii) the plurality of blocks are decoded in accordance with a parallel process. The method further includes, in response to determining that the condition is satisfied, resetting the HMVP buffer.</p><p id="p-0012" num="0011">An exemplary embodiment of the present disclosure includes a video decoder. The video decoder includes processing circuitry configured to acquire a current picture from a coded video bitstream, where the current picture is segmented into a plurality of units, each unit is divided into a plurality of blocks, and the plurality of blocks in each unit being arranged as a grid. The processing circuitry further configured to decode, for one of the units, a current block from the plurality of blocks using an entry from a history motion vector (HMVP) buffer. The processing circuitry further configured to update the HMVP buffer with a motion vector of the decoded current block. The processing circuitry further configured to determine whether a condition is satisfied, the condition specifying that (i) the current block is a beginning of a row included in the grid of the one of the units, and (ii) the plurality of blocks are decoded in accordance with a parallel process. The processing circuitry further configured to in response to the determination that the condition is satisfied, reset the HMVP buffer.</p><p id="p-0013" num="0012">An exemplary embodiment of the present disclosure includes non-transitory computer readable medium having instructions stored therein, which when executed by a processor in a video decoder causes the processor to execute a method. The method includes acquiring a current picture from a coded video bitstream, where the current picture is segmented into a plurality of units, each unit is divided into a plurality of blocks, and the plurality of blocks in each unit being arranged as a grid. The method further includes decoding, for one of the units, a current block from the plurality of blocks using an entry from a history motion vector (HMVP) buffer. The method further includes updating the HMVP buffer with a motion vector of the decoded current block. The method further includes determining whether a condition is satisfied, the condition specifying that (i) the current block is a beginning of a row included in the grid of the one of the units, and (ii) the plurality of blocks are decoded in accordance with a parallel process. The method further includes, in response to determining that the condition is satisfied, resetting the HMVP buffer.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0005" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0014" num="0013">Further features, the nature, and various advantages of the disclosed subject matter will be more apparent from the following detailed description and the accompanying drawings in which:</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic illustration of a simplified block diagram of a communication system (<b>100</b>) in accordance with an embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic illustration of a simplified block diagram of a communication system (<b>200</b>) in accordance with an embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic illustration of a simplified block diagram of a decoder in accordance with an embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic illustration of a simplified block diagram of an encoder in accordance with an embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a block diagram of an encoder in accordance with another embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a block diagram of a decoder in accordance with another embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a schematic illustration of a current block and surrounding spatial merge candidates.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates example syntax of coding a motion vector difference (MVD).</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an example of predictive coding of a second MVD using a first MVD as a predictor.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIGS. <b>10</b>A and <b>10</b>B</figref> illustrate an embodiment of a history based motion vector prediction buffer.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an example picture partitioned into coding tree units.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example of a picture segmented into tiles.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an embodiment of a process performed by an encoder or a decoder.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a schematic illustration of a computer system in accordance with an embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0006" level="1">DETAILED DESCRIPTION OF EMBODIMENTS</heading><p id="p-0029" num="0028"><figref idref="DRAWINGS">FIG. <b>1</b></figref> illustrates a simplified block diagram of a communication system (<b>100</b>) according to an embodiment of the present disclosure. The communication system (<b>100</b>) includes a plurality of terminal devices that can communicate with each other, via, for example, a network (<b>150</b>). For example, the communication system (<b>100</b>) includes a first pair of terminal devices (<b>110</b>) and (<b>120</b>) interconnected via the network (<b>150</b>). In the <figref idref="DRAWINGS">FIG. <b>1</b></figref> example, the first pair of terminal devices (<b>110</b>) and (<b>120</b>) performs unidirectional transmission of data. For example, the terminal device (<b>110</b>) may code video data (e.g., a stream of video pictures that are captured by the terminal device (<b>110</b>)) for transmission to the other terminal device (<b>120</b>) via the network (<b>150</b>). The encoded video data can be transmitted in the form of one or more coded video bitstreams. The terminal device (<b>120</b>) may receive the coded video data from the network (<b>150</b>), decode the coded video data to recover the video pictures and display video pictures according to the recovered video data. Unidirectional data transmission may be common in media serving applications and the like.</p><p id="p-0030" num="0029">In another example, the communication system (<b>100</b>) includes a second pair of terminal devices (<b>130</b>) and (<b>140</b>) that performs bidirectional transmission of coded video data that may occur, for example, during videoconferencing. For bidirectional transmission of data, in an example, each terminal device of the terminal devices (<b>130</b>) and (<b>140</b>) may code video data (e.g., a stream of video pictures that are captured by the terminal device) for transmission to the other terminal device of the terminal devices (<b>130</b>) and (<b>140</b>) via the network (<b>150</b>). Each terminal device of the terminal devices (<b>130</b>) and (<b>140</b>) also may receive the coded video data transmitted by the other terminal device of the terminal devices (<b>130</b>) and (<b>140</b>), and may decode the coded video data to recover the video pictures and may display video pictures at an accessible display device according to the recovered video data.</p><p id="p-0031" num="0030">In the <figref idref="DRAWINGS">FIG. <b>1</b></figref> example, the terminal devices (<b>110</b>), (<b>120</b>), (<b>130</b>) and (<b>140</b>) may be illustrated as servers, personal computers and smart phones but the principles of the present disclosure may be not so limited. Embodiments of the present disclosure find application with laptop computers, tablet computers, media players and/or dedicated video conferencing equipment. The network (<b>150</b>) represents any number of networks that convey coded video data among the terminal devices (<b>110</b>), (<b>120</b>), (<b>130</b>) and (<b>140</b>), including for example wireline (wired) and/or wireless communication networks. The communication network (<b>150</b>) may exchange data in circuit-switched and/or packet-switched channels. Representative networks include telecommunications networks, local area networks, wide area networks and/or the Internet. For the purposes of the present discussion, the architecture and topology of the network (<b>150</b>) may be immaterial to the operation of the present disclosure unless explained herein below.</p><p id="p-0032" num="0031"><figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates, as an example for an application for the disclosed subject matter, the placement of a video encoder and a video decoder in a streaming environment. The disclosed subject matter can be equally applicable to other video enabled applications, including, for example, video conferencing, digital TV, storing of compressed video on digital media including CD, DVD, memory stick and the like, and so on.</p><p id="p-0033" num="0032">A streaming system may include a capture subsystem (<b>213</b>), that can include a video source (<b>201</b>), for example a digital camera, creating for example a stream of video pictures (<b>202</b>) that are uncompressed. In an example, the stream of video pictures (<b>202</b>) includes samples that are taken by the digital camera. The stream of video pictures (<b>202</b>), depicted as a bold line to emphasize a high data volume when compared to encoded video data (<b>204</b>) (or coded video bitstreams), can be processed by an electronic device (<b>220</b>) that includes a video encoder (<b>203</b>) coupled to the video source (<b>201</b>). The video encoder (<b>203</b>) can include hardware, software, or a combination thereof to enable or implement aspects of the disclosed subject matter as described in more detail below. The encoded video data (<b>204</b>) (or encoded video bitstream (<b>204</b>)), depicted as a thin line to emphasize the lower data volume when compared to the stream of video pictures (<b>202</b>), can be stored on a streaming server (<b>205</b>) for future use. One or more streaming client subsystems, such as client subsystems (<b>206</b>) and (<b>208</b>) in <figref idref="DRAWINGS">FIG. <b>2</b></figref> can access the streaming server (<b>205</b>) to retrieve copies (<b>207</b>) and (<b>209</b>) of the encoded video data (<b>204</b>). A client subsystem (<b>206</b>) can include a video decoder (<b>210</b>), for example, in an electronic device (<b>230</b>). The video decoder (<b>210</b>) decodes the incoming copy (<b>207</b>) of the encoded video data and creates an outgoing stream of video pictures (<b>211</b>) that can be rendered on a display (<b>212</b>) (e.g., display screen) or other rendering device (not depicted). In some streaming systems, the encoded video data (<b>204</b>), (<b>207</b>), and (<b>209</b>) (e.g., video bitstreams) can be encoded according to certain video coding/compression standards. Examples of those standards include ITU-T Recommendation H.265. In an example, a video coding standard under development is informally known as Versatile Video Coding or VVC. The disclosed subject matter may be used in the context of VVC.</p><p id="p-0034" num="0033">It is noted that the electronic devices (<b>220</b>) and (<b>230</b>) can include other components (not shown). For example, the electronic device (<b>220</b>) can include a video decoder (not shown) and the electronic device (<b>230</b>) can include a video encoder (not shown) as well.</p><p id="p-0035" num="0034"><figref idref="DRAWINGS">FIG. <b>3</b></figref> shows a block diagram of a video decoder (<b>310</b>) according to an embodiment of the present disclosure. The video decoder (<b>310</b>) can be included in an electronic device (<b>330</b>). The electronic device (<b>330</b>) can include a receiver (<b>331</b>) (e.g., receiving circuitry). The video decoder (<b>310</b>) can be used in the place of the video decoder (<b>210</b>) in the <figref idref="DRAWINGS">FIG. <b>2</b></figref> example.</p><p id="p-0036" num="0035">The receiver (<b>331</b>) may receive one or more coded video sequences to be decoded by the video decoder (<b>310</b>); in the same or another embodiment, one coded video sequence at a time, where the decoding of each coded video sequence is independent from other coded video sequences. The coded video sequence may be received from a channel (<b>301</b>), which may be a hardware/software link to a storage device which stores the encoded video data. The receiver (<b>331</b>) may receive the encoded video data with other data, for example, coded audio data and/or ancillary data streams, that may be forwarded to their respective using entities (not depicted). The receiver (<b>331</b>) may separate the coded video sequence from the other data. To combat network jitter, a buffer memory (<b>315</b>) may be coupled in between the receiver (<b>331</b>) and an entropy decoder/parser (<b>320</b>) (&#x201c;parser (<b>320</b>)&#x201d; henceforth). In certain applications, the buffer memory (<b>315</b>) is part of the video decoder (<b>310</b>). In others, it can be outside of the video decoder (<b>310</b>) (not depicted). In still others, there can be a buffer memory (not depicted) outside of the video decoder (<b>310</b>), for example to combat network jitter, and in addition another buffer memory (<b>315</b>) inside the video decoder (<b>310</b>), for example to handle playout timing. When the receiver (<b>331</b>) is receiving data from a store/forward device of sufficient bandwidth and controllability, or from an isosynchronous network, the buffer memory (<b>315</b>) may not be needed, or can be small. For use on best effort packet networks such as the Internet, the buffer memory (<b>315</b>) may be required, can be comparatively large and can be advantageously of adaptive size, and may at least partially be implemented in an operating system or similar elements (not depicted) outside of the video decoder (<b>310</b>).</p><p id="p-0037" num="0036">The video decoder (<b>310</b>) may include the parser (<b>320</b>) to reconstruct symbols (<b>321</b>) from the coded video sequence. Categories of those symbols include information used to manage operation of the video decoder (<b>310</b>), and potentially information to control a rendering device such as a render device (<b>312</b>) (e.g., a display screen) that is not an integral part of the electronic device (<b>330</b>) but can be coupled to the electronic device (<b>330</b>), as was shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>. The control information for the rendering device(s) may be in the form of Supplementary Enhancement Information (SEI messages) or Video Usability Information (VUI) parameter set fragments (not depicted). The parser (<b>320</b>) may parse/entropy-decode the coded video sequence that is received. The coding of the coded video sequence can be in accordance with a video coding technology or standard, and can follow various principles, including variable length coding, Huffman coding, arithmetic coding with or without context sensitivity, and so forth. The parser (<b>320</b>) may extract from the coded video sequence, a set of subgroup parameters for at least one of the subgroups of pixels in the video decoder, based upon at least one parameter corresponding to the group. Subgroups can include Groups of Pictures (GOPs), pictures, tiles, slices, macroblocks, Coding Units (CUs), blocks, Transform Units (TUs), Prediction Units (PUs) and so forth. The parser (<b>320</b>) may also extract from the coded video sequence information such as transform coefficients, quantizer parameter values, motion vectors, and so forth.</p><p id="p-0038" num="0037">The parser (<b>320</b>) may perform entropy decoding/parsing operation on the video sequence received from the buffer memory (<b>315</b>), so as to create symbols (<b>321</b>).</p><p id="p-0039" num="0038">Reconstruction of the symbols (<b>321</b>) can involve multiple different units depending on the type of the coded video picture or parts thereof (such as: inter and intra picture, inter and intra block), and other factors. Which units are involved, and how, can be controlled by the subgroup control information that was parsed from the coded video sequence by the parser (<b>320</b>). The flow of such subgroup control information between the parser (<b>320</b>) and the multiple units below is not depicted for clarity.</p><p id="p-0040" num="0039">Beyond the functional blocks already mentioned, the video decoder (<b>310</b>) can be conceptually subdivided into a number of functional units as described below. In a practical implementation operating under commercial constraints, many of these units interact closely with each other and can, at least partly, be integrated into each other. However, for the purpose of describing the disclosed subject matter, the conceptual subdivision into the functional units below is appropriate.</p><p id="p-0041" num="0040">A first unit is the scaler/inverse transform unit (<b>351</b>). The scaler/inverse transform unit (<b>351</b>) receives a quantized transform coefficient as well as control information, including which transform to use, block size, quantization factor, quantization scaling matrices, etc. as symbol(s) (<b>321</b>) from the parser (<b>320</b>). The scaler/inverse transform unit (<b>351</b>) can output blocks comprising sample values, that can be input into aggregator (<b>355</b>).</p><p id="p-0042" num="0041">In some cases, the output samples of the scaler/inverse transform (<b>351</b>) can pertain to an intra coded block; that is: a block that is not using predictive information from previously reconstructed pictures, but can use predictive information from previously reconstructed parts of the current picture. Such predictive information can be provided by an intra picture prediction unit (<b>352</b>). In some cases, the intra picture prediction unit (<b>352</b>) generates a block of the same size and shape of the block under reconstruction, using surrounding already reconstructed information fetched from the current picture buffer (<b>358</b>). The current picture buffer (<b>358</b>) buffers, for example, partly reconstructed current picture and/or fully reconstructed current picture. The aggregator (<b>355</b>), in some cases, adds, on a per sample basis, the prediction information the intra prediction unit (<b>352</b>) has generated to the output sample information as provided by the scaler/inverse transform unit (<b>351</b>).</p><p id="p-0043" num="0042">In other cases, the output samples of the scaler/inverse transform unit (<b>351</b>) can pertain to an inter coded, and potentially motion compensated block. In such a case, a motion compensation prediction unit (<b>353</b>) can access reference picture memory (<b>357</b>) to fetch samples used for prediction. After motion compensating the fetched samples in accordance with the symbols (<b>321</b>) pertaining to the block, these samples can be added by the aggregator (<b>355</b>) to the output of the scaler/inverse transform unit (<b>351</b>) (in this case called the residual samples or residual signal) so as to generate output sample information. The addresses within the reference picture memory (<b>357</b>) from where the motion compensation prediction unit (<b>353</b>) fetches prediction samples can be controlled by motion vectors, available to the motion compensation prediction unit (<b>353</b>) in the form of symbols (<b>321</b>) that can have, for example X, Y, and reference picture components. Motion compensation also can include interpolation of sample values as fetched from the reference picture memory (<b>357</b>) when sub-sample exact motion vectors are in use, motion vector prediction mechanisms, and so forth.</p><p id="p-0044" num="0043">The output samples of the aggregator (<b>355</b>) can be subject to various loop filtering techniques in the loop filter unit (<b>356</b>). Video compression technologies can include in-loop filter technologies that are controlled by parameters included in the coded video sequence (also referred to as coded video bitstream) and made available to the loop filter unit (<b>356</b>) as symbols (<b>321</b>) from the parser (<b>320</b>), but can also be responsive to meta-information obtained during the decoding of previous (in decoding order) parts of the coded picture or coded video sequence, as well as responsive to previously reconstructed and loop-filtered sample values.</p><p id="p-0045" num="0044">The output of the loop filter unit (<b>356</b>) can be a sample stream that can be output to the render device (<b>312</b>) as well as stored in the reference picture memory (<b>357</b>) for use in future inter-picture prediction.</p><p id="p-0046" num="0045">Certain coded pictures, once fully reconstructed, can be used as reference pictures for future prediction. For example, once a coded picture corresponding to a current picture is fully reconstructed and the coded picture has been identified as a reference picture (by, for example, the parser (<b>320</b>)), the current picture buffer (<b>358</b>) can become a part of the reference picture memory (<b>357</b>), and a fresh current picture buffer can be reallocated before commencing the reconstruction of the following coded picture.</p><p id="p-0047" num="0046">The video decoder (<b>310</b>) may perform decoding operations according to a predetermined video compression technology in a standard, such as ITU-T Rec. H.265. The coded video sequence may conform to a syntax specified by the video compression technology or standard being used, in the sense that the coded video sequence adheres to both the syntax of the video compression technology or standard and the profiles as document in the video compression technology or standard. Specifically, a profile can select a certain tools as the only tools available for use under that profile from all the tools available in the video compression technology or standard. Also necessary for compliance can be that the complexity of the coded video sequence is within bounds as defined by the level of the video compression technology or standard. In some cases, levels restrict the maximum picture size, maximum frame rate, maximum reconstruction sample rate (measured in, for example megasamples per second), maximum reference picture size, and so on. Limits set by levels can, in some cases, be further restricted through Hypothetical Reference Decoder (HRD) specifications and metadata for HRD buffer management signaled in the coded video sequence.</p><p id="p-0048" num="0047">In an embodiment, the receiver (<b>331</b>) may receive additional (redundant) data with the encoded video. The additional data may be included as part of the coded video sequence(s). The additional data may be used by the video decoder (<b>310</b>) to properly decode the data and/or to more accurately reconstruct the original video data. Additional data can be in the form of, for example, temporal, spatial, or signal noise ratio (SNR) enhancement layers, redundant slices, redundant pictures, forward error correction codes, and so on.</p><p id="p-0049" num="0048"><figref idref="DRAWINGS">FIG. <b>4</b></figref> shows a block diagram of a video encoder (<b>403</b>) according to an embodiment of the present disclosure. The video encoder (<b>403</b>) is included in an electronic device (<b>420</b>). The electronic device (<b>420</b>) includes a transmitter (<b>440</b>) (e.g., transmitting circuitry). The video encoder (<b>403</b>) can be used in the place of the video encoder (<b>203</b>) in the <figref idref="DRAWINGS">FIG. <b>2</b></figref> example.</p><p id="p-0050" num="0049">The video encoder (<b>403</b>) may receive video samples from a video source (<b>401</b>)(that is not part of the electronic device (<b>420</b>) in the <figref idref="DRAWINGS">FIG. <b>4</b></figref> example) that may capture video image(s) to be coded by the video encoder (<b>403</b>). In another example, the video source (<b>401</b>) is a part of the electronic device (<b>420</b>).</p><p id="p-0051" num="0050">The video source (<b>401</b>) may provide the source video sequence to be coded by the video encoder (<b>403</b>) in the form of a digital video sample stream that can be of any suitable bit depth (for example: 8 bit, 10 bit, 12 bit, . . . ), any colorspace (for example, BT.601 Y CrCB, RGB, . . . ) and any suitable sampling structure (for example Y CrCb 4:2:0, Y CrCb 4:4:4). In a media serving system, the video source (<b>401</b>) may be a storage device storing previously prepared video. In a videoconferencing system, the video source (<b>401</b>) may be a camera that captures local image information as a video sequence. Video data may be provided as a plurality of individual pictures that impart motion when viewed in sequence. The pictures themselves may be organized as a spatial array of pixels, wherein each pixel can comprise one or more samples depending on the sampling structure, color space, etc. in use. A person skilled in the art can readily understand the relationship between pixels and samples. The description below focusses on samples.</p><p id="p-0052" num="0051">According to an embodiment, the video encoder (<b>403</b>) may code and compress the pictures of the source video sequence into a coded video sequence (<b>443</b>) in real time or under any other time constraints as required by the application. Enforcing appropriate coding speed is one function of a controller (<b>450</b>). In some embodiments, the controller (<b>450</b>) controls other functional units as described below and is functionally coupled to the other functional units. The coupling is not depicted for clarity. Parameters set by the controller (<b>450</b>) can include rate control related parameters (picture skip, quantizer, lambda value of rate-distortion optimization techniques, . . . ), picture size, group of pictures (GOP) layout, maximum motion vector search range, and so forth. The controller (<b>450</b>) can be configured to have other suitable functions that pertain to the video encoder (<b>403</b>) optimized for a certain system design.</p><p id="p-0053" num="0052">In some embodiments, the video encoder (<b>403</b>) is configured to operate in a coding loop. As an oversimplified description, in an example, the coding loop can include a source coder (<b>430</b>) (e.g., responsible for creating symbols, such as a symbol stream, based on an input picture to be coded, and a reference picture(s)), and a (local) decoder (<b>433</b>) embedded in the video encoder (<b>403</b>). The decoder (<b>433</b>) reconstructs the symbols to create the sample data in a similar manner as a (remote) decoder also would create (as any compression between symbols and coded video bitstream is lossless in the video compression technologies considered in the disclosed subject matter). The reconstructed sample stream (sample data) is input to the reference picture memory (<b>434</b>). As the decoding of a symbol stream leads to bit-exact results independent of decoder location (local or remote), the content in the reference picture memory (<b>434</b>) is also bit exact between the local encoder and remote encoder. In other words, the prediction part of an encoder &#x201c;sees&#x201d; as reference picture samples exactly the same sample values as a decoder would &#x201c;see&#x201d; when using prediction during decoding. This fundamental principle of reference picture synchronicity (and resulting drift, if synchronicity cannot be maintained, for example because of channel errors) is used in some related arts as well.</p><p id="p-0054" num="0053">The operation of the &#x201c;local&#x201d; decoder (<b>433</b>) can be the same as of a &#x201c;remote&#x201d; decoder, such as the video decoder (<b>310</b>), which has already been described in detail above in conjunction with <figref idref="DRAWINGS">FIG. <b>3</b></figref>. Briefly referring also to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, however, as symbols are available and encoding/decoding of symbols to a coded video sequence by an entropy coder (<b>445</b>) and the parser (<b>320</b>) can be lossless, the entropy decoding parts of the video decoder (<b>310</b>), including the buffer memory (<b>315</b>), and parser (<b>320</b>) may not be fully implemented in the local decoder (<b>433</b>).</p><p id="p-0055" num="0054">An observation that can be made at this point is that any decoder technology except the parsing/entropy decoding that is present in a decoder also necessarily needs to be present, in substantially identical functional form, in a corresponding encoder. For this reason, the disclosed subject matter focuses on decoder operation. The description of encoder technologies can be abbreviated as they are the inverse of the comprehensively described decoder technologies. Only in certain areas a more detail description is required and provided below.</p><p id="p-0056" num="0055">During operation, in some examples, the source coder (<b>430</b>) may perform motion compensated predictive coding, which codes an input picture predictively with reference to one or more previously-coded picture from the video sequence that were designated as &#x201c;reference pictures&#x201d;. In this manner, the coding engine (<b>432</b>) codes differences between pixel blocks of an input picture and pixel blocks of reference picture(s) that may be selected as prediction reference(s) to the input picture.</p><p id="p-0057" num="0056">The local video decoder (<b>433</b>) may decode coded video data of pictures that may be designated as reference pictures, based on symbols created by the source coder (<b>430</b>). Operations of the coding engine (<b>432</b>) may advantageously be lossy processes. When the coded video data may be decoded at a video decoder (not shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), the reconstructed video sequence typically may be a replica of the source video sequence with some errors. The local video decoder (<b>433</b>) replicates decoding processes that may be performed by the video decoder on reference pictures and may cause reconstructed reference pictures to be stored in the reference picture cache (<b>434</b>). In this manner, the video encoder (<b>403</b>) may store copies of reconstructed reference pictures locally that have common content as the reconstructed reference pictures that will be obtained by a far-end video decoder (absent transmission errors).</p><p id="p-0058" num="0057">The predictor (<b>435</b>) may perform prediction searches for the coding engine (<b>432</b>). That is, for a new picture to be coded, the predictor (<b>435</b>) may search the reference picture memory (<b>434</b>) for sample data (as candidate reference pixel blocks) or certain metadata such as reference picture motion vectors, block shapes, and so on, that may serve as an appropriate prediction reference for the new pictures. The predictor (<b>435</b>) may operate on a sample block-by-pixel block basis to find appropriate prediction references. In some cases, as determined by search results obtained by the predictor (<b>435</b>), an input picture may have prediction references drawn from multiple reference pictures stored in the reference picture memory (<b>434</b>).</p><p id="p-0059" num="0058">The controller (<b>450</b>) may manage coding operations of the source coder (<b>430</b>), including, for example, setting of parameters and subgroup parameters used for encoding the video data.</p><p id="p-0060" num="0059">Output of all aforementioned functional units may be subjected to entropy coding in the entropy coder (<b>445</b>). The entropy coder (<b>445</b>) translates the symbols as generated by the various functional units into a coded video sequence, by lossless compressing the symbols according to technologies known to a person skilled in the art as, for example Huffman coding, variable length coding, arithmetic coding, and so forth.</p><p id="p-0061" num="0060">The transmitter (<b>440</b>) may buffer the coded video sequence(s) as created by the entropy coder (<b>445</b>) to prepare for transmission via a communication channel (<b>460</b>), which may be a hardware/software link to a storage device which would store the encoded video data. The transmitter (<b>440</b>) may merge coded video data from the video coder (<b>403</b>) with other data to be transmitted, for example, coded audio data and/or ancillary data streams (sources not shown).</p><p id="p-0062" num="0061">The controller (<b>450</b>) may manage operation of the video encoder (<b>403</b>). During coding, the controller (<b>450</b>) may assign to each coded picture a certain coded picture type, which may affect the coding techniques that may be applied to the respective picture. For example, pictures often may be assigned as one of the following picture types:</p><p id="p-0063" num="0062">An Intra Picture (I picture) may be one that may be coded and decoded without using any other picture in the sequence as a source of prediction. Some video codecs allow for different types of Intra pictures, including, for example Independent Decoder Refresh (&#x201c;IDR&#x201d;) Pictures. A person skilled in the art is aware of those variants of I pictures and their respective applications and features.</p><p id="p-0064" num="0063">A Predictive picture (P picture) may be one that may be coded and decoded using intra prediction or inter prediction using at most one motion vector and reference index to predict the sample values of each block.</p><p id="p-0065" num="0064">A Bi-directionally Predictive Picture (B Picture) may be one that may be coded and decoded using intra prediction or inter prediction using at most two motion vectors and reference indices to predict the sample values of each block. Similarly, multiple-predictive pictures can use more than two reference pictures and associated metadata for the reconstruction of a single block.</p><p id="p-0066" num="0065">Source pictures commonly may be subdivided spatially into a plurality of sample blocks (for example, blocks of 4&#xd7;4, 8&#xd7;8, 4&#xd7;8, or <b>16</b>x<b>16</b> samples each) and coded on a block-by-block basis. Blocks may be coded predictively with reference to other (already coded) blocks as determined by the coding assignment applied to the blocks' respective pictures. For example, blocks of I pictures may be coded non-predictively or they may be coded predictively with reference to already coded blocks of the same picture (spatial prediction or intra prediction). Pixel blocks of P pictures may be coded predictively, via spatial prediction or via temporal prediction with reference to one previously coded reference pictures. Blocks of B pictures may be coded predictively, via spatial prediction or via temporal prediction with reference to one or two previously coded reference pictures.</p><p id="p-0067" num="0066">The video encoder (<b>403</b>) may perform coding operations according to a predetermined video coding technology or standard, such as ITU-T Rec. H.265. In its operation, the video encoder (<b>403</b>) may perform various compression operations, including predictive coding operations that exploit temporal and spatial redundancies in the input video sequence. The coded video data, therefore, may conform to a syntax specified by the video coding technology or standard being used.</p><p id="p-0068" num="0067">In an embodiment, the transmitter (<b>440</b>) may transmit additional data with the encoded video. The source coder (<b>430</b>) may include such data as part of the coded video sequence. Additional data may comprise temporal/spatial/SNR enhancement layers, other forms of redundant data such as redundant pictures and slices, Supplementary Enhancement Information (SEI) messages, Visual Usability Information (VUI) parameter set fragments, and so on.</p><p id="p-0069" num="0068">A video may be captured as a plurality of source pictures (video pictures) in a temporal sequence. Intra-picture prediction (often abbreviated to Intra prediction) makes uses of spatial correlation in a given picture, and inter-picture prediction makes uses of the (temporal or other) correlation between the pictures. In an example, a specific picture under encoding/decoding, which is referred to as a current picture, is partitioned into blocks. When a block in the current picture is similar to a reference block in a previously coded and still buffered reference picture in the video, the block in the current picture can be coded by a vector that is referred to as a motion vector. The motion vector points to the reference block in the reference picture, and can have a third dimension identifying the reference picture, in case multiple reference pictures are in use.</p><p id="p-0070" num="0069">In some embodiments, a bi-prediction technique can be used in the inter-picture prediction. According to the bi-prediction technique, two reference pictures, such as a first and a second reference picture that are both prior in decoding order to the current picture in the video (but may be in the past and future, respectively, in display order) are used. A block in the current picture can be coded by a first motion vector that points to a first reference block in the first reference picture, and a second motion vector that points to a second reference block in the second reference picture. The block can be predicted by a combination of the first reference block and the second reference block.</p><p id="p-0071" num="0070">Further, a merge mode technique can be used in the inter-picture prediction to improve coding efficiency.</p><p id="p-0072" num="0071">According to some embodiments of the disclosure, predictions, such as inter-picture predictions and intra-picture predictions are performed in the unit of blocks. For example, according to the HEVC standard, a picture in a sequence of video pictures is partitioned into coding tree units (CTU) for compression, the CTUs in a picture have the same size, such as 64&#xd7;4 pixels, 32&#xd7;32 pixels, or 16&#xd7;16 pixels. In general, a CTU includes three coding tree blocks (CTBs), which are one luma CTB and two chroma CTBs. Each CTU can be recursively quadtree split into one or multiple coding units (CUs). For example, a CTU of 64&#xd7;64 pixels can be split into one coding unit (CU) of 64&#xd7;64 pixels, or 4 CUs of 32&#xd7;32 pixels, or 16 CUs of 16&#xd7;16 pixels. In an example, each CU is analyzed to determine a prediction type for the CU, such as an inter prediction type or an intra prediction type. The CU is split into one or more prediction units (PUs) depending on the temporal and/or spatial predictability. Generally, each PU includes a luma prediction block (PB), and two chroma PBs. In an embodiment, a prediction operation in coding (encoding/decoding) is performed in the unit of a prediction block. Using a luma prediction block as an example of a prediction block, the prediction block includes a matrix of values (e.g., luma values) for pixels, such as 8&#xd7;8 pixels, 16&#xd7;16 pixels, 8&#xd7;16 pixels, 16&#xd7;8 pixels and the like.</p><p id="p-0073" num="0072"><figref idref="DRAWINGS">FIG. <b>5</b></figref> shows a diagram of a video encoder (<b>503</b>) according to another embodiment of the disclosure. The video encoder (<b>503</b>) is configured to receive a processing block (e.g., a prediction block) of sample values within a current video picture in a sequence of video pictures, and encode the processing block into a coded picture that is part of a coded video sequence. In an example, the video encoder (<b>503</b>) is used in the place of the video encoder (<b>203</b>) in the <figref idref="DRAWINGS">FIG. <b>2</b></figref> example.</p><p id="p-0074" num="0073">In an HEVC example, the video encoder (<b>503</b>) receives a matrix of sample values for a processing block, such as a prediction block of 8&#xd7;8 samples, and the like. The video encoder (<b>503</b>) determines whether the processing block is best coded using intra mode, inter mode, or bi-prediction mode using, for example, rate-distortion optimization. When the processing block is to be coded in intra mode, the video encoder (<b>503</b>) may use an intra prediction technique to encode the processing block into the coded picture; and when the processing block is to be coded in inter mode or bi-prediction mode, the video encoder (<b>503</b>) may use an inter prediction or bi-prediction technique, respectively, to encode the processing block into the coded picture. In certain video coding technologies, merge mode can be an inter picture prediction submode where the motion vector is derived from one or more motion vector predictors without the benefit of a coded motion vector component outside the predictors. In certain other video coding technologies, a motion vector component applicable to the subject block may be present. In an example, the video encoder (<b>503</b>) includes other components, such as a mode decision module (not shown) to determine the mode of the processing blocks.</p><p id="p-0075" num="0074">In the <figref idref="DRAWINGS">FIG. <b>5</b></figref> example, the video encoder (<b>503</b>) includes the inter encoder (<b>530</b>), an intra encoder (<b>522</b>), a residue calculator (<b>523</b>), a switch (<b>526</b>), a residue encoder (<b>524</b>), a general controller (<b>521</b>) and an entropy encoder (<b>525</b>) coupled together as shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0076" num="0075">The inter encoder (<b>530</b>) is configured to receive the samples of the current block (e.g., a processing block), compare the block to one or more reference blocks in reference pictures (e.g., blocks in previous pictures and later pictures), generate inter prediction information (e.g., description of redundant information according to inter encoding technique, motion vectors, merge mode information), and calculate inter prediction results (e.g., predicted block) based on the inter prediction information using any suitable technique.</p><p id="p-0077" num="0076">The intra encoder (<b>522</b>) is configured to receive the samples of the current block (e.g., a processing block), in some cases compare the block to blocks already coded in the same picture, generate quantized coefficients after transform and, in some cases also intra prediction information (e.g., an intra prediction direction information according to one or more intra encoding techniques).</p><p id="p-0078" num="0077">The general controller (<b>521</b>) is configured to determine general control data and control other components of the video encoder (<b>503</b>) based on the general control data. In an example, the general controller (<b>521</b>) determines the mode of the block, and provides a control signal to the switch (<b>526</b>) based on the mode. For example, when the mode is the intra, the general controller (<b>521</b>) controls the switch (<b>526</b>) to select the intra mode result for use by the residue calculator (<b>523</b>), and controls the entropy encoder (<b>525</b>) to select the intra prediction information and include the intra prediction information in the bitstream; and when the mode is the inter mode, the general controller (<b>521</b>) controls the switch (<b>526</b>) to select the inter prediction result for use by the residue calculator (<b>523</b>), and controls the entropy encoder (<b>525</b>) to select the inter prediction information and include the inter prediction information in the bitstream.</p><p id="p-0079" num="0078">The residue calculator (<b>523</b>) is configured to calculate a difference (residue data) between the received block and prediction results selected from the intra encoder (<b>522</b>) or the inter encoder (<b>530</b>). The residue encoder (<b>524</b>) is configured to operate based on the residue data to encode the residue data to generate the transform coefficients. In an example, the residue encoder (<b>524</b>) is configured to convert the residue data in the frequency domain, and generate the transform coefficients. The transform coefficients are then subject to quantization processing to obtain quantized transform coefficients.</p><p id="p-0080" num="0079">The entropy encoder (<b>525</b>) is configured to format the bitstream to include the encoded block. The entropy encoder (<b>525</b>) is configured to include various information according to a suitable standard, such as HEVC standard. In an example, the entropy encoder (<b>525</b>) is configured to include the general control data, the selected prediction information (e.g., intra prediction information or inter prediction information), the residue information, and other suitable information in the bitstream. Note that, according to the disclosed subject matter, when coding a block in the merge submode of either inter mode or bi-prediction mode, there is no residue information.</p><p id="p-0081" num="0080"><figref idref="DRAWINGS">FIG. <b>6</b></figref> shows a diagram of a video decoder (<b>610</b>) according to another embodiment of the disclosure. The video decoder (<b>610</b>) is configured to receive a coded pictures that are part of a coded video sequence, and decode the coded picture to generate a reconstructed picture. In an example, the video decoder (<b>610</b>) is used in the place of the video decoder (<b>210</b>) in the <figref idref="DRAWINGS">FIG. <b>2</b></figref> example.</p><p id="p-0082" num="0081">In the <figref idref="DRAWINGS">FIG. <b>6</b></figref> example, the video decoder (<b>610</b>) includes an entropy decoder (<b>671</b>), an inter decoder (<b>680</b>), a residue decoder (<b>673</b>), a reconstruction module (<b>674</b>), and an intra decoder (<b>672</b>) coupled together as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0083" num="0082">The entropy decoder (<b>671</b>) can be configured to reconstruct, from the coded picture, certain symbols that represent the syntax elements of which the coded picture is made up. Such symbols can include, for example, the mode in which a block is coded (such as, for example, intra, inter, b-predicted, the latter two in merge submode or another submode), prediction information (such as, for example, intra prediction information or inter prediction information) that can identify certain sample or metadata that is used for prediction by the intra decoder (<b>672</b>) or the inter decoder (<b>680</b>) respectively residual information in the form of, for example, quantized transform coefficients, and the like. In an example, when the prediction mode is inter or bi-predicted mode, the inter prediction information is provided to the inter decoder (<b>680</b>); and when the prediction type is the intra prediction type, the intra prediction information is provided to the intra decoder (<b>672</b>). The residual information can be subject to inverse quantization and is provided to the residue decoder (<b>673</b>).</p><p id="p-0084" num="0083">The inter decoder (<b>680</b>) is configured to receive the inter prediction information, and generate inter prediction results based on the inter prediction information.</p><p id="p-0085" num="0084">The intra decoder (<b>672</b>) is configured to receive the intra prediction information, and generate prediction results based on the intra prediction information.</p><p id="p-0086" num="0085">The residue decoder (<b>673</b>) is configured to perform inverse quantization to extract de-quantized transform coefficients, and process the de-quantized transform coefficients to convert the residual from the frequency domain to the spatial domain. The residue decoder (<b>673</b>) may also require certain control information (to include the Quantizer Parameter QP), and that information may be provided by the entropy decoder (<b>671</b>) (datapath not depicted as this may be low volume control information only).</p><p id="p-0087" num="0086">The reconstruction module (<b>674</b>) is configured to combine, in the spatial domain, the residual as output by the residue decoder (<b>673</b>) and the prediction results (as output by the inter or intra prediction modules as the case may be) to form a reconstructed block, that may be part of the reconstructed picture, which in turn may be part of the reconstructed video. It is noted that other suitable operations, such as a deblocking operation and the like, can be performed to improve the visual quality.</p><p id="p-0088" num="0087">It is noted that the video encoders (<b>203</b>), (<b>403</b>) and (<b>503</b>), and the video decoders (<b>210</b>), (<b>310</b>) and (<b>610</b>) can be implemented using any suitable technique. In an embodiment, the video encoders (<b>203</b>), (<b>403</b>) and (<b>503</b>), and the video decoders (<b>210</b>), (<b>310</b>) and (<b>610</b>) can be implemented using one or more integrated circuits. In another embodiment, the video encoders (<b>203</b>), (<b>403</b>) and (<b>403</b>), and the video decoders (<b>210</b>), (<b>310</b>) and (<b>610</b>) can be implemented using one or more processors that execute software instructions.</p><p id="p-0089" num="0088">According to some embodiments, a motion vector (MV) for a block can be coded either in an explicit way, to signal the difference between a motion vector predictor, or in an implicit way, to be indicated as derived from one previously coded or generated motion vector, or motion vector pair if coded using bi-directional prediction. The implicit coding of a motion vector may be referred to as merge mode, where a current block is merged into a previously coded block by sharing the motion information of the previously coded block.</p><p id="p-0090" num="0089">Merge candidates may be formed by checking motion information from either spatial or temporal neighbouring blocks of the current block. Referring to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, a current block (<b>701</b>) comprises samples that have been found by the encoder/decoder during the motion search process to be predictable from a previous block of the same size that has been spatially shifted. In some embodiments, instead of coding that motion vector directly, the motion vector can be derived from metadata associated with one or more reference pictures, for example, from a most recent (in decoding order) reference picture, using the motion vector associated with either one of five surrounding samples, denoted D, A, C, B, and E (<b>702</b> through <b>706</b>, respectively). The blocks A, B, C, D, and E may be referred to as spatial merge candidates. These candidates may be sequentially checked into a merge candidate list. A pruning operation may be performed to make sure duplicated candidates are removed from the list.</p><p id="p-0091" num="0090">In some embodiments, after putting spatial candidates into the merge list, temporal candidates are also checked into the list. For example, a current block's collocated block in a specified reference picture is found. The motion information at the C<b>0</b> position (<b>707</b>) in the reference picture is used as a temporal merge candidate. The C<b>0</b> position may be a block in the reference picture in which the top left corner of this block is at a bottom right corner of a collocated block in the reference picture of the current block <b>701</b>. The collocated block in the reference picture may include the same position coordinates (e.g., x and y coordinates) as the current block <b>701</b>. If the block at the C<b>0</b> position (<b>707</b>) is not coded in an inter mode or is not available, the block at the C<b>1</b> position may be used. The block at the C<b>1</b> position may have a top left corner at a center location (e.g., w/2, h/2) of a block within the collocated block in the reference picture. Particularly, the block at position C<b>1</b> may be a sub-block of the collocated block in the reference picture. In the above example, w and h are the width and height of the block, respectively. According to some embodiments, additional merge candidates include combined bi-predictive candidates and zero motion vector candidates.</p><p id="p-0092" num="0091">According to some embodiments, Advanced Motion Vector Prediction (AMVP) uses spatial and temporal neighboring blocks' motion information to predict the motion information of a current block, while the prediction residue is further coded. The AMVP mode may also be referred to as the residue mode. <figref idref="DRAWINGS">FIG. <b>7</b></figref> illustrates examples of spatial and temporal neighboring candidates. In an example of the AMVP mode, a two-candidate motion vector predictor list is formed. The first candidate predictor is from a first available motion vector from the left edge in the order of the spatial A<b>0</b> and A<b>1</b> positions. The second candidate predictor is from a first available motion vector from the top edge, in the order of spatial B<b>0</b>, B<b>1</b>, and B<b>2</b> positions. If no valid motion vector is found from the checked locations for either the left edge or the top edge, no candidate will be filled in the motion vector predictor list. If the two candidates are available and are the same, one candidate is kept in the motion vector predictor list. If the motion vector predictor list is not full with two different candidates, the temporal collocated block's motion vector in the reference picture, after scaling, at the C<b>0</b> location is used as another candidate. If motion information at the collocated block of the C<b>0</b> location in the reference picture is not available, the collocated block of location C<b>1</b> in the reference picture is used instead. If, after checking the spatial and temporal candidates, there are still not enough motion vector predictor candidates, the zero motion vector is used to fill up the motion vector predictor list.</p><p id="p-0093" num="0092">According to some embodiments, in AMVP mode, after a motion vector is predicted by a MV prediction, the residue part is referred as a motion vector difference (MVD), which also has x and y components. The coding of the MVD may involve (i) a binarization of a difference value in each component and (ii) context modeling for some of the binarized bins.</p><p id="p-0094" num="0093">In a bi-directional predicted slice (B_slice), each block may be coded in either a forward prediction (i.e., predicted from a reference picture in list 0 or L0), a backward prediction (i.e., predicted from a reference picture in list 1 or L1), or a bi-directional prediction (i.e., predicted from two reference pictures one in list 0 and one in list 1). The former two cases may also be referred to as a uni-directional prediction. In some embodiments, if the bi-directional prediction is used in a coded block, there is a pair of motion vectors pointing to the two reference pictures. Furthermore, there is a pair of MVDs to be coded, which may be coded independently by existing video coding standards. <figref idref="DRAWINGS">FIG. <b>8</b></figref> illustrates example syntax in which the pair of MVDs are coded independently.</p><p id="p-0095" num="0094">Embodiments of the present disclosure include improved techniques for MVD coding by exploring correlations between the pair of MVDs when bi-directional prediction is used. The embodiments of the present disclosure improve coding efficiency in the bi-directional prediction. In this regard, the MVD of a first MV is used to predict the MVD of a second MV. After being predicted by the first MVD, the second MVD residue is further coded using an original MVD coding module, or a modified MVD coding module.</p><p id="p-0096" num="0095">According to some embodiments, more than one motion vector in a block needs to be coded, the MVD of a first vector is used as a predictor to predict the MVD(s) of the other MVs in the block. Using the bi-directional mode as an example, where a pair of MVs are to be coded, the MVD<b>1</b> is predicted by MVD<b>0</b>, before performing entropy coding for this MV difference.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates an embodiment of a prediction scheme, where MVx is the motion vector in List x (x=0, 1), MVPx is the motion vector predictor in List x, and MVDx is the motion vector difference in List x. As illustrated in <figref idref="DRAWINGS">FIG. <b>9</b></figref>, the second MVD (i.e., MVD<b>1</b>) is predicted using the first MVD (i.e., MVD<b>0</b>) as a predictor. Each of MVPO and MVP<b>1</b> may come from spatial or temporal neighboring blocks' motion vectors. When there are more than 1 motion vector candidates, for each of MVPO and MVP<b>1</b>, an index may be signaled to choose from the candidate list.</p><p id="p-0098" num="0097">According to some embodiments, conditions on whether the MVD<b>1</b> is predicted from MVD<b>0</b> may be specified. For example, MVD<b>1</b> may be predicted from MVD<b>0</b> only when (i) the reference picture from L0 has a picture order count (POC) number smaller than a POC of a current picture, and (ii) the reference picture from L1 has a POC number larger than the POC of the current picture. In another example, MVD<b>1</b> may be predicted from MVD<b>0</b> only when (ii) the reference picture from LO has a POC number larger than the POC of the current picture, and (ii) the reference picture from L1 has a POC number smaller than the POC of the current picture.</p><p id="p-0099" num="0098">In some embodiments, both MVD<b>0</b> and MVD<b>1</b> go through a same MVD entropy coding module that is designed also for other situations where only one MVD coding is performed. In another embodiment, the MVD<b>0</b> goes through a same MVD entropy coding module that is designed also for other situations where only one MVD coding is performed.</p><p id="p-0100" num="0099">Embodiments of the present disclosure disclose several methods of getting motion vector predictors for inter-picture prediction coding. These methods include storing N previously coded blocks' MV predictors in a history-based MV (HMVP) buffer. This buffer with multiple HMVP candidates is maintained during the encoding/decoding process. The buffer may operate in a first-in-first-out (FIFO) principle such that the most recent coded motion information is firstly considered when this buffer is used during motion vector prediction.</p><p id="p-0101" num="0100">These methods may be applied to both merge mode or AMVP mode. The embodiments of the present disclosure may be extended to any video coding method that uses the merge and general MV prediction concepts. Embodiments of the present disclosure may also be applied to the skip mode since this mode uses the merge mode to derive the motion information.</p><p id="p-0102" num="0101"><figref idref="DRAWINGS">FIGS. <b>10</b>A and <b>10</b>B</figref> illustrate an HMVP buffer before and after a candidate is inserted, respectively. As illustrated in <figref idref="DRAWINGS">FIGS. <b>10</b>A and <b>10</b>B</figref>, the HMVP buffer includes 5 entries with the index [<b>0</b>] to [<b>4</b>]. In <figref idref="DRAWINGS">FIG. <b>10</b>B</figref>, the entry CL_<b>0</b> is inserted at index [<b>4</b>], which causes the other entries to move to the left by one, resulting in the entry HMPV_<b>0</b> being removed from the buffer. The entry CL_<b>0</b> may include motion vector predictor information of a previously encoded or decoded block.</p><p id="p-0103" num="0102">According to some embodiments, the HMVP buffer is emptied or reset to a zero state when a condition is satisfied. The condition may be that (i) the current CU is the beginning of a CTU row and (ii) the current block is encoded/decoded using wavefront parallel processing. In wavefront parallel processing, before the encoding or decoding of a current row is completed, the encoding or decoding of another row may be started.</p><p id="p-0104" num="0103">According to some embodiments, an HMVP_row buffer with the same size of the HMVP buffer, is used to store the entries of the HMVP buffer, after the first CTU of every CTU row is completed. Accordingly, at the beginning of a new CTU row, the HMVP buffer may be filled with the information in the HMVP_row buffer. By resetting the HMVP buffer at the end of the CTU row, and copying the contents of the HMVP_row buffer to the HMVP buffer, the blocks of the first CTU being decoded may be decoded with information from the CTU directly above the first CTU.</p><p id="p-0105" num="0104">In some embodiments, for each tile in a picture, the HMVP_row buffer is used to store the HMVP information after the first CTU of each tile row is finished. Accordingly, for the first CTU of a new tile row, the HMVP buffer may be filled using the information from the HMVP_row buffer. In some embodiments, the HMVP_row buffer is initiated to a zero state at the beginning of a first CTU row of a tile or slice.</p><p id="p-0106" num="0105"><figref idref="DRAWINGS">FIG. <b>11</b></figref> illustrates an example picture <b>1100</b> that is divided into CTUs CTU_<b>00</b> to CTU_<b>23</b>. CTUs CTU_<b>00</b> to CTU_<b>03</b> are in the first CTU row CTU_Row_[<b>0</b>]. CTUs CTU_<b>10</b> to CTU_<b>13</b> are in the second CTU row CTU_Row_[<b>1</b>]. CTUs CTU_<b>20</b> to CTU_<b>23</b> are in the third CTU_row. Each CTU in the picture <b>1100</b> may be further divided into a plurality of blocks. The blocks may be CUs or coding blocks (CBs).</p><p id="p-0107" num="0106">In some embodiments, when wavefront parallel processing is used to encode or decode the picture <b>1100</b>, at least two processor threads may be used. Each processor thread may have an associated HMVP buffer, and a shared row buffer. For example, referring to picture <b>1100</b>, processor threads PT_<b>1</b> and PT_<b>2</b> may be used for the encoding or decoding of picture <b>1100</b>. Processor thread PT_<b>1</b> may be associated with history buffer HMVP_<b>1</b>, and processor thread PT_<b>2</b> may be associated with history buffer HMVP_<b>2</b>. Furthermore, each of processor threads PT_<b>1</b> and PT_<b>2</b> may share the same history row buffer.</p><p id="p-0108" num="0107">In some embodiments, before the first block in the first CTU (e.g., CTU_<b>00</b>) of picture <b>1100</b> is encoded or decoded, the associated HMVP buffer of the processor thread that encodes or decodes the CTUs in the first CTU row is loaded with initial values. The initial values may be stored in the memory of an encoder or decoder. In an another example, the associated HMVP buffer of the processor thread that encodes or decodes the CTUs in the first CTU row may initialized to a zero state. Additionally, the HMVP_row buffer may be initialized to a zero state before the first block in the first CTU (e.g., CTU_<b>00</b>) of picture <b>1100</b> is encoded or decoded.</p><p id="p-0109" num="0108">Processor thread PT_<b>1</b> may be used to start encoding the CTUs in CTU Row_[<b>0</b>]. When the last block of CTU_<b>00</b> (e.g., first CTU in CTU_Row_[<b>0</b>]) is encoded or decoded by PT_<b>1</b>, the contents of the buffer HMVP _<b>1</b> are copied to the HMVP_row buffer. When the last block of CTU_<b>03</b> is encoded or decoded (e.g., last CTU in CTU_Row_[<b>0</b>]) by PT_<b>1</b> the buffer HMVP_<b>1</b> is emptied.</p><p id="p-0110" num="0109">Furthermore, when the last block of CTU_<b>01</b> is encoded or decoded by PT_<b>1</b>, the contents of the HMVP_row buffer may be copied to the buffer HMVP_<b>2</b>, and the encoding or decoding of the CTUs in the next CTU row (i.e., CTU_Row_[<b>1</b>]) may by started by the second processor thread PT_<b>2</b>. In this regard, processor thread PT_<b>2</b> starts encoding or decoding the CTUs of CTU_Row_[<b>1</b>] while the processor thread PT_<b>1</b> is still encoding or decoding the CTUs of CTU_Row_[<b>0</b>]. When the last block of CTU_<b>10</b> (e.g., first CTU in CTU_Row_[<b>1</b>]) is encoded or decoded by PT_<b>2</b>, the contents of the buffer HMVP_<b>2</b> are copied to the HMVP_row buffer. When the last block of CTU_<b>13</b> is encoded or decoded (e.g., last CTU in CTU_Row_[<b>1</b>]) by PT_<b>2</b>, the buffer HMVP_<b>2</b> is emptied.</p><p id="p-0111" num="0110">Additionally, when the first processor thread PT_<b>1</b> has finished encoding or decoding the CTUs CTU_Row_[<b>0</b>], and after the contents of buffer HMVP_<b>2</b> are copied to the HMVP_row buffer, the contents of the HMVP_row buffer are copied to the buffer HMVP_<b>1</b>, and the encoding or decoding of the CTUs in CTU_row[<b>2</b>] may be started by the first processor thread PT_<b>1</b>. In this regard, processor thread PT_<b>1</b> starts encoding or decoding the CTUs of CTU_Row_[<b>2</b>] while the processor thread PT_<b>2</b> is still encoding or decoding the CTUs of CTU_Row_[<b>1</b>].</p><p id="p-0112" num="0111">Accordingly, in the above example, by resetting the contents of buffers HMVP_<b>1</b> and HMVP_<b>2</b> and copying the contents of the HMVP_row buffer to buffers HMVP_<b>1</b> and HMVP_<b>2</b> as discussed above, the significantly advantageous features of (i) the encoding or decoding of the blocks in the first CTU of each row with relevant motion information, and (ii) the encoding and decoding of CTU rows in parallel is achieved.</p><p id="p-0113" num="0112"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates an example of picture <b>1100</b> divided into two tiles Tile_<b>1</b> and Tile_<b>2</b>. When wavefront parallel processing is used when encoding or decoding picture <b>1100</b>, Tile_<b>1</b> and Tile _<b>2</b> may have separate processor threads. For example, Tile_<b>1</b> may have processor threads Tile_<b>1</b>_PT_<b>1</b> and Tile_<b>1</b>_PT <b>2</b>, where these processor threads are associated with buffers Tile <b>1</b>_HMVP_<b>1</b> and Tile <b>1</b>_HMVP_<b>2</b>, respectively. Tile_<b>2</b> may have processor threads Tile_<b>2</b>_PT_<b>1</b> and Tile_<b>2</b>_PT_<b>2</b>, where these processor threads are associated with buffers Tile_<b>2</b>_HMVP_<b>1</b> and Tile_<b>2</b>_HMVP_<b>2</b>, respectively. Furthermore, the processor threads of Tile <b>1</b> may use a shared row buffer HMVP_row_<b>1</b> buffer, and the processor threads of Tile <b>2</b> may use the shared row buffer HMVP_row_<b>2</b>.</p><p id="p-0114" num="0113">As an example, processor thread Tile_<b>1</b>_PT_<b>1</b> is used to process the CTUs in Tile_Row_[<b>0</b>] of Tile <b>1</b>. In some embodiments, before the first block in the first CTU of Tile_<b>1</b> (e.g., CTU_<b>00</b>) is encoded or decoded, the buffer_Tile <b>1</b>_HMVP_<b>1</b> is loaded with initial values. The initial values may be stored in the memory of an encoder or decoder. In another example, the buffer Tile_<b>1</b>_HMVP_<b>1</b> may be initialized to a zero state. Additionally, the row buffer HMVP_row_<b>1</b> may be initialized to a zero state before the first block in the first CTU (e.g., CTU_<b>00</b>) of Tile is encoded or decoded. When the last block of CTU_<b>00</b> (e.g., first CTU in CTU_Row_[<b>0</b>] of Tile_<b>1</b>) is encoded or decoded by Tile_<b>1</b>_PT_<b>1</b>, the contents of the buffer Tile_<b>1</b>_HMVP_<b>1</b> is copied to the row buffer HMVP_row_<b>1</b>. When the last block of CTU_<b>01</b> is encoded or decoded (e.g., last CTU in CTU_Row_[<b>0</b>] of Tile_<b>1</b>), the buffer Tile_<b>1</b>_HMVP_<b>1</b> is reset. Furthermore, when the last block of CTU_<b>00</b> is encoded or decoded, the contents of the row buffer HMVP_row_<b>1</b> are copied to the buffer Tile_<b>1</b>_HMVP_<b>2</b>, and the processor thread Tile_<b>1</b>_PT_<b>2</b> may start the encoding or decoding of the CTUs in Tile_Row_[<b>1</b>] of Tile <b>1</b> while the processor thread Tile_<b>1</b>_PT_<b>1</b> is still encoding or decoding the CTUs of tile row Tile_Row[<b>0</b>] of Tile <b>1</b>.</p><p id="p-0115" num="0114">Tile _<b>2</b> may be encoded or decoded in parallel with Tile_<b>1</b>. As an example, processor thread Tile_<b>2</b>_PT_<b>1</b> is used to process the CTUs in Tile_Row_[<b>0</b>] of Tile <b>2</b>. The buffers Tile_<b>2</b>_HMVP_<b>1</b> and HMVP_row_<b>2</b> may be initialized in the same manner as the buffers Tile <b>1</b>_HMVP_<b>1</b> and HMVO_row_<b>1</b>, respectively, as described above. When the last block of CTU_<b>02</b> (e.g., first CTU in CTU_Row_[<b>0</b>] of Tile_<b>2</b>) is encoded or decoded by Tile_<b>2</b>_PT_<b>1</b>, the contents of the buffer Tile_<b>2</b>_HMVP_<b>1</b> is copied to the row buffer HMVP_row_<b>2</b>. When the last block of CTU_<b>03</b> is encoded or decoded (e.g., last CTU in CTU_Row_[<b>0</b>] of Tile_<b>2</b>) by Tile_<b>2</b>_PT_<b>1</b>, the buffer Tile_<b>2</b>_HMVP_<b>1</b> is reset. Furthermore, when the last block of CTU_<b>02</b> is encoded or decoded, the contents of the row buffer HMVP_row_<b>2</b> are copied to the buffer Tile_<b>2</b>_HMVP_<b>2</b>, and the processor thread Tile_<b>2</b>_PT_<b>2</b> may start the encoding or decoding of the CTUs in Tile_Row_[<b>1</b>] of Tile <b>2</b> while the processor thread Tile_<b>1</b>_PT_<b>1</b> is still encoding or decoding the CTUs of tile row Tile_Row[<b>0</b>] of Tile <b>2</b>.</p><p id="p-0116" num="0115"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates an embodiment of a process performed by an encoder such as encoder <b>503</b> or a decoder such as decoder <b>610</b>. The process may start at step <b>51300</b> where a current picture is acquired from a video bitstream. For example, picture <b>1100</b> (<figref idref="DRAWINGS">FIG. <b>11</b></figref>) may be the acquired picture. The process proceeds to step S<b>1302</b> where a current block from the current picture is encoded/decoded using one or more entries from an HMVP buffer. For example, referring to picture <b>1100</b>, if the first block in CTU_<b>00</b> is being encoded/decoded, the buffer HMVP_<b>1</b> may be initialized to an initial state, and the first block may be encoded/decoded with one or more entries from the buffer HMVP_<b>1</b> after this buffer is initialized. The process proceeds to step S<b>1304</b> where the HMVP buffer is updated with motion vector information of the encoded/decoded current block.</p><p id="p-0117" num="0116">The process proceeds to step <b>51306</b> where it is determined whether parallel processing is enabled for the current picture. For example, it may be determined that wavefront parallel processing is enabled for the picture <b>1100</b>. If parallel processing is not enabled for the current picture, the process proceeds to step S<b>1316</b>, which is described in further detail below.</p><p id="p-0118" num="0117">If parallel processing is enabled for the current picture, the process proceeds to step S<b>1308</b> to determine whether the current encoded/decoded block is at the end of the CTU row. For example, referring to picture <b>1100</b>, if the current block that is encoded/decoded is the last block of CTU_<b>03</b>, then the current encoded/decoded block is at the end of CTU_Row_[<b>0</b>]. If the current encoded/decoded block is at the end of the CTU row, the process proceeds to step S<b>1310</b> where the HMVP buffer is reset (e.g., emptied). For example, if processor thread PT_<b>1</b> is used to encode or decode the CTUs of CTU_Row_[<b>0</b>], the buffer HMVP_<b>1</b> is reset after the last block of CTU_<b>03</b> is processed. The process proceeds from step S<b>1310</b> to step S<b>1316</b>, which is described in further detail below.</p><p id="p-0119" num="0118">If the current encoded/decoded block is not the end of the CTU row, the process proceeds to step S<b>1312</b> to determine whether the current encoded/decoded block is the last block of the first CTU in the CTU row. If the current encoded/decoded block is the last block of the first CTU in the CTU row, the process proceeds to step S<b>1314</b> where the contents of the HMVP buffer are copied into the HVMP_row buffer. For example, referring to picture <b>1100</b>, if the current encoded/decoded block is the last block of CTU_<b>00</b>, the contents of the buffer HVMP_<b>1</b> buffer are copied into the contents of the HMVP_row buffer before the first block of CTU_<b>01</b> is encoded/decoded. As discussed above, after the last block of CTU_<b>01</b> is encoded/decoded, the contents of the HMVP_row buffer are copied to the buffer HMVP_<b>2</b>, where the processor thread PT_<b>2</b> can start encoding/decoding the CTUs of CTU_Row_[<b>1</b>] while the processor thread is still encoding or decoding the CTUs of CTU_Row_[<b>0</b>]. The process proceeds from step S<b>1314</b> to step S<b>1316</b>, which is described in further detail below.</p><p id="p-0120" num="0119">If the current encoded/decoded block is not the last block of the first CTU in the CTU row, the process proceeds to step S<b>1316</b> to determine if the current encoded/decoded block is the last block in the acquired picture. If the current encoded/decoded block is the last block in the acquired picture, the process in <figref idref="DRAWINGS">FIG. <b>13</b></figref> ends. For example, if the current encoded/decoded block is the last block of CTU_<b>23</b>, the process in <figref idref="DRAWINGS">FIG. <b>13</b></figref> is completed. If the current encoded/decoded block is not the last block in the acquired picture, the process returns from step S<b>1316</b> to step S<b>1302</b>.</p><p id="p-0121" num="0120">The techniques described above, can be implemented as computer software using computer-readable instructions and physically stored in one or more computer-readable media. For example, <figref idref="DRAWINGS">FIG. <b>14</b></figref> shows a computer system (<b>1400</b>) suitable for implementing certain embodiments of the disclosed subject matter.</p><p id="p-0122" num="0121">The computer software can be coded using any suitable machine code or computer language, that may be subject to assembly, compilation, linking, or like mechanisms to create code comprising instructions that can be executed directly, or through interpretation, micro-code execution, and the like, by one or more computer central processing units (CPUs), Graphics Processing Units (GPUs), and the like.</p><p id="p-0123" num="0122">The instructions can be executed on various types of computers or components thereof, including, for example, personal computers, tablet computers, servers, smartphones, gaming devices, internet of things devices, and the like.</p><p id="p-0124" num="0123">The components shown in <figref idref="DRAWINGS">FIG. <b>14</b></figref> for computer system (<b>1400</b>) are exemplary in nature and are not intended to suggest any limitation as to the scope of use or functionality of the computer software implementing embodiments of the present disclosure. Neither should the configuration of components be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary embodiment of a computer system (<b>1400</b>).</p><p id="p-0125" num="0124">Computer system (<b>1400</b>) may include certain human interface input devices. Such a human interface input device may be responsive to input by one or more human users through, for example, tactile input (such as: keystrokes, swipes, data glove movements), audio input (such as: voice, clapping), visual input (such as: gestures), olfactory input (not depicted). The human interface devices can also be used to capture certain media not necessarily directly related to conscious input by a human, such as audio (such as: speech, music, ambient sound), images (such as: scanned images, photographic images obtain from a still image camera), video (such as two-dimensional video, three-dimensional video including stereoscopic video).</p><p id="p-0126" num="0125">Input human interface devices may include one or more of (only one of each depicted): keyboard (<b>1401</b>), mouse (<b>1402</b>), trackpad (<b>1403</b>), touch screen (<b>1410</b>), data-glove (not shown), joystick (<b>1405</b>), microphone (<b>1406</b>), scanner (<b>1407</b>), camera (<b>1408</b>).</p><p id="p-0127" num="0126">Computer system (<b>1400</b>) may also include certain human interface output devices. Such human interface output devices may be stimulating the senses of one or more human users through, for example, tactile output, sound, light, and smell/taste. Such human interface output devices may include tactile output devices (for example tactile feedback by the touch-screen (<b>1410</b>), data-glove (not shown), or joystick (<b>1405</b>), but there can also be tactile feedback devices that do not serve as input devices), audio output devices (such as: speakers (<b>1409</b>), headphones (not depicted)), visual output devices (such as screens (<b>1410</b>) to include CRT screens, LCD screens, plasma screens, OLED screens, each with or without touch-screen input capability, each with or without tactile feedback capability&#x2014;some of which may be capable to output two dimensional visual output or more than three dimensional output through means such as stereographic output; virtual-reality glasses (not depicted), holographic displays and smoke tanks (not depicted)), and printers (not depicted).</p><p id="p-0128" num="0127">Computer system (<b>1400</b>) can also include human accessible storage devices and their associated media such as optical media including CD/DVD ROM/RW (<b>1420</b>) with CD/DVD or the like media (<b>1421</b>), thumb-drive (<b>1422</b>), removable hard drive or solid state drive (<b>1423</b>), legacy magnetic media such as tape and floppy disc (not depicted), specialized ROM/ASIC/PLD based devices such as security dongles (not depicted), and the like.</p><p id="p-0129" num="0128">Those skilled in the art should also understand that term &#x201c;computer readable media&#x201d; as used in connection with the presently disclosed subject matter does not encompass transmission media, carrier waves, or other transitory signals.</p><p id="p-0130" num="0129">Computer system (<b>1400</b>) can also include an interface to one or more communication networks. Networks can for example be wireless, wireline, optical. Networks can further be local, wide-area, metropolitan, vehicular and industrial, real-time, delay-tolerant, and so on. Examples of networks include local area networks such as Ethernet, wireless LANs, cellular networks to include GSM, 3G, 4G, 5G, LTE and the like, TV wireline or wireless wide area digital networks to include cable TV, satellite TV, and terrestrial broadcast TV, vehicular and industrial to include CANBus, and so forth. Certain networks commonly require external network interface adapters that attached to certain general purpose data ports or peripheral buses (<b>1449</b>) (such as, for example USB ports of the computer system (<b>1400</b>)); others are commonly integrated into the core of the computer system (<b>1400</b>) by attachment to a system bus as described below (for example Ethernet interface into a PC computer system or cellular network interface into a smartphone computer system). Using any of these networks, computer system (<b>1400</b>) can communicate with other entities. Such communication can be uni-directional, receive only (for example, broadcast TV), uni-directional send-only (for example CANbus to certain CANbus devices), or bi-directional, for example to other computer systems using local or wide area digital networks. Certain protocols and protocol stacks can be used on each of those networks and network interfaces as described above.</p><p id="p-0131" num="0130">Aforementioned human interface devices, human-accessible storage devices, and network interfaces can be attached to a core (<b>1440</b>) of the computer system (<b>1400</b>).</p><p id="p-0132" num="0131">The core (<b>1440</b>) can include one or more Central Processing Units (CPU) (<b>1441</b>), Graphics Processing Units (GPU) (<b>1442</b>), specialized programmable processing units in the form of Field Programmable Gate Areas (FPGA) (<b>1443</b>), hardware accelerators for certain tasks (<b>1444</b>), and so forth. These devices, along with Read-only memory (ROM) (<b>1445</b>), Random-access memory (<b>1446</b>), internal mass storage such as internal non-user accessible hard drives, SSDs, and the like (<b>1447</b>), may be connected through a system bus (<b>1448</b>). In some computer systems, the system bus (<b>1448</b>) can be accessible in the form of one or more physical plugs to enable extensions by additional CPUs, GPU, and the like. The peripheral devices can be attached either directly to the core's system bus (<b>1448</b>), or through a peripheral bus (<b>1449</b>). Architectures for a peripheral bus include PCI, USB, and the like.</p><p id="p-0133" num="0132">CPUs (<b>1441</b>), GPUs (<b>1442</b>), FPGAs (<b>1443</b>), and accelerators (<b>1444</b>) can execute certain instructions that, in combination, can make up the aforementioned computer code. That computer code can be stored in ROM (<b>1445</b>) or RAM (<b>1446</b>). Transitional data can be also be stored in RAM (<b>1446</b>), whereas permanent data can be stored for example, in the internal mass storage (<b>1447</b>). Fast storage and retrieve to any of the memory devices can be enabled through the use of cache memory, that can be closely associated with one or more CPU (<b>1441</b>), GPU (<b>1442</b>), mass storage (<b>1447</b>), ROM (<b>1445</b>), RAM (<b>1446</b>), and the like.</p><p id="p-0134" num="0133">The computer readable media can have computer code thereon for performing various computer-implemented operations. The media and computer code can be those specially designed and constructed for the purposes of the present disclosure, or they can be of the kind well known and available to those having skill in the computer software arts.</p><p id="p-0135" num="0134">As an example and not by way of limitation, the computer system having architecture (<b>1400</b>), and specifically the core (<b>1440</b>) can provide functionality as a result of processor(s) (including CPUs, GPUs, FPGA, accelerators, and the like) executing software embodied in one or more tangible, computer-readable media. Such computer-readable media can be media associated with user-accessible mass storage as introduced above, as well as certain storage of the core (<b>1440</b>) that are of non-transitory nature, such as core-internal mass storage (<b>1447</b>) or ROM (<b>1445</b>). The software implementing various embodiments of the present disclosure can be stored in such devices and executed by core (<b>1440</b>). A computer-readable medium can include one or more memory devices or chips, according to particular needs. The software can cause the core (<b>1440</b>) and specifically the processors therein (including CPU, GPU, FPGA, and the like) to execute particular processes or particular parts of particular processes described herein, including defining data structures stored in RAM (<b>1446</b>) and modifying such data structures according to the processes defined by the software. In addition or as an alternative, the computer system can provide functionality as a result of logic hardwired or otherwise embodied in a circuit (for example: accelerator (<b>1444</b>)), which can operate in place of or together with software to execute particular processes or particular parts of particular processes described herein. Reference to software can encompass logic, and vice versa, where appropriate. Reference to a computer-readable media can encompass a circuit (such as an integrated circuit (IC)) storing software for execution, a circuit embodying logic for execution, or both, where appropriate. The present disclosure encompasses any suitable combination of hardware and software.</p><p id="p-0136" num="0135">Appendix A: Acronyms<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0136">MV: Motion Vector</li>    <li id="ul0001-0002" num="0137">HEVC: High Efficiency Video Coding</li>    <li id="ul0001-0003" num="0138">SEI: Supplementary Enhancement Information</li>    <li id="ul0001-0004" num="0139">VUI: Video Usability Information</li>    <li id="ul0001-0005" num="0140">GOPs: Groups of Pictures</li>    <li id="ul0001-0006" num="0141">TUs: Transform Units,</li>    <li id="ul0001-0007" num="0142">PUs: Prediction Units</li>    <li id="ul0001-0008" num="0143">CTUs: Coding Tree Units</li>    <li id="ul0001-0009" num="0144">CTBs: Coding Tree Blocks</li>    <li id="ul0001-0010" num="0145">PBs: Prediction Blocks</li>    <li id="ul0001-0011" num="0146">HRD: Hypothetical Reference Decoder</li>    <li id="ul0001-0012" num="0147">SNR: Signal Noise Ratio</li>    <li id="ul0001-0013" num="0148">CPUs: Central Processing Units</li>    <li id="ul0001-0014" num="0149">GPUs: Graphics Processing Units</li>    <li id="ul0001-0015" num="0150">CRT: Cathode Ray Tube</li>    <li id="ul0001-0016" num="0151">LCD: Liquid-Crystal Display</li>    <li id="ul0001-0017" num="0152">OLED: Organic Light-Emitting Diode</li>    <li id="ul0001-0018" num="0153">CD: Compact Disc</li>    <li id="ul0001-0019" num="0154">DVD: Digital Video Disc</li>    <li id="ul0001-0020" num="0155">ROM: Read-Only Memory</li>    <li id="ul0001-0021" num="0156">RAM: Random Access Memory</li>    <li id="ul0001-0022" num="0157">ASIC: Application-Specific Integrated Circuit</li>    <li id="ul0001-0023" num="0158">PLD: Programmable Logic Device</li>    <li id="ul0001-0024" num="0159">LAN: Local Area Network</li>    <li id="ul0001-0025" num="0160">GSM: Global System for Mobile communications</li>    <li id="ul0001-0026" num="0161">LTE: Long-Term Evolution</li>    <li id="ul0001-0027" num="0162">CANBus: Controller Area Network Bus</li>    <li id="ul0001-0028" num="0163">USB: Universal Serial Bus</li>    <li id="ul0001-0029" num="0164">PCI: Peripheral Component Interconnect</li>    <li id="ul0001-0030" num="0165">FPGA: Field Programmable Gate Areas</li>    <li id="ul0001-0031" num="0166">SSD: solid-state drive</li>    <li id="ul0001-0032" num="0167">IC: Integrated Circuit</li>    <li id="ul0001-0033" num="0168">CU: Coding Unit</li></ul></p><p id="p-0137" num="0169">While this disclosure has described several exemplary embodiments, there are alterations, permutations, and various substitute equivalents, which fall within the scope of the disclosure. It will thus be appreciated that those skilled in the art will be able to devise numerous systems and methods which, although not explicitly shown or described herein, embody the principles of the disclosure and are thus within the spirit and scope thereof.</p><p id="p-0138" num="0170">(1) A method of video decoding for a decoder, the method including acquiring a current picture from a coded video bitstream, the current picture being segmented into a plurality of units, each unit divided into a plurality of blocks, the plurality of blocks in each unit being arranged as a grid; decoding, for one of the units, a current block from the plurality of blocks using an entry from a history motion vector (HMVP) buffer; updating the HMVP buffer with a motion vector of the decoded current block; determining whether a condition is satisfied, the condition specifying that (i) the current block is a beginning of a row included in the grid of the one of the units, and (ii) the plurality of blocks are decoded in accordance with a parallel process; and in response to determining that the condition is satisfied, resetting the HMVP buffer.</p><p id="p-0139" num="0171">(2) The method according to feature (1), further including determining whether the current block is a last block of a first unit of the row; and in response to determining that the current block is the last block of the first unit of the row, copying contents of the HMVP buffer into a row buffer.</p><p id="p-0140" num="0172">(3) The method according to feature (2), further including in response to determining that the current block is a last block of a second unit of the row, copying contents of the row buffer into another HMVP buffer for parallel decoding of the next row.</p><p id="p-0141" num="0173">(4) The method according to any one of features (1)-(3), in which the HMVP buffer is a first-in-first-out (FIFO) buffer, and in which the updating the HMVP buffer with the motion vector includes storing the motion vector at a last entry of the HMVP buffer and deleting a first entry of the HMVP buffer.</p><p id="p-0142" num="0174">(5) The method according to any one of features (1)-(4), in which the unit is a coding tree unit (CTU).</p><p id="p-0143" num="0175">(6) The method according to any one of features (2)-(5), in which the unit is a tile, the decoded one of the units is a first tile, and the first tile and a second tile from the plurality of units are decoded in parallel.</p><p id="p-0144" num="0176">(7) A video decoder for video decoding including processing circuitry configured to: acquire a current picture from a coded video bitstream, the current picture being segmented into a plurality of units, each unit divided into a plurality of blocks, the plurality of blocks in each unit being arranged as a grid, decode, for one of the units, a current block from the plurality of blocks using an entry from a history motion vector (HMVP) buffer, update the HMVP buffer with a motion vector of the decoded current block, determine whether a condition is satisfied, the condition specifying that (i) the current block is a beginning of a row included in the grid of the one of the units, and (ii) the plurality of blocks are decoded in accordance with a parallel process, and in response to the determination that the condition is satisfied, reset the HMVP buffer.</p><p id="p-0145" num="0177">(8) The video decoder according to feature (7), in which the processing circuitry is further configured to: determine whether the current block is a last block of a first unit of the row, and in response to the determination that the current block is the last block of the first unit of the row, copying contents of the HMVP buffer into a row buffer.</p><p id="p-0146" num="0178">(9) The video decoder according to feature (8), in which the processing circuitry is further configured to: in response to the determination that the current block is a last block of a second unit of the row, copying contents of the row buffer into another HMVP buffer for parallel decoding of the next row.</p><p id="p-0147" num="0179">(10) The video decoder according to any one of features (7)-(9), in which the HMVP buffer is a first-in-first-out (FIFO) buffer, and in which the updating the HMVP buffer with the motion vector includes storing the motion vector at a last entry of the HMVP buffer and deleting a first entry of the HMVP buffer.</p><p id="p-0148" num="0180">(11) The video decoder according to any one of features (7)-(10), in which the unit is a coding tree unit (CTU).</p><p id="p-0149" num="0181">(12) The video decoder according to any one of features (8)-(11), in which the unit is a tile, the decoded one of the units is a first tile, and the first tile and a second tile from the plurality of units are decoded in parallel.</p><p id="p-0150" num="0182">(13) A non-transitory computer readable medium having instructions stored therein, which when executed by a processor in a video decoder causes the processor to execute a method including acquiring a current picture from a coded video bitstream, the current picture being segmented into a plurality of units, each unit divided into a plurality of blocks, the plurality of blocks in each unit being arranged as a grid; decoding, for one of the units, a current block from the plurality of blocks using an entry from a history motion vector (HMVP) buffer; updating the HMVP buffer with a motion vector of the decoded current block; determining whether a condition is satisfied, the condition specifying that (i) the current block is a beginning of a row included in the grid of the one of the units, and (ii) the plurality of blocks are decoded in accordance with a parallel process; and in response to determining that the condition is satisfied, resetting the HMVP buffer.</p><p id="p-0151" num="0183">(14) The non-transitory computer readable medium according to feature (13), the method further including determining whether the current block is a last block of a first unit of the row; and in response to determining that the current block is the last block of the first unit of the row, copying contents of the HMVP buffer into a row buffer.</p><p id="p-0152" num="0184">(15) The non-transitory computer readable medium according to feature (14), the method further comprising: in response to determining that the current block is a last block of a second unit of the row, copying contents of the row buffer into another HMVP buffer for parallel decoding of the next row.</p><p id="p-0153" num="0185">(16) The non-transitory computer readable medium according to any one of features (13)-(15), in which the HMVP buffer is a first-in-first-out (FIFO) buffer, and in which the updating the HMVP buffer with the motion vector includes storing the motion vector at a last entry of the HMVP buffer and deleting a first entry of the HMVP buffer.</p><p id="p-0154" num="0186">(17) The non-transitory computer readable medium according to any one of features (13)-(16), in which the unit is a coding tree unit (CTU).</p><p id="p-0155" num="0187">(18) The non-transitory computer readable medium according to any one of features (14)-(17), in which the unit is a tile, the decoded one of the units is a first tile, and the first tile and a second tile from the plurality of units are decoded in parallel.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A method of video encoding, the method comprising:<claim-text>acquiring a current picture to be coded, the current picture being segmented into a plurality of tiles, each tile comprising a plurality of units arranged in a plurality of rows, each row having a plurality of units, each unit being divided into a plurality of blocks;</claim-text><claim-text>prior to encoding a first tile of the plurality of tiles, initializing a shared row buffer that is shared among multiple processor threads associated with the first tile, each of the multiple processor threads having a corresponding history motion vector predictor (HMVP) buffer;</claim-text><claim-text>encoding a first unit of the plurality of units in a first row of the first tile by a first processor thread of the multiple processor threads and using a corresponding first HMVP buffer, the first unit being encoded chronologically first among the plurality of units in the first row;</claim-text><claim-text>in response to determining that all of the plurality of blocks in the first unit have been encoded,<claim-text>copying contents of the first HMVP buffer corresponding to the first processor thread into the shared row buffer, the contents corresponding to motion vectors of encoded blocks included in the first unit;</claim-text><claim-text>copying contents of the shared row buffer into a second HMVP buffer corresponding to a second processor thread of the multiple processor threads; and</claim-text><claim-text>starting encoding of a unit in a second row of the plurality of rows by the second processor thread using the second HMVP buffer; and</claim-text></claim-text><claim-text>in response to determining that the plurality of units in the first row of the first tile have been encoded, resetting the first HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the first HMVP buffer and the second HMVP buffer are a first-in-first-out (FIFO) buffers, and wherein the method further comprises updating the first HMVP buffer and the second HMVP buffer by storing a motion vector at a last entry of one of the first HMVP buffer or the second HMVP buffer and deleting a first entry of the one of the first HMVP buffer or the second HMVP buffer.</claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising:<claim-text>prior to encoding a second tile of the plurality of tiles, initializing a second shared row buffer that is shared among multiple processor threads associated with the second tile, each of the multiple processor threads associated with the second tile having a corresponding history motion vector predictor (HMVP) buffer;</claim-text><claim-text>encoding a first unit of the plurality of units in a first row of the second tile by a third processor thread of the multiple processor threads associated with the second tile and using a corresponding third HMVP buffer, the first unit being encoded chronologically first among the plurality of units in the first row of the second tile;</claim-text><claim-text>in response to determining that all of the plurality of blocks in the first unit of the first row of the second tile have been encoded,<claim-text>copying contents of the third HMVP buffer corresponding to the third processor thread into the second shared row buffer, the contents corresponding to motion vectors of encoded blocks included in the first unit of the first row of the second tile;</claim-text><claim-text>copying contents of the second shared row buffer into a fourth HMVP buffer corresponding to a fourth processor thread of the multiple processor threads; and</claim-text><claim-text>starting encoding of a unit in a second row of the plurality of rows of the second tile by the fourth processor thread using the fourth HMVP buffer; and</claim-text></claim-text><claim-text>in response to determining that the plurality of units in the first row of the second tile have been encoded, resetting the third HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The method according to <claim-ref idref="CLM-00003">claim 3</claim-ref>, wherein the second tile is encoded in parallel with the first tile.</claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising, prior to the encoding the first unit of the plurality of units in the first row of the first tile, loading the first HMVP buffer with pre-stored initial values.</claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising updating the first HMVP buffer with motion vector information of each of the plurality of units in the first row of the first tile after the respective unit is encoded.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The method according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, further comprising<claim-text>determining whether wavefront parallel processing is enabled for the current picture; and</claim-text><claim-text>in response to a determination that the wavefront parallel processing is enabled for the current picture, performing the initializing the shared row buffer, the copying the contents of the first HMVP buffer corresponding to the first processor thread into the shared row buffer, and the copying the contents of the shared row buffer into the second HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. A video encoder for video encoding, comprising:<claim-text>processing circuitry configured to<claim-text>acquire a current picture to be coded, the current picture being segmented into a plurality of tiles, each tile comprising a plurality of units arranged in a plurality of rows, each row having a plurality of units, each unit being divided into a plurality of blocks,</claim-text><claim-text>prior to encoding a first tile of the plurality of tiles, initialize a shared row buffer that is shared among multiple processor threads associated with the first tile, each of the multiple processor threads having a corresponding history motion vector predictor (HMVP) buffer;</claim-text><claim-text>encode a first unit of the plurality of units in a first row of the first tile by a first processor thread of the multiple processor threads and using a corresponding first HMVP buffer, the first unit being encoded chronologically first among the plurality of units in the first row,</claim-text><claim-text>in response to a determination that all of the plurality of blocks of the first unit have been decoded,<claim-text>copy contents of the first HMVP buffer corresponding to the first processor thread into the shared row buffer, the contents corresponding to motion vectors of encoded blocks included in the first unit,</claim-text><claim-text>copy contents of the shared row buffer into a second HMVP buffer corresponding to a second processor thread of the multiple processor threads; and</claim-text><claim-text>start encoding of a unit in a second row of the plurality of rows by the second processor thread using the second HMVP buffer; and</claim-text></claim-text></claim-text><claim-text>in response to determining that the plurality of units in the first row of the first tile have been encoded, reset the first HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The video encoder according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the first HMVP buffer and the second HMVP buffer are a first-in-first-out (FIFO) buffers, and wherein the processing circuitry is further configured to update the first HMVP buffer and the second HMVP buffer by storing a motion vector at a last entry of one of the first HMVP buffer or the second HMVP buffer and deleting a first entry of the one of the first HMVP buffer or the second HMVP buffer.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The video encoder according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processing circuitry is further configured to:<claim-text>prior to encoding a second tile of the plurality of tiles, initialize a second shared row buffer that is shared among multiple processor threads associated with the second tile, each of the multiple processor threads associated with the second tile having a corresponding history motion vector predictor (HMVP) buffer;</claim-text><claim-text>encode a first unit of the plurality of units in a first row of the second tile by a third processor thread of the multiple processor threads associated with the second tile and using a corresponding third HMVP buffer, the first unit being encoded chronologically first among the plurality of units in the first row of the second tile;</claim-text><claim-text>in response to determining that all of the plurality of blocks in the first unit of the first row of the second tile have been encoded,<claim-text>copy contents of the third HMVP buffer corresponding to the third processor thread into the second shared row buffer, the contents corresponding to motion vectors of encoded blocks included in the first unit of the first row of the second tile;</claim-text><claim-text>copy contents of the second shared row buffer into a fourth HMVP buffer corresponding to a fourth processor thread of the multiple processor threads; and</claim-text><claim-text>start encoding of a unit in a second row of the plurality of rows of the second tile by the fourth processor thread using the fourth HMVP buffer; and</claim-text></claim-text><claim-text>in response to determining that the plurality of units in the first row of the second tile have been encoded, reset the third HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The video encoder according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, wherein the second tile is encoded in parallel with the first tile.</claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The video encoder according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processing circuitry is further configured to, prior to the encoding the first unit of the plurality of units in the first row of the first tile, load the first HMVP buffer with pre-stored initial values.</claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The video encoder according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, wherein the processing circuitry is further configured to update the first HMVP buffer with motion vector information of each of the plurality of units in the first row of the first tile after the respective unit is encoded.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. The video encoder according to <claim-ref idref="CLM-00008">claim 8</claim-ref>, the processing circuitry being further configured to:<claim-text>determine whether wavefront parallel processing is enabled for the current picture; and</claim-text><claim-text>in response to a determination that the wavefront parallel processing is enabled for the current picture, perform the initializing the shared row buffer, the copying the contents of the first HMVP buffer corresponding to the first processor thread into the shared row buffer, and the copying the contents of the shared row buffer into the second HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. A non-transitory computer readable medium having instructions stored therein, which, when executed by a processor in a video encoder, cause the processor to execute a method comprising:<claim-text>acquiring a current picture to be coded, the current picture being segmented into a plurality of tiles, each tile comprising a plurality of units arranged in a plurality of rows, each row having a plurality of units, each unit being divided into a plurality of blocks;</claim-text><claim-text>prior to encoding a first tile of the plurality of tiles, initializing a shared row buffer that is shared among multiple processor threads associated with the first tile, each of the multiple processor threads having a corresponding history motion vector predictor (HMVP) buffer;</claim-text><claim-text>encoding a first unit of the plurality of units in a first row of the first tile by a first processor thread of the multiple processor threads and using a corresponding first HMVP buffer, the first unit being encoded chronologically first among the plurality of units in the first row;</claim-text><claim-text>in response to determining that all of the plurality of blocks in the first unit have been encoded,<claim-text>copying contents of the first HMVP buffer corresponding to the first processor thread into the shared row buffer, the contents corresponding to motion vectors of encoded blocks included in the first unit;</claim-text><claim-text>copying contents of the shared row buffer into a second HMVP buffer corresponding to a second processor thread of the multiple processor threads; and</claim-text><claim-text>starting encoding of a unit in a second row of the plurality of rows by the second processor thread using the second HMVP buffer; and</claim-text></claim-text><claim-text>in response to determining that the plurality of units in the first row of the first tile have been encoded, resetting the first HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, wherein the first HMVP buffer and the second HMVP buffer are a first-in-first-out (FIFO) buffers, and wherein the method further comprises updating the first HMVP buffer and the second HMVP buffer by storing a motion vector at a last entry of one of the first HMVP buffer or the second HMVP buffer and deleting a first entry of the one of the first HMVP buffer or the second HMVP buffer.</claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising:<claim-text>prior to encoding a second tile of the plurality of tiles, initializing a second shared row buffer that is shared among multiple processor threads associated with the second tile, each of the multiple processor threads associated with the second tile having a corresponding history motion vector predictor (HMVP) buffer;</claim-text><claim-text>encoding a first unit of the plurality of units in a first row of the second tile by a third processor thread of the multiple processor threads associated with the second tile and using a corresponding third HMVP buffer, the first unit being encoded chronologically first among the plurality of units in the first row of the second tile;</claim-text><claim-text>in response to determining that all of the plurality of blocks in the first unit of the first row of the second tile have been encoded,<claim-text>copying contents of the third HMVP buffer corresponding to the third processor thread into the second shared row buffer, the contents corresponding to motion vectors of encoded blocks included in the first unit of the first row of the second tile;</claim-text><claim-text>copying contents of the second shared row buffer into a fourth HMVP buffer corresponding to a fourth processor thread of the multiple processor threads; and</claim-text><claim-text>starting encoding of a unit in a second row of the plurality of rows of the second tile by the fourth processor thread using the fourth HMVP buffer; and</claim-text></claim-text><claim-text>in response to determining that the plurality of units in the first row of the second tile have been encoded, resetting the third HMVP buffer.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00017">claim 17</claim-ref>, wherein the second tile is encoded in parallel with the first tile.</claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising, prior to the encoding the first unit of the plurality of units in the first row of the first tile, loading the first HMVP buffer with pre-stored initial values.</claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The non-transitory computer readable medium according to <claim-ref idref="CLM-00015">claim 15</claim-ref>, further comprising updating the first HMVP buffer with motion vector information of each of the plurality of units in the first row of the first tile after the respective unit is encoded.</claim-text></claim></claims></us-patent-application>