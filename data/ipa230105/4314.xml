<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230004315A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230004315</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17878869</doc-number><date>20220801</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>62</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>13</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>32</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0641</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>067</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>21</main-group><subgroup>6218</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>08</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0623</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20190101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>16</main-group><subgroup>137</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0608</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>0894</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3297</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0683</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>3239</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20220501</date></cpc-version-indicator><section>H</section><class>04</class><subclass>L</subclass><main-group>9</main-group><subgroup>50</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">Preserving Data Deduplication in a Multi-Tenant Storage System</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16171907</doc-number><date>20181026</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11403019</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17878869</doc-number></document-id></child-doc></relation></continuation><continuation-in-part><relation><parent-doc><document-id><country>US</country><doc-number>15494360</doc-number><date>20170421</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>10678754</doc-number></document-id></parent-grant-document></parent-doc><child-doc><document-id><country>US</country><doc-number>16171907</doc-number></document-id></child-doc></relation></continuation-in-part><us-provisional-application><document-id><country>US</country><doc-number>62639009</doc-number><date>20180306</date></document-id></us-provisional-application><us-provisional-application><document-id><country>US</country><doc-number>62750764</doc-number><date>20181025</date></document-id></us-provisional-application></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>PURE STORAGE, INC.</orgname><address><city>Mountain View</city><state>CA</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>NAGLE</last-name><first-name>SWAPNIL CHANDRASHEKHAR</first-name><address><city>SUNNYVALE</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>PRAKASHAIAH</last-name><first-name>VIRENDRA</first-name><address><city>SUNNYVALE</city><state>CA</state><country>US</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>KARR</last-name><first-name>RONALD</first-name><address><city>PALO ALTO</city><state>CA</state><country>US</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">A method includes receiving a request to write a data block to a volume resident on a multi-tenant storage array, wherein the request is associated with a first tenant of the multi-tenant storage array, and determining whether the data block matches an existing data block on the multi-tenant storage array, wherein the existing block corresponds to a second tenant. In response to determining that the decrypted data block matches the existing data block: encrypting the existing data block with a shared volume encryption key; encrypting the shared volume encryption key with a first tenant encryption key and providing the shared volume encryption key encrypted with the first tenant encryption key to the first tenant; and encrypting the shared volume encryption key with a second tenant encryption key and providing the shared volume encryption key encrypted with the second tenant encryption key to the second tenant.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="109.64mm" wi="158.75mm" file="US20230004315A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="226.23mm" wi="172.55mm" orientation="landscape" file="US20230004315A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.27mm" wi="148.08mm" orientation="landscape" file="US20230004315A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="223.60mm" wi="144.36mm" orientation="landscape" file="US20230004315A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="224.87mm" wi="163.07mm" orientation="landscape" file="US20230004315A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="210.82mm" wi="136.06mm" orientation="landscape" file="US20230004315A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="187.71mm" wi="147.91mm" orientation="landscape" file="US20230004315A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="231.82mm" wi="169.08mm" file="US20230004315A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="186.10mm" wi="172.30mm" file="US20230004315A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="214.63mm" wi="159.09mm" orientation="landscape" file="US20230004315A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="224.62mm" wi="171.53mm" file="US20230004315A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="219.79mm" wi="155.45mm" file="US20230004315A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="199.31mm" wi="139.28mm" file="US20230004315A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="259.25mm" wi="196.17mm" orientation="landscape" file="US20230004315A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="259.25mm" wi="196.26mm" orientation="landscape" file="US20230004315A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="244.60mm" wi="179.92mm" file="US20230004315A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="258.23mm" wi="179.92mm" file="US20230004315A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is a continuation application of U.S. Pat. No. 11,403,019, issued Aug. 2, 2022, which is a continuation-in-part of U.S. Pat. No. 10,678,754, issued Jun. 9, 2020, and claims the benefit of U.S. Provisional Application 62/639,009 filed on Mar. 6, 2018, and U.S. Provisional Application 62/750,764 filed on Oct. 25, 2018, all of which are hereby incorporated by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">TECHNICAL FIELD</heading><p id="p-0003" num="0002">The present disclosure is generally related to per-tenant encryption, and more particularly, to deduplication-aware per-tenant encryption.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">Storage systems, such as enterprise storage systems, may include a centralized or de-centralized repository for data that provides common data management, data protection, and data sharing functions, for example, through connections to computer systems.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF DRAWINGS</heading><p id="p-0005" num="0004"><figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates a first example system for data storage in accordance with some implementations.</p><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates a second example system for data storage in accordance with some implementations.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system for data storage in accordance with some implementations.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a fourth example system for data storage in accordance with some implementations.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster with multiple storage nodes and internal storage coupled to each storage node to provide network attached storage, in accordance with some embodiments.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing an interconnect switch coupling multiple storage nodes in accordance with some embodiments.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node and contents of one of the non-volatile solid state storage units in accordance with some embodiments.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes and storage units of some previous figures in accordance with some embodiments.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade hardware block diagram, showing a control plane, compute and storage planes, and authorities interacting with underlying physical resources, in accordance with some embodiments.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities and storage resources in blades of a storage cluster, in accordance with some embodiments.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system that is coupled for data communications with a cloud services provider in accordance with some embodiments of the present disclosure.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system in accordance with some embodiments of the present disclosure.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a first block diagram for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates a second block diagram for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a first flow diagram for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a second flow diagram for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0022" num="0021">Data deduplication is a process to eliminate or remove redundant data to improve the utilization of storage resources. For example, during the deduplication process, blocks of data may be processed and stored. When a subsequent block of data is received, the subsequent block of data may be compared with the previously stored block of data. If the subsequent block of data matches with the previously stored block of data, then the subsequent block of data may not be stored in the storage resource. Instead, a pointer to the previously stored block of data may replace the contents of the subsequent block of data.</p><p id="p-0023" num="0022">Aspects of the present disclosure relate to providing per-tenant data deduplication in a multi-tenant storage array. In some embodiments, distributed storage systems may implement data deduplication techniques to identify a data block received in a write request to determine whether a duplicate copy of the data block is currently stored in the storage system. The deduplication process may use a hash function that generates a hash value based on the data block. The generated hash value may be compared with hash values of a deduplication map that identifies currently stored data blocks at the storage system. If the generated hash value matches with any of the hash values in the deduplication map, then the data block may be considered to be a copy or duplicate of another data block that is currently stored at the storage system.</p><p id="p-0024" num="0023">In some multi-tenant environments, each tenant might want to have their volumes encrypted with a unique encryption key that is not shared with other tenants. While this offers an increased level of security, deduplication in such an environment may be difficult. Advantageously, aspects of the present disclosure address the above difficulty, and others, by providing for deduplication-aware per-tenant encryption. The systems and methods described in the present disclosure may allow for increased storage efficiency in storage systems by allowing for the deduplication of data that was previously incapable of being deduplicated. In addition to increasing storage space efficiencies, processing efficiencies may also be realized as a result of increased storage capacity.</p><p id="p-0025" num="0024">It should be noted that, in some embodiments, although an &#x201c;encryption key&#x201d; is referred to herein for convenience, an encryption key may include any of the above encryption information, and/or any other suitable information. In one embodiment, an encryption key, as referred to herein, may be an encryption/decryption key as used in a symmetric encryption algorithm, for example. In other embodiments, other types of keys may be used.</p><p id="p-0026" num="0025">Example methods, apparatus, and products for deduplication-aware per-tenant encryption in accordance with embodiments of the present disclosure are described with reference to the accompanying drawings, beginning with <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> illustrates an example system for data storage, in accordance with some implementations. System <b>100</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>100</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0027" num="0026">System <b>100</b> includes a number of computing devices <b>164</b>A-B. Computing devices (also referred to as &#x201c;client devices&#x201d; herein) may be embodied, for example, a server in a data center, a workstation, a personal computer, a notebook, or the like. Computing devices <b>164</b>A-B may be coupled for data communications to one or more storage arrays <b>102</b>A-B through a storage area network (&#x2018;SAN&#x2019;) <b>158</b> or a local area network (&#x2018;LAN&#x2019;) <b>160</b>.</p><p id="p-0028" num="0027">The SAN <b>158</b> may be implemented with a variety of data communications fabrics, devices, and protocols. For example, the fabrics for SAN <b>158</b> may include Fibre Channel, Ethernet, Infiniband, Serial Attached Small Computer System Interface (&#x2018;SAS&#x2019;), or the like. Data communications protocols for use with SAN <b>158</b> may include Advanced Technology Attachment (&#x2018;ATA&#x2019;), Fibre Channel Protocol, Small Computer System Interface (SCSI), Internet Small Computer System Interface (&#x2018;iSCSI&#x2019;), HyperSCSI, Non-Volatile Memory Express (&#x2018;NVMe&#x2019;) over Fabrics, or the like. It may be noted that SAN <b>158</b> is provided for illustration, rather than limitation. Other data communication couplings may be implemented between computing devices <b>164</b>A-B and storage arrays <b>102</b>A-B.</p><p id="p-0029" num="0028">The LAN <b>160</b> may also be implemented with a variety of fabrics, devices, and protocols. For example, the fabrics for LAN <b>160</b> may include Ethernet (802.3), wireless (802.11), or the like. Data communication protocols for use in LAN <b>160</b> may include Transmission Control Protocol (&#x2018;TCP&#x2019;), User Datagram Protocol (&#x2018;UDP&#x2019;), Internet Protocol (&#x2018;IP&#x2019;), HyperText Transfer Protocol (&#x2018;HTTP&#x2019;), Wireless Access Protocol (&#x2018;WAP&#x2019;), Handheld Device Transport Protocol (&#x2018;HDTP&#x2019;), Session Initiation Protocol (&#x2018;SIP&#x2019;), Real Time Protocol (&#x2018;RTP&#x2019;), or the like.</p><p id="p-0030" num="0029">Storage arrays <b>102</b>A-B may provide persistent data storage for the computing devices <b>164</b>A-B. Storage array <b>102</b>A may be contained in a chassis (not shown), and storage array <b>102</b>B may be contained in another chassis (not shown), in implementations. Storage array <b>102</b>A and <b>102</b>B may include one or more storage array controllers <b>110</b>A-D (also referred to as &#x201c;controller&#x201d; herein). A storage array controller <b>110</b>A-D may be embodied as a module of automated computing machinery comprising computer hardware, computer software, or a combination of computer hardware and software. In some implementations, the storage array controllers <b>110</b>A-D may be configured to carry out various storage tasks. Storage tasks may include writing data received from the computing devices <b>164</b>A-B to storage array <b>102</b>A-B, erasing data from storage array <b>102</b>A-B, retrieving data from storage array <b>102</b>A-B and providing data to computing devices <b>164</b>A-B, monitoring and reporting of disk utilization and performance, performing redundancy operations, such as Redundant Array of Independent Drives (&#x2018;RAID&#x2019;) or RAID-like data redundancy operations, compressing data, encrypting data, and so forth.</p><p id="p-0031" num="0030">Storage array controller <b>110</b>A-D may be implemented in a variety of ways, including as a Field Programmable Gate Array (&#x2018;FPGA&#x2019;), a Programmable Logic Chip (&#x2018;PLC&#x2019;), an Application Specific Integrated Circuit (&#x2018;ASIC&#x2019;), System-on-Chip (&#x2018;SOC&#x2019;), or any computing device that includes discrete components such as a processing device, central processing unit, computer memory, or various adapters. Storage array controller <b>110</b>A-D may include, for example, a data communications adapter configured to support communications via the SAN <b>158</b> or LAN <b>160</b>. In some implementations, storage array controller <b>110</b>A-D may be independently coupled to the LAN <b>160</b>. In implementations, storage array controller <b>110</b>A-D may include an I/O controller or the like that couples the storage array controller <b>110</b>A-D for data communications, through a midplane (not shown), to a persistent storage resource <b>170</b>A-B (also referred to as a &#x201c;storage resource&#x201d; herein). The persistent storage resource <b>170</b>A-B main include any number of storage drives <b>171</b>A-F (also referred to as &#x201c;storage devices&#x201d; herein) and any number of non-volatile Random Access Memory (&#x2018;NVRAM&#x2019;) devices (not shown).</p><p id="p-0032" num="0031">In some implementations, the NVRAM devices of a persistent storage resource <b>170</b>A-B may be configured to receive, from the storage array controller <b>110</b>A-D, data to be stored in the storage drives <b>171</b>A-F. In some examples, the data may originate from computing devices <b>164</b>A-B. In some examples, writing data to the NVRAM device may be carried out more quickly than directly writing data to the storage drive <b>171</b>A-F. In implementations, the storage array controller <b>110</b>A-D may be configured to utilize the NVRAM devices as a quickly accessible buffer for data destined to be written to the storage drives <b>171</b>A-F. Latency for write requests using NVRAM devices as a buffer may be improved relative to a system in which a storage array controller <b>110</b>A-D writes data directly to the storage drives <b>171</b>A-F. In some implementations, the NVRAM devices may be implemented with computer memory in the form of high bandwidth, low latency RAM. The NVRAM device is referred to as &#x201c;non-volatile&#x201d; because the NVRAM device may receive or include a unique power source that maintains the state of the RAM after main power loss to the NVRAM device. Such a power source may be a battery, one or more capacitors, or the like. In response to a power loss, the NVRAM device may be configured to write the contents of the RAM to a persistent storage, such as the storage drives <b>171</b>A-F.</p><p id="p-0033" num="0032">In implementations, storage drive <b>171</b>A-F may refer to any device configured to record data persistently, where &#x201c;persistently&#x201d; or &#x201c;persistent&#x201d; refers as to a device's ability to maintain recorded data after loss of power. In some implementations, storage drive <b>171</b>A-F may correspond to non-disk storage media. For example, the storage drive <b>171</b>A-F may be one or more solid-state drives (&#x2018;SSDs&#x2019;), flash memory based storage, any type of solid-state non-volatile memory, or any other type of non-mechanical storage device. In other implementations, storage drive <b>171</b>A-F may include mechanical or spinning hard disk, such as hard-disk drives (&#x2018;HDD&#x2019;).</p><p id="p-0034" num="0033">In some implementations, the storage array controllers <b>110</b>A-D may be configured for offloading device management responsibilities from storage drive <b>171</b>A-F in storage array <b>102</b>A-B. For example, storage array controllers <b>110</b>A-D may manage control information that may describe the state of one or more memory blocks in the storage drives <b>171</b>A-F. The control information may indicate, for example, that a particular memory block has failed and should no longer be written to, that a particular memory block contains boot code for a storage array controller <b>110</b>A-D, the number of program-erase (&#x2018;P/E&#x2019;) cycles that have been performed on a particular memory block, the age of data stored in a particular memory block, the type of data that is stored in a particular memory block, and so forth. In some implementations, the control information may be stored with an associated memory block as metadata. In other implementations, the control information for the storage drives <b>171</b>A-F may be stored in one or more particular memory blocks of the storage drives <b>171</b>A-F that are selected by the storage array controller <b>110</b>A-D. The selected memory blocks may be tagged with an identifier indicating that the selected memory block contains control information. The identifier may be utilized by the storage array controllers <b>110</b>A-D in conjunction with storage drives <b>171</b>A-F to quickly identify the memory blocks that contain control information. For example, the storage controllers <b>110</b>A-D may issue a command to locate memory blocks that contain control information. It may be noted that control information may be so large that parts of the control information may be stored in multiple locations, that the control information may be stored in multiple locations for purposes of redundancy, for example, or that the control information may otherwise be distributed across multiple memory blocks in the storage drive <b>171</b>A-F.</p><p id="p-0035" num="0034">In implementations, storage array controllers <b>110</b>A-D may offload device management responsibilities from storage drives <b>171</b>A-F of storage array <b>102</b>A-B by retrieving, from the storage drives <b>171</b>A-F, control information describing the state of one or more memory blocks in the storage drives <b>171</b>A-F. Retrieving the control information from the storage drives <b>171</b>A-F may be carried out, for example, by the storage array controller <b>110</b>A-D querying the storage drives <b>171</b>A-F for the location of control information for a particular storage drive <b>171</b>A-F. The storage drives <b>171</b>A-F may be configured to execute instructions that enable the storage drive <b>171</b>A-F to identify the location of the control information. The instructions may be executed by a controller (not shown) associated with or otherwise located on the storage drive <b>171</b>A-F and may cause the storage drive <b>171</b>A-F to scan a portion of each memory block to identify the memory blocks that store control information for the storage drives <b>171</b>A-F. The storage drives <b>171</b>A-F may respond by sending a response message to the storage array controller <b>110</b>A-D that includes the location of control information for the storage drive <b>171</b>A-F. Responsive to receiving the response message, storage array controllers <b>110</b>A-D may issue a request to read data stored at the address associated with the location of control information for the storage drives <b>171</b>A-F.</p><p id="p-0036" num="0035">In other implementations, the storage array controllers <b>110</b>A-D may further offload device management responsibilities from storage drives <b>171</b>A-F by performing, in response to receiving the control information, a storage drive management operation. A storage drive management operation may include, for example, an operation that is typically performed by the storage drive <b>171</b>A-F (e.g., the controller (not shown) associated with a particular storage drive <b>171</b>A-F). A storage drive management operation may include, for example, ensuring that data is not written to failed memory blocks within the storage drive <b>171</b>A-F, ensuring that data is written to memory blocks within the storage drive <b>171</b>A-F in such a way that adequate wear leveling is achieved, and so forth.</p><p id="p-0037" num="0036">In implementations, storage array <b>102</b>A-B may implement two or more storage array controllers <b>110</b>A-D. For example, storage array <b>102</b>A may include storage array controllers <b>110</b>A and storage array controllers <b>110</b>B. At a given instance, a single storage array controller <b>110</b>A-D (e.g., storage array controller <b>110</b>A) of a storage system <b>100</b> may be designated with primary status (also referred to as &#x201c;primary controller&#x201d; herein), and other storage array controllers <b>110</b>A-D (e.g., storage array controller <b>110</b>A) may be designated with secondary status (also referred to as &#x201c;secondary controller&#x201d; herein). The primary controller may have particular rights, such as permission to alter data in persistent storage resource <b>170</b>A-B (e.g., writing data to persistent storage resource <b>170</b>A-B). At least some of the rights of the primary controller may supersede the rights of the secondary controller. For instance, the secondary controller may not have permission to alter data in persistent storage resource <b>170</b>A-B when the primary controller has the right. The status of storage array controllers <b>110</b>A-D may change. For example, storage array controller <b>110</b>A may be designated with secondary status, and storage array controller <b>110</b>B may be designated with primary status.</p><p id="p-0038" num="0037">In some implementations, a primary controller, such as storage array controller <b>110</b>A, may serve as the primary controller for one or more storage arrays <b>102</b>A-B, and a second controller, such as storage array controller <b>110</b>B, may serve as the secondary controller for the one or more storage arrays <b>102</b>A-B. For example, storage array controller <b>110</b>A may be the primary controller for storage array <b>102</b>A and storage array <b>102</b>B, and storage array controller <b>110</b>B may be the secondary controller for storage array <b>102</b>A and <b>102</b>B. In some implementations, storage array controllers <b>110</b>C and <b>110</b>D (also referred to as &#x201c;storage processing modules&#x201d;) may neither have primary or secondary status. Storage array controllers <b>110</b>C and <b>110</b>D, implemented as storage processing modules, may act as a communication interface between the primary and secondary controllers (e.g., storage array controllers <b>110</b>A and <b>110</b>B, respectively) and storage array <b>102</b>B. For example, storage array controller <b>110</b>A of storage array <b>102</b>A may send a write request, via SAN <b>158</b>, to storage array <b>102</b>B. The write request may be received by both storage array controllers <b>110</b>C and <b>110</b>D of storage array <b>102</b>B. Storage array controllers <b>110</b>C and <b>110</b>D facilitate the communication, e.g., send the write request to the appropriate storage drive <b>171</b>A-F. It may be noted that in some implementations storage processing modules may be used to increase the number of storage drives controlled by the primary and secondary controllers.</p><p id="p-0039" num="0038">In implementations, storage array controllers <b>110</b>A-D are communicatively coupled, via a midplane (not shown), to one or more storage drives <b>171</b>A-F and to one or more NVRAM devices (not shown) that are included as part of a storage array <b>102</b>A-B. The storage array controllers <b>110</b>A-D may be coupled to the midplane via one or more data communication links and the midplane may be coupled to the storage drives <b>171</b>A-F and the NVRAM devices via one or more data communications links. The data communications links described herein are collectively illustrated by data communications links <b>108</b>A-D and may include a Peripheral Component Interconnect Express (&#x2018;PCIe&#x2019;) bus, for example.</p><p id="p-0040" num="0039"><figref idref="DRAWINGS">FIG. <b>1</b>B</figref> illustrates an example system for data storage, in accordance with some implementations. Storage array controller <b>101</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b>B</figref> may be similar to the storage array controllers <b>110</b>A-D described with respect to <figref idref="DRAWINGS">FIG. <b>1</b>A</figref>. In one example, storage array controller <b>101</b> may be similar to storage array controller <b>110</b>A or storage array controller <b>110</b>B. Storage array controller <b>101</b> includes numerous elements for purposes of illustration rather than limitation. It may be noted that storage array controller <b>101</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations. It may be noted that elements of <figref idref="DRAWINGS">FIG. <b>1</b>A</figref> may be included below to help illustrate features of storage array controller <b>101</b>.</p><p id="p-0041" num="0040">Storage array controller <b>101</b> may include one or more processing devices <b>104</b> and random access memory (&#x2018;RAM&#x2019;) <b>111</b>. Processing device <b>104</b> (or controller <b>101</b>) represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device <b>104</b> (or controller <b>101</b>) may be a complex instruction set computing (&#x2018;CISC&#x2019;) microprocessor, reduced instruction set computing (&#x2018;RISC&#x2019;) microprocessor, very long instruction word (&#x2018;VLIW&#x2019;) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device <b>104</b> (or controller <b>101</b>) may also be one or more special-purpose processing devices such as an application specific integrated circuit (&#x2018;ASIC&#x2019;), a field programmable gate array (&#x2018;FPGA&#x2019;), a digital signal processor (&#x2018;DSP&#x2019;), network processor, or the like.</p><p id="p-0042" num="0041">The processing device <b>104</b> may be connected to the RAM <b>111</b> via a data communications link <b>106</b>, which may be embodied as a high speed memory bus such as a Double-Data Rate 4 (&#x2018;DDR4&#x2019;) bus. Stored in RAM <b>111</b> is an operating system <b>112</b>. In some implementations, instructions <b>113</b> are stored in RAM <b>111</b>. Instructions <b>113</b> may include computer program instructions for performing operations in in a direct-mapped flash storage system. In one embodiment, a direct-mapped flash storage system is one that that addresses data blocks within flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0043" num="0042">In implementations, storage array controller <b>101</b> includes one or more host bus adapters <b>103</b>A-C that are coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C. In implementations, host bus adapters <b>103</b>A-C may be computer hardware that connects a host system (e.g., the storage array controller) to other network and storage arrays. In some examples, host bus adapters <b>103</b>A-C may be a Fibre Channel adapter that enables the storage array controller <b>101</b> to connect to a SAN, an Ethernet adapter that enables the storage array controller <b>101</b> to connect to a LAN, or the like. Host bus adapters <b>103</b>A-C may be coupled to the processing device <b>104</b> via a data communications link <b>105</b>A-C such as, for example, a PCIe bus.</p><p id="p-0044" num="0043">In implementations, storage array controller <b>101</b> may include a host bus adapter <b>114</b> that is coupled to an expander <b>115</b>. The expander <b>115</b> may be used to attach a host system to a larger number of storage drives. The expander <b>115</b> may, for example, be a SAS expander utilized to enable the host bus adapter <b>114</b> to attach to storage drives in an implementation where the host bus adapter <b>114</b> is embodied as a SAS controller.</p><p id="p-0045" num="0044">In implementations, storage array controller <b>101</b> may include a switch <b>116</b> coupled to the processing device <b>104</b> via a data communications link <b>109</b>. The switch <b>116</b> may be a computer hardware device that can create multiple endpoints out of a single endpoint, thereby enabling multiple devices to share a single endpoint. The switch <b>116</b> may, for example, be a PCIe switch that is coupled to a PCIe bus (e.g., data communications link <b>109</b>) and presents multiple PCIe connection points to the midplane.</p><p id="p-0046" num="0045">In implementations, storage array controller <b>101</b> includes a data communications link <b>107</b> for coupling the storage array controller <b>101</b> to other storage array controllers. In some examples, data communications link <b>107</b> may be a QuickPath Interconnect (QPI) interconnect.</p><p id="p-0047" num="0046">A traditional storage system that uses traditional flash drives may implement a process across the flash drives that are part of the traditional storage system. For example, a higher level process of the storage system may initiate and control a process across the flash drives. However, a flash drive of the traditional storage system may include its own storage controller that also performs the process. Thus, for the traditional storage system, a higher level process (e.g., initiated by the storage system) and a lower level process (e.g., initiated by a storage controller of the storage system) may both be performed.</p><p id="p-0048" num="0047">To resolve various deficiencies of a traditional storage system, operations may be performed by higher level processes and not by the lower level processes. For example, the flash storage system may include flash drives that do not include storage controllers that provide the process. Thus, the operating system of the flash storage system itself may initiate and control the process. This may be accomplished by a direct-mapped flash storage system that addresses data blocks within the flash drives directly and without an address translation performed by the storage controllers of the flash drives.</p><p id="p-0049" num="0048">The operating system of the flash storage system may identify and maintain a list of allocation units across multiple flash drives of the flash storage system. The allocation units may be entire erase blocks or multiple erase blocks. The operating system may maintain a map or address range that directly maps addresses to erase blocks of the flash drives of the flash storage system.</p><p id="p-0050" num="0049">Direct mapping to the erase blocks of the flash drives may be used to rewrite data and erase data. For example, the operations may be performed on one or more allocation units that include a first data and a second data where the first data is to be retained and the second data is no longer being used by the flash storage system. The operating system may initiate the process to write the first data to new locations within other allocation units and erasing the second data and marking the allocation units as being available for use for subsequent data. Thus, the process may only be performed by the higher level operating system of the flash storage system without an additional lower level process being performed by controllers of the flash drives.</p><p id="p-0051" num="0050">Advantages of the process being performed only by the operating system of the flash storage system include increased reliability of the flash drives of the flash storage system as unnecessary or redundant write operations are not being performed during the process. One possible point of novelty here is the concept of initiating and controlling the process at the operating system of the flash storage system. In addition, the process can be controlled by the operating system across multiple flash drives. This is contrast to the process being performed by a storage controller of a flash drive.</p><p id="p-0052" num="0051">A storage system can consist of two storage array controllers that share a set of drives for failover purposes, or it could consist of a single storage array controller that provides a storage service that utilizes multiple drives, or it could consist of a distributed network of storage array controllers each with some number of drives or some amount of Flash storage where the storage array controllers in the network collaborate to provide a complete storage service and collaborate on various aspects of a storage service including storage allocation and garbage collection.</p><p id="p-0053" num="0052"><figref idref="DRAWINGS">FIG. <b>1</b>C</figref> illustrates a third example system <b>117</b> for data storage in accordance with some implementations. System <b>117</b> (also referred to as &#x201c;storage system&#x201d; herein) includes numerous elements for purposes of illustration rather than limitation. It may be noted that system <b>117</b> may include the same, more, or fewer elements configured in the same or different manner in other implementations.</p><p id="p-0054" num="0053">In one embodiment, system <b>117</b> includes a dual Peripheral Component Interconnect ('PM flash storage device <b>118</b> with separately addressable fast write storage. System <b>117</b> may include a storage controller <b>119</b>. In one embodiment, storage controller <b>119</b>A-D may be a CPU, ASIC, FPGA, or any other circuitry that may implement control structures necessary according to the present disclosure. In one embodiment, system <b>117</b> includes flash memory devices (e.g., including flash memory devices <b>120</b><i>a</i>-<i>n</i>), operatively coupled to various channels of the storage device controller <b>119</b>. Flash memory devices <b>120</b><i>a</i>-<i>n, </i>may be presented to the controller <b>119</b>A-D as an addressable collection of Flash pages, erase blocks, and/or control elements sufficient to allow the storage device controller <b>119</b>A-D to program and retrieve various aspects of the Flash. In one embodiment, storage device controller <b>119</b>A-D may perform operations on flash memory devices <b>120</b><i>a</i>-<i>n </i>including storing and retrieving data content of pages, arranging and erasing any blocks, tracking statistics related to the use and reuse of Flash memory pages, erase blocks, and cells, tracking and predicting error codes and faults within the Flash memory, controlling voltage levels associated with programming and retrieving contents of Flash cells, etc.</p><p id="p-0055" num="0054">In one embodiment, system <b>117</b> may include RAM <b>121</b> to store separately addressable fast-write data. In one embodiment, RAM <b>121</b> may be one or more separate discrete devices. In another embodiment, RAM <b>121</b> may be integrated into storage device controller <b>119</b>A-D or multiple storage device controllers. The RAM <b>121</b> may be utilized for other purposes as well, such as temporary program memory for a processing device (e.g., a CPU) in the storage device controller <b>119</b>.</p><p id="p-0056" num="0055">In one embodiment, system <b>117</b> may include a stored energy device <b>122</b>, such as a rechargeable battery or a capacitor. Stored energy device <b>122</b> may store energy sufficient to power the storage device controller <b>119</b>, some amount of the RAM (e.g., RAM <b>121</b>), and some amount of Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<b>120</b><i>n</i>) for sufficient time to write the contents of RAM to Flash memory. In one embodiment, storage device controller <b>119</b>A-D may write the contents of RAM to Flash Memory if the storage device controller detects loss of external power.</p><p id="p-0057" num="0056">In one embodiment, system <b>117</b> includes two data communications links <b>123</b><i>a, </i><b>123</b><i>b. </i>In one embodiment, data communications links <b>123</b><i>a, </i><b>123</b><i>b </i>may be PCI interfaces. In another embodiment, data communications links <b>123</b><i>a, </i><b>123</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Data communications links <b>123</b><i>a, </i><b>123</b><i>b </i>may be based on non-volatile memory express (&#x2018;NVMe&#x2019;) or NVMe over fabrics (&#x2018;NVMf&#x2019;) specifications that allow external connection to the storage device controller <b>119</b>A-D from other components in the storage system <b>117</b>. It should be noted that data communications links may be interchangeably referred to herein as PCI buses for convenience.</p><p id="p-0058" num="0057">System <b>117</b> may also include an external power source (not shown), which may be provided over one or both data communications links <b>123</b><i>a, </i><b>123</b><i>b, </i>or which may be provided separately. An alternative embodiment includes a separate Flash memory (not shown) dedicated for use in storing the content of RAM <b>121</b>. The storage device controller <b>119</b>A-D may present a logical device over a PCI bus which may include an addressable fast-write logical device, or a distinct part of the logical address space of the storage device <b>118</b>, which may be presented as PCI memory or as persistent storage. In one embodiment, operations to store into the device are directed into the RAM <b>121</b>. On power failure, the storage device controller <b>119</b>A-D may write stored content associated with the addressable fast-write logical storage to Flash memory (e.g., Flash memory <b>120</b><i>a</i>-<i>n</i>) for long-term persistent storage.</p><p id="p-0059" num="0058">In one embodiment, the logical device may include some presentation of some or all of the content of the Flash memory devices <b>120</b><i>a</i>-<i>n, </i>where that presentation allows a storage system including a storage device <b>118</b> (e.g., storage system <b>117</b>) to directly address Flash memory pages and directly reprogram erase blocks from storage system components that are external to the storage device through the PCI bus. The presentation may also allow one or more of the external components to control and retrieve other aspects of the Flash memory including some or all of: tracking statistics related to use and reuse of Flash memory pages, erase blocks, and cells across all the Flash memory devices; tracking and predicting error codes and faults within and across the Flash memory devices; controlling voltage levels associated with programming and retrieving contents of Flash cells; etc.</p><p id="p-0060" num="0059">In one embodiment, the stored energy device <b>122</b> may be sufficient to ensure completion of in-progress operations to the Flash memory devices <b>120</b><i>a</i>-<b>120</b><i>n </i>stored energy device <b>122</b> may power storage device controller <b>119</b>A-D and associated Flash memory devices (e.g., <b>120</b><i>a</i>-<i>n</i>) for those operations, as well as for the storing of fast-write RAM to Flash memory. Stored energy device <b>122</b> may be used to store accumulated statistics and other parameters kept and tracked by the Flash memory devices <b>120</b><i>a</i>-<i>n </i>and/or the storage device controller <b>119</b>. Separate capacitors or stored energy devices (such as smaller capacitors near or embedded within the Flash memory devices themselves) may be used for some or all of the operations described herein.</p><p id="p-0061" num="0060">Various schemes may be used to track and optimize the life span of the stored energy component, such as adjusting voltage levels over time, partially discharging the storage energy device <b>122</b> to measure corresponding discharge characteristics, etc. If the available energy decreases over time, the effective available capacity of the addressable fast-write storage may be decreased to ensure that it can be written safely based on the currently available stored energy.</p><p id="p-0062" num="0061"><figref idref="DRAWINGS">FIG. <b>1</b>D</figref> illustrates a third example system <b>124</b> for data storage in accordance with some implementations. In one embodiment, system <b>124</b> includes storage controllers <b>125</b><i>a, </i><b>125</b><i>b. </i>In one embodiment, storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>are operatively coupled to Dual PCI storage devices <b>119</b><i>a, </i><b>119</b><i>b </i>and <b>119</b><i>c, </i><b>119</b><i>d, </i>respectively. Storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may be operatively coupled (e.g., via a storage network <b>130</b>) to some number of host computers <b>127</b><i>a</i>-<i>n. </i></p><p id="p-0063" num="0062">In one embodiment, two storage controllers (e.g., <b>125</b><i>a </i>and <b>125</b><i>b</i>) provide storage services, such as a SCS) block storage array, a file server, an object server, a database or data analytics service, etc. The storage controllers <b>125</b><i>a</i>, <b>125</b><i>b </i>may provide services through some number of network interfaces (e.g., <b>126</b><i>a</i>-<i>d</i>) to host computers <b>127</b><i>a</i>-<i>n </i>outside of the storage system <b>124</b>. Storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may provide integrated services or an application entirely within the storage system <b>124</b>, forming a converged storage and compute system. The storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may utilize the fast write memory within or across storage devices <b>119</b><i>a</i>-<i>d </i>to journal in progress operations to ensure the operations are not lost on a power failure, storage controller removal, storage controller or storage system shutdown, or some fault of one or more software or hardware components within the storage system <b>124</b>.</p><p id="p-0064" num="0063">In one embodiment, controllers <b>125</b><i>a, </i><b>125</b><i>b </i>operate as PCI masters to one or the other PCI buses <b>128</b><i>a, </i><b>128</b><i>b. </i>In another embodiment, <b>128</b><i>a </i>and <b>128</b><i>b </i>may be based on other communications standards (e.g., HyperTransport, InfiniBand, etc.). Other storage system embodiments may operate storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>as multi-masters for both PCI buses <b>128</b><i>a, </i><b>128</b><i>b. </i>Alternately, a PCI/NVMe/NVMf switching infrastructure or fabric may connect multiple storage controllers. Some storage system embodiments may allow storage devices to communicate with each other directly rather than communicating only with storage controllers. In one embodiment, a storage device controller <b>119</b><i>a </i>may be operable under direction from a storage controller <b>125</b><i>a </i>to synthesize and transfer data to be stored into Flash memory devices from data that has been stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>). For example, a recalculated version of RAM content may be transferred after a storage controller has determined that an operation has fully committed across the storage system, or when fast-write memory on the device has reached a certain used capacity, or after a certain amount of time, to ensure improve safety of the data or to release addressable fast-write capacity for reuse. This mechanism may be used, for example, to avoid a second transfer over a bus (e.g., <b>128</b><i>a, </i><b>128</b><i>b</i>) from the storage controllers <b>125</b><i>a, </i><b>125</b><i>b. </i>In one embodiment, a recalculation may include compressing data, attaching indexing or other metadata, combining multiple data segments together, performing erasure code calculations, etc.</p><p id="p-0065" num="0064">In one embodiment, under direction from a storage controller <b>125</b><i>a, </i><b>125</b><i>b, </i>a storage device controller <b>119</b><i>a, </i><b>119</b><i>b </i>may be operable to calculate and transfer data to other storage devices from data stored in RAM (e.g., RAM <b>121</b> of <figref idref="DRAWINGS">FIG. <b>1</b>C</figref>) without involvement of the storage controllers <b>125</b><i>a, </i><b>125</b><i>b. </i>This operation may be used to mirror data stored in one controller <b>125</b><i>a </i>to another controller <b>125</b><i>b, </i>or it could be used to offload compression, data aggregation, and/or erasure coding calculations and transfers to storage devices to reduce load on storage controllers or the storage controller interface <b>129</b><i>a, </i><b>129</b><i>b </i>to the PCI bus <b>128</b><i>a, </i><b>128</b><i>b. </i></p><p id="p-0066" num="0065">A storage device controller <b>119</b>A-D may include mechanisms for implementing high availability primitives for use by other parts of a storage system external to the Dual PCI storage device <b>118</b>. For example, reservation or exclusion primitives may be provided so that, in a storage system with two storage controllers providing a highly available storage service, one storage controller may prevent the other storage controller from accessing or continuing to access the storage device. This could be used, for example, in cases where one controller detects that the other controller is not functioning properly or where the interconnect between the two storage controllers may itself not be functioning properly.</p><p id="p-0067" num="0066">In one embodiment, a storage system for use with Dual PCI direct mapped storage devices with separately addressable fast write storage includes systems that manage erase blocks or groups of erase blocks as allocation units for storing data on behalf of the storage service, or for storing metadata (e.g., indexes, logs, etc.) associated with the storage service, or for proper management of the storage system itself. Flash pages, which may be a few kilobytes in size, may be written as data arrives or as the storage system is to persist data for long intervals of time (e.g., above a defined threshold of time). To commit data more quickly, or to reduce the number of writes to the Flash memory devices, the storage controllers may first write data into the separately addressable fast write storage on one more storage devices.</p><p id="p-0068" num="0067">In one embodiment, the storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may initiate the use of erase blocks within and across storage devices (e.g., <b>118</b>) in accordance with an age and expected remaining lifespan of the storage devices, or based on other statistics. The storage controllers <b>125</b><i>a, </i><b>125</b><i>b </i>may initiate garbage collection and data migration data between storage devices in accordance with pages that are no longer needed as well as to manage Flash page and erase block lifespans and to manage overall system performance.</p><p id="p-0069" num="0068">In one embodiment, the storage system <b>124</b> may utilize mirroring and/or erasure coding schemes as part of storing data into addressable fast write storage and/or as part of writing data into allocation units associated with erase blocks. Erasure codes may be used across storage devices, as well as within erase blocks or allocation units, or within and across Flash memory devices on a single storage device, to provide redundancy against single or multiple storage device failures or to protect against internal corruptions of Flash memory pages resulting from Flash memory operations or from degradation of Flash memory cells. Mirroring and erasure coding at various levels may be used to recover from multiple types of failures that occur separately or in combination.</p><p id="p-0070" num="0069">The embodiments depicted with reference to <figref idref="DRAWINGS">FIGS. <b>2</b>A-G</figref> illustrate a storage cluster that stores user data, such as user data originating from one or more user or client systems or other sources external to the storage cluster. The storage cluster distributes user data across storage nodes housed within a chassis, or across multiple chassis, using erasure coding and redundant copies of metadata. Erasure coding refers to a method of data protection or reconstruction in which data is stored across a set of different locations, such as disks, storage nodes or geographic locations. Flash memory is one type of solid-state memory that may be integrated with the embodiments, although the embodiments may be extended to other types of solid-state memory or other storage medium, including non-solid state memory. Control of storage locations and workloads are distributed across the storage locations in a clustered peer-to-peer system. Tasks such as mediating communications between the various storage nodes, detecting when a storage node has become unavailable, and balancing I/Os (inputs and outputs) across the various storage nodes, are all handled on a distributed basis. Data is laid out or distributed across multiple storage nodes in data fragments or stripes that support data recovery in some embodiments. Ownership of data can be reassigned within a cluster, independent of input and output patterns. This architecture described in more detail below allows a storage node in the cluster to fail, with the system remaining operational, since the data can be reconstructed from other storage nodes and thus remain available for input and output operations. In various embodiments, a storage node may be referred to as a cluster node, a blade, or a server.</p><p id="p-0071" num="0070">The storage cluster may be contained within a chassis, i.e., an enclosure housing one or more storage nodes. A mechanism to provide power to each storage node, such as a power distribution bus, and a communication mechanism, such as a communication bus that enables communication between the storage nodes are included within the chassis. The storage cluster can run as an independent system in one location according to some embodiments. In one embodiment, a chassis contains at least two instances of both the power distribution and the communication bus which may be enabled or disabled independently. The internal communication bus may be an Ethernet bus, however, other technologies such as PCIe, InfiniBand, and others, are equally suitable. The chassis provides a port for an external communication bus for enabling communication between multiple chassis, directly or through a switch, and with client systems. The external communication may use a technology such as Ethernet, InfiniBand, Fibre Channel, etc. In some embodiments, the external communication bus uses different communication bus technologies for inter-chassis and client communication. If a switch is deployed within or between chassis, the switch may act as a translation between multiple protocols or technologies. When multiple chassis are connected to define a storage cluster, the storage cluster may be accessed by a client using either proprietary interfaces or standard interfaces such as network file system (&#x2018;NFS&#x2019;), common internet file system (&#x2018;CIFS&#x2019;), small computer system interface (&#x2018;SCSI&#x2019;) or hypertext transfer protocol (&#x2018;HTTP&#x2019;). Translation from the client protocol may occur at the switch, chassis external communication bus or within each storage node. In some embodiments, multiple chassis may be coupled or connected to each other through an aggregator switch. A portion and/or all of the coupled or connected chassis may be designated as a storage cluster. As discussed above, each chassis can have multiple blades, each blade has a media access control (&#x2018;MAC&#x2019;) address, but the storage cluster is presented to an external network as having a single cluster IP address and a single MAC address in some embodiments.</p><p id="p-0072" num="0071">Each storage node may be one or more storage servers and each storage server is connected to one or more non-volatile solid state memory units, which may be referred to as storage units or storage devices. One embodiment includes a single storage server in each storage node and between one to eight non-volatile solid state memory units, however this one example is not meant to be limiting. The storage server may include a processor, DRAM and interfaces for the internal communication bus and power distribution for each of the power buses. Inside the storage node, the interfaces and storage unit share a communication bus, e.g., PCI Express, in some embodiments. The non-volatile solid state memory units may directly access the internal communication bus interface through a storage node communication bus, or request the storage node to access the bus interface. The non-volatile solid state memory unit contains an embedded CPU, solid state storage controller, and a quantity of solid state mass storage, e.g., between 2-32 terabytes (&#x2018;TB&#x2019;) in some embodiments. An embedded volatile storage medium, such as DRAM, and an energy reserve apparatus are included in the non-volatile solid state memory unit. In some embodiments, the energy reserve apparatus is a capacitor, super-capacitor, or battery that enables transferring a subset of DRAM contents to a stable storage medium in the case of power loss. In some embodiments, the non-volatile solid state memory unit is constructed with a storage class memory, such as phase change or magnetoresistive random access memory (&#x2018;MRAM&#x2019;) that substitutes for DRAM and enables a reduced power hold-up apparatus.</p><p id="p-0073" num="0072">One of many features of the storage nodes and non-volatile solid state storage is the ability to proactively rebuild data in a storage cluster. The storage nodes and non-volatile solid state storage can determine when a storage node or non-volatile solid state storage in the storage cluster is unreachable, independent of whether there is an attempt to read data involving that storage node or non-volatile solid state storage. The storage nodes and non-volatile solid state storage then cooperate to recover and rebuild the data in at least partially new locations. This constitutes a proactive rebuild, in that the system rebuilds data without waiting until the data is needed for a read access initiated from a client system employing the storage cluster. These and further details of the storage memory and operation thereof are discussed below.</p><p id="p-0074" num="0073"><figref idref="DRAWINGS">FIG. <b>2</b>A</figref> is a perspective view of a storage cluster <b>161</b>, with multiple storage nodes <b>150</b> and internal solid-state memory coupled to each storage node to provide network attached storage or storage area network, in accordance with some embodiments. A network attached storage, storage area network, or a storage cluster, or other storage memory, could include one or more storage clusters <b>161</b>, each having one or more storage nodes <b>150</b>, in a flexible and reconfigurable arrangement of both the physical components and the amount of storage memory provided thereby. The storage cluster <b>161</b> is designed to fit in a rack, and one or more racks can be set up and populated as desired for the storage memory. The storage cluster <b>161</b> has a chassis <b>138</b> having multiple slots <b>142</b>. It should be appreciated that chassis <b>138</b> may be referred to as a housing, enclosure, or rack unit. In one embodiment, the chassis <b>138</b> has fourteen slots <b>142</b>, although other numbers of slots are readily devised. For example, some embodiments have four slots, eight slots, sixteen slots, thirty-two slots, or other suitable number of slots. Each slot <b>142</b> can accommodate one storage node <b>150</b> in some embodiments. Chassis <b>138</b> includes flaps <b>148</b> that can be utilized to mount the chassis <b>138</b> on a rack. Fans <b>144</b> provide air circulation for cooling of the storage nodes <b>150</b> and components thereof, although other cooling components could be used, or an embodiment could be devised without cooling components. A switch fabric <b>146</b> couples storage nodes <b>150</b> within chassis <b>138</b> together and to a network for communication to the memory. In an embodiment depicted in herein, the slots <b>142</b> to the left of the switch fabric <b>146</b> and fans <b>144</b> are shown occupied by storage nodes <b>150</b>, while the slots <b>142</b> to the right of the switch fabric <b>146</b> and fans <b>144</b> are empty and available for insertion of storage node <b>150</b> for illustrative purposes. This configuration is one example, and one or more storage nodes <b>150</b> could occupy the slots <b>142</b> in various further arrangements. The storage node arrangements need not be sequential or adjacent in some embodiments. Storage nodes <b>150</b> are hot pluggable, meaning that a storage node <b>150</b> can be inserted into a slot <b>142</b> in the chassis <b>138</b>, or removed from a slot <b>142</b>, without stopping or powering down the system. Upon insertion or removal of storage node <b>150</b> from slot <b>142</b>, the system automatically reconfigures in order to recognize and adapt to the change. Reconfiguration, in some embodiments, includes restoring redundancy and/or rebalancing data or load.</p><p id="p-0075" num="0074">Each storage node <b>150</b> can have multiple components. In the embodiment shown here, the storage node <b>150</b> includes a printed circuit board <b>159</b> populated by a CPU <b>156</b>, i.e., processor, a memory <b>154</b> coupled to the CPU <b>156</b>, and a non-volatile solid state storage <b>152</b> coupled to the CPU <b>156</b>, although other mountings and/or components could be used in further embodiments. The memory <b>154</b> has instructions which are executed by the CPU <b>156</b> and/or data operated on by the CPU <b>156</b>. As further explained below, the non-volatile solid state storage <b>152</b> includes flash or, in further embodiments, other types of solid-state memory.</p><p id="p-0076" num="0075">Referring to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, storage cluster <b>161</b> is scalable, meaning that storage capacity with non-uniform storage sizes is readily added, as described above. One or more storage nodes <b>150</b> can be plugged into or removed from each chassis and the storage cluster self-configures in some embodiments. Plug-in storage nodes <b>150</b>, whether installed in a chassis as delivered or later added, can have different sizes. For example, in one embodiment a storage node <b>150</b> can have any multiple of 4 TB, e.g., 8 TB, 12 TB, 16 TB, 32 TB, etc. In further embodiments, a storage node <b>150</b> could have any multiple of other storage amounts or capacities. Storage capacity of each storage node <b>150</b> is broadcast, and influences decisions of how to stripe the data. For maximum storage efficiency, an embodiment can self-configure as wide as possible in the stripe, subject to a predetermined requirement of continued operation with loss of up to one, or up to two, non-volatile solid state storage units <b>152</b> or storage nodes <b>150</b> within the chassis.</p><p id="p-0077" num="0076"><figref idref="DRAWINGS">FIG. <b>2</b>B</figref> is a block diagram showing a communications interconnect <b>173</b> and power distribution bus <b>172</b> coupling multiple storage nodes <b>150</b>. Referring back to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>, the communications interconnect <b>173</b> can be included in or implemented with the switch fabric <b>146</b> in some embodiments. Where multiple storage clusters <b>161</b> occupy a rack, the communications interconnect <b>173</b> can be included in or implemented with a top of rack switch, in some embodiments. As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>, storage cluster <b>161</b> is enclosed within a single chassis <b>138</b>. External port <b>176</b> is coupled to storage nodes <b>150</b> through communications interconnect <b>173</b>, while external port <b>174</b> is coupled directly to a storage node. External power port <b>178</b> is coupled to power distribution bus <b>172</b>. Storage nodes <b>150</b> may include varying amounts and differing capacities of non-volatile solid state storage <b>152</b> as described with reference to <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>. In addition, one or more storage nodes <b>150</b> may be a compute only storage node as illustrated in <figref idref="DRAWINGS">FIG. <b>2</b>B</figref>. Authorities <b>168</b> are implemented on the non-volatile solid state storages <b>152</b>, for example as lists or other data structures stored in memory. In some embodiments the authorities are stored within the non-volatile solid state storage <b>152</b> and supported by software executing on a controller or other processor of the non-volatile solid state storage <b>152</b>. In a further embodiment, authorities <b>168</b> are implemented on the storage nodes <b>150</b>, for example as lists or other data structures stored in the memory <b>154</b> and supported by software executing on the CPU <b>156</b> of the storage node <b>150</b>. Authorities <b>168</b> control how and where data is stored in the non-volatile solid state storages <b>152</b> in some embodiments. This control assists in determining which type of erasure coding scheme is applied to the data, and which storage nodes <b>150</b> have which portions of the data. Each authority <b>168</b> may be assigned to a non-volatile solid state storage <b>152</b>. Each authority may control a range of inode numbers, segment numbers, or other data identifiers which are assigned to data by a file system, by the storage nodes <b>150</b>, or by the non-volatile solid state storage <b>152</b>, in various embodiments.</p><p id="p-0078" num="0077">Every piece of data, and every piece of metadata, has redundancy in the system in some embodiments. In addition, every piece of data and every piece of metadata has an owner, which may be referred to as an authority. If that authority is unreachable, for example through failure of a storage node, there is a plan of succession for how to find that data or that metadata. In various embodiments, there are redundant copies of authorities <b>168</b>. Authorities <b>168</b> have a relationship to storage nodes <b>150</b> and non-volatile solid state storage <b>152</b> in some embodiments. Each authority <b>168</b>, covering a range of data segment numbers or other identifiers of the data, may be assigned to a specific non-volatile solid state storage <b>152</b>. In some embodiments the authorities <b>168</b> for all of such ranges are distributed over the non-volatile solid state storages <b>152</b> of a storage cluster. Each storage node <b>150</b> has a network port that provides access to the non-volatile solid state storage(s) <b>152</b> of that storage node <b>150</b>. Data can be stored in a segment, which is associated with a segment number and that segment number is an indirection for a configuration of a RAID (redundant array of independent disks) stripe in some embodiments. The assignment and use of the authorities <b>168</b> thus establishes an indirection to data. Indirection may be referred to as the ability to reference data indirectly, in this case via an authority <b>168</b>, in accordance with some embodiments. A segment identifies a set of non-volatile solid state storage <b>152</b> and a local identifier into the set of non-volatile solid state storage <b>152</b> that may contain data. In some embodiments, the local identifier is an offset into the device and may be reused sequentially by multiple segments. In other embodiments the local identifier is unique for a specific segment and never reused. The offsets in the non-volatile solid state storage <b>152</b> are applied to locating data for writing to or reading from the non-volatile solid state storage <b>152</b> (in the form of a RAID stripe). Data is striped across multiple units of non-volatile solid state storage <b>152</b>, which may include or be different from the non-volatile solid state storage <b>152</b> having the authority <b>168</b> for a particular data segment.</p><p id="p-0079" num="0078">If there is a change in where a particular segment of data is located, e.g., during a data move or a data reconstruction, the authority <b>168</b> for that data segment should be consulted, at that non-volatile solid state storage <b>152</b> or storage node <b>150</b> having that authority <b>168</b>. In order to locate a particular piece of data, embodiments calculate a hash value for a data segment or apply an inode number or a data segment number. The output of this operation points to a non-volatile solid state storage <b>152</b> having the authority <b>168</b> for that particular piece of data. In some embodiments there are two stages to this operation. The first stage maps an entity identifier (ID), e.g., a segment number, inode number, or directory number to an authority identifier. This mapping may include a calculation such as a hash or a bit mask. The second stage is mapping the authority identifier to a particular non-volatile solid state storage <b>152</b>, which may be done through an explicit mapping. The operation is repeatable, so that when the calculation is performed, the result of the calculation repeatably and reliably points to a particular non-volatile solid state storage <b>152</b> having that authority <b>168</b>. The operation may include the set of reachable storage nodes as input. If the set of reachable non-volatile solid state storage units changes the optimal set changes. In some embodiments, the persisted value is the current assignment (which is always true) and the calculated value is the target assignment the cluster will attempt to reconfigure towards. This calculation may be used to determine the optimal non-volatile solid state storage <b>152</b> for an authority in the presence of a set of non-volatile solid state storage <b>152</b> that are reachable and constitute the same cluster. The calculation also determines an ordered set of peer non-volatile solid state storage <b>152</b> that will also record the authority to non-volatile solid state storage mapping so that the authority may be determined even if the assigned non-volatile solid state storage is unreachable. A duplicate or substitute authority <b>168</b> may be consulted if a specific authority <b>168</b> is unavailable in some embodiments.</p><p id="p-0080" num="0079">With reference to <figref idref="DRAWINGS">FIG. <b>2</b>A and <b>2</b>B</figref>, two of the many tasks of the CPU <b>156</b> on a storage node <b>150</b> are to break up write data, and reassemble read data. When the system has determined that data is to be written, the authority <b>168</b> for that data is located as above. When the segment ID for data is already determined the request to write is forwarded to the non-volatile solid state storage <b>152</b> currently determined to be the host of the authority <b>168</b> determined from the segment. The host CPU <b>156</b> of the storage node <b>150</b>, on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside, then breaks up or shards the data and transmits the data out to various non-volatile solid state storage <b>152</b>. The transmitted data is written as a data stripe in accordance with an erasure coding scheme. In some embodiments, data is requested to be pulled, and in other embodiments, data is pushed. In reverse, when data is read, the authority <b>168</b> for the segment ID containing the data is located as described above. The host CPU <b>156</b> of the storage node <b>150</b> on which the non-volatile solid state storage <b>152</b> and corresponding authority <b>168</b> reside requests the data from the non-volatile solid state storage and corresponding storage nodes pointed to by the authority. In some embodiments the data is read from flash storage as a data stripe. The host CPU <b>156</b> of storage node <b>150</b> then reassembles the read data, correcting any errors (if present) according to the appropriate erasure coding scheme, and forwards the reassembled data to the network. In further embodiments, some or all of these tasks can be handled in the non-volatile solid state storage <b>152</b>. In some embodiments, the segment host requests the data be sent to storage node <b>150</b> by requesting pages from storage and then sending the data to the storage node making the original request.</p><p id="p-0081" num="0080">In some systems, for example in UNIX-style file systems, data is handled with an index node or inode, which specifies a data structure that represents an object in a file system. The object could be a file or a directory, for example. Metadata may accompany the object, as attributes such as permission data and a creation timestamp, among other attributes. A segment number could be assigned to all or a portion of such an object in a file system. In other systems, data segments are handled with a segment number assigned elsewhere. For purposes of discussion, the unit of distribution is an entity, and an entity can be a file, a directory or a segment. That is, entities are units of data or metadata stored by a storage system. Entities are grouped into sets called authorities. Each authority has an authority owner, which is a storage node that has the exclusive right to update the entities in the authority. In other words, a storage node contains the authority, and that the authority, in turn, contains entities.</p><p id="p-0082" num="0081">A segment is a logical container of data in accordance with some embodiments. A segment is an address space between medium address space and physical flash locations, i.e., the data segment number, are in this address space. Segments may also contain meta-data, which enable data redundancy to be restored (rewritten to different flash locations or devices) without the involvement of higher level software. In one embodiment, an internal format of a segment contains client data and medium mappings to determine the position of that data. Each data segment is protected, e.g., from memory and other failures, by breaking the segment into a number of data and parity shards, where applicable. The data and parity shards are distributed, i.e., striped, across non-volatile solid state storage <b>152</b> coupled to the host CPUs <b>156</b> (See <figref idref="DRAWINGS">FIGS. <b>2</b>E and <b>2</b>G</figref>) in accordance with an erasure coding scheme. Usage of the term segments refers to the container and its place in the address space of segments in some embodiments. Usage of the term stripe refers to the same set of shards as a segment and includes how the shards are distributed along with redundancy or parity information in accordance with some embodiments.</p><p id="p-0083" num="0082">A series of address-space transformations takes place across an entire storage system. At the top are the directory entries (file names) which link to an inode. Inodes point into medium address space, where data is logically stored. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Medium addresses may be mapped through a series of indirect mediums to spread the load of large files, or implement data services like deduplication or snapshots. Segment addresses are then translated into physical flash locations. Physical flash locations have an address range bounded by the amount of flash in the system in accordance with some embodiments. Medium addresses and segment addresses are logical containers, and in some embodiments use a 128 bit or larger identifier so as to be practically infinite, with a likelihood of reuse calculated as longer than the expected life of the system. Addresses from logical containers are allocated in a hierarchical fashion in some embodiments. Initially, each non-volatile solid state storage unit <b>152</b> may be assigned a range of address space. Within this assigned range, the non-volatile solid state storage <b>152</b> is able to allocate addresses without synchronization with other non-volatile solid state storage <b>152</b>.</p><p id="p-0084" num="0083">Data and metadata is stored by a set of underlying storage layouts that are optimized for varying workload patterns and storage devices. These layouts incorporate multiple redundancy schemes, compression formats and index algorithms. Some of these layouts store information about authorities and authority masters, while others store file metadata and file data. The redundancy schemes include error correction codes that tolerate corrupted bits within a single storage device (such as a NAND flash chip), erasure codes that tolerate the failure of multiple storage nodes, and replication schemes that tolerate data center or regional failures. In some embodiments, low density parity check (&#x2018;LDPC&#x2019;) code is used within a single storage unit. Reed-Solomon encoding is used within a storage cluster, and mirroring is used within a storage grid in some embodiments. Metadata may be stored using an ordered log structured index (such as a Log Structured Merge Tree), and large data may not be stored in a log structured layout.</p><p id="p-0085" num="0084">In order to maintain consistency across multiple copies of an entity, the storage nodes agree implicitly on two things through calculations: (1) the authority that contains the entity, and (2) the storage node that contains the authority. The assignment of entities to authorities can be done by pseudo randomly assigning entities to authorities, by splitting entities into ranges based upon an externally produced key, or by placing a single entity into each authority. Examples of pseudorandom schemes are linear hashing and the Replication Under Scalable Hashing (&#x2018;RUSH&#x2019;) family of hashes, including Controlled Replication Under Scalable Hashing (&#x2018;CRUSH&#x2019;). In some embodiments, pseudo-random assignment is utilized only for assigning authorities to nodes because the set of nodes can change. The set of authorities cannot change so any subjective function may be applied in these embodiments. Some placement schemes automatically place authorities on storage nodes, while other placement schemes rely on an explicit mapping of authorities to storage nodes. In some embodiments, a pseudorandom scheme is utilized to map from each authority to a set of candidate authority owners. A pseudorandom data distribution function related to CRUSH may assign authorities to storage nodes and create a list of where the authorities are assigned. Each storage node has a copy of the pseudorandom data distribution function, and can arrive at the same calculation for distributing, and later finding or locating an authority. Each of the pseudorandom schemes requires the reachable set of storage nodes as input in some embodiments in order to conclude the same target nodes. Once an entity has been placed in an authority, the entity may be stored on physical devices so that no expected failure will lead to unexpected data loss. In some embodiments, rebalancing algorithms attempt to store the copies of all entities within an authority in the same layout and on the same set of machines.</p><p id="p-0086" num="0085">Examples of expected failures include device failures, stolen machines, datacenter fires, and regional disasters, such as nuclear or geological events. Different failures lead to different levels of acceptable data loss. In some embodiments, a stolen storage node impacts neither the security nor the reliability of the system, while depending on system configuration, a regional event could lead to no loss of data, a few seconds or minutes of lost updates, or even complete data loss.</p><p id="p-0087" num="0086">In the embodiments, the placement of data for storage redundancy is independent of the placement of authorities for data consistency. In some embodiments, storage nodes that contain authorities do not contain any persistent storage. Instead, the storage nodes are connected to non-volatile solid state storage units that do not contain authorities. The communications interconnect between storage nodes and non-volatile solid state storage units consists of multiple communication technologies and has non-uniform performance and fault tolerance characteristics. In some embodiments, as mentioned above, non-volatile solid state storage units are connected to storage nodes via PCI express, storage nodes are connected together within a single chassis using Ethernet backplane, and chassis are connected together to form a storage cluster. Storage clusters are connected to clients using Ethernet or fiber channel in some embodiments. If multiple storage clusters are configured into a storage grid, the multiple storage clusters are connected using the Internet or other long-distance networking links, such as a &#x201c;metro scale&#x201d; link or private link that does not traverse the internet.</p><p id="p-0088" num="0087">Authority owners have the exclusive right to modify entities, to migrate entities from one non-volatile solid state storage unit to another non-volatile solid state storage unit, and to add and remove copies of entities. This allows for maintaining the redundancy of the underlying data. When an authority owner fails, is going to be decommissioned, or is overloaded, the authority is transferred to a new storage node. Transient failures make it non-trivial to ensure that all non-faulty machines agree upon the new authority location. The ambiguity that arises due to transient failures can be achieved automatically by a consensus protocol such as Paxos, hot-warm failover schemes, via manual intervention by a remote system administrator, or by a local hardware administrator (such as by physically removing the failed machine from the cluster, or pressing a button on the failed machine). In some embodiments, a consensus protocol is used, and failover is automatic. If too many failures or replication events occur in too short a time period, the system goes into a self-preservation mode and halts replication and data movement activities until an administrator intervenes in accordance with some embodiments.</p><p id="p-0089" num="0088">As authorities are transferred between storage nodes and authority owners update entities in their authorities, the system transfers messages between the storage nodes and non-volatile solid state storage units. With regard to persistent messages, messages that have different purposes are of different types. Depending on the type of the message, the system maintains different ordering and durability guarantees. As the persistent messages are being processed, the messages are temporarily stored in multiple durable and non-durable storage hardware technologies. In some embodiments, messages are stored in RAM, NVRAM and on NAND flash devices, and a variety of protocols are used in order to make efficient use of each storage medium. Latency-sensitive client requests may be persisted in replicated NVRAM, and then later NAND, while background rebalancing operations are persisted directly to NAND.</p><p id="p-0090" num="0089">Persistent messages are persistently stored prior to being transmitted. This allows the system to continue to serve client requests despite failures and component replacement. Although many hardware components contain unique identifiers that are visible to system administrators, manufacturer, hardware supply chain and ongoing monitoring quality control infrastructure, applications running on top of the infrastructure address virtualize addresses. These virtualized addresses do not change over the lifetime of the storage system, regardless of component failures and replacements. This allows each component of the storage system to be replaced over time without reconfiguration or disruptions of client request processing, i.e., the system supports non-disruptive upgrades.</p><p id="p-0091" num="0090">In some embodiments, the virtualized addresses are stored with sufficient redundancy. A continuous monitoring system correlates hardware and software status and the hardware identifiers. This allows detection and prediction of failures due to faulty components and manufacturing details. The monitoring system also enables the proactive transfer of authorities and entities away from impacted devices before failure occurs by removing the component from the critical path in some embodiments.</p><p id="p-0092" num="0091"><figref idref="DRAWINGS">FIG. <b>2</b>C</figref> is a multiple level block diagram, showing contents of a storage node <b>150</b> and contents of a non-volatile solid state storage <b>152</b> of the storage node <b>150</b>. Data is communicated to and from the storage node <b>150</b> by a network interface controller (&#x2018;NIC&#x2019;) <b>202</b> in some embodiments. Each storage node <b>150</b> has a CPU <b>156</b>, and one or more non-volatile solid state storage <b>152</b>, as discussed above. Moving down one level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, each non-volatile solid state storage <b>152</b> has a relatively fast non-volatile solid state memory, such as nonvolatile random access memory (&#x2018;NVRAM&#x2019;) <b>204</b>, and flash memory <b>206</b>. In some embodiments, NVRAM <b>204</b> may be a component that does not require program/erase cycles (DRAM, MRAM, PCM), and can be a memory that can support being written vastly more often than the memory is read from. Moving down another level in <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>, the NVRAM <b>204</b> is implemented in one embodiment as high speed volatile memory, such as dynamic random access memory (DRAM) <b>216</b>, backed up by energy reserve <b>218</b>. Energy reserve <b>218</b> provides sufficient electrical power to keep the DRAM <b>216</b> powered long enough for contents to be transferred to the flash memory <b>206</b> in the event of power failure. In some embodiments, energy reserve <b>218</b> is a capacitor, super-capacitor, battery, or other device, that supplies a suitable supply of energy sufficient to enable the transfer of the contents of DRAM <b>216</b> to a stable storage medium in the case of power loss. The flash memory <b>206</b> is implemented as multiple flash dies <b>222</b>, which may be referred to as packages of flash dies <b>222</b> or an array of flash dies <b>222</b>. It should be appreciated that the flash dies <b>222</b> could be packaged in any number of ways, with a single die per package, multiple dies per package (i.e. multichip packages), in hybrid packages, as bare dies on a printed circuit board or other substrate, as encapsulated dies, etc. In the embodiment shown, the non-volatile solid state storage <b>152</b> has a controller <b>212</b> or other processor, and an input output (I/O) port <b>210</b> coupled to the controller <b>212</b>. I/O port <b>210</b> is coupled to the CPU <b>156</b> and/or the network interface controller <b>202</b> of the flash storage node <b>150</b>. Flash input output (I/O) port <b>220</b> is coupled to the flash dies <b>222</b>, and a direct memory access unit (DMA) <b>214</b> is coupled to the controller <b>212</b>, the DRAM <b>216</b> and the flash dies <b>222</b>. In the embodiment shown, the I/O port <b>210</b>, controller <b>212</b>, DMA unit <b>214</b> and flash I/O port <b>220</b> are implemented on a programmable logic device (&#x2018;PLD&#x2019;) <b>208</b>, e.g., a field programmable gate array (FPGA). In this embodiment, each flash die <b>222</b> has pages, organized as sixteen kB (kilobyte) pages <b>224</b>, and a register <b>226</b> through which data can be written to or read from the flash die <b>222</b>. In further embodiments, other types of solid-state memory are used in place of, or in addition to flash memory illustrated within flash die <b>222</b>.</p><p id="p-0093" num="0092">Storage clusters <b>161</b>, in various embodiments as disclosed herein, can be contrasted with storage arrays in general. The storage nodes <b>150</b> are part of a collection that creates the storage cluster <b>161</b>. Each storage node <b>150</b> owns a slice of data and computing required to provide the data. Multiple storage nodes <b>150</b> cooperate to store and retrieve the data. Storage memory or storage devices, as used in storage arrays in general, are less involved with processing and manipulating the data. Storage memory or storage devices in a storage array receive commands to read, write, or erase data. The storage memory or storage devices in a storage array are not aware of a larger system in which they are embedded, or what the data means. Storage memory or storage devices in storage arrays can include various types of storage memory, such as RAM, solid state drives, hard disk drives, etc. The storage units <b>152</b> described herein have multiple interfaces active simultaneously and serving multiple purposes. In some embodiments, some of the functionality of a storage node <b>150</b> is shifted into a storage unit <b>152</b>, transforming the storage unit <b>152</b> into a combination of storage unit <b>152</b> and storage node <b>150</b>. Placing computing (relative to storage data) into the storage unit <b>152</b> places this computing closer to the data itself. The various system embodiments have a hierarchy of storage node layers with different capabilities. By contrast, in a storage array, a controller owns and knows everything about all of the data that the controller manages in a shelf or storage devices. In a storage cluster <b>161</b>, as described herein, multiple controllers in multiple storage units <b>152</b> and/or storage nodes <b>150</b> cooperate in various ways (e.g., for erasure coding, data sharding, metadata communication and redundancy, storage capacity expansion or contraction, data recovery, and so on).</p><p id="p-0094" num="0093"><figref idref="DRAWINGS">FIG. <b>2</b>D</figref> shows a storage server environment, which uses embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref>. In this version, each storage unit <b>152</b> has a processor such as controller <b>212</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>C</figref>), an FPGA (field programmable gate array), flash memory <b>206</b>, and NVRAM <b>204</b> (which is super-capacitor backed DRAM <b>216</b>, see <figref idref="DRAWINGS">FIGS. <b>2</b>B and <b>2</b>C</figref>) on a PCIe (peripheral component interconnect express) board in a chassis <b>138</b> (see <figref idref="DRAWINGS">FIG. <b>2</b>A</figref>). The storage unit <b>152</b> may be implemented as a single board containing storage, and may be the largest tolerable failure domain inside the chassis. In some embodiments, up to two storage units <b>152</b> may fail and the device will continue with no data loss.</p><p id="p-0095" num="0094">The physical storage is divided into named regions based on application usage in some embodiments. The NVRAM <b>204</b> is a contiguous block of reserved memory in the storage unit <b>152</b> DRAM <b>216</b>, and is backed by NAND flash. NVRAM <b>204</b> is logically divided into multiple memory regions written for two as spool (e.g., spool_region). Space within the NVRAM <b>204</b> spools is managed by each authority <b>168</b> independently. Each device provides an amount of storage space to each authority <b>168</b>. That authority <b>168</b> further manages lifetimes and allocations within that space. Examples of a spool include distributed transactions or notions. When the primary power to a storage unit <b>152</b> fails, onboard super-capacitors provide a short duration of power hold up. During this holdup interval, the contents of the NVRAM <b>204</b> are flushed to flash memory <b>206</b>. On the next power-on, the contents of the NVRAM <b>204</b> are recovered from the flash memory <b>206</b>.</p><p id="p-0096" num="0095">As for the storage unit controller, the responsibility of the logical &#x201c;controller&#x201d; is distributed across each of the blades containing authorities <b>168</b>. This distribution of logical control is shown in <figref idref="DRAWINGS">FIG. <b>2</b>D</figref> as a host controller <b>242</b>, mid-tier controller <b>244</b> and storage unit controller(s) <b>246</b>. Management of the control plane and the storage plane are treated independently, although parts may be physically co-located on the same blade. Each authority <b>168</b> effectively serves as an independent controller. Each authority <b>168</b> provides its own data and metadata structures, its own background workers, and maintains its own lifecycle.</p><p id="p-0097" num="0096"><figref idref="DRAWINGS">FIG. <b>2</b>E</figref> is a blade <b>252</b> hardware block diagram, showing a control plane <b>254</b>, compute and storage planes <b>256</b>, <b>258</b>, and authorities <b>168</b> interacting with underlying physical resources, using embodiments of the storage nodes <b>150</b> and storage units <b>152</b> of <figref idref="DRAWINGS">FIGS. <b>2</b>A-C</figref> in the storage server environment of <figref idref="DRAWINGS">FIG. <b>2</b>D</figref>. The control plane <b>254</b> is partitioned into a number of authorities <b>168</b> which can use the compute resources in the compute plane <b>256</b> to run on any of the blades <b>252</b>. The storage plane <b>258</b> is partitioned into a set of devices, each of which provides access to flash <b>206</b> and NVRAM <b>204</b> resources. In one embodiment, the compute plane <b>256</b> may perform the operations of a storage array controller, as described herein, on one or more devices of the storage plane <b>258</b> (e.g., a storage array).</p><p id="p-0098" num="0097">In the compute and storage planes <b>256</b>, <b>258</b> of <figref idref="DRAWINGS">FIG. <b>2</b>E</figref>, the authorities <b>168</b> interact with the underlying physical resources (i.e., devices). From the point of view of an authority <b>168</b>, its resources are striped over all of the physical devices. From the point of view of a device, it provides resources to all authorities <b>168</b>, irrespective of where the authorities happen to run. Each authority <b>168</b> has allocated or has been allocated one or more partitions <b>260</b> of storage memory in the storage units <b>152</b>, e.g. partitions <b>260</b> in flash memory <b>206</b> and NVRAM <b>204</b>. Each authority <b>168</b> uses those allocated partitions <b>260</b> that belong to it, for writing or reading user data. Authorities can be associated with differing amounts of physical storage of the system. For example, one authority <b>168</b> could have a larger number of partitions <b>260</b> or larger sized partitions <b>260</b> in one or more storage units <b>152</b> than one or more other authorities <b>168</b>.</p><p id="p-0099" num="0098"><figref idref="DRAWINGS">FIG. <b>2</b>F</figref> depicts elasticity software layers in blades <b>252</b> of a storage cluster, in accordance with some embodiments. In the elasticity structure, elasticity software is symmetric, i.e., each blade's compute module <b>270</b> runs the three identical layers of processes depicted in <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>. Storage managers <b>274</b> execute read and write requests from other blades <b>252</b> for data and metadata stored in local storage unit <b>152</b> NVRAM <b>204</b> and flash <b>206</b>. Authorities <b>168</b> fulfill client requests by issuing the necessary reads and writes to the blades <b>252</b> on whose storage units <b>152</b> the corresponding data or metadata resides. Endpoints <b>272</b> parse client connection requests received from switch fabric <b>146</b> supervisory software, relay the client connection requests to the authorities <b>168</b> responsible for fulfillment, and relay the authorities' <b>168</b> responses to clients. The symmetric three-layer structure enables the storage system's high degree of concurrency. Elasticity scales out efficiently and reliably in these embodiments. In addition, elasticity implements a unique scale-out technique that balances work evenly across all resources regardless of client access pattern, and maximizes concurrency by eliminating much of the need for inter-blade coordination that typically occurs with conventional distributed locking.</p><p id="p-0100" num="0099">Still referring to <figref idref="DRAWINGS">FIG. <b>2</b>F</figref>, authorities <b>168</b> running in the compute modules <b>270</b> of a blade <b>252</b> perform the internal operations required to fulfill client requests. One feature of elasticity is that authorities <b>168</b> are stateless, i.e., they cache active data and metadata in their own blades' <b>252</b> DRAMs for fast access, but the authorities store every update in their NVRAM <b>204</b> partitions on three separate blades <b>252</b> until the update has been written to flash <b>206</b>. All the storage system writes to NVRAM <b>204</b> are in triplicate to partitions on three separate blades <b>252</b> in some embodiments. With triple-mirrored NVRAM <b>204</b> and persistent storage protected by parity and Reed-Solomon RAID checksums, the storage system can survive concurrent failure of two blades <b>252</b> with no loss of data, metadata, or access to either.</p><p id="p-0101" num="0100">Because authorities <b>168</b> are stateless, they can migrate between blades <b>252</b>. Each authority <b>168</b> has a unique identifier. NVRAM <b>204</b> and flash <b>206</b> partitions are associated with authorities' <b>168</b> identifiers, not with the blades <b>252</b> on which they are running in some. Thus, when an authority <b>168</b> migrates, the authority <b>168</b> continues to manage the same storage partitions from its new location. When a new blade <b>252</b> is installed in an embodiment of the storage cluster, the system automatically rebalances load by: partitioning the new blade's <b>252</b> storage for use by the system's authorities <b>168</b>, migrating selected authorities <b>168</b> to the new blade <b>252</b>, starting endpoints <b>272</b> on the new blade <b>252</b> and including them in the switch fabric's <b>146</b> client connection distribution algorithm.</p><p id="p-0102" num="0101">From their new locations, migrated authorities <b>168</b> persist the contents of their NVRAM <b>204</b> partitions on flash <b>206</b>, process read and write requests from other authorities <b>168</b>, and fulfill the client requests that endpoints <b>272</b> direct to them. Similarly, if a blade <b>252</b> fails or is removed, the system redistributes its authorities <b>168</b> among the system's remaining blades <b>252</b>. The redistributed authorities <b>168</b> continue to perform their original functions from their new locations.</p><p id="p-0103" num="0102"><figref idref="DRAWINGS">FIG. <b>2</b>G</figref> depicts authorities <b>168</b> and storage resources in blades <b>252</b> of a storage cluster, in accordance with some embodiments. Each authority <b>168</b> is exclusively responsible for a partition of the flash <b>206</b> and NVRAM <b>204</b> on each blade <b>252</b>. The authority <b>168</b> manages the content and integrity of its partitions independently of other authorities <b>168</b>. Authorities <b>168</b> compress incoming data and preserve it temporarily in their NVRAM <b>204</b> partitions, and then consolidate, RAID-protect, and persist the data in segments of the storage in their flash <b>206</b> partitions. As the authorities <b>168</b> write data to flash <b>206</b>, storage managers <b>274</b> perform the necessary flash translation to optimize write performance and maximize media longevity. In the background, authorities <b>168</b> &#x201c;garbage collect,&#x201d; or reclaim space occupied by data that clients have made obsolete by overwriting the data. It should be appreciated that since authorities' <b>168</b> partitions are disjoint, there is no need for distributed locking to execute client and writes or to perform background functions.</p><p id="p-0104" num="0103">The embodiments described herein may utilize various software, communication and/or networking protocols. In addition, the configuration of the hardware and/or software may be adjusted to accommodate various protocols. For example, the embodiments may utilize Active Directory, which is a database based system that provides authentication, directory, policy, and other services in a WINDOWS&#x2122; environment. In these embodiments, LDAP (Lightweight Directory Access Protocol) is one example application protocol for querying and modifying items in directory service providers such as Active Directory. In some embodiments, a network lock manager (&#x2018;NLM&#x2019;) is utilized as a facility that works in cooperation with the Network File System (&#x2018;NFS&#x2019;) to provide a System V style of advisory file and record locking over a network. The Server Message Block (&#x2018;SMB&#x2019;) protocol, one version of which is also known as Common Internet File System (&#x2018;CIFS&#x2019;), may be integrated with the storage systems discussed herein. SMP operates as an application-layer network protocol typically used for providing shared access to files, printers, and serial ports and miscellaneous communications between nodes on a network. SMB also provides an authenticated inter-process communication mechanism. AMAZON&#x2122; S3 (Simple Storage Service) is a web service offered by Amazon Web Services, and the systems described herein may interface with Amazon S3 through web services interfaces (REST (representational state transfer), SOAP (simple object access protocol), and BitTorrent). A RESTful API (application programming interface) breaks down a transaction to create a series of small modules. Each module addresses a particular underlying part of the transaction. The control or permissions provided with these embodiments, especially for object data, may include utilization of an access control list (&#x2018;ACL&#x2019;). The ACL is a list of permissions attached to an object and the ACL specifies which users or system processes are granted access to objects, as well as what operations are allowed on given objects. The systems may utilize Internet Protocol version 6 (&#x2018;IPv6&#x2019;), as well as IPv4, for the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. The routing of packets between networked systems may include Equal-cost multi-path routing (&#x2018;ECMP&#x2019;), which is a routing strategy where next-hop packet forwarding to a single destination can occur over multiple &#x201c;best paths&#x201d; which tie for top place in routing metric calculations. Multi-path routing can be used in conjunction with most routing protocols, because it is a per-hop decision limited to a single router. The software may support Multi-tenancy, which is an architecture in which a single instance of a software application serves multiple customers. Each customer may be referred to as a tenant. Tenants may be given the ability to customize some parts of the application, but may not customize the application's code, in some embodiments. The embodiments may maintain audit logs. An audit log is a document that records an event in a computing system. In addition to documenting what resources were accessed, audit log entries typically include destination and source addresses, a timestamp, and user login information for compliance with various regulations. The embodiments may support various key management policies, such as encryption key rotation. In addition, the system may support dynamic root passwords or some variation dynamically changing passwords.</p><p id="p-0105" num="0104"><figref idref="DRAWINGS">FIG. <b>3</b>A</figref> sets forth a diagram of a storage system <b>306</b> that is coupled for data communications with a cloud services provider <b>302</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref>. In some embodiments, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied as a storage system that includes imbalanced active/active controllers, as a storage system that includes balanced active/active controllers, as a storage system that includes active/active controllers where less than all of each controller's resources are utilized such that each controller has reserve resources that may be used to support failover, as a storage system that includes fully active/active controllers, as a storage system that includes dataset-segregated controllers, as a storage system that includes dual-layer architectures with front-end controllers and back-end integrated storage controllers, as a storage system that includes scale-out clusters of dual-controller arrays, as well as combinations of such embodiments.</p><p id="p-0106" num="0105">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the storage system <b>306</b> is coupled to the cloud services provider <b>302</b> via a data communications link <b>304</b>. The data communications link <b>304</b> may be embodied as a dedicated data communications link, as a data communications pathway that is provided through the use of one or data communications networks such as a wide area network (&#x2018;WAN&#x2019;) or local area network (&#x2018;LAN&#x2019;), or as some other mechanism capable of transporting digital information between the storage system <b>306</b> and the cloud services provider <b>302</b>. Such a data communications link <b>304</b> may be fully wired, fully wireless, or some aggregation of wired and wireless data communications pathways. In such an example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using one or more data communications protocols. For example, digital information may be exchanged between the storage system <b>306</b> and the cloud services provider <b>302</b> via the data communications link <b>304</b> using the handheld device transfer protocol (&#x2018;HDTP&#x2019;), hypertext transfer protocol (&#x2018;HTTP&#x2019;), internet protocol (&#x2018;IP&#x2019;), real-time transfer protocol (&#x2018;RTP&#x2019;), transmission control protocol (&#x2018;TCP&#x2019;), user datagram protocol (&#x2018;UDP&#x2019;), wireless application protocol (&#x2018;WAP&#x2019;), or other protocol.</p><p id="p-0107" num="0106">The cloud services provider <b>302</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied, for example, as a system and computing environment that provides services to users of the cloud services provider <b>302</b> through the sharing of computing resources via the data communications link <b>304</b>. The cloud services provider <b>302</b> may provide on-demand access to a shared pool of configurable computing resources such as computer networks, servers, storage, applications and services, and so on. The shared pool of configurable resources may be rapidly provisioned and released to a user of the cloud services provider <b>302</b> with minimal management effort. Generally, the user of the cloud services provider <b>302</b> is unaware of the exact computing resources utilized by the cloud services provider <b>302</b> to provide the services. Although in many cases such a cloud services provider <b>302</b> may be accessible via the Internet, readers of skill in the art will recognize that any system that abstracts the use of shared resources to provide services to a user through any data communications link may be considered a cloud services provider <b>302</b>.</p><p id="p-0108" num="0107">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be configured to provide a variety of services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of various service models. For example, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of an infrastructure as a service (&#x2018;IaaS&#x2019;) service model where the cloud services provider <b>302</b> offers computing infrastructure such as virtual machines and other resources as a service to subscribers. In addition, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of a platform as a service (&#x2018;PaaS&#x2019;) service model where the cloud services provider <b>302</b> offers a development environment to application developers. Such a development environment may include, for example, an operating system, programming-language execution environment, database, web server, or other components that may be utilized by application developers to develop and run software solutions on a cloud platform. Furthermore, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of a software as a service (&#x2018;SaaS&#x2019;) service model where the cloud services provider <b>302</b> offers application software, databases, as well as the platforms that are used to run the applications to the storage system <b>306</b> and users of the storage system <b>306</b>, providing the storage system <b>306</b> and users of the storage system <b>306</b> with on-demand software and eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. The cloud services provider <b>302</b> may be further configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of an authentication as a service (&#x2018;AaaS&#x2019;) service model where the cloud services provider <b>302</b> offers authentication services that can be used to secure access to applications, data sources, or other resources. The cloud services provider <b>302</b> may also be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of a storage as a service model where the cloud services provider <b>302</b> offers access to its storage infrastructure for use by the storage system <b>306</b> and users of the storage system <b>306</b>. Readers will appreciate that the cloud services provider <b>302</b> may be configured to provide additional services to the storage system <b>306</b> and users of the storage system <b>306</b> through the implementation of additional service models, as the service models described above are included only for explanatory purposes and in no way represent a limitation of the services that may be offered by the cloud services provider <b>302</b> or a limitation as to the service models that may be implemented by the cloud services provider <b>302</b>.</p><p id="p-0109" num="0108">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, the cloud services provider <b>302</b> may be embodied, for example, as a private cloud, as a public cloud, or as a combination of a private cloud and public cloud. In an embodiment in which the cloud services provider <b>302</b> is embodied as a private cloud, the cloud services provider <b>302</b> may be dedicated to providing services to a single organization rather than providing services to multiple organizations. In an embodiment where the cloud services provider <b>302</b> is embodied as a public cloud, the cloud services provider <b>302</b> may provide services to multiple organizations. Public cloud and private cloud deployment models may differ and may come with various advantages and disadvantages. For example, because a public cloud deployment involves the sharing of a computing infrastructure across different organization, such a deployment may not be ideal for organizations with security concerns, mission-critical workloads, uptime requirements demands, and so on. While a private cloud deployment can address some of these issues, a private cloud deployment may require on-premises staff to manage the private cloud. In still alternative embodiments, the cloud services provider <b>302</b> may be embodied as a mix of a private and public cloud services with a hybrid cloud deployment.</p><p id="p-0110" num="0109">Although not explicitly depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, readers will appreciate that additional hardware components and additional software components may be necessary to facilitate the delivery of cloud services to the storage system <b>306</b> and users of the storage system <b>306</b>. For example, the storage system <b>306</b> may be coupled to (or even include) a cloud storage gateway. Such a cloud storage gateway may be embodied, for example, as hardware-based or software-based appliance that is located on premise with the storage system <b>306</b>. Such a cloud storage gateway may operate as a bridge between local applications that are executing on the storage array <b>306</b> and remote, cloud-based storage that is utilized by the storage array <b>306</b>. Through the use of a cloud storage gateway, organizations may move primary iSCSI or NAS to the cloud services provider <b>302</b>, thereby enabling the organization to save space on their on-premises storage systems. Such a cloud storage gateway may be configured to emulate a disk array, a block-based device, a file server, or other storage system that can translate the SCSI commands, file server commands, or other appropriate command into REST-space protocols that facilitate communications with the cloud services provider <b>302</b>.</p><p id="p-0111" num="0110">In order to enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud migration process may take place during which data, applications, or other elements from an organization's local systems (or even from another cloud environment) are moved to the cloud services provider <b>302</b>. In order to successfully migrate data, applications, or other elements to the cloud services provider's <b>302</b> environment, middleware such as a cloud migration tool may be utilized to bridge gaps between the cloud services provider's <b>302</b> environment and an organization's environment. Such cloud migration tools may also be configured to address potentially high network costs and long transfer times associated with migrating large volumes of data to the cloud services provider <b>302</b>, as well as addressing security concerns associated with sensitive data to the cloud services provider <b>302</b> over data communications networks. In order to further enable the storage system <b>306</b> and users of the storage system <b>306</b> to make use of the services provided by the cloud services provider <b>302</b>, a cloud orchestrator may also be used to arrange and coordinate automated tasks in pursuit of creating a consolidated process or workflow. Such a cloud orchestrator may perform tasks such as configuring various components, whether those components are cloud components or on-premises components, as well as managing the interconnections between such components. The cloud orchestrator can simplify the inter-component communication and connections to ensure that links are correctly configured and maintained.</p><p id="p-0112" num="0111">In the example depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref>, and as described briefly above, the cloud services provider <b>302</b> may be configured to provide services to the storage system <b>306</b> and users of the storage system <b>306</b> through the usage of a SaaS service model where the cloud services provider <b>302</b> offers application software, databases, as well as the platforms that are used to run the applications to the storage system <b>306</b> and users of the storage system <b>306</b>, providing the storage system <b>306</b> and users of the storage system <b>306</b> with on-demand software and eliminating the need to install and run the application on local computers, which may simplify maintenance and support of the application. Such applications may take many forms in accordance with various embodiments of the present disclosure. For example, the cloud services provider <b>302</b> may be configured to provide access to data analytics applications to the storage system <b>306</b> and users of the storage system <b>306</b>. Such data analytics applications may be configured, for example, to receive telemetry data phoned home by the storage system <b>306</b>. Such telemetry data may describe various operating characteristics of the storage system <b>306</b> and may be analyzed, for example, to determine the health of the storage system <b>306</b>, to identify workloads that are executing on the storage system <b>306</b>, to predict when the storage system <b>306</b> will run out of various resources, to recommend configuration changes, hardware or software upgrades, workflow migrations, or other actions that may improve the operation of the storage system <b>306</b>.</p><p id="p-0113" num="0112">The cloud services provider <b>302</b> may also be configured to provide access to virtualized computing environments to the storage system <b>306</b> and users of the storage system <b>306</b>. Such virtualized computing environments may be embodied, for example, as a virtual machine or other virtualized computer hardware platforms, virtual storage devices, virtualized computer network resources, and so on. Examples of such virtualized environments can include virtual machines that are created to emulate an actual computer, virtualized desktop environments that separate a logical desktop from a physical machine, virtualized file systems that allow uniform access to different types of concrete file systems, and many others.</p><p id="p-0114" num="0113">For further explanation, <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> sets forth a diagram of a storage system <b>306</b> in accordance with some embodiments of the present disclosure. Although depicted in less detail, the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be similar to the storage systems described above with reference to <figref idref="DRAWINGS">FIGS. <b>1</b>A-<b>1</b>D</figref> and <figref idref="DRAWINGS">FIGS. <b>2</b>A-<b>2</b>G</figref> as the storage system may include many of the components described above.</p><p id="p-0115" num="0114">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may include storage resources <b>308</b>, which may be embodied in many forms. For example, in some embodiments the storage resources <b>308</b> can include nano-RAM or another form of nonvolatile random access memory that utilizes carbon nanotubes deposited on a substrate. In some embodiments, the storage resources <b>308</b> may include 3D crosspoint non-volatile memory in which bit storage is based on a change of bulk resistance, in conjunction with a stackable cross-gridded data access array. In some embodiments, the storage resources <b>308</b> may include flash memory, including single-level cell (&#x2018;SLC&#x2019;) NAND flash, multi-level cell (&#x2018;MLC&#x2019;) NAND flash, triple-level cell (&#x2018;TLC&#x2019;) NAND flash, quad-level cell (&#x2018;QLC&#x2019;) NAND flash, and others. In some embodiments, the storage resources <b>308</b> may include non-volatile magnetoresistive random-access memory (&#x2018;MRAM&#x2019;), including spin transfer torque (&#x2018;STT&#x2019;) MRAM, in which data is stored through the use of magnetic storage elements. In some embodiments, the example storage resources <b>308</b> may include non-volatile phase-change memory (&#x2018;PCM&#x2019;) that may have the ability to hold multiple bits in a single cell as cells can achieve a number of distinct intermediary states. In some embodiments, the storage resources <b>308</b> may include quantum memory that allows for the storage and retrieval of photonic quantum information. In some embodiments, the example storage resources <b>308</b> may include resistive random-access memory (&#x2018;ReRAM&#x2019;) in which data is stored by changing the resistance across a dielectric solid-state material. In some embodiments, the storage resources <b>308</b> may include storage class memory (&#x2018;SCM&#x2019;) in which solid-state nonvolatile memory may be manufactured at a high density using some combination of sub-lithographic patterning techniques, multiple bits per cell, multiple layers of devices, and so on. Readers will appreciate that other forms of computer memories and storage devices may be utilized by the storage systems described above, including DRAM, SRAM, EEPROM, universal memory, and many others. The storage resources <b>308</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>A</figref> may be embodied in a variety of form factors, including but not limited to, dual in-line memory modules (&#x2018;DIMMs&#x2019;), non-volatile dual in-line memory modules (&#x2018;NVDIMMs&#x2019;), M.2, U.2, and others.</p><p id="p-0116" num="0115">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may implement a variety of storage architectures. For example, storage systems in accordance with some embodiments of the present disclosure may utilize block storage where data is stored in blocks, and each block essentially acts as an individual hard drive. Storage systems in accordance with some embodiments of the present disclosure may utilize object storage, where data is managed as objects. Each object may include the data itself, a variable amount of metadata, and a globally unique identifier, where object storage can be implemented at multiple levels (e.g., device level, system level, interface level). Storage systems in accordance with some embodiments of the present disclosure utilize file storage in which data is stored in a hierarchical structure. Such data may be saved in files and folders, and presented to both the system storing it and the system retrieving it in the same format.</p><p id="p-0117" num="0116">The example storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be embodied as a storage system in which additional storage resources can be added through the use of a scale-up model, additional storage resources can be added through the use of a scale-out model, or through some combination thereof. In a scale-up model, additional storage may be added by adding additional storage devices. In a scale-out model, however, additional storage nodes may be added to a cluster of storage nodes, where such storage nodes can include additional processing resources, additional networking resources, and so on.</p><p id="p-0118" num="0117">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes communications resources <b>310</b> that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>. The communications resources <b>310</b> may be configured to utilize a variety of different protocols and data communication fabrics to facilitate data communications between components within the storage systems as well as computing devices that are outside of the storage system. For example, the communications resources <b>310</b> can include fibre channel (&#x2018;FC&#x2019;) technologies such as FC fabrics and FC protocols that can transport SCSI commands over FC networks. The communications resources <b>310</b> can also include FC over ethernet (&#x2018;FCoE&#x2019;) technologies through which FC frames are encapsulated and transmitted over Ethernet networks. The communications resources <b>310</b> can also include InfiniBand (&#x2018;IB&#x2019;) technologies in which a switched fabric topology is utilized to facilitate transmissions between channel adapters. The communications resources <b>310</b> can also include NVM Express (&#x2018;NVMe&#x2019;) technologies and NVMe over fabrics (&#x2018;NVMeoF&#x2019;) technologies through which non-volatile storage media attached via a PCI express (&#x2018;PCIe&#x2019;) bus may be accessed. The communications resources <b>310</b> can also include mechanisms for accessing storage resources <b>308</b> within the storage system <b>306</b> utilizing serial attached SCSI (&#x2018;SAS&#x2019;), serial ATA (&#x2018;SATA&#x2019;) bus interfaces for connecting storage resources <b>308</b> within the storage system <b>306</b> to host bus adapters within the storage system <b>306</b>, internet small computer systems interface (&#x2018;iSCSI&#x2019;) technologies to provide block-level access to storage resources <b>308</b> within the storage system <b>306</b>, and other communications resources that that may be useful in facilitating data communications between components within the storage system <b>306</b>, as well as data communications between the storage system <b>306</b> and computing devices that are outside of the storage system <b>306</b>.</p><p id="p-0119" num="0118">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes processing resources <b>312</b> that may be useful in useful in executing computer program instructions and performing other computational tasks within the storage system <b>306</b>. The processing resources <b>312</b> may include one or more application-specific integrated circuits (&#x2018;ASICs&#x2019;) that are customized for some particular purpose as well as one or more central processing units (&#x2018;CPUs&#x2019;). The processing resources <b>312</b> may also include one or more digital signal processors (&#x2018;DSPs&#x2019;), one or more field-programmable gate arrays (&#x2018;FPGAs&#x2019;), one or more systems on a chip (&#x2018;SoCs&#x2019;), or other form of processing resources <b>312</b>. The storage system <b>306</b> may utilize the storage resources <b>312</b> to perform a variety of tasks including, but not limited to, supporting the execution of software resources <b>314</b> that will be described in greater detail below.</p><p id="p-0120" num="0119">The storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> also includes software resources <b>314</b> that, when executed by processing resources <b>312</b> within the storage system <b>306</b>, may perform various tasks. The software resources <b>314</b> may include, for example, one or more modules of computer program instructions that when executed by processing resources <b>312</b> within the storage system <b>306</b> are useful in carrying out various data protection techniques to preserve the integrity of data that is stored within the storage systems. Readers will appreciate that such data protection techniques may be carried out, for example, by system software executing on computer hardware within the storage system, by a cloud services provider, or in other ways. Such data protection techniques can include, for example, data archiving techniques that cause data that is no longer actively used to be moved to a separate storage device or separate storage system for long-term retention, data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe with the storage system, data replication techniques through which data stored in the storage system is replicated to another storage system such that the data may be accessible via multiple storage systems, data snapshotting techniques through which the state of data within the storage system is captured at various points in time, data and database cloning techniques through which duplicate copies of data and databases may be created, and other data protection techniques. Through the use of such data protection techniques, business continuity and disaster recovery objectives may be met as a failure of the storage system may not result in the loss of data stored in the storage system.</p><p id="p-0121" num="0120">The software resources <b>314</b> may also include software that is useful in implementing software-defined storage (&#x2018;SDS&#x2019;). In such an example, the software resources <b>314</b> may include one or more modules of computer program instructions that, when executed, are useful in policy-based provisioning and management of data storage that is independent of the underlying hardware. Such software resources <b>314</b> may be useful in implementing storage virtualization to separate the storage hardware from the software that manages the storage hardware.</p><p id="p-0122" num="0121">The software resources <b>314</b> may also include software that is useful in facilitating and optimizing I/O operations that are directed to the storage resources <b>308</b> in the storage system <b>306</b>. For example, the software resources <b>314</b> may include software modules that perform carry out various data reduction techniques such as, for example, data compression, data deduplication, and others. The software resources <b>314</b> may include software modules that intelligently group together I/O operations to facilitate better usage of the underlying storage resource <b>308</b>, software modules that perform data migration operations to migrate from within a storage system, as well as software modules that perform other functions. Such software resources <b>314</b> may be embodied as one or more software containers or in many other ways.</p><p id="p-0123" num="0122">Readers will appreciate that the presence of such software resources <b>314</b> may provide for an improved user experience of the storage system <b>306</b>, an expansion of functionality supported by the storage system <b>306</b>, and many other benefits. Consider the specific example of the software resources <b>314</b> carrying out data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe. In such an example, the systems described herein may more reliably (and with less burden placed on the user) perform backup operations relative to interactive backup management systems that require high degrees of user interactivity, offer less robust automation and feature sets, and so on.</p><p id="p-0124" num="0123">The storage systems described above may carry out intelligent data backup techniques through which data stored in the storage system may be copied and stored in a distinct location to avoid data loss in the event of equipment failure or some other form of catastrophe. For example, the storage systems described above may be configured to examine each backup to avoid restoring the storage system to an undesirable state. Consider an example in which malware infects the storage system. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify backups that were captured before the malware infected the storage system and those backups that were captured after the malware infected the storage system. In such an example, the storage system may restore itself from a backup that does not include the malware&#x2014;or at least not restore the portions of a backup that contained the malware. In such an example, the storage system may include software resources <b>314</b> that can scan each backup to identify the presences of malware (or a virus, or some other undesirable), for example, by identifying write operations that were serviced by the storage system and originated from a network subnet that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and originated from a user that is suspected to have delivered the malware, by identifying write operations that were serviced by the storage system and examining the content of the write operation against fingerprints of the malware, and in many other ways.</p><p id="p-0125" num="0124">Readers will further appreciate that the backups (often in the form of one or more snapshots) may also be utilized to perform rapid recovery of the storage system. Consider an example in which the storage system is infected with ransomware that locks users out of the storage system. In such an example, software resources <b>314</b> within the storage system may be configured to detect the presence of ransomware and may be further configured to restore the storage system to a point-in-time, using the retained backups, prior to the point-in-time at which the ransomware infected the storage system. In such an example, the presence of ransomware may be explicitly detected through the use of software tools utilized by the system, through the use of a key (e.g., a USB drive) that is inserted into the storage system, or in a similar way. Likewise, the presence of ransomware may be inferred in response to system activity meeting a predetermined fingerprint such as, for example, no reads or writes coming into the system for a predetermined period of time.</p><p id="p-0126" num="0125">Readers will appreciate that the various components depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be grouped into one or more optimized computing packages as converged infrastructures. Such converged infrastructures may include pools of computers, storage and networking resources that can be shared by multiple applications and managed in a collective manner using policy-driven processes. Such converged infrastructures may minimize compatibility issues between various components within the storage system <b>306</b> while also reducing various costs associated with the establishment and operation of the storage system <b>306</b>. Such converged infrastructures may be implemented with a converged infrastructure reference architecture, with standalone appliances, with a software driven hyper-converged approach (e.g., hyper-converged infrastructures), or in other ways.</p><p id="p-0127" num="0126">Readers will appreciate that the storage system <b>306</b> depicted in <figref idref="DRAWINGS">FIG. <b>3</b>B</figref> may be useful for supporting various types of software applications. For example, the storage system <b>306</b> may be useful in supporting artificial intelligence (&#x2018;AI&#x2019;) applications, database applications, DevOps projects, electronic design automation tools, event-driven software applications, high performance computing applications, simulation applications, high-speed data capture and analysis applications, machine learning applications, media production applications, media serving applications, picture archiving and communication systems (&#x2018;PACS&#x2019;) applications, software development applications, virtual reality applications, augmented reality applications, and many other types of applications by providing storage resources to such applications.</p><p id="p-0128" num="0127">The storage systems described above may operate to support a wide variety of applications. In view of the fact that the storage systems include compute resources, storage resources, and a wide variety of other resources, the storage systems may be well suited to support applications that are resource intensive such as, for example, AI applications. Such AI applications may enable devices to perceive their environment and take actions that maximize their chance of success at some goal. Examples of such AI applications can include IBM Watson, Microsoft Oxford, Google DeepMind, Baidu Minwa, and others. The storage systems described above may also be well suited to support other types of applications that are resource intensive such as, for example, machine learning applications. Machine learning applications may perform various types of data analysis to automate analytical model building. Using algorithms that iteratively learn from data, machine learning applications can enable computers to learn without being explicitly programmed.</p><p id="p-0129" num="0128">In addition to the resources already described, the storage systems described above may also include graphics processing units (&#x2018;GPUs&#x2019;), occasionally referred to as visual processing unit (&#x2018;VPUs&#x2019;). Such GPUs may be embodied as specialized electronic circuits that rapidly manipulate and alter memory to accelerate the creation of images in a frame buffer intended for output to a display device. Such GPUs may be included within any of the computing devices that are part of the storage systems described above, including as one of many individually scalable components of a storage system, where other examples of individually scalable components of such storage system can include storage components, memory components, compute components (e.g., CPUs, FPGAs, ASICs), networking components, software components, and others. In addition to GPUs, the storage systems described above may also include neural network processors (&#x2018;NNPs&#x2019;) for use in various aspects of neural network processing. Such NNPs may be used in place of (or in addition to) GPUs and may also be independently scalable.</p><p id="p-0130" num="0129">As described above, the storage systems described herein may be configured to support artificial intelligence applications, machine learning applications, big data analytics applications, and many other types of applications. The rapid growth in these sort of applications is being driven by three technologies: deep learning (DL), GPU processors, and Big Data. Deep learning is a computing model that makes use of massively parallel neural networks inspired by the human brain. Instead of experts handcrafting software, a deep learning model writes its own software by learning from lots of examples. A GPU is a modern processor with thousands of cores, well-suited to run algorithms that loosely represent the parallel nature of the human brain.</p><p id="p-0131" num="0130">Advances in deep neural networks have ignited a new wave of algorithms and tools for data scientists to tap into their data with artificial intelligence (AI). With improved algorithms, larger data sets, and various frameworks (including open-source software libraries for machine learning across a range of tasks), data scientists are tackling new use cases like autonomous driving vehicles, natural language processing and understanding, computer vision, machine reasoning, strong AI, and many others. Applications of such techniques may include: machine and vehicular object detection, identification and avoidance; visual recognition, classification and tagging; algorithmic financial trading strategy performance management; simultaneous localization and mapping; predictive maintenance of high-value machinery; prevention against cyber security threats, expertise automation; image recognition and classification; question answering; robotics; text analytics (extraction, classification) and text generation and translation; and many others. Applications of AI techniques has materialized in a wide array of products include, for example, Amazon Echo's speech recognition technology that allows users to talk to their machines, Google Translate&#x2122; which allows for machine-based language translation, Spotify's Discover Weekly that provides recommendations on new songs and artists that a user may like based on the user's usage and traffic analysis, Quill's text generation offering that takes structured data and turns it into narrative stories, Chatbots that provide real-time, contextually specific answers to questions in a dialog format, and many others. Furthermore, AI may impact a wide variety of industries and sectors. For example, AI solutions may be used in healthcare to take clinical notes, patient files, research data, and other inputs to generate potential treatment options for doctors to explore. Likewise, AI solutions may be used by retailers to personalize consumer recommendations based on a person's digital footprint of behaviors, profile data, or other data.</p><p id="p-0132" num="0131">Training deep neural networks, however, requires both high quality input data and large amounts of computation. GPUs are massively parallel processors capable of operating on large amounts of data simultaneously. When combined into a multi-GPU cluster, a high throughput pipeline may be required to feed input data from storage to the compute engines. Deep learning is more than just constructing and training models. There also exists an entire data pipeline that must be designed for the scale, iteration, and experimentation necessary for a data science team to succeed.</p><p id="p-0133" num="0132">Data is the heart of modern AI and deep learning algorithms. Before training can begin, one problem that must be addressed revolves around collecting the labeled data that is crucial for training an accurate AI model. A full scale AI deployment may be required to continuously collect, clean, transform, label, and store large amounts of data. Adding additional high quality data points directly translates to more accurate models and better insights. Data samples may undergo a series of processing steps including, but not limited to: 1) ingesting the data from an external source into the training system and storing the data in raw form, 2) cleaning and transforming the data in a format convenient for training, including linking data samples to the appropriate label, 3) exploring parameters and models, quickly testing with a smaller dataset, and iterating to converge on the most promising models to push into the production cluster, 4) executing training phases to select random batches of input data, including both new and older samples, and feeding those into production GPU servers for computation to update model parameters, and 5) evaluating including using a holdback portion of the data not used in training in order to evaluate model accuracy on the holdout data. This lifecycle may apply for any type of parallelized machine learning, not just neural networks or deep learning. For example, standard machine learning frameworks may rely on CPUs instead of GPUs but the data ingest and training workflows may be the same. Readers will appreciate that a single shared storage data hub creates a coordination point throughout the lifecycle without the need for extra data copies among the ingest, preprocessing, and training stages. Rarely is the ingested data used for only one purpose, and shared storage gives the flexibility to train multiple different models or apply traditional analytics to the data.</p><p id="p-0134" num="0133">Readers will appreciate that each stage in the AI data pipeline may have varying requirements from the data hub (e.g., the storage system or collection of storage systems). Scale-out storage systems must deliver uncompromising performance for all manner of access types and patterns&#x2014;from small, metadata-heavy to large files, from random to sequential access patterns, and from low to high concurrency. The storage systems described above may serve as an ideal AI data hub as the systems may service unstructured workloads. In the first stage, data is ideally ingested and stored on to the same data hub that following stages will use, in order to avoid excess data copying. The next two steps can be done on a standard compute server that optionally includes a GPU, and then in the fourth and last stage, full training production jobs are run on powerful GPU-accelerated servers. Often, there is a production pipeline alongside an experimental pipeline operating on the same dataset. Further, the GPU-accelerated servers can be used independently for different models or joined together to train on one larger model, even spanning multiple systems for distributed training. If the shared storage tier is slow, then data must be copied to local storage for each phase, resulting in wasted time staging data onto different servers. The ideal data hub for the AI training pipeline delivers performance similar to data stored locally on the server node while also having the simplicity and performance to enable all pipeline stages to operate concurrently.</p><p id="p-0135" num="0134">A data scientist works to improve the usefulness of the trained model through a wide variety of approaches: more data, better data, smarter training, and deeper models. In many cases, there will be teams of data scientists sharing the same datasets and working in parallel to produce new and improved training models. Often, there is a team of data scientists working within these phases concurrently on the same shared datasets. Multiple, concurrent workloads of data processing, experimentation, and full-scale training layer the demands of multiple access patterns on the storage tier. In other words, storage cannot just satisfy large file reads, but must contend with a mix of large and small file reads and writes. Finally, with multiple data scientists exploring datasets and models, it may be critical to store data in its native format to provide flexibility for each user to transform, clean, and use the data in a unique way. The storage systems described above may provide a natural shared storage home for the dataset, with data protection redundancy (e.g., by using RAID6) and the performance necessary to be a common access point for multiple developers and multiple experiments. Using the storage systems described above may avoid the need to carefully copy subsets of the data for local work, saving both engineering and GPU-accelerated servers use time. These copies become a constant and growing tax as the raw data set and desired transformations constantly update and change.</p><p id="p-0136" num="0135">Readers will appreciate that a fundamental reason why deep learning has seen a surge in success is the continued improvement of models with larger data set sizes. In contrast, classical machine learning algorithms, like logistic regression, stop improving in accuracy at smaller data set sizes. As such, the separation of compute resources and storage resources may also allow independent scaling of each tier, avoiding many of the complexities inherent in managing both together. As the data set size grows or new data sets are considered, a scale out storage system must be able to expand easily. Similarly, if more concurrent training is required, additional GPUs or other compute resources can be added without concern for their internal storage. Furthermore, the storage systems described above may make building, operating, and growing an AI system easier due to the random read bandwidth provided by the storage systems, the ability to of the storage systems to randomly read small files (<b>50</b>KB) high rates (meaning that no extra effort is required to aggregate individual data points to make larger, storage-friendly files), the ability of the storage systems to scale capacity and performance as either the dataset grows or the throughput requirements grow, the ability of the storage systems to support files or objects, the ability of the storage systems to tune performance for large or small files (i.e., no need for the user to provision filesystems), the ability of the storage systems to support non-disruptive upgrades of hardware and software even during production model training, and for many other reasons.</p><p id="p-0137" num="0136">Small file performance of the storage tier may be critical as many types of inputs, including text, audio, or images will be natively stored as small files. If the storage tier does not handle small files well, an extra step will be required to pre-process and group samples into larger files. Storage, built on top of spinning disks, that relies on SSD as a caching tier, may fall short of the performance needed. Because training with random input batches results in more accurate models, the entire data set must be accessible with full performance. SSD caches only provide high performance for a small subset of the data and will be ineffective at hiding the latency of spinning drives.</p><p id="p-0138" num="0137">Although the preceding paragraphs discuss deep learning applications, readers will appreciate that the storage systems described herein may also be part of a distributed deep learning (&#x2018;DDL&#x2019;) platform to support the execution of DDL algorithms. Distributed deep learning may can be used to significantly accelerate deep learning with distributed computing on GPUs (or other form of accelerator or computer program instruction executor), such that parallelism can be achieved. In addition, the output of training machine learning and deep learning models, such as a fully trained machine learning model, may be used for a variety of purposes and in conjunction with other tools. For example, trained machine learning models may be used in conjunction with tools like Core ML to integrate a broad variety of machine learning model types into an application. In fact, trained models may be run through Core ML converter tools and inserted into a custom application that can be deployed on compatible devices. The storage systems described above may also be paired with other technologies such as TensorFlow, an open-source software library for dataflow programming across a range of tasks that may be used for machine learning applications such as neural networks, to facilitate the development of such machine learning models, applications, and so on.</p><p id="p-0139" num="0138">Readers will further appreciate that the systems described above may be deployed in a variety of ways to support the democratization of AI, as AI becomes more available for mass consumption. The democratization of AI may include, for example, the ability to offer AI as a Platform-as-a-Service, the growth of Artificial general intelligence offerings, the proliferation of Autonomous level 4 and Autonomous level 5 vehicles, the availability of autonomous mobile robots, the development of conversational AI platforms, and many others. For example, the systems described above may be deployed in cloud environments, edge environments, or other environments that are useful in supporting the democratization of AI. As part of the democratization of AI, a movement may occur from narrow AI that consists of highly scoped machine learning solutions that target a particular task to artificial general intelligence where the use of machine learning is expanded to handle a broad range of use cases that could essentially perform any intelligent task that a human could perform and could learn dynamically, much like a human.</p><p id="p-0140" num="0139">The storage systems described above may also be used in a neuromorphic computing environment. Neuromorphic computing is a form of computing that mimics brain cells. To support neuromorphic computing, an architecture of interconnected &#x201c;neurons&#x201d; replace traditional computing models with low-powered signals that go directly between neurons for more efficient computation. Neuromorphic computing may make use of very-large-scale integration (VLSI) systems containing electronic analog circuits to mimic neuro-biological architectures present in the nervous system, as well as analog, digital, mixed-mode analog/digital VLSI, and software systems that implement models of neural systems for perception, motor control, or multisensory integration.</p><p id="p-0141" num="0140">Readers will appreciate that the storage systems described above may be configured to support the storage or use of (among other types of data) blockchains. Such blockchains may be embodied as a continuously growing list of records, called blocks, which are linked and secured using cryptography. Each block in a blockchain may contain a hash pointer as a link to a previous block, a timestamp, transaction data, and so on. Blockchains may be designed to be resistant to modification of the data and can serve as an open, distributed ledger that can record transactions between two parties efficiently and in a verifiable and permanent way. This makes blockchains potentially suitable for the recording of events, medical records, and other records management activities, such as identity management, transaction processing, and others. In addition to supporting the storage and use of blockchain technologies, the storage systems described above may also support the storage and use of derivative items such as, for example, open source blockchains and related tools that are part of the IBM&#x2122; Hyperledger project, permissioned blockchains in which a certain number of trusted parties are allowed to access the block chain, blockchain products that enable developers to build their own distributed ledger projects, and others. Readers will appreciate that blockchain technologies may impact a wide variety of industries and sectors. For example, blockchain technologies may be used in real estate transactions as blockchain based contracts whose use can eliminate the need for 3<sup>rd </sup>parties and enable self-executing actions when conditions are met. Likewise, universal health records can be created by aggregating and placing a person's health history onto a blockchain ledger for any healthcare provider, or permissioned health care providers, to access and update.</p><p id="p-0142" num="0141">Readers will appreciate that the usage of blockchains is not limited to financial transactions, contracts, and the like. In fact, blockchains may be leveraged to enable the decentralized aggregation, ordering, timestamping and archiving of any type of information, including structured data, correspondence, documentation, or other data. Through the usage of blockchains, participants can provably and permanently agree on exactly what data was entered, when and by whom, without relying on a trusted intermediary. For example, SAP's recently launched blockchain platform, which supports MultiChain and Hyperledger Fabric, targets a broad range of supply chain and other non-financial applications.</p><p id="p-0143" num="0142">One way to use a blockchain for recording data is to embed each piece of data directly inside a transaction. Every blockchain transaction may be digitally signed by one or more parties, replicated to a plurality of nodes, ordered and timestamped by the chain's consensus algorithm, and stored permanently in a tamper-proof way. Any data within the transaction will therefore be stored identically but independently by every node, along with a proof of who wrote it and when. The chain's users are able to retrieve this information at any future time. This type of storage may be referred to as on-chain storage. On-chain storage may not be particularly practical, however, when attempting to store a very large dataset. As such, in accordance with embodiments of the present disclosure, blockchains and the storage systems described herein may be leveraged to support on-chain storage of data as well as off-chain storage of data.</p><p id="p-0144" num="0143">Off-chain storage of data can be implemented in a variety of ways and can occur when the data itself is not stored within the blockchain. For example, in one embodiment, a hash function may be utilized and the data itself may be fed into the hash function to generate a hash value. In such an example, the hashes of large pieces of data may be embedded within transactions, instead of the data itself. Each hash may serve as a commitment to its input data, with the data itself being stored outside of the blockchain. Readers will appreciate that any blockchain participant that needs an off-chain piece of data cannot reproduce the data from its hash, but if the data can be retrieved in some other way, then the on-chain hash serves to confirm who created it and when. Just like regular on-chain data, the hash may be embedded inside a digitally signed transaction, which was included in the chain by consensus.</p><p id="p-0145" num="0144">Readers will appreciate that, in other embodiments, alternatives to blockchains may be used to facilitate the decentralized storage of information. For example, one alternative to a blockchain that may be used is a blockweave. While conventional blockchains store every transaction to achieve validation, a blockweave permits secure decentralization without the usage of the entire chain, thereby enabling low cost on-chain storage of data. Such blockweaves may utilize a consensus mechanism that is based on proof of access (PoA) and proof of work (PoW). While typical PoW systems only depend on the previous block in order to generate each successive block, the PoA algorithm may incorporate data from a randomly chosen previous block. Combined with the blockweave data structure, miners do not need to store all blocks (forming a blockchain), but rather can store any previous blocks forming a weave of blocks (a blockweave). This enables increased levels of scalability, speed and low-cost and reduces the cost of data storage in part because miners need not store all blocks, thereby resulting in a substantial reduction in the amount of electricity that is consumed during the mining process because, as the network expands, electricity consumption decreases because a blockweave demands less and less hashing power for consensus as data is added to the system. Furthermore, blockweaves may be deployed on a decentralized storage network in which incentives are created to encourage rapid data sharing. Such decentralized storage networks may also make use of blockshadowing techniques, where nodes only send a minimal block &#x201c;shadow&#x201d; to other nodes that allows peers to reconstruct a full block, instead of transmitting the full block itself.</p><p id="p-0146" num="0145">The storage systems described above may, either alone or in combination with other computing devices, be used to support in-memory computing applications. In memory computing involves the storage of information in RAM that is distributed across a cluster of computers. In-memory computing helps business customers, including retailers, banks and utilities, to quickly detect patterns, analyze massive data volumes on the fly, and perform their operations quickly. Readers will appreciate that the storage systems described above, especially those that are configurable with customizable amounts of processing resources, storage resources, and memory resources (e.g., those systems in which blades that contain configurable amounts of each type of resource), may be configured in a way so as to provide an infrastructure that can support in-memory computing. Likewise, the storage systems described above may include component parts (e.g., NVDIMMs, 3D crosspoint storage that provide fast random access memory that is persistent) that can actually provide for an improved in-memory computing environment as compared to in-memory computing environments that rely on RAM distributed across dedicated servers.</p><p id="p-0147" num="0146">In some embodiments, the storage systems described above may be configured to operate as a hybrid in-memory computing environment that includes a universal interface to all storage media (e.g., RAM, flash storage, 3D crosspoint storage). In such embodiments, users may have no knowledge regarding the details of where their data is stored but they can still use the same full, unified API to address data. In such embodiments, the storage system may (in the background) move data to the fastest layer available&#x2014;including intelligently placing the data in dependence upon various characteristics of the data or in dependence upon some other heuristic. In such an example, the storage systems may even make use of existing products such as Apache Ignite and GridGain to move data between the various storage layers, or the storage systems may make use of custom software to move data between the various storage layers. The storage systems described herein may implement various optimizations to improve the performance of in-memory computing such as, for example, having computations occur as close to the data as possible.</p><p id="p-0148" num="0147">Readers will further appreciate that in some embodiments, the storage systems described above may be paired with other resources to support the applications described above. For example, one infrastructure could include primary compute in the form of servers and workstations which specialize in using General-purpose computing on graphics processing units (&#x2018;GPGPU&#x2019;) to accelerate deep learning applications that are interconnected into a computation engine to train parameters for deep neural networks. Each system may have Ethernet external connectivity, InfiniBand external connectivity, some other form of external connectivity, or some combination thereof. In such an example, the GPUs can be grouped for a single large training or used independently to train multiple models. The infrastructure could also include a storage system such as those described above to provide, for example, a scale-out all-flash file or object store through which data can be accessed via high-performance protocols such as NFS, S3, and so on. The infrastructure can also include, for example, redundant top-of-rack Ethernet switches connected to storage and compute via ports in MLAG port channels for redundancy. The infrastructure could also include additional compute in the form of whitebox servers, optionally with GPUs, for data ingestion, pre-processing, and model debugging. Readers will appreciate that additional infrastructures are also be possible.</p><p id="p-0149" num="0148">Readers will appreciate that the systems described above may be better suited for the applications described above relative to other systems that may include, for example, a distributed direct-attached storage (DDAS) solution deployed in server nodes. Such DDAS solutions may be built for handling large, less sequential accesses but may be less able to handle small, random accesses. Readers will further appreciate that the storage systems described above may be utilized to provide a platform for the applications described above that is preferable to the utilization of cloud-based resources as the storage systems may be included in an on-site or in-house infrastructure that is more secure, more locally and internally managed, more robust in feature sets and performance, or otherwise preferable to the utilization of cloud-based resources as part of a platform to support the applications described above. For example, services built on platforms such as IBM's Watson may require a business enterprise to distribute individual user information, such as financial transaction information or identifiable patient records, to other institutions. As such, cloud-based offerings of AI as a service may be less desirable than internally managed and offered AI as a service that is supported by storage systems such as the storage systems described above, for a wide array of technical reasons as well as for various business reasons.</p><p id="p-0150" num="0149">Readers will appreciate that the storage systems described above, either alone or in coordination with other computing machinery may be configured to support other AI related tools. For example, the storage systems may make use of tools like ONXX or other open neural network exchange formats that make it easier to transfer models written in different AI frameworks. Likewise, the storage systems may be configured to support tools like Amazon's Gluon that allow developers to prototype, build, and train deep learning models. In fact, the storage systems described above may be part of a larger platform, such as IBM&#x2122; Cloud Private for Data, that includes integrated data science, data engineering and application building services. Such platforms may seamlessly collect, organize, secure, and analyze data across an enterprise, as well as simplify hybrid data management, unified data governance and integration, data science and business analytics with a single solution.</p><p id="p-0151" num="0150">Readers will further appreciate that the storage systems described above may also be deployed as an edge solution. Such an edge solution may be in place to optimize cloud computing systems by performing data processing at the edge of the network, near the source of the data. Edge computing can push applications, data and computing power (i.e., services) away from centralized points to the logical extremes of a network. Through the use of edge solutions such as the storage systems described above, computational tasks may be performed using the compute resources provided by such storage systems, data may be storage using the storage resources of the storage system, and cloud-based services may be accessed through the use of various resources of the storage system (including networking resources). By performing computational tasks on the edge solution, storing data on the edge solution, and generally making use of the edge solution, the consumption of expensive cloud-based resources may be avoided and, in fact, performance improvements may be experienced relative to a heavier reliance on cloud-based resources.</p><p id="p-0152" num="0151">While many tasks may benefit from the utilization of an edge solution, some particular uses may be especially suited for deployment in such an environment. For example, devices like drones, autonomous cars, robots, and others may require extremely rapid processing&#x2014;so fast, in fact, that sending data up to a cloud environment and back to receive data processing support may simply be too slow. Likewise, machines like locomotives and gas turbines that generate large amounts of information through the use of a wide array of data-generating sensors may benefit from the rapid data processing capabilities of an edge solution. As an additional example, some IoT devices such as connected video cameras may not be well-suited for the utilization of cloud-based resources as it may be impractical (not only from a privacy perspective, security perspective, or a financial perspective) to send the data to the cloud simply because of the pure volume of data that is involved. As such, many tasks that really on data processing, storage, or communications may be better suited by platforms that include edge solutions such as the storage systems described above.</p><p id="p-0153" num="0152">Consider a specific example of inventory management in a warehouse, distribution center, or similar location. A large inventory, warehousing, shipping, order-fulfillment, manufacturing or other operation has a large amount of inventory on inventory shelves, and high resolution digital cameras that produce a firehose of large data. All of this data may be taken into an image processing system, which may reduce the amount of data to a firehose of small data. All of the small data may be stored on-premises in storage. The on-premises storage, at the edge of the facility, may be coupled to the cloud, for external reports, real-time control and cloud storage. Inventory management may be performed with the results of the image processing, so that inventory can be tracked on the shelves and restocked, moved, shipped, modified with new products, or discontinued/obsolescent products deleted, etc. The above scenario is a prime candidate for an embodiment of the configurable processing and storage systems described above. A combination of compute-only blades and offload blades suited for the image processing, perhaps with deep learning on offload-FPGA or offload-custom blade(s) could take in the firehose of large data from all of the digital cameras, and produce the firehose of small data. All of the small data could then be stored by storage nodes, operating with storage units in whichever combination of types of storage blades best handles the data flow. This is an example of storage and function acceleration and integration. Depending on external communication needs with the cloud, and external processing in the cloud, and depending on reliability of network connections and cloud resources, the system could be sized for storage and compute management with bursty workloads and variable conductivity reliability. Also, depending on other inventory management aspects, the system could be configured for scheduling and resource management in a hybrid edge/cloud environment.</p><p id="p-0154" num="0153">The storage systems described above may alone, or in combination with other computing resources, serves as a network edge platform that combines compute resources, storage resources, networking resources, cloud technologies and network virtualization technologies, and so on. As part of the network, the edge may take on characteristics similar to other network facilities, from the customer premise and backhaul aggregation facilities to Points of Presence (PoPs) and regional data centers. Readers will appreciate that network workloads, such as Virtual Network Functions (VNFs) and others, will reside on the network edge platform. Enabled by a combination of containers and virtual machines, the network edge platform may rely on controllers and schedulers that are no longer geographically co-located with the data processing resources. The functions, as microservices, may split into control planes, user and data planes, or even state machines, allowing for independent optimization and scaling techniques to be applied. Such user and data planes may be enabled through increased accelerators, both those residing in server platforms, such as FPGAs and Smart NICs, and through SDN-enabled merchant silicon and programmable ASICs.</p><p id="p-0155" num="0154">The storage systems described above may also be optimized for use in big data analytics. Big data analytics may be generally described as the process of examining large and varied data sets to uncover hidden patterns, unknown correlations, market trends, customer preferences and other useful information that can help organizations make more-informed business decisions. Big data analytics applications enable data scientists, predictive modelers, statisticians and other analytics professionals to analyze growing volumes of structured transaction data, plus other forms of data that are often left untapped by conventional business intelligence (BI) and analytics programs. As part of that process, semi-structured and unstructured data such as, for example, internet clickstream data, web server logs, social media content, text from customer emails and survey responses, mobile-phone call-detail records, IoT sensor data, and other data may be converted to a structured form. Big data analytics is a form of advanced analytics, which involves complex applications with elements such as predictive models, statistical algorithms and what-if analyses powered by high-performance analytics systems.</p><p id="p-0156" num="0155">The storage systems described above may also support (including implementing as a system interface) applications that perform tasks in response to human speech. For example, the storage systems may support the execution intelligent personal assistant applications such as, for example, Amazon's Alexa, Apple Siri, Google Voice, Samsung Bixby, Microsoft Cortana, and others. While the examples described in the previous sentence make use of voice as input, the storage systems described above may also support chatbots, talkbots, chatterbots, or artificial conversational entities or other applications that are configured to conduct a conversation via auditory or textual methods. Likewise, the storage system may actually execute such an application to enable a user such as a system administrator to interact with the storage system via speech. Such applications are generally capable of voice interaction, music playback, making to-do lists, setting alarms, streaming podcasts, playing audiobooks, and providing weather, traffic, and other real time information, such as news, although in embodiments in accordance with the present disclosure, such applications may be utilized as interfaces to various system management operations.</p><p id="p-0157" num="0156">The storage systems described above may also implement AI platforms for delivering on the vision of self-driving storage. Such AI platforms may be configured to deliver global predictive intelligence by collecting and analyzing large amounts of storage system telemetry data points to enable effortless management, analytics and support. In fact, such storage systems may be capable of predicting both capacity and performance, as well as generating intelligent advice on workload deployment, interaction and optimization. Such AI platforms may be configured to scan all incoming storage system telemetry data against a library of issue fingerprints to predict and resolve incidents in real-time, before they impact customer environments, and captures hundreds of variables related to performance that are used to forecast performance load.</p><p id="p-0158" num="0157">The storage systems described above may support the serialized or simultaneous execution artificial intelligence applications, machine learning applications, data analytics applications, data transformations, and other tasks that collectively may form an AI ladder. Such an AI ladder may effectively be formed by combining such elements to form a complete data science pipeline, where exist dependencies between elements of the AI ladder. For example, AI may require that some form of machine learning has taken place, machine learning may require that some form of analytics has taken place, analytics may require that some form of data and information architecting has taken place, and so on. As such, each element may be viewed as a rung in an AI ladder that collectively can form a complete and sophisticated AI solution.</p><p id="p-0159" num="0158">The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver an AI everywhere experience where AI permeates wide and expansive aspects of business and life. For example, AI may play an important role in the delivery of deep learning solutions, deep reinforcement learning solutions, artificial general intelligence solutions, autonomous vehicles, cognitive computing solutions, commercial UAVs or drones, conversational user interfaces, enterprise taxonomies, ontology management solutions, machine learning solutions, smart dust, smart robots, smart workplaces, and many others. The storage systems described above may also, either alone or in combination with other computing environments, be used to deliver a wide range of transparently immersive experiences where technology can introduce transparency between people, businesses, and things. Such transparently immersive experiences may be delivered as augmented reality technologies, connected homes, virtual reality technologies, brain-computer interfaces, human augmentation technologies, nanotube electronics, volumetric displays, 4D printing technologies, or others. The storage systems described above may also, either alone or in combination with other computing environments, be used to support a wide variety of digital platforms. Such digital platforms can include, for example, 5G wireless systems and platforms, digital twin platforms, edge computing platforms, IoT platforms, quantum computing platforms, serverless PaaS, software-defined security, neuromorphic computing platforms, and so on.</p><p id="p-0160" num="0159">Readers will appreciate that some transparently immersive experiences may involve the use of digital twins of various &#x201c;things&#x201d; such as people, places, processes, systems, and so on. Such digital twins and other immersive technologies can alter the way that humans interact with technology, as conversational platforms, augmented reality, virtual reality and mixed reality provide a more natural and immersive interaction with the digital world. In fact, digital twins may be linked with the real-world, perhaps even in real-time, to understand the state of a thing or system, respond to changes, and so on. Because digital twins consolidate massive amounts of information on individual assets and groups of assets (even possibly providing control of those assets), digital twins may communicate with each other to digital factory models of multiple linked digital twins.</p><p id="p-0161" num="0160">The storage systems described above may also be part of a multi-cloud environment in which multiple cloud computing and storage services are deployed in a single heterogeneous architecture. In order to facilitate the operation of such a multi-cloud environment, DevOps tools may be deployed to enable orchestration across clouds. Likewise, continuous development and continuous integration tools may be deployed to standardize processes around continuous integration and delivery, new feature rollout and provisioning cloud workloads. By standardizing these processes, a multi-cloud strategy may be implemented that enables the utilization of the best provider for each workload. Furthermore, application monitoring and visibility tools may be deployed to move application workloads around different clouds, identify performance issues, and perform other tasks. In addition, security and compliance tools may be deployed for to ensure compliance with security requirements, government regulations, and so on. Such a multi-cloud environment may also include tools for application delivery and smart workload management to ensure efficient application delivery and help direct workloads across the distributed and heterogeneous infrastructure, as well as tools that ease the deployment and maintenance of packaged and custom applications in the cloud and enable portability amongst clouds. The multi-cloud environment may similarly include tools for data portability.</p><p id="p-0162" num="0161">The storage systems described above may be used as a part of a platform to enable the use of crypto-anchors that may be used to authenticate a product's origins and contents to ensure that it matches a blockchain record associated with the product. Such crypto-anchors may take many forms including, for example, as edible ink, as a mobile sensor, as a microchip, and others. Similarly, as part of a suite of tools to secure data stored on the storage system, the storage systems described above may implement various encryption technologies and schemes, including lattice cryptography. Lattice cryptography can involve constructions of cryptographic primitives that involve lattices, either in the construction itself or in the security proof. Unlike public-key schemes such as the RSA, Diffie-Hellman or Elliptic-Curve cryptosystems, which are easily attacked by a quantum computer, some lattice-based constructions appear to be resistant to attack by both classical and quantum computers.</p><p id="p-0163" num="0162">A quantum computer is a device that performs quantum computing. Quantum computing is computing using quantum-mechanical phenomena, such as superposition and entanglement. Quantum computers differ from traditional computers that are based on transistors, as such traditional computers require that data be encoded into binary digits (bits), each of which is always in one of two definite states (0 or 1). In contrast to traditional computers, quantum computers use quantum bits, which can be in superpositions of states. A quantum computer maintains a sequence of qubits, where a single qubit can represent a one, a zero, or any quantum superposition of those two qubit states. A pair of qubits can be in any quantum superposition of 4 states, and three qubits in any superposition of 8 states. A quantum computer with n qubits can generally be in an arbitrary superposition of up to 2{circumflex over (&#x2003;)}n different states simultaneously, whereas a traditional computer can only be in one of these states at any one time. A quantum Turing machine is a theoretical model of such a computer.</p><p id="p-0164" num="0163">The storage systems described above may also be paired with FPGA-accelerated servers as part of a larger AI or ML infrastructure. Such FPGA-accelerated servers may reside near (e.g., in the same data center) the storage systems described above or even incorporated into an appliance that includes one or more storage systems, one or more FPGA-accelerated servers, networking infrastructure that supports communications between the one or more storage systems and the one or more FPGA-accelerated servers, as well as other hardware and software components. Alternatively, FPGA-accelerated servers may reside within a cloud computing environment that may be used to perform compute-related tasks for AI and ML jobs. Any of the embodiments described above may be used to collectively serve as a FPGA-based AI or ML platform. Readers will appreciate that, in some embodiments of the FPGA-based AI or ML platform, the FPGAs that are contained within the FPGA-accelerated servers may be reconfigured for different types of ML models (e.g., LSTMs, CNNs, GRUs). The ability to reconfigure the FPGAs that are contained within the FPGA-accelerated servers may enable the acceleration of a ML or AI application based on the most optimal numerical precision and memory model being used. Readers will appreciate that by treating the collection of FPGA-accelerated servers as a pool of FPGAs, any CPU in the data center may utilize the pool of FPGAs as a shared hardware microservice, rather than limiting a server to dedicated accelerators plugged into it.</p><p id="p-0165" num="0164">The FPGA-accelerated servers and the GPU-accelerated servers described above may implement a model of computing where, rather than keeping a small amount of data in a CPU and running a long stream of instructions over it as occurred in more traditional computing models, the machine learning model and parameters are pinned into the high-bandwidth on-chip memory with lots of data streaming though the high-bandwidth on-chip memory. FPGAs may even be more efficient than GPUs for this computing model, as the FPGAs can be programmed with only the instructions needed to run this kind of computing model.</p><p id="p-0166" num="0165">The storage systems described above may be configured to provide parallel storage, for example, through the use of a parallel file system such as BeeGFS. Such parallel files systems may include a distributed metadata architecture. For example, the parallel file system may include a plurality of metadata servers across which metadata is distributed, as well as components that include services for clients and storage servers. Through the use of a parallel file system, file contents may be distributed over a plurality of storage servers using striping and metadata may be distributed over a plurality of metadata servers on a directory level, with each server storing a part of the complete file system tree. Readers will appreciate that in some embodiments, the storage servers and metadata servers may run in userspace on top of an existing local file system. Furthermore, dedicated hardware is not required for client services, the metadata servers, or the hardware servers as metadata servers, storage servers, and even the client services may be run on the same machines.</p><p id="p-0167" num="0166">Readers will appreciate that, in part due to the emergence of many of the technologies discussed above including mobile devices, cloud services, social networks, big data analytics, and so on, an information technology platform may be needed to integrate all of these technologies and drive new business opportunities by quickly delivering revenue-generating products, services, and experiences &#x2014; rather than merely providing the technology to automate internal business processes. Information technology organizations may need to balance resources and investments needed to keep core legacy systems up and running while also integrating technologies to build an information technology platform that can provide the speed and flexibility in areas such as, for example, exploiting big data, managing unstructured data, and working with cloud applications and services. One possible embodiment of such an information technology platform is a composable infrastructure that includes fluid resource pools, such as many of the systems described above that, can meet the changing needs of applications by allowing for the composition and recomposition of blocks of disaggregated compute, storage, and fabric infrastructure. Such a composable infrastructure can also include a single management interface to eliminate complexity and a unified API to discover, search, inventory, configure, provision, update, and diagnose the composable infrastructure.</p><p id="p-0168" num="0167"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> illustrates a first block diagram <b>400</b>A for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure. In one embodiment, block diagram <b>400</b>A represents an example that does not include data deduplication between tenants. In one exemplary embodiment, Volume <b>1</b> belongs to a first tenant, Volume <b>2</b> belongs to a second tenant, and Volume <b>3</b> belongs to a third tenant. Volume <b>1</b>, belonging to the first tenant, may include Block <b>1</b> <b>404</b>A, Block <b>2</b> <b>404</b>B, and Block <b>3</b> <b>404</b>C. Volume <b>2</b>, belonging to the second tenant, may include Block <b>1</b> <b>405</b>A, Block <b>2</b> <b>405</b>B, and Block <b>3</b> <b>405</b>C. Volume <b>3</b>, belonging to the third tenant, may include Block <b>1</b> <b>406</b>A, Block <b>2</b> <b>406</b>B, and Block <b>3</b> <b>406</b>C.</p><p id="p-0169" num="0168">In one embodiment, the data stored on each of the blocks of Volumes <b>1</b>, <b>2</b>, and <b>3</b>, is distinct from the data stored on each of the other blocks. In other words, none of the data is deduplicatable. In this embodiment, each of the blocks belonging to Volume <b>1</b> (e.g., the first tenant) may be encrypted with an encryption key <b>401</b>, belonging to the first tenant. In another embodiment, the blocks of Volume <b>1</b> may be encrypted with a variety of encryption keys, all belonging to the first tenant. Likewise, the blocks of Volume <b>2</b> and Volume <b>3</b> may be encrypted with encryption keys belonging to the second tenant and third tenant, respectively. Any number of encryption keys may be used to encrypt the blocks of the volumes belonging to the tenants.</p><p id="p-0170" num="0169">Each tenant may separately manage the encryption key or keys used to encrypt and decrypt the data stored on the blocks belonging to each respective tenant. In one embodiment, each volume may be assigned a volume key and each tenant may be assigned (or may select) a tenant key. In the example illustrated by <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, in which no data is deduplicated between volumes belonging to separate tenants, each volume key may be encrypted with the tenant key belonging to each tenant, respectively. The encrypted volume key may then be provided to each respective tenant. In other embodiments (e.g., as described with respect to <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, volume keys may be encrypted with shared keys instead of individual tenant keys).</p><p id="p-0171" num="0170">In one embodiment, encryption keys are stored in a tenant key table. In the example embodiment illustrated by <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>, the tenant key table may be similar to Table 1, below.</p><p id="p-0172" num="0000"><tables id="TABLE-US-00001" num="00001"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="63pt" align="center"/><colspec colname="3" colwidth="98pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="3" rowsep="1">TABLE 1</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry/><entry/><entry>Key</entry></row><row><entry/><entry>Volume</entry><entry/><entry>Tnk&#x2014;key provided by tenant</entry></row><row><entry/><entry>key index</entry><entry>Tenants</entry><entry>Kn&#x2014;volume encryption key</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>1</entry><entry>T1</entry><entry>T1k(K1)</entry></row><row><entry/><entry>2</entry><entry>T2</entry><entry>T2k(K2)</entry></row><row><entry/><entry>3</entry><entry>T3</entry><entry>T3k(K3)</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0173" num="0171">Tenant key tables may store a volume key index (e.g., identifying the storage volume), a tenant identifier (ID), encryption keys or encryption key identifiers relevant to the identified storage volume, and/or any additional information (e.g., metadata) that may be useful.</p><p id="p-0174" num="0172">In one embodiment, volumes may be encrypted with a volume key that itself is encrypted with a tenant key that only the tenant can provide (e.g., either through Key Management Interoperability Protocol (KMIP) or some other schema). In the above example of Volume <b>1</b>, which belongs to T<b>1</b>, Volume <b>1</b> is encrypted using the volume encryption key K<b>1</b>, which is in turn encrypted with tenant encryption key T<b>1</b><i>k. </i>This information may be kept in a tenant key table e.g., Table 1. In one embodiment, each block of a volume may include (e.g., in a metadata header) an index into the tenant key table, which may identify the tenant and/or volume key. In another embodiment, each volume stores such metadata on behalf of each block that it includes. In yet another embodiment, such metadata is stored elsewhere internally or externally with respect to the storage system. For example, a remote key server storing such metadata may be maintained.</p><p id="p-0175" num="0173"><figref idref="DRAWINGS">FIG. <b>4</b>B</figref> illustrates a second block diagram <b>400</b>B for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure. In one embodiment, block diagram <b>400</b>B represents an example that includes data deduplication between tenants. Some aspects and components of diagram <b>400</b>B (including numbering) are the same, or similar to, those in block diagram <b>400</b>A of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref> merely for clarity and brevity. Such aspects and components may be the same or different than those illustrated by block diagram <b>400</b>A of <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. It should also be noted that the specific embodiments described with respect to <figref idref="DRAWINGS">FIGS. <b>4</b>A and <b>4</b>B</figref> are examples and merely for illustrative purposes. The deduplication-aware per-tenant encryption systems and methods described herein are equally capable of operating on embodiments having various alternative structures and arrangements.</p><p id="p-0176" num="0174">In one exemplary embodiment, Volume <b>1</b> belongs to a first tenant, Volume <b>2</b> belongs to a second tenant, and Volume <b>3</b> belongs to a third tenant. Volume <b>1</b>, belonging to the first tenant, may include Block <b>1</b> <b>404</b>A, Block <b>2</b> <b>404</b>B, and Block <b>3</b> <b>404</b>C. Volume <b>2</b>, belonging to the second tenant, may include Block <b>1</b> <b>405</b>A, Block <b>2</b> <b>405</b>B, and Block <b>3</b> <b>405</b>C. Volume <b>3</b>, belonging to the third tenant, may include Block <b>1</b> <b>406</b>A, Block <b>2</b> <b>406</b>B, and Block <b>3</b> <b>406</b>C.</p><p id="p-0177" num="0175">In one embodiment, some of the data stored on each of the blocks of Volumes <b>1</b>, <b>2</b>, and <b>3</b>, is the same as data stored on some of the other blocks belonging to different tenants. In other words, some of the data is deduplicatable. For example, the data in Block <b>2</b> <b>404</b>B of Volume <b>1</b> (e.g., belonging to the first tenant) may be the same as the data stored in Block <b>3</b> <b>405</b>C of Volume <b>2</b> (e.g., belonging to the second tenant). Likewise, the data in Block <b>3</b> <b>404</b>C of Volume <b>1</b> (e.g., belonging to the first tenant) may be the same as the data stored in Block <b>1</b> <b>406</b>A of Volume <b>3</b> (e.g., belonging to the third tenant). Such repeated data may benefit from deduplication.</p><p id="p-0178" num="0176">In this embodiment, each of the blocks belonging to Volume <b>1</b> (e.g., the first tenant) that do not contain shared data may be encrypted with an encryption key <b>401</b>, belonging to the first tenant. In another embodiment, the blocks of Volume <b>1</b> may be encrypted with a variety of encryption keys, all belonging to the first tenant. Likewise, the blocks of Volume <b>2</b> and Volume <b>3</b> that do not include shared data may be encrypted with encryption keys belonging to the second tenant and third tenant, respectively. Any number of encryption keys may be used to encrypt the blocks of the volumes belonging to the tenants.</p><p id="p-0179" num="0177">As described above, each tenant may separately manage the encryption key or keys used to encrypt and decrypt the data stored on the blocks belonging to each respective tenant. In one embodiment, each volume may be assigned a volume key and each tenant may be assigned (or may select) a tenant key. In the example illustrated by <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, in which some data is deduplicated between volumes belonging to separate tenants, each volume key may be encrypted with the tenant key belonging to each tenant, respectively. The encrypted volume key may then be provided to each respective tenant. Such keys may be used for the data that is not deduplicatable. For the blocks that contain data that may be deduplicatable (e.g., <b>404</b>B and <b>405</b>C), a separate, shared encryption key may be generated. The deduplicatable blocks may be encrypted using the shared encryption key, which may then separately be encrypted with each tenants' encryption key and provided to the respective tenants.</p><p id="p-0180" num="0178">For example, upon determining that the data of blocks <b>404</b>B and <b>405</b>C is deduplicatable, the data in each block may be decrypted using the tenant and volume key schema described with respect to <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>. Blocks <b>404</b>B and <b>405</b>C may then be encrypted with a new, shared key. Shared keys may be generated or identified in storage (e.g., a shared key may already exist if previously generated for two or more tenants that share existing data). The shared encryption key may then be encrypted with the tenant key of the first tenant, and provided to the first tenant. Likewise, the shared encryption key may be encrypted with the tenant key of the second tenant, and provided to the second tenant. Advantageously, this allows the shared data to be encrypted using a common (e.g., shared) encryption key, and thus duplicated, while allowing only the tenants who share the data access with their respective tenant keys.</p><p id="p-0181" num="0179">In one embodiment, encryption keys are stored in a tenant key table. In the example embodiment illustrated by <figref idref="DRAWINGS">FIG. <b>4</b>B</figref>, the tenant key table may be similar to Table 2, below.</p><p id="p-0182" num="0000"><tables id="TABLE-US-00002" num="00002"><table frame="none" colsep="0" rowsep="0"><tgroup align="left" colsep="0" rowsep="0" cols="4"><colspec colname="offset" colwidth="21pt" align="left"/><colspec colname="1" colwidth="35pt" align="center"/><colspec colname="2" colwidth="63pt" align="center"/><colspec colname="3" colwidth="98pt" align="left"/><thead><row><entry/><entry namest="offset" nameend="3" rowsep="1">TABLE 2</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row><row><entry/><entry/><entry/><entry>Key</entry></row><row><entry/><entry>Volume</entry><entry/><entry>Tnk&#x2014;key provided by tenant</entry></row><row><entry/><entry>key index</entry><entry>Tenants</entry><entry>Kn&#x2014;volume encryption key</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></thead><tbody valign="top"><row><entry/><entry>1</entry><entry>T1</entry><entry>T1k(K1)</entry></row><row><entry/><entry>2</entry><entry>T2</entry><entry>T2k(K2)</entry></row><row><entry/><entry>3</entry><entry>T3</entry><entry>T3k(K3)</entry></row><row><entry/><entry>4</entry><entry>T1, T2</entry><entry>T1k(K4)</entry></row><row><entry/><entry/><entry/><entry>T2k(K4)</entry></row><row><entry/><entry>5</entry><entry>T1, T3</entry><entry>T1k(K5)</entry></row><row><entry/><entry/><entry/><entry>T3k(K5)</entry></row><row><entry/><entry namest="offset" nameend="3" align="center" rowsep="1"/></row></tbody></tgroup></table></tables></p><p id="p-0183" num="0180">As described above, tenant key tables may store a volume key index (e.g., identifying the storage volume), a tenant identifier (ID), encryption keys or encryption key identifiers relevant to the identified storage volume, and/or any additional information (e.g., metadata) that may be useful.</p><p id="p-0184" num="0181">In one embodiment, volumes may be encrypted with a volume key that itself is encrypted with a tenant key that only the tenant can provide (e.g., either through Key Management Interoperability Protocol (KMIP) or some other schema). In the above example Block <b>2</b> <b>404</b>B of Volume <b>1</b>, which belongs to T<b>1</b>, is the same as Block <b>3</b> <b>405</b>C of Volume <b>2</b>, which belongs to T<b>2</b>. Block <b>2</b> <b>404</b>B and Block <b>3</b> <b>405</b>C may be encrypted using the shared volume key K<b>4</b>, which is in turn separately encrypted with tenant encryption key T<b>1</b><i>k </i>and T<b>2</b><i>k. </i>The resulting encrypted encryption keys may be provided to the respective tenants (e.g., T<b>1</b> and T<b>2</b>), thus allowing them access to the data. This information may be kept in a tenant key table e.g., Table 2. In one embodiment, each block of a volume may include (e.g., in a metadata header) an index into the tenant key table, which may identify the tenant and/or volume key. In another embodiment, each volume stores such metadata on behalf of each block that it includes. In yet another embodiment, such metadata is stored elsewhere internally or externally with respect to the storage system. For example, a remote key server storing such metadata may be maintained.</p><p id="p-0185" num="0182"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a first flow diagram for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure. The method <b>500</b> may be performed by processing logic that comprises hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof. In one embodiment, processing logic is executed by a kernel of an operating system associated with the hardware described. It should be noted that the operations described with respect to flow diagrams <b>500</b> and <b>600</b> may be performed in any order and combination. For example, the operations of flow diagram <b>500</b> may be performed with or in place of the operations of flow diagrams <b>600</b> and vice versa.</p><p id="p-0186" num="0183">Referring to <figref idref="DRAWINGS">FIG. <b>5</b></figref>, at block <b>502</b>, processing logic receives a request to write a data block to a volume resident on a multi-tenant storage array. In one embodiment, the request is associated with a first tenant of the multi-tenant storage array. At block <b>504</b>, processing logic determines whether the data block matches an existing data block on the multi-tenant storage array (e.g., is deduplicatable). In one embodiment, the existing block corresponds to a second tenant. Additional details describing the operations of block <b>504</b> are provided with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0187" num="0184">In response to determining that the decrypted data block does match the existing data block processing logic may perform the operations of blocks <b>506</b>, <b>508</b>, and <b>510</b>. At block <b>506</b>, processing logic encrypts, by a processing device, the existing data block with a shared volume encryption key. In one embodiment, processing logic may determine whether a suitable shared volume encryption key already exists. If so, processing logic may retrieve the existing shared volume encryption key for use. If the key does not already exist, processing logic may generate the shared volume encryption key for use.</p><p id="p-0188" num="0185">At block <b>508</b>, processing logic encrypts, by the processing device, the shared volume encryption key with a first tenant encryption key associated with the first tenant and provides the shared volume encryption key encrypted with the first tenant encryption key to the first tenant. At block <b>510</b>, processing logic encrypts, by the processing device, the shared volume encryption key with a second tenant encryption key associated with the second tenant and providing the shared volume encryption key encrypted with the second tenant encryption key to the second tenant.</p><p id="p-0189" num="0186">In one embodiment, deduplicated data may be overwritten or erased, resulting in data that is no longer deduplicated. In such a case, processing logic may receive a request from the first tenant to overwrite (or erase) the data block, encrypt the data block with a non-shared volume key, and encrypt the non-shared volume key with the second tenant key. Processing logic may then provide the encrypted non-shared volume key to the second tenant. In one embodiment, if the data is still deduplicated after one tenant overwrites or erases the data (e.g., the data is deduplicated for more than two tenants), the operations described with respect to blocks <b>502</b>-<b>510</b> may be repeated to generate a shared volume key for the remaining tenants that share the deduplicated data.</p><p id="p-0190" num="0187"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a second flow diagram for deduplication-aware per-tenant encryption in accordance with some embodiments of the present disclosure. The method <b>600</b> may be performed by processing logic that comprises hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof. In one embodiment, processing logic is executed by a kernel of an operating system associated with the hardware described. It should be noted that the operations described with respect to flow diagrams <b>500</b> and <b>600</b> may be performed in any order and combination. For example, the operations of flow diagram <b>600</b> may be performed with or in place of the operations of flow diagrams <b>500</b> and vice versa. In one embodiment, the operations described with respect to <figref idref="DRAWINGS">FIG. <b>6</b></figref> may be performed in place of block <b>504</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0191" num="0188">Beginning at block <b>602</b>, processing logic determines if a first hash value associated with the data block matches a second hash value associated with the multi-tenant storage array. If so, processing flow continues to block <b>604</b> where processing logic decrypts the data block to generate a decrypted data block. In one embodiment, the data block includes the first hash value. In another embodiment, the first hash value may be determined from the data block. In one embodiment, to decrypt the data block to generate the decrypted data block, processing logic may determine that the first tenant owns the first data block and retrieve the first tenant encryption key. In one embodiment, to determine that the first tenant owns the first data block, processing logic may retrieve an identifier of the first tenant from a tenant key table. To retrieve the first tenant encryption key, processing logic may retrieve the first tenant encryption key from a key management server. At block <b>606</b>, processing logic determines if the decrypted data block matches the existing data block corresponding to the second hash value. If so, processing logic may determine that the data is deduplicatable and continue to block <b>506</b> of <figref idref="DRAWINGS">FIG. <b>5</b></figref>.</p><p id="p-0192" num="0189">If, at block <b>604</b>, processing logic determines that a first hash value associated with the data block does not match a second hash value (e.g., any other hash value) associated with the multi-tenant storage array, processing flow may continue to block <b>608</b>. If, at block <b>606</b>, processing logic determines that the decrypted data block does not match the existing data block corresponding to the second hash value, processing flow may likewise continue to block <b>608</b>. At block <b>608</b>, processing logic encrypts the first data block with a non-shared volume key, encrypts the non-shared volume key with the first tenant key (block <b>610</b>), and provides the encrypted non-shared volume key to the first tenant (block <b>612</b>).</p><p id="p-0193" num="0190">While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.</p><p id="p-0194" num="0191">Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.</p><p id="p-0195" num="0192">Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. A multi-tenant storage system that includes one or more storage devices, the multi-tenant storage system also including a storage controller configured for:<claim-text>determining that at least some portion of a dataset that is associated with a first tenant in the multi-tenant storage system matches at least some portion of a dataset that is associated with a second tenant in the multi-tenant storage system;</claim-text><claim-text>encrypting the portion of the dataset that is associated with the first tenant and the matching portion of the dataset that is associated with a shared encryption key;</claim-text><claim-text>encrypting, with an encryption key that is unique to the first tenant, a portion of the dataset that is associated with the first tenant that is unique to the first tenant; and</claim-text><claim-text>encrypting, with an encryption key that is unique to the second tenant, a portion of the dataset that is associated with the second tenant that is unique to the second tenant.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein determining that at least some portion of the dataset that is associated with the first tenant in the multi-tenant storage system matches at least some portion of a dataset that is associated with the second tenant in the multi-tenant storage system further comprises:<claim-text>receiving a request to write a data block to the multi-tenant storage system, wherein the request is associated with the first tenant;</claim-text><claim-text>based on a determination that the data block is deduplicatable, decrypting the data block to generate a decrypted data block; and</claim-text><claim-text>determining that the decrypted data block matches an existing data block associated with a second tenant of the multi-tenant storage system.</claim-text></claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein the storage controller is further configured for, based on the determination that the decrypted data block matches the existing data block, generating the shared encryption key.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the storage controller is further configured for storing, in a tenant key data structure, the shared encryption key encrypted with a first tenant encryption key and the shared encryption key encrypted with a second tenant encryption key.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The system of <claim-ref idref="CLM-00022">claim 22</claim-ref>, wherein to decrypt the data block to generate the decrypted data block, the storage controller is further configured for retrieving the first tenant encryption key based on a determination that the first tenant owns the data block.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The system of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein to retrieve the first tenant encryption key, the storage controller is further configured for retrieving the first tenant encryption key from a key management server.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the storage controller is further configured for generating the shared encryption key based on a determination that the shared encryption key does not already exist.</claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The system of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein in response to determining that a first hash value associated with the data block does not match the second hash value, or that the decrypted data block does not match the existing data block, the storage controller is further configured for encrypting the with an encryption key that is unique to the first tenant with a first tenant key.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. A method comprising:<claim-text>determining that at least some portion of a dataset that is associated with a first tenant in a multi-tenant storage system matches at least some portion of a dataset that is associated with a second tenant in the multi-tenant storage system;</claim-text><claim-text>encrypting the portion of the dataset that is associated with the first tenant and the matching portion of the dataset that is associated with a shared encryption key;</claim-text><claim-text>encrypting, with an encryption key that is unique to the first tenant, a portion of the dataset that is associated with the first tenant that is unique to the first tenant; and</claim-text><claim-text>encrypting, with an encryption key that is unique to the second tenant, a portion of the dataset that is associated with the second tenant that is unique to the second tenant.</claim-text></claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, wherein determining that at least some portion of the dataset that is associated with the first tenant in the multi-tenant storage system matches at least some portion of a dataset that is associated with the second tenant in the multi-tenant storage system further comprises:<claim-text>receiving a request to write a data block to the multi-tenant storage system, wherein the request is associated with the first tenant;</claim-text><claim-text>based on a determination that the data block is deduplicatable, decrypting the data block to generate a decrypted data block; and</claim-text><claim-text>determining that the decrypted data block matches an existing data block associated with a second tenant of the multi-tenant storage system.</claim-text></claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. The method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, further comprising, based on the determination that the decrypted data block matches the existing data block, generating the shared encryption key.</claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, further comprising storing, in a tenant key data structure, the shared encryption key encrypted with a first tenant encryption key and the shared encryption key encrypted with a second tenant encryption key.</claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The method of <claim-ref idref="CLM-00030">claim 30</claim-ref>, further comprising retrieving the first tenant encryption key based on a determination that the first tenant owns the data block.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The method of <claim-ref idref="CLM-00033">claim 33</claim-ref>, wherein retrieving the first tenant encryption key further comprises retrieving the first tenant encryption key from a key management server.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, further comprising generating the shared encryption key based on a determination that the shared encryption key does not already exist.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The method of <claim-ref idref="CLM-00029">claim 29</claim-ref>, further comprising, responsive to determining that a first hash value associated with the data block does not match the second hash value, or that the decrypted data block does not match the existing data block, encrypting the with an encryption key that is unique to the first tenant with a first tenant key.</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. An apparatus that includes a computer memory, the computer memory including computer program instructions that, when executed, cause the apparatus to carry out the steps of:<claim-text>determining that at least some portion of a dataset that is associated with a first tenant in a multi-tenant storage system matches at least some portion of a dataset that is associated with a second tenant in the multi-tenant storage system;</claim-text><claim-text>encrypting the portion of the dataset that is associated with the first tenant and the matching portion of the dataset that is associated with a shared encryption key;</claim-text><claim-text>encrypting, with an encryption key that is unique to the first tenant, a portion of the dataset that is associated with the first tenant that is unique to the first tenant; and</claim-text><claim-text>encrypting, with an encryption key that is unique to the second tenant, a portion of the dataset that is associated with the second tenant that is unique to the second tenant.</claim-text></claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. The apparatus of <claim-ref idref="CLM-00037">claim 37</claim-ref>, wherein determining that at least some portion of the dataset that is associated with the first tenant in the multi-tenant storage system matches at least some portion of a dataset that is associated with the second tenant in the multi-tenant storage system further comprises:<claim-text>receiving a request to write a data block to the multi-tenant storage system, wherein the request is associated with the first tenant;</claim-text><claim-text>based on a determination that the data block is deduplicatable, decrypting the data block to generate a decrypted data block; and</claim-text><claim-text>determining that the decrypted data block matches an existing data block associated with a second tenant of the multi-tenant storage system.</claim-text></claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref>, further comprising computer program instructions that, when executed, cause the apparatus to carry out the step of, based on the determination that the decrypted data block matches the existing data block, generating the shared encryption key.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The apparatus of <claim-ref idref="CLM-00037">claim 37</claim-ref>, further comprising computer program instructions that, when executed, cause the apparatus to carry out the step of generating the shared encryption key based on a determination that the shared encryption key does not already exist.</claim-text></claim></claims></us-patent-application>