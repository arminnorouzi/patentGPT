<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230006689A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230006689</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17688368</doc-number><date>20220307</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><priority-claims><priority-claim sequence="01" kind="national"><country>JP</country><doc-number>2021-110809</doc-number><date>20210702</date></priority-claim></priority-claims><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>30</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>3088</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>6005</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>H</section><class>03</class><subclass>M</subclass><main-group>7</main-group><subgroup>6011</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0608</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0656</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>06</class><subclass>F</subclass><main-group>3</main-group><subgroup>0673</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e61">COMPRESSION DEVICE AND DECOMPRESSION DEVICE</invention-title><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="obligated-assignee"><addressbook><orgname>Kioxia Corporation</orgname><address><city>Tokyo</city><country>JP</country></address></addressbook><residence><country>JP</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>SUMIYOSHI</last-name><first-name>Masato</first-name><address><city>Yokohama Kanagawa</city><country>JP</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>NAKANISHI</last-name><first-name>Keiri</first-name><address><city>Kawasaki Kanagawa</city><country>JP</country></address></addressbook></inventor><inventor sequence="02" designation="us-only"><addressbook><last-name>OIKAWA</last-name><first-name>Kohei</first-name><address><city>Kawasaki Kanagawa</city><country>JP</country></address></addressbook></inventor><inventor sequence="03" designation="us-only"><addressbook><last-name>KODAMA</last-name><first-name>Sho</first-name><address><city>Kawasaki Kanagawa</city><country>JP</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">According to one embodiment, an interleaving unit divides a symbol string into first and second symbols. A first coding unit converts the first symbols to first codewords. A first packet generating unit generates first packets including the first codewords. A first request generating unit generates first packet requests including sizes of variable length packets. A second coding unit converts the second symbols to second codewords. A second packet generating unit generates second packets including the second codewords. A second request generating unit generates second packet requests including sizes of variable length packets. A multiplexer outputs a compressed stream including the first and second variable length packets cut out from the first and second packets.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="213.36mm" wi="147.32mm" file="US20230006689A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="215.14mm" wi="151.21mm" orientation="landscape" file="US20230006689A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="225.64mm" wi="149.35mm" file="US20230006689A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="138.35mm" wi="95.67mm" orientation="landscape" file="US20230006689A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="213.53mm" wi="71.88mm" orientation="landscape" file="US20230006689A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="213.19mm" wi="71.12mm" orientation="landscape" file="US20230006689A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="216.66mm" wi="143.34mm" orientation="landscape" file="US20230006689A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="150.62mm" wi="88.90mm" orientation="landscape" file="US20230006689A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="212.85mm" wi="71.12mm" orientation="landscape" file="US20230006689A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="212.94mm" wi="71.12mm" orientation="landscape" file="US20230006689A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00010" num="00010"><img id="EMI-D00010" he="222.59mm" wi="140.80mm" orientation="landscape" file="US20230006689A1-20230105-D00010.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00011" num="00011"><img id="EMI-D00011" he="238.17mm" wi="71.37mm" orientation="landscape" file="US20230006689A1-20230105-D00011.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00012" num="00012"><img id="EMI-D00012" he="238.93mm" wi="70.87mm" orientation="landscape" file="US20230006689A1-20230105-D00012.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00013" num="00013"><img id="EMI-D00013" he="223.35mm" wi="141.05mm" orientation="landscape" file="US20230006689A1-20230105-D00013.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00014" num="00014"><img id="EMI-D00014" he="169.76mm" wi="119.89mm" file="US20230006689A1-20230105-D00014.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00015" num="00015"><img id="EMI-D00015" he="161.29mm" wi="139.45mm" file="US20230006689A1-20230105-D00015.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00016" num="00016"><img id="EMI-D00016" he="239.44mm" wi="149.35mm" file="US20230006689A1-20230105-D00016.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00017" num="00017"><img id="EMI-D00017" he="227.08mm" wi="121.84mm" file="US20230006689A1-20230105-D00017.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00018" num="00018"><img id="EMI-D00018" he="226.31mm" wi="145.71mm" orientation="landscape" file="US20230006689A1-20230105-D00018.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00019" num="00019"><img id="EMI-D00019" he="215.05mm" wi="69.93mm" orientation="landscape" file="US20230006689A1-20230105-D00019.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0001" level="1">CROSS-REFERENCE TO RELATED APPLICATIONS</heading><p id="p-0002" num="0001">This application is based upon and claims the benefit of priority from Japanese Patent Application No. 2021-110809, filed Jul. 2, 2021, the entire contents of which are incorporated herein by reference.</p><heading id="h-0002" level="1">FIELD</heading><p id="p-0003" num="0002">Embodiments described herein relate generally to a compression device and a decompression device.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">In recent years, for example, when a write command is issued from a host, the write data is compressed by a compression device and written to a non-volatile memory, and when a read command is issued from the host, the read data read from the non-volatile memory is decompressed by a decompression device and returned to the host. With this operation, the storage area of the non-volatile memory can be effectively utilized.</p><p id="p-0005" num="0004">Meanwhile, in a case where entropy coding is performed to compress the write data, the expected compression efficiency (the expected effect) cannot be obtained in some cases.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0006" num="0005"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram schematically illustrating an example of a hardware configuration of a memory system to which a compression device and a decompression device according to a first embodiment are applied.</p><p id="p-0007" num="0006"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a diagram illustrating an example of a configuration of the compression device and the decompression device according to the first embodiment.</p><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a diagram illustrating an example of a plurality of codewords converted from a first sub-stream in the first embodiment.</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a diagram illustrating an example of a plurality of codewords converted from a second sub-stream in the first embodiment.</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a diagram illustrating a specific example of an operation of a first channel in a decompression device according to a comparative example of the first embodiment.</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a diagram illustrating a specific example of an operation of a second channel in the decompression device according to the comparative example of the first embodiment.</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram for explaining the outline of an operation of a first packet request generating unit, a second packet request generating unit, and a multiplexer included in a compression device according to the comparative example of the first embodiment.</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating the outline of variable length packets included in a compressed stream output from the compression device according to the first embodiment.</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>9</b></figref> is a diagram illustrating a specific example of an operation of the first channel in the decompression device according to the first embodiment.</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIG. <b>10</b></figref> is a diagram illustrating a specific example of an operation of the second channel in the decompression device according to the first embodiment.</p><p id="p-0016" num="0015"><figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram for explaining the outline of an operation of a first packet request generating unit, a second packet request generating unit, and a multiplexer included in the compression device according to the first embodiment.</p><p id="p-0017" num="0016"><figref idref="DRAWINGS">FIG. <b>12</b></figref> is a diagram illustrating a specific example of an operation of a first channel in a decompression device according to a second embodiment.</p><p id="p-0018" num="0017"><figref idref="DRAWINGS">FIG. <b>13</b></figref> is a diagram illustrating a specific example of an operation of a second channel in the decompression device according to the second embodiment.</p><p id="p-0019" num="0018"><figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram for explaining the outline of an operation of a first packet request generating unit, a second packet request generating unit, and a multiplexer included in a compression device according to the second embodiment.</p><p id="p-0020" num="0019"><figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram for specifically explaining a modification of the second embodiment.</p><p id="p-0021" num="0020"><figref idref="DRAWINGS">FIG. <b>16</b></figref> is a diagram for specifically explaining the modification of the second embodiment.</p><p id="p-0022" num="0021"><figref idref="DRAWINGS">FIG. <b>17</b></figref> is a diagram for explaining a result of dictionary coding in a third embodiment.</p><p id="p-0023" num="0022"><figref idref="DRAWINGS">FIG. <b>18</b></figref> is a diagram illustrating an example of a symbol string in the third embodiment.</p><p id="p-0024" num="0023"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a diagram illustrating an example of a configuration of a compression device and a decompression device according to the third embodiment.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>20</b></figref> is a diagram for explaining an operation of a sorting unit included in the compression device according to the third embodiment.</p><p id="p-0026" num="0025"><figref idref="DRAWINGS">FIG. <b>21</b></figref> is a diagram for explaining an operation of a notification unit included in the decompression device according to the third embodiment.</p><p id="p-0027" num="0026"><figref idref="DRAWINGS">FIG. <b>22</b></figref> is a diagram for explaining an operation of the sorting unit in a case where the number of channels is eight in the third embodiment.</p><p id="p-0028" num="0027"><figref idref="DRAWINGS">FIG. <b>23</b></figref> is a diagram for explaining an operation of the notification unit in the case where the number of channels is eight in the third embodiment.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0029" num="0028">Hereinafter, embodiments will be described with reference to the drawings.</p><p id="p-0030" num="0029">In general, according to one embodiment, a compression device includes an interleaving unit, a first coding unit, a first packet generating unit, a first request generating unit, a second coding unit, a second packet generating unit, a second request generating unit, and a multiplexer. The interleaving unit is configured to divide a symbol string which is input into a plurality of first symbols and a plurality of second symbols different from the first symbols. The first coding unit is configured to perform coding on the first symbols to convert the first symbols to a plurality of first codewords. The first packet generating unit is configured to generate first packets, the first packets including the first codewords. The first request generating unit is configured to generate first packet requests including sizes of variable length packets based on code length of each of the first codewords. The second coding unit is configured to perform coding on the second symbols to convert the second symbols to a plurality of second codewords. The second packet generating unit is configured to generate second packets, the second packets including the second codewords. The second request generating unit is configured to generate second packet requests including sizes of variable length packets based on code length of each of the second codewords. The multiplexer is configured to cut out first variable length packets from the first packets based on the sizes of the variable length packets included in the first packet requests, cut out second variable length packets from the second packets based on the sizes of the variable length packets included in the second packet requests, and output a compressed stream including the first and second variable length packets.</p><heading id="h-0006" level="1">First Embodiment</heading><p id="p-0031" num="0030">First, a first embodiment will be described. <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a block diagram schematically illustrating an example of a hardware configuration of a memory system to which a compression device and a decompression device according to the first embodiment are applied.</p><p id="p-0032" num="0031">A memory system <b>1</b> illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> is a semiconductor storage device configured to write data to a non-volatile memory and read data from the non-volatile memory. In the present embodiment, the memory system <b>1</b> is described as being implemented as, for example, a solid state drive (SSD), but the memory system <b>1</b> can be another storage device.</p><p id="p-0033" num="0032">The memory system <b>1</b> is configured to be connectable to a host via a system bus such as a PCI Express bus. As illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, the memory system <b>1</b> includes a controller <b>2</b>, a NAND flash memory <b>3</b>, a dynamic random access memory (DRAM) <b>4</b>, and the like.</p><p id="p-0034" num="0033">The controller <b>2</b> has a function of controlling the operation of the memory system <b>1</b>. The controller <b>2</b> includes a host interface (I/F) <b>2</b><i>a</i>, a CPU <b>2</b><i>b</i>, a NAND interface (I/F) <b>2</b><i>c</i>, a DRAM interface (I/F) <b>2</b><i>d</i>, and the like. The host interface <b>2</b><i>a</i>, the CPU <b>2</b><i>b</i>, the NAND interface (I/F) <b>2</b><i>c</i>, and the DRAM interface <b>2</b><i>d </i>are connected to each other via, for example, a bus.</p><p id="p-0035" num="0034">The host interface <b>2</b><i>a </i>is a host interface circuit configured to perform communication with a host located outside the memory system <b>1</b>. The host interface <b>2</b><i>a </i>can be, for example, a PCI Express controller or the like. The host interface <b>2</b><i>a </i>receives various commands (requests) from the host.</p><p id="p-0036" num="0035">The CPU <b>2</b><i>b </i>is a processor configured to control the host interface <b>2</b><i>a</i>, the NAND interface <b>2</b><i>c</i>, and the DRAM interface <b>2</b><i>d</i>. The CPU <b>2</b><i>b </i>performs various processes by loading a control program (firmware) from the NAND flash memory <b>3</b> or a rea only memory (ROM) (not illustrated) into the DRAM <b>4</b> in response to the power-on of the memory system <b>1</b>, and executing the control program. Specifically, the CPU <b>2</b><i>b </i>performs processes for various commands issued from the host. Note that all or part of the processes for the commands issued from the host can be executed by dedicated hardware in the controller <b>2</b>.</p><p id="p-0037" num="0036">The NAND interface <b>2</b><i>c </i>is a memory control circuit configured to control the NAND flash memory <b>3</b> under the control of the CPU <b>2</b><i>b. </i></p><p id="p-0038" num="0037">In addition, the controller <b>2</b> includes a compression device <b>2</b><i>e </i>(an encoder) and a decompression device <b>2</b><i>f </i>(a decoder).</p><p id="p-0039" num="0038">In a case where a write command is issued from the hose, for example, the compression device <b>2</b><i>e </i>is used to input data (write data) specified in the write command and compress the data. Note that the compression device <b>2</b><i>e </i>according to the present embodiment is only required to perform at least entropy coding, but in the present embodiment, it is assumed that the scheme of compressing data by, for example, a compression algorithm combining dictionary coding and entropy coding is adopted. The data compressed in the compression device <b>2</b><i>e </i>(hereinafter, referred to as &#x201c;compressed data&#x201d;) is output from the compression device <b>2</b><i>e</i>, and then subjected to predetermined processes such as an error correction process and a randomization process. The CPU <b>2</b><i>b </i>writes the data obtained by performing the predetermined processes on the compressed data to the NAND flash memory <b>3</b> via the NAND interface <b>2</b><i>c</i>. That is, the CPU <b>2</b><i>b </i>writes the data based on the compressed data output from the compression device <b>2</b><i>e </i>to the NAND flash memory <b>3</b>.</p><p id="p-0040" num="0039">When reading the compressed data from the NAND flash memory <b>3</b> based on a read command received from the host via the host interface <b>2</b><i>a</i>, for example, the CPU <b>2</b><i>b </i>reads the data based on the read command from the NAND flash memory <b>3</b> via the NAND interface <b>2</b><i>c</i>. The data read from the NAND flash memory <b>3</b> is subjected to predetermined processes such as an error correction process and a randomization cancellation process, and then is input to the decompression device <b>2</b><i>f </i>by the CPU <b>2</b><i>b </i>as compressed data. The decompression device <b>2</b><i>f </i>decompresses the input compressed data. That is, the decompression device <b>2</b><i>f </i>decompresses the compressed data based on the data read from the NAND flash memory <b>3</b>.</p><p id="p-0041" num="0040">The NAND flash memory <b>3</b> is a non-volatile memory and has a memory cell array including a plurality of memory cells arranged in a matrix. The NAND flash memory <b>3</b> can be a NAND flash memory with a two-dimensional structure or can be a NAND flash memory with a three-dimensional structure.</p><p id="p-0042" num="0041">The memory cell array of the NAND flash memory <b>3</b> includes a plurality of blocks BLK<b>0</b> to BLKm&#x2212;1. Each of the blocks BLK<b>0</b> to BLKm&#x2212;1 includes a large number of pages (here, pages P<b>0</b> to Pn&#x2212;1). The blocks BLK<b>0</b> to BLKm&#x2212;1 function as erase units. Each of the pages P<b>0</b> to Pn&#x2212;1 includes a plurality of memory cells connected to the same word line. The pages P<b>0</b> to Pn&#x2212;1 are units of a data write operation and a data read operation.</p><p id="p-0043" num="0042">Here, the memory system <b>1</b> has been described as including the NAND flash memory <b>3</b>, but the memory system <b>1</b> can be configured to include, for example, a phase change memory (PCM) or a magnetoresistive random access memory (MRAM) as a non-volatile memory.</p><p id="p-0044" num="0043">The DRAM <b>4</b> is a volatile memory, and functions as, for example, a temporary buffer of software executed in the controller <b>2</b> (the CPU <b>2</b><i>b</i>), a temporary buffer for the NAND flash memory <b>3</b>, or the like.</p><p id="p-0045" num="0044">Although the memory system <b>1</b> has been described here as including the DRAM <b>4</b>, the memory system <b>1</b> can be configured to include, for example, a static random access memory (SRAM) as a volatile memory.</p><p id="p-0046" num="0045">Note that the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>have been described as being incorporated in the controller <b>2</b> in <figref idref="DRAWINGS">FIG. <b>1</b></figref>, but the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>can be provided outside the controller <b>2</b> or can be provided outside the memory system <b>1</b>.</p><p id="p-0047" num="0046">Furthermore, in the present embodiment, the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>are described as being implemented by hardware, but all or part of the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>can be implemented by software, or can be implemented by a combination of software and hardware.</p><p id="p-0048" num="0047">Hereinafter, an example of the configuration of the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>illustrated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> will be described with reference to <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0049" num="0048">Here, it is assumed in the present embodiment that the compression device <b>2</b><i>e </i>is configured to compress write data (hereinafter, referred to as &#x201c;uncompressed data&#x201d;) input to the compression device <b>2</b><i>e </i>by the compression algorithm combining dictionary coding and entropy coding as described above.</p><p id="p-0050" num="0049">In this case, the compression device <b>2</b><i>e </i>performs dictionary coding on the uncompressed data and then entropy coding on the result of dictionary coding, thereby outputting compressed data in which the uncompressed data is compressed.</p><p id="p-0051" num="0050">Note that dictionary coding is a coding method that converts data to be subjected to dictionary coding (hereinafter referred to as &#x201c;dictionary coding target data&#x201d;) to a relative reference of data older than the dictionary coding target data.</p><p id="p-0052" num="0051">Specifically, in dictionary coding, a buffer for storing past data (hereinafter referred to as &#x201c;history buffer&#x201d;) is prepared, and the past data matching the dictionary coding target data is searched in the history buffer.</p><p id="p-0053" num="0052">In a case where the past data matching the dictionary coding target data is not present in the history buffer, the information indicating the dictionary coding target data (hereinafter referred to as &#x201c;literal information&#x201d;) is output as the result of dictionary coding.</p><p id="p-0054" num="0053">On the other hand, in a case where the past data matching the dictionary coding target data is present in the history buffer, a set of the information indicating the length at which the dictionary coding target data matches the past data in the history buffer (hereinafter referred to as &#x201c;match length information&#x201d;) and the information (hereinafter referred to as &#x201c;distance information&#x201d;) indicating the position in the history buffer where the past data is stored (that is, the distance to the past data in the history buffer) is output as the result of dictionary encoding.</p><p id="p-0055" num="0054">Entropy coding is a coding method that converts data to be subjected to entropy coding (hereinafter referred to as &#x201c;entropy coding target data&#x201d;) to a codeword with a code length depending on the frequency of appearance of the entropy coding target data. According to entropy coding, codewords with different code lengths are assigned to the entropy coding target data by utilizing the difference in the appearance frequency of the entropy coding target data, so that the amount of codes (the amount of data) can be reduced as a whole.</p><p id="p-0056" num="0055">For example, Huffman coding is used as entropy coding. In a case where Huffman coding is used as entropy coding, Huffman coding can be static Huffman coding that performs coding by using a pre-constructed code tree, or can be dynamic Huffman coding that changes a code tree depending on Huffman coding target data. For example, arithmetic coding or the like can be used as entropy coding.</p><p id="p-0057" num="0056">In a case where the compression device <b>2</b><i>e </i>is configured to perform entropy coding on the result of dictionary coding as described above, for example, the compression device <b>2</b><i>e </i>performs dictionary coding by using each piece of data partially cut out from the uncompressed data input to the compression device <b>2</b><i>e </i>as the dictionary coding target data, and performs entropy coding by using pieces of the literal information, the match length information, and the distance information, which are the result of dictionary coding, as the entropy coding target data.</p><p id="p-0058" num="0057">Note that in entropy coding, the entropy coding target data (for example, the literal information, the match length information, and the distance information) is referred to as &#x201c;symbol&#x201d;, and in a case where entropy coding is performed, a symbol string including the literal information, the match length information, and the distance information sequentially arranged as the result of dictionary coding is input.</p><p id="p-0059" num="0058">It is described in the present embodiment that the result of dictionary coding (the literal information, the match length information, and the distance information) is input as a symbol and entropy coding is performed, but the compression device <b>2</b><i>e </i>according to the present embodiment can be configured to perform entropy coding by inputting information in another format as a symbol.</p><p id="p-0060" num="0059">As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the compression device <b>2</b><i>e </i>includes an interleaving unit <b>11</b>, a first coding unit <b>12</b>, a first packet generating unit <b>13</b>, a first packet request generating unit <b>14</b>, a second coding unit <b>15</b>, and a second packet generating unit <b>16</b>, a second packet request generating unit <b>17</b>, and a multiplexer <b>18</b>. Note that <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates only the configuration of the compression device <b>2</b><i>e </i>in which entropy coding is performed, and the configuration of the compression device <b>2</b><i>e </i>in which dictionary coding is performed is omitted.</p><p id="p-0061" num="0060">Here, in entropy coding performed in the compression device <b>2</b><i>e </i>of the present embodiment, the interleaved storage scheme is adopted in order to implement high-throughput entropy decoding (that is, decompression of compressed data) in the decompression device <b>2</b><i>f </i>to be described later. In this interleaved storage scheme, when coding is performed on the symbol string, a plurality of symbols included in the symbol string are distributed to a plurality of channels, a packet is generated from the result of coding in each of the channels (that is, a codeword), and a compressed stream containing the packet is output as compressed data.</p><p id="p-0062" num="0061">According to such an interleaved storage scheme, decoding is performed in parallel on a plurality of channels also in the decompression device <b>2</b><i>f </i>to be described later, and thus high-throughput entropy decoding can be implemented.</p><p id="p-0063" num="0062">The interleaving unit <b>11</b> inputs the symbol string and distributes the symbol string to a plurality of channels (that is, divides the symbol string into a plurality of channels). In this case, each of the symbols included in the symbol string is distributed to one of the channels.</p><p id="p-0064" num="0063">Here, it is assumed that the interleaving unit <b>11</b> distributes the symbol string to two channels (hereinafter, referred to as &#x201c;first channel&#x201d; and &#x201c;second channel&#x201d;). In the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the first coding unit <b>12</b>, the first packet generating unit <b>13</b>, and the first packet request generating unit <b>14</b> correspond to the first channel, and the second coding unit <b>15</b>, the second packet generating unit <b>16</b>, and the second packet request generating unit <b>17</b> correspond to the second channel.</p><p id="p-0065" num="0064">Note that in the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the symbol string in which the symbols S<b>0</b> to S<b>7</b> are arranged in order is input to the interleaving unit <b>11</b>, and the symbols S<b>0</b>, S<b>2</b>, S<b>4</b> and S<b>6</b> in the symbol string are distributed to the first channel, the symbols S<b>1</b>, S<b>3</b>, S<b>5</b> and S<b>7</b> are distributed to the second channel. Here, the even-numbered symbols in the symbol string are distributed to the first channel, and the odd-numbered symbols are distributed to the second channel, but the symbol string can be distributed according to another rule.</p><p id="p-0066" num="0065">Hereinafter, in the symbol string input to the interleaving unit <b>11</b>, a plurality of symbols distributed to the first channel are referred to as &#x201c;first sub-stream&#x201d;, and a plurality of symbols distributed to the second channel are referred to as &#x201c;second sub-stream&#x201d;.</p><p id="p-0067" num="0066">The first coding unit <b>12</b> inputs the first sub-stream distributed to the first channel, and performs entropy coding on each of the symbols constituting the first sub-stream. As a result, each of the symbols constituting the first sub-stream is converted to a codeword. Since entropy coding is variable length coding, the codewords converted from the symbols constituting the first sub-stream have different code lengths. The first coding unit <b>12</b> outputs the codewords converted from the symbols constituting the first sub-stream to the first packet generating unit <b>13</b>, and outputs the code lengths of the codewords to the first packet request generating unit <b>14</b>.</p><p id="p-0068" num="0067">The first packet generating unit <b>13</b> buffers the codewords output from the first coding unit <b>12</b> and generates packets including the buffered codewords. The first packet generating unit <b>13</b> outputs the generated packets to the multiplexer <b>18</b>.</p><p id="p-0069" num="0068">The first packet request generating unit <b>14</b> generates packet requests to arrange the packets generated by the first packet generating unit <b>13</b> in a compressed stream in a predetermined order, for example, based on the code length of each of the codewords output from the first coding unit <b>12</b>. Note that in a case where entropy decoding is performed in the first and second channels in the decompression device <b>2</b><i>f</i>, the first packet request generating unit <b>14</b> generates packet requests to arrange the packets in the acquisition order in response to the packet requests generated by a first packet request generating unit <b>22</b> in the compressed stream. The first packet request generating unit <b>14</b> outputs the generated packet requests to the multiplexer <b>18</b>.</p><p id="p-0070" num="0069">The second coding unit <b>15</b> inputs the second sub-stream distributed to the second channel, and performs entropy coding on each of the symbols constituting the second sub-stream. As a result, each of the symbols constituting the second sub-stream is converted to a codeword. Since entropy coding is variable length coding as described above, the codewords converted from the symbols constituting the second sub-stream have different code lengths. The second coding unit <b>15</b> outputs the codewords converted from the symbols constituting the second sub-stream to the second packet generating unit <b>16</b>, and outputs the code lengths of the codewords to the second packet request generating unit <b>17</b>.</p><p id="p-0071" num="0070">The second packet generating unit <b>16</b> buffers the codewords output from the second coding unit <b>15</b> and generates packets including the buffered codewords. The second packet generating unit <b>16</b> outputs the generated packets to the multiplexer <b>18</b>.</p><p id="p-0072" num="0071">The second packet request generating unit <b>17</b> generates packet requests to arrange the packets generated by the second packet generating unit <b>16</b> in the compressed stream in a predetermined order, for example, based on the code length of each of the codewords output from the second coding unit <b>15</b>. In a case where entropy decoding is performed in the first and second channels in the decompression device <b>2</b><i>f</i>, the second packet request generating unit <b>17</b> generates packet requests to arrange the packets in the acquisition order in response to the packet requests generated by the second packet request generating unit <b>25</b> in the compressed stream. The second packet request generating unit <b>17</b> outputs the generated packet requests to the multiplexer <b>18</b>.</p><p id="p-0073" num="0072">Note that the first channel (the first coding unit <b>12</b>, the first packet generating unit <b>13</b>, and the first packet request generating unit <b>14</b>) and the second channel (the second coding unit <b>15</b>, the second packet generating unit <b>16</b>, and the second packet request generating unit <b>17</b>) in the compression device <b>2</b><i>e </i>operate in parallel based on the same processing unit referred to as &#x201c;cycle&#x201d;.</p><p id="p-0074" num="0073">The multiplexer <b>18</b> selects the packets output from the first packet generating unit <b>13</b> based on the packet requests output from the first packet request generating unit <b>14</b>, selects the packets output from the second packet generating unit <b>16</b> based on the packet requests output from the second packet request generating unit <b>17</b>, and outputs the compressed stream in which the selected packets are sequentially arranged (that is, including the packets) as compressed data.</p><p id="p-0075" num="0074">Note that the compressed stream output from the multiplexer <b>18</b> is written to the NAND flash memory <b>3</b> after predetermined processes such as the error correction process and the randomization process are performed.</p><p id="p-0076" num="0075">As illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the decompression device <b>2</b><i>f </i>includes a demultiplexer <b>21</b>, the first packet request generating unit <b>22</b>, a first packet buffer <b>23</b>, a first decoding unit <b>24</b>, the second packet request generating unit <b>25</b>, a second packet buffer <b>26</b>, a second decoding unit <b>27</b>, and a deinterleaving unit <b>28</b>.</p><p id="p-0077" num="0076">Note that in a case where the compression device <b>2</b><i>e </i>compresses uncompressed data by the compression algorithm combining dictionary coding and entropy coding, the decompression device <b>2</b><i>f </i>has to perform entropy decoding on the compressed data and dictionary coding on the result of entropy decoding, but <figref idref="DRAWINGS">FIG. <b>2</b></figref> illustrates only the configuration of the decompression device <b>2</b><i>f </i>in which entropy decoding is performed, and the configuration in which dictionary decoding is omitted.</p><p id="p-0078" num="0077">For example, the demultiplexer <b>21</b> inputs a compressed stream (compressed data) after predetermined processes such as the error correction process and the randomization cancellation process are performed on the read data read from the NAND flash memory <b>3</b>. The demultiplexer <b>21</b> sequentially cuts out packets from the head of the input compressed stream, and outputs the cut out packets to the first channel and the second channel.</p><p id="p-0079" num="0078">Note that in the example illustrated in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, the first packet request generating unit <b>22</b>, the first packet buffer <b>23</b>, and the first decoding unit <b>24</b> correspond to the first channel, and the second packet request generating unit <b>25</b>, the second packet buffer <b>26</b>, and the second decoding unit <b>27</b> correspond to the second channel.</p><p id="p-0080" num="0079">The first packet request generating unit <b>22</b> generates packet requests based on the state of the first packet buffer <b>23</b> and the like. The first packet request generating unit <b>22</b> outputs the generated packet requests to the demultiplexer <b>21</b>.</p><p id="p-0081" num="0080">In this case, the packets output from the demultiplexer <b>21</b> in response to the packet requests generated by the first packet request generating unit <b>22</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0082" num="0081">The first decoding unit <b>24</b> performs entropy decoding on the packets (the codewords included in the packets) stored in the first packet buffer <b>23</b>. As a result, the codewords included in the packets are converted to symbols. The first decoding unit <b>24</b> outputs the symbols converted from the codewords included in the packets to the deinterleaving unit <b>28</b>.</p><p id="p-0083" num="0082">The second packet request generating unit <b>25</b> generates packet requests based on the state of the second packet buffer <b>26</b> and the like. The second packet request generating unit <b>25</b> outputs the generated packet requests to the demultiplexer <b>21</b>.</p><p id="p-0084" num="0083">In this case, the packets output from the demultiplexer <b>21</b> in response to the packet requests generated by the second packet request generating unit <b>25</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0085" num="0084">The second decoding unit <b>27</b> performs entropy decoding on the packets (the codewords included in the packets) stored in the second packet buffer <b>26</b>. As a result, the codewords included in the packets are converted to symbols. The second decoding unit <b>27</b> outputs the symbols converted from the codewords included in the packets to the deinterleaving unit <b>28</b>.</p><p id="p-0086" num="0085">Note that the first channel (the first packet request generating unit <b>22</b>, the first packet buffer <b>23</b>, and the first decoding unit <b>24</b>) and the second channel (the second packet request generating unit <b>25</b>, the second packet buffer <b>26</b>, and the second decoding unit <b>27</b>) in the decompression device <b>2</b><i>f </i>operate in parallel based on the same processing unit referred to as &#x201c;cycle&#x201d;.</p><p id="p-0087" num="0086">The deinterleaving unit <b>28</b> outputs a symbol string including the symbols output from the first decoding unit <b>24</b> and the symbols output from the second decoding unit <b>27</b>.</p><p id="p-0088" num="0087">Hereinafter, an example of an operation of a compression device and a decompression device according to a comparative example of the present embodiment will be described. Here, the compression device and the decompression device according to the comparative example of the present embodiment will be described as having the configuration similar to that of <figref idref="DRAWINGS">FIG. <b>2</b></figref> described above.</p><p id="p-0089" num="0088">Note, however, that in order to clearly distinguish the description of the compression device <b>2</b><i>e </i>according to the present embodiment and the description of the compression device according to the comparative example of the present embodiment, the interleaving unit, the first coding unit, the first packet generating unit, the first packet request generating unit, the second coding unit, the second packet generating unit, the second packet request generating unit, and the multiplexer, which are included in the compression device according to the comparative example of the present embodiment, are described as an interleaving unit <b>11</b>&#x2032;, a first coding unit <b>12</b>&#x2032;, a first packet generating unit <b>13</b>&#x2032;, a first packet request generating unit <b>14</b>&#x2032;, a second coding unit <b>15</b>&#x2032;, a second packet generating unit <b>16</b>&#x2032;, a second packet request generating unit <b>17</b>&#x2032;, and a multiplexer <b>18</b>&#x2032;, respectively for the sake of convenience.</p><p id="p-0090" num="0089">Similarly, the demultiplexer, the first packet request generating unit, the first packet buffer, the first decoding unit, the second packet request generating unit, the second packet buffer, the second decoding unit, and the deinterleaving unit included in the decompression device according to the comparative example of the present embodiment are described as a demultiplexer <b>21</b>&#x2032;, a first packet request generating unit <b>22</b>&#x2032;, a first packet buffer <b>23</b>&#x2032;, a first decoding unit <b>24</b>&#x2032;, a second packet request generating unit <b>25</b>&#x2032;, a second packet buffer <b>26</b>&#x2032;, a second decoding unit <b>27</b>&#x2032;, and a deinterleaving unit <b>28</b>&#x2032;, respectively for the sake of convenience.</p><p id="p-0091" num="0090">Further, the compression device and the decompression device according to the comparative example of the present embodiment are described as a compression device <b>2</b><i>e</i>&#x2032; and a decompression device <b>2</b><i>f</i>&#x2032; for the sake of convenience.</p><p id="p-0092" num="0091">First, it is assumed that a symbol string S<b>0</b> to S<b>7</b> is input to the interleaving unit <b>11</b>&#x2032;, and the symbol string S<b>0</b> to S<b>7</b> is divided into a first sub-stream (the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>) and a second sub-stream (the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>). In the following description, it is assumed that one symbol is represented by, for example, 16 bits.</p><p id="p-0093" num="0092">The first sub-stream divided by the interleaving unit <b>11</b>&#x2032; is distributed to a first channel (the first coding unit <b>12</b>&#x2032;), and the second sub-stream is distributed to a second channel (the second coding unit <b>15</b>&#x2032;).</p><p id="p-0094" num="0093">In the first channel, the first coding unit <b>12</b>&#x2032; inputs the first sub-stream distributed by the interleaving unit <b>11</b>&#x2032;, and converts each of a plurality of symbols constituting the first sub-stream into codewords.</p><p id="p-0095" num="0094">Here, <figref idref="DRAWINGS">FIG. <b>3</b></figref> illustrates an example of a plurality of codewords converted from the first sub-stream (a plurality of symbols constituting the first sub-stream). The example illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref> shows that the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b> constituting the first sub-stream are converted to codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032;, respectively.</p><p id="p-0096" num="0095">As described above, each symbol constituting the first sub-stream is represented by 16 bits, but the codeword S<b>0</b>&#x2032; converted from the symbol S<b>0</b> is assumed to be, for example, 5 bits. Similarly, it is assumed that the codeword S<b>2</b>&#x2032; converted from the symbol S<b>2</b> is, for example, 6 bits, the codeword S<b>4</b>&#x2032; converted from the symbol S<b>4</b> is, for example, 13 bits, and the codeword S<b>6</b>&#x2032; converted from the symbol S<b>6</b> is, for example, 14 bits.</p><p id="p-0097" num="0096">In the first channel, packets including a plurality of codewords converted from the first sub-stream are generated by the first packet generating unit <b>13</b>&#x2032;, and the packets are output to the multiplexer <b>18</b>&#x2032;, as described above.</p><p id="p-0098" num="0097">On the other hand, in the second channel, the second coding unit <b>15</b>&#x2032; inputs the second sub-stream distributed by the interleaving unit <b>11</b>&#x2032;, and converts each of a plurality of symbols constituting the second sub-stream to a codeword.</p><p id="p-0099" num="0098">Here, <figref idref="DRAWINGS">FIG. <b>4</b></figref> illustrates an example of a plurality of codewords converted from the second sub-stream (a plurality of symbols constituting the second sub-stream). The example illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref> shows that the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b> constituting the second sub-stream are converted to codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032;, respectively.</p><p id="p-0100" num="0099">As described above, each symbol constituting the second sub-stream is represented by 16 bits, but the codeword S<b>1</b>&#x2032; converted from the symbol S<b>1</b> is assumed to be, for example, 15 bits. Similarly, it is assumed that the codeword S<b>3</b>&#x2032; converted from the symbol S<b>3</b> is, for example, 10 bits, the codeword S<b>5</b>&#x2032; converted from the symbol S<b>5</b> is, for example, 14 bits, and the codeword S<b>7</b>&#x2032; converted from the symbol S<b>7</b> is, for example, 14 bits.</p><p id="p-0101" num="0100">In the second channel, packets including a plurality of codewords converted from the second sub-stream are generated by the second packet generating unit <b>16</b>&#x2032;, and the packets are output to the multiplexer <b>18</b>&#x2032;, as described above.</p><p id="p-0102" num="0101">Note that the first packet generating unit <b>13</b>&#x2032; and the second packet generating unit <b>16</b>&#x2032; described above are assumed to generate, for example, packets with a fixed length of 16 bits.</p><p id="p-0103" num="0102">Next, the multiplexer <b>18</b>&#x2032; selects packets generated by the first packet generating unit <b>13</b>&#x2032; and the second packet generating unit <b>16</b>&#x2032; in response to the packet requests generated by the first packet request generating unit <b>14</b>&#x2032; and the second packet request generating unit <b>17</b>&#x2032;, and generates a compressed stream in which the selected packets are sequentially arranged.</p><p id="p-0104" num="0103">Here, while entropy decoding is performed in parallel on the first and second channels also on the side of the decompression device <b>2</b><i>f</i>&#x2032; according to the comparative example of the present embodiment, as on the side of the compression device <b>2</b><i>e</i>&#x2032;, entropy decoding is performed on the packets (codewords included in the packets) sequentially stored in the first packet buffer <b>23</b>&#x2032; and the second packet buffer <b>26</b>&#x2032; in response to the packet requests generated by the first packet request generating unit <b>22</b>&#x2032; and the packet requests generated by the second packet request generating unit <b>25</b>&#x2032; in the decompression device <b>2</b><i>f&#x2032;. </i></p><p id="p-0105" num="0104">Consequently, the first packet request generating unit <b>14</b>&#x2032; and the second packet request generating unit <b>17</b>&#x2032; included in the compression device <b>2</b><i>e</i>&#x2032; generate packet requests so as to reproduce the operation of the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032; that generate the packet request (that is, so as to reproduce the packet requests generated by the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032;). The first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032; included in the decompression device <b>2</b><i>f</i>&#x2032; generate packet requests based on the state of the first packet buffer <b>23</b>&#x2032; and the second packet buffer <b>26</b>&#x2032; at the time of performing entropy decoding.</p><p id="p-0106" num="0105">As a result, the multiplexer <b>18</b>&#x2032; can generate a compressed stream in which the packets are arranged in the acquisition order in the first and second channels in the decompression device <b>2</b><i>f</i>&#x2032;. In this case, a plurality of codewords (packets including the codewords) converted from the first sub-stream in the first channel of the compression device <b>2</b><i>e</i>&#x2032; are subjected to entropy decoding in the first channel of the decompression device <b>2</b><i>f</i>&#x2032;, and a plurality of codewords (packets including the codewords) converted from the second sub-stream in the second channel of the compression device <b>2</b><i>e </i>are subjected to entropy decoding in the second channel of the decompression device <b>2</b><i>f</i>&#x2032;, so that the decompression device <b>2</b><i>f</i>&#x2032; can obtain the correct symbol string from the compressed stream.</p><p id="p-0107" num="0106">Hereinafter, the outline of an operation of the first packet request generating unit <b>22</b>&#x2032; included in the decompression device <b>2</b><i>f</i>&#x2032; (that is, the first channel in the decompression device <b>2</b><i>f</i>&#x2032;) whose operation is reproduced by the first packet request generating unit <b>14</b> included in the compression device <b>2</b><i>e</i>&#x2032; will be described.</p><p id="p-0108" num="0107">The first channel in the decompression device <b>2</b><i>f</i>&#x2032; generates a packet request (requests a packet from the demultiplexer <b>21</b>&#x2032;) so that the packet stored in the first packet buffer <b>23</b>&#x2032; is not depleted and performs entropy decoding on the packet. Specifically, the first channel in the decompression device <b>2</b><i>f</i>&#x2032; is assumed to generate a packet request in a case where the remaining amount of packets (packets data) stored in the first packet buffer <b>23</b>&#x2032; is less than the maximum code length in entropy coding, and perform entropy decoding on the codewords included in the packets in a case where the remaining amount of packets is more than or equal to the maximum code length. Such an operation in the first channel is performed every cycle, but by performing entropy decoding in a case where the remaining amount of packets is more than or equal to the maximum code length, for example, even if the code length of the codeword included in the packet is the maximum code length, decoding can be efficiently performed on the codeword in a single cycle.</p><p id="p-0109" num="0108"><figref idref="DRAWINGS">FIG. <b>5</b></figref> illustrates a specific example of an operation of the first channel in the decompression device <b>2</b><i>f</i>&#x2032;. Here, it is assumed that each packet included in the compressed stream has a fixed length of 16 bits, and the first packet buffer <b>23</b>&#x2032; is empty (that is, the remaining amount of packets is zero) when the process of the first channel in the decompression device <b>2</b><i>f</i>&#x2032; starts. Further, it is assumed that each symbol is represented by 16 bits, and the maximum code length in entropy coding is 16 bits, as described above.</p><p id="p-0110" num="0109">First, as described above, the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is zero, which is less than the maximum code length, that is, 16 bits. For this reason, the first packet request generating unit <b>22</b>&#x2032; generates a packet request in a cycle C<b>0</b> and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0111" num="0110">In this case, in a cycle C<b>1</b> following the cycle C<b>0</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the first packet request generating unit <b>22</b>&#x2032; in the cycle C<b>0</b> (that is, the packet cut out from the compressed stream) is stored in the first packet buffer <b>23</b>&#x2032;.</p><p id="p-0112" num="0111">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 16 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b>&#x2032; to convert the codeword to a symbol. In a case where the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b> are converted to the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; in the first channel of the compression device <b>2</b><i>e</i>&#x2032; as described in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the first decoding unit <b>24</b>&#x2032; converts the codeword S<b>0</b>&#x2032; included in the packet stored in the first packet buffer <b>23</b>&#x2032; in cycle C<b>1</b> to the symbol S<b>0</b>. In this way, it is assumed that one codeword can be converted to one symbol in one cycle on each channel in the decompression device <b>2</b><i>f&#x2032;. </i></p><p id="p-0113" num="0112">Since the codeword S<b>0</b>&#x2032; converted to the symbol S<b>0</b> is 5 bits, 5 bits are processed out of the packets (16 bits) stored in the first packet buffer <b>23</b>&#x2032;, and the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 11 bits.</p><p id="p-0114" num="0113">In this case, since the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is less than the maximum code length, that is, 16 bits, the first packet request generating unit <b>22</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0115" num="0114">In a cycle C<b>2</b> following the cycle C<b>1</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the first packet request generating unit <b>22</b>&#x2032; in the cycle C<b>1</b> is stored in the first packet buffer <b>23</b>&#x2032;.</p><p id="p-0116" num="0115">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 27 bits (11 bits, which is the remaining amount of packets in the cycle C<b>1</b>+16 bits newly stored in the first packet buffer <b>23</b>&#x2032;), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b>&#x2032; to convert the codeword to a symbol. In this case, the codeword S<b>2</b>&#x2032; following the codeword S<b>0</b>&#x2032; converted to the symbol S<b>0</b> in the cycle C<b>1</b> described above is converted to the symbol S<b>2</b>. Since the codeword S<b>2</b>&#x2032; is 6 bits, 6 bits are processed out of the remaining amount of packets (27 bits) stored in the first packet buffer <b>23</b>&#x2032;, and the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 21 bits.</p><p id="p-0117" num="0116">In this case, since the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is more than or equal to the maximum code length, that is, 16 bits, the first packet request generating unit <b>22</b>&#x2032; does not generate a packet request in the cycle C<b>2</b>.</p><p id="p-0118" num="0117">In a cycle C<b>3</b> following the cycle C<b>2</b>, the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 21 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b>&#x2032; to convert the codeword to a symbol. In this case, the codeword S<b>4</b>&#x2032; following the codeword S<b>2</b>&#x2032; converted to the symbol S<b>2</b> in the cycle C<b>2</b> described above is converted to the symbol S<b>4</b>. Since the codeword S<b>4</b>&#x2032; is 13 bits, 13 bits are processed out of the remaining amount of packets (21 bits) stored in the first packet buffer <b>23</b>&#x2032;, and the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 8 bits.</p><p id="p-0119" num="0118">In this case, since the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is less than the maximum code length, that is, 16 bits, the first packet request generating unit <b>22</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0120" num="0119">In a cycle C<b>4</b> following the cycle C<b>3</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the first packet request generating unit <b>22</b>&#x2032; in the cycle C<b>3</b> is stored in the first packet buffer <b>23</b>&#x2032;.</p><p id="p-0121" num="0120">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 24 bits (8 bits, which is the remaining amount of packets in the cycle C<b>3</b>+16 bits newly stored in the first packet buffer <b>23</b>&#x2032;), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b>&#x2032; to convert the codeword to a symbol. In this case, the codeword S<b>6</b>&#x2032; following the codeword S<b>4</b>&#x2032; converted to the symbol S<b>4</b> in the cycle C<b>3</b> described above is converted to the symbol S<b>6</b>. Since the codeword S<b>6</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (24 bits) stored in the first packet buffer <b>23</b>&#x2032;, and the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is 10 bits.</p><p id="p-0122" num="0121">In this case, since the remaining amount of packets stored in the first packet buffer <b>23</b>&#x2032; is less than the maximum code length, that is, 16 bits, the first packet request generating unit <b>22</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0123" num="0122">It is assumed in the decompression device <b>2</b><i>f</i>&#x2032; according to the comparative example of the present embodiment that the first packet request generating unit <b>22</b>&#x2032; generates a packet request as described above, and thus entropy decoding is sequentially performed on the packets (a plurality of codewords included in the packets) included in the compressed stream output from the compression device <b>2</b><i>e&#x2032;. </i></p><p id="p-0124" num="0123">Here, although the operation of the first packet request generating unit <b>22</b>&#x2032; included in the decompression device <b>2</b><i>f</i>&#x2032; (the first channel in the decompression device <b>2</b><i>f</i>&#x2032;) has been described, a similar operation is performed by the second packet request generating unit <b>25</b>&#x2032; included in the decompression device <b>2</b><i>f</i>&#x2032; (that is, the second channel in the decompression device <b>2</b><i>f</i>&#x2032;).</p><p id="p-0125" num="0124">The second channel in the decompression device <b>2</b><i>f</i>&#x2032; generates a packet request (requests a packet from the demultiplexer <b>21</b>&#x2032;) so that the packet stored in the second packet buffer <b>26</b>&#x2032; is not depleted and performs entropy decoding on the packet. Specifically, the second channel in the decompression device <b>2</b><i>f</i>&#x2032; is assumed to generate a packet request in a case where the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is less than the maximum code length in entropy coding, and perform entropy decoding on the codewords included in the packets in a case where the remaining amount of packets is more than or equal to the maximum code length. Note that such an operation in the second channel is performed every cycle as in the case of the first channel described above.</p><p id="p-0126" num="0125"><figref idref="DRAWINGS">FIG. <b>6</b></figref> illustrates a specific example of an operation of the second channel in the decompression device <b>2</b><i>f</i>&#x2032;. Here, it is assumed that each packet included in the compressed stream has a fixed length of 16 bits, and the second packet buffer <b>26</b>&#x2032; is empty (that is, the remaining amount of packets is zero) when the process of the second channel in the decompression device <b>2</b><i>f</i>&#x2032; starts. Further, it is assumed that the maximum code length in entropy coding is 16 bits as described above.</p><p id="p-0127" num="0126">First, as described above, the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is zero, which is less than the maximum code length, that is, 16 bits. For this reason, the second packet request generating unit <b>25</b>&#x2032; generates a packet request in the cycle C<b>0</b> and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0128" num="0127">In this case, in the cycle C<b>1</b> following the cycle C<b>0</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the second packet request generating unit <b>25</b>&#x2032; in the cycle C<b>0</b> (that is, the packet cut out from the compressed stream) is stored in the second packet buffer <b>26</b>&#x2032;.</p><p id="p-0129" num="0128">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 16 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b>&#x2032; to convert the codeword to a symbol. In a case where the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b> are converted to the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; in the second channel of the compression device <b>2</b><i>e</i>&#x2032; as described in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the second decoding unit <b>27</b>&#x2032; converts the codeword S<b>1</b>&#x2032; included in the packet stored in the second packet buffer <b>26</b>&#x2032; in cycle C<b>1</b> in the symbol S<b>1</b>. Since the codeword S<b>1</b>&#x2032; converted to the symbol S<b>1</b> is 15 bits, 15 bits are processed out of the packets (16 bits) stored in the second packet buffer <b>26</b>&#x2032;, and the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 1 bit.</p><p id="p-0130" num="0129">In this case, since the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is less than the maximum code length, that is, 16 bits, the second packet request generating unit <b>25</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0131" num="0130">In the cycle C<b>2</b> following the cycle C<b>1</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the second packet request generating unit <b>25</b>&#x2032; in the cycle C<b>1</b> is stored in the second packet buffer <b>26</b>&#x2032;.</p><p id="p-0132" num="0131">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 17 bits (1 bit, which is the remaining amount of packets in the cycle C<b>1</b>+16 bits newly stored in the second packet buffer <b>26</b>&#x2032;), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b>&#x2032; to convert the codeword to a symbol. In this case, the codeword S<b>3</b>&#x2032; following the codeword S<b>1</b>&#x2032; converted to the symbol S<b>1</b> in the cycle C<b>1</b> described above is converted to the symbol S<b>3</b>. Since the codeword S<b>3</b>&#x2032; is 10 bits, 10 bits are processed out of the remaining amount of packets (17 bits) stored in the second packet buffer <b>26</b>&#x2032;, and the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 7 bits.</p><p id="p-0133" num="0132">In this case, since the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is less than the maximum code length, that is, 16 bits, the second packet request generating unit <b>25</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0134" num="0133">In the cycle C<b>3</b> following the cycle C<b>2</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the second packet request generating unit <b>25</b>&#x2032; in the cycle C<b>2</b> is stored in the second packet buffer <b>26</b>&#x2032;.</p><p id="p-0135" num="0134">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 23 bits (7 bits, which is the remaining amount of packets in the cycle C<b>2</b>+16 bits newly stored in the second packet buffer <b>26</b>&#x2032;), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b>&#x2032; to convert the codeword to a symbol. In this case, the codeword S<b>5</b>&#x2032; following the codeword S<b>3</b>&#x2032; converted to the symbol S<b>3</b> in the cycle C<b>2</b> described above is converted to the symbol S<b>5</b>. Since the codeword S<b>5</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (23 bits) stored in the second packet buffer <b>26</b>&#x2032;, and the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 9 bits.</p><p id="p-0136" num="0135">In this case, since the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is less than the maximum code length, that is, 16 bits, the second packet request generating unit <b>25</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0137" num="0136">In the cycle C<b>4</b> following the cycle C<b>3</b>, the packet output from the demultiplexer <b>21</b>&#x2032; in response to the packet request output from the second packet request generating unit <b>25</b>&#x2032; in the cycle C<b>3</b> is stored in the second packet buffer <b>26</b>&#x2032;.</p><p id="p-0138" num="0137">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 25 bits (9 bits, which is the remaining amount of packets in the cycle C<b>3</b>+16 bits newly stored in the second packet buffer <b>26</b>&#x2032;), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b>&#x2032; performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b>&#x2032; to convert the codeword to a symbol. In this case, the codeword S<b>7</b>&#x2032; following the codeword S<b>5</b>&#x2032; converted to the symbol S<b>5</b> in the cycle C<b>3</b> described above is converted to the symbol S<b>7</b>. Since the codeword S<b>7</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (25 bits) stored in the second packet buffer <b>26</b>&#x2032;, and the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is 11 bits.</p><p id="p-0139" num="0138">In this case, since the remaining amount of packets stored in the second packet buffer <b>26</b>&#x2032; is less than the maximum code length, that is, 16 bits, the second packet request generating unit <b>25</b>&#x2032; generates a packet request and outputs the packet request to the demultiplexer <b>21</b>&#x2032;.</p><p id="p-0140" num="0139">It is assumed in the decompression device <b>2</b><i>f</i>&#x2032; according to the comparative example of the present embodiment that the second packet request generating unit <b>25</b>&#x2032; generates a packet request as described above, and thus entropy decoding is sequentially performed on the packets (a plurality of codewords included in the packets) included in the compressed stream output from the compression device <b>2</b><i>e&#x2032;. </i></p><p id="p-0141" num="0140">Here, in the comparative example of the present embodiment, entropy decoding is performed on the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; in the first channel of the decompression device <b>2</b><i>f</i>&#x2032;, and entropy decoding is performed on the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; in the second channel of the decompression device <b>2</b><i>f</i>&#x2032;, but in order to implement such an operation, the packets including the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; (that is, the packets generated in the first channel of the compression device <b>2</b><i>e</i>&#x2032;) need to be output from the demultiplexer <b>21</b>&#x2032; to the first channel (the first packet buffer <b>23</b>&#x2032;), and the packets including the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; (that is, the packets generated in the second channel of the compression device <b>2</b><i>e</i>&#x2032;) need to be output from the demultiplexer <b>21</b>&#x2032; to the second channel (the second packet buffer <b>26</b>&#x2032;).</p><p id="p-0142" num="0141">However, the demultiplexer <b>21</b>&#x2032; does not know whether each of the packets included in the compressed stream is a packet generated in the first channel or a packet generated in the second channel in the compression device <b>2</b><i>e</i>&#x2032;, and is configured to output the packets cut out from the compressed stream to the first and second channels in response to the packet requests output from the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032;.</p><p id="p-0143" num="0142">Consequently, as described above, in order to process the packet generated by the first channel in the compression device <b>2</b><i>e</i>&#x2032; in the first channel of the decompression device <b>2</b><i>f</i>&#x2032; and the packet generated by the second channel in the compression device <b>2</b><i>e</i>&#x2032; in the second channel of the decompression device <b>2</b><i>f</i>&#x2032;, it is preferable for the compression device <b>2</b><i>e</i>&#x2032; (the multiplexer <b>18</b>&#x2032;) to generate a compressed stream in which the order of the packets processed in the first and second channels of the decompression device <b>2</b><i>f</i>&#x2032; are took into account (that is, a compressed stream in which packets are arranged in the order in which the first and second channels of the decompression device <b>2</b><i>f</i>&#x2032; process the packets). This makes it possible to implement efficient entropy decoding in the decompression device <b>2</b><i>f&#x2032;. </i></p><p id="p-0144" num="0143">In this case, according to the comparative example of the present embodiment, the first packet request generating unit <b>14</b>&#x2032; and the second packet request generating unit <b>17</b>&#x2032; included in the compression device <b>2</b><i>e</i>&#x2032; generate packet requests so as to reproduce the operation of the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032; (that is, the packet requests generated by the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032;) by simulating the state of the first packet buffer <b>23</b>&#x2032; and the second packet buffer <b>26</b>&#x2032; included in the decompression device <b>2</b><i>f&#x2032;. </i></p><p id="p-0145" num="0144">Here, <figref idref="DRAWINGS">FIG. <b>7</b></figref> is a diagram for explaining the outline of an operation of the first packet request generating unit <b>14</b>&#x2032;, the second packet request generating unit <b>17</b>&#x2032;, and the multiplexer <b>18</b>&#x2032; included in the compression device <b>2</b><i>e</i>&#x2032; according to the comparative example of the present embodiment.</p><p id="p-0146" num="0145">In a case where the operation of the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032; included in the decompression device <b>2</b><i>f</i>&#x2032; is reproduced, as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, the first packet request generating unit <b>14</b>&#x2032; operates to generate a packet request in the cycles C<b>0</b>, C<b>1</b>, C<b>3</b>, and C<b>4</b>. On the other hand, the second packet request generating unit <b>17</b>&#x2032; operates to generate a packet request in the cycles C<b>0</b> to C<b>4</b>.</p><p id="p-0147" num="0146">When packet requests are generated in the same cycle, assuming that the packet is preferentially output to the first channel (the first packet buffer <b>23</b>&#x2032;), in the case of the packet requests generated by the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032;, the demultiplexer <b>21</b>&#x2032; outputs packets cut out from the compressed stream in the order of the first channel, the second channel, the first channel, the second channel, the second channel, the first channel, the second channel . . . .</p><p id="p-0148" num="0147">As a result, the multiplexer <b>18</b>&#x2032; included in the compression device <b>2</b><i>e</i>&#x2032; outputs a compressed stream in which the packets A<b>1</b>&#x2032;, B<b>1</b>&#x2032;, A<b>2</b>&#x2032;, B<b>2</b>&#x2032;, B<b>3</b>&#x2032;, A<b>3</b>&#x2032;, and B<b>4</b>&#x2032; are arranged in order as illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref> by outputting the packet requests obtained by reproducing the packet requests generated by the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032; included in the decompression device <b>2</b><i>f</i>&#x2032; from the first packet request generating unit <b>14</b>&#x2032; and the second packet request generating unit <b>17</b>&#x2032; included in the compression device <b>2</b><i>e&#x2032;. </i></p><p id="p-0149" num="0148">Note that the packets A<b>1</b>&#x2032; to A<b>3</b>&#x2032; are packets including the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; converted from the first sub-stream in the first channel of the compression device <b>2</b><i>e</i>&#x2032; (that is, packets generated by the first packet generating unit <b>13</b>&#x2032;), whereas the packets B<b>1</b>&#x2032; to B<b>4</b>&#x2032; are packets including the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; converted from the second sub-stream in the second channel of the compression device <b>2</b><i>e</i>&#x2032; (that is, packets generated by the second packet generating unit <b>16</b>&#x2032;).</p><p id="p-0150" num="0149">In a case where such a compressed stream is input to the decompression device <b>2</b><i>f</i>&#x2032;, as described above, in response to the packet requests generated by the first packet request generating unit <b>22</b>&#x2032; and the second packet request generating unit <b>25</b>&#x2032;, the packets A<b>1</b>&#x2032; to A<b>3</b>&#x2032; are output from the demultiplexer <b>21</b>&#x2032; to the first channel, and the packets B<b>1</b>&#x2032; to B<b>4</b>&#x2032; are output from the demultiplexer <b>21</b>&#x2032; to the second channel. As a result, in the first channel (the first decoding unit <b>24</b>&#x2032;) of the decompression device <b>2</b><i>f</i>&#x2032;, the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; included in the packets A<b>1</b>&#x2032; to A<b>3</b>&#x2032; are converted to the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>.</p><p id="p-0151" num="0150">Similarly, in the second channel (the second decoding unit <b>27</b>&#x2032;) of the decompression device <b>2</b><i>f</i>&#x2032;, the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; included in the packets B<b>1</b>&#x2032; to B<b>4</b>&#x2032; are converted to the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>.</p><p id="p-0152" num="0151">Note that the symbols obtained by performing entropy decoding in the first and second channels of the decompression device <b>2</b><i>f</i>&#x2032; as described above are integrated in the deinterleaving unit <b>28</b>&#x2032;. As a result, the deinterleaving unit <b>28</b>&#x2032; outputs the symbol string S<b>0</b> to S<b>7</b>.</p><p id="p-0153" num="0152">Meanwhile, in a case where the size of each packet included in the compressed stream is a fixed length of 16 bits, 6 bits out of the 16 bits of the packet A<b>3</b>&#x2032; generated in the first channel of the compression device <b>2</b><i>e</i>&#x2032; correspond to codewords, and all the 16 bits cannot be filled with codewords. In this case, padding data (unnecessary data) is inserted into the remaining 10 bits of the packet A<b>3</b>&#x2032;. Similarly, 5 bits out of the 16 bits of the packet B<b>4</b>&#x2032; generated in the second channel of the compression device <b>2</b><i>e</i>&#x2032; correspond to codewords, and all the 16 bits cannot be filled with codewords. In this case, padding data is inserted into the remaining 11 bits of the packet B<b>4</b>&#x2032;.</p><p id="p-0154" num="0153">In this case, the padding data occupies 21 bits of the amount of data (16 bits&#xd7;7=112 bits) of the compressed stream in which seven packets A<b>1</b>&#x2032; to A<b>3</b>&#x2032; and B<b>1</b>&#x2032; to B<b>4</b>&#x2032; are arranged.</p><p id="p-0155" num="0154">In a case where entropy coding using the interleaved storage scheme is performed as described above, padding data may be added to the packets included in the compressed stream, and the padding data causes a decrease in compression efficiency.</p><p id="p-0156" num="0155">Consequently, the present embodiment has a configuration of reducing the padding data (the amount of padding data) described above and improving the compression efficiency.</p><p id="p-0157" num="0156">Hereinafter, an example of an operation of the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>according to the present embodiment will be described. Here, the difference from the operation of the compression device <b>2</b><i>e</i>&#x2032; and the decompression device <b>2</b><i>f</i>&#x2032; according to the comparative example of the present embodiment described above will be mainly described.</p><p id="p-0158" num="0157">First, as in the comparative example of the present embodiment, it is assumed that the symbol string S<b>0</b> to S<b>7</b> is input to the interleaving unit <b>11</b>, and the symbol string S<b>0</b> to S<b>7</b> is distributed to the first sub-stream (the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>) and to the second sub-stream (the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>). Furthermore, it is assumed that as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the first sub-stream is converted to the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; by the first coding unit <b>12</b>, and the second sub-stream is converted to the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; by the second coding unit <b>15</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0159" num="0158">Here, the present embodiment is different from the comparative example of the present embodiment in that the compressed stream including packets with a fixed length of 16 bits is output from the compression device <b>2</b><i>e</i>&#x2032; in the comparative example of the present embodiment, but the compressed stream including packets with a variable length is output from the compression device <b>2</b><i>e </i>in the present embodiment.</p><p id="p-0160" num="0159"><figref idref="DRAWINGS">FIG. <b>8</b></figref> is a diagram illustrating the outline of variable length packets included in a compressed stream output from the compression device <b>2</b><i>e </i>in the present embodiment. The sizes of the variable length packets included in the compressed stream in the present embodiment are dynamically determined (selected) from, for example, 8 bits and 16 bits. The sizes of the variable length packets, the 8 bits and 16 bits, can be predetermined from, for example, the maximum code length in entropy coding, but the sizes of the variable length packets can be other than the 8 bits and 16 bits, or can be determined from three or more sizes.</p><p id="p-0161" num="0160">In this case, as in the comparative example of the present embodiment, the first packet request generating unit <b>14</b> and the second packet request generating unit <b>17</b> operate to reproduce the operation of the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> by simulating the state of the first packet buffer <b>23</b> and the second packet buffer <b>26</b> included in the decompression device <b>2</b><i>f</i>, and the packet requests includes the sizes of the variable length packets (for example, 8 bits or 16 bits).</p><p id="p-0162" num="0161">Although details will be described later, in the case of the configuration in which the compressed stream including 8-bit or 16-bit variable length packets is output from the compression device <b>2</b><i>e </i>as described above, by appropriately determining the size of the variable length packets, the 8-bit portion of the padding data illustrated in <figref idref="DRAWINGS">FIG. <b>8</b></figref> corresponding to each of the first and second channels (that is, the padding data inserted in the packets A<b>3</b>&#x2032; and B<b>4</b>&#x2032; illustrated in <figref idref="DRAWINGS">FIG. <b>7</b></figref>), the portion being filled with the padding data, can be removed.</p><p id="p-0163" num="0162">Hereinafter, the outline of an operation of the first packet request generating unit <b>22</b> (the first channel in the decompression device <b>2</b><i>f</i>) whose operation is reproduced by the first packet request generating unit <b>14</b> in the present embodiment will be described.</p><p id="p-0164" num="0163">As in the comparative example of the present embodiment, the first channel in the decompression device <b>2</b><i>f </i>generates a packet request (requests a packet from the demultiplexer <b>21</b>) so that the packet stored in the first packet buffer <b>23</b> is not depleted and performs entropy decoding on the packet. Specifically, the first channel in the decompression device <b>2</b><i>f </i>is assumed to generate a packet request in a case where the remaining amount of packets stored in the first packet buffer <b>23</b> is less than the maximum code length (16 bits) in entropy coding, and perform entropy decoding on the codewords included in the packets in a case where the remaining amount of packets is more than or equal to the maximum code length. However, it is assumed in the present embodiment that in a case where the remaining amount of packets is less than 8 bits, a 16-bit packet is requested, and in a case where the remaining amount of packets is more than or equal to 8 bits and less than 16 bits, an 8-bit packet is requested. That is, in the present embodiment, the size of the variable length packet is determined based on the remaining amount of packets stored in the first packet buffer <b>23</b> in a manner that the remaining amount of packets is more than or equal to the maximum code length in entropy coding.</p><p id="p-0165" num="0164"><figref idref="DRAWINGS">FIG. <b>9</b></figref> illustrates a specific example of an operation of the first channel in the decompression device <b>2</b><i>f</i>. Here, it is assumed that the compressed stream includes 8-bit and 16-bit variable length packets, and the first packet buffer <b>23</b> is empty (that is, the remaining amount of packets is zero) when the process of the first channel starts.</p><p id="p-0166" num="0165">First, the remaining amount of packets stored in the first packet buffer <b>23</b> is zero, which is less than 8 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 16 bits as the size of the variable length packet in the cycle C<b>0</b> and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0167" num="0166">In this case, in the cycle C<b>1</b> following the cycle C<b>0</b>, the 16-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the first packet request generating unit <b>22</b> in the cycle C<b>0</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0168" num="0167">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b> is 16 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In a case where the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b> are converted to the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; in the first channel of the compression device <b>2</b><i>e </i>as described above, the first decoding unit <b>24</b> converts the codeword S<b>0</b>&#x2032; included in the packet stored in the first packet buffer <b>23</b> to the symbol S<b>0</b>. Since the codeword S<b>0</b>&#x2032; is 5 bits, 5 bits are processed out of the packets (16 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 11 bits.</p><p id="p-0169" num="0168">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is more than or equal to 8 bits and less than 16 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0170" num="0169">In the cycle C<b>2</b> following the cycle C<b>1</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the first packet request generating unit <b>22</b> in the cycle C<b>1</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0171" num="0170">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b> is 19 bits (11 bits, which is the remaining amount of packets in the cycle C<b>1</b>+8 bits newly stored in the first packet buffer <b>23</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In this case, the codeword S<b>2</b>&#x2032; following the codeword S<b>0</b>&#x2032; converted to the symbol S<b>0</b> in the cycle C<b>1</b> described above is converted to the symbol S<b>2</b>. Since the codeword S<b>2</b>&#x2032; is 6 bits, 6 bits are processed out of the remaining amount of packets (19 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 13 bits.</p><p id="p-0172" num="0171">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is more than or equal to 8 bits and less than 16 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0173" num="0172">In the cycle C<b>3</b> following the cycle C<b>2</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the first packet request generating unit <b>22</b> in the cycle C<b>2</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0174" num="0173">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b> is 21 bits (13 bits, which is the remaining amount of packets in the cycle C<b>2</b>+8 bits newly stored in the first packet buffer <b>23</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In this case, the codeword S<b>4</b>&#x2032; following the codeword S<b>2</b>&#x2032; converted to the symbol S<b>2</b> in the cycle C<b>2</b> described above is converted to the symbol S<b>4</b>. Since the codeword S<b>4</b>&#x2032; is 13 bits, 13 bits are processed out of the remaining amount of packets (21 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 8 bits.</p><p id="p-0175" num="0174">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is more than or equal to 8 bits and less than 16 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0176" num="0175">In the cycle C<b>4</b> following the cycle C<b>3</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the first packet request generating unit <b>22</b> in the cycle C<b>3</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0177" num="0176">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b> is 16 bits (8 bits, which is the remaining amount of packets in the cycle C<b>3</b>+8 bits newly stored in the first packet buffer <b>23</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In this case, the codeword S<b>6</b>&#x2032; following the codeword S<b>4</b>&#x2032; converted to the symbol S<b>4</b> in the cycle C<b>3</b> described above is converted to the symbol S<b>6</b>. Since the codeword S<b>6</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (16 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 2 bits.</p><p id="p-0178" num="0177">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is less than 8 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0179" num="0178">It is assumed in the decompression device <b>2</b><i>f </i>according to the present embodiment that the first packet request generating unit <b>22</b> generates a packet request as described above, and thus entropy decoding is sequentially performed on the packets (a plurality of codewords included in the packets) included in the compressed stream output from the compression device <b>2</b><i>e. </i></p><p id="p-0180" num="0179">Here, although the operation of the first packet request generating unit <b>22</b> included in the decompression device <b>2</b><i>f </i>(the first channel in the decompression device <b>2</b><i>f</i>) has been described, a similar operation is performed by the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>(that is, the second channel in the decompression device <b>2</b><i>f</i>).</p><p id="p-0181" num="0180">The second channel in the decompression device <b>2</b><i>f </i>generates a packet request (requests a packet from the demultiplexer <b>21</b>) so that the packet stored in the second packet buffer <b>26</b> is not depleted and performs entropy decoding on the packet. Specifically, in a case where the remaining amount of packets stored in the second packet buffer <b>26</b> is less than 8 bits, a 16-bit packet is requested, and in a case where the remaining amount of packets is more than or equal to 8 bits and less than 16 bits, an 8-bit packet is requested. Furthermore, entropy decoding is performed on the codeword included in the packet in a case where the remaining amount of packets stored in the second packet buffer <b>26</b> is more than or equal to 16 bits.</p><p id="p-0182" num="0181"><figref idref="DRAWINGS">FIG. <b>10</b></figref> illustrates a specific example of an operation of the second channel in the decompression device <b>2</b><i>f</i>. It is assumed that the compressed stream includes 8-bit and 16-bit variable length packets, and the second packet buffer <b>26</b> is empty (that is, the remaining amount of packets is zero) when the process of the second channel starts, as described above.</p><p id="p-0183" num="0182">First, as described above, the remaining amount of packets stored in the second packet buffer <b>26</b> is zero, which is less than 8 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet in the cycle C<b>0</b> and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0184" num="0183">In this case, in the cycle C<b>1</b> following the cycle C<b>0</b>, the 16-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>0</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0185" num="0184">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 16 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In a case where the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b> are converted to the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; in the second channel of the compression device <b>2</b><i>e </i>as described above, the second decoding unit <b>27</b> converts the codeword S<b>1</b>&#x2032; included in the packet stored in the second packet buffer <b>26</b> to the symbol S<b>1</b>. Since the codeword S<b>1</b>&#x2032; is 15 bits, 15 bits are processed out of the packets (16 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 1 bit.</p><p id="p-0186" num="0185">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than 8 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0187" num="0186">In the cycle C<b>2</b> following the cycle C<b>1</b>, the 16-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>1</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0188" num="0187">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 17 bits (1 bit, which is the remaining amount of packets in the cycle C<b>1</b>+16 bits newly stored in the second packet buffer <b>26</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In this case, the codeword S<b>3</b>&#x2032; following the codeword S<b>1</b>&#x2032; converted to the symbol S<b>1</b> in the cycle C<b>1</b> described above is converted to the symbol S<b>3</b>. Since the codeword S<b>3</b>&#x2032; is 10 bits, 10 bits are processed out of the remaining amount of packets (17 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 7 bits.</p><p id="p-0189" num="0188">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than 8 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0190" num="0189">In the cycle C<b>3</b> following the cycle C<b>2</b>, the 16-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>2</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0191" num="0190">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 23 bits (7 bits, which is the remaining amount of packets in the cycle C<b>2</b>+16 bits newly stored in the second packet buffer <b>26</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In this case, the codeword S<b>5</b>&#x2032; following the codeword S<b>3</b>&#x2032; converted to the symbol S<b>3</b> in the cycle C<b>2</b> described above is converted to the symbol S<b>5</b>. Since the codeword S<b>5</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (23 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 9 bits.</p><p id="p-0192" num="0191">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is more than or equal to 8 bits and less than 16 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0193" num="0192">In the cycle C<b>4</b> following the cycle C<b>3</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>3</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0194" num="0193">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 17 bits (9 bits, which is the remaining amount of packets in the cycle C<b>3</b>+8 bits newly stored in the second packet buffer <b>26</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In this case, the codeword S<b>7</b>&#x2032; following the codeword S<b>5</b>&#x2032; converted to the symbol S<b>5</b> in the cycle C<b>3</b> described above is converted to the symbol S<b>7</b>. Since the codeword S<b>7</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (17 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 3 bits.</p><p id="p-0195" num="0194">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than 8 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0196" num="0195">It is assumed in the decompression device <b>2</b><i>f </i>according to the present embodiment that the second packet request generating unit <b>25</b> generates a packet request as described above, and thus entropy decoding is sequentially performed on the packets (a plurality of codewords included in the packets) included in the compressed stream output from the compression device <b>2</b><i>e. </i></p><p id="p-0197" num="0196">In the present embodiment, the first packet request generating unit <b>14</b> and the second packet request generating unit <b>17</b> included in the compression device <b>2</b><i>e </i>reproduce the operation of the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> (that is, the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b>) included in the decompression device <b>2</b><i>f </i>by simulating the state of the first packet buffer <b>23</b> and the second packet buffer <b>26</b> included in the decompression device <b>2</b><i>f </i>using the code length of each of the codewords output from the first coding unit <b>12</b> and the second coding unit <b>15</b>.</p><p id="p-0198" num="0197">Here, <figref idref="DRAWINGS">FIG. <b>11</b></figref> is a diagram for explaining the outline of an operation of the first packet request generating unit <b>14</b>, the second packet request generating unit <b>17</b>, and the multiplexer <b>18</b> included in the compression device <b>2</b><i>e </i>according to the present embodiment.</p><p id="p-0199" num="0198">In a case where the operation of the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>described above is reproduced, as illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the first packet request generating unit <b>14</b> operates to generate a packet request including 16 bits as the size of the variable length packet in the cycle C<b>0</b>, generate a packet request including 8 bits as the size of the variable length packet in the cycles C<b>1</b> to C<b>3</b>, and generate a packet request including 16 bits as the size of the variable length packet in the cycle C<b>4</b>. On the other hand, the second packet request generating unit <b>17</b> operates to generate a packet request including 16 bits as the size of the variable length packet in the cycles C<b>0</b> to C<b>2</b>, generate a packet request including 8 bits as the size of the variable length packet in the cycle C<b>3</b>, and generate a packet request including 16 bits as the size of the variable length packet in the cycle C<b>4</b>.</p><p id="p-0200" num="0199">When packet requests are generated in the same cycle, assuming that the packet is preferentially output to the first channel (the first packet buffer <b>23</b>), in the case of the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b>, the demultiplexer <b>21</b> outputs packets cut out from the compressed stream in the order of the first channel, the second channel, the first channel, the second channel, the first channel, the second channel, the first channel, the second channel . . . .</p><p id="p-0201" num="0200">As a result, the multiplexer <b>18</b> included in the compression device <b>2</b><i>e </i>outputs a compressed stream in which the packets A<b>1</b> (16 bits), B<b>1</b> (16 bits), A<b>2</b> (8 bits), B<b>2</b> (16 bits), A<b>3</b> (8 bits), B<b>3</b> (16 bits), A<b>4</b> (8 bits), and B<b>4</b> (8 bits) are arranged in order as illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref> by outputting the packet requests obtained by reproducing the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>from the first packet request generating unit <b>14</b> and the second packet request generating unit <b>17</b> included in the compression device <b>2</b><i>e. </i></p><p id="p-0202" num="0201">Note that the packets A<b>1</b>&#x2032; to A<b>4</b>&#x2032; are packets including the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; converted from the first sub-stream in the first channel of the compression device <b>2</b><i>e </i>(that is, packets generated by the first packet generating unit <b>13</b>), whereas the packets B<b>1</b> to B<b>4</b> are packets including the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; converted from the second sub-stream in the second channel of the compression device <b>2</b><i>e </i>(that is, packets generated by the second packet generating unit <b>16</b>).</p><p id="p-0203" num="0202">Furthermore, in the present embodiment, the first packet generating unit <b>13</b> and the second packet generating unit <b>16</b> generate packets for cutting out an 8-bit or 16-bit variable length packet, and the multiplexer <b>18</b> can cut out the variable length packet from the packets generated by the first packet generating unit <b>13</b> and the second packet generating unit <b>16</b> based on the size of the variable length packet included in the packet request. The compressed stream is generated from the variable length packet cut out by the multiplexer <b>18</b>.</p><p id="p-0204" num="0203">In a case where such a compressed stream is input to the decompression device <b>2</b><i>f</i>, as described above, in response to the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b>, the packets A<b>1</b> to A<b>4</b> are output from the demultiplexer <b>21</b> to the first channel, and the packets B<b>1</b> to B<b>4</b> are output from the demultiplexer <b>21</b> to the second channel. As a result, in the first channel (the first decoding unit <b>24</b>) of the decompression device <b>2</b><i>f</i>, the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; included in the packets A<b>1</b> to A<b>4</b> are converted to the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>. Similarly, in the second channel (the second decoding unit <b>27</b>) of the decompression device <b>2</b><i>f</i>, the codewords S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b> included in the packets B<b>1</b> to B<b>4</b> are converted to the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>.</p><p id="p-0205" num="0204">As described above, the symbols obtained by performing entropy decoding on the first and second channels in the decompression device <b>2</b><i>f </i>are integrated in the deinterleaving unit <b>28</b>. As a result, the deinterleaving unit <b>28</b> outputs the symbol string S<b>0</b> to S<b>7</b>.</p><p id="p-0206" num="0205">Here, since the compressed stream including the variable length packet is output from the compression device <b>2</b><i>e </i>in the present embodiment, as illustrated in <figref idref="DRAWINGS">FIG. <b>11</b></figref>, the padding data included in the packet A<b>4</b> is 2 bits and the padding data included in the packet B<b>4</b> is 3 bits.</p><p id="p-0207" num="0206">In this case, the padding data of the compressed stream in the comparative example of the present embodiment is 21 bits as described in <figref idref="DRAWINGS">FIG. <b>7</b></figref>, and the data amount of the entire compressed stream is 112 bits. On the other hand, in the present embodiment, the packets A<b>1</b> to A<b>4</b> and B<b>1</b> to B<b>4</b>, which are variable length packets, are arranged, and thus the padding data in the compressed stream is 2 bits+3 bits=5 bits, and the amount of data in the entire compressed stream is 96 bits. That is, in the present embodiment, the amount of data in the compressed stream (padding data in the compressed stream) can be reduced by 16 bits as compared with the comparative example of the present embodiment.</p><p id="p-0208" num="0207">As described above, the compression device <b>2</b><i>e </i>according to the present embodiment divides the input symbol string into the first sub-stream (a plurality of first symbols) and the second sub-stream (a plurality of second symbols different from the first symbols), and distributes the first and second sub-streams to the first and second channels. In the first channel, coding is performed on the first sub-stream to convert the first sub-stream to a plurality of codewords (first codewords), a packet (first packet) including the codewords is generated, and a first packet request including the size of the variable length packet is generated. Furthermore, in the second channel, coding is performed on the second sub-stream to convert the second sub-stream to a plurality of codewords (second codewords), a packet (second packet) including the codewords is generated, and a packet request (second packet request) including the size of the variable length packet is generated. In the present embodiment, the variable length packet (first variable length packet) is cut out from the packet generated in the first channel based on the size of the variable length packet included in the packet request generated in the first channel (the first packet request generating unit <b>14</b>) described above, and the variable length packet (second variable length packet) is cut out from the packet generated in the second channel based on the size of the variable length packet included in the packet request generated in the second channel (the second packet request generating unit <b>17</b>). The compression device <b>2</b><i>e </i>outputs the compressed stream including the variable length packet cut out in this way.</p><p id="p-0209" num="0208">In the present embodiment, with such a configuration, it is possible to introduce control to adaptively determine (select) the size of packets included in the compressed stream and reduce the amount of padding data (overhead due to padding data). As a result, it is possible to reduce the size of the compressed stream (compressed data) and improve the compression efficiency.</p><p id="p-0210" num="0209">Note that the decompression device <b>2</b><i>f </i>according to the present embodiment includes the demultiplexer <b>21</b> configured to input a compressed stream output from the compression device <b>2</b><i>e </i>and cut out a variable length packet from the compressed stream. In the first channel of the decompression device <b>2</b><i>f</i>, a packet request (third packet request) including the size of the variable length packet is generated, the variable length packet output from the demultiplexer <b>21</b> is acquired based on the packet request, and entropy decoding is performed on a plurality of codewords included in the variable length packet to convert the codewords to a plurality of symbols. In addition, in the second channel of the decompression device <b>2</b><i>f</i>, a packet request (fourth packet request) including the size of the variable length packet is generated, the variable length packet output from the demultiplexer <b>21</b> is acquired based on the packet request, and entropy decoding is performed on a plurality of codewords included in the variable length packet to convert the codewords to a plurality of symbols. The deinterleaving unit <b>28</b> included in the decompression device <b>2</b><i>f </i>outputs a symbol string including symbols converted from the codewords in the first and second channels (the first decoding unit <b>24</b> and the second decoding unit <b>27</b>).</p><p id="p-0211" num="0210">In this case, the size of the variable length packet included in the packet request generated in the first channel of the decompression device <b>2</b><i>f </i>(the first packet request generating unit <b>22</b> included in the decompression device <b>2</b><i>f</i>) is determined based on the state of the first packet buffer <b>23</b> (the code length of each of the codewords to be subjected to entropy decoding by the first decoding unit <b>24</b>). Furthermore, the size of the variable length packet included in the packet request generated in the second channel of the decompression device <b>2</b><i>f </i>(the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f</i>) is determined based on the state of the second packet buffer <b>26</b> (the code length of each of the codewords to be subjected to entropy decoding by the second decoding unit <b>27</b>).</p><p id="p-0212" num="0211">According to the present embodiment, with the above configuration, the symbol string obtained by appropriately decompressing the compressed stream output from the compression device <b>2</b><i>e </i>can be output from the decompression device <b>2</b><i>f. </i></p><p id="p-0213" num="0212">Note that the first packet request generating unit <b>14</b> included in the compression device <b>2</b><i>e </i>according to the present embodiment generates a packet request so as to reproduce the operation of the first packet request generating unit <b>22</b> included in the decompression device <b>2</b><i>f </i>by simulating the state of the first packet buffer <b>23</b> storing the variable length packet when the first decoding unit <b>24</b> included in the decompression device <b>2</b><i>f </i>performs entropy decoding on the codewords. Similarly, the second packet request generating unit <b>17</b> included in the compression device <b>2</b><i>e </i>generates a packet request so as to reproduce the operation of the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>by simulating the state of the second packet buffer <b>26</b> storing the variable length packet when the second decoding unit <b>27</b> included in the decompression device <b>2</b><i>f </i>performs entropy decoding on the codewords.</p><p id="p-0214" num="0213">In this case, the first packet request generating unit <b>14</b> determines the size of the variable length packet based on the remaining amount of packets stored in the simulated first packet buffer <b>23</b> (for example, in a manner that the remaining amount of packets is more than or equal to the maximum code length in entropy coding). The second packet request generating unit <b>17</b> determines the size of the variable length packet based on the remaining amount of packets stored in the simulated second packet buffer <b>26</b> (for example, in a manner that the remaining amount of packets is more than or equal to the maximum code length in entropy coding).</p><p id="p-0215" num="0214">In the present embodiment, with such a configuration, entropy decoding can be appropriately performed on a plurality of codewords obtained by performing entropy coding in the first channel of the compression device <b>2</b><i>e </i>in the first channel of the decompression device <b>2</b><i>f</i>. Similarly, entropy decoding can be appropriately performed on a plurality of codewords obtained by performing entropy coding in the second channel of the compression device <b>2</b><i>e </i>in the second channel of the decompression device <b>2</b><i>f. </i></p><p id="p-0216" num="0215">Furthermore, in the present embodiment, the decompression device <b>2</b><i>f </i>operates so that the remaining amount of packets is more than or equal to the maximum code length in entropy coding as described above, and thus, for example, even in a case where entropy decoding is performed on the codeword with the maximum code length, the codeword can be converted to a symbol in one cycle. As a result, the throughput of the decompression device <b>2</b><i>f </i>can be guaranteed.</p><p id="p-0217" num="0216">Note that, for example, the compression device <b>2</b><i>e </i>(the first coding unit <b>12</b> and the second coding unit <b>15</b>) performs entropy coding, and the decompression device <b>2</b><i>f </i>(the first decoding unit <b>24</b> and the second decoding unit <b>27</b>) performs entropy decoding in the present embodiment, but the first coding unit <b>12</b> and the second coding unit <b>15</b> are only required to perform variable length coding on a plurality of symbols (convert a plurality of symbols in codewords with a variable code length), and can perform coding based on another coding method. In this case, the first decoding unit <b>24</b> and the second decoding unit <b>27</b> are only required to decode (perform a decoding process on) the result of coding (codeword) by the first coding unit <b>12</b> and the second coding unit <b>15</b>.</p><p id="p-0218" num="0217">Furthermore, the size of the variable length packet included in the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> is selected (determined) from a plurality of predetermined sizes (for example, 8 bits and 16 bits) in the present embodiment, but the size of the variable length packet can be determined by another method.</p><p id="p-0219" num="0218">Further, in the present embodiment, the number of channels in the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>is assumed to be two for convenience of description, but the number of channels can be three or more.</p><heading id="h-0007" level="1">Second Embodiment</heading><p id="p-0220" num="0219">Next, a second embodiment will be described. Note that in the present embodiment, detailed description of parts similar to those of the first embodiment described above will be omitted, and parts different from those of the first embodiment will be mainly described. Furthermore, since the hardware configuration of a memory system and the configuration of a compression device and a decompression device in the present embodiment are similar to those in the first embodiment described above, these configurations will be described with reference to <figref idref="DRAWINGS">FIGS. <b>1</b> and <b>2</b></figref> as appropriate.</p><p id="p-0221" num="0220">Hereinafter, an example of an operation of a compression device <b>2</b><i>e </i>and a decompression device <b>2</b><i>f </i>according to the present embodiment will be described. First, as in the first embodiment described above, it is assumed that symbol string S<b>0</b> to S<b>7</b> is input to an interleaving unit <b>11</b>, and the symbol string S<b>0</b> to S<b>7</b> is distributed to a first sub-stream (the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>) and to a second sub-stream (the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>). Furthermore, it is assumed that as illustrated in <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the first sub-stream is converted to codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; by a first coding unit <b>12</b>, and the second sub-stream is converted to codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; by a second coding unit <b>15</b>, as illustrated in <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0222" num="0221">Here, the present embodiment is similar to the first embodiment described above in that a compressed stream including a variable length packet with a size determined (selected) from 8 bits and 16 bits is output from the compression device <b>2</b><i>e</i>, but is different from the first embodiment in that a packet request is generated so that packets stored in a first packet buffer <b>23</b> and a second packet buffer <b>26</b> do not overflow in the first and second channels in the decompression device <b>2</b><i>f. </i></p><p id="p-0223" num="0222">In this case, a first packet request generating unit <b>14</b> included in the compression device <b>2</b><i>e </i>according to the present embodiment reproduces the operation of a first packet request generating unit <b>22</b> included in the decompression device <b>2</b><i>f</i>. The outline of an operation of the first packet request generating unit <b>22</b> (the first channel of the decompression device <b>2</b><i>f</i>) will be described first.</p><p id="p-0224" num="0223">The first channel of the decompression device <b>2</b><i>f </i>according to the present embodiment is assumed to generate a packet request in a case where the remaining amount of packets stored in the first packet buffer <b>23</b> is less than or equal to 24 bits, and performs entropy decoding on the codeword included in the packet in a case where the remaining amount of packets is more than or equal to the maximum code length (16 bits). It is assumed in the present embodiment that in a case where the remaining amount of packets is less than or equal to 16 bits, a 16-bit packet is requested, and in a case where the remaining amount of packets is more than 16 bits, an 8-bit packet is requested. That is, in the first channel of the decompression device <b>2</b><i>f</i>, the sizes of variable length packets are determined based on the amount of processed packets stored in the first packet buffer <b>23</b> (the consumption amount of the packets or free capacity in the first packet buffer <b>23</b>).</p><p id="p-0225" num="0224"><figref idref="DRAWINGS">FIG. <b>12</b></figref> illustrates a specific example of an operation of the first channel in the decompression device <b>2</b><i>f</i>. Here, it is assumed that the compressed stream includes 8-bit and 16-bit variable length packets.</p><p id="p-0226" num="0225">It is assumed in the present embodiment that the process of the first channel starts in a state where packets are stored in the first packet buffer <b>23</b>. Specifically, for example, assuming that the capacity of the first packet buffer <b>23</b> (the amount of data that can be stored in the first packet buffer <b>23</b>) is 32 bits, two 16-bit packets are sequentially stored in the first packet buffer <b>23</b> as an initial load. In this case, the first packet request generating unit <b>22</b> generates a packet request including 16 bits as the size of the variable length packet in each of cycles C<b>0</b> and C<b>1</b>, and outputs the packet requests to a demultiplexer <b>21</b>.</p><p id="p-0227" num="0226">As a result, in a cycle C<b>2</b> following the cycle C<b>1</b>, the remaining amount of packets stored in the first packet buffer <b>23</b> is 32 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> converts the codeword S<b>0</b>&#x2032; included in the packet stored in the first packet buffer <b>23</b> to the symbol S<b>0</b>. Since the codeword S<b>0</b>&#x2032; is 5 bits, 5 bits are processed out of the packets (32 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 27 bits.</p><p id="p-0228" num="0227">In this case, since the remaining amount of packets stored in the first packet buffer <b>23</b> is not less than or equal to 24 bits, the first packet request generating unit <b>22</b> does not generate a packet request.</p><p id="p-0229" num="0228">In a cycle C<b>3</b> following the cycle C<b>2</b>, the remaining amount of packets stored in the first packet buffer <b>23</b> is 27 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In this case, the codeword S<b>2</b>&#x2032; following the codeword S<b>0</b>&#x2032; converted to the symbol S<b>0</b> in the cycle C<b>2</b> described above is converted to the symbol S<b>2</b>. Since the codeword S<b>2</b>&#x2032; is 6 bits, 6 bits are processed out of the remaining amount of packets (27 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 21 bits.</p><p id="p-0230" num="0229">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is less than or equal to 24 bits and more than 16 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0231" num="0230">In a cycle C<b>4</b> following the cycle C<b>3</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the first packet request generating unit <b>22</b> in the cycle C<b>3</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0232" num="0231">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b> is 29 bits (21 bits, which is the remaining amount of packets in the cycle C<b>3</b>+8 bits newly stored in the first packet buffer <b>23</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In this case, the codeword S<b>4</b>&#x2032; following the codeword S<b>2</b>&#x2032; converted to the symbol S<b>2</b> in the cycle C<b>3</b> described above is converted to the symbol S<b>4</b>. Since the codeword S<b>4</b>&#x2032; is 13 bits, 13 bits are processed out of the remaining amount of packets (29 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 16 bits.</p><p id="p-0233" num="0232">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is less than or equal to 16 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0234" num="0233">In a cycle C<b>5</b> following the cycle C<b>4</b>, the 16-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the first packet request generating unit <b>22</b> in the cycle C<b>4</b> is stored in the first packet buffer <b>23</b>.</p><p id="p-0235" num="0234">As a result, the remaining amount of packets stored in the first packet buffer <b>23</b> is 32 bits (16 bits, which is the remaining amount of packets in the cycle C<b>4</b>+16 bits newly stored in the first packet buffer <b>23</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the first decoding unit <b>24</b> performs entropy decoding on the codeword included in the packet stored in the first packet buffer <b>23</b> to convert the codeword to a symbol. In this case, the codeword S<b>6</b>&#x2032; following the codeword S<b>4</b>&#x2032; converted to the symbol S<b>4</b> in the cycle C<b>4</b> described above is converted to the symbol S<b>6</b>. Since the codeword S<b>6</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (32 bits) stored in the first packet buffer <b>23</b>, and the remaining amount of packets stored in the first packet buffer <b>23</b> is 18 bits.</p><p id="p-0236" num="0235">In this case, the remaining amount of packets stored in the first packet buffer <b>23</b> is less than or equal to 24 bits and more than 16 bits. For this reason, the first packet request generating unit <b>22</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0237" num="0236">It is assumed in the decompression device <b>2</b><i>f </i>according to the present embodiment that the first packet request generating unit <b>22</b> generates a packet request as described above, and thus entropy decoding is sequentially performed on the packets (a plurality of codewords included in the packets) included in the compressed stream output from the compression device <b>2</b><i>e. </i></p><p id="p-0238" num="0237">Here, although the operation of the first packet request generating unit <b>22</b> included in the decompression device <b>2</b><i>f </i>(the first channel in the decompression device <b>2</b><i>f</i>) has been described, a similar operation is performed by a second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>(that is, the second channel in the decompression device <b>2</b><i>f</i>).</p><p id="p-0239" num="0238">The second channel of the decompression device <b>2</b><i>f </i>operates to generate a packet request in a case where the remaining amount of packets stored in the second packet buffer <b>26</b> is less than or equal to 24 bits, and perform entropy decoding on the codeword included in the packet in a case where the remaining amount of packets is more than or equal to the maximum code length (16 bits). In a case where the remaining amount of packets is less than or equal to 16 bits, a 16-bit packet is requested, and in a case where the remaining amount of packets is more than 16 bits, an 8-bit packet is requested. That is, in the second channel of the decompression device <b>2</b><i>f</i>, the sizes of the variable length packets are determined based on the amount of processed packets stored in the second packet buffer <b>26</b> (the consumption amount of the packets or free capacity in the second packet buffer <b>26</b>).</p><p id="p-0240" num="0239"><figref idref="DRAWINGS">FIG. <b>13</b></figref> illustrates a specific example of an operation of the second channel in the decompression device <b>2</b><i>f</i>. Here, it is assumed that the compressed stream includes 8-bit and 16-bit variable length packets.</p><p id="p-0241" num="0240">It is assumed in the present embodiment that the process of the second channel starts in a state where packets are stored in the second packet buffer <b>26</b> as in the case of the first channel described above. Specifically, for example, assuming that the capacity of the second packet buffer <b>26</b> (the amount of data that can be stored in the second packet buffer <b>26</b>) is 32 bits, two 16-bit packets are sequentially stored in the second packet buffer <b>26</b> as an initial load. In this case, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet in each of the cycles C<b>0</b> and C<b>1</b>, and outputs the packet requests to the demultiplexer <b>21</b>.</p><p id="p-0242" num="0241">As a result, in the cycle C<b>2</b> following the cycle C<b>1</b>, the remaining amount of packets stored in the second packet buffer <b>26</b> is 32 bits, which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> converts the codeword S<b>1</b>&#x2032; included in the packet stored in the second packet buffer <b>26</b> to the symbol S<b>1</b>. Since the codeword S<b>1</b>&#x2032; is 15 bits, 15 bits are processed out of the packets (32 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 17 bits.</p><p id="p-0243" num="0242">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than or equal to 24 bits and more than 16 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0244" num="0243">In the cycle C<b>3</b> following the cycle C<b>2</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>2</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0245" num="0244">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 25 bits (17 bits, which is the remaining amount of packets in the cycle C<b>2</b>+8 bits newly stored in the second packet buffer <b>26</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In this case, the codeword S<b>3</b>&#x2032; following the codeword S<b>1</b>&#x2032; converted to the symbol S<b>1</b> in the cycle C<b>2</b> described above is converted to the symbol S<b>3</b>. Since the codeword S<b>3</b>&#x2032; is 10 bits, 10 bits are processed out of the remaining amount of packets (25 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 15 bits.</p><p id="p-0246" num="0245">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than or equal to 16 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0247" num="0246">In the cycle C<b>4</b> following the cycle C<b>3</b>, the 16-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>3</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0248" num="0247">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 31 bits (15 bits, which is the remaining amount of packets in the cycle C<b>3</b>+16 bits newly stored in the second packet buffer <b>26</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In this case, the codeword S<b>5</b>&#x2032; following the codeword S<b>3</b>&#x2032; converted to the symbol S<b>3</b> in the cycle C<b>3</b> described above is converted to the symbol S<b>5</b>. Since the codeword S<b>5</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (31 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 17 bits.</p><p id="p-0249" num="0248">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than or equal to 24 bits and more than 16 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 8 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0250" num="0249">In the cycle C<b>5</b> following the cycle C<b>4</b>, the 8-bit packet output from the demultiplexer <b>21</b> in response to the packet request output from the second packet request generating unit <b>25</b> in the cycle C<b>4</b> is stored in the second packet buffer <b>26</b>.</p><p id="p-0251" num="0250">As a result, the remaining amount of packets stored in the second packet buffer <b>26</b> is 25 bits (17 bits, which is the remaining amount of packets in the cycle C<b>4</b>+8 bits newly stored in the second packet buffer <b>26</b>), which is more than or equal to the maximum code length, that is, 16 bits. Consequently, the second decoding unit <b>27</b> performs entropy decoding on the codeword included in the packet stored in the second packet buffer <b>26</b> to convert the codeword to a symbol. In this case, the codeword S<b>7</b>&#x2032; following the codeword S<b>5</b>&#x2032; converted to the symbol S<b>5</b> in the cycle C<b>4</b> described above is converted to the symbol S<b>7</b>. Since the codeword S<b>7</b>&#x2032; is 14 bits, 14 bits are processed out of the remaining amount of packets (25 bits) stored in the second packet buffer <b>26</b>, and the remaining amount of packets stored in the second packet buffer <b>26</b> is 11 bits.</p><p id="p-0252" num="0251">In this case, the remaining amount of packets stored in the second packet buffer <b>26</b> is less than or equal to 16 bits. For this reason, the second packet request generating unit <b>25</b> generates a packet request including 16 bits as the size of the variable length packet and outputs the packet request to the demultiplexer <b>21</b>.</p><p id="p-0253" num="0252">It is assumed in the decompression device <b>2</b><i>f </i>according to the present embodiment that the second packet request generating unit <b>25</b> generates a packet request as described above, and thus entropy decoding is sequentially performed on the packets (a plurality of codewords included in the packets) included in the compressed stream output from the compression device <b>2</b><i>e. </i></p><p id="p-0254" num="0253">In the present embodiment, the first packet request generating unit <b>14</b> and the second packet request generating unit <b>17</b> included in the compression device <b>2</b><i>e </i>reproduce the operation of the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> (that is, the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b>) included in the decompression device <b>2</b><i>f </i>by simulating the state of the first packet buffer <b>23</b> and the second packet buffer <b>26</b> included in the decompression device <b>2</b><i>f </i>using the code length of each of the codewords output from the first coding unit <b>12</b> and the second coding unit <b>15</b>.</p><p id="p-0255" num="0254">Here, <figref idref="DRAWINGS">FIG. <b>14</b></figref> is a diagram for explaining the outline of an operation of the first packet request generating unit <b>14</b>, the second packet request generating unit <b>17</b>, and a multiplexer <b>18</b> included in the compression device <b>2</b><i>e </i>according to the present embodiment.</p><p id="p-0256" num="0255">In a case where the operation of the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>described above is reproduced, as illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the first packet request generating unit <b>14</b> operates to generate a packet request including 16 bits as the size of the variable length packet in the cycles C<b>0</b> and C<b>1</b>, generate a packet request including 8 bits as the size of the variable length packet in the cycle C<b>3</b>, generate a packet request including 16 bits as the size of the variable length packet in the cycle C<b>4</b>, and generate a packet request including 8 bits as the size of the variable length packet in the cycle C<b>5</b>. On the other hand, the second packet request generating unit <b>17</b> operates to generate a packet request including 16 bits as the size of the variable length packet in the cycles C<b>0</b> and C<b>1</b>, generate a packet request including 8 bits as the size of the variable length packet in the cycle C<b>2</b>, generate a packet request including 16 bits as the size of the variable length packet in the cycle C<b>3</b>, generate a packet request including 8 bits as the size of the variable length packet in the cycle C<b>4</b>, and generate a packet request including 16 bits as the size of the variable length packet in the cycle C<b>5</b>.</p><p id="p-0257" num="0256">When packet requests are generated in the same cycle, assuming that the packet is preferentially output to the first channel (the first packet buffer <b>23</b>), in the case of the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b>, the demultiplexer <b>21</b> outputs packets cut out from the compressed stream in the order of the first channel, the second channel, the first channel, the second channel, the second channel, the first channel, the second channel . . . .</p><p id="p-0258" num="0257">As a result, the multiplexer <b>18</b> included in the compression device <b>2</b><i>e </i>outputs a compressed stream in which the packets A<b>1</b> (16 bits), B<b>1</b> (16 bits), A<b>2</b> (16 bits), B<b>2</b> (16 bits), B<b>3</b> (8 bits), A<b>3</b> (8 bits), and B<b>4</b> (16 bits) are arranged in order as illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref> by outputting the packet requests obtained by reproducing the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> included in the decompression device <b>2</b><i>f </i>from the first packet request generating unit <b>14</b> and the second packet request generating unit <b>17</b> included in the compression device <b>2</b><i>e. </i></p><p id="p-0259" num="0258">Note that the packets A<b>1</b>&#x2032; to A<b>3</b>&#x2032; are packets including the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; converted from the first sub-stream in the first channel of the compression device <b>2</b><i>e </i>(that is, packets generated by the first packet generating unit <b>13</b>), whereas the packets B<b>1</b> to B<b>4</b> are packets including the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; converted from the second sub-stream in the second channel of the compression device <b>2</b><i>e </i>(that is, packets generated by the second packet generating unit <b>16</b>).</p><p id="p-0260" num="0259">In the present embodiment, since a packet request is generated so that packets stored in the first packet buffer <b>23</b> and the second packet buffer <b>26</b> do not overflow, two 16-bit packets are first requested as an initial load. Consequently, a predetermined number of packets with a predetermined size are arranged (located) at the head of the compressed stream in the present embodiment. Note that the number and size of packets (variable length packets) arranged at the head of the compressed stream can be determined depending on the size of each of the first packet buffer <b>23</b> and the second packet buffer <b>26</b>, for example.</p><p id="p-0261" num="0260">In a case where such a compressed stream is input to the decompression device <b>2</b><i>f</i>, as described above, in response to the packet requests generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b>, the packets A<b>1</b> to A<b>3</b> are output from the demultiplexer <b>21</b> to the first channel, and the packets B<b>1</b> to B<b>4</b> are output from the demultiplexer <b>21</b> to the second channel. As a result, in the first channel (the first decoding unit <b>24</b>) of the decompression device <b>2</b><i>f</i>, the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; included in the packets A<b>1</b> to A<b>3</b> are converted to the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>. Similarly, in the second channel (the second decoding unit <b>27</b>) of the decompression device <b>2</b><i>f</i>, the codewords S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b> included in the packets B<b>1</b> to B<b>4</b> are converted to the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>.</p><p id="p-0262" num="0261">Note that the multiplexer <b>18</b> included in the compression device <b>2</b><i>e </i>of the present embodiment can generate a compressed stream by cutting out a variable length packet based on the size of the variable length packet included in the packet request, as in the first embodiment described above. In addition, a deinterleaving unit <b>28</b> included in the decompression device <b>2</b><i>f </i>can output the symbol string S<b>0</b> to S<b>7</b> by integrating symbols obtained by performing entropy decoding in the first and second channels of the decompression device <b>2</b><i>f </i>as described above, as in the first embodiment described above.</p><p id="p-0263" num="0262">Here, since the compressed stream including the variable length packet is output from the compression device <b>2</b><i>e </i>in the present embodiment, as illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>, the padding data included in the packet A<b>3</b> is 2 bits and the padding data included in the packet B<b>4</b> is 3 bits.</p><p id="p-0264" num="0263">In this case, the amount of data in the compressed stream (padding data in the compressed stream) can be reduced by 16 bits as compared with the comparative example of the first embodiment.</p><p id="p-0265" num="0264">As described above, in the present embodiment, even in a configuration of determining the sizes of the variable length packets included in the packet requests based on the amount of processed packets (the processed amount of data in the variable length packets) stored in the first packet buffer <b>23</b> and the second packet buffer <b>26</b> (that is, generating packet requests so that packets stored in the first packet buffer <b>23</b> and the second packet buffer <b>26</b> do not overflow) unlike the first embodiment described above, the amount of padding data can be reduced and the compression efficiency can be improved.</p><p id="p-0266" num="0265">In the present embodiment, entropy decoding starts in a state where packets based on to the size of the first packet buffer <b>23</b> and the second packet buffer <b>26</b> are stored in the first packet buffer <b>23</b> and the second packet buffer <b>26</b>. Consequently, it is assumed that a packet (a variable length packet) with a size based on the size of the first packet buffer <b>23</b> and the second packet buffer <b>26</b> is arranged at the head of the compressed stream. With such a configuration, efficient entropy decoding (processing) can be implemented in the decompression device <b>2</b><i>f. </i></p><p id="p-0267" num="0266">Here, it has been described in the present embodiment that the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> generate packet requests by simulating the state of the first packet buffer <b>23</b> and the second packet buffer <b>26</b> as in the first embodiment described above. However, the compression device <b>2</b><i>e </i>according to the present embodiment can have a configuration of determining, for example, the sizes of the variable length packets included in the packets generated by the first packet request generating unit <b>22</b> and the second packet request generating unit <b>25</b> based on whether or not a plurality of codewords converted from the first and second sub-streams by the first coding unit <b>12</b> and the second coding unit <b>15</b> cross packet boundary candidates (hereinafter, referred to as &#x201c;modification of the present embodiment&#x201d;). Whether or not the codewords cross the packet boundary candidates can be judged from the code length of the codewords.</p><p id="p-0268" num="0267">Specifically, for example, the size of the variable length packet determined in the nth codeword can be calculated by &#x201c;number of packet boundary candidates crossed by nth codeword&#xd7;interval width of packet boundary candidates&#x201d; (hereinafter, referred to as &#x201c;expression (1)&#x201d;).</p><p id="p-0269" num="0268">Further, &#x201c;number of packet boundary candidates crossed by nth codeword&#x201d; can be calculated by the following expression (2).</p><p id="p-0270" num="0000"><maths id="MATH-US-00001" num="00001"><math overflow="scroll"> <mtable>  <mtr>   <mtd>    <mrow>     <mtable>      <mtr>       <mtd>        <mrow>         <mi>Number</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>of</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>packet</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>boundary</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>candidates</mi>        </mrow>       </mtd>      </mtr>      <mtr>       <mtd>        <mrow>         <mi>crossed</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>by</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>nth</mi>         <mo>&#x2062;</mo>         <mtext>   </mtext>         <mi>codeword</mi>        </mrow>       </mtd>      </mtr>     </mtable>     <mo>=</mo>     <mrow>      <mo>{</mo>      <mtable>       <mtr>        <mtd>         <mrow>          <mrow>           <mo>&#x230a;</mo>           <mfrac>            <mrow>             <mi>code</mi>             <mo>&#x2062;</mo>             <mtext>   </mtext>             <mi>length</mi>             <mo>&#x2062;</mo>             <mtext>   </mtext>             <mrow>              <mo>(</mo>              <mn>0</mn>              <mo>)</mo>             </mrow>            </mrow>            <mtable>             <mtr>              <mtd>               <mrow>                <mi>interval</mi>                <mo>&#x2062;</mo>                <mtext>   </mtext>                <mi>width</mi>                <mo>&#x2062;</mo>                <mtext>   </mtext>                <mi>of</mi>                <mo>&#x2062;</mo>                <mtext>   </mtext>                <mi>packet</mi>               </mrow>              </mtd>             </mtr>             <mtr>              <mtd>               <mrow>                <mi>boundary</mi>                <mo>&#x2062;</mo>                <mtext>   </mtext>                <mi>candidate</mi>               </mrow>              </mtd>             </mtr>            </mtable>           </mfrac>           <mo>&#x230b;</mo>          </mrow>          <mo>,</mo>         </mrow>        </mtd>        <mtd>         <mrow>          <mi>n</mi>          <mo>=</mo>          <mn>0</mn>         </mrow>        </mtd>       </mtr>       <mtr>        <mtd>         <mrow>          <mrow>           <mrow>            <mo>&#x230a;</mo>            <mfrac>             <mrow>              <msubsup>               <mo>&#x2211;</mo>               <mrow>                <mi>i</mi>                <mo>=</mo>                <mn>0</mn>               </mrow>               <mi>n</mi>              </msubsup>              <mrow>               <mi>code</mi>               <mo>&#x2062;</mo>               <mtext>    </mtext>               <mi>length</mi>               <mo>&#x2062;</mo>               <mtext>   </mtext>               <mrow>                <mo>(</mo>                <mi>i</mi>                <mo>)</mo>               </mrow>              </mrow>             </mrow>             <mtable>              <mtr>               <mtd>                <mrow>                 <mi>interval</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>width</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>of</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>packet</mi>                </mrow>               </mtd>              </mtr>              <mtr>               <mtd>                <mrow>                 <mi>boundary</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>candidate</mi>                </mrow>               </mtd>              </mtr>             </mtable>            </mfrac>            <mo>&#x230b;</mo>           </mrow>           <mo>-</mo>           <mrow>            <mo>&#x230a;</mo>            <mfrac>             <mrow>              <msubsup>               <mo>&#x2211;</mo>               <mrow>                <mi>i</mi>                <mo>=</mo>                <mn>0</mn>               </mrow>               <mrow>                <mi>n</mi>                <mo>-</mo>                <mn>1</mn>               </mrow>              </msubsup>              <mrow>               <mi>code</mi>               <mo>&#x2062;</mo>               <mtext>    </mtext>               <mi>length</mi>               <mo>&#x2062;</mo>               <mtext>   </mtext>               <mrow>                <mo>(</mo>                <mi>i</mi>                <mo>)</mo>               </mrow>              </mrow>             </mrow>             <mtable>              <mtr>               <mtd>                <mrow>                 <mi>interval</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>width</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>of</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>packet</mi>                </mrow>               </mtd>              </mtr>              <mtr>               <mtd>                <mrow>                 <mi>boundary</mi>                 <mo>&#x2062;</mo>                 <mtext>   </mtext>                 <mi>candidate</mi>                </mrow>               </mtd>              </mtr>             </mtable>            </mfrac>            <mo>&#x230b;</mo>           </mrow>          </mrow>          <mo>,</mo>         </mrow>        </mtd>        <mtd>         <mrow>          <mi>n</mi>          <mo>&#x2265;</mo>          <mn>1</mn>         </mrow>        </mtd>       </mtr>      </mtable>     </mrow>    </mrow>   </mtd>   <mtd>    <mrow>     <mi>Expression</mi>     <mo>&#x2062;</mo>     <mtext>   </mtext>     <mrow>      <mo>(</mo>      <mn>2</mn>      <mo>)</mo>     </mrow>    </mrow>   </mtd>  </mtr> </mtable></math></maths></p><p id="p-0271" num="0269">Hereinafter, the modification of the present embodiment will be specifically described with reference to <figref idref="DRAWINGS">FIGS. <b>15</b> and <b>16</b></figref>. Here, it is assumed that the sizes of the variable length packets are determined (selected) from 8 bits and 16 bits as described above, and the packet boundary candidates in this case correspond to the boundaries of 8-bit fixed length packets (that is, set in 8-bit units). Further, the head codeword among a plurality of codewords obtained by performing entropy coding in the first and second channels of the compression device <b>2</b><i>e </i>is the 0th.</p><p id="p-0272" num="0270">First, <figref idref="DRAWINGS">FIG. <b>15</b></figref> is a diagram for explaining the size of a variable length packet included in a packet request generated by the first packet request generating unit <b>22</b> in the modification of the present embodiment.</p><p id="p-0273" num="0271">Assuming that the first sub-stream is converted to the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032; and S<b>6</b>&#x2032; as described above with reference to <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the 0th codeword is the codeword S<b>0</b>&#x2032;.</p><p id="p-0274" num="0272">The codeword S<b>0</b>&#x2032; has a code length of 5 bits, and when the code length is applied to the above expression (2), the number of packet boundary candidates crossed by the 0th codeword S<b>0</b>&#x2032; is zero. As a result, the size of the variable length packet determined in the 0th codeword S<b>0</b>&#x2032; is calculated as 0 bit from the above expression (1).</p><p id="p-0275" num="0273">The first codeword is the codeword S<b>2</b>&#x2032;. The codeword S<b>2</b>&#x2032; has a code length of 6 bits, and when this code length and the code length of the codeword S<b>0</b>&#x2032; are applied to the above expression (2), the number of packet boundary candidates crossed by the first codeword S<b>2</b>&#x2032; is one. As a result, the size of the variable length packet determined in the first codeword S<b>2</b>&#x2032; is calculated as 8 bits from the above expression (1).</p><p id="p-0276" num="0274">The second codeword is the codeword S<b>4</b>&#x2032;. The codeword S<b>4</b>&#x2032; has a code length of 13 bits, and when this code length and the code lengths of the codewords S<b>0</b>&#x2032; and S<b>2</b>&#x2032; are applied to the above expression (2), the number of packet boundary candidates crossed by the second codeword S<b>4</b>&#x2032; is two. As a result, the size of the variable length packet determined in the second codeword S<b>4</b>&#x2032; is calculated as 16 bits from the above expression (1).</p><p id="p-0277" num="0275">The third codeword is the codeword S<b>6</b>&#x2032;. The codeword S<b>6</b>&#x2032; has a code length of 14 bits, and when this code length and the code lengths of the codewords S<b>0</b>&#x2032; and S<b>2</b>&#x2032;, and S<b>4</b>&#x2032; are applied to the above expression (2), the number of packet boundary candidates crossed by the third codeword S<b>6</b>&#x2032; is one. As a result, the size of the variable length packet determined in the third codeword S<b>6</b>&#x2032; is calculated as 8 bits from the above expression (1).</p><p id="p-0278" num="0276">As described above, in a case where the size of the variable length packet is determined based on whether or not the codewords S<b>0</b>&#x2032;, S<b>2</b>&#x2032;, S<b>4</b>&#x2032;, and S<b>6</b>&#x2032; converted from the first sub-stream cross the packet boundary candidates, as illustrated in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the sizes of the variable length packets are 0 bit, 8 bits, 16 bits, and 8 bits. As a result, when combined with two variable length packets (16 bits) initially requested from the first channel as an initial load as described above, the first packet request generating unit <b>22</b> in the modification of the present embodiment can generate a packet request including the size of the variable length packet similar to that included in the packet request illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>.</p><p id="p-0279" num="0277">Next, <figref idref="DRAWINGS">FIG. <b>16</b></figref> is a diagram for explaining the size of a variable length packet included in a packet request generated by the second packet request generating unit <b>25</b> in the modification of the present embodiment.</p><p id="p-0280" num="0278">Assuming that the second sub-stream is converted to the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032; and S<b>7</b>&#x2032; as described above with reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref>, the 0th codeword is the codeword S<b>1</b>&#x2032;.</p><p id="p-0281" num="0279">The codeword S<b>1</b>&#x2032; has a code length of 15 bits, and when this code length is applied to the above expression (2), the number of packet boundary candidates crossed by the 0th codeword S<b>1</b>&#x2032; is one. As a result, the size of the variable length packet determined in the 0th codeword S<b>1</b>&#x2032; is calculated as 8 bits from the above expression (1).</p><p id="p-0282" num="0280">The first codeword is the codeword S<b>3</b>&#x2032;. The codeword S<b>3</b>&#x2032; has a code length of 10 bits, and when this code length and the code length of the codeword S<b>1</b>&#x2032; are applied to the above expression (2), the number of packet boundary candidates crossed by the first codeword S<b>3</b>&#x2032; is two. As a result, the size of the variable length packet determined in the first codeword S<b>3</b>&#x2032; is calculated as 16 bits from the above expression (1).</p><p id="p-0283" num="0281">The second codeword is the codeword S<b>5</b>&#x2032;. The codeword S<b>5</b>&#x2032; has a code length of 14 bits, and when this code length and the code lengths of the codewords S<b>1</b>&#x2032; and S<b>3</b>&#x2032; are applied to the above expression (2), the number of packet boundary candidates crossed by the second codeword S<b>5</b>&#x2032; is one. As a result, the size of the variable length packet determined in the second codeword S<b>5</b>&#x2032; is calculated as 8 bits from the above expression (1).</p><p id="p-0284" num="0282">The third codeword is the codeword S<b>7</b>&#x2032;. The codeword S<b>7</b>&#x2032; has a code length of 14 bits, and when this code length and the code lengths of the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, and S<b>5</b>&#x2032; are applied to the above expression (2), the number of packet boundary candidates crossed by the third codeword S<b>7</b>&#x2032; is two. As a result, the size of the variable length packet determined in the third codeword S<b>7</b>&#x2032; is calculated as 16 bits from the above expression (1).</p><p id="p-0285" num="0283">As described above, in a case where the size of the variable length packet is determined based on whether or not the codewords S<b>1</b>&#x2032;, S<b>3</b>&#x2032;, S<b>5</b>&#x2032;, and S<b>7</b>&#x2032; converted from the second sub-stream cross the packet boundary candidates, as illustrated in <figref idref="DRAWINGS">FIG. <b>15</b></figref>, the sizes of the variable length packets are 8 bits, 16 bits, 8 bits, and 16 bits. As a result, when combined with two variable length packets (16 bits) initially requested from the second channel as an initial load as described above, the second packet request generating unit <b>25</b> in the modification of the present embodiment can generate a packet request including the size of the variable length packet similar to that included in the packet request illustrated in <figref idref="DRAWINGS">FIG. <b>14</b></figref>.</p><p id="p-0286" num="0284">That is, in the modification of the present embodiment, in a case where, for example, 8-bit fixed length packets are generated in order from the head of a plurality of codewords, whether or not each of the codewords crosses the boundaries of the fixed length packets is judged, and the sizes of the variable length packets are determined based on the result of the judgements. As a result, the compression efficiency can be improved as in the present embodiment.</p><p id="p-0287" num="0285">In the modification of the present embodiment, the configuration of determining the sizes of the variable length packets based on the result of the judgements as to whether or not each of the codewords crosses the boundaries of the fixed length packets is applied to the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f. </i></p><heading id="h-0008" level="1">Third Embodiment</heading><p id="p-0288" num="0286">Next, a third embodiment will be described. Note that in the present embodiment, detailed description of parts similar to those of the first embodiment described above will be omitted, and parts different from those of the first embodiment will be described. Furthermore, since the hardware configuration of a memory system in the present embodiment is similar to that in the first embodiment described above, the configuration will be described with reference to <figref idref="DRAWINGS">FIG. <b>1</b></figref> as appropriate.</p><p id="p-0289" num="0287">It is assumed in the present embodiment that a compression device <b>2</b><i>e </i>compresses data by a compression algorithm combining the dictionary coding and the entropy coding described above. In this case, in the compression device <b>2</b><i>e</i>, entropy coding is performed on a symbol string including the result of dictionary coding. As illustrated in <figref idref="DRAWINGS">FIG. <b>17</b></figref>, the result of dictionary coding includes literal information <b>101</b>, match length information <b>102</b>, and distance information <b>103</b>.</p><p id="p-0290" num="0288">The literal information <b>101</b> is information output as the result of dictionary coding in a case where the past data matching dictionary coding target data is not present in a history buffer (a dictionary) (that is, the dictionary coding target data does not match data in the dictionary), and corresponds to information indicating the dictionary coding target data.</p><p id="p-0291" num="0289">The match length information <b>102</b> is information output as the result of dictionary coding in a case where the past data matching dictionary coding target data is present in the history buffer (that is, the dictionary coding target data matches the data in the dictionary), and corresponds to information indicating the length at which the dictionary coding target data matches the past data.</p><p id="p-0292" num="0290">The distance information <b>103</b> is information output as the result of dictionary coding in a case where the past data matching dictionary coding target data is present in the history buffer, and corresponds to information indicating the position of the past data in the history buffer (the distance to the past data).</p><p id="p-0293" num="0291">Note that the distance information <b>103</b> can have a data structure in which second distance information <b>103</b><i>b </i>corresponding to an extended bit is added to first distance information <b>103</b><i>a</i>. Similarly, the match length information <b>102</b> can have a data structure in which second match length information <b>102</b><i>b </i>corresponding to the extended bit is added to first match length information <b>102</b><i>a. </i></p><p id="p-0294" num="0292">Furthermore, in a case where the past data matching the dictionary coding target data is present in the history buffer as described above, pieces of the match length information <b>102</b> and the distance information <b>103</b> are output as a set of information.</p><p id="p-0295" num="0293">In the present embodiment, entropy coding is performed on a symbol string including pieces of the literal information, the match length information, and the distance information (the first and second distance information) as symbols. In the following description, the literal information included in the symbol string is referred to as &#x201c;symbol L&#x201d;, the match length information included in the symbol string is referred to as &#x201c;symbol ML&#x201d;, the first distance information included in the symbol string is referred to as &#x201c;symbol CN&#x201d;, and the second distance information included in the symbol string is referred to as &#x201c;symbol EX&#x201d;.</p><p id="p-0296" num="0294">Here, for example, it is assumed that entropy coding is performed on a symbol string <b>201</b> illustrated in <figref idref="DRAWINGS">FIG. <b>18</b></figref> in first and second channels of the compression device <b>2</b><i>e</i>. In the symbol string <b>201</b> illustrated in <figref idref="DRAWINGS">FIG. <b>18</b></figref>, a plurality of symbols S<b>0</b> to S<b>7</b> are arranged in order. The symbol S<b>0</b> is a symbol ML<b>0</b>, the symbol S<b>1</b> is a symbol CN<b>0</b>, the symbol S<b>2</b> is a symbol EX<b>0</b>, the symbol S<b>3</b> is a symbol L<b>1</b>, the symbol S<b>4</b> is a symbol L<b>2</b>, the symbol S<b>5</b> is a symbol ML<b>3</b>, the symbol S<b>6</b> is a symbol CN<b>3</b>, and the symbol S<b>7</b> is a symbol EX<b>3</b>.</p><p id="p-0297" num="0295">Assuming that the even-numbered symbols in the symbol string illustrated in <figref idref="DRAWINGS">FIG. <b>18</b></figref> are distributed to the first channel as a first sub-stream and the odd-numbered symbols are distributed to the second channel as a second sub-stream, the first sub-stream includes the symbol ML<b>0</b>, the symbol EX<b>0</b>, the symbol L<b>2</b>, and the symbol CN<b>3</b>, and the second sub-stream includes the symbol CN<b>0</b>, the symbol L<b>1</b>, the symbol ML<b>3</b>, and the symbol EX<b>3</b>.</p><p id="p-0298" num="0296">In a case where entropy coding is performed on the first and second sub-streams in parallel in the first and second channels, for example, entropy coding is performed on the symbol ML<b>0</b> and the symbol CN<b>0</b> in the same cycle. In this case, entropy decoding of the codeword converted from the symbol ML<b>0</b> by entropy coding and entropy decoding of the codeword converted from the symbol CN<b>0</b> are performed in the same cycle in a decompression device <b>2</b><i>f</i>. In the following description, for example, the codeword converted from the symbol ML<b>0</b> is referred to as &#x201c;codeword ML<b>0</b>&#x2032;&#x201d; and the codeword converted from the symbol CN<b>0</b> is referred to as &#x201c;codeword CN<b>0</b>&#x2032;&#x201d;, and the same holds true for other codewords.</p><p id="p-0299" num="0297">Here, as described above, in a case where the past data matching the dictionary coding target data is present in the history buffer, pieces of the match length information and the distance information (the first and second distance information) are obtained as the result of dictionary coding and output as a set of information, and in the symbol string <b>201</b>, the symbol CN (the first distance information) and the symbol EX (the second distance information) are arranged after the symbol ML (the match length information). In this case, it can be said that there is a dependency relationship between the symbol ML (the match length information), the symbol CN (the first distance information), and the symbol EX (the second distance information).</p><p id="p-0300" num="0298">In a case where entropy decoding is performed on the codeword ML<b>0</b>&#x2032; and the codeword CN<b>0</b>&#x2032; that have such a dependency relationship, it is recognized that the symbol CN is arranged after the symbol ML<b>0</b> by converting the codeword ML<b>0</b>&#x2032; to the symbol ML<b>0</b> using entropy decoding of the codeword ML<b>0</b>&#x2032;, and then entropy decoding is performed on the codeword CN<b>0</b>&#x2032;. As a result, the codeword CN<b>0</b>&#x2032; can be appropriately converted to the symbol CN. In other words, the codeword CN<b>0</b>&#x2032; can converted to the symbol CN<b>0</b> only after entropy decoding is performed on the codeword ML<b>0</b>&#x2032;. Note that the same holds true for entropy decoding of the codeword EX<b>0</b>&#x2032; converted from the symbol EX<b>0</b>.</p><p id="p-0301" num="0299">As a result, in the case of the configuration in which entropy decoding is performed on the codeword ML<b>0</b>&#x2032; and the codeword CN<b>0</b>&#x2032; in parallel in the same cycle as described above, the codeword CN<b>0</b>&#x2032; cannot be converted to the symbol CN<b>0</b> in the cycle, and thus the throughput of the decompression device <b>2</b><i>f </i>cannot be improved.</p><p id="p-0302" num="0300">Consequently, in view of the above circumstances, the present embodiment has a configuration of improving the throughput of the decompression device <b>2</b><i>f. </i></p><p id="p-0303" num="0301"><figref idref="DRAWINGS">FIG. <b>19</b></figref> is a diagram illustrating an example of a configuration of the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>according to the present embodiment. Note that in <figref idref="DRAWINGS">FIG. <b>19</b></figref>, the same reference numerals are given to parts similar to those in <figref idref="DRAWINGS">FIG. <b>2</b></figref> described above, and detailed description thereof will be omitted. Here, the parts different from those in <figref idref="DRAWINGS">FIG. <b>2</b></figref> will be mainly described.</p><p id="p-0304" num="0302">The compression device <b>2</b><i>e </i>according to the present embodiment includes a sorting unit <b>19</b>. The sorting unit <b>19</b> inputs a symbol string as described above, and sorts the symbol string (a plurality of symbols included in the symbol string) so that entropy decoding is not performed on a plurality of codewords converted from a plurality of symbols having a dependency relationship (for example, the symbol ML<b>0</b> and symbol CN<b>0</b>, or the like) in the same cycle in the decompression device <b>2</b><i>f </i>(the first and second channels).</p><p id="p-0305" num="0303">Furthermore, the decompression device <b>2</b><i>f </i>according to the present embodiment includes a notification unit <b>29</b> and a sorting unit <b>30</b>. The notification unit <b>29</b> inputs symbols converted from codewords included in packets by a first decoding unit <b>24</b> and a second decoding unit <b>27</b> from the first decoding unit <b>24</b> and the second decoding unit <b>27</b>, and outputs the symbols to a deinterleaving unit <b>28</b>. In addition, in a case where the codeword ML&#x2032; (the codeword converted from the symbol ML) is converted to the symbol ML in a predetermined cycle in at least one of the first and second channels (that is, the symbol ML is input from the first decoding unit <b>24</b> or the second decoding unit <b>27</b>), the notification unit <b>29</b> notifies at least one of the first decoding unit <b>24</b> and the second decoding unit <b>27</b> that entropy decoding is performed on the codeword CN&#x2032; (the codeword converted from the symbol CN) in the next cycle.</p><p id="p-0306" num="0304">In this case, the first decoding unit <b>24</b> and the second decoding unit <b>27</b> perform entropy decoding on the codeword CN according to the notification from the notification unit <b>29</b>, and converts the codeword CN&#x2032; to the symbol CN.</p><p id="p-0307" num="0305">Note that in the present embodiment, the symbol string output from the deinterleaving unit <b>28</b> is a symbol string in which a plurality of symbols are sorted by the sorting unit <b>19</b> included in the compression device <b>2</b><i>e </i>described above.</p><p id="p-0308" num="0306">Consequently, the sorting unit <b>30</b> outputs the symbol string before the sort of the symbols by the sorting unit <b>19</b> by sorting the symbol string (the symbols included in the symbol string) output from the deinterleaving unit <b>28</b>.</p><p id="p-0309" num="0307">Hereinafter, an example of an operation of a compression device <b>2</b><i>e </i>and a decompression device <b>2</b><i>f </i>according to the present embodiment will be described. Here, an operation of the sorting unit <b>19</b> included in the compression device <b>2</b><i>e </i>and the notification unit <b>29</b> and the sorting unit <b>30</b> included in the decompression device <b>2</b><i>f </i>will be mainly described.</p><p id="p-0310" num="0308">First, the operation of the sorting unit <b>19</b> included in the compression device <b>2</b><i>e </i>will be described with reference to <figref idref="DRAWINGS">FIG. <b>20</b></figref>. Here, it is assumed that the symbol string <b>201</b> illustrated in <figref idref="DRAWINGS">FIG. <b>18</b></figref> described above is input to the sorting unit <b>19</b>.</p><p id="p-0311" num="0309">Here, there is a dependency relationship between the symbol ML, the symbol CN, and the symbol EX as described above. The symbol ML is a symbol that affects entropy decoding of the codeword CN&#x2032; and the codeword EX&#x2032; converted from the symbol CN and the symbol EX by entropy coding, and thus it can be said that the symbol ML is the source of dependency in the dependency relationship. On the other hand, the symbol CN and the symbol EX can be said to be symbols that are dependent in the dependency relationship.</p><p id="p-0312" num="0310">In this case, as illustrated in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the sorting unit <b>19</b> classifies the symbols S<b>0</b> to S<b>7</b> included in the symbol string <b>201</b> into a group of symbols that are the source of dependency (hereinafter referred to as &#x201c;first group&#x201d;) and into a group of symbols that are dependent (hereinafter referred to as &#x201c;second group&#x201d;). Note that the symbol L is a symbol that has no dependency relationship with other symbols (that is, is not a symbol that is the source of dependency or a symbol that is dependent), but the symbol L<b>1</b> is classified into the first group.</p><p id="p-0313" num="0311">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, among the symbols S<b>0</b> to S<b>7</b>, the symbols S<b>0</b>, S<b>3</b>, S<b>4</b>, and S<b>5</b> are classified into the first group and the symbols S<b>1</b>, S<b>2</b>, S<b>6</b>, and S<b>7</b> are classified into the second group.</p><p id="p-0314" num="0312">Note that the symbols S<b>0</b>, S<b>3</b>, S<b>4</b>, and S<b>5</b> classified into the first group and the symbols S<b>1</b>, S<b>2</b>, S<b>6</b>, and S<b>7</b> classified into the second group are stored in buffers (not illustrated), respectively.</p><p id="p-0315" num="0313">Here, in a case where the compression device <b>2</b><i>e </i>and the decompression device <b>2</b><i>f </i>operate as described in the first embodiment described above, for example, entropy decoding is performed in parallel in the same cycle on two codewords converted from the symbols arranged in the same order in the first and second sub-streams.</p><p id="p-0316" num="0314">Consequently, the sorting unit <b>19</b>, for example, sorts the symbols S<b>0</b> to S<b>7</b> so that the order of the symbols classified into the first group (the symbols that are the source of dependency) and the order of the symbols classified into the second group (the symbols that dependent) are different in the first and second sub-streams.</p><p id="p-0317" num="0315">In this case, assuming that an interleaving unit <b>11</b> distributes the even-numbered symbols to the first channel and the odd-numbered symbols to the second channel as described in the first embodiment described above, in a case where the symbol that is the source of dependency is arranged at the even-numbered position in the symbol string and the symbol that is dependent is arranged at the odd-numbered position following the even-numbered position, the order of the symbol that is the source of dependency in the first sub-stream is the same as the order of the symbol that is dependent in the second sub-stream.</p><p id="p-0318" num="0316">Consequently, in the example illustrated in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, two symbols S<b>0</b> and S<b>3</b> out of the symbols S<b>0</b>, S<b>3</b>, S<b>4</b>, and S<b>5</b> classified into the first group are arranged at the head of the symbol string, and two symbols S<b>1</b> and S<b>2</b> out of the symbols S<b>1</b>, S<b>2</b>, S<b>6</b>, and S<b>7</b> classified into the second group are arranged next to the symbols S<b>0</b> and S<b>3</b>. Similarly, the sorting unit <b>19</b> arranges two symbols S<b>4</b> and S<b>5</b> out of the symbols S<b>0</b>, S<b>3</b>, S<b>4</b>, and S<b>5</b> classified into the first group next to the symbols S<b>1</b> and S<b>2</b>, and two symbols S<b>6</b> and S<b>7</b> out of the symbols S<b>1</b>, S<b>2</b>, S<b>6</b>, and S<b>7</b> classified into the second group next to the symbols S<b>4</b> and S<b>5</b>.</p><p id="p-0319" num="0317">As a result, as illustrated in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the symbol string <b>201</b> including the symbols S<b>0</b> to S<b>7</b> in this order is sorted into a symbol string <b>202</b> including the symbols S<b>0</b>, S<b>3</b>, S<b>1</b>, S<b>2</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, and S<b>7</b> in this order.</p><p id="p-0320" num="0318">For example, in the compression device <b>2</b><i>e </i>according to the first embodiment, the interleaving unit <b>11</b> divides the symbols S<b>0</b> to S<b>7</b> included in the symbol string <b>201</b> into the first sub-stream (the symbols S<b>0</b>, S<b>2</b>, S<b>4</b>, and S<b>6</b>) and the second sub-stream (the symbols S<b>1</b>, S<b>3</b>, S<b>5</b>, and S<b>7</b>) and distributes the first sub-stream and the second sub-stream to the first and second channels, and thus, for example, entropy decoding is performed on two codewords converted from the symbol S<b>0</b> (the symbol ML<b>0</b> that is the source of dependency) and the symbol S<b>1</b> (the symbol CN<b>0</b> that is dependent) in parallel in the same cycle, and the throughput of the decompression device <b>2</b><i>f </i>cannot be improved.</p><p id="p-0321" num="0319">On the other hand, in the compression device <b>2</b><i>e </i>according to the present embodiment, by sorting the symbol string <b>201</b> into the symbol string <b>202</b> as described in <figref idref="DRAWINGS">FIG. <b>20</b></figref>, the interleaving unit <b>11</b> divides the symbol string <b>202</b> into the first sub-stream (the symbols S<b>0</b>, S<b>1</b>, S<b>4</b>, and S<b>6</b>) and the second sub-stream (the symbols S<b>3</b>, S<b>2</b>, S<b>5</b>, and S<b>7</b>), and distributes the first sub-stream to the first channel and the second sub-stream to the second channel.</p><p id="p-0322" num="0320">As a result, for example, entropy decoding of the codeword ML<b>0</b>&#x2032; converted from the symbol ML<b>0</b>, which is the source of dependency, is performed in parallel with entropy decoding of the codeword L<b>1</b>&#x2032; converted from the symbol L<b>1</b>. Furthermore, entropy decoding of the codeword CN<b>0</b>&#x2032; converted from the symbol CN<b>0</b>, which is dependent, is performed in parallel with entropy decoding of the codeword EX<b>0</b>&#x2032; converted from the symbol EX<b>0</b>.</p><p id="p-0323" num="0321">That is, in a case where the symbol string <b>201</b> is sorted into the symbol string <b>202</b> as described above, it is possible to prevent entropy decoding of the codeword ML<b>0</b>&#x2032; converted from the symbol ML<b>0</b> that is the source of dependency from being performed in parallel with entropy decoding of the codeword CN<b>0</b>&#x2032; converted from the symbol CN<b>0</b> that is dependent (or the codeword EX<b>0</b>&#x2032; converted from the symbol EX<b>0</b>) in the same cycle.</p><p id="p-0324" num="0322">Note that the first coding unit <b>12</b> and the second coding unit <b>15</b> perform entropy coding on a plurality of symbols constituting the first and second sub-streams, and entropy coding is performed using different coding tables based on the type of the symbol. In other words, for example, entropy coding of the symbol ML<b>0</b> is performed using the coding table corresponding to the symbol ML<b>0</b> (that is, literal information). The same holds true for the case of performing entropy coding on other symbols. Note that the coding table is information for performing appropriate entropy coding on each symbol (that is, for converting the symbol to a codeword), and is only required to, for example, be held in advance in a first coding unit <b>12</b> and a second coding unit <b>15</b>.</p><p id="p-0325" num="0323">Although the description is omitted in the first embodiment described above, entropy coding is also performed in the first coding unit <b>12</b> and the second coding unit <b>15</b> in the first embodiment by using the coding tables.</p><p id="p-0326" num="0324">The operation of the compression device <b>2</b><i>e </i>according to the present embodiment is similar to that of the first embodiment described above, except that the symbol string is sorted.</p><p id="p-0327" num="0325">Next, the operation of the notification unit <b>29</b> included in the decompression device <b>2</b><i>f </i>will be described with reference to <figref idref="DRAWINGS">FIG. <b>21</b></figref>. <figref idref="DRAWINGS">FIG. <b>21</b></figref> illustrates, for each cycle, symbols converted from codewords in the first and second channels of the decompression device <b>2</b><i>f </i>that inputs the compressed stream output from the compression device <b>2</b><i>e </i>as a result of entropy coding on the symbol string <b>202</b> illustrated in <figref idref="DRAWINGS">FIG. <b>20</b></figref>. Note that <figref idref="DRAWINGS">FIG. <b>21</b></figref> simply illustrates the cycle as the timing when the codeword is converted to a symbol, and the cycle in which the process of storing a packet in response to a packet request described in the first embodiment in a first packet buffer <b>23</b> and a second packet buffer <b>26</b> is omitted.</p><p id="p-0328" num="0326">As illustrated in <figref idref="DRAWINGS">FIG. <b>21</b></figref>, in the cycle <b>0</b>, the codeword ML<b>0</b>&#x2032; is converted to the symbol ML<b>0</b> in the first channel, and the codeword L<b>1</b>&#x2032; is converted to the symbol L<b>1</b> in the second channel.</p><p id="p-0329" num="0327">In this case, as the symbol ML<b>0</b> (the symbol that is the source of dependency) is obtained, the notification unit <b>29</b> notifies the first channel (the first decoding unit <b>24</b>) that entropy decoding of the codeword CN<b>0</b>&#x2032; converted from the symbol CN<b>0</b> that is dependent on the symbol ML<b>0</b> is performed in the next cycle <b>1</b>. Similarly, the notification unit <b>29</b> notifies the second channel (the second decoding unit <b>27</b>) that entropy decoding of the codeword EX<b>0</b>&#x2032; converted from the symbol EX<b>0</b> that is dependent on the symbol ML<b>0</b> is performed in the next cycle <b>1</b>.</p><p id="p-0330" num="0328">Here, it is assumed that the first decoding unit <b>24</b> and the second decoding unit <b>27</b> hold in advance different decoding tables based on the type of the codeword as information for converting a codeword to a symbol. In this case, in the cycle <b>1</b>, the first decoding unit <b>24</b> uses the decoding table according to the notification from the notification unit <b>29</b> (that is, the decoding table corresponding to the codeword CN&#x2032;) to convert the codeword CN<b>0</b>&#x2032; to the symbol CN<b>0</b>. Similarly, in the cycle <b>1</b>, the second decoding unit <b>27</b> uses the decoding table according to the notification from the notification unit <b>29</b> (that is, the decoding table corresponding to the codeword EX&#x2032;) to convert the codeword EX<b>0</b>&#x2032; to the symbol EX<b>0</b>.</p><p id="p-0331" num="0329">As described above, in a case where the past data that matches the dictionary coding target data is present in the history buffer in dictionary coding, if it is predetermined that the results of dictionary coding are output in the order of the match length information (the symbol ML), the first distance information (the symbol CN), and the second distance information (the symbol EX), the notification unit <b>29</b> can specify (detect) that entropy decoding of the codeword CN<b>0</b>&#x2032; is performed in the first channel and entropy decoding of the codeword EX<b>0</b>&#x2032; is performed in the second channel (that is, channels that perform entropy decoding of the codeword CN<b>0</b>&#x2032; and the codeword EX<b>0</b>&#x2032;).</p><p id="p-0332" num="0330">Although detailed description is omitted, since the codeword ML<b>3</b>&#x2032; is converted to the symbol ML<b>3</b> in the second channel in the cycle <b>2</b>, the notification unit <b>29</b> notifies the first channel (the first decoding unit <b>24</b>) that entropy decoding is performed on the codeword CN<b>3</b>&#x2032; converted from the symbol CN<b>3</b> that is dependent on the symbol ML<b>3</b> in the next cycle <b>3</b>, and notifies the second channel (the second decoding unit <b>27</b>) that entropy decoding is performed on the codeword EX<b>3</b>&#x2032; converted from the symbol EX<b>3</b> that is dependent on the symbol ML<b>3</b> in the next cycle <b>3</b>. As a result, the first decoding unit <b>24</b> can convert the codeword CN<b>3</b>&#x2032; to the symbol CN<b>3</b> in the cycle <b>3</b> using the decoding table according to the notification from the notification unit <b>29</b>. Similarly, the second decoding unit <b>27</b> can convert the codeword EX<b>3</b>&#x2032; to the symbol EX<b>3</b> in the cycle <b>3</b> using the decoding table according to the notification from the notification unit <b>29</b>.</p><p id="p-0333" num="0331">Next, the operation of the sorting unit <b>30</b> included in the decompression device <b>2</b><i>f </i>will be described. Here, the description will be made with reference to <figref idref="DRAWINGS">FIG. <b>20</b></figref> for the sake of convenience.</p><p id="p-0334" num="0332">First, the symbol string output from the deinterleaving unit <b>28</b> is a symbol string in which symbols are sorted by the sorting unit <b>19</b> included in the compression device <b>2</b><i>e. </i></p><p id="p-0335" num="0333">Here, it is assumed that the symbol string <b>202</b> including the symbols S<b>0</b>, S<b>3</b>, S<b>1</b>, S<b>2</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, and S<b>7</b> illustrated in <figref idref="DRAWINGS">FIG. <b>20</b></figref> in order is output from the deinterleaving unit <b>28</b>. In this case, the sorting unit <b>30</b> sorts the symbol string <b>202</b> into the symbol string <b>201</b> by performing the process reverse to that of the sorting unit <b>19</b> described above.</p><p id="p-0336" num="0334">Specifically, the sorting unit <b>30</b> classifies the symbols included in the symbol string <b>202</b> into the first and second groups described above. In this case, the symbols S<b>0</b>, S<b>3</b>, S<b>4</b>, and S<b>5</b> are classified into the first group, and the symbols S<b>1</b>, S<b>2</b>, S<b>6</b>, and S<b>7</b> are classified into the second group.</p><p id="p-0337" num="0335">The sorting unit <b>30</b> reproduces the arrangement in the symbol string <b>201</b> (the arrangement of the symbols S<b>0</b> to S<b>7</b> in the symbol string <b>201</b>) by arranging the symbols classified into the first and second groups in order from the head (that is, in the input order) as described above.</p><p id="p-0338" num="0336">Specifically, the head symbol of the first group is the symbol S<b>0</b>, and the symbol S<b>0</b> is the symbol ML<b>0</b>. On the other hand, the head symbol of the second group is the symbol S<b>1</b>, and the symbol S<b>1</b> is the symbol CN<b>0</b>. In this case, since the symbol CN is a symbol following the symbol ML, the symbol S<b>0</b> (that is, the symbol ML<b>0</b>) is arranged at the head of the symbol string, and the symbol S<b>1</b> (that is, the symbol CN<b>0</b>) is arranged next to the symbol S<b>0</b>.</p><p id="p-0339" num="0337">Next, the symbol next to the symbol S<b>0</b> in the first group is the symbol S<b>3</b>, and the symbol S<b>3</b> is the symbol L<b>1</b>. On the other hand, the symbol next to the symbol S<b>1</b> in the second group is the symbol S<b>2</b>, and the symbol S<b>2</b> is the symbol EX<b>0</b>. In this case, since the symbol EX<b>0</b> follows the symbol S<b>1</b> (the symbol CN<b>0</b>) arranged at the end of the symbol string as described above, the symbol S<b>2</b> is arranged next to the symbol S<b>1</b>.</p><p id="p-0340" num="0338">Note that the symbol next to the symbol S<b>2</b> in the second group is the symbol S<b>6</b>, and the symbol S<b>6</b> is the symbol CN<b>3</b>. Since the symbol CN follows the symbol ML, the symbol S<b>3</b> (that is, the symbol L<b>1</b>) is arranged next to the symbol S<b>2</b> that is arranged at the end of the symbol string as described above.</p><p id="p-0341" num="0339">Next, the symbol next to the symbol S<b>3</b> in the first group is the symbol S<b>4</b>, and the symbol S<b>4</b> is the symbol L<b>2</b>. As described above, since the symbol S<b>3</b> arranged at the end of the symbol string is the symbol L<b>1</b> and the symbol S<b>6</b> (the symbol CN<b>3</b>) cannot be arranged next to the symbol L<b>1</b>, the symbol S<b>4</b> is arranged next to the symbol S<b>3</b>.</p><p id="p-0342" num="0340">Furthermore, the symbol next to the symbol S<b>4</b> in the first group is the symbol S<b>5</b>, and the symbol S<b>5</b> is the symbol ML<b>3</b>. Since the symbol S<b>6</b> of the second group is the symbol CN<b>3</b> following the symbol ML<b>3</b>, the symbol S<b>5</b> (that is, the symbol ML<b>3</b>) is arranged next to the symbol S<b>4</b> that is arranged at the end of the symbol string.</p><p id="p-0343" num="0341">After the symbol S<b>5</b> is arranged in this way, the symbol S<b>6</b> (the symbol CN<b>3</b>) and the symbol S<b>7</b> (the symbol EX<b>3</b>) of the second group can be arranged in order in the symbol string.</p><p id="p-0344" num="0342">As the process described above is performed in the sorting unit <b>30</b>, the symbol string <b>202</b> can be sorted into the symbol string <b>201</b>.</p><p id="p-0345" num="0343">In the present embodiment, for convenience of description, the compression device <b>2</b><i>e </i>performs entropy coding in the first and second channels, and the decompression device <b>2</b><i>f </i>performs entropy decoding in the first and second channels. However, the number of the channels can be three or more.</p><p id="p-0346" num="0344">Hereinafter, the operation of the sorting unit <b>19</b> included in the compression device <b>2</b><i>e </i>in a case where the number of channels is eight will be briefly described with reference to <figref idref="DRAWINGS">FIG. <b>22</b></figref>. Here, as illustrated in <figref idref="DRAWINGS">FIG. <b>22</b></figref>, it is assumed that a symbol string <b>301</b> including a plurality of symbols S<b>0</b> to S<b>17</b> is sorted.</p><p id="p-0347" num="0345">First, the sorting unit <b>19</b> classifies the symbols S<b>0</b> to S<b>17</b> included in the symbol string <b>301</b> into first and second groups. In this case, the symbols S<b>0</b>, S<b>1</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, S<b>9</b>, S<b>12</b>, S<b>13</b>, S<b>14</b>, and S<b>17</b> are classified in the first group, and the symbols S<b>2</b>, S<b>3</b>, S<b>7</b>, S<b>8</b>, S<b>10</b>, Sl<b>1</b>, S<b>15</b>, and S<b>16</b> are classified into the second group.</p><p id="p-0348" num="0346">Here, assuming that the interleaving unit <b>11</b> distributes the symbols to eight channels (hereinafter referred to as &#x201c;channels <b>0</b> to <b>7</b>&#x201d;) in order from the head symbol of the symbol string, the sorting unit <b>19</b> arranges eight symbols S<b>0</b>, S<b>1</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, S<b>9</b>, S<b>12</b>, and S<b>13</b> from the head of the symbols classified into the first group at the head of the symbol string, thereby generating a symbol string <b>302</b><i>a</i>. These eight symbols are symbols that are converted from codewords in the first cycle in the channel <b>0</b> to channel <b>8</b> of the decompression device <b>2</b><i>f. </i></p><p id="p-0349" num="0347">Next, the sorting unit <b>19</b> determines the number of symbols classified into the second group to be arranged based on the number of the symbols ML among the symbols arranged in the symbol string <b>302</b><i>a </i>(the symbols classified into the first group). In the present embodiment, since there are two symbols CN and EX that are dependent on one symbol ML that is the source of dependency, the number of symbols classified into the second group to be arranged is the number of symbols ML&#xd7;2.</p><p id="p-0350" num="0348">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>22</b></figref>, the number of symbols ML arranged in the symbol string <b>302</b><i>a </i>is three, and thus six is determined as the number of symbols classified into the second group to be arranged.</p><p id="p-0351" num="0349">In this case, the sorting unit <b>19</b> takes out six symbols CN<b>1</b> (the symbol S<b>2</b>), symbol EX<b>1</b> (the symbol S<b>3</b>), symbol CN<b>4</b> (the symbol S<b>7</b>), and symbol EX<b>4</b> (the symbol S<b>8</b>), symbol CN<b>5</b> (the symbol S<b>10</b>), and symbol EX<b>5</b> (the symbol Sl<b>1</b>) from the head of the symbols classified into the second group, and adds these six symbols to the symbol string <b>302</b><i>a</i>. As a result, a symbol string <b>302</b><i>b </i>is generated.</p><p id="p-0352" num="0350">The remaining symbols classified into the first group are then added to the symbol string <b>202</b><i>b</i>, and the remaining symbols classified into the second group are further added after the added symbols.</p><p id="p-0353" num="0351">As a result, the sorting unit <b>19</b> can sort the symbol string <b>201</b> including the symbols S<b>0</b> to S<b>17</b> in order into a symbol string <b>302</b><i>c </i>including the symbols S<b>0</b>, S<b>1</b>, S<b>4</b>, S<b>5</b>, S<b>6</b>, S<b>9</b>, S<b>12</b>, S<b>13</b>, S<b>2</b>, S<b>3</b>, S<b>7</b>, S<b>8</b>, S<b>10</b>, Sl<b>1</b>, S<b>14</b>, S<b>17</b>, S<b>15</b>, and S<b>16</b> in order.</p><p id="p-0354" num="0352">Here, <figref idref="DRAWINGS">FIG. <b>23</b></figref> illustrates, for each cycle, symbols converted from codewords in the channel <b>0</b> to the channel <b>7</b> of the decompression device <b>2</b><i>f </i>that inputs the compressed stream output from the compression device <b>2</b><i>e </i>as a result of entropy coding on the symbol string <b>302</b><i>c </i>illustrated in <figref idref="DRAWINGS">FIG. <b>22</b></figref>.</p><p id="p-0355" num="0353">As illustrated in <figref idref="DRAWINGS">FIG. <b>23</b></figref>, in the cycle <b>0</b>, the codeword ML<b>1</b>&#x2032; is converted to the symbol ML<b>1</b> in the channel <b>1</b>, the codeword ML<b>4</b>&#x2032; is converted to the symbol ML<b>4</b> in the channel <b>4</b>, and the codeword ML<b>5</b>&#x2032; is converted to the symbol ML<b>5</b> in the channel <b>5</b>.</p><p id="p-0356" num="0354">In this case, the notification unit <b>29</b> counts the number of symbols ML converted from the codeword ML&#x2032; in the cycle <b>0</b>, and specifies (detects) the channel to be notified that entropy decoding is performed on the codewords CN&#x2032; and EX&#x2032; in the cycle <b>1</b> following the cycle <b>0</b> (hereinafter referred to as &#x201c;notification target channel&#x201d;) based on the counted number of symbols ML.</p><p id="p-0357" num="0355">Note that in a case where the symbol string <b>301</b> is sorted into the symbol string <b>302</b><i>c </i>as described in <figref idref="DRAWINGS">FIG. <b>22</b></figref>, the notification target channels are channels <b>0</b> to m, and m is calculated by &#x201c;number of counted symbols ML&#xd7;2&#x2212;1&#x201d;.</p><p id="p-0358" num="0356">In the example illustrated in <figref idref="DRAWINGS">FIG. <b>23</b></figref>, m is five because the number of symbols ML converted from the codeword ML&#x2032; in the cycle <b>0</b> is three (the symbol ML<b>1</b>, the symbol ML<b>3</b>, and the symbol ML<b>4</b>).</p><p id="p-0359" num="0357">In this case, the notification unit <b>29</b> specifies the channels <b>0</b> to <b>5</b> as notification target channels, and notifies the channels <b>0</b> to <b>5</b> that entropy decoding is performed on the codewords CN&#x2032; and EX&#x2032; in the next cycle <b>1</b>.</p><p id="p-0360" num="0358">Note that in the example illustrated in <figref idref="DRAWINGS">FIG. <b>23</b></figref>, the channels <b>0</b>, <b>2</b>, and <b>4</b> are notified that entropy coding is performed on the codeword CN&#x2032;, and the channels <b>1</b>, <b>3</b>, and <b>5</b> are notified that entropy coding is performed on the codeword EX&#x2032;. As described above, entropy decoding using the decoding tables according to the notifications from the notification unit <b>29</b> is performed in each channel (the decoding unit in each channel).</p><p id="p-0361" num="0359">Further, in a case where the codeword ML<b>1</b>&#x2032; is converted to the symbol ML<b>1</b> in the channel <b>1</b> during the cycle <b>1</b>, the channel <b>0</b> is notified that entropy decoding is performed on the codeword CN&#x2032; in the cycle <b>2</b> following the cycle <b>1</b>, and the channel <b>1</b> is notified that entropy decoding is performed on the codeword EX&#x2032; in the cycle <b>2</b>.</p><p id="p-0362" num="0360">As described above, in the compression device <b>2</b><i>e </i>according to the present embodiment, the symbol string is sorted so that entropy decoding of a plurality of codewords (third codewords) converted from a plurality of symbols (third symbols) that have a dependency relationship in the symbol string is not performed in the same cycle, and the symbol string is divided into the first sub-stream and the second sub-stream based on the sorted symbol string.</p><p id="p-0363" num="0361">In this case, for example, the symbol string is sorted so that the order of the symbol ML that is the source of dependency in the first (or second) sub-stream is different from the order of the symbols CN and EX that are dependent in the second (or first) sub-stream.</p><p id="p-0364" num="0362">In the present embodiment, with such a configuration, entropy decoding of the codeword ML&#x2032; converted from the symbol ML is not performed in parallel with entropy decoding of the codewords CN&#x2032; and EX&#x2032; converted from the symbols CN and EX (that is, there is no dependency relationship between channels in the same cycle). As a result, it is possible to avoid the situation in which entropy decoding of the codeword ML&#x2032; and entropy decoding of the codewords CN&#x2032; and EX&#x2032; cannot be performed in the same cycle, and the throughput of the decompression device <b>2</b><i>f </i>can be improved.</p><p id="p-0365" num="0363">Note that in the decompression device <b>2</b><i>f </i>according to the present embodiment, for example, in a case where the symbol converted from a codeword in the cycle <b>0</b> (the first cycle) is the symbol ML (a symbol that has a dependency relationship with other symbols CN and EX), at least one of the first and second channels (the first decoding unit <b>24</b> and the second decoding unit <b>27</b>) is notified that entropy decoding of the codewords CN&#x2032; and EX&#x2032; converted from the symbols CN and EX is performed in the cycle <b>1</b> following the cycle <b>0</b> (the second cycle), and at least one of the first decoding unit <b>24</b> and the second decoding unit <b>27</b> performs entropy decoding according to the notification.</p><p id="p-0366" num="0364">In this case, the channel in which entropy decoding is performed on the codewords CN&#x2032; and EX&#x2032; in the cycle <b>1</b> is specified, for example, based on the number of symbols that are converted from the codewords in the cycle <b>0</b> and the source of dependency.</p><p id="p-0367" num="0365">Furthermore, in the compression device <b>2</b><i>e</i>, the first coding unit <b>12</b> and the second coding unit <b>15</b> perform entropy coding on each symbol (each piece of the literal information, the match length information, and the distance information) using a coding table based on the type of the symbol. In the decompression device <b>2</b><i>f</i>, the first decoding unit <b>24</b> and the second decoding unit <b>27</b> perform entropy decoding using the decoding table according to the notification (that is, the decoding table based on the type of the codeword).</p><p id="p-0368" num="0366">In the present embodiment, with the configuration described above, it is possible to appropriately perform entropy decoding in the decompression device <b>2</b><i>f. </i></p><p id="p-0369" num="0367">Note that the present embodiment has described the case where the configuration in which the symbol string is sorted is adopted in the first embodiment, but the present embodiment can be combined with the second embodiment described above. That is, the present embodiment can have a configuration in which the symbol string is sorted in the second embodiment described above.</p><p id="p-0370" num="0368">According to at least one embodiment described above, it is possible to provide a compression device and a decompression device capable of improving the compression efficiency.</p><p id="p-0371" num="0369">While certain embodiments have been described, these embodiments have been presented by way of example only, and are not intended to limit the scope of the inventions. Indeed, the novel embodiments described herein may be embodied in a variety of other forms; furthermore, various omissions, substitutions and changes in the form of the embodiments described herein may be made without departing from the spirit of the inventions. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the inventions.</p><?detailed-description description="Detailed Description" end="tail"?></description><us-math idrefs="MATH-US-00001" nb-file="US20230006689A1-20230105-M00001.NB"><img id="EMI-M00001" he="38.78mm" wi="96.27mm" file="US20230006689A1-20230105-M00001.TIF" alt="embedded image " img-content="math" img-format="tif"/></us-math><us-claim-statement>What is claimed is:</us-claim-statement><claims id="claims"><claim id="CLM-00001" num="00001"><claim-text><b>1</b>. A compression device comprising:<claim-text>an interleaving unit configured to divide a symbol string which is input into a plurality of first symbols and a plurality of second symbols different from the first symbols;</claim-text><claim-text>a first coding unit configured to perform coding on the first symbols to convert the first symbols to a plurality of first codewords;</claim-text><claim-text>a first packet generating unit configured to generate first packets, the first packets including the first codewords;</claim-text><claim-text>a first request generating unit configured to generate first packet requests including sizes of variable length packets based on code length of each of the first codewords;</claim-text><claim-text>a second coding unit configured to perform coding on the second symbols to convert the second symbols to a plurality of second codewords;</claim-text><claim-text>a second packet generating unit configured to generate second packets, the second packets including the second codewords;</claim-text><claim-text>a second request generating unit configured to generate second packet requests including sizes of variable length packets based on code length of each of the second codewords; and</claim-text><claim-text>a multiplexer configured to cut out first variable length packets from the first packets based on the sizes of the variable length packets included in the first packet requests, cut out second variable length packets from the second packets based on the sizes of the variable length packets included in the second packet requests, and output a compressed stream including the first and second variable length packets.</claim-text></claim-text></claim><claim id="CLM-00002" num="00002"><claim-text><b>2</b>. The compression device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>,<claim-text>wherein a decompression device configured to output the symbol string from the compressed stream which is output comprises a first decoding unit configured to perform decoding on a plurality of first codewords included in first variable length packets included in the compressed stream to convert the first codewords to the first symbols, and a second decoding unit configured to perform decoding on a plurality of second codewords included in second variable length packets included in the compressed stream to convert the second codewords to the second symbols,</claim-text><claim-text>the first request generating unit is configured to generate the first packet requests by simulating the state of a first buffer configured to store the first variable length packets when the first decoding unit performs decoding on the first codewords, and</claim-text><claim-text>the second request generating unit is configured to generate the second packet requests by simulating the state of a second buffer that stores the second variable length packets when the second decoding unit performs decoding on the second codewords.</claim-text></claim-text></claim><claim id="CLM-00003" num="00003"><claim-text><b>3</b>. The compression device according to <claim-ref idref="CLM-00002">claim 2</claim-ref>,<claim-text>wherein the first request generating unit is configured to determine the sizes of variable length packets included in the first packet requests based on the remaining amount of packets stored in the first buffer simulated, and</claim-text><claim-text>the second request generating unit is configured to determine the sizes of variable length packets included in the second packet requests based on the remaining amount of packets stored in the second buffer simulated.</claim-text></claim-text></claim><claim id="CLM-00004" num="00004"><claim-text><b>4</b>. The compression device according to <claim-ref idref="CLM-00003">claim 3</claim-ref>,<claim-text>wherein the first request generating unit is configured to determine the sizes of variable length packets included in the first packet requests in a manner that the remaining amount of packets stored in the first buffer simulated is more than or equal to the maximum code length, and</claim-text><claim-text>the second request generating unit is configured to determine the sizes of variable length packets included in the second packet requests in a manner that the remaining amount of packets stored in the second buffer simulated is more than or equal to the maximum code length.</claim-text></claim-text></claim><claim id="CLM-00005" num="00005"><claim-text><b>5</b>. The compression device according to <claim-ref idref="CLM-00002">claim 2</claim-ref>,<claim-text>wherein the first request generating unit is configured to determine the sizes of variable length packets included in the first packet requests based on the amount of processed packets stored in the first buffer simulated, and</claim-text><claim-text>the second request generating unit is configured to determine the sizes of variable length packets included in the second packet requests based on the amount of processed packets stored in the second buffer simulated.</claim-text></claim-text></claim><claim id="CLM-00006" num="00006"><claim-text><b>6</b>. The compression device according to <claim-ref idref="CLM-00002">claim 2</claim-ref>, wherein at the head of the compressed stream first variable length packets with the sizes based on the capacity of the first buffer and second variable length packets with the sizes based on the capacity of the second buffer are located.</claim-text></claim><claim id="CLM-00007" num="00007"><claim-text><b>7</b>. The compression device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>,<claim-text>wherein in a case where fixed length packets are generated in order from the head of the first codewords, the first request generating unit is configured to judge whether each of the first codewords crosses the boundaries of fixed length packets, and determine the sizes of variable length packets included in the first packet requests according to the judgements, and</claim-text><claim-text>in the case where fixed length packets are generated in order from the head of the second codewords, the second request generating unit is configured to judge whether each of the second codewords crosses the boundaries of fixed length packets, and determine the sizes of variable length packets included in the second packet requests according to the judgements.</claim-text></claim-text></claim><claim id="CLM-00008" num="00008"><claim-text><b>8</b>. The compression device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>,<claim-text>wherein the first coding unit is configured to perform variable length coding on the first symbols, and</claim-text><claim-text>the second coding unit is configured to perform variable length coding on the second symbols.</claim-text></claim-text></claim><claim id="CLM-00009" num="00009"><claim-text><b>9</b>. The compression device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, wherein the sizes of variable length packets included in the first packet requests and the sizes of variable length packets included in the second packet requests are selected from a plurality of predetermined sizes.</claim-text></claim><claim id="CLM-00010" num="00010"><claim-text><b>10</b>. The compression device according to <claim-ref idref="CLM-00001">claim 1</claim-ref> further comprising<claim-text>a sorting unit configured to sort the symbol string in a manner that decoding of a plurality of third codewords converted from a plurality of third symbols in the symbol string which are dependent of each other is not performed in a same cycle in a decompression device,</claim-text><claim-text>wherein the interleaving unit is configured to divide the symbol strings into the first symbols and the second symbols according to the symbol string sorted.</claim-text></claim-text></claim><claim id="CLM-00011" num="00011"><claim-text><b>11</b>. The compression device according to <claim-ref idref="CLM-00010">claim 10</claim-ref>,<claim-text>wherein a plurality of third symbols that have the dependency relationship include a symbol that is a source of dependency and a symbol that is dependent, and</claim-text><claim-text>the order of the symbol that is the source of dependency in the first symbols or the second symbols is different from the order of the symbol that is dependent on the first symbols or the second symbols.</claim-text></claim-text></claim><claim id="CLM-00012" num="00012"><claim-text><b>12</b>. The compression device according to <claim-ref idref="CLM-00011">claim 11</claim-ref>,<claim-text>wherein the symbol string includes the result of dictionary coding on uncompressed data,</claim-text><claim-text>the dictionary coding is a coding method that converts the uncompressed data to relative references of data older than the uncompressed data,</claim-text><claim-text>the result of the dictionary encoding includes first information indicating the uncompressed data in a case where the uncompressed data does not match the past data, second information indicating a length at which the uncompressed data matches the past data in a case where the uncompressed data matches the past data, and third information indicating a position of the past data,</claim-text><claim-text>the symbol that is the source of dependency includes the second information, and</claim-text><claim-text>the symbol that is dependent includes the third information.</claim-text></claim-text></claim><claim id="CLM-00013" num="00013"><claim-text><b>13</b>. The compression device according to <claim-ref idref="CLM-00012">claim 12</claim-ref>, wherein the first and second coding units are configured to perform coding on each piece of the first to third information using different coding tables.</claim-text></claim><claim id="CLM-00014" num="00014"><claim-text><b>14</b>. A decompression device configured to input a compressed stream output from the compression device according to <claim-ref idref="CLM-00001">claim 1</claim-ref>, the decompression device comprising:<claim-text>a demultiplexer configured to cut out the first and second variable length packets from the compressed stream;</claim-text><claim-text>a third request generating unit configured to generate third packet requests including the sizes of variable length packets;</claim-text><claim-text>a first decoding unit configured to perform decoding on each of a plurality of first codewords included in first variable length packets output from the demultiplexer based on the third packet requests to convert the first codewords to the first symbols;</claim-text><claim-text>a fourth request generating unit configured to generate fourth packet requests including the sizes of variable length packets;</claim-text><claim-text>a second decoding unit configured to perform decoding on each of a plurality of second codewords included in second variable length packets output from the demultiplexer based on the fourth packet requests to convert the second codewords to the second symbols; and</claim-text><claim-text>a deinterleaving unit configured to output a symbol string including the first symbols and the second symbols.</claim-text></claim-text></claim><claim id="CLM-00015" num="00015"><claim-text><b>15</b>. The decompression device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, further comprising:<claim-text>a first buffer configured to store first variable length packets output from the demultiplexer based on the third packet requests; and</claim-text><claim-text>a second buffer configured to store second variable length packets output from the demultiplexer based on the fourth packet requests,</claim-text><claim-text>wherein the third request generating unit is configured to determine the sizes of a variable length packets included in the third packet requests based on the state of the first buffer, and</claim-text><claim-text>the fourth request generating unit is configured to determine the sizes of variable length packets included in the fourth packet requests based on the state of the second buffer.</claim-text></claim-text></claim><claim id="CLM-00016" num="00016"><claim-text><b>16</b>. The decompression device according to <claim-ref idref="CLM-00015">claim 15</claim-ref>,<claim-text>wherein the third request generating unit is configured to determine the sizes of variable length packets included in the third packet requests based on the remaining amount of packets data stored in the first buffer, and</claim-text><claim-text>the fourth request generating unit is configured to determine the sizes of variable length packets included in the fourth packet requests based on the remaining amount of packets data stored in the second buffer.</claim-text></claim-text></claim><claim id="CLM-00017" num="00017"><claim-text><b>17</b>. The decompression device according to <claim-ref idref="CLM-00016">claim 16</claim-ref>,<claim-text>wherein the third request generating unit is configured to determine the sizes of variable length packets included in the third packet requests in a manner that the remaining amount of packets data stored in the first buffer is more than or equal to the maximum code length, and</claim-text><claim-text>the fourth request generating unit is configured to determine the sizes of variable length packets included in the fourth packet requests in a manner that the remaining amount of packets data stored in the second buffer is more than or equal to the maximum code length.</claim-text></claim-text></claim><claim id="CLM-00018" num="00018"><claim-text><b>18</b>. The decompression device according to <claim-ref idref="CLM-00015">claim 15</claim-ref>,<claim-text>wherein the third request generating unit is configured to determine the sizes of variable length packets included in the third packet requests based on the processed amount of data in the first variable length packets stored in the first buffer, and</claim-text><claim-text>the fourth request generating unit is configured to determine the sizes of variable length packets included in the fourth packet requests based on the processed amount of data in the second variable length packets stored in the second buffer.</claim-text></claim-text></claim><claim id="CLM-00019" num="00019"><claim-text><b>19</b>. The decompression device according to <claim-ref idref="CLM-00015">claim 15</claim-ref>,<claim-text>wherein the first buffer is configured to store a first variable length packet that is located at the head of a plurality of first variable length packets included in the compressed stream and has a size based on the size of the first buffer before the first decoding unit performs decoding, and</claim-text><claim-text>the second buffer is configured to store a second variable length packet that is located at the head of a plurality of second variable length packets included in the compressed stream and has a size based on the size of the second buffer before the second decoding unit performs decoding.</claim-text></claim-text></claim><claim id="CLM-00020" num="00020"><claim-text><b>20</b>. The decompression device according to <claim-ref idref="CLM-00015">claim 15</claim-ref>,<claim-text>wherein in a case where fixed length packets are generated in order from the head of a plurality of first codewords included in the first variable length packets stored in the first buffer, the third request generating unit is configured to judge whether each of the first codewords crosses the boundaries of the fixed length packets, and determine the sizes of variable length packets included in the third packet requests according to the results of the judgements, and</claim-text><claim-text>in a case where fixed length packets are generated in order from the head of a plurality of first codewords included in the second variable length packets stored in the second buffer, the fourth request generating unit is configured to determine whether each of the second codewords crosses boundaries of the fixed length packets, and determine the sizes of variable length packets included in the fourth packet requests according to the results of the judgement.</claim-text></claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. The decompression device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>,<claim-text>wherein the first decoding unit is configured to perform variable length decoding on the first codewords, and</claim-text><claim-text>the second decoding unit is configured to perform variable length decoding on the second codewords.</claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The decompression device according to <claim-ref idref="CLM-00014">claim 14</claim-ref>, wherein the sizes of variable length packets included in the third packet requests and the sizes of variable length packets included in the fourth packet requests are selected from a plurality of predetermined sizes of a variable length packet.</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. A decompression device configured to input a compressed stream output from the compression device according to <claim-ref idref="CLM-00010">claim 10</claim-ref>, the decompression device comprising:<claim-text>a demultiplexer configured to cut out the first and second variable length packets from the compressed stream;</claim-text><claim-text>a third request generating unit configured to generate third packet requests including the sizes of variable length packets;</claim-text><claim-text>a first decoding unit configured to perform decoding on each of a plurality of first codewords included in the first variable length packets output from the demultiplexer based on the third packet requests to convert the first codewords to the first symbols;</claim-text><claim-text>a fourth request generating unit configured to generate fourth packet requests including the sizes of variable length packets;</claim-text><claim-text>a second decoding unit configured to perform decoding on each of a plurality of second codewords included in the second variable length packets output from the demultiplexer based on the fourth packet requests to convert the second codewords to the second symbols;</claim-text><claim-text>a notification unit configured to notify at least one of the first and second decoding units that, in a case where a first symbol converted from the first codeword in a first cycle or a second symbol converted from the second codeword in the first cycle is the third symbol, decoding is performed on a third codeword converted from another third symbol in a second cycle following the first cycle; and</claim-text><claim-text>a deinterleaving unit configured to output a symbol string including the first symbols and the second symbols,</claim-text><claim-text>wherein at least one of the first and second decoding units are configured to perform decoding on the first or second codewords according to the notification.</claim-text></claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The decompression device according to <claim-ref idref="CLM-00023">claim 23</claim-ref>, wherein the notification unit is configured to specify at least one of the first and second decoding units that performs decoding on a codeword converted from a symbol that is dependent in the second cycle based on a number of symbols that are converted from the first and second codewords in the first cycle and are a source of dependency.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The decompression device according to <claim-ref idref="CLM-00024">claim 24</claim-ref>, wherein the first and second decoding units are configured to perform decoding on the first and second codewords using decoding tables according to the notifications.</claim-text></claim></claims></us-patent-application>