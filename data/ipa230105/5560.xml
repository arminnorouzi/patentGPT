<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE us-patent-application SYSTEM "us-patent-application-v46-2022-02-17.dtd" [ ]><us-patent-application lang="EN" dtd-version="v4.6 2022-02-17" file="US20230005561A1-20230105.XML" status="PRODUCTION" id="us-patent-application" country="US" date-produced="20221221" date-publ="20230105"><us-bibliographic-data-application lang="EN" country="US"><publication-reference><document-id><country>US</country><doc-number>20230005561</doc-number><kind>A1</kind><date>20230105</date></document-id></publication-reference><application-reference appl-type="utility"><document-id><country>US</country><doc-number>17943156</doc-number><date>20220912</date></document-id></application-reference><us-application-series-code>17</us-application-series-code><classifications-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>01</class><subclass>R</subclass><main-group>31</main-group><subgroup>28</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr><classification-ipcr><ipc-version-indicator><date>20060101</date></ipc-version-indicator><classification-level>A</classification-level><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>42</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source></classification-ipcr></classifications-ipcr><classifications-cpc><main-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>32</subgroup><symbol-position>F</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></main-cpc><further-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>01</class><subclass>R</subclass><main-group>31</main-group><subgroup>2815</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>7</main-group><subgroup>06</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>16</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>29</main-group><subgroup>42</subgroup><symbol-position>L</symbol-position><classification-value>I</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc><classification-cpc><cpc-version-indicator><date>20130101</date></cpc-version-indicator><section>G</section><class>11</class><subclass>C</subclass><main-group>2029</main-group><subgroup>3202</subgroup><symbol-position>L</symbol-position><classification-value>A</classification-value><action-date><date>20230105</date></action-date><generating-office><country>US</country></generating-office><classification-status>B</classification-status><classification-data-source>H</classification-data-source><scheme-origination-code>C</scheme-origination-code></classification-cpc></further-cpc></classifications-cpc><invention-title id="d2e43">MEMORY DEVICE ARCHITECTURE COUPLED TO A SYSTEM-ON-CHIP</invention-title><us-related-documents><continuation><relation><parent-doc><document-id><country>US</country><doc-number>16625318</doc-number><date>20191220</date></document-id><parent-grant-document><document-id><country>US</country><doc-number>11443821</doc-number></document-id></parent-grant-document><parent-pct-document><document-id><country>WO</country><doc-number>PCT/IB2019/000465</doc-number><date>20190531</date></document-id></parent-pct-document></parent-doc><child-doc><document-id><country>US</country><doc-number>17943156</doc-number></document-id></child-doc></relation></continuation></us-related-documents><us-parties><us-applicants><us-applicant sequence="00" app-type="applicant" designation="us-only" applicant-authority-category="assignee"><addressbook><orgname>Micron Technology, Inc.</orgname><address><city>Boise</city><state>ID</state><country>US</country></address></addressbook><residence><country>US</country></residence></us-applicant></us-applicants><inventors><inventor sequence="00" designation="us-only"><addressbook><last-name>Mondello</last-name><first-name>Antonino</first-name><address><city>Messina</city><country>IT</country></address></addressbook></inventor><inventor sequence="01" designation="us-only"><addressbook><last-name>Troia</last-name><first-name>Alberto</first-name><address><city>Munich</city><country>DE</country></address></addressbook></inventor></inventors></us-parties></us-bibliographic-data-application><abstract id="abstract"><p id="p-0001" num="0000">The present disclosure relates to an apparatus comprising a non-volatile memory architecture configured to be coupled to a System-on-Chip (SoC) device. The non-volatile memory device coupled to the SoC having a structurally independent structure linked to the SoC includes a plurality of sub arrays forming a matrix of memory cells with associated decoding and sensing circuitry, sense amplifiers coupled to a corresponding sub array, a data buffer comprising a plurality of JTAG cells coupled to outputs of the sense amplifiers; and a scan-chain connecting together the JTAG cells of the data buffer.</p></abstract><drawings id="DRAWINGS"><figure id="Fig-EMI-D00000" num="00000"><img id="EMI-D00000" he="113.96mm" wi="149.78mm" file="US20230005561A1-20230105-D00000.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00001" num="00001"><img id="EMI-D00001" he="241.55mm" wi="147.32mm" orientation="landscape" file="US20230005561A1-20230105-D00001.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00002" num="00002"><img id="EMI-D00002" he="202.01mm" wi="160.27mm" orientation="landscape" file="US20230005561A1-20230105-D00002.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00003" num="00003"><img id="EMI-D00003" he="245.28mm" wi="160.61mm" orientation="landscape" file="US20230005561A1-20230105-D00003.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00004" num="00004"><img id="EMI-D00004" he="221.91mm" wi="159.94mm" orientation="landscape" file="US20230005561A1-20230105-D00004.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00005" num="00005"><img id="EMI-D00005" he="203.03mm" wi="127.93mm" orientation="landscape" file="US20230005561A1-20230105-D00005.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00006" num="00006"><img id="EMI-D00006" he="203.20mm" wi="142.83mm" orientation="landscape" file="US20230005561A1-20230105-D00006.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00007" num="00007"><img id="EMI-D00007" he="246.21mm" wi="141.39mm" orientation="landscape" file="US20230005561A1-20230105-D00007.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00008" num="00008"><img id="EMI-D00008" he="224.03mm" wi="140.72mm" orientation="landscape" file="US20230005561A1-20230105-D00008.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure><figure id="Fig-EMI-D00009" num="00009"><img id="EMI-D00009" he="237.24mm" wi="164.93mm" orientation="landscape" file="US20230005561A1-20230105-D00009.TIF" alt="embedded image" img-content="drawing" img-format="tif"/></figure></drawings><description id="description"><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="lead"?><heading id="h-0001" level="1">PRIORITY INFORMATION</heading><p id="p-0002" num="0001">This application is a Continuation of U.S. application Ser. No. 16/625,318, filed on Dec. 20, 2019, which is a National Stage Application under 35 U.S.C. &#xa7; 371 of International Application Number PCT/IB2019/000465, filed on May 31, 2019, the contents of which are incorporated herein by reference.</p><?cross-reference-to-related-applications description="Cross Reference To Related Applications" end="tail"?><?summary-of-invention description="Summary of Invention" end="lead"?><heading id="h-0002" level="1">DESCRIPTION</heading><p id="p-0003" num="0002">The present invention relates to memory devices and more particularly to an architecture of flash memory device that is coupled to a System-on-Chip (SoC). More specifically, the invention relates to a scalable and high throughput architecture for a flash array of memory cells.</p><heading id="h-0003" level="1">BACKGROUND</heading><p id="p-0004" num="0003">A flash memory is a type of non-volatile memory that retains stored data without a periodic refresh thanks to the electricity. An important feature of a flash memory is the very fast access time and the fact that it can be erased in blocks instead of one byte at a time. Each erasable block of memory comprises a plurality of non-volatile memory cells arranged in a matrix of rows and columns. Each cell is coupled to an access line and/or a data line. The cells are read, programmed and erased by manipulating the voltages on the access and data lines.</p><p id="p-0005" num="0004">Non-volatile memories retain their contents when power is switched off, making them good choices for storing information that must be retrieved after a system power-cycle. However, a non-volatile memory is typically much slower to read and write to than a volatile memory, and often has more complex writing and erasing procedures; moreover, relatively high voltages must be applied to the array of cells. The read phase is often done using a Finite State Machine (FSM) that regulates all the timings and internal voltages.</p><p id="p-0006" num="0005">Non-volatile Flash memories are today one of the fundamental building blocks in modern electronic systems, including the SoC devices for automotive applications, in particular for RealTime Operating Systems (RTOS). Their performance in terms of speed, consumption, alterability, nonvolatility and the increasing importance of system reconfigurability have pushed up to now for flash memory integration in System-on-Chip devices. However, embedded memories realized with the SoC technologies are becoming larger and larger components in a SoC and it is not effective to increase their size to more than 128 Mbit for instance.</p><p id="p-0007" num="0006">Flash integration introduces many issues both at system and at circuit/technology levels that need a careful design. From the system point of view, several aspects are involved in the choice of the flash memory type to be integrated in the SoC device; the most important ones, depending on the specific applications and requirements, are the yield and then their cost, power consumption, reliability and performance requirements.</p><?summary-of-invention description="Summary of Invention" end="tail"?><?brief-description-of-drawings description="Brief Description of Drawings" end="lead"?><description-of-drawings><heading id="h-0004" level="1">BRIEF DESCRIPTION OF THE DRAWINGS</heading><p id="p-0008" num="0007"><figref idref="DRAWINGS">FIG. <b>1</b></figref> is a schematic and perspective view of a System-on-Chip device according to the prior art and including an embedded memory portion;</p><p id="p-0009" num="0008"><figref idref="DRAWINGS">FIG. <b>2</b></figref> is a schematic and perspective view of a System-on-Chip device according to the present disclosure and including a memory component replacing the embedded memory portion of the prior art devices;</p><p id="p-0010" num="0009"><figref idref="DRAWINGS">FIG. <b>3</b></figref> is a schematic view of the memory component according to the present disclosure;</p><p id="p-0011" num="0010"><figref idref="DRAWINGS">FIG. <b>4</b></figref> is a schematic view of a particular of the memory portion shown in <figref idref="DRAWINGS">FIG. <b>3</b></figref>;</p><p id="p-0012" num="0011"><figref idref="DRAWINGS">FIG. <b>4</b>A</figref> is another schematic view of a further particular of the memory portion shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>;</p><p id="p-0013" num="0012"><figref idref="DRAWINGS">FIG. <b>5</b></figref> is a schematic view of JTAG cell that has been modified according to the present disclosure;</p><p id="p-0014" num="0013"><figref idref="DRAWINGS">FIG. <b>6</b></figref> is a schematic view of a group of address registers for a memory word in the memory portion of the present disclosure;</p><p id="p-0015" num="0014"><figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref> are schematic views of a relationship between address and data registers in the memory portion of the present disclosure.</p></description-of-drawings><?brief-description-of-drawings description="Brief Description of Drawings" end="tail"?><?detailed-description description="Detailed Description" end="lead"?><heading id="h-0005" level="1">DETAILED DESCRIPTION</heading><p id="p-0016" num="0015">On-chip memory is the simplest type of memory for use in many kinds of controllers an FPGA-based embedded system. The memory is implemented in the FPGA itself; consequently, no external connections are necessary on the circuit board.</p><p id="p-0017" num="0016">A field-programmable gate array (FPGA) is an integrated circuit designed to be configured by a customer or a designer after manufacturing.</p><p id="p-0018" num="0017">FPGAs contain an array of programmable logic blocks, and a hierarchy of reconfigurable interconnects that allow the blocks to be wired together, like many logic gates that can be inter-wired in different configurations. Logic blocks can be configured to perform complex combinational functions, or merely simple logic gates like AND and XOR, for example.</p><p id="p-0019" num="0018">In most FPGAs, logic blocks also include memory elements, which may be simple flip-flops or more complete blocks of memory. Many FPGAs can be reprogrammed to implement different logic functions, allowing flexible reconfigurable computing as performed in computer software.</p><p id="p-0020" num="0019">Most modern embedded systems use some type of flash memory devices for non-volatile storage. Embedded systems use memories for a range of tasks, such as the storage of software code and lookup tables (LUTs) for hardware accelerators.</p><p id="p-0021" num="0020">With reference to the figures, apparatuses and methods involving a non-volatile memory device or component and a host device for such a memory device will be disclosed herein.</p><p id="p-0022" num="0021">Descriptions of well-known components and processing techniques are omitted so as to not unnecessarily obscure the embodiments herein. The examples used herein are intended merely to facilitate an understanding of ways in which the embodiments herein may be practised and to further enable those of skill in the art to practice the embodiments herein. Accordingly, the examples should not be construed as limiting the scope of the embodiments herein.</p><p id="p-0023" num="0022">A flash memory is a type of non-volatile memory that retains stored data without a periodic refresh thanks to the electricity. Flash memories can be erased in blocks instead of one byte at a time. Each erasable block of memory comprises a plurality of non-volatile memory cells arranged in a matrix of rows and columns. Each cell is coupled to an access line and/or a data line. The cells are programmed and erased by manipulating the voltages on the access and data lines.</p><p id="p-0024" num="0023">Currently, the technology of the complex semiconductor structures known as System-on-Chips provides the integration of at least an embedded non-volatile memory, for instance up to 128 Mbit.</p><p id="p-0025" num="0024"><figref idref="DRAWINGS">FIG. <b>1</b></figref> shows an example of a known solution of a complex System-on-Chip (SoC) structure <b>100</b> including a large circuit portion occupied by a conventional embedded non-volatile memory portion <b>110</b>.</p><p id="p-0026" num="0025">This embedded non-volatile memory portion <b>110</b> includes an array of Flash memory cells indicated in <figref idref="DRAWINGS">FIG. <b>1</b></figref> as eFlash Array.</p><p id="p-0027" num="0026">In order to read the memory cells of the array, it is provided a dedicated circuit portion <b>130</b> including an optimized Read Finite State Machine that is used to ensure high read performance, such as branch prediction, fetch/pre-fetch, interrupt management, error correction and so on.</p><p id="p-0028" num="0027">In order to write and erase the memory cells of the Array, it is provided a dedicated logic circuit portion <b>140</b> including a simplified Reduced Instruction Set Computer (RISC) controller or a Modify Finite State Machine which is the logic circuit for handling the programming and erasing algorithms.</p><p id="p-0029" num="0028">While being advantageous under many aspects, the System-on-Chips including large memory arrays may suffer for many drawbacks since the memory portion is realized with a process not specifically designed for memories and possible defects of the memory array may compromise the life or the functioning of the whole SoC structure. Moreover, if a SoC has already a flash array as an embedded memory it would be desirable to have also an extended non-volatile memory as a sort of far memory.</p><p id="p-0030" num="0029">According to embodiments of the present disclosure, to improve the performances of the whole SoC structure the old memory portion <b>110</b> has been realized as an independent memory device with a technology specifically dedicated to the manufacturing of flash memory devices. This new memory component is associated and linked to the SoC structure partially overlapping such a structure while the corresponding semiconductor area of the SoC structure has been used for other logic circuits and for providing support for the overlapping structurally independent memory portion.</p><p id="p-0031" num="0030">Therefore, an aim of the present disclosure is that of suggesting a non-volatile memory structure that can improve the access time. In any case, the System-on-Chip and the associated memory device are realized on a respective die obtained by a different lithography process.</p><p id="p-0032" num="0031">As shown in <figref idref="DRAWINGS">FIG. <b>2</b></figref>, according to the present disclosure, we may consider that the memory portion (i.e. the old reference number <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>) has been removed from the SoC structure thus allowing to use the corresponding semiconductor area for other logic circuits and for providing support for a structurally independent memory component <b>210</b> partially overlapping a SoC structure <b>200</b>.</p><p id="p-0033" num="0032">The memory component <b>210</b> is structured as a stand-alone device realized in a single die with a technology specifically dedicated to the manufacturing of flash memory devices. The memory component <b>210</b> is an independent structure but it is strictly associated to the host device or to the SoC structure. More particularly, the memory component <b>210</b> is associated and linked to the SoC structure partially overlapping such a structure while the corresponding semiconductor area of the SoC structure has been used for other logic circuits and for providing support for the partially overlapping structurally independent memory device <b>210</b> for instance through a plurality of pillars <b>230</b> or other similar alternative connections such as ball on grid or with a technology similar to the Flip-Chip technology.</p><p id="p-0034" num="0033">In one embodiment of the present disclosure the disposition of the pads of the memory component <b>210</b> has been realized on a surface of the memory component at the periphery of the structurally independent Flash device. More specifically, the plurality of pads has been realized around the array so that when the memory component <b>210</b> is reversed and its pads are faced to corresponding pads of the SoC structure <b>200</b>. The semiconductor area that in known System-on-Chip devices that in known solution was occupied by an embedded non-volatile memory portion is now dedicated to the housing of the interconnecting pads corresponding to the pads of the memory component <b>210</b>.</p><p id="p-0035" num="0034">More particularly, adopting a Pads Over Logic technology, the pads are built on top of the logic used to communicate with the independent and overlapping memory component <b>210</b>, similarly to the <b>3</b>DNand implementing the circuit under the array (CUA technology).</p><p id="p-0036" num="0035">In order to mount the chip to external circuitry (e.g., a circuit board or another chip or wafer), the chip is flipped over so that its top side faces down and aligned pads-to-pads so that its pads are aligned with matching pads on the external circuit. Then the solder is reflowed to complete the interconnections.</p><p id="p-0037" num="0036">This technology is different from wire bonding, in which the chip is mounted upright and wires are used to interconnect the chip pads to external circuitry.</p><p id="p-0038" num="0037">The final configuration will be a face-to-face interconnection SoC/Flash Array with the sense amplifiers will be connected to the SoC in a Direct Memory Access configuration.</p><p id="p-0039" num="0038">At the end, the memory component <b>210</b> is manufactured according to the user's needs in a range of values that may vary according to the available technology, for instance from at least 128 Mbit to 512 Mbit or even more without any limitation for the applicant's rights. More specifically, the proposed external architecture allows to overpass the limit of the current eFlash (i.e. embedded flash technology) allowing the integration of bigger memory, as it can be 512 Mbit and/or 1 Gbit and/or more depending on the memory technology and technology node.</p><p id="p-0040" num="0039">The result of this solution is the new SoC structure of <figref idref="DRAWINGS">FIG. <b>2</b></figref>, strictly associated with the new structurally independent memory component <b>210</b> that is coupled to the SoC structure <b>200</b>, for instance through a plurality of coupling elements <b>230</b>, such as pillars, as well as through ball-on-grid, flip-chip technology, face-to-face interconnection (coils) and the like. In one embodiment, the coupling elements are pillars <b>230</b>, which are arranged in the semiconductor area <b>220</b> previously dedicated to the embedded memory portion <b>110</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref>.</p><p id="p-0041" num="0040">In one embodiment of the present disclosure, the memory component <b>210</b> for the SoC structure <b>200</b> includes at least a memory portion and a logic circuit portion for interacting with the memory portion and with the SoC structure <b>200</b>, wherein the memory component <b>210</b> is a structurally independent semiconductor device coupled to and partially overlapping the System-on-Chip structure <b>210</b>. A logic circuit <b>240</b> is integrated in the SoC structure <b>200</b> to cooperate with the logic circuit portion of the memory component <b>210</b>.</p><p id="p-0042" num="0041">The coupling between the SoC structure <b>200</b> and the memory component <b>210</b> is made by interconnecting a plurality of respective pads or pin terminals that are faced one toward the other in a circuit layout that keeps the alignment of the pads even if the size of the memory component <b>210</b> is modified.</p><p id="p-0043" num="0042">In one embodiment of the present disclosure, the arrangement of the pads of the memory component <b>210</b> has been realized on a surface of the memory component <b>210</b>. More specifically, the pads are arranged over the array so that, when the memory component <b>210</b> is reversed, its pads are faced to corresponding pads of the SoC structure <b>200</b>. The semiconductor area <b>220</b> that in known System-on-Chip structures <b>100</b> was occupied by the embedded non-volatile memory portion is dedicated to the housing of the interconnecting pads corresponding to the pads of the memory component <b>210</b>.</p><p id="p-0044" num="0043">Even a memory component of a larger size may be supported and interconnected with the pads of the SoC structure <b>200</b>, keeping the position and dislocation of its interconnecting pads.</p><p id="p-0045" num="0044">In the contest of the present disclosure, the SoC structure <b>200</b> has its top side linked with the reversed side of the memory component <b>210</b>, the pads of the SoC structure <b>200</b> being aligned with matching pads of the reversed memory component.</p><p id="p-0046" num="0045">As an alternative, the structurally independent memory component <b>210</b> may be coupled to the SoC structure <b>200</b> in a face-to-face manner. If a face-to-face coupling is adopted, a stack of memory components of the same size could be overlapped realizing a stack structure, wherein each independent component is addressed by the logic circuitry of the SoC structure <b>200</b> though a corresponding identification address.</p><p id="p-0047" num="0046">The semiconductor area <b>220</b> previously occupied by the embedded memory portion <b>110</b> is now used to implement additional functionalities and to prepare the semiconductor device for a Logic Over Pads technology. The expression &#x201c;Logic Over Pads&#x201d; means providing logic circuitry overlapping some connection pads located internally to a first or base layer represented by a complete semiconductor product, i.e. the SoC structure <b>200</b>.</p><p id="p-0048" num="0047">The memory component <b>210</b> thus represents an upper layer coupled and interconnected to the base SoC structure <b>200</b>. The memory component <b>210</b> partially overlaps the SoC structure surface covering at least the semiconductor area <b>220</b> previously occupied by the embedded memory portion <b>110</b>. However, the memory component <b>210</b> has a greater capacity can cover a larger semiconductor area than the semiconductor area <b>220</b>. In this respect, the size of the overlapping memory component <b>210</b> is larger than size of the overlapped semiconductor area <b>220</b> dedicated to the interconnections with such covering memory component <b>210</b>. In other words, the area of the overlapping memory component <b>210</b> is larger than the semiconductor area <b>220</b> of the SoC structure <b>200</b> dedicated to the interconnecting pads for the memory component <b>210</b>.</p><p id="p-0049" num="0048">Moreover, for a better functioning of the SoC structure <b>200</b>, even the logic circuit portion <b>140</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> (which in the System-on-Chip structure <b>100</b> of <figref idref="DRAWINGS">FIG. <b>1</b></figref> included the Modify Finite State Machine or RISC) can be removed and reorganized in association with the memory component <b>210</b>. For supporting the write and erase phases performed on the larger memory component <b>210</b>, a Modify Finite State Machine or RISC <b>240</b> has migrated into the memory component <b>210</b>.</p><p id="p-0050" num="0049">As previously indicated, the memory component <b>210</b> includes the logic circuit portion for interacting with the memory portion and with the SoC structure <b>200</b>.</p><p id="p-0051" num="0050">The separation and optimization of the logic circuit portion further allows to enhance the functionality of the whole SoC structure <b>200</b>, thus obtaining an independent semiconductor memory component <b>210</b> coupled to the SoC structure <b>200</b>.</p><p id="p-0052" num="0051">This independent semiconductor memory component <b>210</b> therefore includes at least the memory portion (preferably a non-volatile memory portion) and the associated modify finite state machine <b>240</b>, both incorporated into a semiconductor product that is coupled to the SoC structure <b>200</b>. In this case, the logic embedded in the SoC is the read logic: fetch of the data, correction of the data, elaboration and execution.</p><p id="p-0053" num="0052">As will appear in the following of the present disclosure, a DMA capability is provided to the memory component <b>210</b> with an interface logic JTAG TAP using modified JTAG cells as well as a flexible TDI, secure access, address buffers and other features for handling the communication with the SoC structure <b>200</b>.</p><p id="p-0054" num="0053">In other words, both the non-volatile memory portion and the associated logic circuit portion are integrated in the independent semiconductor memory component <b>210</b> that is coupled and connected to the SoC structure <b>200</b>.</p><p id="p-0055" num="0054">Now, with more specific reference to the example of <figref idref="DRAWINGS">FIG. <b>3</b></figref>, the main structure of the memory component <b>310</b> according to an embodiment of the present disclosure will be disclosed, wherein the reference <b>310</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> corresponds to the reference <b>210</b> of <figref idref="DRAWINGS">FIG. <b>2</b></figref>.</p><p id="p-0056" num="0055">The memory component <b>310</b> includes at least: an I/O circuit, a micro-sequencer, an array of memory cells <b>320</b>, an array peripheral, a charge pump architecture, address decoders, sense amplifiers and corresponding latches, a service logic to connect all the parts of the memory, and a command user interface, for instance a CUI block.</p><p id="p-0057" num="0056">The array of memory cells <b>320</b> includes non-volatile Flash memory cells. In ne embodiment of the present disclosure, the memory component <b>310</b> implements a Direct Memory Access type of memory to replace the embedded memory array of known SoC devices.</p><p id="p-0058" num="0057">Moreover, a JTAG interface <b>350</b> is adopted for the test of the memory component <b>310</b>, allowing the re-use of the testing tooling. Therefore, the memory component <b>310</b> also comprises a JTAG logic <b>350</b>. This JTAG interface <b>350</b> will be disclosed later in more details with reference to <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0059" num="0058">In more details, each memory array includes at least a JTAG interface <b>350</b> receiving as inputs standard JTAG signals: TMS, TCK, TDI as well as data from a memory page, as shown in <figref idref="DRAWINGS">FIG. <b>6</b></figref>. According to embodiments of the present disclosure, an extended TDI is used as flexible TDI. The flexibility is due to the fact that the number of parallel bits working as TDI are depending from the selected registers, i.e. K (four, in the example) lines for the instruction register, M lines for the address register, N lines for the data register, etc. while TDI comes from the JTAG protocol that uses TDI as name on the signal used to fill the registers.</p><p id="p-0060" num="0059">This JTAG interface <b>350</b> produce as output data, addresses and control signals that are transferred to a memory address decoder <b>340</b> and also to the internal flash controller <b>4300</b> to perform modify, testing, verification operations.</p><p id="p-0061" num="0060">The activity of the decoder <b>340</b> is allowed by charge pumps <b>3430</b> structured to keep secret the voltages and timings to manage the array. The decoding phase drives the data lines while the charge pumps provide the high voltage routed by the address decoder in the selected data lines.</p><p id="p-0062" num="0061">This decoder <b>340</b> addresses the selected memory block. The address decoder is connected to the array to select the proper data lines, i.e. row and column for each super-page. the read, modify and any other operations are using the address decoder to properly address bytes in the memory array.</p><p id="p-0063" num="0062">A memory block is connected to the sense amplifiers and the sense amplifiers of the read interface <b>360</b> are connected to the SoC structure <b>200</b> using the modified JTAG cells. The communication channel between the flash array blocks and the SoC structure <b>200</b> is represented by a control and status bus.</p><p id="p-0064" num="0063">The output of the read interface <b>360</b> is represented by an extended page including the combined string of data cells+address cells+ECC cells. The write operation also drives the three components (data cells+address cells+ECC cells) of the extended page; the ECC and the address cells serves as a safety mechanism to ensure the low probability to make mistakes.</p><p id="p-0065" num="0064">The total amount of Bits would involve in the example disclosed herewith N+M+R Bits, for instance one-hundred-sixty-eight pads per channel in the implementation disclosed herewith.</p><p id="p-0066" num="0065">The memory array <b>320</b> of the memory component <b>310</b> is built as a collection of subarrays. The scan chains can be connected to form a unique shift register to proper test the interconnections.</p><p id="p-0067" num="0066">The advantage of this architecture is that it is very scalable, wherein expanding and/or reducing the density of the final device translates only in mirroring a sub-array and providing the corresponding interconnections in a very scalable manner. The memory can be expanded also increasing the memory size per sub array, without enlarging the number of channels for the SoC.</p><p id="p-0068" num="0067">The Direct Memory Access allows to reduce the final latency that the SoC can experience when reading the data.</p><p id="p-0069" num="0068">Coming now to a closer look to the internal structure of the memory component <b>210</b> (or <b>310</b>) it should be noted that the architecture of the memory array <b>320</b> is built as a collection of sub arrays <b>420</b>, as shown schematically in <figref idref="DRAWINGS">FIG. <b>4</b></figref>, wherein the reference <b>320</b> of <figref idref="DRAWINGS">FIG. <b>3</b></figref> corresponds to the reference <b>420</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0070" num="0069">Each sub array <b>420</b> is independently addressable inside the memory device <b>310</b>. Each sub-array <b>420</b> contains multiple memory blocks <b>460</b> (as depicted in <figref idref="DRAWINGS">FIG. <b>4</b>A</figref>).</p><p id="p-0071" num="0070">In this manner, having smaller sectors if compared to known solutions the access time is significantly reduced and the whole throughput of the memory component is improved. The reduction of the initial latency time is at block level because the row and column lines, the read path associated latency and the external communication have been optimized. The initial latency is the time needed to have the first valid data after the issuing of the address.</p><p id="p-0072" num="0071">In the embodiments disclosed herewith the memory array is structured with a number of sub-arrays <b>420</b> corresponding to the number of cores of the associated SoC structure <b>200</b> and, therefore to the number of corresponding communication channels. For instance, at least four memory sub arrays <b>420</b> one for each communication channel with a corresponding core of the SoC structure <b>200</b> are provided.</p><p id="p-0073" num="0072">The host device or the System-on-Chip (SoC) structure <b>200</b> normally includes more than one core and each core is coupled to a corresponding bus or channel for receiving and transferring data to the memory component <b>210</b> or <b>310</b>. We will make a generic reference to a number of K buses for N data Bits.</p><p id="p-0074" num="0073">Therefore, in the present implementation each sub-array <b>420</b> has access to a corresponding channel to communicate with a corresponding core of the SoC structure <b>200</b>. The outcome of the memory blocks is driven directly to the SoC without using high power output buffers and optimizing the path.</p><p id="p-0075" num="0074">The advantage of this architecture is that it is very scalable, wherein expanding and/or reducing the density of the final device translates only in mirroring a sub-array and generating the connection or increasing the number of blocks of each subarray, that is the available density per core.</p><p id="p-0076" num="0075">In embodiments of the present disclosure each independently addressable location of the blocks of each memory sub array <b>420</b> addresses an extended page <b>450</b> that will be also defined hereinafter with the term super-page intending a double extended page.</p><p id="p-0077" num="0076">As non-limiting example, this extended page <b>450</b> comprises a string including a first group of at least N Bits, for instance one-hundred-twenty-eight (128) Bit for the I/O data exchange with the SoC structure <b>200</b> plus at least a second group of M Bits, for instance twenty-four (24) address Bit and a final or third group of at least R Bits, for instance sixteen (16) ECC Bit. The M address Bit (in the example the twenty-four address Bits) are sufficient to address up to 2 GigaBit of available memory space.</p><p id="p-0078" num="0077">According to the present disclosure, the outputs of the sense amplifiers SA prepare a double extended page at a time, i.e. a super-page <b>450</b> comprising a number of Bits given by the double combination of the above-mentioned three groups of data bits, address bits and ECC bits, according to the size of the memory array.</p><p id="p-0079" num="0078">In the specific but non-limiting example disclosed herewith each extended page <b>450</b> includes at least <b>168</b> Bit obtained by the combination of the above three groups of N+M+R=128+24+16 data, address and ECC Bit and each super-page is formed by a couple of extended pages, i.e. a group of 168&#xd7;2 Bits.</p><p id="p-0080" num="0079">Just to give a non-limiting numeric example, each row of a memory block <b>460</b> includes sixteen extended pages. Therefore, the resulting row includes 2688 Bit coming out from the combination of sixteen extended pages independently addressable and each including 168 Bit or, said differently, the combination of eight super-pages.</p><p id="p-0081" num="0080">In embodiments of the present disclosure the output of a generic sub-array <b>420</b> is formed combining the following sequence: N data cells plus M address cells plus R ECC cells. In this non-limiting example the total amount of Bits would involve 168 pads per channel, as shown in the example <figref idref="DRAWINGS">FIG. <b>6</b></figref>.</p><p id="p-0082" num="0081">The combined string of data cells+address cells+ECC cells allows implementing the safety coverage of the bus according to the standard requirements, because the ECC covers the whole bus communication (data cells+address cells), while the presence of the address cells provide the confidence that the data is coming exactly from the addressed location of the controller.</p><p id="p-0083" num="0082">The sense amplifiers SA of each sub array <b>420</b> are connected with a scan-chain of modified JTAG cells <b>480</b>, connecting together all the output of one sub-array <b>420</b>, as disclosed hereinafter.</p><p id="p-0084" num="0083">Thanks to the memory architecture of the present disclosure it is possible to pass from a parallel mode for retrieving data and addresses from the memory sub arrays <b>420</b> to a serial mode for checking the interconnections between the memory component <b>210</b> and the associated SoC structure <b>200</b>. Moreover, the SoC structure <b>200</b> is entitled to read once &#x2018;1&#x2019; and once &#x2018;0&#x2019; to perform tests and can also analyze the memory outcome, scanning out the data using the scan-chain.</p><p id="p-0085" num="0084">It should be further noted that each subarray <b>420</b> includes address registers connected to data buffer registers, similarly to an architecture used in a DRAM memory device, i.e. DDRX type of DRAMs.</p><p id="p-0086" num="0085">In the following paragraphs of the present disclosure it will be apparent that the outputs of the sense amplifiers SA per sub array <b>420</b> are latched by an internal circuit, so to allow to the sense amplifiers to execute a further internal read operation to prepare the second nibble or group of 168 Bits. This second nibble is transferred to the output of the flash array <b>320</b>, using an additional enabling signal (i.e. an internal clock signal or an ADV signal; ADV=Address Data Valid. in our case the signal is load_data[1:0], depending on the addressed flip flop) that transfers the content read at sense amplifier level to the host device or SoC structure <b>200</b>.</p><p id="p-0087" num="0086">In other words, the internal sense amplifiers prepare two extended pages <b>450</b> and while the first page is ready to be shifted (or also shifted out), internally it is performed a reading phase of the second page associated with the same address. This allows to prepare from five to eight double word (in the present example), that are typical in the RTOS application. In any case, the disclosed structure can be expanded to allow multi-page read while shifting out the already read page.</p><p id="p-0088" num="0087">The sense amplifiers SA are connected directly to a modified JTAG cells <b>480</b>, that will be later disclosed in greater details, so to integrate a JTAG structure and the sense amplifiers in a single circuit portion. This allows reducing as much as possible the delay in propagating the output of the memory array to the SoC.</p><p id="p-0089" num="0088">Just to report a numeric example based on the embodiment disclosed herewith, we may remark that each address in the address buffers is linked to a data buffer, containing for instance N data Bits (i.e. 128 Bits). However, the SoC can need up to 2*N Bits (i.e. 256 Bits, without the address Bits and the ECC) at a time, so the data buffers will be duplicated so to be able to shift, assuming to use the address 0 of the sub array 0:<ul id="ul0001" list-style="none">    <li id="ul0001-0001" num="0089">First pass of the first group of N Bits: Data 0_0_H [127:0]</li>    <li id="ul0001-0002" num="0090">Second pass of the second group of N Bits: Data 0_0_L [127:0]</li></ul></p><p id="p-0090" num="0091">The above indications are for a standard read used for instance for safety purpose and data integrity/correction.</p><p id="p-0091" num="0092">In one embodiment the address buffers are realized making use of modified JTAG cells <b>480</b> as we will see hereinafter.</p><p id="p-0092" num="0093">According to one embodiment of the present disclosure it is disclosed a Flash memory device architecture coupled to a System-on-Chip including a matrix of memory cells with associated decoding and sensing circuitry and having a structurally independent structure coupled and linked to the System-on-Chip and comprising:<ul id="ul0002" list-style="none">    <li id="ul0002-0001" num="0000">    <ul id="ul0003" list-style="none">        <li id="ul0003-0001" num="0094">a plurality of sub arrays forming said matrix of memory cells;</li>        <li id="ul0003-0002" num="0095">sense amplifiers coupled to a corresponding sub array;</li>        <li id="ul0003-0003" num="0096">a data buffer including a plurality of JTAG cells coupled to the outputs of the sense amplifiers;</li>        <li id="ul0003-0004" num="0097">a scan-chain connecting together the JTAG cells of said data buffer.</li>    </ul>    </li></ul></p><p id="p-0093" num="0098">As previously said, the sense amplifiers SA of each sub array <b>420</b> are connected with a scan-chain <b>430</b> (shown with a dotted line in <figref idref="DRAWINGS">FIG. <b>4</b></figref>), connecting together all the output of one sub-array <b>420</b>, as shown in <figref idref="DRAWINGS">FIG. <b>4</b></figref>. Moreover, the sub array scan-chains <b>430</b> can be connected to form a unique chain for quickly checking the integrity of the pads interconnections.</p><p id="p-0094" num="0099">Making reference to <figref idref="DRAWINGS">FIG. <b>4</b></figref> we may consider the scan-chain <b>430</b> as formed by the interconnections of each JTAG Cell <b>480</b>:</p><p id="p-0095" num="0100">PIN is coupled to the output of a sense amplifier; POUT is coupled to the corresponding Data I/O of the System-on-Chip; SIN is the serial IN input connected to the SOUT of the previous sense amplifier while SOUT is the serial output connected to the SIN of the next sense amplifier.</p><p id="p-0096" num="0101">This scan-chain <b>430</b> formed by the interconnected cells <b>480</b>, using the serial input and output, has some advantages:<ul id="ul0004" list-style="none">    <li id="ul0004-0001" num="0000">    <ul id="ul0005" list-style="none">        <li id="ul0005-0001" num="0102">allow testing the successful interconnection between the SoC structure <b>10</b> and the memory component <b>1</b>;</li>        <li id="ul0005-0002" num="0103">allow implementing a digital test of the sense amplifiers,</li>        <li id="ul0005-0003" num="0104">allow working as second level of latches.</li>    </ul>    </li></ul></p><p id="p-0097" num="0105">Moreover, since the cell can work as program load to store the data inside the matrix of memory cells, usually the program load are buffer used to drive the program operation inside the array using it as comparison register.</p><p id="p-0098" num="0106">We will see later in the present disclosure that when the first 128 Bits are ready to be transferred to the parallel output POUT of the sense amplifier, there is an internal latch coupled to the sense amplifier that can trigger the read data of the subsequent section of the remaining 128 Bits.</p><p id="p-0099" num="0107">But let's proceed in good order.</p><p id="p-0100" num="0108">The System-on-Chip (SoC) structure <b>200</b> normally includes more than one core (not shown in the drawings) and each core is coupled to a corresponding bus or channel for receiving and transferring data to the memory component <b>210</b>. Each sub-array <b>420</b> has access to a corresponding channel to communicate with a corresponding core of the SoC.</p><p id="p-0101" num="0109">Each subarray scan-chain <b>430</b> can be serially connected to form a unique chain with the other sub-array and/or it can be treated as a separate scan-chain register.</p><p id="p-0102" num="0110">Each sense amplifier SA of the sub-array <b>420</b> is couple to a JTAG cell <b>480</b>.</p><p id="p-0103" num="0111">In some embodiment of the present disclosure the output of a sub-array <b>420</b> is formed combining the following sequence: data cells plus address cells plus ECC cells. In particular, a sense amplifier SA is configured to provide and output combining data cells, address cells and ECC cells. The total amount of Bits would involve 168 pads per channel in the implementation disclosed herewith, the memory device architecture being thus configured to transmit a super-page through a channel comprising at least 168 pads. In other words, a sub-array of the plurality of independently addressable sub-arrays is thus organized in enlarged pages comprising data, address and ECC bits.</p><p id="p-0104" num="0112">The combined string of data cells+address cells+ECC cells allows to implement the whole safety coverage of the bus according to the standard requirements of the rule ISO26262, because the ECC covers the whole bus communication (data cells+address cells), while the presence of the address cells provides the confidence that the data is coming exactly from the addressed location of the controller, i.e. if ADD==ADD0.</p><p id="p-0105" num="0113">The memory device <b>210</b> can store in a non-volatile manner the initial address that must be read at the boot of the system, that is to say: the whole System-on-Chip or SoC structure with the associated memory component <b>210</b>.</p><p id="p-0106" num="0114">It must also be remarked that a System on Chip of the present disclosure with an associated non-volatile memory portion (but without the volatile RAM or DRAM) works according to an eXecution-in-Place (XiP) method that retrieves the data from the memory.</p><p id="p-0107" num="0115">Generally speaking, eXecution-in-Place means a method of executing programs directly from a non-volatile memory portion rather than copying it into a volatile memory. It is an extension of using shared memory to reduce the total amount of memory required.</p><p id="p-0108" num="0116">The main effect of the XiP method is that the program text consumes no writable memory, saving such a memory for dynamic data, and that all instances of the program are run from a single copy and executing unconditional jumps directly from the non-volatile memory.</p><p id="p-0109" num="0117">The presence of the unconditional jumps justifies the low initial latency time needed the initial latency is the main root cause of loss of performance in this type of configuration since the size of the double word needed between jumps, i.e. from five to eight double words.</p><p id="p-0110" num="0118">However, the non-volatile memory portion <b>210</b> must provide a similar interface to the CPU as a volatile memory and the interface must provide sufficiently fast read operations with a random access pattern; moreover, if there is a file system, it needs to expose appropriate mapping functions and the executed program must be linked to be aware of the appropriate address of the memory portion.</p><p id="p-0111" num="0119">The storage requirements are usually met by using a NOR flash memory portion, which can be addressed as individual words for read operations, although it is a bit slower than normal RAM memories in most setups.</p><p id="p-0112" num="0120">Typically, in SoC including a RAM portion, the first stage boot loader is an XiP program that is linked to run at the address at which the flash chip(s) are mapped at power-up and contains a minimal program to set up the system RAM (which depends on the components used on the individual boards and cannot be generalized enough so that the proper sequence could be embedded into the processor hardware) and then loads the second stage bootloader or the OS kernel into the RAM.</p><p id="p-0113" num="0121">During this initialization, writable memory may not be available, so all computations have to be performed within the processor registers. For this reason, first stage boot loaders tend to be written in assembler language and only do the minimum to provide a normal execution environment for the next program. Some processors either embed a small amount of SRAM in the chip itself or allow using the onboard cache memory as RAM, to make this first stage boot loader easier to write using high-level language.</p><p id="p-0114" num="0122">Well, thanks to the memory architecture of the present disclosure it is possible to pass from a parallel mode for retrieving data and addresses from the memory sub arrays to a serial mode for checking the interconnections.</p><p id="p-0115" num="0123">The transition from the parallel to the serial mode is managed by the JTAG interface <b>300</b>. However, the implementation of these dual mode operations is allowed by the specific structure of a modified JTAG cell <b>480</b> disclosed hereinafter.</p><p id="p-0116" num="0124">Making refence to the schematic example of <figref idref="DRAWINGS">FIG. <b>5</b></figref> it is shown a JTAG cell <b>500</b> modified according to the present disclosure. This cell <b>500</b> corresponds to the schematic cell <b>480</b> of <figref idref="DRAWINGS">FIG. <b>4</b></figref>.</p><p id="p-0117" num="0125">The JTAG cell <b>500</b> has a first parallel input PIN terminal and a first serial input SIN terminal receiving corresponding signals Pin and Sin. Moreover, the JTAG cell <b>500</b> has a first parallel output terminal POUT and a first serial output terminal SOUT. The scan-chain <b>430</b> allows outputting the whole 256 bits, because the first group is read directly from the output while the second group is prepared in the back.</p><p id="p-0118" num="0126">As shown in <figref idref="DRAWINGS">FIG. <b>5</b></figref> the JTAG cell <b>500</b> may be considered a box with two input terminals PIN and SIN and two output terminals POUT and SOUT. The input terminal PIN is a parallel input while the input terminal SIN is a serial input. Similarly, the output terminal POUT is a parallel output while the output terminal SOUT is a serial output.</p><p id="p-0119" num="0127">Thanks to the serial input and output a testing process may be performed to check that no fault connection is present between the memory component <b>210</b> and the associated SoC structure <b>200</b>. Thanks to the parallel input and output the same JTAG cell is used as data buffer for the completing the reading phase through the sense amplifiers SA.</p><p id="p-0120" num="0128">The JTAG cell <b>500</b> comprises a boundary scan basic cell <b>580</b> including a couple of latches <b>501</b> and <b>502</b> and a couple of multiplexer <b>551</b> and <b>552</b>. A first input multiplexer <b>551</b> and a second output multiplexer <b>552</b>.</p><p id="p-0121" num="0129">The boundary scan basic cell <b>580</b> is indicated by the dotted line box in <figref idref="DRAWINGS">FIG. <b>5</b></figref> and is a two inputs cell, with a serial input corresponding to SIN and parallel input corresponding to PIN, and two outputs cell with a serial output corresponding to SOUT and a parallel output corresponding to POUT.</p><p id="p-0122" num="0130">The first multiplexer <b>551</b> receives on a first input &#x201c;0&#x201d; a parallel input signal Pin from the first parallel input terminal PIN and on a second input &#x201c;1&#x201d; a serial input signal Sin from the first serial input terminal SIN.</p><p id="p-0123" num="0131">This first multiplexer <b>551</b> is driven by a control signal ShiftDR and has an output MO<b>1</b>. The cell <b>500</b> has two parallel outputs, i.e. MO<b>1</b> and MO<b>2</b>. When the JTAG clock arrives, the serial output is driven out from the SOUT. SOUT is connected to the JTAG latch close to the multiplexer that receives a selector signal: Mode Controller (serial/parallel). Basically, the output of the latch connected to the input &#x2018;1&#x2019; of this multiplexer MO<b>2</b> is also the SOUT.</p><p id="p-0124" num="0132">The first multiplexer output MO<b>1</b> is connected to a first input of the first latch <b>501</b> that receives on a second input terminal a clock signal ClockDR.</p><p id="p-0125" num="0133">The first latch <b>501</b> is connected in chain to the second latch <b>502</b> with a first output of the first latch <b>501</b> connected to a first input of the second latch <b>502</b>.</p><p id="p-0126" num="0134">It is important to note that the output of the first latch <b>501</b> is also the serial output SOUT of the whole JTAG cell <b>500</b>.</p><p id="p-0127" num="0135">A second input terminal of the second latch <b>502</b> received a signal UpdateDR.</p><p id="p-0128" num="0136">The second latch <b>502</b> has an output connected to an input of the second multiplexer <b>552</b>, in particular to its second input.</p><p id="p-0129" num="0137">This second multiplexer <b>552</b> is controlled by a Mode Control signal that allows to switch the whole JTAG cell <b>500</b> from a serial to a parallel mode and viceversa.</p><p id="p-0130" num="0138">In one embodiment of the present disclosure the JTAG cell <b>500</b> further includes another couple of latches <b>521</b> and <b>522</b> provided between the parallel input Pin and the second multiplexer <b>552</b>. These extra latches <b>521</b> and <b>522</b> are the latching of the direct read, i.e. first group of data Bits, and the shadow one, i.e. second group of <b>128</b> data Bits. In other words, the JTAG cell <b>500</b> includes the boundary scan cell <b>580</b> and at least the further latches <b>521</b> and <b>522</b>.</p><p id="p-0131" num="0139">We will refer hereinafter to these further latches as a third latch <b>521</b> and a fourth latch <b>522</b>. In other embodiments a longer chain of latches may be used.</p><p id="p-0132" num="0140">More particularly, the third latch <b>521</b> and the fourth latch <b>522</b> are connected in a small pipeline configuration with the third latch <b>521</b> receiving on a first input the parallel input signal Pin from the first parallel input terminal PIN and receiving on a second input a signal Data_Load[0] corresponding to a first data load.</p><p id="p-0133" num="0141">The fourth latch <b>522</b> receives on a first input the output of the third latch <b>521</b> and receives on a second input a signal Data_Load[1] corresponding to a subsequent data load.</p><p id="p-0134" num="0142">The output of the fourth latch <b>522</b> is connected to the first input &#x201c;0&#x201d; of the second multiplexer <b>552</b> that produces on its output terminal MO<b>2</b> the output signal for the parallel output terminal POUT.</p><p id="p-0135" num="0143">If compared to a conventional JTAG cell the JTAG cell <b>500</b> of the present disclosure may be considered a modified JTAG cell because of the presence of the two extra latches, the third and fourth latches <b>521</b> and <b>522</b>, beside the presence of the boundary scan cell <b>580</b>.</p><p id="p-0136" num="0144">Now, since this JTAG cell <b>500</b> is coupled to the output of each sense amplifier SA of the memory sub-array <b>420</b> it may be considered a data buffer including a data page, including in this example at least one-hundred-and-twenty-eight (128) Bits for the reading of a combined memory page at a time from the four sub arrays <b>420</b>.</p><p id="p-0137" num="0145">However, as previously reported, the communication channel between the memory component and the SoC structure may need up to 256 Bits at a time (i.e. two combined memory words) and the JTAG cell <b>500</b> has been modified just to duplicate the internal latches to be able to shift the first or higher portion of the 128 Bits of the data to be read with the second or lower portion of the data to be read. Obviously, in this contest &#x201c;higher&#x201d; means the data portion that is loaded before while &#x201c;lower&#x201d; means the data portion that is loaded after.</p><p id="p-0138" num="0146">A skilled in this art will understand that the number of internal latches of the modified JTAG cell <b>500</b> can be augmented in case of need to improve the number of Bits to be transferred to the SoC structure through the communication channel. For example, the above structure may be expanded accordingly to the size of the page required by the particular implementation of the memory controller.</p><p id="p-0139" num="0147">Just to explain the manner in which data are transferred in the data buffer we have to imagine that when a data is loaded in the one of the two latches <b>521</b> or <b>522</b>, the other latch is in a stand-by state but ready to receive the subsequent data portion.</p><p id="p-0140" num="0148">Therefore, the first section including 128 Bit is transferred to the SoC structure for a first data elaboration while the reading phase is not stopped since the other portion of 128 Bits are prepared to be loaded into the latches at the subsequent clock signal.</p><p id="p-0141" num="0149">In this example, each data buffers contains <b>128</b> modified JTAG cells <b>500</b> and the common Data_Load[1:0] are signals generated to allow to capture the whole 256 Bits, that is to say: eight double words DWs according to the proposed implementation (four sub arrays for each double word).</p><p id="p-0142" num="0150">The signal generation is internally controlled when the read operation is performed in a specific data buffer and the signals are controlled by the SoC structure to allow performing read phase using a 128 Bits parallelism.</p><p id="p-0143" num="0151">The main benefit of this memory architecture is that each buffer can contain the whole double words DWs thus leaving free the sense amplifier to read in another memory location.</p><p id="p-0144" num="0152">The presence of the modified JTAG cell <b>500</b> is particular important as output of the sense amplifiers since allows:<ul id="ul0006" list-style="none">    <li id="ul0006-0001" num="0000">    <ul id="ul0007" list-style="none">        <li id="ul0007-0001" num="0153">a. Using the boundary scan as method to check the interconnection between the SoC <b>10</b> and the Flash Array component <b>1</b>;</li>        <li id="ul0007-0002" num="0154">b. Implement the Direct Memory Access connecting directly the sense amplifier with the controller;</li>        <li id="ul0007-0003" num="0155">c. It allows to leave the sense amplifier to prepare the second 256 bit wide page plus the address plus the ECC and written close to the page.</li>    </ul>    </li></ul></p><p id="p-0145" num="0156">Another advantage is given by the possibility to adopt a boundary-scan test architecture including modified JTAG cells <b>500</b> thus obtaining a new and peculiar boundary-scan test architecture like the one shown in the schematic view of <figref idref="DRAWINGS">FIG. <b>5</b></figref>. This is a further advantage since for this test only one output driven is needed and this is obtained using the signal TCK and the data stored in the cells. The scan chain test requires the SoC <b>10</b> to test the output of the scan chain.</p><p id="p-0146" num="0157">A skilled in this art will understand that the number of internal latches of the modified JTAG cell can be augmented in case of need to improve the number of Bits to be transferred to the SoC structure through the communication channel. For example, the above structure may be expanded according to size of the memory device.</p><p id="p-0147" num="0158">Just to explain the manner in which data are transferred in the data buffer we have to imagine that when a data is loaded in the one of the two latches <b>221</b> or <b>222</b>, the other latch is in a stand-by state but ready to receive the subsequent data portion.</p><p id="p-0148" num="0159">Therefore, the first section including 128 Bit is transferred to the SoC structure for a first data elaboration while the reading phase is not stopped since the other portion of 128 Bits are prepared to be loaded into the latches at the subsequent clock signal.</p><p id="p-0149" num="0160">Each data buffers contains <b>128</b> modified JTAG cells <b>500</b> and the common Data_Load[1:0] are signals generated to allow to capture the whole 256 Bits, that is to say: eight double words DWs according to the proposed implementation.</p><p id="p-0150" num="0161">The signal generation is internally controlled when the read operation is performed in a specific data buffer and the signals are controlled by the SoC structure to allow performing read phase using a 128 Bits parallelism.</p><p id="p-0151" num="0162">The main benefit of this memory architecture is that each buffer can contain the whole double words DWs thus leaving free the sense amplifier to read in another memory location.</p><p id="p-0152" num="0163">The IEEE1532 standard enables the In-System Programming using the IEEE1149 as main interface protocol. The need of having a very low initial latency and high throughput is driving the generation of the following scheme for the addressing per sub-array <b>420</b>. The point is that we are not interested in the program data load time and we can use a serial interface using standard IEEE 1149 and 1532. The low latency is driven by the proper size of the block and the optimization in the data path. The data path is, usually, the internal gates that are connecting the array to the output pads</p><p id="p-0153" num="0164">Let's now see the Array Addressing Scheme in JTAG making reference to the examples of <figref idref="DRAWINGS">FIGS. <b>7</b> and <b>8</b></figref>.</p><p id="p-0154" num="0165">Making first reference to <figref idref="DRAWINGS">FIG. <b>7</b></figref>, it is illustrated a sub-array addressing scheme which involve a set of instructions implemented in two ways which are: global address loading and local address loading.</p><p id="p-0155" num="0166">The need of having a very low initial latency and high throughput is driving the generation of the following scheme for the addressing per sub-array. <figref idref="DRAWINGS">FIG. <b>6</b></figref> shows row address buffers and the corresponding row data buffers in the structure similar to DRAM but here we have adopted the super-pages addresses and corresponding data, i.e. 168&#xd7;2.</p><p id="p-0156" num="0167">The implemented set of instructions to address the memory array implemented can be of two types or two levels of address; in other words: a global instruction selects the sub array while a local instruction selects one of the address register (for instance one of the four) associated with the selected subarray.</p><p id="p-0157" num="0168">Global address loading: in this case all the sub array will receive the address in multiple steps using a command, i.e. load_global_address_0, load_global_address_1, etc.</p><p id="p-0158" num="0169">Local address loading: in this case only the addressed register in the selected sub-array will receive the new address, i.e. local_address_0_0, local_address_0_1, local_global_address_1_3, etc.</p><p id="p-0159" num="0170">Each sub-array will contain a set of <b>4</b>x data registers, for instance 4&#xd7;(data+address+ECC registers) corresponding each to an address register. 4&#xd7; data registers are containing a super-page, that is to say: data_H+data_L (having removed the link to the specific address).</p><p id="p-0160" num="0171">The address registers are connected to the address decoder when the read or modify operation are addressing the array. The link is driven by the flash controller in the modify phase while the read finite state machine is linking them when the read is triggered. The address register is loaded using a JTAG finite state machine. when the corresponding instruction, Load_Address is recognized and the Shift_DR state is in the JTAG tap then the TDI is connected to the address register.</p><p id="p-0161" num="0172">A Global_Address_Loadx command is used to load at the same time the nibble of eight bits in the corresponding registers:</p><p id="p-0162" num="0173">Global_Address_Load0 in the instruction register generates the load of the addr0_0. This command, for example, can address the sub array 0; similarly, it happens for the selection of the corresponding sub array address registers, addr1_0, addr2_0 and addr3_0 using three TCK cycles when the finite state machine of the JTAG interface is in the Shift_DR state.</p><p id="p-0163" num="0174">Local_Address_Load0_0 in the instruction register generates the load of the addr0_0, using three TCK cycles when the finite state machine is in the Shift_DR state. This command, as example, addresses the register 0 of the selected subarray. This means that when the ShiftDR is reached the TDI is connected to the input of this shift register and the TDO to the output, if the flexible TDI is used we need only three clock periods Tck to have the whole address inside the selected address register, otherwise we would need 24 clock periods Tck.</p><p id="p-0164" num="0175">These instructions (Global_Address_Load0, Global_Address_Load1, Global_Address_Load2, Global_Address_Load3) allow the pre-load of the address for all the channels implemented in the flash array. Those four instructions are implemented to select one of the four sub array. In a possible implementation with eight cores, we will need eight commands, one for each core or a method to select one of the cores using one command and a sub array address. Therefore, the introduction of the above command permits to optimize the communication between the SoC structure <b>10</b> and the memory component <b>1</b> enhancing the transfer performance to the controller</p><p id="p-0165" num="0176">The instructions (Local_Address_Load0_0, . . . , Local_Address3_3) allow the use of a single core/channel avoiding the need for the controller to manage the whole set of cores when only one is working; the cores are indipendent and they can use their own channel when it is needed. These instructions serves for selecting one of the address register of the selected subarray.</p><p id="p-0166" num="0177">The implementation of this last disclosed mechanisms ensures the optimization of the read operation of the memory.</p><p id="p-0167" num="0178">Making now reference to the example of <figref idref="DRAWINGS">FIG. <b>8</b></figref>, if the SoC structure <b>200</b> needs up to 168&#xd7;2 Bits at a time, the data buffers will be duplicated so to be able to shift, assuming to use the address 0 of the sub array 0:<ul id="ul0008" list-style="none">    <li id="ul0008-0001" num="0179">First pass of the first group of Bits: Data 0_0_H [127:0]+ADD+ECC</li>    <li id="ul0008-0002" num="0180">Second pass of the second group of Bits: Data 0_0_L [127:0]+ADD+ECC</li></ul></p><p id="p-0168" num="0181">The address buffers are made using JTAG Cells.</p><p id="p-0169" num="0182">According to the standard IEEE 1149 and 1532 concerning the JTAG, the protocol IEEE1532 is used as expanded command set to operate in each sub array and the new sub-array structure enables the In-System Programming.</p><p id="p-0170" num="0183">From the foregoing, it will be appreciated that specific embodiments of the invention have been described herein for purposes of illustration, but that various modifications may be made without deviating from the scope of the invention. Accordingly, the invention is not limited except as by the appended claims.</p><?detailed-description description="Detailed Description" end="tail"?></description><claims id="claims"><claim id="CLM-01-20" num="01-20"><claim-text><b>1</b>.-<b>20</b>. (canceled)</claim-text></claim><claim id="CLM-00021" num="00021"><claim-text><b>21</b>. An apparatus, comprising:<claim-text>a plurality of sub arrays of memory cells;</claim-text><claim-text>sense amplifiers coupled to a corresponding sub array of the plurality of sub arrays; and</claim-text><claim-text>a data buffer comprising a plurality of JTAG cells coupled to outputs of the sense amplifiers, wherein each JTAG cell of the plurality of JTAG cells includes:<claim-text>a parallel input (PIN) terminal and a serial input (SIN) terminal; and</claim-text><claim-text>a parallel output terminal (POUT) and a serial output terminal (SOUT); and</claim-text></claim-text><claim-text>wherein the plurality of JTAG cells form a scan-chain, and wherein:<claim-text>the PIN terminal of a first JTAG cell is coupled to an output of a first sense amplifier;</claim-text><claim-text>the POUT terminal of the first JTAG cell is coupled to a corresponding data input/output terminal;</claim-text><claim-text>the SIN terminal of the first JTAG cell is coupled to the SOUT terminal of a second JTAG cell; and</claim-text><claim-text>the SOUT terminal of the first JTAG cell is coupled to the SIN terminal of a third JTAG cell.</claim-text></claim-text></claim-text></claim><claim id="CLM-00022" num="00022"><claim-text><b>22</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the corresponding data input/output terminal is a terminal of a System-on-Chip (SoC).</claim-text></claim><claim id="CLM-00023" num="00023"><claim-text><b>23</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the apparatus is a memory device, and wherein the scan-chain forms a single shift register for testing an interconnection between pads of the memory device and corresponding pads of the SoC.</claim-text></claim><claim id="CLM-00024" num="00024"><claim-text><b>24</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the memory device is a non-volatile memory device.</claim-text></claim><claim id="CLM-00025" num="00025"><claim-text><b>25</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the first JTAG cell comprises at least four latches.</claim-text></claim><claim id="CLM-00026" num="00026"><claim-text><b>26</b>. The apparatus of <claim-ref idref="CLM-00025">claim 25</claim-ref>, wherein the first JTAG cell comprises at least two multiplexers.</claim-text></claim><claim id="CLM-00027" num="00027"><claim-text><b>27</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the first JTAG cell comprises:<claim-text>an input multiplexer;</claim-text><claim-text>a first pair of latches;</claim-text><claim-text>an output multiplexer between the first pair of latches; and</claim-text><claim-text>a second pair of latches.</claim-text></claim-text></claim><claim id="CLM-00028" num="00028"><claim-text><b>28</b>. The apparatus of <claim-ref idref="CLM-00021">claim 21</claim-ref>, wherein the apparatus comprises a memory component structurally independent from a System-on-Chip (SoC) to which it is coupled.</claim-text></claim><claim id="CLM-00029" num="00029"><claim-text><b>29</b>. The apparatus of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the memory component partially overlaps the SoC.</claim-text></claim><claim id="CLM-00030" num="00030"><claim-text><b>30</b>. The apparatus of <claim-ref idref="CLM-00028">claim 28</claim-ref>, wherein the memory component is coupled to the SoC in a face-to-face manner.</claim-text></claim><claim id="CLM-00031" num="00031"><claim-text><b>31</b>. An apparatus, comprising:<claim-text>a plurality of sub arrays of memory cells;</claim-text><claim-text>sense amplifiers coupled to a corresponding sub array of the plurality of sub arrays; and</claim-text><claim-text>a plurality of scan-chain cells forming a scan-chain, wherein the plurality of scan-chain cells are coupled to outputs of the sense amplifiers, and wherein each scan-chain cell of the plurality of scan-chain cells includes:<claim-text>a parallel input (PIN) terminal and a serial input (SIN) terminal; and</claim-text><claim-text>a parallel output terminal (POUT) and a serial output terminal (SOUT); and wherein:</claim-text><claim-text>the PIN terminal of a first scan-chain cell is coupled to an output of a first sense amplifier;</claim-text><claim-text>the POUT terminal of the first scan-chain cell is coupled to a corresponding data input/output terminal;</claim-text><claim-text>the SIN terminal of the first scan-chain cell is coupled to the SOUT terminal of a second scan-chain cell; and</claim-text><claim-text>the SOUT terminal of the first scan-chain cell is coupled to the SIN terminal of a third scan-chain cell.</claim-text></claim-text></claim-text></claim><claim id="CLM-00032" num="00032"><claim-text><b>32</b>. The apparatus of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein each scan-chain cell of the plurality of scan-chain cells comprises:<claim-text>a JTAG cell; and</claim-text><claim-text>a first additional latch.</claim-text></claim-text></claim><claim id="CLM-00033" num="00033"><claim-text><b>33</b>. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein each scan-chain cell of the plurality of scan-chain cells further comprises a second additional latch.</claim-text></claim><claim id="CLM-00034" num="00034"><claim-text><b>34</b>. The apparatus of <claim-ref idref="CLM-00032">claim 32</claim-ref>, wherein the PIN terminal of the first scan-chain cell is coupled to the first additional latch of the first scan-chain cell and to a first multiplexer of the first scan-chain cell.</claim-text></claim><claim id="CLM-00035" num="00035"><claim-text><b>35</b>. The apparatus of <claim-ref idref="CLM-00031">claim 31</claim-ref>, wherein the first scan-chain cell comprises a JTAG cell, a first additional latch, and a second additional latch, and wherein an output of the first additional latch is provided to an input of the second additional latch.</claim-text></claim><claim id="CLM-00036" num="00036"><claim-text><b>36</b>. The apparatus of <claim-ref idref="CLM-00035">claim 35</claim-ref>, wherein the PIN terminal of the first scan-chain cell is coupled to the first additional latch and to a first multiplexer of the first scan-chain cell.</claim-text></claim><claim id="CLM-00037" num="00037"><claim-text><b>37</b>. The apparatus of <claim-ref idref="CLM-00036">claim 36</claim-ref>, wherein an output of the second additional latch is provided to an input of a second multiplexer of the first scan-chain cell.</claim-text></claim><claim id="CLM-00038" num="00038"><claim-text><b>38</b>. An apparatus, comprising:<claim-text>a plurality of sub arrays of memory cells;</claim-text><claim-text>sense amplifiers coupled to a corresponding sub array of the plurality of sub arrays; and</claim-text><claim-text>a plurality of scan-chain cells forming a scan-chain, wherein the plurality of scan-chain cells are coupled to outputs of the sense amplifiers, and wherein each scan-chain cell of the plurality of scan-chain cells includes:<claim-text>a parallel input (PIN) terminal coupled to a first latch and to a first multiplexer;</claim-text><claim-text>a serial input (SIN) terminal coupled to the first multiplexer;</claim-text><claim-text>a second latch coupled to an output of the multiplexer;</claim-text><claim-text>a serial output terminal (SOUT) coupled to an output of the second latch, wherein the output of the second latch is provided to a third latch; and</claim-text><claim-text>a parallel output terminal (POUT) coupled to an output of a second multiplexer, wherein the second multiplexer receives, as inputs, an output from the third latch and an output from a fourth latch.</claim-text></claim-text></claim-text></claim><claim id="CLM-00039" num="00039"><claim-text><b>39</b>. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein an input of the fourth latch is coupled to an output of the first latch.</claim-text></claim><claim id="CLM-00040" num="00040"><claim-text><b>40</b>. The apparatus of <claim-ref idref="CLM-00038">claim 38</claim-ref>, wherein each scan-chain cell of the plurality of scan-chain cells comprises a JTAG cell.</claim-text></claim></claims></us-patent-application>